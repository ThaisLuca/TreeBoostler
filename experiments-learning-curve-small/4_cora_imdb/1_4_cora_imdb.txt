Starting experiment #1 for 4_cora_imdb

Start learning from source dataset

Source train facts examples: 42558
Source train pos examples: 3017
Source train neg examples: 5022

WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then return 0.25375166443991654;  // std dev = 0.489, 6,595.000 (wgt'ed) examples reached here.  /* #neg=3,986 #pos=2,609 */
%   | | else if ( title(F, D), venue(F, B) )
%   | | | then return 0.11529179224236855;  // std dev = 4.479, 105.000 (wgt'ed) examples reached here.  /* #neg=78 #pos=27 */
%   | | | else return 0.31078051404687906;  // std dev = 6.861, 190.000 (wgt'ed) examples reached here.  /* #neg=104 #pos=86 */
%   | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | then if ( title(I, H), venue(I, A) )
%   | | | then return 0.4778672449586677;  // std dev = 4.091, 71.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=44 */
%   | | | else return 0.2775037738091898;  // std dev = 2.747, 31.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=13 */
%   | | else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | | | then return 0.4748156017661778;  // std dev = 3.766, 60.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=37 */
%   | | | else return 0.6142464960751212;  // std dev = 2.750, 41.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=31 */
%   else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | then return 0.045745834324316524;  // std dev = 0.390, 645.000 (wgt'ed) examples reached here.  /* #neg=524 #pos=121 */
%   | else return 0.02093963277393071;  // std dev = 0.369, 301.000 (wgt'ed) examples reached here.  /* #neg=252 #pos=49 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, B) )
%   | | then return 0.2202789253000489;  // std dev = 0.489, 6,595.000 (wgt'ed) examples reached here.  /* #neg=3,986 #pos=2,609 */
%   | | else if ( title(F, D), venue(F, A) )
%   | | | then return 0.0815140714063931;  // std dev = 4.479, 105.000 (wgt'ed) examples reached here.  /* #neg=78 #pos=27 */
%   | | | else return 0.2685926717395528;  // std dev = 6.861, 190.000 (wgt'ed) examples reached here.  /* #neg=104 #pos=86 */
%   | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | then if ( haswordtitle(H, I), haswordauthor(J, I) )
%   | | | then return 0.40767823500744416;  // std dev = 4.399, 82.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=50 */
%   | | | else return 0.14118079077600226;  // std dev = 2.128, 20.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=7 */
%   | | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | | then return 0.41090840610093865;  // std dev = 3.746, 60.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=37 */
%   | | | else return 0.5220782826498102;  // std dev = 2.750, 41.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=31 */
%   else if ( haswordvenue(B, M), haswordtitle(N, M) )
%   | then return 0.04145180608364211;  // std dev = 0.390, 645.000 (wgt'ed) examples reached here.  /* #neg=524 #pos=121 */
%   | else return 0.015443642182564108;  // std dev = 0.369, 301.000 (wgt'ed) examples reached here.  /* #neg=252 #pos=49 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then return 0.18612745546670761;  // std dev = 0.489, 6,595.000 (wgt'ed) examples reached here.  /* #neg=3,986 #pos=2,609 */
%   | | else if ( haswordtitle(D, F), haswordauthor(G, F) )
%   | | | then return 0.1417697000866624;  // std dev = 7.707, 263.000 (wgt'ed) examples reached here.  /* #neg=170 #pos=93 */
%   | | | else return 0.39717383827381164;  // std dev = 2.739, 32.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=20 */
%   | else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | | then return 0.5404027000763211;  // std dev = 0.383, 10.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   | | else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | | | then return 0.2747712680364959;  // std dev = 4.776, 94.000 (wgt'ed) examples reached here.  /* #neg=43 #pos=51 */
%   | | | else return 0.3607505798538436;  // std dev = 4.639, 99.000 (wgt'ed) examples reached here.  /* #neg=33 #pos=66 */
%   else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | then if ( haswordauthor(N, L) )
%   | | then return 0.11757028406529839;  // std dev = 0.444, 63.000 (wgt'ed) examples reached here.  /* #neg=46 #pos=17 */
%   | | else return 0.02747009619082972;  // std dev = 0.383, 582.000 (wgt'ed) examples reached here.  /* #neg=478 #pos=104 */
%   | else return 0.013348050031270688;  // std dev = 0.369, 301.000 (wgt'ed) examples reached here.  /* #neg=252 #pos=49 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, B) )
%   | | then return 0.15376240055336185;  // std dev = 0.489, 6,595.000 (wgt'ed) examples reached here.  /* #neg=3,986 #pos=2,609 */
%   | | else if ( title(F, D), venue(F, A) )
%   | | | then return 0.039355388262597046;  // std dev = 4.479, 105.000 (wgt'ed) examples reached here.  /* #neg=78 #pos=27 */
%   | | | else return 0.19026773487392346;  // std dev = 6.825, 190.000 (wgt'ed) examples reached here.  /* #neg=104 #pos=86 */
%   | else if ( haswordvenue(B, G), haswordauthor(H, G) )
%   | | then return 0.430421647553482;  // std dev = 0.379, 10.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   | | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | | then return 0.20469715327945737;  // std dev = 4.766, 94.000 (wgt'ed) examples reached here.  /* #neg=43 #pos=51 */
%   | | | else return 0.2915806842062897;  // std dev = 4.616, 99.000 (wgt'ed) examples reached here.  /* #neg=33 #pos=66 */
%   else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | then if ( haswordtitle(L, M), haswordauthor(N, M) )
%   | | then return 0.024616823112946263;  // std dev = 0.383, 557.000 (wgt'ed) examples reached here.  /* #neg=457 #pos=100 */
%   | | else return 0.08194295493545135;  // std dev = 0.426, 88.000 (wgt'ed) examples reached here.  /* #neg=67 #pos=21 */
%   | else return 0.009665167234449492;  // std dev = 0.369, 301.000 (wgt'ed) examples reached here.  /* #neg=252 #pos=49 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then return 0.12466581290352849;  // std dev = 0.489, 6,595.000 (wgt'ed) examples reached here.  /* #neg=3,986 #pos=2,609 */
%   | | else if ( title(F, D), venue(F, B) )
%   | | | then return 0.020088475454078554;  // std dev = 4.479, 105.000 (wgt'ed) examples reached here.  /* #neg=78 #pos=27 */
%   | | | else return 0.15190212028896452;  // std dev = 6.822, 190.000 (wgt'ed) examples reached here.  /* #neg=104 #pos=86 */
%   | else if ( haswordvenue(A, G), haswordauthor(H, G) )
%   | | then return 0.35539482267564504;  // std dev = 0.371, 10.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   | | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | | then return 0.1560093136635964;  // std dev = 4.755, 94.000 (wgt'ed) examples reached here.  /* #neg=43 #pos=51 */
%   | | | else return 0.22051000852536418;  // std dev = 4.616, 99.000 (wgt'ed) examples reached here.  /* #neg=33 #pos=66 */
%   else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | then if ( haswordauthor(M, K) )
%   | | then return 0.11059776980295884;  // std dev = 0.443, 63.000 (wgt'ed) examples reached here.  /* #neg=46 #pos=17 */
%   | | else return 0.019183896681844725;  // std dev = 0.383, 582.000 (wgt'ed) examples reached here.  /* #neg=478 #pos=104 */
%   | else return 0.008407660076487985;  // std dev = 0.369, 301.000 (wgt'ed) examples reached here.  /* #neg=252 #pos=49 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, B) )
%   | | then return 0.09945562508083261;  // std dev = 0.489, 6,595.000 (wgt'ed) examples reached here.  /* #neg=3,986 #pos=2,609 */
%   | | else if ( haswordtitle(D, F), haswordauthor(G, F) )
%   | | | then return 0.06050965584022756;  // std dev = 7.677, 263.000 (wgt'ed) examples reached here.  /* #neg=170 #pos=93 */
%   | | | else return 0.24305081924403288;  // std dev = 2.739, 32.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=20 */
%   | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | then if ( title(J, I), venue(J, B) )
%   | | | then return 0.16812683210105986;  // std dev = 4.028, 71.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=44 */
%   | | | else return 0.0062700791899855885;  // std dev = 2.701, 31.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=13 */
%   | | else if ( haswordvenue(A, K), haswordauthor(L, K) )
%   | | | then return 0.4250015949784981;  // std dev = 0.119, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.16950931783171155;  // std dev = 4.580, 97.000 (wgt'ed) examples reached here.  /* #neg=33 #pos=64 */
%   else if ( haswordvenue(A, M), haswordtitle(N, M) )
%   | then return 0.025050551302350024;  // std dev = 0.390, 645.000 (wgt'ed) examples reached here.  /* #neg=524 #pos=121 */
%   | else return 0.005647564486494481;  // std dev = 0.369, 301.000 (wgt'ed) examples reached here.  /* #neg=252 #pos=49 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then return 0.07833317677971688;  // std dev = 0.489, 6,595.000 (wgt'ed) examples reached here.  /* #neg=3,986 #pos=2,609 */
%   | | else if ( title(F, D), venue(F, B) )
%   | | | then return -0.0022064891736643588;  // std dev = 4.479, 105.000 (wgt'ed) examples reached here.  /* #neg=78 #pos=27 */
%   | | | else return 0.09806701314082118;  // std dev = 6.798, 190.000 (wgt'ed) examples reached here.  /* #neg=104 #pos=86 */
%   | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | then if ( title(I, H), venue(I, B) )
%   | | | then return 0.12653355684599676;  // std dev = 4.027, 71.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=44 */
%   | | | else return 0.004767961193701288;  // std dev = 2.701, 31.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=13 */
%   | | else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | | | then return 0.1196854155070248;  // std dev = 3.687, 60.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=37 */
%   | | | else return 0.1587789662063415;  // std dev = 2.740, 41.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=31 */
%   else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | then return 0.021975154541890567;  // std dev = 0.390, 645.000 (wgt'ed) examples reached here.  /* #neg=524 #pos=121 */
%   | else return 0.004122399593250082;  // std dev = 0.369, 301.000 (wgt'ed) examples reached here.  /* #neg=252 #pos=49 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, B) )
%   | | then return 0.06136839292531212;  // std dev = 0.489, 6,595.000 (wgt'ed) examples reached here.  /* #neg=3,986 #pos=2,609 */
%   | | else if ( title(F, D), venue(F, A) )
%   | | | then return -0.016594469267033164;  // std dev = 4.479, 105.000 (wgt'ed) examples reached here.  /* #neg=78 #pos=27 */
%   | | | else return 0.07547068939781854;  // std dev = 6.797, 190.000 (wgt'ed) examples reached here.  /* #neg=104 #pos=86 */
%   | else if ( haswordvenue(B, G), haswordauthor(H, G) )
%   | | then return 0.23813418538913286;  // std dev = 0.365, 10.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   | | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | | then return 0.053043471628890906;  // std dev = 4.703, 94.000 (wgt'ed) examples reached here.  /* #neg=43 #pos=51 */
%   | | | else return 0.09972080496285696;  // std dev = 4.592, 99.000 (wgt'ed) examples reached here.  /* #neg=33 #pos=66 */
%   else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | then if ( haswordtitle(L, M), haswordauthor(N, M) )
%   | | then return 0.011709437286280468;  // std dev = 0.383, 557.000 (wgt'ed) examples reached here.  /* #neg=457 #pos=100 */
%   | | else return 0.06965175602177015;  // std dev = 0.426, 88.000 (wgt'ed) examples reached here.  /* #neg=67 #pos=21 */
%   | else return 0.0020772304537793897;  // std dev = 0.369, 301.000 (wgt'ed) examples reached here.  /* #neg=252 #pos=49 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then return 0.04758918922239844;  // std dev = 0.489, 6,595.000 (wgt'ed) examples reached here.  /* #neg=3,986 #pos=2,609 */
%   | | else if ( haswordtitle(D, F), haswordauthor(G, F) )
%   | | | then return 0.019029506634912555;  // std dev = 7.660, 263.000 (wgt'ed) examples reached here.  /* #neg=170 #pos=93 */
%   | | | else return 0.14116801102103682;  // std dev = 2.739, 32.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=20 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( title(J, I), venue(J, A) )
%   | | | then return 0.10469642723978183;  // std dev = 4.000, 71.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=44 */
%   | | | else return -0.08368427948745656;  // std dev = 2.647, 31.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=13 */
%   | | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | | then return 0.07057882170706349;  // std dev = 3.660, 60.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=37 */
%   | | | else return 0.09805293096260737;  // std dev = 2.740, 41.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=31 */
%   else if ( haswordvenue(A, M), haswordtitle(N, M) )
%   | then return 0.016832616739824894;  // std dev = 0.389, 645.000 (wgt'ed) examples reached here.  /* #neg=524 #pos=121 */
%   | else return 0.0017968677877776603;  // std dev = 0.369, 301.000 (wgt'ed) examples reached here.  /* #neg=252 #pos=49 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, B) )
%   | | then return 0.03680361606095301;  // std dev = 0.489, 6,595.000 (wgt'ed) examples reached here.  /* #neg=3,986 #pos=2,609 */
%   | | else if ( title(F, D), venue(F, A) )
%   | | | then return -0.022799398961743756;  // std dev = 4.479, 105.000 (wgt'ed) examples reached here.  /* #neg=78 #pos=27 */
%   | | | else return 0.04803852179042823;  // std dev = 6.787, 190.000 (wgt'ed) examples reached here.  /* #neg=104 #pos=86 */
%   | else if ( haswordvenue(A, G), haswordauthor(H, G) )
%   | | then return 0.1668963366166653;  // std dev = 0.343, 10.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   | | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | | then return 0.025931777151762977;  // std dev = 4.707, 94.000 (wgt'ed) examples reached here.  /* #neg=43 #pos=51 */
%   | | | else return 0.05950862049717891;  // std dev = 4.568, 99.000 (wgt'ed) examples reached here.  /* #neg=33 #pos=66 */
%   else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | then if ( haswordauthor(M, K) )
%   | | then return 0.08466259813451883;  // std dev = 0.443, 63.000 (wgt'ed) examples reached here.  /* #neg=46 #pos=17 */
%   | | else return 0.0077270946153641966;  // std dev = 0.382, 582.000 (wgt'ed) examples reached here.  /* #neg=478 #pos=104 */
%   | else return -1.6960893412097948E-4;  // std dev = 0.369, 301.000 (wgt'ed) examples reached here.  /* #neg=252 #pos=49 */


Starting fold 1

Target train facts examples: 863
Target train pos examples: 326
Target train neg examples: 10928

Target test facts examples: 215
Target test pos	 examples: 56
Target test neg examples: 3308

Amount of data: 5
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;title(I, H), venue(I, A).;false;false
0;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
0;false;haswordvenue(A, L), haswordtitle(M, L).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordtitle(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordauthor(I, H).;false;true
2;true,false,false;haswordvenue(A, J), haswordtitle(K, J).;false;false
2;false;haswordvenue(A, L), haswordtitle(M, L).;true;false
2;false,true;haswordauthor(N, L).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;title(E, D), venue(E, B).;false;true
3;true,true,false;title(F, D), venue(F, A).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, A).;false;true
4;true,true,false;title(F, D), venue(F, B).;false;false
4;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
4;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
4;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
4;false,true;haswordauthor(M, K).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, B).;false;true
5;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
5;true,false;haswordvenue(B, H), haswordtitle(I, H).;true;true
5;true,false,true;title(J, I), venue(J, B).;false;false
5;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
5;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;title(E, D), venue(E, A).;false;true
6;true,true,false;title(F, D), venue(F, B).;false;false
6;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
6;true,false,true;title(I, H), venue(I, B).;false;false
6;true,false,false;haswordvenue(A, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;title(F, D), venue(F, A).;false;false
7;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
7;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
7;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
7;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;title(E, D), venue(E, A).;false;true
8;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
8;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
8;true,false,true;title(J, I), venue(J, A).;false;false
8;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
8;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, B).;false;true
9;true,true,false;title(F, D), venue(F, A).;false;false
9;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
9;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
9;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
9;false,true;haswordauthor(M, K).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995122;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.3581489350995122;  // std dev = 0.707, 2.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.14185106490048777;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7194734122109545;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( genre(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(F, B) )
%   | | | then return 0.308741135785635;  // std dev = 0.707, 2.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.12544463852839138;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A) )
%   | | then return 0.45571508075038514;  // std dev = 0.787, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.11231637819360639;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.4419288842523902;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( genre(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(F, B) )
%   | | | then return 0.16315700675196543;  // std dev = 0.707, 2.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.10159632948783628;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( genre(B, E) )
%   | | then return 0.337318630188875;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.12579939681763522;  // std dev = 0.707, 2.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.09269127618926096;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.2664742781615753;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( movie(E, B) )
%   | | then if ( genre(B, F) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.09590673022074611;  // std dev = 0.707, 2.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.08518475138839687;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( genre(B, E) )
%   | | then return 0.21771040758628668;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.07261582529187274;  // std dev = 0.707, 2.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.07877675473109173;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.18290781664865952;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( genre(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(F, B) )
%   | | | then return 0.05475845972853041;  // std dev = 0.707, 2.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.07324622576333704;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A) )
%   | | then if ( genre(A, F) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.11849070968776138;  // std dev = 0.720, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.06842697784420272;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.14207420056518894;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( genre(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(F, A) )
%   | | | then return 0.011664563136295936;  // std dev = 0.707, 2.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.0641918400820262;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.226851
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 0.614 seconds
Total inference time: 1.04 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 0.98
   AUC PR    = 0.983333
   CLL	      = -0.217295
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.8
   F1        = 0.888889


Total scoring time: 0.33 seconds
Parameter learned model CLL: -0.217295


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 4], 'true,false,false,true': [0.707, 1, 1], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 4, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 4], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.707, 1, 1], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 4, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.787, 1, 5], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 4, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 4], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.707, 1, 1], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 4, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 4], 'true,false,false,true': [0.707, 1, 1], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 4, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, B)', 'true,false,true': 'genre(B, F)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 0, 4], 'true,false,true,true': [0.0, 0, 0], 'true,false,true,false': [0.707, 1, 1], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 4, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 4], 'true,false,false,true': [0.707, 1, 1], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 4, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 0, 4], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.707, 1, 1], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 4, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'true,false,true': 'genre(A, F)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 0, 0], 'true,false,true,true': [0.0, 0, 0], 'true,false,true,false': [0.72, 1, 5], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 4, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 4], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.707, 1, 1], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 4, 0], 'false,false': [0.0, 0, 0]}]]
[{'': [0.1388888888888887, 0.0], 'true': [nan, 0.1388888888888887], 'true,false': [0.0, 0.25], 'true,false,false': [0.25, nan], 'false': [0.0, nan]}, {'': [0.1208224450883389, 0.0], 'true': [0.0, 0.25000000000000006], 'true,false': [nan, 0.25000000000000006], 'true,false,false': [0.25000000000000006, nan], 'false': [0.0, nan]}, {'': [0.10319411883697631, 0.0], 'true': [nan, 0.10319411883697631], 'true,false': [0.10319411883697631, nan], 'false': [0.0, nan]}, {'': [0.10060305770780263, 0.0], 'true': [0.0, 0.25], 'true,false': [nan, 0.25], 'true,false,false': [0.25, nan], 'false': [0.0, nan]}, {'': [0.09327564135243487, 0.0], 'true': [nan, 0.09327564135243487], 'true,false': [0.0, 0.24999999999999997], 'true,false,false': [0.24999999999999997, nan], 'false': [0.0, nan]}, {'': [0.08979850853567713, 0.0], 'true': [0.0, 0.25], 'true,false': [0.25, nan], 'true,false,true': [nan, 0.25], 'false': [0.0, nan]}, {'': [0.0880116528469312, 0.0], 'true': [nan, 0.0880116528469312], 'true,false': [0.0, 0.24999999999999997], 'true,false,false': [0.24999999999999997, nan], 'false': [0.0, nan]}, {'': [0.08698272392867616, 0.0], 'true': [0.0, 0.25000000000000006], 'true,false': [nan, 0.25000000000000006], 'true,false,false': [0.25000000000000006, nan], 'false': [0.0, nan]}, {'': [0.08632058806362558, 0.0], 'true': [nan, 0.08632058806362558], 'true,false': [0.08632058806362558, nan], 'true,false,true': [nan, 0.08632058806362558], 'false': [0.0, nan]}, {'': [0.08711259411874117, 0.0], 'true': [0.0, 0.25], 'true,false': [nan, 0.25], 'true,false,false': [0.25, nan], 'false': [0.0, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;true;genre(B, D).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;true;genre(B, D).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;true;genre(B, E).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;true;genre(B, D).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(B, E).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;true;genre(B, D).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;true;genre(B, D).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.8581489350995122;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else return 0.3581489350995122;  // std dev = 0.707, 2.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */
%   else return -0.14185106490048777;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7194734122109545;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else return 0.308741135785635;  // std dev = 0.707, 2.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */
%   else return -0.12544463852839138;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.45571508075038514;  // std dev = 0.787, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   else return -0.11231637819360639;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.4419288842523902;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else return 0.16315700675196543;  // std dev = 0.707, 2.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */
%   else return -0.10159632948783628;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.337318630188875;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else return 0.12579939681763522;  // std dev = 0.707, 2.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */
%   else return -0.09269127618926096;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.2664742781615753;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else return 0.09590673022074611;  // std dev = 0.707, 2.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */
%   else return -0.08518475138839687;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.21771040758628668;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else return 0.07261582529187274;  // std dev = 0.707, 2.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */
%   else return -0.07877675473109173;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.18290781664865952;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else return 0.05475845972853041;  // std dev = 0.707, 2.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */
%   else return -0.07324622576333704;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.11849070968776138;  // std dev = 0.720, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   else return -0.06842697784420272;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.14207420056518894;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else return 0.011664563136295936;  // std dev = 0.707, 2.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */
%   else return -0.0641918400820262;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */


Results
   AUC ROC   = 0.999547
   AUC PR    = 0.949153
   CLL	      = -0.236571
   Precision = 0.949153 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.973913


Total learning time: 0.516 seconds
Total inference time: 0.897 seconds
AUC ROC: 0.999547


Results scoring model
   AUC ROC   = 0.98
   AUC PR    = 0.983333
   CLL	      = -0.217295
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.8
   F1        = 0.888889


Total scoring time: 0.309 seconds
Refined model CLL: -0.217295


******************************************
Best model found
******************************************
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.226851
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 1.769 seconds
Total inference time: 1.04 seconds
AUC ROC: 1.0
Total revision time: 1.769
Best scored revision CLL: -0.217295


Dataset: 4_cora_imdb, Fold: 1, Type: Transfer (trRDN-B), Time: 00:00:04
{'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.226851, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 1.769, 'Inference time': 1.04, 'parameter_5': {'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.226851, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 0.614, 'Inference time': 1.04}}


Amount of data: 10
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;title(I, H), venue(I, A).;false;false
0;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
0;false;haswordvenue(A, L), haswordtitle(M, L).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordtitle(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordauthor(I, H).;false;true
2;true,false,false;haswordvenue(A, J), haswordtitle(K, J).;false;false
2;false;haswordvenue(A, L), haswordtitle(M, L).;true;false
2;false,true;haswordauthor(N, L).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;title(E, D), venue(E, B).;false;true
3;true,true,false;title(F, D), venue(F, A).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, A).;false;true
4;true,true,false;title(F, D), venue(F, B).;false;false
4;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
4;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
4;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
4;false,true;haswordauthor(M, K).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, B).;false;true
5;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
5;true,false;haswordvenue(B, H), haswordtitle(I, H).;true;true
5;true,false,true;title(J, I), venue(J, B).;false;false
5;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
5;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;title(E, D), venue(E, A).;false;true
6;true,true,false;title(F, D), venue(F, B).;false;false
6;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
6;true,false,true;title(I, H), venue(I, B).;false;false
6;true,false,false;haswordvenue(A, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;title(F, D), venue(F, A).;false;false
7;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
7;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
7;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
7;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;title(E, D), venue(E, A).;false;true
8;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
8;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
8;true,false,true;title(J, I), venue(J, A).;false;false
8;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
8;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, B).;false;true
9;true,true,false;title(F, D), venue(F, A).;false;false
9;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
9;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
9;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
9;false,true;haswordauthor(M, K).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995123;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.5248156017661788;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.1418510649004878;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7194734122109543;  // std dev = 2.98e-08, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( genre(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(F, B) )
%   | | | then return 0.448295606241962;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.12544463852839138;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A) )
%   | | then return 0.5027292302671041;  // std dev = 0.865, 11.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=10 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.11231637819360639;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.43036758424200905;  // std dev = 2.58e-08, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( genre(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(F, B) )
%   | | | then return 0.2470043000521082;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.10159632948783627;  // std dev = 1.32e-09, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( genre(B, E) )
%   | | then return 0.3294399511962147;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.1859459190232067;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.09269127618926097;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.2611192941188012;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( movie(E, B) )
%   | | then if ( genre(B, F) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.13949579523816905;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.08518475138839687;  // std dev = 3.73e-09, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( genre(B, E) )
%   | | then return 0.21394994175079235;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.1049119730383085;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.07877675473109173;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.1801652442961057;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( genre(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(F, B) )
%   | | | then return 0.07927369334280236;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.07324622576333704;  // std dev = 1.32e-09, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A) )
%   | | then if ( genre(A, F) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.12919557019309688;  // std dev = 0.828, 11.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=10 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.06842697784420272;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.13888412039647413;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( genre(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(F, A) )
%   | | | then return 0.029828343170511456;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.0641918400820262;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.320406
   Precision = 0.059638 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.112563


Total learning time: 0.666 seconds
Total inference time: 0.952 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 0.99
   AUC PR    = 0.990191
   CLL	      = -0.176248
   Precision = 0.909091 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.952381


Total scoring time: 0.342 seconds
Parameter learned model CLL: -0.176248


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 8], 'true,false,false,true': [0.816, 1, 2], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 9, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [2.98e-08, 0, 8], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.816, 1, 2], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 9, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.865, 1, 10], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 9, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [2.58e-08, 0, 8], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.816, 1, 2], 'true,false,false,false': [0.0, 0, 0], 'false,true': [1.32e-09, 9, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 8], 'true,false,false,true': [0.816, 1, 2], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 9, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, B)', 'true,false,true': 'genre(B, F)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 0, 8], 'true,false,true,true': [0.0, 0, 0], 'true,false,true,false': [0.816, 1, 2], 'true,false,false': [0.0, 0, 0], 'false,true': [3.73e-09, 9, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 8], 'true,false,false,true': [0.816, 1, 2], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 9, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 0, 8], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.816, 1, 2], 'true,false,false,false': [0.0, 0, 0], 'false,true': [1.32e-09, 9, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'true,false,true': 'genre(A, F)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 0, 0], 'true,false,true,true': [0.0, 0, 0], 'true,false,true,false': [0.828, 1, 10], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 9, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 8], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.816, 1, 2], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 9, 0], 'false,false': [0.0, 0, 0]}]]
[{'': [0.0826446280991734, -9.25185853854297e-18], 'true': [nan, 0.0826446280991734], 'true,false': [-2.220446049250313e-16, 0.22222222222222224], 'true,false,false': [0.22222222222222224, nan], 'false': [-9.25185853854297e-18, nan]}, {'': [0.07519199167055447, 0.0], 'true': [1.1102230246251565e-16, 0.2222222222222222], 'true,false': [nan, 0.2222222222222222], 'true,false,false': [0.2222222222222222, nan], 'false': [0.0, nan]}, {'': [0.06799452862187882, -1.5419764230904951e-18], 'true': [nan, 0.06799452862187882], 'true,false': [0.06799452862187882, nan], 'false': [-1.5419764230904951e-18, nan]}, {'': [0.06727490569476934, 3.0839528461809902e-18], 'true': [8.326672684688674e-17, 0.22222222222222224], 'true,false': [nan, 0.22222222222222224], 'true,false,false': [0.22222222222222224, nan], 'false': [3.0839528461809902e-18, nan]}, {'': [0.06469013411401454, 0.0], 'true': [nan, 0.06469013411401454], 'true,false': [0.0, 0.2222222222222222], 'true,false,false': [0.2222222222222222, nan], 'false': [0.0, nan]}, {'': [0.0635400656599384, 1.5419764230904951e-18], 'true': [0.0, 0.22222222222222224], 'true,false': [0.22222222222222224, nan], 'true,false,true': [nan, 0.22222222222222224], 'false': [1.5419764230904951e-18, nan]}, {'': [0.06296426463004959, 0.0], 'true': [nan, 0.06296426463004959], 'true,false': [-2.7755575615628914e-17, 0.22222222222222224], 'true,false,false': [0.22222222222222224, nan], 'false': [0.0, nan]}, {'': [0.06262505664978218, 7.709882115452476e-19], 'true': [0.0, 0.2222222222222222], 'true,false': [nan, 0.2222222222222222], 'true,false,false': [0.2222222222222222, nan], 'false': [7.709882115452476e-19, nan]}, {'': [0.06239105973329397, 0.0], 'true': [nan, 0.06239105973329397], 'true,false': [0.06239105973329397, nan], 'true,false,true': [nan, 0.06239105973329397], 'false': [0.0, nan]}, {'': [0.06296503499542103, 7.709882115452476e-19], 'true': [0.0, 0.2222222222222222], 'true,false': [nan, 0.2222222222222222], 'true,false,false': [0.2222222222222222, nan], 'false': [7.709882115452476e-19, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;true;genre(B, D).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;true;genre(B, D).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;true;genre(B, E).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;true;genre(B, D).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(B, E).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;true;genre(B, D).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;true;genre(B, D).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.8581489350995123;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else return 0.5248156017661788;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   else return -0.1418510649004878;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7194734122109543;  // std dev = 2.98e-08, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else return 0.448295606241962;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   else return -0.12544463852839138;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( female(A) )
%   | then return 0.6255315582011204;  // std dev = 0.140, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else return 0.43255647144766624;  // std dev = 0.301, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   else return -0.11231637819360639;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.43587461071560185;  // std dev = 0.058, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else return 0.23255500186184866;  // std dev = 0.778, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   else return -0.10159632948783627;  // std dev = 5.27e-09, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.3333444359745972;  // std dev = 0.052, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else return 0.17491957740427247;  // std dev = 0.777, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   else return -0.09269127618926097;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.263865039957877;  // std dev = 0.045, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else return 0.13133971051571447;  // std dev = 0.777, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   else return -0.08518475138839687;  // std dev = 3.73e-09, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.21593355368461714;  // std dev = 0.039, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else return 0.09893228418126472;  // std dev = 0.778, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   else return -0.07877675473109173;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.18164661032410662;  // std dev = 0.034, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else return 0.0748828131290753;  // std dev = 0.778, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   else return -0.07324622576333704;  // std dev = 2.63e-09, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( female(A) )
%   | then return 0.25633970028554487;  // std dev = 0.237, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else return 0.056456156216644494;  // std dev = 0.259, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   else return -0.06842697784420272;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.1436280263139523;  // std dev = 0.055, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else return 0.01379494991117495;  // std dev = 0.743, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   else return -0.0641918400820262;  // std dev = 2.63e-09, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */


Results
   AUC ROC   = 0.999765
   AUC PR    = 0.983476
   CLL	      = -0.334229
   Precision = 0.056112 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.106262


Total learning time: 0.693 seconds
Total inference time: 0.881 seconds
AUC ROC: 0.999765


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.165413
   Precision = 0.909091 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.952381


Total scoring time: 0.319 seconds
Refined model CLL: -0.165413


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.999765
   AUC PR    = 0.983476
   CLL	      = -0.334229
   Precision = 0.056112 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.106262


Total learning time: 2.02 seconds
Total inference time: 0.881 seconds
AUC ROC: 0.999765
Total revision time: 2.02
Best scored revision CLL: -0.165413


Dataset: 4_cora_imdb, Fold: 1, Type: Transfer (trRDN-B), Time: 00:00:08
{'AUC ROC': 0.999765, 'AUC PR': 0.983476, 'CLL': -0.334229, 'Precision': [0.056112, 0.5], 'Recall': 1.0, 'F1': 0.106262, 'Learning time': 2.02, 'Inference time': 0.881, 'parameter_10': {'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.320406, 'Precision': [0.059638, 0.5], 'Recall': 1.0, 'F1': 0.112563, 'Learning time': 0.666, 'Inference time': 0.952}}


Amount of data: 15
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;title(I, H), venue(I, A).;false;false
0;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
0;false;haswordvenue(A, L), haswordtitle(M, L).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordtitle(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordauthor(I, H).;false;true
2;true,false,false;haswordvenue(A, J), haswordtitle(K, J).;false;false
2;false;haswordvenue(A, L), haswordtitle(M, L).;true;false
2;false,true;haswordauthor(N, L).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;title(E, D), venue(E, B).;false;true
3;true,true,false;title(F, D), venue(F, A).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, A).;false;true
4;true,true,false;title(F, D), venue(F, B).;false;false
4;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
4;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
4;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
4;false,true;haswordauthor(M, K).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, B).;false;true
5;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
5;true,false;haswordvenue(B, H), haswordtitle(I, H).;true;true
5;true,false,true;title(J, I), venue(J, B).;false;false
5;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
5;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;title(E, D), venue(E, A).;false;true
6;true,true,false;title(F, D), venue(F, B).;false;false
6;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
6;true,false,true;title(I, H), venue(I, B).;false;false
6;true,false,false;haswordvenue(A, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;title(F, D), venue(F, A).;false;false
7;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
7;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
7;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
7;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;title(E, D), venue(E, A).;false;true
8;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
8;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
8;true,false,true;title(J, I), venue(J, A).;false;false
8;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
8;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, B).;false;true
9;true,true,false;title(F, D), venue(F, A).;false;false
9;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
9;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
9;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
9;false,true;haswordauthor(M, K).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995123;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.3581489350995122;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.1418510649004878;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7194734122109542;  // std dev = 4.21e-08, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else if ( genre(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(F, B) )
%   | | | then return 0.308741135785635;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.12544463852839138;  // std dev = 7.45e-09, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A) )
%   | | then return 0.4850243031021204;  // std dev = 1.128, 17.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=15 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.11231637819360636;  // std dev = 2.95e-09, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.43471321456227047;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else if ( genre(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(F, B) )
%   | | | then return 0.156578933294651;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.1015963294878363;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( genre(B, E) )
%   | | then return 0.3323978394480437;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.1204613063574288;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.09269127618926096;  // std dev = 1.32e-09, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.2631310809144827;  // std dev = 1.49e-08, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else if ( movie(E, B) )
%   | | then if ( genre(B, F) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.09171155646090635;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.08518475138839686;  // std dev = 7.45e-09, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( genre(B, E) )
%   | | then return 0.21536425529913664;  // std dev = 1.83e-08, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.0693828959030587;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.07877675473109172;  // std dev = 3.73e-09, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.18119783675761925;  // std dev = 7.45e-09, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else if ( genre(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(F, B) )
%   | | | then return 0.05229577729270728;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.07324622576333704;  // std dev = 9.31e-10, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A) )
%   | | then if ( genre(A, F) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.12843260674795665;  // std dev = 1.021, 17.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=15 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.06842697784420272;  // std dev = 2.63e-09, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.13968803194146684;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else if ( genre(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(F, A) )
%   | | | then return 0.007305117641450018;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.06419184008202619;  // std dev = 1.86e-09, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.228491
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 0.67 seconds
Total inference time: 1.028 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 0.991111
   AUC PR    = 0.991634
   CLL	      = -0.176679
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.866667
   F1        = 0.928571


Total scoring time: 0.36 seconds
Parameter learned model CLL: -0.176679


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 13], 'true,false,false,true': [1.0, 2, 2], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 13, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [4.21e-08, 0, 13], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [1.0, 2, 2], 'true,false,false,false': [0.0, 0, 0], 'false,true': [7.45e-09, 13, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [1.128, 2, 15], 'true,false,false': [0.0, 0, 0], 'false,true': [2.95e-09, 13, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 13], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [1.0, 2, 2], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 13, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 13], 'true,false,false,true': [1.0, 2, 2], 'true,false,false,false': [0.0, 0, 0], 'false,true': [1.32e-09, 13, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, B)', 'true,false,true': 'genre(B, F)', 'false': 'movie(G, A)'}, {'true,true': [1.49e-08, 0, 13], 'true,false,true,true': [0.0, 0, 0], 'true,false,true,false': [1.0, 2, 2], 'true,false,false': [0.0, 0, 0], 'false,true': [7.45e-09, 13, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [1.83e-08, 0, 13], 'true,false,false,true': [1.0, 2, 2], 'true,false,false,false': [0.0, 0, 0], 'false,true': [3.73e-09, 13, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, A)'}, {'true,true': [7.45e-09, 0, 13], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [1.0, 2, 2], 'true,false,false,false': [0.0, 0, 0], 'false,true': [9.31e-10, 13, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'true,false,true': 'genre(A, F)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 0, 0], 'true,false,true,true': [0.0, 0, 0], 'true,false,true,false': [1.021, 2, 15], 'true,false,false': [0.0, 0, 0], 'false,true': [2.63e-09, 13, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 13], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [1.0, 2, 2], 'true,false,false,false': [0.0, 0, 0], 'false,true': [1.86e-09, 13, 0], 'false,false': [0.0, 0, 0]}]]
[{'': [0.10380622837370206, -1.2810265668751807e-17], 'true': [nan, 0.10380622837370206], 'true,false': [-2.7328566760003855e-16, 0.25], 'true,false,false': [0.25, nan], 'false': [-1.2810265668751807e-17, nan]}, {'': [0.0891780351234304, 4.270088556250602e-18], 'true': [1.3664283380001927e-16, 0.25], 'true,false': [nan, 0.25], 'true,false,false': [0.25, nan], 'false': [4.270088556250602e-18, nan]}, {'': [0.07490458065000821, 8.540177112501205e-18], 'true': [nan, 0.07490458065000821], 'true,false': [0.07490458065000821, nan], 'false': [8.540177112501205e-18, nan]}, {'': [0.07274273798493164, -2.135044278125301e-18], 'true': [-1.3664283380001927e-16, 0.25], 'true,false': [nan, 0.25], 'true,false,false': [0.25, nan], 'false': [-2.135044278125301e-18, nan]}, {'': [0.0669054978928733, 2.135044278125301e-18], 'true': [nan, 0.0669054978928733], 'true,false': [-5.124106267500723e-17, 0.25], 'true,false,false': [0.25, nan], 'false': [2.135044278125301e-18, nan]}, {'': [0.06411073347723976, 4.270088556250602e-18], 'true': [1.708035422500241e-17, 0.24999999999999994], 'true,false': [0.24999999999999994, nan], 'true,false,true': [nan, 0.24999999999999994], 'false': [4.270088556250602e-18, nan]}, {'': [0.06265795494511629, 1.0675221390626506e-18], 'true': [nan, 0.06265795494511629], 'true,false': [2.5620531337503614e-17, 0.24999999999999994], 'true,false,false': [0.24999999999999994, nan], 'false': [1.0675221390626506e-18, nan]}, {'': [0.061813212901672576, 0.0], 'true': [4.270088556250602e-18, 0.25000000000000006], 'true,false': [nan, 0.25000000000000006], 'true,false,false': [0.25000000000000006, nan], 'false': [0.0, nan]}, {'': [0.061266253969371395, 5.337610695313253e-19], 'true': [nan, 0.061266253969371395], 'true,false': [0.061266253969371395, nan], 'true,false,true': [nan, 0.061266253969371395], 'false': [5.337610695313253e-19, nan]}, {'': [0.061976859072406264, 3.736327486719277e-18], 'true': [0.0, 0.25], 'true,false': [nan, 0.25], 'true,false,false': [0.25, nan], 'false': [3.736327486719277e-18, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;true;genre(B, D).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;true;genre(B, D).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;true;genre(B, E).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;true;genre(B, D).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(B, E).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;true;genre(B, D).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;true;genre(B, D).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.8581489350995123;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else return 0.3581489350995122;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   else return -0.1418510649004878;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7194734122109542;  // std dev = 4.21e-08, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else return 0.308741135785635;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   else return -0.12544463852839138;  // std dev = 7.45e-09, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( female(A) )
%   | then return 0.6357848095512052;  // std dev = 0.220, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return 0.4222074254150016;  // std dev = 0.298, 12.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=10 */
%   else return -0.11231637819360636;  // std dev = 1.05e-08, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.4381821279960799;  // std dev = 0.079, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else return 0.1462155341131276;  // std dev = 0.951, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   else return -0.1015963294878363;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.3349430481803758;  // std dev = 0.071, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else return 0.11221147205234155;  // std dev = 0.949, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   else return -0.09269127618926096;  // std dev = 5.27e-09, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.2649660152524914;  // std dev = 0.061, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else return 0.0853348665024623;  // std dev = 0.948, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   else return -0.08518475138839686;  // std dev = 7.45e-09, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.21671492468147843;  // std dev = 0.053, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else return 0.06454170986847074;  // std dev = 0.948, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   else return -0.07877675473109172;  // std dev = 3.73e-09, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.18222145059010827;  // std dev = 0.047, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else return 0.04865920990843377;  // std dev = 0.947, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   else return -0.07324622576333704;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( female(A) )
%   | then return 0.28552880298095035;  // std dev = 0.410, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return 0.06293527544483297;  // std dev = 0.224, 12.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=10 */
%   else return -0.06842697784420272;  // std dev = 2.63e-09, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.14322108256392513;  // std dev = 0.074, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else return -0.006689993989760501;  // std dev = 0.891, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   else return -0.06419184008202619;  // std dev = 6.97e-09, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */


Results
   AUC ROC   = 0.999765
   AUC PR    = 0.983476
   CLL	      = -0.244262
   Precision = 0.110454 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.198934


Total learning time: 0.72 seconds
Total inference time: 0.942 seconds
AUC ROC: 0.999765


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.164437
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 0.345 seconds
Refined model CLL: -0.164437


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.999765
   AUC PR    = 0.983476
   CLL	      = -0.244262
   Precision = 0.110454 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.198934


Total learning time: 2.0949999999999998 seconds
Total inference time: 0.942 seconds
AUC ROC: 0.999765
Total revision time: 2.0949999999999998
Best scored revision CLL: -0.164437


Dataset: 4_cora_imdb, Fold: 1, Type: Transfer (trRDN-B), Time: 00:00:13
{'AUC ROC': 0.999765, 'AUC PR': 0.983476, 'CLL': -0.244262, 'Precision': [0.110454, 0.5], 'Recall': 1.0, 'F1': 0.198934, 'Learning time': 2.0949999999999998, 'Inference time': 0.942, 'parameter_15': {'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.228491, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 0.67, 'Inference time': 1.028}}


Amount of data: 20
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;title(I, H), venue(I, A).;false;false
0;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
0;false;haswordvenue(A, L), haswordtitle(M, L).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordtitle(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordauthor(I, H).;false;true
2;true,false,false;haswordvenue(A, J), haswordtitle(K, J).;false;false
2;false;haswordvenue(A, L), haswordtitle(M, L).;true;false
2;false,true;haswordauthor(N, L).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;title(E, D), venue(E, B).;false;true
3;true,true,false;title(F, D), venue(F, A).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, A).;false;true
4;true,true,false;title(F, D), venue(F, B).;false;false
4;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
4;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
4;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
4;false,true;haswordauthor(M, K).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, B).;false;true
5;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
5;true,false;haswordvenue(B, H), haswordtitle(I, H).;true;true
5;true,false,true;title(J, I), venue(J, B).;false;false
5;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
5;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;title(E, D), venue(E, A).;false;true
6;true,true,false;title(F, D), venue(F, B).;false;false
6;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
6;true,false,true;title(I, H), venue(I, B).;false;false
6;true,false,false;haswordvenue(A, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;title(F, D), venue(F, A).;false;false
7;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
7;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
7;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
7;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;title(E, D), venue(E, A).;false;true
8;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
8;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
8;true,false,true;title(J, I), venue(J, A).;false;false
8;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
8;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, B).;false;true
9;true,true,false;title(F, D), venue(F, A).;false;false
9;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
9;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
9;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
9;false,true;haswordauthor(M, K).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995123;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.19148226843284552;  // std dev = 1.155, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.1418510649004878;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7194734122109542;  // std dev = 7.30e-08, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | else if ( genre(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(F, B) )
%   | | | then return 0.16653882456488173;  // std dev = 1.155, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.12544463852839138;  // std dev = 7.45e-09, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A) )
%   | | then return 0.4520483882636046;  // std dev = 1.450, 24.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=20 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.11231637819360635;  // std dev = 3.48e-09, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.44283338393466004;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | else if ( genre(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(F, B) )
%   | | | then return 0.06240753161412644;  // std dev = 1.155, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.10159632948783631;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( genre(B, E) )
%   | | then return 0.3379363535131572;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.04990581651560031;  // std dev = 1.155, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.09269127618926094;  // std dev = 2.28e-09, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.26689365832968204;  // std dev = 3.33e-08, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | else if ( movie(E, B) )
%   | | then if ( genre(B, F) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.03966153040147641;  // std dev = 1.155, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.08518475138839685;  // std dev = 1.05e-08, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( genre(B, E) )
%   | | then return 0.2180043550802537;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.031367808918632945;  // std dev = 1.155, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.07877675473109173;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.18312180150950746;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | else if ( genre(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(F, B) )
%   | | | then return 0.02471524893035622;  // std dev = 1.155, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.07324622576333704;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A) )
%   | | then if ( genre(A, F) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.12282881766334319;  // std dev = 1.191, 24.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=20 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.06842697784420272;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.14169421536353616;  // std dev = 1.29e-08, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | else if ( genre(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(F, A) )
%   | | | then return -0.007621115913614492;  // std dev = 1.155, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.06419184008202619;  // std dev = 1.86e-09, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.158084
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 0.757 seconds
Total inference time: 1.015 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 0.99
   AUC PR    = 0.991071
   CLL	      = -0.180681
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.9
   F1        = 0.947368


Total scoring time: 0.385 seconds
Parameter learned model CLL: -0.180681


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 18], 'true,false,false,true': [1.155, 4, 2], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 16, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [7.3e-08, 0, 18], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [1.155, 4, 2], 'true,false,false,false': [0.0, 0, 0], 'false,true': [7.45e-09, 16, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [1.45, 4, 20], 'true,false,false': [0.0, 0, 0], 'false,true': [3.48e-09, 16, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 18], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [1.155, 4, 2], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 16, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 18], 'true,false,false,true': [1.155, 4, 2], 'true,false,false,false': [0.0, 0, 0], 'false,true': [2.28e-09, 16, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, B)', 'true,false,true': 'genre(B, F)', 'false': 'movie(G, A)'}, {'true,true': [3.33e-08, 0, 18], 'true,false,true,true': [0.0, 0, 0], 'true,false,true,false': [1.155, 4, 2], 'true,false,false': [0.0, 0, 0], 'false,true': [1.05e-08, 16, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 18], 'true,false,false,true': [1.155, 4, 2], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 16, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 0, 18], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [1.155, 4, 2], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 16, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'true,false,true': 'genre(A, F)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 0, 0], 'true,false,true,true': [0.0, 0, 0], 'true,false,true,false': [1.191, 4, 20], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 16, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [1.29e-08, 0, 18], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [1.155, 4, 2], 'true,false,false,false': [0.0, 0, 0], 'false,true': [1.86e-09, 16, 0], 'false,false': [0.0, 0, 0]}]]
[{'': [0.13888888888888906, -6.938893903907228e-18], 'true': [nan, 0.13888888888888906], 'true,false': [-2.9605947323337506e-16, 0.22222222222222224], 'true,false,false': [0.22222222222222224, nan], 'false': [-6.938893903907228e-18, nan]}, {'': [0.11288117897093031, 3.469446951953614e-18], 'true': [2.9605947323337506e-16, 0.2222222222222222], 'true,false': [nan, 0.2222222222222222], 'true,false,false': [0.2222222222222222, nan], 'false': [3.469446951953614e-18, nan]}, {'': [0.0875794129823636, 1.214306433183765e-17], 'true': [nan, 0.0875794129823636], 'true,false': [0.0875794129823636, nan], 'false': [1.214306433183765e-17, nan]}, {'': [0.08269127351439377, -6.938893903907228e-18], 'true': [-1.2335811384723962e-16, 0.22222222222222232], 'true,false': [nan, 0.22222222222222232], 'true,false,false': [0.22222222222222232, nan], 'false': [-6.938893903907228e-18, nan]}, {'': [0.071110853726137, 5.204170427930421e-18], 'true': [nan, 0.071110853726137], 'true,false': [-9.868649107779169e-17, 0.22222222222222218], 'true,false,false': [0.22222222222222218, nan], 'false': [5.204170427930421e-18, nan]}, {'': [0.06523701304857694, 6.938893903907228e-18], 'true': [6.167905692361981e-17, 0.22222222222222218], 'true,false': [0.22222222222222218, nan], 'true,false,true': [nan, 0.22222222222222218], 'false': [6.938893903907228e-18, nan]}, {'': [0.06208678062364401, -1.734723475976807e-18], 'true': [nan, 0.06208678062364401], 'true,false': [-3.700743415417188e-17, 0.2222222222222222], 'true,false,false': [0.2222222222222222, nan], 'false': [-1.734723475976807e-18, nan]}, {'': [0.06026042478680766, 0.0], 'true': [-2.4671622769447922e-17, 0.22222222222222218], 'true,false': [nan, 0.22222222222222218], 'true,false,false': [0.22222222222222218, nan], 'false': [0.0, nan]}, {'': [0.05912023106391726, 0.0], 'true': [nan, 0.05912023106391726], 'true,false': [0.05912023106391726, nan], 'true,false,true': [nan, 0.05912023106391726], 'false': [0.0, nan]}, {'': [0.05973588083450656, 3.469446951953614e-18], 'true': [9.25185853854297e-18, 0.22222222222222218], 'true,false': [nan, 0.22222222222222218], 'true,false,false': [0.22222222222222218, nan], 'false': [3.469446951953614e-18, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;true;genre(B, D).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;true;genre(B, D).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;true;genre(B, E).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;true;genre(B, D).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(B, E).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;true;genre(B, D).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;true;genre(B, D).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.8581489350995123;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | else return 0.19148226843284552;  // std dev = 1.155, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   else return -0.1418510649004878;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7194734122109542;  // std dev = 7.30e-08, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | else return 0.16653882456488173;  // std dev = 1.155, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   else return -0.12544463852839138;  // std dev = 7.45e-09, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then if ( female(A) )
%   | | then return 0.6398312609916003;  // std dev = 0.293, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return 0.5553664367462846;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | else return -0.19123909051776852;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   else return -0.11231637819360635;  // std dev = 1.39e-08, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.412983063140947;  // std dev = 0.036, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | else return 0.12121789557850764;  // std dev = 0.986, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   else return -0.10159632948783631;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.31766700309765067;  // std dev = 0.032, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | else return 0.10088701396323409;  // std dev = 0.975, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   else return -0.09269127618926094;  // std dev = 9.13e-09, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.25310822335838434;  // std dev = 0.028, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | else return 0.08298671162512362;  // std dev = 0.967, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   else return -0.08518475138839685;  // std dev = 1.05e-08, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.20830753080363612;  // std dev = 0.024, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | else return 0.0676094434217409;  // std dev = 0.960, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   else return -0.07877675473109173;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.17603772799820855;  // std dev = 0.021, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | else return 0.05465722452830565;  // std dev = 0.955, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   else return -0.07324622576333704;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then if ( female(A) )
%   | | then return 0.29328411119296366;  // std dev = 0.518, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return 0.15432265402836493;  // std dev = 1.49e-08, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | else return -0.2304344475561797;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   else return -0.06842697784420272;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.12988993336709967;  // std dev = 0.042, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | else return 0.045375095706863953;  // std dev = 0.823, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   else return -0.06419184008202619;  // std dev = 7.45e-09, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.108902
   Precision = 0.949153 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.973913


Total learning time: 0.682 seconds
Total inference time: 0.938 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.138193
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.9
   F1        = 0.947368


Total scoring time: 0.354 seconds
Refined model CLL: -0.138193


******************************************
Best model found
******************************************
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.108902
   Precision = 0.949153 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.973913


Total learning time: 2.178 seconds
Total inference time: 0.938 seconds
AUC ROC: 1.0
Total revision time: 2.178
Best scored revision CLL: -0.138193


Dataset: 4_cora_imdb, Fold: 1, Type: Transfer (trRDN-B), Time: 00:00:17
{'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.108902, 'Precision': [0.949153, 0.5], 'Recall': 1.0, 'F1': 0.973913, 'Learning time': 2.178, 'Inference time': 0.938, 'parameter_20': {'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.158084, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 0.757, 'Inference time': 1.015}}


Amount of data: 25
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;title(I, H), venue(I, A).;false;false
0;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
0;false;haswordvenue(A, L), haswordtitle(M, L).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordtitle(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordauthor(I, H).;false;true
2;true,false,false;haswordvenue(A, J), haswordtitle(K, J).;false;false
2;false;haswordvenue(A, L), haswordtitle(M, L).;true;false
2;false,true;haswordauthor(N, L).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;title(E, D), venue(E, B).;false;true
3;true,true,false;title(F, D), venue(F, A).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, A).;false;true
4;true,true,false;title(F, D), venue(F, B).;false;false
4;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
4;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
4;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
4;false,true;haswordauthor(M, K).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, B).;false;true
5;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
5;true,false;haswordvenue(B, H), haswordtitle(I, H).;true;true
5;true,false,true;title(J, I), venue(J, B).;false;false
5;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
5;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;title(E, D), venue(E, A).;false;true
6;true,true,false;title(F, D), venue(F, B).;false;false
6;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
6;true,false,true;title(I, H), venue(I, B).;false;false
6;true,false,false;haswordvenue(A, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;title(F, D), venue(F, A).;false;false
7;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
7;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
7;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
7;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;title(E, D), venue(E, A).;false;true
8;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
8;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
8;true,false,true;title(J, I), venue(J, A).;false;false
8;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
8;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, B).;false;true
9;true,true,false;title(F, D), venue(F, A).;false;false
9;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
9;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
9;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
9;false,true;haswordauthor(M, K).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995122;  // std dev = 0.000, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.30259337954395676;  // std dev = 1.491, 9.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=4 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.14185106490048777;  // std dev = 7.45e-09, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7194734122109543;  // std dev = 7.30e-08, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | else if ( genre(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(F, B) )
%   | | | then return 0.2616318086752123;  // std dev = 1.491, 9.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=4 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.12544463852839138;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A) )
%   | | then return 0.4545381499271804;  // std dev = 1.713, 30.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=25 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.11231637819360636;  // std dev = 3.48e-09, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.4422191678540698;  // std dev = 0.000, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | else if ( genre(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(F, B) )
%   | | | then return 0.1303910261046746;  // std dev = 1.491, 9.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=4 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.10159632948783634;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( genre(B, E) )
%   | | then return 0.337516855252501;  // std dev = 6.32e-08, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.10164544389174912;  // std dev = 1.491, 9.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=4 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.09269127618926093;  // std dev = 2.95e-09, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.26660886273727874;  // std dev = 3.33e-08, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | else if ( movie(E, B) )
%   | | then if ( genre(B, F) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.07839445395321017;  // std dev = 1.491, 9.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=4 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.08518475138839683;  // std dev = 1.39e-08, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( genre(B, E) )
%   | | then return 0.21780474784413112;  // std dev = 0.000, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.060018890453011675;  // std dev = 1.491, 9.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=4 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.07877675473109179;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.18297649970036073;  // std dev = 2.79e-08, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | else if ( genre(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(F, B) )
%   | | | then return 0.04572097953530646;  // std dev = 1.491, 9.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=4 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.07324622576333704;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A) )
%   | | then if ( genre(A, F) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.1204461557274423;  // std dev = 1.522, 30.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=25 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.06842697784420274;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.14188359575448378;  // std dev = 0.000, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | else if ( genre(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(F, A) )
%   | | | then return 0.0052962331678169106;  // std dev = 1.491, 9.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=4 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.0641918400820262;  // std dev = 1.32e-09, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.201823
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 0.808 seconds
Total inference time: 1.022 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 0.984
   AUC PR    = 0.985189
   CLL	      = -0.204906
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.84
   F1        = 0.913043


Total scoring time: 0.38 seconds
Parameter learned model CLL: -0.204906


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 21], 'true,false,false,true': [1.491, 5, 4], 'true,false,false,false': [0.0, 0, 0], 'false,true': [7.45e-09, 20, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [7.3e-08, 0, 21], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [1.491, 5, 4], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 20, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [1.713, 5, 25], 'true,false,false': [0.0, 0, 0], 'false,true': [3.48e-09, 20, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 21], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [1.491, 5, 4], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 20, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [6.32e-08, 0, 21], 'true,false,false,true': [1.491, 5, 4], 'true,false,false,false': [0.0, 0, 0], 'false,true': [2.95e-09, 20, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, B)', 'true,false,true': 'genre(B, F)', 'false': 'movie(G, A)'}, {'true,true': [3.33e-08, 0, 21], 'true,false,true,true': [0.0, 0, 0], 'true,false,true,false': [1.491, 5, 4], 'true,false,false': [0.0, 0, 0], 'false,true': [1.39e-08, 20, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 21], 'true,false,false,true': [1.491, 5, 4], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 20, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, A)'}, {'true,true': [2.79e-08, 0, 21], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [1.491, 5, 4], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 20, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'true,false,true': 'genre(A, F)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 0, 0], 'true,false,true,true': [0.0, 0, 0], 'true,false,true,false': [1.522, 5, 25], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 20, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 21], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [1.491, 5, 4], 'true,false,false,false': [0.0, 0, 0], 'false,true': [1.32e-09, 20, 0], 'false,false': [0.0, 0, 0]}]]
[{'': [0.13888888888888987, 2.7755575615628915e-18], 'true': [nan, 0.13888888888888987], 'true,false': [0.0, 0.2469135802469134], 'true,false,false': [0.2469135802469134, nan], 'false': [2.7755575615628915e-18, nan]}, {'': [0.11809405019899141, 0.0], 'true': [2.5376526277146434e-16, 0.24691358024691354], 'true,false': [nan, 0.24691358024691354], 'true,false,false': [0.24691358024691354, nan], 'false': [0.0, nan]}, {'': [0.09779554206078347, 1.1102230246251566e-17], 'true': [nan, 0.09779554206078347], 'true,false': [0.09779554206078347, nan], 'false': [1.1102230246251566e-17, nan]}, {'': [0.09449379997131886, -1.3877787807814458e-18], 'true': [-1.691768418476429e-16, 0.24691358024691354], 'true,false': [nan, 0.24691358024691354], 'true,false,false': [0.24691358024691354, nan], 'false': [-1.3877787807814458e-18, nan]}, {'': [0.08575749184050996, 6.938893903907228e-18], 'true': [nan, 0.08575749184050996], 'true,false': [1.9032394707859825e-16, 0.24691358024691365], 'true,false,false': [0.24691358024691365, nan], 'false': [6.938893903907228e-18, nan]}, {'': [0.08151325344560077, 9.714451465470119e-18], 'true': [5.2867763077388404e-17, 0.2469135802469136], 'true,false': [0.2469135802469136, nan], 'true,false,true': [nan, 0.2469135802469136], 'false': [9.714451465470119e-18, nan]}, {'': [0.07930231320053073, 0.0], 'true': [nan, 0.07930231320053073], 'true,false': [-5.28677630773884e-18, 0.24691358024691365], 'true,false,false': [0.24691358024691365, nan], 'false': [0.0, nan]}, {'': [0.07803028041538781, -1.3877787807814458e-18], 'true': [3.700743415417188e-17, 0.24691358024691354], 'true,false': [nan, 0.24691358024691354], 'true,false,false': [0.24691358024691354, nan], 'false': [-1.3877787807814458e-18, nan]}, {'': [0.07722432304310775, -2.7755575615628915e-18], 'true': [nan, 0.07722432304310775], 'true,false': [0.07722432304310775, nan], 'true,false,true': [nan, 0.07722432304310775], 'false': [-2.7755575615628915e-18, nan]}, {'': [0.07799185667393418, 2.0816681711721684e-18], 'true': [-7.93016446160826e-18, 0.2469135802469136], 'true,false': [nan, 0.2469135802469136], 'true,false,false': [0.2469135802469136, nan], 'false': [2.0816681711721684e-18, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;true;genre(B, D).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;true;genre(B, D).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;true;genre(B, E).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;true;genre(B, D).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(B, E).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;true;genre(B, D).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;true;genre(B, D).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.8581489350995122;  // std dev = 0.000, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | else if ( female(A), director(B) )
%   | | then return 0.8581489350995122;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return -0.14185106490048777;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else return -0.14185106490048777;  // std dev = 7.45e-09, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7194734122109543;  // std dev = 7.30e-08, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | else if ( female(A), director(B) )
%   | | then return 0.7194734122109545;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return -0.12544463852839138;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else return -0.12544463852839138;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.5553664367462846;  // std dev = 0.000, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | else return -0.11231637819360638;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else return -0.11231637819360636;  // std dev = 1.49e-08, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.41751358415830986;  // std dev = 4.71e-08, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | else if ( female(A), director(B) )
%   | | then return 0.41751358415830997;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return -0.10159632948783633;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else return -0.10159632948783634;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.3207118471601496;  // std dev = 2.98e-08, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | else if ( female(A), director(B) )
%   | | then return 0.32071184716014967;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return -0.09269127618926098;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else return -0.09269127618926093;  // std dev = 1.18e-08, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.2551722425694895;  // std dev = 1.49e-08, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | else if ( female(A), director(B) )
%   | | then return 0.25517224256948945;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return -0.08518475138839687;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else return -0.08518475138839683;  // std dev = 1.39e-08, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.2097577156325356;  // std dev = 0.000, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | else if ( female(A), director(B) )
%   | | then return 0.20975771563253554;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return -0.07877675473109177;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else return -0.07877675473109179;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.17709649774527744;  // std dev = 0.000, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | else if ( female(A), director(B) )
%   | | then return 0.17709649774527736;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return -0.07324622576333704;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else return -0.07324622576333704;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.15274385809367083;  // std dev = 0.000, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | else return -0.06842697784420272;  // std dev = 1.86e-09, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else return -0.06842697784420274;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.13400703000801117;  // std dev = 0.000, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | else if ( female(A), director(B) )
%   | | then return 0.13400703000801117;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return -0.0641918400820262;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else return -0.0641918400820262;  // std dev = 6.45e-09, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.06461
   Precision = 0.949153 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.973913


Total learning time: 0.823 seconds
Total inference time: 0.962 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.094637
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 0.365 seconds
Refined model CLL: -0.094637


******************************************
Best model found
******************************************
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.06461
   Precision = 0.949153 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.973913


Total learning time: 2.3760000000000003 seconds
Total inference time: 0.962 seconds
AUC ROC: 1.0
Total revision time: 2.3760000000000003
Best scored revision CLL: -0.094637


Dataset: 4_cora_imdb, Fold: 1, Type: Transfer (trRDN-B), Time: 00:00:22
{'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.06461, 'Precision': [0.949153, 0.5], 'Recall': 1.0, 'F1': 0.973913, 'Learning time': 2.3760000000000003, 'Inference time': 0.962, 'parameter_25': {'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.201823, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 0.808, 'Inference time': 1.022}}


Starting fold 2

Target train facts examples: 870
Target train pos examples: 324
Target train neg examples: 10813

Target test facts examples: 208
Target test pos	 examples: 58
Target test neg examples: 3423

Amount of data: 5
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;title(I, H), venue(I, A).;false;false
0;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
0;false;haswordvenue(A, L), haswordtitle(M, L).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordtitle(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordauthor(I, H).;false;true
2;true,false,false;haswordvenue(A, J), haswordtitle(K, J).;false;false
2;false;haswordvenue(A, L), haswordtitle(M, L).;true;false
2;false,true;haswordauthor(N, L).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;title(E, D), venue(E, B).;false;true
3;true,true,false;title(F, D), venue(F, A).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, A).;false;true
4;true,true,false;title(F, D), venue(F, B).;false;false
4;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
4;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
4;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
4;false,true;haswordauthor(M, K).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, B).;false;true
5;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
5;true,false;haswordvenue(B, H), haswordtitle(I, H).;true;true
5;true,false,true;title(J, I), venue(J, B).;false;false
5;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
5;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;title(E, D), venue(E, A).;false;true
6;true,true,false;title(F, D), venue(F, B).;false;false
6;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
6;true,false,true;title(I, H), venue(I, B).;false;false
6;true,false,false;haswordvenue(A, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;title(F, D), venue(F, A).;false;false
7;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
7;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
7;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
7;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;title(E, D), venue(E, A).;false;true
8;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
8;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
8;true,false,true;title(J, I), venue(J, A).;false;false
8;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
8;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, B).;false;true
9;true,true,false;title(F, D), venue(F, A).;false;false
9;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
9;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
9;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
9;false,true;haswordauthor(M, K).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995122;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.19148226843284552;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.14185106490048777;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7194734122109545;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( genre(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(F, B) )
%   | | | then return 0.16653882456488175;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.12544463852839138;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A) )
%   | | then return 0.3782497822045475;  // std dev = 0.980, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.11231637819360639;  // std dev = 1.86e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.46111067406900974;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( genre(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(F, B) )
%   | | | then return 0.07673587403226971;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.1015963294878363;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( genre(B, E) )
%   | | then return 0.3504679762844388;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.061826957500183556;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.09269127618926094;  // std dev = 1.32e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.27538890734350807;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( movie(E, B) )
%   | | then if ( genre(B, F) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.049426936375853235;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.08518475138839687;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( genre(B, E) )
%   | | then return 0.2239420838877325;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.039271867130619253;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.07877675473109173;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.18743226179768668;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( genre(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(F, B) )
%   | | | then return 0.03105404066395127;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.07324622576333704;  // std dev = 9.31e-10, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A) )
%   | | then if ( genre(A, F) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.1022221042556346;  // std dev = 0.836, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.06842697784420272;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.1472372505417332;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( genre(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(F, A) )
%   | | | then return 0.0022282875587090376;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.0641918400820262;  // std dev = 9.31e-10, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.148239
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 0.683 seconds
Total inference time: 0.993 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 0.96
   AUC PR    = 0.971429
   CLL	      = -0.265224
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.8
   F1        = 0.888889


Total scoring time: 0.322 seconds
Parameter learned model CLL: -0.265224


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 4], 'true,false,false,true': [0.816, 2, 1], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 3, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 4], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.816, 2, 1], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 3, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.98, 2, 5], 'true,false,false': [0.0, 0, 0], 'false,true': [1.86e-09, 3, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 4], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.816, 2, 1], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 3, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 4], 'true,false,false,true': [0.816, 2, 1], 'true,false,false,false': [0.0, 0, 0], 'false,true': [1.32e-09, 3, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, B)', 'true,false,true': 'genre(B, F)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 0, 4], 'true,false,true,true': [0.0, 0, 0], 'true,false,true,false': [0.816, 2, 1], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 3, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 4], 'true,false,false,true': [0.816, 2, 1], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 3, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 0, 4], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.816, 2, 1], 'true,false,false,false': [0.0, 0, 0], 'false,true': [9.31e-10, 3, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'true,false,true': 'genre(A, F)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 0, 0], 'true,false,true,true': [0.0, 0, 0], 'true,false,true,false': [0.836, 2, 5], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 3, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 4], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.816, 2, 1], 'true,false,false,false': [0.0, 0, 0], 'false,true': [9.31e-10, 3, 0], 'false,false': [0.0, 0, 0]}]]
[{'': [0.20408163265306106, 0.0], 'true': [nan, 0.20408163265306106], 'true,false': [0.0, 0.22222222222222224], 'true,false,false': [0.22222222222222224, nan], 'false': [0.0, nan]}, {'': [0.1701123788826666, 0.0], 'true': [0.0, 0.2222222222222222], 'true,false': [nan, 0.2222222222222222], 'true,false,false': [0.2222222222222222, nan], 'false': [0.0, nan]}, {'': [0.13706517432617127, 2.3129646346357427e-18], 'true': [nan, 0.13706517432617127], 'true,false': [0.13706517432617127, nan], 'false': [2.3129646346357427e-18, nan]}, {'': [0.1314202961123688, -1.1564823173178713e-18], 'true': [0.0, 0.22222222222222224], 'true,false': [nan, 0.22222222222222224], 'true,false,false': [0.22222222222222224, nan], 'false': [-1.1564823173178713e-18, nan]}, {'': [0.1156414350890698, 2.3129646346357427e-18], 'true': [nan, 0.1156414350890698], 'true,false': [0.0, 0.22222222222222224], 'true,false,false': [0.22222222222222224, nan], 'false': [2.3129646346357427e-18, nan]}, {'': [0.10774229417448396, 0.0], 'true': [0.0, 0.22222222222222218], 'true,false': [0.22222222222222218, nan], 'true,false,true': [nan, 0.22222222222222218], 'false': [0.0, nan]}, {'': [0.103589872125553, 0.0], 'true': [nan, 0.103589872125553], 'true,false': [0.0, 0.2222222222222222], 'true,false,false': [0.2222222222222222, nan], 'false': [0.0, nan]}, {'': [0.10122686618787927, 1.1564823173178713e-18], 'true': [0.0, 0.2222222222222222], 'true,false': [nan, 0.2222222222222222], 'true,false,false': [0.2222222222222222, nan], 'false': [1.1564823173178713e-18, nan]}, {'': [0.09977276603057218, -5.782411586589357e-19], 'true': [nan, 0.09977276603057218], 'true,false': [0.09977276603057218, nan], 'true,false,true': [nan, 0.09977276603057218], 'false': [-5.782411586589357e-19, nan]}, {'': [0.1003877114043186, 5.782411586589357e-19], 'true': [0.0, 0.22222222222222224], 'true,false': [nan, 0.22222222222222224], 'true,false,false': [0.22222222222222224, nan], 'false': [5.782411586589357e-19, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;true;genre(B, D).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;true;genre(B, D).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;true;genre(B, E).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;true;genre(B, D).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(B, E).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;true;genre(B, D).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;true;genre(B, D).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.8581489350995122;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else return 0.19148226843284552;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   else return -0.14185106490048777;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7194734122109545;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else return 0.16653882456488175;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   else return -0.12544463852839138;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( female(A) )
%   | then return 0.6187150549302712;  // std dev = 0.219, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else return 0.05762941857024914;  // std dev = 0.610, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   else return -0.11231637819360639;  // std dev = 2.63e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.43691801479152237;  // std dev = 0.120, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else return 0.09810200111830869;  // std dev = 0.731, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   else return -0.1015963294878363;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.3353115009629088;  // std dev = 0.112, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else return 0.08025513266343574;  // std dev = 0.727, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   else return -0.09269127618926094;  // std dev = 2.63e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.26599408006840597;  // std dev = 0.100, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else return 0.06501331195453448;  // std dev = 0.724, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   else return -0.08518475138839687;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.21792468349211525;  // std dev = 0.088, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else return 0.05225385763513668;  // std dev = 0.721, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   else return -0.07877675473109173;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.18341864726839405;  // std dev = 0.078, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else return 0.041738528464361914;  // std dev = 0.719, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   else return -0.07324622576333704;  // std dev = 1.86e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( female(A) )
%   | then return 0.2579373864165801;  // std dev = 0.417, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else return -0.10039161430598027;  // std dev = 0.390, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   else return -0.06842697784420272;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.14128653763121354;  // std dev = 0.109, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else return 0.024936273934264563;  // std dev = 0.651, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   else return -0.0641918400820262;  // std dev = 1.32e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */


Results
   AUC ROC   = 0.999617
   AUC PR    = 0.971227
   CLL	      = -0.149021
   Precision = 0.935484 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.966667


Total learning time: 0.599 seconds
Total inference time: 0.809 seconds
AUC ROC: 0.999617


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.209296
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.8
   F1        = 0.888889


Total scoring time: 0.312 seconds
Refined model CLL: -0.209296


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.999617
   AUC PR    = 0.971227
   CLL	      = -0.149021
   Precision = 0.935484 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.966667


Total learning time: 1.9160000000000001 seconds
Total inference time: 0.809 seconds
AUC ROC: 0.999617
Total revision time: 1.9160000000000001
Best scored revision CLL: -0.209296


Dataset: 4_cora_imdb, Fold: 2, Type: Transfer (trRDN-B), Time: 00:00:26
{'AUC ROC': 0.999617, 'AUC PR': 0.971227, 'CLL': -0.149021, 'Precision': [0.935484, 0.5], 'Recall': 1.0, 'F1': 0.966667, 'Learning time': 1.9160000000000001, 'Inference time': 0.809, 'parameter_5': {'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.148239, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 0.683, 'Inference time': 0.993}}


Amount of data: 10
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;title(I, H), venue(I, A).;false;false
0;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
0;false;haswordvenue(A, L), haswordtitle(M, L).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordtitle(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordauthor(I, H).;false;true
2;true,false,false;haswordvenue(A, J), haswordtitle(K, J).;false;false
2;false;haswordvenue(A, L), haswordtitle(M, L).;true;false
2;false,true;haswordauthor(N, L).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;title(E, D), venue(E, B).;false;true
3;true,true,false;title(F, D), venue(F, A).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, A).;false;true
4;true,true,false;title(F, D), venue(F, B).;false;false
4;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
4;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
4;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
4;false,true;haswordauthor(M, K).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, B).;false;true
5;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
5;true,false;haswordvenue(B, H), haswordtitle(I, H).;true;true
5;true,false,true;title(J, I), venue(J, B).;false;false
5;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
5;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;title(E, D), venue(E, A).;false;true
6;true,true,false;title(F, D), venue(F, B).;false;false
6;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
6;true,false,true;title(I, H), venue(I, B).;false;false
6;true,false,false;haswordvenue(A, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;title(F, D), venue(F, A).;false;false
7;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
7;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
7;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
7;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;title(E, D), venue(E, A).;false;true
8;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
8;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
8;true,false,true;title(J, I), venue(J, A).;false;false
8;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
8;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, B).;false;true
9;true,true,false;title(F, D), venue(F, A).;false;false
9;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
9;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
9;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
9;false,true;haswordauthor(M, K).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995123;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.2581489350995122;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.1418510649004878;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7194734122109543;  // std dev = 2.98e-08, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( genre(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(F, B) )
%   | | | then return 0.22373365448410584;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.12544463852839138;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A) )
%   | | then return 0.41440562344290477;  // std dev = 1.270, 13.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=10 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.11231637819360639;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.45213998581002995;  // std dev = 2.58e-08, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( genre(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(F, B) )
%   | | | then return 0.11171167833049375;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.10159632948783627;  // std dev = 1.86e-09, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( genre(B, E) )
%   | | then return 0.34430497579425084;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.08826063126898408;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.09269127618926097;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.2712138075990018;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( movie(E, B) )
%   | | then if ( genre(B, F) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.06901634036082047;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.08518475138839687;  // std dev = 2.63e-09, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( genre(B, E) )
%   | | then return 0.22102782290567807;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.05355964640388731;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.07877675473109173;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.18531951305460392;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( genre(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(F, B) )
%   | | | then return 0.04133508154484875;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.07324622576333704;  // std dev = 9.31e-10, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A) )
%   | | then if ( genre(A, F) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.11003782695333858;  // std dev = 1.118, 13.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=10 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.06842697784420272;  // std dev = 2.63e-09, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.1447888525281511;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( genre(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(F, A) )
%   | | | then return 0.005823660264997121;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.0641918400820262;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.172545
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 0.651 seconds
Total inference time: 0.989 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 0.97
   AUC PR    = 0.974176
   CLL	      = -0.244763
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.8
   F1        = 0.888889


Total scoring time: 0.341 seconds
Parameter learned model CLL: -0.244763


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 8], 'true,false,false,true': [1.095, 3, 2], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 7, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [2.98e-08, 0, 8], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [1.095, 3, 2], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 7, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [1.27, 3, 10], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 7, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [2.58e-08, 0, 8], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [1.095, 3, 2], 'true,false,false,false': [0.0, 0, 0], 'false,true': [1.86e-09, 7, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 8], 'true,false,false,true': [1.095, 3, 2], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 7, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, B)', 'true,false,true': 'genre(B, F)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 0, 8], 'true,false,true,true': [0.0, 0, 0], 'true,false,true,false': [1.095, 3, 2], 'true,false,false': [0.0, 0, 0], 'false,true': [2.63e-09, 7, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 8], 'true,false,false,true': [1.095, 3, 2], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 7, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 0, 8], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [1.095, 3, 2], 'true,false,false,false': [0.0, 0, 0], 'false,true': [9.31e-10, 7, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'true,false,true': 'genre(A, F)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 0, 0], 'true,false,true,true': [0.0, 0, 0], 'true,false,true,false': [1.118, 3, 10], 'true,false,false': [0.0, 0, 0], 'false,true': [2.63e-09, 7, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 8], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [1.095, 3, 2], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 7, 0], 'false,false': [0.0, 0, 0]}]]
[{'': [0.1775147928994082, -7.93016446160826e-18], 'true': [nan, 0.1775147928994082], 'true,false': [-2.220446049250313e-16, 0.24000000000000005], 'true,false,false': [0.24000000000000005, nan], 'false': [-7.93016446160826e-18, nan]}, {'': [0.15047524435291718, -1.982541115402065e-18], 'true': [1.1102230246251565e-16, 0.24000000000000005], 'true,false': [nan, 0.24000000000000005], 'true,false,false': [0.24000000000000005, nan], 'false': [-1.982541115402065e-18, nan]}, {'': [0.12409961372713268, -1.982541115402065e-18], 'true': [nan, 0.12409961372713268], 'true,false': [0.12409961372713268, nan], 'false': [-1.982541115402065e-18, nan]}, {'': [0.11973761716766416, 0.0], 'true': [8.326672684688674e-17, 0.23999999999999994], 'true,false': [nan, 0.23999999999999994], 'true,false,false': [0.23999999999999994, nan], 'false': [0.0, nan]}, {'': [0.10782454588482203, 0.0], 'true': [nan, 0.10782454588482203], 'true,false': [-2.7755575615628914e-17, 0.23999999999999994], 'true,false,false': [0.23999999999999994, nan], 'false': [0.0, nan]}, {'': [0.10198433509054092, 9.912705577010326e-19], 'true': [0.0, 0.24], 'true,false': [0.24, nan], 'true,false,true': [nan, 0.24], 'false': [9.912705577010326e-19, nan]}, {'': [0.09894570180848164, -9.912705577010326e-19], 'true': [nan, 0.09894570180848164], 'true,false': [-2.7755575615628914e-17, 0.24], 'true,false,false': [0.24, nan], 'false': [-9.912705577010326e-19, nan]}, {'': [0.09721456012241116, 9.912705577010326e-19], 'true': [0.0, 0.23999999999999994], 'true,false': [nan, 0.23999999999999994], 'true,false,false': [0.23999999999999994, nan], 'false': [9.912705577010326e-19, nan]}, {'': [0.09613610564467481, 9.912705577010326e-19], 'true': [nan, 0.09613610564467481], 'true,false': [0.09613610564467481, nan], 'true,false,true': [nan, 0.09613610564467481], 'false': [9.912705577010326e-19, nan]}, {'': [0.09687842003804385, -4.956352788505163e-19], 'true': [-3.469446951953614e-18, 0.23999999999999994], 'true,false': [nan, 0.23999999999999994], 'true,false,false': [0.23999999999999994, nan], 'false': [-4.956352788505163e-19, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;true;genre(B, D).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;true;genre(B, D).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;true;genre(B, E).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;true;genre(B, D).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(B, E).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;true;genre(B, D).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;true;genre(B, D).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.8581489350995123;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else return 0.2581489350995122;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   else return -0.1418510649004878;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7194734122109543;  // std dev = 2.98e-08, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else return 0.22373365448410584;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   else return -0.12544463852839138;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.2111316778425026;  // std dev = 5.27e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( female(A) )
%   | | then return 0.6332003985500222;  // std dev = 0.270, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return 0.5553664367462845;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else return -0.11231637819360639;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.40811422135203823;  // std dev = 0.027, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else return 0.15907194756578558;  // std dev = 0.923, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   else return -0.10159632948783627;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.31437617638981696;  // std dev = 0.024, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else return 0.12985067065913275;  // std dev = 0.910, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   else return -0.09269127618926097;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.250862263372297;  // std dev = 0.021, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else return 0.10446245793183769;  // std dev = 0.901, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   else return -0.08518475138839687;  // std dev = 2.63e-09, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.20671947244404454;  // std dev = 0.018, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else return 0.08310012842558259;  // std dev = 0.893, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   else return -0.07877675473109173;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.17487181959369705;  // std dev = 0.016, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else return 0.06555122061799082;  // std dev = 0.888, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   else return -0.07324622576333704;  // std dev = 2.63e-09, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.27146298030584926;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( female(A) )
%   | | then return 0.2759328817154898;  // std dev = 0.450, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return 0.15604789879118985;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else return -0.06842697784420272;  // std dev = 2.63e-09, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.12573748633569898;  // std dev = 0.031, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else return 0.05399319000269716;  // std dev = 0.754, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   else return -0.0641918400820262;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */


Results
   AUC ROC   = 0.999617
   AUC PR    = 0.971227
   CLL	      = -0.117311
   Precision = 0.935484 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.966667


Total learning time: 0.682 seconds
Total inference time: 0.906 seconds
AUC ROC: 0.999617


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.169343
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 0.334 seconds
Refined model CLL: -0.169343


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.999617
   AUC PR    = 0.971227
   CLL	      = -0.117311
   Precision = 0.935484 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.966667


Total learning time: 2.008 seconds
Total inference time: 0.906 seconds
AUC ROC: 0.999617
Total revision time: 2.008
Best scored revision CLL: -0.169343


Dataset: 4_cora_imdb, Fold: 2, Type: Transfer (trRDN-B), Time: 00:00:31
{'AUC ROC': 0.999617, 'AUC PR': 0.971227, 'CLL': -0.117311, 'Precision': [0.935484, 0.5], 'Recall': 1.0, 'F1': 0.966667, 'Learning time': 2.008, 'Inference time': 0.906, 'parameter_10': {'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.172545, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 0.651, 'Inference time': 0.989}}


Amount of data: 15
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;title(I, H), venue(I, A).;false;false
0;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
0;false;haswordvenue(A, L), haswordtitle(M, L).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordtitle(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordauthor(I, H).;false;true
2;true,false,false;haswordvenue(A, J), haswordtitle(K, J).;false;false
2;false;haswordvenue(A, L), haswordtitle(M, L).;true;false
2;false,true;haswordauthor(N, L).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;title(E, D), venue(E, B).;false;true
3;true,true,false;title(F, D), venue(F, A).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, A).;false;true
4;true,true,false;title(F, D), venue(F, B).;false;false
4;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
4;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
4;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
4;false,true;haswordauthor(M, K).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, B).;false;true
5;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
5;true,false;haswordvenue(B, H), haswordtitle(I, H).;true;true
5;true,false,true;title(J, I), venue(J, B).;false;false
5;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
5;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;title(E, D), venue(E, A).;false;true
6;true,true,false;title(F, D), venue(F, B).;false;false
6;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
6;true,false,true;title(I, H), venue(I, B).;false;false
6;true,false,false;haswordvenue(A, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;title(F, D), venue(F, A).;false;false
7;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
7;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
7;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
7;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;title(E, D), venue(E, A).;false;true
8;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
8;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
8;true,false,true;title(J, I), venue(J, A).;false;false
8;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
8;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, B).;false;true
9;true,true,false;title(F, D), venue(F, A).;false;false
9;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
9;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
9;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
9;false,true;haswordauthor(M, K).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995123;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.0803711573217344;  // std dev = 1.247, 9.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.1418510649004878;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7194734122109542;  // std dev = 4.21e-08, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else if ( genre(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(F, B) )
%   | | | then return 0.07030324498182235;  // std dev = 1.247, 9.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.12544463852839138;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A) )
%   | | then return 0.35313466442906877;  // std dev = 1.690, 22.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=15 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.11231637819360639;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.4673572426635563;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else if ( genre(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(F, B) )
%   | | | then return 0.00741544762412961;  // std dev = 1.247, 9.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.10159632948783627;  // std dev = 1.32e-09, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( genre(B, E) )
%   | | then return 0.3547752410538143;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.006162077526313826;  // std dev = 1.247, 9.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.09269127618926097;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.2783040925379242;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else if ( movie(E, B) )
%   | | then if ( genre(B, F) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.005116530138513998;  // std dev = 1.247, 9.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.08518475138839687;  // std dev = 3.73e-09, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( genre(B, E) )
%   | | then return 0.22597258819380306;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.004245610662354944;  // std dev = 1.247, 9.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.07877675473109173;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.1889011338651097;  // std dev = 1.83e-08, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else if ( genre(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(F, B) )
%   | | | then return 0.0035210254435442522;  // std dev = 1.247, 9.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.07324622576333704;  // std dev = 9.31e-10, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A) )
%   | | then if ( genre(A, F) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.0967092881282713;  // std dev = 1.300, 22.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=15 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.06842697784420272;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.1489605982688611;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else if ( genre(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(F, A) )
%   | | | then return -0.014087144614000057;  // std dev = 1.247, 9.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.0641918400820262;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.115166
   Precision = 0.935484 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.966667


Total learning time: 0.652 seconds
Total inference time: 1.054 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 0.968889
   AUC PR    = 0.976061
   CLL	      = -0.236519
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.866667
   F1        = 0.928571


Total scoring time: 0.374 seconds
Parameter learned model CLL: -0.236519


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 13], 'true,false,false,true': [1.247, 7, 2], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 8, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [4.21e-08, 0, 13], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [1.247, 7, 2], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 8, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [1.69, 7, 15], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 8, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 13], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [1.247, 7, 2], 'true,false,false,false': [0.0, 0, 0], 'false,true': [1.32e-09, 8, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 13], 'true,false,false,true': [1.247, 7, 2], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 8, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, B)', 'true,false,true': 'genre(B, F)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 0, 13], 'true,false,true,true': [0.0, 0, 0], 'true,false,true,false': [1.247, 7, 2], 'true,false,false': [0.0, 0, 0], 'false,true': [3.73e-09, 8, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 13], 'true,false,false,true': [1.247, 7, 2], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 8, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, A)'}, {'true,true': [1.83e-08, 0, 13], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [1.247, 7, 2], 'true,false,false,false': [0.0, 0, 0], 'false,true': [9.31e-10, 8, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'true,false,true': 'genre(A, F)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 0, 0], 'true,false,true,true': [0.0, 0, 0], 'true,false,true,false': [1.3, 7, 15], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 8, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 13], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [1.247, 7, 2], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 8, 0], 'false,false': [0.0, 0, 0]}]]
[{'': [0.21694214876033016, -6.938893903907228e-18], 'true': [nan, 0.21694214876033016], 'true,false': [-2.7328566760003855e-16, 0.17283950617283952], 'true,false,false': [0.17283950617283952, nan], 'false': [-6.938893903907228e-18, nan]}, {'': [0.17257972154255635, 0.0], 'true': [1.3664283380001927e-16, 0.1728395061728396], 'true,false': [nan, 0.1728395061728396], 'true,false,false': [0.1728395061728396, nan], 'false': [0.0, nan]}, {'': [0.12978151143477173, -1.734723475976807e-18], 'true': [nan, 0.12978151143477173], 'true,false': [0.12978151143477173, nan], 'false': [-1.734723475976807e-18, nan]}, {'': [0.12184536660462962, 1.734723475976807e-18], 'true': [-6.832141690000964e-17, 0.17283950617283958], 'true,false': [nan, 0.17283950617283958], 'true,false,false': [0.17283950617283958, nan], 'false': [1.734723475976807e-18, nan]}, {'': [0.10008546558476548, 0.0], 'true': [nan, 0.10008546558476548], 'true,false': [-3.416070845000482e-17, 0.1728395061728395], 'true,false,false': [0.1728395061728395, nan], 'false': [0.0, nan]}, {'': [0.0887481429740512, 1.734723475976807e-18], 'true': [-5.124106267500723e-17, 0.17283950617283955], 'true,false': [0.17283950617283955, nan], 'true,false,true': [nan, 0.17283950617283955], 'false': [1.734723475976807e-18, nan]}, {'': [0.08259147928172374, 0.0], 'true': [nan, 0.08259147928172374], 'true,false': [-8.540177112501205e-18, 0.17283950617283947], 'true,false,false': [0.17283950617283947, nan], 'false': [0.0, nan]}, {'': [0.07901450210792155, 8.673617379884035e-19], 'true': [2.5620531337503614e-17, 0.1728395061728395], 'true,false': [nan, 0.1728395061728395], 'true,false,false': [0.1728395061728395, nan], 'false': [8.673617379884035e-19, nan]}, {'': [0.07679706458356955, 0.0], 'true': [nan, 0.07679706458356955], 'true,false': [0.07679706458356955, nan], 'true,false,true': [nan, 0.07679706458356955], 'false': [0.0, nan]}, {'': [0.07713350516104983, 0.0], 'true': [-4.270088556250602e-18, 0.17283950617283947], 'true,false': [nan, 0.17283950617283947], 'true,false,false': [0.17283950617283947, nan], 'false': [0.0, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;true;genre(B, D).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;true;genre(B, D).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;true;genre(B, E).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;true;genre(B, D).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(B, E).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;true;genre(B, D).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;true;genre(B, D).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.8581489350995123;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else if ( female(A) )
%   | | then return 0.5248156017661788;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return -0.1418510649004878;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   else return -0.1418510649004878;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7194734122109542;  // std dev = 4.21e-08, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else if ( actor(A), actor(B) )
%   | | then return -0.14093237551111026;  // std dev = 0.085, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else return 0.4792710802073998;  // std dev = 0.741, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   else return -0.12544463852839138;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.13389307028764622;  // std dev = 0.097, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else return 0.5731975281446967;  // std dev = 0.176, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   else return -0.11231637819360639;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.4131836175498436;  // std dev = 2.11e-08, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else if ( actor(A), actor(B) )
%   | | then return -0.1110665550447994;  // std dev = 0.070, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else return 0.3141415781343721;  // std dev = 0.591, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   else return -0.10159632948783627;  // std dev = 3.73e-09, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.31777769633270936;  // std dev = 2.58e-08, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else if ( female(A) )
%   | | then return 0.2649004549312995;  // std dev = 0.520, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return -0.11023494239103598;  // std dev = 0.117, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   else return -0.09269127618926097;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.2531690911334783;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else if ( female(A) )
%   | | then return 0.20842490169898084;  // std dev = 0.498, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return -0.1001015189787423;  // std dev = 0.108, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   else return -0.08518475138839687;  // std dev = 3.73e-09, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.20834170966367258;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else if ( actor(A), actor(B) )
%   | | then return -0.09996973887392012;  // std dev = 0.146, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else return 0.18045869313516713;  // std dev = 0.446, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   else return -0.07877675473109173;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.17605722577042998;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else if ( actor(A), actor(B) )
%   | | then return -0.09164765537164454;  // std dev = 0.136, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else return 0.14387150107173255;  // std dev = 0.436, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   else return -0.07324622576333704;  // std dev = 2.63e-09, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B) )
%   | then return 0.17053426580534264;  // std dev = 0.183, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else return -0.10635485053376395;  // std dev = 0.072, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   else return -0.06842697784420272;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.1312577553499883;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else if ( female(A) )
%   | | then return 0.11006711113323697;  // std dev = 0.361, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return -0.0825815138067628;  // std dev = 0.149, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   else return -0.0641918400820262;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */


Results
   AUC ROC   = 0.999416
   AUC PR    = 0.935484
   CLL	      = -0.080533
   Precision = 0.935484 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.966667


Total learning time: 0.91 seconds
Total inference time: 0.991 seconds
AUC ROC: 0.999416


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.112481
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 0.347 seconds
Refined model CLL: -0.112481


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.999416
   AUC PR    = 0.935484
   CLL	      = -0.080533
   Precision = 0.935484 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.966667


Total learning time: 2.283 seconds
Total inference time: 0.991 seconds
AUC ROC: 0.999416
Total revision time: 2.283
Best scored revision CLL: -0.112481


Dataset: 4_cora_imdb, Fold: 2, Type: Transfer (trRDN-B), Time: 00:00:36
{'AUC ROC': 0.999416, 'AUC PR': 0.935484, 'CLL': -0.080533, 'Precision': [0.935484, 0.5], 'Recall': 1.0, 'F1': 0.966667, 'Learning time': 2.283, 'Inference time': 0.991, 'parameter_15': {'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.115166, 'Precision': [0.935484, 0.5], 'Recall': 1.0, 'F1': 0.966667, 'Learning time': 0.652, 'Inference time': 1.054}}


Amount of data: 20
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;title(I, H), venue(I, A).;false;false
0;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
0;false;haswordvenue(A, L), haswordtitle(M, L).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordtitle(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordauthor(I, H).;false;true
2;true,false,false;haswordvenue(A, J), haswordtitle(K, J).;false;false
2;false;haswordvenue(A, L), haswordtitle(M, L).;true;false
2;false,true;haswordauthor(N, L).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;title(E, D), venue(E, B).;false;true
3;true,true,false;title(F, D), venue(F, A).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, A).;false;true
4;true,true,false;title(F, D), venue(F, B).;false;false
4;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
4;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
4;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
4;false,true;haswordauthor(M, K).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, B).;false;true
5;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
5;true,false;haswordvenue(B, H), haswordtitle(I, H).;true;true
5;true,false,true;title(J, I), venue(J, B).;false;false
5;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
5;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;title(E, D), venue(E, A).;false;true
6;true,true,false;title(F, D), venue(F, B).;false;false
6;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
6;true,false,true;title(I, H), venue(I, B).;false;false
6;true,false,false;haswordvenue(A, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;title(F, D), venue(F, A).;false;false
7;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
7;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
7;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
7;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;title(E, D), venue(E, A).;false;true
8;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
8;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
8;true,false,true;title(J, I), venue(J, A).;false;false
8;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
8;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, B).;false;true
9;true,true,false;title(F, D), venue(F, A).;false;false
9;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
9;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
9;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
9;false,true;haswordauthor(M, K).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14185106490048777;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995123;  // std dev = 0.000, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.13087620782678497;  // std dev = 1.477, 11.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=3 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.1418510649004878;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7194734122109542;  // std dev = 7.30e-08, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.11418623766746651;  // std dev = 1.477, 11.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=3 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.12544463852839138;  // std dev = 5.27e-09, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.11231637819360639;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( movie(E, A) )
%   | | then return 0.37582544261790246;  // std dev = 1.891, 28.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=20 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.11231637819360638;  // std dev = 1.32e-09, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.4617131489505741;  // std dev = 0.000, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | else if ( genre(A, E) )
%   | | then return -0.10159632948783628;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.037515394291762934;  // std dev = 1.477, 11.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=3 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.10159632948783628;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.09269127618926096;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( genre(B, E) )
%   | | then return 0.35088281878229594;  // std dev = 2.11e-08, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.030699950372945876;  // std dev = 1.477, 11.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=3 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.09269127618926097;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.2756697671384046;  // std dev = 1.49e-08, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | else if ( movie(E, B) )
%   | | then if ( genre(B, F) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.01583950792042577;  // std dev = 1.481, 12.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=3 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.08518475138839687;  // std dev = 5.27e-09, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.08642723518894176;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( genre(B, E) )
%   | | then return 0.2241378627802827;  // std dev = 2.98e-08, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.022060112480337034;  // std dev = 1.477, 11.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=3 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.07877675473109172;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.18757400172755484;  // std dev = 2.36e-08, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | else if ( genre(A, E) )
%   | | then return -0.07984260963857144;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.01789374504140716;  // std dev = 1.477, 11.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=3 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.07324622576333704;  // std dev = 1.32e-09, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.0741700585418322;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( movie(E, A) )
%   | | then if ( genre(A, F) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.10322434534332141;  // std dev = 1.525, 28.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=20 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.06842697784420272;  // std dev = 2.63e-09, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.1472104335933087;  // std dev = 1.97e-08, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | else if ( genre(A, E) )
%   | | then return -0.06923501487331185;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.005779812877181747;  // std dev = 1.477, 11.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=3 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.06419184008202619;  // std dev = 1.61e-09, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.127581
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 0.673 seconds
Total inference time: 1.03 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 0.97
   AUC PR    = 0.975447
   CLL	      = -0.239001
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.85
   F1        = 0.918919


Total scoring time: 0.37 seconds
Parameter learned model CLL: -0.239001


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 1, 0], 'true,false,true': [0.0, 0, 17], 'true,false,false,true': [1.477, 8, 3], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 11, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [7.3e-08, 0, 17], 'true,false,true': [0.0, 1, 0], 'true,false,false,true': [1.477, 8, 3], 'true,false,false,false': [0.0, 0, 0], 'false,true': [5.27e-09, 11, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.0, 1, 0], 'true,false,true': [1.891, 8, 20], 'true,false,false': [0.0, 0, 0], 'false,true': [1.32e-09, 11, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 17], 'true,false,true': [0.0, 1, 0], 'true,false,false,true': [1.477, 8, 3], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 11, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 1, 0], 'true,false,true': [2.11e-08, 0, 17], 'true,false,false,true': [1.477, 8, 3], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 11, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, B)', 'true,false,true': 'genre(B, F)', 'false': 'movie(G, A)'}, {'true,true': [1.49e-08, 0, 17], 'true,false,true,true': [0.0, 0, 0], 'true,false,true,false': [1.481, 9, 3], 'true,false,false': [0.0, 0, 0], 'false,true': [5.27e-09, 11, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 1, 0], 'true,false,true': [2.98e-08, 0, 17], 'true,false,false,true': [1.477, 8, 3], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 11, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, A)'}, {'true,true': [2.36e-08, 0, 17], 'true,false,true': [0.0, 1, 0], 'true,false,false,true': [1.477, 8, 3], 'true,false,false,false': [0.0, 0, 0], 'false,true': [1.32e-09, 11, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'true,false,true': 'genre(A, F)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 1, 0], 'true,false,true,true': [0.0, 0, 0], 'true,false,true,false': [1.525, 8, 20], 'true,false,false': [0.0, 0, 0], 'false,true': [2.63e-09, 11, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [1.97e-08, 0, 17], 'true,false,true': [0.0, 1, 0], 'true,false,false,true': [1.477, 8, 3], 'true,false,false,false': [0.0, 0, 0], 'false,true': [1.61e-09, 11, 0], 'false,false': [0.0, 0, 0]}]]
[{'': [0.21403091557669457, -1.0092936587501423e-17], 'true': [0.0, 0.20408163265306145], 'true,false': [-2.0898315757650005e-16, 0.1983471074380164], 'true,false,false': [0.1983471074380164, nan], 'false': [-1.0092936587501423e-17, nan]}, {'': [0.1718812365225028, 2.523234146875356e-18], 'true': [3.134747363647501e-16, 0.18620465768686492], 'true,false': [0.0, 0.19834710743801673], 'true,false,false': [0.19834710743801673, nan], 'false': [2.523234146875356e-18, nan]}, {'': [0.13126824092980532, 5.046468293750712e-18], 'true': [0.0, 0.12773975662519874], 'true,false': [0.12773975662519874, nan], 'false': [5.046468293750712e-18, nan]}, {'': [0.12191376597097715, 0.0], 'true': [-7.836868409118753e-17, 0.18329646507250297], 'true,false': [0.0, 0.1983471074380165], 'true,false,false': [0.1983471074380165, nan], 'false': [0.0, nan]}, {'': [0.10220663993046765, 0.0], 'true': [0.0, 0.10237449111681138], 'true,false': [2.6122894697062506e-17, 0.1983471074380166], 'true,false,false': [0.1983471074380166, nan], 'false': [0.0, nan]}, {'': [0.09199524927763796, 2.523234146875356e-18], 'true': [1.3061447348531253e-17, 0.18274599099717237], 'true,false': [0.18274599099717237, nan], 'true,false,true': [nan, 0.18274599099717237], 'false': [2.523234146875356e-18, nan]}, {'': [0.0864186401840348, 0.0], 'true': [0.0, 0.087662158292098], 'true,false': [5.224578939412501e-17, 0.1983471074380165], 'true,false,false': [0.1983471074380165, nan], 'false': [0.0, nan]}, {'': [0.08320748086183037, 6.30808536718839e-19], 'true': [3.2653618371328135e-17, 0.18254787866045574], 'true,false': [0.0, 0.1983471074380166], 'true,false,false': [0.1983471074380166, nan], 'false': [6.30808536718839e-19, nan]}, {'': [0.08120294253380668, 6.30808536718839e-19], 'true': [0.0, 0.08301791746810086], 'true,false': [0.08301791746810086, nan], 'true,false,true': [nan, 0.08301791746810086], 'false': [6.30808536718839e-19, nan]}, {'': [0.08143920464930778, 2.523234146875356e-18], 'true': [2.2857532859929692e-17, 0.182125766465849], 'true,false': [0.0, 0.19834710743801656], 'true,false,false': [0.19834710743801656, nan], 'false': [2.523234146875356e-18, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(A, D).;true;true
0;true,false;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;true;genre(B, D).;true;true
1;true,false;genre(A, E).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;true;genre(A, D).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;true;genre(B, D).;true;true
3;true,false;genre(A, E).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;true;genre(A, D).;true;true
4;true,false;genre(B, E).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;true;genre(B, D).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(A, D).;true;true
6;true,false;genre(B, E).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;true;genre(B, D).;true;true
7;true,false;genre(A, E).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;true;genre(A, D).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;true;genre(B, D).;true;true
9;true,false;genre(A, E).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14185106490048777;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995123;  // std dev = 0.000, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else if ( actor(B) )
%   | | | then return -0.1418510649004878;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | | else return 0.8581489350995121;  // std dev = 2.11e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return -0.1418510649004878;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7194734122109542;  // std dev = 7.30e-08, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( actor(B) )
%   | | | then return -0.12544463852839138;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | | else return 0.7194734122109545;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return -0.12544463852839138;  // std dev = 5.27e-09, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.11231637819360639;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( actor(B) )
%   | | then return -0.11231637819360639;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | else return 0.5553664367462846;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   else return -0.11231637819360638;  // std dev = 7.45e-09, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.4175135841583098;  // std dev = 5.16e-08, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | else if ( genre(A, E) )
%   | | then return -0.10159632948783628;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( actor(B) )
%   | | | then return -0.10159632948783627;  // std dev = 3.73e-09, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | | else return 0.41751358415830997;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return -0.10159632948783628;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.09269127618926096;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( genre(B, E) )
%   | | then return 0.32071184716014967;  // std dev = 1.49e-08, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else if ( actor(B) )
%   | | | then return -0.09269127618926097;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | | else return 0.32071184716014967;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return -0.09269127618926097;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.2551722425694894;  // std dev = 2.11e-08, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | else if ( actor(B) )
%   | | then return -0.08518475138839687;  // std dev = 3.73e-09, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | else return 0.25517224256948945;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return -0.08518475138839687;  // std dev = 5.27e-09, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.07877675473109173;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( genre(B, E) )
%   | | then return 0.20975771563253562;  // std dev = 0.000, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else if ( actor(B) )
%   | | | then return -0.07877675473109173;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | | else return 0.20975771563253554;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return -0.07877675473109172;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.17709649774527741;  // std dev = 0.000, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | else if ( genre(A, E) )
%   | | then return -0.07324622576333704;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( actor(B) )
%   | | | then return -0.07324622576333704;  // std dev = 2.63e-09, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | | else return 0.17709649774527736;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return -0.07324622576333704;  // std dev = 2.63e-09, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.06842697784420272;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( director(B) )
%   | | then return 0.15274385809367083;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return -0.06842697784420272;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   else return -0.06842697784420272;  // std dev = 2.63e-09, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.13400703000801117;  // std dev = 0.000, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | else if ( genre(A, E) )
%   | | then return -0.0641918400820262;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( actor(B) )
%   | | | then return -0.0641918400820262;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | | else return 0.13400703000801117;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return -0.06419184008202619;  // std dev = 5.27e-09, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063857
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 0.975 seconds
Total inference time: 0.949 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.094637
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 0.357 seconds
Refined model CLL: -0.094637


******************************************
Best model found
******************************************
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063857
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 2.375 seconds
Total inference time: 0.949 seconds
AUC ROC: 1.0
Total revision time: 2.375
Best scored revision CLL: -0.094637


Dataset: 4_cora_imdb, Fold: 2, Type: Transfer (trRDN-B), Time: 00:00:41
{'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.063857, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 2.375, 'Inference time': 0.949, 'parameter_20': {'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.127581, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 0.673, 'Inference time': 1.03}}


Amount of data: 25
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;title(I, H), venue(I, A).;false;false
0;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
0;false;haswordvenue(A, L), haswordtitle(M, L).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordtitle(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordauthor(I, H).;false;true
2;true,false,false;haswordvenue(A, J), haswordtitle(K, J).;false;false
2;false;haswordvenue(A, L), haswordtitle(M, L).;true;false
2;false,true;haswordauthor(N, L).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;title(E, D), venue(E, B).;false;true
3;true,true,false;title(F, D), venue(F, A).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, A).;false;true
4;true,true,false;title(F, D), venue(F, B).;false;false
4;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
4;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
4;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
4;false,true;haswordauthor(M, K).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, B).;false;true
5;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
5;true,false;haswordvenue(B, H), haswordtitle(I, H).;true;true
5;true,false,true;title(J, I), venue(J, B).;false;false
5;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
5;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;title(E, D), venue(E, A).;false;true
6;true,true,false;title(F, D), venue(F, B).;false;false
6;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
6;true,false,true;title(I, H), venue(I, B).;false;false
6;true,false,false;haswordvenue(A, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;title(F, D), venue(F, A).;false;false
7;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
7;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
7;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
7;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;title(E, D), venue(E, A).;false;true
8;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
8;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
8;true,false,true;title(J, I), venue(J, A).;false;false
8;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
8;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, B).;false;true
9;true,true,false;title(F, D), venue(F, A).;false;false
9;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
9;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
9;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
9;false,true;haswordauthor(M, K).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14185106490048777;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995122;  // std dev = 0.000, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.16584124279182003;  // std dev = 1.664, 13.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=4 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.1418510649004878;  // std dev = 0.000, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7194734122109543;  // std dev = 7.30e-08, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.14443085832463678;  // std dev = 1.664, 13.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=4 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.12544463852839138;  // std dev = 7.45e-09, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.11231637819360639;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( movie(E, A) )
%   | | then return 0.39032887464738236;  // std dev = 2.065, 34.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=25 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.11231637819360635;  // std dev = 3.48e-09, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.4581106148800025;  // std dev = 2.98e-08, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | else if ( genre(A, E) )
%   | | then return -0.10159632948783628;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.05783979159600186;  // std dev = 1.664, 13.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=4 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.10159632948783631;  // std dev = 0.000, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.09269127618926096;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( genre(B, E) )
%   | | then return 0.34840403976619516;  // std dev = 2.98e-08, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.04684305670189308;  // std dev = 1.664, 13.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=4 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.09269127618926094;  // std dev = 1.86e-09, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.273991253763195;  // std dev = 2.98e-08, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | else if ( movie(E, B) )
%   | | then if ( genre(B, F) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.028932505483096678;  // std dev = 1.668, 14.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=4 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.08518475138839685;  // std dev = 9.13e-09, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.08746663986848523;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( genre(B, E) )
%   | | then return 0.22296733120637136;  // std dev = 1.49e-08, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.031970604364880015;  // std dev = 1.664, 13.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=4 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.07877675473109173;  // std dev = 0.000, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.18672619937124008;  // std dev = 0.000, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | else if ( genre(A, E) )
%   | | then return -0.08073265698099717;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.025540540906687982;  // std dev = 1.664, 13.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=4 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.07324622576333704;  // std dev = 9.31e-10, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.07494030005159495;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( movie(E, A) )
%   | | then if ( genre(A, F) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.10660657344043525;  // std dev = 1.711, 34.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=25 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.06842697784420272;  // std dev = 3.73e-09, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.14619553038072525;  // std dev = 2.11e-08, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | else if ( genre(A, E) )
%   | | then return -0.0699077812287565;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.0019769607797663646;  // std dev = 1.664, 13.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=4 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.06419184008202619;  // std dev = 1.86e-09, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.13848
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 0.698 seconds
Total inference time: 1.036 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 0.9712
   AUC PR    = 0.975669
   CLL	      = -0.23849
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.84
   F1        = 0.913043


Total scoring time: 0.376 seconds
Parameter learned model CLL: -0.23849


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 1, 0], 'true,false,true': [0.0, 0, 21], 'true,false,false,true': [1.664, 9, 4], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 15, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [7.3e-08, 0, 21], 'true,false,true': [0.0, 1, 0], 'true,false,false,true': [1.664, 9, 4], 'true,false,false,false': [0.0, 0, 0], 'false,true': [7.45e-09, 15, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.0, 1, 0], 'true,false,true': [2.065, 9, 25], 'true,false,false': [0.0, 0, 0], 'false,true': [3.48e-09, 15, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [2.98e-08, 0, 21], 'true,false,true': [0.0, 1, 0], 'true,false,false,true': [1.664, 9, 4], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 15, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 1, 0], 'true,false,true': [2.98e-08, 0, 21], 'true,false,false,true': [1.664, 9, 4], 'true,false,false,false': [0.0, 0, 0], 'false,true': [1.86e-09, 15, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, B)', 'true,false,true': 'genre(B, F)', 'false': 'movie(G, A)'}, {'true,true': [2.98e-08, 0, 21], 'true,false,true,true': [0.0, 0, 0], 'true,false,true,false': [1.668, 10, 4], 'true,false,false': [0.0, 0, 0], 'false,true': [9.13e-09, 15, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 1, 0], 'true,false,true': [1.49e-08, 0, 21], 'true,false,false,true': [1.664, 9, 4], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 15, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 0, 21], 'true,false,true': [0.0, 1, 0], 'true,false,false,true': [1.664, 9, 4], 'true,false,false,false': [0.0, 0, 0], 'false,true': [9.31e-10, 15, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'true,false,true': 'genre(A, F)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 1, 0], 'true,false,true,true': [0.0, 0, 0], 'true,false,true,false': [1.711, 9, 25], 'true,false,false': [0.0, 0, 0], 'false,true': [3.73e-09, 15, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [2.11e-08, 0, 21], 'true,false,true': [0.0, 1, 0], 'true,false,false,true': [1.664, 9, 4], 'true,false,false,false': [0.0, 0, 0], 'false,true': [1.86e-09, 15, 0], 'false,false': [0.0, 0, 0]}]]
[{'': [0.20408163265306242, -1.4802973661668754e-17], 'true': [0.0, 0.1946366782006932], 'true,false': [0.0, 0.21301775147928975], 'true,false,false': [0.21301775147928975, nan], 'false': [-1.4802973661668754e-17, nan]}, {'': [0.16582490217243584, 3.7007434154171884e-18], 'true': [2.5376526277146434e-16, 0.20263294366659418], 'true,false': [0.0, 0.2130177514792899], 'true,false,false': [0.2130177514792899, nan], 'false': [3.7007434154171884e-18, nan]}, {'': [0.12887502940092144, 1.295260195396016e-17], 'true': [0.0, 0.12544683572202264], 'true,false': [0.12544683572202264, nan], 'false': [1.295260195396016e-17, nan]}, {'': [0.12046645900716979, -5.551115123125783e-18], 'true': [4.229421046191072e-17, 0.19948821003271516], 'true,false': [0.0, 0.21301775147929003], 'true,false,false': [0.21301775147929003, nan], 'false': [-5.551115123125783e-18, nan]}, {'': [0.10292931068003515, 3.7007434154171884e-18], 'true': [0.0, 0.10292404878043049], 'true,false': [4.229421046191072e-17, 0.21301775147929003], 'true,false,false': [0.21301775147929003, nan], 'false': [3.7007434154171884e-18, nan]}, {'': [0.09393448869512594, 5.551115123125783e-18], 'true': [4.229421046191072e-17, 0.1988039476726497], 'true,false': [0.1988039476726497, nan], 'true,false,true': [nan, 0.1988039476726497], 'false': [5.551115123125783e-18, nan]}, {'': [0.08905408257858587, -1.8503717077085942e-18], 'true': [0.0, 0.09006299118699199], 'true,false': [1.057355261547768e-17, 0.21301775147929009], 'true,false,false': [0.21301775147929009, nan], 'false': [-1.8503717077085942e-18, nan]}, {'': [0.08625704552362727, 9.251858538542971e-19], 'true': [-1.586032892321652e-17, 0.1985512891474048], 'true,false': [0.0, 0.2130177514792899], 'true,false,false': [0.2130177514792899, nan], 'false': [9.251858538542971e-19, nan]}, {'': [0.08451106479810375, 9.251858538542971e-19], 'true': [0.0, 0.08605499100028254], 'true,false': [0.08605499100028254, nan], 'true,false,true': [nan, 0.08605499100028254], 'false': [9.251858538542971e-19, nan]}, {'': [0.08486328076018557, 4.163336342344337e-18], 'true': [2.114710523095536e-17, 0.19810826796938844], 'true,false': [0.0, 0.21301775147929003], 'true,false,false': [0.21301775147929003, nan], 'false': [4.163336342344337e-18, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(A, D).;true;true
0;true,false;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;true;genre(B, D).;true;true
1;true,false;genre(A, E).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;true;genre(A, D).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;true;genre(B, D).;true;true
3;true,false;genre(A, E).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;true;genre(A, D).;true;true
4;true,false;genre(B, E).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;true;genre(B, D).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(A, D).;true;true
6;true,false;genre(B, E).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;true;genre(B, D).;true;true
7;true,false;genre(A, E).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;true;genre(A, D).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;true;genre(B, D).;true;true
9;true,false;genre(A, E).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14185106490048777;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995122;  // std dev = 0.000, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | else if ( actor(B) )
%   | | | then return -0.1418510649004878;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | | else return 0.8581489350995122;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else return -0.1418510649004878;  // std dev = 0.000, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7194734122109543;  // std dev = 7.30e-08, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( actor(B) )
%   | | | then return -0.12544463852839138;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | | else return 0.7194734122109545;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else return -0.12544463852839138;  // std dev = 7.45e-09, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.11231637819360639;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( actor(B) )
%   | | then return -0.11231637819360639;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | else return 0.5553664367462846;  // std dev = 0.000, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   else return -0.11231637819360635;  // std dev = 1.39e-08, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.41751358415830986;  // std dev = 4.71e-08, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | else if ( genre(A, E) )
%   | | then return -0.10159632948783628;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( actor(B) )
%   | | | then return -0.10159632948783627;  // std dev = 5.27e-09, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | | else return 0.41751358415830997;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else return -0.10159632948783631;  // std dev = 0.000, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.09269127618926096;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( genre(B, E) )
%   | | then return 0.3207118471601496;  // std dev = 2.98e-08, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | else if ( actor(B) )
%   | | | then return -0.09269127618926097;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | | else return 0.32071184716014967;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else return -0.09269127618926094;  // std dev = 7.45e-09, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.2551722425694895;  // std dev = 1.49e-08, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | else if ( actor(B) )
%   | | then return -0.08518475138839687;  // std dev = 3.73e-09, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | | else return 0.25517224256948945;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else return -0.08518475138839685;  // std dev = 9.13e-09, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.07877675473109173;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( genre(B, E) )
%   | | then return 0.2097577156325356;  // std dev = 0.000, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | else if ( actor(B) )
%   | | | then return -0.07877675473109173;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | | else return 0.20975771563253554;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else return -0.07877675473109173;  // std dev = 0.000, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.17709649774527744;  // std dev = 0.000, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | else if ( genre(A, E) )
%   | | then return -0.07324622576333704;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( actor(B) )
%   | | | then return -0.07324622576333704;  // std dev = 2.63e-09, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | | else return 0.17709649774527736;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else return -0.07324622576333704;  // std dev = 3.73e-09, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.06842697784420272;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( actor(B) )
%   | | then return -0.06842697784420272;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | else return 0.15274385809367083;  // std dev = 0.000, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   else return -0.06842697784420272;  // std dev = 3.73e-09, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.13400703000801117;  // std dev = 0.000, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | else if ( genre(A, E) )
%   | | then return -0.0641918400820262;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( actor(B) )
%   | | | then return -0.0641918400820262;  // std dev = 2.63e-09, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | | else return 0.13400703000801117;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else return -0.06419184008202619;  // std dev = 7.90e-09, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063857
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 0.961 seconds
Total inference time: 0.983 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.094637
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 0.381 seconds
Refined model CLL: -0.094637


******************************************
Best model found
******************************************
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063857
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 2.4159999999999995 seconds
Total inference time: 0.983 seconds
AUC ROC: 1.0
Total revision time: 2.4159999999999995
Best scored revision CLL: -0.094637


Dataset: 4_cora_imdb, Fold: 2, Type: Transfer (trRDN-B), Time: 00:00:45
{'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.063857, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 2.4159999999999995, 'Inference time': 0.983, 'parameter_25': {'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.13848, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 0.698, 'Inference time': 1.036}}


Starting fold 3

Target train facts examples: 737
Target train pos examples: 204
Target train neg examples: 10693

Target test facts examples: 341
Target test pos	 examples: 178
Target test neg examples: 3543

Amount of data: 5
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;title(I, H), venue(I, A).;false;false
0;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
0;false;haswordvenue(A, L), haswordtitle(M, L).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordtitle(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordauthor(I, H).;false;true
2;true,false,false;haswordvenue(A, J), haswordtitle(K, J).;false;false
2;false;haswordvenue(A, L), haswordtitle(M, L).;true;false
2;false,true;haswordauthor(N, L).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;title(E, D), venue(E, B).;false;true
3;true,true,false;title(F, D), venue(F, A).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, A).;false;true
4;true,true,false;title(F, D), venue(F, B).;false;false
4;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
4;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
4;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
4;false,true;haswordauthor(M, K).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, B).;false;true
5;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
5;true,false;haswordvenue(B, H), haswordtitle(I, H).;true;true
5;true,false,true;title(J, I), venue(J, B).;false;false
5;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
5;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;title(E, D), venue(E, A).;false;true
6;true,true,false;title(F, D), venue(F, B).;false;false
6;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
6;true,false,true;title(I, H), venue(I, B).;false;false
6;true,false,false;haswordvenue(A, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;title(F, D), venue(F, A).;false;false
7;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
7;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
7;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
7;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;title(E, D), venue(E, A).;false;true
8;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
8;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
8;true,false,true;title(J, I), venue(J, A).;false;false
8;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
8;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, B).;false;true
9;true,true,false;title(F, D), venue(F, A).;false;false
9;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
9;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
9;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
9;false,true;haswordauthor(M, K).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14185106490048777;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995122;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.14185106490048777;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.14185106490048777;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7194734122109545;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( movie(F, B) )
%   | | | then return -0.12544463852839138;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.12544463852839138;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.11231637819360639;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( movie(E, A) )
%   | | then return 0.44408596758963603;  // std dev = 0.610, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.11231637819360639;  // std dev = 1.86e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.4447988520039283;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else if ( genre(A, E) )
%   | | then return -0.10159632948783628;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( movie(F, B) )
%   | | | then return -0.16476268394672763;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.1015963294878363;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.09269127618926096;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( genre(B, E) )
%   | | then return 0.3392793852013426;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.14332149068065764;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.09269127618926094;  // std dev = 1.32e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.26780523845758497;  // std dev = 1.05e-08, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else if ( movie(E, B) )
%   | | then if ( genre(B, F) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.10589609217555211;  // std dev = 0.029, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.08518475138839687;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.07728676456408701;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( genre(B, E) )
%   | | then return 0.21864301681019258;  // std dev = 7.45e-09, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else if ( movie(F, B) )
%   | | | then return -0.11535317354637284;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.07877675473109173;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.18358653197988706;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else if ( genre(A, E) )
%   | | then return -0.07195211228335426;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( movie(F, B) )
%   | | | then return -0.10409381194416546;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.07324622576333704;  // std dev = 9.31e-10, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.06729301475727813;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( movie(E, A) )
%   | | then if ( genre(A, F) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.11557823676630781;  // std dev = 0.230, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.06842697784420272;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.1429012170655921;  // std dev = 3.73e-09, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else if ( genre(A, E) )
%   | | then return -0.06319039987698033;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.10516970978625442;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.0641918400820262;  // std dev = 9.31e-10, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 0.97199
   AUC PR    = 0.81824
   CLL	      = -0.107268
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.724719
   F1        = 0.840391


Total learning time: 0.603 seconds
Total inference time: 1.098 seconds
AUC ROC: 0.97199


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.102395
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 0.334 seconds
Parameter learned model CLL: -0.102395


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 1, 0], 'true,false,true': [0.0, 0, 5], 'true,false,false,true': [0.0, 1, 0], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 3, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 5], 'true,false,true': [0.0, 1, 0], 'true,false,false,true': [0.0, 1, 0], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 3, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.0, 1, 0], 'true,false,true': [0.61, 1, 5], 'true,false,false': [0.0, 0, 0], 'false,true': [1.86e-09, 3, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 5], 'true,false,true': [0.0, 1, 0], 'true,false,false,true': [0.0, 1, 0], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 3, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 1, 0], 'true,false,true': [0.0, 0, 5], 'true,false,false,true': [0.0, 1, 0], 'true,false,false,false': [0.0, 0, 0], 'false,true': [1.32e-09, 3, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, B)', 'true,false,true': 'genre(B, F)', 'false': 'movie(G, A)'}, {'true,true': [1.05e-08, 0, 5], 'true,false,true,true': [0.0, 0, 0], 'true,false,true,false': [0.029, 2, 0], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 3, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 1, 0], 'true,false,true': [7.45e-09, 0, 5], 'true,false,false,true': [0.0, 1, 0], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 3, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 0, 5], 'true,false,true': [0.0, 1, 0], 'true,false,false,true': [0.0, 1, 0], 'true,false,false,false': [0.0, 0, 0], 'false,true': [9.31e-10, 3, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'true,false,true': 'genre(A, F)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 1, 0], 'true,false,true,true': [0.0, 0, 0], 'true,false,true,false': [0.23, 1, 5], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 3, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [3.73e-09, 0, 5], 'true,false,true': [0.0, 1, 0], 'true,false,false,true': [0.0, 1, 0], 'true,false,false,false': [0.0, 0, 0], 'false,true': [9.31e-10, 3, 0], 'false,false': [0.0, 0, 0]}]]
[{'': [0.20408163265306106, 0.0], 'true': [0.0, 0.1388888888888887], 'true,false': [0.0, 0.0], 'false': [0.0, nan], 'true,false,false': [0.0, nan]}, {'': [0.1456911249928931, 0.0], 'true': [0.0, 0.0], 'false': [0.0, nan], 'true,false': [0.0, 0.0], 'true,false,false': [0.0, nan]}, {'': [0.09097966150327687, 2.3129646346357427e-18], 'true': [0.0, 0.061916714078618984], 'true,false': [0.061916714078618984, nan], 'false': [2.3129646346357427e-18, nan]}, {'': [0.06846030185051698, -1.1564823173178713e-18], 'true': [0.0, 0.0009974970839065726], 'true,false': [0.0, 0.0], 'true,false,false': [0.0, nan], 'false': [-1.1564823173178713e-18, nan]}, {'': [0.04285866749267329, 2.3129646346357427e-18], 'true': [0.0, 0.03234772297251024], 'true,false': [-2.2204460492503132e-17, 0.0], 'false': [2.3129646346357427e-18, nan], 'true,false,false': [0.0, nan]}, {'': [0.028623107756950938, 0.0], 'true': [2.2204460492503132e-17, 0.0004289596372016799], 'true,false': [0.0004289596372016799, nan], 'true,false,true': [nan, 0.0004289596372016799], 'false': [0.0, nan]}, {'': [0.02034874499749892, 0.0], 'true': [0.0, 0.015493535440652661], 'true,false': [1.1102230246251566e-17, 0.0], 'false': [0.0, nan], 'true,false,false': [0.0, nan]}, {'': [0.015129244567711603, 1.1564823173178713e-18], 'true': [0.0, 0.00025827221427144904], 'true,false': [0.0, 0.0], 'false': [1.1564823173178713e-18, nan], 'true,false,false': [0.0, nan]}, {'': [0.011680633273441885, -5.782411586589357e-19], 'true': [0.0, 0.008849991966567534], 'true,false': [0.008849991966567534, nan], 'true,false,true': [nan, 0.008849991966567534], 'false': [-5.782411586589357e-19, nan]}, {'': [0.010649529777064284, 5.782411586589357e-19], 'true': [2.7755575615628915e-18, 0.00044056561511472], 'true,false': [0.0, 0.0], 'false': [5.782411586589357e-19, nan], 'true,false,false': [0.0, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(A, D).;true;true
0;true,false;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;true;genre(B, D).;true;true
1;true,false;genre(A, E).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;true;genre(A, D).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;true;genre(B, D).;true;true
3;true,false;genre(A, E).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;true;genre(A, D).;true;true
4;true,false;genre(B, E).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;true;genre(B, D).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(A, D).;true;true
6;true,false;genre(B, E).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;true;genre(B, D).;true;true
7;true,false;genre(A, E).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;true;genre(A, D).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;true;genre(B, D).;true;true
9;true,false;genre(A, E).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14185106490048777;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995122;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return -0.14185106490048777;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   else return -0.14185106490048777;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7194734122109545;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else return -0.12544463852839138;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   else return -0.12544463852839138;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.11231637819360639;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else return 0.44408596758963603;  // std dev = 0.610, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   else return -0.11231637819360639;  // std dev = 2.63e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.4447988520039283;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else if ( genre(A, E) )
%   | | then return -0.10159632948783628;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else return -0.16476268394672763;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   else return -0.1015963294878363;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.09269127618926096;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( genre(B, E) )
%   | | then return 0.3392793852013426;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return -0.14332149068065764;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   else return -0.09269127618926094;  // std dev = 2.63e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.26780523845758497;  // std dev = 1.05e-08, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return -0.10589609217555211;  // std dev = 0.029, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   else return -0.08518475138839687;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.07728676456408701;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( genre(B, E) )
%   | | then return 0.21864301681019258;  // std dev = 7.45e-09, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return -0.11535317354637284;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   else return -0.07877675473109173;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.18358653197988706;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else if ( genre(A, E) )
%   | | then return -0.07195211228335426;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else return -0.10409381194416546;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   else return -0.07324622576333704;  // std dev = 1.86e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.06729301475727813;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else return 0.11557823676630781;  // std dev = 0.230, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   else return -0.06842697784420272;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.1429012170655921;  // std dev = 3.73e-09, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else if ( genre(A, E) )
%   | | then return -0.06319039987698033;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else return -0.10516970978625442;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   else return -0.0641918400820262;  // std dev = 1.32e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */


Results
   AUC ROC   = 0.97199
   AUC PR    = 0.81824
   CLL	      = -0.107268
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.724719
   F1        = 0.840391


Total learning time: 0.543 seconds
Total inference time: 0.951 seconds
AUC ROC: 0.97199


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.102395
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 0.324 seconds
Refined model CLL: -0.102395


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.97199
   AUC PR    = 0.81824
   CLL	      = -0.107268
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.724719
   F1        = 0.840391


Total learning time: 1.804 seconds
Total inference time: 1.098 seconds
AUC ROC: 0.97199
Total revision time: 1.804
Best scored revision CLL: -0.102395


Dataset: 4_cora_imdb, Fold: 3, Type: Transfer (trRDN-B), Time: 00:00:50
{'AUC ROC': 0.97199, 'AUC PR': 0.81824, 'CLL': -0.107268, 'Precision': [1.0, 0.5], 'Recall': 0.724719, 'F1': 0.840391, 'Learning time': 1.804, 'Inference time': 1.098, 'parameter_5': {'AUC ROC': 0.97199, 'AUC PR': 0.81824, 'CLL': -0.107268, 'Precision': [1.0, 0.5], 'Recall': 0.724719, 'F1': 0.840391, 'Learning time': 0.603, 'Inference time': 1.098}}


Amount of data: 10
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;title(I, H), venue(I, A).;false;false
0;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
0;false;haswordvenue(A, L), haswordtitle(M, L).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordtitle(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordauthor(I, H).;false;true
2;true,false,false;haswordvenue(A, J), haswordtitle(K, J).;false;false
2;false;haswordvenue(A, L), haswordtitle(M, L).;true;false
2;false,true;haswordauthor(N, L).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;title(E, D), venue(E, B).;false;true
3;true,true,false;title(F, D), venue(F, A).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, A).;false;true
4;true,true,false;title(F, D), venue(F, B).;false;false
4;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
4;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
4;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
4;false,true;haswordauthor(M, K).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, B).;false;true
5;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
5;true,false;haswordvenue(B, H), haswordtitle(I, H).;true;true
5;true,false,true;title(J, I), venue(J, B).;false;false
5;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
5;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;title(E, D), venue(E, A).;false;true
6;true,true,false;title(F, D), venue(F, B).;false;false
6;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
6;true,false,true;title(I, H), venue(I, B).;false;false
6;true,false,false;haswordvenue(A, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;title(F, D), venue(F, A).;false;false
7;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
7;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
7;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
7;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;title(E, D), venue(E, A).;false;true
8;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
8;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
8;true,false,true;title(J, I), venue(J, A).;false;false
8;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
8;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, B).;false;true
9;true,true,false;title(F, D), venue(F, A).;false;false
9;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
9;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
9;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
9;false,true;haswordauthor(M, K).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14185106490048777;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995122;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.14185106490048777;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.1418510649004878;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7194734122109544;  // std dev = 2.98e-08, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( movie(F, B) )
%   | | | then return -0.12544463852839138;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.12544463852839138;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.11231637819360639;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( movie(E, A) )
%   | | then return 0.4946679990244764;  // std dev = 0.637, 11.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=10 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.11231637819360639;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.43234490498365197;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | else if ( genre(A, E) )
%   | | then return -0.10159632948783628;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( movie(F, B) )
%   | | | then return -0.17184211428342622;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.10159632948783627;  // std dev = 1.32e-09, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.09269127618926096;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( genre(B, E) )
%   | | then return 0.330785335339945;  // std dev = 2.11e-08, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.14874607400079187;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.09269127618926097;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.2620345607963504;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | else if ( movie(E, B) )
%   | | then if ( genre(B, F) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.10803149071796513;  // std dev = 0.032, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.08518475138839687;  // std dev = 3.73e-09, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.07713461916973317;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( genre(B, E) )
%   | | then return 0.21459362301361873;  // std dev = 7.45e-09, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else if ( movie(F, B) )
%   | | | then return -0.11907201696275839;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.07877675473109173;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.18063536393147253;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | else if ( genre(A, E) )
%   | | then return -0.0718197929157446;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( movie(F, B) )
%   | | | then return -0.1071375131112977;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.07324622576333704;  // std dev = 9.31e-10, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.06717693452194624;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( movie(E, A) )
%   | | then if ( genre(A, F) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.13244726920366284;  // std dev = 0.241, 11.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=10 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.06842697784420272;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.1388192836993145;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | else if ( genre(A, E) )
%   | | then return -0.06308777889614037;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.10958280436808825;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.0641918400820262;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 0.97199
   AUC PR    = 0.81824
   CLL	      = -0.107163
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.724719
   F1        = 0.840391


Total learning time: 0.654 seconds
Total inference time: 1.089 seconds
AUC ROC: 0.97199


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.098882
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 0.333 seconds
Parameter learned model CLL: -0.098882


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 1, 0], 'true,false,true': [0.0, 0, 10], 'true,false,false,true': [0.0, 1, 0], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 8, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [2.98e-08, 0, 10], 'true,false,true': [0.0, 1, 0], 'true,false,false,true': [0.0, 1, 0], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 8, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.0, 1, 0], 'true,false,true': [0.637, 1, 10], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 8, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 10], 'true,false,true': [0.0, 1, 0], 'true,false,false,true': [0.0, 1, 0], 'true,false,false,false': [0.0, 0, 0], 'false,true': [1.32e-09, 8, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 1, 0], 'true,false,true': [2.11e-08, 0, 10], 'true,false,false,true': [0.0, 1, 0], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 8, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, B)', 'true,false,true': 'genre(B, F)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 0, 10], 'true,false,true,true': [0.0, 0, 0], 'true,false,true,false': [0.032, 2, 0], 'true,false,false': [0.0, 0, 0], 'false,true': [3.73e-09, 8, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 1, 0], 'true,false,true': [7.45e-09, 0, 10], 'true,false,false,true': [0.0, 1, 0], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 8, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 0, 10], 'true,false,true': [0.0, 1, 0], 'true,false,false,true': [0.0, 1, 0], 'true,false,false,false': [0.0, 0, 0], 'false,true': [9.31e-10, 8, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'true,false,true': 'genre(A, F)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 1, 0], 'true,false,true,true': [0.0, 0, 0], 'true,false,true,false': [0.241, 1, 10], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 8, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 10], 'true,false,true': [0.0, 1, 0], 'true,false,false,true': [0.0, 1, 0], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 8, 0], 'false,false': [0.0, 0, 0]}]]
[{'': [0.1388888888888887, -6.938893903907228e-18], 'true': [0.0, 0.0826446280991734], 'true,false': [-8.881784197001253e-17, 0.0], 'true,false,false': [0.0, nan], 'false': [-6.938893903907228e-18, nan]}, {'': [0.09915090450905217, 0.0], 'true': [8.881784197001253e-17, 0.0], 'false': [0.0, nan], 'true,false': [0.0, 0.0], 'true,false,false': [0.0, nan]}, {'': [0.0619167140786188, -1.734723475976807e-18], 'true': [0.0, 0.036843003418682206], 'true,false': [0.036843003418682206, nan], 'false': [-1.734723475976807e-18, nan]}, {'': [0.045182544663050474, 1.734723475976807e-18], 'true': [-8.881784197001253e-17, 0.0012336175703870841], 'true,false': [0.0, 0.0], 'false': [1.734723475976807e-18, nan], 'true,false,false': [0.0, nan]}, {'': [0.028444237992523668, 0.0], 'true': [0.0, 0.019004163020191214], 'true,false': [4.4408920985006264e-17, 0.0], 'false': [0.0, nan], 'true,false,false': [0.0, nan]}, {'': [0.019107673705692763, 1.734723475976807e-18], 'true': [-1.1102230246251566e-17, 0.0005219734979932406], 'true,false': [0.0005219734979932406, nan], 'true,false,true': [nan, 0.0005219734979932406], 'false': [1.734723475976807e-18, nan]}, {'': [0.013653750077888804, 0.0], 'true': [0.0, 0.009201054487673171], 'true,false': [5.551115123125783e-18, 0.0], 'false': [0.0, nan], 'true,false,false': [0.0, nan]}, {'': [0.010185525633069953, 8.673617379884035e-19], 'true': [-1.6653345369377347e-17, 0.0003118353399528453], 'true,false': [0.0, 0.0], 'false': [8.673617379884035e-19, nan], 'true,false,false': [0.0, nan]}, {'': [0.00788309653179854, 0.0], 'true': [0.0, 0.005278923111629325], 'true,false': [0.005278923111629325, nan], 'true,false,true': [nan, 0.005278923111629325], 'false': [0.0, nan]}, {'': [0.007130988751495439, 0.0], 'true': [-2.7755575615628915e-18, 0.0005404468484092699], 'true,false': [0.0, 0.0], 'false': [0.0, nan], 'true,false,false': [0.0, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(A, D).;true;true
0;true,false;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;true;genre(B, D).;true;true
1;true,false;genre(A, E).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;true;genre(A, D).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;true;genre(B, D).;true;true
3;true,false;genre(A, E).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;true;genre(A, D).;true;true
4;true,false;genre(B, E).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;true;genre(B, D).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(A, D).;true;true
6;true,false;genre(B, E).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;true;genre(B, D).;true;true
7;true,false;genre(A, E).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;true;genre(A, D).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;true;genre(B, D).;true;true
9;true,false;genre(A, E).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14185106490048777;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995122;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else return -0.14185106490048777;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   else return -0.1418510649004878;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7194734122109544;  // std dev = 2.98e-08, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else return -0.12544463852839138;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   else return -0.12544463852839138;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.11231637819360639;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( female(A) )
%   | | then return 0.5553664367462845;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return 0.4599831774691573;  // std dev = 0.234, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   else return -0.11231637819360639;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.41751358415830997;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return 0.4408765156114187;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else if ( genre(A, E) )
%   | | then return -0.10159632948783628;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else return -0.16696206840230302;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   else if ( female(A) )
%   | then return -0.10159632948783628;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else return -0.1015963294878363;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.09269127618926096;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( genre(B, E) )
%   | | then if ( female(A) )
%   | | | then return 0.32071184716014967;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.3366001796151275;  // std dev = 1.05e-08, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return -0.1450115464405512;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   else return -0.09269127618926097;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.25517224256948945;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return 0.2659864307288369;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else return -0.10656297171391912;  // std dev = 0.030, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   else if ( female(B) )
%   | then return -0.08518475138839687;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else return -0.08518475138839687;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.07723922044079208;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( genre(B, E) )
%   | | then if ( female(A) )
%   | | | then return 0.20975771563253554;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.21736837048704824;  // std dev = 1.05e-08, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return -0.11651553333841119;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   else return -0.07877675473109173;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.18043385045654156;  // std dev = 0.003, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | else if ( genre(A, E) )
%   | | then return -0.07191076711954764;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else return -0.10504687665812086;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   else if ( female(A) )
%   | then return -0.07324622576333704;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else return -0.07324622576333704;  // std dev = 1.86e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.06725674646455405;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else return 0.1324679200408372;  // std dev = 0.072, 11.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=10 */
%   else return -0.06842697784420272;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.1386798202967101;  // std dev = 0.002, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | else if ( genre(A, E) )
%   | | then return -0.0631583389473491;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else return -0.10765284403100828;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   else return -0.0641918400820262;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */


Results
   AUC ROC   = 0.982685
   AUC PR    = 0.848074
   CLL	      = -0.106833
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.724719
   F1        = 0.840391


Total learning time: 0.716 seconds
Total inference time: 1.017 seconds
AUC ROC: 0.982685


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.098735
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 0.342 seconds
Refined model CLL: -0.098735


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.982685
   AUC PR    = 0.848074
   CLL	      = -0.106833
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.724719
   F1        = 0.840391


Total learning time: 2.045 seconds
Total inference time: 1.017 seconds
AUC ROC: 0.982685
Total revision time: 2.045
Best scored revision CLL: -0.098735


Dataset: 4_cora_imdb, Fold: 3, Type: Transfer (trRDN-B), Time: 00:00:54
{'AUC ROC': 0.982685, 'AUC PR': 0.848074, 'CLL': -0.106833, 'Precision': [1.0, 0.5], 'Recall': 0.724719, 'F1': 0.840391, 'Learning time': 2.045, 'Inference time': 1.017, 'parameter_10': {'AUC ROC': 0.97199, 'AUC PR': 0.81824, 'CLL': -0.107163, 'Precision': [1.0, 0.5], 'Recall': 0.724719, 'F1': 0.840391, 'Learning time': 0.654, 'Inference time': 1.089}}


Amount of data: 15
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;title(I, H), venue(I, A).;false;false
0;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
0;false;haswordvenue(A, L), haswordtitle(M, L).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordtitle(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordauthor(I, H).;false;true
2;true,false,false;haswordvenue(A, J), haswordtitle(K, J).;false;false
2;false;haswordvenue(A, L), haswordtitle(M, L).;true;false
2;false,true;haswordauthor(N, L).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;title(E, D), venue(E, B).;false;true
3;true,true,false;title(F, D), venue(F, A).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, A).;false;true
4;true,true,false;title(F, D), venue(F, B).;false;false
4;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
4;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
4;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
4;false,true;haswordauthor(M, K).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, B).;false;true
5;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
5;true,false;haswordvenue(B, H), haswordtitle(I, H).;true;true
5;true,false,true;title(J, I), venue(J, B).;false;false
5;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
5;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;title(E, D), venue(E, A).;false;true
6;true,true,false;title(F, D), venue(F, B).;false;false
6;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
6;true,false,true;title(I, H), venue(I, B).;false;false
6;true,false,false;haswordvenue(A, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;title(F, D), venue(F, A).;false;false
7;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
7;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
7;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
7;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;title(E, D), venue(E, A).;false;true
8;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
8;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
8;true,false,true;title(J, I), venue(J, A).;false;false
8;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
8;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, B).;false;true
9;true,true,false;title(F, D), venue(F, A).;false;false
9;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
9;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
9;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
9;false,true;haswordauthor(M, K).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14185106490048777;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995123;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.10814893509951219;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.1418510649004878;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7194734122109542;  // std dev = 5.16e-08, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.09446743783575562;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.12544463852839138;  // std dev = 5.27e-09, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.11231637819360639;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( movie(E, A) )
%   | | then return 0.4500966492935239;  // std dev = 1.203, 18.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=15 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.11231637819360638;  // std dev = 1.32e-09, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.4433149939337246;  // std dev = 2.11e-08, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | else if ( genre(A, E) )
%   | | then return -0.10159632948783628;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.009015023525078554;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.10159632948783628;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.09269127618926096;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( genre(B, E) )
%   | | then return 0.3382653516950622;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.007362226464175031;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.09269127618926097;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.2671169929995241;  // std dev = 2.36e-08, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | else if ( movie(E, B) )
%   | | then if ( genre(B, F) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.012231552631842401;  // std dev = 0.870, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.08518475138839687;  // std dev = 5.27e-09, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.08423639081735391;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( genre(B, E) )
%   | | then return 0.21816086004058377;  // std dev = 1.05e-08, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.008255914931690284;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.07877675473109172;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.183235709162413;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | else if ( genre(A, E) )
%   | | then return -0.07796180434778438;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.006739348756344195;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.07324622576333704;  // std dev = 1.32e-09, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.07253879559370965;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( movie(E, A) )
%   | | then if ( genre(A, F) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.12363224855285981;  // std dev = 0.907, 18.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=15 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.06842697784420272;  // std dev = 2.63e-09, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.1416752384154989;  // std dev = 7.45e-09, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | else if ( genre(A, E) )
%   | | then return -0.06780739250795398;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.018054886795188366;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.06419184008202619;  // std dev = 1.61e-09, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 0.97199
   AUC PR    = 0.81824
   CLL	      = -0.127613
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.724719
   F1        = 0.840391


Total learning time: 0.651 seconds
Total inference time: 1.182 seconds
AUC ROC: 0.97199


Results scoring model
   AUC ROC   = 0.993333
   AUC PR    = 0.994444
   CLL	      = -0.162581
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.933333
   F1        = 0.965517


Total scoring time: 0.359 seconds
Parameter learned model CLL: -0.162581


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 1, 0], 'true,false,true': [0.0, 0, 14], 'true,false,false,true': [0.866, 3, 1], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 11, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [5.16e-08, 0, 14], 'true,false,true': [0.0, 1, 0], 'true,false,false,true': [0.866, 3, 1], 'true,false,false,false': [0.0, 0, 0], 'false,true': [5.27e-09, 11, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.0, 1, 0], 'true,false,true': [1.203, 3, 15], 'true,false,false': [0.0, 0, 0], 'false,true': [1.32e-09, 11, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [2.11e-08, 0, 14], 'true,false,true': [0.0, 1, 0], 'true,false,false,true': [0.866, 3, 1], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 11, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 1, 0], 'true,false,true': [0.0, 0, 14], 'true,false,false,true': [0.866, 3, 1], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 11, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, B)', 'true,false,true': 'genre(B, F)', 'false': 'movie(G, A)'}, {'true,true': [2.36e-08, 0, 14], 'true,false,true,true': [0.0, 0, 0], 'true,false,true,false': [0.87, 4, 1], 'true,false,false': [0.0, 0, 0], 'false,true': [5.27e-09, 11, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 1, 0], 'true,false,true': [1.05e-08, 0, 14], 'true,false,false,true': [0.866, 3, 1], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 11, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 0, 14], 'true,false,true': [0.0, 1, 0], 'true,false,false,true': [0.866, 3, 1], 'true,false,false,false': [0.0, 0, 0], 'false,true': [1.32e-09, 11, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'true,false,true': 'genre(A, F)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 1, 0], 'true,false,true,true': [0.0, 0, 0], 'true,false,true,false': [0.907, 3, 15], 'true,false,false': [0.0, 0, 0], 'false,true': [2.63e-09, 11, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [7.45e-09, 0, 14], 'true,false,true': [0.0, 1, 0], 'true,false,false,true': [0.866, 3, 1], 'true,false,false,false': [0.0, 0, 0], 'false,true': [1.61e-09, 11, 0], 'false,false': [0.0, 0, 0]}]]
[{'': [0.16620498614958412, -1.0092936587501423e-17], 'true': [0.0, 0.1388888888888886], 'true,false': [-2.5376526277146434e-16, 0.18750000000000003], 'true,false,false': [0.18750000000000003, nan], 'false': [-1.0092936587501423e-17, nan]}, {'': [0.12829161957921992, 2.523234146875356e-18], 'true': [1.9032394707859825e-16, 0.15773781141292648], 'true,false': [0.0, 0.18749999999999997], 'true,false,false': [0.18749999999999997, nan], 'false': [2.523234146875356e-18, nan]}, {'': [0.09198997240647777, 5.046468293750712e-18], 'true': [0.0, 0.08045271519288942], 'true,false': [0.08045271519288942, nan], 'false': [5.046468293750712e-18, nan]}, {'': [0.08038354125150458, 0.0], 'true': [3.172065784643304e-17, 0.15195757942645566], 'true,false': [0.0, 0.18750000000000003], 'true,false,false': [0.18750000000000003, nan], 'false': [0.0, nan]}, {'': [0.0637728493332983, 0.0], 'true': [0.0, 0.06059205303735747], 'true,false': [-3.172065784643304e-17, 0.18750000000000003], 'true,false,false': [0.18750000000000003, nan], 'false': [0.0, nan]}, {'': [0.05495538563699307, 2.523234146875356e-18], 'true': [3.9650822308041306e-17, 0.15133054230220336], 'true,false': [0.15133054230220336, nan], 'true,false,true': [nan, 0.15133054230220336], 'false': [2.523234146875356e-18, nan]}, {'': [0.04994958859835631, 0.0], 'true': [0.0, 0.04928199016958454], 'true,false': [7.93016446160826e-18, 0.18750000000000006], 'true,false,false': [0.18750000000000006, nan], 'false': [0.0, nan]}, {'': [0.04703127193765203, 6.30808536718839e-19], 'true': [-2.3790493384824782e-17, 0.15114788565394702], 'true,false': [0.0, 0.18749999999999994], 'true,false,false': [0.18749999999999994, nan], 'false': [6.30808536718839e-19, nan]}, {'': [0.045170081086777635, 6.30808536718839e-19], 'true': [0.0, 0.04565410484859279], 'true,false': [0.04565410484859279, nan], 'true,false,true': [nan, 0.04565410484859279], 'false': [6.30808536718839e-19, nan]}, {'': [0.045160750102242034, 2.523234146875356e-18], 'true': [3.96508223080413e-18, 0.15039604989195177], 'true,false': [0.0, 0.18749999999999997], 'true,false,false': [0.18749999999999997, nan], 'false': [2.523234146875356e-18, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(A, D).;true;true
0;true,false;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;true;genre(B, D).;true;true
1;true,false;genre(A, E).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;true;genre(A, D).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;true;genre(B, D).;true;true
3;true,false;genre(A, E).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;true;genre(A, D).;true;true
4;true,false;genre(B, E).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;true;genre(B, D).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(A, D).;true;true
6;true,false;genre(B, E).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;true;genre(B, D).;true;true
7;true,false;genre(A, E).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;true;genre(A, D).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;true;genre(B, D).;true;true
9;true,false;genre(A, E).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14185106490048777;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995123;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | else return 0.10814893509951219;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   else return -0.1418510649004878;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7194734122109542;  // std dev = 5.16e-08, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else return 0.09446743783575562;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   else return -0.12544463852839138;  // std dev = 5.27e-09, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.11231637819360639;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( director(B) )
%   | | then if ( female(A) )
%   | | | then return 0.5948358590980813;  // std dev = 0.256, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return 0.5553664367462846;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return -0.16834760679113825;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else return -0.11231637819360638;  // std dev = 7.45e-09, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.41341369068196504;  // std dev = 0.018, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | else if ( genre(A, E) )
%   | | then return -0.10159632948783628;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else return 0.07333430481614461;  // std dev = 0.760, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   else return -0.10159632948783628;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.09269127618926096;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( genre(B, E) )
%   | | then return 0.31794142464692665;  // std dev = 0.016, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | else return 0.06263326125210181;  // std dev = 0.756, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   else return -0.09269127618926097;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.25328557802046614;  // std dev = 0.014, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | else return 0.02545212860813544;  // std dev = 0.762, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   else return -0.08518475138839687;  // std dev = 5.27e-09, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.08718924787010704;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( genre(B, E) )
%   | | then return 0.20842692329975257;  // std dev = 0.012, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | else return 0.04914077692560243;  // std dev = 0.750, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   else return -0.07877675473109172;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.17612158964412353;  // std dev = 0.011, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | else if ( genre(A, E) )
%   | | then return -0.08049526679033583;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else return 0.04130894279420627;  // std dev = 0.747, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   else return -0.07324622576333704;  // std dev = 2.63e-09, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.07473497139830244;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( director(B) )
%   | | then if ( female(A) )
%   | | | then return 0.22484990161317667;  // std dev = 0.491, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return 0.15418102105325693;  // std dev = 5.27e-09, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return -0.1803671767470905;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else return -0.06842697784420272;  // std dev = 2.63e-09, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.12982983387201227;  // std dev = 0.023, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | else if ( genre(A, E) )
%   | | then return -0.06972851977253096;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else return 0.04071203862293529;  // std dev = 0.679, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   else return -0.06419184008202619;  // std dev = 5.27e-09, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */


Results
   AUC ROC   = 0.999728
   AUC PR    = 0.995364
   CLL	      = -0.104207
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.724719
   F1        = 0.840391


Total learning time: 0.669 seconds
Total inference time: 0.951 seconds
AUC ROC: 0.999728


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.132258
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.933333
   F1        = 0.965517


Total scoring time: 0.356 seconds
Refined model CLL: -0.132258


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.999728
   AUC PR    = 0.995364
   CLL	      = -0.104207
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.724719
   F1        = 0.840391


Total learning time: 2.035 seconds
Total inference time: 0.951 seconds
AUC ROC: 0.999728
Total revision time: 2.035
Best scored revision CLL: -0.132258


Dataset: 4_cora_imdb, Fold: 3, Type: Transfer (trRDN-B), Time: 00:00:59
{'AUC ROC': 0.999728, 'AUC PR': 0.995364, 'CLL': -0.104207, 'Precision': [1.0, 0.5], 'Recall': 0.724719, 'F1': 0.840391, 'Learning time': 2.035, 'Inference time': 0.951, 'parameter_15': {'AUC ROC': 0.97199, 'AUC PR': 0.81824, 'CLL': -0.127613, 'Precision': [1.0, 0.5], 'Recall': 0.724719, 'F1': 0.840391, 'Learning time': 0.651, 'Inference time': 1.182}}


Amount of data: 20
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;title(I, H), venue(I, A).;false;false
0;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
0;false;haswordvenue(A, L), haswordtitle(M, L).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordtitle(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordauthor(I, H).;false;true
2;true,false,false;haswordvenue(A, J), haswordtitle(K, J).;false;false
2;false;haswordvenue(A, L), haswordtitle(M, L).;true;false
2;false,true;haswordauthor(N, L).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;title(E, D), venue(E, B).;false;true
3;true,true,false;title(F, D), venue(F, A).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, A).;false;true
4;true,true,false;title(F, D), venue(F, B).;false;false
4;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
4;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
4;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
4;false,true;haswordauthor(M, K).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, B).;false;true
5;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
5;true,false;haswordvenue(B, H), haswordtitle(I, H).;true;true
5;true,false,true;title(J, I), venue(J, B).;false;false
5;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
5;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;title(E, D), venue(E, A).;false;true
6;true,true,false;title(F, D), venue(F, B).;false;false
6;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
6;true,false,true;title(I, H), venue(I, B).;false;false
6;true,false,false;haswordvenue(A, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;title(F, D), venue(F, A).;false;false
7;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
7;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
7;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
7;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;title(E, D), venue(E, A).;false;true
8;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
8;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
8;true,false,true;title(J, I), venue(J, A).;false;false
8;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
8;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, B).;false;true
9;true,true,false;title(F, D), venue(F, A).;false;false
9;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
9;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
9;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
9;false,true;haswordauthor(M, K).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14185106490048777;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995123;  // std dev = 0.000, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.024815601766178873;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.1418510649004878;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7194734122109542;  // std dev = 7.30e-08, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.02176788419240575;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.12544463852839138;  // std dev = 7.45e-09, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.11231637819360639;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( movie(E, A) )
%   | | then return 0.426650461433931;  // std dev = 1.465, 25.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=20 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.11231637819360636;  // std dev = 2.95e-09, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.4491086384657059;  // std dev = 4.21e-08, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | else if ( genre(A, E) )
%   | | then return -0.10159632948783628;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( movie(F, B) )
%   | | | then return -0.043028134508429884;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.1015963294878363;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.09269127618926096;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( genre(B, E) )
%   | | then return 0.3422279410000073;  // std dev = 4.21e-08, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.035986433967386065;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.09269127618926096;  // std dev = 1.32e-09, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.26980554329571765;  // std dev = 2.11e-08, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | else if ( movie(E, B) )
%   | | then if ( genre(B, F) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.03808389271823937;  // std dev = 0.914, 7.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=1 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.08518475138839686;  // std dev = 8.33e-09, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.08226344129770949;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( genre(B, E) )
%   | | then return 0.22004315045497158;  // std dev = 1.49e-08, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | else if ( movie(F, B) )
%   | | | then return -0.024280953049647117;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.07877675473109172;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.1846044233586998;  // std dev = 0.000, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | else if ( genre(A, E) )
%   | | then return -0.07626247059404681;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( movie(F, B) )
%   | | | then return -0.020557990869502024;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.07324622576333704;  // std dev = 9.31e-10, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.07106066463923737;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( movie(E, A) )
%   | | then if ( genre(A, F) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.11620810387767484;  // std dev = 0.987, 25.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=20 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.06842697784420272;  // std dev = 3.73e-09, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.14353056659369656;  // std dev = 0.000, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | else if ( genre(A, E) )
%   | | then return -0.06651048313992478;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.03555031697128249;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.06419184008202619;  // std dev = 1.86e-09, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 0.97199
   AUC PR    = 0.81824
   CLL	      = -0.117204
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.724719
   F1        = 0.840391


Total learning time: 0.695 seconds
Total inference time: 1.035 seconds
AUC ROC: 0.97199


Results scoring model
   AUC ROC   = 0.99375
   AUC PR    = 0.995
   CLL	      = -0.155851
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.95
   F1        = 0.974359


Total scoring time: 0.376 seconds
Parameter learned model CLL: -0.155851


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 1, 0], 'true,false,true': [0.0, 0, 19], 'true,false,false,true': [0.913, 5, 1], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 14, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [7.3e-08, 0, 19], 'true,false,true': [0.0, 1, 0], 'true,false,false,true': [0.913, 5, 1], 'true,false,false,false': [0.0, 0, 0], 'false,true': [7.45e-09, 14, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.0, 1, 0], 'true,false,true': [1.465, 5, 20], 'true,false,false': [0.0, 0, 0], 'false,true': [2.95e-09, 14, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [4.21e-08, 0, 19], 'true,false,true': [0.0, 1, 0], 'true,false,false,true': [0.913, 5, 1], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 14, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 1, 0], 'true,false,true': [4.21e-08, 0, 19], 'true,false,false,true': [0.913, 5, 1], 'true,false,false,false': [0.0, 0, 0], 'false,true': [1.32e-09, 14, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, B)', 'true,false,true': 'genre(B, F)', 'false': 'movie(G, A)'}, {'true,true': [2.11e-08, 0, 19], 'true,false,true,true': [0.0, 0, 0], 'true,false,true,false': [0.914, 6, 1], 'true,false,false': [0.0, 0, 0], 'false,true': [8.33e-09, 14, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 1, 0], 'true,false,true': [1.49e-08, 0, 19], 'true,false,false,true': [0.913, 5, 1], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 14, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 0, 19], 'true,false,true': [0.0, 1, 0], 'true,false,false,true': [0.913, 5, 1], 'true,false,false,false': [0.0, 0, 0], 'false,true': [9.31e-10, 14, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'true,false,true': 'genre(A, F)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 1, 0], 'true,false,true,true': [0.0, 0, 0], 'true,false,true,false': [0.987, 5, 20], 'true,false,false': [0.0, 0, 0], 'false,true': [3.73e-09, 14, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 19], 'true,false,true': [0.0, 1, 0], 'true,false,false,true': [0.913, 5, 1], 'true,false,false,false': [0.0, 0, 0], 'false,true': [1.86e-09, 14, 0], 'false,false': [0.0, 0, 0]}]]
[{'': [0.17751479289940847, -1.1895246692412391e-17], 'true': [0.0, 0.16000000000000014], 'true,false': [-2.8047739569477637e-16, 0.13888888888888892], 'true,false,false': [0.13888888888888892, nan], 'false': [-1.1895246692412391e-17, nan]}, {'': [0.13440080177652527, 3.96508223080413e-18], 'true': [2.8047739569477637e-16, 0.12170127539608695], 'true,false': [0.0, 0.13888888888888887], 'true,false,false': [0.13888888888888887, nan], 'false': [3.96508223080413e-18, nan]}, {'': [0.0932409138425178, 9.912705577010326e-18], 'true': [0.0, 0.0857980406185995], 'true,false': [0.0857980406185995, nan], 'false': [9.912705577010326e-18, nan]}, {'': [0.08144989958286726, -3.96508223080413e-18], 'true': [9.349246523159212e-17, 0.11946764763494307], 'true,false': [0.0, 0.13888888888888892], 'true,false,false': [0.13888888888888892, nan], 'false': [-3.96508223080413e-18, nan]}, {'': [0.061519461563358635, 3.96508223080413e-18], 'true': [0.0, 0.05942494442332585], 'true,false': [9.349246523159212e-17, 0.1388888888888889], 'true,false,false': [0.1388888888888889, nan], 'false': [3.96508223080413e-18, nan]}, {'': [0.05080150329859347, 4.956352788505163e-18], 'true': [2.337311630789803e-17, 0.11941736752886344], 'true,false': [0.11941736752886344, nan], 'true,false,true': [nan, 0.11941736752886344], 'false': [4.956352788505163e-18, nan]}, {'': [0.04471654025788885, -9.912705577010326e-19], 'true': [0.0, 0.04422156773506172], 'true,false': [1.1686558153949016e-17, 0.13888888888888884], 'true,false,false': [0.13888888888888884, nan], 'false': [-9.912705577010326e-19, nan]}, {'': [0.041089804792969094, 9.912705577010326e-19], 'true': [-1.1686558153949016e-17, 0.11942757689186997], 'true,false': [0.0, 0.13888888888888892], 'true,false,false': [0.13888888888888892, nan], 'false': [9.912705577010326e-19, nan]}, {'': [0.038772653557892674, 9.912705577010326e-19], 'true': [0.0, 0.038974729251676034], 'true,false': [0.038974729251676034, nan], 'true,false,true': [nan, 0.038974729251676034], 'false': [9.912705577010326e-19, nan]}, {'': [0.03870801957507661, 3.469446951953614e-18], 'true': [0.0, 0.11916499029935658], 'true,false': [0.0, 0.1388888888888889], 'true,false,false': [0.1388888888888889, nan], 'false': [3.469446951953614e-18, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(A, D).;true;true
0;true,false;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;true;genre(B, D).;true;true
1;true,false;genre(A, E).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;true;genre(A, D).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;true;genre(B, D).;true;true
3;true,false;genre(A, E).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;true;genre(A, D).;true;true
4;true,false;genre(B, E).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;true;genre(B, D).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(A, D).;true;true
6;true,false;genre(B, E).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;true;genre(B, D).;true;true
7;true,false;genre(A, E).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;true;genre(A, D).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;true;genre(B, D).;true;true
9;true,false;genre(A, E).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14185106490048777;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995123;  // std dev = 0.000, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | else return 0.024815601766178873;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   else return -0.1418510649004878;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7194734122109542;  // std dev = 7.30e-08, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else return 0.02176788419240575;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   else return -0.12544463852839138;  // std dev = 7.45e-09, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.11231637819360639;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( director(B) )
%   | | then if ( female(A) )
%   | | | then return 0.5883683000276023;  // std dev = 0.280, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.5553664367462846;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | else return -0.1476167937218563;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else return -0.11231637819360636;  // std dev = 1.18e-08, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.414143728345797;  // std dev = 0.017, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | else if ( genre(A, E) )
%   | | then return -0.10159632948783628;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else return 0.018715157678752193;  // std dev = 0.815, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   else return -0.1015963294878363;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.09269127618926096;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( genre(B, E) )
%   | | then return 0.31843358771192853;  // std dev = 0.015, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | else return 0.016371055512736616;  // std dev = 0.813, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   else return -0.09269127618926096;  // std dev = 7.45e-09, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.25362030137528846;  // std dev = 0.013, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | else if ( female(B) )
%   | | then return -0.11773583336230042;  // std dev = 0.040, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else return 0.0884494408413076;  // std dev = 0.771, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   else return -0.08518475138839686;  // std dev = 8.33e-09, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.07644664539243694;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( genre(B, E) )
%   | | then return 0.20866280718207655;  // std dev = 0.012, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | else return 0.010575164927069705;  // std dev = 0.799, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   else return -0.07877675473109172;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.17629426070394022;  // std dev = 0.010, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | else if ( genre(A, E) )
%   | | then return -0.07122106188226644;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else return 0.009201707607166562;  // std dev = 0.798, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   else return -0.07324622576333704;  // std dev = 3.73e-09, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.06665136795691838;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( director(B) )
%   | | then if ( female(A) )
%   | | | then return 0.21474641110409431;  // std dev = 0.552, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.15392487862190887;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | else return -0.1374635930855824;  // std dev = 0.026, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else return -0.06842697784420272;  // std dev = 3.73e-09, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.13047314741898305;  // std dev = 0.023, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | else if ( genre(A, E) )
%   | | then return -0.06262290200262856;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else return 0.013596097972651247;  // std dev = 0.743, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   else return -0.06419184008202619;  // std dev = 6.97e-09, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */


Results
   AUC ROC   = 0.995299
   AUC PR    = 0.922374
   CLL	      = -0.098884
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.724719
   F1        = 0.840391


Total learning time: 0.727 seconds
Total inference time: 0.991 seconds
AUC ROC: 0.995299


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.127759
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.95
   F1        = 0.974359


Total scoring time: 0.357 seconds
Refined model CLL: -0.127759


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.995299
   AUC PR    = 0.922374
   CLL	      = -0.098884
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.724719
   F1        = 0.840391


Total learning time: 2.1550000000000002 seconds
Total inference time: 0.991 seconds
AUC ROC: 0.995299
Total revision time: 2.1550000000000002
Best scored revision CLL: -0.127759


Dataset: 4_cora_imdb, Fold: 3, Type: Transfer (trRDN-B), Time: 00:01:04
{'AUC ROC': 0.995299, 'AUC PR': 0.922374, 'CLL': -0.098884, 'Precision': [1.0, 0.5], 'Recall': 0.724719, 'F1': 0.840391, 'Learning time': 2.1550000000000002, 'Inference time': 0.991, 'parameter_20': {'AUC ROC': 0.97199, 'AUC PR': 0.81824, 'CLL': -0.117204, 'Precision': [1.0, 0.5], 'Recall': 0.724719, 'F1': 0.840391, 'Learning time': 0.695, 'Inference time': 1.035}}


Amount of data: 25
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;title(I, H), venue(I, A).;false;false
0;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
0;false;haswordvenue(A, L), haswordtitle(M, L).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordtitle(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordauthor(I, H).;false;true
2;true,false,false;haswordvenue(A, J), haswordtitle(K, J).;false;false
2;false;haswordvenue(A, L), haswordtitle(M, L).;true;false
2;false,true;haswordauthor(N, L).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;title(E, D), venue(E, B).;false;true
3;true,true,false;title(F, D), venue(F, A).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, A).;false;true
4;true,true,false;title(F, D), venue(F, B).;false;false
4;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
4;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
4;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
4;false,true;haswordauthor(M, K).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, B).;false;true
5;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
5;true,false;haswordvenue(B, H), haswordtitle(I, H).;true;true
5;true,false,true;title(J, I), venue(J, B).;false;false
5;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
5;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;title(E, D), venue(E, A).;false;true
6;true,true,false;title(F, D), venue(F, B).;false;false
6;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
6;true,false,true;title(I, H), venue(I, B).;false;false
6;true,false,false;haswordvenue(A, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;title(F, D), venue(F, A).;false;false
7;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
7;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
7;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
7;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;title(E, D), venue(E, A).;false;true
8;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
8;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
8;true,false,true;title(J, I), venue(J, A).;false;false
8;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
8;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, B).;false;true
9;true,true,false;title(F, D), venue(F, A).;false;false
9;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
9;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
9;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
9;false,true;haswordauthor(M, K).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14185106490048777;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( genre(B, E) )
%   | | then return 0.858148935099512;  // std dev = 1.03e-07, 24.000 (wgt'ed) examples reached here.  /* #pos=24 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.0010060779566550668;  // std dev = 0.926, 7.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=1 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.14185106490048777;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7194734122109544;  // std dev = 4.21e-08, 24.000 (wgt'ed) examples reached here.  /* #pos=24 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( movie(F, B) )
%   | | | then return 8.835646163369372E-4;  // std dev = 0.926, 7.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=1 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.12544463852839138;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.11231637819360639;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( movie(E, A) )
%   | | then return 0.4301363149361035;  // std dev = 1.589, 31.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=25 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.11231637819360635;  // std dev = 3.73e-09, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.4482463570508113;  // std dev = 0.000, 24.000 (wgt'ed) examples reached here.  /* #pos=24 */
%   | else if ( genre(A, E) )
%   | | then return -0.10159632948783628;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( movie(F, B) )
%   | | | then return -0.06009022470137742;  // std dev = 0.926, 7.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=1 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.10159632948783635;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.09269127618926096;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( genre(B, E) )
%   | | then return 0.3416375986907463;  // std dev = 0.000, 24.000 (wgt'ed) examples reached here.  /* #pos=24 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.05054333016003768;  // std dev = 0.926, 7.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=1 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.09269127618926093;  // std dev = 2.63e-09, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.26940516318705515;  // std dev = 0.000, 24.000 (wgt'ed) examples reached here.  /* #pos=24 */
%   | else if ( movie(E, B) )
%   | | then if ( genre(B, F) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.048081191334305;  // std dev = 0.927, 8.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.08518475138839683;  // std dev = 1.18e-08, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.08151182873891992;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( genre(B, E) )
%   | | then return 0.2197630421056057;  // std dev = 2.98e-08, 24.000 (wgt'ed) examples reached here.  /* #pos=24 */
%   | | else if ( movie(F, B) )
%   | | | then return -0.03562152932332666;  // std dev = 0.926, 7.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=1 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.07877675473109179;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.18440088798808765;  // std dev = 2.79e-08, 24.000 (wgt'ed) examples reached here.  /* #pos=24 */
%   | else if ( genre(A, E) )
%   | | then return -0.07561369068944264;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( movie(F, B) )
%   | | | then return -0.030458238484969986;  // std dev = 0.926, 7.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=1 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.07324622576333704;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.0704952622990834;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( movie(E, A) )
%   | | then if ( genre(A, F) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.11662391861303209;  // std dev = 1.020, 31.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=25 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.06842697784420274;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.14333828662484963;  // std dev = 2.47e-08, 24.000 (wgt'ed) examples reached here.  /* #pos=24 */
%   | else if ( genre(A, E) )
%   | | then return -0.06601356518474782;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.04315331248306257;  // std dev = 0.926, 7.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=1 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.0641918400820262;  // std dev = 1.32e-09, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 0.97199
   AUC PR    = 0.81824
   CLL	      = -0.114958
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.724719
   F1        = 0.840391


Total learning time: 0.692 seconds
Total inference time: 1.145 seconds
AUC ROC: 0.97199


Results scoring model
   AUC ROC   = 0.9952
   AUC PR    = 0.996129
   CLL	      = -0.146806
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.96
   F1        = 0.979592


Total scoring time: 0.38 seconds
Parameter learned model CLL: -0.146806


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 1, 0], 'true,false,true': [1.03e-07, 0, 24], 'true,false,false,true': [0.926, 6, 1], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 18, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [4.21e-08, 0, 24], 'true,false,true': [0.0, 1, 0], 'true,false,false,true': [0.926, 6, 1], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 18, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.0, 1, 0], 'true,false,true': [1.589, 6, 25], 'true,false,false': [0.0, 0, 0], 'false,true': [3.73e-09, 18, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 24], 'true,false,true': [0.0, 1, 0], 'true,false,false,true': [0.926, 6, 1], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 18, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 1, 0], 'true,false,true': [0.0, 0, 24], 'true,false,false,true': [0.926, 6, 1], 'true,false,false,false': [0.0, 0, 0], 'false,true': [2.63e-09, 18, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, B)', 'true,false,true': 'genre(B, F)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 0, 24], 'true,false,true,true': [0.0, 0, 0], 'true,false,true,false': [0.927, 7, 1], 'true,false,false': [0.0, 0, 0], 'false,true': [1.18e-08, 18, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 1, 0], 'true,false,true': [2.98e-08, 0, 24], 'true,false,false,true': [0.926, 6, 1], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 18, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, A)'}, {'true,true': [2.79e-08, 0, 24], 'true,false,true': [0.0, 1, 0], 'true,false,false,true': [0.926, 6, 1], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 18, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'true,false,true': 'genre(A, F)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 1, 0], 'true,false,true,true': [0.0, 0, 0], 'true,false,true,false': [1.02, 6, 25], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 18, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [2.47e-08, 0, 24], 'true,false,true': [0.0, 1, 0], 'true,false,false,true': [0.926, 6, 1], 'true,false,false,false': [0.0, 0, 0], 'false,true': [1.32e-09, 18, 0], 'false,false': [0.0, 0, 0]}]]
[{'': [0.1708984375000011, -3.0839528461809902e-18], 'true': [0.0, 0.15608740894901246], 'true,false': [4.440892098500626e-16, 0.12244897959183677], 'true,false,false': [0.12244897959183677, nan], 'false': [-3.0839528461809902e-18, nan]}, {'': [0.12834370062031347, 0.0], 'true': [7.401486830834377e-17, 0.10888835252361383], 'true,false': [0.0, 0.12244897959183668], 'true,false,false': [0.12244897959183668, nan], 'false': [0.0, nan]}, {'': [0.08778240295219508, 1.5419764230904953e-17], 'true': [0.0, 0.08141862698614295], 'true,false': [0.08141862698614295, nan], 'false': [1.5419764230904953e-17, nan]}, {'': [0.07627802709243564, -4.625929269271485e-18], 'true': [0.0, 0.10733128366069793], 'true,false': [0.0, 0.12244897959183672], 'true,false,false': [0.12244897959183672, nan], 'false': [-4.625929269271485e-18, nan]}, {'': [0.056452922159841566, 6.1679056923619804e-18], 'true': [0.0, 0.05453779039723698], 'true,false': [-5.551115123125783e-17, 0.12244897959183676], 'true,false,false': [0.12244897959183676, nan], 'false': [6.1679056923619804e-18, nan]}, {'': [0.04573442846542206, 7.709882115452476e-18], 'true': [-9.25185853854297e-18, 0.1073395248812411], 'true,false': [0.1073395248812411, nan], 'true,false,true': [nan, 0.1073395248812411], 'false': [7.709882115452476e-18, nan]}, {'': [0.039627817323548545, 0.0], 'true': [0.0, 0.03905161654302854], 'true,false': [3.700743415417188e-17, 0.12244897959183677], 'true,false,false': [0.12244897959183677, nan], 'false': [0.0, nan]}, {'': [0.03595805967778032, -7.709882115452476e-19], 'true': [3.23815048849004e-17, 0.10736587439358419], 'true,false': [0.0, 0.12244897959183672], 'true,false,false': [0.12244897959183672, nan], 'false': [-7.709882115452476e-19, nan]}, {'': [0.033604347434285343, -1.5419764230904951e-18], 'true': [0.0, 0.033594184021054775], 'true,false': [0.033594184021054775, nan], 'true,false,true': [nan, 0.033594184021054775], 'false': [-1.5419764230904951e-18, nan]}, {'': [0.03352245888041791, 2.3129646346357427e-18], 'true': [2.544261098099317e-17, 0.1072000155502805], 'true,false': [0.0, 0.12244897959183675], 'true,false,false': [0.12244897959183675, nan], 'false': [2.3129646346357427e-18, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(A, D).;true;true
0;true,false;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;true;genre(B, D).;true;true
1;true,false;genre(A, E).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;true;genre(A, D).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;true;genre(B, D).;true;true
3;true,false;genre(A, E).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;true;genre(A, D).;true;true
4;true,false;genre(B, E).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;true;genre(B, D).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(A, D).;true;true
6;true,false;genre(B, E).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;true;genre(B, D).;true;true
7;true,false;genre(A, E).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;true;genre(A, D).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;true;genre(B, D).;true;true
9;true,false;genre(A, E).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14185106490048777;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( genre(B, E) )
%   | | then return 0.858148935099512;  // std dev = 1.03e-07, 24.000 (wgt'ed) examples reached here.  /* #pos=24 */
%   | | else return 0.0010060779566550668;  // std dev = 0.350, 7.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=1 */
%   else return -0.14185106490048777;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7194734122109544;  // std dev = 4.21e-08, 24.000 (wgt'ed) examples reached here.  /* #pos=24 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else return 8.835646163369372E-4;  // std dev = 0.350, 7.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=1 */
%   else return -0.12544463852839138;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.11231637819360639;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( actor(B) )
%   | | then return -0.1420812455559455;  // std dev = 3.73e-09, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else if ( female(A) )
%   | | | then return 0.5805791298877655;  // std dev = 0.290, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return 0.5553664367462846;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   else return -0.11231637819360635;  // std dev = 1.67e-08, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.414709236390342;  // std dev = 0.015, 24.000 (wgt'ed) examples reached here.  /* #pos=24 */
%   | else if ( genre(A, E) )
%   | | then return -0.10159632948783628;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else return 0.002552564137319643;  // std dev = 0.314, 7.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=1 */
%   else return -0.10159632948783635;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.09269127618926096;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( genre(B, E) )
%   | | then return 0.3188145014136558;  // std dev = 0.013, 24.000 (wgt'ed) examples reached here.  /* #pos=24 */
%   | | else return 0.0022477010817998277;  // std dev = 0.314, 7.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=1 */
%   else return -0.09269127618926093;  // std dev = 1.05e-08, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.25387909848220325;  // std dev = 0.012, 24.000 (wgt'ed) examples reached here.  /* #pos=24 */
%   | else if ( female(B) )
%   | | then return -0.1124982774326322;  // std dev = 0.033, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else return 0.05323232856235427;  // std dev = 0.802, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   else return -0.08518475138839683;  // std dev = 1.18e-08, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.07681725152687677;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( genre(B, E) )
%   | | then return 0.20884501049429297;  // std dev = 0.010, 24.000 (wgt'ed) examples reached here.  /* #pos=24 */
%   | | else return 5.922397809508381E-4;  // std dev = 0.311, 7.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=1 */
%   else return -0.07877675473109179;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.17642752422454563;  // std dev = 0.009, 24.000 (wgt'ed) examples reached here.  /* #pos=24 */
%   | else if ( genre(A, E) )
%   | | then return -0.07154367651576456;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else return 5.209117201918792E-4;  // std dev = 0.311, 7.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=1 */
%   else return -0.07324622576333704;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.06693462365806972;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( director(B) )
%   | | then if ( female(A) )
%   | | | then return 0.2013557697078958;  // std dev = 0.585, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return 0.15372694087502525;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | else return -0.12630536261523206;  // std dev = 0.021, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   else return -0.06842697784420274;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.13098345352371482;  // std dev = 0.020, 24.000 (wgt'ed) examples reached here.  /* #pos=24 */
%   | else if ( genre(A, E) )
%   | | then return -0.06287349945515094;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else return 0.006343693974429396;  // std dev = 0.292, 7.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=1 */
%   else return -0.0641918400820262;  // std dev = 6.45e-09, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */


Results
   AUC ROC   = 0.995299
   AUC PR    = 0.922374
   CLL	      = -0.098055
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.724719
   F1        = 0.840391


Total learning time: 0.902 seconds
Total inference time: 0.942 seconds
AUC ROC: 0.995299


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.123311
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.96
   F1        = 0.979592


Total scoring time: 0.374 seconds
Refined model CLL: -0.123311


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.995299
   AUC PR    = 0.922374
   CLL	      = -0.098055
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.724719
   F1        = 0.840391


Total learning time: 2.3480000000000003 seconds
Total inference time: 0.942 seconds
AUC ROC: 0.995299
Total revision time: 2.3480000000000003
Best scored revision CLL: -0.123311


Dataset: 4_cora_imdb, Fold: 3, Type: Transfer (trRDN-B), Time: 00:01:09
{'AUC ROC': 0.995299, 'AUC PR': 0.922374, 'CLL': -0.098055, 'Precision': [1.0, 0.5], 'Recall': 0.724719, 'F1': 0.840391, 'Learning time': 2.3480000000000003, 'Inference time': 0.942, 'parameter_25': {'AUC ROC': 0.97199, 'AUC PR': 0.81824, 'CLL': -0.114958, 'Precision': [1.0, 0.5], 'Recall': 0.724719, 'F1': 0.840391, 'Learning time': 0.692, 'Inference time': 1.145}}


Starting fold 4

Target train facts examples: 927
Target train pos examples: 337
Target train neg examples: 12345

Target test facts examples: 151
Target test pos	 examples: 45
Target test neg examples: 1891

Amount of data: 5
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;title(I, H), venue(I, A).;false;false
0;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
0;false;haswordvenue(A, L), haswordtitle(M, L).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordtitle(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordauthor(I, H).;false;true
2;true,false,false;haswordvenue(A, J), haswordtitle(K, J).;false;false
2;false;haswordvenue(A, L), haswordtitle(M, L).;true;false
2;false,true;haswordauthor(N, L).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;title(E, D), venue(E, B).;false;true
3;true,true,false;title(F, D), venue(F, A).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, A).;false;true
4;true,true,false;title(F, D), venue(F, B).;false;false
4;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
4;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
4;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
4;false,true;haswordauthor(M, K).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, B).;false;true
5;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
5;true,false;haswordvenue(B, H), haswordtitle(I, H).;true;true
5;true,false,true;title(J, I), venue(J, B).;false;false
5;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
5;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;title(E, D), venue(E, A).;false;true
6;true,true,false;title(F, D), venue(F, B).;false;false
6;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
6;true,false,true;title(I, H), venue(I, B).;false;false
6;true,false,false;haswordvenue(A, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;title(F, D), venue(F, A).;false;false
7;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
7;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
7;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
7;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;title(E, D), venue(E, A).;false;true
8;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
8;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
8;true,false,true;title(J, I), venue(J, A).;false;false
8;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
8;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, B).;false;true
9;true,true,false;title(F, D), venue(F, A).;false;false
9;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
9;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
9;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
9;false,true;haswordauthor(M, K).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995122;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.14185106490048777;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7194734122109545;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(E, B) )
%   | then return -0.12544463852839138;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A) )
%   | | then return 0.5553664367462845;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.11231637819360638;  // std dev = 1.86e-09, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.4175135841583099;  // std dev = 1.49e-08, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(E, B) )
%   | then return -0.10159632948783633;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( genre(B, E) )
%   | | then return 0.32071184716014967;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, B) )
%   | then return -0.09269127618926098;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.25517224256948945;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(E, A) )
%   | then return -0.08518475138839687;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( genre(B, E) )
%   | | then return 0.20975771563253556;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, B) )
%   | then return -0.07877675473109177;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.17709649774527736;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(E, A) )
%   | then return -0.07324622576333704;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A) )
%   | | then if ( genre(A, F) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.15274385809367097;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.06842697784420272;  // std dev = 1.86e-09, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.13400703000801117;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(E, B) )
%   | then return -0.0641918400820262;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.126025
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 0.565 seconds
Total inference time: 0.808 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.094637
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 0.332 seconds
Parameter learned model CLL: -0.094637


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'false': 'movie(F, A)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 5], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 5, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'false': 'movie(E, B)'}, {'true,true': [0.0, 0, 5], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 5, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 5], 'true,false,false': [0.0, 0, 0], 'false,true': [1.86e-09, 5, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'false': 'movie(E, B)'}, {'true,true': [1.49e-08, 0, 5], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 5, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'false': 'movie(F, B)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 5], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 5, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'false': 'movie(E, A)'}, {'true,true': [0.0, 0, 5], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 5, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'false': 'movie(F, B)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 5], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 5, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'false': 'movie(E, A)'}, {'true,true': [0.0, 0, 5], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 5, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'true,false,true': 'genre(A, F)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 0, 0], 'true,false,true,true': [0.0, 0, 0], 'true,false,true,false': [0.0, 0, 5], 'true,false,false': [0.0, 0, 0], 'false,true': [1.86e-09, 5, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'false': 'movie(E, B)'}, {'true,true': [0.0, 0, 5], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 5, 0], 'false,false': [0.0, 0, 0]}]]
[{'': [0.0, -2.7755575615628915e-18], 'true': [nan, 0.0], 'true,false': [0.0, nan], 'false': [-2.7755575615628915e-18, nan]}, {'': [0.0, 0.0], 'true': [0.0, nan], 'false': [0.0, nan]}, {'': [-4.4408920985006264e-17, 0.0], 'false': [0.0, nan], 'true': [nan, -4.4408920985006264e-17], 'true,false': [-4.4408920985006264e-17, nan]}, {'': [4.4408920985006264e-17, 0.0], 'true': [4.4408920985006264e-17, nan], 'false': [0.0, nan]}, {'': [-2.2204460492503132e-17, 0.0], 'false': [0.0, nan], 'true': [nan, -2.2204460492503132e-17], 'true,false': [-2.2204460492503132e-17, nan]}, {'': [0.0, 0.0], 'true': [0.0, nan], 'false': [0.0, nan]}, {'': [-5.551115123125783e-18, -1.3877787807814458e-18], 'false': [-1.3877787807814458e-18, nan], 'true': [nan, -5.551115123125783e-18], 'true,false': [-5.551115123125783e-18, nan]}, {'': [0.0, -6.938893903907229e-19], 'true': [0.0, nan], 'false': [-6.938893903907229e-19, nan]}, {'': [0.0, 6.938893903907229e-19], 'false': [6.938893903907229e-19, nan], 'true': [nan, 0.0], 'true,false': [0.0, nan], 'true,false,true': [nan, 0.0]}, {'': [0.0, 0.0], 'true': [0.0, nan], 'false': [0.0, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.8581489350995122;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return -0.14185106490048777;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.7194734122109545;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return -0.12544463852839138;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.5553664367462845;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return -0.11231637819360638;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.4175135841583099;  // std dev = 1.49e-08, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return -0.10159632948783633;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.32071184716014967;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return -0.09269127618926098;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.25517224256948945;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return -0.08518475138839687;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.20975771563253556;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return -0.07877675473109177;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.17709649774527736;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return -0.07324622576333704;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.15274385809367097;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return -0.06842697784420272;  // std dev = 1.86e-09, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.13400703000801117;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return -0.0641918400820262;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */


Results
   AUC ROC   = 0.85431
   AUC PR    = 0.075503
   CLL	      = -0.65144
   Precision = 0.075503 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.140406


Total learning time: 0.512 seconds
Total inference time: 0.663 seconds
AUC ROC: 0.85431


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.094637
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 0.308 seconds
Refined model CLL: -0.094637


******************************************
Best model found
******************************************
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.126025
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 1.717 seconds
Total inference time: 0.808 seconds
AUC ROC: 1.0
Total revision time: 1.717
Best scored revision CLL: -0.094637


Dataset: 4_cora_imdb, Fold: 4, Type: Transfer (trRDN-B), Time: 00:01:13
{'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.126025, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 1.717, 'Inference time': 0.808, 'parameter_5': {'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.126025, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 0.565, 'Inference time': 0.808}}


Amount of data: 10
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;title(I, H), venue(I, A).;false;false
0;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
0;false;haswordvenue(A, L), haswordtitle(M, L).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordtitle(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordauthor(I, H).;false;true
2;true,false,false;haswordvenue(A, J), haswordtitle(K, J).;false;false
2;false;haswordvenue(A, L), haswordtitle(M, L).;true;false
2;false,true;haswordauthor(N, L).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;title(E, D), venue(E, B).;false;true
3;true,true,false;title(F, D), venue(F, A).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, A).;false;true
4;true,true,false;title(F, D), venue(F, B).;false;false
4;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
4;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
4;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
4;false,true;haswordauthor(M, K).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, B).;false;true
5;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
5;true,false;haswordvenue(B, H), haswordtitle(I, H).;true;true
5;true,false,true;title(J, I), venue(J, B).;false;false
5;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
5;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;title(E, D), venue(E, A).;false;true
6;true,true,false;title(F, D), venue(F, B).;false;false
6;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
6;true,false,true;title(I, H), venue(I, B).;false;false
6;true,false,false;haswordvenue(A, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;title(F, D), venue(F, A).;false;false
7;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
7;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
7;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
7;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;title(E, D), venue(E, A).;false;true
8;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
8;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
8;true,false,true;title(J, I), venue(J, A).;false;false
8;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
8;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, B).;false;true
9;true,true,false;title(F, D), venue(F, A).;false;false
9;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
9;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
9;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
9;false,true;haswordauthor(M, K).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995122;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.1418510649004878;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7194734122109544;  // std dev = 2.98e-08, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(E, B) )
%   | then return -0.12544463852839138;  // std dev = 5.27e-09, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A) )
%   | | then return 0.5553664367462846;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.11231637819360638;  // std dev = 1.86e-09, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.41751358415830986;  // std dev = 3.65e-08, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(E, B) )
%   | then return -0.10159632948783628;  // std dev = 1.32e-09, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( genre(B, E) )
%   | | then return 0.3207118471601497;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, B) )
%   | then return -0.09269127618926097;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.2551722425694894;  // std dev = 1.83e-08, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(E, A) )
%   | then return -0.08518475138839687;  // std dev = 3.73e-09, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( genre(B, E) )
%   | | then return 0.2097577156325356;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, B) )
%   | then return -0.07877675473109172;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.17709649774527736;  // std dev = 7.45e-09, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(E, A) )
%   | then return -0.07324622576333704;  // std dev = 9.31e-10, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A) )
%   | | then if ( genre(A, F) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.15274385809367094;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.06842697784420272;  // std dev = 2.63e-09, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.13400703000801117;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(E, B) )
%   | then return -0.06419184008202619;  // std dev = 1.61e-09, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.126025
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 0.604 seconds
Total inference time: 0.779 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.094637
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 0.339 seconds
Parameter learned model CLL: -0.094637


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'false': 'movie(F, A)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 10], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 10, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'false': 'movie(E, B)'}, {'true,true': [2.98e-08, 0, 10], 'true,false': [0.0, 0, 0], 'false,true': [5.27e-09, 10, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 10], 'true,false,false': [0.0, 0, 0], 'false,true': [1.86e-09, 10, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'false': 'movie(E, B)'}, {'true,true': [3.65e-08, 0, 10], 'true,false': [0.0, 0, 0], 'false,true': [1.32e-09, 10, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'false': 'movie(F, B)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 10], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 10, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'false': 'movie(E, A)'}, {'true,true': [1.83e-08, 0, 10], 'true,false': [0.0, 0, 0], 'false,true': [3.73e-09, 10, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'false': 'movie(F, B)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 10], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 10, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'false': 'movie(E, A)'}, {'true,true': [7.45e-09, 0, 10], 'true,false': [0.0, 0, 0], 'false,true': [9.31e-10, 10, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'true,false,true': 'genre(A, F)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 0, 0], 'true,false,true,true': [0.0, 0, 0], 'true,false,true,false': [0.0, 0, 10], 'true,false,false': [0.0, 0, 0], 'false,true': [2.63e-09, 10, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'false': 'movie(E, B)'}, {'true,true': [0.0, 0, 10], 'true,false': [0.0, 0, 0], 'false,true': [1.61e-09, 10, 0], 'false,false': [0.0, 0, 0]}]]
[{'': [-8.881784197001253e-17, -1.1102230246251566e-17], 'false': [-1.1102230246251566e-17, nan], 'true': [nan, -8.881784197001253e-17], 'true,false': [-8.881784197001253e-17, nan]}, {'': [8.881784197001253e-17, 2.7755575615628915e-18], 'true': [8.881784197001253e-17, nan], 'false': [2.7755575615628915e-18, nan]}, {'': [-1.7763568394002506e-16, 0.0], 'false': [0.0, nan], 'true': [nan, -1.7763568394002506e-16], 'true,false': [-1.7763568394002506e-16, nan]}, {'': [1.3322676295501878e-16, 1.3877787807814458e-18], 'true': [1.3322676295501878e-16, nan], 'false': [1.3877787807814458e-18, nan]}, {'': [-4.4408920985006264e-17, 0.0], 'false': [0.0, nan], 'true': [nan, -4.4408920985006264e-17], 'true,false': [-4.4408920985006264e-17, nan]}, {'': [3.3306690738754695e-17, 1.3877787807814458e-18], 'true': [3.3306690738754695e-17, nan], 'false': [1.3877787807814458e-18, nan]}, {'': [-2.7755575615628914e-17, 0.0], 'false': [0.0, nan], 'true': [nan, -2.7755575615628914e-17], 'true,false': [-2.7755575615628914e-17, nan]}, {'': [5.551115123125783e-18, 6.938893903907229e-19], 'true': [5.551115123125783e-18, nan], 'false': [6.938893903907229e-19, nan]}, {'': [0.0, 6.938893903907229e-19], 'false': [6.938893903907229e-19, nan], 'true': [nan, 0.0], 'true,false': [0.0, nan], 'true,false,true': [nan, 0.0]}, {'': [0.0, 1.3877787807814458e-18], 'false': [1.3877787807814458e-18, nan], 'true': [0.0, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.8581489350995122;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else return -0.1418510649004878;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.7194734122109544;  // std dev = 2.98e-08, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else return -0.12544463852839138;  // std dev = 5.27e-09, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.5553664367462846;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else return -0.11231637819360638;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.41751358415830986;  // std dev = 3.65e-08, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else return -0.10159632948783628;  // std dev = 3.73e-09, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.3207118471601497;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else return -0.09269127618926097;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.2551722425694894;  // std dev = 1.83e-08, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else return -0.08518475138839687;  // std dev = 3.73e-09, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.2097577156325356;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else return -0.07877675473109172;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.17709649774527736;  // std dev = 7.45e-09, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else return -0.07324622576333704;  // std dev = 2.63e-09, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.15274385809367094;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else return -0.06842697784420272;  // std dev = 2.63e-09, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.13400703000801117;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else return -0.06419184008202619;  // std dev = 3.73e-09, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */


Results
   AUC ROC   = 0.85431
   AUC PR    = 0.075503
   CLL	      = -0.65144
   Precision = 0.075503 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.140406


Total learning time: 0.551 seconds
Total inference time: 0.61 seconds
AUC ROC: 0.85431


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.094637
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 0.318 seconds
Refined model CLL: -0.094637


******************************************
Best model found
******************************************
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.126025
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 1.8120000000000003 seconds
Total inference time: 0.779 seconds
AUC ROC: 1.0
Total revision time: 1.8120000000000003
Best scored revision CLL: -0.094637


Dataset: 4_cora_imdb, Fold: 4, Type: Transfer (trRDN-B), Time: 00:01:16
{'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.126025, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 1.8120000000000003, 'Inference time': 0.779, 'parameter_10': {'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.126025, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 0.604, 'Inference time': 0.779}}


Amount of data: 15
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;title(I, H), venue(I, A).;false;false
0;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
0;false;haswordvenue(A, L), haswordtitle(M, L).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordtitle(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordauthor(I, H).;false;true
2;true,false,false;haswordvenue(A, J), haswordtitle(K, J).;false;false
2;false;haswordvenue(A, L), haswordtitle(M, L).;true;false
2;false,true;haswordauthor(N, L).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;title(E, D), venue(E, B).;false;true
3;true,true,false;title(F, D), venue(F, A).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, A).;false;true
4;true,true,false;title(F, D), venue(F, B).;false;false
4;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
4;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
4;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
4;false,true;haswordauthor(M, K).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, B).;false;true
5;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
5;true,false;haswordvenue(B, H), haswordtitle(I, H).;true;true
5;true,false,true;title(J, I), venue(J, B).;false;false
5;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
5;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;title(E, D), venue(E, A).;false;true
6;true,true,false;title(F, D), venue(F, B).;false;false
6;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
6;true,false,true;title(I, H), venue(I, B).;false;false
6;true,false,false;haswordvenue(A, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;title(F, D), venue(F, A).;false;false
7;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
7;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
7;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
7;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;title(E, D), venue(E, A).;false;true
8;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
8;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
8;true,false,true;title(J, I), venue(J, A).;false;false
8;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
8;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, B).;false;true
9;true,true,false;title(F, D), venue(F, A).;false;false
9;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
9;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
9;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
9;false,true;haswordauthor(M, K).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995123;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.3581489350995122;  // std dev = 0.707, 2.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.1418510649004878;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7194734122109542;  // std dev = 5.16e-08, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | else if ( genre(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(F, B) )
%   | | | then return 0.308741135785635;  // std dev = 0.707, 2.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.12544463852839138;  // std dev = 7.45e-09, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A) )
%   | | then return 0.5179971782478224;  // std dev = 0.810, 16.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.11231637819360636;  // std dev = 2.95e-09, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.4266286741703444;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | else if ( genre(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(F, B) )
%   | | | then return 0.14910620564130095;  // std dev = 0.707, 2.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.1015963294878363;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( genre(B, E) )
%   | | then return 0.32689810627236404;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.11443812473202855;  // std dev = 0.707, 2.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.09269127618926096;  // std dev = 1.32e-09, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.2593890671907984;  // std dev = 2.36e-08, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | else if ( movie(E, B) )
%   | | then if ( genre(B, F) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.08699786506046367;  // std dev = 0.707, 2.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.08518475138839686;  // std dev = 8.33e-09, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( genre(B, E) )
%   | | then return 0.2127320323901827;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.06575950178709575;  // std dev = 0.707, 2.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.07877675473109172;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.1792749633076525;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | else if ( genre(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(F, B) )
%   | | | then return 0.04953969598316224;  // std dev = 0.707, 2.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.07324622576333704;  // std dev = 9.31e-10, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A) )
%   | | then if ( genre(A, F) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.1397512242123602;  // std dev = 0.724, 16.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.06842697784420272;  // std dev = 3.73e-09, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.1370165735371338;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | else if ( genre(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(F, A) )
%   | | | then return 0.0023800153870323915;  // std dev = 0.707, 2.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.06419184008202619;  // std dev = 1.86e-09, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.23018
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 0.671 seconds
Total inference time: 0.871 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 0.997778
   AUC PR    = 0.997917
   CLL	      = -0.135813
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.933333
   F1        = 0.965517


Total scoring time: 0.362 seconds
Parameter learned model CLL: -0.135813


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 14], 'true,false,false,true': [0.707, 1, 1], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 14, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [5.16e-08, 0, 14], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.707, 1, 1], 'true,false,false,false': [0.0, 0, 0], 'false,true': [7.45e-09, 14, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.81, 1, 15], 'true,false,false': [0.0, 0, 0], 'false,true': [2.95e-09, 14, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 14], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.707, 1, 1], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 14, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 14], 'true,false,false,true': [0.707, 1, 1], 'true,false,false,false': [0.0, 0, 0], 'false,true': [1.32e-09, 14, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, B)', 'true,false,true': 'genre(B, F)', 'false': 'movie(G, A)'}, {'true,true': [2.36e-08, 0, 14], 'true,false,true,true': [0.0, 0, 0], 'true,false,true,false': [0.707, 1, 1], 'true,false,false': [0.0, 0, 0], 'false,true': [8.33e-09, 14, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 14], 'true,false,false,true': [0.707, 1, 1], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 14, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 0, 14], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.707, 1, 1], 'true,false,false,false': [0.0, 0, 0], 'false,true': [9.31e-10, 14, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'true,false,true': 'genre(A, F)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 0, 0], 'true,false,true,true': [0.0, 0, 0], 'true,false,true,false': [0.724, 1, 15], 'true,false,false': [0.0, 0, 0], 'false,true': [3.73e-09, 14, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 14], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.707, 1, 1], 'true,false,false,false': [0.0, 0, 0], 'false,true': [1.86e-09, 14, 0], 'false,false': [0.0, 0, 0]}]]
[{'': [0.05859374999999978, -1.1895246692412391e-17], 'true': [nan, 0.05859374999999978], 'true,false': [-2.5376526277146434e-16, 0.25], 'true,false,false': [0.25, nan], 'false': [-1.1895246692412391e-17, nan]}, {'': [0.04970167219191701, 3.96508223080413e-18], 'true': [1.9032394707859825e-16, 0.25000000000000006], 'true,false': [nan, 0.25000000000000006], 'true,false,false': [0.25000000000000006, nan], 'false': [3.96508223080413e-18, nan]}, {'': [0.041025230365073995, 9.912705577010326e-18], 'true': [nan, 0.041025230365073995], 'true,false': [0.041025230365073995, nan], 'false': [9.912705577010326e-18, nan]}, {'': [0.03967392255889335, -3.96508223080413e-18], 'true': [-9.516197353929913e-17, 0.24999999999999997], 'true,false': [nan, 0.24999999999999997], 'true,false,false': [0.24999999999999997, nan], 'false': [-3.96508223080413e-18, nan]}, {'': [0.0361871047858255, 3.96508223080413e-18], 'true': [nan, 0.0361871047858255], 'true,false': [-9.516197353929913e-17, 0.24999999999999997], 'true,false,false': [0.24999999999999997, nan], 'false': [3.96508223080413e-18, nan]}, {'': [0.034500485718806186, 4.956352788505163e-18], 'true': [3.9650822308041306e-17, 0.25], 'true,false': [0.25, nan], 'true,false,true': [nan, 0.25], 'false': [4.956352788505163e-18, nan]}, {'': [0.033612601144736375, -9.912705577010326e-19], 'true': [nan, 0.033612601144736375], 'true,false': [0.0, 0.25], 'true,false,false': [0.25, nan], 'false': [-9.912705577010326e-19, nan]}, {'': [0.0330909168299109, 9.912705577010326e-19], 'true': [-1.586032892321652e-17, 0.24999999999999997], 'true,false': [nan, 0.24999999999999997], 'true,false,false': [0.24999999999999997, nan], 'false': [9.912705577010326e-19, nan]}, {'': [0.03275096676237294, 9.912705577010326e-19], 'true': [nan, 0.03275096676237294], 'true,false': [0.03275096676237294, nan], 'true,false,true': [nan, 0.03275096676237294], 'false': [9.912705577010326e-19, nan]}, {'': [0.033232640930211554, 3.469446951953614e-18], 'true': [0.0, 0.24999999999999994], 'true,false': [nan, 0.24999999999999994], 'true,false,false': [0.24999999999999994, nan], 'false': [3.469446951953614e-18, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;true;genre(B, D).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;true;genre(B, D).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;true;genre(B, E).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;true;genre(B, D).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(B, E).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;true;genre(B, D).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;true;genre(B, D).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.8581489350995123;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | else return 0.3581489350995122;  // std dev = 0.707, 2.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */
%   else return -0.1418510649004878;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7194734122109542;  // std dev = 5.16e-08, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | else return 0.308741135785635;  // std dev = 0.707, 2.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */
%   else return -0.12544463852839138;  // std dev = 7.45e-09, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( female(A) )
%   | then return 0.5553664367462845;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return 0.5010111516576122;  // std dev = 0.242, 11.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=10 */
%   else return -0.11231637819360636;  // std dev = 1.18e-08, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.4260476667744378;  // std dev = 0.024, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | else return 0.1529652011782946;  // std dev = 0.707, 2.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */
%   else return -0.1015963294878363;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.326518145866126;  // std dev = 0.021, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | else return 0.11754326056254583;  // std dev = 0.707, 2.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */
%   else return -0.09269127618926096;  // std dev = 7.45e-09, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.2591390308407085;  // std dev = 0.019, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | else return 0.08942535006230104;  // std dev = 0.707, 2.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */
%   else return -0.08518475138839686;  // std dev = 8.33e-09, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.21256115710013868;  // std dev = 0.016, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | else return 0.06762432347909586;  // std dev = 0.707, 2.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */
%   else return -0.07877675473109172;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.17915327496795147;  // std dev = 0.014, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | else return 0.05095762531832834;  // std dev = 0.707, 2.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */
%   else return -0.07324622576333704;  // std dev = 3.73e-09, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( female(A) )
%   | then return 0.14976975264513515;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return 0.13527776997960508;  // std dev = 0.218, 11.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=10 */
%   else return -0.06842697784420272;  // std dev = 3.73e-09, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.13687106362982818;  // std dev = 0.014, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | else return 0.004576183936884776;  // std dev = 0.707, 2.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */
%   else return -0.06419184008202619;  // std dev = 6.97e-09, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */


Results
   AUC ROC   = 0.999201
   AUC PR    = 0.95488
   CLL	      = -0.246598
   Precision = 0.263158 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.416667


Total learning time: 0.635 seconds
Total inference time: 0.758 seconds
AUC ROC: 0.999201


Results scoring model
   AUC ROC   = 0.997778
   AUC PR    = 0.997917
   CLL	      = -0.135757
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.933333
   F1        = 0.965517


Total scoring time: 0.343 seconds
Refined model CLL: -0.135757


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.999201
   AUC PR    = 0.95488
   CLL	      = -0.246598
   Precision = 0.263158 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.416667


Total learning time: 2.011 seconds
Total inference time: 0.758 seconds
AUC ROC: 0.999201
Total revision time: 2.011
Best scored revision CLL: -0.135757


Dataset: 4_cora_imdb, Fold: 4, Type: Transfer (trRDN-B), Time: 00:01:20
{'AUC ROC': 0.999201, 'AUC PR': 0.95488, 'CLL': -0.246598, 'Precision': [0.263158, 0.5], 'Recall': 1.0, 'F1': 0.416667, 'Learning time': 2.011, 'Inference time': 0.758, 'parameter_15': {'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.23018, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 0.671, 'Inference time': 0.871}}


Amount of data: 20
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;title(I, H), venue(I, A).;false;false
0;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
0;false;haswordvenue(A, L), haswordtitle(M, L).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordtitle(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordauthor(I, H).;false;true
2;true,false,false;haswordvenue(A, J), haswordtitle(K, J).;false;false
2;false;haswordvenue(A, L), haswordtitle(M, L).;true;false
2;false,true;haswordauthor(N, L).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;title(E, D), venue(E, B).;false;true
3;true,true,false;title(F, D), venue(F, A).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, A).;false;true
4;true,true,false;title(F, D), venue(F, B).;false;false
4;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
4;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
4;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
4;false,true;haswordauthor(M, K).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, B).;false;true
5;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
5;true,false;haswordvenue(B, H), haswordtitle(I, H).;true;true
5;true,false,true;title(J, I), venue(J, B).;false;false
5;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
5;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;title(E, D), venue(E, A).;false;true
6;true,true,false;title(F, D), venue(F, B).;false;false
6;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
6;true,false,true;title(I, H), venue(I, B).;false;false
6;true,false,false;haswordvenue(A, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;title(F, D), venue(F, A).;false;false
7;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
7;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
7;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
7;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;title(E, D), venue(E, A).;false;true
8;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
8;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
8;true,false,true;title(J, I), venue(J, A).;false;false
8;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
8;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, B).;false;true
9;true,true,false;title(F, D), venue(F, A).;false;false
9;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
9;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
9;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
9;false,true;haswordauthor(M, K).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995123;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.3581489350995122;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.14185106490048777;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7194734122109542;  // std dev = 7.30e-08, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | else if ( genre(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(F, B) )
%   | | | then return 0.308741135785635;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.12544463852839138;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A) )
%   | | then return 0.5010111516576123;  // std dev = 1.137, 22.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=20 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.11231637819360635;  // std dev = 3.73e-09, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.43078882378339767;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | else if ( genre(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(F, B) )
%   | | | then return 0.1529652011782946;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.10159632948783635;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( genre(B, E) )
%   | | then return 0.32972649830862644;  // std dev = 4.21e-08, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.11754326056254583;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.09269127618926093;  // std dev = 2.63e-09, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.26131426285303394;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | else if ( movie(E, B) )
%   | | then if ( genre(B, F) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.08942535006230103;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.08518475138839683;  // std dev = 1.18e-08, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( genre(B, E) )
%   | | then return 0.2140870910092807;  // std dev = 1.05e-08, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.06762432347909586;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.07877675473109179;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.18026543620387056;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | else if ( genre(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(F, B) )
%   | | | then return 0.050957625318328356;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.07324622576333704;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A) )
%   | | then if ( genre(A, F) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.13390302054047568;  // std dev = 1.022, 22.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=20 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.06842697784420274;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.13839099137138783;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | else if ( genre(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(F, A) )
%   | | | then return 0.004919840291304892;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.0641918400820262;  // std dev = 1.32e-09, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.229243
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 0.691 seconds
Total inference time: 0.844 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 0.995
   AUC PR    = 0.995227
   CLL	      = -0.156281
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.9
   F1        = 0.947368


Total scoring time: 0.378 seconds
Parameter learned model CLL: -0.156281


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 18], 'true,false,false,true': [1.0, 2, 2], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 18, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [7.3e-08, 0, 18], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [1.0, 2, 2], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 18, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [1.137, 2, 20], 'true,false,false': [0.0, 0, 0], 'false,true': [3.73e-09, 18, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 18], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [1.0, 2, 2], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 18, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [4.21e-08, 0, 18], 'true,false,false,true': [1.0, 2, 2], 'true,false,false,false': [0.0, 0, 0], 'false,true': [2.63e-09, 18, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, B)', 'true,false,true': 'genre(B, F)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 0, 18], 'true,false,true,true': [0.0, 0, 0], 'true,false,true,false': [1.0, 2, 2], 'true,false,false': [0.0, 0, 0], 'false,true': [1.18e-08, 18, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [1.05e-08, 0, 18], 'true,false,false,true': [1.0, 2, 2], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 18, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 0, 18], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [1.0, 2, 2], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 18, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'true,false,true': 'genre(A, F)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 0, 0], 'true,false,true,true': [0.0, 0, 0], 'true,false,true,false': [1.022, 2, 20], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 18, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 18], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [1.0, 2, 2], 'true,false,false,false': [0.0, 0, 0], 'false,true': [1.32e-09, 18, 0], 'false,false': [0.0, 0, 0]}]]
[{'': [0.08264462809917356, -3.0839528461809902e-18], 'true': [nan, 0.08264462809917356], 'true,false': [-2.9605947323337506e-16, 0.25], 'true,false,false': [0.25, nan], 'false': [-3.0839528461809902e-18, nan]}, {'': [0.07055056241450806, 0.0], 'true': [2.9605947323337506e-16, 0.25], 'true,false': [nan, 0.25], 'true,false,false': [0.25, nan], 'false': [0.0, nan]}, {'': [0.05874978203136403, 1.5419764230904953e-17], 'true': [nan, 0.05874978203136403], 'true,false': [0.05874978203136403, nan], 'false': [1.5419764230904953e-17, nan]}, {'': [0.05693675516523644, -4.625929269271485e-18], 'true': [0.0, 0.25], 'true,false': [nan, 0.25], 'true,false,false': [0.25, nan], 'false': [-4.625929269271485e-18, nan]}, {'': [0.05215199235411058, 6.1679056923619804e-18], 'true': [nan, 0.05215199235411058], 'true,false': [9.868649107779169e-17, 0.25], 'true,false,false': [0.25, nan], 'false': [6.1679056923619804e-18, nan]}, {'': [0.04984978818286636, 7.709882115452476e-18], 'true': [-9.868649107779169e-17, 0.25], 'true,false': [0.25, nan], 'true,false,true': [nan, 0.25], 'false': [7.709882115452476e-18, nan]}, {'': [0.04864565422237037, 0.0], 'true': [nan, 0.04864565422237037], 'true,false': [6.1679056923619804e-18, 0.24999999999999997], 'true,false,false': [0.24999999999999997, nan], 'false': [0.0, nan]}, {'': [0.047941894043042964, -7.709882115452476e-19], 'true': [-3.0839528461809905e-17, 0.25000000000000006], 'true,false': [nan, 0.25000000000000006], 'true,false,false': [0.25000000000000006, nan], 'false': [-7.709882115452476e-19, nan]}, {'': [0.047484773454074806, -1.5419764230904951e-18], 'true': [nan, 0.047484773454074806], 'true,false': [0.047484773454074806, nan], 'true,false,true': [nan, 0.047484773454074806], 'false': [-1.5419764230904951e-18, nan]}, {'': [0.04810464352951704, 2.3129646346357427e-18], 'true': [-1.850371707708594e-17, 0.24999999999999997], 'true,false': [nan, 0.24999999999999997], 'true,false,false': [0.24999999999999997, nan], 'false': [2.3129646346357427e-18, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;true;genre(B, D).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;true;genre(B, D).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;true;genre(B, E).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;true;genre(B, D).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(B, E).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;true;genre(B, D).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;true;genre(B, D).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.8581489350995123;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | else return 0.3581489350995122;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   else return -0.14185106490048777;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7194734122109542;  // std dev = 7.30e-08, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | else return 0.308741135785635;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   else return -0.12544463852839138;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( female(A) )
%   | then return 0.5840872841766134;  // std dev = 0.070, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else return 0.46224228981541166;  // std dev = 0.281, 15.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=13 */
%   else return -0.11231637819360635;  // std dev = 1.67e-08, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.43039506452276105;  // std dev = 0.060, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | else return 0.1547502600573693;  // std dev = 0.986, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   else return -0.10159632948783635;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.3295314375027949;  // std dev = 0.053, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | else return 0.11900726546642994;  // std dev = 0.986, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   else return -0.09269127618926093;  // std dev = 1.05e-08, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.26122429982997314;  // std dev = 0.047, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | else return 0.09059110839487766;  // std dev = 0.985, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   else return -0.08518475138839683;  // std dev = 1.18e-08, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.21404942455391834;  // std dev = 0.040, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | else return 0.06853595640399024;  // std dev = 0.985, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   else return -0.07877675473109179;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.18025398270029405;  // std dev = 0.036, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | else return 0.051662888444179614;  // std dev = 0.985, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   else return -0.07324622576333704;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( female(A) )
%   | then return 0.19771934062414867;  // std dev = 0.130, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else return 0.1042689272707945;  // std dev = 0.239, 15.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=13 */
%   else return -0.06842697784420274;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.1385164343449145;  // std dev = 0.050, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | else return 0.007060518950940314;  // std dev = 0.974, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   else return -0.0641918400820262;  // std dev = 6.45e-09, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */


Results
   AUC ROC   = 0.999201
   AUC PR    = 0.95488
   CLL	      = -0.242805
   Precision = 0.263158 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.416667


Total learning time: 0.683 seconds
Total inference time: 0.744 seconds
AUC ROC: 0.999201


Results scoring model
   AUC ROC   = 0.9975
   AUC PR    = 0.997727
   CLL	      = -0.153793
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.95
   F1        = 0.974359


Total scoring time: 0.354 seconds
Refined model CLL: -0.153793


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.999201
   AUC PR    = 0.95488
   CLL	      = -0.242805
   Precision = 0.263158 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.416667


Total learning time: 2.106 seconds
Total inference time: 0.744 seconds
AUC ROC: 0.999201
Total revision time: 2.106
Best scored revision CLL: -0.153793


Dataset: 4_cora_imdb, Fold: 4, Type: Transfer (trRDN-B), Time: 00:01:25
{'AUC ROC': 0.999201, 'AUC PR': 0.95488, 'CLL': -0.242805, 'Precision': [0.263158, 0.5], 'Recall': 1.0, 'F1': 0.416667, 'Learning time': 2.106, 'Inference time': 0.744, 'parameter_20': {'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.229243, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 0.691, 'Inference time': 0.844}}


Amount of data: 25
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;title(I, H), venue(I, A).;false;false
0;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
0;false;haswordvenue(A, L), haswordtitle(M, L).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordtitle(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordauthor(I, H).;false;true
2;true,false,false;haswordvenue(A, J), haswordtitle(K, J).;false;false
2;false;haswordvenue(A, L), haswordtitle(M, L).;true;false
2;false,true;haswordauthor(N, L).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;title(E, D), venue(E, B).;false;true
3;true,true,false;title(F, D), venue(F, A).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, A).;false;true
4;true,true,false;title(F, D), venue(F, B).;false;false
4;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
4;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
4;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
4;false,true;haswordauthor(M, K).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, B).;false;true
5;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
5;true,false;haswordvenue(B, H), haswordtitle(I, H).;true;true
5;true,false,true;title(J, I), venue(J, B).;false;false
5;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
5;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;title(E, D), venue(E, A).;false;true
6;true,true,false;title(F, D), venue(F, B).;false;false
6;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
6;true,false,true;title(I, H), venue(I, B).;false;false
6;true,false,false;haswordvenue(A, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;title(F, D), venue(F, A).;false;false
7;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
7;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
7;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
7;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;title(E, D), venue(E, A).;false;true
8;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
8;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
8;true,false,true;title(J, I), venue(J, A).;false;false
8;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
8;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, B).;false;true
9;true,true,false;title(F, D), venue(F, A).;false;false
9;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
9;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
9;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
9;false,true;haswordauthor(M, K).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14185106490048777;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995121;  // std dev = 5.96e-08, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.35814893509951223;  // std dev = 1.225, 6.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.14185106490048774;  // std dev = 1.05e-08, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7194734122109542;  // std dev = 7.30e-08, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.30874113578563506;  // std dev = 1.225, 6.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.12544463852839138;  // std dev = 0.000, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.11231637819360639;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( movie(E, A) )
%   | | then return 0.4913048507489209;  // std dev = 1.386, 28.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=25 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.11231637819360636;  // std dev = 3.23e-09, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.43317048527981505;  // std dev = 2.98e-08, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | else if ( genre(A, E) )
%   | | then return -0.10159632948783628;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.15516138697567117;  // std dev = 1.225, 6.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.10159632948783634;  // std dev = 0.000, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.09269127618926096;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( genre(B, E) )
%   | | then return 0.33134730862759576;  // std dev = 2.98e-08, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.11931545369315555;  // std dev = 1.225, 6.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.09269127618926103;  // std dev = 0.000, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.26241676594081126;  // std dev = 3.33e-08, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | else if ( movie(E, B) )
%   | | then if ( genre(B, F) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.06567066042253546;  // std dev = 1.236, 7.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=3 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.08518475138839683;  // std dev = 1.49e-08, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.09044372580076658;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( genre(B, E) )
%   | | then return 0.2148623001144289;  // std dev = 0.000, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.07484767526671754;  // std dev = 1.225, 6.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.07877675473109179;  // std dev = 0.000, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.1808315125806876;  // std dev = 0.000, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | else if ( genre(A, E) )
%   | | then return -0.08327396174562278;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.05646064196434086;  // std dev = 1.225, 6.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.07324622576333704;  // std dev = 0.000, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.07713351321997036;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( movie(E, A) )
%   | | then if ( genre(A, F) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.1313385019159165;  // std dev = 1.249, 28.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=25 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.06842697784420275;  // std dev = 0.000, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.13908696945261004;  // std dev = 1.83e-08, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | else if ( genre(A, E) )
%   | | then return -0.07181883096280316;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.009751452884619538;  // std dev = 1.225, 6.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.0641918400820262;  // std dev = 1.32e-09, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.224711
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 0.702 seconds
Total inference time: 0.88 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 0.9928
   AUC PR    = 0.993114
   CLL	      = -0.168643
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.88
   F1        = 0.93617


Total scoring time: 0.403 seconds
Parameter learned model CLL: -0.168643


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 1, 0], 'true,false,true': [5.96e-08, 0, 22], 'true,false,false,true': [1.225, 3, 3], 'true,false,false,false': [0.0, 0, 0], 'false,true': [1.05e-08, 21, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [7.3e-08, 0, 22], 'true,false,true': [0.0, 1, 0], 'true,false,false,true': [1.225, 3, 3], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 21, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.0, 1, 0], 'true,false,true': [1.386, 3, 25], 'true,false,false': [0.0, 0, 0], 'false,true': [3.23e-09, 21, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [2.98e-08, 0, 22], 'true,false,true': [0.0, 1, 0], 'true,false,false,true': [1.225, 3, 3], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 21, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 1, 0], 'true,false,true': [2.98e-08, 0, 22], 'true,false,false,true': [1.225, 3, 3], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 21, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, B)', 'true,false,true': 'genre(B, F)', 'false': 'movie(G, A)'}, {'true,true': [3.33e-08, 0, 22], 'true,false,true,true': [0.0, 0, 0], 'true,false,true,false': [1.236, 4, 3], 'true,false,false': [0.0, 0, 0], 'false,true': [1.49e-08, 21, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 1, 0], 'true,false,true': [0.0, 0, 22], 'true,false,false,true': [1.225, 3, 3], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 21, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 0, 22], 'true,false,true': [0.0, 1, 0], 'true,false,false,true': [1.225, 3, 3], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 21, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'true,false,true': 'genre(A, F)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 1, 0], 'true,false,true,true': [0.0, 0, 0], 'true,false,true,false': [1.249, 3, 25], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 21, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [1.83e-08, 0, 22], 'true,false,true': [0.0, 1, 0], 'true,false,false,true': [1.225, 3, 3], 'true,false,false,false': [0.0, 0, 0], 'false,true': [1.32e-09, 21, 0], 'false,false': [0.0, 0, 0]}]]
[{'': [0.11890606420927562, 5.28677630773884e-18], 'true': [0.0, 0.09566326530612335], 'true,false': [1.6148698540002277e-16, 0.24999999999999992], 'true,false,false': [0.24999999999999992, nan], 'false': [5.28677630773884e-18, nan]}, {'': [0.09822252006707145, -2.64338815386942e-18], 'true': [2.4223047810003414e-16, 0.2373694636673474], 'true,false': [0.0, 0.24999999999999992], 'true,false,false': [0.24999999999999992, nan], 'false': [-2.64338815386942e-18, nan]}, {'': [0.07838368541283063, 7.93016446160826e-18], 'true': [0.0, 0.06861901350658635], 'true,false': [0.06861901350658635, nan], 'false': [7.93016446160826e-18, nan]}, {'': [0.07180637921442837, -2.64338815386942e-18], 'true': [4.0371746350005693e-17, 0.2223581050975781], 'true,false': [0.0, 0.24999999999999997], 'true,false,false': [0.24999999999999997, nan], 'false': [-2.64338815386942e-18, nan]}, {'': [0.06380483232236062, -7.93016446160826e-18], 'true': [0.0, 0.06114080483535208], 'true,false': [4.0371746350005693e-17, 0.25], 'true,false,false': [0.25, nan], 'false': [-7.93016446160826e-18, nan]}, {'': [0.05972788087082317, 1.057355261547768e-17], 'true': [5.0464682937507114e-17, 0.2180786068311553], 'true,false': [0.2180786068311553, nan], 'true,false,true': [nan, 0.2180786068311553], 'false': [1.057355261547768e-17, nan]}, {'': [0.05743439592666873, 0.0], 'true': [0.0, 0.056872118064546465], 'true,false': [-1.0092936587501423e-17, 0.25000000000000006], 'true,false,false': [0.25000000000000006, nan], 'false': [0.0, nan]}, {'': [0.05611591316028921, -1.32169407693471e-18], 'true': [-1.0092936587501423e-17, 0.21667662360905884], 'true,false': [0.0, 0.25], 'true,false,false': [0.25, nan], 'false': [-1.32169407693471e-18, nan]}, {'': [0.05525003849603366, -2.64338815386942e-18], 'true': [0.0, 0.0557246134291988], 'true,false': [0.0557246134291988, nan], 'true,false,true': [nan, 0.0557246134291988], 'false': [-2.64338815386942e-18, nan]}, {'': [0.05556071715240991, 1.32169407693471e-18], 'true': [1.5139404881252134e-17, 0.21510045443350395], 'true,false': [0.0, 0.25], 'true,false,false': [0.25, nan], 'false': [1.32169407693471e-18, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(A, D).;true;true
0;true,false;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;true;genre(B, D).;true;true
1;true,false;genre(A, E).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;true;genre(A, D).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;true;genre(B, D).;true;true
3;true,false;genre(A, E).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;true;genre(A, D).;true;true
4;true,false;genre(B, E).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;true;genre(B, D).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(A, D).;true;true
6;true,false;genre(B, E).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;true;genre(B, D).;true;true
7;true,false;genre(A, E).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;true;genre(A, D).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;true;genre(B, D).;true;true
9;true,false;genre(A, E).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14185106490048777;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995121;  // std dev = 5.96e-08, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | | else return 0.35814893509951223;  // std dev = 1.225, 6.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   else return -0.14185106490048774;  // std dev = 1.05e-08, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7194734122109542;  // std dev = 7.30e-08, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else return 0.30874113578563506;  // std dev = 1.225, 6.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   else return -0.12544463852839138;  // std dev = 0.000, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.11231637819360639;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( director(B) )
%   | | then if ( female(A) )
%   | | | then return 0.5804971782478223;  // std dev = 0.188, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.5790188993359673;  // std dev = 0.267, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else return -0.24358763124141355;  // std dev = 5.27e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else return -0.11231637819360636;  // std dev = 1.29e-08, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.4116589536967915;  // std dev = 0.000782, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | else if ( genre(A, E) )
%   | | then return -0.10159632948783628;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else return 0.2167150442961656;  // std dev = 1.025, 6.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   else return -0.10159632948783634;  // std dev = 0.000, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.09269127618926096;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( genre(B, E) )
%   | | then return 0.31674513722305647;  // std dev = 0.000699, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | | else return 0.1723813755937945;  // std dev = 1.007, 6.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   else return -0.09269127618926103;  // std dev = 0.000, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.25246366381656365;  // std dev = 0.000609, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | else if ( actor(B) )
%   | | then return -0.22483580606782474;  // std dev = 0.161, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return 0.5410329670379854;  // std dev = 0.000300, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return -0.08518475138839683;  // std dev = 1.49e-08, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.06921984619169426;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( genre(B, E) )
%   | | then return 0.20784257079675117;  // std dev = 0.000532, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | | else return 0.08884684336161928;  // std dev = 0.779, 6.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   else return -0.07877675473109179;  // std dev = 0.000, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.17569055242339388;  // std dev = 0.000468, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | else if ( genre(A, E) )
%   | | then return -0.06489092847425315;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else return 0.07018242486838742;  // std dev = 0.773, 6.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   else return -0.07324622576333704;  // std dev = 0.000, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.06106277055831183;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( actor(B) )
%   | | then return -0.2585712701396824;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else if ( female(A) )
%   | | | then return 0.17872738624615486;  // std dev = 0.203, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.17733683215948012;  // std dev = 0.289, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   else return -0.06842697784420275;  // std dev = 0.000, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.1301887280886537;  // std dev = 0.000709, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | else if ( genre(A, E) )
%   | | then return -0.05765420882491132;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else return 0.05835042626739412;  // std dev = 0.663, 6.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   else return -0.0641918400820262;  // std dev = 5.27e-09, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.113356
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 0.743 seconds
Total inference time: 0.774 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.119495
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 0.392 seconds
Refined model CLL: -0.119495


******************************************
Best model found
******************************************
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.113356
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 2.2399999999999998 seconds
Total inference time: 0.774 seconds
AUC ROC: 1.0
Total revision time: 2.2399999999999998
Best scored revision CLL: -0.119495


Dataset: 4_cora_imdb, Fold: 4, Type: Transfer (trRDN-B), Time: 00:01:29
{'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.113356, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 2.2399999999999998, 'Inference time': 0.774, 'parameter_25': {'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.224711, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 0.702, 'Inference time': 0.88}}


Starting fold 5

Target train facts examples: 915
Target train pos examples: 337
Target train neg examples: 12165

Target test facts examples: 163
Target test pos	 examples: 45
Target test neg examples: 2071

Amount of data: 5
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;title(I, H), venue(I, A).;false;false
0;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
0;false;haswordvenue(A, L), haswordtitle(M, L).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordtitle(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordauthor(I, H).;false;true
2;true,false,false;haswordvenue(A, J), haswordtitle(K, J).;false;false
2;false;haswordvenue(A, L), haswordtitle(M, L).;true;false
2;false,true;haswordauthor(N, L).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;title(E, D), venue(E, B).;false;true
3;true,true,false;title(F, D), venue(F, A).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, A).;false;true
4;true,true,false;title(F, D), venue(F, B).;false;false
4;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
4;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
4;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
4;false,true;haswordauthor(M, K).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, B).;false;true
5;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
5;true,false;haswordvenue(B, H), haswordtitle(I, H).;true;true
5;true,false,true;title(J, I), venue(J, B).;false;false
5;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
5;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;title(E, D), venue(E, A).;false;true
6;true,true,false;title(F, D), venue(F, B).;false;false
6;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
6;true,false,true;title(I, H), venue(I, B).;false;false
6;true,false,false;haswordvenue(A, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;title(F, D), venue(F, A).;false;false
7;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
7;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
7;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
7;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;title(E, D), venue(E, A).;false;true
8;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
8;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
8;true,false,true;title(J, I), venue(J, A).;false;false
8;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
8;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, B).;false;true
9;true,true,false;title(F, D), venue(F, A).;false;false
9;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
9;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
9;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
9;false,true;haswordauthor(M, K).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14185106490048777;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995122;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.14185106490048777;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.14185106490048777;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.5786537370877302;  // std dev = 0.771, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | else if ( genre(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(F, B) )
%   | | | then return -0.12544463852839138;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.12544463852839138;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.20372114412003964;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( movie(E, A) )
%   | | then return 0.47279243364975004;  // std dev = 0.641, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.11231637819360639;  // std dev = 1.86e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.36508115698630944;  // std dev = 0.589, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | else if ( genre(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(F, B) )
%   | | | then return -0.16875126140398858;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.1015963294878363;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.23114852965391036;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( genre(B, E) )
%   | | then return 0.3835100338006916;  // std dev = 1.05e-08, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.14638320113912043;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.09269127618926094;  // std dev = 1.32e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.2159930360283215;  // std dev = 0.448, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | else if ( movie(E, B) )
%   | | then if ( genre(B, F) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.1290215565036714;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.08518475138839687;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.22846609333275847;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( genre(B, E) )
%   | | then return 0.25460910346970844;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else if ( movie(F, B) )
%   | | | then return -0.11520332228161062;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.07877675473109173;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.14268296401205927;  // std dev = 0.365, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | else if ( genre(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(F, B) )
%   | | | then return -0.10397082796080102;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.07324622576333704;  // std dev = 9.31e-10, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.2136982018547242;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( movie(E, A) )
%   | | then if ( genre(A, F) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.13981990833397892;  // std dev = 0.257, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.06842697784420272;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.10867762343771685;  // std dev = 0.316, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | else if ( genre(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(F, A) )
%   | | | then return -0.10735829034981044;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.0641918400820262;  // std dev = 9.31e-10, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 0.971565
   AUC PR    = 0.823063
   CLL	      = -0.08471
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.777778
   F1        = 0.875


Total learning time: 0.637 seconds
Total inference time: 0.892 seconds
AUC ROC: 0.971565


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.133214
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 0.338 seconds
Parameter learned model CLL: -0.133214


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 1, 0], 'true,false,true': [0.0, 0, 5], 'true,false,false,true': [0.0, 1, 0], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 3, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.771, 1, 5], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 1, 0], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 3, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.0, 1, 0], 'true,false,true': [0.641, 1, 5], 'true,false,false': [0.0, 0, 0], 'false,true': [1.86e-09, 3, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.589, 1, 5], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 1, 0], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 3, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 1, 0], 'true,false,true': [1.05e-08, 0, 5], 'true,false,false,true': [0.0, 1, 0], 'true,false,false,false': [0.0, 0, 0], 'false,true': [1.32e-09, 3, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, B)', 'true,false,true': 'genre(B, F)', 'false': 'movie(G, A)'}, {'true,true': [0.448, 1, 5], 'true,false,true,true': [0.0, 0, 0], 'true,false,true,false': [0.0, 1, 0], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 3, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 1, 0], 'true,false,true': [0.0, 0, 5], 'true,false,false,true': [0.0, 1, 0], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 3, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, A)'}, {'true,true': [0.365, 1, 5], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 1, 0], 'true,false,false,false': [0.0, 0, 0], 'false,true': [9.31e-10, 3, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'true,false,true': 'genre(A, F)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 1, 0], 'true,false,true,true': [0.0, 0, 0], 'true,false,true,false': [0.257, 1, 5], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 3, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.316, 1, 5], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 1, 0], 'true,false,false,false': [0.0, 0, 0], 'false,true': [9.31e-10, 3, 0], 'false,false': [0.0, 0, 0]}]]
[{'': [0.20408163265306106, 0.0], 'true': [0.0, 0.1388888888888887], 'true,false': [0.0, 0.0], 'false': [0.0, nan], 'true,false,false': [0.0, nan]}, {'': [0.1456911249928931, 0.0], 'true': [0.09915090450905224, 0.0], 'false': [0.0, nan], 'true,false': [nan, 0.0], 'true,false,false': [0.0, nan]}, {'': [0.11473026995293754, 2.3129646346357427e-18], 'true': [0.0, 0.06847046433934885], 'true,false': [0.06847046433934885, nan], 'false': [2.3129646346357427e-18, nan]}, {'': [0.08446567338286867, -1.1564823173178713e-18], 'true': [0.05783227833842761, 0.0], 'true,false': [nan, 0.0], 'true,false,false': [0.0, nan], 'false': [-1.1564823173178713e-18, nan]}, {'': [0.0673499002292549, 2.3129646346357427e-18], 'true': [0.0, 0.03899817228263595], 'true,false': [2.2204460492503132e-17, 0.0], 'false': [2.3129646346357427e-18, nan], 'true,false,false': [0.0, nan]}, {'': [0.043200172615025415, 0.0], 'true': [0.03339519151847959, 0.0], 'false': [0.0, nan], 'true,false': [0.0, nan], 'true,false,true': [nan, 0.0]}, {'': [0.03802944561908713, 0.0], 'true': [0.0, 0.018994615311121506], 'true,false': [-1.1102230246251566e-17, 0.0], 'false': [0.0, nan], 'true,false,false': [0.0, nan]}, {'': [0.026503017356395715, 1.1564823173178713e-18], 'true': [0.022229030759424857, 0.0], 'false': [1.1564823173178713e-18, nan], 'true,false': [nan, 0.0], 'true,false,false': [0.0, nan]}, {'': [0.024729631424035364, -5.782411586589357e-19], 'true': [0.0, 0.010997657485461441], 'true,false': [0.010997657485461441, nan], 'true,false,true': [nan, 0.010997657485461441], 'false': [-5.782411586589357e-19, nan]}, {'': [0.019998990066937623, 5.782411586589357e-19], 'true': [0.016664795642949332, 0.0], 'false': [5.782411586589357e-19, nan], 'true,false': [nan, 0.0], 'true,false,false': [0.0, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(A, D).;true;true
0;true,false;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;true;genre(B, D).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;true;genre(A, D).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;true;genre(B, D).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;true;genre(A, D).;true;true
4;true,false;genre(B, E).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;true;genre(B, D).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(A, D).;true;true
6;true,false;genre(B, E).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;true;genre(B, D).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;true;genre(A, D).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;true;genre(B, D).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14185106490048777;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995122;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return -0.14185106490048777;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   else return -0.14185106490048777;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.5786537370877302;  // std dev = 0.771, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | else return -0.12544463852839138;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   else return -0.12544463852839138;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.20372114412003964;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else return 0.47279243364975004;  // std dev = 0.641, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   else return -0.11231637819360639;  // std dev = 2.63e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.36508115698630944;  // std dev = 0.589, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | else return -0.16875126140398858;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   else return -0.1015963294878363;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.23114852965391036;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( genre(B, E) )
%   | | then return 0.3835100338006916;  // std dev = 1.05e-08, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return -0.14638320113912043;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   else return -0.09269127618926094;  // std dev = 2.63e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.2159930360283215;  // std dev = 0.448, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | else return -0.1290215565036714;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   else return -0.08518475138839687;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.22846609333275847;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( genre(B, E) )
%   | | then return 0.25460910346970844;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return -0.11520332228161062;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   else return -0.07877675473109173;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.14268296401205927;  // std dev = 0.365, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | else return -0.10397082796080102;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   else return -0.07324622576333704;  // std dev = 1.86e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.2136982018547242;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else return 0.13981990833397892;  // std dev = 0.257, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   else return -0.06842697784420272;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.10867762343771685;  // std dev = 0.316, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | else return -0.10735829034981044;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   else return -0.0641918400820262;  // std dev = 1.32e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */


Results
   AUC ROC   = 0.971565
   AUC PR    = 0.823063
   CLL	      = -0.08438
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.777778
   F1        = 0.875


Total learning time: 0.566 seconds
Total inference time: 0.781 seconds
AUC ROC: 0.971565


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.133214
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 0.321 seconds
Refined model CLL: -0.133214


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.971565
   AUC PR    = 0.823063
   CLL	      = -0.08471
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.777778
   F1        = 0.875


Total learning time: 1.8619999999999999 seconds
Total inference time: 0.892 seconds
AUC ROC: 0.971565
Total revision time: 1.8619999999999999
Best scored revision CLL: -0.133214


Dataset: 4_cora_imdb, Fold: 5, Type: Transfer (trRDN-B), Time: 00:01:33
{'AUC ROC': 0.971565, 'AUC PR': 0.823063, 'CLL': -0.08471, 'Precision': [1.0, 0.5], 'Recall': 0.777778, 'F1': 0.875, 'Learning time': 1.8619999999999999, 'Inference time': 0.892, 'parameter_5': {'AUC ROC': 0.971565, 'AUC PR': 0.823063, 'CLL': -0.08471, 'Precision': [1.0, 0.5], 'Recall': 0.777778, 'F1': 0.875, 'Learning time': 0.637, 'Inference time': 0.892}}


Amount of data: 10
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;title(I, H), venue(I, A).;false;false
0;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
0;false;haswordvenue(A, L), haswordtitle(M, L).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordtitle(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordauthor(I, H).;false;true
2;true,false,false;haswordvenue(A, J), haswordtitle(K, J).;false;false
2;false;haswordvenue(A, L), haswordtitle(M, L).;true;false
2;false,true;haswordauthor(N, L).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;title(E, D), venue(E, B).;false;true
3;true,true,false;title(F, D), venue(F, A).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, A).;false;true
4;true,true,false;title(F, D), venue(F, B).;false;false
4;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
4;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
4;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
4;false,true;haswordauthor(M, K).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, B).;false;true
5;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
5;true,false;haswordvenue(B, H), haswordtitle(I, H).;true;true
5;true,false,true;title(J, I), venue(J, B).;false;false
5;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
5;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;title(E, D), venue(E, A).;false;true
6;true,true,false;title(F, D), venue(F, B).;false;false
6;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
6;true,false,true;title(I, H), venue(I, B).;false;false
6;true,false,false;haswordvenue(A, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;title(F, D), venue(F, A).;false;false
7;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
7;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
7;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
7;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;title(E, D), venue(E, A).;false;true
8;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
8;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
8;true,false,true;title(J, I), venue(J, A).;false;false
8;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
8;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, B).;false;true
9;true,true,false;title(F, D), venue(F, A).;false;false
9;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
9;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
9;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
9;false,true;haswordauthor(M, K).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14185106490048777;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995123;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.3581489350995122;  // std dev = 0.707, 2.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.1418510649004878;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.6349816071370198;  // std dev = 0.802, 10.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | else if ( genre(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(F, B) )
%   | | | then return 0.308741135785635;  // std dev = 0.707, 2.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.12544463852839138;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.21301116861962824;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( movie(E, A) )
%   | | then return 0.5179921153638101;  // std dev = 0.817, 11.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=10 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.11231637819360639;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.3847251528251153;  // std dev = 0.595, 10.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | else if ( genre(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(F, B) )
%   | | | then return 0.1491073588000518;  // std dev = 0.707, 2.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.10159632948783627;  // std dev = 1.32e-09, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.24321093187189252;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( genre(B, E) )
%   | | then return 0.35529422281953066;  // std dev = 2.11e-08, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.11443905096083754;  // std dev = 0.707, 2.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.09269127618926097;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.23066253805148923;  // std dev = 0.455, 10.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | else if ( movie(E, B) )
%   | | then if ( genre(B, F) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.08699858835341268;  // std dev = 0.707, 2.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.08518475138839687;  // std dev = 3.73e-09, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.24090873092342308;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( genre(B, E) )
%   | | then return 0.2347278846616099;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.06576005706406385;  // std dev = 0.707, 2.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.07877675473109173;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.15572225064524964;  // std dev = 0.375, 10.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | else if ( genre(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(F, B) )
%   | | | then return 0.049540118030561436;  // std dev = 0.707, 2.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.07324622576333704;  // std dev = 9.31e-10, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.22567594769291155;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( movie(E, A) )
%   | | then if ( genre(A, F) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.14741407873873955;  // std dev = 0.728, 11.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=10 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.06842697784420272;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.11785377754864279;  // std dev = 0.323, 10.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | else if ( genre(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(F, A) )
%   | | | then return 4.6464031709536613E-4;  // std dev = 0.707, 2.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.0641918400820262;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 0.97178
   AUC PR    = 0.824078
   CLL	      = -0.223503
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.777778
   F1        = 0.875


Total learning time: 0.62 seconds
Total inference time: 0.883 seconds
AUC ROC: 0.97178


Results scoring model
   AUC ROC   = 0.995
   AUC PR    = 0.995455
   CLL	      = -0.172357
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.9
   F1        = 0.947368


Total scoring time: 0.344 seconds
Parameter learned model CLL: -0.172357


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 1, 0], 'true,false,true': [0.0, 0, 9], 'true,false,false,true': [0.707, 1, 1], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 8, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.802, 1, 9], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.707, 1, 1], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 8, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.0, 1, 0], 'true,false,true': [0.817, 1, 10], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 8, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.595, 1, 9], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.707, 1, 1], 'true,false,false,false': [0.0, 0, 0], 'false,true': [1.32e-09, 8, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 1, 0], 'true,false,true': [2.11e-08, 0, 9], 'true,false,false,true': [0.707, 1, 1], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 8, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, B)', 'true,false,true': 'genre(B, F)', 'false': 'movie(G, A)'}, {'true,true': [0.455, 1, 9], 'true,false,true,true': [0.0, 0, 0], 'true,false,true,false': [0.707, 1, 1], 'true,false,false': [0.0, 0, 0], 'false,true': [3.73e-09, 8, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 1, 0], 'true,false,true': [0.0, 0, 9], 'true,false,false,true': [0.707, 1, 1], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 8, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, A)'}, {'true,true': [0.375, 1, 9], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.707, 1, 1], 'true,false,false,false': [0.0, 0, 0], 'false,true': [9.31e-10, 8, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'true,false,true': 'genre(A, F)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 1, 0], 'true,false,true,true': [0.0, 0, 0], 'true,false,true,false': [0.728, 1, 10], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 8, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.323, 1, 9], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.707, 1, 1], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 8, 0], 'false,false': [0.0, 0, 0]}]]
[{'': [0.1388888888888887, -6.938893903907228e-18], 'true': [0.0, 0.0826446280991734], 'true,false': [-2.9605947323337506e-16, 0.25], 'true,false,false': [0.25, nan], 'false': [-6.938893903907228e-18, nan]}, {'': [0.10999049470538462, 0.0], 'true': [0.06424978612186587, 0.25000000000000006], 'true,false': [nan, 0.25000000000000006], 'true,false,false': [0.25000000000000006, nan], 'false': [0.0, nan]}, {'': [0.09642449133522572, -1.734723475976807e-18], 'true': [0.0, 0.06065987075100165], 'true,false': [0.06065987075100165, nan], 'false': [-1.734723475976807e-18, nan]}, {'': [0.0788518568935873, 1.734723475976807e-18], 'true': [0.03536960412876513, 0.25], 'true,false': [nan, 0.25], 'true,false,false': [0.25, nan], 'false': [1.734723475976807e-18, nan]}, {'': [0.07308267118590138, 0.0], 'true': [0.0, 0.0540843127983426], 'true,false': [4.9343245538895844e-17, 0.24999999999999997], 'true,false,false': [0.24999999999999997, nan], 'false': [0.0, nan]}, {'': [0.06180796301410674, 1.734723475976807e-18], 'true': [0.02072966720978615, 0.25], 'true,false': [0.25, nan], 'true,false,true': [nan, 0.25], 'false': [1.734723475976807e-18, nan]}, {'': [0.0606810103024493, 0.0], 'true': [0.0, 0.04970167174987281], 'true,false': [-2.4671622769447922e-17, 0.25], 'true,false,false': [0.25, nan], 'false': [0.0, nan]}, {'': [0.05492469638001655, 8.673617379884035e-19], 'true': [0.01403052810825266, 0.25], 'true,false': [nan, 0.25], 'true,false,false': [0.25, nan], 'false': [8.673617379884035e-19, nan]}, {'': [0.054771924724047634, 0.0], 'true': [0.0, 0.04815150995615446], 'true,false': [0.04815150995615446, nan], 'true,false,true': [nan, 0.04815150995615446], 'false': [0.0, nan]}, {'': [0.052281239025431116, 0.0], 'true': [0.010440785240522827, 0.25], 'true,false': [nan, 0.25], 'true,false,false': [0.25, nan], 'false': [0.0, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(A, D).;true;true
0;true,false;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;true;genre(A, D).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;true;genre(A, D).;true;true
4;true,false;genre(B, E).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(A, D).;true;true
6;true,false;genre(B, E).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;true;genre(A, D).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14185106490048777;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995123;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else return 0.3581489350995122;  // std dev = 0.707, 2.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */
%   else return -0.1418510649004878;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.5806081952451222;  // std dev = 0.332, 12.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=10 */
%   else return -0.12544463852839138;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.20403837765203062;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else return 0.5190828999857986;  // std dev = 0.260, 11.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=10 */
%   else return -0.11231637819360639;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.3451779587849297;  // std dev = 0.292, 12.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=10 */
%   else return -0.10159632948783627;  // std dev = 3.73e-09, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.22791827422262945;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( genre(B, E) )
%   | | then return 0.37683169271481853;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else return -7.54496706161456E-4;  // std dev = 0.707, 2.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */
%   else return -0.09269127618926097;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.20395353196041408;  // std dev = 0.260, 12.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=10 */
%   else return -0.08518475138839687;  // std dev = 3.73e-09, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.22372867995925508;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( genre(B, E) )
%   | | then return 0.2527869687129343;  // std dev = 1.83e-08, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else return -0.051372332316332314;  // std dev = 0.707, 2.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */
%   else return -0.07877675473109173;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.1340080412460716;  // std dev = 0.244, 12.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=10 */
%   else return -0.07324622576333704;  // std dev = 2.63e-09, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.20853336539277564;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else return 0.13983953233168325;  // std dev = 0.235, 11.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=10 */
%   else return -0.06842697784420272;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.09261916154336029;  // std dev = 0.242, 12.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=10 */
%   else return -0.0641918400820262;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */


Results
   AUC ROC   = 0.97178
   AUC PR    = 0.824078
   CLL	      = -0.298536
   Precision = 0.078809 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.146104


Total learning time: 0.638 seconds
Total inference time: 0.766 seconds
AUC ROC: 0.97178


Results scoring model
   AUC ROC   = 0.995
   AUC PR    = 0.995455
   CLL	      = -0.183443
   Precision = 0.909091 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.952381


Total scoring time: 0.322 seconds
Refined model CLL: -0.183443


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.97178
   AUC PR    = 0.824078
   CLL	      = -0.223503
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.777778
   F1        = 0.875


Total learning time: 1.924 seconds
Total inference time: 0.883 seconds
AUC ROC: 0.97178
Total revision time: 1.924
Best scored revision CLL: -0.172357


Dataset: 4_cora_imdb, Fold: 5, Type: Transfer (trRDN-B), Time: 00:01:37
{'AUC ROC': 0.97178, 'AUC PR': 0.824078, 'CLL': -0.223503, 'Precision': [1.0, 0.5], 'Recall': 0.777778, 'F1': 0.875, 'Learning time': 1.924, 'Inference time': 0.883, 'parameter_10': {'AUC ROC': 0.97178, 'AUC PR': 0.824078, 'CLL': -0.223503, 'Precision': [1.0, 0.5], 'Recall': 0.777778, 'F1': 0.875, 'Learning time': 0.62, 'Inference time': 0.883}}


Amount of data: 15
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;title(I, H), venue(I, A).;false;false
0;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
0;false;haswordvenue(A, L), haswordtitle(M, L).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordtitle(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordauthor(I, H).;false;true
2;true,false,false;haswordvenue(A, J), haswordtitle(K, J).;false;false
2;false;haswordvenue(A, L), haswordtitle(M, L).;true;false
2;false,true;haswordauthor(N, L).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;title(E, D), venue(E, B).;false;true
3;true,true,false;title(F, D), venue(F, A).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, A).;false;true
4;true,true,false;title(F, D), venue(F, B).;false;false
4;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
4;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
4;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
4;false,true;haswordauthor(M, K).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, B).;false;true
5;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
5;true,false;haswordvenue(B, H), haswordtitle(I, H).;true;true
5;true,false,true;title(J, I), venue(J, B).;false;false
5;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
5;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;title(E, D), venue(E, A).;false;true
6;true,true,false;title(F, D), venue(F, B).;false;false
6;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
6;true,false,true;title(I, H), venue(I, B).;false;false
6;true,false,false;haswordvenue(A, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;title(F, D), venue(F, A).;false;false
7;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
7;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
7;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
7;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;title(E, D), venue(E, A).;false;true
8;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
8;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
8;true,false,true;title(J, I), venue(J, A).;false;false
8;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
8;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, B).;false;true
9;true,true,false;title(F, D), venue(F, A).;false;false
9;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
9;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
9;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
9;false,true;haswordauthor(M, K).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14185106490048777;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995123;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.10814893509951219;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.1418510649004878;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.6631455421616645;  // std dev = 0.816, 15.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=14 */
%   | else if ( genre(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(F, B) )
%   | | | then return 0.09446743783575562;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.12544463852839138;  // std dev = 5.27e-09, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.21777065280911012;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( movie(E, A) )
%   | | then return 0.46087851620724035;  // std dev = 1.220, 18.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=15 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.11231637819360638;  // std dev = 1.32e-09, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.41208002423248646;  // std dev = 0.616, 15.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=14 */
%   | else if ( genre(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(F, B) )
%   | | | then return 0.007037395424235565;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.10159632948783628;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.252674987700989;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( genre(B, E) )
%   | | then return 0.35565961066585905;  // std dev = 1.49e-08, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.005740654486968373;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.09269127618926097;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.2464427591408211;  // std dev = 0.470, 15.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=14 */
%   | else if ( movie(E, B) )
%   | | then if ( genre(B, F) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.00467939336871967;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.08518475138839687;  // std dev = 5.27e-09, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.2514999688345084;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( genre(B, E) )
%   | | then return 0.23212420723027138;  // std dev = 1.05e-08, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.003812025838346271;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.07877675473109172;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.16663596074141424;  // std dev = 0.387, 15.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=14 */
%   | else if ( genre(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(F, B) )
%   | | | then return 0.0031039078852371713;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.07324622576333704;  // std dev = 1.32e-09, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.235863644599627;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( movie(E, A) )
%   | | then if ( genre(A, F) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.13174559711231076;  // std dev = 0.914, 18.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=15 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.06842697784420272;  // std dev = 2.63e-09, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.12785552817411625;  // std dev = 0.335, 15.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=14 */
%   | else if ( genre(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(F, A) )
%   | | | then return -0.022815172408480452;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.06419184008202619;  // std dev = 1.61e-09, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 0.97178
   AUC PR    = 0.824078
   CLL	      = -0.131833
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.777778
   F1        = 0.875


Total learning time: 0.658 seconds
Total inference time: 0.918 seconds
AUC ROC: 0.97178


Results scoring model
   AUC ROC   = 0.993333
   AUC PR    = 0.994444
   CLL	      = -0.173957
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.933333
   F1        = 0.965517


Total scoring time: 0.368 seconds
Parameter learned model CLL: -0.173957


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 1, 0], 'true,false,true': [0.0, 0, 14], 'true,false,false,true': [0.866, 3, 1], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 11, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.816, 1, 14], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.866, 3, 1], 'true,false,false,false': [0.0, 0, 0], 'false,true': [5.27e-09, 11, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.0, 1, 0], 'true,false,true': [1.22, 3, 15], 'true,false,false': [0.0, 0, 0], 'false,true': [1.32e-09, 11, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.616, 1, 14], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.866, 3, 1], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 11, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 1, 0], 'true,false,true': [1.49e-08, 0, 14], 'true,false,false,true': [0.866, 3, 1], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 11, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, B)', 'true,false,true': 'genre(B, F)', 'false': 'movie(G, A)'}, {'true,true': [0.47, 1, 14], 'true,false,true,true': [0.0, 0, 0], 'true,false,true,false': [0.866, 3, 1], 'true,false,false': [0.0, 0, 0], 'false,true': [5.27e-09, 11, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 1, 0], 'true,false,true': [1.05e-08, 0, 14], 'true,false,false,true': [0.866, 3, 1], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 11, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, A)'}, {'true,true': [0.387, 1, 14], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.866, 3, 1], 'true,false,false,false': [0.0, 0, 0], 'false,true': [1.32e-09, 11, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'true,false,true': 'genre(A, F)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 1, 0], 'true,false,true,true': [0.0, 0, 0], 'true,false,true,false': [0.914, 3, 15], 'true,false,false': [0.0, 0, 0], 'false,true': [2.63e-09, 11, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.335, 1, 14], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.866, 3, 1], 'true,false,false,false': [0.0, 0, 0], 'false,true': [1.61e-09, 11, 0], 'false,false': [0.0, 0, 0]}]]
[{'': [0.16620498614958412, -1.0092936587501423e-17], 'true': [0.0, 0.1388888888888886], 'true,false': [-2.5376526277146434e-16, 0.18750000000000003], 'true,false,false': [0.18750000000000003, nan], 'false': [-1.0092936587501423e-17, nan]}, {'': [0.12829161957921986, 2.523234146875356e-18], 'true': [0.04441960522005548, 0.18749999999999997], 'true,false': [nan, 0.18749999999999997], 'true,false,false': [0.18749999999999997, nan], 'false': [2.523234146875356e-18, nan]}, {'': [0.10136480765242033, 5.046468293750712e-18], 'true': [0.0, 0.0827559387707756], 'true,false': [0.0827559387707756, nan], 'false': [5.046468293750712e-18, nan]}, {'': [0.08670713954503176, 0.0], 'true': [0.025290194760149466, 0.1875], 'true,false': [nan, 0.1875], 'true,false,false': [0.1875, nan], 'false': [0.0, nan]}, {'': [0.07355936785739058, 0.0], 'true': [0.0, 0.06282970200625362], 'true,false': [1.586032892321652e-17, 0.18749999999999997], 'true,false,false': [0.18749999999999997, nan], 'false': [0.0, nan]}, {'': [0.06083364726632346, 2.523234146875356e-18], 'true': [0.014750790039913982, 0.18750000000000003], 'true,false': [0.18750000000000003, nan], 'true,false,true': [nan, 0.18750000000000003], 'false': [2.523234146875356e-18, nan]}, {'': [0.05735266202649491, 0.0], 'true': [0.0, 0.05067617691860684], 'true,false': [7.93016446160826e-18, 0.18749999999999997], 'true,false,false': [0.18749999999999997, nan], 'false': [0.0, nan]}, {'': [0.051797611298655497, 6.30808536718839e-19], 'true': [0.009980258737309814, 0.18750000000000003], 'true,false': [nan, 0.18750000000000003], 'true,false,false': [0.18750000000000003, nan], 'false': [6.30808536718839e-19, nan]}, {'': [0.05073145201206415, 6.30808536718839e-19], 'true': [0.0, 0.04643741577104881], 'true,false': [0.04643741577104881, nan], 'true,false,true': [nan, 0.04643741577104881], 'false': [6.30808536718839e-19, nan]}, {'': [0.049161974641071776, 2.523234146875356e-18], 'true': [0.007492537700294329, 0.18750000000000006], 'true,false': [nan, 0.18750000000000006], 'true,false,false': [0.18750000000000006, nan], 'false': [2.523234146875356e-18, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(A, D).;true;true
0;true,false;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;true;genre(A, D).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;true;genre(A, D).;true;true
4;true,false;genre(B, E).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(A, D).;true;true
6;true,false;genre(B, E).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;true;genre(A, D).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14185106490048777;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995123;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | else return 0.10814893509951219;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   else return -0.1418510649004878;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.7278063472526077;  // std dev = 0.121, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else return -0.14801058125528116;  // std dev = 0.026, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   else return -0.12544463852839138;  // std dev = 5.27e-09, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.11008612776621615;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( actor(B) )
%   | | then return -0.1370676562622122;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else return 0.5646826815482445;  // std dev = 0.165, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   else return -0.11231637819360638;  // std dev = 7.45e-09, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.42558150156776114;  // std dev = 0.179, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else return -0.1161737124189121;  // std dev = 0.019, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   else return -0.10159632948783628;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.08979655847967415;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( genre(B, E) )
%   | | then return 0.31513524919919333;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | else return 0.04103464142075745;  // std dev = 0.522, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   else return -0.09269127618926097;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then if ( female(A) )
%   | | then return 0.25136326263616227;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return 0.2724386758394213;  // std dev = 0.067, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else return -0.10606329477279616;  // std dev = 0.027, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   else return -0.08518475138839687;  // std dev = 5.27e-09, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.07502250032987078;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( genre(B, E) )
%   | | then return 0.20460703285864118;  // std dev = 0.006, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | else return 0.02629068345169698;  // std dev = 0.450, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   else return -0.07877675473109172;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then if ( female(A) )
%   | | then return 0.17547295565552146;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return 0.19399612264876237;  // std dev = 0.068, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else return -0.09702514286240374;  // std dev = 0.031, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   else return -0.07324622576333704;  // std dev = 2.63e-09, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.06392237298698698;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( director(B) )
%   | | then if ( female(A) )
%   | | | then return 0.15151111893231328;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.16622332871961537;  // std dev = 0.207, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | else return -0.09718808442419696;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else return -0.06842697784420272;  // std dev = 2.63e-09, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then if ( female(A) )
%   | | then return 0.13304391239136104;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return 0.14500570014664546;  // std dev = 0.057, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else return -0.08179163351957576;  // std dev = 0.025, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   else return -0.06419184008202619;  // std dev = 5.27e-09, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.070647
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 0.863 seconds
Total inference time: 0.853 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.101327
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 0.367 seconds
Refined model CLL: -0.101327


******************************************
Best model found
******************************************
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.070647
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 2.2560000000000002 seconds
Total inference time: 0.853 seconds
AUC ROC: 1.0
Total revision time: 2.2560000000000002
Best scored revision CLL: -0.101327


Dataset: 4_cora_imdb, Fold: 5, Type: Transfer (trRDN-B), Time: 00:01:42
{'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.070647, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 2.2560000000000002, 'Inference time': 0.853, 'parameter_15': {'AUC ROC': 0.97178, 'AUC PR': 0.824078, 'CLL': -0.131833, 'Precision': [1.0, 0.5], 'Recall': 0.777778, 'F1': 0.875, 'Learning time': 0.658, 'Inference time': 0.918}}


Amount of data: 20
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;title(I, H), venue(I, A).;false;false
0;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
0;false;haswordvenue(A, L), haswordtitle(M, L).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordtitle(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordauthor(I, H).;false;true
2;true,false,false;haswordvenue(A, J), haswordtitle(K, J).;false;false
2;false;haswordvenue(A, L), haswordtitle(M, L).;true;false
2;false,true;haswordauthor(N, L).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;title(E, D), venue(E, B).;false;true
3;true,true,false;title(F, D), venue(F, A).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, A).;false;true
4;true,true,false;title(F, D), venue(F, B).;false;false
4;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
4;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
4;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
4;false,true;haswordauthor(M, K).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, B).;false;true
5;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
5;true,false;haswordvenue(B, H), haswordtitle(I, H).;true;true
5;true,false,true;title(J, I), venue(J, B).;false;false
5;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
5;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;title(E, D), venue(E, A).;false;true
6;true,true,false;title(F, D), venue(F, B).;false;false
6;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
6;true,false,true;title(I, H), venue(I, B).;false;false
6;true,false,false;haswordvenue(A, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;title(F, D), venue(F, A).;false;false
7;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
7;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
7;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
7;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;title(E, D), venue(E, A).;false;true
8;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
8;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
8;true,false,true;title(J, I), venue(J, A).;false;false
8;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
8;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, B).;false;true
9;true,true,false;title(F, D), venue(F, A).;false;false
9;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
9;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
9;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
9;false,true;haswordauthor(M, K).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14185106490048777;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995123;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.1438632208137979;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=2 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.1418510649004878;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.6750040411194097;  // std dev = 0.822, 19.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=18 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.12543301544918353;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=2 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.12544463852839138;  // std dev = 7.45e-09, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.16605692277680872;  // std dev = 0.076, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else if ( movie(E, A) )
%   | | then return 0.43794005012494386;  // std dev = 1.577, 25.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=20 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.11231637819360636;  // std dev = 2.95e-09, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.4231214432580336;  // std dev = 0.633, 19.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=18 */
%   | else if ( genre(A, E) )
%   | | then return -0.09679513834526887;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.03461607528017287;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=2 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.1015963294878363;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.17783957050615778;  // std dev = 0.126, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else if ( genre(B, E) )
%   | | then return 0.3556684446229621;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.02805068318944448;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=2 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.09269127618926096;  // std dev = 1.32e-09, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.2519297976298388;  // std dev = 0.499, 19.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=18 */
%   | else if ( movie(E, B) )
%   | | then if ( genre(B, F) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.010405339199690972;  // std dev = 1.199, 8.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.08518475138839686;  // std dev = 7.45e-09, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.17889958422362923;  // std dev = 0.145, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else if ( genre(B, E) )
%   | | then return 0.2311529021169188;  // std dev = 2.98e-08, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.020626811352259317;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=2 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.07877675473109172;  // std dev = 3.73e-09, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.1694974044249823;  // std dev = 0.428, 19.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=18 */
%   | else if ( genre(A, E) )
%   | | then return -0.06437547077256135;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.01658895404003172;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=2 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.07324622576333704;  // std dev = 9.31e-10, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.17023876350106434;  // std dev = 0.155, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else if ( movie(E, A) )
%   | | then if ( genre(A, F) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.12442688878710456;  // std dev = 1.244, 25.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=20 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.06842697784420272;  // std dev = 2.63e-09, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.13004562841057976;  // std dev = 0.387, 19.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=18 */
%   | else if ( genre(A, E) )
%   | | then return -0.05160777511521502;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.012032848853616076;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=2 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.06419184008202619;  // std dev = 1.86e-09, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 0.97178
   AUC PR    = 0.824078
   CLL	      = -0.140708
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.777778
   F1        = 0.875


Total learning time: 0.674 seconds
Total inference time: 0.948 seconds
AUC ROC: 0.97178


Results scoring model
   AUC ROC   = 0.9875
   AUC PR    = 0.989186
   CLL	      = -0.199482
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.9
   F1        = 0.947368


Total scoring time: 0.376 seconds
Parameter learned model CLL: -0.199482


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 2, 0], 'true,false,true': [0.0, 0, 18], 'true,false,false,true': [1.195, 5, 2], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 13, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.822, 1, 18], 'true,false,true': [0.0, 1, 0], 'true,false,false,true': [1.195, 5, 2], 'true,false,false,false': [0.0, 0, 0], 'false,true': [7.45e-09, 13, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.076, 2, 0], 'true,false,true': [1.577, 5, 20], 'true,false,false': [0.0, 0, 0], 'false,true': [2.95e-09, 13, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.633, 1, 18], 'true,false,true': [0.0, 1, 0], 'true,false,false,true': [1.195, 5, 2], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 13, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.126, 2, 0], 'true,false,true': [0.0, 0, 18], 'true,false,false,true': [1.195, 5, 2], 'true,false,false,false': [0.0, 0, 0], 'false,true': [1.32e-09, 13, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, B)', 'true,false,true': 'genre(B, F)', 'false': 'movie(G, A)'}, {'true,true': [0.499, 1, 18], 'true,false,true,true': [0.0, 0, 0], 'true,false,true,false': [1.199, 6, 2], 'true,false,false': [0.0, 0, 0], 'false,true': [7.45e-09, 13, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.145, 2, 0], 'true,false,true': [2.98e-08, 0, 18], 'true,false,false,true': [1.195, 5, 2], 'true,false,false,false': [0.0, 0, 0], 'false,true': [3.73e-09, 13, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, A)'}, {'true,true': [0.428, 1, 18], 'true,false,true': [0.0, 1, 0], 'true,false,false,true': [1.195, 5, 2], 'true,false,false,false': [0.0, 0, 0], 'false,true': [9.31e-10, 13, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'true,false,true': 'genre(A, F)', 'false': 'movie(G, A)'}, {'true,true': [0.155, 2, 0], 'true,false,true,true': [0.0, 0, 0], 'true,false,true,false': [1.244, 5, 20], 'true,false,false': [0.0, 0, 0], 'false,true': [2.63e-09, 13, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.387, 1, 18], 'true,false,true': [0.0, 1, 0], 'true,false,false,true': [1.195, 5, 2], 'true,false,false,false': [0.0, 0, 0], 'false,true': [1.86e-09, 13, 0], 'false,false': [0.0, 0, 0]}]]
[{'': [0.19204389574759964, -1.2810265668751807e-17], 'true': [0.0, 0.16000000000000014], 'true,false': [-2.9605947323337506e-16, 0.20408163265306126], 'true,false,false': [0.20408163265306126, nan], 'false': [-1.2810265668751807e-17, nan]}, {'': [0.15036471947597274, 4.270088556250602e-18], 'true': [0.03559544937499509, 0.18545544702231984], 'true,false': [0.0, 0.20408163265306117], 'true,false,false': [0.20408163265306117, nan], 'false': [4.270088556250602e-18, nan]}, {'': [0.11738606062196319, 8.540177112501205e-18], 'true': [0.0028880461320991598, 0.09952276524230193], 'true,false': [0.09952276524230193, nan], 'false': [8.540177112501205e-18, nan]}, {'': [0.102481701542506, -2.135044278125301e-18], 'true': [0.021065017023128515, 0.1804602152818282], 'true,false': [0.0, 0.20408163265306117], 'true,false,false': [0.20408163265306117, nan], 'false': [-2.135044278125301e-18, nan]}, {'': [0.08692058989125385, 2.135044278125301e-18], 'true': [0.007953580175220569, 0.0787812701003697], 'true,false': [-4.9343245538895844e-17, 0.20408163265306123], 'true,false,false': [0.20408163265306123, nan], 'false': [2.135044278125301e-18, nan]}, {'': [0.074603251864709, 4.270088556250602e-18], 'true': [0.013101180105228163, 0.17962077539052956], 'true,false': [0.17962077539052956, nan], 'true,false,true': [nan, 0.17962077539052956], 'false': [4.270088556250602e-18, nan]}, {'': [0.07042231071619248, 1.0675221390626506e-18], 'true': [0.010582590607675607, 0.06607801809721528], 'true,false': [4.9343245538895844e-17, 0.20408163265306126], 'true,false,false': [0.20408163265306126, nan], 'false': [1.0675221390626506e-18, nan]}, {'': [0.06544649431090073, 0.0], 'true': [0.009637959011359448, 0.17928840773700105], 'true,false': [0.0, 0.20408163265306123], 'true,false,false': [0.20408163265306123, nan], 'false': [0.0, nan]}, {'': [0.06420130377009724, 5.337610695313253e-19], 'true': [0.012019542097880857, 0.061944152360288475], 'true,false': [0.061944152360288475, nan], 'true,false,true': [nan, 0.061944152360288475], 'false': [5.337610695313253e-19, nan]}, {'': [0.06302217352864191, 3.736327486719277e-18], 'true': [0.007892854627418571, 0.1787427289389329], 'true,false': [0.0, 0.2040816326530612], 'true,false,false': [0.2040816326530612, nan], 'false': [3.736327486719277e-18, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(A, D).;true;true
0;true,false;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;true;genre(B, D).;true;true
1;true,false;genre(A, E).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;true;genre(B, D).;true;true
3;true,false;genre(A, E).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;true;genre(A, D).;true;true
4;true,false;genre(B, E).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(A, D).;true;true
6;true,false;genre(B, E).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;true;genre(B, D).;true;true
7;true,false;genre(A, E).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;true;genre(B, D).;true;true
9;true,false;genre(A, E).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14185106490048777;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995123;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | else return 0.1438632208137979;  // std dev = 0.452, 7.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=2 */
%   else return -0.1418510649004878;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.7194734122109544;  // std dev = 2.11e-08, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return 0.6544797160002354;  // std dev = 0.225, 13.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else return 0.12543301544918353;  // std dev = 0.452, 7.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=2 */
%   else return -0.12544463852839138;  // std dev = 7.45e-09, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then if ( female(A) )
%   | | then return 0.5934725543415995;  // std dev = 0.093, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else return 0.5906414576948226;  // std dev = 0.067, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else return -0.17400973546246584;  // std dev = 0.075, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   else return -0.11231637819360636;  // std dev = 1.05e-08, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.4082764812441559;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return 0.3776033150258917;  // std dev = 0.163, 13.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   | else if ( genre(A, E) )
%   | | then return -0.09610208303234713;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else return 0.09548557036850454;  // std dev = 0.394, 7.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=2 */
%   else return -0.1015963294878363;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.17043184147407697;  // std dev = 0.116, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else if ( genre(B, E) )
%   | | then return 0.3288627219741784;  // std dev = 0.043, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | else return 0.08068311826475068;  // std dev = 0.391, 7.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=2 */
%   else return -0.09269127618926096;  // std dev = 5.27e-09, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then if ( female(A) )
%   | | then return 0.31011226991754676;  // std dev = 0.152, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else return 0.29896741309620833;  // std dev = 0.111, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else return -0.16975945814760093;  // std dev = 0.041, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   else return -0.08518475138839686;  // std dev = 7.45e-09, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.12917416171120538;  // std dev = 0.092, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else if ( genre(B, E) )
%   | | then return 0.2067762279152015;  // std dev = 0.036, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | else return 0.06451613733184898;  // std dev = 0.347, 7.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=2 */
%   else return -0.07877675473109172;  // std dev = 3.73e-09, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.16449961175051164;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return 0.15283881153774373;  // std dev = 0.095, 13.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   | else if ( genre(A, E) )
%   | | then return -0.056959272114992104;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else return 0.053949962972785724;  // std dev = 0.344, 7.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=2 */
%   else return -0.07324622576333704;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then if ( female(A) )
%   | | then return 0.20586828141541916;  // std dev = 0.154, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else return 0.19150312970793817;  // std dev = 0.114, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else return -0.1579765181176128;  // std dev = 0.043, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   else return -0.06842697784420272;  // std dev = 2.63e-09, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.11967720466647969;  // std dev = 3.73e-09, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return 0.11098404065271877;  // std dev = 0.082, 13.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   | else if ( genre(A, E) )
%   | | then return -0.04645472283003963;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else return 0.04604572083775904;  // std dev = 0.309, 7.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=2 */
%   else return -0.06419184008202619;  // std dev = 6.97e-09, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.092932
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.777778
   F1        = 0.875


Total learning time: 0.956 seconds
Total inference time: 0.834 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.141113
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.9
   F1        = 0.947368


Total scoring time: 0.366 seconds
Refined model CLL: -0.141113


******************************************
Best model found
******************************************
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.092932
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.777778
   F1        = 0.875


Total learning time: 2.3720000000000003 seconds
Total inference time: 0.834 seconds
AUC ROC: 1.0
Total revision time: 2.3720000000000003
Best scored revision CLL: -0.141113


Dataset: 4_cora_imdb, Fold: 5, Type: Transfer (trRDN-B), Time: 00:01:46
{'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.092932, 'Precision': [1.0, 0.5], 'Recall': 0.777778, 'F1': 0.875, 'Learning time': 2.3720000000000003, 'Inference time': 0.834, 'parameter_20': {'AUC ROC': 0.97178, 'AUC PR': 0.824078, 'CLL': -0.140708, 'Precision': [1.0, 0.5], 'Recall': 0.777778, 'F1': 0.875, 'Learning time': 0.674, 'Inference time': 0.948}}


Amount of data: 25
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;title(I, H), venue(I, A).;false;false
0;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
0;false;haswordvenue(A, L), haswordtitle(M, L).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordtitle(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordauthor(I, H).;false;true
2;true,false,false;haswordvenue(A, J), haswordtitle(K, J).;false;false
2;false;haswordvenue(A, L), haswordtitle(M, L).;true;false
2;false,true;haswordauthor(N, L).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;title(E, D), venue(E, B).;false;true
3;true,true,false;title(F, D), venue(F, A).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, A).;false;true
4;true,true,false;title(F, D), venue(F, B).;false;false
4;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
4;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
4;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
4;false,true;haswordauthor(M, K).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, B).;false;true
5;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
5;true,false;haswordvenue(B, H), haswordtitle(I, H).;true;true
5;true,false,true;title(J, I), venue(J, B).;false;false
5;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
5;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;title(E, D), venue(E, A).;false;true
6;true,true,false;title(F, D), venue(F, B).;false;false
6;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
6;true,false,true;title(I, H), venue(I, B).;false;false
6;true,false,false;haswordvenue(A, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;title(F, D), venue(F, A).;false;false
7;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
7;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
7;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
7;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;title(E, D), venue(E, A).;false;true
8;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
8;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
8;true,false,true;title(J, I), venue(J, A).;false;false
8;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
8;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, B).;false;true
9;true,true,false;title(F, D), venue(F, A).;false;false
9;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
9;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
9;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
9;false,true;haswordauthor(M, K).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14185106490048777;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995121;  // std dev = 5.96e-08, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.13087620782678497;  // std dev = 1.477, 11.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=3 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.1418510649004878;  // std dev = 0.000, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.6827378447875044;  // std dev = 0.826, 23.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=22 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.11418623766746651;  // std dev = 1.477, 11.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=3 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.12544463852839138;  // std dev = 7.45e-09, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1667214812021605;  // std dev = 0.077, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else if ( movie(E, A) )
%   | | then return 0.4090631918379861;  // std dev = 1.943, 33.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=25 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.11231637819360635;  // std dev = 3.48e-09, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.43404645655315105;  // std dev = 0.642, 23.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=22 */
%   | else if ( genre(A, E) )
%   | | then return -0.09673705433294436;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.03148381857275937;  // std dev = 1.477, 11.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=3 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.10159632948783631;  // std dev = 0.000, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.17958337264324983;  // std dev = 0.129, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else if ( genre(B, E) )
%   | | then return 0.35801353492793536;  // std dev = 0.000, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.02567401088985746;  // std dev = 1.477, 11.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=3 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.09269127618926094;  // std dev = 1.86e-09, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.2580118371189045;  // std dev = 0.506, 23.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=22 */
%   | else if ( movie(E, B) )
%   | | then if ( genre(B, F) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.012866909027178955;  // std dev = 1.480, 12.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=3 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.08518475138839685;  // std dev = 9.13e-09, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.18117424904104062;  // std dev = 0.149, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else if ( genre(B, E) )
%   | | then return 0.23147133836706413;  // std dev = 0.000, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.01843503276057489;  // std dev = 1.477, 11.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=3 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.07877675473109173;  // std dev = 0.000, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.1735778122950239;  // std dev = 0.434, 23.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=22 */
%   | else if ( genre(A, E) )
%   | | then return -0.06424529089282392;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.014923433162321172;  // std dev = 1.477, 11.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=3 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.07324622576333704;  // std dev = 9.31e-10, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.17262626961845565;  // std dev = 0.159, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else if ( movie(E, A) )
%   | | then if ( genre(A, F) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.11553526932919138;  // std dev = 1.536, 33.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=25 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.06842697784420272;  // std dev = 3.73e-09, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.13428277476584757;  // std dev = 0.394, 23.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=22 */
%   | else if ( genre(A, E) )
%   | | then return -0.05139183504840078;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.010815433814372565;  // std dev = 1.477, 11.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=3 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.06419184008202619;  // std dev = 1.86e-09, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 0.97178
   AUC PR    = 0.824078
   CLL	      = -0.136093
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.777778
   F1        = 0.875


Total learning time: 0.711 seconds
Total inference time: 0.885 seconds
AUC ROC: 0.97178


Results scoring model
   AUC ROC   = 0.9808
   AUC PR    = 0.983723
   CLL	      = -0.219109
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.88
   F1        = 0.93617


Total scoring time: 0.375 seconds
Parameter learned model CLL: -0.219109


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 2, 0], 'true,false,true': [5.96e-08, 0, 22], 'true,false,false,true': [1.477, 8, 3], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 15, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.826, 1, 22], 'true,false,true': [0.0, 1, 0], 'true,false,false,true': [1.477, 8, 3], 'true,false,false,false': [0.0, 0, 0], 'false,true': [7.45e-09, 15, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.077, 2, 0], 'true,false,true': [1.943, 8, 25], 'true,false,false': [0.0, 0, 0], 'false,true': [3.48e-09, 15, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.642, 1, 22], 'true,false,true': [0.0, 1, 0], 'true,false,false,true': [1.477, 8, 3], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 15, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.129, 2, 0], 'true,false,true': [0.0, 0, 22], 'true,false,false,true': [1.477, 8, 3], 'true,false,false,false': [0.0, 0, 0], 'false,true': [1.86e-09, 15, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, B)', 'true,false,true': 'genre(B, F)', 'false': 'movie(G, A)'}, {'true,true': [0.506, 1, 22], 'true,false,true,true': [0.0, 0, 0], 'true,false,true,false': [1.48, 9, 3], 'true,false,false': [0.0, 0, 0], 'false,true': [9.13e-09, 15, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.149, 2, 0], 'true,false,true': [0.0, 0, 22], 'true,false,false,true': [1.477, 8, 3], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 15, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, A)'}, {'true,true': [0.434, 1, 22], 'true,false,true': [0.0, 1, 0], 'true,false,false,true': [1.477, 8, 3], 'true,false,false,false': [0.0, 0, 0], 'false,true': [9.31e-10, 15, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'true,false,true': 'genre(A, F)', 'false': 'movie(G, A)'}, {'true,true': [0.159, 2, 0], 'true,false,true,true': [0.0, 0, 0], 'true,false,true,false': [1.536, 8, 25], 'true,false,false': [0.0, 0, 0], 'false,true': [3.73e-09, 15, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.394, 1, 22], 'true,false,true': [0.0, 1, 0], 'true,false,false,true': [1.477, 8, 3], 'true,false,false,false': [0.0, 0, 0], 'false,true': [1.86e-09, 15, 0], 'false,false': [0.0, 0, 0]}]]
[{'': [0.20408163265306242, -1.4802973661668754e-17], 'true': [0.0, 0.1836547291092757], 'true,false': [1.6148698540002277e-16, 0.1983471074380164], 'true,false,false': [0.1983471074380164, nan], 'false': [-1.4802973661668754e-17, nan]}, {'': [0.16138784356706912, 3.7007434154171884e-18], 'true': [0.029689042106302396, 0.18620465768686492], 'true,false': [0.0, 0.19834710743801673], 'true,false,false': [0.19834710743801673, nan], 'false': [3.7007434154171884e-18, nan]}, {'': [0.1258808197855645, 1.295260195396016e-17], 'true': [0.002959915233371385, 0.11438611502186659], 'true,false': [0.11438611502186659, nan], 'false': [1.295260195396016e-17, nan]}, {'': [0.11301721333079458, -5.551115123125783e-18], 'true': [0.017914842149152746, 0.1830740603927354], 'true,false': [0.0, 0.1983471074380166], 'true,false,false': [0.1983471074380166, nan], 'false': [-5.551115123125783e-18, nan]}, {'': [0.09576744617634639, 3.7007434154171884e-18], 'true': [0.008276566694508228, 0.0906600489766401], 'true,false': [-1.2111523905001707e-16, 0.19834710743801648], 'true,false,false': [0.19834710743801648, nan], 'false': [3.7007434154171884e-18, nan]}, {'': [0.08342672379504987, 5.551115123125783e-18], 'true': [0.011120360905317485, 0.1825222386854397], 'true,false': [0.1825222386854397, nan], 'true,false,true': [nan, 0.1825222386854397], 'false': [5.551115123125783e-18, nan]}, {'': [0.07876668698091521, -1.8503717077085942e-18], 'true': [0.011054117964380009, 0.07620113970299688], 'true,false': [-2.0185873175002847e-17, 0.1983471074380165], 'true,false,false': [0.1983471074380165, nan], 'false': [-1.8503717077085942e-18, nan]}, {'': [0.07403313992433658, 9.251858538542971e-19], 'true': [0.008184873036204613, 0.1822969634539715], 'true,false': [0.0, 0.19834710743801656], 'true,false,false': [0.19834710743801656, nan], 'false': [9.251858538542971e-19, nan]}, {'': [0.07257792453958871, 9.251858538542971e-19], 'true': [0.01257466840456508, 0.07146950994440171], 'true,false': [0.07146950994440171, nan], 'true,false,true': [nan, 0.07146950994440171], 'false': [9.251858538542971e-19, nan]}, {'': [0.07178064744193179, 4.163336342344337e-18], 'true': [0.006745449024276511, 0.1819439518717106], 'true,false': [0.0, 0.19834710743801648], 'true,false,false': [0.19834710743801648, nan], 'false': [4.163336342344337e-18, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(A, D).;true;true
0;true,false;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;true;genre(B, D).;true;true
1;true,false;genre(A, E).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;true;genre(B, D).;true;true
3;true,false;genre(A, E).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;true;genre(A, D).;true;true
4;true,false;genre(B, E).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(A, D).;true;true
6;true,false;genre(B, E).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;true;genre(B, D).;true;true
7;true,false;genre(A, E).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;true;genre(B, D).;true;true
9;true,false;genre(A, E).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14185106490048777;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995121;  // std dev = 5.96e-08, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | | else if ( actor(B) )
%   | | | then return -0.1418510649004878;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | | else return 0.8581489350995121;  // std dev = 2.11e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return -0.1418510649004878;  // std dev = 0.000, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.7194734122109546;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else return 0.6666660340397452;  // std dev = 0.205, 16.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( actor(B) )
%   | | | then return -0.12544463852839138;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | | else return 0.7194734122109545;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return -0.12544463852839138;  // std dev = 7.45e-09, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.5631658008779331;  // std dev = 0.032, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | else return -0.12292183561871665;  // std dev = 0.101, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   else return -0.11231637819360635;  // std dev = 1.39e-08, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.41561803915934725;  // std dev = 2.58e-08, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else return 0.38933484378877753;  // std dev = 0.152, 16.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   | else if ( genre(A, E) )
%   | | then return -0.10063240336831523;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( actor(B) )
%   | | | then return -0.10063240336831523;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | | else return 0.4156180391593476;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return -0.10159632948783631;  // std dev = 0.000, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.17955192096320516;  // std dev = 0.124, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else if ( genre(B, E) )
%   | | then return 0.3313136182793128;  // std dev = 0.038, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | | else if ( actor(B) )
%   | | | then return -0.09188360527408844;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | | else return 0.31942702985790516;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return -0.09269127618926094;  // std dev = 7.45e-09, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.26143777205448354;  // std dev = 0.036, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | else return -0.09875090661812647;  // std dev = 0.142, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   else return -0.08518475138839685;  // std dev = 9.13e-09, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14374930484121906;  // std dev = 0.103, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else if ( genre(B, E) )
%   | | then return 0.21503380255285895;  // std dev = 0.029, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | | else if ( actor(B) )
%   | | | then return -0.07716642514652518;  // std dev = 3.73e-09, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | | else return 0.20795920160832593;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return -0.07877675473109173;  // std dev = 0.000, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.17304603368629;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else return 0.16105642648473045;  // std dev = 0.091, 16.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   | else if ( genre(A, E) )
%   | | then return -0.062216313260137227;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( actor(B) )
%   | | | then return -0.07184745695580375;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | | else return 0.175776244787051;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return -0.07324622576333704;  // std dev = 3.73e-09, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.1570923499253892;  // std dev = 0.028, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | else return -0.0815590294859081;  // std dev = 0.046, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   else return -0.06842697784420272;  // std dev = 3.73e-09, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.13075158027042044;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else return 0.11976161153204173;  // std dev = 0.084, 16.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   | else if ( genre(A, E) )
%   | | then return -0.05433717762048997;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( actor(B) )
%   | | | then return -0.06226561640745966;  // std dev = 2.63e-09, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | | else return 0.13260740361267898;  // std dev = 2.63e-09, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return -0.06419184008202619;  // std dev = 7.90e-09, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063846
   Precision = 0.978261 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.989011


Total learning time: 1.092 seconds
Total inference time: 0.871 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.100391
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 0.375 seconds
Refined model CLL: -0.100391


******************************************
Best model found
******************************************
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063846
   Precision = 0.978261 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.989011


Total learning time: 2.553 seconds
Total inference time: 0.871 seconds
AUC ROC: 1.0
Total revision time: 2.553
Best scored revision CLL: -0.100391


Dataset: 4_cora_imdb, Fold: 5, Type: Transfer (trRDN-B), Time: 00:01:51
{'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.063846, 'Precision': [0.978261, 0.5], 'Recall': 1.0, 'F1': 0.989011, 'Learning time': 2.553, 'Inference time': 0.871, 'parameter_25': {'AUC ROC': 0.97178, 'AUC PR': 0.824078, 'CLL': -0.136093, 'Precision': [1.0, 0.5], 'Recall': 0.777778, 'F1': 0.875, 'Learning time': 0.711, 'Inference time': 0.885}}


Starting fold 1

Target train facts examples: 863
Target train pos examples: 326
Target train neg examples: 10928

Target test facts examples: 215
Target test pos	 examples: 56
Target test neg examples: 3308

Amount of data: 5
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;title(I, H), venue(I, A).;false;false
0;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
0;false;haswordvenue(A, L), haswordtitle(M, L).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordtitle(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordauthor(I, H).;false;true
2;true,false,false;haswordvenue(A, J), haswordtitle(K, J).;false;false
2;false;haswordvenue(A, L), haswordtitle(M, L).;true;false
2;false,true;haswordauthor(N, L).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;title(E, D), venue(E, B).;false;true
3;true,true,false;title(F, D), venue(F, A).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, A).;false;true
4;true,true,false;title(F, D), venue(F, B).;false;false
4;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
4;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
4;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
4;false,true;haswordauthor(M, K).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, B).;false;true
5;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
5;true,false;haswordvenue(B, H), haswordtitle(I, H).;true;true
5;true,false,true;title(J, I), venue(J, B).;false;false
5;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
5;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;title(E, D), venue(E, A).;false;true
6;true,true,false;title(F, D), venue(F, B).;false;false
6;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
6;true,false,true;title(I, H), venue(I, B).;false;false
6;true,false,false;haswordvenue(A, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;title(F, D), venue(F, A).;false;false
7;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
7;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
7;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
7;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;title(E, D), venue(E, A).;false;true
8;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
8;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
8;true,false,true;title(J, I), venue(J, A).;false;false
8;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
8;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, B).;false;true
9;true,true,false;title(F, D), venue(F, A).;false;false
9;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
9;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
9;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
9;false,true;haswordauthor(M, K).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995122;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.14185106490048777;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.14185106490048777;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7194734122109545;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else if ( genre(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(F, B) )
%   | | | then return -0.12544463852839138;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.12544463852839138;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A) )
%   | | then return 0.44408596758963603;  // std dev = 0.610, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.11231637819360639;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.4447988520039283;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else if ( genre(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(F, B) )
%   | | | then return -0.16476268394672763;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.10159632948783628;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( genre(B, E) )
%   | | then return 0.3392793852013426;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.14332149068065764;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.09269127618926096;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.26780523845758497;  // std dev = 1.05e-08, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else if ( movie(E, B) )
%   | | then if ( genre(B, F) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.12660743296270735;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.08518475138839687;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( genre(B, E) )
%   | | then return 0.21864301681019258;  // std dev = 7.45e-09, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else if ( movie(F, B) )
%   | | | then return -0.11325642590314079;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.07877675473109173;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.18358653197988706;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else if ( genre(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(F, B) )
%   | | | then return -0.10237059603983752;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.07324622576333704;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A) )
%   | | then if ( genre(A, F) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.11581812324404982;  // std dev = 0.229, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.06842697784420272;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.14287183817646565;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else if ( genre(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(F, A) )
%   | | | then return -0.10361292501647422;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.0641918400820262;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.07498
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 0.625 seconds
Total inference time: 0.992 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.102333
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 0.323 seconds
Parameter learned model CLL: -0.102333


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 5], 'true,false,false,true': [0.0, 1, 0], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 4, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 5], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 1, 0], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 4, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.61, 1, 5], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 4, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 5], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 1, 0], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 4, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 5], 'true,false,false,true': [0.0, 1, 0], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 4, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, B)', 'true,false,true': 'genre(B, F)', 'false': 'movie(G, A)'}, {'true,true': [1.05e-08, 0, 5], 'true,false,true,true': [0.0, 0, 0], 'true,false,true,false': [0.0, 1, 0], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 4, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [7.45e-09, 0, 5], 'true,false,false,true': [0.0, 1, 0], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 4, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 0, 5], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 1, 0], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 4, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'true,false,true': 'genre(A, F)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 0, 0], 'true,false,true,true': [0.0, 0, 0], 'true,false,true,false': [0.229, 1, 5], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 4, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 5], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 1, 0], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 4, 0], 'false,false': [0.0, 0, 0]}]]
[{'': [0.1388888888888887, 0.0], 'true': [nan, 0.1388888888888887], 'true,false': [0.0, 0.0], 'false': [0.0, nan], 'true,false,false': [0.0, nan]}, {'': [0.09915090450905224, 0.0], 'true': [0.0, 0.0], 'false': [0.0, nan], 'true,false': [nan, 0.0], 'true,false,false': [0.0, nan]}, {'': [0.061916714078618984, 0.0], 'true': [nan, 0.061916714078618984], 'true,false': [0.061916714078618984, nan], 'false': [0.0, nan]}, {'': [0.051606286959794835, 0.0], 'true': [0.0, 0.0], 'false': [0.0, nan], 'true,false': [nan, 0.0], 'true,false,false': [0.0, nan]}, {'': [0.03234772297251024, 0.0], 'true': [nan, 0.03234772297251024], 'true,false': [-2.2204460492503132e-17, 0.0], 'false': [0.0, nan], 'true,false,false': [0.0, nan]}, {'': [0.021605743802346058, 0.0], 'true': [2.2204460492503132e-17, 0.0], 'false': [0.0, nan], 'true,false': [0.0, nan], 'true,false,true': [nan, 0.0]}, {'': [0.015299616676864075, 0.0], 'true': [nan, 0.015299616676864075], 'true,false': [1.1102230246251566e-17, 0.0], 'false': [0.0, nan], 'true,false,false': [0.0, nan]}, {'': [0.011357149870179049, 0.0], 'true': [0.0, 0.0], 'false': [0.0, nan], 'true,false': [nan, 0.0], 'true,false,false': [0.0, nan]}, {'': [0.008749356217304974, 0.0], 'true': [nan, 0.008749356217304974], 'true,false': [0.008749356217304974, nan], 'true,false,true': [nan, 0.008749356217304974], 'false': [0.0, nan]}, {'': [0.008438158123094395, 0.0], 'true': [0.0, 0.0], 'false': [0.0, nan], 'true,false': [nan, 0.0], 'true,false,false': [0.0, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;true;genre(B, D).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;true;genre(B, D).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;true;genre(B, E).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;true;genre(B, D).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(B, E).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;true;genre(B, D).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;true;genre(B, D).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.8581489350995122;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return -0.14185106490048777;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   else return -0.14185106490048777;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7194734122109545;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return -0.12544463852839138;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   else return -0.12544463852839138;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.44408596758963603;  // std dev = 0.610, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   else return -0.11231637819360639;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.4447988520039283;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return -0.16476268394672763;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   else return -0.10159632948783628;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.3392793852013426;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return -0.14332149068065764;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   else return -0.09269127618926096;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.26780523845758497;  // std dev = 1.05e-08, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return -0.12660743296270735;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   else return -0.08518475138839687;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.21864301681019258;  // std dev = 7.45e-09, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return -0.11325642590314079;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   else return -0.07877675473109173;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.18358653197988706;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return -0.10237059603983752;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   else return -0.07324622576333704;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.11581812324404982;  // std dev = 0.229, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   else return -0.06842697784420272;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.14287183817646565;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return -0.10361292501647422;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   else return -0.0641918400820262;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */


Results
   AUC ROC   = 0.999547
   AUC PR    = 0.949153
   CLL	      = -0.075613
   Precision = 0.949153 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.973913


Total learning time: 0.526 seconds
Total inference time: 0.861 seconds
AUC ROC: 0.999547


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.102333
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 0.316 seconds
Refined model CLL: -0.102333


******************************************
Best model found
******************************************
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.07498
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 1.79 seconds
Total inference time: 0.992 seconds
AUC ROC: 1.0
Total revision time: 1.79
Best scored revision CLL: -0.102333


Dataset: 4_cora_imdb, Fold: 1, Type: Transfer (trRDN-B), Time: 00:01:55
{'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.07498, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 1.79, 'Inference time': 0.992, 'parameter_5': {'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.07498, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 0.625, 'Inference time': 0.992}}


Amount of data: 10
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;title(I, H), venue(I, A).;false;false
0;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
0;false;haswordvenue(A, L), haswordtitle(M, L).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordtitle(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordauthor(I, H).;false;true
2;true,false,false;haswordvenue(A, J), haswordtitle(K, J).;false;false
2;false;haswordvenue(A, L), haswordtitle(M, L).;true;false
2;false,true;haswordauthor(N, L).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;title(E, D), venue(E, B).;false;true
3;true,true,false;title(F, D), venue(F, A).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, A).;false;true
4;true,true,false;title(F, D), venue(F, B).;false;false
4;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
4;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
4;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
4;false,true;haswordauthor(M, K).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, B).;false;true
5;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
5;true,false;haswordvenue(B, H), haswordtitle(I, H).;true;true
5;true,false,true;title(J, I), venue(J, B).;false;false
5;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
5;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;title(E, D), venue(E, A).;false;true
6;true,true,false;title(F, D), venue(F, B).;false;false
6;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
6;true,false,true;title(I, H), venue(I, B).;false;false
6;true,false,false;haswordvenue(A, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;title(F, D), venue(F, A).;false;false
7;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
7;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
7;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
7;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;title(E, D), venue(E, A).;false;true
8;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
8;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
8;true,false,true;title(J, I), venue(J, A).;false;false
8;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
8;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, B).;false;true
9;true,true,false;title(F, D), venue(F, A).;false;false
9;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
9;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
9;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
9;false,true;haswordauthor(M, K).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14185106490048777;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995123;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.19148226843284552;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.1418510649004878;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7194734122109543;  // std dev = 2.98e-08, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.16653882456488175;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.12544463852839138;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.11231637819360639;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( movie(E, A) )
%   | | then return 0.4520483882636046;  // std dev = 1.025, 12.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=10 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.11231637819360639;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.4428333839346599;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else if ( genre(A, E) )
%   | | then return -0.10159632948783628;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.06240753161412641;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.10159632948783627;  // std dev = 1.86e-09, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.09269127618926096;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( genre(B, E) )
%   | | then return 0.33793635351315704;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.0499058165156003;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.09269127618926097;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.26689365832968215;  // std dev = 1.05e-08, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else if ( movie(E, B) )
%   | | then if ( genre(B, F) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.008449959954008102;  // std dev = 0.824, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.08518475138839687;  // std dev = 2.63e-09, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.08584555478094962;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( genre(B, E) )
%   | | then return 0.21800435508025368;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.03790571564939479;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.07877675473109173;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.1831218015095074;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else if ( genre(A, E) )
%   | | then return -0.07934387929128384;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.02995493355273504;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.07324622576333704;  // std dev = 9.31e-10, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.07373797954104776;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( movie(E, A) )
%   | | then if ( genre(A, F) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.12387140265904843;  // std dev = 0.841, 12.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=10 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.06842697784420272;  // std dev = 2.63e-09, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.14156746670116915;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else if ( genre(A, E) )
%   | | then return -0.06885724572389632;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.0035006554386490065;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.0641918400820262;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.155095
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 0.701 seconds
Total inference time: 1.031 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 0.99
   AUC PR    = 0.991667
   CLL	      = -0.18084
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.9
   F1        = 0.947368


Total scoring time: 0.336 seconds
Parameter learned model CLL: -0.18084


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 1, 0], 'true,false,true': [0.0, 0, 9], 'true,false,false,true': [0.816, 2, 1], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 7, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [2.98e-08, 0, 9], 'true,false,true': [0.0, 1, 0], 'true,false,false,true': [0.816, 2, 1], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 7, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.0, 1, 0], 'true,false,true': [1.025, 2, 10], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 7, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 9], 'true,false,true': [0.0, 1, 0], 'true,false,false,true': [0.816, 2, 1], 'true,false,false,false': [0.0, 0, 0], 'false,true': [1.86e-09, 7, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 1, 0], 'true,false,true': [0.0, 0, 9], 'true,false,false,true': [0.816, 2, 1], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 7, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, B)', 'true,false,true': 'genre(B, F)', 'false': 'movie(G, A)'}, {'true,true': [1.05e-08, 0, 9], 'true,false,true,true': [0.0, 0, 0], 'true,false,true,false': [0.824, 3, 1], 'true,false,false': [0.0, 0, 0], 'false,true': [2.63e-09, 7, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 1, 0], 'true,false,true': [0.0, 0, 9], 'true,false,false,true': [0.816, 2, 1], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 7, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 0, 9], 'true,false,true': [0.0, 1, 0], 'true,false,false,true': [0.816, 2, 1], 'true,false,false,false': [0.0, 0, 0], 'false,true': [9.31e-10, 7, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'true,false,true': 'genre(A, F)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 1, 0], 'true,false,true,true': [0.0, 0, 0], 'true,false,true,false': [0.841, 2, 10], 'true,false,false': [0.0, 0, 0], 'false,true': [2.63e-09, 7, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 9], 'true,false,true': [0.0, 1, 0], 'true,false,false,true': [0.816, 2, 1], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 7, 0], 'false,false': [0.0, 0, 0]}]]
[{'': [0.1775147928994082, -7.93016446160826e-18], 'true': [0.0, 0.1388888888888887], 'true,false': [-2.9605947323337506e-16, 0.22222222222222224], 'true,false,false': [0.22222222222222224, nan], 'false': [-7.93016446160826e-18, nan]}, {'': [0.13965856851376957, -1.982541115402065e-18], 'true': [9.868649107779169e-17, 0.18265185592665556], 'true,false': [0.0, 0.2222222222222222], 'true,false,false': [0.2222222222222222, nan], 'false': [-1.982541115402065e-18, nan]}, {'': [0.10345845858383641, -1.982541115402065e-18], 'true': [0.0, 0.08757941298236364], 'true,false': [0.08757941298236364, nan], 'false': [-1.982541115402065e-18, nan]}, {'': [0.09066588915872274, 0.0], 'true': [0.0, 0.17170990412723267], 'true,false': [0.0, 0.22222222222222224], 'true,false,false': [0.22222222222222224, nan], 'false': [0.0, nan]}, {'': [0.07477273843161027, 0.0], 'true': [0.0, 0.071110853726137], 'true,false': [0.0, 0.22222222222222224], 'true,false,false': [0.22222222222222224, nan], 'false': [0.0, nan]}, {'': [0.0664094034745474, 9.912705577010326e-19], 'true': [1.2335811384723961e-17, 0.1695891530560585], 'true,false': [0.1695891530560585, nan], 'true,false,true': [nan, 0.1695891530560585], 'false': [9.912705577010326e-19, nan]}, {'': [0.061652613875389624, -9.912705577010326e-19], 'true': [0.0, 0.06163721554146425], 'true,false': [-2.4671622769447922e-17, 0.2222222222222222], 'true,false,false': [0.2222222222222222, nan], 'false': [-9.912705577010326e-19, nan]}, {'': [0.058910780327748914, 9.912705577010326e-19], 'true': [-6.1679056923619804e-18, 0.16890658488337512], 'true,false': [0.0, 0.2222222222222222], 'true,false,false': [0.2222222222222222, nan], 'false': [9.912705577010326e-19, nan]}, {'': [0.05714922996394562, 9.912705577010326e-19], 'true': [0.0, 0.05890786056862029], 'true,false': [0.05890786056862029, nan], 'true,false,true': [nan, 0.05890786056862029], 'false': [9.912705577010326e-19, nan]}, {'': [0.05707808684255637, -4.956352788505163e-19], 'true': [-3.0839528461809902e-18, 0.16746756989673797], 'true,false': [0.0, 0.2222222222222222], 'true,false,false': [0.2222222222222222, nan], 'false': [-4.956352788505163e-19, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(A, D).;true;true
0;true,false;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;true;genre(B, D).;true;true
1;true,false;genre(A, E).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;true;genre(A, D).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;true;genre(B, D).;true;true
3;true,false;genre(A, E).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;true;genre(A, D).;true;true
4;true,false;genre(B, E).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;true;genre(B, D).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(A, D).;true;true
6;true,false;genre(B, E).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;true;genre(B, D).;true;true
7;true,false;genre(A, E).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;true;genre(A, D).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;true;genre(B, D).;true;true
9;true,false;genre(A, E).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14185106490048777;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995123;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else return 0.19148226843284552;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   else return -0.1418510649004878;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7194734122109543;  // std dev = 2.98e-08, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else return 0.16653882456488175;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   else return -0.12544463852839138;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.11231637819360639;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( female(A) )
%   | | then return 0.6187150549302712;  // std dev = 0.219, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return 0.36871505493027135;  // std dev = 0.323, 8.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=6 */
%   else return -0.11231637819360639;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.4430514096149902;  // std dev = 0.087, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else if ( genre(A, E) )
%   | | then return -0.10159632948783628;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else return 0.061787651630734595;  // std dev = 0.775, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   else return -0.10159632948783627;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.09269127618926096;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( genre(B, E) )
%   | | then return 0.338404575319545;  // std dev = 0.078, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else return 0.049430678780479166;  // std dev = 0.774, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   else return -0.09269127618926097;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.26739812952089065;  // std dev = 0.068, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else return 0.008182641903819954;  // std dev = 0.781, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   else return -0.08518475138839687;  // std dev = 2.63e-09, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.08582457902648356;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( genre(B, E) )
%   | | then return 0.21846871534036946;  // std dev = 0.059, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else return 0.03760880200540684;  // std dev = 0.773, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   else return -0.07877675473109173;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.18352867767938777;  // std dev = 0.051, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else if ( genre(A, E) )
%   | | then return -0.07932588623843244;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else return 0.02974011512192909;  // std dev = 0.773, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   else return -0.07324622576333704;  // std dev = 2.63e-09, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.07372238464824006;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( female(A) )
%   | | then return 0.26564372001623415;  // std dev = 0.448, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return 0.05332371604040439;  // std dev = 0.199, 8.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=6 */
%   else return -0.06842697784420272;  // std dev = 2.63e-09, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.14331171915877483;  // std dev = 0.075, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else if ( genre(A, E) )
%   | | then return -0.06884360603303778;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else return -0.004757540457510867;  // std dev = 0.730, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   else return -0.0641918400820262;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.163611
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 0.711 seconds
Total inference time: 0.942 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.167132
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.9
   F1        = 0.947368


Total scoring time: 0.336 seconds
Refined model CLL: -0.167132


******************************************
Best model found
******************************************
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.163611
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 2.0839999999999996 seconds
Total inference time: 0.942 seconds
AUC ROC: 1.0
Total revision time: 2.0839999999999996
Best scored revision CLL: -0.167132


Dataset: 4_cora_imdb, Fold: 1, Type: Transfer (trRDN-B), Time: 00:02:00
{'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.163611, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 2.0839999999999996, 'Inference time': 0.942, 'parameter_10': {'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.155095, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 0.701, 'Inference time': 1.031}}


Amount of data: 15
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;title(I, H), venue(I, A).;false;false
0;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
0;false;haswordvenue(A, L), haswordtitle(M, L).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordtitle(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordauthor(I, H).;false;true
2;true,false,false;haswordvenue(A, J), haswordtitle(K, J).;false;false
2;false;haswordvenue(A, L), haswordtitle(M, L).;true;false
2;false,true;haswordauthor(N, L).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;title(E, D), venue(E, B).;false;true
3;true,true,false;title(F, D), venue(F, A).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, A).;false;true
4;true,true,false;title(F, D), venue(F, B).;false;false
4;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
4;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
4;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
4;false,true;haswordauthor(M, K).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, B).;false;true
5;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
5;true,false;haswordvenue(B, H), haswordtitle(I, H).;true;true
5;true,false,true;title(J, I), venue(J, B).;false;false
5;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
5;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;title(E, D), venue(E, A).;false;true
6;true,true,false;title(F, D), venue(F, B).;false;false
6;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
6;true,false,true;title(I, H), venue(I, B).;false;false
6;true,false,false;haswordvenue(A, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;title(F, D), venue(F, A).;false;false
7;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
7;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
7;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
7;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;title(E, D), venue(E, A).;false;true
8;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
8;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
8;true,false,true;title(J, I), venue(J, A).;false;false
8;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
8;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, B).;false;true
9;true,true,false;title(F, D), venue(F, A).;false;false
9;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
9;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
9;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
9;false,true;haswordauthor(M, K).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14185106490048777;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995123;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.0581489350995122;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.1418510649004878;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7194734122109542;  // std dev = 5.16e-08, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.050922032513554226;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.12544463852839138;  // std dev = 5.27e-09, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.11231637819360639;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( movie(E, A) )
%   | | then return 0.42088745276164874;  // std dev = 1.327, 19.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=15 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.11231637819360638;  // std dev = 1.86e-09, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.4505348791917995;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | else if ( genre(A, E) )
%   | | then return -0.10159632948783628;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( movie(F, B) )
%   | | | then return -0.019250134424778777;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.10159632948783628;  // std dev = 1.32e-09, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.09269127618926096;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( genre(B, E) )
%   | | then return 0.34320484895046593;  // std dev = 3.33e-08, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.015972719695467395;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.09269127618926097;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.27046798275558526;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | else if ( movie(E, B) )
%   | | then if ( genre(B, F) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.02526442075288743;  // std dev = 0.897, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.08518475138839687;  // std dev = 3.73e-09, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.0832364596463985;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( genre(B, E) )
%   | | then return 0.2205064425744525;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | else if ( movie(F, B) )
%   | | | then return -0.009071899933404248;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.07877675473109172;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.18494095393758586;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | else if ( genre(A, E) )
%   | | then return -0.07710121235791827;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( movie(F, B) )
%   | | | then return -0.007575722014259101;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.07324622576333704;  // std dev = 9.31e-10, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.07179073497699276;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( movie(E, A) )
%   | | then if ( genre(A, F) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.11524758601316326;  // std dev = 0.949, 19.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=15 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.06842697784420272;  // std dev = 2.63e-09, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.14388227153936284;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | else if ( genre(A, E) )
%   | | then return -0.0671514393898661;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.025844003110936552;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.06419184008202619;  // std dev = 1.61e-09, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.113282
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 0.679 seconds
Total inference time: 1.031 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 0.991111
   AUC PR    = 0.992982
   CLL	      = -0.169989
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.933333
   F1        = 0.965517


Total scoring time: 0.363 seconds
Parameter learned model CLL: -0.169989


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 1, 0], 'true,false,true': [0.0, 0, 14], 'true,false,false,true': [0.894, 4, 1], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 10, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [5.16e-08, 0, 14], 'true,false,true': [0.0, 1, 0], 'true,false,false,true': [0.894, 4, 1], 'true,false,false,false': [0.0, 0, 0], 'false,true': [5.27e-09, 10, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.0, 1, 0], 'true,false,true': [1.327, 4, 15], 'true,false,false': [0.0, 0, 0], 'false,true': [1.86e-09, 10, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 14], 'true,false,true': [0.0, 1, 0], 'true,false,false,true': [0.894, 4, 1], 'true,false,false,false': [0.0, 0, 0], 'false,true': [1.32e-09, 10, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 1, 0], 'true,false,true': [3.33e-08, 0, 14], 'true,false,false,true': [0.894, 4, 1], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 10, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, B)', 'true,false,true': 'genre(B, F)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 0, 14], 'true,false,true,true': [0.0, 0, 0], 'true,false,true,false': [0.897, 5, 1], 'true,false,false': [0.0, 0, 0], 'false,true': [3.73e-09, 10, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 1, 0], 'true,false,true': [0.0, 0, 14], 'true,false,false,true': [0.894, 4, 1], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 10, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 0, 14], 'true,false,true': [0.0, 1, 0], 'true,false,false,true': [0.894, 4, 1], 'true,false,false,false': [0.0, 0, 0], 'false,true': [9.31e-10, 10, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'true,false,true': 'genre(A, F)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 1, 0], 'true,false,true,true': [0.0, 0, 0], 'true,false,true,false': [0.949, 4, 15], 'true,false,false': [0.0, 0, 0], 'false,true': [2.63e-09, 10, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 14], 'true,false,true': [0.0, 1, 0], 'true,false,false,true': [0.894, 4, 1], 'true,false,false,false': [0.0, 0, 0], 'false,true': [1.61e-09, 10, 0], 'false,false': [0.0, 0, 0]}]]
[{'': [0.18749999999999964, -1.1102230246251566e-17], 'true': [0.0, 0.16620498614958412], 'true,false': [-2.5376526277146434e-16, 0.16000000000000003], 'true,false,false': [0.16000000000000003, nan], 'false': [-1.1102230246251566e-17, nan]}, {'': [0.14359300874613848, 2.7755575615628915e-18], 'true': [1.9032394707859825e-16, 0.13765350036866916], 'true,false': [0.0, 0.16], 'true,false,false': [0.16, nan], 'false': [2.7755575615628915e-18, nan]}, {'': [0.10160957882912074, 0.0], 'true': [0.0, 0.09274213513180649], 'true,false': [0.09274213513180649, nan], 'false': [0.0, nan]}, {'': [0.08937661453222574, 1.3877787807814458e-18], 'true': [-9.516197353929913e-17, 0.13427512442241152], 'true,false': [0.0, 0.15999999999999998], 'true,false,false': [0.15999999999999998, nan], 'false': [1.3877787807814458e-18, nan]}, {'': [0.06930025384651595, 0.0], 'true': [0.0, 0.06712076677919203], 'true,false': [7.930164461608261e-17, 0.16000000000000006], 'true,false,false': [0.16000000000000006, nan], 'false': [0.0, nan]}, {'': [0.05858153420323666, 1.3877787807814458e-18], 'true': [-4.7580986769649563e-17, 0.1340514225380271], 'true,false': [0.1340514225380271, nan], 'true,false,true': [nan, 0.1340514225380271], 'false': [1.3877787807814458e-18, nan]}, {'': [0.05252143373271645, 0.0], 'true': [0.0, 0.052325304915251614], 'true,false': [-7.93016446160826e-18, 0.16000000000000006], 'true,false,false': [0.16000000000000006, nan], 'false': [0.0, nan]}, {'': [0.04894970315560431, 6.938893903907229e-19], 'true': [-7.93016446160826e-18, 0.13400469358437864], 'true,false': [0.0, 0.16], 'true,false,false': [0.16, nan], 'false': [6.938893903907229e-19, nan]}, {'': [0.046676922863919126, 6.938893903907229e-19], 'true': [0.0, 0.04738443633871088], 'true,false': [0.04738443633871088, nan], 'true,false,true': [nan, 0.04738443633871088], 'false': [6.938893903907229e-19, nan]}, {'': [0.04662128820751591, 1.3877787807814458e-18], 'true': [0.0, 0.1335703200405469], 'true,false': [0.0, 0.15999999999999998], 'true,false,false': [0.15999999999999998, nan], 'false': [1.3877787807814458e-18, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(A, D).;true;true
0;true,false;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;true;genre(B, D).;true;true
1;true,false;genre(A, E).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;true;genre(A, D).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;true;genre(B, D).;true;true
3;true,false;genre(A, E).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;true;genre(A, D).;true;true
4;true,false;genre(B, E).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;true;genre(B, D).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(A, D).;true;true
6;true,false;genre(B, E).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;true;genre(B, D).;true;true
7;true,false;genre(A, E).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;true;genre(A, D).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;true;genre(B, D).;true;true
9;true,false;genre(A, E).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14185106490048777;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995123;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | else return 0.0581489350995122;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   else return -0.1418510649004878;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7194734122109542;  // std dev = 5.16e-08, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else return 0.050922032513554226;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   else return -0.12544463852839138;  // std dev = 5.27e-09, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.11231637819360639;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( director(B) )
%   | | then if ( female(A) )
%   | | | then return 0.6035297468893486;  // std dev = 0.264, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.5553664367462846;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else return -0.15565370239533147;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   else return -0.11231637819360638;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.41334768125645677;  // std dev = 0.021, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | else if ( genre(A, E) )
%   | | then return -0.10159632948783628;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else return 0.04055863671221895;  // std dev = 0.791, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   else return -0.10159632948783628;  // std dev = 3.73e-09, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.09269127618926096;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( genre(B, E) )
%   | | then return 0.31789980721183486;  // std dev = 0.019, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | else return 0.035138082056104074;  // std dev = 0.788, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   else return -0.09269127618926097;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.2532589704274729;  // std dev = 0.016, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | else return 0.011073290914521638;  // std dev = 0.793, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   else return -0.08518475138839687;  // std dev = 3.73e-09, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.08605164734594646;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( genre(B, E) )
%   | | then return 0.20840919895302237;  // std dev = 0.014, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | else return 0.028785419785729925;  // std dev = 0.785, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   else return -0.07877675473109172;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.17610926570481317;  // std dev = 0.012, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | else if ( genre(A, E) )
%   | | then return -0.07952063439959063;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else return 0.024732394323815455;  // std dev = 0.783, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   else return -0.07324622576333704;  // std dev = 2.63e-09, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.07389115231627602;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( director(B) )
%   | | then if ( female(A) )
%   | | | then return 0.24344304338872294;  // std dev = 0.523, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.1542024462566216;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else return -0.15364490062385633;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   else return -0.06842697784420272;  // std dev = 2.63e-09, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.12969102273148034;  // std dev = 0.027, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | else if ( genre(A, E) )
%   | | then return -0.06899119606618025;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else return 0.026032067021447024;  // std dev = 0.719, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   else return -0.06419184008202619;  // std dev = 3.73e-09, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.086274
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 0.688 seconds
Total inference time: 0.942 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.136472
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.933333
   F1        = 0.965517


Total scoring time: 0.363 seconds
Refined model CLL: -0.136472


******************************************
Best model found
******************************************
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.086274
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 2.093 seconds
Total inference time: 0.942 seconds
AUC ROC: 1.0
Total revision time: 2.093
Best scored revision CLL: -0.136472


Dataset: 4_cora_imdb, Fold: 1, Type: Transfer (trRDN-B), Time: 00:02:04
{'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.086274, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 2.093, 'Inference time': 0.942, 'parameter_15': {'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.113282, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 0.679, 'Inference time': 1.031}}


Amount of data: 20
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;title(I, H), venue(I, A).;false;false
0;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
0;false;haswordvenue(A, L), haswordtitle(M, L).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordtitle(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordauthor(I, H).;false;true
2;true,false,false;haswordvenue(A, J), haswordtitle(K, J).;false;false
2;false;haswordvenue(A, L), haswordtitle(M, L).;true;false
2;false,true;haswordauthor(N, L).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;title(E, D), venue(E, B).;false;true
3;true,true,false;title(F, D), venue(F, A).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, A).;false;true
4;true,true,false;title(F, D), venue(F, B).;false;false
4;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
4;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
4;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
4;false,true;haswordauthor(M, K).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, B).;false;true
5;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
5;true,false;haswordvenue(B, H), haswordtitle(I, H).;true;true
5;true,false,true;title(J, I), venue(J, B).;false;false
5;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
5;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;title(E, D), venue(E, A).;false;true
6;true,true,false;title(F, D), venue(F, B).;false;false
6;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
6;true,false,true;title(I, H), venue(I, B).;false;false
6;true,false,false;haswordvenue(A, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;title(F, D), venue(F, A).;false;false
7;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
7;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
7;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
7;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;title(E, D), venue(E, A).;false;true
8;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
8;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
8;true,false,true;title(J, I), venue(J, A).;false;false
8;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
8;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, B).;false;true
9;true,true,false;title(F, D), venue(F, A).;false;false
9;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
9;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
9;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
9;false,true;haswordauthor(M, K).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14185106490048777;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995123;  // std dev = 0.000, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.024815601766178873;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.1418510649004878;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7194734122109542;  // std dev = 7.30e-08, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.02176788419240575;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.12544463852839138;  // std dev = 7.45e-09, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.11231637819360639;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( movie(E, A) )
%   | | then return 0.426650461433931;  // std dev = 1.465, 25.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=20 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.11231637819360636;  // std dev = 2.95e-09, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.4491086384657059;  // std dev = 4.21e-08, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | else if ( genre(A, E) )
%   | | then return -0.10159632948783628;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( movie(F, B) )
%   | | | then return -0.043028134508429884;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.1015963294878363;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.09269127618926096;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( genre(B, E) )
%   | | then return 0.3422279410000073;  // std dev = 4.21e-08, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.035986433967386065;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.09269127618926096;  // std dev = 1.32e-09, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.26980554329571765;  // std dev = 2.11e-08, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | else if ( movie(E, B) )
%   | | then if ( genre(B, F) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.03808389271823937;  // std dev = 0.914, 7.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=1 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.08518475138839686;  // std dev = 8.33e-09, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.08226344129770949;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( genre(B, E) )
%   | | then return 0.22004315045497158;  // std dev = 1.49e-08, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | else if ( movie(F, B) )
%   | | | then return -0.024280953049647117;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.07877675473109172;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.1846044233586998;  // std dev = 0.000, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | else if ( genre(A, E) )
%   | | then return -0.07626247059404681;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( movie(F, B) )
%   | | | then return -0.020557990869502024;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.07324622576333704;  // std dev = 9.31e-10, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.07106066463923737;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( movie(E, A) )
%   | | then if ( genre(A, F) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.11620810387767488;  // std dev = 0.987, 25.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=20 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.06842697784420272;  // std dev = 3.73e-09, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.14353056659369656;  // std dev = 0.000, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | else if ( genre(A, E) )
%   | | then return -0.06651048313992478;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.03555031697128249;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.06419184008202619;  // std dev = 1.86e-09, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.105032
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 0.705 seconds
Total inference time: 0.933 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 0.99375
   AUC PR    = 0.995
   CLL	      = -0.155851
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.95
   F1        = 0.974359


Total scoring time: 0.375 seconds
Parameter learned model CLL: -0.155851


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 1, 0], 'true,false,true': [0.0, 0, 19], 'true,false,false,true': [0.913, 5, 1], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 14, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [7.3e-08, 0, 19], 'true,false,true': [0.0, 1, 0], 'true,false,false,true': [0.913, 5, 1], 'true,false,false,false': [0.0, 0, 0], 'false,true': [7.45e-09, 14, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.0, 1, 0], 'true,false,true': [1.465, 5, 20], 'true,false,false': [0.0, 0, 0], 'false,true': [2.95e-09, 14, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [4.21e-08, 0, 19], 'true,false,true': [0.0, 1, 0], 'true,false,false,true': [0.913, 5, 1], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 14, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 1, 0], 'true,false,true': [4.21e-08, 0, 19], 'true,false,false,true': [0.913, 5, 1], 'true,false,false,false': [0.0, 0, 0], 'false,true': [1.32e-09, 14, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, B)', 'true,false,true': 'genre(B, F)', 'false': 'movie(G, A)'}, {'true,true': [2.11e-08, 0, 19], 'true,false,true,true': [0.0, 0, 0], 'true,false,true,false': [0.914, 6, 1], 'true,false,false': [0.0, 0, 0], 'false,true': [8.33e-09, 14, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 1, 0], 'true,false,true': [1.49e-08, 0, 19], 'true,false,false,true': [0.913, 5, 1], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 14, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 0, 19], 'true,false,true': [0.0, 1, 0], 'true,false,false,true': [0.913, 5, 1], 'true,false,false,false': [0.0, 0, 0], 'false,true': [9.31e-10, 14, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'true,false,true': 'genre(A, F)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 1, 0], 'true,false,true,true': [0.0, 0, 0], 'true,false,true,false': [0.987, 5, 20], 'true,false,false': [0.0, 0, 0], 'false,true': [3.73e-09, 14, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 19], 'true,false,true': [0.0, 1, 0], 'true,false,false,true': [0.913, 5, 1], 'true,false,false,false': [0.0, 0, 0], 'false,true': [1.86e-09, 14, 0], 'false,false': [0.0, 0, 0]}]]
[{'': [0.17751479289940847, -1.1895246692412391e-17], 'true': [0.0, 0.16000000000000014], 'true,false': [-2.8047739569477637e-16, 0.13888888888888892], 'true,false,false': [0.13888888888888892, nan], 'false': [-1.1895246692412391e-17, nan]}, {'': [0.13440080177652527, 3.96508223080413e-18], 'true': [2.8047739569477637e-16, 0.12170127539608695], 'true,false': [0.0, 0.13888888888888887], 'true,false,false': [0.13888888888888887, nan], 'false': [3.96508223080413e-18, nan]}, {'': [0.0932409138425178, 9.912705577010326e-18], 'true': [0.0, 0.0857980406185995], 'true,false': [0.0857980406185995, nan], 'false': [9.912705577010326e-18, nan]}, {'': [0.08144989958286726, -3.96508223080413e-18], 'true': [9.349246523159212e-17, 0.11946764763494307], 'true,false': [0.0, 0.13888888888888892], 'true,false,false': [0.13888888888888892, nan], 'false': [-3.96508223080413e-18, nan]}, {'': [0.06151946156335864, 3.96508223080413e-18], 'true': [0.0, 0.059424944423325875], 'true,false': [9.349246523159212e-17, 0.1388888888888889], 'true,false,false': [0.1388888888888889, nan], 'false': [3.96508223080413e-18, nan]}, {'': [0.05080150329859347, 4.956352788505163e-18], 'true': [2.337311630789803e-17, 0.11941736752886344], 'true,false': [0.11941736752886344, nan], 'true,false,true': [nan, 0.11941736752886344], 'false': [4.956352788505163e-18, nan]}, {'': [0.04471654025788884, -9.912705577010326e-19], 'true': [0.0, 0.044221567735061716], 'true,false': [1.1686558153949016e-17, 0.13888888888888884], 'true,false,false': [0.13888888888888884, nan], 'false': [-9.912705577010326e-19, nan]}, {'': [0.041089804792969094, 9.912705577010326e-19], 'true': [-1.1686558153949016e-17, 0.11942757689186997], 'true,false': [0.0, 0.13888888888888892], 'true,false,false': [0.13888888888888892, nan], 'false': [9.912705577010326e-19, nan]}, {'': [0.03877265355789265, 9.912705577010326e-19], 'true': [0.0, 0.03897472925167602], 'true,false': [0.03897472925167602, nan], 'true,false,true': [nan, 0.03897472925167602], 'false': [9.912705577010326e-19, nan]}, {'': [0.03870801957507661, 3.469446951953614e-18], 'true': [0.0, 0.11916499029935658], 'true,false': [0.0, 0.1388888888888889], 'true,false,false': [0.1388888888888889, nan], 'false': [3.469446951953614e-18, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(A, D).;true;true
0;true,false;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;true;genre(B, D).;true;true
1;true,false;genre(A, E).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;true;genre(A, D).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;true;genre(B, D).;true;true
3;true,false;genre(A, E).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;true;genre(A, D).;true;true
4;true,false;genre(B, E).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;true;genre(B, D).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(A, D).;true;true
6;true,false;genre(B, E).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;true;genre(B, D).;true;true
7;true,false;genre(A, E).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;true;genre(A, D).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;true;genre(B, D).;true;true
9;true,false;genre(A, E).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14185106490048777;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995123;  // std dev = 0.000, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | else return 0.024815601766178873;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   else return -0.1418510649004878;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7194734122109542;  // std dev = 7.30e-08, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else return 0.02176788419240575;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   else return -0.12544463852839138;  // std dev = 7.45e-09, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.11231637819360639;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( director(B) )
%   | | then if ( female(A) )
%   | | | then return 0.5883683000276023;  // std dev = 0.280, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.5553664367462846;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | else return -0.1476167937218563;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else return -0.11231637819360636;  // std dev = 1.18e-08, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.41414372834579694;  // std dev = 0.017, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | else if ( genre(A, E) )
%   | | then return -0.10159632948783628;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else return 0.018715157678752193;  // std dev = 0.815, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   else return -0.1015963294878363;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.09269127618926096;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( genre(B, E) )
%   | | then return 0.3184335877119286;  // std dev = 0.015, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | else return 0.016371055512736616;  // std dev = 0.813, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   else return -0.09269127618926096;  // std dev = 7.45e-09, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.25362030137528846;  // std dev = 0.013, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | else if ( actor(A), actor(B) )
%   | | then return -0.1340113743492522;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return 0.17887858689177927;  // std dev = 0.707, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   else return -0.08518475138839686;  // std dev = 8.33e-09, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1001984877885525;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( genre(B, E) )
%   | | then return 0.2086628071820766;  // std dev = 0.012, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | else return 0.014723688289706287;  // std dev = 0.775, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   else return -0.07877675473109172;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.17629426070394025;  // std dev = 0.010, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | else if ( genre(A, E) )
%   | | then return -0.09151964725821624;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else return 0.012867383139536228;  // std dev = 0.774, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   else return -0.07324622576333704;  // std dev = 3.73e-09, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.08418950151919759;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( director(B) )
%   | | then if ( female(A) )
%   | | | then return 0.21257336748272618;  // std dev = 0.534, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.15392487862190887;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | else return -0.12967429727823782;  // std dev = 0.034, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else return -0.06842697784420272;  // std dev = 3.73e-09, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.13057285481215009;  // std dev = 0.022, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | else if ( genre(A, E) )
%   | | then return -0.0779214794721027;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else return 0.015305547098263582;  // std dev = 0.718, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   else return -0.06419184008202619;  // std dev = 6.97e-09, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.078236
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 0.773 seconds
Total inference time: 1.002 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.125642
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.95
   F1        = 0.974359


Total scoring time: 0.366 seconds
Refined model CLL: -0.125642


******************************************
Best model found
******************************************
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.078236
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 2.2190000000000003 seconds
Total inference time: 1.002 seconds
AUC ROC: 1.0
Total revision time: 2.2190000000000003
Best scored revision CLL: -0.125642


Dataset: 4_cora_imdb, Fold: 1, Type: Transfer (trRDN-B), Time: 00:02:09
{'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.078236, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 2.2190000000000003, 'Inference time': 1.002, 'parameter_20': {'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.105032, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 0.705, 'Inference time': 0.933}}


Amount of data: 25
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;title(I, H), venue(I, A).;false;false
0;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
0;false;haswordvenue(A, L), haswordtitle(M, L).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordtitle(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordauthor(I, H).;false;true
2;true,false,false;haswordvenue(A, J), haswordtitle(K, J).;false;false
2;false;haswordvenue(A, L), haswordtitle(M, L).;true;false
2;false,true;haswordauthor(N, L).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;title(E, D), venue(E, B).;false;true
3;true,true,false;title(F, D), venue(F, A).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, A).;false;true
4;true,true,false;title(F, D), venue(F, B).;false;false
4;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
4;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
4;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
4;false,true;haswordauthor(M, K).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, B).;false;true
5;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
5;true,false;haswordvenue(B, H), haswordtitle(I, H).;true;true
5;true,false,true;title(J, I), venue(J, B).;false;false
5;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
5;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;title(E, D), venue(E, A).;false;true
6;true,true,false;title(F, D), venue(F, B).;false;false
6;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
6;true,false,true;title(I, H), venue(I, B).;false;false
6;true,false,false;haswordvenue(A, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;title(F, D), venue(F, A).;false;false
7;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
7;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
7;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
7;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;title(E, D), venue(E, A).;false;true
8;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
8;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
8;true,false,true;title(J, I), venue(J, A).;false;false
8;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
8;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, B).;false;true
9;true,true,false;title(F, D), venue(F, A).;false;false
9;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
9;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
9;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
9;false,true;haswordauthor(M, K).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14185106490048777;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995121;  // std dev = 5.96e-08, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.15814893509951225;  // std dev = 1.449, 10.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=3 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.1418510649004878;  // std dev = 0.000, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7194734122109542;  // std dev = 7.30e-08, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.1377866547829789;  // std dev = 1.449, 10.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=3 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.12544463852839138;  // std dev = 0.000, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.11231637819360639;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( movie(E, A) )
%   | | then return 0.4187456397237531;  // std dev = 1.848, 32.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=25 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.11231637819360635;  // std dev = 3.48e-09, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.45106514784366053;  // std dev = 0.000, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | else if ( genre(A, E) )
%   | | then return -0.10159632948783628;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.04749919101404736;  // std dev = 1.449, 10.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=3 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.10159632948783631;  // std dev = 0.000, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.09269127618926096;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( genre(B, E) )
%   | | then return 0.34356820741608546;  // std dev = 0.000, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.03842907340243816;  // std dev = 1.449, 10.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=3 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.09269127618926094;  // std dev = 2.28e-09, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.2707143391754929;  // std dev = 2.58e-08, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | else if ( movie(E, B) )
%   | | then if ( genre(B, F) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.020382048016671116;  // std dev = 1.453, 11.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=3 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.08518475138839685;  // std dev = 1.18e-08, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.08678657757658775;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( genre(B, E) )
%   | | then return 0.2206786886018124;  // std dev = 0.000, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.02691142842929235;  // std dev = 1.449, 10.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=3 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.07877675473109173;  // std dev = 0.000, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.1850660362084673;  // std dev = 0.000, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | else if ( genre(A, E) )
%   | | then return -0.0801504804998105;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.021536711988036937;  // std dev = 1.449, 10.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=3 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.07324622576333704;  // std dev = 0.000, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.07443661236385207;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( movie(E, A) )
%   | | then if ( genre(A, F) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.11452115438502128;  // std dev = 1.496, 32.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=25 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.06842697784420272;  // std dev = 0.000, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.14405862391498483;  // std dev = 2.24e-08, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | else if ( genre(A, E) )
%   | | then return -0.06946793154367256;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.006605081855440642;  // std dev = 1.449, 10.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=3 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.06419184008202619;  // std dev = 1.86e-09, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.143225
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 0.702 seconds
Total inference time: 0.983 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 0.9832
   AUC PR    = 0.985429
   CLL	      = -0.204586
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.88
   F1        = 0.93617


Total scoring time: 0.382 seconds
Parameter learned model CLL: -0.204586


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 1, 0], 'true,false,true': [5.96e-08, 0, 22], 'true,false,false,true': [1.449, 7, 3], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 17, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [7.3e-08, 0, 22], 'true,false,true': [0.0, 1, 0], 'true,false,false,true': [1.449, 7, 3], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 17, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.0, 1, 0], 'true,false,true': [1.848, 7, 25], 'true,false,false': [0.0, 0, 0], 'false,true': [3.48e-09, 17, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 22], 'true,false,true': [0.0, 1, 0], 'true,false,false,true': [1.449, 7, 3], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 17, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 1, 0], 'true,false,true': [0.0, 0, 22], 'true,false,false,true': [1.449, 7, 3], 'true,false,false,false': [0.0, 0, 0], 'false,true': [2.28e-09, 17, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, B)', 'true,false,true': 'genre(B, F)', 'false': 'movie(G, A)'}, {'true,true': [2.58e-08, 0, 22], 'true,false,true,true': [0.0, 0, 0], 'true,false,true,false': [1.453, 8, 3], 'true,false,false': [0.0, 0, 0], 'false,true': [1.18e-08, 17, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 1, 0], 'true,false,true': [0.0, 0, 22], 'true,false,false,true': [1.449, 7, 3], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 17, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 0, 22], 'true,false,true': [0.0, 1, 0], 'true,false,false,true': [1.449, 7, 3], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 17, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'true,false,true': 'genre(A, F)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 1, 0], 'true,false,true,true': [0.0, 0, 0], 'true,false,true,false': [1.496, 7, 25], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 17, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [2.24e-08, 0, 22], 'true,false,true': [0.0, 1, 0], 'true,false,false,true': [1.449, 7, 3], 'true,false,false,false': [0.0, 0, 0], 'false,true': [1.86e-09, 17, 0], 'false,false': [0.0, 0, 0]}]]
[{'': [0.1836547291092757, -3.2653618371328133e-18], 'true': [0.0, 0.1708984375000011], 'true,false': [1.6148698540002277e-16, 0.20999999999999988], 'true,false,false': [0.20999999999999988, nan], 'false': [-3.2653618371328133e-18, nan]}, {'': [0.147050043012648, 0.0], 'true': [2.4223047810003414e-16, 0.19663559618003112], 'true,false': [0.0, 0.20999999999999996], 'true,false,false': [0.20999999999999996, nan], 'false': [0.0, nan]}, {'': [0.11174283780569509, 1.3061447348531253e-17], 'true': [0.0, 0.10668853279395765], 'true,false': [0.10668853279395765, nan], 'false': [1.3061447348531253e-17, nan]}, {'': [0.10291300666897212, -8.163404592832034e-18], 'true': [-8.074349270001139e-17, 0.19274623753997752], 'true,false': [0.0, 0.21000000000000002], 'true,false,false': [0.21000000000000002, nan], 'false': [-8.163404592832034e-18, nan]}, {'': [0.08644921296511054, 4.89804275569922e-18], 'true': [0.0, 0.08562907816743322], 'true,false': [0.0, 0.21000000000000005], 'true,false,false': [0.21000000000000005, nan], 'false': [4.89804275569922e-18, nan]}, {'': [0.07793367660687907, 8.163404592832034e-18], 'true': [3.027880976250427e-17, 0.19202352582275387], 'true,false': [0.19202352582275387, nan], 'true,false,true': [nan, 0.19202352582275387], 'false': [8.163404592832034e-18, nan]}, {'': [0.07324986702376568, -2.44902137784961e-18], 'true': [0.0, 0.0736914699660628], 'true,false': [0.0, 0.20999999999999996], 'true,false,false': [0.20999999999999996, nan], 'false': [-2.44902137784961e-18, nan]}, {'': [0.0705547137198583, 0.0], 'true': [-1.5139404881252134e-17, 0.19176365992694713], 'true,false': [0.0, 0.21000000000000002], 'true,false,false': [0.21000000000000002, nan], 'false': [0.0, nan]}, {'': [0.06886122060651767, -8.163404592832033e-19], 'true': [0.0, 0.06993116291366161], 'true,false': [0.06993116291366161, nan], 'true,false,true': [nan, 0.06993116291366161], 'false': [-8.163404592832033e-19, nan]}, {'': [0.06917950215631509, 3.2653618371328133e-18], 'true': [2.2709107321878203e-17, 0.19123568081577894], 'true,false': [0.0, 0.21000000000000002], 'true,false,false': [0.21000000000000002, nan], 'false': [3.2653618371328133e-18, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(A, D).;true;true
0;true,false;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;true;genre(B, D).;true;true
1;true,false;genre(A, E).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;true;genre(A, D).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;true;genre(B, D).;true;true
3;true,false;genre(A, E).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;true;genre(A, D).;true;true
4;true,false;genre(B, E).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;true;genre(B, D).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(A, D).;true;true
6;true,false;genre(B, E).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;true;genre(B, D).;true;true
7;true,false;genre(A, E).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;true;genre(A, D).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;true;genre(B, D).;true;true
9;true,false;genre(A, E).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14185106490048777;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995121;  // std dev = 5.96e-08, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | | else if ( female(A) )
%   | | | then return 0.8581489350995121;  // std dev = 2.11e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return -0.1418510649004878;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   else return -0.1418510649004878;  // std dev = 0.000, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7194734122109542;  // std dev = 7.30e-08, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( female(A) )
%   | | | then return 0.7194734122109545;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return -0.12544463852839138;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   else return -0.12544463852839138;  // std dev = 0.000, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.11231637819360639;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( actor(B) )
%   | | then return -0.11231637819360639;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else return 0.5553664367462846;  // std dev = 0.000, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   else return -0.11231637819360635;  // std dev = 1.49e-08, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.4175135841583099;  // std dev = 3.65e-08, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | else if ( genre(A, E) )
%   | | then return -0.10159632948783628;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( female(A) )
%   | | | then return 0.41751358415830997;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return -0.10159632948783627;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   else return -0.10159632948783631;  // std dev = 0.000, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.09269127618926096;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( genre(B, E) )
%   | | then return 0.32071184716014955;  // std dev = 2.11e-08, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | | else if ( female(A) )
%   | | | then return 0.32071184716014967;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return -0.09269127618926097;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   else return -0.09269127618926094;  // std dev = 9.13e-09, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.2551722425694895;  // std dev = 0.000, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | else if ( female(A) )
%   | | then return 0.25517224256948945;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return -0.08518475138839687;  // std dev = 3.73e-09, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   else return -0.08518475138839685;  // std dev = 1.18e-08, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.07877675473109173;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( genre(B, E) )
%   | | then return 0.20975771563253573;  // std dev = 2.11e-08, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | | else if ( female(A) )
%   | | | then return 0.20975771563253554;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return -0.07877675473109173;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   else return -0.07877675473109173;  // std dev = 0.000, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.17709649774527747;  // std dev = 0.000, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | else if ( genre(A, E) )
%   | | then return -0.07324622576333704;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( female(A) )
%   | | | then return 0.17709649774527736;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return -0.07324622576333704;  // std dev = 2.63e-09, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   else return -0.07324622576333704;  // std dev = 0.000, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.06842697784420272;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( director(B) )
%   | | then return 0.1527438580936709;  // std dev = 2.79e-08, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | | else return -0.06842697784420272;  // std dev = 2.63e-09, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   else return -0.06842697784420272;  // std dev = 0.000, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.13400703000801117;  // std dev = 7.45e-09, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | else if ( genre(A, E) )
%   | | then return -0.0641918400820262;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( female(A) )
%   | | | then return 0.13400703000801117;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return -0.0641918400820262;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   else return -0.06419184008202619;  // std dev = 7.45e-09, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.241328
   Precision = 0.111111 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.2


Total learning time: 0.884 seconds
Total inference time: 0.968 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.094637
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 0.368 seconds
Refined model CLL: -0.094637


******************************************
Best model found
******************************************
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.241328
   Precision = 0.111111 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.2


Total learning time: 2.336 seconds
Total inference time: 0.968 seconds
AUC ROC: 1.0
Total revision time: 2.336
Best scored revision CLL: -0.094637


Dataset: 4_cora_imdb, Fold: 1, Type: Transfer (trRDN-B), Time: 00:02:14
{'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.241328, 'Precision': [0.111111, 0.5], 'Recall': 1.0, 'F1': 0.2, 'Learning time': 2.336, 'Inference time': 0.968, 'parameter_25': {'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.143225, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 0.702, 'Inference time': 0.983}}


Starting fold 2

Target train facts examples: 870
Target train pos examples: 324
Target train neg examples: 10813

Target test facts examples: 208
Target test pos	 examples: 58
Target test neg examples: 3423

Amount of data: 5
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;title(I, H), venue(I, A).;false;false
0;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
0;false;haswordvenue(A, L), haswordtitle(M, L).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordtitle(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordauthor(I, H).;false;true
2;true,false,false;haswordvenue(A, J), haswordtitle(K, J).;false;false
2;false;haswordvenue(A, L), haswordtitle(M, L).;true;false
2;false,true;haswordauthor(N, L).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;title(E, D), venue(E, B).;false;true
3;true,true,false;title(F, D), venue(F, A).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, A).;false;true
4;true,true,false;title(F, D), venue(F, B).;false;false
4;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
4;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
4;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
4;false,true;haswordauthor(M, K).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, B).;false;true
5;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
5;true,false;haswordvenue(B, H), haswordtitle(I, H).;true;true
5;true,false,true;title(J, I), venue(J, B).;false;false
5;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
5;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;title(E, D), venue(E, A).;false;true
6;true,true,false;title(F, D), venue(F, B).;false;false
6;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
6;true,false,true;title(I, H), venue(I, B).;false;false
6;true,false,false;haswordvenue(A, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;title(F, D), venue(F, A).;false;false
7;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
7;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
7;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
7;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;title(E, D), venue(E, A).;false;true
8;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
8;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
8;true,false,true;title(J, I), venue(J, A).;false;false
8;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
8;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, B).;false;true
9;true,true,false;title(F, D), venue(F, A).;false;false
9;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
9;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
9;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
9;false,true;haswordauthor(M, K).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995122;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.3581489350995122;  // std dev = 0.707, 2.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.14185106490048777;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7194734122109545;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( genre(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(F, B) )
%   | | | then return 0.308741135785635;  // std dev = 0.707, 2.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.12544463852839138;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A) )
%   | | then return 0.45571508075038514;  // std dev = 0.787, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.11231637819360639;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.4419288842523902;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( genre(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(F, B) )
%   | | | then return 0.16315700675196543;  // std dev = 0.707, 2.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.10159632948783628;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( genre(B, E) )
%   | | then return 0.337318630188875;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.12579939681763522;  // std dev = 0.707, 2.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.09269127618926096;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.2664742781615753;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( movie(E, B) )
%   | | then if ( genre(B, F) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.09590673022074611;  // std dev = 0.707, 2.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.08518475138839687;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( genre(B, E) )
%   | | then return 0.21771040758628668;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.07261582529187274;  // std dev = 0.707, 2.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.07877675473109173;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.18290781664865952;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( genre(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(F, B) )
%   | | | then return 0.05475845972853041;  // std dev = 0.707, 2.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.07324622576333704;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A) )
%   | | then if ( genre(A, F) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.11849070968776138;  // std dev = 0.720, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.06842697784420272;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.14207420056518894;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( genre(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(F, A) )
%   | | | then return 0.011664563136295936;  // std dev = 0.707, 2.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.0641918400820262;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.214197
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 0.623 seconds
Total inference time: 1.024 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 0.98
   AUC PR    = 0.983333
   CLL	      = -0.217295
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.8
   F1        = 0.888889


Total scoring time: 0.325 seconds
Parameter learned model CLL: -0.217295


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 4], 'true,false,false,true': [0.707, 1, 1], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 4, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 4], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.707, 1, 1], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 4, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.787, 1, 5], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 4, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 4], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.707, 1, 1], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 4, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 4], 'true,false,false,true': [0.707, 1, 1], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 4, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, B)', 'true,false,true': 'genre(B, F)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 0, 4], 'true,false,true,true': [0.0, 0, 0], 'true,false,true,false': [0.707, 1, 1], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 4, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 4], 'true,false,false,true': [0.707, 1, 1], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 4, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 0, 4], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.707, 1, 1], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 4, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'true,false,true': 'genre(A, F)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 0, 0], 'true,false,true,true': [0.0, 0, 0], 'true,false,true,false': [0.72, 1, 5], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 4, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 4], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.707, 1, 1], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 4, 0], 'false,false': [0.0, 0, 0]}]]
[{'': [0.1388888888888887, 0.0], 'true': [nan, 0.1388888888888887], 'true,false': [0.0, 0.25], 'true,false,false': [0.25, nan], 'false': [0.0, nan]}, {'': [0.1208224450883389, 0.0], 'true': [0.0, 0.25000000000000006], 'true,false': [nan, 0.25000000000000006], 'true,false,false': [0.25000000000000006, nan], 'false': [0.0, nan]}, {'': [0.10319411883697631, 0.0], 'true': [nan, 0.10319411883697631], 'true,false': [0.10319411883697631, nan], 'false': [0.0, nan]}, {'': [0.10060305770780263, 0.0], 'true': [0.0, 0.25], 'true,false': [nan, 0.25], 'true,false,false': [0.25, nan], 'false': [0.0, nan]}, {'': [0.09327564135243487, 0.0], 'true': [nan, 0.09327564135243487], 'true,false': [0.0, 0.24999999999999997], 'true,false,false': [0.24999999999999997, nan], 'false': [0.0, nan]}, {'': [0.08979850853567717, 0.0], 'true': [0.0, 0.25], 'true,false': [0.25, nan], 'true,false,true': [nan, 0.25], 'false': [0.0, nan]}, {'': [0.0880116528469312, 0.0], 'true': [nan, 0.0880116528469312], 'true,false': [0.0, 0.24999999999999997], 'true,false,false': [0.24999999999999997, nan], 'false': [0.0, nan]}, {'': [0.08698272392867616, 0.0], 'true': [0.0, 0.25000000000000006], 'true,false': [nan, 0.25000000000000006], 'true,false,false': [0.25000000000000006, nan], 'false': [0.0, nan]}, {'': [0.08632058806362558, 0.0], 'true': [nan, 0.08632058806362558], 'true,false': [0.08632058806362558, nan], 'true,false,true': [nan, 0.08632058806362558], 'false': [0.0, nan]}, {'': [0.08711259411874117, 0.0], 'true': [0.0, 0.25], 'true,false': [nan, 0.25], 'true,false,false': [0.25, nan], 'false': [0.0, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;true;genre(B, D).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;true;genre(B, D).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;true;genre(B, E).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;true;genre(B, D).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(B, E).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;true;genre(B, D).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;true;genre(B, D).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.8581489350995122;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else return 0.3581489350995122;  // std dev = 0.707, 2.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */
%   else return -0.14185106490048777;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7194734122109545;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else return 0.308741135785635;  // std dev = 0.707, 2.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */
%   else return -0.12544463852839138;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.45571508075038514;  // std dev = 0.787, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   else return -0.11231637819360639;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.4419288842523902;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else return 0.16315700675196543;  // std dev = 0.707, 2.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */
%   else return -0.10159632948783628;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.337318630188875;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else return 0.12579939681763522;  // std dev = 0.707, 2.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */
%   else return -0.09269127618926096;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.2664742781615753;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else return 0.09590673022074611;  // std dev = 0.707, 2.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */
%   else return -0.08518475138839687;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.21771040758628668;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else return 0.07261582529187274;  // std dev = 0.707, 2.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */
%   else return -0.07877675473109173;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.18290781664865952;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else return 0.05475845972853041;  // std dev = 0.707, 2.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */
%   else return -0.07324622576333704;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.11849070968776138;  // std dev = 0.720, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   else return -0.06842697784420272;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.14207420056518894;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else return 0.011664563136295936;  // std dev = 0.707, 2.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */
%   else return -0.0641918400820262;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */


Results
   AUC ROC   = 0.999416
   AUC PR    = 0.935484
   CLL	      = -0.224286
   Precision = 0.935484 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.966667


Total learning time: 0.518 seconds
Total inference time: 0.883 seconds
AUC ROC: 0.999416


Results scoring model
   AUC ROC   = 0.98
   AUC PR    = 0.983333
   CLL	      = -0.217295
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.8
   F1        = 0.888889


Total scoring time: 0.32 seconds
Refined model CLL: -0.217295


******************************************
Best model found
******************************************
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.214197
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 1.786 seconds
Total inference time: 1.024 seconds
AUC ROC: 1.0
Total revision time: 1.786
Best scored revision CLL: -0.217295


Dataset: 4_cora_imdb, Fold: 2, Type: Transfer (trRDN-B), Time: 00:02:18
{'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.214197, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 1.786, 'Inference time': 1.024, 'parameter_5': {'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.214197, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 0.623, 'Inference time': 1.024}}


Amount of data: 10
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;title(I, H), venue(I, A).;false;false
0;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
0;false;haswordvenue(A, L), haswordtitle(M, L).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordtitle(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordauthor(I, H).;false;true
2;true,false,false;haswordvenue(A, J), haswordtitle(K, J).;false;false
2;false;haswordvenue(A, L), haswordtitle(M, L).;true;false
2;false,true;haswordauthor(N, L).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;title(E, D), venue(E, B).;false;true
3;true,true,false;title(F, D), venue(F, A).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, A).;false;true
4;true,true,false;title(F, D), venue(F, B).;false;false
4;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
4;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
4;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
4;false,true;haswordauthor(M, K).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, B).;false;true
5;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
5;true,false;haswordvenue(B, H), haswordtitle(I, H).;true;true
5;true,false,true;title(J, I), venue(J, B).;false;false
5;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
5;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;title(E, D), venue(E, A).;false;true
6;true,true,false;title(F, D), venue(F, B).;false;false
6;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
6;true,false,true;title(I, H), venue(I, B).;false;false
6;true,false,false;haswordvenue(A, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;title(F, D), venue(F, A).;false;false
7;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
7;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
7;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
7;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;title(E, D), venue(E, A).;false;true
8;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
8;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
8;true,false,true;title(J, I), venue(J, A).;false;false
8;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
8;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, B).;false;true
9;true,true,false;title(F, D), venue(F, A).;false;false
9;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
9;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
9;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
9;false,true;haswordauthor(M, K).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995123;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.5248156017661788;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.1418510649004878;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7194734122109543;  // std dev = 2.98e-08, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( genre(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(F, B) )
%   | | | then return 0.448295606241962;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.12544463852839138;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A) )
%   | | then return 0.5027292302671041;  // std dev = 0.865, 11.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=10 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.11231637819360639;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.43036758424200905;  // std dev = 2.58e-08, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( genre(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(F, B) )
%   | | | then return 0.2470043000521082;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.10159632948783627;  // std dev = 1.32e-09, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( genre(B, E) )
%   | | then return 0.3294399511962147;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.1859459190232067;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.09269127618926097;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.2611192941188012;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( movie(E, B) )
%   | | then if ( genre(B, F) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.13949579523816905;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.08518475138839687;  // std dev = 3.73e-09, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( genre(B, E) )
%   | | then return 0.21394994175079235;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.1049119730383085;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.07877675473109173;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.1801652442961057;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( genre(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(F, B) )
%   | | | then return 0.07927369334280236;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.07324622576333704;  // std dev = 1.32e-09, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A) )
%   | | then if ( genre(A, F) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.12919557019309688;  // std dev = 0.828, 11.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=10 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.06842697784420272;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.13888412039647413;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( genre(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(F, A) )
%   | | | then return 0.029828343170511456;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.0641918400820262;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.300308
   Precision = 0.064516 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.121212


Total learning time: 0.693 seconds
Total inference time: 0.955 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 0.99
   AUC PR    = 0.990191
   CLL	      = -0.176248
   Precision = 0.909091 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.952381


Total scoring time: 0.336 seconds
Parameter learned model CLL: -0.176248


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 8], 'true,false,false,true': [0.816, 1, 2], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 9, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [2.98e-08, 0, 8], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.816, 1, 2], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 9, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.865, 1, 10], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 9, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [2.58e-08, 0, 8], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.816, 1, 2], 'true,false,false,false': [0.0, 0, 0], 'false,true': [1.32e-09, 9, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 8], 'true,false,false,true': [0.816, 1, 2], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 9, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, B)', 'true,false,true': 'genre(B, F)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 0, 8], 'true,false,true,true': [0.0, 0, 0], 'true,false,true,false': [0.816, 1, 2], 'true,false,false': [0.0, 0, 0], 'false,true': [3.73e-09, 9, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 8], 'true,false,false,true': [0.816, 1, 2], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 9, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 0, 8], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.816, 1, 2], 'true,false,false,false': [0.0, 0, 0], 'false,true': [1.32e-09, 9, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'true,false,true': 'genre(A, F)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 0, 0], 'true,false,true,true': [0.0, 0, 0], 'true,false,true,false': [0.828, 1, 10], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 9, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 8], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.816, 1, 2], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 9, 0], 'false,false': [0.0, 0, 0]}]]
[{'': [0.0826446280991734, -9.25185853854297e-18], 'true': [nan, 0.0826446280991734], 'true,false': [-2.220446049250313e-16, 0.22222222222222224], 'true,false,false': [0.22222222222222224, nan], 'false': [-9.25185853854297e-18, nan]}, {'': [0.07519199167055447, 0.0], 'true': [1.1102230246251565e-16, 0.2222222222222222], 'true,false': [nan, 0.2222222222222222], 'true,false,false': [0.2222222222222222, nan], 'false': [0.0, nan]}, {'': [0.06799452862187887, -1.5419764230904951e-18], 'true': [nan, 0.06799452862187887], 'true,false': [0.06799452862187887, nan], 'false': [-1.5419764230904951e-18, nan]}, {'': [0.06727490569476934, 3.0839528461809902e-18], 'true': [8.326672684688674e-17, 0.22222222222222224], 'true,false': [nan, 0.22222222222222224], 'true,false,false': [0.22222222222222224, nan], 'false': [3.0839528461809902e-18, nan]}, {'': [0.06469013411401454, 0.0], 'true': [nan, 0.06469013411401454], 'true,false': [0.0, 0.2222222222222222], 'true,false,false': [0.2222222222222222, nan], 'false': [0.0, nan]}, {'': [0.0635400656599384, 1.5419764230904951e-18], 'true': [0.0, 0.22222222222222224], 'true,false': [0.22222222222222224, nan], 'true,false,true': [nan, 0.22222222222222224], 'false': [1.5419764230904951e-18, nan]}, {'': [0.06296426463004959, 0.0], 'true': [nan, 0.06296426463004959], 'true,false': [-2.7755575615628914e-17, 0.22222222222222224], 'true,false,false': [0.22222222222222224, nan], 'false': [0.0, nan]}, {'': [0.06262505664978217, 7.709882115452476e-19], 'true': [0.0, 0.2222222222222222], 'true,false': [nan, 0.2222222222222222], 'true,false,false': [0.2222222222222222, nan], 'false': [7.709882115452476e-19, nan]}, {'': [0.062391059733293994, 0.0], 'true': [nan, 0.062391059733293994], 'true,false': [0.062391059733293994, nan], 'true,false,true': [nan, 0.062391059733293994], 'false': [0.0, nan]}, {'': [0.06296503499542103, 7.709882115452476e-19], 'true': [0.0, 0.2222222222222222], 'true,false': [nan, 0.2222222222222222], 'true,false,false': [0.2222222222222222, nan], 'false': [7.709882115452476e-19, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;true;genre(B, D).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;true;genre(B, D).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;true;genre(B, E).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;true;genre(B, D).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(B, E).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;true;genre(B, D).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;true;genre(B, D).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.8581489350995123;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else return 0.5248156017661788;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   else return -0.1418510649004878;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7194734122109543;  // std dev = 2.98e-08, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else return 0.448295606241962;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   else return -0.12544463852839138;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( female(A) )
%   | then return 0.5834324853282189;  // std dev = 0.126, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return 0.43547651771617507;  // std dev = 0.820, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   else return -0.11231637819360639;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.42881511126626926;  // std dev = 0.051, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else return 0.25127016123472634;  // std dev = 0.802, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   else return -0.10159632948783627;  // std dev = 5.27e-09, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.32850530317343796;  // std dev = 0.046, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else return 0.18933438191312635;  // std dev = 0.802, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   else return -0.09269127618926097;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.2605548608477455;  // std dev = 0.040, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else return 0.14209359520162712;  // std dev = 0.802, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   else return -0.08518475138839687;  // std dev = 3.73e-09, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.21359592897219754;  // std dev = 0.035, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else return 0.10688043175025182;  // std dev = 0.802, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   else return -0.07877675473109173;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.17993372129492058;  // std dev = 0.031, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else return 0.0807649147349609;  // std dev = 0.802, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   else return -0.07324622576333704;  // std dev = 2.63e-09, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( female(A) )
%   | then return 0.19043799979253662;  // std dev = 0.202, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return 0.07851801972863466;  // std dev = 0.767, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   else return -0.06842697784420272;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.13861239847790519;  // std dev = 0.044, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else return 0.03438816389788487;  // std dev = 0.793, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   else return -0.0641918400820262;  // std dev = 2.63e-09, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */


Results
   AUC ROC   = 0.999617
   AUC PR    = 0.971227
   CLL	      = -0.313976
   Precision = 0.060354 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.113837


Total learning time: 0.619 seconds
Total inference time: 0.937 seconds
AUC ROC: 0.999617


Results scoring model
   AUC ROC   = 0.995
   AUC PR    = 0.995455
   CLL	      = -0.172186
   Precision = 0.909091 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.952381


Total scoring time: 0.325 seconds
Refined model CLL: -0.172186


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.999617
   AUC PR    = 0.971227
   CLL	      = -0.313976
   Precision = 0.060354 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.113837


Total learning time: 1.9729999999999999 seconds
Total inference time: 0.937 seconds
AUC ROC: 0.999617
Total revision time: 1.9729999999999999
Best scored revision CLL: -0.172186


Dataset: 4_cora_imdb, Fold: 2, Type: Transfer (trRDN-B), Time: 00:02:23
{'AUC ROC': 0.999617, 'AUC PR': 0.971227, 'CLL': -0.313976, 'Precision': [0.060354, 0.5], 'Recall': 1.0, 'F1': 0.113837, 'Learning time': 1.9729999999999999, 'Inference time': 0.937, 'parameter_10': {'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.300308, 'Precision': [0.064516, 0.5], 'Recall': 1.0, 'F1': 0.121212, 'Learning time': 0.693, 'Inference time': 0.955}}


Amount of data: 15
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;title(I, H), venue(I, A).;false;false
0;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
0;false;haswordvenue(A, L), haswordtitle(M, L).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordtitle(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordauthor(I, H).;false;true
2;true,false,false;haswordvenue(A, J), haswordtitle(K, J).;false;false
2;false;haswordvenue(A, L), haswordtitle(M, L).;true;false
2;false,true;haswordauthor(N, L).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;title(E, D), venue(E, B).;false;true
3;true,true,false;title(F, D), venue(F, A).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, A).;false;true
4;true,true,false;title(F, D), venue(F, B).;false;false
4;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
4;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
4;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
4;false,true;haswordauthor(M, K).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, B).;false;true
5;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
5;true,false;haswordvenue(B, H), haswordtitle(I, H).;true;true
5;true,false,true;title(J, I), venue(J, B).;false;false
5;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
5;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;title(E, D), venue(E, A).;false;true
6;true,true,false;title(F, D), venue(F, B).;false;false
6;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
6;true,false,true;title(I, H), venue(I, B).;false;false
6;true,false,false;haswordvenue(A, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;title(F, D), venue(F, A).;false;false
7;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
7;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
7;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
7;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;title(E, D), venue(E, A).;false;true
8;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
8;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
8;true,false,true;title(J, I), venue(J, A).;false;false
8;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
8;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, B).;false;true
9;true,true,false;title(F, D), venue(F, A).;false;false
9;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
9;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
9;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
9;false,true;haswordauthor(M, K).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995123;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.1438632208137979;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=2 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.1418510649004878;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7194734122109542;  // std dev = 4.21e-08, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else if ( genre(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(F, B) )
%   | | | then return 0.12543301544918353;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=2 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.12544463852839138;  // std dev = 5.27e-09, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A) )
%   | | then return 0.3987264248548062;  // std dev = 1.530, 20.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=15 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.11231637819360638;  // std dev = 1.86e-09, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.45602670798078654;  // std dev = 3.65e-08, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else if ( genre(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(F, B) )
%   | | | then return 0.041917911068857054;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=2 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.10159632948783628;  // std dev = 1.32e-09, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( genre(B, E) )
%   | | then return 0.3469721001908015;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.03410719780091265;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=2 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.09269127618926097;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.27302125716015097;  // std dev = 1.49e-08, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else if ( movie(E, B) )
%   | | then if ( genre(B, F) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.027630537338942416;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=2 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.08518475138839687;  // std dev = 3.73e-09, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( genre(B, E) )
%   | | then return 0.22229035108726855;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.02230467731598954;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=2 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.07877675473109172;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.18623547296923418;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else if ( genre(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(F, B) )
%   | | | then return 0.01795423536177232;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=2 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.07324622576333704;  // std dev = 9.31e-10, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A) )
%   | | then if ( genre(A, F) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.10881404866489888;  // std dev = 1.235, 20.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=15 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.06842697784420272;  // std dev = 2.63e-09, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.14557855740445552;  // std dev = 1.05e-08, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else if ( genre(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(F, A) )
%   | | | then return -0.00761919870426483;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=2 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.06419184008202619;  // std dev = 1.61e-09, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.134167
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 0.678 seconds
Total inference time: 0.966 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 0.977778
   AUC PR    = 0.981566
   CLL	      = -0.219944
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.866667
   F1        = 0.928571


Total scoring time: 0.37 seconds
Parameter learned model CLL: -0.219944


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 13], 'true,false,false,true': [1.195, 5, 2], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 10, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [4.21e-08, 0, 13], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [1.195, 5, 2], 'true,false,false,false': [0.0, 0, 0], 'false,true': [5.27e-09, 10, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [1.53, 5, 15], 'true,false,false': [0.0, 0, 0], 'false,true': [1.86e-09, 10, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [3.65e-08, 0, 13], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [1.195, 5, 2], 'true,false,false,false': [0.0, 0, 0], 'false,true': [1.32e-09, 10, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 13], 'true,false,false,true': [1.195, 5, 2], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 10, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, B)', 'true,false,true': 'genre(B, F)', 'false': 'movie(G, A)'}, {'true,true': [1.49e-08, 0, 13], 'true,false,true,true': [0.0, 0, 0], 'true,false,true,false': [1.195, 5, 2], 'true,false,false': [0.0, 0, 0], 'false,true': [3.73e-09, 10, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 13], 'true,false,false,true': [1.195, 5, 2], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 10, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 0, 13], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [1.195, 5, 2], 'true,false,false,false': [0.0, 0, 0], 'false,true': [9.31e-10, 10, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'true,false,true': 'genre(A, F)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 0, 0], 'true,false,true,true': [0.0, 0, 0], 'true,false,true,false': [1.235, 5, 15], 'true,false,false': [0.0, 0, 0], 'false,true': [2.63e-09, 10, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [1.05e-08, 0, 13], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [1.195, 5, 2], 'true,false,false,false': [0.0, 0, 0], 'false,true': [1.61e-09, 10, 0], 'false,false': [0.0, 0, 0]}]]
[{'': [0.18749999999999964, -1.1102230246251566e-17], 'true': [nan, 0.18749999999999964], 'true,false': [-2.7328566760003855e-16, 0.20408163265306126], 'true,false,false': [0.20408163265306126, nan], 'false': [-1.1102230246251566e-17, nan]}, {'': [0.1517096798326322, 2.7755575615628915e-18], 'true': [1.3664283380001927e-16, 0.20408163265306117], 'true,false': [nan, 0.20408163265306117], 'true,false,false': [0.20408163265306117, nan], 'false': [2.7755575615628915e-18, nan]}, {'': [0.1169956018899588, 0.0], 'true': [nan, 0.1169956018899588], 'true,false': [0.1169956018899588, nan], 'false': [0.0, nan]}, {'': [0.11044165819573645, 1.3877787807814458e-18], 'true': [1.0248212535001446e-16, 0.20408163265306117], 'true,false': [nan, 0.20408163265306117], 'true,false,false': [0.20408163265306117, nan], 'false': [1.3877787807814458e-18, nan]}, {'': [0.09369728315461283, 0.0], 'true': [nan, 0.09369728315461283], 'true,false': [0.0, 0.20408163265306117], 'true,false,false': [0.20408163265306117, nan], 'false': [0.0, nan]}, {'': [0.08512784915124078, 1.3877787807814458e-18], 'true': [1.708035422500241e-17, 0.20408163265306126], 'true,false': [0.20408163265306126, nan], 'true,false,true': [nan, 0.20408163265306126], 'false': [1.3877787807814458e-18, nan]}, {'': [0.08052726778845003, 0.0], 'true': [nan, 0.08052726778845003], 'true,false': [-3.416070845000482e-17, 0.20408163265306117], 'true,false,false': [0.20408163265306117, nan], 'false': [0.0, nan]}, {'': [0.07787104722530544, 6.938893903907229e-19], 'true': [0.0, 0.20408163265306126], 'true,false': [nan, 0.20408163265306126], 'true,false,false': [0.20408163265306126, nan], 'false': [6.938893903907229e-19, nan]}, {'': [0.07622645192534513, 6.938893903907229e-19], 'true': [nan, 0.07622645192534513], 'true,false': [0.07622645192534513, nan], 'true,false,true': [nan, 0.07622645192534513], 'false': [6.938893903907229e-19, nan]}, {'': [0.07676789461703142, 1.3877787807814458e-18], 'true': [8.540177112501205e-18, 0.20408163265306128], 'true,false': [nan, 0.20408163265306128], 'true,false,false': [0.20408163265306128, nan], 'false': [1.3877787807814458e-18, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;true;genre(B, D).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;true;genre(B, D).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;true;genre(B, E).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;true;genre(B, D).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(B, E).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;true;genre(B, D).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;true;genre(B, D).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.8581489350995123;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else if ( female(A) )
%   | | then return 0.19148226843284552;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | else return 0.10814893509951219;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   else return -0.1418510649004878;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7194734122109542;  // std dev = 4.21e-08, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else if ( female(A) )
%   | | then return 0.16653882456488175;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | else return 0.09446743783575562;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   else return -0.12544463852839138;  // std dev = 5.27e-09, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B) )
%   | then if ( female(A) )
%   | | then return 0.5870407458382779;  // std dev = 0.084, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return 0.5948358590980813;  // std dev = 0.097, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else return -0.17750420028179037;  // std dev = 0.025, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else return -0.11231637819360638;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.40896166369989906;  // std dev = 0.003, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else if ( female(A) )
%   | | then return 0.12368322356888428;  // std dev = 0.708, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | else return 0.07418815200544213;  // std dev = 0.759, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   else return -0.10159632948783628;  // std dev = 3.73e-09, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.3149194121754975;  // std dev = 0.003, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else if ( female(A) )
%   | | then return 0.10299167184969164;  // std dev = 0.701, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | else return 0.06340516299993379;  // std dev = 0.754, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   else return -0.09269127618926097;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.25121586344869623;  // std dev = 0.003, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else if ( female(A) )
%   | | then return 0.08472530609692926;  // std dev = 0.695, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | else return 0.05379853403737406;  // std dev = 0.750, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   else return -0.08518475138839687;  // std dev = 3.73e-09, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.20695914194194517;  // std dev = 0.002, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else if ( female(A) )
%   | | then return 0.0690064708241704;  // std dev = 0.690, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | else return 0.04536324028847877;  // std dev = 0.747, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   else return -0.07877675473109172;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.17504120850966773;  // std dev = 0.002, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else if ( female(A) )
%   | | then return 0.05575405455817032;  // std dev = 0.687, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | else return 0.03804735315559301;  // std dev = 0.744, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   else return -0.07324622576333704;  // std dev = 2.63e-09, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.20322981331323936;  // std dev = 0.057, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else if ( female(A) )
%   | | then return 0.20808781784183378;  // std dev = 0.149, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return 0.22545385397564274;  // std dev = 0.183, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   else return -0.06842697784420272;  // std dev = 2.63e-09, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.12549389823235166;  // std dev = 0.005, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else if ( female(A) )
%   | | then return 0.05085364023168256;  // std dev = 0.614, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | else return 0.04022483832593222;  // std dev = 0.673, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   else return -0.06419184008202619;  // std dev = 3.73e-09, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */


Results
   AUC ROC   = 0.999214
   AUC PR    = 0.910741
   CLL	      = -0.099437
   Precision = 0.935484 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.966667


Total learning time: 0.792 seconds
Total inference time: 0.915 seconds
AUC ROC: 0.999214


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.162914
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.866667
   F1        = 0.928571


Total scoring time: 0.357 seconds
Refined model CLL: -0.162914


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.999214
   AUC PR    = 0.910741
   CLL	      = -0.099437
   Precision = 0.935484 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.966667


Total learning time: 2.197 seconds
Total inference time: 0.915 seconds
AUC ROC: 0.999214
Total revision time: 2.197
Best scored revision CLL: -0.162914


Dataset: 4_cora_imdb, Fold: 2, Type: Transfer (trRDN-B), Time: 00:02:27
{'AUC ROC': 0.999214, 'AUC PR': 0.910741, 'CLL': -0.099437, 'Precision': [0.935484, 0.5], 'Recall': 1.0, 'F1': 0.966667, 'Learning time': 2.197, 'Inference time': 0.915, 'parameter_15': {'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.134167, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 0.678, 'Inference time': 0.966}}


Amount of data: 20
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;title(I, H), venue(I, A).;false;false
0;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
0;false;haswordvenue(A, L), haswordtitle(M, L).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordtitle(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordauthor(I, H).;false;true
2;true,false,false;haswordvenue(A, J), haswordtitle(K, J).;false;false
2;false;haswordvenue(A, L), haswordtitle(M, L).;true;false
2;false,true;haswordauthor(N, L).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;title(E, D), venue(E, B).;false;true
3;true,true,false;title(F, D), venue(F, A).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, A).;false;true
4;true,true,false;title(F, D), venue(F, B).;false;false
4;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
4;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
4;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
4;false,true;haswordauthor(M, K).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, B).;false;true
5;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
5;true,false;haswordvenue(B, H), haswordtitle(I, H).;true;true
5;true,false,true;title(J, I), venue(J, B).;false;false
5;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
5;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;title(E, D), venue(E, A).;false;true
6;true,true,false;title(F, D), venue(F, B).;false;false
6;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
6;true,false,true;title(I, H), venue(I, B).;false;false
6;true,false,false;haswordvenue(A, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;title(F, D), venue(F, A).;false;false
7;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
7;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
7;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
7;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;title(E, D), venue(E, A).;false;true
8;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
8;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
8;true,false,true;title(J, I), venue(J, A).;false;false
8;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
8;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, B).;false;true
9;true,true,false;title(F, D), venue(F, A).;false;false
9;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
9;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
9;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
9;false,true;haswordauthor(M, K).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995123;  // std dev = 0.000, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.19148226843284558;  // std dev = 1.414, 9.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=3 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.1418510649004878;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7194734122109542;  // std dev = 7.30e-08, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | else if ( genre(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(F, B) )
%   | | | then return 0.16653882456488167;  // std dev = 1.414, 9.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=3 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.12544463852839138;  // std dev = 7.45e-09, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A) )
%   | | then return 0.41231067730872767;  // std dev = 1.734, 26.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=20 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.11231637819360636;  // std dev = 2.95e-09, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.45265897554610474;  // std dev = 0.000, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | else if ( genre(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(F, B) )
%   | | | then return 0.07018490351716943;  // std dev = 1.414, 9.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=3 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.1015963294878363;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( genre(B, E) )
%   | | then return 0.34466084947496195;  // std dev = 3.65e-08, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.056351679825874;  // std dev = 1.414, 9.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=3 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.09269127618926096;  // std dev = 1.32e-09, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.2714550326451986;  // std dev = 1.49e-08, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | else if ( movie(E, B) )
%   | | then if ( genre(B, F) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.04492596485692033;  // std dev = 1.414, 9.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=3 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.08518475138839686;  // std dev = 8.33e-09, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( genre(B, E) )
%   | | then return 0.22119640328114445;  // std dev = 2.58e-08, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.0356189668472575;  // std dev = 1.414, 9.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=3 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.07877675473109172;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.18544187682790764;  // std dev = 2.58e-08, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | else if ( genre(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(F, B) )
%   | | | then return 0.02811848511674602;  // std dev = 1.414, 9.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=3 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.07324622576333704;  // std dev = 9.31e-10, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A) )
%   | | then if ( genre(A, F) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.11164943809800604;  // std dev = 1.453, 26.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=20 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.06842697784420272;  // std dev = 3.73e-09, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.14467451315622876;  // std dev = 0.000, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | else if ( genre(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(F, A) )
%   | | | then return -0.002299134872252356;  // std dev = 1.414, 9.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=3 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.06419184008202619;  // std dev = 1.86e-09, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.149456
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 0.667 seconds
Total inference time: 1.018 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 0.9775
   AUC PR    = 0.980535
   CLL	      = -0.223091
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.85
   F1        = 0.918919


Total scoring time: 0.379 seconds
Parameter learned model CLL: -0.223091


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 17], 'true,false,false,true': [1.414, 6, 3], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 14, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [7.3e-08, 0, 17], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [1.414, 6, 3], 'true,false,false,false': [0.0, 0, 0], 'false,true': [7.45e-09, 14, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [1.734, 6, 20], 'true,false,false': [0.0, 0, 0], 'false,true': [2.95e-09, 14, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 17], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [1.414, 6, 3], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 14, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [3.65e-08, 0, 17], 'true,false,false,true': [1.414, 6, 3], 'true,false,false,false': [0.0, 0, 0], 'false,true': [1.32e-09, 14, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, B)', 'true,false,true': 'genre(B, F)', 'false': 'movie(G, A)'}, {'true,true': [1.49e-08, 0, 17], 'true,false,true,true': [0.0, 0, 0], 'true,false,true,false': [1.414, 6, 3], 'true,false,false': [0.0, 0, 0], 'false,true': [8.33e-09, 14, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [2.58e-08, 0, 17], 'true,false,false,true': [1.414, 6, 3], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 14, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, A)'}, {'true,true': [2.58e-08, 0, 17], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [1.414, 6, 3], 'true,false,false,false': [0.0, 0, 0], 'false,true': [9.31e-10, 14, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'true,false,true': 'genre(A, F)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 0, 0], 'true,false,true,true': [0.0, 0, 0], 'true,false,true,false': [1.453, 6, 20], 'true,false,false': [0.0, 0, 0], 'false,true': [3.73e-09, 14, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 17], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [1.414, 6, 3], 'true,false,false,false': [0.0, 0, 0], 'false,true': [1.86e-09, 14, 0], 'false,false': [0.0, 0, 0]}]]
[{'': [0.17751479289940847, -1.1895246692412391e-17], 'true': [nan, 0.17751479289940847], 'true,false': [-2.0898315757650005e-16, 0.2222222222222221], 'true,false,false': [0.2222222222222221, nan], 'false': [-1.1895246692412391e-17, nan]}, {'': [0.14612087086826292, 3.96508223080413e-18], 'true': [3.134747363647501e-16, 0.22222222222222238], 'true,false': [nan, 0.22222222222222238], 'true,false,false': [0.22222222222222238, nan], 'false': [3.96508223080413e-18, nan]}, {'': [0.11557909417200508, 9.912705577010326e-18], 'true': [nan, 0.11557909417200508], 'true,false': [0.11557909417200508, nan], 'false': [9.912705577010326e-18, nan]}, {'': [0.11003228049331724, -3.96508223080413e-18], 'true': [-2.0898315757650005e-16, 0.22222222222222218], 'true,false': [nan, 0.22222222222222218], 'true,false,false': [0.22222222222222218, nan], 'false': [-3.96508223080413e-18, nan]}, {'': [0.09573623243709058, 3.96508223080413e-18], 'true': [nan, 0.09573623243709058], 'true,false': [7.836868409118753e-17, 0.2222222222222222], 'true,false,false': [0.2222222222222222, nan], 'false': [3.96508223080413e-18, nan]}, {'': [0.08853736544173532, 4.956352788505163e-18], 'true': [1.3061447348531253e-17, 0.2222222222222222], 'true,false': [0.2222222222222222, nan], 'true,false,true': [nan, 0.2222222222222222], 'false': [4.956352788505163e-18, nan]}, {'': [0.08471769924814519, -9.912705577010326e-19], 'true': [nan, 0.08471769924814519], 'true,false': [3.918434204559376e-17, 0.2222222222222222], 'true,false,false': [0.2222222222222222, nan], 'false': [-9.912705577010326e-19, nan]}, {'': [0.08252492512672194, 9.912705577010326e-19], 'true': [3.918434204559376e-17, 0.2222222222222222], 'true,false': [nan, 0.2222222222222222], 'true,false,false': [0.2222222222222222, nan], 'false': [9.912705577010326e-19, nan]}, {'': [0.08116627737214879, 9.912705577010326e-19], 'true': [nan, 0.08116627737214879], 'true,false': [0.08116627737214879, nan], 'true,false,true': [nan, 0.08116627737214879], 'false': [9.912705577010326e-19, nan]}, {'': [0.0818121179613378, 3.469446951953614e-18], 'true': [-9.79608551139844e-18, 0.22222222222222227], 'true,false': [nan, 0.22222222222222227], 'true,false,false': [0.22222222222222227, nan], 'false': [3.469446951953614e-18, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;true;genre(B, D).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;true;genre(B, D).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;true;genre(B, E).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;true;genre(B, D).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(B, E).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;true;genre(B, D).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;true;genre(B, D).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.8581489350995123;  // std dev = 0.000, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | else if ( actor(B) )
%   | | then return -0.1418510649004878;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else return 0.8581489350995121;  // std dev = 2.11e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return -0.1418510649004878;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7194734122109542;  // std dev = 7.30e-08, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | else if ( actor(B) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else return 0.7194734122109545;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return -0.12544463852839138;  // std dev = 7.45e-09, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B) )
%   | then return 0.5553664367462846;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | else return -0.11231637819360639;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   else return -0.11231637819360636;  // std dev = 1.18e-08, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.4175135841583098;  // std dev = 5.16e-08, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | else if ( actor(B) )
%   | | then return -0.10159632948783627;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else return 0.41751358415830997;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return -0.1015963294878363;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.32071184716014967;  // std dev = 1.49e-08, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | else if ( actor(B) )
%   | | then return -0.09269127618926097;  // std dev = 2.63e-09, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else return 0.32071184716014967;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return -0.09269127618926096;  // std dev = 7.45e-09, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.2551722425694894;  // std dev = 2.11e-08, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | else if ( actor(B) )
%   | | then return -0.08518475138839687;  // std dev = 2.63e-09, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else return 0.25517224256948945;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return -0.08518475138839686;  // std dev = 8.33e-09, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.20975771563253562;  // std dev = 0.000, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | else if ( actor(B) )
%   | | then return -0.07877675473109173;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else return 0.20975771563253554;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return -0.07877675473109172;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.17709649774527741;  // std dev = 0.000, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | else if ( actor(B) )
%   | | then return -0.07324622576333704;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else return 0.17709649774527736;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return -0.07324622576333704;  // std dev = 3.73e-09, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B) )
%   | then return 0.15274385809367083;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | else return -0.06842697784420272;  // std dev = 1.86e-09, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   else return -0.06842697784420272;  // std dev = 3.73e-09, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.13400703000801117;  // std dev = 0.000, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | else if ( actor(B) )
%   | | then return -0.0641918400820262;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else return 0.13400703000801117;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return -0.06419184008202619;  // std dev = 6.97e-09, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */


Results
   AUC ROC   = 0.999416
   AUC PR    = 0.935484
   CLL	      = -0.065794
   Precision = 0.935484 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.966667


Total learning time: 0.841 seconds
Total inference time: 0.917 seconds
AUC ROC: 0.999416


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.094637
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 0.354 seconds
Refined model CLL: -0.094637


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.999416
   AUC PR    = 0.935484
   CLL	      = -0.065794
   Precision = 0.935484 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.966667


Total learning time: 2.241 seconds
Total inference time: 0.917 seconds
AUC ROC: 0.999416
Total revision time: 2.241
Best scored revision CLL: -0.094637


Dataset: 4_cora_imdb, Fold: 2, Type: Transfer (trRDN-B), Time: 00:02:32
{'AUC ROC': 0.999416, 'AUC PR': 0.935484, 'CLL': -0.065794, 'Precision': [0.935484, 0.5], 'Recall': 1.0, 'F1': 0.966667, 'Learning time': 2.241, 'Inference time': 0.917, 'parameter_20': {'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.149456, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 0.667, 'Inference time': 1.018}}


Amount of data: 25
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;title(I, H), venue(I, A).;false;false
0;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
0;false;haswordvenue(A, L), haswordtitle(M, L).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordtitle(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordauthor(I, H).;false;true
2;true,false,false;haswordvenue(A, J), haswordtitle(K, J).;false;false
2;false;haswordvenue(A, L), haswordtitle(M, L).;true;false
2;false,true;haswordauthor(N, L).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;title(E, D), venue(E, B).;false;true
3;true,true,false;title(F, D), venue(F, A).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, A).;false;true
4;true,true,false;title(F, D), venue(F, B).;false;false
4;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
4;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
4;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
4;false,true;haswordauthor(M, K).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, B).;false;true
5;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
5;true,false;haswordvenue(B, H), haswordtitle(I, H).;true;true
5;true,false,true;title(J, I), venue(J, B).;false;false
5;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
5;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;title(E, D), venue(E, A).;false;true
6;true,true,false;title(F, D), venue(F, B).;false;false
6;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
6;true,false,true;title(I, H), venue(I, B).;false;false
6;true,false,false;haswordvenue(A, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;title(F, D), venue(F, A).;false;false
7;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
7;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
7;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
7;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;title(E, D), venue(E, A).;false;true
8;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
8;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
8;true,false,true;title(J, I), venue(J, A).;false;false
8;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
8;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, B).;false;true
9;true,true,false;title(F, D), venue(F, A).;false;false
9;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
9;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
9;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
9;false,true;haswordauthor(M, K).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14185106490048777;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995122;  // std dev = 0.000, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.22178529873587596;  // std dev = 1.595, 11.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=4 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.1418510649004878;  // std dev = 0.000, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7194734122109543;  // std dev = 7.30e-08, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.19258789115538322;  // std dev = 1.595, 11.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=4 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.12544463852839138;  // std dev = 0.000, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.11231637819360639;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( movie(E, A) )
%   | | then return 0.42067250145622537;  // std dev = 1.911, 32.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=25 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.11231637819360635;  // std dev = 3.48e-09, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.4505880916412745;  // std dev = 2.98e-08, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | else if ( genre(A, E) )
%   | | then return -0.10159632948783628;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.08774900657918289;  // std dev = 1.595, 11.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=4 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.10159632948783631;  // std dev = 0.000, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.09269127618926096;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( genre(B, E) )
%   | | then return 0.343241308284589;  // std dev = 5.58e-08, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.06987912010030964;  // std dev = 1.595, 11.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=4 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.09269127618926094;  // std dev = 2.28e-09, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.2704927030018959;  // std dev = 4.47e-08, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | else if ( movie(E, B) )
%   | | then if ( genre(B, F) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.043479088337692394;  // std dev = 1.601, 12.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=4 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.08518475138839685;  // std dev = 1.18e-08, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.08863468199095531;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( genre(B, E) )
%   | | then return 0.22052372752552873;  // std dev = 0.000, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.04582475973101496;  // std dev = 1.595, 11.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=4 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.07877675473109173;  // std dev = 0.000, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.1849535068551748;  // std dev = 0.000, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | else if ( genre(A, E) )
%   | | then return -0.08173112970354829;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.03580773657772778;  // std dev = 1.595, 11.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=4 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.07324622576333704;  // std dev = 0.000, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.07580306809690286;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( movie(E, A) )
%   | | then if ( genre(A, F) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.11371274809956813;  // std dev = 1.634, 32.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=25 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.06842697784420272;  // std dev = 0.000, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.14408015770141863;  // std dev = 0.000, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | else if ( genre(A, E) )
%   | | then return -0.07066036354107794;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.0020537764976412587;  // std dev = 1.595, 11.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=4 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.06419184008202619;  // std dev = 1.86e-09, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.157668
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 0.698 seconds
Total inference time: 1.142 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 0.9776
   AUC PR    = 0.980215
   CLL	      = -0.223917
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.84
   F1        = 0.913043


Total scoring time: 0.366 seconds
Parameter learned model CLL: -0.223917


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 1, 0], 'true,false,true': [0.0, 0, 21], 'true,false,false,true': [1.595, 7, 4], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 17, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [7.3e-08, 0, 21], 'true,false,true': [0.0, 1, 0], 'true,false,false,true': [1.595, 7, 4], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 17, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.0, 1, 0], 'true,false,true': [1.911, 7, 25], 'true,false,false': [0.0, 0, 0], 'false,true': [3.48e-09, 17, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [2.98e-08, 0, 21], 'true,false,true': [0.0, 1, 0], 'true,false,false,true': [1.595, 7, 4], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 17, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 1, 0], 'true,false,true': [5.58e-08, 0, 21], 'true,false,false,true': [1.595, 7, 4], 'true,false,false,false': [0.0, 0, 0], 'false,true': [2.28e-09, 17, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, B)', 'true,false,true': 'genre(B, F)', 'false': 'movie(G, A)'}, {'true,true': [4.47e-08, 0, 21], 'true,false,true,true': [0.0, 0, 0], 'true,false,true,false': [1.601, 8, 4], 'true,false,false': [0.0, 0, 0], 'false,true': [1.18e-08, 17, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 1, 0], 'true,false,true': [0.0, 0, 21], 'true,false,false,true': [1.595, 7, 4], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 17, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 0, 21], 'true,false,true': [0.0, 1, 0], 'true,false,false,true': [1.595, 7, 4], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 17, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'true,false,true': 'genre(A, F)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 1, 0], 'true,false,true,true': [0.0, 0, 0], 'true,false,true,false': [1.634, 7, 25], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 17, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 21], 'true,false,true': [0.0, 1, 0], 'true,false,false,true': [1.595, 7, 4], 'true,false,false,false': [0.0, 0, 0], 'false,true': [1.86e-09, 17, 0], 'false,false': [0.0, 0, 0]}]]
[{'': [0.1836547291092757, -3.2653618371328133e-18], 'true': [0.0, 0.1708984375000011], 'true,false': [0.0, 0.2314049586776858], 'true,false,false': [0.2314049586776858, nan], 'false': [-3.2653618371328133e-18, nan]}, {'': [0.1508096765215009, 0.0], 'true': [2.5376526277146434e-16, 0.2198475426025153], 'true,false': [0.0, 0.23140495867768582], 'true,false,false': [0.23140495867768582, nan], 'false': [0.0, nan]}, {'': [0.11906855865351708, 1.3061447348531253e-17], 'true': [0.0, 0.11418105275294305], 'true,false': [0.11418105275294305, nan], 'false': [1.3061447348531253e-17, nan]}, {'': [0.11130311031564183, -8.163404592832034e-18], 'true': [4.229421046191072e-17, 0.21485988031005698], 'true,false': [0.0, 0.23140495867768596], 'true,false,false': [0.23140495867768596, nan], 'false': [-8.163404592832034e-18, nan]}, {'': [0.09691773434632663, 4.89804275569922e-18], 'true': [0.0, 0.09640278916418055], 'true,false': [1.4802973661668753e-16, 0.23140495867768596], 'true,false,false': [0.23140495867768596, nan], 'false': [4.89804275569922e-18, nan]}, {'': [0.08960773506402472, 8.163404592832034e-18], 'true': [9.516197353929913e-17, 0.21362615608967225], 'true,false': [0.21362615608967225, nan], 'true,false,true': [nan, 0.21362615608967225], 'false': [8.163404592832034e-18, nan]}, {'': [0.08563460753105256, -2.44902137784961e-18], 'true': [0.0, 0.08643027630277507], 'true,false': [-2.114710523095536e-17, 0.2314049586776859], 'true,false,false': [0.2314049586776859, nan], 'false': [-2.44902137784961e-18, nan]}, {'': [0.08336453102087327, 0.0], 'true': [-1.586032892321652e-17, 0.2131765540375563], 'true,false': [0.0, 0.23140495867768596], 'true,false,false': [0.23140495867768596, nan], 'false': [0.0, nan]}, {'': [0.08193342250900157, -8.163404592832033e-19], 'true': [0.0, 0.08340547091426803], 'true,false': [0.08340547091426803, nan], 'true,false,true': [nan, 0.08340547091426803], 'false': [-8.163404592832033e-19, nan]}, {'': [0.08235643618160879, 3.2653618371328133e-18], 'true': [-2.6433881538694202e-17, 0.2125251066196655], 'true,false': [0.0, 0.23140495867768604], 'true,false,false': [0.23140495867768604, nan], 'false': [3.2653618371328133e-18, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(A, D).;true;true
0;true,false;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;true;genre(B, D).;true;true
1;true,false;genre(A, E).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;true;genre(A, D).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;true;genre(B, D).;true;true
3;true,false;genre(A, E).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;true;genre(A, D).;true;true
4;true,false;genre(B, E).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;true;genre(B, D).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(A, D).;true;true
6;true,false;genre(B, E).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;true;genre(B, D).;true;true
7;true,false;genre(A, E).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;true;genre(A, D).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;true;genre(B, D).;true;true
9;true,false;genre(A, E).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14185106490048777;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995122;  // std dev = 0.000, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | else if ( actor(B) )
%   | | | then return -0.1418510649004878;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | | else return 0.8581489350995122;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else return -0.1418510649004878;  // std dev = 0.000, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7194734122109543;  // std dev = 7.30e-08, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( actor(B) )
%   | | | then return -0.12544463852839138;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | | else return 0.7194734122109545;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else return -0.12544463852839138;  // std dev = 0.000, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.11231637819360639;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( director(B) )
%   | | then return 0.5553664367462846;  // std dev = 0.000, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | | else return -0.11231637819360639;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   else return -0.11231637819360635;  // std dev = 1.49e-08, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.41751358415830986;  // std dev = 4.71e-08, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | else if ( genre(A, E) )
%   | | then return -0.10159632948783628;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( actor(B) )
%   | | | then return -0.10159632948783627;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | | else return 0.41751358415830997;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else return -0.10159632948783631;  // std dev = 0.000, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.09269127618926096;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( genre(B, E) )
%   | | then return 0.3207118471601496;  // std dev = 2.98e-08, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | else if ( actor(B) )
%   | | | then return -0.09269127618926097;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | | else return 0.32071184716014967;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else return -0.09269127618926094;  // std dev = 9.13e-09, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.2551722425694895;  // std dev = 1.49e-08, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | else if ( actor(B) )
%   | | then return -0.08518475138839687;  // std dev = 3.73e-09, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | else return 0.25517224256948945;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else return -0.08518475138839685;  // std dev = 1.18e-08, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.07877675473109173;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( genre(B, E) )
%   | | then return 0.2097577156325356;  // std dev = 0.000, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | else if ( actor(B) )
%   | | | then return -0.07877675473109173;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | | else return 0.20975771563253554;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else return -0.07877675473109173;  // std dev = 0.000, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.17709649774527744;  // std dev = 0.000, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | else if ( genre(A, E) )
%   | | then return -0.07324622576333704;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( actor(B) )
%   | | | then return -0.07324622576333704;  // std dev = 2.63e-09, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | | else return 0.17709649774527736;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else return -0.07324622576333704;  // std dev = 0.000, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.06842697784420272;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( actor(B) )
%   | | then return -0.06842697784420272;  // std dev = 2.63e-09, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else return 0.15274385809367083;  // std dev = 0.000, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   else return -0.06842697784420272;  // std dev = 0.000, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.13400703000801117;  // std dev = 0.000, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | else if ( genre(A, E) )
%   | | then return -0.0641918400820262;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( actor(B) )
%   | | | then return -0.0641918400820262;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | | else return 0.13400703000801117;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else return -0.06419184008202619;  // std dev = 7.45e-09, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063857
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 0.877 seconds
Total inference time: 1.011 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.094637
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 0.375 seconds
Refined model CLL: -0.094637


******************************************
Best model found
******************************************
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063857
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 2.316 seconds
Total inference time: 1.011 seconds
AUC ROC: 1.0
Total revision time: 2.316
Best scored revision CLL: -0.094637


Dataset: 4_cora_imdb, Fold: 2, Type: Transfer (trRDN-B), Time: 00:02:37
{'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.063857, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 2.316, 'Inference time': 1.011, 'parameter_25': {'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.157668, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 0.698, 'Inference time': 1.142}}


Starting fold 3

Target train facts examples: 737
Target train pos examples: 204
Target train neg examples: 10693

Target test facts examples: 341
Target test pos	 examples: 178
Target test neg examples: 3543

Amount of data: 5
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;title(I, H), venue(I, A).;false;false
0;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
0;false;haswordvenue(A, L), haswordtitle(M, L).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordtitle(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordauthor(I, H).;false;true
2;true,false,false;haswordvenue(A, J), haswordtitle(K, J).;false;false
2;false;haswordvenue(A, L), haswordtitle(M, L).;true;false
2;false,true;haswordauthor(N, L).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;title(E, D), venue(E, B).;false;true
3;true,true,false;title(F, D), venue(F, A).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, A).;false;true
4;true,true,false;title(F, D), venue(F, B).;false;false
4;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
4;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
4;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
4;false,true;haswordauthor(M, K).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, B).;false;true
5;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
5;true,false;haswordvenue(B, H), haswordtitle(I, H).;true;true
5;true,false,true;title(J, I), venue(J, B).;false;false
5;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
5;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;title(E, D), venue(E, A).;false;true
6;true,true,false;title(F, D), venue(F, B).;false;false
6;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
6;true,false,true;title(I, H), venue(I, B).;false;false
6;true,false,false;haswordvenue(A, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;title(F, D), venue(F, A).;false;false
7;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
7;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
7;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
7;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;title(E, D), venue(E, A).;false;true
8;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
8;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
8;true,false,true;title(J, I), venue(J, A).;false;false
8;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
8;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, B).;false;true
9;true,true,false;title(F, D), venue(F, A).;false;false
9;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
9;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
9;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
9;false,true;haswordauthor(M, K).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995122;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.14185106490048777;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7194734122109545;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(E, B) )
%   | then return -0.12544463852839138;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A) )
%   | | then return 0.5553664367462845;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.11231637819360638;  // std dev = 1.86e-09, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.4175135841583099;  // std dev = 1.49e-08, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(E, B) )
%   | then return -0.10159632948783633;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( genre(B, E) )
%   | | then return 0.32071184716014967;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, B) )
%   | then return -0.09269127618926098;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.25517224256948945;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(E, A) )
%   | then return -0.08518475138839687;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( genre(B, E) )
%   | | then return 0.20975771563253556;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, B) )
%   | then return -0.07877675473109177;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.17709649774527736;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(E, A) )
%   | then return -0.07324622576333704;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A) )
%   | | then if ( genre(A, F) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.15274385809367097;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.06842697784420272;  // std dev = 1.86e-09, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.13400703000801117;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(E, B) )
%   | then return -0.0641918400820262;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 0.97199
   AUC PR    = 0.81824
   CLL	      = -0.131068
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.724719
   F1        = 0.840391


Total learning time: 0.568 seconds
Total inference time: 1.02 seconds
AUC ROC: 0.97199


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.094637
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 0.32 seconds
Parameter learned model CLL: -0.094637


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'false': 'movie(F, A)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 5], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 5, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'false': 'movie(E, B)'}, {'true,true': [0.0, 0, 5], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 5, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 5], 'true,false,false': [0.0, 0, 0], 'false,true': [1.86e-09, 5, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'false': 'movie(E, B)'}, {'true,true': [1.49e-08, 0, 5], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 5, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'false': 'movie(F, B)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 5], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 5, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'false': 'movie(E, A)'}, {'true,true': [0.0, 0, 5], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 5, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'false': 'movie(F, B)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 5], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 5, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'false': 'movie(E, A)'}, {'true,true': [0.0, 0, 5], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 5, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'true,false,true': 'genre(A, F)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 0, 0], 'true,false,true,true': [0.0, 0, 0], 'true,false,true,false': [0.0, 0, 5], 'true,false,false': [0.0, 0, 0], 'false,true': [1.86e-09, 5, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'false': 'movie(E, B)'}, {'true,true': [0.0, 0, 5], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 5, 0], 'false,false': [0.0, 0, 0]}]]
[{'': [0.0, -2.7755575615628915e-18], 'true': [nan, 0.0], 'true,false': [0.0, nan], 'false': [-2.7755575615628915e-18, nan]}, {'': [0.0, 0.0], 'true': [0.0, nan], 'false': [0.0, nan]}, {'': [-4.4408920985006264e-17, 0.0], 'false': [0.0, nan], 'true': [nan, -4.4408920985006264e-17], 'true,false': [-4.4408920985006264e-17, nan]}, {'': [4.4408920985006264e-17, 0.0], 'true': [4.4408920985006264e-17, nan], 'false': [0.0, nan]}, {'': [-2.2204460492503132e-17, 0.0], 'false': [0.0, nan], 'true': [nan, -2.2204460492503132e-17], 'true,false': [-2.2204460492503132e-17, nan]}, {'': [0.0, 0.0], 'true': [0.0, nan], 'false': [0.0, nan]}, {'': [-5.551115123125783e-18, -1.3877787807814458e-18], 'false': [-1.3877787807814458e-18, nan], 'true': [nan, -5.551115123125783e-18], 'true,false': [-5.551115123125783e-18, nan]}, {'': [0.0, -6.938893903907229e-19], 'true': [0.0, nan], 'false': [-6.938893903907229e-19, nan]}, {'': [0.0, 6.938893903907229e-19], 'false': [6.938893903907229e-19, nan], 'true': [nan, 0.0], 'true,false': [0.0, nan], 'true,false,true': [nan, 0.0]}, {'': [0.0, 0.0], 'true': [0.0, nan], 'false': [0.0, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.8581489350995122;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return -0.14185106490048777;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.7194734122109545;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return -0.12544463852839138;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.5553664367462845;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return -0.11231637819360638;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.4175135841583099;  // std dev = 1.49e-08, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return -0.10159632948783633;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.32071184716014967;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return -0.09269127618926098;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.25517224256948945;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return -0.08518475138839687;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.20975771563253556;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return -0.07877675473109177;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.17709649774527736;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return -0.07324622576333704;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.15274385809367097;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return -0.06842697784420272;  // std dev = 1.86e-09, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.13400703000801117;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return -0.0641918400820262;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */


Results
   AUC ROC   = 0.888089
   AUC PR    = 0.183316
   CLL	      = -0.505426
   Precision = 0.183316 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.309835


Total learning time: 0.512 seconds
Total inference time: 0.815 seconds
AUC ROC: 0.888089


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.094637
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 0.301 seconds
Refined model CLL: -0.094637


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.97199
   AUC PR    = 0.81824
   CLL	      = -0.131068
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.724719
   F1        = 0.840391


Total learning time: 1.7009999999999998 seconds
Total inference time: 1.02 seconds
AUC ROC: 0.97199
Total revision time: 1.7009999999999998
Best scored revision CLL: -0.094637


Dataset: 4_cora_imdb, Fold: 3, Type: Transfer (trRDN-B), Time: 00:02:41
{'AUC ROC': 0.97199, 'AUC PR': 0.81824, 'CLL': -0.131068, 'Precision': [1.0, 0.5], 'Recall': 0.724719, 'F1': 0.840391, 'Learning time': 1.7009999999999998, 'Inference time': 1.02, 'parameter_5': {'AUC ROC': 0.97199, 'AUC PR': 0.81824, 'CLL': -0.131068, 'Precision': [1.0, 0.5], 'Recall': 0.724719, 'F1': 0.840391, 'Learning time': 0.568, 'Inference time': 1.02}}


Amount of data: 10
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;title(I, H), venue(I, A).;false;false
0;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
0;false;haswordvenue(A, L), haswordtitle(M, L).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordtitle(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordauthor(I, H).;false;true
2;true,false,false;haswordvenue(A, J), haswordtitle(K, J).;false;false
2;false;haswordvenue(A, L), haswordtitle(M, L).;true;false
2;false,true;haswordauthor(N, L).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;title(E, D), venue(E, B).;false;true
3;true,true,false;title(F, D), venue(F, A).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, A).;false;true
4;true,true,false;title(F, D), venue(F, B).;false;false
4;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
4;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
4;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
4;false,true;haswordauthor(M, K).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, B).;false;true
5;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
5;true,false;haswordvenue(B, H), haswordtitle(I, H).;true;true
5;true,false,true;title(J, I), venue(J, B).;false;false
5;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
5;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;title(E, D), venue(E, A).;false;true
6;true,true,false;title(F, D), venue(F, B).;false;false
6;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
6;true,false,true;title(I, H), venue(I, B).;false;false
6;true,false,false;haswordvenue(A, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;title(F, D), venue(F, A).;false;false
7;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
7;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
7;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
7;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;title(E, D), venue(E, A).;false;true
8;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
8;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
8;true,false,true;title(J, I), venue(J, A).;false;false
8;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
8;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, B).;false;true
9;true,true,false;title(F, D), venue(F, A).;false;false
9;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
9;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
9;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
9;false,true;haswordauthor(M, K).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995123;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.10814893509951219;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.1418510649004878;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7194734122109543;  // std dev = 2.98e-08, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else if ( genre(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(F, B) )
%   | | | then return 0.09446743783575562;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.12544463852839138;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A) )
%   | | then return 0.40960826950400075;  // std dev = 1.171, 13.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=10 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.11231637819360639;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.4533286061964762;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else if ( genre(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(F, B) )
%   | | | then return 0.01634295262101057;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.10159632948783627;  // std dev = 1.86e-09, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( genre(B, E) )
%   | | then return 0.34512013721027124;  // std dev = 1.49e-08, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.013403832053065383;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.09269127618926097;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.2717663291205828;  // std dev = 1.83e-08, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else if ( movie(E, B) )
%   | | then if ( genre(B, F) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.010974311728403824;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.08518475138839687;  // std dev = 2.63e-09, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( genre(B, E) )
%   | | then return 0.22141391594968068;  // std dev = 1.83e-08, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.00897245448030326;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.07877675473109173;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.18559973097152926;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else if ( genre(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(F, B) )
%   | | | then return 0.007327282346372699;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.07324622576333704;  // std dev = 9.31e-10, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A) )
%   | | then if ( genre(A, F) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.1120300842824485;  // std dev = 0.903, 13.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=10 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.06842697784420272;  // std dev = 2.63e-09, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.1447371610519791;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else if ( genre(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(F, A) )
%   | | | then return -0.015275938607475448;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.0641918400820262;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 0.97199
   AUC PR    = 0.81824
   CLL	      = -0.13385
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.724719
   F1        = 0.840391


Total learning time: 0.625 seconds
Total inference time: 1.007 seconds
AUC ROC: 0.97199


Results scoring model
   AUC ROC   = 0.985
   AUC PR    = 0.988462
   CLL	      = -0.19586
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.9
   F1        = 0.947368


Total scoring time: 0.341 seconds
Parameter learned model CLL: -0.19586


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 9], 'true,false,false,true': [0.866, 3, 1], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 7, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [2.98e-08, 0, 9], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.866, 3, 1], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 7, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [1.171, 3, 10], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 7, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 9], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.866, 3, 1], 'true,false,false,false': [0.0, 0, 0], 'false,true': [1.86e-09, 7, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [1.49e-08, 0, 9], 'true,false,false,true': [0.866, 3, 1], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 7, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, B)', 'true,false,true': 'genre(B, F)', 'false': 'movie(G, A)'}, {'true,true': [1.83e-08, 0, 9], 'true,false,true,true': [0.0, 0, 0], 'true,false,true,false': [0.866, 3, 1], 'true,false,false': [0.0, 0, 0], 'false,true': [2.63e-09, 7, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [1.83e-08, 0, 9], 'true,false,false,true': [0.866, 3, 1], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 7, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 0, 9], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.866, 3, 1], 'true,false,false,false': [0.0, 0, 0], 'false,true': [9.31e-10, 7, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'true,false,true': 'genre(A, F)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 0, 0], 'true,false,true,true': [0.0, 0, 0], 'true,false,true,false': [0.903, 3, 10], 'true,false,false': [0.0, 0, 0], 'false,true': [2.63e-09, 7, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 9], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.866, 3, 1], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 7, 0], 'false,false': [0.0, 0, 0]}]]
[{'': [0.1775147928994082, -7.93016446160826e-18], 'true': [nan, 0.1775147928994082], 'true,false': [-2.9605947323337506e-16, 0.18750000000000003], 'true,false,false': [0.18750000000000003, nan], 'false': [-7.93016446160826e-18, nan]}, {'': [0.14090395768147268, -1.982541115402065e-18], 'true': [9.868649107779169e-17, 0.18749999999999997], 'true,false': [nan, 0.18749999999999997], 'true,false,false': [0.18749999999999997, nan], 'false': [-1.982541115402065e-18, nan]}, {'': [0.10549455515742416, -1.982541115402065e-18], 'true': [nan, 0.10549455515742416], 'true,false': [0.10549455515742416, nan], 'false': [-1.982541115402065e-18, nan]}, {'': [0.0983694237367336, 0.0], 'true': [-2.4671622769447922e-17, 0.18749999999999997], 'true,false': [nan, 0.18749999999999997], 'true,false,false': [0.18749999999999997, nan], 'false': [0.0, nan]}, {'': [0.08113186660270619, 0.0], 'true': [nan, 0.08113186660270619], 'true,false': [2.4671622769447922e-17, 0.18750000000000003], 'true,false,false': [0.18750000000000003, nan], 'false': [0.0, nan]}, {'': [0.07218017247383063, 9.912705577010326e-19], 'true': [3.700743415417188e-17, 0.1875], 'true,false': [0.1875, nan], 'true,false,true': [nan, 0.1875], 'false': [9.912705577010326e-19, nan]}, {'': [0.06730609162038356, -9.912705577010326e-19], 'true': [nan, 0.06730609162038356], 'true,false': [3.700743415417188e-17, 0.18749999999999997], 'true,false,false': [0.18749999999999997, nan], 'false': [-9.912705577010326e-19, nan]}, {'': [0.06446223889820787, 9.912705577010326e-19], 'true': [-6.1679056923619804e-18, 0.18750000000000003], 'true,false': [nan, 0.18750000000000003], 'true,false,false': [0.18750000000000003, nan], 'false': [9.912705577010326e-19, nan]}, {'': [0.06269098314255711, 9.912705577010326e-19], 'true': [nan, 0.06269098314255711], 'true,false': [0.06269098314255711, nan], 'true,false,true': [nan, 0.06269098314255711], 'false': [9.912705577010326e-19, nan]}, {'': [0.06314645511393226, -4.956352788505163e-19], 'true': [-3.0839528461809902e-18, 0.18749999999999997], 'true,false': [nan, 0.18749999999999997], 'true,false,false': [0.18749999999999997, nan], 'false': [-4.956352788505163e-19, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;true;genre(B, D).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;true;genre(B, D).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;true;genre(B, E).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;true;genre(B, D).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(B, E).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;true;genre(B, D).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;true;genre(B, D).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.8581489350995123;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else return 0.10814893509951219;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   else return -0.1418510649004878;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7194734122109543;  // std dev = 2.98e-08, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else return 0.09446743783575562;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   else return -0.12544463852839138;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B) )
%   | then if ( female(A) )
%   | | then return 0.6014140961567142;  // std dev = 0.252, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return 0.5553664367462845;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else return -0.16834760679113825;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else return -0.11231637819360639;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.41131676862038963;  // std dev = 0.017, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else return 0.07301085418748224;  // std dev = 0.759, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   else return -0.10159632948783627;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.3165241766830473;  // std dev = 0.015, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else return 0.06234732919227759;  // std dev = 0.754, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   else return -0.09269127618926097;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.25231902080516877;  // std dev = 0.013, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else return 0.052862644041504175;  // std dev = 0.750, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   else return -0.08518475138839687;  // std dev = 2.63e-09, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.2077440415871865;  // std dev = 0.011, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else return 0.04454612116444539;  // std dev = 0.747, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   else return -0.07877675473109173;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.17562059069257124;  // std dev = 0.010, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else return 0.03734186918124224;  // std dev = 0.744, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   else return -0.07324622576333704;  // std dev = 2.63e-09, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.1830793328023396;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( female(A) )
%   | | then return 0.23647265194234715;  // std dev = 0.479, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return 0.15492118618159967;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else return -0.06842697784420272;  // std dev = 2.63e-09, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.12776973585649484;  // std dev = 0.021, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else return 0.03703997469892644;  // std dev = 0.673, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   else return -0.0641918400820262;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */


Results
   AUC ROC   = 0.991594
   AUC PR    = 0.821339
   CLL	      = -0.133808
   Precision = 0.693548 at threshold = 0.5
   Recall    = 0.724719
   F1        = 0.708791


Total learning time: 0.745 seconds
Total inference time: 0.933 seconds
AUC ROC: 0.991594


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.150189
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.9
   F1        = 0.947368


Total scoring time: 0.325 seconds
Refined model CLL: -0.150189


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.991594
   AUC PR    = 0.821339
   CLL	      = -0.133808
   Precision = 0.693548 at threshold = 0.5
   Recall    = 0.724719
   F1        = 0.708791


Total learning time: 2.036 seconds
Total inference time: 0.933 seconds
AUC ROC: 0.991594
Total revision time: 2.036
Best scored revision CLL: -0.150189


Dataset: 4_cora_imdb, Fold: 3, Type: Transfer (trRDN-B), Time: 00:02:45
{'AUC ROC': 0.991594, 'AUC PR': 0.821339, 'CLL': -0.133808, 'Precision': [0.693548, 0.5], 'Recall': 0.724719, 'F1': 0.708791, 'Learning time': 2.036, 'Inference time': 0.933, 'parameter_10': {'AUC ROC': 0.97199, 'AUC PR': 0.81824, 'CLL': -0.13385, 'Precision': [1.0, 0.5], 'Recall': 0.724719, 'F1': 0.840391, 'Learning time': 0.625, 'Inference time': 1.007}}


Amount of data: 15
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;title(I, H), venue(I, A).;false;false
0;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
0;false;haswordvenue(A, L), haswordtitle(M, L).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordtitle(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordauthor(I, H).;false;true
2;true,false,false;haswordvenue(A, J), haswordtitle(K, J).;false;false
2;false;haswordvenue(A, L), haswordtitle(M, L).;true;false
2;false,true;haswordauthor(N, L).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;title(E, D), venue(E, B).;false;true
3;true,true,false;title(F, D), venue(F, A).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, A).;false;true
4;true,true,false;title(F, D), venue(F, B).;false;false
4;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
4;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
4;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
4;false,true;haswordauthor(M, K).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, B).;false;true
5;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
5;true,false;haswordvenue(B, H), haswordtitle(I, H).;true;true
5;true,false,true;title(J, I), venue(J, B).;false;false
5;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
5;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;title(E, D), venue(E, A).;false;true
6;true,true,false;title(F, D), venue(F, B).;false;false
6;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
6;true,false,true;title(I, H), venue(I, B).;false;false
6;true,false,false;haswordvenue(A, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;title(F, D), venue(F, A).;false;false
7;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
7;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
7;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
7;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;title(E, D), venue(E, A).;false;true
8;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
8;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
8;true,false,true;title(J, I), venue(J, A).;false;false
8;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
8;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, B).;false;true
9;true,true,false;title(F, D), venue(F, A).;false;false
9;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
9;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
9;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
9;false,true;haswordauthor(M, K).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995123;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.0581489350995122;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.1418510649004878;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7194734122109542;  // std dev = 5.16e-08, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | else if ( genre(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(F, B) )
%   | | | then return 0.050922032513554226;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.12544463852839138;  // std dev = 5.27e-09, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A) )
%   | | then return 0.42088745276164874;  // std dev = 1.327, 19.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=15 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.11231637819360638;  // std dev = 1.32e-09, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.4505348791917995;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | else if ( genre(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(F, B) )
%   | | | then return -0.019250134424778777;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.10159632948783628;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( genre(B, E) )
%   | | then return 0.34320484895046593;  // std dev = 3.33e-08, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.015972719695467395;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.09269127618926097;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.27046798275558526;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | else if ( movie(E, B) )
%   | | then if ( genre(B, F) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.013280354625785539;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.08518475138839687;  // std dev = 5.27e-09, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( genre(B, E) )
%   | | then return 0.2205064425744525;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | else if ( movie(F, B) )
%   | | | then return -0.011060504655542713;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.07877675473109172;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.18494095393758586;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | else if ( genre(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(F, B) )
%   | | | then return -0.009224661869423122;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.07324622576333704;  // std dev = 1.32e-09, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A) )
%   | | then if ( genre(A, F) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.11488701465007595;  // std dev = 0.950, 19.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=15 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.06842697784420272;  // std dev = 2.63e-09, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.1439266924822405;  // std dev = 1.49e-08, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | else if ( genre(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(F, A) )
%   | | | then return -0.027243310779788754;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.06419184008202619;  // std dev = 1.61e-09, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 0.97199
   AUC PR    = 0.81824
   CLL	      = -0.127256
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.724719
   F1        = 0.840391


Total learning time: 0.781 seconds
Total inference time: 1.109 seconds
AUC ROC: 0.97199


Results scoring model
   AUC ROC   = 0.991111
   AUC PR    = 0.992982
   CLL	      = -0.169939
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.933333
   F1        = 0.965517


Total scoring time: 0.355 seconds
Parameter learned model CLL: -0.169939


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 14], 'true,false,false,true': [0.894, 4, 1], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 11, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [5.16e-08, 0, 14], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.894, 4, 1], 'true,false,false,false': [0.0, 0, 0], 'false,true': [5.27e-09, 11, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [1.327, 4, 15], 'true,false,false': [0.0, 0, 0], 'false,true': [1.32e-09, 11, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 14], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.894, 4, 1], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 11, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [3.33e-08, 0, 14], 'true,false,false,true': [0.894, 4, 1], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 11, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, B)', 'true,false,true': 'genre(B, F)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 0, 14], 'true,false,true,true': [0.0, 0, 0], 'true,false,true,false': [0.894, 4, 1], 'true,false,false': [0.0, 0, 0], 'false,true': [5.27e-09, 11, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 14], 'true,false,false,true': [0.894, 4, 1], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 11, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 0, 14], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.894, 4, 1], 'true,false,false,false': [0.0, 0, 0], 'false,true': [1.32e-09, 11, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'true,false,true': 'genre(A, F)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 0, 0], 'true,false,true,true': [0.0, 0, 0], 'true,false,true,false': [0.95, 4, 15], 'true,false,false': [0.0, 0, 0], 'false,true': [2.63e-09, 11, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [1.49e-08, 0, 14], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.894, 4, 1], 'true,false,false,false': [0.0, 0, 0], 'false,true': [1.61e-09, 11, 0], 'false,false': [0.0, 0, 0]}]]
[{'': [0.16620498614958412, -1.0092936587501423e-17], 'true': [nan, 0.16620498614958412], 'true,false': [-2.5376526277146434e-16, 0.16000000000000003], 'true,false,false': [0.16000000000000003, nan], 'false': [-1.0092936587501423e-17, nan]}, {'': [0.128773590888285, 2.523234146875356e-18], 'true': [1.9032394707859825e-16, 0.16], 'true,false': [nan, 0.16], 'true,false,false': [0.16, nan], 'false': [2.523234146875356e-18, nan]}, {'': [0.09274213513180649, 5.046468293750712e-18], 'true': [nan, 0.09274213513180649], 'true,false': [0.09274213513180649, nan], 'false': [5.046468293750712e-18, nan]}, {'': [0.08489988125016892, 0.0], 'true': [-9.516197353929913e-17, 0.15999999999999998], 'true,false': [nan, 0.15999999999999998], 'true,false,false': [0.15999999999999998, nan], 'false': [0.0, nan]}, {'': [0.06712076677919203, 0.0], 'true': [nan, 0.06712076677919203], 'true,false': [7.930164461608261e-17, 0.16000000000000006], 'true,false,false': [0.16000000000000006, nan], 'false': [0.0, nan]}, {'': [0.05771722528440009, 2.523234146875356e-18], 'true': [-4.7580986769649563e-17, 0.16], 'true,false': [0.16, nan], 'true,false,true': [nan, 0.16], 'false': [2.523234146875356e-18, nan]}, {'': [0.05250312347218661, 0.0], 'true': [nan, 0.05250312347218661], 'true,false': [-7.93016446160826e-18, 0.16], 'true,false,false': [0.16, nan], 'false': [0.0, nan]}, {'': [0.04941556799257629, 6.30808536718839e-19], 'true': [-7.93016446160826e-18, 0.16000000000000003], 'true,false': [nan, 0.16000000000000003], 'true,false,false': [0.16000000000000003, nan], 'false': [6.30808536718839e-19, nan]}, {'': [0.04747247687005421, 6.30808536718839e-19], 'true': [nan, 0.04747247687005421], 'true,false': [0.04747247687005421, nan], 'true,false,true': [nan, 0.04747247687005421], 'false': [6.30808536718839e-19, nan]}, {'': [0.04778654266252249, 2.523234146875356e-18], 'true': [1.586032892321652e-17, 0.16000000000000003], 'true,false': [nan, 0.16000000000000003], 'true,false,false': [0.16000000000000003, nan], 'false': [2.523234146875356e-18, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;true;genre(B, D).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;true;genre(B, D).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;true;genre(B, E).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;true;genre(B, D).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(B, E).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;true;genre(B, D).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;true;genre(B, D).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.8581489350995123;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | else return 0.0581489350995122;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   else return -0.1418510649004878;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7194734122109542;  // std dev = 5.16e-08, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | else return 0.050922032513554226;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   else return -0.12544463852839138;  // std dev = 5.27e-09, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.15565370239533147;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else if ( female(A) )
%   | | then return 0.5914889193535826;  // std dev = 0.096, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return 0.5553664367462846;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   else return -0.11231637819360638;  // std dev = 7.45e-09, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.41313468623734834;  // std dev = 0.016, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | else return 0.0410113389351072;  // std dev = 0.793, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   else return -0.10159632948783628;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.317751298533915;  // std dev = 0.015, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | else return 0.03553866159075136;  // std dev = 0.790, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   else return -0.09269127618926097;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.2531550436664236;  // std dev = 0.013, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | else return 0.030676428654419507;  // std dev = 0.788, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   else return -0.08518475138839687;  // std dev = 5.27e-09, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.20833418383702476;  // std dev = 0.011, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | else return 0.02638921760018355;  // std dev = 0.786, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   else return -0.07877675473109172;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.1760532258811971;  // std dev = 0.010, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | else return 0.022633875303444684;  // std dev = 0.784, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   else return -0.07324622576333704;  // std dev = 2.63e-09, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B) )
%   | then if ( female(A) )
%   | | then return 0.22089045540198848;  // std dev = 0.189, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return 0.1542802583465058;  // std dev = 5.27e-09, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else return -0.15573202443855932;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   else return -0.06842697784420272;  // std dev = 2.63e-09, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.12942118747860434;  // std dev = 0.022, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | else return 0.02555422787377703;  // std dev = 0.724, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   else return -0.06419184008202619;  // std dev = 5.27e-09, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */


Results
   AUC ROC   = 0.991594
   AUC PR    = 0.821339
   CLL	      = -0.13
   Precision = 0.693548 at threshold = 0.5
   Recall    = 0.724719
   F1        = 0.708791


Total learning time: 0.714 seconds
Total inference time: 0.952 seconds
AUC ROC: 0.991594


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.136872
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.933333
   F1        = 0.965517


Total scoring time: 0.35 seconds
Refined model CLL: -0.136872


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.991594
   AUC PR    = 0.821339
   CLL	      = -0.13
   Precision = 0.693548 at threshold = 0.5
   Recall    = 0.724719
   F1        = 0.708791


Total learning time: 2.2 seconds
Total inference time: 0.952 seconds
AUC ROC: 0.991594
Total revision time: 2.2
Best scored revision CLL: -0.136872


Dataset: 4_cora_imdb, Fold: 3, Type: Transfer (trRDN-B), Time: 00:02:50
{'AUC ROC': 0.991594, 'AUC PR': 0.821339, 'CLL': -0.13, 'Precision': [0.693548, 0.5], 'Recall': 0.724719, 'F1': 0.708791, 'Learning time': 2.2, 'Inference time': 0.952, 'parameter_15': {'AUC ROC': 0.97199, 'AUC PR': 0.81824, 'CLL': -0.127256, 'Precision': [1.0, 0.5], 'Recall': 0.724719, 'F1': 0.840391, 'Learning time': 0.781, 'Inference time': 1.109}}


Amount of data: 20
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;title(I, H), venue(I, A).;false;false
0;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
0;false;haswordvenue(A, L), haswordtitle(M, L).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordtitle(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordauthor(I, H).;false;true
2;true,false,false;haswordvenue(A, J), haswordtitle(K, J).;false;false
2;false;haswordvenue(A, L), haswordtitle(M, L).;true;false
2;false,true;haswordauthor(N, L).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;title(E, D), venue(E, B).;false;true
3;true,true,false;title(F, D), venue(F, A).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, A).;false;true
4;true,true,false;title(F, D), venue(F, B).;false;false
4;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
4;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
4;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
4;false,true;haswordauthor(M, K).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, B).;false;true
5;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
5;true,false;haswordvenue(B, H), haswordtitle(I, H).;true;true
5;true,false,true;title(J, I), venue(J, B).;false;false
5;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
5;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;title(E, D), venue(E, A).;false;true
6;true,true,false;title(F, D), venue(F, B).;false;false
6;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
6;true,false,true;title(I, H), venue(I, B).;false;false
6;true,false,false;haswordvenue(A, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;title(F, D), venue(F, A).;false;false
7;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
7;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
7;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
7;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;title(E, D), venue(E, A).;false;true
8;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
8;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
8;true,false,true;title(J, I), venue(J, A).;false;false
8;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
8;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, B).;false;true
9;true,true,false;title(F, D), venue(F, A).;false;false
9;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
9;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
9;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
9;false,true;haswordauthor(M, K).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995123;  // std dev = 0.000, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.0010060779566550668;  // std dev = 0.926, 7.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=1 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.1418510649004878;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7194734122109542;  // std dev = 7.30e-08, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | else if ( genre(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(F, B) )
%   | | | then return 8.835646163369372E-4;  // std dev = 0.926, 7.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=1 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.12544463852839138;  // std dev = 7.45e-09, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A) )
%   | | then return 0.40605359920337636;  // std dev = 1.559, 26.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=20 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.11231637819360636;  // std dev = 2.95e-09, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.45420967616426;  // std dev = 0.000, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | else if ( genre(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(F, B) )
%   | | | then return -0.05622246724868777;  // std dev = 0.926, 7.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=1 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.1015963294878363;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( genre(B, E) )
%   | | then return 0.345724653540719;  // std dev = 2.98e-08, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.047409393308334206;  // std dev = 0.926, 7.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=1 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.09269127618926096;  // std dev = 1.32e-09, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.27217601359745286;  // std dev = 0.000, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | else if ( movie(E, B) )
%   | | then if ( genre(B, F) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.04021228879291255;  // std dev = 0.926, 7.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=1 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.08518475138839686;  // std dev = 8.33e-09, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( genre(B, E) )
%   | | then return 0.22170011173019347;  // std dev = 3.33e-08, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | else if ( movie(F, B) )
%   | | | then return -0.034274809637341704;  // std dev = 0.926, 7.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=1 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.07877675473109172;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.18580738372901;  // std dev = 2.58e-08, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | else if ( genre(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(F, B) )
%   | | | then return -0.029334200441857725;  // std dev = 0.926, 7.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=1 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.07324622576333704;  // std dev = 9.31e-10, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A) )
%   | | then if ( genre(A, F) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.10964367780725441;  // std dev = 1.016, 26.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=20 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.06842697784420272;  // std dev = 3.73e-09, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.14517740695615183;  // std dev = 2.36e-08, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | else if ( genre(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(F, A) )
%   | | | then return -0.041084662078114835;  // std dev = 0.926, 7.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=1 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.06419184008202619;  // std dev = 1.86e-09, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 0.97199
   AUC PR    = 0.81824
   CLL	      = -0.121064
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.724719
   F1        = 0.840391


Total learning time: 0.671 seconds
Total inference time: 0.976 seconds
AUC ROC: 0.97199


Results scoring model
   AUC ROC   = 0.9925
   AUC PR    = 0.994231
   CLL	      = -0.159464
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.95
   F1        = 0.974359


Total scoring time: 0.375 seconds
Parameter learned model CLL: -0.159464


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 19], 'true,false,false,true': [0.926, 6, 1], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 14, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [7.3e-08, 0, 19], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.926, 6, 1], 'true,false,false,false': [0.0, 0, 0], 'false,true': [7.45e-09, 14, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [1.559, 6, 20], 'true,false,false': [0.0, 0, 0], 'false,true': [2.95e-09, 14, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 19], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.926, 6, 1], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 14, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [2.98e-08, 0, 19], 'true,false,false,true': [0.926, 6, 1], 'true,false,false,false': [0.0, 0, 0], 'false,true': [1.32e-09, 14, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, B)', 'true,false,true': 'genre(B, F)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 0, 19], 'true,false,true,true': [0.0, 0, 0], 'true,false,true,false': [0.926, 6, 1], 'true,false,false': [0.0, 0, 0], 'false,true': [8.33e-09, 14, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [3.33e-08, 0, 19], 'true,false,false,true': [0.926, 6, 1], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 14, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, A)'}, {'true,true': [2.58e-08, 0, 19], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.926, 6, 1], 'true,false,false,false': [0.0, 0, 0], 'false,true': [9.31e-10, 14, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'true,false,true': 'genre(A, F)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 0, 0], 'true,false,true,true': [0.0, 0, 0], 'true,false,true,false': [1.016, 6, 20], 'true,false,false': [0.0, 0, 0], 'false,true': [3.73e-09, 14, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [2.36e-08, 0, 19], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.926, 6, 1], 'true,false,false,false': [0.0, 0, 0], 'false,true': [1.86e-09, 14, 0], 'false,false': [0.0, 0, 0]}]]
[{'': [0.17751479289940847, -1.1895246692412391e-17], 'true': [nan, 0.17751479289940847], 'true,false': [-2.8047739569477637e-16, 0.12244897959183677], 'true,false,false': [0.12244897959183677, nan], 'false': [-1.1895246692412391e-17, nan]}, {'': [0.13456080824186348, 3.96508223080413e-18], 'true': [2.8047739569477637e-16, 0.12244897959183668], 'true,false': [nan, 0.12244897959183668], 'true,false,false': [0.12244897959183668, nan], 'false': [3.96508223080413e-18, nan]}, {'': [0.09348019663091603, 9.912705577010326e-18], 'true': [nan, 0.09348019663091603], 'true,false': [0.09348019663091603, nan], 'false': [9.912705577010326e-18, nan]}, {'': [0.08422731316359368, -3.96508223080413e-18], 'true': [-9.349246523159212e-17, 0.12244897959183673], 'true,false': [nan, 0.12244897959183673], 'true,false,false': [0.12244897959183673, nan], 'false': [-3.96508223080413e-18, nan]}, {'': [0.06337492110212836, 3.96508223080413e-18], 'true': [nan, 0.06337492110212836], 'true,false': [4.674623261579606e-17, 0.12244897959183673], 'true,false,false': [0.12244897959183673, nan], 'false': [3.96508223080413e-18, nan]}, {'': [0.052166734217853145, 4.956352788505163e-18], 'true': [-4.674623261579606e-17, 0.12244897959183669], 'true,false': [0.12244897959183669, nan], 'true,false,true': [nan, 0.12244897959183669], 'false': [4.956352788505163e-18, nan]}, {'': [0.045858423986400436, -9.912705577010326e-19], 'true': [nan, 0.045858423986400436], 'true,false': [5.843279076974508e-17, 0.12244897959183673], 'true,false,false': [0.12244897959183673, nan], 'false': [-9.912705577010326e-19, nan]}, {'': [0.04207357862511028, 9.912705577010326e-19], 'true': [3.5059674461847047e-17, 0.12244897959183669], 'true,false': [nan, 0.12244897959183669], 'true,false,false': [0.12244897959183669, nan], 'false': [9.912705577010326e-19, nan]}, {'': [0.039665268124158964, 9.912705577010326e-19], 'true': [nan, 0.039665268124158964], 'true,false': [0.039665268124158964, nan], 'true,false,true': [nan, 0.039665268124158964], 'false': [9.912705577010326e-19, nan]}, {'': [0.03979283660904947, 3.469446951953614e-18], 'true': [2.921639538487254e-17, 0.12244897959183676], 'true,false': [nan, 0.12244897959183676], 'true,false,false': [0.12244897959183676, nan], 'false': [3.469446951953614e-18, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;true;genre(B, D).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;true;genre(B, D).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;true;genre(B, E).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;true;genre(B, D).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(B, E).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;true;genre(B, D).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;true;genre(B, D).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.8581489350995123;  // std dev = 0.000, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | else if ( female(A) )
%   | | then return 0.10814893509951219;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | else return -0.14185106490048777;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else return -0.1418510649004878;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7194734122109542;  // std dev = 7.30e-08, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | else if ( female(A), actor(B) )
%   | | then return -0.1555325621642444;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else return 0.11703338056264537;  // std dev = 0.840, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   else return -0.12544463852839138;  // std dev = 7.45e-09, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B) )
%   | then if ( female(A) )
%   | | then return 0.5781250106073886;  // std dev = 0.075, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else return 0.5553664367462846;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else return -0.1375185872667251;  // std dev = 0.003, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   else return -0.11231637819360636;  // std dev = 1.18e-08, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.4143153717394492;  // std dev = 0.012, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | else if ( female(A) )
%   | | then return 0.09200403425714038;  // std dev = 0.737, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | else return -0.12321443173033224;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else return -0.1015963294878363;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.3185469929744828;  // std dev = 0.011, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | else if ( female(A), actor(B) )
%   | | then return -0.13091437381593232;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else return 0.0950961396108251;  // std dev = 0.712, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   else return -0.09269127618926096;  // std dev = 7.45e-09, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.25369604675375057;  // std dev = 0.009, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | else if ( female(A) )
%   | | then return 0.08546166058682272;  // std dev = 0.700, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | else return -0.12020878013128483;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else return -0.08518475138839686;  // std dev = 8.33e-09, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.20871534476332188;  // std dev = 0.008, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | else if ( female(A), actor(B) )
%   | | then return -0.1258291400301941;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else return 0.08733046721277898;  // std dev = 0.677, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   else return -0.07877675473109172;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.17633218496123523;  // std dev = 0.007, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | else if ( female(A) )
%   | | then return 0.07903691292756213;  // std dev = 0.664, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | else return -0.11677480385640306;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else return -0.07324622576333704;  // std dev = 3.73e-09, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.11301544648843571;  // std dev = 0.019, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else if ( female(A) )
%   | | then return 0.19134380623356181;  // std dev = 0.134, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else return 0.15386611983961673;  // std dev = 5.27e-09, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   else return -0.06842697784420272;  // std dev = 3.73e-09, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.13090192747157192;  // std dev = 0.015, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | else if ( female(A), actor(B) )
%   | | then return -0.10927592761685416;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else return 0.07633808150073829;  // std dev = 0.594, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   else return -0.06419184008202619;  // std dev = 6.97e-09, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */


Results
   AUC ROC   = 0.991594
   AUC PR    = 0.821339
   CLL	      = -0.118272
   Precision = 0.693548 at threshold = 0.5
   Recall    = 0.724719
   F1        = 0.708791


Total learning time: 0.92 seconds
Total inference time: 0.958 seconds
AUC ROC: 0.991594


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.117875
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.95
   F1        = 0.974359


Total scoring time: 0.355 seconds
Refined model CLL: -0.117875


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.991594
   AUC PR    = 0.821339
   CLL	      = -0.118272
   Precision = 0.693548 at threshold = 0.5
   Recall    = 0.724719
   F1        = 0.708791


Total learning time: 2.321 seconds
Total inference time: 0.958 seconds
AUC ROC: 0.991594
Total revision time: 2.321
Best scored revision CLL: -0.117875


Dataset: 4_cora_imdb, Fold: 3, Type: Transfer (trRDN-B), Time: 00:02:55
{'AUC ROC': 0.991594, 'AUC PR': 0.821339, 'CLL': -0.118272, 'Precision': [0.693548, 0.5], 'Recall': 0.724719, 'F1': 0.708791, 'Learning time': 2.321, 'Inference time': 0.958, 'parameter_20': {'AUC ROC': 0.97199, 'AUC PR': 0.81824, 'CLL': -0.121064, 'Precision': [1.0, 0.5], 'Recall': 0.724719, 'F1': 0.840391, 'Learning time': 0.671, 'Inference time': 0.976}}


Amount of data: 25
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;title(I, H), venue(I, A).;false;false
0;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
0;false;haswordvenue(A, L), haswordtitle(M, L).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordtitle(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordauthor(I, H).;false;true
2;true,false,false;haswordvenue(A, J), haswordtitle(K, J).;false;false
2;false;haswordvenue(A, L), haswordtitle(M, L).;true;false
2;false,true;haswordauthor(N, L).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;title(E, D), venue(E, B).;false;true
3;true,true,false;title(F, D), venue(F, A).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, A).;false;true
4;true,true,false;title(F, D), venue(F, B).;false;false
4;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
4;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
4;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
4;false,true;haswordauthor(M, K).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, B).;false;true
5;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
5;true,false;haswordvenue(B, H), haswordtitle(I, H).;true;true
5;true,false,true;title(J, I), venue(J, B).;false;false
5;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
5;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;title(E, D), venue(E, A).;false;true
6;true,true,false;title(F, D), venue(F, B).;false;false
6;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
6;true,false,true;title(I, H), venue(I, B).;false;false
6;true,false,false;haswordvenue(A, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;title(F, D), venue(F, A).;false;false
7;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
7;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
7;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
7;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;title(E, D), venue(E, A).;false;true
8;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
8;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
8;true,false,true;title(J, I), venue(J, A).;false;false
8;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
8;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, B).;false;true
9;true,true,false;title(F, D), venue(F, A).;false;false
9;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
9;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
9;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
9;false,true;haswordauthor(M, K).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995121;  // std dev = 8.43e-08, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.058148935099512175;  // std dev = 1.265, 10.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.1418510649004878;  // std dev = 0.000, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7194734122109543;  // std dev = 5.96e-08, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | else if ( genre(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(F, B) )
%   | | | then return 0.05092203251355425;  // std dev = 1.265, 10.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.12544463852839138;  // std dev = 0.000, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A) )
%   | | then return 0.40051184912761295;  // std dev = 1.849, 33.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=25 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.11231637819360635;  // std dev = 3.48e-09, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.4555838391866745;  // std dev = 0.000, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | else if ( genre(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(F, B) )
%   | | | then return -0.015782206598198446;  // std dev = 1.265, 10.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.10159632948783631;  // std dev = 0.000, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( genre(B, E) )
%   | | then return 0.34666796319538395;  // std dev = 2.11e-08, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.013123518669285999;  // std dev = 1.265, 10.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.09269127618926094;  // std dev = 2.28e-09, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.2728151997703287;  // std dev = 0.000, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | else if ( movie(E, B) )
%   | | then if ( genre(B, F) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.010930965911533936;  // std dev = 1.265, 10.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.08518475138839685;  // std dev = 1.18e-08, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( genre(B, E) )
%   | | then return 0.22214648796938186;  // std dev = 3.33e-08, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | | else if ( movie(F, B) )
%   | | | then return -0.00911737450493803;  // std dev = 1.265, 10.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.07877675473109173;  // std dev = 0.000, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.18613115238698882;  // std dev = 0.000, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | else if ( genre(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(F, B) )
%   | | | then return -0.007613475456196822;  // std dev = 1.265, 10.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.07324622576333704;  // std dev = 0.000, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A) )
%   | | then if ( genre(A, F) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.109282565144641;  // std dev = 1.339, 33.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=25 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.06842697784420272;  // std dev = 0.000, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.14544766645992935;  // std dev = 7.45e-09, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | else if ( genre(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(F, A) )
%   | | | then return -0.0248362114193542;  // std dev = 1.265, 10.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.06419184008202619;  // std dev = 1.86e-09, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 0.97199
   AUC PR    = 0.81824
   CLL	      = -0.127098
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.724719
   F1        = 0.840391


Total learning time: 0.719 seconds
Total inference time: 1.047 seconds
AUC ROC: 0.97199


Results scoring model
   AUC ROC   = 0.9872
   AUC PR    = 0.989437
   CLL	      = -0.184684
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.92
   F1        = 0.958333


Total scoring time: 0.369 seconds
Parameter learned model CLL: -0.184684


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [8.43e-08, 0, 23], 'true,false,false,true': [1.265, 8, 2], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 17, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [5.96e-08, 0, 23], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [1.265, 8, 2], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 17, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [1.849, 8, 25], 'true,false,false': [0.0, 0, 0], 'false,true': [3.48e-09, 17, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 23], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [1.265, 8, 2], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 17, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [2.11e-08, 0, 23], 'true,false,false,true': [1.265, 8, 2], 'true,false,false,false': [0.0, 0, 0], 'false,true': [2.28e-09, 17, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, B)', 'true,false,true': 'genre(B, F)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 0, 23], 'true,false,true,true': [0.0, 0, 0], 'true,false,true,false': [1.265, 8, 2], 'true,false,false': [0.0, 0, 0], 'false,true': [1.18e-08, 17, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [3.33e-08, 0, 23], 'true,false,false,true': [1.265, 8, 2], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 17, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 0, 23], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [1.265, 8, 2], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 17, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'true,false,true': 'genre(A, F)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 0, 0], 'true,false,true,true': [0.0, 0, 0], 'true,false,true,false': [1.339, 8, 25], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 17, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [7.45e-09, 0, 23], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [1.265, 8, 2], 'true,false,false,false': [0.0, 0, 0], 'false,true': [1.86e-09, 17, 0], 'false,false': [0.0, 0, 0]}]]
[{'': [0.1836547291092757, -3.2653618371328133e-18], 'true': [nan, 0.1836547291092757], 'true,false': [3.089316242435218e-16, 0.16000000000000003], 'true,false,false': [0.16000000000000003, nan], 'false': [-3.2653618371328133e-18, nan]}, {'': [0.14288431393748194, 0.0], 'true': [1.544658121217609e-16, 0.16], 'true,false': [nan, 0.16], 'true,false,false': [0.16, nan], 'false': [0.0, nan]}, {'': [0.10363871808991056, 1.3061447348531253e-17], 'true': [nan, 0.10363871808991056], 'true,false': [0.10363871808991056, nan], 'false': [1.3061447348531253e-17, nan]}, {'': [0.09541117382675789, -8.163404592832034e-18], 'true': [-2.3169871818264136e-16, 0.16000000000000006], 'true,false': [nan, 0.16000000000000006], 'true,false,false': [0.16000000000000006, nan], 'false': [-8.163404592832034e-18, nan]}, {'': [0.07582504995146581, 4.89804275569922e-18], 'true': [nan, 0.07582504995146581], 'true,false': [1.9308226515220113e-17, 0.16000000000000006], 'true,false,false': [0.16000000000000006, nan], 'false': [4.89804275569922e-18, nan]}, {'': [0.0654891955041383, 8.163404592832034e-18], 'true': [-1.9308226515220113e-17, 0.15999999999999998], 'true,false': [0.15999999999999998, nan], 'true,false,true': [nan, 0.15999999999999998], 'false': [8.163404592832034e-18, nan]}, {'': [0.05978060977034395, -2.44902137784961e-18], 'true': [nan, 0.05978060977034395], 'true,false': [4.827056628805028e-17, 0.15999999999999998], 'true,false,false': [0.15999999999999998, nan], 'false': [-2.44902137784961e-18, nan]}, {'': [0.05641276913513472, 0.0], 'true': [-3.37893964016352e-17, 0.1600000000000001], 'true,false': [nan, 0.1600000000000001], 'true,false,false': [0.1600000000000001, nan], 'false': [0.0, nan]}, {'': [0.05429966359637448, -8.163404592832033e-19], 'true': [nan, 0.05429966359637448], 'true,false': [0.05429966359637448, nan], 'true,false,true': [nan, 0.05429966359637448], 'false': [-8.163404592832033e-19, nan]}, {'': [0.05460901541330539, 3.2653618371328133e-18], 'true': [2.413528314402514e-18, 0.16000000000000003], 'true,false': [nan, 0.16000000000000003], 'true,false,false': [0.16000000000000003, nan], 'false': [3.2653618371328133e-18, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;true;genre(B, D).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;true;genre(B, D).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;true;genre(B, E).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;true;genre(B, D).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(B, E).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;true;genre(B, D).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;true;genre(B, D).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.8581489350995121;  // std dev = 8.43e-08, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | else if ( female(A) )
%   | | then return 0.19148226843284552;  // std dev = 1.155, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   | | else return -0.14185106490048777;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   else return -0.1418510649004878;  // std dev = 0.000, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7194734122109543;  // std dev = 5.96e-08, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | else if ( female(A), actor(B) )
%   | | then return -0.1667945087684516;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return 0.19410540472492188;  // std dev = 1.107, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   else return -0.12544463852839138;  // std dev = 0.000, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.14660735249143564;  // std dev = 0.005, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else if ( female(A) )
%   | | then return 0.5936886696701811;  // std dev = 0.090, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | else return 0.5553664367462846;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   else return -0.11231637819360635;  // std dev = 1.49e-08, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.4130708694897393;  // std dev = 0.022, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | else if ( female(A) )
%   | | then return 0.14636487050714708;  // std dev = 0.949, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   | | else return -0.13074893793430772;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   else return -0.10159632948783631;  // std dev = 0.000, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.3177089000122746;  // std dev = 0.020, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | else if ( female(A), actor(B) )
%   | | then return -0.14485290419625232;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return 0.14309784679391505;  // std dev = 0.900, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   else return -0.09269127618926094;  // std dev = 9.13e-09, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.2531265694207143;  // std dev = 0.017, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | else if ( female(A) )
%   | | then return 0.12471497433246748;  // std dev = 0.875, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   | | else return -0.1321588475950904;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   else return -0.08518475138839685;  // std dev = 1.18e-08, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.20831433522940154;  // std dev = 0.015, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | else if ( female(A), actor(B) )
%   | | then return -0.1423762048152952;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return 0.12160385634036423;  // std dev = 0.829, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   else return -0.07877675473109173;  // std dev = 0.000, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.17603883427461078;  // std dev = 0.013, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | else if ( female(A) )
%   | | then return 0.10634569888515603;  // std dev = 0.804, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   | | else return -0.13095295831318185;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   else return -0.07324622576333704;  // std dev = 0.000, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.12739472453113687;  // std dev = 0.030, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else if ( female(A) )
%   | | then return 0.2101618487813924;  // std dev = 0.143, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | else return 0.1543023012234003;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   else return -0.06842697784420272;  // std dev = 0.000, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.13013383008323165;  // std dev = 0.025, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | else if ( female(A), actor(B) )
%   | | then return -0.12356254460783829;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return 0.09453875281704716;  // std dev = 0.689, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   else return -0.06419184008202619;  // std dev = 7.45e-09, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */


Results
   AUC ROC   = 0.991594
   AUC PR    = 0.821339
   CLL	      = -0.118397
   Precision = 0.75 at threshold = 0.5
   Recall    = 0.960674
   F1        = 0.842365


Total learning time: 0.922 seconds
Total inference time: 1.005 seconds
AUC ROC: 0.991594


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.122281
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 0.362 seconds
Refined model CLL: -0.122281


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.991594
   AUC PR    = 0.821339
   CLL	      = -0.118397
   Precision = 0.75 at threshold = 0.5
   Recall    = 0.960674
   F1        = 0.842365


Total learning time: 2.3720000000000003 seconds
Total inference time: 1.005 seconds
AUC ROC: 0.991594
Total revision time: 2.3720000000000003
Best scored revision CLL: -0.122281


Dataset: 4_cora_imdb, Fold: 3, Type: Transfer (trRDN-B), Time: 00:03:00
{'AUC ROC': 0.991594, 'AUC PR': 0.821339, 'CLL': -0.118397, 'Precision': [0.75, 0.5], 'Recall': 0.960674, 'F1': 0.842365, 'Learning time': 2.3720000000000003, 'Inference time': 1.005, 'parameter_25': {'AUC ROC': 0.97199, 'AUC PR': 0.81824, 'CLL': -0.127098, 'Precision': [1.0, 0.5], 'Recall': 0.724719, 'F1': 0.840391, 'Learning time': 0.719, 'Inference time': 1.047}}


Starting fold 4

Target train facts examples: 927
Target train pos examples: 337
Target train neg examples: 12345

Target test facts examples: 151
Target test pos	 examples: 45
Target test neg examples: 1891

Amount of data: 5
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;title(I, H), venue(I, A).;false;false
0;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
0;false;haswordvenue(A, L), haswordtitle(M, L).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordtitle(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordauthor(I, H).;false;true
2;true,false,false;haswordvenue(A, J), haswordtitle(K, J).;false;false
2;false;haswordvenue(A, L), haswordtitle(M, L).;true;false
2;false,true;haswordauthor(N, L).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;title(E, D), venue(E, B).;false;true
3;true,true,false;title(F, D), venue(F, A).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, A).;false;true
4;true,true,false;title(F, D), venue(F, B).;false;false
4;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
4;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
4;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
4;false,true;haswordauthor(M, K).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, B).;false;true
5;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
5;true,false;haswordvenue(B, H), haswordtitle(I, H).;true;true
5;true,false,true;title(J, I), venue(J, B).;false;false
5;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
5;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;title(E, D), venue(E, A).;false;true
6;true,true,false;title(F, D), venue(F, B).;false;false
6;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
6;true,false,true;title(I, H), venue(I, B).;false;false
6;true,false,false;haswordvenue(A, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;title(F, D), venue(F, A).;false;false
7;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
7;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
7;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
7;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;title(E, D), venue(E, A).;false;true
8;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
8;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
8;true,false,true;title(J, I), venue(J, A).;false;false
8;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
8;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, B).;false;true
9;true,true,false;title(F, D), venue(F, A).;false;false
9;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
9;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
9;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
9;false,true;haswordauthor(M, K).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995121;  // std dev = 2.11e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.3581489350995122;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.14185106490048777;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7194734122109545;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( genre(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(F, B) )
%   | | | then return 0.308741135785635;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.12544463852839138;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A) )
%   | | then return 0.38453554075331425;  // std dev = 1.074, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.11231637819360639;  // std dev = 1.86e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.4595491277450547;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( genre(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(F, B) )
%   | | | then return 0.17886798622066657;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.1015963294878363;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( genre(B, E) )
%   | | then return 0.34939331695275805;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.13869542621542652;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.09269127618926094;  // std dev = 1.32e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.2746612368863842;  // std dev = 5.27e-09, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( movie(E, B) )
%   | | then if ( genre(B, F) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.10611505429027068;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.08518475138839687;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( genre(B, E) )
%   | | then return 0.22343469364307134;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.08051696017991494;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.07877675473109173;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.18706480872738052;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( genre(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(F, B) )
%   | | | then return 0.060792491657266204;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.07324622576333704;  // std dev = 9.31e-10, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A) )
%   | | then if ( genre(A, F) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.09483802792313854;  // std dev = 1.011, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.06842697784420272;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.1479086230267569;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( genre(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(F, A) )
%   | | | then return 0.022172559260709837;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.0641918400820262;  // std dev = 9.31e-10, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.222981
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 0.622 seconds
Total inference time: 0.863 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 0.92
   AUC PR    = 0.931429
   CLL	      = -0.338039
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.6
   F1        = 0.75


Total scoring time: 0.331 seconds
Parameter learned model CLL: -0.338039


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [2.11e-08, 0, 3], 'true,false,false,true': [1.0, 2, 2], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 3, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 3], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [1.0, 2, 2], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 3, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [1.074, 2, 5], 'true,false,false': [0.0, 0, 0], 'false,true': [1.86e-09, 3, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 3], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [1.0, 2, 2], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 3, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 3], 'true,false,false,true': [1.0, 2, 2], 'true,false,false,false': [0.0, 0, 0], 'false,true': [1.32e-09, 3, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, B)', 'true,false,true': 'genre(B, F)', 'false': 'movie(G, A)'}, {'true,true': [5.27e-09, 0, 3], 'true,false,true,true': [0.0, 0, 0], 'true,false,true,false': [1.0, 2, 2], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 3, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 3], 'true,false,false,true': [1.0, 2, 2], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 3, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 0, 3], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [1.0, 2, 2], 'true,false,false,false': [0.0, 0, 0], 'false,true': [9.31e-10, 3, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'true,false,true': 'genre(A, F)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 0, 0], 'true,false,true,true': [0.0, 0, 0], 'true,false,true,false': [1.011, 2, 5], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 3, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 3], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [1.0, 2, 2], 'true,false,false,false': [0.0, 0, 0], 'false,true': [9.31e-10, 3, 0], 'false,false': [0.0, 0, 0]}]]
[{'': [0.20408163265306106, 0.0], 'true': [nan, 0.20408163265306106], 'true,false': [1.4802973661668753e-16, 0.25], 'true,false,false': [0.25, nan], 'false': [0.0, nan]}, {'': [0.18417167417898575, 0.0], 'true': [0.0, 0.25], 'true,false': [nan, 0.25], 'true,false,false': [0.25, nan], 'false': [0.0, nan]}, {'': [0.1647445391264636, 2.3129646346357427e-18], 'true': [nan, 0.1647445391264636], 'true,false': [0.1647445391264636, nan], 'false': [2.3129646346357427e-18, nan]}, {'': [0.1621506701732491, -1.1564823173178713e-18], 'true': [-3.700743415417188e-17, 0.25], 'true,false': [nan, 0.25], 'true,false,false': [0.25, nan], 'false': [-1.1564823173178713e-18, nan]}, {'': [0.15372904518232508, 2.3129646346357427e-18], 'true': [nan, 0.15372904518232508], 'true,false': [-1.850371707708594e-17, 0.25], 'true,false,false': [0.25, nan], 'false': [2.3129646346357427e-18, nan]}, {'': [0.14981415893903405, 0.0], 'true': [9.25185853854297e-18, 0.25], 'true,false': [0.25, nan], 'true,false,true': [nan, 0.25], 'false': [0.0, nan]}, {'': [0.1478593008665092, 0.0], 'true': [nan, 0.1478593008665092], 'true,false': [0.0, 0.25], 'true,false,false': [0.25, nan], 'false': [0.0, nan]}, {'': [0.1467619668714095, 1.1564823173178713e-18], 'true': [0.0, 0.24999999999999997], 'true,false': [nan, 0.24999999999999997], 'true,false,false': [0.24999999999999997, nan], 'false': [1.1564823173178713e-18, nan]}, {'': [0.14606761444005373, -5.782411586589357e-19], 'true': [nan, 0.14606761444005373], 'true,false': [0.14606761444005373, nan], 'true,false,true': [nan, 0.14606761444005373], 'false': [-5.782411586589357e-19, nan]}, {'': [0.1467288712811541, 5.782411586589357e-19], 'true': [-4.625929269271485e-18, 0.24999999999999997], 'true,false': [nan, 0.24999999999999997], 'true,false,false': [0.24999999999999997, nan], 'false': [5.782411586589357e-19, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;true;genre(B, D).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;true;genre(B, D).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;true;genre(B, E).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;true;genre(B, D).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(B, E).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;true;genre(B, D).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;true;genre(B, D).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.8581489350995121;  // std dev = 2.11e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return 0.3581489350995122;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   else return -0.14185106490048777;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7194734122109545;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return 0.308741135785635;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   else return -0.12544463852839138;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( female(A), director(B) )
%   | then return 0.6223817474170518;  // std dev = 0.164, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return 0.20615088575551094;  // std dev = 0.911, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   else return -0.11231637819360639;  // std dev = 2.63e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.4355597716312986;  // std dev = 0.084, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return 0.19358774113618865;  // std dev = 0.956, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   else return -0.1015963294878363;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.3338720602753577;  // std dev = 0.077, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return 0.15131528340607364;  // std dev = 0.954, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   else return -0.09269127618926094;  // std dev = 2.63e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.26467908375860294;  // std dev = 0.068, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return 0.1164956573627286;  // std dev = 0.953, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   else return -0.08518475138839687;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.2167854675634557;  // std dev = 0.060, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return 0.08883178117956135;  // std dev = 0.952, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   else return -0.07877675473109173;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.18244658263781954;  // std dev = 0.053, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return 0.06734430435481348;  // std dev = 0.951, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   else return -0.07324622576333704;  // std dev = 1.86e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( female(A), director(B) )
%   | then return 0.24966459597008397;  // std dev = 0.274, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return -0.01867026024727661;  // std dev = 0.853, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   else return -0.06842697784420272;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.1398602753814208;  // std dev = 0.071, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return 0.03891554828722735;  // std dev = 0.923, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   else return -0.0641918400820262;  // std dev = 1.32e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */


Results
   AUC ROC   = 0.999201
   AUC PR    = 0.95488
   CLL	      = -0.208672
   Precision = 0.918367 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.957447


Total learning time: 0.575 seconds
Total inference time: 0.755 seconds
AUC ROC: 0.999201


Results scoring model
   AUC ROC   = 0.96
   AUC PR    = 0.971429
   CLL	      = -0.306819
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.8
   F1        = 0.888889


Total scoring time: 0.321 seconds
Refined model CLL: -0.306819


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.999201
   AUC PR    = 0.95488
   CLL	      = -0.208672
   Precision = 0.918367 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.957447


Total learning time: 1.849 seconds
Total inference time: 0.755 seconds
AUC ROC: 0.999201
Total revision time: 1.849
Best scored revision CLL: -0.306819


Dataset: 4_cora_imdb, Fold: 4, Type: Transfer (trRDN-B), Time: 00:03:04
{'AUC ROC': 0.999201, 'AUC PR': 0.95488, 'CLL': -0.208672, 'Precision': [0.918367, 0.5], 'Recall': 1.0, 'F1': 0.957447, 'Learning time': 1.849, 'Inference time': 0.755, 'parameter_5': {'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.222981, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 0.622, 'Inference time': 0.863}}


Amount of data: 10
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;title(I, H), venue(I, A).;false;false
0;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
0;false;haswordvenue(A, L), haswordtitle(M, L).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordtitle(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordauthor(I, H).;false;true
2;true,false,false;haswordvenue(A, J), haswordtitle(K, J).;false;false
2;false;haswordvenue(A, L), haswordtitle(M, L).;true;false
2;false,true;haswordauthor(N, L).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;title(E, D), venue(E, B).;false;true
3;true,true,false;title(F, D), venue(F, A).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, A).;false;true
4;true,true,false;title(F, D), venue(F, B).;false;false
4;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
4;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
4;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
4;false,true;haswordauthor(M, K).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, B).;false;true
5;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
5;true,false;haswordvenue(B, H), haswordtitle(I, H).;true;true
5;true,false,true;title(J, I), venue(J, B).;false;false
5;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
5;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;title(E, D), venue(E, A).;false;true
6;true,true,false;title(F, D), venue(F, B).;false;false
6;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
6;true,false,true;title(I, H), venue(I, B).;false;false
6;true,false,false;haswordvenue(A, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;title(F, D), venue(F, A).;false;false
7;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
7;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
7;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
7;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;title(E, D), venue(E, A).;false;true
8;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
8;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
8;true,false,true;title(J, I), venue(J, A).;false;false
8;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
8;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, B).;false;true
9;true,true,false;title(F, D), venue(F, A).;false;false
9;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
9;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
9;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
9;false,true;haswordauthor(M, K).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995123;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.3581489350995123;  // std dev = 1.414, 8.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=4 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.1418510649004878;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7194734122109544;  // std dev = 2.11e-08, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else if ( genre(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(F, B) )
%   | | | then return 0.30874113578563506;  // std dev = 1.414, 8.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=4 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.12544463852839138;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A) )
%   | | then return 0.38453554075331425;  // std dev = 1.519, 14.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=10 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.11231637819360639;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.4595491277450545;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else if ( genre(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(F, B) )
%   | | | then return 0.17886798622066652;  // std dev = 1.414, 8.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=4 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.10159632948783627;  // std dev = 1.32e-09, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( genre(B, E) )
%   | | then return 0.3493933169527579;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.1386954262154265;  // std dev = 1.414, 8.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=4 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.09269127618926097;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.2746612368863841;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else if ( movie(E, B) )
%   | | then if ( genre(B, F) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.10611505429027071;  // std dev = 1.414, 8.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=4 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.08518475138839687;  // std dev = 2.63e-09, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( genre(B, E) )
%   | | then return 0.22343469364307134;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.08051696017991494;  // std dev = 1.414, 8.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=4 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.07877675473109173;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.18706480872738052;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else if ( genre(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(F, B) )
%   | | | then return 0.0607924916572662;  // std dev = 1.414, 8.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=4 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.07324622576333704;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A) )
%   | | then if ( genre(A, F) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.09483802792313854;  // std dev = 1.430, 14.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=10 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.06842697784420272;  // std dev = 1.86e-09, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.1479086230267569;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else if ( genre(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(F, A) )
%   | | | then return 0.02217255926070983;  // std dev = 1.414, 8.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=4 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.0641918400820262;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.222981
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 0.627 seconds
Total inference time: 0.868 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 0.92
   AUC PR    = 0.928214
   CLL	      = -0.338039
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.6
   F1        = 0.75


Total scoring time: 0.352 seconds
Parameter learned model CLL: -0.338039


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 6], 'true,false,false,true': [1.414, 4, 4], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 6, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [2.11e-08, 0, 6], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [1.414, 4, 4], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 6, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [1.519, 4, 10], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 6, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 6], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [1.414, 4, 4], 'true,false,false,false': [0.0, 0, 0], 'false,true': [1.32e-09, 6, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 6], 'true,false,false,true': [1.414, 4, 4], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 6, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, B)', 'true,false,true': 'genre(B, F)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 0, 6], 'true,false,true,true': [0.0, 0, 0], 'true,false,true,false': [1.414, 4, 4], 'true,false,false': [0.0, 0, 0], 'false,true': [2.63e-09, 6, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 6], 'true,false,false,true': [1.414, 4, 4], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 6, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 0, 6], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [1.414, 4, 4], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 6, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'true,false,true': 'genre(A, F)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 0, 0], 'true,false,true,true': [0.0, 0, 0], 'true,false,true,false': [1.43, 4, 10], 'true,false,false': [0.0, 0, 0], 'false,true': [1.86e-09, 6, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 6], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [1.414, 4, 4], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 6, 0], 'false,false': [0.0, 0, 0]}]]
[{'': [0.20408163265306115, -6.938893903907228e-18], 'true': [nan, 0.20408163265306115], 'true,false': [-1.4802973661668753e-16, 0.24999999999999986], 'true,false,false': [0.24999999999999986, nan], 'false': [-6.938893903907228e-18, nan]}, {'': [0.18417167417898586, -2.3129646346357427e-18], 'true': [7.401486830834377e-17, 0.24999999999999994], 'true,false': [nan, 0.24999999999999994], 'true,false,false': [0.24999999999999994, nan], 'false': [-2.3129646346357427e-18, nan]}, {'': [0.1647445391264636, 0.0], 'true': [nan, 0.1647445391264636], 'true,false': [0.1647445391264636, nan], 'false': [0.0, nan]}, {'': [0.16215067017324905, 0.0], 'true': [-3.700743415417188e-17, 0.25], 'true,false': [nan, 0.25], 'true,false,false': [0.25, nan], 'false': [0.0, nan]}, {'': [0.15372904518232502, 1.1564823173178713e-18], 'true': [nan, 0.15372904518232502], 'true,false': [-1.850371707708594e-17, 0.25], 'true,false,false': [0.25, nan], 'false': [1.1564823173178713e-18, nan]}, {'': [0.14981415893903405, 1.1564823173178713e-18], 'true': [0.0, 0.25], 'true,false': [0.25, nan], 'true,false,true': [nan, 0.25], 'false': [1.1564823173178713e-18, nan]}, {'': [0.14785930086650917, -1.1564823173178713e-18], 'true': [nan, 0.14785930086650917], 'true,false': [0.0, 0.25], 'true,false,false': [0.25, nan], 'false': [-1.1564823173178713e-18, nan]}, {'': [0.1467619668714095, 0.0], 'true': [-4.625929269271485e-18, 0.24999999999999997], 'true,false': [nan, 0.24999999999999997], 'true,false,false': [0.24999999999999997, nan], 'false': [0.0, nan]}, {'': [0.1460676144400538, 5.782411586589357e-19], 'true': [nan, 0.1460676144400538], 'true,false': [0.1460676144400538, nan], 'true,false,true': [nan, 0.1460676144400538], 'false': [5.782411586589357e-19, nan]}, {'': [0.14672887128115408, -5.782411586589357e-19], 'true': [-4.625929269271485e-18, 0.24999999999999992], 'true,false': [nan, 0.24999999999999992], 'true,false,false': [0.24999999999999992, nan], 'false': [-5.782411586589357e-19, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;true;genre(B, D).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;true;genre(B, D).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;true;genre(B, E).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;true;genre(B, D).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(B, E).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;true;genre(B, D).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;true;genre(B, D).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.8581489350995123;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else if ( actor(B) )
%   | | then return -0.14185106490048777;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return 0.8581489350995122;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else return -0.1418510649004878;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7194734122109544;  // std dev = 2.11e-08, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else if ( actor(B) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return 0.7194734122109545;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else return -0.12544463852839138;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.11231637819360639;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else return 0.5553664367462846;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else return -0.11231637819360639;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.4175135841583099;  // std dev = 2.11e-08, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else if ( actor(B) )
%   | | then return -0.10159632948783628;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return 0.41751358415830997;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else return -0.10159632948783627;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.3207118471601497;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else if ( actor(B) )
%   | | then return -0.09269127618926096;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return 0.32071184716014967;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else return -0.09269127618926097;  // std dev = 2.63e-09, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.2551722425694894;  // std dev = 7.45e-09, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else if ( actor(B) )
%   | | then return -0.08518475138839687;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return 0.25517224256948945;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else return -0.08518475138839687;  // std dev = 2.63e-09, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.20975771563253556;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else if ( actor(B) )
%   | | then return -0.07877675473109173;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return 0.20975771563253554;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else return -0.07877675473109173;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.17709649774527736;  // std dev = 5.27e-09, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else if ( actor(B) )
%   | | then return -0.07324622576333704;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return 0.17709649774527736;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else return -0.07324622576333704;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.06842697784420272;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else return 0.15274385809367094;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else return -0.06842697784420272;  // std dev = 1.86e-09, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.13400703000801117;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else if ( actor(B) )
%   | | then return -0.0641918400820262;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return 0.13400703000801117;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else return -0.0641918400820262;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */


Results
   AUC ROC   = 0.998942
   AUC PR    = 0.918367
   CLL	      = -0.068112
   Precision = 0.918367 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.957447


Total learning time: 0.732 seconds
Total inference time: 0.752 seconds
AUC ROC: 0.998942


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.094637
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 0.333 seconds
Refined model CLL: -0.094637


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.998942
   AUC PR    = 0.918367
   CLL	      = -0.068112
   Precision = 0.918367 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.957447


Total learning time: 2.044 seconds
Total inference time: 0.752 seconds
AUC ROC: 0.998942
Total revision time: 2.044
Best scored revision CLL: -0.094637


Dataset: 4_cora_imdb, Fold: 4, Type: Transfer (trRDN-B), Time: 00:03:08
{'AUC ROC': 0.998942, 'AUC PR': 0.918367, 'CLL': -0.068112, 'Precision': [0.918367, 0.5], 'Recall': 1.0, 'F1': 0.957447, 'Learning time': 2.044, 'Inference time': 0.752, 'parameter_10': {'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.222981, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 0.627, 'Inference time': 0.868}}


Amount of data: 15
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;title(I, H), venue(I, A).;false;false
0;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
0;false;haswordvenue(A, L), haswordtitle(M, L).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordtitle(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordauthor(I, H).;false;true
2;true,false,false;haswordvenue(A, J), haswordtitle(K, J).;false;false
2;false;haswordvenue(A, L), haswordtitle(M, L).;true;false
2;false,true;haswordauthor(N, L).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;title(E, D), venue(E, B).;false;true
3;true,true,false;title(F, D), venue(F, A).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, A).;false;true
4;true,true,false;title(F, D), venue(F, B).;false;false
4;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
4;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
4;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
4;false,true;haswordauthor(M, K).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, B).;false;true
5;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
5;true,false;haswordvenue(B, H), haswordtitle(I, H).;true;true
5;true,false,true;title(J, I), venue(J, B).;false;false
5;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
5;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;title(E, D), venue(E, A).;false;true
6;true,true,false;title(F, D), venue(F, B).;false;false
6;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
6;true,false,true;title(I, H), venue(I, B).;false;false
6;true,false,false;haswordvenue(A, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;title(F, D), venue(F, A).;false;false
7;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
7;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
7;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
7;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;title(E, D), venue(E, A).;false;true
8;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
8;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
8;true,false,true;title(J, I), venue(J, A).;false;false
8;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
8;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, B).;false;true
9;true,true,false;title(F, D), venue(F, A).;false;false
9;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
9;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
9;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
9;false,true;haswordauthor(M, K).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995123;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.30259337954395676;  // std dev = 1.491, 9.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=4 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.1418510649004878;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7194734122109542;  // std dev = 4.21e-08, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else if ( genre(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(F, B) )
%   | | | then return 0.2616318086752123;  // std dev = 1.491, 9.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=4 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.12544463852839138;  // std dev = 5.27e-09, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A) )
%   | | then return 0.4041240065176283;  // std dev = 1.668, 20.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=15 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.11231637819360638;  // std dev = 1.86e-09, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.45468807057588767;  // std dev = 2.98e-08, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else if ( genre(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(F, B) )
%   | | | then return 0.14114831517422152;  // std dev = 1.491, 9.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=4 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.10159632948783628;  // std dev = 1.32e-09, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( genre(B, E) )
%   | | then return 0.346052986760577;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.11052314329478957;  // std dev = 1.491, 9.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=4 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.09269127618926097;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.27239850582647485;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else if ( movie(E, B) )
%   | | then if ( genre(B, F) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.08550709846303045;  // std dev = 1.491, 9.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=4 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.08518475138839687;  // std dev = 3.73e-09, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( genre(B, E) )
%   | | then return 0.22185550924387562;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.06560385684678481;  // std dev = 1.491, 9.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=4 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.07877675473109172;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.18592011220964144;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else if ( genre(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(F, B) )
%   | | | then return 0.05004786286241875;  // std dev = 1.491, 9.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=4 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.07324622576333704;  // std dev = 9.31e-10, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A) )
%   | | then if ( genre(A, F) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.10478764108255004;  // std dev = 1.515, 20.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=15 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.06842697784420272;  // std dev = 2.63e-09, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.1458598352609969;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else if ( genre(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(F, A) )
%   | | | then return 0.012527148261835097;  // std dev = 1.491, 9.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=4 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.06419184008202619;  // std dev = 1.61e-09, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.199648
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 0.666 seconds
Total inference time: 0.862 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 0.955556
   AUC PR    = 0.96054
   CLL	      = -0.277402
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.733333
   F1        = 0.846154


Total scoring time: 0.356 seconds
Parameter learned model CLL: -0.277402


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 11], 'true,false,false,true': [1.491, 5, 4], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 10, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [4.21e-08, 0, 11], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [1.491, 5, 4], 'true,false,false,false': [0.0, 0, 0], 'false,true': [5.27e-09, 10, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [1.668, 5, 15], 'true,false,false': [0.0, 0, 0], 'false,true': [1.86e-09, 10, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [2.98e-08, 0, 11], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [1.491, 5, 4], 'true,false,false,false': [0.0, 0, 0], 'false,true': [1.32e-09, 10, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 11], 'true,false,false,true': [1.491, 5, 4], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 10, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, B)', 'true,false,true': 'genre(B, F)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 0, 11], 'true,false,true,true': [0.0, 0, 0], 'true,false,true,false': [1.491, 5, 4], 'true,false,false': [0.0, 0, 0], 'false,true': [3.73e-09, 10, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 11], 'true,false,false,true': [1.491, 5, 4], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 10, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 0, 11], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [1.491, 5, 4], 'true,false,false,false': [0.0, 0, 0], 'false,true': [9.31e-10, 10, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'true,false,true': 'genre(A, F)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 0, 0], 'true,false,true,true': [0.0, 0, 0], 'true,false,true,false': [1.515, 5, 15], 'true,false,false': [0.0, 0, 0], 'false,true': [2.63e-09, 10, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 11], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [1.491, 5, 4], 'true,false,false,false': [0.0, 0, 0], 'false,true': [1.61e-09, 10, 0], 'false,false': [0.0, 0, 0]}]]
[{'': [0.18749999999999964, -1.1102230246251566e-17], 'true': [nan, 0.18749999999999964], 'true,false': [-1.6148698540002277e-16, 0.2469135802469134], 'true,false,false': [0.2469135802469134, nan], 'false': [-1.1102230246251566e-17, nan]}, {'': [0.16299179725833576, 2.7755575615628915e-18], 'true': [1.6148698540002277e-16, 0.24691358024691354], 'true,false': [nan, 0.24691358024691354], 'true,false,false': [0.24691358024691354, nan], 'false': [2.7755575615628915e-18, nan]}, {'': [0.13906855552401862, 0.0], 'true': [nan, 0.13906855552401862], 'true,false': [0.13906855552401862, nan], 'false': [0.0, nan]}, {'': [0.1354421377199019, 1.3877787807814458e-18], 'true': [8.074349270001139e-17, 0.24691358024691368], 'true,false': [nan, 0.24691358024691368], 'true,false,false': [0.24691358024691368, nan], 'false': [1.3877787807814458e-18, nan]}, {'': [0.12484100213395814, 0.0], 'true': [nan, 0.12484100213395814], 'true,false': [-4.0371746350005693e-17, 0.24691358024691354], 'true,false,false': [0.24691358024691354, nan], 'false': [0.0, nan]}, {'': [0.11975588965231761, 1.3877787807814458e-18], 'true': [0.0, 0.24691358024691348], 'true,false': [0.24691358024691348, nan], 'true,false,true': [nan, 0.24691358024691348], 'false': [1.3877787807814458e-18, nan]}, {'': [0.11715371938312444, 0.0], 'true': [nan, 0.11715371938312444], 'true,false': [-4.0371746350005693e-17, 0.2469135802469136], 'true,false,false': [0.2469135802469136, nan], 'false': [0.0, nan]}, {'': [0.1156802749764229, 6.938893903907229e-19], 'true': [0.0, 0.2469135802469136], 'true,false': [nan, 0.2469135802469136], 'true,false,false': [0.2469135802469136, nan], 'false': [6.938893903907229e-19, nan]}, {'': [0.11475707372755735, 6.938893903907229e-19], 'true': [nan, 0.11475707372755735], 'true,false': [0.11475707372755735, nan], 'true,false,true': [nan, 0.11475707372755735], 'false': [6.938893903907229e-19, nan]}, {'': [0.1155110684531592, 1.3877787807814458e-18], 'true': [-1.0092936587501423e-17, 0.24691358024691354], 'true,false': [nan, 0.24691358024691354], 'true,false,false': [0.24691358024691354, nan], 'false': [1.3877787807814458e-18, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;true;genre(B, D).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;true;genre(B, D).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;true;genre(B, E).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;true;genre(B, D).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(B, E).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;true;genre(B, D).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;true;genre(B, D).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.8581489350995123;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else if ( actor(B) )
%   | | then return -0.14185106490048777;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.8581489350995122;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else return -0.1418510649004878;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7194734122109542;  // std dev = 4.21e-08, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else if ( actor(B) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.7194734122109545;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else return -0.12544463852839138;  // std dev = 5.27e-09, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.11231637819360638;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else return 0.5553664367462846;  // std dev = 0.000, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   else return -0.11231637819360638;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.4175135841583098;  // std dev = 4.21e-08, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else if ( actor(B) )
%   | | then return -0.10159632948783633;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.41751358415830997;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else return -0.10159632948783628;  // std dev = 3.73e-09, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.3207118471601497;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else if ( actor(B) )
%   | | then return -0.09269127618926098;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.32071184716014967;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else return -0.09269127618926097;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.2551722425694894;  // std dev = 2.11e-08, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else if ( actor(B) )
%   | | then return -0.08518475138839687;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.25517224256948945;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else return -0.08518475138839687;  // std dev = 3.73e-09, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.20975771563253562;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else if ( actor(B) )
%   | | then return -0.07877675473109177;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.20975771563253554;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else return -0.07877675473109172;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.17709649774527736;  // std dev = 7.45e-09, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else if ( actor(B) )
%   | | then return -0.07324622576333704;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.17709649774527736;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else return -0.07324622576333704;  // std dev = 2.63e-09, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B) )
%   | then return 0.15274385809367091;  // std dev = 1.67e-08, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else return -0.06842697784420272;  // std dev = 1.86e-09, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else return -0.06842697784420272;  // std dev = 2.63e-09, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.13400703000801117;  // std dev = 5.27e-09, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else if ( actor(B) )
%   | | then return -0.0641918400820262;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.13400703000801117;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else return -0.06419184008202619;  // std dev = 3.73e-09, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */


Results
   AUC ROC   = 0.998942
   AUC PR    = 0.918367
   CLL	      = -0.068112
   Precision = 0.918367 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.957447


Total learning time: 0.777 seconds
Total inference time: 0.785 seconds
AUC ROC: 0.998942


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.094637
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 0.366 seconds
Refined model CLL: -0.094637


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.998942
   AUC PR    = 0.918367
   CLL	      = -0.068112
   Precision = 0.918367 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.957447


Total learning time: 2.165 seconds
Total inference time: 0.785 seconds
AUC ROC: 0.998942
Total revision time: 2.165
Best scored revision CLL: -0.094637


Dataset: 4_cora_imdb, Fold: 4, Type: Transfer (trRDN-B), Time: 00:03:12
{'AUC ROC': 0.998942, 'AUC PR': 0.918367, 'CLL': -0.068112, 'Precision': [0.918367, 0.5], 'Recall': 1.0, 'F1': 0.957447, 'Learning time': 2.165, 'Inference time': 0.785, 'parameter_15': {'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.199648, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 0.666, 'Inference time': 0.862}}


Amount of data: 20
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;title(I, H), venue(I, A).;false;false
0;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
0;false;haswordvenue(A, L), haswordtitle(M, L).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordtitle(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordauthor(I, H).;false;true
2;true,false,false;haswordvenue(A, J), haswordtitle(K, J).;false;false
2;false;haswordvenue(A, L), haswordtitle(M, L).;true;false
2;false,true;haswordauthor(N, L).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;title(E, D), venue(E, B).;false;true
3;true,true,false;title(F, D), venue(F, A).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, A).;false;true
4;true,true,false;title(F, D), venue(F, B).;false;false
4;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
4;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
4;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
4;false,true;haswordauthor(M, K).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, B).;false;true
5;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
5;true,false;haswordvenue(B, H), haswordtitle(I, H).;true;true
5;true,false,true;title(J, I), venue(J, B).;false;false
5;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
5;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;title(E, D), venue(E, A).;false;true
6;true,true,false;title(F, D), venue(F, B).;false;false
6;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
6;true,false,true;title(I, H), venue(I, B).;false;false
6;true,false,false;haswordvenue(A, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;title(F, D), venue(F, A).;false;false
7;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
7;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
7;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
7;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;title(E, D), venue(E, A).;false;true
8;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
8;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
8;true,false,true;title(J, I), venue(J, A).;false;false
8;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
8;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, B).;false;true
9;true,true,false;title(F, D), venue(F, A).;false;false
9;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
9;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
9;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
9;false,true;haswordauthor(M, K).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995123;  // std dev = 0.000, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.3126943896449669;  // std dev = 1.651, 11.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=5 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.1418510649004878;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7194734122109542;  // std dev = 5.16e-08, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else if ( genre(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(F, B) )
%   | | | then return 0.27021896952830904;  // std dev = 1.651, 11.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=5 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.12544463852839138;  // std dev = 7.45e-09, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A) )
%   | | then return 0.4160596714285163;  // std dev = 1.848, 26.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=20 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.11231637819360636;  // std dev = 2.95e-09, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.45173029507010204;  // std dev = 0.000, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else if ( genre(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(F, B) )
%   | | | then return 0.14473957151556088;  // std dev = 1.651, 11.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=5 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.1015963294878363;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( genre(B, E) )
%   | | then return 0.3440241053250129;  // std dev = 2.11e-08, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.11297136598679779;  // std dev = 1.651, 11.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=5 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.09269127618926096;  // std dev = 1.32e-09, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.2710234097952019;  // std dev = 2.58e-08, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else if ( movie(E, B) )
%   | | then if ( genre(B, F) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.08712892808412577;  // std dev = 1.651, 11.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=5 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.08518475138839686;  // std dev = 8.33e-09, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( genre(B, E) )
%   | | then return 0.22089474538698645;  // std dev = 0.000, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.06665471688441528;  // std dev = 1.651, 11.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=5 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.07877675473109172;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.18522290602287123;  // std dev = 0.000, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else if ( genre(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(F, B) )
%   | | | then return 0.05071558044839864;  // std dev = 1.651, 11.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=5 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.07324622576333704;  // std dev = 9.31e-10, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A) )
%   | | then if ( genre(A, F) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.10792881750467452;  // std dev = 1.679, 26.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=20 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.06842697784420272;  // std dev = 3.73e-09, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.14498282146474312;  // std dev = 1.67e-08, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else if ( genre(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(F, A) )
%   | | | then return 0.012012385015116372;  // std dev = 1.651, 11.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=5 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.06419184008202619;  // std dev = 1.86e-09, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.204496
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 0.746 seconds
Total inference time: 0.9 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 0.9625
   AUC PR    = 0.966139
   CLL	      = -0.262671
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.75
   F1        = 0.857143


Total scoring time: 0.387 seconds
Parameter learned model CLL: -0.262671


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 15], 'true,false,false,true': [1.651, 6, 5], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 14, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [5.16e-08, 0, 15], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [1.651, 6, 5], 'true,false,false,false': [0.0, 0, 0], 'false,true': [7.45e-09, 14, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [1.848, 6, 20], 'true,false,false': [0.0, 0, 0], 'false,true': [2.95e-09, 14, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 15], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [1.651, 6, 5], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 14, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [2.11e-08, 0, 15], 'true,false,false,true': [1.651, 6, 5], 'true,false,false,false': [0.0, 0, 0], 'false,true': [1.32e-09, 14, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, B)', 'true,false,true': 'genre(B, F)', 'false': 'movie(G, A)'}, {'true,true': [2.58e-08, 0, 15], 'true,false,true,true': [0.0, 0, 0], 'true,false,true,false': [1.651, 6, 5], 'true,false,false': [0.0, 0, 0], 'false,true': [8.33e-09, 14, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 15], 'true,false,false,true': [1.651, 6, 5], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 14, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 0, 15], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [1.651, 6, 5], 'true,false,false,false': [0.0, 0, 0], 'false,true': [9.31e-10, 14, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'true,false,true': 'genre(A, F)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 0, 0], 'true,false,true,true': [0.0, 0, 0], 'true,false,true,false': [1.679, 6, 20], 'true,false,false': [0.0, 0, 0], 'false,true': [3.73e-09, 14, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [1.67e-08, 0, 15], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [1.651, 6, 5], 'true,false,false,false': [0.0, 0, 0], 'false,true': [1.86e-09, 14, 0], 'false,false': [0.0, 0, 0]}]]
[{'': [0.17751479289940847, -1.1895246692412391e-17], 'true': [nan, 0.17751479289940847], 'true,false': [-2.3684757858670006e-16, 0.24793388429752045], 'true,false,false': [0.24793388429752045, nan], 'false': [-1.1895246692412391e-17, nan]}, {'': [0.15415823574505408, 3.96508223080413e-18], 'true': [1.7763568394002506e-16, 0.2479338842975206], 'true,false': [nan, 0.2479338842975206], 'true,false,false': [0.2479338842975206, nan], 'false': [3.96508223080413e-18, nan]}, {'': [0.13135834334505886, 9.912705577010326e-18], 'true': [nan, 0.13135834334505886], 'true,false': [0.13135834334505886, nan], 'false': [9.912705577010326e-18, nan]}, {'': [0.1278982782937872, -3.96508223080413e-18], 'true': [-2.960594732333751e-17, 0.2479338842975206], 'true,false': [nan, 0.2479338842975206], 'true,false,false': [0.2479338842975206, nan], 'false': [-3.96508223080413e-18, nan]}, {'': [0.1179255572304443, 3.96508223080413e-18], 'true': [nan, 0.1179255572304443], 'true,false': [2.960594732333751e-17, 0.24793388429752064], 'true,false,false': [0.24793388429752064, nan], 'false': [3.96508223080413e-18, nan]}, {'': [0.11314929833685723, 4.956352788505163e-18], 'true': [4.4408920985006264e-17, 0.2479338842975206], 'true,false': [0.2479338842975206, nan], 'true,false,true': [nan, 0.2479338842975206], 'false': [4.956352788505163e-18, nan]}, {'': [0.11070183234297211, -9.912705577010326e-19], 'true': [nan, 0.11070183234297211], 'true,false': [0.0, 0.24793388429752056], 'true,false,false': [0.24793388429752056, nan], 'false': [-9.912705577010326e-19, nan]}, {'': [0.10931110549344442, 9.912705577010326e-19], 'true': [-7.401486830834377e-18, 0.2479338842975207], 'true,false': [nan, 0.2479338842975207], 'true,false,false': [0.2479338842975207, nan], 'false': [9.912705577010326e-19, nan]}, {'': [0.10843527843675173, 9.912705577010326e-19], 'true': [nan, 0.10843527843675173], 'true,false': [0.10843527843675173, nan], 'true,false,true': [nan, 0.10843527843675173], 'false': [9.912705577010326e-19, nan]}, {'': [0.10921076702525977, 3.469446951953614e-18], 'true': [1.850371707708594e-17, 0.2479338842975206], 'true,false': [nan, 0.2479338842975206], 'true,false,false': [0.2479338842975206, nan], 'false': [3.469446951953614e-18, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;true;genre(B, D).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;true;genre(B, D).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;true;genre(B, E).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;true;genre(B, D).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(B, E).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;true;genre(B, D).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;true;genre(B, D).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.8581489350995123;  // std dev = 0.000, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else if ( actor(B) )
%   | | then return -0.1418510649004878;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else return 0.8581489350995122;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return -0.1418510649004878;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7194734122109542;  // std dev = 5.16e-08, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else if ( actor(B) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else return 0.7194734122109545;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return -0.12544463852839138;  // std dev = 7.45e-09, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B) )
%   | then return 0.5553664367462846;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | else return -0.11231637819360639;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   else return -0.11231637819360636;  // std dev = 1.18e-08, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.4175135841583098;  // std dev = 4.71e-08, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else if ( actor(B) )
%   | | then return -0.10159632948783627;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else return 0.4175135841583099;  // std dev = 1.49e-08, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return -0.1015963294878363;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.32071184716014967;  // std dev = 0.000, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else if ( actor(B) )
%   | | then return -0.09269127618926097;  // std dev = 2.63e-09, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else return 0.32071184716014967;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return -0.09269127618926096;  // std dev = 7.45e-09, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.2551722425694894;  // std dev = 2.36e-08, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else if ( actor(B) )
%   | | then return -0.08518475138839687;  // std dev = 2.63e-09, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else return 0.25517224256948945;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return -0.08518475138839686;  // std dev = 8.33e-09, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.20975771563253562;  // std dev = 0.000, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else if ( actor(B) )
%   | | then return -0.07877675473109173;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else return 0.20975771563253556;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return -0.07877675473109172;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.17709649774527741;  // std dev = 0.000, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else if ( actor(B) )
%   | | then return -0.07324622576333704;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else return 0.17709649774527736;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return -0.07324622576333704;  // std dev = 3.73e-09, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.06842697784420272;  // std dev = 1.86e-09, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else return 0.15274385809367086;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   else return -0.06842697784420272;  // std dev = 3.73e-09, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.13400703000801117;  // std dev = 0.000, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else if ( actor(B) )
%   | | then return -0.0641918400820262;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else return 0.13400703000801117;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return -0.06419184008202619;  // std dev = 6.97e-09, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */


Results
   AUC ROC   = 0.998942
   AUC PR    = 0.918367
   CLL	      = -0.068112
   Precision = 0.918367 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.957447


Total learning time: 0.887 seconds
Total inference time: 0.828 seconds
AUC ROC: 0.998942


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.094637
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 0.354 seconds
Refined model CLL: -0.094637


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.998942
   AUC PR    = 0.918367
   CLL	      = -0.068112
   Precision = 0.918367 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.957447


Total learning time: 2.374 seconds
Total inference time: 0.828 seconds
AUC ROC: 0.998942
Total revision time: 2.374
Best scored revision CLL: -0.094637


Dataset: 4_cora_imdb, Fold: 4, Type: Transfer (trRDN-B), Time: 00:03:17
{'AUC ROC': 0.998942, 'AUC PR': 0.918367, 'CLL': -0.068112, 'Precision': [0.918367, 0.5], 'Recall': 1.0, 'F1': 0.957447, 'Learning time': 2.374, 'Inference time': 0.828, 'parameter_20': {'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.204496, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 0.746, 'Inference time': 0.9}}


Amount of data: 25
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;title(I, H), venue(I, A).;false;false
0;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
0;false;haswordvenue(A, L), haswordtitle(M, L).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordtitle(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordauthor(I, H).;false;true
2;true,false,false;haswordvenue(A, J), haswordtitle(K, J).;false;false
2;false;haswordvenue(A, L), haswordtitle(M, L).;true;false
2;false,true;haswordauthor(N, L).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;title(E, D), venue(E, B).;false;true
3;true,true,false;title(F, D), venue(F, A).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, A).;false;true
4;true,true,false;title(F, D), venue(F, B).;false;false
4;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
4;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
4;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
4;false,true;haswordauthor(M, K).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, B).;false;true
5;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
5;true,false;haswordvenue(B, H), haswordtitle(I, H).;true;true
5;true,false,true;title(J, I), venue(J, B).;false;false
5;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
5;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;title(E, D), venue(E, A).;false;true
6;true,true,false;title(F, D), venue(F, B).;false;false
6;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
6;true,false,true;title(I, H), venue(I, B).;false;false
6;true,false,false;haswordvenue(A, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;title(F, D), venue(F, A).;false;false
7;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
7;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
7;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
7;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;title(E, D), venue(E, A).;false;true
8;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
8;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
8;true,false,true;title(J, I), venue(J, A).;false;false
8;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
8;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, B).;false;true
9;true,true,false;title(F, D), venue(F, A).;false;false
9;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
9;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
9;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
9;false,true;haswordauthor(M, K).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995123;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.29564893509951234;  // std dev = 1.984, 16.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=7 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.1418510649004878;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7194734122109542;  // std dev = 7.30e-08, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | else if ( genre(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(F, B) )
%   | | | then return 0.2557225255975429;  // std dev = 1.984, 16.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=7 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.12544463852839138;  // std dev = 7.45e-09, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A) )
%   | | then return 0.39498804979683255;  // std dev = 2.218, 34.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=25 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.11231637819360635;  // std dev = 3.48e-09, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.4569542244277923;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | else if ( genre(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(F, B) )
%   | | | then return 0.13883026018599526;  // std dev = 1.984, 16.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=7 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.10159632948783631;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( genre(B, E) )
%   | | then return 0.34760926510533735;  // std dev = 4.21e-08, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.10896317210345867;  // std dev = 1.984, 16.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=7 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.09269127618926094;  // std dev = 2.28e-09, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.2734529060965384;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | else if ( movie(E, B) )
%   | | then if ( genre(B, F) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.08449287865582714;  // std dev = 1.984, 16.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=7 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.08518475138839685;  // std dev = 1.05e-08, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( genre(B, E) )
%   | | then return 0.22259165686083948;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.06496436399150972;  // std dev = 1.984, 16.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=7 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.07877675473109173;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.1864539182980849;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | else if ( genre(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(F, B) )
%   | | | then return 0.04965739116697018;  // std dev = 1.984, 16.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=7 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.07324622576333704;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A) )
%   | | then if ( genre(A, F) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.10239333998422884;  // std dev = 2.016, 34.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=25 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.06842697784420272;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.1465318132018478;  // std dev = 1.29e-08, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | else if ( genre(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(F, A) )
%   | | | then return 0.013002897638593441;  // std dev = 1.984, 16.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=7 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.06419184008202619;  // std dev = 1.86e-09, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.196327
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 0.679 seconds
Total inference time: 0.887 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 0.9496
   AUC PR    = 0.95536
   CLL	      = -0.289092
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.72
   F1        = 0.837209


Total scoring time: 0.394 seconds
Parameter learned model CLL: -0.289092


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 18], 'true,false,false,true': [1.984, 9, 7], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 16, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [7.3e-08, 0, 18], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [1.984, 9, 7], 'true,false,false,false': [0.0, 0, 0], 'false,true': [7.45e-09, 16, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [2.218, 9, 25], 'true,false,false': [0.0, 0, 0], 'false,true': [3.48e-09, 16, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 18], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [1.984, 9, 7], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 16, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [4.21e-08, 0, 18], 'true,false,false,true': [1.984, 9, 7], 'true,false,false,false': [0.0, 0, 0], 'false,true': [2.28e-09, 16, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, B)', 'true,false,true': 'genre(B, F)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 0, 18], 'true,false,true,true': [0.0, 0, 0], 'true,false,true,false': [1.984, 9, 7], 'true,false,false': [0.0, 0, 0], 'false,true': [1.05e-08, 16, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 18], 'true,false,false,true': [1.984, 9, 7], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 16, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 0, 18], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [1.984, 9, 7], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 16, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'true,false,true': 'genre(A, F)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 0, 0], 'true,false,true,true': [0.0, 0, 0], 'true,false,true,false': [2.016, 9, 25], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 16, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [1.29e-08, 0, 18], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [1.984, 9, 7], 'true,false,false,false': [0.0, 0, 0], 'false,true': [1.86e-09, 16, 0], 'false,false': [0.0, 0, 0]}]]
[{'': [0.1946366782006932, -6.938893903907228e-18], 'true': [nan, 0.1946366782006932], 'true,false': [-2.9605947323337506e-16, 0.24609375000000003], 'true,false,false': [0.24609375000000003, nan], 'false': [-6.938893903907228e-18, nan]}, {'': [0.16938900245017344, 3.469446951953614e-18], 'true': [2.9605947323337506e-16, 0.24609375000000006], 'true,false': [nan, 0.24609375000000006], 'true,false,false': [0.24609375000000006, nan], 'false': [3.469446951953614e-18, nan]}, {'': [0.14474520390498355, 1.214306433183765e-17], 'true': [nan, 0.14474520390498355], 'true,false': [0.14474520390498355, nan], 'false': [1.214306433183765e-17, nan]}, {'': [0.14102199196191692, -6.938893903907228e-18], 'true': [-7.401486830834377e-17, 0.24609375000000006], 'true,false': [nan, 0.24609375000000006], 'true,false,false': [0.24609375000000006, nan], 'false': [-6.938893903907228e-18, nan]}, {'': [0.12999754655627854, 5.204170427930421e-18], 'true': [nan, 0.12999754655627854], 'true,false': [9.868649107779169e-17, 0.24609374999999994], 'true,false,false': [0.24609374999999994, nan], 'false': [5.204170427930421e-18, nan]}, {'': [0.12470440907220898, 6.938893903907228e-18], 'true': [-2.4671622769447922e-17, 0.24609374999999997], 'true,false': [0.24609374999999997, nan], 'true,false,true': [nan, 0.24609374999999997], 'false': [6.938893903907228e-18, nan]}, {'': [0.121998920999746, -1.734723475976807e-18], 'true': [nan, 0.121998920999746], 'true,false': [-1.850371707708594e-17, 0.24609374999999994], 'true,false,false': [0.24609374999999994, nan], 'false': [-1.734723475976807e-18, nan]}, {'': [0.12047095802120973, 0.0], 'true': [0.0, 0.2460937499999999], 'true,false': [nan, 0.2460937499999999], 'true,false,false': [0.2460937499999999, nan], 'false': [0.0, nan]}, {'': [0.11951706149763497, 0.0], 'true': [nan, 0.11951706149763497], 'true,false': [0.11951706149763497, nan], 'true,false,true': [nan, 0.11951706149763497], 'false': [0.0, nan]}, {'': [0.12025089250168829, 3.469446951953614e-18], 'true': [9.25185853854297e-18, 0.24609375000000003], 'true,false': [nan, 0.24609375000000003], 'true,false,false': [0.24609375000000003, nan], 'false': [3.469446951953614e-18, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;true;genre(B, D).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;true;genre(B, D).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;true;genre(B, E).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;true;genre(B, D).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(B, E).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;true;genre(B, D).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;true;genre(B, D).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.8581489350995123;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | else if ( actor(B) )
%   | | then return -0.1418510649004878;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | else return 0.8581489350995123;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   else return -0.1418510649004878;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7194734122109542;  // std dev = 7.30e-08, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | else if ( actor(B) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | else return 0.7194734122109543;  // std dev = 2.11e-08, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   else return -0.12544463852839138;  // std dev = 7.45e-09, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.11231637819360639;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | else return 0.5553664367462846;  // std dev = 0.000, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   else return -0.11231637819360635;  // std dev = 1.39e-08, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.4175135841583098;  // std dev = 5.58e-08, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | else if ( actor(B) )
%   | | then return -0.10159632948783627;  // std dev = 5.27e-09, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | else return 0.41751358415830986;  // std dev = 2.58e-08, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   else return -0.10159632948783631;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.3207118471601496;  // std dev = 2.11e-08, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | else if ( actor(B) )
%   | | then return -0.09269127618926097;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | else return 0.3207118471601497;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   else return -0.09269127618926094;  // std dev = 9.13e-09, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.25517224256948945;  // std dev = 1.49e-08, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | else if ( actor(B) )
%   | | then return -0.08518475138839687;  // std dev = 3.73e-09, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | else return 0.2551722425694894;  // std dev = 1.29e-08, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   else return -0.08518475138839685;  // std dev = 1.05e-08, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.20975771563253562;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | else if ( actor(B) )
%   | | then return -0.07877675473109173;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | else return 0.2097577156325356;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   else return -0.07877675473109173;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.17709649774527744;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | else if ( actor(B) )
%   | | then return -0.07324622576333704;  // std dev = 2.63e-09, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | else return 0.17709649774527736;  // std dev = 5.27e-09, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   else return -0.07324622576333704;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.06842697784420272;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | else return 0.15274385809367086;  // std dev = 0.000, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   else return -0.06842697784420272;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.13400703000801117;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | else if ( actor(B) )
%   | | then return -0.0641918400820262;  // std dev = 2.63e-09, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | else return 0.13400703000801117;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   else return -0.06419184008202619;  // std dev = 7.45e-09, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */


Results
   AUC ROC   = 0.998942
   AUC PR    = 0.918367
   CLL	      = -0.068112
   Precision = 0.918367 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.957447


Total learning time: 0.898 seconds
Total inference time: 0.787 seconds
AUC ROC: 0.998942


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.094637
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 0.367 seconds
Refined model CLL: -0.094637


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.998942
   AUC PR    = 0.918367
   CLL	      = -0.068112
   Precision = 0.918367 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.957447


Total learning time: 2.338 seconds
Total inference time: 0.787 seconds
AUC ROC: 0.998942
Total revision time: 2.338
Best scored revision CLL: -0.094637


Dataset: 4_cora_imdb, Fold: 4, Type: Transfer (trRDN-B), Time: 00:03:21
{'AUC ROC': 0.998942, 'AUC PR': 0.918367, 'CLL': -0.068112, 'Precision': [0.918367, 0.5], 'Recall': 1.0, 'F1': 0.957447, 'Learning time': 2.338, 'Inference time': 0.787, 'parameter_25': {'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.196327, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 0.679, 'Inference time': 0.887}}


Starting fold 5

Target train facts examples: 915
Target train pos examples: 337
Target train neg examples: 12165

Target test facts examples: 163
Target test pos	 examples: 45
Target test neg examples: 2071

Amount of data: 5
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;title(I, H), venue(I, A).;false;false
0;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
0;false;haswordvenue(A, L), haswordtitle(M, L).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordtitle(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordauthor(I, H).;false;true
2;true,false,false;haswordvenue(A, J), haswordtitle(K, J).;false;false
2;false;haswordvenue(A, L), haswordtitle(M, L).;true;false
2;false,true;haswordauthor(N, L).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;title(E, D), venue(E, B).;false;true
3;true,true,false;title(F, D), venue(F, A).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, A).;false;true
4;true,true,false;title(F, D), venue(F, B).;false;false
4;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
4;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
4;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
4;false,true;haswordauthor(M, K).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, B).;false;true
5;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
5;true,false;haswordvenue(B, H), haswordtitle(I, H).;true;true
5;true,false,true;title(J, I), venue(J, B).;false;false
5;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
5;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;title(E, D), venue(E, A).;false;true
6;true,true,false;title(F, D), venue(F, B).;false;false
6;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
6;true,false,true;title(I, H), venue(I, B).;false;false
6;true,false,false;haswordvenue(A, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;title(F, D), venue(F, A).;false;false
7;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
7;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
7;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
7;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;title(E, D), venue(E, A).;false;true
8;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
8;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
8;true,false,true;title(J, I), venue(J, A).;false;false
8;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
8;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, B).;false;true
9;true,true,false;title(F, D), venue(F, A).;false;false
9;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
9;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
9;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
9;false,true;haswordauthor(M, K).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14185106490048777;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995121;  // std dev = 2.11e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.2581489350995122;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.14185106490048777;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.508243899526118;  // std dev = 0.732, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | else if ( genre(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(F, B) )
%   | | | then return 0.22373365448410584;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.12544463852839138;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1925372682092009;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( movie(E, A) )
%   | | then return 0.3455682125180411;  // std dev = 1.236, 8.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=5 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.11231637819360639;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.35040684477752965;  // std dev = 0.594, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | else if ( genre(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(F, B) )
%   | | | then return 0.1256273153054753;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.10159632948783628;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.2182766537246706;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( genre(B, E) )
%   | | then return 0.4347817172611139;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.09992103872658205;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.09269127618926096;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.20350338016229533;  // std dev = 0.447, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | else if ( movie(E, B) )
%   | | then if ( genre(B, F) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.07852484718827797;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.08518475138839687;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.2157663546183951;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( genre(B, E) )
%   | | then return 0.28891632635051534;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.06116182541636025;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.07877675473109173;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.12962918790889053;  // std dev = 0.359, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | else if ( genre(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(F, B) )
%   | | | then return 0.04732788506525861;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.07324622576333704;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.20154788053486825;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( movie(E, A) )
%   | | then if ( genre(A, F) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.10188773166583015;  // std dev = 1.121, 8.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=5 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.06842697784420272;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.10310573024002571;  // std dev = 0.317, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | else if ( genre(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(F, A) )
%   | | | then return 0.012563003604757372;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.0641918400820262;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 0.97178
   AUC PR    = 0.824078
   CLL	      = -0.176461
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.777778
   F1        = 0.875


Total learning time: 0.657 seconds
Total inference time: 0.891 seconds
AUC ROC: 0.97178


Results scoring model
   AUC ROC   = 0.88
   AUC PR    = 0.907955
   CLL	      = -0.42255
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.6
   F1        = 0.75


Total scoring time: 0.326 seconds
Parameter learned model CLL: -0.42255


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 1, 0], 'true,false,true': [2.11e-08, 0, 3], 'true,false,false,true': [1.095, 3, 2], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 1, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.732, 1, 3], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [1.095, 3, 2], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 1, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.0, 1, 0], 'true,false,true': [1.236, 3, 5], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 1, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.594, 1, 3], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [1.095, 3, 2], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 1, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 1, 0], 'true,false,true': [0.0, 0, 3], 'true,false,false,true': [1.095, 3, 2], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 1, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, B)', 'true,false,true': 'genre(B, F)', 'false': 'movie(G, A)'}, {'true,true': [0.447, 1, 3], 'true,false,true,true': [0.0, 0, 0], 'true,false,true,false': [1.095, 3, 2], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 1, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 1, 0], 'true,false,true': [0.0, 0, 3], 'true,false,false,true': [1.095, 3, 2], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 1, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, A)'}, {'true,true': [0.359, 1, 3], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [1.095, 3, 2], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 1, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'true,false,true': 'genre(A, F)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 1, 0], 'true,false,true,true': [0.0, 0, 0], 'true,false,true,false': [1.121, 3, 5], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 1, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.317, 1, 3], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [1.095, 3, 2], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 1, 0], 'false,false': [0.0, 0, 0]}]]
[{'': [0.2469135802469134, 0.0], 'true': [0.0, 0.23437499999999983], 'true,false': [1.4802973661668753e-16, 0.24000000000000005], 'true,false,false': [0.24000000000000005, nan], 'false': [0.0, nan]}, {'': [0.21281056234342283, 0.0], 'true': [0.13385372108722043, 0.24000000000000005], 'true,false': [nan, 0.24000000000000005], 'true,false,false': [0.24000000000000005, nan], 'false': [0.0, nan]}, {'': [0.19830916967642384, 0.0], 'true': [0.0, 0.1909247593983439], 'true,false': [0.1909247593983439, nan], 'false': [0.0, nan]}, {'': [0.18506575252443952, 0.0], 'true': [0.08832803380794547, 0.23999999999999994], 'true,false': [nan, 0.23999999999999994], 'true,false,false': [0.23999999999999994, nan], 'false': [0.0, nan]}, {'': [0.17614419352567207, 0.0], 'true': [0.0, 0.17628086110045482], 'true,false': [0.0, 0.24], 'true,false,false': [0.24, nan], 'false': [0.0, nan]}, {'': [0.15935778246577634, 0.0], 'true': [0.049877436267809466, 0.23999999999999994], 'true,false': [0.23999999999999994, nan], 'true,false,true': [nan, 0.23999999999999994], 'false': [0.0, nan]}, {'': [0.15710668642386671, 0.0], 'true': [0.0, 0.16215752641307019], 'true,false': [0.0, 0.24000000000000005], 'true,false,false': [0.24000000000000005, nan], 'false': [0.0, nan]}, {'': [0.14934593303568836, 0.0], 'true': [0.032265291302654646, 0.24000000000000005], 'true,false': [nan, 0.24000000000000005], 'true,false,false': [0.24000000000000005, nan], 'false': [0.0, nan]}, {'': [0.14877094952865427, 0.0], 'true': [0.0, 0.1571369659140013], 'true,false': [0.1571369659140013, nan], 'true,false,true': [nan, 0.1571369659140013], 'false': [0.0, nan]}, {'': [0.14649263655646905, 0.0], 'true': [0.02505399594841703, 0.24], 'true,false': [nan, 0.24], 'true,false,false': [0.24, nan], 'false': [0.0, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(A, D).;true;true
0;true,false;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;true;genre(A, D).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;true;genre(A, D).;true;true
4;true,false;genre(B, E).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(A, D).;true;true
6;true,false;genre(B, E).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;true;genre(A, D).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14185106490048777;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995121;  // std dev = 2.11e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.2581489350995122;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   else return -0.14185106490048777;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.7611775091202151;  // std dev = 0.114, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return -0.16356091876901846;  // std dev = 0.044, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   else return -0.12544463852839138;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.10857191678927033;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( actor(B) )
%   | | then return -0.1537597499690886;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else return 0.6013576567753575;  // std dev = 0.154, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return -0.11231637819360639;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.45569553333431123;  // std dev = 0.163, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return -0.1257251517429364;  // std dev = 0.031, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   else return -0.10159632948783628;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.08788723530141478;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( genre(B, E) )
%   | | then return 0.29392856897222375;  // std dev = 7.45e-09, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.10005795520584418;  // std dev = 0.605, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   else return -0.09269127618926096;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.30487412522635643;  // std dev = 0.186, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return -0.11914863981313636;  // std dev = 0.044, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   else return -0.08518475138839687;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.07264546862385748;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( genre(B, E) )
%   | | then return 0.1861562031711982;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.06311650890056394;  // std dev = 0.498, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   else return -0.07877675473109173;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.22456406733018258;  // std dev = 0.178, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return -0.11113936076536654;  // std dev = 0.050, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   else return -0.07324622576333704;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.06119572079513496;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( actor(B) )
%   | | then return -0.11384939690576684;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else return 0.18905997748014677;  // std dev = 0.157, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return -0.06842697784420272;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.16254110080082473;  // std dev = 0.140, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return -0.09158708108714388;  // std dev = 0.039, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   else return -0.0641918400820262;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.07299
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 0.703 seconds
Total inference time: 0.776 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.119276
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 0.322 seconds
Refined model CLL: -0.119276


******************************************
Best model found
******************************************
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.07299
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 2.008 seconds
Total inference time: 0.776 seconds
AUC ROC: 1.0
Total revision time: 2.008
Best scored revision CLL: -0.119276


Dataset: 4_cora_imdb, Fold: 5, Type: Transfer (trRDN-B), Time: 00:03:26
{'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.07299, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 2.008, 'Inference time': 0.776, 'parameter_5': {'AUC ROC': 0.97178, 'AUC PR': 0.824078, 'CLL': -0.176461, 'Precision': [1.0, 0.5], 'Recall': 0.777778, 'F1': 0.875, 'Learning time': 0.657, 'Inference time': 0.891}}


Amount of data: 10
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;title(I, H), venue(I, A).;false;false
0;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
0;false;haswordvenue(A, L), haswordtitle(M, L).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordtitle(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordauthor(I, H).;false;true
2;true,false,false;haswordvenue(A, J), haswordtitle(K, J).;false;false
2;false;haswordvenue(A, L), haswordtitle(M, L).;true;false
2;false,true;haswordauthor(N, L).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;title(E, D), venue(E, B).;false;true
3;true,true,false;title(F, D), venue(F, A).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, A).;false;true
4;true,true,false;title(F, D), venue(F, B).;false;false
4;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
4;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
4;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
4;false,true;haswordauthor(M, K).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, B).;false;true
5;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
5;true,false;haswordvenue(B, H), haswordtitle(I, H).;true;true
5;true,false,true;title(J, I), venue(J, B).;false;false
5;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
5;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;title(E, D), venue(E, A).;false;true
6;true,true,false;title(F, D), venue(F, B).;false;false
6;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
6;true,false,true;title(I, H), venue(I, B).;false;false
6;true,false,false;haswordvenue(A, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;title(F, D), venue(F, A).;false;false
7;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
7;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
7;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
7;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;title(E, D), venue(E, A).;false;true
8;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
8;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
8;true,false,true;title(J, I), venue(J, A).;false;false
8;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
8;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, B).;false;true
9;true,true,false;title(F, D), venue(F, A).;false;false
9;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
9;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
9;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
9;false,true;haswordauthor(M, K).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14185106490048777;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995123;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.23314893509951226;  // std dev = 1.369, 8.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=3 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.14185106490048777;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.6138586558685362;  // std dev = 0.790, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | else if ( genre(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(F, B) )
%   | | | then return 0.202334239218108;  // std dev = 1.369, 8.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=3 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.12544463852839138;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.2094916381974483;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( movie(E, A) )
%   | | then return 0.36272255266442177;  // std dev = 1.582, 15.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=10 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.11231637819360639;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.4077908798780502;  // std dev = 0.625, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | else if ( genre(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(F, B) )
%   | | | then return 0.10641120782844427;  // std dev = 1.369, 8.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=3 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.10159632948783628;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.24421773022856322;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( genre(B, E) )
%   | | then return 0.3911404240371233;  // std dev = 2.11e-08, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.08499979783388731;  // std dev = 1.369, 8.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=3 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.09269127618926096;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.23976391462051336;  // std dev = 0.472, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | else if ( movie(E, B) )
%   | | then if ( genre(B, F) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.0671911702380367;  // std dev = 1.369, 8.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=3 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.08518475138839687;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.2433966020878072;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( genre(B, E) )
%   | | then return 0.2547522209547095;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.05269348524536452;  // std dev = 1.369, 8.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=3 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.07877675473109173;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.15810287728325723;  // std dev = 0.384, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | else if ( genre(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(F, B) )
%   | | | then return 0.04107783626509564;  // std dev = 1.369, 8.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=3 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.07324622576333704;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.22803489059431475;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( movie(E, A) )
%   | | then if ( genre(A, F) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.1030936037544512;  // std dev = 1.401, 15.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=10 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.06842697784420272;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.12448918520984066;  // std dev = 0.337, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | else if ( genre(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(F, A) )
%   | | | then return 0.008283047755369269;  // std dev = 1.369, 8.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=3 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.0641918400820262;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 0.97178
   AUC PR    = 0.824078
   CLL	      = -0.167406
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.777778
   F1        = 0.875


Total learning time: 0.73 seconds
Total inference time: 0.896 seconds
AUC ROC: 0.97178


Results scoring model
   AUC ROC   = 0.925
   AUC PR    = 0.939065
   CLL	      = -0.346916
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.7
   F1        = 0.823529


Total scoring time: 0.344 seconds
Parameter learned model CLL: -0.346916


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 1, 0], 'true,false,true': [0.0, 0, 7], 'true,false,false,true': [1.369, 5, 3], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 4, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.79, 1, 7], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [1.369, 5, 3], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 4, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.0, 1, 0], 'true,false,true': [1.582, 5, 10], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 4, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.625, 1, 7], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [1.369, 5, 3], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 4, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 1, 0], 'true,false,true': [2.11e-08, 0, 7], 'true,false,false,true': [1.369, 5, 3], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 4, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, B)', 'true,false,true': 'genre(B, F)', 'false': 'movie(G, A)'}, {'true,true': [0.472, 1, 7], 'true,false,true,true': [0.0, 0, 0], 'true,false,true,false': [1.369, 5, 3], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 4, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 1, 0], 'true,false,true': [0.0, 0, 7], 'true,false,false,true': [1.369, 5, 3], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 4, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, A)'}, {'true,true': [0.384, 1, 7], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [1.369, 5, 3], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 4, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'true,false,true': 'genre(A, F)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 1, 0], 'true,false,true,true': [0.0, 0, 0], 'true,false,true,false': [1.401, 5, 10], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 4, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.337, 1, 7], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [1.369, 5, 3], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 4, 0], 'false,false': [0.0, 0, 0]}]]
[{'': [0.23437499999999994, 0.0], 'true': [0.0, 0.22222222222222215], 'true,false': [-2.5376526277146434e-16, 0.2343749999999999], 'true,false,false': [0.2343749999999999, nan], 'false': [0.0, nan]}, {'': [0.1985662550253081, 0.0], 'true': [0.07808133730087857, 0.23437500000000008], 'true,false': [nan, 0.23437500000000008], 'true,false,false': [0.23437500000000008, nan], 'false': [0.0, nan]}, {'': [0.17555366638583192, 0.0], 'true': [0.0, 0.1667929266309058], 'true,false': [0.1667929266309058, nan], 'false': [0.0, nan]}, {'': [0.16431385284025424, 0.0], 'true': [0.04883785231814422, 0.234375], 'true,false': [nan, 0.234375], 'true,false,false': [0.234375, nan], 'false': [0.0, nan]}, {'': [0.15211433587613216, 0.0], 'true': [0.0, 0.14832638510523613], 'true,false': [6.344131569286608e-17, 0.234375], 'true,false,false': [0.234375, nan], 'false': [0.0, nan]}, {'': [0.13857179427357158, 0.0], 'true': [0.027877912495293325, 0.23437499999999997], 'true,false': [0.23437499999999997, nan], 'true,false,true': [nan, 0.23437499999999997], 'false': [0.0, nan]}, {'': [0.13564364647542165, 0.0], 'true': [0.0, 0.1351615690216965], 'true,false': [0.0, 0.23437499999999997], 'true,false,false': [0.23437499999999997, nan], 'false': [0.0, nan]}, {'': [0.12984300444080885, 0.0], 'true': [0.018463578768966427, 0.234375], 'true,false': [nan, 0.234375], 'true,false,false': [0.234375, nan], 'false': [0.0, nan]}, {'': [0.12904570519722555, 0.0], 'true': [0.0, 0.13079587222476888], 'true,false': [0.13079587222476888, nan], 'true,false,true': [nan, 0.13079587222476888], 'false': [0.0, nan]}, {'': [0.12764554797340086, 0.0], 'true': [0.01416416275575803, 0.23437500000000003], 'true,false': [nan, 0.23437500000000003], 'true,false,false': [0.23437500000000003, nan], 'false': [0.0, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(A, D).;true;true
0;true,false;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;true;genre(A, D).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;true;genre(A, D).;true;true
4;true,false;genre(B, E).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(A, D).;true;true
6;true,false;genre(B, E).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;true;genre(A, D).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14185106490048777;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995123;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else if ( actor(B) )
%   | | | then return -0.14185106490048777;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | | else return 0.8581489350995121;  // std dev = 2.11e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return -0.14185106490048777;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.7194734122109544;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | else return -0.12544463852839138;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   else return -0.12544463852839138;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.11231637819360639;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( actor(B) )
%   | | then return -0.11231637819360638;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.5553664367462846;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else return -0.11231637819360639;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.41751358415830986;  // std dev = 3.65e-08, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | else return -0.10159632948783631;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   else return -0.10159632948783628;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.09269127618926096;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( genre(B, E) )
%   | | then return 0.3207118471601497;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else if ( actor(B) )
%   | | | then return -0.09269127618926098;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | | else return 0.32071184716014967;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return -0.09269127618926096;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.2551722425694894;  // std dev = 1.83e-08, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | else return -0.08518475138839687;  // std dev = 2.63e-09, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   else return -0.08518475138839687;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.07877675473109173;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( genre(B, E) )
%   | | then return 0.2097577156325356;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else if ( actor(B) )
%   | | | then return -0.07877675473109177;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | | else return 0.20975771563253554;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return -0.07877675473109173;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.17709649774527736;  // std dev = 7.45e-09, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | else return -0.07324622576333704;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   else return -0.07324622576333704;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.06842697784420272;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( actor(B) )
%   | | then return -0.06842697784420272;  // std dev = 1.86e-09, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.15274385809367094;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else return -0.06842697784420272;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.13400703000801117;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | else return -0.0641918400820262;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   else return -0.0641918400820262;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063982
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 0.791 seconds
Total inference time: 0.817 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.094637
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 0.337 seconds
Refined model CLL: -0.094637


******************************************
Best model found
******************************************
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063982
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 2.202 seconds
Total inference time: 0.817 seconds
AUC ROC: 1.0
Total revision time: 2.202
Best scored revision CLL: -0.094637


Dataset: 4_cora_imdb, Fold: 5, Type: Transfer (trRDN-B), Time: 00:03:30
{'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.063982, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 2.202, 'Inference time': 0.817, 'parameter_10': {'AUC ROC': 0.97178, 'AUC PR': 0.824078, 'CLL': -0.167406, 'Precision': [1.0, 0.5], 'Recall': 0.777778, 'F1': 0.875, 'Learning time': 0.73, 'Inference time': 0.896}}


Amount of data: 15
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;title(I, H), venue(I, A).;false;false
0;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
0;false;haswordvenue(A, L), haswordtitle(M, L).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordtitle(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordauthor(I, H).;false;true
2;true,false,false;haswordvenue(A, J), haswordtitle(K, J).;false;false
2;false;haswordvenue(A, L), haswordtitle(M, L).;true;false
2;false,true;haswordauthor(N, L).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;title(E, D), venue(E, B).;false;true
3;true,true,false;title(F, D), venue(F, A).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, A).;false;true
4;true,true,false;title(F, D), venue(F, B).;false;false
4;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
4;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
4;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
4;false,true;haswordauthor(M, K).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, B).;false;true
5;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
5;true,false;haswordvenue(B, H), haswordtitle(I, H).;true;true
5;true,false,true;title(J, I), venue(J, B).;false;false
5;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
5;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;title(E, D), venue(E, A).;false;true
6;true,true,false;title(F, D), venue(F, B).;false;false
6;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
6;true,false,true;title(I, H), venue(I, B).;false;false
6;true,false,false;haswordvenue(A, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;title(F, D), venue(F, A).;false;false
7;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
7;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
7;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
7;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;title(E, D), venue(E, A).;false;true
8;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
8;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
8;true,false,true;title(J, I), venue(J, A).;false;false
8;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
8;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, B).;false;true
9;true,true,false;title(F, D), venue(F, A).;false;false
9;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
9;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
9;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
9;false,true;haswordauthor(M, K).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14185106490048777;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995123;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.19148226843284558;  // std dev = 1.414, 9.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=3 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.1418510649004878;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.6544797160002354;  // std dev = 0.812, 13.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   | else if ( genre(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(F, B) )
%   | | | then return 0.16653882456488167;  // std dev = 1.414, 9.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=3 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.12544463852839138;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.21629806961110143;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( movie(E, A) )
%   | | then return 0.38738466073615657;  // std dev = 1.717, 21.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=15 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.11231637819360639;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.4244870025963513;  // std dev = 0.631, 13.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   | else if ( genre(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(F, B) )
%   | | | then return 0.07498947753616421;  // std dev = 1.414, 9.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=3 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.10159632948783627;  // std dev = 1.32e-09, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.2536607680384749;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( genre(B, E) )
%   | | then return 0.37180051323183233;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.06036312011265488;  // std dev = 1.414, 9.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=3 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.09269127618926097;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.25146506126981305;  // std dev = 0.479, 13.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   | else if ( movie(E, B) )
%   | | then if ( genre(B, F) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.04822089451762773;  // std dev = 1.414, 9.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=3 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.08518475138839687;  // std dev = 3.73e-09, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.253245308342304;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( genre(B, E) )
%   | | then return 0.2408973891175008;  // std dev = 1.05e-08, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.038291384627796216;  // std dev = 1.414, 9.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=3 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.07877675473109173;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.16823532983366396;  // std dev = 0.392, 13.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   | else if ( genre(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(F, B) )
%   | | | then return 0.030265064499280334;  // std dev = 1.414, 9.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=3 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.07324622576333704;  // std dev = 9.31e-10, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.23750847236046455;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( movie(E, A) )
%   | | then if ( genre(A, F) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.10969608961249618;  // std dev = 1.455, 21.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=15 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.06842697784420272;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.13148816584436313;  // std dev = 0.342, 13.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   | else if ( genre(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(F, A) )
%   | | | then return -8.42198072434044E-5;  // std dev = 1.414, 9.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=3 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.0641918400820262;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 0.97178
   AUC PR    = 0.824078
   CLL	      = -0.154133
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.777778
   F1        = 0.875


Total learning time: 0.682 seconds
Total inference time: 0.946 seconds
AUC ROC: 0.97178


Results scoring model
   AUC ROC   = 0.96
   AUC PR    = 0.966772
   CLL	      = -0.277112
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.8
   F1        = 0.888889


Total scoring time: 0.372 seconds
Parameter learned model CLL: -0.277112


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 1, 0], 'true,false,true': [0.0, 0, 12], 'true,false,false,true': [1.414, 6, 3], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 8, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.812, 1, 12], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [1.414, 6, 3], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 8, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.0, 1, 0], 'true,false,true': [1.717, 6, 15], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 8, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.631, 1, 12], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [1.414, 6, 3], 'true,false,false,false': [0.0, 0, 0], 'false,true': [1.32e-09, 8, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 1, 0], 'true,false,true': [0.0, 0, 12], 'true,false,false,true': [1.414, 6, 3], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 8, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, B)', 'true,false,true': 'genre(B, F)', 'false': 'movie(G, A)'}, {'true,true': [0.479, 1, 12], 'true,false,true,true': [0.0, 0, 0], 'true,false,true,false': [1.414, 6, 3], 'true,false,false': [0.0, 0, 0], 'false,true': [3.73e-09, 8, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 1, 0], 'true,false,true': [1.05e-08, 0, 12], 'true,false,false,true': [1.414, 6, 3], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 8, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, A)'}, {'true,true': [0.392, 1, 12], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [1.414, 6, 3], 'true,false,false,false': [0.0, 0, 0], 'false,true': [9.31e-10, 8, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'true,false,true': 'genre(A, F)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 1, 0], 'true,false,true,true': [0.0, 0, 0], 'true,false,true,false': [1.455, 6, 15], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 8, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.342, 1, 12], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [1.414, 6, 3], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 8, 0], 'false,false': [0.0, 0, 0]}]]
[{'': [0.21694214876033016, -6.938893903907228e-18], 'true': [0.0, 0.20408163265306084], 'true,false': [-1.4802973661668753e-16, 0.2222222222222221], 'true,false,false': [0.2222222222222221, nan], 'false': [-6.938893903907228e-18, nan]}, {'': [0.17841629405230852, 0.0], 'true': [0.05069016656557474, 0.22222222222222238], 'true,false': [nan, 0.22222222222222238], 'true,false,false': [0.22222222222222238, nan], 'false': [0.0, nan]}, {'': [0.14979564038978835, -1.734723475976807e-18], 'true': [0.0, 0.14036363708083907], 'true,false': [0.14036363708083907, nan], 'false': [-1.734723475976807e-18, nan]}, {'': [0.13854216309414732, 1.734723475976807e-18], 'true': [0.03063996536662004, 0.22222222222222227], 'true,false': [nan, 0.22222222222222227], 'true,false,false': [0.22222222222222227, nan], 'false': [1.734723475976807e-18, nan]}, {'': [0.12408510697383333, 0.0], 'true': [0.0, 0.11899154417675699], 'true,false': [-9.251858538542972e-17, 0.22222222222222215], 'true,false,false': [0.22222222222222215, nan], 'false': [0.0, nan]}, {'': [0.11132144707078849, 1.734723475976807e-18], 'true': [0.017645181811060142, 0.2222222222222222], 'true,false': [0.2222222222222222, nan], 'true,false,true': [nan, 0.2222222222222222], 'false': [1.734723475976807e-18, nan]}, {'': [0.10770326385441362, 0.0], 'true': [0.0, 0.10529095884347048], 'true,false': [9.25185853854297e-18, 0.22222222222222218], 'true,false,false': [0.22222222222222218, nan], 'false': [0.0, nan]}, {'': [0.10249579980538828, 8.673617379884035e-19], 'true': [0.011820906273372152, 0.2222222222222222], 'true,false': [nan, 0.2222222222222222], 'true,false,false': [0.2222222222222222, nan], 'false': [8.673617379884035e-19, nan]}, {'': [0.10141741848776445, 0.0], 'true': [0.0, 0.10076722810200528], 'true,false': [0.10076722810200528, nan], 'true,false,true': [nan, 0.10076722810200528], 'false': [0.0, nan]}, {'': [0.10041374750713607, 0.0], 'true': [0.009002911019319642, 0.22222222222222218], 'true,false': [nan, 0.22222222222222218], 'true,false,false': [0.22222222222222218, nan], 'false': [0.0, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(A, D).;true;true
0;true,false;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;true;genre(A, D).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;true;genre(A, D).;true;true
4;true,false;genre(B, E).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(A, D).;true;true
6;true,false;genre(B, E).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;true;genre(A, D).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14185106490048777;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995123;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else if ( actor(B) )
%   | | | then return -0.1418510649004878;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | | else return 0.8581489350995121;  // std dev = 2.11e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return -0.1418510649004878;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.7194734122109543;  // std dev = 0.000, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else return -0.12544463852839138;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   else return -0.12544463852839138;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.11231637819360639;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( actor(B) )
%   | | then return -0.11231637819360639;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else return 0.5553664367462846;  // std dev = 0.000, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   else return -0.11231637819360639;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.4175135841583098;  // std dev = 4.71e-08, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else return -0.10159632948783627;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   else return -0.10159632948783627;  // std dev = 3.73e-09, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.09269127618926098;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( genre(B, E) )
%   | | then return 0.3207118471601497;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else if ( actor(B) )
%   | | | then return -0.09269127618926097;  // std dev = 2.63e-09, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | | else return 0.32071184716014967;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return -0.09269127618926097;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.2551722425694894;  // std dev = 2.36e-08, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else return -0.08518475138839687;  // std dev = 2.63e-09, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   else return -0.08518475138839687;  // std dev = 3.73e-09, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.07877675473109177;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( genre(B, E) )
%   | | then return 0.20975771563253562;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else if ( actor(B) )
%   | | | then return -0.07877675473109173;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | | else return 0.20975771563253554;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return -0.07877675473109173;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.17709649774527741;  // std dev = 0.000, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else return -0.07324622576333704;  // std dev = 2.63e-09, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   else return -0.07324622576333704;  // std dev = 2.63e-09, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.06842697784420272;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( director(B) )
%   | | then return 0.1527438580936708;  // std dev = 0.000, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else return -0.06842697784420272;  // std dev = 1.86e-09, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   else return -0.06842697784420272;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.13400703000801117;  // std dev = 0.000, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else return -0.0641918400820262;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   else return -0.0641918400820262;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063982
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 0.875 seconds
Total inference time: 0.803 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.094637
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 0.355 seconds
Refined model CLL: -0.094637


******************************************
Best model found
******************************************
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063982
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 2.284 seconds
Total inference time: 0.803 seconds
AUC ROC: 1.0
Total revision time: 2.284
Best scored revision CLL: -0.094637


Dataset: 4_cora_imdb, Fold: 5, Type: Transfer (trRDN-B), Time: 00:03:35
{'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.063982, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 2.284, 'Inference time': 0.803, 'parameter_15': {'AUC ROC': 0.97178, 'AUC PR': 0.824078, 'CLL': -0.154133, 'Precision': [1.0, 0.5], 'Recall': 0.777778, 'F1': 0.875, 'Learning time': 0.682, 'Inference time': 0.946}}


Amount of data: 20
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;title(I, H), venue(I, A).;false;false
0;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
0;false;haswordvenue(A, L), haswordtitle(M, L).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordtitle(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordauthor(I, H).;false;true
2;true,false,false;haswordvenue(A, J), haswordtitle(K, J).;false;false
2;false;haswordvenue(A, L), haswordtitle(M, L).;true;false
2;false,true;haswordauthor(N, L).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;title(E, D), venue(E, B).;false;true
3;true,true,false;title(F, D), venue(F, A).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, A).;false;true
4;true,true,false;title(F, D), venue(F, B).;false;false
4;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
4;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
4;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
4;false,true;haswordauthor(M, K).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, B).;false;true
5;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
5;true,false;haswordvenue(B, H), haswordtitle(I, H).;true;true
5;true,false,true;title(J, I), venue(J, B).;false;false
5;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
5;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;title(E, D), venue(E, A).;false;true
6;true,true,false;title(F, D), venue(F, B).;false;false
6;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
6;true,false,true;title(I, H), venue(I, B).;false;false
6;true,false,false;haswordvenue(A, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;title(F, D), venue(F, A).;false;false
7;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
7;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
7;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
7;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;title(E, D), venue(E, A).;false;true
8;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
8;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
8;true,false,true;title(J, I), venue(J, A).;false;false
8;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
8;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, B).;false;true
9;true,true,false;title(F, D), venue(F, A).;false;false
9;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
9;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
9;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
9;false,true;haswordauthor(M, K).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14185106490048777;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995123;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.16584124279182003;  // std dev = 1.664, 13.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=4 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.1418510649004878;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.6697723504027574;  // std dev = 0.820, 17.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=16 */
%   | else if ( genre(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(F, B) )
%   | | | then return 0.14443085832463678;  // std dev = 1.664, 13.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=4 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.12544463852839138;  // std dev = 5.27e-09, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.21890161811527553;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( movie(E, A) )
%   | | then return 0.368625415389524;  // std dev = 2.045, 29.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=20 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.11231637819360638;  // std dev = 1.86e-09, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.4370787215157532;  // std dev = 0.640, 17.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=16 */
%   | else if ( genre(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(F, B) )
%   | | | then return 0.06188546624075311;  // std dev = 1.664, 13.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=4 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.10159632948783628;  // std dev = 1.32e-09, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.2584765885055377;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( genre(B, E) )
%   | | then return 0.3696717134911186;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.05023319554418663;  // std dev = 1.664, 13.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=4 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.09269127618926097;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.2589344321391067;  // std dev = 0.486, 17.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=16 */
%   | else if ( movie(E, B) )
%   | | then if ( genre(B, F) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.04051354211961099;  // std dev = 1.664, 13.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=4 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.08518475138839687;  // std dev = 3.73e-09, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.2585643514689304;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( genre(B, E) )
%   | | then return 0.2382620341165329;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.032506794779294565;  // std dev = 1.664, 13.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=4 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.07877675473109172;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.1736266898530666;  // std dev = 0.398, 17.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=16 */
%   | else if ( genre(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(F, B) )
%   | | | then return 0.025975887219536573;  // std dev = 1.664, 13.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=4 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.07324622576333704;  // std dev = 9.31e-10, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.2426176564944249;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( movie(E, A) )
%   | | then if ( genre(A, F) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.10396710331563888;  // std dev = 1.712, 29.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=20 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.06842697784420272;  // std dev = 2.63e-09, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.13627845507243427;  // std dev = 0.348, 17.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=16 */
%   | else if ( genre(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(F, A) )
%   | | | then return -0.001046844232007746;  // std dev = 1.664, 13.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=4 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.06419184008202619;  // std dev = 1.61e-09, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 0.97178
   AUC PR    = 0.824078
   CLL	      = -0.145334
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.777778
   F1        = 0.875


Total learning time: 0.675 seconds
Total inference time: 0.895 seconds
AUC ROC: 0.97178


Results scoring model
   AUC ROC   = 0.955
   AUC PR    = 0.96329
   CLL	      = -0.282899
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.8
   F1        = 0.888889


Total scoring time: 0.378 seconds
Parameter learned model CLL: -0.282899


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 1, 0], 'true,false,true': [0.0, 0, 16], 'true,false,false,true': [1.664, 9, 4], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 10, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.82, 1, 16], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [1.664, 9, 4], 'true,false,false,false': [0.0, 0, 0], 'false,true': [5.27e-09, 10, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.0, 1, 0], 'true,false,true': [2.045, 9, 20], 'true,false,false': [0.0, 0, 0], 'false,true': [1.86e-09, 10, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.64, 1, 16], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [1.664, 9, 4], 'true,false,false,false': [0.0, 0, 0], 'false,true': [1.32e-09, 10, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 1, 0], 'true,false,true': [0.0, 0, 16], 'true,false,false,true': [1.664, 9, 4], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 10, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, B)', 'true,false,true': 'genre(B, F)', 'false': 'movie(G, A)'}, {'true,true': [0.486, 1, 16], 'true,false,true,true': [0.0, 0, 0], 'true,false,true,false': [1.664, 9, 4], 'true,false,false': [0.0, 0, 0], 'false,true': [3.73e-09, 10, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 1, 0], 'true,false,true': [0.0, 0, 16], 'true,false,false,true': [1.664, 9, 4], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 10, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, A)'}, {'true,true': [0.398, 1, 16], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [1.664, 9, 4], 'true,false,false,false': [0.0, 0, 0], 'false,true': [9.31e-10, 10, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'true,false,true': 'genre(A, F)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 1, 0], 'true,false,true,true': [0.0, 0, 0], 'true,false,true,false': [1.712, 9, 20], 'true,false,false': [0.0, 0, 0], 'false,true': [2.63e-09, 10, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.348, 1, 16], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [1.664, 9, 4], 'true,false,false,false': [0.0, 0, 0], 'false,true': [1.61e-09, 10, 0], 'false,false': [0.0, 0, 0]}]]
[{'': [0.22222222222222232, -1.1102230246251566e-17], 'true': [0.0, 0.21403091557669457], 'true,false': [-2.220446049250313e-16, 0.21301775147928975], 'true,false,false': [0.21301775147928975, nan], 'false': [-1.1102230246251566e-17, nan]}, {'': [0.1824734585911642, 2.7755575615628915e-18], 'true': [0.0395231287177953, 0.2130177514792899], 'true,false': [nan, 0.2130177514792899], 'true,false,false': [0.2130177514792899, nan], 'false': [2.7755575615628915e-18, nan]}, {'': [0.15053491303038952, 0.0], 'true': [0.0, 0.1442195049304379], 'true,false': [0.1442195049304379, nan], 'false': [0.0, nan]}, {'': [0.140526211489779, 1.3877787807814458e-18], 'true': [0.02409118029064144, 0.21301775147928984], 'true,false': [nan, 0.21301775147928984], 'true,false,false': [0.21301775147928984, nan], 'false': [1.3877787807814458e-18, nan]}, {'': [0.12428165698815498, 0.0], 'true': [0.0, 0.1207279588481615], 'true,false': [-1.1102230246251565e-16, 0.21301775147928984], 'true,false,false': [0.21301775147928984, nan], 'false': [0.0, nan]}, {'': [0.11188023522568005, 1.3877787807814458e-18], 'true': [0.01386645136798453, 0.21301775147929], 'true,false': [0.21301775147929, nan], 'true,false,true': [nan, 0.21301775147929], 'false': [1.3877787807814458e-18, nan]}, {'': [0.10770380356102854, 0.0], 'true': [0.0, 0.10596125773930434], 'true,false': [-2.0816681711721685e-17, 0.2130177514792899], 'true,false,false': [0.2130177514792899, nan], 'false': [0.0, nan]}, {'': [0.10293185520583965, 6.938893903907229e-19], 'true': [0.009301526970162118, 0.21301775147928995], 'true,false': [nan, 0.21301775147928995], 'true,false,false': [0.21301775147928995, nan], 'false': [6.938893903907229e-19, nan]}, {'': [0.10162519077817228, 6.938893903907229e-19], 'true': [0.0, 0.10112547451047088], 'true,false': [0.10112547451047088, nan], 'true,false,true': [nan, 0.10112547451047088], 'false': [6.938893903907229e-19, nan]}, {'': [0.10096370603848515, 1.3877787807814458e-18], 'true': [0.00710341528920107, 0.21301775147928986], 'true,false': [nan, 0.21301775147928986], 'true,false,false': [0.21301775147928986, nan], 'false': [1.3877787807814458e-18, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(A, D).;true;true
0;true,false;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;true;genre(A, D).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;true;genre(A, D).;true;true
4;true,false;genre(B, E).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(A, D).;true;true
6;true,false;genre(B, E).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;true;genre(A, D).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14185106490048777;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995123;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | else if ( actor(B) )
%   | | | then return -0.1418510649004878;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | | else return 0.8581489350995122;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else return -0.1418510649004878;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.7194734122109543;  // std dev = 5.96e-08, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | else return -0.12544463852839138;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   else return -0.12544463852839138;  // std dev = 5.27e-09, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.11231637819360639;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( actor(B) )
%   | | then return -0.11231637819360639;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | else return 0.5553664367462846;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   else return -0.11231637819360638;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.41751358415830986;  // std dev = 5.16e-08, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | else return -0.10159632948783628;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   else return -0.10159632948783628;  // std dev = 3.73e-09, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.09269127618926096;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( genre(B, E) )
%   | | then return 0.32071184716014967;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | else if ( actor(B) )
%   | | | then return -0.09269127618926097;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | | else return 0.32071184716014967;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else return -0.09269127618926097;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.25517224256948945;  // std dev = 1.49e-08, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | else return -0.08518475138839687;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   else return -0.08518475138839687;  // std dev = 3.73e-09, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.07877675473109173;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( genre(B, E) )
%   | | then return 0.20975771563253562;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | else if ( actor(B) )
%   | | | then return -0.07877675473109173;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | | else return 0.20975771563253554;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else return -0.07877675473109172;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.17709649774527744;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | else return -0.07324622576333704;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   else return -0.07324622576333704;  // std dev = 2.63e-09, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.06842697784420272;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( actor(B) )
%   | | then return -0.06842697784420272;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | else return 0.1527438580936708;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   else return -0.06842697784420272;  // std dev = 2.63e-09, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.13400703000801117;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | else return -0.0641918400820262;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   else return -0.06419184008202619;  // std dev = 3.73e-09, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063982
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 0.987 seconds
Total inference time: 0.817 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.094637
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 0.375 seconds
Refined model CLL: -0.094637


******************************************
Best model found
******************************************
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063982
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 2.415 seconds
Total inference time: 0.817 seconds
AUC ROC: 1.0
Total revision time: 2.415
Best scored revision CLL: -0.094637


Dataset: 4_cora_imdb, Fold: 5, Type: Transfer (trRDN-B), Time: 00:03:39
{'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.063982, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 2.415, 'Inference time': 0.817, 'parameter_20': {'AUC ROC': 0.97178, 'AUC PR': 0.824078, 'CLL': -0.145334, 'Precision': [1.0, 0.5], 'Recall': 0.777778, 'F1': 0.875, 'Learning time': 0.675, 'Inference time': 0.895}}


Amount of data: 25
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;title(I, H), venue(I, A).;false;false
0;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
0;false;haswordvenue(A, L), haswordtitle(M, L).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordtitle(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordauthor(I, H).;false;true
2;true,false,false;haswordvenue(A, J), haswordtitle(K, J).;false;false
2;false;haswordvenue(A, L), haswordtitle(M, L).;true;false
2;false,true;haswordauthor(N, L).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;title(E, D), venue(E, B).;false;true
3;true,true,false;title(F, D), venue(F, A).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, A).;false;true
4;true,true,false;title(F, D), venue(F, B).;false;false
4;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
4;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
4;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
4;false,true;haswordauthor(M, K).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, B).;false;true
5;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
5;true,false;haswordvenue(B, H), haswordtitle(I, H).;true;true
5;true,false,true;title(J, I), venue(J, B).;false;false
5;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
5;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;title(E, D), venue(E, A).;false;true
6;true,true,false;title(F, D), venue(F, B).;false;false
6;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
6;true,false,true;title(I, H), venue(I, B).;false;false
6;true,false,false;haswordvenue(A, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;title(F, D), venue(F, A).;false;false
7;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
7;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
7;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
7;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;title(E, D), venue(E, A).;false;true
8;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
8;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
8;true,false,true;title(J, I), venue(J, A).;false;false
8;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
8;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, B).;false;true
9;true,true,false;title(F, D), venue(F, A).;false;false
9;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
9;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
9;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
9;false,true;haswordauthor(M, K).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14185106490048777;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995122;  // std dev = 0.000, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.16584124279182003;  // std dev = 1.664, 13.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=4 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.1418510649004878;  // std dev = 0.000, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.6810680462682567;  // std dev = 0.825, 22.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=21 */
%   | else if ( genre(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(F, B) )
%   | | | then return 0.14443085832463678;  // std dev = 1.664, 13.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=4 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.12544463852839138;  // std dev = 7.45e-09, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.22083912937336939;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( movie(E, A) )
%   | | then return 0.3961732540947328;  // std dev = 2.081, 34.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=25 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.11231637819360635;  // std dev = 3.48e-09, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.43659556929140175;  // std dev = 0.636, 22.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=21 */
%   | else if ( genre(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(F, B) )
%   | | | then return 0.05674280092217525;  // std dev = 1.664, 13.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=4 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.10159632948783631;  // std dev = 0.000, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.26018127724126794;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( genre(B, E) )
%   | | then return 0.36077873714728165;  // std dev = 0.000, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.045926688628287624;  // std dev = 1.664, 13.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=4 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.09269127618926094;  // std dev = 1.86e-09, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.2598344568229304;  // std dev = 0.484, 22.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=21 */
%   | else if ( movie(E, B) )
%   | | then if ( genre(B, F) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.036955029317761214;  // std dev = 1.664, 13.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=4 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.08518475138839685;  // std dev = 9.13e-09, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.26011452437903915;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( genre(B, E) )
%   | | then return 0.2327944292019008;  // std dev = 0.000, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.029597178517756208;  // std dev = 1.664, 13.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=4 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.07877675473109173;  // std dev = 0.000, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.17531471488860706;  // std dev = 0.398, 22.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=21 */
%   | else if ( genre(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(F, B) )
%   | | | then return 0.023616458053325944;  // std dev = 1.664, 13.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=4 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.07324622576333704;  // std dev = 9.31e-10, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.2441291372838893;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( movie(E, A) )
%   | | then if ( genre(A, F) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.11087627419265053;  // std dev = 1.717, 34.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=25 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.06842697784420272;  // std dev = 3.73e-09, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.1368272339025992;  // std dev = 0.347, 22.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=21 */
%   | else if ( genre(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(F, A) )
%   | | | then return -0.004510671658760819;  // std dev = 1.664, 13.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=4 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.06419184008202619;  // std dev = 1.86e-09, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 0.97178
   AUC PR    = 0.824078
   CLL	      = -0.146187
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.777778
   F1        = 0.875


Total learning time: 0.677 seconds
Total inference time: 0.871 seconds
AUC ROC: 0.97178


Results scoring model
   AUC ROC   = 0.9712
   AUC PR    = 0.975669
   CLL	      = -0.245714
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.84
   F1        = 0.913043


Total scoring time: 0.388 seconds
Parameter learned model CLL: -0.245714


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 1, 0], 'true,false,true': [0.0, 0, 21], 'true,false,false,true': [1.664, 9, 4], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 15, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.825, 1, 21], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [1.664, 9, 4], 'true,false,false,false': [0.0, 0, 0], 'false,true': [7.45e-09, 15, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.0, 1, 0], 'true,false,true': [2.081, 9, 25], 'true,false,false': [0.0, 0, 0], 'false,true': [3.48e-09, 15, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.636, 1, 21], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [1.664, 9, 4], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 15, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 1, 0], 'true,false,true': [0.0, 0, 21], 'true,false,false,true': [1.664, 9, 4], 'true,false,false,false': [0.0, 0, 0], 'false,true': [1.86e-09, 15, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, B)', 'true,false,true': 'genre(B, F)', 'false': 'movie(G, A)'}, {'true,true': [0.484, 1, 21], 'true,false,true,true': [0.0, 0, 0], 'true,false,true,false': [1.664, 9, 4], 'true,false,false': [0.0, 0, 0], 'false,true': [9.13e-09, 15, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 1, 0], 'true,false,true': [0.0, 0, 21], 'true,false,false,true': [1.664, 9, 4], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 15, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, A)'}, {'true,true': [0.398, 1, 21], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [1.664, 9, 4], 'true,false,false,false': [0.0, 0, 0], 'false,true': [9.31e-10, 15, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'true,false,true': 'genre(A, F)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 1, 0], 'true,false,true,true': [0.0, 0, 0], 'true,false,true,false': [1.717, 9, 25], 'true,false,false': [0.0, 0, 0], 'false,true': [3.73e-09, 15, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.347, 1, 21], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [1.664, 9, 4], 'true,false,false,false': [0.0, 0, 0], 'false,true': [1.86e-09, 15, 0], 'false,false': [0.0, 0, 0]}]]
[{'': [0.20408163265306242, -1.4802973661668754e-17], 'true': [0.0, 0.1946366782006932], 'true,false': [0.0, 0.21301775147928975], 'true,false,false': [0.21301775147928975, nan], 'false': [-1.4802973661668754e-17, nan]}, {'': [0.16582490217243573, 3.7007434154171884e-18], 'true': [0.03097441479704287, 0.2130177514792899], 'true,false': [nan, 0.2130177514792899], 'true,false,false': [0.2130177514792899, nan], 'false': [3.7007434154171884e-18, nan]}, {'': [0.1343236347049386, 1.295260195396016e-17], 'true': [0.0, 0.12739706466180523], 'true,false': [0.12739706466180523, nan], 'false': [1.295260195396016e-17, nan]}, {'': [0.1243796796942265, -5.551115123125783e-18], 'true': [0.0184099048960385, 0.21301775147928997], 'true,false': [nan, 0.21301775147928997], 'true,false,false': [0.21301775147928997, nan], 'false': [-5.551115123125783e-18, nan]}, {'': [0.10881763835149641, 3.7007434154171884e-18], 'true': [0.0, 0.10485885030666088], 'true,false': [-4.229421046191072e-17, 0.2130177514792899], 'true,false,false': [0.2130177514792899, nan], 'false': [3.7007434154171884e-18, nan]}, {'': [0.09741869738072302, 5.551115123125783e-18], 'true': [0.010659362280090375, 0.2130177514792899], 'true,false': [0.2130177514792899, nan], 'true,false,true': [nan, 0.2130177514792899], 'false': [5.551115123125783e-18, nan]}, {'': [0.09337818669674235, -1.8503717077085942e-18], 'true': [0.0, 0.09119876872579022], 'true,false': [-1.057355261547768e-17, 0.2130177514792899], 'true,false,false': [0.2130177514792899, nan], 'false': [-1.8503717077085942e-18, nan]}, {'': [0.08901260004706207, 9.251858538542971e-19], 'true': [0.00718938032765094, 0.21301775147928997], 'true,false': [nan, 0.21301775147928997], 'true,false,false': [0.21301775147928997, nan], 'false': [9.251858538542971e-19, nan]}, {'': [0.0877183966685294, 9.251858538542971e-19], 'true': [0.0, 0.08669752544950353], 'true,false': [0.08669752544950353, nan], 'true,false,true': [nan, 0.08669752544950353], 'false': [9.251858538542971e-19, nan]}, {'': [0.08721955648942141, 4.163336342344337e-18], 'true': [0.0054644524176642, 0.21301775147928984], 'true,false': [nan, 0.21301775147928984], 'true,false,false': [0.21301775147928984, nan], 'false': [4.163336342344337e-18, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(A, D).;true;true
0;true,false;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;true;genre(A, D).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;true;genre(A, D).;true;true
4;true,false;genre(B, E).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(A, D).;true;true
6;true,false;genre(B, E).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;true;genre(A, D).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14185106490048777;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995122;  // std dev = 0.000, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | else if ( actor(B) )
%   | | | then return -0.1418510649004878;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | | else return 0.8581489350995122;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else return -0.1418510649004878;  // std dev = 0.000, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.7194734122109544;  // std dev = 0.000, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | else return -0.12544463852839138;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   else return -0.12544463852839138;  // std dev = 7.45e-09, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.11231637819360639;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( director(B) )
%   | | then return 0.5553664367462846;  // std dev = 0.000, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | | else return -0.11231637819360639;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   else return -0.11231637819360635;  // std dev = 1.39e-08, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.41751358415830997;  // std dev = 0.000, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | else return -0.10159632948783628;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   else return -0.10159632948783631;  // std dev = 0.000, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.09269127618926096;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( genre(B, E) )
%   | | then return 0.3207118471601496;  // std dev = 2.98e-08, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | else if ( actor(B) )
%   | | | then return -0.09269127618926097;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | | else return 0.32071184716014967;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else return -0.09269127618926094;  // std dev = 7.45e-09, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.25517224256948956;  // std dev = 0.000, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | else return -0.08518475138839687;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   else return -0.08518475138839685;  // std dev = 9.13e-09, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.07877675473109173;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( genre(B, E) )
%   | | then return 0.2097577156325356;  // std dev = 0.000, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | else if ( actor(B) )
%   | | | then return -0.07877675473109173;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | | else return 0.20975771563253554;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else return -0.07877675473109173;  // std dev = 0.000, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.17709649774527747;  // std dev = 0.000, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | else return -0.07324622576333704;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   else return -0.07324622576333704;  // std dev = 3.73e-09, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.06842697784420272;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( actor(B) )
%   | | then return -0.06842697784420272;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | else return 0.15274385809367083;  // std dev = 0.000, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   else return -0.06842697784420272;  // std dev = 3.73e-09, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.13400703000801117;  // std dev = 0.000, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | else return -0.0641918400820262;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   else return -0.06419184008202619;  // std dev = 7.90e-09, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063982
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 0.975 seconds
Total inference time: 0.839 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.094637
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 0.373 seconds
Refined model CLL: -0.094637


******************************************
Best model found
******************************************
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063982
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 2.4130000000000003 seconds
Total inference time: 0.839 seconds
AUC ROC: 1.0
Total revision time: 2.4130000000000003
Best scored revision CLL: -0.094637


Dataset: 4_cora_imdb, Fold: 5, Type: Transfer (trRDN-B), Time: 00:03:44
{'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.063982, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 2.4130000000000003, 'Inference time': 0.839, 'parameter_25': {'AUC ROC': 0.97178, 'AUC PR': 0.824078, 'CLL': -0.146187, 'Precision': [1.0, 0.5], 'Recall': 0.777778, 'F1': 0.875, 'Learning time': 0.677, 'Inference time': 0.871}}


Starting fold 1

Target train facts examples: 863
Target train pos examples: 326
Target train neg examples: 10928

Target test facts examples: 215
Target test pos	 examples: 56
Target test neg examples: 3308

Amount of data: 5
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;title(I, H), venue(I, A).;false;false
0;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
0;false;haswordvenue(A, L), haswordtitle(M, L).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordtitle(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordauthor(I, H).;false;true
2;true,false,false;haswordvenue(A, J), haswordtitle(K, J).;false;false
2;false;haswordvenue(A, L), haswordtitle(M, L).;true;false
2;false,true;haswordauthor(N, L).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;title(E, D), venue(E, B).;false;true
3;true,true,false;title(F, D), venue(F, A).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, A).;false;true
4;true,true,false;title(F, D), venue(F, B).;false;false
4;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
4;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
4;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
4;false,true;haswordauthor(M, K).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, B).;false;true
5;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
5;true,false;haswordvenue(B, H), haswordtitle(I, H).;true;true
5;true,false,true;title(J, I), venue(J, B).;false;false
5;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
5;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;title(E, D), venue(E, A).;false;true
6;true,true,false;title(F, D), venue(F, B).;false;false
6;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
6;true,false,true;title(I, H), venue(I, B).;false;false
6;true,false,false;haswordvenue(A, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;title(F, D), venue(F, A).;false;false
7;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
7;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
7;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
7;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;title(E, D), venue(E, A).;false;true
8;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
8;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
8;true,false,true;title(J, I), venue(J, A).;false;false
8;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
8;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, B).;false;true
9;true,true,false;title(F, D), venue(F, A).;false;false
9;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
9;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
9;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
9;false,true;haswordauthor(M, K).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995122;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.14185106490048777;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.14185106490048777;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7194734122109545;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else if ( genre(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(F, B) )
%   | | | then return -0.12544463852839138;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.12544463852839138;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A) )
%   | | then return 0.44408596758963603;  // std dev = 0.610, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.11231637819360639;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.4447988520039283;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else if ( genre(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(F, B) )
%   | | | then return -0.16476268394672763;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.10159632948783628;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( genre(B, E) )
%   | | then return 0.3392793852013426;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.14332149068065764;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.09269127618926096;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.26780523845758497;  // std dev = 1.05e-08, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else if ( movie(E, B) )
%   | | then if ( genre(B, F) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.12660743296270735;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.08518475138839687;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( genre(B, E) )
%   | | then return 0.21864301681019258;  // std dev = 7.45e-09, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else if ( movie(F, B) )
%   | | | then return -0.11325642590314079;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.07877675473109173;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.18358653197988706;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else if ( genre(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(F, B) )
%   | | | then return -0.10237059603983752;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.07324622576333704;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A) )
%   | | then if ( genre(A, F) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.11581812324404982;  // std dev = 0.229, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.06842697784420272;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.14287183817646565;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else if ( genre(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(F, A) )
%   | | | then return -0.10361292501647422;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.0641918400820262;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.07498
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 0.617 seconds
Total inference time: 1.005 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.102333
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 0.329 seconds
Parameter learned model CLL: -0.102333


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 5], 'true,false,false,true': [0.0, 1, 0], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 4, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 5], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 1, 0], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 4, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.61, 1, 5], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 4, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 5], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 1, 0], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 4, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 5], 'true,false,false,true': [0.0, 1, 0], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 4, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, B)', 'true,false,true': 'genre(B, F)', 'false': 'movie(G, A)'}, {'true,true': [1.05e-08, 0, 5], 'true,false,true,true': [0.0, 0, 0], 'true,false,true,false': [0.0, 1, 0], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 4, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [7.45e-09, 0, 5], 'true,false,false,true': [0.0, 1, 0], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 4, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 0, 5], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 1, 0], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 4, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'true,false,true': 'genre(A, F)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 0, 0], 'true,false,true,true': [0.0, 0, 0], 'true,false,true,false': [0.229, 1, 5], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 4, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 5], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 1, 0], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 4, 0], 'false,false': [0.0, 0, 0]}]]
[{'': [0.1388888888888887, 0.0], 'true': [nan, 0.1388888888888887], 'true,false': [0.0, 0.0], 'false': [0.0, nan], 'true,false,false': [0.0, nan]}, {'': [0.09915090450905224, 0.0], 'true': [0.0, 0.0], 'false': [0.0, nan], 'true,false': [nan, 0.0], 'true,false,false': [0.0, nan]}, {'': [0.061916714078618984, 0.0], 'true': [nan, 0.061916714078618984], 'true,false': [0.061916714078618984, nan], 'false': [0.0, nan]}, {'': [0.051606286959794835, 0.0], 'true': [0.0, 0.0], 'false': [0.0, nan], 'true,false': [nan, 0.0], 'true,false,false': [0.0, nan]}, {'': [0.03234772297251024, 0.0], 'true': [nan, 0.03234772297251024], 'true,false': [-2.2204460492503132e-17, 0.0], 'false': [0.0, nan], 'true,false,false': [0.0, nan]}, {'': [0.021605743802346058, 0.0], 'true': [2.2204460492503132e-17, 0.0], 'false': [0.0, nan], 'true,false': [0.0, nan], 'true,false,true': [nan, 0.0]}, {'': [0.015299616676864075, 0.0], 'true': [nan, 0.015299616676864075], 'true,false': [1.1102230246251566e-17, 0.0], 'false': [0.0, nan], 'true,false,false': [0.0, nan]}, {'': [0.011357149870179049, 0.0], 'true': [0.0, 0.0], 'false': [0.0, nan], 'true,false': [nan, 0.0], 'true,false,false': [0.0, nan]}, {'': [0.008749356217304974, 0.0], 'true': [nan, 0.008749356217304974], 'true,false': [0.008749356217304974, nan], 'true,false,true': [nan, 0.008749356217304974], 'false': [0.0, nan]}, {'': [0.008438158123094395, 0.0], 'true': [0.0, 0.0], 'false': [0.0, nan], 'true,false': [nan, 0.0], 'true,false,false': [0.0, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;true;genre(B, D).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;true;genre(B, D).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;true;genre(B, E).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;true;genre(B, D).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(B, E).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;true;genre(B, D).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;true;genre(B, D).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.8581489350995122;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return -0.14185106490048777;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   else return -0.14185106490048777;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7194734122109545;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return -0.12544463852839138;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   else return -0.12544463852839138;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.44408596758963603;  // std dev = 0.610, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   else return -0.11231637819360639;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.4447988520039283;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return -0.16476268394672763;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   else return -0.10159632948783628;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.3392793852013426;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return -0.14332149068065764;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   else return -0.09269127618926096;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.26780523845758497;  // std dev = 1.05e-08, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return -0.12660743296270735;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   else return -0.08518475138839687;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.21864301681019258;  // std dev = 7.45e-09, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return -0.11325642590314079;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   else return -0.07877675473109173;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.18358653197988706;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return -0.10237059603983752;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   else return -0.07324622576333704;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.11581812324404982;  // std dev = 0.229, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   else return -0.06842697784420272;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.14287183817646565;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return -0.10361292501647422;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   else return -0.0641918400820262;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */


Results
   AUC ROC   = 0.999547
   AUC PR    = 0.949153
   CLL	      = -0.075613
   Precision = 0.949153 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.973913


Total learning time: 0.523 seconds
Total inference time: 0.909 seconds
AUC ROC: 0.999547


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.102333
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 0.309 seconds
Refined model CLL: -0.102333


******************************************
Best model found
******************************************
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.07498
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 1.7779999999999998 seconds
Total inference time: 1.005 seconds
AUC ROC: 1.0
Total revision time: 1.7779999999999998
Best scored revision CLL: -0.102333


Dataset: 4_cora_imdb, Fold: 1, Type: Transfer (trRDN-B), Time: 00:03:48
{'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.07498, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 1.7779999999999998, 'Inference time': 1.005, 'parameter_5': {'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.07498, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 0.617, 'Inference time': 1.005}}


Amount of data: 10
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;title(I, H), venue(I, A).;false;false
0;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
0;false;haswordvenue(A, L), haswordtitle(M, L).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordtitle(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordauthor(I, H).;false;true
2;true,false,false;haswordvenue(A, J), haswordtitle(K, J).;false;false
2;false;haswordvenue(A, L), haswordtitle(M, L).;true;false
2;false,true;haswordauthor(N, L).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;title(E, D), venue(E, B).;false;true
3;true,true,false;title(F, D), venue(F, A).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, A).;false;true
4;true,true,false;title(F, D), venue(F, B).;false;false
4;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
4;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
4;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
4;false,true;haswordauthor(M, K).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, B).;false;true
5;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
5;true,false;haswordvenue(B, H), haswordtitle(I, H).;true;true
5;true,false,true;title(J, I), venue(J, B).;false;false
5;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
5;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;title(E, D), venue(E, A).;false;true
6;true,true,false;title(F, D), venue(F, B).;false;false
6;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
6;true,false,true;title(I, H), venue(I, B).;false;false
6;true,false,false;haswordvenue(A, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;title(F, D), venue(F, A).;false;false
7;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
7;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
7;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
7;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;title(E, D), venue(E, A).;false;true
8;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
8;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
8;true,false,true;title(J, I), venue(J, A).;false;false
8;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
8;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, B).;false;true
9;true,true,false;title(F, D), venue(F, A).;false;false
9;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
9;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
9;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
9;false,true;haswordauthor(M, K).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995123;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.2581489350995122;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.1418510649004878;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7194734122109543;  // std dev = 2.98e-08, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( genre(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(F, B) )
%   | | | then return 0.22373365448410584;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.12544463852839138;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A) )
%   | | then return 0.41440562344290477;  // std dev = 1.270, 13.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=10 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.11231637819360639;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.45213998581002995;  // std dev = 2.58e-08, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( genre(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(F, B) )
%   | | | then return 0.11171167833049375;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.10159632948783627;  // std dev = 1.86e-09, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( genre(B, E) )
%   | | then return 0.34430497579425084;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.08826063126898408;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.09269127618926097;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.2712138075990018;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( movie(E, B) )
%   | | then if ( genre(B, F) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.06901634036082047;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.08518475138839687;  // std dev = 2.63e-09, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( genre(B, E) )
%   | | then return 0.22102782290567807;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.05355964640388731;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.07877675473109173;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.18531951305460392;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( genre(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(F, B) )
%   | | | then return 0.04133508154484875;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.07324622576333704;  // std dev = 9.31e-10, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A) )
%   | | then if ( genre(A, F) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.11003782695333858;  // std dev = 1.118, 13.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=10 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.06842697784420272;  // std dev = 2.63e-09, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.1447888525281511;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( genre(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(F, A) )
%   | | | then return 0.005823660264997121;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.0641918400820262;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.181598
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 0.659 seconds
Total inference time: 0.935 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 0.97
   AUC PR    = 0.974176
   CLL	      = -0.244763
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.8
   F1        = 0.888889


Total scoring time: 0.338 seconds
Parameter learned model CLL: -0.244763


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 8], 'true,false,false,true': [1.095, 3, 2], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 7, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [2.98e-08, 0, 8], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [1.095, 3, 2], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 7, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [1.27, 3, 10], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 7, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [2.58e-08, 0, 8], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [1.095, 3, 2], 'true,false,false,false': [0.0, 0, 0], 'false,true': [1.86e-09, 7, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 8], 'true,false,false,true': [1.095, 3, 2], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 7, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, B)', 'true,false,true': 'genre(B, F)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 0, 8], 'true,false,true,true': [0.0, 0, 0], 'true,false,true,false': [1.095, 3, 2], 'true,false,false': [0.0, 0, 0], 'false,true': [2.63e-09, 7, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 8], 'true,false,false,true': [1.095, 3, 2], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 7, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 0, 8], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [1.095, 3, 2], 'true,false,false,false': [0.0, 0, 0], 'false,true': [9.31e-10, 7, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'true,false,true': 'genre(A, F)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 0, 0], 'true,false,true,true': [0.0, 0, 0], 'true,false,true,false': [1.118, 3, 10], 'true,false,false': [0.0, 0, 0], 'false,true': [2.63e-09, 7, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 8], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [1.095, 3, 2], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 7, 0], 'false,false': [0.0, 0, 0]}]]
[{'': [0.1775147928994082, -7.93016446160826e-18], 'true': [nan, 0.1775147928994082], 'true,false': [-2.220446049250313e-16, 0.24000000000000005], 'true,false,false': [0.24000000000000005, nan], 'false': [-7.93016446160826e-18, nan]}, {'': [0.15047524435291718, -1.982541115402065e-18], 'true': [1.1102230246251565e-16, 0.24000000000000005], 'true,false': [nan, 0.24000000000000005], 'true,false,false': [0.24000000000000005, nan], 'false': [-1.982541115402065e-18, nan]}, {'': [0.12409961372713268, -1.982541115402065e-18], 'true': [nan, 0.12409961372713268], 'true,false': [0.12409961372713268, nan], 'false': [-1.982541115402065e-18, nan]}, {'': [0.1197376171676642, 0.0], 'true': [8.326672684688674e-17, 0.23999999999999994], 'true,false': [nan, 0.23999999999999994], 'true,false,false': [0.23999999999999994, nan], 'false': [0.0, nan]}, {'': [0.10782454588482203, 0.0], 'true': [nan, 0.10782454588482203], 'true,false': [-2.7755575615628914e-17, 0.23999999999999994], 'true,false,false': [0.23999999999999994, nan], 'false': [0.0, nan]}, {'': [0.10198433509054092, 9.912705577010326e-19], 'true': [0.0, 0.24], 'true,false': [0.24, nan], 'true,false,true': [nan, 0.24], 'false': [9.912705577010326e-19, nan]}, {'': [0.09894570180848164, -9.912705577010326e-19], 'true': [nan, 0.09894570180848164], 'true,false': [-2.7755575615628914e-17, 0.24], 'true,false,false': [0.24, nan], 'false': [-9.912705577010326e-19, nan]}, {'': [0.09721456012241118, 9.912705577010326e-19], 'true': [0.0, 0.23999999999999994], 'true,false': [nan, 0.23999999999999994], 'true,false,false': [0.23999999999999994, nan], 'false': [9.912705577010326e-19, nan]}, {'': [0.09613610564467481, 9.912705577010326e-19], 'true': [nan, 0.09613610564467481], 'true,false': [0.09613610564467481, nan], 'true,false,true': [nan, 0.09613610564467481], 'false': [9.912705577010326e-19, nan]}, {'': [0.09687842003804385, -4.956352788505163e-19], 'true': [-3.469446951953614e-18, 0.23999999999999994], 'true,false': [nan, 0.23999999999999994], 'true,false,false': [0.23999999999999994, nan], 'false': [-4.956352788505163e-19, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;true;genre(B, D).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;true;genre(B, D).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;true;genre(B, E).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;true;genre(B, D).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(B, E).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;true;genre(B, D).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;true;genre(B, D).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.8581489350995123;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else return 0.2581489350995122;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   else return -0.1418510649004878;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7194734122109543;  // std dev = 2.98e-08, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else return 0.22373365448410584;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   else return -0.12544463852839138;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.2111316778425026;  // std dev = 5.27e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( female(A) )
%   | | then return 0.6487671909107696;  // std dev = 0.256, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return 0.5553664367462845;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return -0.11231637819360639;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.4090667920674391;  // std dev = 0.031, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else return 0.15768091106459386;  // std dev = 0.920, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   else return -0.10159632948783627;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.3150314792201554;  // std dev = 0.027, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else return 0.12865912591434941;  // std dev = 0.907, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   else return -0.09269127618926097;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.2513165699884939;  // std dev = 0.024, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else return 0.10348154916699462;  // std dev = 0.897, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   else return -0.08518475138839687;  // std dev = 2.63e-09, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.2070450386527941;  // std dev = 0.021, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else return 0.08231697065466992;  // std dev = 0.889, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   else return -0.07877675473109173;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.17511359724848163;  // std dev = 0.018, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else return 0.06494028306690422;  // std dev = 0.884, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   else return -0.07324622576333704;  // std dev = 2.63e-09, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.27048362614272703;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( female(A) )
%   | | then return 0.29949656966140703;  // std dev = 0.426, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return 0.15570191161228042;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return -0.06842697784420272;  // std dev = 2.63e-09, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.12671315941714867;  // std dev = 0.035, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else return 0.05100591325395045;  // std dev = 0.744, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   else return -0.0641918400820262;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */


Results
   AUC ROC   = 0.999765
   AUC PR    = 0.983476
   CLL	      = -0.120424
   Precision = 0.949153 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.973913


Total learning time: 0.733 seconds
Total inference time: 0.87 seconds
AUC ROC: 0.999765


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.168066
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 0.328 seconds
Refined model CLL: -0.168066


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.999765
   AUC PR    = 0.983476
   CLL	      = -0.120424
   Precision = 0.949153 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.973913


Total learning time: 2.058 seconds
Total inference time: 0.87 seconds
AUC ROC: 0.999765
Total revision time: 2.058
Best scored revision CLL: -0.168066


Dataset: 4_cora_imdb, Fold: 1, Type: Transfer (trRDN-B), Time: 00:03:53
{'AUC ROC': 0.999765, 'AUC PR': 0.983476, 'CLL': -0.120424, 'Precision': [0.949153, 0.5], 'Recall': 1.0, 'F1': 0.973913, 'Learning time': 2.058, 'Inference time': 0.87, 'parameter_10': {'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.181598, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 0.659, 'Inference time': 0.935}}


Amount of data: 15
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;title(I, H), venue(I, A).;false;false
0;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
0;false;haswordvenue(A, L), haswordtitle(M, L).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordtitle(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordauthor(I, H).;false;true
2;true,false,false;haswordvenue(A, J), haswordtitle(K, J).;false;false
2;false;haswordvenue(A, L), haswordtitle(M, L).;true;false
2;false,true;haswordauthor(N, L).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;title(E, D), venue(E, B).;false;true
3;true,true,false;title(F, D), venue(F, A).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, A).;false;true
4;true,true,false;title(F, D), venue(F, B).;false;false
4;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
4;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
4;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
4;false,true;haswordauthor(M, K).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, B).;false;true
5;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
5;true,false;haswordvenue(B, H), haswordtitle(I, H).;true;true
5;true,false,true;title(J, I), venue(J, B).;false;false
5;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
5;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;title(E, D), venue(E, A).;false;true
6;true,true,false;title(F, D), venue(F, B).;false;false
6;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
6;true,false,true;title(I, H), venue(I, B).;false;false
6;true,false,false;haswordvenue(A, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;title(F, D), venue(F, A).;false;false
7;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
7;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
7;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
7;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;title(E, D), venue(E, A).;false;true
8;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
8;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
8;true,false,true;title(J, I), venue(J, A).;false;false
8;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
8;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, B).;false;true
9;true,true,false;title(F, D), venue(F, A).;false;false
9;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
9;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
9;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
9;false,true;haswordauthor(M, K).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995123;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.28672036367094084;  // std dev = 1.309, 7.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=3 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.1418510649004878;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7194734122109542;  // std dev = 4.21e-08, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | else if ( genre(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(F, B) )
%   | | | then return 0.24811816884741303;  // std dev = 1.309, 7.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=3 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.12544463852839138;  // std dev = 5.27e-09, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A) )
%   | | then return 0.42756792959513135;  // std dev = 1.499, 19.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=15 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.11231637819360638;  // std dev = 1.32e-09, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.44888165821824616;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | else if ( genre(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(F, B) )
%   | | | then return 0.12652957390714034;  // std dev = 1.309, 7.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=3 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.10159632948783628;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( genre(B, E) )
%   | | then return 0.3420725235996267;  // std dev = 2.11e-08, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.09920764288853479;  // std dev = 1.309, 7.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=3 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.09269127618926097;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.2697001417647192;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | else if ( movie(E, B) )
%   | | then if ( genre(B, F) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.07693556620829264;  // std dev = 1.309, 7.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=3 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.08518475138839687;  // std dev = 5.27e-09, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( genre(B, E) )
%   | | then return 0.2199694177461191;  // std dev = 1.05e-08, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.05920149538990246;  // std dev = 1.309, 7.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=3 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.07877675473109172;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.18455085184134923;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | else if ( genre(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(F, B) )
%   | | | then return 0.04530796058505389;  // std dev = 1.309, 7.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=3 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.07324622576333704;  // std dev = 1.32e-09, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A) )
%   | | then if ( genre(A, F) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.11275313730560767;  // std dev = 1.335, 19.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=15 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.06842697784420272;  // std dev = 2.63e-09, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.14391855019135721;  // std dev = 1.18e-08, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | else if ( genre(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(F, A) )
%   | | | then return 0.007324850977956289;  // std dev = 1.309, 7.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=3 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.06419184008202619;  // std dev = 1.61e-09, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.193809
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 0.706 seconds
Total inference time: 1.02 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 0.973333
   AUC PR    = 0.976114
   CLL	      = -0.236584
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.8
   F1        = 0.888889


Total scoring time: 0.364 seconds
Parameter learned model CLL: -0.236584


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 12], 'true,false,false,true': [1.309, 4, 3], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 11, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [4.21e-08, 0, 12], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [1.309, 4, 3], 'true,false,false,false': [0.0, 0, 0], 'false,true': [5.27e-09, 11, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [1.499, 4, 15], 'true,false,false': [0.0, 0, 0], 'false,true': [1.32e-09, 11, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 12], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [1.309, 4, 3], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 11, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [2.11e-08, 0, 12], 'true,false,false,true': [1.309, 4, 3], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 11, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, B)', 'true,false,true': 'genre(B, F)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 0, 12], 'true,false,true,true': [0.0, 0, 0], 'true,false,true,false': [1.309, 4, 3], 'true,false,false': [0.0, 0, 0], 'false,true': [5.27e-09, 11, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [1.05e-08, 0, 12], 'true,false,false,true': [1.309, 4, 3], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 11, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 0, 12], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [1.309, 4, 3], 'true,false,false,false': [0.0, 0, 0], 'false,true': [1.32e-09, 11, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'true,false,true': 'genre(A, F)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 0, 0], 'true,false,true,true': [0.0, 0, 0], 'true,false,true,false': [1.335, 4, 15], 'true,false,false': [0.0, 0, 0], 'false,true': [2.63e-09, 11, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [1.18e-08, 0, 12], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [1.309, 4, 3], 'true,false,false,false': [0.0, 0, 0], 'false,true': [1.61e-09, 11, 0], 'false,false': [0.0, 0, 0]}]]
[{'': [0.16620498614958412, -1.0092936587501423e-17], 'true': [nan, 0.16620498614958412], 'true,false': [-1.4802973661668753e-16, 0.24489795918367335], 'true,false,false': [0.24489795918367335, nan], 'false': [-1.0092936587501423e-17, nan]}, {'': [0.14192297193606085, 2.523234146875356e-18], 'true': [1.4802973661668753e-16, 0.2448979591836735], 'true,false': [nan, 0.2448979591836735], 'true,false,false': [0.2448979591836735, nan], 'false': [2.523234146875356e-18, nan]}, {'': [0.1182240640755972, 5.046468293750712e-18], 'true': [nan, 0.1182240640755972], 'true,false': [0.1182240640755972, nan], 'false': [5.046468293750712e-18, nan]}, {'': [0.11440426963225651, 0.0], 'true': [-3.700743415417188e-17, 0.24489795918367346], 'true,false': [nan, 0.24489795918367346], 'true,false,false': [0.24489795918367346, nan], 'false': [0.0, nan]}, {'': [0.10395022159330981, 0.0], 'true': [nan, 0.10395022159330981], 'true,false': [3.700743415417188e-17, 0.24489795918367346], 'true,false,false': [0.24489795918367346, nan], 'false': [0.0, nan]}, {'': [0.09887178898875992, 2.523234146875356e-18], 'true': [-2.7755575615628914e-17, 0.2448979591836735], 'true,false': [0.2448979591836735, nan], 'true,false,true': [nan, 0.2448979591836735], 'false': [2.523234146875356e-18, nan]}, {'': [0.09623966720100348, 0.0], 'true': [nan, 0.09623966720100348], 'true,false': [9.25185853854297e-18, 0.2448979591836735], 'true,false,false': [0.2448979591836735, nan], 'false': [0.0, nan]}, {'': [0.09473703469175411, 6.30808536718839e-19], 'true': [-4.625929269271485e-18, 0.24489795918367352], 'true,false': [nan, 0.24489795918367352], 'true,false,false': [0.24489795918367352, nan], 'false': [6.30808536718839e-19, nan]}, {'': [0.09379368414130788, 6.30808536718839e-19], 'true': [nan, 0.09379368414130788], 'true,false': [0.09379368414130788, nan], 'true,false,true': [nan, 0.09379368414130788], 'false': [6.30808536718839e-19, nan]}, {'': [0.09456700005338466, 2.523234146875356e-18], 'true': [1.1564823173178714e-17, 0.24489795918367352], 'true,false': [nan, 0.24489795918367352], 'true,false,false': [0.24489795918367352, nan], 'false': [2.523234146875356e-18, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;true;genre(B, D).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;true;genre(B, D).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;true;genre(B, E).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;true;genre(B, D).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(B, E).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;true;genre(B, D).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;true;genre(B, D).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.8581489350995123;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | else if ( female(A) )
%   | | then return 0.8581489350995121;  // std dev = 2.11e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return -0.14185106490048777;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   else return -0.1418510649004878;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7194734122109542;  // std dev = 4.21e-08, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | else if ( female(A) )
%   | | then return 0.7194734122109545;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return -0.12544463852839138;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   else return -0.12544463852839138;  // std dev = 5.27e-09, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B) )
%   | then return 0.5553664367462846;  // std dev = 0.000, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else return -0.11231637819360639;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   else return -0.11231637819360638;  // std dev = 7.45e-09, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.4175135841583098;  // std dev = 4.21e-08, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | else if ( female(A) )
%   | | then return 0.41751358415830997;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return -0.10159632948783628;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   else return -0.10159632948783628;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.3207118471601497;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | else if ( female(A) )
%   | | then return 0.32071184716014967;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return -0.09269127618926096;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   else return -0.09269127618926097;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.2551722425694894;  // std dev = 2.11e-08, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | else if ( female(A) )
%   | | then return 0.25517224256948945;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return -0.08518475138839687;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   else return -0.08518475138839687;  // std dev = 5.27e-09, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.20975771563253562;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | else if ( female(A) )
%   | | then return 0.20975771563253554;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return -0.07877675473109173;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   else return -0.07877675473109172;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.17709649774527736;  // std dev = 1.05e-08, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | else if ( female(A) )
%   | | then return 0.17709649774527736;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return -0.07324622576333704;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   else return -0.07324622576333704;  // std dev = 2.63e-09, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B) )
%   | then return 0.15274385809367091;  // std dev = 1.67e-08, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else return -0.06842697784420272;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   else return -0.06842697784420272;  // std dev = 2.63e-09, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.13400703000801117;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | else if ( female(A) )
%   | | then return 0.13400703000801117;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return -0.0641918400820262;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   else return -0.06419184008202619;  // std dev = 5.27e-09, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */


Results
   AUC ROC   = 0.999547
   AUC PR    = 0.949153
   CLL	      = -0.242832
   Precision = 0.110454 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.198934


Total learning time: 0.719 seconds
Total inference time: 0.95 seconds
AUC ROC: 0.999547


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.094637
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 0.357 seconds
Refined model CLL: -0.094637


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.999547
   AUC PR    = 0.949153
   CLL	      = -0.242832
   Precision = 0.110454 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.198934


Total learning time: 2.146 seconds
Total inference time: 0.95 seconds
AUC ROC: 0.999547
Total revision time: 2.146
Best scored revision CLL: -0.094637


Dataset: 4_cora_imdb, Fold: 1, Type: Transfer (trRDN-B), Time: 00:03:57
{'AUC ROC': 0.999547, 'AUC PR': 0.949153, 'CLL': -0.242832, 'Precision': [0.110454, 0.5], 'Recall': 1.0, 'F1': 0.198934, 'Learning time': 2.146, 'Inference time': 0.95, 'parameter_15': {'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.193809, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 0.706, 'Inference time': 1.02}}


Amount of data: 20
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;title(I, H), venue(I, A).;false;false
0;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
0;false;haswordvenue(A, L), haswordtitle(M, L).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordtitle(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordauthor(I, H).;false;true
2;true,false,false;haswordvenue(A, J), haswordtitle(K, J).;false;false
2;false;haswordvenue(A, L), haswordtitle(M, L).;true;false
2;false,true;haswordauthor(N, L).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;title(E, D), venue(E, B).;false;true
3;true,true,false;title(F, D), venue(F, A).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, A).;false;true
4;true,true,false;title(F, D), venue(F, B).;false;false
4;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
4;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
4;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
4;false,true;haswordauthor(M, K).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, B).;false;true
5;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
5;true,false;haswordvenue(B, H), haswordtitle(I, H).;true;true
5;true,false,true;title(J, I), venue(J, B).;false;false
5;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
5;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;title(E, D), venue(E, A).;false;true
6;true,true,false;title(F, D), venue(F, B).;false;false
6;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
6;true,false,true;title(I, H), venue(I, B).;false;false
6;true,false,false;haswordvenue(A, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;title(F, D), venue(F, A).;false;false
7;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
7;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
7;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
7;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;title(E, D), venue(E, A).;false;true
8;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
8;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
8;true,false,true;title(J, I), venue(J, A).;false;false
8;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
8;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, B).;false;true
9;true,true,false;title(F, D), venue(F, A).;false;false
9;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
9;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
9;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
9;false,true;haswordauthor(M, K).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995123;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.2581489350995123;  // std dev = 1.549, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.1418510649004878;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7194734122109542;  // std dev = 5.96e-08, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | else if ( genre(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(F, B) )
%   | | | then return 0.22373365448410584;  // std dev = 1.549, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.12544463852839138;  // std dev = 7.45e-09, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A) )
%   | | then return 0.41440562344290505;  // std dev = 1.796, 26.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=20 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.11231637819360636;  // std dev = 2.95e-09, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.45213998581002995;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | else if ( genre(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(F, B) )
%   | | | then return 0.11171167833049375;  // std dev = 1.549, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.1015963294878363;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( genre(B, E) )
%   | | then return 0.34430497579425084;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.08826063126898412;  // std dev = 1.549, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.09269127618926096;  // std dev = 1.32e-09, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.2712138075990018;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | else if ( movie(E, B) )
%   | | then if ( genre(B, F) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.0690163403608203;  // std dev = 1.549, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.08518475138839686;  // std dev = 8.33e-09, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( genre(B, E) )
%   | | then return 0.22102782290567796;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.05355964640388711;  // std dev = 1.549, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.07877675473109172;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.18531951305460392;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | else if ( genre(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(F, B) )
%   | | | then return 0.04133508154484848;  // std dev = 1.549, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.07324622576333704;  // std dev = 9.31e-10, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A) )
%   | | then if ( genre(A, F) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.11003782695333858;  // std dev = 1.581, 26.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=20 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.06842697784420272;  // std dev = 3.73e-09, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.1447888525281511;  // std dev = 7.45e-09, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | else if ( genre(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(F, A) )
%   | | | then return 0.00582366026499691;  // std dev = 1.549, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.06419184008202619;  // std dev = 1.86e-09, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.181598
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 0.675 seconds
Total inference time: 1.036 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 0.97
   AUC PR    = 0.973459
   CLL	      = -0.244763
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.8
   F1        = 0.888889


Total scoring time: 0.387 seconds
Parameter learned model CLL: -0.244763


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 16], 'true,false,false,true': [1.549, 6, 4], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 14, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [5.96e-08, 0, 16], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [1.549, 6, 4], 'true,false,false,false': [0.0, 0, 0], 'false,true': [7.45e-09, 14, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [1.796, 6, 20], 'true,false,false': [0.0, 0, 0], 'false,true': [2.95e-09, 14, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 16], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [1.549, 6, 4], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 14, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 16], 'true,false,false,true': [1.549, 6, 4], 'true,false,false,false': [0.0, 0, 0], 'false,true': [1.32e-09, 14, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, B)', 'true,false,true': 'genre(B, F)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 0, 16], 'true,false,true,true': [0.0, 0, 0], 'true,false,true,false': [1.549, 6, 4], 'true,false,false': [0.0, 0, 0], 'false,true': [8.33e-09, 14, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 16], 'true,false,false,true': [1.549, 6, 4], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 14, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 0, 16], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [1.549, 6, 4], 'true,false,false,false': [0.0, 0, 0], 'false,true': [9.31e-10, 14, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'true,false,true': 'genre(A, F)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 0, 0], 'true,false,true,true': [0.0, 0, 0], 'true,false,true,false': [1.581, 6, 20], 'true,false,false': [0.0, 0, 0], 'false,true': [3.73e-09, 14, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [7.45e-09, 0, 16], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [1.549, 6, 4], 'true,false,false,false': [0.0, 0, 0], 'false,true': [1.86e-09, 14, 0], 'false,false': [0.0, 0, 0]}]]
[{'': [0.17751479289940847, -1.1895246692412391e-17], 'true': [nan, 0.17751479289940847], 'true,false': [-2.220446049250313e-16, 0.23999999999999985], 'true,false,false': [0.23999999999999985, nan], 'false': [-1.1895246692412391e-17, nan]}, {'': [0.15047524435291754, 3.96508223080413e-18], 'true': [2.220446049250313e-16, 0.2399999999999999], 'true,false': [nan, 0.2399999999999999], 'true,false,false': [0.2399999999999999, nan], 'false': [3.96508223080413e-18, nan]}, {'': [0.12409961372713244, 9.912705577010326e-18], 'true': [nan, 0.12409961372713244], 'true,false': [0.12409961372713244, nan], 'false': [9.912705577010326e-18, nan]}, {'': [0.11973761716766432, -3.96508223080413e-18], 'true': [0.0, 0.23999999999999994], 'true,false': [nan, 0.23999999999999994], 'true,false,false': [0.23999999999999994, nan], 'false': [-3.96508223080413e-18, nan]}, {'': [0.10782454588482207, 3.96508223080413e-18], 'true': [nan, 0.10782454588482207], 'true,false': [-6.938893903907228e-17, 0.23999999999999994], 'true,false,false': [0.23999999999999994, nan], 'false': [3.96508223080413e-18, nan]}, {'': [0.10198433509054088, 4.956352788505163e-18], 'true': [0.0, 0.2399999999999999], 'true,false': [0.2399999999999999, nan], 'true,false,true': [nan, 0.2399999999999999], 'false': [4.956352788505163e-18, nan]}, {'': [0.09894570180848156, -9.912705577010326e-19], 'true': [nan, 0.09894570180848156], 'true,false': [-2.7755575615628914e-17, 0.23999999999999994], 'true,false,false': [0.23999999999999994, nan], 'false': [-9.912705577010326e-19, nan]}, {'': [0.09721456012241124, 9.912705577010326e-19], 'true': [0.0, 0.24000000000000007], 'true,false': [nan, 0.24000000000000007], 'true,false,false': [0.24000000000000007, nan], 'false': [9.912705577010326e-19, nan]}, {'': [0.09613610564467481, 9.912705577010326e-19], 'true': [nan, 0.09613610564467481], 'true,false': [0.09613610564467481, nan], 'true,false,true': [nan, 0.09613610564467481], 'false': [9.912705577010326e-19, nan]}, {'': [0.09687842003804382, 3.469446951953614e-18], 'true': [3.469446951953614e-18, 0.2399999999999999], 'true,false': [nan, 0.2399999999999999], 'true,false,false': [0.2399999999999999, nan], 'false': [3.469446951953614e-18, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;true;genre(B, D).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;true;genre(B, D).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;true;genre(B, E).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;true;genre(B, D).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(B, E).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;true;genre(B, D).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;true;genre(B, D).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.8581489350995123;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | else if ( actor(B) )
%   | | then return -0.1418510649004878;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else return 0.8581489350995122;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else return -0.1418510649004878;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7194734122109542;  // std dev = 5.96e-08, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | else if ( actor(B) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else return 0.7194734122109545;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else return -0.12544463852839138;  // std dev = 7.45e-09, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.11231637819360639;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else return 0.5553664367462846;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   else return -0.11231637819360636;  // std dev = 1.18e-08, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.4175135841583098;  // std dev = 5.16e-08, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | else if ( actor(B) )
%   | | then return -0.10159632948783627;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else return 0.41751358415830997;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else return -0.1015963294878363;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.32071184716014967;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | else if ( actor(B) )
%   | | then return -0.09269127618926097;  // std dev = 2.63e-09, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else return 0.32071184716014967;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else return -0.09269127618926096;  // std dev = 7.45e-09, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.2551722425694894;  // std dev = 2.11e-08, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | else if ( actor(B) )
%   | | then return -0.08518475138839687;  // std dev = 2.63e-09, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else return 0.25517224256948945;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else return -0.08518475138839686;  // std dev = 8.33e-09, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.20975771563253562;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | else if ( actor(B) )
%   | | then return -0.07877675473109173;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else return 0.20975771563253554;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else return -0.07877675473109172;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.17709649774527741;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | else if ( actor(B) )
%   | | then return -0.07324622576333704;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else return 0.17709649774527736;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else return -0.07324622576333704;  // std dev = 3.73e-09, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.06842697784420272;  // std dev = 1.86e-09, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else return 0.15274385809367083;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   else return -0.06842697784420272;  // std dev = 3.73e-09, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.13400703000801117;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | else if ( actor(B) )
%   | | then return -0.0641918400820262;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else return 0.13400703000801117;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else return -0.06419184008202619;  // std dev = 6.97e-09, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */


Results
   AUC ROC   = 0.999547
   AUC PR    = 0.949153
   CLL	      = -0.065262
   Precision = 0.949153 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.973913


Total learning time: 0.769 seconds
Total inference time: 0.924 seconds
AUC ROC: 0.999547


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.094637
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 0.357 seconds
Refined model CLL: -0.094637


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.999547
   AUC PR    = 0.949153
   CLL	      = -0.065262
   Precision = 0.949153 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.973913


Total learning time: 2.1879999999999997 seconds
Total inference time: 0.924 seconds
AUC ROC: 0.999547
Total revision time: 2.1879999999999997
Best scored revision CLL: -0.094637


Dataset: 4_cora_imdb, Fold: 1, Type: Transfer (trRDN-B), Time: 00:04:02
{'AUC ROC': 0.999547, 'AUC PR': 0.949153, 'CLL': -0.065262, 'Precision': [0.949153, 0.5], 'Recall': 1.0, 'F1': 0.973913, 'Learning time': 2.1879999999999997, 'Inference time': 0.924, 'parameter_20': {'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.181598, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 0.675, 'Inference time': 1.036}}


Amount of data: 25
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;title(I, H), venue(I, A).;false;false
0;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
0;false;haswordvenue(A, L), haswordtitle(M, L).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordtitle(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordauthor(I, H).;false;true
2;true,false,false;haswordvenue(A, J), haswordtitle(K, J).;false;false
2;false;haswordvenue(A, L), haswordtitle(M, L).;true;false
2;false,true;haswordauthor(N, L).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;title(E, D), venue(E, B).;false;true
3;true,true,false;title(F, D), venue(F, A).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, A).;false;true
4;true,true,false;title(F, D), venue(F, B).;false;false
4;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
4;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
4;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
4;false,true;haswordauthor(M, K).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, B).;false;true
5;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
5;true,false;haswordvenue(B, H), haswordtitle(I, H).;true;true
5;true,false,true;title(J, I), venue(J, B).;false;false
5;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
5;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;title(E, D), venue(E, A).;false;true
6;true,true,false;title(F, D), venue(F, B).;false;false
6;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
6;true,false,true;title(I, H), venue(I, B).;false;false
6;true,false,false;haswordvenue(A, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;title(F, D), venue(F, A).;false;false
7;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
7;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
7;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
7;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;title(E, D), venue(E, A).;false;true
8;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
8;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
8;true,false,true;title(J, I), venue(J, A).;false;false
8;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
8;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, B).;false;true
9;true,true,false;title(F, D), venue(F, A).;false;false
9;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
9;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
9;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
9;false,true;haswordauthor(M, K).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995122;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.274815601766179;  // std dev = 1.708, 12.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=5 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.14185106490048777;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7194734122109543;  // std dev = 7.30e-08, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | else if ( genre(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(F, B) )
%   | | | then return 0.23796730798362134;  // std dev = 1.708, 12.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=5 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.12544463852839138;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A) )
%   | | then return 0.4222324406032542;  // std dev = 1.965, 32.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=25 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.11231637819360635;  // std dev = 3.73e-09, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.45020194534547003;  // std dev = 4.21e-08, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | else if ( genre(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(F, B) )
%   | | | then return 0.12036770403746033;  // std dev = 1.708, 12.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=5 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.10159632948783635;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( genre(B, E) )
%   | | then return 0.34297675273008493;  // std dev = 4.21e-08, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.09467129564995395;  // std dev = 1.708, 12.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=5 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.09269127618926093;  // std dev = 2.63e-09, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.27031332392339363;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | else if ( movie(E, B) )
%   | | then if ( genre(B, F) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.0736648815782432;  // std dev = 1.708, 12.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=5 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.08518475138839683;  // std dev = 1.18e-08, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( genre(B, E) )
%   | | then return 0.22039829558817653;  // std dev = 1.05e-08, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.05687782960318325;  // std dev = 1.708, 12.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=5 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.07877675473109179;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.1848624095377826;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | else if ( genre(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(F, B) )
%   | | | then return 0.0436748095017904;  // std dev = 1.708, 12.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=5 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.07324622576333704;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A) )
%   | | then if ( genre(A, F) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.11165818669035274;  // std dev = 1.742, 32.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=25 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.06842697784420274;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.14427032841085152;  // std dev = 1.29e-08, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | else if ( genre(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(F, A) )
%   | | | then return 0.006691960795126082;  // std dev = 1.708, 12.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=5 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.0641918400820262;  // std dev = 1.32e-09, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.188654
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 0.682 seconds
Total inference time: 1.059 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 0.972
   AUC PR    = 0.974865
   CLL	      = -0.239955
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.8
   F1        = 0.888889


Total scoring time: 0.387 seconds
Parameter learned model CLL: -0.239955


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 20], 'true,false,false,true': [1.708, 7, 5], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 18, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [7.3e-08, 0, 20], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [1.708, 7, 5], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 18, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [1.965, 7, 25], 'true,false,false': [0.0, 0, 0], 'false,true': [3.73e-09, 18, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [4.21e-08, 0, 20], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [1.708, 7, 5], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 18, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [4.21e-08, 0, 20], 'true,false,false,true': [1.708, 7, 5], 'true,false,false,false': [0.0, 0, 0], 'false,true': [2.63e-09, 18, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, B)', 'true,false,true': 'genre(B, F)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 0, 20], 'true,false,true,true': [0.0, 0, 0], 'true,false,true,false': [1.708, 7, 5], 'true,false,false': [0.0, 0, 0], 'false,true': [1.18e-08, 18, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [1.05e-08, 0, 20], 'true,false,false,true': [1.708, 7, 5], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 18, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 0, 20], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [1.708, 7, 5], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 18, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'true,false,true': 'genre(A, F)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 0, 0], 'true,false,true,true': [0.0, 0, 0], 'true,false,true,false': [1.742, 7, 25], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 18, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [1.29e-08, 0, 20], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [1.708, 7, 5], 'true,false,false,false': [0.0, 0, 0], 'false,true': [1.32e-09, 18, 0], 'false,false': [0.0, 0, 0]}]]
[{'': [0.1708984375000011, -3.0839528461809902e-18], 'true': [nan, 0.1708984375000011], 'true,false': [-8.881784197001253e-17, 0.24305555555555536], 'true,false,false': [0.24305555555555536, nan], 'false': [-3.0839528461809902e-18, nan]}, {'': [0.14548523842900102, 0.0], 'true': [2.6645352591003756e-16, 0.24305555555555558], 'true,false': [nan, 0.24305555555555558], 'true,false,false': [0.24305555555555558, nan], 'false': [0.0, nan]}, {'': [0.12068693488168725, 1.5419764230904953e-17], 'true': [nan, 0.12068693488168725], 'true,false': [0.12068693488168725, nan], 'false': [1.5419764230904953e-17, nan]}, {'': [0.11664363647534062, -4.625929269271485e-18], 'true': [8.881784197001253e-17, 0.24305555555555558], 'true,false': [nan, 0.24305555555555558], 'true,false,false': [0.24305555555555558, nan], 'false': [-4.625929269271485e-18, nan]}, {'': [0.10559636458703006, 6.1679056923619804e-18], 'true': [nan, 0.10559636458703006], 'true,false': [8.881784197001253e-17, 0.24305555555555547], 'true,false,false': [0.24305555555555547, nan], 'false': [6.1679056923619804e-18, nan]}, {'': [0.10020925752320223, 7.709882115452476e-18], 'true': [-4.4408920985006264e-17, 0.24305555555555558], 'true,false': [0.24305555555555558, nan], 'true,false,true': [nan, 0.24305555555555558], 'false': [7.709882115452476e-18, nan]}, {'': [0.09741277305113402, 0.0], 'true': [nan, 0.09741277305113402], 'true,false': [5.551115123125783e-18, 0.24305555555555566], 'true,false,false': [0.24305555555555566, nan], 'false': [0.0, nan]}, {'': [0.0958178501467529, -7.709882115452476e-19], 'true': [-2.2204460492503132e-17, 0.2430555555555556], 'true,false': [nan, 0.2430555555555556], 'true,false,false': [0.2430555555555556, nan], 'false': [-7.709882115452476e-19, nan]}, {'': [0.09481994234443059, -1.5419764230904951e-18], 'true': [nan, 0.09481994234443059], 'true,false': [0.09481994234443059, nan], 'true,false,true': [nan, 0.09481994234443059], 'false': [-1.5419764230904951e-18, nan]}, {'': [0.09558203815422577, 2.3129646346357427e-18], 'true': [8.326672684688674e-18, 0.24305555555555555], 'true,false': [nan, 0.24305555555555555], 'true,false,false': [0.24305555555555555, nan], 'false': [2.3129646346357427e-18, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;true;genre(B, D).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;true;genre(B, D).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;true;genre(B, E).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;true;genre(B, D).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(B, E).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;true;genre(B, D).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;true;genre(B, D).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.8581489350995122;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | else if ( actor(B) )
%   | | then return -0.1418510649004878;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else return 0.8581489350995122;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return -0.14185106490048777;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7194734122109543;  // std dev = 7.30e-08, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | else if ( actor(B) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else return 0.7194734122109545;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return -0.12544463852839138;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B) )
%   | then return 0.5553664367462846;  // std dev = 0.000, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | else return -0.11231637819360639;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   else return -0.11231637819360635;  // std dev = 1.67e-08, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.41751358415830986;  // std dev = 5.16e-08, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | else if ( actor(B) )
%   | | then return -0.10159632948783627;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else return 0.4175135841583099;  // std dev = 1.49e-08, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return -0.10159632948783635;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.3207118471601496;  // std dev = 2.11e-08, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | else if ( actor(B) )
%   | | then return -0.09269127618926097;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else return 0.32071184716014967;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return -0.09269127618926093;  // std dev = 1.05e-08, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.25517224256948945;  // std dev = 1.49e-08, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | else if ( actor(B) )
%   | | then return -0.08518475138839687;  // std dev = 2.63e-09, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else return 0.25517224256948945;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return -0.08518475138839683;  // std dev = 1.18e-08, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.2097577156325356;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | else if ( actor(B) )
%   | | then return -0.07877675473109173;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else return 0.20975771563253556;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return -0.07877675473109179;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.17709649774527744;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | else if ( actor(B) )
%   | | then return -0.07324622576333704;  // std dev = 2.63e-09, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else return 0.17709649774527736;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return -0.07324622576333704;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B) )
%   | then return 0.15274385809367083;  // std dev = 0.000, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | else return -0.06842697784420272;  // std dev = 2.63e-09, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   else return -0.06842697784420274;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.13400703000801117;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | else if ( actor(B) )
%   | | then return -0.0641918400820262;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else return 0.13400703000801117;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return -0.0641918400820262;  // std dev = 6.45e-09, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */


Results
   AUC ROC   = 0.999547
   AUC PR    = 0.949153
   CLL	      = -0.065262
   Precision = 0.949153 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.973913


Total learning time: 0.878 seconds
Total inference time: 0.915 seconds
AUC ROC: 0.999547


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.094637
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 0.36 seconds
Refined model CLL: -0.094637


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.999547
   AUC PR    = 0.949153
   CLL	      = -0.065262
   Precision = 0.949153 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.973913


Total learning time: 2.307 seconds
Total inference time: 0.915 seconds
AUC ROC: 0.999547
Total revision time: 2.307
Best scored revision CLL: -0.094637


Dataset: 4_cora_imdb, Fold: 1, Type: Transfer (trRDN-B), Time: 00:04:07
{'AUC ROC': 0.999547, 'AUC PR': 0.949153, 'CLL': -0.065262, 'Precision': [0.949153, 0.5], 'Recall': 1.0, 'F1': 0.973913, 'Learning time': 2.307, 'Inference time': 0.915, 'parameter_25': {'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.188654, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 0.682, 'Inference time': 1.059}}


Starting fold 2

Target train facts examples: 870
Target train pos examples: 324
Target train neg examples: 10813

Target test facts examples: 208
Target test pos	 examples: 58
Target test neg examples: 3423

Amount of data: 5
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;title(I, H), venue(I, A).;false;false
0;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
0;false;haswordvenue(A, L), haswordtitle(M, L).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordtitle(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordauthor(I, H).;false;true
2;true,false,false;haswordvenue(A, J), haswordtitle(K, J).;false;false
2;false;haswordvenue(A, L), haswordtitle(M, L).;true;false
2;false,true;haswordauthor(N, L).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;title(E, D), venue(E, B).;false;true
3;true,true,false;title(F, D), venue(F, A).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, A).;false;true
4;true,true,false;title(F, D), venue(F, B).;false;false
4;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
4;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
4;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
4;false,true;haswordauthor(M, K).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, B).;false;true
5;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
5;true,false;haswordvenue(B, H), haswordtitle(I, H).;true;true
5;true,false,true;title(J, I), venue(J, B).;false;false
5;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
5;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;title(E, D), venue(E, A).;false;true
6;true,true,false;title(F, D), venue(F, B).;false;false
6;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
6;true,false,true;title(I, H), venue(I, B).;false;false
6;true,false,false;haswordvenue(A, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;title(F, D), venue(F, A).;false;false
7;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
7;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
7;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
7;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;title(E, D), venue(E, A).;false;true
8;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
8;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
8;true,false,true;title(J, I), venue(J, A).;false;false
8;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
8;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, B).;false;true
9;true,true,false;title(F, D), venue(F, A).;false;false
9;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
9;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
9;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
9;false,true;haswordauthor(M, K).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14185106490048777;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995122;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.8581489350995122;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.14185106490048777;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7194734122109545;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.7194734122109545;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.12544463852839138;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.11231637819360639;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( movie(E, A) )
%   | | then return 0.5553664367462845;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.11231637819360639;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.41751358415830997;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( genre(A, E) )
%   | | then return -0.10159632948783628;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.41751358415830997;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.10159632948783628;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.09269127618926096;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( genre(B, E) )
%   | | then return 0.32071184716014967;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.32071184716014967;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.09269127618926096;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.25517224256948945;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( movie(E, B) )
%   | | then if ( genre(B, F) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.08499374559054629;  // std dev = 0.241, 2.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.08518475138839687;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.09204594339777658;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( genre(B, E) )
%   | | then return 0.20975771563253554;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.23935700108516422;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.07877675473109173;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.17709649774527736;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( genre(A, E) )
%   | | then return -0.08463679078745934;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.19852082828804796;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.07324622576333704;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.07830602720680806;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( movie(E, A) )
%   | | then if ( genre(A, F) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.15595705270048746;  // std dev = 0.014, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.06842697784420272;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.1336345798425439;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( genre(A, E) )
%   | | then return -0.07283771686569032;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.1480417943537996;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.0641918400820262;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.541222
   Precision = 0.064516 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.121212


Total learning time: 0.652 seconds
Total inference time: 1.112 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.096588
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 0.325 seconds
Parameter learned model CLL: -0.096588


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 1, 0], 'true,false,true': [0.0, 0, 4], 'true,false,false,true': [0.0, 0, 1], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 4, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 4], 'true,false,true': [0.0, 1, 0], 'true,false,false,true': [0.0, 0, 1], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 4, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.0, 1, 0], 'true,false,true': [0.0, 0, 5], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 4, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 4], 'true,false,true': [0.0, 1, 0], 'true,false,false,true': [0.0, 0, 1], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 4, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 1, 0], 'true,false,true': [0.0, 0, 4], 'true,false,false,true': [0.0, 0, 1], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 4, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, B)', 'true,false,true': 'genre(B, F)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 0, 4], 'true,false,true,true': [0.0, 0, 0], 'true,false,true,false': [0.241, 1, 1], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 4, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 1, 0], 'true,false,true': [0.0, 0, 4], 'true,false,false,true': [0.0, 0, 1], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 4, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 0, 4], 'true,false,true': [0.0, 1, 0], 'true,false,false,true': [0.0, 0, 1], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 4, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'true,false,true': 'genre(A, F)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 1, 0], 'true,false,true,true': [0.0, 0, 0], 'true,false,true,false': [0.014, 0, 5], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 4, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 4], 'true,false,true': [0.0, 1, 0], 'true,false,false,true': [0.0, 0, 1], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 4, 0], 'false,false': [0.0, 0, 0]}]]
[{'': [0.1388888888888887, 0.0], 'true': [0.0, 0.0], 'false': [0.0, nan], 'true,false': [0.0, 0.0], 'true,false,false': [0.0, nan]}, {'': [0.09915090450905224, 0.0], 'true': [0.0, 0.178471628116294], 'true,false': [0.0, 0.0], 'false': [0.0, nan], 'true,false,false': [0.0, nan]}, {'': [0.061916714078618984, 0.0], 'true': [0.0, -4.4408920985006264e-17], 'false': [0.0, nan], 'true,false': [-4.4408920985006264e-17, nan]}, {'': [0.03742709756190412, 0.0], 'true': [0.0, 0.06736877561142735], 'true,false': [0.0, 0.0], 'false': [0.0, nan], 'true,false,false': [0.0, nan]}, {'': [0.02373640866597888, 0.0], 'true': [0.0, -2.2204460492503132e-17], 'false': [0.0, nan], 'true,false': [0.0, 0.0], 'true,false,false': [0.0, nan]}, {'': [0.01608928935222897, 0.0], 'true': [0.0, 0.028960720834012167], 'true,false': [0.028960720834012167, nan], 'true,false,true': [nan, 0.028960720834012167], 'false': [0.0, nan]}, {'': [0.013268727134042433, 0.0], 'true': [0.0, 0.00014017883188898738], 'true,false': [0.0, 0.0], 'false': [0.0, nan], 'true,false,false': [0.0, nan]}, {'': [0.009889763952832685, 0.0], 'true': [0.0, 0.02004455931012752], 'true,false': [0.0, 0.0], 'false': [0.0, nan], 'true,false,false': [0.0, nan]}, {'': [0.00765652520522257, 0.0], 'true': [0.0, 4.129847832510247e-05], 'true,false': [4.129847832510247e-05, nan], 'true,false,true': [nan, 4.129847832510247e-05], 'false': [0.0, nan]}, {'': [0.006115035195231849, 0.0], 'true': [0.0, 0.012196939619140194], 'true,false': [0.0, 0.0], 'false': [0.0, nan], 'true,false,false': [0.0, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(A, D).;true;true
0;true,false;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;true;genre(B, D).;true;true
1;true,false;genre(A, E).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;true;genre(A, D).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;true;genre(B, D).;true;true
3;true,false;genre(A, E).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;true;genre(A, D).;true;true
4;true,false;genre(B, E).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;true;genre(B, D).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(A, D).;true;true
6;true,false;genre(B, E).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;true;genre(B, D).;true;true
7;true,false;genre(A, E).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;true;genre(A, D).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;true;genre(B, D).;true;true
9;true,false;genre(A, E).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14185106490048777;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995122;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return 0.8581489350995122;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else return -0.14185106490048777;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7194734122109545;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else return 0.7194734122109545;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else return -0.12544463852839138;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.11231637819360639;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else return 0.5553664367462845;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return -0.11231637819360639;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.41751358415830997;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( genre(A, E) )
%   | | then return -0.10159632948783628;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else return 0.41751358415830997;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else return -0.10159632948783628;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.09269127618926096;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( genre(B, E) )
%   | | then return 0.32071184716014967;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return 0.32071184716014967;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else return -0.09269127618926096;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.25517224256948945;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else return 0.08499374559054629;  // std dev = 0.241, 2.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */
%   else return -0.08518475138839687;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.09204594339777658;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( genre(B, E) )
%   | | then return 0.20975771563253554;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return 0.23935700108516422;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else return -0.07877675473109173;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.17709649774527736;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( genre(A, E) )
%   | | then return -0.08463679078745934;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else return 0.19852082828804796;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else return -0.07324622576333704;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.07830602720680806;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else return 0.15595705270048746;  // std dev = 0.014, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return -0.06842697784420272;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.1336345798425439;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( genre(A, E) )
%   | | then return -0.07283771686569032;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else return 0.1480417943537996;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else return -0.0641918400820262;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.541222
   Precision = 0.064516 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.121212


Total learning time: 0.548 seconds
Total inference time: 0.93 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.096588
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 0.318 seconds
Refined model CLL: -0.096588


******************************************
Best model found
******************************************
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.541222
   Precision = 0.064516 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.121212


Total learning time: 1.8430000000000002 seconds
Total inference time: 1.112 seconds
AUC ROC: 1.0
Total revision time: 1.8430000000000002
Best scored revision CLL: -0.096588


Dataset: 4_cora_imdb, Fold: 2, Type: Transfer (trRDN-B), Time: 00:04:11
{'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.541222, 'Precision': [0.064516, 0.5], 'Recall': 1.0, 'F1': 0.121212, 'Learning time': 1.8430000000000002, 'Inference time': 1.112, 'parameter_5': {'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.541222, 'Precision': [0.064516, 0.5], 'Recall': 1.0, 'F1': 0.121212, 'Learning time': 0.652, 'Inference time': 1.112}}


Amount of data: 10
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;title(I, H), venue(I, A).;false;false
0;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
0;false;haswordvenue(A, L), haswordtitle(M, L).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordtitle(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordauthor(I, H).;false;true
2;true,false,false;haswordvenue(A, J), haswordtitle(K, J).;false;false
2;false;haswordvenue(A, L), haswordtitle(M, L).;true;false
2;false,true;haswordauthor(N, L).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;title(E, D), venue(E, B).;false;true
3;true,true,false;title(F, D), venue(F, A).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, A).;false;true
4;true,true,false;title(F, D), venue(F, B).;false;false
4;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
4;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
4;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
4;false,true;haswordauthor(M, K).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, B).;false;true
5;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
5;true,false;haswordvenue(B, H), haswordtitle(I, H).;true;true
5;true,false,true;title(J, I), venue(J, B).;false;false
5;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
5;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;title(E, D), venue(E, A).;false;true
6;true,true,false;title(F, D), venue(F, B).;false;false
6;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
6;true,false,true;title(I, H), venue(I, B).;false;false
6;true,false,false;haswordvenue(A, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;title(F, D), venue(F, A).;false;false
7;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
7;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
7;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
7;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;title(E, D), venue(E, A).;false;true
8;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
8;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
8;true,false,true;title(J, I), venue(J, A).;false;false
8;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
8;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, B).;false;true
9;true,true,false;title(F, D), venue(F, A).;false;false
9;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
9;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
9;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
9;false,true;haswordauthor(M, K).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14185106490048777;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995122;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.6914822684328455;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.1418510649004878;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7194734122109545;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.5851860008555361;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.12544463852839138;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.11231637819360639;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( movie(E, A) )
%   | | then return 0.5040355653065413;  // std dev = 0.926, 11.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=10 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.11231637819360639;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.4300473636478571;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else if ( genre(A, E) )
%   | | then return -0.10159632948783628;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.3381572250074088;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.10159632948783627;  // std dev = 1.32e-09, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.09269127618926096;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( genre(B, E) )
%   | | then return 0.32922214602489275;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.254286674736567;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.09269127618926097;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.2609710868027093;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else if ( movie(E, B) )
%   | | then if ( genre(B, F) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.15398288062244703;  // std dev = 0.949, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.08518475138839687;  // std dev = 3.73e-09, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.09797615641373739;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( genre(B, E) )
%   | | then return 0.21384567437651017;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.15915804310344747;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.07877675473109173;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.1800890651427356;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else if ( genre(A, E) )
%   | | then return -0.08965187530270818;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.12520964480577643;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.07324622576333704;  // std dev = 9.31e-10, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.08259917124648976;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( movie(E, A) )
%   | | then if ( genre(A, F) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.12501560457403024;  // std dev = 0.917, 11.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=10 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.06842697784420272;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.13933204848373526;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else if ( genre(A, E) )
%   | | then return -0.07655201642956683;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.07629431994085463;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.0641918400820262;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.404972
   Precision = 0.064516 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.121212


Total learning time: 0.644 seconds
Total inference time: 1.003 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 0.975
   AUC PR    = 0.971683
   CLL	      = -0.200317
   Precision = 0.909091 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.952381


Total scoring time: 0.354 seconds
Parameter learned model CLL: -0.200317


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 1, 0], 'true,false,true': [0.0, 0, 5], 'true,false,false,true': [0.913, 1, 5], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 8, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 5], 'true,false,true': [0.0, 1, 0], 'true,false,false,true': [0.913, 1, 5], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 8, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.0, 1, 0], 'true,false,true': [0.926, 1, 10], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 8, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 5], 'true,false,true': [0.0, 1, 0], 'true,false,false,true': [0.913, 1, 5], 'true,false,false,false': [0.0, 0, 0], 'false,true': [1.32e-09, 8, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 1, 0], 'true,false,true': [0.0, 0, 5], 'true,false,false,true': [0.913, 1, 5], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 8, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, B)', 'true,false,true': 'genre(B, F)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 0, 5], 'true,false,true,true': [0.0, 0, 0], 'true,false,true,false': [0.949, 2, 5], 'true,false,false': [0.0, 0, 0], 'false,true': [3.73e-09, 8, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 1, 0], 'true,false,true': [0.0, 0, 5], 'true,false,false,true': [0.913, 1, 5], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 8, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 0, 5], 'true,false,true': [0.0, 1, 0], 'true,false,false,true': [0.913, 1, 5], 'true,false,false,false': [0.0, 0, 0], 'false,true': [9.31e-10, 8, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'true,false,true': 'genre(A, F)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 1, 0], 'true,false,true,true': [0.0, 0, 0], 'true,false,true,false': [0.917, 1, 10], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 8, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 5], 'true,false,true': [0.0, 1, 0], 'true,false,false,true': [0.913, 1, 5], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 8, 0], 'false,false': [0.0, 0, 0]}]]
[{'': [0.1388888888888887, -6.938893903907228e-18], 'true': [0.0, 0.0826446280991734], 'true,false': [0.0, 0.1388888888888887], 'true,false,false': [0.1388888888888887, nan], 'false': [-6.938893903907228e-18, nan]}, {'': [0.1190305643164536, 0.0], 'true': [0.0, 0.18088385239021612], 'true,false': [0.0, 0.13888888888888884], 'true,false,false': [0.13888888888888884, nan], 'false': [0.0, nan]}, {'': [0.10047653694947563, -1.734723475976807e-18], 'true': [0.0, 0.07795329105987876], 'true,false': [0.07795329105987876, nan], 'false': [-1.734723475976807e-18, nan]}, {'': [0.08907526487349188, 1.734723475976807e-18], 'true': [-2.2204460492503132e-17, 0.14272719317307236], 'true,false': [0.0, 0.13888888888888884], 'true,false,false': [0.13888888888888884, nan], 'false': [1.734723475976807e-18, nan]}, {'': [0.0818116431632675, 0.0], 'true': [0.0, 0.07714980506101467], 'true,false': [0.0, 0.13888888888888892], 'true,false,false': [0.13888888888888892, nan], 'false': [0.0, nan]}, {'': [0.07778779761098543, 1.734723475976807e-18], 'true': [0.0, 0.12858114508123145], 'true,false': [0.12858114508123145, nan], 'true,false,true': [nan, 0.12858114508123145], 'false': [1.734723475976807e-18, nan]}, {'': [0.07619857194849114, 0.0], 'true': [0.0, 0.07649908080243323], 'true,false': [-5.551115123125783e-18, 0.1388888888888889], 'true,false,false': [0.1388888888888889, nan], 'false': [0.0, nan]}, {'': [0.07452184885414964, 8.673617379884035e-19], 'true': [0.0, 0.12470053408721031], 'true,false': [0.0, 0.13888888888888887], 'true,false,false': [0.13888888888888887, nan], 'false': [8.673617379884035e-19, nan]}, {'': [0.07342435773320818, 0.0], 'true': [0.0, 0.07650730808373428], 'true,false': [0.07650730808373428, nan], 'true,false,true': [nan, 0.07650730808373428], 'false': [0.0, nan]}, {'': [0.07286398832822215, 0.0], 'true': [0.0, 0.1219082724200917], 'true,false': [0.0, 0.13888888888888887], 'true,false,false': [0.13888888888888887, nan], 'false': [0.0, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(A, D).;true;true
0;true,false;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;true;genre(B, D).;true;true
1;true,false;genre(A, E).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;true;genre(A, D).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;true;genre(B, D).;true;true
3;true,false;genre(A, E).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;true;genre(A, D).;true;true
4;true,false;genre(B, E).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;true;genre(B, D).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(A, D).;true;true
6;true,false;genre(B, E).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;true;genre(B, D).;true;true
7;true,false;genre(A, E).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;true;genre(A, D).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;true;genre(B, D).;true;true
9;true,false;genre(A, E).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14185106490048777;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995122;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return 0.6914822684328455;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   else return -0.1418510649004878;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7194734122109545;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else return 0.5851860008555361;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   else return -0.12544463852839138;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.11231637819360639;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( female(A) )
%   | | then return 0.6134144919679946;  // std dev = 0.065, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return 0.41288645975533034;  // std dev = 0.862, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   else return -0.11231637819360639;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.44270660494216274;  // std dev = 0.044, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else if ( genre(A, E) )
%   | | then return -0.10159632948783628;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else return 0.3275241127379582;  // std dev = 0.877, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   else return -0.10159632948783627;  // std dev = 3.73e-09, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.09269127618926096;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( genre(B, E) )
%   | | then return 0.3379962728423892;  // std dev = 0.039, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return 0.2467071650660615;  // std dev = 0.878, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   else return -0.09269127618926097;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.26701937612830995;  // std dev = 0.034, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else if ( female(A) )
%   | | then return 0.33977118937690576;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return -0.10433620846275486;  // std dev = 0.707, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   else return -0.08518475138839687;  // std dev = 3.73e-09, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.07739807873951182;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( genre(B, E) )
%   | | then return 0.21814275293404234;  // std dev = 0.030, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return 0.14912357043691574;  // std dev = 0.819, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   else return -0.07877675473109173;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.18325371919686936;  // std dev = 0.026, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else if ( genre(A, E) )
%   | | then return -0.07204890051995651;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else return 0.1184449875507958;  // std dev = 0.823, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   else return -0.07324622576333704;  // std dev = 2.63e-09, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.06737790850123282;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( female(A) )
%   | | then return 0.2025860050897561;  // std dev = 0.073, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return 0.05773947488213401;  // std dev = 0.795, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   else return -0.06842697784420272;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.14680514200148048;  // std dev = 0.036, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else if ( genre(A, E) )
%   | | then return -0.0632654378076373;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else return 0.06926610534030904;  // std dev = 0.815, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   else return -0.0641918400820262;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.373834
   Precision = 0.064516 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.121212


Total learning time: 0.624 seconds
Total inference time: 0.939 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 0.995
   AUC PR    = 0.995455
   CLL	      = -0.177667
   Precision = 0.909091 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.952381


Total scoring time: 0.34 seconds
Refined model CLL: -0.177667


******************************************
Best model found
******************************************
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.373834
   Precision = 0.064516 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.121212


Total learning time: 1.962 seconds
Total inference time: 0.939 seconds
AUC ROC: 1.0
Total revision time: 1.962
Best scored revision CLL: -0.177667


Dataset: 4_cora_imdb, Fold: 2, Type: Transfer (trRDN-B), Time: 00:04:15
{'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.373834, 'Precision': [0.064516, 0.5], 'Recall': 1.0, 'F1': 0.121212, 'Learning time': 1.962, 'Inference time': 0.939, 'parameter_10': {'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.404972, 'Precision': [0.064516, 0.5], 'Recall': 1.0, 'F1': 0.121212, 'Learning time': 0.644, 'Inference time': 1.003}}


Amount of data: 15
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;title(I, H), venue(I, A).;false;false
0;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
0;false;haswordvenue(A, L), haswordtitle(M, L).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordtitle(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordauthor(I, H).;false;true
2;true,false,false;haswordvenue(A, J), haswordtitle(K, J).;false;false
2;false;haswordvenue(A, L), haswordtitle(M, L).;true;false
2;false,true;haswordauthor(N, L).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;title(E, D), venue(E, B).;false;true
3;true,true,false;title(F, D), venue(F, A).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, A).;false;true
4;true,true,false;title(F, D), venue(F, B).;false;false
4;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
4;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
4;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
4;false,true;haswordauthor(M, K).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, B).;false;true
5;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
5;true,false;haswordvenue(B, H), haswordtitle(I, H).;true;true
5;true,false,true;title(J, I), venue(J, B).;false;false
5;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
5;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;title(E, D), venue(E, A).;false;true
6;true,true,false;title(F, D), venue(F, B).;false;false
6;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
6;true,false,true;title(I, H), venue(I, B).;false;false
6;true,false,false;haswordvenue(A, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;title(F, D), venue(F, A).;false;false
7;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
7;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
7;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
7;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;title(E, D), venue(E, A).;false;true
8;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
8;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
8;true,false,true;title(J, I), venue(J, A).;false;false
8;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
8;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, B).;false;true
9;true,true,false;title(F, D), venue(F, A).;false;false
9;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
9;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
9;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
9;false,true;haswordauthor(M, K).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14185106490048777;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995123;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.6359267128772901;  // std dev = 1.247, 9.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=7 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.1418510649004878;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7194734122109543;  // std dev = 2.98e-08, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.5398498420741675;  // std dev = 1.247, 9.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=7 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.12544463852839138;  // std dev = 5.27e-09, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.11231637819360639;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( movie(E, A) )
%   | | then return 0.48844340863447305;  // std dev = 1.274, 17.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=15 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.11231637819360636;  // std dev = 2.63e-09, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.4338731999811341;  // std dev = 2.11e-08, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( genre(A, E) )
%   | | then return -0.10159632948783628;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.31167073138337126;  // std dev = 1.247, 9.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=7 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.1015963294878363;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.09269127618926096;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( genre(B, E) )
%   | | then return 0.33182576222781335;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.2339181215833968;  // std dev = 1.247, 9.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=7 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.09269127618926097;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.2627421198123412;  // std dev = 1.05e-08, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( movie(E, B) )
%   | | then if ( genre(B, F) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.15054369267866682;  // std dev = 1.272, 10.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=7 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.08518475138839687;  // std dev = 5.27e-09, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.0976726318513105;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( genre(B, E) )
%   | | then return 0.21509095866029865;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.141243677585943;  // std dev = 1.247, 9.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=7 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.07877675473109172;  // std dev = 3.73e-09, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.18099840731981942;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( genre(A, E) )
%   | | then return -0.08939628904105293;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.10923620550001227;  // std dev = 1.247, 9.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=7 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.07324622576333704;  // std dev = 1.32e-09, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.08238119113865262;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( movie(E, A) )
%   | | then if ( genre(A, F) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.1185292890331997;  // std dev = 1.256, 17.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=15 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.06842697784420272;  // std dev = 2.63e-09, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.14074385103497544;  // std dev = 5.27e-09, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( genre(A, E) )
%   | | then return -0.07636403999540803;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.06083201124247349;  // std dev = 1.247, 9.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=7 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.06419184008202619;  // std dev = 1.61e-09, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.364638
   Precision = 0.064516 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.121212


Total learning time: 0.704 seconds
Total inference time: 1.021 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 0.968889
   AUC PR    = 0.965934
   CLL	      = -0.223661
   Precision = 0.882353 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.9375


Total scoring time: 0.361 seconds
Parameter learned model CLL: -0.223661


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 1, 0], 'true,false,true': [0.0, 0, 8], 'true,false,false,true': [1.247, 2, 7], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 12, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [2.98e-08, 0, 8], 'true,false,true': [0.0, 1, 0], 'true,false,false,true': [1.247, 2, 7], 'true,false,false,false': [0.0, 0, 0], 'false,true': [5.27e-09, 12, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.0, 1, 0], 'true,false,true': [1.274, 2, 15], 'true,false,false': [0.0, 0, 0], 'false,true': [2.63e-09, 12, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [2.11e-08, 0, 8], 'true,false,true': [0.0, 1, 0], 'true,false,false,true': [1.247, 2, 7], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 12, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 1, 0], 'true,false,true': [0.0, 0, 8], 'true,false,false,true': [1.247, 2, 7], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 12, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, B)', 'true,false,true': 'genre(B, F)', 'false': 'movie(G, A)'}, {'true,true': [1.05e-08, 0, 8], 'true,false,true,true': [0.0, 0, 0], 'true,false,true,false': [1.272, 3, 7], 'true,false,false': [0.0, 0, 0], 'false,true': [5.27e-09, 12, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 1, 0], 'true,false,true': [0.0, 0, 8], 'true,false,false,true': [1.247, 2, 7], 'true,false,false,false': [0.0, 0, 0], 'false,true': [3.73e-09, 12, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 0, 8], 'true,false,true': [0.0, 1, 0], 'true,false,false,true': [1.247, 2, 7], 'true,false,false,false': [0.0, 0, 0], 'false,true': [1.32e-09, 12, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'true,false,true': 'genre(A, F)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 1, 0], 'true,false,true,true': [0.0, 0, 0], 'true,false,true,false': [1.256, 2, 15], 'true,false,false': [0.0, 0, 0], 'false,true': [2.63e-09, 12, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [5.27e-09, 0, 8], 'true,false,true': [0.0, 1, 0], 'true,false,false,true': [1.247, 2, 7], 'true,false,false,false': [0.0, 0, 0], 'false,true': [1.61e-09, 12, 0], 'false,false': [0.0, 0, 0]}]]
[{'': [0.1388888888888886, -1.1564823173178714e-17], 'true': [0.0, 0.10380622837370206], 'true,false': [-2.220446049250313e-16, 0.17283950617283939], 'true,false,false': [0.17283950617283939, nan], 'false': [-1.1564823173178714e-17, nan]}, {'': [0.1235114072632986, 2.3129646346357427e-18], 'true': [1.1102230246251565e-16, 0.19539106268837622], 'true,false': [0.0, 0.1728395061728397], 'true,false,false': [0.1728395061728397, nan], 'false': [2.3129646346357427e-18, nan]}, {'': [0.10911640001578765, 6.938893903907228e-18], 'true': [0.0, 0.09548432725532674], 'true,false': [0.09548432725532674, nan], 'false': [6.938893903907228e-18, nan]}, {'': [0.10156214761786354, 0.0], 'true': [5.551115123125783e-17, 0.170926625279657], 'true,false': [0.0, 0.17283950617283952], 'true,false,false': [0.17283950617283952, nan], 'false': [0.0, nan]}, {'': [0.09596285881056799, 2.3129646346357427e-18], 'true': [0.0, 0.0938914521916833], 'true,false': [-1.3877787807814457e-17, 0.1728395061728395], 'true,false,false': [0.1728395061728395, nan], 'false': [2.3129646346357427e-18, nan]}, {'': [0.09295813873749142, 2.3129646346357427e-18], 'true': [1.3877787807814457e-17, 0.16172976659358657], 'true,false': [0.16172976659358657, nan], 'true,false,true': [nan, 0.16172976659358657], 'false': [2.3129646346357427e-18, nan]}, {'': [0.09163254271920723, 1.1564823173178713e-18], 'true': [0.0, 0.09286190571222777], 'true,false': [-2.7755575615628914e-17, 0.1728395061728395], 'true,false,false': [0.1728395061728395, nan], 'false': [1.1564823173178713e-18, nan]}, {'': [0.09046539112799717, 1.1564823173178713e-18], 'true': [0.0, 0.1591064936654401], 'true,false': [0.0, 0.1728395061728395], 'true,false,false': [0.1728395061728395, nan], 'false': [1.1564823173178713e-18, nan]}, {'': [0.0896974252627542, 5.782411586589357e-19], 'true': [0.0, 0.09273124322680826], 'true,false': [0.09273124322680826, nan], 'true,false,true': [nan, 0.09273124322680826], 'false': [5.782411586589357e-19, nan]}, {'': [0.08952554460823553, 2.8912057932946786e-18], 'true': [3.469446951953614e-18, 0.1572496036383296], 'true,false': [0.0, 0.1728395061728395], 'true,false,false': [0.1728395061728395, nan], 'false': [2.8912057932946786e-18, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(A, D).;true;true
0;true,false;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;true;genre(B, D).;true;true
1;true,false;genre(A, E).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;true;genre(A, D).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;true;genre(B, D).;true;true
3;true,false;genre(A, E).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;true;genre(A, D).;true;true
4;true,false;genre(B, E).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;true;genre(B, D).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(A, D).;true;true
6;true,false;genre(B, E).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;true;genre(B, D).;true;true
7;true,false;genre(A, E).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;true;genre(A, D).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;true;genre(B, D).;true;true
9;true,false;genre(A, E).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14185106490048777;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995123;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( female(A), director(B) )
%   | | | then return 0.8581489350995122;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.3581489350995122;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   else return -0.1418510649004878;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7194734122109543;  // std dev = 2.98e-08, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( female(A), director(B) )
%   | | | then return 0.7194734122109545;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.308741135785635;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   else return -0.12544463852839138;  // std dev = 5.27e-09, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.11231637819360639;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( female(A), director(B) )
%   | | then return 0.5553664367462846;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return 0.4466558665689398;  // std dev = 0.334, 11.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=9 */
%   else return -0.11231637819360636;  // std dev = 9.13e-09, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.44083295924024135;  // std dev = 0.025, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( genre(A, E) )
%   | | then return -0.10159632948783628;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( female(A), director(B) )
%   | | | then return 0.4175135841583099;  // std dev = 1.49e-08, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.16517765164116027;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   else return -0.1015963294878363;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.09269127618926096;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( genre(B, E) )
%   | | then return 0.3365999653885172;  // std dev = 0.022, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( female(A), director(B) )
%   | | | then return 0.32071184716014967;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.12744618540117125;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   else return -0.09269127618926097;  // std dev = 5.27e-09, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.2660035183174069;  // std dev = 0.019, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( actor(B) )
%   | | then return -0.296925312414793;  // std dev = 0.259, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else return 0.3528957181416379;  // std dev = 0.155, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   else return -0.08518475138839687;  // std dev = 5.27e-09, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.06471701449188323;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( genre(B, E) )
%   | | then return 0.21739059383036316;  // std dev = 0.017, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( female(A) )
%   | | | then return 0.10603756657804465;  // std dev = 0.482, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | | else return 0.2288664583447014;  // std dev = 0.689, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   else return -0.07877675473109172;  // std dev = 3.73e-09, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.1826813113412539;  // std dev = 0.015, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( genre(A, E) )
%   | | then return -0.06090839511474272;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( director(B), female(A) )
%   | | | then return 0.1779721057871575;  // std dev = 5.27e-09, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.040481030493973946;  // std dev = 0.826, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   else return -0.07324622576333704;  // std dev = 3.73e-09, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.057516290759138555;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( female(A) )
%   | | then return 0.07779607800922951;  // std dev = 0.182, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | else return 0.1601144178515445;  // std dev = 0.217, 10.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   else return -0.06842697784420272;  // std dev = 2.63e-09, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.13809865317280862;  // std dev = 0.003, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( genre(A, E) )
%   | | then return -0.054476635275968376;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( female(A), director(B) )
%   | | | then return 0.14357420291977674;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return -0.003090255344310164;  // std dev = 0.815, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   else return -0.06419184008202619;  // std dev = 5.89e-09, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.179377
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 0.787 seconds
Total inference time: 0.949 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.153918
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 0.359 seconds
Refined model CLL: -0.153918


******************************************
Best model found
******************************************
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.179377
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 2.211 seconds
Total inference time: 0.949 seconds
AUC ROC: 1.0
Total revision time: 2.211
Best scored revision CLL: -0.153918


Dataset: 4_cora_imdb, Fold: 2, Type: Transfer (trRDN-B), Time: 00:04:20
{'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.179377, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 2.211, 'Inference time': 0.949, 'parameter_15': {'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.364638, 'Precision': [0.064516, 0.5], 'Recall': 1.0, 'F1': 0.121212, 'Learning time': 0.704, 'Inference time': 1.021}}


Amount of data: 20
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;title(I, H), venue(I, A).;false;false
0;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
0;false;haswordvenue(A, L), haswordtitle(M, L).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordtitle(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordauthor(I, H).;false;true
2;true,false,false;haswordvenue(A, J), haswordtitle(K, J).;false;false
2;false;haswordvenue(A, L), haswordtitle(M, L).;true;false
2;false,true;haswordauthor(N, L).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;title(E, D), venue(E, B).;false;true
3;true,true,false;title(F, D), venue(F, A).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, A).;false;true
4;true,true,false;title(F, D), venue(F, B).;false;false
4;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
4;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
4;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
4;false,true;haswordauthor(M, K).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, B).;false;true
5;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
5;true,false;haswordvenue(B, H), haswordtitle(I, H).;true;true
5;true,false,true;title(J, I), venue(J, B).;false;false
5;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
5;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;title(E, D), venue(E, A).;false;true
6;true,true,false;title(F, D), venue(F, B).;false;false
6;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
6;true,false,true;title(I, H), venue(I, B).;false;false
6;true,false,false;haswordvenue(A, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;title(F, D), venue(F, A).;false;false
7;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
7;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
7;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
7;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;title(E, D), venue(E, A).;false;true
8;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
8;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
8;true,false,true;title(J, I), venue(J, A).;false;false
8;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
8;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, B).;false;true
9;true,true,false;title(F, D), venue(F, A).;false;false
9;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
9;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
9;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
9;false,true;haswordauthor(M, K).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14185106490048777;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995123;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.5854216623722396;  // std dev = 1.477, 11.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=8 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.1418510649004878;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7194734122109542;  // std dev = 4.21e-08, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.498380757744019;  // std dev = 1.477, 11.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=8 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.12544463852839138;  // std dev = 7.45e-09, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.11231637819360639;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( movie(E, A) )
%   | | then return 0.48060251667812465;  // std dev = 1.524, 23.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=20 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.11231637819360635;  // std dev = 3.48e-09, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.43580012590663747;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | else if ( genre(A, E) )
%   | | then return -0.10159632948783628;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.2859005652616497;  // std dev = 1.477, 11.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=8 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.10159632948783631;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.09269127618926096;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( genre(B, E) )
%   | | then return 0.3331382931393671;  // std dev = 2.58e-08, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.21469900328133312;  // std dev = 1.477, 11.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=8 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.09269127618926094;  // std dev = 2.28e-09, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.2636344304044734;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | else if ( movie(E, B) )
%   | | then if ( genre(B, F) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.14085733684022425;  // std dev = 1.496, 12.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=8 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.08518475138839685;  // std dev = 1.05e-08, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.09682226785669143;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( genre(B, E) )
%   | | then return 0.21571782015199692;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.12717751487471424;  // std dev = 1.477, 11.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=8 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.07877675473109173;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.18145576511145042;  // std dev = 1.49e-08, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | else if ( genre(A, E) )
%   | | then return -0.08867960358824459;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.09708101293927623;  // std dev = 1.477, 11.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=8 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.07324622576333704;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.08176949347376213;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( movie(E, A) )
%   | | then if ( genre(A, F) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.11716650163857975;  // std dev = 1.490, 23.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=20 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.06842697784420272;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.1412267939472367;  // std dev = 5.27e-09, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | else if ( genre(A, E) )
%   | | then return -0.07583619033342849;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.04868549235510409;  // std dev = 1.477, 11.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=8 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.06419184008202619;  // std dev = 1.86e-09, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.331352
   Precision = 0.064516 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.121212


Total learning time: 0.628 seconds
Total inference time: 0.971 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 0.97
   AUC PR    = 0.968429
   CLL	      = -0.228908
   Precision = 0.869565 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.930233


Total scoring time: 0.362 seconds
Parameter learned model CLL: -0.228908


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 1, 0], 'true,false,true': [0.0, 0, 12], 'true,false,false,true': [1.477, 3, 8], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 16, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [4.21e-08, 0, 12], 'true,false,true': [0.0, 1, 0], 'true,false,false,true': [1.477, 3, 8], 'true,false,false,false': [0.0, 0, 0], 'false,true': [7.45e-09, 16, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.0, 1, 0], 'true,false,true': [1.524, 3, 20], 'true,false,false': [0.0, 0, 0], 'false,true': [3.48e-09, 16, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 12], 'true,false,true': [0.0, 1, 0], 'true,false,false,true': [1.477, 3, 8], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 16, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 1, 0], 'true,false,true': [2.58e-08, 0, 12], 'true,false,false,true': [1.477, 3, 8], 'true,false,false,false': [0.0, 0, 0], 'false,true': [2.28e-09, 16, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, B)', 'true,false,true': 'genre(B, F)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 0, 12], 'true,false,true,true': [0.0, 0, 0], 'true,false,true,false': [1.496, 4, 8], 'true,false,false': [0.0, 0, 0], 'false,true': [1.05e-08, 16, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 1, 0], 'true,false,true': [0.0, 0, 12], 'true,false,false,true': [1.477, 3, 8], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 16, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, A)'}, {'true,true': [1.49e-08, 0, 12], 'true,false,true': [0.0, 1, 0], 'true,false,false,true': [1.477, 3, 8], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 16, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'true,false,true': 'genre(A, F)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 1, 0], 'true,false,true,true': [0.0, 0, 0], 'true,false,true,false': [1.49, 3, 20], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 16, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [5.27e-09, 0, 12], 'true,false,true': [0.0, 1, 0], 'true,false,false,true': [1.477, 3, 8], 'true,false,false,false': [0.0, 0, 0], 'false,true': [1.86e-09, 16, 0], 'false,false': [0.0, 0, 0]}]]
[{'': [0.13888888888888906, -6.938893903907228e-18], 'true': [0.0, 0.11342155009451807], 'true,false': [-1.4802973661668753e-16, 0.19834710743801634], 'true,false,false': [0.19834710743801634, nan], 'false': [-6.938893903907228e-18, nan]}, {'': [0.12441568203822288, 3.469446951953614e-18], 'true': [1.4802973661668753e-16, 0.21154553859164504], 'true,false': [0.0, 0.1983471074380164], 'true,false,false': [0.1983471074380164, nan], 'false': [3.469446951953614e-18, nan]}, {'': [0.11079050861452706, 1.214306433183765e-17], 'true': [0.0, 0.10095945325427821], 'true,false': [0.10095945325427821, nan], 'false': [1.214306433183765e-17, nan]}, {'': [0.10494252079495549, -6.938893903907228e-18], 'true': [-7.401486830834377e-17, 0.19328826708099736], 'true,false': [0.0, 0.1983471074380166], 'true,false,false': [0.1983471074380166, nan], 'false': [-6.938893903907228e-18, nan]}, {'': [0.0997060088237652, 5.204170427930421e-18], 'true': [0.0, 0.09836199699858639], 'true,false': [5.551115123125783e-17, 0.1983471074380165], 'true,false,false': [0.1983471074380165, nan], 'false': [5.204170427930421e-18, nan]}, {'': [0.09700014575105535, 6.938893903907228e-18], 'true': [-1.850371707708594e-17, 0.1864631841500687], 'true,false': [0.1864631841500687, nan], 'true,false,true': [nan, 0.1864631841500687], 'false': [6.938893903907228e-18, nan]}, {'': [0.09569886437364837, -1.734723475976807e-18], 'true': [0.0, 0.09681780168006171], 'true,false': [0.0, 0.1983471074380165], 'true,false,false': [0.1983471074380165, nan], 'false': [-1.734723475976807e-18, nan]}, {'': [0.09471981230560665, 0.0], 'true': [1.850371707708594e-17, 0.1844541337152619], 'true,false': [0.0, 0.1983471074380165], 'true,false,false': [0.1983471074380165, nan], 'false': [0.0, nan]}, {'': [0.09406943052984836, 0.0], 'true': [0.0, 0.09651042534730415], 'true,false': [0.09651042534730415, nan], 'true,false,true': [nan, 0.09651042534730415], 'false': [0.0, nan]}, {'': [0.09414935483937163, 3.469446951953614e-18], 'true': [2.3129646346357427e-18, 0.18300264115190001], 'true,false': [0.0, 0.19834710743801656], 'true,false,false': [0.19834710743801656, nan], 'false': [3.469446951953614e-18, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(A, D).;true;true
0;true,false;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;true;genre(B, D).;true;true
1;true,false;genre(A, E).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;true;genre(A, D).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;true;genre(B, D).;true;true
3;true,false;genre(A, E).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;true;genre(A, D).;true;true
4;true,false;genre(B, E).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;true;genre(B, D).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(A, D).;true;true
6;true,false;genre(B, E).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;true;genre(B, D).;true;true
7;true,false;genre(A, E).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;true;genre(A, D).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;true;genre(B, D).;true;true
9;true,false;genre(A, E).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14185106490048777;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995123;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else if ( actor(B) )
%   | | | then return -0.14185106490048777;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.8581489350995123;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   else return -0.1418510649004878;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7194734122109542;  // std dev = 4.21e-08, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( actor(B) )
%   | | | then return -0.12544463852839138;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.7194734122109543;  // std dev = 2.98e-08, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   else return -0.12544463852839138;  // std dev = 7.45e-09, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.11231637819360639;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( actor(B) )
%   | | then return -0.11231637819360639;  // std dev = 2.63e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else return 0.5553664367462846;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   else return -0.11231637819360635;  // std dev = 1.39e-08, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.4175135841583098;  // std dev = 4.21e-08, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | else if ( genre(A, E) )
%   | | then return -0.10159632948783628;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( actor(B) )
%   | | | then return -0.1015963294878363;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.41751358415830986;  // std dev = 2.98e-08, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   else return -0.10159632948783631;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.09269127618926096;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( genre(B, E) )
%   | | then return 0.3207118471601497;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else if ( actor(B) )
%   | | | then return -0.09269127618926094;  // std dev = 2.63e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.3207118471601497;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   else return -0.09269127618926094;  // std dev = 9.13e-09, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.2551722425694894;  // std dev = 2.11e-08, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | else if ( actor(B) )
%   | | then return -0.08518475138839687;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return 0.2551722425694894;  // std dev = 1.49e-08, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   else return -0.08518475138839685;  // std dev = 1.05e-08, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.07877675473109173;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( genre(B, E) )
%   | | then return 0.20975771563253562;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else if ( actor(B) )
%   | | | then return -0.07877675473109173;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.2097577156325356;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   else return -0.07877675473109173;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.17709649774527736;  // std dev = 1.05e-08, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | else if ( genre(A, E) )
%   | | then return -0.07324622576333704;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( actor(B) )
%   | | | then return -0.07324622576333704;  // std dev = 1.86e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.17709649774527736;  // std dev = 7.45e-09, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   else return -0.07324622576333704;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.06842697784420272;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( actor(B) )
%   | | then return -0.06842697784420272;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else return 0.15274385809367091;  // std dev = 2.24e-08, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   else return -0.06842697784420272;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.13400703000801117;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | else if ( genre(A, E) )
%   | | then return -0.0641918400820262;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( actor(B) )
%   | | | then return -0.0641918400820262;  // std dev = 1.32e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.13400703000801117;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   else return -0.06419184008202619;  // std dev = 7.45e-09, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063857
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 0.821 seconds
Total inference time: 0.944 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.094637
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 0.374 seconds
Refined model CLL: -0.094637


******************************************
Best model found
******************************************
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063857
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 2.185 seconds
Total inference time: 0.944 seconds
AUC ROC: 1.0
Total revision time: 2.185
Best scored revision CLL: -0.094637


Dataset: 4_cora_imdb, Fold: 2, Type: Transfer (trRDN-B), Time: 00:04:25
{'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.063857, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 2.185, 'Inference time': 0.944, 'parameter_20': {'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.331352, 'Precision': [0.064516, 0.5], 'Recall': 1.0, 'F1': 0.121212, 'Learning time': 0.628, 'Inference time': 0.971}}


Amount of data: 25
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;title(I, H), venue(I, A).;false;false
0;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
0;false;haswordvenue(A, L), haswordtitle(M, L).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordtitle(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordauthor(I, H).;false;true
2;true,false,false;haswordvenue(A, J), haswordtitle(K, J).;false;false
2;false;haswordvenue(A, L), haswordtitle(M, L).;true;false
2;false,true;haswordauthor(N, L).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;title(E, D), venue(E, B).;false;true
3;true,true,false;title(F, D), venue(F, A).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, A).;false;true
4;true,true,false;title(F, D), venue(F, B).;false;false
4;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
4;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
4;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
4;false,true;haswordauthor(M, K).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, B).;false;true
5;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
5;true,false;haswordvenue(B, H), haswordtitle(I, H).;true;true
5;true,false,true;title(J, I), venue(J, B).;false;false
5;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
5;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;title(E, D), venue(E, A).;false;true
6;true,true,false;title(F, D), venue(F, B).;false;false
6;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
6;true,false,true;title(I, H), venue(I, B).;false;false
6;true,false,false;haswordvenue(A, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;title(F, D), venue(F, A).;false;false
7;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
7;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
7;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
7;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;title(E, D), venue(E, A).;false;true
8;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
8;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
8;true,false,true;title(J, I), venue(J, A).;false;false
8;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
8;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, B).;false;true
9;true,true,false;title(F, D), venue(F, A).;false;false
9;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
9;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
9;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
9;false,true;haswordauthor(M, K).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14185106490048777;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995123;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.5504566274072047;  // std dev = 1.664, 13.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=9 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.14185106490048777;  // std dev = 0.000, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7194734122109542;  // std dev = 5.96e-08, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.46952849908361544;  // std dev = 1.664, 13.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=9 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.12544463852839138;  // std dev = 0.000, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.11231637819360639;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else if ( movie(E, A) )
%   | | then return 0.4758533152270921;  // std dev = 1.731, 29.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=25 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.11231637819360635;  // std dev = 3.73e-09, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.4369682057973901;  // std dev = 5.96e-08, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | else if ( genre(A, E) )
%   | | then return -0.10159632948783628;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.26776722009640935;  // std dev = 1.664, 13.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=9 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.10159632948783635;  // std dev = 0.000, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.09269127618926096;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else if ( genre(B, E) )
%   | | then return 0.3339343398020137;  // std dev = 1.49e-08, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.20140527269456604;  // std dev = 1.664, 13.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=9 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.09269127618926093;  // std dev = 2.63e-09, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.26417545646919605;  // std dev = 1.49e-08, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | else if ( movie(E, B) )
%   | | then if ( genre(B, F) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.11963723432758044;  // std dev = 1.693, 15.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=9 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.08518475138839683;  // std dev = 1.29e-08, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.09498242808968202;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else if ( genre(B, E) )
%   | | then return 0.21609771870110303;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.12162227816051702;  // std dev = 1.664, 13.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=9 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.07877675473109179;  // std dev = 0.000, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.18173281098588084;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | else if ( genre(A, E) )
%   | | then return -0.0871258120318822;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.09211442654926391;  // std dev = 1.664, 13.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=9 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.07324622576333704;  // std dev = 0.000, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.08044096432758263;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else if ( movie(E, A) )
%   | | then if ( genre(A, F) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.11768948592081738;  // std dev = 1.680, 29.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=25 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.06842697784420274;  // std dev = 0.000, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.14135590161569;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | else if ( genre(A, E) )
%   | | then return -0.07468799197308379;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.042982495050268424;  // std dev = 1.664, 13.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=9 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.0641918400820262;  // std dev = 1.32e-09, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.309037
   Precision = 0.064516 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.121212


Total learning time: 0.687 seconds
Total inference time: 0.979 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 0.9712
   AUC PR    = 0.970372
   CLL	      = -0.230464
   Precision = 0.862069 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.925926


Total scoring time: 0.391 seconds
Parameter learned model CLL: -0.230464


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 2, 0], 'true,false,true': [0.0, 0, 16], 'true,false,false,true': [1.664, 4, 9], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 19, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [5.96e-08, 0, 16], 'true,false,true': [0.0, 2, 0], 'true,false,false,true': [1.664, 4, 9], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 19, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.0, 2, 0], 'true,false,true': [1.731, 4, 25], 'true,false,false': [0.0, 0, 0], 'false,true': [3.73e-09, 19, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [5.96e-08, 0, 16], 'true,false,true': [0.0, 2, 0], 'true,false,false,true': [1.664, 4, 9], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 19, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 2, 0], 'true,false,true': [1.49e-08, 0, 16], 'true,false,false,true': [1.664, 4, 9], 'true,false,false,false': [0.0, 0, 0], 'false,true': [2.63e-09, 19, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, B)', 'true,false,true': 'genre(B, F)', 'false': 'movie(G, A)'}, {'true,true': [1.49e-08, 0, 16], 'true,false,true,true': [0.0, 0, 0], 'true,false,true,false': [1.693, 6, 9], 'true,false,false': [0.0, 0, 0], 'false,true': [1.29e-08, 19, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 2, 0], 'true,false,true': [0.0, 0, 16], 'true,false,false,true': [1.664, 4, 9], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 19, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 0, 16], 'true,false,true': [0.0, 2, 0], 'true,false,false,true': [1.664, 4, 9], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 19, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'true,false,true': 'genre(A, F)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 2, 0], 'true,false,true,true': [0.0, 0, 0], 'true,false,true,false': [1.68, 4, 25], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 19, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 16], 'true,false,true': [0.0, 2, 0], 'true,false,false,true': [1.664, 4, 9], 'true,false,false,false': [0.0, 0, 0], 'false,true': [1.32e-09, 19, 0], 'false,false': [0.0, 0, 0]}]]
[{'': [0.15608740894901246, 0.0], 'true': [0.0, 0.11890606420927562], 'true,false': [-2.220446049250313e-16, 0.2130177514792898], 'true,false,false': [0.2130177514792898, nan], 'false': [0.0, nan]}, {'': [0.1362004294879801, 0.0], 'true': [2.220446049250313e-16, 0.22552124637750356], 'true,false': [0.0, 0.2130177514792899], 'true,false,false': [0.2130177514792899, nan], 'false': [0.0, nan]}, {'': [0.11748834976968985, 1.460819769243627e-17], 'true': [0.0, 0.10327205340341841], 'true,false': [0.10327205340341841, nan], 'false': [1.460819769243627e-17, nan]}, {'': [0.10887596446433959, -5.843279076974508e-18], 'true': [2.220446049250313e-16, 0.20038056339671048], 'true,false': [0.0, 0.21301775147928997], 'true,false,false': [0.21301775147928997, nan], 'false': [-5.843279076974508e-18, nan]}, {'': [0.10153233069884779, 7.304098846218135e-18], 'true': [0.0, 0.09983471422401127], 'true,false': [1.3877787807814457e-17, 0.21301775147929], 'true,false,false': [0.21301775147929, nan], 'false': [7.304098846218135e-18, nan]}, {'': [0.09767039552734419, 8.764918615461762e-18], 'true': [1.3877787807814457e-17, 0.1910695455127133], 'true,false': [0.1910695455127133, nan], 'true,false,true': [nan, 0.1910695455127133], 'false': [8.764918615461762e-18, nan]}, {'': [0.09575359573926462, -7.304098846218135e-19], 'true': [0.0, 0.09769823894373675], 'true,false': [-4.163336342344337e-17, 0.21301775147928995], 'true,false,false': [0.21301775147928995, nan], 'false': [-7.304098846218135e-19, nan]}, {'': [0.09434455648840426, -7.304098846218135e-19], 'true': [-1.3877787807814457e-17, 0.18832784524335028], 'true,false': [0.0, 0.2130177514792899], 'true,false,false': [0.2130177514792899, nan], 'false': [-7.304098846218135e-19, nan]}, {'': [0.09341140621798338, -2.1912296538654404e-18], 'true': [0.0, 0.09732094795013933], 'true,false': [0.09732094795013933, nan], 'true,false,true': [nan, 0.09732094795013933], 'false': [-2.1912296538654404e-18, nan]}, {'': [0.09335342524975379, 2.1912296538654404e-18], 'true': [0.0, 0.18621540653282526], 'true,false': [0.0, 0.21301775147928997], 'true,false,false': [0.21301775147928997, nan], 'false': [2.1912296538654404e-18, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(A, D).;true;true
0;true,false;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;true;genre(B, D).;true;true
1;true,false;genre(A, E).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;true;genre(A, D).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;true;genre(B, D).;true;true
3;true,false;genre(A, E).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;true;genre(A, D).;true;true
4;true,false;genre(B, E).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;true;genre(B, D).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(A, D).;true;true
6;true,false;genre(B, E).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;true;genre(B, D).;true;true
7;true,false;genre(A, E).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;true;genre(A, D).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;true;genre(B, D).;true;true
9;true,false;genre(A, E).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14185106490048777;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995123;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | else if ( actor(B) )
%   | | | then return -0.14185106490048777;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | | else return 0.8581489350995123;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   else return -0.14185106490048777;  // std dev = 0.000, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7194734122109542;  // std dev = 5.96e-08, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | else if ( actor(B) )
%   | | | then return -0.12544463852839138;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | | else return 0.7194734122109543;  // std dev = 2.98e-08, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   else return -0.12544463852839138;  // std dev = 0.000, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.11231637819360639;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else if ( actor(B) )
%   | | then return -0.11231637819360639;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return 0.5553664367462846;  // std dev = 0.000, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   else return -0.11231637819360635;  // std dev = 1.67e-08, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.4175135841583098;  // std dev = 5.16e-08, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | else if ( genre(A, E) )
%   | | then return -0.10159632948783628;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | else if ( actor(B) )
%   | | | then return -0.10159632948783628;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | | else return 0.41751358415830986;  // std dev = 3.33e-08, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   else return -0.10159632948783635;  // std dev = 0.000, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.09269127618926096;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else if ( genre(B, E) )
%   | | then return 0.32071184716014967;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | else if ( actor(B) )
%   | | | then return -0.09269127618926096;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | | else return 0.3207118471601497;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   else return -0.09269127618926093;  // std dev = 1.18e-08, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.2551722425694894;  // std dev = 2.11e-08, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | else if ( actor(B) )
%   | | then return -0.08518475138839687;  // std dev = 2.63e-09, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else return 0.2551722425694894;  // std dev = 1.83e-08, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   else return -0.08518475138839683;  // std dev = 1.29e-08, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.07877675473109173;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else if ( genre(B, E) )
%   | | then return 0.20975771563253562;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | else if ( actor(B) )
%   | | | then return -0.07877675473109173;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | | else return 0.2097577156325356;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   else return -0.07877675473109179;  // std dev = 0.000, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.17709649774527741;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | else if ( genre(A, E) )
%   | | then return -0.07324622576333704;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | else if ( actor(B) )
%   | | | then return -0.07324622576333704;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | | else return 0.17709649774527736;  // std dev = 7.45e-09, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   else return -0.07324622576333704;  // std dev = 0.000, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.06842697784420272;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else if ( director(B) )
%   | | then return 0.15274385809367086;  // std dev = 0.000, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | | else return -0.06842697784420272;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   else return -0.06842697784420274;  // std dev = 0.000, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.13400703000801117;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | else if ( genre(A, E) )
%   | | then return -0.0641918400820262;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | else if ( actor(B) )
%   | | | then return -0.0641918400820262;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | | else return 0.13400703000801117;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   else return -0.0641918400820262;  // std dev = 6.45e-09, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063857
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 0.883 seconds
Total inference time: 0.966 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.094637
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 0.385 seconds
Refined model CLL: -0.094637


******************************************
Best model found
******************************************
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063857
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 2.346 seconds
Total inference time: 0.966 seconds
AUC ROC: 1.0
Total revision time: 2.346
Best scored revision CLL: -0.094637


Dataset: 4_cora_imdb, Fold: 2, Type: Transfer (trRDN-B), Time: 00:04:30
{'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.063857, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 2.346, 'Inference time': 0.966, 'parameter_25': {'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.309037, 'Precision': [0.064516, 0.5], 'Recall': 1.0, 'F1': 0.121212, 'Learning time': 0.687, 'Inference time': 0.979}}


Starting fold 3

Target train facts examples: 737
Target train pos examples: 204
Target train neg examples: 10693

Target test facts examples: 341
Target test pos	 examples: 178
Target test neg examples: 3543

Amount of data: 5
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;title(I, H), venue(I, A).;false;false
0;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
0;false;haswordvenue(A, L), haswordtitle(M, L).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordtitle(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordauthor(I, H).;false;true
2;true,false,false;haswordvenue(A, J), haswordtitle(K, J).;false;false
2;false;haswordvenue(A, L), haswordtitle(M, L).;true;false
2;false,true;haswordauthor(N, L).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;title(E, D), venue(E, B).;false;true
3;true,true,false;title(F, D), venue(F, A).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, A).;false;true
4;true,true,false;title(F, D), venue(F, B).;false;false
4;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
4;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
4;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
4;false,true;haswordauthor(M, K).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, B).;false;true
5;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
5;true,false;haswordvenue(B, H), haswordtitle(I, H).;true;true
5;true,false,true;title(J, I), venue(J, B).;false;false
5;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
5;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;title(E, D), venue(E, A).;false;true
6;true,true,false;title(F, D), venue(F, B).;false;false
6;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
6;true,false,true;title(I, H), venue(I, B).;false;false
6;true,false,false;haswordvenue(A, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;title(F, D), venue(F, A).;false;false
7;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
7;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
7;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
7;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;title(E, D), venue(E, A).;false;true
8;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
8;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
8;true,false,true;title(J, I), venue(J, A).;false;false
8;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
8;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, B).;false;true
9;true,true,false;title(F, D), venue(F, A).;false;false
9;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
9;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
9;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
9;false,true;haswordauthor(M, K).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995122;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.14185106490048777;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7194734122109545;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(E, B) )
%   | then return -0.12544463852839138;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A) )
%   | | then return 0.5553664367462845;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.11231637819360638;  // std dev = 1.86e-09, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.4175135841583099;  // std dev = 1.49e-08, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(E, B) )
%   | then return -0.10159632948783633;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( genre(B, E) )
%   | | then return 0.32071184716014967;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, B) )
%   | then return -0.09269127618926098;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.25517224256948945;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(E, A) )
%   | then return -0.08518475138839687;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( genre(B, E) )
%   | | then return 0.20975771563253556;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, B) )
%   | then return -0.07877675473109177;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.17709649774527736;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(E, A) )
%   | then return -0.07324622576333704;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A) )
%   | | then if ( genre(A, F) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.15274385809367097;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.06842697784420272;  // std dev = 1.86e-09, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.13400703000801117;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(E, B) )
%   | then return -0.0641918400820262;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 0.97199
   AUC PR    = 0.81824
   CLL	      = -0.131068
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.724719
   F1        = 0.840391


Total learning time: 0.582 seconds
Total inference time: 1.023 seconds
AUC ROC: 0.97199


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.094637
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 0.313 seconds
Parameter learned model CLL: -0.094637


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'false': 'movie(F, A)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 5], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 5, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'false': 'movie(E, B)'}, {'true,true': [0.0, 0, 5], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 5, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 5], 'true,false,false': [0.0, 0, 0], 'false,true': [1.86e-09, 5, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'false': 'movie(E, B)'}, {'true,true': [1.49e-08, 0, 5], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 5, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'false': 'movie(F, B)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 5], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 5, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'false': 'movie(E, A)'}, {'true,true': [0.0, 0, 5], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 5, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'false': 'movie(F, B)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 5], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 5, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'false': 'movie(E, A)'}, {'true,true': [0.0, 0, 5], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 5, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'true,false,true': 'genre(A, F)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 0, 0], 'true,false,true,true': [0.0, 0, 0], 'true,false,true,false': [0.0, 0, 5], 'true,false,false': [0.0, 0, 0], 'false,true': [1.86e-09, 5, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'false': 'movie(E, B)'}, {'true,true': [0.0, 0, 5], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 5, 0], 'false,false': [0.0, 0, 0]}]]
[{'': [0.0, -2.7755575615628915e-18], 'true': [nan, 0.0], 'true,false': [0.0, nan], 'false': [-2.7755575615628915e-18, nan]}, {'': [0.0, 0.0], 'true': [0.0, nan], 'false': [0.0, nan]}, {'': [-4.4408920985006264e-17, 0.0], 'false': [0.0, nan], 'true': [nan, -4.4408920985006264e-17], 'true,false': [-4.4408920985006264e-17, nan]}, {'': [4.4408920985006264e-17, 0.0], 'true': [4.4408920985006264e-17, nan], 'false': [0.0, nan]}, {'': [-2.2204460492503132e-17, 0.0], 'false': [0.0, nan], 'true': [nan, -2.2204460492503132e-17], 'true,false': [-2.2204460492503132e-17, nan]}, {'': [0.0, 0.0], 'true': [0.0, nan], 'false': [0.0, nan]}, {'': [-5.551115123125783e-18, -1.3877787807814458e-18], 'false': [-1.3877787807814458e-18, nan], 'true': [nan, -5.551115123125783e-18], 'true,false': [-5.551115123125783e-18, nan]}, {'': [0.0, -6.938893903907229e-19], 'true': [0.0, nan], 'false': [-6.938893903907229e-19, nan]}, {'': [0.0, 6.938893903907229e-19], 'false': [6.938893903907229e-19, nan], 'true': [nan, 0.0], 'true,false': [0.0, nan], 'true,false,true': [nan, 0.0]}, {'': [0.0, 0.0], 'true': [0.0, nan], 'false': [0.0, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.8581489350995122;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return -0.14185106490048777;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.7194734122109545;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return -0.12544463852839138;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.5553664367462845;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return -0.11231637819360638;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.4175135841583099;  // std dev = 1.49e-08, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return -0.10159632948783633;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.32071184716014967;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return -0.09269127618926098;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.25517224256948945;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return -0.08518475138839687;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.20975771563253556;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return -0.07877675473109177;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.17709649774527736;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return -0.07324622576333704;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.15274385809367097;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return -0.06842697784420272;  // std dev = 1.86e-09, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.13400703000801117;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return -0.0641918400820262;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */


Results
   AUC ROC   = 0.888089
   AUC PR    = 0.183316
   CLL	      = -0.505426
   Precision = 0.183316 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.309835


Total learning time: 0.483 seconds
Total inference time: 0.845 seconds
AUC ROC: 0.888089


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.094637
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 0.298 seconds
Refined model CLL: -0.094637


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.97199
   AUC PR    = 0.81824
   CLL	      = -0.131068
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.724719
   F1        = 0.840391


Total learning time: 1.6760000000000002 seconds
Total inference time: 1.023 seconds
AUC ROC: 0.97199
Total revision time: 1.6760000000000002
Best scored revision CLL: -0.094637


Dataset: 4_cora_imdb, Fold: 3, Type: Transfer (trRDN-B), Time: 00:04:34
{'AUC ROC': 0.97199, 'AUC PR': 0.81824, 'CLL': -0.131068, 'Precision': [1.0, 0.5], 'Recall': 0.724719, 'F1': 0.840391, 'Learning time': 1.6760000000000002, 'Inference time': 1.023, 'parameter_5': {'AUC ROC': 0.97199, 'AUC PR': 0.81824, 'CLL': -0.131068, 'Precision': [1.0, 0.5], 'Recall': 0.724719, 'F1': 0.840391, 'Learning time': 0.582, 'Inference time': 1.023}}


Amount of data: 10
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;title(I, H), venue(I, A).;false;false
0;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
0;false;haswordvenue(A, L), haswordtitle(M, L).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordtitle(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordauthor(I, H).;false;true
2;true,false,false;haswordvenue(A, J), haswordtitle(K, J).;false;false
2;false;haswordvenue(A, L), haswordtitle(M, L).;true;false
2;false,true;haswordauthor(N, L).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;title(E, D), venue(E, B).;false;true
3;true,true,false;title(F, D), venue(F, A).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, A).;false;true
4;true,true,false;title(F, D), venue(F, B).;false;false
4;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
4;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
4;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
4;false,true;haswordauthor(M, K).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, B).;false;true
5;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
5;true,false;haswordvenue(B, H), haswordtitle(I, H).;true;true
5;true,false,true;title(J, I), venue(J, B).;false;false
5;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
5;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;title(E, D), venue(E, A).;false;true
6;true,true,false;title(F, D), venue(F, B).;false;false
6;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
6;true,false,true;title(I, H), venue(I, B).;false;false
6;true,false,false;haswordvenue(A, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;title(F, D), venue(F, A).;false;false
7;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
7;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
7;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
7;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;title(E, D), venue(E, A).;false;true
8;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
8;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
8;true,false,true;title(J, I), venue(J, A).;false;false
8;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
8;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, B).;false;true
9;true,true,false;title(F, D), venue(F, A).;false;false
9;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
9;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
9;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
9;false,true;haswordauthor(M, K).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995122;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.14185106490048777;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.1418510649004878;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7194734122109544;  // std dev = 2.98e-08, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | else if ( genre(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(F, B) )
%   | | | then return -0.12544463852839138;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.12544463852839138;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A) )
%   | | then return 0.4946679990244764;  // std dev = 0.637, 11.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=10 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.11231637819360639;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.43234490498365197;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | else if ( genre(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(F, B) )
%   | | | then return -0.17184211428342622;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.10159632948783627;  // std dev = 1.32e-09, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( genre(B, E) )
%   | | then return 0.330785335339945;  // std dev = 2.11e-08, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.14874607400079187;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.09269127618926097;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.2620345607963504;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | else if ( movie(E, B) )
%   | | then if ( genre(B, F) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.13087823004753338;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.08518475138839687;  // std dev = 3.73e-09, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( genre(B, E) )
%   | | then return 0.21459362301361873;  // std dev = 7.45e-09, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else if ( movie(F, B) )
%   | | | then return -0.11669631301679331;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.07877675473109173;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.18063536393147253;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | else if ( genre(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(F, B) )
%   | | | then return -0.10519496338676526;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.07324622576333704;  // std dev = 1.32e-09, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A) )
%   | | then if ( genre(A, F) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.13259413134620887;  // std dev = 0.239, 11.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=10 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.06842697784420272;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.1388017274831891;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | else if ( genre(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(F, A) )
%   | | | then return -0.10780205790752619;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.0641918400820262;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 0.961967
   AUC PR    = 0.795112
   CLL	      = -0.112844
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.724719
   F1        = 0.840391


Total learning time: 0.714 seconds
Total inference time: 1.083 seconds
AUC ROC: 0.961967


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.098844
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 0.338 seconds
Parameter learned model CLL: -0.098844


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 10], 'true,false,false,true': [0.0, 1, 0], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 9, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [2.98e-08, 0, 10], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 1, 0], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 9, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.637, 1, 10], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 9, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 10], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 1, 0], 'true,false,false,false': [0.0, 0, 0], 'false,true': [1.32e-09, 9, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [2.11e-08, 0, 10], 'true,false,false,true': [0.0, 1, 0], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 9, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, B)', 'true,false,true': 'genre(B, F)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 0, 10], 'true,false,true,true': [0.0, 0, 0], 'true,false,true,false': [0.0, 1, 0], 'true,false,false': [0.0, 0, 0], 'false,true': [3.73e-09, 9, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [7.45e-09, 0, 10], 'true,false,false,true': [0.0, 1, 0], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 9, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 0, 10], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 1, 0], 'true,false,false,false': [0.0, 0, 0], 'false,true': [1.32e-09, 9, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'true,false,true': 'genre(A, F)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 0, 0], 'true,false,true,true': [0.0, 0, 0], 'true,false,true,false': [0.239, 1, 10], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 9, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 10], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 1, 0], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 9, 0], 'false,false': [0.0, 0, 0]}]]
[{'': [0.0826446280991734, -9.25185853854297e-18], 'true': [nan, 0.0826446280991734], 'true,false': [-8.881784197001253e-17, 0.0], 'true,false,false': [0.0, nan], 'false': [-9.25185853854297e-18, nan]}, {'': [0.058998885327700486, 0.0], 'true': [8.881784197001253e-17, 0.0], 'false': [0.0, nan], 'true,false': [nan, 0.0], 'true,false,false': [0.0, nan]}, {'': [0.036843003418682206, -1.5419764230904951e-18], 'true': [nan, 0.036843003418682206], 'true,false': [0.036843003418682206, nan], 'false': [-1.5419764230904951e-18, nan]}, {'': [0.030168756549655864, 3.0839528461809902e-18], 'true': [-8.881784197001253e-17, 0.0], 'false': [3.0839528461809902e-18, nan], 'true,false': [nan, 0.0], 'true,false,false': [0.0, nan]}, {'': [0.019004163020191214, 0.0], 'true': [nan, 0.019004163020191214], 'true,false': [4.4408920985006264e-17, 0.0], 'false': [0.0, nan], 'true,false,false': [0.0, nan]}, {'': [0.01275871580237434, 1.5419764230904951e-18], 'true': [-1.1102230246251566e-17, 0.0], 'false': [1.5419764230904951e-18, nan], 'true,false': [0.0, nan], 'true,false,true': [nan, 0.0]}, {'': [0.009070497662399564, 0.0], 'true': [nan, 0.009070497662399564], 'true,false': [5.551115123125783e-18, 0.0], 'false': [0.0, nan], 'true,false,false': [0.0, nan]}, {'': [0.006751981488830646, 7.709882115452476e-19], 'true': [-1.6653345369377347e-17, 0.0], 'false': [7.709882115452476e-19, nan], 'true,false': [nan, 0.0], 'true,false,false': [0.0, nan]}, {'': [0.005211652977383816, 0.0], 'true': [nan, 0.005211652977383816], 'true,false': [0.005211652977383816, nan], 'true,false,true': [nan, 0.005211652977383816], 'false': [0.0, nan]}, {'': [0.005025903055291729, 7.709882115452476e-19], 'true': [-5.551115123125783e-18, 0.0], 'false': [7.709882115452476e-19, nan], 'true,false': [nan, 0.0], 'true,false,false': [0.0, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;true;genre(B, D).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;true;genre(B, D).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;true;genre(B, E).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;true;genre(B, D).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(B, E).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;true;genre(B, D).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;true;genre(B, D).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.8581489350995122;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | else return -0.14185106490048777;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   else return -0.1418510649004878;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7194734122109544;  // std dev = 2.98e-08, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | else return -0.12544463852839138;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   else return -0.12544463852839138;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( female(A) )
%   | then return 0.5553664367462845;  // std dev = 1.05e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return 0.4719060848787982;  // std dev = 0.221, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   else return -0.11231637819360639;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.43181177524561276;  // std dev = 0.030, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | else return -0.1686269659758734;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   else return -0.10159632948783627;  // std dev = 5.27e-09, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.33045504992364133;  // std dev = 0.027, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | else return -0.14628800429983269;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   else return -0.09269127618926097;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.26182903572937793;  // std dev = 0.023, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | else return -0.12894663704483422;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   else return -0.08518475138839687;  // std dev = 3.73e-09, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.21446058465992612;  // std dev = 0.020, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | else return -0.11514299898270842;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   else return -0.07877675473109173;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.18054541114203496;  // std dev = 0.018, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | else return -0.10392131277432723;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   else return -0.07324622576333704;  // std dev = 2.63e-09, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( female(A) )
%   | then return 0.14778370111164063;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return 0.12695169788754151;  // std dev = 0.084, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   else return -0.06842697784420272;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.13870961183496683;  // std dev = 0.018, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | else return -0.10608558729422883;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   else return -0.0641918400820262;  // std dev = 2.63e-09, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */


Results
   AUC ROC   = 0.978263
   AUC PR    = 0.746228
   CLL	      = -0.13279
   Precision = 0.693548 at threshold = 0.5
   Recall    = 0.724719
   F1        = 0.708791


Total learning time: 0.67 seconds
Total inference time: 0.948 seconds
AUC ROC: 0.978263


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.098734
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 0.319 seconds
Refined model CLL: -0.098734


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.978263
   AUC PR    = 0.746228
   CLL	      = -0.13279
   Precision = 0.693548 at threshold = 0.5
   Recall    = 0.724719
   F1        = 0.708791


Total learning time: 2.041 seconds
Total inference time: 0.948 seconds
AUC ROC: 0.978263
Total revision time: 2.041
Best scored revision CLL: -0.098734


Dataset: 4_cora_imdb, Fold: 3, Type: Transfer (trRDN-B), Time: 00:04:38
{'AUC ROC': 0.978263, 'AUC PR': 0.746228, 'CLL': -0.13279, 'Precision': [0.693548, 0.5], 'Recall': 0.724719, 'F1': 0.708791, 'Learning time': 2.041, 'Inference time': 0.948, 'parameter_10': {'AUC ROC': 0.961967, 'AUC PR': 0.795112, 'CLL': -0.112844, 'Precision': [1.0, 0.5], 'Recall': 0.724719, 'F1': 0.840391, 'Learning time': 0.714, 'Inference time': 1.083}}


Amount of data: 15
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;title(I, H), venue(I, A).;false;false
0;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
0;false;haswordvenue(A, L), haswordtitle(M, L).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordtitle(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordauthor(I, H).;false;true
2;true,false,false;haswordvenue(A, J), haswordtitle(K, J).;false;false
2;false;haswordvenue(A, L), haswordtitle(M, L).;true;false
2;false,true;haswordauthor(N, L).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;title(E, D), venue(E, B).;false;true
3;true,true,false;title(F, D), venue(F, A).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, A).;false;true
4;true,true,false;title(F, D), venue(F, B).;false;false
4;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
4;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
4;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
4;false,true;haswordauthor(M, K).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, B).;false;true
5;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
5;true,false;haswordvenue(B, H), haswordtitle(I, H).;true;true
5;true,false,true;title(J, I), venue(J, B).;false;false
5;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
5;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;title(E, D), venue(E, A).;false;true
6;true,true,false;title(F, D), venue(F, B).;false;false
6;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
6;true,false,true;title(I, H), venue(I, B).;false;false
6;true,false,false;haswordvenue(A, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;title(F, D), venue(F, A).;false;false
7;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
7;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
7;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
7;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;title(E, D), venue(E, A).;false;true
8;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
8;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
8;true,false,true;title(J, I), venue(J, A).;false;false
8;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
8;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, B).;false;true
9;true,true,false;title(F, D), venue(F, A).;false;false
9;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
9;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
9;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
9;false,true;haswordauthor(M, K).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995123;  // std dev = 0.000, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.14185106490048777;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.1418510649004878;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7194734122109542;  // std dev = 5.16e-08, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else if ( genre(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(F, B) )
%   | | | then return -0.12544463852839138;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.12544463852839138;  // std dev = 7.45e-09, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A) )
%   | | then return 0.5136362608125414;  // std dev = 0.646, 16.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.11231637819360636;  // std dev = 2.95e-09, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.4276957669205333;  // std dev = 0.000, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else if ( genre(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(F, B) )
%   | | | then return -0.17455835923733853;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.1015963294878363;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( genre(B, E) )
%   | | then return 0.32762327821958503;  // std dev = 0.000, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.15081568440812376;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.09269127618926096;  // std dev = 1.32e-09, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.2598828266617596;  // std dev = 0.000, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else if ( movie(E, B) )
%   | | then if ( genre(B, F) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.13249992875017153;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.08518475138839686;  // std dev = 8.33e-09, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( genre(B, E) )
%   | | then return 0.21307973665252303;  // std dev = 2.36e-08, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else if ( movie(F, B) )
%   | | | then return -0.11799729577112983;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.07877675473109172;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.17952923483172384;  // std dev = 0.000, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else if ( genre(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(F, B) )
%   | | | then return -0.10625955111445974;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.07324622576333704;  // std dev = 9.31e-10, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A) )
%   | | then if ( genre(A, F) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.13888877200172114;  // std dev = 0.243, 16.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.06842697784420272;  // std dev = 3.73e-09, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.13729294888842952;  // std dev = 0.000, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else if ( genre(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(F, A) )
%   | | | then return -0.10939834494009101;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.06419184008202619;  // std dev = 1.86e-09, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 0.961967
   AUC PR    = 0.795112
   CLL	      = -0.112783
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.724719
   F1        = 0.840391


Total learning time: 0.671 seconds
Total inference time: 1.066 seconds
AUC ROC: 0.961967


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.097532
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 0.36 seconds
Parameter learned model CLL: -0.097532


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 15], 'true,false,false,true': [0.0, 1, 0], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 14, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [5.16e-08, 0, 15], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 1, 0], 'true,false,false,false': [0.0, 0, 0], 'false,true': [7.45e-09, 14, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.646, 1, 15], 'true,false,false': [0.0, 0, 0], 'false,true': [2.95e-09, 14, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 15], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 1, 0], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 14, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 15], 'true,false,false,true': [0.0, 1, 0], 'true,false,false,false': [0.0, 0, 0], 'false,true': [1.32e-09, 14, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, B)', 'true,false,true': 'genre(B, F)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 0, 15], 'true,false,true,true': [0.0, 0, 0], 'true,false,true,false': [0.0, 1, 0], 'true,false,false': [0.0, 0, 0], 'false,true': [8.33e-09, 14, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [2.36e-08, 0, 15], 'true,false,false,true': [0.0, 1, 0], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 14, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 0, 15], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 1, 0], 'true,false,false,false': [0.0, 0, 0], 'false,true': [9.31e-10, 14, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'true,false,true': 'genre(A, F)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 0, 0], 'true,false,true,true': [0.0, 0, 0], 'true,false,true,false': [0.243, 1, 15], 'true,false,false': [0.0, 0, 0], 'false,true': [3.73e-09, 14, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 15], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 1, 0], 'true,false,false,false': [0.0, 0, 0], 'false,true': [1.86e-09, 14, 0], 'false,false': [0.0, 0, 0]}]]
[{'': [0.05859374999999978, -1.1895246692412391e-17], 'true': [nan, 0.05859374999999978], 'true,false': [-2.3684757858670006e-16, 0.0], 'true,false,false': [0.0, nan], 'false': [-1.1895246692412391e-17, nan]}, {'': [0.041829287839756535, 3.96508223080413e-18], 'true': [1.7763568394002506e-16, 0.0], 'false': [3.96508223080413e-18, nan], 'true,false': [nan, 0.0], 'true,false,false': [0.0, nan]}, {'': [0.02612111375191717, 9.912705577010326e-18], 'true': [nan, 0.02612111375191717], 'true,false': [0.02612111375191717, nan], 'false': [9.912705577010326e-18, nan]}, {'': [0.02125254096528409, -3.96508223080413e-18], 'true': [-2.960594732333751e-17, 0.0], 'true,false': [nan, 0.0], 'true,false,false': [0.0, nan], 'false': [-3.96508223080413e-18, nan]}, {'': [0.013412334431266215, 3.96508223080413e-18], 'true': [nan, 0.013412334431266215], 'true,false': [-7.401486830834377e-17, 0.0], 'false': [3.96508223080413e-18, nan], 'true,false,false': [0.0, nan]}, {'': [0.009021341410819846, 4.956352788505163e-18], 'true': [-4.4408920985006264e-17, 0.0], 'false': [4.956352788505163e-18, nan], 'true,false': [0.0, nan], 'true,false,true': [nan, 0.0]}, {'': [0.006422578206940609, -9.912705577010326e-19], 'true': [nan, 0.006422578206940609], 'true,false': [3.700743415417188e-17, 0.0], 'true,false,false': [0.0, nan], 'false': [-9.912705577010326e-19, nan]}, {'': [0.004785658017925399, 9.912705577010326e-19], 'true': [-7.401486830834377e-18, 0.0], 'false': [9.912705577010326e-19, nan], 'true,false': [nan, 0.0], 'true,false,false': [0.0, nan]}, {'': [0.0036964396871669927, 9.912705577010326e-19], 'true': [nan, 0.0036964396871669927], 'true,false': [0.0036964396871669927, nan], 'true,false,true': [nan, 0.0036964396871669927], 'false': [9.912705577010326e-19, nan]}, {'': [0.0035658160811009327, 3.469446951953614e-18], 'true': [-1.4802973661668754e-17, 0.0], 'false': [3.469446951953614e-18, nan], 'true,false': [nan, 0.0], 'true,false,false': [0.0, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;true;genre(B, D).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;true;genre(B, D).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;true;genre(B, E).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;true;genre(B, D).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(B, E).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;true;genre(B, D).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;true;genre(B, D).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.8581489350995123;  // std dev = 0.000, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else return -0.14185106490048777;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   else return -0.1418510649004878;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7194734122109542;  // std dev = 5.16e-08, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else return -0.12544463852839138;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   else return -0.12544463852839138;  // std dev = 7.45e-09, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( female(A) )
%   | then return 0.5553664367462845;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return 0.4946679990244764;  // std dev = 0.192, 11.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=10 */
%   else return -0.11231637819360636;  // std dev = 1.18e-08, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.4274011313752046;  // std dev = 0.027, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else return -0.17184211428342622;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   else return -0.1015963294878363;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.3274409622752962;  // std dev = 0.024, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else return -0.14874607400079187;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   else return -0.09269127618926096;  // std dev = 7.45e-09, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.25976926479609663;  // std dev = 0.021, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else return -0.13087823004753338;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   else return -0.08518475138839686;  // std dev = 8.33e-09, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.21300612609666422;  // std dev = 0.018, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else return -0.11669631301679331;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   else return -0.07877675473109172;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.17947940348227037;  // std dev = 0.016, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else return -0.10519496338676526;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   else return -0.07324622576333704;  // std dev = 3.73e-09, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( female(A) )
%   | then return 0.14930205291136056;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return 0.1341881766312332;  // std dev = 0.073, 11.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=10 */
%   else return -0.06842697784420272;  // std dev = 3.73e-09, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.13724247209934656;  // std dev = 0.016, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else return -0.10795547029524719;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   else return -0.06419184008202619;  // std dev = 6.97e-09, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */


Results
   AUC ROC   = 0.978263
   AUC PR    = 0.746228
   CLL	      = -0.133214
   Precision = 0.693548 at threshold = 0.5
   Recall    = 0.724719
   F1        = 0.708791


Total learning time: 0.63 seconds
Total inference time: 0.929 seconds
AUC ROC: 0.978263


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.097471
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 0.337 seconds
Refined model CLL: -0.097471


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.978263
   AUC PR    = 0.746228
   CLL	      = -0.133214
   Precision = 0.693548 at threshold = 0.5
   Recall    = 0.724719
   F1        = 0.708791


Total learning time: 1.998 seconds
Total inference time: 0.929 seconds
AUC ROC: 0.978263
Total revision time: 1.998
Best scored revision CLL: -0.097471


Dataset: 4_cora_imdb, Fold: 3, Type: Transfer (trRDN-B), Time: 00:04:43
{'AUC ROC': 0.978263, 'AUC PR': 0.746228, 'CLL': -0.133214, 'Precision': [0.693548, 0.5], 'Recall': 0.724719, 'F1': 0.708791, 'Learning time': 1.998, 'Inference time': 0.929, 'parameter_15': {'AUC ROC': 0.961967, 'AUC PR': 0.795112, 'CLL': -0.112783, 'Precision': [1.0, 0.5], 'Recall': 0.724719, 'F1': 0.840391, 'Learning time': 0.671, 'Inference time': 1.066}}


Amount of data: 20
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;title(I, H), venue(I, A).;false;false
0;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
0;false;haswordvenue(A, L), haswordtitle(M, L).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordtitle(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordauthor(I, H).;false;true
2;true,false,false;haswordvenue(A, J), haswordtitle(K, J).;false;false
2;false;haswordvenue(A, L), haswordtitle(M, L).;true;false
2;false,true;haswordauthor(N, L).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;title(E, D), venue(E, B).;false;true
3;true,true,false;title(F, D), venue(F, A).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, A).;false;true
4;true,true,false;title(F, D), venue(F, B).;false;false
4;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
4;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
4;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
4;false,true;haswordauthor(M, K).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, B).;false;true
5;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
5;true,false;haswordvenue(B, H), haswordtitle(I, H).;true;true
5;true,false,true;title(J, I), venue(J, B).;false;false
5;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
5;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;title(E, D), venue(E, A).;false;true
6;true,true,false;title(F, D), venue(F, B).;false;false
6;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
6;true,false,true;title(I, H), venue(I, B).;false;false
6;true,false,false;haswordvenue(A, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;title(F, D), venue(F, A).;false;false
7;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
7;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
7;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
7;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;title(E, D), venue(E, A).;false;true
8;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
8;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
8;true,false,true;title(J, I), venue(J, A).;false;false
8;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
8;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, B).;false;true
9;true,true,false;title(F, D), venue(F, A).;false;false
9;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
9;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
9;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
9;false,true;haswordauthor(M, K).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995122;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.14185106490048777;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.14185106490048777;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7194734122109543;  // std dev = 7.30e-08, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | else if ( genre(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(F, B) )
%   | | | then return -0.12544463852839138;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.12544463852839138;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A) )
%   | | then return 0.4946679990244764;  // std dev = 0.900, 22.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=20 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.11231637819360635;  // std dev = 3.73e-09, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.43234490498365197;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | else if ( genre(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(F, B) )
%   | | | then return -0.17184211428342622;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.10159632948783635;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( genre(B, E) )
%   | | then return 0.3307853353399449;  // std dev = 3.65e-08, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.14874607400079187;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.09269127618926093;  // std dev = 2.63e-09, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.26203456079635046;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | else if ( movie(E, B) )
%   | | then if ( genre(B, F) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.13087823004753338;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.08518475138839683;  // std dev = 1.18e-08, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( genre(B, E) )
%   | | then return 0.21459362301361873;  // std dev = 1.49e-08, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else if ( movie(F, B) )
%   | | | then return -0.11669631301679331;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.07877675473109179;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.18063536393147256;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | else if ( genre(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(F, B) )
%   | | | then return -0.10519496338676526;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.07324622576333704;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A) )
%   | | then if ( genre(A, F) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.13259413134620887;  // std dev = 0.339, 22.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=20 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.06842697784420274;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.13880172748318914;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | else if ( genre(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(F, A) )
%   | | | then return -0.10780205790752619;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.0641918400820262;  // std dev = 1.32e-09, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 0.961967
   AUC PR    = 0.795112
   CLL	      = -0.112844
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.724719
   F1        = 0.840391


Total learning time: 0.683 seconds
Total inference time: 1.143 seconds
AUC ROC: 0.961967


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.098844
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 0.367 seconds
Parameter learned model CLL: -0.098844


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 20], 'true,false,false,true': [0.0, 2, 0], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 18, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [7.3e-08, 0, 20], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 2, 0], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 18, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.9, 2, 20], 'true,false,false': [0.0, 0, 0], 'false,true': [3.73e-09, 18, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 20], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 2, 0], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 18, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [3.65e-08, 0, 20], 'true,false,false,true': [0.0, 2, 0], 'true,false,false,false': [0.0, 0, 0], 'false,true': [2.63e-09, 18, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, B)', 'true,false,true': 'genre(B, F)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 0, 20], 'true,false,true,true': [0.0, 0, 0], 'true,false,true,false': [0.0, 2, 0], 'true,false,false': [0.0, 0, 0], 'false,true': [1.18e-08, 18, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [1.49e-08, 0, 20], 'true,false,false,true': [0.0, 2, 0], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 18, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 0, 20], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 2, 0], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 18, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'true,false,true': 'genre(A, F)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 0, 0], 'true,false,true,true': [0.0, 0, 0], 'true,false,true,false': [0.339, 2, 20], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 18, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 20], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 2, 0], 'true,false,false,false': [0.0, 0, 0], 'false,true': [1.32e-09, 18, 0], 'false,false': [0.0, 0, 0]}]]
[{'': [0.08264462809917356, -3.0839528461809902e-18], 'true': [nan, 0.08264462809917356], 'true,false': [-8.881784197001253e-17, 0.0], 'true,false,false': [0.0, nan], 'false': [-3.0839528461809902e-18, nan]}, {'': [0.05899888532770057, 0.0], 'true': [2.6645352591003756e-16, 0.0], 'false': [0.0, nan], 'true,false': [nan, 0.0], 'true,false,false': [0.0, nan]}, {'': [0.03684300341868208, 1.5419764230904953e-17], 'true': [nan, 0.03684300341868208], 'true,false': [0.03684300341868208, nan], 'false': [1.5419764230904953e-17, nan]}, {'': [0.030168756549655826, -4.625929269271485e-18], 'true': [-1.7763568394002506e-16, 0.0], 'true,false': [nan, 0.0], 'true,false,false': [0.0, nan], 'false': [-4.625929269271485e-18, nan]}, {'': [0.019004163020191246, 6.1679056923619804e-18], 'true': [nan, 0.019004163020191246], 'true,false': [6.661338147750939e-17, 0.0], 'false': [6.1679056923619804e-18, nan], 'true,false,false': [0.0, nan]}, {'': [0.012758715802374289, 7.709882115452476e-18], 'true': [-5.551115123125783e-17, 0.0], 'false': [7.709882115452476e-18, nan], 'true,false': [0.0, nan], 'true,false,true': [nan, 0.0]}, {'': [0.009070497662399556, 0.0], 'true': [nan, 0.009070497662399556], 'true,false': [1.1102230246251566e-17, 0.0], 'false': [0.0, nan], 'true,false,false': [0.0, nan]}, {'': [0.0067519814888306155, -7.709882115452476e-19], 'true': [-3.8857805861880476e-17, 0.0], 'true,false': [nan, 0.0], 'true,false,false': [0.0, nan], 'false': [-7.709882115452476e-19, nan]}, {'': [0.005211652977383801, -1.5419764230904951e-18], 'true': [nan, 0.005211652977383801], 'true,false': [0.005211652977383801, nan], 'true,false,true': [nan, 0.005211652977383801], 'false': [-1.5419764230904951e-18, nan]}, {'': [0.005025903055291724, 2.3129646346357427e-18], 'true': [-1.6653345369377347e-17, 0.0], 'false': [2.3129646346357427e-18, nan], 'true,false': [nan, 0.0], 'true,false,false': [0.0, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;true;genre(B, D).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;true;genre(B, D).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;true;genre(B, E).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;true;genre(B, D).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(B, E).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;true;genre(B, D).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;true;genre(B, D).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.8581489350995122;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | else return -0.14185106490048777;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   else return -0.14185106490048777;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7194734122109543;  // std dev = 7.30e-08, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | else return -0.12544463852839138;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   else return -0.12544463852839138;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( female(A), director(B) )
%   | then return 0.5553664367462846;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else return 0.4719060848787983;  // std dev = 0.221, 16.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=14 */
%   else return -0.11231637819360635;  // std dev = 1.67e-08, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.43181177524561276;  // std dev = 0.042, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | else return -0.1686269659758734;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   else return -0.10159632948783635;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.3304550499236414;  // std dev = 0.038, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | else return -0.14628800429983269;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   else return -0.09269127618926093;  // std dev = 1.05e-08, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.2618290357293779;  // std dev = 0.033, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | else return -0.12894663704483422;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   else return -0.08518475138839683;  // std dev = 1.18e-08, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.21446058465992607;  // std dev = 0.029, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | else return -0.11514299898270847;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   else return -0.07877675473109179;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.18054541114203493;  // std dev = 0.025, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | else return -0.10392131277432723;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   else return -0.07324622576333704;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( female(A) )
%   | then return 0.11315251619601674;  // std dev = 0.085, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | else return 0.14172411729989268;  // std dev = 0.063, 15.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=14 */
%   else return -0.06842697784420274;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.13864463529611432;  // std dev = 0.013, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | else return -0.1061393685745007;  // std dev = 0.002, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   else return -0.0641918400820262;  // std dev = 6.45e-09, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */


Results
   AUC ROC   = 0.989141
   AUC PR    = 0.810436
   CLL	      = -0.13273
   Precision = 0.693548 at threshold = 0.5
   Recall    = 0.724719
   F1        = 0.708791


Total learning time: 0.788 seconds
Total inference time: 0.954 seconds
AUC ROC: 0.989141


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.098699
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 0.359 seconds
Refined model CLL: -0.098699


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.989141
   AUC PR    = 0.810436
   CLL	      = -0.13273
   Precision = 0.693548 at threshold = 0.5
   Recall    = 0.724719
   F1        = 0.708791


Total learning time: 2.197 seconds
Total inference time: 0.954 seconds
AUC ROC: 0.989141
Total revision time: 2.197
Best scored revision CLL: -0.098699


Dataset: 4_cora_imdb, Fold: 3, Type: Transfer (trRDN-B), Time: 00:04:47
{'AUC ROC': 0.989141, 'AUC PR': 0.810436, 'CLL': -0.13273, 'Precision': [0.693548, 0.5], 'Recall': 0.724719, 'F1': 0.708791, 'Learning time': 2.197, 'Inference time': 0.954, 'parameter_20': {'AUC ROC': 0.961967, 'AUC PR': 0.795112, 'CLL': -0.112844, 'Precision': [1.0, 0.5], 'Recall': 0.724719, 'F1': 0.840391, 'Learning time': 0.683, 'Inference time': 1.143}}


Amount of data: 25
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;title(I, H), venue(I, A).;false;false
0;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
0;false;haswordvenue(A, L), haswordtitle(M, L).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordtitle(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordauthor(I, H).;false;true
2;true,false,false;haswordvenue(A, J), haswordtitle(K, J).;false;false
2;false;haswordvenue(A, L), haswordtitle(M, L).;true;false
2;false,true;haswordauthor(N, L).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;title(E, D), venue(E, B).;false;true
3;true,true,false;title(F, D), venue(F, A).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, A).;false;true
4;true,true,false;title(F, D), venue(F, B).;false;false
4;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
4;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
4;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
4;false,true;haswordauthor(M, K).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, B).;false;true
5;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
5;true,false;haswordvenue(B, H), haswordtitle(I, H).;true;true
5;true,false,true;title(J, I), venue(J, B).;false;false
5;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
5;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;title(E, D), venue(E, A).;false;true
6;true,true,false;title(F, D), venue(F, B).;false;false
6;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
6;true,false,true;title(I, H), venue(I, B).;false;false
6;true,false,false;haswordvenue(A, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;title(F, D), venue(F, A).;false;false
7;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
7;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
7;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
7;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;title(E, D), venue(E, A).;false;true
8;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
8;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
8;true,false,true;title(J, I), venue(J, A).;false;false
8;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
8;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, B).;false;true
9;true,true,false;title(F, D), venue(F, A).;false;false
9;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
9;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
9;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
9;false,true;haswordauthor(M, K).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( genre(B, E) )
%   | | then return 0.858148935099512;  // std dev = 1.33e-07, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.14185106490048777;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.14185106490048774;  // std dev = 1.49e-08, 23.000 (wgt'ed) examples reached here.  /* #neg=23 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7194734122109544;  // std dev = 0.000, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | else if ( genre(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(F, B) )
%   | | | then return -0.12544463852839138;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.12544463852839138;  // std dev = 0.000, 23.000 (wgt'ed) examples reached here.  /* #neg=23 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A) )
%   | | then return 0.5059084504544409;  // std dev = 0.909, 27.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=25 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.11231637819360638;  // std dev = 2.28e-09, 23.000 (wgt'ed) examples reached here.  /* #neg=23 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.4295883673521406;  // std dev = 6.66e-08, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | else if ( genre(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(F, B) )
%   | | | then return -0.17344767536285455;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.10159632948783635;  // std dev = 0.000, 23.000 (wgt'ed) examples reached here.  /* #neg=23 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( genre(B, E) )
%   | | then return 0.32890998541342653;  // std dev = 0.000, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.14997018363974868;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.09269127618926094;  // std dev = 2.28e-09, 23.000 (wgt'ed) examples reached here.  /* #neg=23 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.2607586577523285;  // std dev = 3.94e-08, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | else if ( movie(E, B) )
%   | | then if ( genre(B, F) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.13183792274978806;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.08518475138839682;  // std dev = 1.58e-08, 23.000 (wgt'ed) examples reached here.  /* #neg=23 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( genre(B, E) )
%   | | then return 0.21369620726466818;  // std dev = 0.000, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | | else if ( movie(F, B) )
%   | | | then return -0.1174665546485997;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.07877675473109176;  // std dev = 0.000, 23.000 (wgt'ed) examples reached here.  /* #neg=23 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.17997984961629196;  // std dev = 2.11e-08, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | else if ( genre(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(F, B) )
%   | | | then return -0.10582548540200093;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.07324622576333704;  // std dev = 0.000, 23.000 (wgt'ed) examples reached here.  /* #neg=23 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A) )
%   | | then if ( genre(A, F) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.13632405010601095;  // std dev = 0.342, 27.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=25 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.06842697784420275;  // std dev = 0.000, 23.000 (wgt'ed) examples reached here.  /* #neg=23 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.13790648797982197;  // std dev = 7.45e-09, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | else if ( genre(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(F, A) )
%   | | | then return -0.10874634381968715;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.0641918400820262;  // std dev = 0.000, 23.000 (wgt'ed) examples reached here.  /* #neg=23 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 0.961967
   AUC PR    = 0.795112
   CLL	      = -0.112808
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.724719
   F1        = 0.840391


Total learning time: 0.71 seconds
Total inference time: 1.047 seconds
AUC ROC: 0.961967


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.098067
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 0.37 seconds
Parameter learned model CLL: -0.098067


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [1.33e-07, 0, 25], 'true,false,false,true': [0.0, 2, 0], 'true,false,false,false': [0.0, 0, 0], 'false,true': [1.49e-08, 23, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 25], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 2, 0], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 23, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.909, 2, 25], 'true,false,false': [0.0, 0, 0], 'false,true': [2.28e-09, 23, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [6.66e-08, 0, 25], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 2, 0], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 23, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 25], 'true,false,false,true': [0.0, 2, 0], 'true,false,false,false': [0.0, 0, 0], 'false,true': [2.28e-09, 23, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, B)', 'true,false,true': 'genre(B, F)', 'false': 'movie(G, A)'}, {'true,true': [3.94e-08, 0, 25], 'true,false,true,true': [0.0, 0, 0], 'true,false,true,false': [0.0, 2, 0], 'true,false,false': [0.0, 0, 0], 'false,true': [1.58e-08, 23, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 25], 'true,false,false,true': [0.0, 2, 0], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 23, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, A)'}, {'true,true': [2.11e-08, 0, 25], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 2, 0], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 23, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'true,false,true': 'genre(A, F)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 0, 0], 'true,false,true,true': [0.0, 0, 0], 'true,false,true,false': [0.342, 2, 25], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 23, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [7.45e-09, 0, 25], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 2, 0], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 23, 0], 'false,false': [0.0, 0, 0]}]]
[{'': [0.06858710562414343, 9.654113257610057e-18], 'true': [nan, 0.06858710562414343], 'true,false': [7.105427357601002e-16, 0.0], 'false': [9.654113257610057e-18, nan], 'true,false,false': [0.0, nan]}, {'': [0.04896340963409988, -2.413528314402514e-18], 'true': [-7.105427357601002e-17, 0.0], 'true,false': [nan, 0.0], 'true,false,false': [0.0, nan], 'false': [-2.413528314402514e-18, nan]}, {'': [0.030576155100552255, 4.827056628805028e-18], 'true': [nan, 0.030576155100552255], 'true,false': [0.030576155100552255, nan], 'false': [4.827056628805028e-18, nan]}, {'': [0.024941870288982447, -2.413528314402514e-18], 'true': [1.7763568394002506e-16, 0.0], 'true,false': [nan, 0.0], 'true,false,false': [0.0, nan], 'false': [-2.413528314402514e-18, nan]}, {'': [0.01572882142060328, 6.033820786006285e-18], 'true': [nan, 0.01572882142060328], 'true,false': [-1.0658141036401502e-16, 0.0], 'false': [6.033820786006285e-18, nan], 'true,false,false': [0.0, nan]}, {'': [0.010571472909599144, 1.0860877414811314e-17], 'true': [6.217248937900877e-17, 0.0], 'false': [1.0860877414811314e-17, nan], 'true,false': [0.0, nan], 'true,false,true': [nan, 0.0]}, {'': [0.007521863846229322, -4.827056628805028e-18], 'true': [nan, 0.007521863846229322], 'true,false': [-8.881784197001253e-18, 0.0], 'true,false,false': [0.0, nan], 'false': [-4.827056628805028e-18, nan]}, {'': [0.005602516428320909, -1.8101462358018856e-18], 'true': [1.7763568394002505e-17, 0.0], 'true,false': [nan, 0.0], 'true,false,false': [0.0, nan], 'false': [-1.8101462358018856e-18, nan]}, {'': [0.004326183007623465, -3.620292471603771e-18], 'true': [nan, 0.004326183007623465], 'true,false': [0.004326183007623465, nan], 'true,false,true': [nan, 0.004326183007623465], 'false': [-3.620292471603771e-18, nan]}, {'': [0.004172676230090322, -1.8101462358018856e-18], 'true': [2.220446049250313e-18, 0.0], 'true,false': [nan, 0.0], 'true,false,false': [0.0, nan], 'false': [-1.8101462358018856e-18, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;true;genre(B, D).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;true;genre(B, D).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;true;genre(B, E).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;true;genre(B, D).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(B, E).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;true;genre(B, D).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;true;genre(B, D).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.858148935099512;  // std dev = 1.33e-07, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | else return -0.14185106490048777;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   else return -0.14185106490048774;  // std dev = 1.49e-08, 23.000 (wgt'ed) examples reached here.  /* #neg=23 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7194734122109544;  // std dev = 0.000, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | else return -0.12544463852839138;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   else return -0.12544463852839138;  // std dev = 0.000, 23.000 (wgt'ed) examples reached here.  /* #neg=23 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( female(A), director(B) )
%   | then return 0.5553664367462846;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else return 0.48117945730851897;  // std dev = 0.210, 18.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=16 */
%   else return -0.11231637819360638;  // std dev = 1.05e-08, 23.000 (wgt'ed) examples reached here.  /* #neg=23 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.42912618561817867;  // std dev = 0.044, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | else return -0.16993101571915187;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   else return -0.10159632948783635;  // std dev = 0.000, 23.000 (wgt'ed) examples reached here.  /* #neg=23 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.32862367620803296;  // std dev = 0.039, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | else return -0.1472860838188303;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   else return -0.09269127618926094;  // std dev = 1.18e-08, 23.000 (wgt'ed) examples reached here.  /* #neg=23 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.2605802847518014;  // std dev = 0.034, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | else return -0.12973167037646144;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   else return -0.08518475138839682;  // std dev = 1.58e-08, 23.000 (wgt'ed) examples reached here.  /* #neg=23 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.21358058513559874;  // std dev = 0.030, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | else return -0.11577478366300707;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   else return -0.07877675473109176;  // std dev = 0.000, 23.000 (wgt'ed) examples reached here.  /* #neg=23 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.17990157435066997;  // std dev = 0.026, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | else return -0.10443968923027286;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   else return -0.07324622576333704;  // std dev = 0.000, 23.000 (wgt'ed) examples reached here.  /* #neg=23 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( female(A) )
%   | then return 0.12432702395289344;  // std dev = 0.073, 10.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | else return 0.14343589105275598;  // std dev = 0.060, 17.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=16 */
%   else return -0.06842697784420275;  // std dev = 0.000, 23.000 (wgt'ed) examples reached here.  /* #neg=23 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.1378069395180859;  // std dev = 0.016, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | else return -0.10722911467400126;  // std dev = 0.001, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   else return -0.0641918400820262;  // std dev = 0.000, 23.000 (wgt'ed) examples reached here.  /* #neg=23 */


Results
   AUC ROC   = 0.989141
   AUC PR    = 0.810436
   CLL	      = -0.132855
   Precision = 0.693548 at threshold = 0.5
   Recall    = 0.724719
   F1        = 0.708791


Total learning time: 0.716 seconds
Total inference time: 0.909 seconds
AUC ROC: 0.989141


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.097969
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 0.338 seconds
Refined model CLL: -0.097969


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.989141
   AUC PR    = 0.810436
   CLL	      = -0.132855
   Precision = 0.693548 at threshold = 0.5
   Recall    = 0.724719
   F1        = 0.708791


Total learning time: 2.134 seconds
Total inference time: 0.909 seconds
AUC ROC: 0.989141
Total revision time: 2.134
Best scored revision CLL: -0.097969


Dataset: 4_cora_imdb, Fold: 3, Type: Transfer (trRDN-B), Time: 00:04:52
{'AUC ROC': 0.989141, 'AUC PR': 0.810436, 'CLL': -0.132855, 'Precision': [0.693548, 0.5], 'Recall': 0.724719, 'F1': 0.708791, 'Learning time': 2.134, 'Inference time': 0.909, 'parameter_25': {'AUC ROC': 0.961967, 'AUC PR': 0.795112, 'CLL': -0.112808, 'Precision': [1.0, 0.5], 'Recall': 0.724719, 'F1': 0.840391, 'Learning time': 0.71, 'Inference time': 1.047}}


Starting fold 4

Target train facts examples: 927
Target train pos examples: 337
Target train neg examples: 12345

Target test facts examples: 151
Target test pos	 examples: 45
Target test neg examples: 1891

Amount of data: 5
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;title(I, H), venue(I, A).;false;false
0;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
0;false;haswordvenue(A, L), haswordtitle(M, L).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordtitle(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordauthor(I, H).;false;true
2;true,false,false;haswordvenue(A, J), haswordtitle(K, J).;false;false
2;false;haswordvenue(A, L), haswordtitle(M, L).;true;false
2;false,true;haswordauthor(N, L).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;title(E, D), venue(E, B).;false;true
3;true,true,false;title(F, D), venue(F, A).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, A).;false;true
4;true,true,false;title(F, D), venue(F, B).;false;false
4;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
4;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
4;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
4;false,true;haswordauthor(M, K).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, B).;false;true
5;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
5;true,false;haswordvenue(B, H), haswordtitle(I, H).;true;true
5;true,false,true;title(J, I), venue(J, B).;false;false
5;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
5;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;title(E, D), venue(E, A).;false;true
6;true,true,false;title(F, D), venue(F, B).;false;false
6;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
6;true,false,true;title(I, H), venue(I, B).;false;false
6;true,false,false;haswordvenue(A, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;title(F, D), venue(F, A).;false;false
7;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
7;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
7;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
7;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;title(E, D), venue(E, A).;false;true
8;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
8;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
8;true,false,true;title(J, I), venue(J, A).;false;false
8;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
8;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, B).;false;true
9;true,true,false;title(F, D), venue(F, A).;false;false
9;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
9;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
9;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
9;false,true;haswordauthor(M, K).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995122;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.3581489350995122;  // std dev = 0.707, 2.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.14185106490048777;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7194734122109545;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( genre(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(F, B) )
%   | | | then return 0.308741135785635;  // std dev = 0.707, 2.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.12544463852839138;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A) )
%   | | then return 0.45571508075038514;  // std dev = 0.787, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.11231637819360639;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.4419288842523902;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( genre(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(F, B) )
%   | | | then return 0.16315700675196543;  // std dev = 0.707, 2.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.10159632948783628;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( genre(B, E) )
%   | | then return 0.337318630188875;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.12579939681763522;  // std dev = 0.707, 2.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.09269127618926096;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.2664742781615753;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( movie(E, B) )
%   | | then if ( genre(B, F) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.09590673022074611;  // std dev = 0.707, 2.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.08518475138839687;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( genre(B, E) )
%   | | then return 0.21771040758628668;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.07261582529187274;  // std dev = 0.707, 2.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.07877675473109173;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.18290781664865952;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( genre(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(F, B) )
%   | | | then return 0.05475845972853041;  // std dev = 0.707, 2.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.07324622576333704;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A) )
%   | | then if ( genre(A, F) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.11849070968776142;  // std dev = 0.720, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.06842697784420272;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.14207420056518894;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( genre(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(F, A) )
%   | | | then return 0.011664563136295936;  // std dev = 0.707, 2.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.0641918400820262;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.226775
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 0.667 seconds
Total inference time: 0.862 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 0.98
   AUC PR    = 0.983333
   CLL	      = -0.217295
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.8
   F1        = 0.888889


Total scoring time: 0.327 seconds
Parameter learned model CLL: -0.217295


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 4], 'true,false,false,true': [0.707, 1, 1], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 4, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 4], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.707, 1, 1], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 4, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.787, 1, 5], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 4, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 4], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.707, 1, 1], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 4, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 4], 'true,false,false,true': [0.707, 1, 1], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 4, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, B)', 'true,false,true': 'genre(B, F)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 0, 4], 'true,false,true,true': [0.0, 0, 0], 'true,false,true,false': [0.707, 1, 1], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 4, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 4], 'true,false,false,true': [0.707, 1, 1], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 4, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 0, 4], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.707, 1, 1], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 4, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'true,false,true': 'genre(A, F)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 0, 0], 'true,false,true,true': [0.0, 0, 0], 'true,false,true,false': [0.72, 1, 5], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 4, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 4], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.707, 1, 1], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 4, 0], 'false,false': [0.0, 0, 0]}]]
[{'': [0.1388888888888887, 0.0], 'true': [nan, 0.1388888888888887], 'true,false': [0.0, 0.25], 'true,false,false': [0.25, nan], 'false': [0.0, nan]}, {'': [0.1208224450883389, 0.0], 'true': [0.0, 0.25000000000000006], 'true,false': [nan, 0.25000000000000006], 'true,false,false': [0.25000000000000006, nan], 'false': [0.0, nan]}, {'': [0.10319411883697631, 0.0], 'true': [nan, 0.10319411883697631], 'true,false': [0.10319411883697631, nan], 'false': [0.0, nan]}, {'': [0.10060305770780266, 0.0], 'true': [0.0, 0.25], 'true,false': [nan, 0.25], 'true,false,false': [0.25, nan], 'false': [0.0, nan]}, {'': [0.09327564135243488, 0.0], 'true': [nan, 0.09327564135243488], 'true,false': [0.0, 0.24999999999999997], 'true,false,false': [0.24999999999999997, nan], 'false': [0.0, nan]}, {'': [0.08979850853567713, 0.0], 'true': [0.0, 0.25], 'true,false': [0.25, nan], 'true,false,true': [nan, 0.25], 'false': [0.0, nan]}, {'': [0.0880116528469312, 0.0], 'true': [nan, 0.0880116528469312], 'true,false': [0.0, 0.24999999999999997], 'true,false,false': [0.24999999999999997, nan], 'false': [0.0, nan]}, {'': [0.08698272392867616, 0.0], 'true': [0.0, 0.25000000000000006], 'true,false': [nan, 0.25000000000000006], 'true,false,false': [0.25000000000000006, nan], 'false': [0.0, nan]}, {'': [0.08632058806362558, 0.0], 'true': [nan, 0.08632058806362558], 'true,false': [0.08632058806362558, nan], 'true,false,true': [nan, 0.08632058806362558], 'false': [0.0, nan]}, {'': [0.08711259411874117, 0.0], 'true': [0.0, 0.25], 'true,false': [nan, 0.25], 'true,false,false': [0.25, nan], 'false': [0.0, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;true;genre(B, D).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;true;genre(B, D).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;true;genre(B, E).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;true;genre(B, D).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(B, E).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;true;genre(B, D).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;true;genre(B, D).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.8581489350995122;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else return 0.3581489350995122;  // std dev = 0.707, 2.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */
%   else return -0.14185106490048777;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7194734122109545;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else return 0.308741135785635;  // std dev = 0.707, 2.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */
%   else return -0.12544463852839138;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.45571508075038514;  // std dev = 0.787, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   else return -0.11231637819360639;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.4419288842523902;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else return 0.16315700675196543;  // std dev = 0.707, 2.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */
%   else return -0.10159632948783628;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.337318630188875;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else return 0.12579939681763522;  // std dev = 0.707, 2.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */
%   else return -0.09269127618926096;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.2664742781615753;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else return 0.09590673022074611;  // std dev = 0.707, 2.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */
%   else return -0.08518475138839687;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.21771040758628668;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else return 0.07261582529187274;  // std dev = 0.707, 2.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */
%   else return -0.07877675473109173;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.18290781664865952;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else return 0.05475845972853041;  // std dev = 0.707, 2.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */
%   else return -0.07324622576333704;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.11849070968776142;  // std dev = 0.720, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   else return -0.06842697784420272;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.14207420056518894;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else return 0.011664563136295936;  // std dev = 0.707, 2.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */
%   else return -0.0641918400820262;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */


Results
   AUC ROC   = 0.998942
   AUC PR    = 0.918367
   CLL	      = -0.2415
   Precision = 0.918367 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.957447


Total learning time: 0.516 seconds
Total inference time: 0.723 seconds
AUC ROC: 0.998942


Results scoring model
   AUC ROC   = 0.98
   AUC PR    = 0.983333
   CLL	      = -0.217295
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.8
   F1        = 0.888889


Total scoring time: 0.308 seconds
Refined model CLL: -0.217295


******************************************
Best model found
******************************************
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.226775
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 1.818 seconds
Total inference time: 0.862 seconds
AUC ROC: 1.0
Total revision time: 1.818
Best scored revision CLL: -0.217295


Dataset: 4_cora_imdb, Fold: 4, Type: Transfer (trRDN-B), Time: 00:04:56
{'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.226775, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 1.818, 'Inference time': 0.862, 'parameter_5': {'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.226775, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 0.667, 'Inference time': 0.862}}


Amount of data: 10
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;title(I, H), venue(I, A).;false;false
0;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
0;false;haswordvenue(A, L), haswordtitle(M, L).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordtitle(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordauthor(I, H).;false;true
2;true,false,false;haswordvenue(A, J), haswordtitle(K, J).;false;false
2;false;haswordvenue(A, L), haswordtitle(M, L).;true;false
2;false,true;haswordauthor(N, L).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;title(E, D), venue(E, B).;false;true
3;true,true,false;title(F, D), venue(F, A).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, A).;false;true
4;true,true,false;title(F, D), venue(F, B).;false;false
4;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
4;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
4;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
4;false,true;haswordauthor(M, K).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, B).;false;true
5;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
5;true,false;haswordvenue(B, H), haswordtitle(I, H).;true;true
5;true,false,true;title(J, I), venue(J, B).;false;false
5;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
5;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;title(E, D), venue(E, A).;false;true
6;true,true,false;title(F, D), venue(F, B).;false;false
6;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
6;true,false,true;title(I, H), venue(I, B).;false;false
6;true,false,false;haswordvenue(A, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;title(F, D), venue(F, A).;false;false
7;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
7;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
7;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
7;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;title(E, D), venue(E, A).;false;true
8;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
8;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
8;true,false,true;title(J, I), venue(J, A).;false;false
8;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
8;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, B).;false;true
9;true,true,false;title(F, D), venue(F, A).;false;false
9;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
9;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
9;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
9;false,true;haswordauthor(M, K).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995123;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.3581489350995122;  // std dev = 0.707, 2.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.1418510649004878;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7194734122109543;  // std dev = 2.98e-08, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else if ( genre(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(F, B) )
%   | | | then return 0.308741135785635;  // std dev = 0.707, 2.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.12544463852839138;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A) )
%   | | then return 0.5010111516576122;  // std dev = 0.804, 11.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=10 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.11231637819360639;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.43078882378339767;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else if ( genre(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(F, B) )
%   | | | then return 0.1529652011782946;  // std dev = 0.707, 2.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.10159632948783627;  // std dev = 1.32e-09, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( genre(B, E) )
%   | | then return 0.32972649830862655;  // std dev = 2.11e-08, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.11754326056254583;  // std dev = 0.707, 2.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.09269127618926097;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.26131426285303366;  // std dev = 1.83e-08, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else if ( movie(E, B) )
%   | | then if ( genre(B, F) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.08942535006230104;  // std dev = 0.707, 2.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.08518475138839687;  // std dev = 3.73e-09, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( genre(B, E) )
%   | | then return 0.2140870910092807;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.06762432347909586;  // std dev = 0.707, 2.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.07877675473109173;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.18026543620387048;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else if ( genre(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(F, B) )
%   | | | then return 0.05095762531832834;  // std dev = 0.707, 2.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.07324622576333704;  // std dev = 1.32e-09, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A) )
%   | | then if ( genre(A, F) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.13390302054047568;  // std dev = 0.723, 11.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=10 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.06842697784420272;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.13839099137138777;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else if ( genre(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(F, A) )
%   | | | then return 0.0049198402913049055;  // std dev = 0.707, 2.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.0641918400820262;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.229243
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 0.643 seconds
Total inference time: 0.918 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 0.995
   AUC PR    = 0.995455
   CLL	      = -0.156281
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.9
   F1        = 0.947368


Total scoring time: 0.335 seconds
Parameter learned model CLL: -0.156281


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 9], 'true,false,false,true': [0.707, 1, 1], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 9, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [2.98e-08, 0, 9], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.707, 1, 1], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 9, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.804, 1, 10], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 9, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 9], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.707, 1, 1], 'true,false,false,false': [0.0, 0, 0], 'false,true': [1.32e-09, 9, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [2.11e-08, 0, 9], 'true,false,false,true': [0.707, 1, 1], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 9, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, B)', 'true,false,true': 'genre(B, F)', 'false': 'movie(G, A)'}, {'true,true': [1.83e-08, 0, 9], 'true,false,true,true': [0.0, 0, 0], 'true,false,true,false': [0.707, 1, 1], 'true,false,false': [0.0, 0, 0], 'false,true': [3.73e-09, 9, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 9], 'true,false,false,true': [0.707, 1, 1], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 9, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 0, 9], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.707, 1, 1], 'true,false,false,false': [0.0, 0, 0], 'false,true': [1.32e-09, 9, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'true,false,true': 'genre(A, F)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 0, 0], 'true,false,true,true': [0.0, 0, 0], 'true,false,true,false': [0.723, 1, 10], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 9, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 9], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.707, 1, 1], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 9, 0], 'false,false': [0.0, 0, 0]}]]
[{'': [0.0826446280991734, -9.25185853854297e-18], 'true': [nan, 0.0826446280991734], 'true,false': [-2.9605947323337506e-16, 0.25], 'true,false,false': [0.25, nan], 'false': [-9.25185853854297e-18, nan]}, {'': [0.07055056241450798, 0.0], 'true': [9.868649107779169e-17, 0.25000000000000006], 'true,false': [nan, 0.25000000000000006], 'true,false,false': [0.25000000000000006, nan], 'false': [0.0, nan]}, {'': [0.05874978203136411, -1.5419764230904951e-18], 'true': [nan, 0.05874978203136411], 'true,false': [0.05874978203136411, nan], 'false': [-1.5419764230904951e-18, nan]}, {'': [0.056936755165236504, 3.0839528461809902e-18], 'true': [0.0, 0.25], 'true,false': [nan, 0.25], 'true,false,false': [0.25, nan], 'false': [3.0839528461809902e-18, nan]}, {'': [0.05215199235411061, 0.0], 'true': [nan, 0.05215199235411061], 'true,false': [4.9343245538895844e-17, 0.25], 'true,false,false': [0.25, nan], 'false': [0.0, nan]}, {'': [0.04984978818286647, 1.5419764230904951e-18], 'true': [3.700743415417188e-17, 0.24999999999999997], 'true,false': [0.24999999999999997, nan], 'true,false,true': [nan, 0.24999999999999997], 'false': [1.5419764230904951e-18, nan]}, {'': [0.04864565422237041, 0.0], 'true': [nan, 0.04864565422237041], 'true,false': [-1.2335811384723961e-17, 0.24999999999999997], 'true,false,false': [0.24999999999999997, nan], 'false': [0.0, nan]}, {'': [0.047941894043042985, 7.709882115452476e-19], 'true': [-6.1679056923619804e-18, 0.25000000000000006], 'true,false': [nan, 0.25000000000000006], 'true,false,false': [0.25000000000000006, nan], 'false': [7.709882115452476e-19, nan]}, {'': [0.047484773454074806, 0.0], 'true': [nan, 0.047484773454074806], 'true,false': [0.047484773454074806, nan], 'true,false,true': [nan, 0.047484773454074806], 'false': [0.0, nan]}, {'': [0.04810464352951704, 7.709882115452476e-19], 'true': [-3.0839528461809902e-18, 0.24999999999999997], 'true,false': [nan, 0.24999999999999997], 'true,false,false': [0.24999999999999997, nan], 'false': [7.709882115452476e-19, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;true;genre(B, D).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;true;genre(B, D).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;true;genre(B, E).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;true;genre(B, D).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(B, E).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;true;genre(B, D).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;true;genre(B, D).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.8581489350995123;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else return 0.3581489350995122;  // std dev = 0.707, 2.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */
%   else return -0.1418510649004878;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7194734122109543;  // std dev = 2.98e-08, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else return 0.308741135785635;  // std dev = 0.707, 2.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */
%   else return -0.12544463852839138;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( female(A), director(B) )
%   | then return 0.5888740920816682;  // std dev = 0.184, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else return 0.3955756231487449;  // std dev = 0.715, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   else return -0.11231637819360639;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.4304636747985325;  // std dev = 0.071, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else return 0.15462683588154164;  // std dev = 0.676, 2.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */
%   else return -0.10159632948783627;  // std dev = 5.27e-09, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.3297118259969121;  // std dev = 0.064, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else return 0.11896235557644544;  // std dev = 0.675, 2.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */
%   else return -0.09269127618926097;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.2614269193391406;  // std dev = 0.056, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else return 0.09060064864021714;  // std dev = 0.674, 2.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */
%   else return -0.08518475138839687;  // std dev = 3.73e-09, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.21424034888396687;  // std dev = 0.049, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else return 0.06857858518231755;  // std dev = 0.674, 2.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */
%   else return -0.07877675473109173;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.18042402939762126;  // std dev = 0.043, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else return 0.05172259776677404;  // std dev = 0.673, 2.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */
%   else return -0.07324622576333704;  // std dev = 2.63e-09, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( female(A), director(B) )
%   | then return 0.20579051492054665;  // std dev = 0.339, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else return 0.04815245367231709;  // std dev = 0.543, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   else return -0.06842697784420272;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.13924532840265302;  // std dev = 0.063, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else return 0.0072987974648705545;  // std dev = 0.645, 2.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */
%   else return -0.0641918400820262;  // std dev = 2.63e-09, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */


Results
   AUC ROC   = 0.999201
   AUC PR    = 0.95488
   CLL	      = -0.219836
   Precision = 0.918367 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.957447


Total learning time: 0.618 seconds
Total inference time: 0.731 seconds
AUC ROC: 0.999201


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.148377
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 0.325 seconds
Refined model CLL: -0.148377


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.999201
   AUC PR    = 0.95488
   CLL	      = -0.219836
   Precision = 0.918367 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.957447


Total learning time: 1.921 seconds
Total inference time: 0.731 seconds
AUC ROC: 0.999201
Total revision time: 1.921
Best scored revision CLL: -0.148377


Dataset: 4_cora_imdb, Fold: 4, Type: Transfer (trRDN-B), Time: 00:05:00
{'AUC ROC': 0.999201, 'AUC PR': 0.95488, 'CLL': -0.219836, 'Precision': [0.918367, 0.5], 'Recall': 1.0, 'F1': 0.957447, 'Learning time': 1.921, 'Inference time': 0.731, 'parameter_10': {'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.229243, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 0.643, 'Inference time': 0.918}}


Amount of data: 15
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;title(I, H), venue(I, A).;false;false
0;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
0;false;haswordvenue(A, L), haswordtitle(M, L).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordtitle(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordauthor(I, H).;false;true
2;true,false,false;haswordvenue(A, J), haswordtitle(K, J).;false;false
2;false;haswordvenue(A, L), haswordtitle(M, L).;true;false
2;false,true;haswordauthor(N, L).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;title(E, D), venue(E, B).;false;true
3;true,true,false;title(F, D), venue(F, A).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, A).;false;true
4;true,true,false;title(F, D), venue(F, B).;false;false
4;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
4;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
4;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
4;false,true;haswordauthor(M, K).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, B).;false;true
5;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
5;true,false;haswordvenue(B, H), haswordtitle(I, H).;true;true
5;true,false,true;title(J, I), venue(J, B).;false;false
5;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
5;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;title(E, D), venue(E, A).;false;true
6;true,true,false;title(F, D), venue(F, B).;false;false
6;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
6;true,false,true;title(I, H), venue(I, B).;false;false
6;true,false,false;haswordvenue(A, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;title(F, D), venue(F, A).;false;false
7;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
7;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
7;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
7;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;title(E, D), venue(E, A).;false;true
8;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
8;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
8;true,false,true;title(J, I), venue(J, A).;false;false
8;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
8;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, B).;false;true
9;true,true,false;title(F, D), venue(F, A).;false;false
9;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
9;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
9;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
9;false,true;haswordauthor(M, K).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995123;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.19148226843284552;  // std dev = 1.155, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.1418510649004878;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7194734122109542;  // std dev = 4.21e-08, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else if ( genre(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(F, B) )
%   | | | then return 0.16653882456488173;  // std dev = 1.155, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.12544463852839138;  // std dev = 5.27e-09, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A) )
%   | | then return 0.4248594281365835;  // std dev = 1.426, 19.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=15 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.11231637819360638;  // std dev = 1.32e-09, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.4495517984126926;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else if ( genre(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(F, B) )
%   | | | then return 0.06774446256273245;  // std dev = 1.155, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.10159632948783628;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( genre(B, E) )
%   | | then return 0.3425314225351491;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.054322804718339224;  // std dev = 1.155, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.09269127618926097;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.2700113489217535;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else if ( movie(E, B) )
%   | | then if ( genre(B, F) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.043265003649056576;  // std dev = 1.155, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.08518475138839687;  // std dev = 5.27e-09, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( genre(B, E) )
%   | | then return 0.22018710589497134;  // std dev = 1.05e-08, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.03427524901914764;  // std dev = 1.155, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.07877675473109172;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.18470900599812318;  // std dev = 1.83e-08, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else if ( genre(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(F, B) )
%   | | | then return 0.027041276292085026;  // std dev = 1.155, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.07324622576333704;  // std dev = 1.32e-09, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A) )
%   | | then if ( genre(A, F) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.11515911393060707;  // std dev = 1.188, 19.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=15 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.06842697784420272;  // std dev = 2.63e-09, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.1437321705384514;  // std dev = 1.29e-08, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else if ( genre(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(F, A) )
%   | | | then return -0.003975180555335227;  // std dev = 1.155, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.06419184008202619;  // std dev = 1.61e-09, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.157747
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 0.662 seconds
Total inference time: 0.843 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 0.982222
   AUC PR    = 0.984649
   CLL	      = -0.208989
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.866667
   F1        = 0.928571


Total scoring time: 0.363 seconds
Parameter learned model CLL: -0.208989


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 13], 'true,false,false,true': [1.155, 4, 2], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 11, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [4.21e-08, 0, 13], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [1.155, 4, 2], 'true,false,false,false': [0.0, 0, 0], 'false,true': [5.27e-09, 11, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [1.426, 4, 15], 'true,false,false': [0.0, 0, 0], 'false,true': [1.32e-09, 11, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 13], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [1.155, 4, 2], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 11, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 13], 'true,false,false,true': [1.155, 4, 2], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 11, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, B)', 'true,false,true': 'genre(B, F)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 0, 13], 'true,false,true,true': [0.0, 0, 0], 'true,false,true,false': [1.155, 4, 2], 'true,false,false': [0.0, 0, 0], 'false,true': [5.27e-09, 11, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [1.05e-08, 0, 13], 'true,false,false,true': [1.155, 4, 2], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 11, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, A)'}, {'true,true': [1.83e-08, 0, 13], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [1.155, 4, 2], 'true,false,false,false': [0.0, 0, 0], 'false,true': [1.32e-09, 11, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'true,false,true': 'genre(A, F)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 0, 0], 'true,false,true,true': [0.0, 0, 0], 'true,false,true,false': [1.188, 4, 15], 'true,false,false': [0.0, 0, 0], 'false,true': [2.63e-09, 11, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [1.29e-08, 0, 13], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [1.155, 4, 2], 'true,false,false,false': [0.0, 0, 0], 'false,true': [1.61e-09, 11, 0], 'false,false': [0.0, 0, 0]}]]
[{'': [0.16620498614958412, -1.0092936587501423e-17], 'true': [nan, 0.16620498614958412], 'true,false': [-2.7328566760003855e-16, 0.22222222222222224], 'true,false,false': [0.22222222222222224, nan], 'false': [-1.0092936587501423e-17, nan]}, {'': [0.13623488275382042, 2.523234146875356e-18], 'true': [1.3664283380001927e-16, 0.2222222222222222], 'true,false': [nan, 0.2222222222222222], 'true,false,false': [0.2222222222222222, nan], 'false': [2.523234146875356e-18, nan]}, {'': [0.10707827707170503, 5.046468293750712e-18], 'true': [nan, 0.10707827707170503], 'true,false': [0.10707827707170503, nan], 'false': [5.046468293750712e-18, nan]}, {'': [0.10167292794078435, 0.0], 'true': [-6.832141690000964e-17, 0.22222222222222224], 'true,false': [nan, 0.22222222222222224], 'true,false,false': [0.22222222222222224, nan], 'false': [0.0, nan]}, {'': [0.08812282966558349, 0.0], 'true': [nan, 0.08812282966558349], 'true,false': [-6.832141690000964e-17, 0.22222222222222218], 'true,false,false': [0.22222222222222218, nan], 'false': [0.0, nan]}, {'': [0.08128426019586228, 2.523234146875356e-18], 'true': [-2.5620531337503614e-17, 0.22222222222222218], 'true,false': [0.22222222222222218, nan], 'true,false,true': [nan, 0.22222222222222218], 'false': [2.523234146875356e-18, nan]}, {'': [0.0776433916300295, 0.0], 'true': [nan, 0.0776433916300295], 'true,false': [8.540177112501205e-18, 0.2222222222222222], 'true,false,false': [0.2222222222222222, nan], 'false': [0.0, nan]}, {'': [0.0755466596858851, 6.30808536718839e-19], 'true': [2.5620531337503614e-17, 0.2222222222222222], 'true,false': [nan, 0.2222222222222222], 'true,false,false': [0.2222222222222222, nan], 'false': [6.30808536718839e-19, nan]}, {'': [0.07424434759021796, 6.30808536718839e-19], 'true': [nan, 0.07424434759021796], 'true,false': [0.07424434759021796, nan], 'true,false,true': [nan, 0.07424434759021796], 'false': [6.30808536718839e-19, nan]}, {'': [0.07488946076335319, 2.523234146875356e-18], 'true': [1.2810265668751807e-17, 0.22222222222222218], 'true,false': [nan, 0.22222222222222218], 'true,false,false': [0.22222222222222218, nan], 'false': [2.523234146875356e-18, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;true;genre(B, D).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;true;genre(B, D).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;true;genre(B, E).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;true;genre(B, D).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(B, E).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;true;genre(B, D).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;true;genre(B, D).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.8581489350995123;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else return 0.19148226843284552;  // std dev = 1.155, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   else return -0.1418510649004878;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7194734122109542;  // std dev = 4.21e-08, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else return 0.16653882456488173;  // std dev = 1.155, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   else return -0.12544463852839138;  // std dev = 5.27e-09, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.19123909051776852;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else if ( female(A) )
%   | | then return 0.6277648575279836;  // std dev = 0.114, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else return 0.5553664367462846;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   else return -0.11231637819360638;  // std dev = 7.45e-09, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.41078478137833574;  // std dev = 0.031, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else return 0.12207558527472658;  // std dev = 0.989, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   else return -0.10159632948783628;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.3161784914025515;  // std dev = 0.027, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else return 0.10163445698328027;  // std dev = 0.978, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   else return -0.09269127618926097;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.2520912986010745;  // std dev = 0.024, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else return 0.08361914243993139;  // std dev = 0.970, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   else return -0.08518475138839687;  // std dev = 5.27e-09, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.20758798717230825;  // std dev = 0.021, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else return 0.06813183226380755;  // std dev = 0.963, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   else return -0.07877675473109172;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.1755091596357808;  // std dev = 0.018, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else return 0.055080449642744944;  // std dev = 0.958, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   else return -0.07324622576333704;  // std dev = 2.63e-09, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B) )
%   | then if ( female(A) )
%   | | then return 0.27410863324561446;  // std dev = 0.203, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else return 0.15510100966117912;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else return -0.2309994187778363;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   else return -0.06842697784420272;  // std dev = 2.63e-09, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.12778859342469262;  // std dev = 0.037, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else return 0.04743682333891538;  // std dev = 0.831, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   else return -0.06419184008202619;  // std dev = 5.27e-09, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */


Results
   AUC ROC   = 0.999201
   AUC PR    = 0.95488
   CLL	      = -0.113448
   Precision = 0.918367 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.957447


Total learning time: 0.745 seconds
Total inference time: 0.737 seconds
AUC ROC: 0.999201


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.153509
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.866667
   F1        = 0.928571


Total scoring time: 0.34 seconds
Refined model CLL: -0.153509


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.999201
   AUC PR    = 0.95488
   CLL	      = -0.113448
   Precision = 0.918367 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.957447


Total learning time: 2.11 seconds
Total inference time: 0.737 seconds
AUC ROC: 0.999201
Total revision time: 2.11
Best scored revision CLL: -0.153509


Dataset: 4_cora_imdb, Fold: 4, Type: Transfer (trRDN-B), Time: 00:05:04
{'AUC ROC': 0.999201, 'AUC PR': 0.95488, 'CLL': -0.113448, 'Precision': [0.918367, 0.5], 'Recall': 1.0, 'F1': 0.957447, 'Learning time': 2.11, 'Inference time': 0.737, 'parameter_15': {'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.157747, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 0.662, 'Inference time': 0.843}}


Amount of data: 20
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;title(I, H), venue(I, A).;false;false
0;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
0;false;haswordvenue(A, L), haswordtitle(M, L).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordtitle(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordauthor(I, H).;false;true
2;true,false,false;haswordvenue(A, J), haswordtitle(K, J).;false;false
2;false;haswordvenue(A, L), haswordtitle(M, L).;true;false
2;false,true;haswordauthor(N, L).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;title(E, D), venue(E, B).;false;true
3;true,true,false;title(F, D), venue(F, A).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, A).;false;true
4;true,true,false;title(F, D), venue(F, B).;false;false
4;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
4;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
4;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
4;false,true;haswordauthor(M, K).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, B).;false;true
5;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
5;true,false;haswordvenue(B, H), haswordtitle(I, H).;true;true
5;true,false,true;title(J, I), venue(J, B).;false;false
5;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
5;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;title(E, D), venue(E, A).;false;true
6;true,true,false;title(F, D), venue(F, B).;false;false
6;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
6;true,false,true;title(I, H), venue(I, B).;false;false
6;true,false,false;haswordvenue(A, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;title(F, D), venue(F, A).;false;false
7;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
7;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
7;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
7;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;title(E, D), venue(E, A).;false;true
8;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
8;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
8;true,false,true;title(J, I), venue(J, A).;false;false
8;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
8;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, B).;false;true
9;true,true,false;title(F, D), venue(F, A).;false;false
9;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
9;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
9;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
9;false,true;haswordauthor(M, K).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995123;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.2581489350995123;  // std dev = 1.549, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.1418510649004878;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7194734122109542;  // std dev = 5.96e-08, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | else if ( genre(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(F, B) )
%   | | | then return 0.22373365448410584;  // std dev = 1.549, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.12544463852839138;  // std dev = 7.45e-09, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A) )
%   | | then return 0.4144056234429051;  // std dev = 1.796, 26.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=20 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.11231637819360636;  // std dev = 2.95e-09, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.4521399858100299;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | else if ( genre(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(F, B) )
%   | | | then return 0.11171167833049375;  // std dev = 1.549, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.1015963294878363;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( genre(B, E) )
%   | | then return 0.34430497579425084;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.08826063126898412;  // std dev = 1.549, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.09269127618926096;  // std dev = 1.32e-09, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.2712138075990018;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | else if ( movie(E, B) )
%   | | then if ( genre(B, F) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.0690163403608203;  // std dev = 1.549, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.08518475138839686;  // std dev = 8.33e-09, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( genre(B, E) )
%   | | then return 0.22102782290567796;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.05355964640388711;  // std dev = 1.549, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.07877675473109172;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.18531951305460392;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | else if ( genre(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(F, B) )
%   | | | then return 0.04133508154484848;  // std dev = 1.549, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.07324622576333704;  // std dev = 9.31e-10, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A) )
%   | | then if ( genre(A, F) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.11003782695333862;  // std dev = 1.581, 26.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=20 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.06842697784420272;  // std dev = 3.73e-09, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.1447888525281511;  // std dev = 7.45e-09, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | else if ( genre(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(F, A) )
%   | | | then return 0.00582366026499691;  // std dev = 1.549, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.06419184008202619;  // std dev = 1.86e-09, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.182072
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 0.729 seconds
Total inference time: 0.888 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 0.97
   AUC PR    = 0.973459
   CLL	      = -0.244763
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.8
   F1        = 0.888889


Total scoring time: 0.369 seconds
Parameter learned model CLL: -0.244763


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 16], 'true,false,false,true': [1.549, 6, 4], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 14, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [5.96e-08, 0, 16], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [1.549, 6, 4], 'true,false,false,false': [0.0, 0, 0], 'false,true': [7.45e-09, 14, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [1.796, 6, 20], 'true,false,false': [0.0, 0, 0], 'false,true': [2.95e-09, 14, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 16], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [1.549, 6, 4], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 14, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 16], 'true,false,false,true': [1.549, 6, 4], 'true,false,false,false': [0.0, 0, 0], 'false,true': [1.32e-09, 14, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, B)', 'true,false,true': 'genre(B, F)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 0, 16], 'true,false,true,true': [0.0, 0, 0], 'true,false,true,false': [1.549, 6, 4], 'true,false,false': [0.0, 0, 0], 'false,true': [8.33e-09, 14, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 16], 'true,false,false,true': [1.549, 6, 4], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 14, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 0, 16], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [1.549, 6, 4], 'true,false,false,false': [0.0, 0, 0], 'false,true': [9.31e-10, 14, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'true,false,true': 'genre(A, F)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 0, 0], 'true,false,true,true': [0.0, 0, 0], 'true,false,true,false': [1.581, 6, 20], 'true,false,false': [0.0, 0, 0], 'false,true': [3.73e-09, 14, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [7.45e-09, 0, 16], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [1.549, 6, 4], 'true,false,false,false': [0.0, 0, 0], 'false,true': [1.86e-09, 14, 0], 'false,false': [0.0, 0, 0]}]]
[{'': [0.17751479289940847, -1.1895246692412391e-17], 'true': [nan, 0.17751479289940847], 'true,false': [-2.220446049250313e-16, 0.23999999999999985], 'true,false,false': [0.23999999999999985, nan], 'false': [-1.1895246692412391e-17, nan]}, {'': [0.15047524435291731, 3.96508223080413e-18], 'true': [2.220446049250313e-16, 0.2399999999999999], 'true,false': [nan, 0.2399999999999999], 'true,false,false': [0.2399999999999999, nan], 'false': [3.96508223080413e-18, nan]}, {'': [0.12409961372713238, 9.912705577010326e-18], 'true': [nan, 0.12409961372713238], 'true,false': [0.12409961372713238, nan], 'false': [9.912705577010326e-18, nan]}, {'': [0.11973761716766435, -3.96508223080413e-18], 'true': [-5.551115123125783e-17, 0.23999999999999994], 'true,false': [nan, 0.23999999999999994], 'true,false,false': [0.23999999999999994, nan], 'false': [-3.96508223080413e-18, nan]}, {'': [0.10782454588482207, 3.96508223080413e-18], 'true': [nan, 0.10782454588482207], 'true,false': [-6.938893903907228e-17, 0.23999999999999994], 'true,false,false': [0.23999999999999994, nan], 'false': [3.96508223080413e-18, nan]}, {'': [0.10198433509054088, 4.956352788505163e-18], 'true': [0.0, 0.2399999999999999], 'true,false': [0.2399999999999999, nan], 'true,false,true': [nan, 0.2399999999999999], 'false': [4.956352788505163e-18, nan]}, {'': [0.09894570180848154, -9.912705577010326e-19], 'true': [nan, 0.09894570180848154], 'true,false': [-2.7755575615628914e-17, 0.23999999999999994], 'true,false,false': [0.23999999999999994, nan], 'false': [-9.912705577010326e-19, nan]}, {'': [0.09721456012241125, 9.912705577010326e-19], 'true': [0.0, 0.24000000000000007], 'true,false': [nan, 0.24000000000000007], 'true,false,false': [0.24000000000000007, nan], 'false': [9.912705577010326e-19, nan]}, {'': [0.0961361056446748, 9.912705577010326e-19], 'true': [nan, 0.0961361056446748], 'true,false': [0.0961361056446748, nan], 'true,false,true': [nan, 0.0961361056446748], 'false': [9.912705577010326e-19, nan]}, {'': [0.09687842003804384, 3.469446951953614e-18], 'true': [3.469446951953614e-18, 0.2399999999999999], 'true,false': [nan, 0.2399999999999999], 'true,false,false': [0.2399999999999999, nan], 'false': [3.469446951953614e-18, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;true;genre(B, D).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;true;genre(B, D).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;true;genre(B, E).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;true;genre(B, D).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(B, E).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;true;genre(B, D).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;true;genre(B, D).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.8581489350995123;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | else if ( actor(B) )
%   | | then return -0.1418510649004878;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else return 0.8581489350995122;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else return -0.1418510649004878;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7194734122109542;  // std dev = 5.96e-08, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | else if ( actor(B) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else return 0.7194734122109545;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else return -0.12544463852839138;  // std dev = 7.45e-09, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.11231637819360639;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else return 0.5553664367462846;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   else return -0.11231637819360636;  // std dev = 1.18e-08, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.4175135841583098;  // std dev = 5.16e-08, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | else if ( actor(B) )
%   | | then return -0.10159632948783627;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else return 0.41751358415830997;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else return -0.1015963294878363;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.32071184716014967;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | else if ( actor(B) )
%   | | then return -0.09269127618926097;  // std dev = 2.63e-09, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else return 0.32071184716014967;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else return -0.09269127618926096;  // std dev = 7.45e-09, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.2551722425694894;  // std dev = 2.11e-08, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | else if ( actor(B) )
%   | | then return -0.08518475138839687;  // std dev = 2.63e-09, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else return 0.25517224256948945;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else return -0.08518475138839686;  // std dev = 8.33e-09, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.20975771563253562;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | else if ( actor(B) )
%   | | then return -0.07877675473109173;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else return 0.20975771563253554;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else return -0.07877675473109172;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.17709649774527741;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | else if ( actor(B) )
%   | | then return -0.07324622576333704;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else return 0.17709649774527736;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else return -0.07324622576333704;  // std dev = 3.73e-09, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.06842697784420272;  // std dev = 1.86e-09, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else return 0.15274385809367083;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   else return -0.06842697784420272;  // std dev = 3.73e-09, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.13400703000801117;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | else if ( actor(B) )
%   | | then return -0.0641918400820262;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else return 0.13400703000801117;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else return -0.06419184008202619;  // std dev = 6.97e-09, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */


Results
   AUC ROC   = 0.998942
   AUC PR    = 0.918367
   CLL	      = -0.068112
   Precision = 0.918367 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.957447


Total learning time: 0.778 seconds
Total inference time: 0.771 seconds
AUC ROC: 0.998942


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.094637
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 0.366 seconds
Refined model CLL: -0.094637


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.998942
   AUC PR    = 0.918367
   CLL	      = -0.068112
   Precision = 0.918367 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.957447


Total learning time: 2.242 seconds
Total inference time: 0.771 seconds
AUC ROC: 0.998942
Total revision time: 2.242
Best scored revision CLL: -0.094637


Dataset: 4_cora_imdb, Fold: 4, Type: Transfer (trRDN-B), Time: 00:05:09
{'AUC ROC': 0.998942, 'AUC PR': 0.918367, 'CLL': -0.068112, 'Precision': [0.918367, 0.5], 'Recall': 1.0, 'F1': 0.957447, 'Learning time': 2.242, 'Inference time': 0.771, 'parameter_20': {'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.182072, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 0.729, 'Inference time': 0.888}}


Amount of data: 25
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;title(I, H), venue(I, A).;false;false
0;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
0;false;haswordvenue(A, L), haswordtitle(M, L).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordtitle(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordauthor(I, H).;false;true
2;true,false,false;haswordvenue(A, J), haswordtitle(K, J).;false;false
2;false;haswordvenue(A, L), haswordtitle(M, L).;true;false
2;false,true;haswordauthor(N, L).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;title(E, D), venue(E, B).;false;true
3;true,true,false;title(F, D), venue(F, A).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, A).;false;true
4;true,true,false;title(F, D), venue(F, B).;false;false
4;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
4;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
4;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
4;false,true;haswordauthor(M, K).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, B).;false;true
5;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
5;true,false;haswordvenue(B, H), haswordtitle(I, H).;true;true
5;true,false,true;title(J, I), venue(J, B).;false;false
5;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
5;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;title(E, D), venue(E, A).;false;true
6;true,true,false;title(F, D), venue(F, B).;false;false
6;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
6;true,false,true;title(I, H), venue(I, B).;false;false
6;true,false,false;haswordvenue(A, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;title(F, D), venue(F, A).;false;false
7;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
7;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
7;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
7;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;title(E, D), venue(E, A).;false;true
8;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
8;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
8;true,false,true;title(J, I), venue(J, A).;false;false
8;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
8;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, B).;false;true
9;true,true,false;title(F, D), venue(F, A).;false;false
9;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
9;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
9;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
9;false,true;haswordauthor(M, K).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995122;  // std dev = 0.000, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.22178529873587596;  // std dev = 1.595, 11.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=4 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.14185106490048777;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7194734122109543;  // std dev = 7.30e-08, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | else if ( genre(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(F, B) )
%   | | | then return 0.19258789115538322;  // std dev = 1.595, 11.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=4 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.12544463852839138;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A) )
%   | | then return 0.42067250145622537;  // std dev = 1.911, 32.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=25 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.11231637819360635;  // std dev = 3.73e-09, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.4505880916412745;  // std dev = 2.98e-08, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | else if ( genre(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(F, B) )
%   | | | then return 0.08774900657918289;  // std dev = 1.595, 11.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=4 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.10159632948783635;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( genre(B, E) )
%   | | then return 0.343241308284589;  // std dev = 5.58e-08, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.06987912010030964;  // std dev = 1.595, 11.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=4 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.09269127618926093;  // std dev = 2.63e-09, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.2704927030018959;  // std dev = 4.47e-08, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | else if ( movie(E, B) )
%   | | then if ( genre(B, F) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.055175801040064136;  // std dev = 1.595, 11.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=4 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.08518475138839683;  // std dev = 1.18e-08, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( genre(B, E) )
%   | | then return 0.22052372752552873;  // std dev = 0.000, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.043283439404590104;  // std dev = 1.595, 11.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=4 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.07877675473109179;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.1849535068551748;  // std dev = 0.000, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | else if ( genre(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(F, B) )
%   | | | then return 0.03378711062071865;  // std dev = 1.595, 11.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=4 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.07324622576333704;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A) )
%   | | then if ( genre(A, F) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.1131651166245958;  // std dev = 1.635, 32.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=25 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.06842697784420274;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.14414770536283245;  // std dev = 2.58e-08, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | else if ( genre(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(F, A) )
%   | | | then return 5.318160032777044E-4;  // std dev = 1.595, 11.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=4 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.0641918400820262;  // std dev = 1.32e-09, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.168492
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 0.75 seconds
Total inference time: 0.966 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 0.9776
   AUC PR    = 0.980215
   CLL	      = -0.22382
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.84
   F1        = 0.913043


Total scoring time: 0.387 seconds
Parameter learned model CLL: -0.22382


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 21], 'true,false,false,true': [1.595, 7, 4], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 18, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [7.3e-08, 0, 21], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [1.595, 7, 4], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 18, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [1.911, 7, 25], 'true,false,false': [0.0, 0, 0], 'false,true': [3.73e-09, 18, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [2.98e-08, 0, 21], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [1.595, 7, 4], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 18, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [5.58e-08, 0, 21], 'true,false,false,true': [1.595, 7, 4], 'true,false,false,false': [0.0, 0, 0], 'false,true': [2.63e-09, 18, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, B)', 'true,false,true': 'genre(B, F)', 'false': 'movie(G, A)'}, {'true,true': [4.47e-08, 0, 21], 'true,false,true,true': [0.0, 0, 0], 'true,false,true,false': [1.595, 7, 4], 'true,false,false': [0.0, 0, 0], 'false,true': [1.18e-08, 18, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 21], 'true,false,false,true': [1.595, 7, 4], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 18, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 0, 21], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [1.595, 7, 4], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 18, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'true,false,true': 'genre(A, F)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 0, 0], 'true,false,true,true': [0.0, 0, 0], 'true,false,true,false': [1.635, 7, 25], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 18, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [2.58e-08, 0, 21], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [1.595, 7, 4], 'true,false,false,false': [0.0, 0, 0], 'false,true': [1.32e-09, 18, 0], 'false,false': [0.0, 0, 0]}]]
[{'': [0.1708984375000011, -3.0839528461809902e-18], 'true': [nan, 0.1708984375000011], 'true,false': [0.0, 0.2314049586776858], 'true,false,false': [0.2314049586776858, nan], 'false': [-3.0839528461809902e-18, nan]}, {'': [0.14216999495642924, 0.0], 'true': [2.5376526277146434e-16, 0.23140495867768582], 'true,false': [nan, 0.23140495867768582], 'true,false,false': [0.23140495867768582, nan], 'false': [0.0, nan]}, {'': [0.11418105275294305, 1.5419764230904953e-17], 'true': [nan, 0.11418105275294305], 'true,false': [0.11418105275294305, nan], 'false': [1.5419764230904953e-17, nan]}, {'': [0.10924433987831467, -4.625929269271485e-18], 'true': [4.229421046191072e-17, 0.23140495867768596], 'true,false': [nan, 0.23140495867768596], 'true,false,false': [0.23140495867768596, nan], 'false': [-4.625929269271485e-18, nan]}, {'': [0.09640278916418052, 6.1679056923619804e-18], 'true': [nan, 0.09640278916418052], 'true,false': [1.4802973661668753e-16, 0.23140495867768596], 'true,false,false': [0.23140495867768596, nan], 'false': [6.1679056923619804e-18, nan]}, {'': [0.09000392727052478, 7.709882115452476e-18], 'true': [9.516197353929913e-17, 0.23140495867768604], 'true,false': [0.23140495867768604, nan], 'true,false,true': [nan, 0.23140495867768604], 'false': [7.709882115452476e-18, nan]}, {'': [0.08663203819620419, 0.0], 'true': [nan, 0.08663203819620419], 'true,false': [-2.114710523095536e-17, 0.23140495867768596], 'true,false,false': [0.23140495867768596, nan], 'false': [0.0, nan]}, {'': [0.08470038182081435, -7.709882115452476e-19], 'true': [-1.586032892321652e-17, 0.23140495867768596], 'true,false': [nan, 0.23140495867768596], 'true,false,false': [0.23140495867768596, nan], 'false': [-7.709882115452476e-19, nan]}, {'': [0.08350006475606134, -1.5419764230904951e-18], 'true': [nan, 0.08350006475606134], 'true,false': [0.08350006475606134, nan], 'true,false,true': [nan, 0.08350006475606134], 'false': [-1.5419764230904951e-18, nan]}, {'': [0.08419828264045433, 2.3129646346357427e-18], 'true': [3.172065784643304e-17, 0.23140495867768596], 'true,false': [nan, 0.23140495867768596], 'true,false,false': [0.23140495867768596, nan], 'false': [2.3129646346357427e-18, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;true;genre(B, D).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;true;genre(B, D).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;true;genre(B, E).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;true;genre(B, D).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(B, E).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;true;genre(B, D).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;true;genre(B, D).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.8581489350995122;  // std dev = 0.000, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | else if ( actor(B) )
%   | | then return -0.1418510649004878;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else return 0.8581489350995122;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else return -0.14185106490048777;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7194734122109543;  // std dev = 7.30e-08, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | else if ( actor(B) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else return 0.7194734122109545;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else return -0.12544463852839138;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.11231637819360639;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else return 0.5553664367462846;  // std dev = 0.000, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   else return -0.11231637819360635;  // std dev = 1.67e-08, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.41751358415830986;  // std dev = 4.71e-08, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | else if ( actor(B) )
%   | | then return -0.10159632948783627;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else return 0.41751358415830997;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else return -0.10159632948783635;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.3207118471601496;  // std dev = 2.98e-08, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | else if ( actor(B) )
%   | | then return -0.09269127618926097;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else return 0.32071184716014967;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else return -0.09269127618926093;  // std dev = 1.05e-08, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.2551722425694895;  // std dev = 1.49e-08, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | else if ( actor(B) )
%   | | then return -0.08518475138839687;  // std dev = 2.63e-09, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else return 0.25517224256948945;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else return -0.08518475138839683;  // std dev = 1.18e-08, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.2097577156325356;  // std dev = 0.000, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | else if ( actor(B) )
%   | | then return -0.07877675473109173;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else return 0.20975771563253554;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else return -0.07877675473109179;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.17709649774527744;  // std dev = 0.000, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | else if ( actor(B) )
%   | | then return -0.07324622576333704;  // std dev = 2.63e-09, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else return 0.17709649774527736;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else return -0.07324622576333704;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.06842697784420272;  // std dev = 2.63e-09, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else return 0.15274385809367083;  // std dev = 0.000, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   else return -0.06842697784420274;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.13400703000801117;  // std dev = 0.000, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | else if ( actor(B) )
%   | | then return -0.0641918400820262;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else return 0.13400703000801117;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else return -0.0641918400820262;  // std dev = 6.45e-09, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */


Results
   AUC ROC   = 0.998942
   AUC PR    = 0.918367
   CLL	      = -0.068112
   Precision = 0.918367 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.957447


Total learning time: 0.887 seconds
Total inference time: 0.774 seconds
AUC ROC: 0.998942


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.094637
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 0.357 seconds
Refined model CLL: -0.094637


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.998942
   AUC PR    = 0.918367
   CLL	      = -0.068112
   Precision = 0.918367 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.957447


Total learning time: 2.3810000000000002 seconds
Total inference time: 0.774 seconds
AUC ROC: 0.998942
Total revision time: 2.3810000000000002
Best scored revision CLL: -0.094637


Dataset: 4_cora_imdb, Fold: 4, Type: Transfer (trRDN-B), Time: 00:05:13
{'AUC ROC': 0.998942, 'AUC PR': 0.918367, 'CLL': -0.068112, 'Precision': [0.918367, 0.5], 'Recall': 1.0, 'F1': 0.957447, 'Learning time': 2.3810000000000002, 'Inference time': 0.774, 'parameter_25': {'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.168492, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 0.75, 'Inference time': 0.966}}


Starting fold 5

Target train facts examples: 915
Target train pos examples: 337
Target train neg examples: 12165

Target test facts examples: 163
Target test pos	 examples: 45
Target test neg examples: 2071

Amount of data: 5
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;title(I, H), venue(I, A).;false;false
0;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
0;false;haswordvenue(A, L), haswordtitle(M, L).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordtitle(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordauthor(I, H).;false;true
2;true,false,false;haswordvenue(A, J), haswordtitle(K, J).;false;false
2;false;haswordvenue(A, L), haswordtitle(M, L).;true;false
2;false,true;haswordauthor(N, L).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;title(E, D), venue(E, B).;false;true
3;true,true,false;title(F, D), venue(F, A).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, A).;false;true
4;true,true,false;title(F, D), venue(F, B).;false;false
4;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
4;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
4;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
4;false,true;haswordauthor(M, K).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, B).;false;true
5;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
5;true,false;haswordvenue(B, H), haswordtitle(I, H).;true;true
5;true,false,true;title(J, I), venue(J, B).;false;false
5;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
5;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;title(E, D), venue(E, A).;false;true
6;true,true,false;title(F, D), venue(F, B).;false;false
6;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
6;true,false,true;title(I, H), venue(I, B).;false;false
6;true,false,false;haswordvenue(A, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;title(F, D), venue(F, A).;false;false
7;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
7;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
7;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
7;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;title(E, D), venue(E, A).;false;true
8;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
8;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
8;true,false,true;title(J, I), venue(J, A).;false;false
8;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
8;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, B).;false;true
9;true,true,false;title(F, D), venue(F, A).;false;false
9;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
9;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
9;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
9;false,true;haswordauthor(M, K).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14185106490048777;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995122;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.14185106490048777;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7194734122109545;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, B) )
%   | then return -0.12544463852839138;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.11231637819360639;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( movie(E, A) )
%   | | then return 0.5553664367462845;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.11231637819360639;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.4175135841583099;  // std dev = 1.49e-08, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else if ( genre(A, E) )
%   | | then return -0.10159632948783628;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, B) )
%   | then return -0.10159632948783628;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.09269127618926096;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( genre(B, E) )
%   | | then return 0.32071184716014967;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, B) )
%   | then return -0.09269127618926096;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.25517224256948945;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else if ( movie(E, B) )
%   | | then if ( genre(B, F) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.08518475138839687;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.08518475138839687;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.07877675473109173;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( genre(B, E) )
%   | | then return 0.20975771563253556;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, B) )
%   | then return -0.07877675473109173;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.17709649774527736;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else if ( genre(A, E) )
%   | | then return -0.07324622576333704;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.07324622576333704;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.06842697784420272;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( movie(E, A) )
%   | | then if ( genre(A, F) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.15274385809367097;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.06842697784420272;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.13400703000801117;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else if ( genre(A, E) )
%   | | then return -0.0641918400820262;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, B) )
%   | then return -0.0641918400820262;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 0.971565
   AUC PR    = 0.823063
   CLL	      = -0.121589
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.777778
   F1        = 0.875


Total learning time: 0.59 seconds
Total inference time: 0.86 seconds
AUC ROC: 0.971565


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.094637
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 0.328 seconds
Parameter learned model CLL: -0.094637


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'false': 'movie(F, A)'}, {'true,true': [0.0, 1, 0], 'true,false,true': [0.0, 0, 5], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 4, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'false': 'movie(F, B)'}, {'true,true': [0.0, 0, 5], 'true,false,true': [0.0, 1, 0], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 4, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.0, 1, 0], 'true,false,true': [0.0, 0, 5], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 4, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'false': 'movie(F, B)'}, {'true,true': [1.49e-08, 0, 5], 'true,false,true': [0.0, 1, 0], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 4, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'false': 'movie(F, B)'}, {'true,true': [0.0, 1, 0], 'true,false,true': [0.0, 0, 5], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 4, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, B)', 'true,false,true': 'genre(B, F)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 0, 5], 'true,false,true,true': [0.0, 0, 0], 'true,false,true,false': [0.0, 1, 0], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 4, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'false': 'movie(F, B)'}, {'true,true': [0.0, 1, 0], 'true,false,true': [0.0, 0, 5], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 4, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'false': 'movie(F, A)'}, {'true,true': [0.0, 0, 5], 'true,false,true': [0.0, 1, 0], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 4, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'true,false,true': 'genre(A, F)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 1, 0], 'true,false,true,true': [0.0, 0, 0], 'true,false,true,false': [0.0, 0, 5], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 4, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'false': 'movie(F, B)'}, {'true,true': [0.0, 0, 5], 'true,false,true': [0.0, 1, 0], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 4, 0], 'false,false': [0.0, 0, 0]}]]
[{'': [0.1388888888888887, 0.0], 'true': [0.0, 0.0], 'false': [0.0, nan], 'true,false': [0.0, nan]}, {'': [0.09915090450905224, 0.0], 'true': [0.0, 0.0], 'false': [0.0, nan], 'true,false': [0.0, nan]}, {'': [0.061916714078618984, 0.0], 'true': [0.0, -4.4408920985006264e-17], 'false': [0.0, nan], 'true,false': [-4.4408920985006264e-17, nan]}, {'': [0.03742709756190412, 0.0], 'true': [4.4408920985006264e-17, 0.0], 'false': [0.0, nan], 'true,false': [0.0, nan]}, {'': [0.02373640866597888, 0.0], 'true': [0.0, -2.2204460492503132e-17], 'false': [0.0, nan], 'true,false': [-2.2204460492503132e-17, nan]}, {'': [0.01608928935222897, 0.0], 'true': [0.0, 0.0], 'false': [0.0, nan], 'true,false': [0.0, nan], 'true,false,true': [nan, 0.0]}, {'': [0.011562797303891509, 0.0], 'true': [0.0, -5.551115123125783e-18], 'false': [0.0, nan], 'true,false': [-5.551115123125783e-18, nan]}, {'': [0.008704372113015358, 0.0], 'true': [0.0, 0.0], 'false': [0.0, nan], 'true,false': [0.0, nan]}, {'': [0.006793963704091366, 0.0], 'true': [0.0, 0.0], 'false': [0.0, nan], 'true,false': [0.0, nan], 'true,false,true': [nan, 0.0]}, {'': [0.005455943347912154, 0.0], 'true': [0.0, 0.0], 'false': [0.0, nan], 'true,false': [0.0, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(A, D).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;true;genre(B, D).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;true;genre(A, D).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;true;genre(B, D).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;true;genre(A, D).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;true;genre(B, D).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(A, D).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;true;genre(B, D).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;true;genre(A, D).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;true;genre(B, D).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14185106490048777;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else return 0.8581489350995122;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return -0.14185106490048777;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7194734122109545;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return -0.12544463852839138;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   else return -0.12544463852839138;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.11231637819360639;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else return 0.5553664367462845;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return -0.11231637819360639;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.4175135841583099;  // std dev = 1.49e-08, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return -0.10159632948783628;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   else return -0.10159632948783628;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.09269127618926096;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else return 0.32071184716014967;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return -0.09269127618926096;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.25517224256948945;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return -0.08518475138839687;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   else return -0.08518475138839687;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.07877675473109173;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else return 0.20975771563253556;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return -0.07877675473109173;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.17709649774527736;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return -0.07324622576333704;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   else return -0.07324622576333704;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.06842697784420272;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else return 0.15274385809367097;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return -0.06842697784420272;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.13400703000801117;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return -0.0641918400820262;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   else return -0.0641918400820262;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */


Results
   AUC ROC   = 0.97178
   AUC PR    = 0.824078
   CLL	      = -0.205652
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.777778
   F1        = 0.875


Total learning time: 0.52 seconds
Total inference time: 0.77 seconds
AUC ROC: 0.97178


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.094637
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 0.31 seconds
Refined model CLL: -0.094637


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.971565
   AUC PR    = 0.823063
   CLL	      = -0.121589
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.777778
   F1        = 0.875


Total learning time: 1.748 seconds
Total inference time: 0.86 seconds
AUC ROC: 0.971565
Total revision time: 1.748
Best scored revision CLL: -0.094637


Dataset: 4_cora_imdb, Fold: 5, Type: Transfer (trRDN-B), Time: 00:05:17
{'AUC ROC': 0.971565, 'AUC PR': 0.823063, 'CLL': -0.121589, 'Precision': [1.0, 0.5], 'Recall': 0.777778, 'F1': 0.875, 'Learning time': 1.748, 'Inference time': 0.86, 'parameter_5': {'AUC ROC': 0.971565, 'AUC PR': 0.823063, 'CLL': -0.121589, 'Precision': [1.0, 0.5], 'Recall': 0.777778, 'F1': 0.875, 'Learning time': 0.59, 'Inference time': 0.86}}


Amount of data: 10
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;title(I, H), venue(I, A).;false;false
0;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
0;false;haswordvenue(A, L), haswordtitle(M, L).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordtitle(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordauthor(I, H).;false;true
2;true,false,false;haswordvenue(A, J), haswordtitle(K, J).;false;false
2;false;haswordvenue(A, L), haswordtitle(M, L).;true;false
2;false,true;haswordauthor(N, L).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;title(E, D), venue(E, B).;false;true
3;true,true,false;title(F, D), venue(F, A).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, A).;false;true
4;true,true,false;title(F, D), venue(F, B).;false;false
4;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
4;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
4;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
4;false,true;haswordauthor(M, K).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, B).;false;true
5;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
5;true,false;haswordvenue(B, H), haswordtitle(I, H).;true;true
5;true,false,true;title(J, I), venue(J, B).;false;false
5;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
5;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;title(E, D), venue(E, A).;false;true
6;true,true,false;title(F, D), venue(F, B).;false;false
6;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
6;true,false,true;title(I, H), venue(I, B).;false;false
6;true,false,false;haswordvenue(A, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;title(F, D), venue(F, A).;false;false
7;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
7;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
7;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
7;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;title(E, D), venue(E, A).;false;true
8;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
8;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
8;true,false,true;title(J, I), venue(J, A).;false;false
8;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
8;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, B).;false;true
9;true,true,false;title(F, D), venue(F, A).;false;false
9;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
9;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
9;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
9;false,true;haswordauthor(M, K).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14185106490048777;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995123;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.10814893509951219;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.1418510649004878;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7194734122109543;  // std dev = 2.98e-08, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.09446743783575562;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.12544463852839138;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.11231637819360639;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( movie(E, A) )
%   | | then return 0.40960826950400075;  // std dev = 1.171, 13.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=10 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.11231637819360639;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.4533286061964762;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else if ( genre(A, E) )
%   | | then return -0.10159632948783628;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.01634295262101057;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.10159632948783627;  // std dev = 1.32e-09, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.09269127618926096;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( genre(B, E) )
%   | | then return 0.34512013721027124;  // std dev = 1.49e-08, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.013403832053065383;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.09269127618926097;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.2717663291205828;  // std dev = 1.83e-08, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else if ( movie(E, B) )
%   | | then if ( genre(B, F) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.008257500894956304;  // std dev = 0.870, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.08518475138839687;  // std dev = 2.63e-09, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.08454345859087543;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( genre(B, E) )
%   | | then return 0.22141391594968068;  // std dev = 1.83e-08, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.012473050164485522;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.07877675473109173;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.18559973097152926;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else if ( genre(A, E) )
%   | | then return -0.07822580922814794;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.01020669195794955;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.07324622576333704;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.072768070832939;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( movie(E, A) )
%   | | then if ( genre(A, F) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.11275717147792579;  // std dev = 0.902, 13.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=10 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.06842697784420272;  // std dev = 1.86e-09, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.14464717939986216;  // std dev = 7.45e-09, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else if ( genre(A, E) )
%   | | then return -0.0680082762737162;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.012919509876300014;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.0641918400820262;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 0.971565
   AUC PR    = 0.823063
   CLL	      = -0.129569
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.777778
   F1        = 0.875


Total learning time: 0.73 seconds
Total inference time: 0.865 seconds
AUC ROC: 0.971565


Results scoring model
   AUC ROC   = 0.985
   AUC PR    = 0.988462
   CLL	      = -0.195981
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.9
   F1        = 0.947368


Total scoring time: 0.348 seconds
Parameter learned model CLL: -0.195981


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 1, 0], 'true,false,true': [0.0, 0, 9], 'true,false,false,true': [0.866, 3, 1], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 6, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [2.98e-08, 0, 9], 'true,false,true': [0.0, 1, 0], 'true,false,false,true': [0.866, 3, 1], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 6, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.0, 1, 0], 'true,false,true': [1.171, 3, 10], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 6, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 9], 'true,false,true': [0.0, 1, 0], 'true,false,false,true': [0.866, 3, 1], 'true,false,false,false': [0.0, 0, 0], 'false,true': [1.32e-09, 6, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 1, 0], 'true,false,true': [1.49e-08, 0, 9], 'true,false,false,true': [0.866, 3, 1], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 6, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, B)', 'true,false,true': 'genre(B, F)', 'false': 'movie(G, A)'}, {'true,true': [1.83e-08, 0, 9], 'true,false,true,true': [0.0, 0, 0], 'true,false,true,false': [0.87, 4, 1], 'true,false,false': [0.0, 0, 0], 'false,true': [2.63e-09, 6, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 1, 0], 'true,false,true': [1.83e-08, 0, 9], 'true,false,false,true': [0.866, 3, 1], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 6, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 0, 9], 'true,false,true': [0.0, 1, 0], 'true,false,false,true': [0.866, 3, 1], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 6, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'true,false,true': 'genre(A, F)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 1, 0], 'true,false,true,true': [0.0, 0, 0], 'true,false,true,false': [0.902, 3, 10], 'true,false,false': [0.0, 0, 0], 'false,true': [1.86e-09, 6, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [7.45e-09, 0, 9], 'true,false,true': [0.0, 1, 0], 'true,false,false,true': [0.866, 3, 1], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 6, 0], 'false,false': [0.0, 0, 0]}]]
[{'': [0.20408163265306115, -6.938893903907228e-18], 'true': [0.0, 0.1775147928994082], 'true,false': [-2.9605947323337506e-16, 0.18750000000000003], 'true,false,false': [0.18750000000000003, nan], 'false': [-6.938893903907228e-18, nan]}, {'': [0.15908771809019703, -2.3129646346357427e-18], 'true': [9.868649107779169e-17, 0.15773781141292648], 'true,false': [0.0, 0.18749999999999997], 'true,false,false': [0.18749999999999997, nan], 'false': [-2.3129646346357427e-18, nan]}, {'': [0.11602693077049354, 0.0], 'true': [0.0, 0.10549455515742423], 'true,false': [0.10549455515742423, nan], 'false': [0.0, nan]}, {'': [0.1030691146263445, 0.0], 'true': [-2.4671622769447922e-17, 0.15222554788229603], 'true,false': [0.0, 0.18749999999999997], 'true,false,false': [0.18749999999999997, nan], 'false': [0.0, nan]}, {'': [0.08281336554671026, 1.1564823173178713e-18], 'true': [0.0, 0.08113186660270619], 'true,false': [2.4671622769447922e-17, 0.18750000000000003], 'true,false,false': [0.18750000000000003, nan], 'false': [1.1564823173178713e-18, nan]}, {'': [0.07210286772777619, 1.1564823173178713e-18], 'true': [3.700743415417188e-17, 0.15147945046712014], 'true,false': [0.15147945046712014, nan], 'true,false,true': [nan, 0.15147945046712014], 'false': [1.1564823173178713e-18, nan]}, {'': [0.06608043021136983, -1.1564823173178713e-18], 'true': [0.0, 0.06699187144510307], 'true,false': [3.700743415417188e-17, 0.18749999999999997], 'true,false,false': [0.18749999999999997, nan], 'false': [-1.1564823173178713e-18, nan]}, {'': [0.06257742001458197, 0.0], 'true': [-6.1679056923619804e-18, 0.15125124916256466], 'true,false': [0.0, 0.1875], 'true,false,false': [0.1875, nan], 'false': [0.0, nan]}, {'': [0.060353891492060954, 5.782411586589357e-19], 'true': [0.0, 0.06253795456316144], 'true,false': [0.06253795456316144, nan], 'true,false,true': [nan, 0.06253795456316144], 'false': [5.782411586589357e-19, nan]}, {'': [0.06027000811572764, -5.782411586589357e-19], 'true': [6.1679056923619804e-18, 0.1504855635493103], 'true,false': [0.0, 0.18750000000000006], 'true,false,false': [0.18750000000000006, nan], 'false': [-5.782411586589357e-19, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(A, D).;true;true
0;true,false;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;true;genre(B, D).;true;true
1;true,false;genre(A, E).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;true;genre(A, D).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;true;genre(B, D).;true;true
3;true,false;genre(A, E).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;true;genre(A, D).;true;true
4;true,false;genre(B, E).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;true;genre(B, D).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(A, D).;true;true
6;true,false;genre(B, E).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;true;genre(B, D).;true;true
7;true,false;genre(A, E).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;true;genre(A, D).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;true;genre(B, D).;true;true
9;true,false;genre(A, E).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14185106490048777;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995123;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else return 0.10814893509951219;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   else return -0.1418510649004878;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7194734122109543;  // std dev = 2.98e-08, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else return 0.09446743783575562;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   else return -0.12544463852839138;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.11231637819360639;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( actor(B) )
%   | | then return -0.16834760679113825;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else if ( female(A) )
%   | | | then return 0.6106236280388;  // std dev = 0.247, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.5553664367462845;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return -0.11231637819360639;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.4115695990402481;  // std dev = 0.020, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else if ( genre(A, E) )
%   | | then return -0.10159632948783628;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else return 0.07255637518060365;  // std dev = 0.757, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   else return -0.10159632948783627;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.09269127618926096;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( genre(B, E) )
%   | | then return 0.31670007373981296;  // std dev = 0.018, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else return 0.061945817256463954;  // std dev = 0.753, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   else return -0.09269127618926097;  // std dev = 2.63e-09, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.2524419827329267;  // std dev = 0.016, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else return 0.02497392193610279;  // std dev = 0.759, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   else return -0.08518475138839687;  // std dev = 2.63e-09, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.08715119621286217;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( genre(B, E) )
%   | | then return 0.20783274040482372;  // std dev = 0.014, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else return 0.04861318608608104;  // std dev = 0.747, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   else return -0.07877675473109173;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.17568682284180345;  // std dev = 0.012, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else if ( genre(A, E) )
%   | | then return -0.08046269438904285;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else return 0.040859431092640876;  // std dev = 0.744, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   else return -0.07324622576333704;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.0747067920857407;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( director(B) )
%   | | then if ( female(A) )
%   | | | then return 0.2534914301114467;  // std dev = 0.473, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.15482869756621065;  // std dev = 3.73e-09, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return -0.17993580102843765;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else return -0.06842697784420272;  // std dev = 1.86e-09, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.12805259870563213;  // std dev = 0.025, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else if ( genre(A, E) )
%   | | then return -0.069703913243251;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else return 0.03852108553634614;  // std dev = 0.670, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   else return -0.0641918400820262;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */


Results
   AUC ROC   = 0.999979
   AUC PR    = 0.998999
   CLL	      = -0.096049
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.777778
   F1        = 0.875


Total learning time: 0.7 seconds
Total inference time: 0.843 seconds
AUC ROC: 0.999979


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.149972
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.9
   F1        = 0.947368


Total scoring time: 0.334 seconds
Refined model CLL: -0.149972


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.999979
   AUC PR    = 0.998999
   CLL	      = -0.096049
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.777778
   F1        = 0.875


Total learning time: 2.1119999999999997 seconds
Total inference time: 0.843 seconds
AUC ROC: 0.999979
Total revision time: 2.1119999999999997
Best scored revision CLL: -0.149972


Dataset: 4_cora_imdb, Fold: 5, Type: Transfer (trRDN-B), Time: 00:05:22
{'AUC ROC': 0.999979, 'AUC PR': 0.998999, 'CLL': -0.096049, 'Precision': [1.0, 0.5], 'Recall': 0.777778, 'F1': 0.875, 'Learning time': 2.1119999999999997, 'Inference time': 0.843, 'parameter_10': {'AUC ROC': 0.971565, 'AUC PR': 0.823063, 'CLL': -0.129569, 'Precision': [1.0, 0.5], 'Recall': 0.777778, 'F1': 0.875, 'Learning time': 0.73, 'Inference time': 0.865}}


Amount of data: 15
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;title(I, H), venue(I, A).;false;false
0;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
0;false;haswordvenue(A, L), haswordtitle(M, L).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordtitle(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordauthor(I, H).;false;true
2;true,false,false;haswordvenue(A, J), haswordtitle(K, J).;false;false
2;false;haswordvenue(A, L), haswordtitle(M, L).;true;false
2;false,true;haswordauthor(N, L).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;title(E, D), venue(E, B).;false;true
3;true,true,false;title(F, D), venue(F, A).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, A).;false;true
4;true,true,false;title(F, D), venue(F, B).;false;false
4;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
4;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
4;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
4;false,true;haswordauthor(M, K).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, B).;false;true
5;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
5;true,false;haswordvenue(B, H), haswordtitle(I, H).;true;true
5;true,false,true;title(J, I), venue(J, B).;false;false
5;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
5;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;title(E, D), venue(E, A).;false;true
6;true,true,false;title(F, D), venue(F, B).;false;false
6;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
6;true,false,true;title(I, H), venue(I, B).;false;false
6;true,false,false;haswordvenue(A, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;title(F, D), venue(F, A).;false;false
7;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
7;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
7;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
7;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;title(E, D), venue(E, A).;false;true
8;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
8;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
8;true,false,true;title(J, I), venue(J, A).;false;false
8;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
8;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, B).;false;true
9;true,true,false;title(F, D), venue(F, A).;false;false
9;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
9;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
9;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
9;false,true;haswordauthor(M, K).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14185106490048777;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995123;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.10814893509951219;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.1418510649004878;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7194734122109542;  // std dev = 5.16e-08, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.09446743783575562;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.12544463852839138;  // std dev = 5.27e-09, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.11231637819360639;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( movie(E, A) )
%   | | then return 0.4500966492935239;  // std dev = 1.203, 18.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=15 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.11231637819360638;  // std dev = 1.32e-09, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.4433149939337246;  // std dev = 2.11e-08, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | else if ( genre(A, E) )
%   | | then return -0.10159632948783628;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.009015023525078554;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.10159632948783628;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.09269127618926096;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( genre(B, E) )
%   | | then return 0.3382653516950622;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.007362226464175031;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.09269127618926097;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.2671169929995241;  // std dev = 2.36e-08, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | else if ( movie(E, B) )
%   | | then if ( genre(B, F) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.012231552631842401;  // std dev = 0.870, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.08518475138839687;  // std dev = 5.27e-09, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.08423639081735391;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( genre(B, E) )
%   | | then return 0.21816086004058377;  // std dev = 1.05e-08, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.008255914931690284;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.07877675473109172;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.183235709162413;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | else if ( genre(A, E) )
%   | | then return -0.07796180434778438;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.006739348756344195;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.07324622576333704;  // std dev = 1.32e-09, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.07253879559370965;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( movie(E, A) )
%   | | then if ( genre(A, F) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.12363224855285981;  // std dev = 0.907, 18.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=15 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.06842697784420272;  // std dev = 2.63e-09, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.1416752384154989;  // std dev = 7.45e-09, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | else if ( genre(A, E) )
%   | | then return -0.06780739250795398;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.018054886795188366;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.06419184008202619;  // std dev = 1.61e-09, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 0.971565
   AUC PR    = 0.823063
   CLL	      = -0.130824
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.777778
   F1        = 0.875


Total learning time: 0.649 seconds
Total inference time: 0.917 seconds
AUC ROC: 0.971565


Results scoring model
   AUC ROC   = 0.993333
   AUC PR    = 0.994444
   CLL	      = -0.162581
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.933333
   F1        = 0.965517


Total scoring time: 0.363 seconds
Parameter learned model CLL: -0.162581


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 1, 0], 'true,false,true': [0.0, 0, 14], 'true,false,false,true': [0.866, 3, 1], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 11, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [5.16e-08, 0, 14], 'true,false,true': [0.0, 1, 0], 'true,false,false,true': [0.866, 3, 1], 'true,false,false,false': [0.0, 0, 0], 'false,true': [5.27e-09, 11, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.0, 1, 0], 'true,false,true': [1.203, 3, 15], 'true,false,false': [0.0, 0, 0], 'false,true': [1.32e-09, 11, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [2.11e-08, 0, 14], 'true,false,true': [0.0, 1, 0], 'true,false,false,true': [0.866, 3, 1], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 11, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 1, 0], 'true,false,true': [0.0, 0, 14], 'true,false,false,true': [0.866, 3, 1], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 11, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, B)', 'true,false,true': 'genre(B, F)', 'false': 'movie(G, A)'}, {'true,true': [2.36e-08, 0, 14], 'true,false,true,true': [0.0, 0, 0], 'true,false,true,false': [0.87, 4, 1], 'true,false,false': [0.0, 0, 0], 'false,true': [5.27e-09, 11, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 1, 0], 'true,false,true': [1.05e-08, 0, 14], 'true,false,false,true': [0.866, 3, 1], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 11, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 0, 14], 'true,false,true': [0.0, 1, 0], 'true,false,false,true': [0.866, 3, 1], 'true,false,false,false': [0.0, 0, 0], 'false,true': [1.32e-09, 11, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'true,false,true': 'genre(A, F)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 1, 0], 'true,false,true,true': [0.0, 0, 0], 'true,false,true,false': [0.907, 3, 15], 'true,false,false': [0.0, 0, 0], 'false,true': [2.63e-09, 11, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [7.45e-09, 0, 14], 'true,false,true': [0.0, 1, 0], 'true,false,false,true': [0.866, 3, 1], 'true,false,false,false': [0.0, 0, 0], 'false,true': [1.61e-09, 11, 0], 'false,false': [0.0, 0, 0]}]]
[{'': [0.16620498614958412, -1.0092936587501423e-17], 'true': [0.0, 0.1388888888888886], 'true,false': [-2.5376526277146434e-16, 0.18750000000000003], 'true,false,false': [0.18750000000000003, nan], 'false': [-1.0092936587501423e-17, nan]}, {'': [0.12829161957921986, 2.523234146875356e-18], 'true': [1.9032394707859825e-16, 0.15773781141292648], 'true,false': [0.0, 0.18749999999999997], 'true,false,false': [0.18749999999999997, nan], 'false': [2.523234146875356e-18, nan]}, {'': [0.09198997240647777, 5.046468293750712e-18], 'true': [0.0, 0.08045271519288942], 'true,false': [0.08045271519288942, nan], 'false': [5.046468293750712e-18, nan]}, {'': [0.08038354125150458, 0.0], 'true': [3.172065784643304e-17, 0.15195757942645566], 'true,false': [0.0, 0.18750000000000003], 'true,false,false': [0.18750000000000003, nan], 'false': [0.0, nan]}, {'': [0.0637728493332983, 0.0], 'true': [0.0, 0.06059205303735747], 'true,false': [-3.172065784643304e-17, 0.18750000000000003], 'true,false,false': [0.18750000000000003, nan], 'false': [0.0, nan]}, {'': [0.05495538563699309, 2.523234146875356e-18], 'true': [3.9650822308041306e-17, 0.15133054230220336], 'true,false': [0.15133054230220336, nan], 'true,false,true': [nan, 0.15133054230220336], 'false': [2.523234146875356e-18, nan]}, {'': [0.04994958859835631, 0.0], 'true': [0.0, 0.04928199016958454], 'true,false': [7.93016446160826e-18, 0.18750000000000006], 'true,false,false': [0.18750000000000006, nan], 'false': [0.0, nan]}, {'': [0.04703127193765203, 6.30808536718839e-19], 'true': [-2.3790493384824782e-17, 0.15114788565394702], 'true,false': [0.0, 0.18749999999999994], 'true,false,false': [0.18749999999999994, nan], 'false': [6.30808536718839e-19, nan]}, {'': [0.045170081086777635, 6.30808536718839e-19], 'true': [0.0, 0.04565410484859277], 'true,false': [0.04565410484859277, nan], 'true,false,true': [nan, 0.04565410484859277], 'false': [6.30808536718839e-19, nan]}, {'': [0.04516075010224201, 2.523234146875356e-18], 'true': [3.96508223080413e-18, 0.15039604989195177], 'true,false': [0.0, 0.18749999999999997], 'true,false,false': [0.18749999999999997, nan], 'false': [2.523234146875356e-18, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(A, D).;true;true
0;true,false;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;true;genre(B, D).;true;true
1;true,false;genre(A, E).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;true;genre(A, D).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;true;genre(B, D).;true;true
3;true,false;genre(A, E).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;true;genre(A, D).;true;true
4;true,false;genre(B, E).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;true;genre(B, D).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(A, D).;true;true
6;true,false;genre(B, E).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;true;genre(B, D).;true;true
7;true,false;genre(A, E).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;true;genre(A, D).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;true;genre(B, D).;true;true
9;true,false;genre(A, E).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14185106490048777;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995123;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | else return 0.10814893509951219;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   else return -0.1418510649004878;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7194734122109542;  // std dev = 5.16e-08, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else return 0.09446743783575562;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   else return -0.12544463852839138;  // std dev = 5.27e-09, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.11231637819360639;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( actor(B) )
%   | | then return -0.16834760679113825;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else if ( female(A) )
%   | | | then return 0.6014140961567142;  // std dev = 0.252, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.5553664367462846;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   else return -0.11231637819360638;  // std dev = 7.45e-09, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.41352991702678976;  // std dev = 0.020, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | else if ( genre(A, E) )
%   | | then return -0.10159632948783628;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else return 0.07301085418748224;  // std dev = 0.759, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   else return -0.10159632948783628;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.09269127618926096;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( genre(B, E) )
%   | | then return 0.31802231567370465;  // std dev = 0.018, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | else return 0.06234732919227759;  // std dev = 0.754, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   else return -0.09269127618926097;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.25334209590843776;  // std dev = 0.016, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | else return 0.025253164955523977;  // std dev = 0.761, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   else return -0.08518475138839687;  // std dev = 5.27e-09, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.08717341419413534;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( genre(B, E) )
%   | | then return 0.20846766379925472;  // std dev = 0.014, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | else return 0.04892123186631025;  // std dev = 0.749, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   else return -0.07877675473109172;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.17615199050086755;  // std dev = 0.012, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | else if ( genre(A, E) )
%   | | then return -0.08048171332375849;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else return 0.04112184655280371;  // std dev = 0.746, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   else return -0.07324622576333704;  // std dev = 2.63e-09, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.07472324608665795;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( director(B) )
%   | | then if ( female(A) )
%   | | | then return 0.2365512754476303;  // std dev = 0.484, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.15413867194039865;  // std dev = 5.27e-09, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else return -0.1801876289706843;  // std dev = 3.73e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else return -0.06842697784420272;  // std dev = 2.63e-09, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.12998108696435642;  // std dev = 0.026, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | else if ( genre(A, E) )
%   | | then return -0.0697182812205521;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else return 0.03981558348067844;  // std dev = 0.675, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   else return -0.06419184008202619;  // std dev = 5.27e-09, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */


Results
   AUC ROC   = 0.999979
   AUC PR    = 0.998999
   CLL	      = -0.096208
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.777778
   F1        = 0.875


Total learning time: 0.723 seconds
Total inference time: 0.863 seconds
AUC ROC: 0.999979


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.131961
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.933333
   F1        = 0.965517


Total scoring time: 0.362 seconds
Refined model CLL: -0.131961


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.999979
   AUC PR    = 0.998999
   CLL	      = -0.096208
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.777778
   F1        = 0.875


Total learning time: 2.097 seconds
Total inference time: 0.863 seconds
AUC ROC: 0.999979
Total revision time: 2.097
Best scored revision CLL: -0.131961


Dataset: 4_cora_imdb, Fold: 5, Type: Transfer (trRDN-B), Time: 00:05:26
{'AUC ROC': 0.999979, 'AUC PR': 0.998999, 'CLL': -0.096208, 'Precision': [1.0, 0.5], 'Recall': 0.777778, 'F1': 0.875, 'Learning time': 2.097, 'Inference time': 0.863, 'parameter_15': {'AUC ROC': 0.971565, 'AUC PR': 0.823063, 'CLL': -0.130824, 'Precision': [1.0, 0.5], 'Recall': 0.777778, 'F1': 0.875, 'Learning time': 0.649, 'Inference time': 0.917}}


Amount of data: 20
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;title(I, H), venue(I, A).;false;false
0;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
0;false;haswordvenue(A, L), haswordtitle(M, L).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordtitle(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordauthor(I, H).;false;true
2;true,false,false;haswordvenue(A, J), haswordtitle(K, J).;false;false
2;false;haswordvenue(A, L), haswordtitle(M, L).;true;false
2;false,true;haswordauthor(N, L).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;title(E, D), venue(E, B).;false;true
3;true,true,false;title(F, D), venue(F, A).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, A).;false;true
4;true,true,false;title(F, D), venue(F, B).;false;false
4;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
4;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
4;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
4;false,true;haswordauthor(M, K).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, B).;false;true
5;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
5;true,false;haswordvenue(B, H), haswordtitle(I, H).;true;true
5;true,false,true;title(J, I), venue(J, B).;false;false
5;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
5;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;title(E, D), venue(E, A).;false;true
6;true,true,false;title(F, D), venue(F, B).;false;false
6;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
6;true,false,true;title(I, H), venue(I, B).;false;false
6;true,false,false;haswordvenue(A, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;title(F, D), venue(F, A).;false;false
7;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
7;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
7;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
7;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;title(E, D), venue(E, A).;false;true
8;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
8;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
8;true,false,true;title(J, I), venue(J, A).;false;false
8;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
8;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, B).;false;true
9;true,true,false;title(F, D), venue(F, A).;false;false
9;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
9;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
9;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
9;false,true;haswordauthor(M, K).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14185106490048777;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995123;  // std dev = 0.000, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.0581489350995122;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.1418510649004878;  // std dev = 0.000, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7194734122109542;  // std dev = 7.30e-08, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.050922032513554226;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.12544463852839138;  // std dev = 7.45e-09, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.11231637819360639;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( movie(E, A) )
%   | | then return 0.44890390775844785;  // std dev = 1.354, 24.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=20 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.11231637819360635;  // std dev = 3.48e-09, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.4436093666802324;  // std dev = 5.16e-08, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | else if ( genre(A, E) )
%   | | then return -0.10159632948783628;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( movie(F, B) )
%   | | | then return -0.02408368020262681;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.10159632948783631;  // std dev = 0.000, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.09269127618926096;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( genre(B, E) )
%   | | then return 0.3384664734837124;  // std dev = 2.98e-08, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.019924088159887297;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.09269127618926094;  // std dev = 1.86e-09, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.26725351207263165;  // std dev = 2.58e-08, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | else if ( movie(E, B) )
%   | | then if ( genre(B, F) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.027968326671020626;  // std dev = 0.897, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.08518475138839685;  // std dev = 9.13e-09, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.08303036195900669;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( genre(B, E) )
%   | | then return 0.21825651666679763;  // std dev = 3.16e-08, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | else if ( movie(F, B) )
%   | | | then return -0.011818065545485212;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.07877675473109173;  // std dev = 0.000, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.1833053221658632;  // std dev = 2.11e-08, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | else if ( genre(A, E) )
%   | | then return -0.07692366441803686;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( movie(F, B) )
%   | | | then return -0.009851745330845397;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.07324622576333704;  // std dev = 9.31e-10, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.07163627373256781;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( movie(E, A) )
%   | | then if ( genre(A, F) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.1229251191013949;  // std dev = 0.953, 24.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=20 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.06842697784420272;  // std dev = 3.73e-09, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.1418093697758291;  // std dev = 7.45e-09, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | else if ( genre(A, E) )
%   | | then return -0.06701589625800827;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.029215554211602324;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.06419184008202619;  // std dev = 1.86e-09, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 0.971565
   AUC PR    = 0.823063
   CLL	      = -0.118295
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.777778
   F1        = 0.875


Total learning time: 0.693 seconds
Total inference time: 0.89 seconds
AUC ROC: 0.971565


Results scoring model
   AUC ROC   = 0.995
   AUC PR    = 0.995833
   CLL	      = -0.151421
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.95
   F1        = 0.974359


Total scoring time: 0.38 seconds
Parameter learned model CLL: -0.151421


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 1, 0], 'true,false,true': [0.0, 0, 19], 'true,false,false,true': [0.894, 4, 1], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 15, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [7.3e-08, 0, 19], 'true,false,true': [0.0, 1, 0], 'true,false,false,true': [0.894, 4, 1], 'true,false,false,false': [0.0, 0, 0], 'false,true': [7.45e-09, 15, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.0, 1, 0], 'true,false,true': [1.354, 4, 20], 'true,false,false': [0.0, 0, 0], 'false,true': [3.48e-09, 15, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [5.16e-08, 0, 19], 'true,false,true': [0.0, 1, 0], 'true,false,false,true': [0.894, 4, 1], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 15, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 1, 0], 'true,false,true': [2.98e-08, 0, 19], 'true,false,false,true': [0.894, 4, 1], 'true,false,false,false': [0.0, 0, 0], 'false,true': [1.86e-09, 15, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, B)', 'true,false,true': 'genre(B, F)', 'false': 'movie(G, A)'}, {'true,true': [2.58e-08, 0, 19], 'true,false,true,true': [0.0, 0, 0], 'true,false,true,false': [0.897, 5, 1], 'true,false,false': [0.0, 0, 0], 'false,true': [9.13e-09, 15, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 1, 0], 'true,false,true': [3.16e-08, 0, 19], 'true,false,false,true': [0.894, 4, 1], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 15, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, A)'}, {'true,true': [2.11e-08, 0, 19], 'true,false,true': [0.0, 1, 0], 'true,false,false,true': [0.894, 4, 1], 'true,false,false,false': [0.0, 0, 0], 'false,true': [9.31e-10, 15, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'true,false,true': 'genre(A, F)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 1, 0], 'true,false,true,true': [0.0, 0, 0], 'true,false,true,false': [0.953, 4, 20], 'true,false,false': [0.0, 0, 0], 'false,true': [3.73e-09, 15, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [7.45e-09, 0, 19], 'true,false,true': [0.0, 1, 0], 'true,false,false,true': [0.894, 4, 1], 'true,false,false,false': [0.0, 0, 0], 'false,true': [1.86e-09, 15, 0], 'false,false': [0.0, 0, 0]}]]
[{'': [0.16000000000000014, -1.4802973661668754e-17], 'true': [0.0, 0.13888888888888906], 'true,false': [-2.8047739569477637e-16, 0.16000000000000003], 'true,false,false': [0.16000000000000003, nan], 'false': [-1.4802973661668754e-17, nan]}, {'': [0.12188905558906196, 3.7007434154171884e-18], 'true': [2.8047739569477637e-16, 0.13765350036866916], 'true,false': [0.0, 0.16], 'true,false,false': [0.16, nan], 'false': [3.7007434154171884e-18, nan]}, {'': [0.0854421964858983, 1.295260195396016e-17], 'true': [0.0, 0.0764035596315799], 'true,false': [0.0764035596315799, nan], 'false': [1.295260195396016e-17, nan]}, {'': [0.07433243440846173, -5.551115123125783e-18], 'true': [1.4023869784738819e-16, 0.13416780705544612], 'true,false': [0.0, 0.16000000000000003], 'true,false,false': [0.16000000000000003, nan], 'false': [-5.551115123125783e-18, nan]}, {'': [0.05721708625499544, 3.7007434154171884e-18], 'true': [0.0, 0.05451763974678029], 'true,false': [4.674623261579606e-17, 0.16000000000000003], 'true,false,false': [0.16000000000000003, nan], 'false': [3.7007434154171884e-18, nan]}, {'': [0.048054380898940915, 5.551115123125783e-18], 'true': [3.5059674461847047e-17, 0.13398807718482114], 'true,false': [0.13398807718482114, nan], 'true,false,true': [nan, 0.13398807718482114], 'false': [5.551115123125783e-18, nan]}, {'': [0.04284610817332295, -1.8503717077085942e-18], 'true': [0.0, 0.04206381904707445], 'true,false': [5.258951169277057e-17, 0.15999999999999995], 'true,false,false': [0.15999999999999995, nan], 'false': [-1.8503717077085942e-18, nan]}, {'': [0.03976571776661528, 9.251858538542971e-19], 'true': [2.337311630789803e-17, 0.13395814476806098], 'true,false': [0.0, 0.16000000000000003], 'true,false,false': [0.16000000000000003, nan], 'false': [9.251858538542971e-19, nan]}, {'': [0.03779880935275978, 9.251858538542971e-19], 'true': [0.0, 0.03785959431919845], 'true,false': [0.03785959431919845, nan], 'true,false,true': [nan, 0.03785959431919845], 'false': [9.251858538542971e-19, nan]}, {'': [0.037783041618573175, 4.163336342344337e-18], 'true': [2.921639538487254e-18, 0.13353178692483683], 'true,false': [0.0, 0.15999999999999998], 'true,false,false': [0.15999999999999998, nan], 'false': [4.163336342344337e-18, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(A, D).;true;true
0;true,false;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;true;genre(B, D).;true;true
1;true,false;genre(A, E).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;true;genre(A, D).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;true;genre(B, D).;true;true
3;true,false;genre(A, E).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;true;genre(A, D).;true;true
4;true,false;genre(B, E).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;true;genre(B, D).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(A, D).;true;true
6;true,false;genre(B, E).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;true;genre(B, D).;true;true
7;true,false;genre(A, E).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;true;genre(A, D).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;true;genre(B, D).;true;true
9;true,false;genre(A, E).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14185106490048777;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995123;  // std dev = 0.000, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | else return 0.0581489350995122;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   else return -0.1418510649004878;  // std dev = 0.000, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7194734122109542;  // std dev = 7.30e-08, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else return 0.050922032513554226;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   else return -0.12544463852839138;  // std dev = 7.45e-09, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.11231637819360639;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( actor(B) )
%   | | then return -0.15565370239533147;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else if ( female(A) )
%   | | | then return 0.5914889193535826;  // std dev = 0.270, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.5553664367462846;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   else return -0.11231637819360635;  // std dev = 1.39e-08, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.4142870277954962;  // std dev = 0.018, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | else if ( genre(A, E) )
%   | | then return -0.10159632948783628;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else return 0.0410113389351072;  // std dev = 0.793, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   else return -0.10159632948783631;  // std dev = 0.000, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.09269127618926096;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( genre(B, E) )
%   | | then return 0.31853145768945257;  // std dev = 0.016, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | else return 0.03553866159075136;  // std dev = 0.790, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   else return -0.09269127618926094;  // std dev = 7.45e-09, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.2536875977169821;  // std dev = 0.014, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | else return 0.011366231980616778;  // std dev = 0.795, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   else return -0.08518475138839685;  // std dev = 9.13e-09, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.08607468900598074;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( genre(B, E) )
%   | | then return 0.20871067409794017;  // std dev = 0.013, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | else return 0.029097710121220956;  // std dev = 0.787, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   else return -0.07877675473109173;  // std dev = 0.000, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.17632958018704567;  // std dev = 0.011, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | else if ( genre(A, E) )
%   | | then return -0.07954039249641365;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else return 0.02500367583402649;  // std dev = 0.786, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   else return -0.07324622576333704;  // std dev = 3.73e-09, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.0739082716233388;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( actor(B) )
%   | | then return -0.15386997470510558;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else if ( female(A) )
%   | | | then return 0.2209014287304168;  // std dev = 0.536, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.1538738798857974;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   else return -0.06842697784420272;  // std dev = 3.73e-09, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.1306185372283405;  // std dev = 0.024, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | else if ( genre(A, E) )
%   | | then return -0.06900616490147833;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else return 0.0273384809335538;  // std dev = 0.725, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   else return -0.06419184008202619;  // std dev = 7.90e-09, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */


Results
   AUC ROC   = 0.999764
   AUC PR    = 0.988451
   CLL	      = -0.090398
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.777778
   F1        = 0.875


Total learning time: 0.737 seconds
Total inference time: 0.825 seconds
AUC ROC: 0.999764


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.126486
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.95
   F1        = 0.974359


Total scoring time: 0.354 seconds
Refined model CLL: -0.126486


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.999764
   AUC PR    = 0.988451
   CLL	      = -0.090398
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.777778
   F1        = 0.875


Total learning time: 2.164 seconds
Total inference time: 0.825 seconds
AUC ROC: 0.999764
Total revision time: 2.164
Best scored revision CLL: -0.126486


Dataset: 4_cora_imdb, Fold: 5, Type: Transfer (trRDN-B), Time: 00:05:30
{'AUC ROC': 0.999764, 'AUC PR': 0.988451, 'CLL': -0.090398, 'Precision': [1.0, 0.5], 'Recall': 0.777778, 'F1': 0.875, 'Learning time': 2.164, 'Inference time': 0.825, 'parameter_20': {'AUC ROC': 0.971565, 'AUC PR': 0.823063, 'CLL': -0.118295, 'Precision': [1.0, 0.5], 'Recall': 0.777778, 'F1': 0.875, 'Learning time': 0.693, 'Inference time': 0.89}}


Amount of data: 25
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;title(I, H), venue(I, A).;false;false
0;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
0;false;haswordvenue(A, L), haswordtitle(M, L).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordtitle(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordauthor(I, H).;false;true
2;true,false,false;haswordvenue(A, J), haswordtitle(K, J).;false;false
2;false;haswordvenue(A, L), haswordtitle(M, L).;true;false
2;false,true;haswordauthor(N, L).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;title(E, D), venue(E, B).;false;true
3;true,true,false;title(F, D), venue(F, A).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, A).;false;true
4;true,true,false;title(F, D), venue(F, B).;false;false
4;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
4;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
4;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
4;false,true;haswordauthor(M, K).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, B).;false;true
5;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
5;true,false;haswordvenue(B, H), haswordtitle(I, H).;true;true
5;true,false,true;title(J, I), venue(J, B).;false;false
5;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
5;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;title(E, D), venue(E, A).;false;true
6;true,true,false;title(F, D), venue(F, B).;false;false
6;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
6;true,false,true;title(I, H), venue(I, B).;false;false
6;true,false,false;haswordvenue(A, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;title(F, D), venue(F, A).;false;false
7;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
7;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
7;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
7;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;title(E, D), venue(E, A).;false;true
8;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
8;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
8;true,false,true;title(J, I), venue(J, A).;false;false
8;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
8;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, B).;false;true
9;true,true,false;title(F, D), venue(F, A).;false;false
9;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
9;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
9;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
9;false,true;haswordauthor(M, K).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14185106490048777;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995121;  // std dev = 8.43e-08, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.1438632208137979;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=2 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.14185106490048777;  // std dev = 0.000, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7194734122109543;  // std dev = 5.96e-08, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.12543301544918353;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=2 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.12544463852839138;  // std dev = 0.000, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.11231637819360639;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( movie(E, A) )
%   | | then return 0.4509397621519657;  // std dev = 1.582, 30.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=25 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.11231637819360635;  // std dev = 3.73e-09, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.4431069347567055;  // std dev = 0.000, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | else if ( genre(A, E) )
%   | | then return -0.10159632948783628;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.03216360594494294;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=2 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.10159632948783635;  // std dev = 0.000, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.09269127618926096;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( genre(B, E) )
%   | | then return 0.3381232146738605;  // std dev = 3.65e-08, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.026028128834593062;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=2 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.09269127618926093;  // std dev = 2.63e-09, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.2670205079982398;  // std dev = 3.65e-08, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | else if ( movie(E, B) )
%   | | then if ( genre(B, F) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.007720807789699413;  // std dev = 1.199, 8.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.08518475138839683;  // std dev = 1.29e-08, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.08578835104307672;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( genre(B, E) )
%   | | then return 0.2180932495560678;  // std dev = 0.000, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.01948749490581027;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=2 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.07877675473109179;  // std dev = 0.000, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.18318650278488618;  // std dev = 0.000, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | else if ( genre(A, E) )
%   | | then return -0.07929480838715128;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.0156633104477214;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=2 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.07324622576333704;  // std dev = 0.000, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.07369544787046013;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( movie(E, A) )
%   | | then if ( genre(A, F) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.12356537397966344;  // std dev = 1.241, 30.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=25 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.06842697784420274;  // std dev = 0.000, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.14164937046039047;  // std dev = 0.000, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | else if ( genre(A, E) )
%   | | then return -0.06882004562149381;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.012642440450407855;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=2 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.0641918400820262;  // std dev = 1.32e-09, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 0.971565
   AUC PR    = 0.823063
   CLL	      = -0.141084
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.777778
   F1        = 0.875


Total learning time: 0.777 seconds
Total inference time: 0.916 seconds
AUC ROC: 0.971565


Results scoring model
   AUC ROC   = 0.992
   AUC PR    = 0.992893
   CLL	      = -0.170392
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.92
   F1        = 0.958333


Total scoring time: 0.387 seconds
Parameter learned model CLL: -0.170392


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 1, 0], 'true,false,true': [8.43e-08, 0, 23], 'true,false,false,true': [1.195, 5, 2], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 19, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [5.96e-08, 0, 23], 'true,false,true': [0.0, 1, 0], 'true,false,false,true': [1.195, 5, 2], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 19, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.0, 1, 0], 'true,false,true': [1.582, 5, 25], 'true,false,false': [0.0, 0, 0], 'false,true': [3.73e-09, 19, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 23], 'true,false,true': [0.0, 1, 0], 'true,false,false,true': [1.195, 5, 2], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 19, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 1, 0], 'true,false,true': [3.65e-08, 0, 23], 'true,false,false,true': [1.195, 5, 2], 'true,false,false,false': [0.0, 0, 0], 'false,true': [2.63e-09, 19, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, B)', 'true,false,true': 'genre(B, F)', 'false': 'movie(G, A)'}, {'true,true': [3.65e-08, 0, 23], 'true,false,true,true': [0.0, 0, 0], 'true,false,true,false': [1.199, 6, 2], 'true,false,false': [0.0, 0, 0], 'false,true': [1.29e-08, 19, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 1, 0], 'true,false,true': [0.0, 0, 23], 'true,false,false,true': [1.195, 5, 2], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 19, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 0, 23], 'true,false,true': [0.0, 1, 0], 'true,false,false,true': [1.195, 5, 2], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 19, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'true,false,true': 'genre(A, F)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 1, 0], 'true,false,true,true': [0.0, 0, 0], 'true,false,true,false': [1.241, 5, 25], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 19, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 23], 'true,false,true': [0.0, 1, 0], 'true,false,false,true': [1.195, 5, 2], 'true,false,false,false': [0.0, 0, 0], 'false,true': [1.32e-09, 19, 0], 'false,false': [0.0, 0, 0]}]]
[{'': [0.15608740894901246, 0.0], 'true': [0.0, 0.13888888888888987], 'true,false': [3.089316242435218e-16, 0.20408163265306126], 'true,false,false': [0.20408163265306126, nan], 'false': [0.0, nan]}, {'': [0.12274714268869548, 0.0], 'true': [1.544658121217609e-16, 0.18545544702231978], 'true,false': [0.0, 0.20408163265306117], 'true,false,false': [0.20408163265306117, nan], 'false': [0.0, nan]}, {'': [0.09066159228039442, 1.460819769243627e-17], 'true': [0.0, 0.08344953311005303], 'true,false': [0.08344953311005303, nan], 'false': [1.460819769243627e-17, nan]}, {'': [0.08160653041258076, -5.843279076974508e-18], 'true': [-7.723290606088045e-17, 0.1805283354821922], 'true,false': [0.0, 0.20408163265306128], 'true,false,false': [0.20408163265306128, nan], 'false': [-5.843279076974508e-18, nan]}, {'': [0.06694603372777616, 7.304098846218135e-18], 'true': [0.0, 0.06504342335172329], 'true,false': [5.792467954566034e-17, 0.20408163265306126], 'true,false,false': [0.20408163265306126, nan], 'false': [7.304098846218135e-18, nan]}, {'': [0.05927471335187581, 8.764918615461762e-18], 'true': [5.792467954566034e-17, 0.17980449184659925], 'true,false': [0.17980449184659925, nan], 'true,false,true': [nan, 0.17980449184659925], 'false': [8.764918615461762e-18, nan]}, {'': [0.05498203070521329, -7.304098846218135e-19], 'true': [0.0, 0.054675184919727456], 'true,false': [-5.792467954566034e-17, 0.20408163265306126], 'true,false,false': [0.20408163265306126, nan], 'false': [-7.304098846218135e-19, nan]}, {'': [0.052499228825996794, -7.304098846218135e-19], 'true': [-2.413528314402514e-17, 0.17955766779531301], 'true,false': [0.0, 0.20408163265306123], 'true,false,false': [0.20408163265306123, nan], 'false': [-7.304098846218135e-19, nan]}, {'': [0.05092663487312279, -2.1912296538654404e-18], 'true': [0.0, 0.05136896898705529], 'true,false': [0.05136896898705529, nan], 'true,false,true': [nan, 0.05136896898705529], 'false': [-2.1912296538654404e-18, nan]}, {'': [0.05115442810154383, 2.1912296538654404e-18], 'true': [-2.896233977283017e-17, 0.17891660768485523], 'true,false': [0.0, 0.2040816326530612], 'true,false,false': [0.2040816326530612, nan], 'false': [2.1912296538654404e-18, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(A, D).;true;true
0;true,false;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;true;genre(B, D).;true;true
1;true,false;genre(A, E).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;true;genre(A, D).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;true;genre(B, D).;true;true
3;true,false;genre(A, E).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;true;genre(A, D).;true;true
4;true,false;genre(B, E).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;true;genre(B, D).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(A, D).;true;true
6;true,false;genre(B, E).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;true;genre(B, D).;true;true
7;true,false;genre(A, E).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;true;genre(A, D).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;true;genre(B, D).;true;true
9;true,false;genre(A, E).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14185106490048777;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995121;  // std dev = 8.43e-08, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | | else if ( female(A) )
%   | | | then return 0.3581489350995122;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return -0.14185106490048777;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else return -0.14185106490048777;  // std dev = 0.000, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7194734122109543;  // std dev = 5.96e-08, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( female(A) )
%   | | | then return 0.308741135785635;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return -0.12544463852839138;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else return -0.12544463852839138;  // std dev = 0.000, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.11231637819360639;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( director(B) )
%   | | then if ( female(A) )
%   | | | then return 0.5919202425667032;  // std dev = 0.257, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | | else return 0.5553664367462846;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | else return -0.16482487941272925;  // std dev = 0.144, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else return -0.11231637819360635;  // std dev = 1.67e-08, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.4140458326793891;  // std dev = 0.021, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | else if ( genre(A, E) )
%   | | then return -0.10159632948783628;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( female(A) )
%   | | | then return 0.2087881676272716;  // std dev = 0.847, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return -0.09690290429153343;  // std dev = 1.86e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else return -0.10159632948783635;  // std dev = 0.000, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.09269127618926096;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( genre(B, E) )
%   | | then return 0.31836835373779643;  // std dev = 0.019, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | | else if ( female(A) )
%   | | | then return 0.16528229143340667;  // std dev = 0.834, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return -0.0887476035740948;  // std dev = 2.63e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else return -0.09269127618926093;  // std dev = 1.18e-08, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.2535763922731725;  // std dev = 0.016, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | else if ( actor(A), actor(B) )
%   | | then return -0.16276500135152946;  // std dev = 0.222, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.33272697569297394;  // std dev = 0.512, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   else return -0.08518475138839683;  // std dev = 1.29e-08, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.11494737296302153;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( genre(B, E) )
%   | | then return 0.20863214181592388;  // std dev = 0.014, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | | else if ( female(A) )
%   | | | then return 0.10321945159069185;  // std dev = 0.711, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return -0.07040163813418615;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else return -0.07877675473109179;  // std dev = 0.000, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.1762719895192907;  // std dev = 0.012, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | else if ( genre(A, E) )
%   | | then return -0.10376070765498498;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( female(A) )
%   | | | then return 0.08048966453140836;  // std dev = 0.705, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return -0.06593123651402095;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else return -0.07324622576333704;  // std dev = 0.000, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.09450056909164181;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( director(B) )
%   | | then if ( female(A) )
%   | | | then return 0.197310250864998;  // std dev = 0.338, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | | else return 0.15395873877326105;  // std dev = 7.45e-09, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | else return -0.15257146209775688;  // std dev = 0.248, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else return -0.06842697784420274;  // std dev = 0.000, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.13140983745720541;  // std dev = 0.021, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | else if ( genre(A, E) )
%   | | then return -0.08671814800087228;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( female(A) )
%   | | | then return 0.054237678999495414;  // std dev = 0.625, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return -0.053685072795943145;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else return -0.0641918400820262;  // std dev = 6.45e-09, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */


Results
   AUC ROC   = 0.98912
   AUC PR    = 0.924001
   CLL	      = -0.096713
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.911111
   F1        = 0.953488


Total learning time: 0.871 seconds
Total inference time: 0.851 seconds
AUC ROC: 0.98912


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.115815
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 0.385 seconds
Refined model CLL: -0.115815


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.98912
   AUC PR    = 0.924001
   CLL	      = -0.096713
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.911111
   F1        = 0.953488


Total learning time: 2.42 seconds
Total inference time: 0.851 seconds
AUC ROC: 0.98912
Total revision time: 2.42
Best scored revision CLL: -0.115815


Dataset: 4_cora_imdb, Fold: 5, Type: Transfer (trRDN-B), Time: 00:05:35
{'AUC ROC': 0.98912, 'AUC PR': 0.924001, 'CLL': -0.096713, 'Precision': [1.0, 0.5], 'Recall': 0.911111, 'F1': 0.953488, 'Learning time': 2.42, 'Inference time': 0.851, 'parameter_25': {'AUC ROC': 0.971565, 'AUC PR': 0.823063, 'CLL': -0.141084, 'Precision': [1.0, 0.5], 'Recall': 0.777778, 'F1': 0.875, 'Learning time': 0.777, 'Inference time': 0.916}}


Starting fold 1

Target train facts examples: 863
Target train pos examples: 326
Target train neg examples: 10928

Target test facts examples: 215
Target test pos	 examples: 56
Target test neg examples: 3308

Amount of data: 5
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;title(I, H), venue(I, A).;false;false
0;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
0;false;haswordvenue(A, L), haswordtitle(M, L).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordtitle(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordauthor(I, H).;false;true
2;true,false,false;haswordvenue(A, J), haswordtitle(K, J).;false;false
2;false;haswordvenue(A, L), haswordtitle(M, L).;true;false
2;false,true;haswordauthor(N, L).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;title(E, D), venue(E, B).;false;true
3;true,true,false;title(F, D), venue(F, A).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, A).;false;true
4;true,true,false;title(F, D), venue(F, B).;false;false
4;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
4;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
4;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
4;false,true;haswordauthor(M, K).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, B).;false;true
5;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
5;true,false;haswordvenue(B, H), haswordtitle(I, H).;true;true
5;true,false,true;title(J, I), venue(J, B).;false;false
5;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
5;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;title(E, D), venue(E, A).;false;true
6;true,true,false;title(F, D), venue(F, B).;false;false
6;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
6;true,false,true;title(I, H), venue(I, B).;false;false
6;true,false,false;haswordvenue(A, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;title(F, D), venue(F, A).;false;false
7;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
7;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
7;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
7;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;title(E, D), venue(E, A).;false;true
8;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
8;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
8;true,false,true;title(J, I), venue(J, A).;false;false
8;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
8;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, B).;false;true
9;true,true,false;title(F, D), venue(F, A).;false;false
9;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
9;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
9;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
9;false,true;haswordauthor(M, K).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995122;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.3581489350995122;  // std dev = 0.707, 2.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.14185106490048777;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7194734122109545;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( genre(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(F, B) )
%   | | | then return 0.308741135785635;  // std dev = 0.707, 2.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.12544463852839138;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A) )
%   | | then return 0.45571508075038514;  // std dev = 0.787, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.11231637819360639;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.4419288842523902;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( genre(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(F, B) )
%   | | | then return 0.16315700675196543;  // std dev = 0.707, 2.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.10159632948783628;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( genre(B, E) )
%   | | then return 0.337318630188875;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.12579939681763522;  // std dev = 0.707, 2.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.09269127618926096;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.2664742781615753;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( movie(E, B) )
%   | | then if ( genre(B, F) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.09590673022074611;  // std dev = 0.707, 2.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.08518475138839687;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( genre(B, E) )
%   | | then return 0.21771040758628668;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.07261582529187274;  // std dev = 0.707, 2.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.07877675473109173;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.18290781664865952;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( genre(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(F, B) )
%   | | | then return 0.05475845972853041;  // std dev = 0.707, 2.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.07324622576333704;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A) )
%   | | then if ( genre(A, F) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.11849070968776138;  // std dev = 0.720, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.06842697784420272;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.14207420056518894;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( genre(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(F, A) )
%   | | | then return 0.011664563136295936;  // std dev = 0.707, 2.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.0641918400820262;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.226851
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 0.649 seconds
Total inference time: 1.04 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 0.98
   AUC PR    = 0.983333
   CLL	      = -0.217295
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.8
   F1        = 0.888889


Total scoring time: 0.325 seconds
Parameter learned model CLL: -0.217295


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 4], 'true,false,false,true': [0.707, 1, 1], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 4, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 4], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.707, 1, 1], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 4, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.787, 1, 5], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 4, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 4], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.707, 1, 1], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 4, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 4], 'true,false,false,true': [0.707, 1, 1], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 4, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, B)', 'true,false,true': 'genre(B, F)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 0, 4], 'true,false,true,true': [0.0, 0, 0], 'true,false,true,false': [0.707, 1, 1], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 4, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 4], 'true,false,false,true': [0.707, 1, 1], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 4, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 0, 4], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.707, 1, 1], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 4, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'true,false,true': 'genre(A, F)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 0, 0], 'true,false,true,true': [0.0, 0, 0], 'true,false,true,false': [0.72, 1, 5], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 4, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 4], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.707, 1, 1], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 4, 0], 'false,false': [0.0, 0, 0]}]]
[{'': [0.1388888888888887, 0.0], 'true': [nan, 0.1388888888888887], 'true,false': [0.0, 0.25], 'true,false,false': [0.25, nan], 'false': [0.0, nan]}, {'': [0.1208224450883389, 0.0], 'true': [0.0, 0.25000000000000006], 'true,false': [nan, 0.25000000000000006], 'true,false,false': [0.25000000000000006, nan], 'false': [0.0, nan]}, {'': [0.10319411883697631, 0.0], 'true': [nan, 0.10319411883697631], 'true,false': [0.10319411883697631, nan], 'false': [0.0, nan]}, {'': [0.10060305770780263, 0.0], 'true': [0.0, 0.25], 'true,false': [nan, 0.25], 'true,false,false': [0.25, nan], 'false': [0.0, nan]}, {'': [0.09327564135243487, 0.0], 'true': [nan, 0.09327564135243487], 'true,false': [0.0, 0.24999999999999997], 'true,false,false': [0.24999999999999997, nan], 'false': [0.0, nan]}, {'': [0.08979850853567713, 0.0], 'true': [0.0, 0.25], 'true,false': [0.25, nan], 'true,false,true': [nan, 0.25], 'false': [0.0, nan]}, {'': [0.0880116528469312, 0.0], 'true': [nan, 0.0880116528469312], 'true,false': [0.0, 0.24999999999999997], 'true,false,false': [0.24999999999999997, nan], 'false': [0.0, nan]}, {'': [0.08698272392867616, 0.0], 'true': [0.0, 0.25000000000000006], 'true,false': [nan, 0.25000000000000006], 'true,false,false': [0.25000000000000006, nan], 'false': [0.0, nan]}, {'': [0.08632058806362558, 0.0], 'true': [nan, 0.08632058806362558], 'true,false': [0.08632058806362558, nan], 'true,false,true': [nan, 0.08632058806362558], 'false': [0.0, nan]}, {'': [0.08711259411874117, 0.0], 'true': [0.0, 0.25], 'true,false': [nan, 0.25], 'true,false,false': [0.25, nan], 'false': [0.0, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;true;genre(B, D).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;true;genre(B, D).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;true;genre(B, E).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;true;genre(B, D).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(B, E).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;true;genre(B, D).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;true;genre(B, D).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.8581489350995122;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else return 0.3581489350995122;  // std dev = 0.707, 2.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */
%   else return -0.14185106490048777;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7194734122109545;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else return 0.308741135785635;  // std dev = 0.707, 2.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */
%   else return -0.12544463852839138;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.45571508075038514;  // std dev = 0.787, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   else return -0.11231637819360639;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.4419288842523902;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else return 0.16315700675196543;  // std dev = 0.707, 2.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */
%   else return -0.10159632948783628;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.337318630188875;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else return 0.12579939681763522;  // std dev = 0.707, 2.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */
%   else return -0.09269127618926096;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.2664742781615753;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else return 0.09590673022074611;  // std dev = 0.707, 2.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */
%   else return -0.08518475138839687;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.21771040758628668;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else return 0.07261582529187274;  // std dev = 0.707, 2.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */
%   else return -0.07877675473109173;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.18290781664865952;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else return 0.05475845972853041;  // std dev = 0.707, 2.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */
%   else return -0.07324622576333704;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.11849070968776138;  // std dev = 0.720, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   else return -0.06842697784420272;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.14207420056518894;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else return 0.011664563136295936;  // std dev = 0.707, 2.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */
%   else return -0.0641918400820262;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */


Results
   AUC ROC   = 0.999547
   AUC PR    = 0.949153
   CLL	      = -0.236571
   Precision = 0.949153 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.973913


Total learning time: 0.6 seconds
Total inference time: 0.955 seconds
AUC ROC: 0.999547


Results scoring model
   AUC ROC   = 0.98
   AUC PR    = 0.983333
   CLL	      = -0.217295
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.8
   F1        = 0.888889


Total scoring time: 0.31 seconds
Refined model CLL: -0.217295


******************************************
Best model found
******************************************
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.226851
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 1.884 seconds
Total inference time: 1.04 seconds
AUC ROC: 1.0
Total revision time: 1.884
Best scored revision CLL: -0.217295


Dataset: 4_cora_imdb, Fold: 1, Type: Transfer (trRDN-B), Time: 00:05:40
{'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.226851, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 1.884, 'Inference time': 1.04, 'parameter_5': {'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.226851, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 0.649, 'Inference time': 1.04}}


Amount of data: 10
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;title(I, H), venue(I, A).;false;false
0;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
0;false;haswordvenue(A, L), haswordtitle(M, L).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordtitle(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordauthor(I, H).;false;true
2;true,false,false;haswordvenue(A, J), haswordtitle(K, J).;false;false
2;false;haswordvenue(A, L), haswordtitle(M, L).;true;false
2;false,true;haswordauthor(N, L).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;title(E, D), venue(E, B).;false;true
3;true,true,false;title(F, D), venue(F, A).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, A).;false;true
4;true,true,false;title(F, D), venue(F, B).;false;false
4;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
4;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
4;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
4;false,true;haswordauthor(M, K).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, B).;false;true
5;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
5;true,false;haswordvenue(B, H), haswordtitle(I, H).;true;true
5;true,false,true;title(J, I), venue(J, B).;false;false
5;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
5;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;title(E, D), venue(E, A).;false;true
6;true,true,false;title(F, D), venue(F, B).;false;false
6;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
6;true,false,true;title(I, H), venue(I, B).;false;false
6;true,false,false;haswordvenue(A, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;title(F, D), venue(F, A).;false;false
7;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
7;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
7;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
7;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;title(E, D), venue(E, A).;false;true
8;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
8;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
8;true,false,true;title(J, I), venue(J, A).;false;false
8;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
8;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, B).;false;true
9;true,true,false;title(F, D), venue(F, A).;false;false
9;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
9;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
9;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
9;false,true;haswordauthor(M, K).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995123;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.5248156017661789;  // std dev = 1.155, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.1418510649004878;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7194734122109544;  // std dev = 2.11e-08, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else if ( genre(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(F, B) )
%   | | | then return 0.448295606241962;  // std dev = 1.155, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.12544463852839138;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A) )
%   | | then return 0.45886489153445376;  // std dev = 1.202, 12.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=10 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.11231637819360639;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.4411521962284177;  // std dev = 1.49e-08, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else if ( genre(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(F, B) )
%   | | | then return 0.25764806362317944;  // std dev = 1.155, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.10159632948783627;  // std dev = 1.32e-09, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( genre(B, E) )
%   | | then return 0.3367883597005703;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.19423264559711786;  // std dev = 1.155, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.09269127618926097;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.2661142187383451;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else if ( movie(E, B) )
%   | | then if ( genre(B, F) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.14571474080359384;  // std dev = 1.155, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.08518475138839687;  // std dev = 3.73e-09, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( genre(B, E) )
%   | | then return 0.21745797501044284;  // std dev = 7.45e-09, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.10952452309991095;  // std dev = 1.155, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.07877675473109173;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.18272400790575127;  // std dev = 5.27e-09, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else if ( genre(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(F, B) )
%   | | | then return 0.08269573518423116;  // std dev = 1.155, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.07324622576333704;  // std dev = 9.31e-10, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A) )
%   | | then if ( genre(A, F) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.10987717807344315;  // std dev = 1.166, 12.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=10 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.06842697784420272;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.1429990335454343;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else if ( genre(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(F, A) )
%   | | | then return 0.03679437442411152;  // std dev = 1.155, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.0641918400820262;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.316619
   Precision = 0.059638 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.112563


Total learning time: 0.729 seconds
Total inference time: 1.041 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 0.96
   AUC PR    = 0.959603
   CLL	      = -0.256941
   Precision = 0.833333 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.909091


Total scoring time: 0.348 seconds
Parameter learned model CLL: -0.256941


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 6], 'true,false,false,true': [1.155, 2, 4], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 8, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [2.11e-08, 0, 6], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [1.155, 2, 4], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 8, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [1.202, 2, 10], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 8, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [1.49e-08, 0, 6], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [1.155, 2, 4], 'true,false,false,false': [0.0, 0, 0], 'false,true': [1.32e-09, 8, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 6], 'true,false,false,true': [1.155, 2, 4], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 8, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, B)', 'true,false,true': 'genre(B, F)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 0, 6], 'true,false,true,true': [0.0, 0, 0], 'true,false,true,false': [1.155, 2, 4], 'true,false,false': [0.0, 0, 0], 'false,true': [3.73e-09, 8, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [7.45e-09, 0, 6], 'true,false,false,true': [1.155, 2, 4], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 8, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, A)'}, {'true,true': [5.27e-09, 0, 6], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [1.155, 2, 4], 'true,false,false,false': [0.0, 0, 0], 'false,true': [9.31e-10, 8, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'true,false,true': 'genre(A, F)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 0, 0], 'true,false,true,true': [0.0, 0, 0], 'true,false,true,false': [1.166, 2, 10], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 8, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 6], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [1.155, 2, 4], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 8, 0], 'false,false': [0.0, 0, 0]}]]
[{'': [0.1388888888888887, -6.938893903907228e-18], 'true': [nan, 0.1388888888888887], 'true,false': [-1.4802973661668753e-16, 0.22222222222222213], 'true,false,false': [0.22222222222222213, nan], 'false': [-6.938893903907228e-18, nan]}, {'': [0.12949546172365026, 0.0], 'true': [7.401486830834377e-17, 0.2222222222222222], 'true,false': [nan, 0.2222222222222222], 'true,false,false': [0.2222222222222222, nan], 'false': [0.0, nan]}, {'': [0.12042365933938208, -1.734723475976807e-18], 'true': [nan, 0.12042365933938208], 'true,false': [0.12042365933938208, nan], 'false': [-1.734723475976807e-18, nan]}, {'': [0.11952955278191146, 1.734723475976807e-18], 'true': [3.700743415417188e-17, 0.2222222222222222], 'true,false': [nan, 0.2222222222222222], 'true,false,false': [0.2222222222222222, nan], 'false': [1.734723475976807e-18, nan]}, {'': [0.11619164401699748, 0.0], 'true': [nan, 0.11619164401699748], 'true,false': [0.0, 0.22222222222222224], 'true,false,false': [0.22222222222222224, nan], 'false': [0.0, nan]}, {'': [0.11473511968285122, 1.734723475976807e-18], 'true': [-1.850371707708594e-17, 0.2222222222222222], 'true,false': [0.2222222222222222, nan], 'true,false,true': [nan, 0.2222222222222222], 'false': [1.734723475976807e-18, nan]}, {'': [0.11402351862144185, 0.0], 'true': [nan, 0.11402351862144185], 'true,false': [9.25185853854297e-18, 0.22222222222222218], 'true,false,false': [0.22222222222222218, nan], 'false': [0.0, nan]}, {'': [0.1136125249470238, 8.673617379884035e-19], 'true': [4.625929269271485e-18, 0.22222222222222224], 'true,false': [nan, 0.22222222222222224], 'true,false,false': [0.22222222222222224, nan], 'false': [8.673617379884035e-19, nan]}, {'': [0.11333163598576833, 0.0], 'true': [nan, 0.11333163598576833], 'true,false': [0.11333163598576833, nan], 'true,false,true': [nan, 0.11333163598576833], 'false': [0.0, nan]}, {'': [0.11393096851588018, 0.0], 'true': [0.0, 0.2222222222222222], 'true,false': [nan, 0.2222222222222222], 'true,false,false': [0.2222222222222222, nan], 'false': [0.0, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;true;genre(B, D).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;true;genre(B, D).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;true;genre(B, E).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;true;genre(B, D).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(B, E).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;true;genre(B, D).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;true;genre(B, D).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.8581489350995123;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else return 0.5248156017661789;  // std dev = 1.155, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   else return -0.1418510649004878;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7194734122109544;  // std dev = 2.11e-08, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else return 0.448295606241962;  // std dev = 1.155, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   else return -0.12544463852839138;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( female(A) )
%   | then return 0.6395645824920877;  // std dev = 0.154, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return 0.3297936837075724;  // std dev = 0.404, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else return -0.11231637819360639;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.4478445516131579;  // std dev = 0.088, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else return 0.2509021748785322;  // std dev = 1.092, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   else return -0.10159632948783627;  // std dev = 3.73e-09, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.3418595840303855;  // std dev = 0.079, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else return 0.18934171257065305;  // std dev = 1.090, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   else return -0.09269127618926097;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.26984564333180167;  // std dev = 0.069, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else return 0.1423236547640845;  // std dev = 1.090, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   else return -0.08518475138839687;  // std dev = 3.73e-09, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.22024285287424483;  // std dev = 0.059, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else return 0.10721696951799457;  // std dev = 1.091, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   else return -0.07877675473109173;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.18485588907406428;  // std dev = 0.052, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else return 0.08113607215265334;  // std dev = 1.092, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   else return -0.07324622576333704;  // std dev = 2.63e-09, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( female(A) )
%   | then return 0.2677345699261546;  // std dev = 0.247, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return -0.0023437634093347154;  // std dev = 0.368, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else return -0.06842697784420272;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.14962793608589664;  // std dev = 0.078, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else return 0.032515221272117666;  // std dev = 1.046, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   else return -0.0641918400820262;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */


Results
   AUC ROC   = 0.999765
   AUC PR    = 0.983476
   CLL	      = -0.336517
   Precision = 0.056112 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.106262


Total learning time: 0.625 seconds
Total inference time: 0.933 seconds
AUC ROC: 0.999765


Results scoring model
   AUC ROC   = 0.99
   AUC PR    = 0.991667
   CLL	      = -0.23264
   Precision = 0.833333 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.909091


Total scoring time: 0.324 seconds
Refined model CLL: -0.23264


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.999765
   AUC PR    = 0.983476
   CLL	      = -0.336517
   Precision = 0.056112 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.106262


Total learning time: 2.026 seconds
Total inference time: 0.933 seconds
AUC ROC: 0.999765
Total revision time: 2.026
Best scored revision CLL: -0.23264


Dataset: 4_cora_imdb, Fold: 1, Type: Transfer (trRDN-B), Time: 00:05:44
{'AUC ROC': 0.999765, 'AUC PR': 0.983476, 'CLL': -0.336517, 'Precision': [0.056112, 0.5], 'Recall': 1.0, 'F1': 0.106262, 'Learning time': 2.026, 'Inference time': 0.933, 'parameter_10': {'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.316619, 'Precision': [0.059638, 0.5], 'Recall': 1.0, 'F1': 0.112563, 'Learning time': 0.729, 'Inference time': 1.041}}


Amount of data: 15
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;title(I, H), venue(I, A).;false;false
0;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
0;false;haswordvenue(A, L), haswordtitle(M, L).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordtitle(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordauthor(I, H).;false;true
2;true,false,false;haswordvenue(A, J), haswordtitle(K, J).;false;false
2;false;haswordvenue(A, L), haswordtitle(M, L).;true;false
2;false,true;haswordauthor(N, L).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;title(E, D), venue(E, B).;false;true
3;true,true,false;title(F, D), venue(F, A).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, A).;false;true
4;true,true,false;title(F, D), venue(F, B).;false;false
4;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
4;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
4;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
4;false,true;haswordauthor(M, K).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, B).;false;true
5;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
5;true,false;haswordvenue(B, H), haswordtitle(I, H).;true;true
5;true,false,true;title(J, I), venue(J, B).;false;false
5;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
5;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;title(E, D), venue(E, A).;false;true
6;true,true,false;title(F, D), venue(F, B).;false;false
6;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
6;true,false,true;title(I, H), venue(I, B).;false;false
6;true,false,false;haswordvenue(A, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;title(F, D), venue(F, A).;false;false
7;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
7;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
7;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
7;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;title(E, D), venue(E, A).;false;true
8;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
8;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
8;true,false,true;title(J, I), venue(J, A).;false;false
8;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
8;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, B).;false;true
9;true,true,false;title(F, D), venue(F, A).;false;false
9;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
9;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
9;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
9;false,true;haswordauthor(M, K).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995123;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.5248156017661789;  // std dev = 1.155, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.1418510649004878;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7194734122109542;  // std dev = 4.21e-08, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else if ( genre(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(F, B) )
%   | | | then return 0.448295606241962;  // std dev = 1.155, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.12544463852839138;  // std dev = 7.45e-09, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A) )
%   | | then return 0.4872476989496981;  // std dev = 1.216, 17.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=15 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.11231637819360636;  // std dev = 2.95e-09, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.4341669220475577;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else if ( genre(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(F, B) )
%   | | | then return 0.2507700041774698;  // std dev = 1.155, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.1015963294878363;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( genre(B, E) )
%   | | then return 0.3320257789278008;  // std dev = 1.49e-08, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.18886982729557414;  // std dev = 1.155, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.09269127618926096;  // std dev = 1.32e-09, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.2628781203302218;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else if ( movie(E, B) )
%   | | then if ( genre(B, F) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.14168779379284738;  // std dev = 1.155, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.08518475138839686;  // std dev = 7.45e-09, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( genre(B, E) )
%   | | then return 0.21518652506104516;  // std dev = 1.05e-08, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.10653743999595548;  // std dev = 1.155, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.07877675473109172;  // std dev = 3.73e-09, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.18106814952454675;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else if ( genre(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(F, B) )
%   | | | then return 0.08047983601058167;  // std dev = 1.155, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.07324622576333704;  // std dev = 9.31e-10, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A) )
%   | | then if ( genre(A, F) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.12234510256186754;  // std dev = 1.170, 17.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=15 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.06842697784420272;  // std dev = 2.63e-09, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.14033134610281928;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else if ( genre(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(F, A) )
%   | | | then return 0.03228775459170489;  // std dev = 1.155, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.06419184008202619;  // std dev = 1.86e-09, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.319061
   Precision = 0.059638 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.112563


Total learning time: 0.662 seconds
Total inference time: 1.009 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 0.982222
   AUC PR    = 0.982198
   CLL	      = -0.203234
   Precision = 0.882353 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.9375


Total scoring time: 0.364 seconds
Parameter learned model CLL: -0.203234


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 11], 'true,false,false,true': [1.155, 2, 4], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 13, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [4.21e-08, 0, 11], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [1.155, 2, 4], 'true,false,false,false': [0.0, 0, 0], 'false,true': [7.45e-09, 13, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [1.216, 2, 15], 'true,false,false': [0.0, 0, 0], 'false,true': [2.95e-09, 13, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 11], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [1.155, 2, 4], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 13, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [1.49e-08, 0, 11], 'true,false,false,true': [1.155, 2, 4], 'true,false,false,false': [0.0, 0, 0], 'false,true': [1.32e-09, 13, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, B)', 'true,false,true': 'genre(B, F)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 0, 11], 'true,false,true,true': [0.0, 0, 0], 'true,false,true,false': [1.155, 2, 4], 'true,false,false': [0.0, 0, 0], 'false,true': [7.45e-09, 13, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [1.05e-08, 0, 11], 'true,false,false,true': [1.155, 2, 4], 'true,false,false,false': [0.0, 0, 0], 'false,true': [3.73e-09, 13, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 0, 11], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [1.155, 2, 4], 'true,false,false,false': [0.0, 0, 0], 'false,true': [9.31e-10, 13, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'true,false,true': 'genre(A, F)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 0, 0], 'true,false,true,true': [0.0, 0, 0], 'true,false,true,false': [1.17, 2, 15], 'true,false,false': [0.0, 0, 0], 'false,true': [2.63e-09, 13, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 11], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [1.155, 2, 4], 'true,false,false,false': [0.0, 0, 0], 'false,true': [1.86e-09, 13, 0], 'false,false': [0.0, 0, 0]}]]
[{'': [0.10380622837370206, -1.2810265668751807e-17], 'true': [nan, 0.10380622837370206], 'true,false': [-1.6148698540002277e-16, 0.22222222222222213], 'true,false,false': [0.22222222222222213, nan], 'false': [-1.2810265668751807e-17, nan]}, {'': [0.0952253814130694, 4.270088556250602e-18], 'true': [1.6148698540002277e-16, 0.2222222222222222], 'true,false': [nan, 0.2222222222222222], 'true,false,false': [0.2222222222222222, nan], 'false': [4.270088556250602e-18, nan]}, {'': [0.08693833702051963, 8.540177112501205e-18], 'true': [nan, 0.08693833702051963], 'true,false': [0.08693833702051963, nan], 'false': [8.540177112501205e-18, nan]}, {'': [0.08611259173919393, -2.135044278125301e-18], 'true': [0.0, 0.2222222222222222], 'true,false': [nan, 0.2222222222222222], 'true,false,false': [0.2222222222222222, nan], 'false': [-2.135044278125301e-18, nan]}, {'': [0.08311157790607862, 2.135044278125301e-18], 'true': [nan, 0.08311157790607862], 'true,false': [2.0185873175002847e-17, 0.22222222222222218], 'true,false,false': [0.22222222222222218, nan], 'false': [2.135044278125301e-18, nan]}, {'': [0.08178551886822909, 4.270088556250602e-18], 'true': [-4.0371746350005693e-17, 0.22222222222222224], 'true,false': [0.22222222222222224, nan], 'true,false,true': [nan, 0.22222222222222224], 'false': [4.270088556250602e-18, nan]}, {'': [0.08112723816577308, 1.0675221390626506e-18], 'true': [nan, 0.08112723816577308], 'true,false': [1.0092936587501423e-17, 0.22222222222222224], 'true,false,false': [0.22222222222222224, nan], 'false': [1.0675221390626506e-18, nan]}, {'': [0.08074205968337435, 0.0], 'true': [-1.0092936587501423e-17, 0.22222222222222224], 'true,false': [nan, 0.22222222222222224], 'true,false,false': [0.22222222222222224, nan], 'false': [0.0, nan]}, {'': [0.08047718115188367, 5.337610695313253e-19], 'true': [nan, 0.08047718115188367], 'true,false': [0.08047718115188367, nan], 'true,false,true': [nan, 0.08047718115188367], 'false': [5.337610695313253e-19, nan]}, {'': [0.08109727416146584, 3.736327486719277e-18], 'true': [-5.046468293750712e-18, 0.22222222222222224], 'true,false': [nan, 0.22222222222222224], 'true,false,false': [0.22222222222222224, nan], 'false': [3.736327486719277e-18, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;true;genre(B, D).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;true;genre(B, D).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;true;genre(B, E).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;true;genre(B, D).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(B, E).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;true;genre(B, D).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;true;genre(B, D).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.8581489350995123;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else return 0.5248156017661789;  // std dev = 1.155, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   else return -0.1418510649004878;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7194734122109542;  // std dev = 4.21e-08, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else return 0.448295606241962;  // std dev = 1.155, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   else return -0.12544463852839138;  // std dev = 7.45e-09, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( female(A) )
%   | then return 0.6255315582011205;  // std dev = 0.172, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else return 0.41182013935801326;  // std dev = 0.340, 11.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=9 */
%   else return -0.11231637819360636;  // std dev = 1.05e-08, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.43853714160046825;  // std dev = 0.077, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else return 0.2429029336932258;  // std dev = 1.110, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   else return -0.1015963294878363;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.33520787131153773;  // std dev = 0.069, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else return 0.18294191496734227;  // std dev = 1.109, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   else return -0.09269127618926096;  // std dev = 5.27e-09, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.2651594889692086;  // std dev = 0.060, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else return 0.1373759560628829;  // std dev = 1.110, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   else return -0.08518475138839686;  // std dev = 7.45e-09, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.21685885118125903;  // std dev = 0.052, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else return 0.10343570786557682;  // std dev = 1.110, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   else return -0.07877675473109172;  // std dev = 3.73e-09, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.18233146331723765;  // std dev = 0.046, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else return 0.07824774383362659;  // std dev = 1.111, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   else return -0.07324622576333704;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( female(A) )
%   | then return 0.25213325811349807;  // std dev = 0.282, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else return 0.05165326495204448;  // std dev = 0.307, 11.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=9 */
%   else return -0.06842697784420272;  // std dev = 2.63e-09, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.144258783393272;  // std dev = 0.070, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else return 0.025025744897215135;  // std dev = 1.076, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   else return -0.06419184008202619;  // std dev = 6.97e-09, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */


Results
   AUC ROC   = 0.999765
   AUC PR    = 0.983476
   CLL	      = -0.339414
   Precision = 0.056112 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.106262


Total learning time: 0.653 seconds
Total inference time: 0.884 seconds
AUC ROC: 0.999765


Results scoring model
   AUC ROC   = 0.995556
   AUC PR    = 0.996078
   CLL	      = -0.191686
   Precision = 0.882353 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.9375


Total scoring time: 0.348 seconds
Refined model CLL: -0.191686


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.999765
   AUC PR    = 0.983476
   CLL	      = -0.339414
   Precision = 0.056112 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.106262


Total learning time: 2.027 seconds
Total inference time: 0.884 seconds
AUC ROC: 0.999765
Total revision time: 2.027
Best scored revision CLL: -0.191686


Dataset: 4_cora_imdb, Fold: 1, Type: Transfer (trRDN-B), Time: 00:05:49
{'AUC ROC': 0.999765, 'AUC PR': 0.983476, 'CLL': -0.339414, 'Precision': [0.056112, 0.5], 'Recall': 1.0, 'F1': 0.106262, 'Learning time': 2.027, 'Inference time': 0.884, 'parameter_15': {'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.319061, 'Precision': [0.059638, 0.5], 'Recall': 1.0, 'F1': 0.112563, 'Learning time': 0.662, 'Inference time': 1.009}}


Amount of data: 20
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;title(I, H), venue(I, A).;false;false
0;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
0;false;haswordvenue(A, L), haswordtitle(M, L).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordtitle(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordauthor(I, H).;false;true
2;true,false,false;haswordvenue(A, J), haswordtitle(K, J).;false;false
2;false;haswordvenue(A, L), haswordtitle(M, L).;true;false
2;false,true;haswordauthor(N, L).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;title(E, D), venue(E, B).;false;true
3;true,true,false;title(F, D), venue(F, A).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, A).;false;true
4;true,true,false;title(F, D), venue(F, B).;false;false
4;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
4;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
4;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
4;false,true;haswordauthor(M, K).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, B).;false;true
5;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
5;true,false;haswordvenue(B, H), haswordtitle(I, H).;true;true
5;true,false,true;title(J, I), venue(J, B).;false;false
5;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
5;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;title(E, D), venue(E, A).;false;true
6;true,true,false;title(F, D), venue(F, B).;false;false
6;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
6;true,false,true;title(I, H), venue(I, B).;false;false
6;true,false,false;haswordvenue(A, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;title(F, D), venue(F, A).;false;false
7;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
7;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
7;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
7;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;title(E, D), venue(E, A).;false;true
8;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
8;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
8;true,false,true;title(J, I), venue(J, A).;false;false
8;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
8;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, B).;false;true
9;true,true,false;title(F, D), venue(F, A).;false;false
9;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
9;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
9;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
9;false,true;haswordauthor(M, K).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995123;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.4581489350995123;  // std dev = 1.549, 10.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=6 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.1418510649004878;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7194734122109542;  // std dev = 5.16e-08, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | else if ( genre(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(F, B) )
%   | | | then return 0.39279418357704865;  // std dev = 1.549, 10.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=6 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.12544463852839138;  // std dev = 7.45e-09, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A) )
%   | | then return 0.4576827004733086;  // std dev = 1.649, 24.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=20 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.11231637819360635;  // std dev = 3.48e-09, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.44144367023409886;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | else if ( genre(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(F, B) )
%   | | | then return 0.22043010076231928;  // std dev = 1.549, 10.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=6 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.10159632948783631;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( genre(B, E) )
%   | | then return 0.3369873409221208;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.16732466055377898;  // std dev = 1.549, 10.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=6 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.09269127618926094;  // std dev = 2.28e-09, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.2662493348314436;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | else if ( movie(E, B) )
%   | | then if ( genre(B, F) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.1258817014084468;  // std dev = 1.549, 10.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=6 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.08518475138839685;  // std dev = 1.05e-08, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( genre(B, E) )
%   | | then return 0.21755270989039133;  // std dev = 1.49e-08, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.09443465938232928;  // std dev = 1.549, 10.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=6 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.07877675473109173;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.18279299402619925;  // std dev = 1.97e-08, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | else if ( genre(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(F, B) )
%   | | | then return 0.07085882798320095;  // std dev = 1.549, 10.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=6 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.07324622576333704;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A) )
%   | | then if ( genre(A, F) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.11380012961135921;  // std dev = 1.569, 24.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=20 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.06842697784420272;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.1425669694307674;  // std dev = 7.45e-09, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | else if ( genre(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(F, A) )
%   | | | then return 0.02522605594821743;  // std dev = 1.549, 10.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=6 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.06419184008202619;  // std dev = 1.86e-09, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.277836
   Precision = 0.059638 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.112563


Total learning time: 0.681 seconds
Total inference time: 1.025 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 0.97
   AUC PR    = 0.970682
   CLL	      = -0.240519
   Precision = 0.833333 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.909091


Total scoring time: 0.383 seconds
Parameter learned model CLL: -0.240519


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 14], 'true,false,false,true': [1.549, 4, 6], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 16, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [5.16e-08, 0, 14], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [1.549, 4, 6], 'true,false,false,false': [0.0, 0, 0], 'false,true': [7.45e-09, 16, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [1.649, 4, 20], 'true,false,false': [0.0, 0, 0], 'false,true': [3.48e-09, 16, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 14], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [1.549, 4, 6], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 16, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 14], 'true,false,false,true': [1.549, 4, 6], 'true,false,false,false': [0.0, 0, 0], 'false,true': [2.28e-09, 16, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, B)', 'true,false,true': 'genre(B, F)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 0, 14], 'true,false,true,true': [0.0, 0, 0], 'true,false,true,false': [1.549, 4, 6], 'true,false,false': [0.0, 0, 0], 'false,true': [1.05e-08, 16, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [1.49e-08, 0, 14], 'true,false,false,true': [1.549, 4, 6], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 16, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, A)'}, {'true,true': [1.97e-08, 0, 14], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [1.549, 4, 6], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 16, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'true,false,true': 'genre(A, F)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 0, 0], 'true,false,true,true': [0.0, 0, 0], 'true,false,true,false': [1.569, 4, 20], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 16, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [7.45e-09, 0, 14], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [1.549, 4, 6], 'true,false,false,false': [0.0, 0, 0], 'false,true': [1.86e-09, 16, 0], 'false,false': [0.0, 0, 0]}]]
[{'': [0.13888888888888906, -6.938893903907228e-18], 'true': [nan, 0.13888888888888906], 'true,false': [-2.5376526277146434e-16, 0.23999999999999994], 'true,false,false': [0.23999999999999994, nan], 'false': [-6.938893903907228e-18, nan]}, {'': [0.12593872322728825, 3.469446951953614e-18], 'true': [1.9032394707859825e-16, 0.24000000000000005], 'true,false': [nan, 0.24000000000000005], 'true,false,false': [0.24000000000000005, nan], 'false': [3.469446951953614e-18, nan]}, {'': [0.11335895726514755, 1.214306433183765e-17], 'true': [nan, 0.11335895726514755], 'true,false': [0.11335895726514755, nan], 'false': [1.214306433183765e-17, nan]}, {'': [0.11187253420953457, -6.938893903907228e-18], 'true': [-1.2688263138573217e-16, 0.24000000000000005], 'true,false': [nan, 0.24000000000000005], 'true,false,false': [0.24000000000000005, nan], 'false': [-6.938893903907228e-18, nan]}, {'': [0.106996457491958, 5.204170427930421e-18], 'true': [nan, 0.106996457491958], 'true,false': [0.0, 0.24000000000000005], 'true,false,false': [0.24000000000000005, nan], 'false': [5.204170427930421e-18, nan]}, {'': [0.1047889412357433, 6.938893903907228e-18], 'true': [-3.172065784643304e-17, 0.2399999999999999], 'true,false': [0.2399999999999999, nan], 'true,false,true': [nan, 0.2399999999999999], 'false': [6.938893903907228e-18, nan]}, {'': [0.10368424932383123, -1.734723475976807e-18], 'true': [nan, 0.10368424932383123], 'true,false': [1.586032892321652e-17, 0.24], 'true,false,false': [0.24, nan], 'false': [-1.734723475976807e-18, nan]}, {'': [0.10304530564910382, 0.0], 'true': [2.7755575615628914e-17, 0.24], 'true,false': [nan, 0.24], 'true,false,false': [0.24, nan], 'false': [0.0, nan]}, {'': [0.10261896933000926, 0.0], 'true': [nan, 0.10261896933000926], 'true,false': [0.10261896933000926, nan], 'true,false,true': [nan, 0.10261896933000926], 'false': [0.0, nan]}, {'': [0.10334660520272343, 3.469446951953614e-18], 'true': [3.96508223080413e-18, 0.23999999999999994], 'true,false': [nan, 0.23999999999999994], 'true,false,false': [0.23999999999999994, nan], 'false': [3.469446951953614e-18, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;true;genre(B, D).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;true;genre(B, D).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;true;genre(B, E).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;true;genre(B, D).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(B, E).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;true;genre(B, D).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;true;genre(B, D).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.8581489350995123;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | else if ( actor(B) )
%   | | then return -0.14185106490048777;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return 0.8581489350995123;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else return -0.1418510649004878;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7194734122109542;  // std dev = 5.16e-08, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | else if ( actor(B) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return 0.7194734122109544;  // std dev = 2.11e-08, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else return -0.12544463852839138;  // std dev = 7.45e-09, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B) )
%   | then return 0.5553664367462846;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | else return -0.11231637819360639;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   else return -0.11231637819360635;  // std dev = 1.39e-08, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.4175135841583098;  // std dev = 4.21e-08, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | else if ( actor(B) )
%   | | then return -0.10159632948783628;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return 0.4175135841583099;  // std dev = 2.11e-08, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else return -0.10159632948783631;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.3207118471601497;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | else if ( actor(B) )
%   | | then return -0.09269127618926096;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return 0.3207118471601497;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else return -0.09269127618926094;  // std dev = 9.13e-09, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.2551722425694894;  // std dev = 2.11e-08, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | else if ( actor(B) )
%   | | then return -0.08518475138839687;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return 0.2551722425694894;  // std dev = 7.45e-09, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else return -0.08518475138839685;  // std dev = 1.05e-08, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.20975771563253562;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | else if ( actor(B) )
%   | | then return -0.07877675473109173;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return 0.20975771563253556;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else return -0.07877675473109173;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.1770964977452774;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | else if ( actor(B) )
%   | | then return -0.07324622576333704;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return 0.17709649774527736;  // std dev = 5.27e-09, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else return -0.07324622576333704;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B) )
%   | then return 0.15274385809367086;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | else return -0.06842697784420272;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   else return -0.06842697784420272;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.13400703000801117;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | else if ( actor(B) )
%   | | then return -0.0641918400820262;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return 0.13400703000801117;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else return -0.06419184008202619;  // std dev = 7.45e-09, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */


Results
   AUC ROC   = 0.999547
   AUC PR    = 0.949153
   CLL	      = -0.065262
   Precision = 0.949153 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.973913


Total learning time: 0.813 seconds
Total inference time: 0.907 seconds
AUC ROC: 0.999547


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.094637
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 0.352 seconds
Refined model CLL: -0.094637


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.999547
   AUC PR    = 0.949153
   CLL	      = -0.065262
   Precision = 0.949153 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.973913


Total learning time: 2.229 seconds
Total inference time: 0.907 seconds
AUC ROC: 0.999547
Total revision time: 2.229
Best scored revision CLL: -0.094637


Dataset: 4_cora_imdb, Fold: 1, Type: Transfer (trRDN-B), Time: 00:05:53
{'AUC ROC': 0.999547, 'AUC PR': 0.949153, 'CLL': -0.065262, 'Precision': [0.949153, 0.5], 'Recall': 1.0, 'F1': 0.973913, 'Learning time': 2.229, 'Inference time': 0.907, 'parameter_20': {'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.277836, 'Precision': [0.059638, 0.5], 'Recall': 1.0, 'F1': 0.112563, 'Learning time': 0.681, 'Inference time': 1.025}}


Amount of data: 25
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;title(I, H), venue(I, A).;false;false
0;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
0;false;haswordvenue(A, L), haswordtitle(M, L).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordtitle(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordauthor(I, H).;false;true
2;true,false,false;haswordvenue(A, J), haswordtitle(K, J).;false;false
2;false;haswordvenue(A, L), haswordtitle(M, L).;true;false
2;false,true;haswordauthor(N, L).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;title(E, D), venue(E, B).;false;true
3;true,true,false;title(F, D), venue(F, A).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, A).;false;true
4;true,true,false;title(F, D), venue(F, B).;false;false
4;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
4;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
4;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
4;false,true;haswordauthor(M, K).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, B).;false;true
5;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
5;true,false;haswordvenue(B, H), haswordtitle(I, H).;true;true
5;true,false,true;title(J, I), venue(J, B).;false;false
5;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
5;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;title(E, D), venue(E, A).;false;true
6;true,true,false;title(F, D), venue(F, B).;false;false
6;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
6;true,false,true;title(I, H), venue(I, B).;false;false
6;true,false,false;haswordvenue(A, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;title(F, D), venue(F, A).;false;false
7;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
7;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
7;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
7;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;title(E, D), venue(E, A).;false;true
8;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
8;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
8;true,false,true;title(J, I), venue(J, A).;false;false
8;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
8;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, B).;false;true
9;true,true,false;title(F, D), venue(F, A).;false;false
9;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
9;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
9;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
9;false,true;haswordauthor(M, K).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995123;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.44148226843284566;  // std dev = 1.708, 12.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=7 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.14185106490048777;  // std dev = 7.45e-09, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7194734122109542;  // std dev = 7.30e-08, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | else if ( genre(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(F, B) )
%   | | | then return 0.3788520179768205;  // std dev = 1.708, 12.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=7 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.12544463852839138;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A) )
%   | | then return 0.4573699480111571;  // std dev = 1.830, 30.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=25 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.11231637819360636;  // std dev = 3.48e-09, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.4415207873819764;  // std dev = 3.65e-08, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | else if ( genre(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(F, B) )
%   | | | then return 0.2110177695315801;  // std dev = 1.708, 12.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=7 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.10159632948783634;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( genre(B, E) )
%   | | then return 0.337039990205649;  // std dev = 4.21e-08, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.16053050811300895;  // std dev = 1.708, 12.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=7 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.09269127618926093;  // std dev = 2.95e-09, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.266285084626087;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | else if ( movie(E, B) )
%   | | then if ( genre(B, F) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.12094899822754697;  // std dev = 1.708, 12.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=7 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.08518475138839683;  // std dev = 1.39e-08, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( genre(B, E) )
%   | | then return 0.21757777400427866;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.09078240456802418;  // std dev = 1.708, 12.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=7 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.07877675473109179;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.18281124477030491;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | else if ( genre(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(F, B) )
%   | | | then return 0.06809207789251132;  // std dev = 1.708, 12.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=7 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.07324622576333704;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A) )
%   | | then if ( genre(A, F) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.11468285856428825;  // std dev = 1.731, 30.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=25 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.06842697784420274;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.1424717932235695;  // std dev = 1.05e-08, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | else if ( genre(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(F, A) )
%   | | | then return 0.022693583205794083;  // std dev = 1.708, 12.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=7 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.0641918400820262;  // std dev = 1.32e-09, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.268768
   Precision = 0.059638 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.112563


Total learning time: 0.718 seconds
Total inference time: 1.035 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 0.972
   AUC PR    = 0.972812
   CLL	      = -0.236545
   Precision = 0.833333 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.909091


Total scoring time: 0.386 seconds
Parameter learned model CLL: -0.236545


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 18], 'true,false,false,true': [1.708, 5, 7], 'true,false,false,false': [0.0, 0, 0], 'false,true': [7.45e-09, 20, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [7.3e-08, 0, 18], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [1.708, 5, 7], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 20, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [1.83, 5, 25], 'true,false,false': [0.0, 0, 0], 'false,true': [3.48e-09, 20, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [3.65e-08, 0, 18], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [1.708, 5, 7], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 20, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [4.21e-08, 0, 18], 'true,false,false,true': [1.708, 5, 7], 'true,false,false,false': [0.0, 0, 0], 'false,true': [2.95e-09, 20, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, B)', 'true,false,true': 'genre(B, F)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 0, 18], 'true,false,true,true': [0.0, 0, 0], 'true,false,true,false': [1.708, 5, 7], 'true,false,false': [0.0, 0, 0], 'false,true': [1.39e-08, 20, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 18], 'true,false,false,true': [1.708, 5, 7], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 20, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 0, 18], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [1.708, 5, 7], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 20, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'true,false,true': 'genre(A, F)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 0, 0], 'true,false,true,true': [0.0, 0, 0], 'true,false,true,false': [1.731, 5, 25], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 20, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [1.05e-08, 0, 18], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [1.708, 5, 7], 'true,false,false,false': [0.0, 0, 0], 'false,true': [1.32e-09, 20, 0], 'false,false': [0.0, 0, 0]}]]
[{'': [0.13888888888888987, 2.7755575615628915e-18], 'true': [nan, 0.13888888888888987], 'true,false': [-2.9605947323337506e-16, 0.2430555555555555], 'true,false,false': [0.2430555555555555, nan], 'false': [2.7755575615628915e-18, nan]}, {'': [0.12506772643262334, 0.0], 'true': [2.9605947323337506e-16, 0.24305555555555558], 'true,false': [nan, 0.24305555555555558], 'true,false,false': [0.24305555555555558, nan], 'false': [0.0, nan]}, {'': [0.11162718992884295, 1.1102230246251566e-17], 'true': [nan, 0.11162718992884295], 'true,false': [0.11162718992884295, nan], 'false': [1.1102230246251566e-17, nan]}, {'': [0.10997381611937587, -1.3877787807814458e-18], 'true': [7.401486830834377e-17, 0.24305555555555547], 'true,false': [nan, 0.24305555555555547], 'true,false,false': [0.24305555555555547, nan], 'false': [-1.3877787807814458e-18, nan]}, {'': [0.10469956556668915, 6.938893903907228e-18], 'true': [nan, 0.10469956556668915], 'true,false': [9.868649107779169e-17, 0.24305555555555558], 'true,false,false': [0.24305555555555558, nan], 'false': [6.938893903907228e-18, nan]}, {'': [0.10229164094453677, 9.714451465470119e-18], 'true': [0.0, 0.24305555555555555], 'true,false': [0.24305555555555555, nan], 'true,false,true': [nan, 0.24305555555555555], 'false': [9.714451465470119e-18, nan]}, {'': [0.10108071799273657, 0.0], 'true': [nan, 0.10108071799273657], 'true,false': [-4.9343245538895844e-17, 0.2430555555555556], 'true,false,false': [0.2430555555555556, nan], 'false': [0.0, nan]}, {'': [0.10038073916201469, -1.3877787807814458e-18], 'true': [-1.850371707708594e-17, 0.24305555555555558], 'true,false': [nan, 0.24305555555555558], 'true,false,false': [0.24305555555555558, nan], 'false': [-1.3877787807814458e-18, nan]}, {'': [0.09991664059476739, -2.7755575615628915e-18], 'true': [nan, 0.09991664059476739], 'true,false': [0.09991664059476739, nan], 'true,false,true': [nan, 0.09991664059476739], 'false': [-2.7755575615628915e-18, nan]}, {'': [0.10066545892503716, 2.0816681711721684e-18], 'true': [6.1679056923619804e-18, 0.24305555555555555], 'true,false': [nan, 0.24305555555555555], 'true,false,false': [0.24305555555555555, nan], 'false': [2.0816681711721684e-18, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;true;genre(B, D).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;true;genre(B, D).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;true;genre(B, E).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;true;genre(B, D).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(B, E).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;true;genre(B, D).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;true;genre(B, D).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.8581489350995123;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | else if ( actor(B) )
%   | | then return -0.14185106490048777;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.8581489350995123;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   else return -0.14185106490048777;  // std dev = 7.45e-09, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7194734122109542;  // std dev = 7.30e-08, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | else if ( actor(B) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.7194734122109543;  // std dev = 2.11e-08, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   else return -0.12544463852839138;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B) )
%   | then return 0.5553664367462846;  // std dev = 0.000, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | else return -0.11231637819360638;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else return -0.11231637819360636;  // std dev = 1.49e-08, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.4175135841583098;  // std dev = 5.58e-08, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | else if ( actor(B) )
%   | | then return -0.10159632948783633;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.41751358415830986;  // std dev = 2.58e-08, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   else return -0.10159632948783634;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.3207118471601496;  // std dev = 2.11e-08, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | else if ( actor(B) )
%   | | then return -0.09269127618926098;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.3207118471601497;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   else return -0.09269127618926093;  // std dev = 1.18e-08, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.25517224256948945;  // std dev = 1.49e-08, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | else if ( actor(B) )
%   | | then return -0.08518475138839687;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.2551722425694894;  // std dev = 1.29e-08, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   else return -0.08518475138839683;  // std dev = 1.39e-08, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.20975771563253562;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | else if ( actor(B) )
%   | | then return -0.07877675473109177;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.2097577156325356;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   else return -0.07877675473109179;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.17709649774527744;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | else if ( actor(B) )
%   | | then return -0.07324622576333704;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.17709649774527736;  // std dev = 5.27e-09, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   else return -0.07324622576333704;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.06842697784420272;  // std dev = 1.86e-09, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else return 0.15274385809367086;  // std dev = 0.000, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   else return -0.06842697784420274;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.13400703000801117;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | else if ( actor(B) )
%   | | then return -0.0641918400820262;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.13400703000801117;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   else return -0.0641918400820262;  // std dev = 6.45e-09, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */


Results
   AUC ROC   = 0.999547
   AUC PR    = 0.949153
   CLL	      = -0.065262
   Precision = 0.949153 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.973913


Total learning time: 0.872 seconds
Total inference time: 0.888 seconds
AUC ROC: 0.999547


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.094637
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 0.366 seconds
Refined model CLL: -0.094637


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.999547
   AUC PR    = 0.949153
   CLL	      = -0.065262
   Precision = 0.949153 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.973913


Total learning time: 2.342 seconds
Total inference time: 0.888 seconds
AUC ROC: 0.999547
Total revision time: 2.342
Best scored revision CLL: -0.094637


Dataset: 4_cora_imdb, Fold: 1, Type: Transfer (trRDN-B), Time: 00:05:58
{'AUC ROC': 0.999547, 'AUC PR': 0.949153, 'CLL': -0.065262, 'Precision': [0.949153, 0.5], 'Recall': 1.0, 'F1': 0.973913, 'Learning time': 2.342, 'Inference time': 0.888, 'parameter_25': {'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.268768, 'Precision': [0.059638, 0.5], 'Recall': 1.0, 'F1': 0.112563, 'Learning time': 0.718, 'Inference time': 1.035}}


Starting fold 2

Target train facts examples: 870
Target train pos examples: 324
Target train neg examples: 10813

Target test facts examples: 208
Target test pos	 examples: 58
Target test neg examples: 3423

Amount of data: 5
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;title(I, H), venue(I, A).;false;false
0;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
0;false;haswordvenue(A, L), haswordtitle(M, L).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordtitle(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordauthor(I, H).;false;true
2;true,false,false;haswordvenue(A, J), haswordtitle(K, J).;false;false
2;false;haswordvenue(A, L), haswordtitle(M, L).;true;false
2;false,true;haswordauthor(N, L).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;title(E, D), venue(E, B).;false;true
3;true,true,false;title(F, D), venue(F, A).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, A).;false;true
4;true,true,false;title(F, D), venue(F, B).;false;false
4;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
4;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
4;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
4;false,true;haswordauthor(M, K).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, B).;false;true
5;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
5;true,false;haswordvenue(B, H), haswordtitle(I, H).;true;true
5;true,false,true;title(J, I), venue(J, B).;false;false
5;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
5;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;title(E, D), venue(E, A).;false;true
6;true,true,false;title(F, D), venue(F, B).;false;false
6;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
6;true,false,true;title(I, H), venue(I, B).;false;false
6;true,false,false;haswordvenue(A, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;title(F, D), venue(F, A).;false;false
7;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
7;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
7;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
7;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;title(E, D), venue(E, A).;false;true
8;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
8;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
8;true,false,true;title(J, I), venue(J, A).;false;false
8;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
8;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, B).;false;true
9;true,true,false;title(F, D), venue(F, A).;false;false
9;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
9;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
9;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
9;false,true;haswordauthor(M, K).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995122;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.14185106490048777;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.14185106490048777;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7194734122109545;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else if ( genre(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(F, B) )
%   | | | then return -0.12544463852839138;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.12544463852839138;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A) )
%   | | then return 0.44408596758963603;  // std dev = 0.610, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.11231637819360639;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.4447988520039283;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else if ( genre(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(F, B) )
%   | | | then return -0.16476268394672763;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.10159632948783628;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( genre(B, E) )
%   | | then return 0.3392793852013426;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.14332149068065764;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.09269127618926096;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.26780523845758497;  // std dev = 1.05e-08, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else if ( movie(E, B) )
%   | | then if ( genre(B, F) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.12660743296270735;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.08518475138839687;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( genre(B, E) )
%   | | then return 0.21864301681019258;  // std dev = 7.45e-09, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else if ( movie(F, B) )
%   | | | then return -0.11325642590314079;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.07877675473109173;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.18358653197988706;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else if ( genre(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(F, B) )
%   | | | then return -0.10237059603983752;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.07324622576333704;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A) )
%   | | then if ( genre(A, F) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.11581812324404982;  // std dev = 0.229, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.06842697784420272;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.14287183817646565;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else if ( genre(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(F, A) )
%   | | | then return -0.10361292501647422;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.0641918400820262;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.074371
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 0.581 seconds
Total inference time: 1.005 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.102333
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 0.333 seconds
Parameter learned model CLL: -0.102333


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 5], 'true,false,false,true': [0.0, 1, 0], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 4, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 5], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 1, 0], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 4, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.61, 1, 5], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 4, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 5], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 1, 0], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 4, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 5], 'true,false,false,true': [0.0, 1, 0], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 4, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, B)', 'true,false,true': 'genre(B, F)', 'false': 'movie(G, A)'}, {'true,true': [1.05e-08, 0, 5], 'true,false,true,true': [0.0, 0, 0], 'true,false,true,false': [0.0, 1, 0], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 4, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [7.45e-09, 0, 5], 'true,false,false,true': [0.0, 1, 0], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 4, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 0, 5], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 1, 0], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 4, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'true,false,true': 'genre(A, F)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 0, 0], 'true,false,true,true': [0.0, 0, 0], 'true,false,true,false': [0.229, 1, 5], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 4, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 5], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 1, 0], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 4, 0], 'false,false': [0.0, 0, 0]}]]
[{'': [0.1388888888888887, 0.0], 'true': [nan, 0.1388888888888887], 'true,false': [0.0, 0.0], 'false': [0.0, nan], 'true,false,false': [0.0, nan]}, {'': [0.09915090450905224, 0.0], 'true': [0.0, 0.0], 'false': [0.0, nan], 'true,false': [nan, 0.0], 'true,false,false': [0.0, nan]}, {'': [0.061916714078618984, 0.0], 'true': [nan, 0.061916714078618984], 'true,false': [0.061916714078618984, nan], 'false': [0.0, nan]}, {'': [0.051606286959794835, 0.0], 'true': [0.0, 0.0], 'false': [0.0, nan], 'true,false': [nan, 0.0], 'true,false,false': [0.0, nan]}, {'': [0.03234772297251024, 0.0], 'true': [nan, 0.03234772297251024], 'true,false': [-2.2204460492503132e-17, 0.0], 'false': [0.0, nan], 'true,false,false': [0.0, nan]}, {'': [0.021605743802346058, 0.0], 'true': [2.2204460492503132e-17, 0.0], 'false': [0.0, nan], 'true,false': [0.0, nan], 'true,false,true': [nan, 0.0]}, {'': [0.015299616676864075, 0.0], 'true': [nan, 0.015299616676864075], 'true,false': [1.1102230246251566e-17, 0.0], 'false': [0.0, nan], 'true,false,false': [0.0, nan]}, {'': [0.011357149870179049, 0.0], 'true': [0.0, 0.0], 'false': [0.0, nan], 'true,false': [nan, 0.0], 'true,false,false': [0.0, nan]}, {'': [0.008749356217304974, 0.0], 'true': [nan, 0.008749356217304974], 'true,false': [0.008749356217304974, nan], 'true,false,true': [nan, 0.008749356217304974], 'false': [0.0, nan]}, {'': [0.008438158123094395, 0.0], 'true': [0.0, 0.0], 'false': [0.0, nan], 'true,false': [nan, 0.0], 'true,false,false': [0.0, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;true;genre(B, D).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;true;genre(B, D).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;true;genre(B, E).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;true;genre(B, D).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(B, E).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;true;genre(B, D).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;true;genre(B, D).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.8581489350995122;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return -0.14185106490048777;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   else return -0.14185106490048777;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7194734122109545;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return -0.12544463852839138;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   else return -0.12544463852839138;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.44408596758963603;  // std dev = 0.610, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   else return -0.11231637819360639;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.4447988520039283;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return -0.16476268394672763;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   else return -0.10159632948783628;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.3392793852013426;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return -0.14332149068065764;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   else return -0.09269127618926096;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.26780523845758497;  // std dev = 1.05e-08, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return -0.12660743296270735;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   else return -0.08518475138839687;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.21864301681019258;  // std dev = 7.45e-09, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return -0.11325642590314079;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   else return -0.07877675473109173;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.18358653197988706;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return -0.10237059603983752;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   else return -0.07324622576333704;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.11581812324404982;  // std dev = 0.229, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   else return -0.06842697784420272;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.14287183817646565;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return -0.10361292501647422;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   else return -0.0641918400820262;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */


Results
   AUC ROC   = 0.999416
   AUC PR    = 0.935484
   CLL	      = -0.075363
   Precision = 0.935484 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.966667


Total learning time: 0.549 seconds
Total inference time: 0.913 seconds
AUC ROC: 0.999416


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.102333
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 0.313 seconds
Refined model CLL: -0.102333


******************************************
Best model found
******************************************
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.074371
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 1.776 seconds
Total inference time: 1.005 seconds
AUC ROC: 1.0
Total revision time: 1.776
Best scored revision CLL: -0.102333


Dataset: 4_cora_imdb, Fold: 2, Type: Transfer (trRDN-B), Time: 00:06:02
{'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.074371, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 1.776, 'Inference time': 1.005, 'parameter_5': {'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.074371, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 0.581, 'Inference time': 1.005}}


Amount of data: 10
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;title(I, H), venue(I, A).;false;false
0;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
0;false;haswordvenue(A, L), haswordtitle(M, L).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordtitle(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordauthor(I, H).;false;true
2;true,false,false;haswordvenue(A, J), haswordtitle(K, J).;false;false
2;false;haswordvenue(A, L), haswordtitle(M, L).;true;false
2;false,true;haswordauthor(N, L).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;title(E, D), venue(E, B).;false;true
3;true,true,false;title(F, D), venue(F, A).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, A).;false;true
4;true,true,false;title(F, D), venue(F, B).;false;false
4;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
4;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
4;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
4;false,true;haswordauthor(M, K).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, B).;false;true
5;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
5;true,false;haswordvenue(B, H), haswordtitle(I, H).;true;true
5;true,false,true;title(J, I), venue(J, B).;false;false
5;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
5;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;title(E, D), venue(E, A).;false;true
6;true,true,false;title(F, D), venue(F, B).;false;false
6;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
6;true,false,true;title(I, H), venue(I, B).;false;false
6;true,false,false;haswordvenue(A, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;title(F, D), venue(F, A).;false;false
7;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
7;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
7;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
7;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;title(E, D), venue(E, A).;false;true
8;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
8;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
8;true,false,true;title(J, I), venue(J, A).;false;false
8;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
8;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, B).;false;true
9;true,true,false;title(F, D), venue(F, A).;false;false
9;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
9;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
9;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
9;false,true;haswordauthor(M, K).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995122;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.14185106490048777;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.1418510649004878;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7194734122109544;  // std dev = 2.98e-08, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | else if ( genre(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(F, B) )
%   | | | then return -0.12544463852839138;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.12544463852839138;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A) )
%   | | then return 0.36459991819203014;  // std dev = 1.129, 14.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=10 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.11231637819360639;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.46450424502783305;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | else if ( genre(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(F, B) )
%   | | | then return -0.15411350790943;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.10159632948783627;  // std dev = 1.32e-09, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( genre(B, E) )
%   | | then return 0.3528062862567392;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.13507538847035874;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.09269127618926097;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.2769717464929016;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | else if ( movie(E, B) )
%   | | then if ( genre(B, F) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.12005761495377339;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.08518475138839687;  // std dev = 2.63e-09, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( genre(B, E) )
%   | | then return 0.22504500656865362;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else if ( movie(F, B) )
%   | | | then return -0.10794150030000192;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.07877675473109173;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.18823044000513778;  // std dev = 7.45e-09, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | else if ( genre(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(F, B) )
%   | | | then return -0.09797907375450264;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.07324622576333704;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A) )
%   | | then if ( genre(A, F) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.08948353876315848;  // std dev = 0.424, 14.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=10 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.06842697784420272;  // std dev = 1.86e-09, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.1494065042438021;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | else if ( genre(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(F, A) )
%   | | | then return -0.09723080550497225;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.0641918400820262;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.073082
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 0.647 seconds
Total inference time: 1.017 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.107786
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 0.336 seconds
Parameter learned model CLL: -0.107786


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 10], 'true,false,false,true': [0.0, 4, 0], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 6, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [2.98e-08, 0, 10], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 4, 0], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 6, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [1.129, 4, 10], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 6, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 10], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 4, 0], 'true,false,false,false': [0.0, 0, 0], 'false,true': [1.32e-09, 6, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 10], 'true,false,false,true': [0.0, 4, 0], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 6, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, B)', 'true,false,true': 'genre(B, F)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 0, 10], 'true,false,true,true': [0.0, 0, 0], 'true,false,true,false': [0.0, 4, 0], 'true,false,false': [0.0, 0, 0], 'false,true': [2.63e-09, 6, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 10], 'true,false,false,true': [0.0, 4, 0], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 6, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, A)'}, {'true,true': [7.45e-09, 0, 10], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 4, 0], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 6, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'true,false,true': 'genre(A, F)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 0, 0], 'true,false,true,true': [0.0, 0, 0], 'true,false,true,false': [0.424, 4, 10], 'true,false,false': [0.0, 0, 0], 'false,true': [1.86e-09, 6, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 10], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 4, 0], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 6, 0], 'false,false': [0.0, 0, 0]}]]
[{'': [0.20408163265306115, -6.938893903907228e-18], 'true': [nan, 0.20408163265306115], 'true,false': [-8.881784197001253e-17, 0.0], 'true,false,false': [0.0, nan], 'false': [-6.938893903907228e-18, nan]}, {'': [0.14569112499289297, -2.3129646346357427e-18], 'true': [8.881784197001253e-17, 0.0], 'true,false': [nan, 0.0], 'true,false,false': [0.0, nan], 'false': [-2.3129646346357427e-18, nan]}, {'': [0.09097966150327672, 0.0], 'true': [nan, 0.09097966150327672], 'true,false': [0.09097966150327672, nan], 'false': [0.0, nan]}, {'': [0.07809957637737727, 0.0], 'true': [0.0, 0.0], 'false': [0.0, nan], 'true,false': [nan, 0.0], 'true,false,false': [0.0, nan]}, {'': [0.0485772507213301, 1.1564823173178713e-18], 'true': [nan, 0.0485772507213301], 'true,false': [-4.4408920985006264e-17, 0.0], 'false': [1.1564823173178713e-18, nan], 'true,false,false': [0.0, nan]}, {'': [0.03216985996954173, 1.1564823173178713e-18], 'true': [-2.2204460492503132e-17, 0.0], 'false': [1.1564823173178713e-18, nan], 'true,false': [0.0, nan], 'true,false,true': [nan, 0.0]}, {'': [0.02262857423603859, -1.1564823173178713e-18], 'true': [nan, 0.02262857423603859], 'true,false': [-2.2204460492503132e-17, 0.0], 'true,false,false': [0.0, nan], 'false': [-1.1564823173178713e-18, nan]}, {'': [0.016717527707455056, 0.0], 'true': [5.551115123125783e-18, 0.0], 'false': [0.0, nan], 'true,false': [nan, 0.0], 'true,false,false': [0.0, nan]}, {'': [0.0128361505980383, 5.782411586589357e-19], 'true': [nan, 0.0128361505980383], 'true,false': [0.0128361505980383, nan], 'true,false,true': [nan, 0.0128361505980383], 'false': [5.782411586589357e-19, nan]}, {'': [0.012414278073492416, -5.782411586589357e-19], 'true': [-5.551115123125783e-18, 0.0], 'true,false': [nan, 0.0], 'true,false,false': [0.0, nan], 'false': [-5.782411586589357e-19, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;true;genre(B, D).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;true;genre(B, D).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;true;genre(B, E).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;true;genre(B, D).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(B, E).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;true;genre(B, D).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;true;genre(B, D).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.8581489350995122;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | else return -0.14185106490048777;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   else return -0.1418510649004878;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7194734122109544;  // std dev = 2.98e-08, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | else return -0.12544463852839138;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   else return -0.12544463852839138;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.11231637819360639;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else return 0.5553664367462846;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else return -0.11231637819360639;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.41751358415830986;  // std dev = 3.65e-08, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | else return -0.10159632948783628;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   else return -0.10159632948783627;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.3207118471601497;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | else return -0.09269127618926096;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   else return -0.09269127618926097;  // std dev = 2.63e-09, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.2551722425694894;  // std dev = 1.83e-08, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | else return -0.08518475138839687;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   else return -0.08518475138839687;  // std dev = 2.63e-09, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.2097577156325356;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | else return -0.07877675473109173;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   else return -0.07877675473109173;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.17709649774527736;  // std dev = 7.45e-09, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | else return -0.07324622576333704;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   else return -0.07324622576333704;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.06842697784420272;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else return 0.15274385809367094;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else return -0.06842697784420272;  // std dev = 1.86e-09, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.13400703000801117;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | else return -0.0641918400820262;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   else return -0.0641918400820262;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */


Results
   AUC ROC   = 0.999416
   AUC PR    = 0.935484
   CLL	      = -0.065794
   Precision = 0.935484 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.966667


Total learning time: 0.632 seconds
Total inference time: 0.892 seconds
AUC ROC: 0.999416


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.094637
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 0.322 seconds
Refined model CLL: -0.094637


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.999416
   AUC PR    = 0.935484
   CLL	      = -0.065794
   Precision = 0.935484 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.966667


Total learning time: 1.9370000000000003 seconds
Total inference time: 0.892 seconds
AUC ROC: 0.999416
Total revision time: 1.9370000000000003
Best scored revision CLL: -0.094637


Dataset: 4_cora_imdb, Fold: 2, Type: Transfer (trRDN-B), Time: 00:06:07
{'AUC ROC': 0.999416, 'AUC PR': 0.935484, 'CLL': -0.065794, 'Precision': [0.935484, 0.5], 'Recall': 1.0, 'F1': 0.966667, 'Learning time': 1.9370000000000003, 'Inference time': 0.892, 'parameter_10': {'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.073082, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 0.647, 'Inference time': 1.017}}


Amount of data: 15
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;title(I, H), venue(I, A).;false;false
0;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
0;false;haswordvenue(A, L), haswordtitle(M, L).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordtitle(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordauthor(I, H).;false;true
2;true,false,false;haswordvenue(A, J), haswordtitle(K, J).;false;false
2;false;haswordvenue(A, L), haswordtitle(M, L).;true;false
2;false,true;haswordauthor(N, L).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;title(E, D), venue(E, B).;false;true
3;true,true,false;title(F, D), venue(F, A).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, A).;false;true
4;true,true,false;title(F, D), venue(F, B).;false;false
4;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
4;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
4;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
4;false,true;haswordauthor(M, K).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, B).;false;true
5;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
5;true,false;haswordvenue(B, H), haswordtitle(I, H).;true;true
5;true,false,true;title(J, I), venue(J, B).;false;false
5;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
5;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;title(E, D), venue(E, A).;false;true
6;true,true,false;title(F, D), venue(F, B).;false;false
6;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
6;true,false,true;title(I, H), venue(I, B).;false;false
6;true,false,false;haswordvenue(A, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;title(F, D), venue(F, A).;false;false
7;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
7;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
7;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
7;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;title(E, D), venue(E, A).;false;true
8;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
8;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
8;true,false,true;title(J, I), venue(J, A).;false;false
8;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
8;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, B).;false;true
9;true,true,false;title(F, D), venue(F, A).;false;false
9;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
9;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
9;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
9;false,true;haswordauthor(M, K).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14185106490048777;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995123;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.0010060779566550668;  // std dev = 0.926, 7.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=1 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.1418510649004878;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7194734122109542;  // std dev = 5.16e-08, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( movie(F, B) )
%   | | | then return 8.835646163369372E-4;  // std dev = 0.926, 7.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=1 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.12544463852839138;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.11231637819360639;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( movie(E, A) )
%   | | then return 0.3705029235979221;  // std dev = 1.514, 21.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=15 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.11231637819360639;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.46303624301550705;  // std dev = 3.65e-08, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | else if ( genre(A, E) )
%   | | then return -0.10159632948783628;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( movie(F, B) )
%   | | | then return -0.050614604652690416;  // std dev = 0.926, 7.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=1 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.10159632948783627;  // std dev = 1.32e-09, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.09269127618926096;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( genre(B, E) )
%   | | then return 0.3517942864416366;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.042838977231041915;  // std dev = 0.926, 7.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=1 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.09269127618926097;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.27628678486612845;  // std dev = 2.98e-08, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | else if ( movie(E, B) )
%   | | then if ( genre(B, F) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.04254025993478425;  // std dev = 0.927, 8.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.08518475138839687;  // std dev = 3.73e-09, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.08192762835271333;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( genre(B, E) )
%   | | then return 0.22456785225058962;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | else if ( movie(F, B) )
%   | | | then return -0.030273351740128497;  // std dev = 0.926, 7.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=1 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.07877675473109173;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.18788522044326486;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | else if ( genre(A, E) )
%   | | then return -0.07597269830424452;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( movie(F, B) )
%   | | | then return -0.02598231926513656;  // std dev = 0.926, 7.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=1 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.07324622576333704;  // std dev = 9.31e-10, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.07080820585361475;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( movie(E, A) )
%   | | then if ( genre(A, F) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.09979745313039988;  // std dev = 1.007, 21.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=15 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.06842697784420272;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.14785897203968656;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | else if ( genre(A, E) )
%   | | then return -0.0662886606846238;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.03659561599369327;  // std dev = 0.926, 7.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=1 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.0641918400820262;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.095293
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 0.668 seconds
Total inference time: 1.035 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 0.986667
   AUC PR    = 0.990476
   CLL	      = -0.180385
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.933333
   F1        = 0.965517


Total scoring time: 0.365 seconds
Parameter learned model CLL: -0.180385


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 1, 0], 'true,false,true': [0.0, 0, 14], 'true,false,false,true': [0.926, 6, 1], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 8, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [5.16e-08, 0, 14], 'true,false,true': [0.0, 1, 0], 'true,false,false,true': [0.926, 6, 1], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 8, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.0, 1, 0], 'true,false,true': [1.514, 6, 15], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 8, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [3.65e-08, 0, 14], 'true,false,true': [0.0, 1, 0], 'true,false,false,true': [0.926, 6, 1], 'true,false,false,false': [0.0, 0, 0], 'false,true': [1.32e-09, 8, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 1, 0], 'true,false,true': [0.0, 0, 14], 'true,false,false,true': [0.926, 6, 1], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 8, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, B)', 'true,false,true': 'genre(B, F)', 'false': 'movie(G, A)'}, {'true,true': [2.98e-08, 0, 14], 'true,false,true,true': [0.0, 0, 0], 'true,false,true,false': [0.927, 7, 1], 'true,false,false': [0.0, 0, 0], 'false,true': [3.73e-09, 8, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 1, 0], 'true,false,true': [0.0, 0, 14], 'true,false,false,true': [0.926, 6, 1], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 8, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 0, 14], 'true,false,true': [0.0, 1, 0], 'true,false,false,true': [0.926, 6, 1], 'true,false,false,false': [0.0, 0, 0], 'false,true': [9.31e-10, 8, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'true,false,true': 'genre(A, F)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 1, 0], 'true,false,true,true': [0.0, 0, 0], 'true,false,true,false': [1.007, 6, 15], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 8, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 14], 'true,false,true': [0.0, 1, 0], 'true,false,false,true': [0.926, 6, 1], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 8, 0], 'false,false': [0.0, 0, 0]}]]
[{'': [0.21694214876033016, -6.938893903907228e-18], 'true': [0.0, 0.20408163265306084], 'true,false': [-2.5376526277146434e-16, 0.12244897959183677], 'true,false,false': [0.12244897959183677, nan], 'false': [-6.938893903907228e-18, nan]}, {'': [0.16439599153821735, 0.0], 'true': [1.9032394707859825e-16, 0.10888835252361383], 'true,false': [0.0, 0.12244897959183668], 'true,false,false': [0.12244897959183668, nan], 'false': [0.0, nan]}, {'': [0.11431777270045253, -1.734723475976807e-18], 'true': [0.0, 0.10916536351772166], 'true,false': [0.10916536351772166, nan], 'false': [-1.734723475976807e-18, nan]}, {'': [0.10164198541831139, 1.734723475976807e-18], 'true': [9.516197353929913e-17, 0.10742713767207844], 'true,false': [0.0, 0.12244897959183668], 'true,false,false': [0.12244897959183668, nan], 'false': [1.734723475976807e-18, nan]}, {'': [0.07624494605092184, 0.0], 'true': [0.0, 0.07542419604104557], 'true,false': [0.0, 0.12244897959183675], 'true,false,false': [0.12244897959183675, nan], 'false': [0.0, nan]}, {'': [0.06257798167410808, 1.734723475976807e-18], 'true': [6.344131569286608e-17, 0.10740265037876247], 'true,false': [0.10740265037876247, nan], 'true,false,true': [nan, 0.10740265037876247], 'false': [1.734723475976807e-18, nan]}, {'': [0.05486671191870649, 0.0], 'true': [0.0, 0.055248335253154195], 'true,false': [-2.3790493384824782e-17, 0.12244897959183676], 'true,false,false': [0.12244897959183676, nan], 'false': [0.0, nan]}, {'': [0.05027228088043292, 8.673617379884035e-19], 'true': [-7.93016446160826e-18, 0.10741618942372144], 'true,false': [0.0, 0.12244897959183673], 'true,false,false': [0.12244897959183673, nan], 'false': [8.673617379884035e-19, nan]}, {'': [0.04734686001442014, 0.0], 'true': [0.0, 0.04827845917436058], 'true,false': [0.04827845917436058, nan], 'true,false,true': [nan, 0.04827845917436058], 'false': [0.0, nan]}, {'': [0.047189351302576905, 0.0], 'true': [0.0, 0.10723929055412468], 'true,false': [0.0, 0.12244897959183672], 'true,false,false': [0.12244897959183672, nan], 'false': [0.0, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(A, D).;true;true
0;true,false;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;true;genre(B, D).;true;true
1;true,false;genre(A, E).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;true;genre(A, D).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;true;genre(B, D).;true;true
3;true,false;genre(A, E).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;true;genre(A, D).;true;true
4;true,false;genre(B, E).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;true;genre(B, D).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(A, D).;true;true
6;true,false;genre(B, E).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;true;genre(B, D).;true;true
7;true,false;genre(A, E).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;true;genre(A, D).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;true;genre(B, D).;true;true
9;true,false;genre(A, E).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14185106490048777;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995123;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | else if ( female(A) )
%   | | | then return 0.10814893509951219;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | else return -0.14185106490048777;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else return -0.1418510649004878;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7194734122109542;  // std dev = 5.16e-08, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( female(A), actor(B) )
%   | | | then return -0.1555325621642444;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.11703338056264537;  // std dev = 0.840, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   else return -0.12544463852839138;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.11231637819360639;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( actor(B) )
%   | | then return -0.1375185872667251;  // std dev = 0.003, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else if ( female(A) )
%   | | | then return 0.5943811347938913;  // std dev = 0.253, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return 0.5553664367462846;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   else return -0.11231637819360639;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.41346076173763774;  // std dev = 0.018, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | else if ( genre(A, E) )
%   | | then return -0.10159632948783628;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( female(A) )
%   | | | then return 0.09120078591012079;  // std dev = 0.734, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | else return -0.12321443173033224;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else return -0.10159632948783627;  // std dev = 3.73e-09, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.09269127618926096;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( genre(B, E) )
%   | | then return 0.3179731305233279;  // std dev = 0.016, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | else if ( female(A), actor(B) )
%   | | | then return -0.13082301068331875;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.09430123215045484;  // std dev = 0.709, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   else return -0.09269127618926097;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.2533071281226243;  // std dev = 0.014, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | else if ( female(A) )
%   | | then return 0.08473349867963054;  // std dev = 0.698, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | else return -0.11138974073565691;  // std dev = 0.030, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   else return -0.08518475138839687;  // std dev = 3.73e-09, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.07689590180375967;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( genre(B, E) )
%   | | then return 0.20844210249515455;  // std dev = 0.012, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | else if ( female(A), actor(B) )
%   | | | then return -0.1256708256965964;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.08598096857877639;  // std dev = 0.675, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   else return -0.07877675473109173;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.17613269643575521;  // std dev = 0.010, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | else if ( genre(A, E) )
%   | | then return -0.0716121170995662;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( female(A) )
%   | | | then return 0.07841991592712591;  // std dev = 0.661, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | else return -0.1174649780086429;  // std dev = 2.63e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else return -0.07324622576333704;  // std dev = 2.63e-09, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.06699469516878147;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( actor(B) )
%   | | then return -0.11319718377802816;  // std dev = 0.018, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else if ( female(A) )
%   | | | then return 0.21829046614872852;  // std dev = 0.448, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return 0.15416451026911426;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   else return -0.06842697784420272;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.1301412005647428;  // std dev = 0.021, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | else if ( genre(A, E) )
%   | | then return -0.06292662974177565;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( female(A), actor(B) )
%   | | | then return -0.10907359052998018;  // std dev = 2.63e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.07360269126642799;  // std dev = 0.586, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   else return -0.0641918400820262;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.074461
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 1.036 seconds
Total inference time: 1.007 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.125062
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.933333
   F1        = 0.965517


Total scoring time: 0.355 seconds
Refined model CLL: -0.125062


******************************************
Best model found
******************************************
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.074461
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 2.424 seconds
Total inference time: 1.007 seconds
AUC ROC: 1.0
Total revision time: 2.424
Best scored revision CLL: -0.125062


Dataset: 4_cora_imdb, Fold: 2, Type: Transfer (trRDN-B), Time: 00:06:11
{'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.074461, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 2.424, 'Inference time': 1.007, 'parameter_15': {'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.095293, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 0.668, 'Inference time': 1.035}}


Amount of data: 20
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;title(I, H), venue(I, A).;false;false
0;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
0;false;haswordvenue(A, L), haswordtitle(M, L).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordtitle(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordauthor(I, H).;false;true
2;true,false,false;haswordvenue(A, J), haswordtitle(K, J).;false;false
2;false;haswordvenue(A, L), haswordtitle(M, L).;true;false
2;false,true;haswordauthor(N, L).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;title(E, D), venue(E, B).;false;true
3;true,true,false;title(F, D), venue(F, A).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, A).;false;true
4;true,true,false;title(F, D), venue(F, B).;false;false
4;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
4;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
4;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
4;false,true;haswordauthor(M, K).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, B).;false;true
5;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
5;true,false;haswordvenue(B, H), haswordtitle(I, H).;true;true
5;true,false,true;title(J, I), venue(J, B).;false;false
5;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
5;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;title(E, D), venue(E, A).;false;true
6;true,true,false;title(F, D), venue(F, B).;false;false
6;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
6;true,false,true;title(I, H), venue(I, B).;false;false
6;true,false,false;haswordvenue(A, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;title(F, D), venue(F, A).;false;false
7;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
7;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
7;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
7;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;title(E, D), venue(E, A).;false;true
8;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
8;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
8;true,false,true;title(J, I), venue(J, A).;false;false
8;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
8;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, B).;false;true
9;true,true,false;title(F, D), venue(F, A).;false;false
9;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
9;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
9;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
9;false,true;haswordauthor(M, K).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14185106490048777;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995123;  // std dev = 0.000, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.030739953789376676;  // std dev = 0.943, 9.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=1 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.1418510649004878;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7194734122109542;  // std dev = 7.30e-08, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( movie(F, B) )
%   | | | then return -0.027039036105351237;  // std dev = 0.943, 9.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=1 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.12544463852839138;  // std dev = 5.27e-09, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.11231637819360639;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( movie(E, A) )
%   | | then return 0.3691893945883211;  // std dev = 1.714, 28.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=20 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.11231637819360638;  // std dev = 1.32e-09, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.46336284637843395;  // std dev = 0.000, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | else if ( genre(A, E) )
%   | | then return -0.10159632948783628;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( movie(F, B) )
%   | | | then return -0.07302240471158311;  // std dev = 0.943, 9.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=1 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.10159632948783628;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.09269127618926096;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( genre(B, E) )
%   | | then return 0.352019373001771;  // std dev = 0.000, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.06230434607582996;  // std dev = 0.943, 9.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=1 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.09269127618926097;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.27643914237734624;  // std dev = 0.000, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | else if ( movie(E, B) )
%   | | then if ( genre(B, F) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.05671739466859688;  // std dev = 0.943, 10.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=1 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.08518475138839687;  // std dev = 5.27e-09, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.08086758886891979;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( genre(B, E) )
%   | | then return 0.2246740034405157;  // std dev = 0.000, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | else if ( movie(F, B) )
%   | | | then return -0.04590045828696147;  // std dev = 0.943, 9.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=1 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.07877675473109172;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.18796203285556112;  // std dev = 0.000, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | else if ( genre(A, E) )
%   | | then return -0.07505697349916286;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( movie(F, B) )
%   | | | then return -0.039920319620027116;  // std dev = 0.943, 9.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=1 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.07324622576333704;  // std dev = 1.32e-09, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.07000961586518012;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( movie(E, A) )
%   | | then if ( genre(A, F) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.09799850811577748;  // std dev = 1.060, 28.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=20 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.06842697784420272;  // std dev = 2.63e-09, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.14813959282434658;  // std dev = 2.11e-08, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | else if ( genre(A, E) )
%   | | then return -0.06558637237142184;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.047519030188057115;  // std dev = 0.943, 9.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=1 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.06419184008202619;  // std dev = 1.61e-09, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.089011
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 0.671 seconds
Total inference time: 1.007 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 0.99
   AUC PR    = 0.992857
   CLL	      = -0.165206
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.95
   F1        = 0.974359


Total scoring time: 0.379 seconds
Parameter learned model CLL: -0.165206


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 1, 0], 'true,false,true': [0.0, 0, 19], 'true,false,false,true': [0.943, 8, 1], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 11, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [7.3e-08, 0, 19], 'true,false,true': [0.0, 1, 0], 'true,false,false,true': [0.943, 8, 1], 'true,false,false,false': [0.0, 0, 0], 'false,true': [5.27e-09, 11, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.0, 1, 0], 'true,false,true': [1.714, 8, 20], 'true,false,false': [0.0, 0, 0], 'false,true': [1.32e-09, 11, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 19], 'true,false,true': [0.0, 1, 0], 'true,false,false,true': [0.943, 8, 1], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 11, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 1, 0], 'true,false,true': [0.0, 0, 19], 'true,false,false,true': [0.943, 8, 1], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 11, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, B)', 'true,false,true': 'genre(B, F)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 0, 19], 'true,false,true,true': [0.0, 0, 0], 'true,false,true,false': [0.943, 9, 1], 'true,false,false': [0.0, 0, 0], 'false,true': [5.27e-09, 11, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 1, 0], 'true,false,true': [0.0, 0, 19], 'true,false,false,true': [0.943, 8, 1], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 11, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 0, 19], 'true,false,true': [0.0, 1, 0], 'true,false,false,true': [0.943, 8, 1], 'true,false,false,false': [0.0, 0, 0], 'false,true': [1.32e-09, 11, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'true,false,true': 'genre(A, F)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 1, 0], 'true,false,true,true': [0.0, 0, 0], 'true,false,true,false': [1.06, 8, 20], 'true,false,false': [0.0, 0, 0], 'false,true': [2.63e-09, 11, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [2.11e-08, 0, 19], 'true,false,true': [0.0, 1, 0], 'true,false,false,true': [0.943, 8, 1], 'true,false,false,false': [0.0, 0, 0], 'false,true': [1.61e-09, 11, 0], 'false,false': [0.0, 0, 0]}]]
[{'': [0.21403091557669457, -1.0092936587501423e-17], 'true': [0.0, 0.20408163265306145], 'true,false': [-2.8047739569477637e-16, 0.09876543209876548], 'true,false,false': [0.09876543209876548, nan], 'false': [-1.0092936587501423e-17, nan]}, {'': [0.1601947649784856, 2.523234146875356e-18], 'true': [2.8047739569477637e-16, 0.08976041852183059], 'true,false': [0.0, 0.0987654320987654], 'true,false,false': [0.0987654320987654, nan], 'false': [2.523234146875356e-18, nan]}, {'': [0.10902223578858071, 5.046468293750712e-18], 'true': [0.0, 0.10492113502459532], 'true,false': [0.10492113502459532, nan], 'false': [5.046468293750712e-18, nan]}, {'': [0.09637073372799786, 0.0], 'true': [-9.349246523159212e-17, 0.08896237111482959], 'true,false': [0.0, 0.09876543209876541], 'true,false,false': [0.09876543209876541, nan], 'false': [0.0, nan]}, {'': [0.07003357953934347, 0.0], 'true': [0.0, 0.06918808360386382], 'true,false': [-9.349246523159212e-17, 0.09876543209876547], 'true,false,false': [0.09876543209876547, nan], 'false': [0.0, nan]}, {'': [0.05575816077385636, 2.523234146875356e-18], 'true': [-1.1686558153949016e-17, 0.08897893226651246], 'true,false': [0.08897893226651246, nan], 'true,false,true': [nan, 0.08897893226651246], 'false': [2.523234146875356e-18, nan]}, {'': [0.04765938398899549, 0.0], 'true': [0.0, 0.04771414683147625], 'true,false': [0.0, 0.09876543209876543], 'true,false,false': [0.09876543209876543, nan], 'false': [0.0, nan]}, {'': [0.04278642411129618, 6.30808536718839e-19], 'true': [0.0, 0.08900000148901292], 'true,false': [0.0, 0.09876543209876548], 'true,false,false': [0.09876543209876548, nan], 'false': [6.30808536718839e-19, nan]}, {'': [0.03966552002880487, 6.30808536718839e-19], 'true': [0.0, 0.04010881023640896], 'true,false': [0.04010881023640896, nan], 'true,false,true': [nan, 0.04010881023640896], 'false': [6.30808536718839e-19, nan]}, {'': [0.0394707316992225, 2.523234146875356e-18], 'true': [2.337311630789803e-17, 0.08891826748571023], 'true,false': [0.0, 0.0987654320987654], 'true,false,false': [0.0987654320987654, nan], 'false': [2.523234146875356e-18, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(A, D).;true;true
0;true,false;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;true;genre(B, D).;true;true
1;true,false;genre(A, E).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;true;genre(A, D).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;true;genre(B, D).;true;true
3;true,false;genre(A, E).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;true;genre(A, D).;true;true
4;true,false;genre(B, E).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;true;genre(B, D).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(A, D).;true;true
6;true,false;genre(B, E).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;true;genre(B, D).;true;true
7;true,false;genre(A, E).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;true;genre(A, D).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;true;genre(B, D).;true;true
9;true,false;genre(A, E).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14185106490048777;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995123;  // std dev = 0.000, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | else if ( female(A), actor(B) )
%   | | | then return -0.14185106490048777;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | | else return 0.10814893509951222;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   else return -0.1418510649004878;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7194734122109542;  // std dev = 7.30e-08, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( female(A), actor(B) )
%   | | | then return -0.12544463852839138;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | | else return 0.09446743783575559;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   else return -0.12544463852839138;  // std dev = 5.27e-09, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.11231637819360639;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( director(B) )
%   | | then if ( female(A) )
%   | | | then return 0.5860648763532377;  // std dev = 0.260, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.5553664367462846;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | else return -0.13332808891768083;  // std dev = 0.077, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   else return -0.11231637819360638;  // std dev = 7.45e-09, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.4143783011547219;  // std dev = 0.016, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | else if ( genre(A, E) )
%   | | then return -0.10159632948783628;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( female(B) )
%   | | | then return -0.12509552622704773;  // std dev = 0.051, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | | else return 0.056739625282029325;  // std dev = 0.758, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   else return -0.10159632948783628;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.09269127618926096;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( genre(B, E) )
%   | | then return 0.318591770942475;  // std dev = 0.014, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | else if ( female(A), actor(B) )
%   | | | then return -0.09854853740827857;  // std dev = 0.017, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | | else return 0.0734387069784702;  // std dev = 0.749, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   else return -0.09269127618926097;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.25372788700122734;  // std dev = 0.012, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | else if ( female(A) )
%   | | then return 0.04272738769766077;  // std dev = 0.728, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | | else return -0.13527841508262015;  // std dev = 0.061, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   else return -0.08518475138839687;  // std dev = 5.27e-09, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.0752172604153074;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( genre(B, E) )
%   | | then return 0.20873862241383692;  // std dev = 0.011, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | else if ( female(A), actor(B) )
%   | | | then return -0.09370265389155644;  // std dev = 0.017, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | | else return 0.07300919938786693;  // std dev = 0.722, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   else return -0.07877675473109172;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.17634975707639491;  // std dev = 0.010, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | else if ( genre(A, E) )
%   | | then return -0.07014948557145977;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( female(A) )
%   | | | then return 0.04204842498412081;  // std dev = 0.702, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | | | else return -0.1441311910898513;  // std dev = 0.019, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else return -0.07324622576333704;  // std dev = 2.63e-09, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.06570944214744054;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( actor(B) )
%   | | then return -0.10360407834588667;  // std dev = 0.057, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | else if ( female(A) )
%   | | | then return 0.20805064297691792;  // std dev = 0.494, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.153842635127873;  // std dev = 7.45e-09, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   else return -0.06842697784420272;  // std dev = 2.63e-09, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.1308208559660179;  // std dev = 0.021, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | else if ( genre(A, E) )
%   | | then return -0.06178872317658731;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( female(A), actor(B) )
%   | | | then return -0.08133057766852368;  // std dev = 0.015, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | | else return 0.06936202475373945;  // std dev = 0.643, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   else return -0.06419184008202619;  // std dev = 5.27e-09, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.077402
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 0.905 seconds
Total inference time: 0.951 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.120791
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.95
   F1        = 0.974359


Total scoring time: 0.381 seconds
Refined model CLL: -0.120791


******************************************
Best model found
******************************************
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.077402
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 2.3360000000000003 seconds
Total inference time: 0.951 seconds
AUC ROC: 1.0
Total revision time: 2.3360000000000003
Best scored revision CLL: -0.120791


Dataset: 4_cora_imdb, Fold: 2, Type: Transfer (trRDN-B), Time: 00:06:16
{'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.077402, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 2.3360000000000003, 'Inference time': 0.951, 'parameter_20': {'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.089011, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 0.671, 'Inference time': 1.007}}


Amount of data: 25
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;title(I, H), venue(I, A).;false;false
0;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
0;false;haswordvenue(A, L), haswordtitle(M, L).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordtitle(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordauthor(I, H).;false;true
2;true,false,false;haswordvenue(A, J), haswordtitle(K, J).;false;false
2;false;haswordvenue(A, L), haswordtitle(M, L).;true;false
2;false,true;haswordauthor(N, L).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;title(E, D), venue(E, B).;false;true
3;true,true,false;title(F, D), venue(F, A).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, A).;false;true
4;true,true,false;title(F, D), venue(F, B).;false;false
4;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
4;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
4;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
4;false,true;haswordauthor(M, K).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, B).;false;true
5;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
5;true,false;haswordvenue(B, H), haswordtitle(I, H).;true;true
5;true,false,true;title(J, I), venue(J, B).;false;false
5;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
5;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;title(E, D), venue(E, A).;false;true
6;true,true,false;title(F, D), venue(F, B).;false;false
6;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
6;true,false,true;title(I, H), venue(I, B).;false;false
6;true,false,false;haswordvenue(A, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;title(F, D), venue(F, A).;false;false
7;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
7;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
7;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
7;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;title(E, D), venue(E, A).;false;true
8;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
8;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
8;true,false,true;title(J, I), venue(J, A).;false;false
8;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
8;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, B).;false;true
9;true,true,false;title(F, D), venue(F, A).;false;false
9;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
9;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
9;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
9;false,true;haswordauthor(M, K).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14185106490048777;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( genre(B, E) )
%   | | then return 0.858148935099512;  // std dev = 1.03e-07, 24.000 (wgt'ed) examples reached here.  /* #pos=24 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.050941973991396876;  // std dev = 0.953, 11.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=1 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.1418510649004878;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7194734122109544;  // std dev = 4.21e-08, 24.000 (wgt'ed) examples reached here.  /* #pos=24 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( movie(F, B) )
%   | | | then return -0.04485324549538032;  // std dev = 0.953, 11.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=1 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.12544463852839138;  // std dev = 7.45e-09, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.11231637819360639;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( movie(E, A) )
%   | | then return 0.36835309249892156;  // std dev = 1.892, 35.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=25 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.11231637819360636;  // std dev = 2.95e-09, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.46357080570805403;  // std dev = 5.96e-08, 24.000 (wgt'ed) examples reached here.  /* #pos=24 */
%   | else if ( genre(A, E) )
%   | | then return -0.10159632948783628;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( movie(F, B) )
%   | | | then return -0.0874591505224943;  // std dev = 0.953, 11.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=1 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.1015963294878363;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.09269127618926096;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( genre(B, E) )
%   | | then return 0.35216271239819114;  // std dev = 2.11e-08, 24.000 (wgt'ed) examples reached here.  /* #pos=24 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.0750001562895407;  // std dev = 0.953, 11.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=1 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.09269127618926096;  // std dev = 1.32e-09, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.27653616353129795;  // std dev = 0.000, 24.000 (wgt'ed) examples reached here.  /* #pos=24 */
%   | else if ( movie(E, B) )
%   | | then if ( genre(B, F) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.06657179867858624;  // std dev = 0.954, 12.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=1 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.08518475138839686;  // std dev = 8.33e-09, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.08013814921907021;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( genre(B, E) )
%   | | then return 0.22474159545201108;  // std dev = 0.000, 24.000 (wgt'ed) examples reached here.  /* #pos=24 */
%   | | else if ( movie(F, B) )
%   | | | then return -0.05632350206229977;  // std dev = 0.953, 11.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=1 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.07877675473109172;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.1880109396396117;  // std dev = 3.16e-08, 24.000 (wgt'ed) examples reached here.  /* #pos=24 */
%   | else if ( genre(A, E) )
%   | | then return -0.07442593850088859;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( movie(F, B) )
%   | | | then return -0.04939136375696231;  // std dev = 0.953, 11.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=1 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.07324622576333704;  // std dev = 9.31e-10, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.06945860659108145;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( movie(E, A) )
%   | | then if ( genre(A, F) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.09669855573829407;  // std dev = 1.107, 35.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=25 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.06842697784420272;  // std dev = 3.73e-09, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.1483380086599788;  // std dev = 0.000, 24.000 (wgt'ed) examples reached here.  /* #pos=24 */
%   | else if ( genre(A, E) )
%   | | then return -0.06510126850887267;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.05519505469111388;  // std dev = 0.953, 11.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=1 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.06419184008202619;  // std dev = 1.86e-09, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.085319
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 0.702 seconds
Total inference time: 0.972 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 0.992
   AUC PR    = 0.994286
   CLL	      = -0.155304
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.96
   F1        = 0.979592


Total scoring time: 0.383 seconds
Parameter learned model CLL: -0.155304


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 1, 0], 'true,false,true': [1.03e-07, 0, 24], 'true,false,false,true': [0.953, 10, 1], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 14, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [4.21e-08, 0, 24], 'true,false,true': [0.0, 1, 0], 'true,false,false,true': [0.953, 10, 1], 'true,false,false,false': [0.0, 0, 0], 'false,true': [7.45e-09, 14, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.0, 1, 0], 'true,false,true': [1.892, 10, 25], 'true,false,false': [0.0, 0, 0], 'false,true': [2.95e-09, 14, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [5.96e-08, 0, 24], 'true,false,true': [0.0, 1, 0], 'true,false,false,true': [0.953, 10, 1], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 14, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 1, 0], 'true,false,true': [2.11e-08, 0, 24], 'true,false,false,true': [0.953, 10, 1], 'true,false,false,false': [0.0, 0, 0], 'false,true': [1.32e-09, 14, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, B)', 'true,false,true': 'genre(B, F)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 0, 24], 'true,false,true,true': [0.0, 0, 0], 'true,false,true,false': [0.954, 11, 1], 'true,false,false': [0.0, 0, 0], 'false,true': [8.33e-09, 14, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 1, 0], 'true,false,true': [0.0, 0, 24], 'true,false,false,true': [0.953, 10, 1], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 14, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, A)'}, {'true,true': [3.16e-08, 0, 24], 'true,false,true': [0.0, 1, 0], 'true,false,false,true': [0.953, 10, 1], 'true,false,false,false': [0.0, 0, 0], 'false,true': [9.31e-10, 14, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'true,false,true': 'genre(A, F)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 1, 0], 'true,false,true,true': [0.0, 0, 0], 'true,false,true,false': [1.107, 10, 25], 'true,false,false': [0.0, 0, 0], 'false,true': [3.73e-09, 14, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 24], 'true,false,true': [0.0, 1, 0], 'true,false,false,true': [0.953, 10, 1], 'true,false,false,false': [0.0, 0, 0], 'false,true': [1.86e-09, 14, 0], 'false,false': [0.0, 0, 0]}]]
[{'': [0.21219135802469255, -1.1895246692412391e-17], 'true': [0.0, 0.20408163265306242], 'true,false': [4.440892098500626e-16, 0.0826446280991736], 'true,false,false': [0.0826446280991736, nan], 'false': [-1.1895246692412391e-17, nan]}, {'': [0.15753050694524676, 3.96508223080413e-18], 'true': [7.401486830834377e-17, 0.07625371950022172], 'true,false': [0.0, 0.0826446280991736], 'true,false,false': [0.0826446280991736, nan], 'false': [3.96508223080413e-18, nan]}, {'': [0.10567936970688548, 9.912705577010326e-18], 'true': [0.0, 0.10228091526838835], 'true,false': [0.10228091526838835, nan], 'false': [9.912705577010326e-18, nan]}, {'': [0.0930206665937298, -3.96508223080413e-18], 'true': [1.4802973661668753e-16, 0.07577284282785406], 'true,false': [0.0, 0.08264462809917354], 'true,false,false': [0.08264462809917354, nan], 'false': [-3.96508223080413e-18, nan]}, {'': [0.06608933633788705, 3.96508223080413e-18], 'true': [0.0, 0.06529776697466318], 'true,false': [1.850371707708594e-17, 0.08264462809917351], 'true,false,false': [0.08264462809917351, nan], 'false': [3.96508223080413e-18, nan]}, {'': [0.051423706546724846, 4.956352788505163e-18], 'true': [-1.850371707708594e-17, 0.07578907048562823], 'true,false': [0.07578907048562823, nan], 'true,false,true': [nan, 0.07578907048562823], 'false': [4.956352788505163e-18, nan]}, {'': [0.043070767403312726, -9.912705577010326e-19], 'true': [0.0, 0.04299881251015043], 'true,false': [-5.551115123125783e-17, 0.08264462809917353], 'true,false,false': [0.08264462809917353, nan], 'false': [-9.912705577010326e-19, nan]}, {'': [0.038013983705585175, 9.912705577010326e-19], 'true': [4.163336342344337e-17, 0.07580545096076116], 'true,false': [0.0, 0.08264462809917351], 'true,false,false': [0.08264462809917351, nan], 'false': [9.912705577010326e-19, nan]}, {'': [0.03476159358270759, 9.912705577010326e-19], 'true': [0.0, 0.03498788745430299], 'true,false': [0.03498788745430299, nan], 'true,false,true': [nan, 0.03498788745430299], 'false': [9.912705577010326e-19, nan]}, {'': [0.034535563944087, 3.469446951953614e-18], 'true': [-1.3877787807814457e-17, 0.0757650720339246], 'true,false': [0.0, 0.08264462809917356], 'true,false,false': [0.08264462809917356, nan], 'false': [3.469446951953614e-18, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(A, D).;true;true
0;true,false;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;true;genre(B, D).;true;true
1;true,false;genre(A, E).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;true;genre(A, D).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;true;genre(B, D).;true;true
3;true,false;genre(A, E).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;true;genre(A, D).;true;true
4;true,false;genre(B, E).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;true;genre(B, D).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(A, D).;true;true
6;true,false;genre(B, E).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;true;genre(B, D).;true;true
7;true,false;genre(A, E).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;true;genre(A, D).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;true;genre(B, D).;true;true
9;true,false;genre(A, E).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14185106490048777;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( genre(B, E) )
%   | | then return 0.858148935099512;  // std dev = 1.03e-07, 24.000 (wgt'ed) examples reached here.  /* #pos=24 */
%   | | else if ( female(A), actor(B) )
%   | | | then return -0.1418510649004878;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | | else return 0.058148935099512224;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   else return -0.1418510649004878;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7194734122109544;  // std dev = 4.21e-08, 24.000 (wgt'ed) examples reached here.  /* #pos=24 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( female(A), actor(B) )
%   | | | then return -0.12544463852839138;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | | else return 0.050922032513554205;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   else return -0.12544463852839138;  // std dev = 7.45e-09, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.11231637819360639;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( director(B) )
%   | | then if ( female(A) )
%   | | | then return 0.581637333187956;  // std dev = 0.276, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | | else return 0.5553664367462846;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | else return -0.1296513078742964;  // std dev = 0.067, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   else return -0.11231637819360636;  // std dev = 1.18e-08, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.41485741918498426;  // std dev = 0.015, 24.000 (wgt'ed) examples reached here.  /* #pos=24 */
%   | else if ( genre(A, E) )
%   | | then return -0.10159632948783628;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( female(A) )
%   | | | then return 0.02169244805648605;  // std dev = 0.789, 7.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=1 */
%   | | | else return -0.13936425130390087;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   else return -0.1015963294878363;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.09269127618926096;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( genre(B, E) )
%   | | then return 0.3189151105380256;  // std dev = 0.014, 24.000 (wgt'ed) examples reached here.  /* #pos=24 */
%   | | else if ( female(A), actor(B) )
%   | | | then return -0.1019947509152045;  // std dev = 2.63e-09, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | | else return 0.05080743976208528;  // std dev = 0.779, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   else return -0.09269127618926096;  // std dev = 7.45e-09, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.25394791511381737;  // std dev = 0.012, 24.000 (wgt'ed) examples reached here.  /* #pos=24 */
%   | else if ( female(A) )
%   | | then if ( female(B) )
%   | | | then return -0.09302477202421318;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.11478904841987238;  // std dev = 0.720, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | else return -0.12029920602479813;  // std dev = 0.039, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else return -0.08518475138839686;  // std dev = 8.33e-09, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.07626586111201683;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( genre(B, E) )
%   | | then return 0.2088937381496456;  // std dev = 0.010, 24.000 (wgt'ed) examples reached here.  /* #pos=24 */
%   | | else if ( female(A), actor(B) )
%   | | | then return -0.09432014961882523;  // std dev = 0.022, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | | else return 0.05017258437276563;  // std dev = 0.744, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   else return -0.07877675473109172;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.17646333986334317;  // std dev = 0.009, 24.000 (wgt'ed) examples reached here.  /* #pos=24 */
%   | else if ( genre(A, E) )
%   | | then return -0.07106361786333423;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( female(A) )
%   | | | then return 0.02652775406521834;  // std dev = 0.733, 7.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=1 */
%   | | | else return -0.12139734194957265;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   else return -0.07324622576333704;  // std dev = 3.73e-09, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.06651307743885113;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( actor(B) )
%   | | then return -0.09682766536094337;  // std dev = 0.038, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | | else if ( female(A) )
%   | | | then return 0.20022449911629925;  // std dev = 0.524, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | | else return 0.15367463022862715;  // std dev = 7.45e-09, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   else return -0.06842697784420272;  // std dev = 3.73e-09, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.1312891084979945;  // std dev = 0.020, 24.000 (wgt'ed) examples reached here.  /* #pos=24 */
%   | else if ( genre(A, E) )
%   | | then return -0.06250051277717578;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( female(A), actor(B) )
%   | | | then return -0.08117638155716185;  // std dev = 0.019, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | | else return 0.051199106396761465;  // std dev = 0.676, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   else return -0.06419184008202619;  // std dev = 6.97e-09, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.07296
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 0.982 seconds
Total inference time: 0.979 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.117336
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.96
   F1        = 0.979592


Total scoring time: 0.373 seconds
Refined model CLL: -0.117336


******************************************
Best model found
******************************************
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.07296
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 2.4400000000000004 seconds
Total inference time: 0.979 seconds
AUC ROC: 1.0
Total revision time: 2.4400000000000004
Best scored revision CLL: -0.117336


Dataset: 4_cora_imdb, Fold: 2, Type: Transfer (trRDN-B), Time: 00:06:21
{'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.07296, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 2.4400000000000004, 'Inference time': 0.979, 'parameter_25': {'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.085319, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 0.702, 'Inference time': 0.972}}


Starting fold 3

Target train facts examples: 737
Target train pos examples: 204
Target train neg examples: 10693

Target test facts examples: 341
Target test pos	 examples: 178
Target test neg examples: 3543

Amount of data: 5
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;title(I, H), venue(I, A).;false;false
0;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
0;false;haswordvenue(A, L), haswordtitle(M, L).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordtitle(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordauthor(I, H).;false;true
2;true,false,false;haswordvenue(A, J), haswordtitle(K, J).;false;false
2;false;haswordvenue(A, L), haswordtitle(M, L).;true;false
2;false,true;haswordauthor(N, L).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;title(E, D), venue(E, B).;false;true
3;true,true,false;title(F, D), venue(F, A).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, A).;false;true
4;true,true,false;title(F, D), venue(F, B).;false;false
4;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
4;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
4;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
4;false,true;haswordauthor(M, K).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, B).;false;true
5;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
5;true,false;haswordvenue(B, H), haswordtitle(I, H).;true;true
5;true,false,true;title(J, I), venue(J, B).;false;false
5;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
5;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;title(E, D), venue(E, A).;false;true
6;true,true,false;title(F, D), venue(F, B).;false;false
6;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
6;true,false,true;title(I, H), venue(I, B).;false;false
6;true,false,false;haswordvenue(A, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;title(F, D), venue(F, A).;false;false
7;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
7;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
7;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
7;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;title(E, D), venue(E, A).;false;true
8;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
8;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
8;true,false,true;title(J, I), venue(J, A).;false;false
8;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
8;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, B).;false;true
9;true,true,false;title(F, D), venue(F, A).;false;false
9;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
9;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
9;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
9;false,true;haswordauthor(M, K).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995122;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.14185106490048777;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.14185106490048777;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7194734122109545;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else if ( genre(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(F, B) )
%   | | | then return -0.12544463852839138;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.12544463852839138;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A) )
%   | | then return 0.36459991819202997;  // std dev = 0.798, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.11231637819360639;  // std dev = 1.86e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.46450424502783305;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else if ( genre(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(F, B) )
%   | | | then return -0.15411350790943;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.1015963294878363;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( genre(B, E) )
%   | | then return 0.35280628625673915;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.1350753884703587;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.09269127618926094;  // std dev = 1.32e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.2769717464929017;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else if ( movie(E, B) )
%   | | then if ( genre(B, F) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.12005761495377337;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.08518475138839687;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( genre(B, E) )
%   | | then return 0.22504500656865356;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else if ( movie(F, B) )
%   | | | then return -0.10794150030000192;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.07877675473109173;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.18823044000513778;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else if ( genre(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(F, B) )
%   | | | then return -0.09797907375450264;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.07324622576333704;  // std dev = 9.31e-10, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A) )
%   | | then if ( genre(A, F) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.08948353876315848;  // std dev = 0.300, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.06842697784420272;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.14940650424380209;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else if ( genre(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(F, A) )
%   | | | then return -0.09723080550497225;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.0641918400820262;  // std dev = 9.31e-10, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 0.961967
   AUC PR    = 0.795112
   CLL	      = -0.113372
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.724719
   F1        = 0.840391


Total learning time: 0.616 seconds
Total inference time: 1.044 seconds
AUC ROC: 0.961967


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.107786
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 0.315 seconds
Parameter learned model CLL: -0.107786


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 5], 'true,false,false,true': [0.0, 2, 0], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 3, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 5], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 2, 0], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 3, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.798, 2, 5], 'true,false,false': [0.0, 0, 0], 'false,true': [1.86e-09, 3, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 5], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 2, 0], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 3, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 5], 'true,false,false,true': [0.0, 2, 0], 'true,false,false,false': [0.0, 0, 0], 'false,true': [1.32e-09, 3, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, B)', 'true,false,true': 'genre(B, F)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 0, 5], 'true,false,true,true': [0.0, 0, 0], 'true,false,true,false': [0.0, 2, 0], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 3, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 5], 'true,false,false,true': [0.0, 2, 0], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 3, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 0, 5], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 2, 0], 'true,false,false,false': [0.0, 0, 0], 'false,true': [9.31e-10, 3, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'true,false,true': 'genre(A, F)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 0, 0], 'true,false,true,true': [0.0, 0, 0], 'true,false,true,false': [0.3, 2, 5], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 3, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 5], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 2, 0], 'true,false,false,false': [0.0, 0, 0], 'false,true': [9.31e-10, 3, 0], 'false,false': [0.0, 0, 0]}]]
[{'': [0.20408163265306106, 0.0], 'true': [nan, 0.20408163265306106], 'true,false': [0.0, 0.0], 'false': [0.0, nan], 'true,false,false': [0.0, nan]}, {'': [0.1456911249928931, 0.0], 'true': [0.0, 0.0], 'false': [0.0, nan], 'true,false': [nan, 0.0], 'true,false,false': [0.0, nan]}, {'': [0.09097966150327687, 2.3129646346357427e-18], 'true': [nan, 0.09097966150327687], 'true,false': [0.09097966150327687, nan], 'false': [2.3129646346357427e-18, nan]}, {'': [0.07809957637737727, -1.1564823173178713e-18], 'true': [0.0, 0.0], 'true,false': [nan, 0.0], 'true,false,false': [0.0, nan], 'false': [-1.1564823173178713e-18, nan]}, {'': [0.048577250721330116, 2.3129646346357427e-18], 'true': [nan, 0.048577250721330116], 'true,false': [0.0, 0.0], 'false': [2.3129646346357427e-18, nan], 'true,false,false': [0.0, nan]}, {'': [0.03216985996954173, 0.0], 'true': [-1.1102230246251566e-17, 0.0], 'false': [0.0, nan], 'true,false': [0.0, nan], 'true,false,true': [nan, 0.0]}, {'': [0.022628574236038607, 0.0], 'true': [nan, 0.022628574236038607], 'true,false': [-1.1102230246251566e-17, 0.0], 'false': [0.0, nan], 'true,false,false': [0.0, nan]}, {'': [0.01671752770745506, 1.1564823173178713e-18], 'true': [0.0, 0.0], 'false': [1.1564823173178713e-18, nan], 'true,false': [nan, 0.0], 'true,false,false': [0.0, nan]}, {'': [0.012836150598038304, -5.782411586589357e-19], 'true': [nan, 0.012836150598038304], 'true,false': [0.012836150598038304, nan], 'true,false,true': [nan, 0.012836150598038304], 'false': [-5.782411586589357e-19, nan]}, {'': [0.01241427807349242, 5.782411586589357e-19], 'true': [-2.7755575615628915e-18, 0.0], 'false': [5.782411586589357e-19, nan], 'true,false': [nan, 0.0], 'true,false,false': [0.0, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;true;genre(B, D).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;true;genre(B, D).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;true;genre(B, E).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;true;genre(B, D).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(B, E).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;true;genre(B, D).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;true;genre(B, D).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.8581489350995122;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return -0.14185106490048777;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   else return -0.14185106490048777;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7194734122109545;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return -0.12544463852839138;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   else return -0.12544463852839138;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.36459991819202997;  // std dev = 0.302, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else return -0.11231637819360639;  // std dev = 2.63e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.46450424502783305;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return -0.15411350790943;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   else return -0.1015963294878363;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.35280628625673915;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return -0.1350753884703587;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   else return -0.09269127618926094;  // std dev = 2.63e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.2769717464929017;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return -0.12005761495377337;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   else return -0.08518475138839687;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.22504500656865356;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return -0.10794150030000192;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   else return -0.07877675473109173;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.18823044000513778;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return -0.09797907375450264;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   else return -0.07324622576333704;  // std dev = 1.86e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.08948353876315848;  // std dev = 0.113, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else return -0.06842697784420272;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.14940650424380209;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return -0.09723080550497225;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   else return -0.0641918400820262;  // std dev = 1.32e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */


Results
   AUC ROC   = 0.961149
   AUC PR    = 0.587865
   CLL	      = -0.132344
   Precision = 0.693548 at threshold = 0.5
   Recall    = 0.724719
   F1        = 0.708791


Total learning time: 0.588 seconds
Total inference time: 0.858 seconds
AUC ROC: 0.961149


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.107786
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 0.308 seconds
Refined model CLL: -0.107786


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.961967
   AUC PR    = 0.795112
   CLL	      = -0.113372
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.724719
   F1        = 0.840391


Total learning time: 1.8270000000000002 seconds
Total inference time: 1.044 seconds
AUC ROC: 0.961967
Total revision time: 1.8270000000000002
Best scored revision CLL: -0.107786


Dataset: 4_cora_imdb, Fold: 3, Type: Transfer (trRDN-B), Time: 00:06:25
{'AUC ROC': 0.961967, 'AUC PR': 0.795112, 'CLL': -0.113372, 'Precision': [1.0, 0.5], 'Recall': 0.724719, 'F1': 0.840391, 'Learning time': 1.8270000000000002, 'Inference time': 1.044, 'parameter_5': {'AUC ROC': 0.961967, 'AUC PR': 0.795112, 'CLL': -0.113372, 'Precision': [1.0, 0.5], 'Recall': 0.724719, 'F1': 0.840391, 'Learning time': 0.616, 'Inference time': 1.044}}


Amount of data: 10
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;title(I, H), venue(I, A).;false;false
0;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
0;false;haswordvenue(A, L), haswordtitle(M, L).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordtitle(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordauthor(I, H).;false;true
2;true,false,false;haswordvenue(A, J), haswordtitle(K, J).;false;false
2;false;haswordvenue(A, L), haswordtitle(M, L).;true;false
2;false,true;haswordauthor(N, L).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;title(E, D), venue(E, B).;false;true
3;true,true,false;title(F, D), venue(F, A).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, A).;false;true
4;true,true,false;title(F, D), venue(F, B).;false;false
4;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
4;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
4;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
4;false,true;haswordauthor(M, K).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, B).;false;true
5;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
5;true,false;haswordvenue(B, H), haswordtitle(I, H).;true;true
5;true,false,true;title(J, I), venue(J, B).;false;false
5;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
5;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;title(E, D), venue(E, A).;false;true
6;true,true,false;title(F, D), venue(F, B).;false;false
6;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
6;true,false,true;title(I, H), venue(I, B).;false;false
6;true,false,false;haswordvenue(A, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;title(F, D), venue(F, A).;false;false
7;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
7;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
7;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
7;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;title(E, D), venue(E, A).;false;true
8;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
8;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
8;true,false,true;title(J, I), venue(J, A).;false;false
8;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
8;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, B).;false;true
9;true,true,false;title(F, D), venue(F, A).;false;false
9;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
9;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
9;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
9;false,true;haswordauthor(M, K).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995123;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.10814893509951219;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.1418510649004878;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7194734122109543;  // std dev = 2.98e-08, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else if ( genre(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(F, B) )
%   | | | then return 0.09446743783575562;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.12544463852839138;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A) )
%   | | then return 0.40960826950400075;  // std dev = 1.171, 13.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=10 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.11231637819360639;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.4533286061964762;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else if ( genre(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(F, B) )
%   | | | then return 0.01634295262101057;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.10159632948783627;  // std dev = 1.86e-09, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( genre(B, E) )
%   | | then return 0.34512013721027124;  // std dev = 1.49e-08, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.013403832053065383;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.09269127618926097;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.2717663291205828;  // std dev = 1.83e-08, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else if ( movie(E, B) )
%   | | then if ( genre(B, F) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.010974311728403824;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.08518475138839687;  // std dev = 2.63e-09, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( genre(B, E) )
%   | | then return 0.22141391594968068;  // std dev = 1.83e-08, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.00897245448030326;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.07877675473109173;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.18559973097152926;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else if ( genre(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(F, B) )
%   | | | then return 0.007327282346372699;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.07324622576333704;  // std dev = 9.31e-10, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A) )
%   | | then if ( genre(A, F) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.1120300842824485;  // std dev = 0.903, 13.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=10 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.06842697784420272;  // std dev = 2.63e-09, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.1447371610519791;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else if ( genre(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(F, A) )
%   | | | then return -0.015275938607475448;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.0641918400820262;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 0.97199
   AUC PR    = 0.81824
   CLL	      = -0.13385
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.724719
   F1        = 0.840391


Total learning time: 0.647 seconds
Total inference time: 1.017 seconds
AUC ROC: 0.97199


Results scoring model
   AUC ROC   = 0.985
   AUC PR    = 0.988462
   CLL	      = -0.19586
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.9
   F1        = 0.947368


Total scoring time: 0.337 seconds
Parameter learned model CLL: -0.19586


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 9], 'true,false,false,true': [0.866, 3, 1], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 7, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [2.98e-08, 0, 9], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.866, 3, 1], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 7, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [1.171, 3, 10], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 7, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 9], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.866, 3, 1], 'true,false,false,false': [0.0, 0, 0], 'false,true': [1.86e-09, 7, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [1.49e-08, 0, 9], 'true,false,false,true': [0.866, 3, 1], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 7, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, B)', 'true,false,true': 'genre(B, F)', 'false': 'movie(G, A)'}, {'true,true': [1.83e-08, 0, 9], 'true,false,true,true': [0.0, 0, 0], 'true,false,true,false': [0.866, 3, 1], 'true,false,false': [0.0, 0, 0], 'false,true': [2.63e-09, 7, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [1.83e-08, 0, 9], 'true,false,false,true': [0.866, 3, 1], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 7, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 0, 9], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.866, 3, 1], 'true,false,false,false': [0.0, 0, 0], 'false,true': [9.31e-10, 7, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'true,false,true': 'genre(A, F)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 0, 0], 'true,false,true,true': [0.0, 0, 0], 'true,false,true,false': [0.903, 3, 10], 'true,false,false': [0.0, 0, 0], 'false,true': [2.63e-09, 7, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 9], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.866, 3, 1], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 7, 0], 'false,false': [0.0, 0, 0]}]]
[{'': [0.1775147928994082, -7.93016446160826e-18], 'true': [nan, 0.1775147928994082], 'true,false': [-2.9605947323337506e-16, 0.18750000000000003], 'true,false,false': [0.18750000000000003, nan], 'false': [-7.93016446160826e-18, nan]}, {'': [0.14090395768147268, -1.982541115402065e-18], 'true': [9.868649107779169e-17, 0.18749999999999997], 'true,false': [nan, 0.18749999999999997], 'true,false,false': [0.18749999999999997, nan], 'false': [-1.982541115402065e-18, nan]}, {'': [0.10549455515742416, -1.982541115402065e-18], 'true': [nan, 0.10549455515742416], 'true,false': [0.10549455515742416, nan], 'false': [-1.982541115402065e-18, nan]}, {'': [0.0983694237367336, 0.0], 'true': [-2.4671622769447922e-17, 0.18749999999999997], 'true,false': [nan, 0.18749999999999997], 'true,false,false': [0.18749999999999997, nan], 'false': [0.0, nan]}, {'': [0.08113186660270619, 0.0], 'true': [nan, 0.08113186660270619], 'true,false': [2.4671622769447922e-17, 0.18750000000000003], 'true,false,false': [0.18750000000000003, nan], 'false': [0.0, nan]}, {'': [0.07218017247383063, 9.912705577010326e-19], 'true': [3.700743415417188e-17, 0.1875], 'true,false': [0.1875, nan], 'true,false,true': [nan, 0.1875], 'false': [9.912705577010326e-19, nan]}, {'': [0.06730609162038356, -9.912705577010326e-19], 'true': [nan, 0.06730609162038356], 'true,false': [3.700743415417188e-17, 0.18749999999999997], 'true,false,false': [0.18749999999999997, nan], 'false': [-9.912705577010326e-19, nan]}, {'': [0.06446223889820787, 9.912705577010326e-19], 'true': [-6.1679056923619804e-18, 0.18750000000000003], 'true,false': [nan, 0.18750000000000003], 'true,false,false': [0.18750000000000003, nan], 'false': [9.912705577010326e-19, nan]}, {'': [0.06269098314255711, 9.912705577010326e-19], 'true': [nan, 0.06269098314255711], 'true,false': [0.06269098314255711, nan], 'true,false,true': [nan, 0.06269098314255711], 'false': [9.912705577010326e-19, nan]}, {'': [0.06314645511393226, -4.956352788505163e-19], 'true': [-3.0839528461809902e-18, 0.18749999999999997], 'true,false': [nan, 0.18749999999999997], 'true,false,false': [0.18749999999999997, nan], 'false': [-4.956352788505163e-19, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;true;genre(B, D).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;true;genre(B, D).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;true;genre(B, E).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;true;genre(B, D).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(B, E).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;true;genre(B, D).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;true;genre(B, D).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.8581489350995123;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else return 0.10814893509951219;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   else return -0.1418510649004878;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7194734122109543;  // std dev = 2.98e-08, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else return 0.09446743783575562;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   else return -0.12544463852839138;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B) )
%   | then if ( female(A) )
%   | | then return 0.6474617555671436;  // std dev = 0.226, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.5553664367462846;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else return -0.16834760679113825;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else return -0.11231637819360639;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.41257741241615203;  // std dev = 0.028, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else return 0.07071936987729144;  // std dev = 0.751, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   else return -0.10159632948783627;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.31739691615792215;  // std dev = 0.025, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else return 0.060325832317446565;  // std dev = 0.746, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   else return -0.09269127618926097;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.2529264397474135;  // std dev = 0.021, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else return 0.05110738451888286;  // std dev = 0.742, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   else return -0.08518475138839687;  // std dev = 2.63e-09, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.20818055816638673;  // std dev = 0.019, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else return 0.04304259551531133;  // std dev = 0.739, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   else return -0.07877675473109173;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.17594549596216996;  // std dev = 0.016, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else return 0.036068732340696665;  // std dev = 0.736, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   else return -0.07324622576333704;  // std dev = 2.63e-09, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.18176018401300423;  // std dev = 5.27e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( female(A) )
%   | | then return 0.3170988472526208;  // std dev = 0.427, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.15446322679504876;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   else return -0.06842697784420272;  // std dev = 2.63e-09, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.1293161121435135;  // std dev = 0.034, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else return 0.030754461647473412;  // std dev = 0.648, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   else return -0.0641918400820262;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */


Results
   AUC ROC   = 0.991594
   AUC PR    = 0.821339
   CLL	      = -0.132469
   Precision = 0.693548 at threshold = 0.5
   Recall    = 0.724719
   F1        = 0.708791


Total learning time: 0.667 seconds
Total inference time: 0.868 seconds
AUC ROC: 0.991594


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.147176
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.9
   F1        = 0.947368


Total scoring time: 0.323 seconds
Refined model CLL: -0.147176


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.991594
   AUC PR    = 0.821339
   CLL	      = -0.132469
   Precision = 0.693548 at threshold = 0.5
   Recall    = 0.724719
   F1        = 0.708791


Total learning time: 1.974 seconds
Total inference time: 0.868 seconds
AUC ROC: 0.991594
Total revision time: 1.974
Best scored revision CLL: -0.147176


Dataset: 4_cora_imdb, Fold: 3, Type: Transfer (trRDN-B), Time: 00:06:30
{'AUC ROC': 0.991594, 'AUC PR': 0.821339, 'CLL': -0.132469, 'Precision': [0.693548, 0.5], 'Recall': 0.724719, 'F1': 0.708791, 'Learning time': 1.974, 'Inference time': 0.868, 'parameter_10': {'AUC ROC': 0.97199, 'AUC PR': 0.81824, 'CLL': -0.13385, 'Precision': [1.0, 0.5], 'Recall': 0.724719, 'F1': 0.840391, 'Learning time': 0.647, 'Inference time': 1.017}}


Amount of data: 15
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;title(I, H), venue(I, A).;false;false
0;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
0;false;haswordvenue(A, L), haswordtitle(M, L).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordtitle(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordauthor(I, H).;false;true
2;true,false,false;haswordvenue(A, J), haswordtitle(K, J).;false;false
2;false;haswordvenue(A, L), haswordtitle(M, L).;true;false
2;false,true;haswordauthor(N, L).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;title(E, D), venue(E, B).;false;true
3;true,true,false;title(F, D), venue(F, A).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, A).;false;true
4;true,true,false;title(F, D), venue(F, B).;false;false
4;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
4;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
4;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
4;false,true;haswordauthor(M, K).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, B).;false;true
5;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
5;true,false;haswordvenue(B, H), haswordtitle(I, H).;true;true
5;true,false,true;title(J, I), venue(J, B).;false;false
5;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
5;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;title(E, D), venue(E, A).;false;true
6;true,true,false;title(F, D), venue(F, B).;false;false
6;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
6;true,false,true;title(I, H), venue(I, B).;false;false
6;true,false,false;haswordvenue(A, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;title(F, D), venue(F, A).;false;false
7;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
7;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
7;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
7;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;title(E, D), venue(E, A).;false;true
8;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
8;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
8;true,false,true;title(J, I), venue(J, A).;false;false
8;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
8;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, B).;false;true
9;true,true,false;title(F, D), venue(F, A).;false;false
9;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
9;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
9;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
9;false,true;haswordauthor(M, K).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995123;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.1438632208137979;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=2 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.1418510649004878;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7194734122109542;  // std dev = 4.21e-08, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else if ( genre(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(F, B) )
%   | | | then return 0.12543301544918353;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=2 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.12544463852839138;  // std dev = 5.27e-09, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A) )
%   | | then return 0.3987264248548062;  // std dev = 1.530, 20.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=15 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.11231637819360638;  // std dev = 1.86e-09, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.45602670798078654;  // std dev = 3.65e-08, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else if ( genre(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(F, B) )
%   | | | then return 0.041917911068857054;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=2 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.10159632948783628;  // std dev = 1.32e-09, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( genre(B, E) )
%   | | then return 0.3469721001908015;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.03410719780091265;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=2 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.09269127618926097;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.27302125716015097;  // std dev = 1.49e-08, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else if ( movie(E, B) )
%   | | then if ( genre(B, F) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.027630537338942416;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=2 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.08518475138839687;  // std dev = 3.73e-09, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( genre(B, E) )
%   | | then return 0.22229035108726855;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.02230467731598954;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=2 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.07877675473109172;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.18623547296923418;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else if ( genre(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(F, B) )
%   | | | then return 0.01795423536177232;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=2 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.07324622576333704;  // std dev = 9.31e-10, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A) )
%   | | then if ( genre(A, F) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.10881404866489888;  // std dev = 1.235, 20.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=15 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.06842697784420272;  // std dev = 2.63e-09, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.14557855740445552;  // std dev = 1.05e-08, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else if ( genre(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(F, A) )
%   | | | then return -0.00761919870426483;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=2 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.06419184008202619;  // std dev = 1.61e-09, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 0.97199
   AUC PR    = 0.81824
   CLL	      = -0.139245
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.724719
   F1        = 0.840391


Total learning time: 0.653 seconds
Total inference time: 0.999 seconds
AUC ROC: 0.97199


Results scoring model
   AUC ROC   = 0.977778
   AUC PR    = 0.981566
   CLL	      = -0.219944
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.866667
   F1        = 0.928571


Total scoring time: 0.359 seconds
Parameter learned model CLL: -0.219944


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 13], 'true,false,false,true': [1.195, 5, 2], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 10, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [4.21e-08, 0, 13], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [1.195, 5, 2], 'true,false,false,false': [0.0, 0, 0], 'false,true': [5.27e-09, 10, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [1.53, 5, 15], 'true,false,false': [0.0, 0, 0], 'false,true': [1.86e-09, 10, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [3.65e-08, 0, 13], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [1.195, 5, 2], 'true,false,false,false': [0.0, 0, 0], 'false,true': [1.32e-09, 10, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 13], 'true,false,false,true': [1.195, 5, 2], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 10, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, B)', 'true,false,true': 'genre(B, F)', 'false': 'movie(G, A)'}, {'true,true': [1.49e-08, 0, 13], 'true,false,true,true': [0.0, 0, 0], 'true,false,true,false': [1.195, 5, 2], 'true,false,false': [0.0, 0, 0], 'false,true': [3.73e-09, 10, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 13], 'true,false,false,true': [1.195, 5, 2], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 10, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 0, 13], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [1.195, 5, 2], 'true,false,false,false': [0.0, 0, 0], 'false,true': [9.31e-10, 10, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'true,false,true': 'genre(A, F)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 0, 0], 'true,false,true,true': [0.0, 0, 0], 'true,false,true,false': [1.235, 5, 15], 'true,false,false': [0.0, 0, 0], 'false,true': [2.63e-09, 10, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [1.05e-08, 0, 13], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [1.195, 5, 2], 'true,false,false,false': [0.0, 0, 0], 'false,true': [1.61e-09, 10, 0], 'false,false': [0.0, 0, 0]}]]
[{'': [0.18749999999999964, -1.1102230246251566e-17], 'true': [nan, 0.18749999999999964], 'true,false': [-2.7328566760003855e-16, 0.20408163265306126], 'true,false,false': [0.20408163265306126, nan], 'false': [-1.1102230246251566e-17, nan]}, {'': [0.1517096798326322, 2.7755575615628915e-18], 'true': [1.3664283380001927e-16, 0.20408163265306117], 'true,false': [nan, 0.20408163265306117], 'true,false,false': [0.20408163265306117, nan], 'false': [2.7755575615628915e-18, nan]}, {'': [0.11699560188995876, 0.0], 'true': [nan, 0.11699560188995876], 'true,false': [0.11699560188995876, nan], 'false': [0.0, nan]}, {'': [0.11044165819573645, 1.3877787807814458e-18], 'true': [1.0248212535001446e-16, 0.20408163265306117], 'true,false': [nan, 0.20408163265306117], 'true,false,false': [0.20408163265306117, nan], 'false': [1.3877787807814458e-18, nan]}, {'': [0.09369728315461283, 0.0], 'true': [nan, 0.09369728315461283], 'true,false': [0.0, 0.20408163265306117], 'true,false,false': [0.20408163265306117, nan], 'false': [0.0, nan]}, {'': [0.0851278491512408, 1.3877787807814458e-18], 'true': [1.708035422500241e-17, 0.20408163265306126], 'true,false': [0.20408163265306126, nan], 'true,false,true': [nan, 0.20408163265306126], 'false': [1.3877787807814458e-18, nan]}, {'': [0.08052726778845005, 0.0], 'true': [nan, 0.08052726778845005], 'true,false': [-3.416070845000482e-17, 0.20408163265306117], 'true,false,false': [0.20408163265306117, nan], 'false': [0.0, nan]}, {'': [0.07787104722530544, 6.938893903907229e-19], 'true': [0.0, 0.20408163265306126], 'true,false': [nan, 0.20408163265306126], 'true,false,false': [0.20408163265306126, nan], 'false': [6.938893903907229e-19, nan]}, {'': [0.07622645192534513, 6.938893903907229e-19], 'true': [nan, 0.07622645192534513], 'true,false': [0.07622645192534513, nan], 'true,false,true': [nan, 0.07622645192534513], 'false': [6.938893903907229e-19, nan]}, {'': [0.0767678946170314, 1.3877787807814458e-18], 'true': [8.540177112501205e-18, 0.20408163265306128], 'true,false': [nan, 0.20408163265306128], 'true,false,false': [0.20408163265306128, nan], 'false': [1.3877787807814458e-18, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;true;genre(B, D).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;true;genre(B, D).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;true;genre(B, E).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;true;genre(B, D).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(B, E).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;true;genre(B, D).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;true;genre(B, D).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.8581489350995123;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else return 0.1438632208137979;  // std dev = 0.452, 7.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=2 */
%   else return -0.1418510649004878;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7194734122109542;  // std dev = 4.21e-08, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else return 0.12543301544918353;  // std dev = 0.452, 7.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=2 */
%   else return -0.12544463852839138;  // std dev = 5.27e-09, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.1778907400865106;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else if ( female(A) )
%   | | then return 0.6087150013797255;  // std dev = 0.239, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return 0.582040719063005;  // std dev = 0.080, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else return -0.11231637819360638;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.4090590348194153;  // std dev = 0.011, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else return 0.09565183752171368;  // std dev = 0.394, 7.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=2 */
%   else return -0.10159632948783628;  // std dev = 3.73e-09, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.31498807734831336;  // std dev = 0.010, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else return 0.08083942090841648;  // std dev = 0.391, 7.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=2 */
%   else return -0.09269127618926097;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.25126444306181334;  // std dev = 0.008, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else return 0.06767950333777056;  // std dev = 0.388, 7.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=2 */
%   else return -0.08518475138839687;  // std dev = 3.73e-09, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.2069945404867533;  // std dev = 0.007, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else return 0.056210893004952425;  // std dev = 0.386, 7.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=2 */
%   else return -0.07877675473109172;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.17506786551295084;  // std dev = 0.006, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else return 0.04637522786898053;  // std dev = 0.384, 7.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=2 */
%   else return -0.07324622576333704;  // std dev = 2.63e-09, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B) )
%   | then if ( female(A) )
%   | | then return 0.24706761909709885;  // std dev = 0.439, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return 0.20163711479182478;  // std dev = 0.148, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | else return -0.2039418030108214;  // std dev = 7.45e-09, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else return -0.06842697784420272;  // std dev = 2.63e-09, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.12559871740993758;  // std dev = 0.013, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else return 0.04513863457503083;  // std dev = 0.345, 7.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=2 */
%   else return -0.06419184008202619;  // std dev = 3.73e-09, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */


Results
   AUC ROC   = 0.991594
   AUC PR    = 0.821339
   CLL	      = -0.138071
   Precision = 0.693548 at threshold = 0.5
   Recall    = 0.724719
   F1        = 0.708791


Total learning time: 0.787 seconds
Total inference time: 0.93 seconds
AUC ROC: 0.991594


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.163121
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.866667
   F1        = 0.928571


Total scoring time: 0.341 seconds
Refined model CLL: -0.163121


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.991594
   AUC PR    = 0.821339
   CLL	      = -0.138071
   Precision = 0.693548 at threshold = 0.5
   Recall    = 0.724719
   F1        = 0.708791


Total learning time: 2.14 seconds
Total inference time: 0.93 seconds
AUC ROC: 0.991594
Total revision time: 2.14
Best scored revision CLL: -0.163121


Dataset: 4_cora_imdb, Fold: 3, Type: Transfer (trRDN-B), Time: 00:06:34
{'AUC ROC': 0.991594, 'AUC PR': 0.821339, 'CLL': -0.138071, 'Precision': [0.693548, 0.5], 'Recall': 0.724719, 'F1': 0.708791, 'Learning time': 2.14, 'Inference time': 0.93, 'parameter_15': {'AUC ROC': 0.97199, 'AUC PR': 0.81824, 'CLL': -0.139245, 'Precision': [1.0, 0.5], 'Recall': 0.724719, 'F1': 0.840391, 'Learning time': 0.653, 'Inference time': 0.999}}


Amount of data: 20
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;title(I, H), venue(I, A).;false;false
0;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
0;false;haswordvenue(A, L), haswordtitle(M, L).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordtitle(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordauthor(I, H).;false;true
2;true,false,false;haswordvenue(A, J), haswordtitle(K, J).;false;false
2;false;haswordvenue(A, L), haswordtitle(M, L).;true;false
2;false,true;haswordauthor(N, L).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;title(E, D), venue(E, B).;false;true
3;true,true,false;title(F, D), venue(F, A).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, A).;false;true
4;true,true,false;title(F, D), venue(F, B).;false;false
4;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
4;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
4;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
4;false,true;haswordauthor(M, K).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, B).;false;true
5;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
5;true,false;haswordvenue(B, H), haswordtitle(I, H).;true;true
5;true,false,true;title(J, I), venue(J, B).;false;false
5;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
5;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;title(E, D), venue(E, A).;false;true
6;true,true,false;title(F, D), venue(F, B).;false;false
6;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
6;true,false,true;title(I, H), venue(I, B).;false;false
6;true,false,false;haswordvenue(A, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;title(F, D), venue(F, A).;false;false
7;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
7;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
7;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
7;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;title(E, D), venue(E, A).;false;true
8;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
8;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
8;true,false,true;title(J, I), venue(J, A).;false;false
8;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
8;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, B).;false;true
9;true,true,false;title(F, D), venue(F, A).;false;false
9;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
9;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
9;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
9;false,true;haswordauthor(M, K).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995123;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.058148935099512175;  // std dev = 1.265, 10.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.1418510649004878;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7194734122109542;  // std dev = 7.30e-08, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | else if ( genre(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(F, B) )
%   | | | then return 0.05092203251355425;  // std dev = 1.265, 10.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.12544463852839138;  // std dev = 5.27e-09, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A) )
%   | | then return 0.37285924419570726;  // std dev = 1.811, 28.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=20 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.11231637819360636;  // std dev = 2.63e-09, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.4624504336465838;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | else if ( genre(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(F, B) )
%   | | | then return -0.01113960967572944;  // std dev = 1.265, 10.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.1015963294878363;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( genre(B, E) )
%   | | then return 0.35139065381447143;  // std dev = 5.16e-08, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.009290170146174476;  // std dev = 1.265, 10.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.09269127618926097;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.2760135578051167;  // std dev = 4.47e-08, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | else if ( movie(E, B) )
%   | | then if ( genre(B, F) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.007756912339202599;  // std dev = 1.265, 10.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.08518475138839687;  // std dev = 5.27e-09, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( genre(B, E) )
%   | | then return 0.22437746427683752;  // std dev = 1.05e-08, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | else if ( movie(F, B) )
%   | | | then return -0.006483065358584295;  // std dev = 1.265, 10.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.07877675473109172;  // std dev = 3.73e-09, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.1877474354000252;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | else if ( genre(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(F, B) )
%   | | | then return -0.005422850488591435;  // std dev = 1.265, 10.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.07324622576333704;  // std dev = 1.32e-09, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A) )
%   | | then if ( genre(A, F) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.10173526850506996;  // std dev = 1.333, 28.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=20 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.06842697784420272;  // std dev = 2.63e-09, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.14751869007449692;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | else if ( genre(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(F, A) )
%   | | | then return -0.021589555405772377;  // std dev = 1.265, 10.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.06419184008202619;  // std dev = 1.61e-09, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 0.97199
   AUC PR    = 0.81824
   CLL	      = -0.126888
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.724719
   F1        = 0.840391


Total learning time: 0.685 seconds
Total inference time: 1.036 seconds
AUC ROC: 0.97199


Results scoring model
   AUC ROC   = 0.98
   AUC PR    = 0.984161
   CLL	      = -0.206668
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.9
   F1        = 0.947368


Total scoring time: 0.376 seconds
Parameter learned model CLL: -0.206668


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 18], 'true,false,false,true': [1.265, 8, 2], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 12, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [7.3e-08, 0, 18], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [1.265, 8, 2], 'true,false,false,false': [0.0, 0, 0], 'false,true': [5.27e-09, 12, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [1.811, 8, 20], 'true,false,false': [0.0, 0, 0], 'false,true': [2.63e-09, 12, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 18], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [1.265, 8, 2], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 12, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [5.16e-08, 0, 18], 'true,false,false,true': [1.265, 8, 2], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 12, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, B)', 'true,false,true': 'genre(B, F)', 'false': 'movie(G, A)'}, {'true,true': [4.47e-08, 0, 18], 'true,false,true,true': [0.0, 0, 0], 'true,false,true,false': [1.265, 8, 2], 'true,false,false': [0.0, 0, 0], 'false,true': [5.27e-09, 12, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [1.05e-08, 0, 18], 'true,false,false,true': [1.265, 8, 2], 'true,false,false,false': [0.0, 0, 0], 'false,true': [3.73e-09, 12, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 0, 18], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [1.265, 8, 2], 'true,false,false,false': [0.0, 0, 0], 'false,true': [1.32e-09, 12, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'true,false,true': 'genre(A, F)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 0, 0], 'true,false,true,true': [0.0, 0, 0], 'true,false,true,false': [1.333, 8, 20], 'true,false,false': [0.0, 0, 0], 'false,true': [2.63e-09, 12, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 18], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [1.265, 8, 2], 'true,false,false,false': [0.0, 0, 0], 'false,true': [1.61e-09, 12, 0], 'false,false': [0.0, 0, 0]}]]
[{'': [0.20408163265306145, -1.1564823173178714e-17], 'true': [nan, 0.20408163265306145], 'true,false': [-2.9605947323337506e-16, 0.16000000000000003], 'true,false,false': [0.16000000000000003, nan], 'false': [-1.1564823173178714e-17, nan]}, {'': [0.15976144198106326, 2.3129646346357427e-18], 'true': [2.9605947323337506e-16, 0.16], 'true,false': [nan, 0.16], 'true,false,false': [0.16, nan], 'false': [2.3129646346357427e-18, nan]}, {'': [0.11709883274170539, 6.938893903907228e-18], 'true': [nan, 0.11709883274170539], 'true,false': [0.11709883274170539, nan], 'false': [6.938893903907228e-18, nan]}, {'': [0.10863744291342538, 0.0], 'true': [-7.401486830834377e-17, 0.16000000000000006], 'true,false': [nan, 0.16000000000000006], 'true,false,false': [0.16000000000000006, nan], 'false': [0.0, nan]}, {'': [0.08701060997337705, 2.3129646346357427e-18], 'true': [nan, 0.08701060997337705], 'true,false': [1.4802973661668753e-16, 0.16000000000000003], 'true,false,false': [0.16000000000000003, nan], 'false': [2.3129646346357427e-18, nan]}, {'': [0.07563089585544268, 2.3129646346357427e-18], 'true': [1.1102230246251565e-16, 0.15999999999999998], 'true,false': [0.15999999999999998, nan], 'true,false,true': [nan, 0.15999999999999998], 'false': [2.3129646346357427e-18, nan]}, {'': [0.0693793177880594, 1.1564823173178713e-18], 'true': [nan, 0.0693793177880594], 'true,false': [6.1679056923619804e-18, 0.15999999999999992], 'true,false,false': [0.15999999999999992, nan], 'false': [1.1564823173178713e-18, nan]}, {'': [0.06571002127940327, 1.1564823173178713e-18], 'true': [-3.0839528461809905e-17, 0.15999999999999995], 'true,false': [nan, 0.15999999999999995], 'true,false,false': [0.15999999999999995, nan], 'false': [1.1564823173178713e-18, nan]}, {'': [0.06341743845876642, 5.782411586589357e-19], 'true': [nan, 0.06341743845876642], 'true,false': [0.06341743845876642, nan], 'true,false,true': [nan, 0.06341743845876642], 'false': [5.782411586589357e-19, nan]}, {'': [0.0637086323521616, 2.8912057932946786e-18], 'true': [0.0, 0.16], 'true,false': [nan, 0.16], 'true,false,false': [0.16, nan], 'false': [2.8912057932946786e-18, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;true;genre(B, D).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;true;genre(B, D).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;true;genre(B, E).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;true;genre(B, D).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(B, E).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;true;genre(B, D).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;true;genre(B, D).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.8581489350995123;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | else if ( female(B) )
%   | | then return -0.14185106490048777;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return 0.19148226843284552;  // std dev = 1.155, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   else return -0.1418510649004878;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7194734122109542;  // std dev = 7.30e-08, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | else if ( female(B) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return 0.16653882456488173;  // std dev = 1.155, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   else return -0.12544463852839138;  // std dev = 5.27e-09, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.15177773435568745;  // std dev = 0.112, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else if ( female(A) )
%   | | then return 0.5915656471371341;  // std dev = 0.089, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else return 0.5748583192644344;  // std dev = 0.068, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   else return -0.11231637819360636;  // std dev = 9.13e-09, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.41143307872377477;  // std dev = 0.008, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | else if ( female(B) )
%   | | then return -0.09805071595762091;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return 0.12156265748151884;  // std dev = 1.006, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   else return -0.1015963294878363;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.3165934510093558;  // std dev = 0.007, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | else if ( female(A), actor(B) )
%   | | then return -0.12201288343476445;  // std dev = 0.079, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else return 0.08764366182018841;  // std dev = 0.375, 7.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=2 */
%   else return -0.09269127618926097;  // std dev = 5.27e-09, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.2523607551175697;  // std dev = 0.006, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | else if ( female(B) )
%   | | then return -0.08868538323877778;  // std dev = 0.017, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return 0.09069792042733082;  // std dev = 0.981, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   else return -0.08518475138839687;  // std dev = 5.27e-09, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.20777018444666445;  // std dev = 0.005, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | else if ( actor(B), female(A) )
%   | | then return -0.10992131732665579;  // std dev = 0.088, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else return 0.06393009831283492;  // std dev = 0.366, 7.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=2 */
%   else return -0.07877675473109172;  // std dev = 3.73e-09, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.1756376470792647;  // std dev = 0.005, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | else if ( female(B) )
%   | | then return -0.08086658451328925;  // std dev = 0.028, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return 0.0663055831124879;  // std dev = 0.963, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   else return -0.07324622576333704;  // std dev = 3.73e-09, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then if ( female(B) )
%   | | then return -0.07507065883995506;  // std dev = 0.026, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return -0.22238353253412504;  // std dev = 0.054, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else if ( female(A) )
%   | | then return 0.2149695834551879;  // std dev = 0.159, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else return 0.18736593934676618;  // std dev = 0.121, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   else return -0.06842697784420272;  // std dev = 2.63e-09, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.12805682803208066;  // std dev = 0.010, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | else if ( female(B) )
%   | | then return -0.07003341776714306;  // std dev = 0.025, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return 0.06124723367041233;  // std dev = 0.859, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   else return -0.06419184008202619;  // std dev = 5.89e-09, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */


Results
   AUC ROC   = 0.991594
   AUC PR    = 0.821339
   CLL	      = -0.127967
   Precision = 0.693548 at threshold = 0.5
   Recall    = 0.724719
   F1        = 0.708791


Total learning time: 0.929 seconds
Total inference time: 0.99 seconds
AUC ROC: 0.991594


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.141017
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.9
   F1        = 0.947368


Total scoring time: 0.363 seconds
Refined model CLL: -0.141017


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.991594
   AUC PR    = 0.821339
   CLL	      = -0.127967
   Precision = 0.693548 at threshold = 0.5
   Recall    = 0.724719
   F1        = 0.708791


Total learning time: 2.3529999999999998 seconds
Total inference time: 0.99 seconds
AUC ROC: 0.991594
Total revision time: 2.3529999999999998
Best scored revision CLL: -0.141017


Dataset: 4_cora_imdb, Fold: 3, Type: Transfer (trRDN-B), Time: 00:06:39
{'AUC ROC': 0.991594, 'AUC PR': 0.821339, 'CLL': -0.127967, 'Precision': [0.693548, 0.5], 'Recall': 0.724719, 'F1': 0.708791, 'Learning time': 2.3529999999999998, 'Inference time': 0.99, 'parameter_20': {'AUC ROC': 0.97199, 'AUC PR': 0.81824, 'CLL': -0.126888, 'Precision': [1.0, 0.5], 'Recall': 0.724719, 'F1': 0.840391, 'Learning time': 0.685, 'Inference time': 1.036}}


Amount of data: 25
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;title(I, H), venue(I, A).;false;false
0;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
0;false;haswordvenue(A, L), haswordtitle(M, L).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordtitle(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordauthor(I, H).;false;true
2;true,false,false;haswordvenue(A, J), haswordtitle(K, J).;false;false
2;false;haswordvenue(A, L), haswordtitle(M, L).;true;false
2;false,true;haswordauthor(N, L).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;title(E, D), venue(E, B).;false;true
3;true,true,false;title(F, D), venue(F, A).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, A).;false;true
4;true,true,false;title(F, D), venue(F, B).;false;false
4;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
4;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
4;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
4;false,true;haswordauthor(M, K).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, B).;false;true
5;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
5;true,false;haswordvenue(B, H), haswordtitle(I, H).;true;true
5;true,false,true;title(J, I), venue(J, B).;false;false
5;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
5;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;title(E, D), venue(E, A).;false;true
6;true,true,false;title(F, D), venue(F, B).;false;false
6;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
6;true,false,true;title(I, H), venue(I, B).;false;false
6;true,false,false;haswordvenue(A, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;title(F, D), venue(F, A).;false;false
7;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
7;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
7;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
7;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;title(E, D), venue(E, A).;false;true
8;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
8;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
8;true,false,true;title(J, I), venue(J, A).;false;false
8;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
8;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, B).;false;true
9;true,true,false;title(F, D), venue(F, A).;false;false
9;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
9;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
9;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
9;false,true;haswordauthor(M, K).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995121;  // std dev = 8.43e-08, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.011995088945666036;  // std dev = 1.301, 13.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=2 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.1418510649004878;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7194734122109543;  // std dev = 5.96e-08, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | else if ( genre(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(F, B) )
%   | | | then return 0.010528652411522704;  // std dev = 1.301, 13.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=2 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.12544463852839138;  // std dev = 7.45e-09, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A) )
%   | | then return 0.35815090172586556;  // std dev = 2.042, 36.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=25 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.11231637819360636;  // std dev = 2.95e-09, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.46610873544234904;  // std dev = 5.96e-08, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | else if ( genre(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(F, B) )
%   | | | then return -0.04092121428386185;  // std dev = 1.301, 13.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=2 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.1015963294878363;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( genre(B, E) )
%   | | then return 0.3539132435080265;  // std dev = 0.000, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.034583461842274156;  // std dev = 1.301, 13.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=2 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.09269127618926096;  // std dev = 1.32e-09, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.27772084960169424;  // std dev = 0.000, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | else if ( movie(E, B) )
%   | | then if ( genre(B, F) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.029351718549016456;  // std dev = 1.301, 13.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=2 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.08518475138839686;  // std dev = 8.33e-09, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( genre(B, E) )
%   | | then return 0.22556662246310397;  // std dev = 3.94e-08, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | | else if ( movie(F, B) )
%   | | | then return -0.02500040658038791;  // std dev = 1.301, 13.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=2 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.07877675473109172;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.1886076639437242;  // std dev = 0.000, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | else if ( genre(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(F, B) )
%   | | | then return -0.02135826747558145;  // std dev = 1.301, 13.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=2 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.07324622576333704;  // std dev = 9.31e-10, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A) )
%   | | then if ( genre(A, F) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.09652442433712073;  // std dev = 1.400, 36.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=25 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.06842697784420272;  // std dev = 3.73e-09, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.14877836901051333;  // std dev = 1.05e-08, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | else if ( genre(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(F, A) )
%   | | | then return -0.0324868149981873;  // std dev = 1.301, 13.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=2 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.06419184008202619;  // std dev = 1.86e-09, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 0.97199
   AUC PR    = 0.81824
   CLL	      = -0.121863
   Precision = 0.693548 at threshold = 0.5
   Recall    = 0.724719
   F1        = 0.708791


Total learning time: 0.675 seconds
Total inference time: 1.233 seconds
AUC ROC: 0.97199


Results scoring model
   AUC ROC   = 0.9824
   AUC PR    = 0.986431
   CLL	      = -0.194315
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.92
   F1        = 0.958333


Total scoring time: 0.373 seconds
Parameter learned model CLL: -0.194315


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [8.43e-08, 0, 23], 'true,false,false,true': [1.301, 11, 2], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 14, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [5.96e-08, 0, 23], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [1.301, 11, 2], 'true,false,false,false': [0.0, 0, 0], 'false,true': [7.45e-09, 14, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [2.042, 11, 25], 'true,false,false': [0.0, 0, 0], 'false,true': [2.95e-09, 14, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [5.96e-08, 0, 23], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [1.301, 11, 2], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 14, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 23], 'true,false,false,true': [1.301, 11, 2], 'true,false,false,false': [0.0, 0, 0], 'false,true': [1.32e-09, 14, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, B)', 'true,false,true': 'genre(B, F)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 0, 23], 'true,false,true,true': [0.0, 0, 0], 'true,false,true,false': [1.301, 11, 2], 'true,false,false': [0.0, 0, 0], 'false,true': [8.33e-09, 14, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [3.94e-08, 0, 23], 'true,false,false,true': [1.301, 11, 2], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 14, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 0, 23], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [1.301, 11, 2], 'true,false,false,false': [0.0, 0, 0], 'false,true': [9.31e-10, 14, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'true,false,true': 'genre(A, F)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 0, 0], 'true,false,true,true': [0.0, 0, 0], 'true,false,true,false': [1.4, 11, 25], 'true,false,false': [0.0, 0, 0], 'false,true': [3.73e-09, 14, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [1.05e-08, 0, 23], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [1.301, 11, 2], 'true,false,false,false': [0.0, 0, 0], 'false,true': [1.86e-09, 14, 0], 'false,false': [0.0, 0, 0]}]]
[{'': [0.21219135802469255, -1.1895246692412391e-17], 'true': [nan, 0.21219135802469255], 'true,false': [3.089316242435218e-16, 0.13017751479289943], 'true,false,false': [0.13017751479289943, nan], 'false': [-1.1895246692412391e-17, nan]}, {'': [0.16296394751909832, 3.96508223080413e-18], 'true': [1.544658121217609e-16, 0.13017751479289946], 'true,false': [nan, 0.13017751479289946], 'true,false,false': [0.13017751479289946, nan], 'false': [3.96508223080413e-18, nan]}, {'': [0.11582095061069866, 9.912705577010326e-18], 'true': [nan, 0.11582095061069866], 'true,false': [0.11582095061069866, nan], 'false': [9.912705577010326e-18, nan]}, {'': [0.10631929670444983, -3.96508223080413e-18], 'true': [1.544658121217609e-16, 0.13017751479289943], 'true,false': [nan, 0.13017751479289943], 'true,false,false': [0.13017751479289943, nan], 'false': [-3.96508223080413e-18, nan]}, {'': [0.08182951717084908, 3.96508223080413e-18], 'true': [nan, 0.08182951717084908], 'true,false': [-3.8616453030440226e-17, 0.13017751479289946], 'true,false,false': [0.13017751479289946, nan], 'false': [3.96508223080413e-18, nan]}, {'': [0.06876300308191967, 4.956352788505163e-18], 'true': [-1.0619524583371063e-16, 0.1301775147928994], 'true,false': [0.1301775147928994, nan], 'true,false,true': [nan, 0.1301775147928994], 'false': [4.956352788505163e-18, nan]}, {'': [0.06149339807109398, -9.912705577010326e-19], 'true': [nan, 0.06149339807109398], 'true,false': [6.75787928032704e-17, 0.13017751479289935], 'true,false,false': [0.13017751479289935, nan], 'false': [-9.912705577010326e-19, nan]}, {'': [0.05717955164950087, 9.912705577010326e-19], 'true': [-1.4481169886415085e-17, 0.13017751479289935], 'true,false': [nan, 0.13017751479289935], 'true,false,false': [0.13017751479289935, nan], 'false': [9.912705577010326e-19, nan]}, {'': [0.054459858216176854, 9.912705577010326e-19], 'true': [nan, 0.054459858216176854], 'true,false': [0.054459858216176854, nan], 'true,false,true': [nan, 0.054459858216176854], 'false': [9.912705577010326e-19, nan]}, {'': [0.05458899686439474, 3.469446951953614e-18], 'true': [4.827056628805028e-18, 0.13017751479289946], 'true,false': [nan, 0.13017751479289946], 'true,false,false': [0.13017751479289946, nan], 'false': [3.469446951953614e-18, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;true;genre(B, D).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;true;genre(B, D).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;true;genre(B, E).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;true;genre(B, D).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(B, E).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;true;genre(B, D).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;true;genre(B, D).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.8581489350995121;  // std dev = 8.43e-08, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | else if ( female(B) )
%   | | then return -0.14185106490048777;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.10814893509951218;  // std dev = 0.433, 8.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   else return -0.1418510649004878;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7194734122109543;  // std dev = 5.96e-08, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | else if ( female(B) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.09446743783575556;  // std dev = 0.433, 8.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   else return -0.12544463852839138;  // std dev = 7.45e-09, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.14287886651953283;  // std dev = 0.093, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | else if ( female(A) )
%   | | then return 0.5829950323925424;  // std dev = 0.083, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else return 0.5737855005104565;  // std dev = 0.069, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   else return -0.11231637819360636;  // std dev = 1.18e-08, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.41216808705270086;  // std dev = 0.005, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | else if ( female(B) )
%   | | then return -0.09884052295643142;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.07173417842208261;  // std dev = 0.383, 8.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   else return -0.1015963294878363;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.31709031754465117;  // std dev = 0.005, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | else if ( female(B) )
%   | | then return -0.09037908194834188;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.06117530699489143;  // std dev = 0.381, 8.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   else return -0.09269127618926096;  // std dev = 7.45e-09, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.2526997565937311;  // std dev = 0.004, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | else if ( female(A), actor(B) )
%   | | then return -0.10415328851317364;  // std dev = 0.073, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return 0.04610454421545567;  // std dev = 0.355, 9.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   else return -0.08518475138839686;  // std dev = 8.33e-09, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.2080097973298791;  // std dev = 0.004, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | else if ( actor(B), female(A) )
%   | | then return -0.09494950871016045;  // std dev = 0.067, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return 0.039552531698911104;  // std dev = 0.354, 9.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   else return -0.07877675473109172;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.17581351118583335;  // std dev = 0.003, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | else if ( female(B) )
%   | | then return -0.07753778225694763;  // std dev = 0.023, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.042875399314896534;  // std dev = 0.374, 8.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   else return -0.07324622576333704;  // std dev = 3.73e-09, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then if ( female(B) )
%   | | then return -0.0721776152291214;  // std dev = 0.021, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return -0.17906177845271565;  // std dev = 0.036, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else if ( female(A) )
%   | | then return 0.2039259492580594;  // std dev = 0.159, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else return 0.18753942671642893;  // std dev = 0.132, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   else return -0.06842697784420272;  // std dev = 3.73e-09, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.1284552451561016;  // std dev = 0.007, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | else if ( female(B) )
%   | | then return -0.06749675022980849;  // std dev = 0.020, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.043518234857846755;  // std dev = 0.343, 8.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   else return -0.06419184008202619;  // std dev = 6.97e-09, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */


Results
   AUC ROC   = 0.991594
   AUC PR    = 0.821339
   CLL	      = -0.124477
   Precision = 0.693548 at threshold = 0.5
   Recall    = 0.724719
   F1        = 0.708791


Total learning time: 1.069 seconds
Total inference time: 0.981 seconds
AUC ROC: 0.991594


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.140436
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.92
   F1        = 0.958333


Total scoring time: 0.367 seconds
Refined model CLL: -0.140436


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.991594
   AUC PR    = 0.821339
   CLL	      = -0.124477
   Precision = 0.693548 at threshold = 0.5
   Recall    = 0.724719
   F1        = 0.708791


Total learning time: 2.484 seconds
Total inference time: 0.981 seconds
AUC ROC: 0.991594
Total revision time: 2.484
Best scored revision CLL: -0.140436


Dataset: 4_cora_imdb, Fold: 3, Type: Transfer (trRDN-B), Time: 00:06:45
{'AUC ROC': 0.991594, 'AUC PR': 0.821339, 'CLL': -0.124477, 'Precision': [0.693548, 0.5], 'Recall': 0.724719, 'F1': 0.708791, 'Learning time': 2.484, 'Inference time': 0.981, 'parameter_25': {'AUC ROC': 0.97199, 'AUC PR': 0.81824, 'CLL': -0.121863, 'Precision': [0.693548, 0.5], 'Recall': 0.724719, 'F1': 0.708791, 'Learning time': 0.675, 'Inference time': 1.233}}


Starting fold 4

Target train facts examples: 927
Target train pos examples: 337
Target train neg examples: 12345

Target test facts examples: 151
Target test pos	 examples: 45
Target test neg examples: 1891

Amount of data: 5
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;title(I, H), venue(I, A).;false;false
0;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
0;false;haswordvenue(A, L), haswordtitle(M, L).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordtitle(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordauthor(I, H).;false;true
2;true,false,false;haswordvenue(A, J), haswordtitle(K, J).;false;false
2;false;haswordvenue(A, L), haswordtitle(M, L).;true;false
2;false,true;haswordauthor(N, L).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;title(E, D), venue(E, B).;false;true
3;true,true,false;title(F, D), venue(F, A).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, A).;false;true
4;true,true,false;title(F, D), venue(F, B).;false;false
4;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
4;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
4;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
4;false,true;haswordauthor(M, K).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, B).;false;true
5;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
5;true,false;haswordvenue(B, H), haswordtitle(I, H).;true;true
5;true,false,true;title(J, I), venue(J, B).;false;false
5;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
5;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;title(E, D), venue(E, A).;false;true
6;true,true,false;title(F, D), venue(F, B).;false;false
6;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
6;true,false,true;title(I, H), venue(I, B).;false;false
6;true,false,false;haswordvenue(A, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;title(F, D), venue(F, A).;false;false
7;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
7;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
7;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
7;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;title(E, D), venue(E, A).;false;true
8;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
8;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
8;true,false,true;title(J, I), venue(J, A).;false;false
8;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
8;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, B).;false;true
9;true,true,false;title(F, D), venue(F, A).;false;false
9;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
9;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
9;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
9;false,true;haswordauthor(M, K).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995122;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.8581489350995122;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.14185106490048777;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7194734122109545;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( genre(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(F, B) )
%   | | | then return 0.7194734122109545;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.12544463852839138;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A) )
%   | | then return 0.5553664367462845;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.11231637819360638;  // std dev = 1.86e-09, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.41751358415830997;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( genre(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(F, B) )
%   | | | then return 0.41751358415830997;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.10159632948783633;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( genre(B, E) )
%   | | then return 0.32071184716014967;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.32071184716014967;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.09269127618926098;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.25517224256948945;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( movie(E, B) )
%   | | then if ( genre(B, F) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.25517224256948945;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.08518475138839687;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( genre(B, E) )
%   | | then return 0.20975771563253554;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.20975771563253554;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.07877675473109177;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.17709649774527736;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( genre(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(F, B) )
%   | | | then return 0.17709649774527736;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.07324622576333704;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A) )
%   | | then if ( genre(A, F) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.15274385809367097;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.06842697784420272;  // std dev = 1.86e-09, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.13400703000801117;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( genre(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(F, A) )
%   | | | then return 0.13400703000801117;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.0641918400820262;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 0.867266
   AUC PR    = 0.082267
   CLL	      = -0.603438
   Precision = 0.082267 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.152027


Total learning time: 0.564 seconds
Total inference time: 0.91 seconds
AUC ROC: 0.867266


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.094637
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 0.33 seconds
Parameter learned model CLL: -0.094637


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 4], 'true,false,false,true': [0.0, 0, 1], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 5, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 4], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 1], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 5, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 5], 'true,false,false': [0.0, 0, 0], 'false,true': [1.86e-09, 5, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 4], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 1], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 5, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 4], 'true,false,false,true': [0.0, 0, 1], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 5, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, B)', 'true,false,true': 'genre(B, F)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 0, 4], 'true,false,true,true': [0.0, 0, 0], 'true,false,true,false': [0.0, 0, 1], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 5, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 4], 'true,false,false,true': [0.0, 0, 1], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 5, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 0, 4], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 1], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 5, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'true,false,true': 'genre(A, F)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 0, 0], 'true,false,true,true': [0.0, 0, 0], 'true,false,true,false': [0.0, 0, 5], 'true,false,false': [0.0, 0, 0], 'false,true': [1.86e-09, 5, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 4], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 1], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 5, 0], 'false,false': [0.0, 0, 0]}]]
[{'': [0.0, -2.7755575615628915e-18], 'true': [nan, 0.0], 'true,false': [0.0, 0.0], 'true,false,false': [0.0, nan], 'false': [-2.7755575615628915e-18, nan]}, {'': [0.0, 0.0], 'true': [0.0, 0.0], 'false': [0.0, nan], 'true,false': [nan, 0.0], 'true,false,false': [0.0, nan]}, {'': [-4.4408920985006264e-17, 0.0], 'false': [0.0, nan], 'true': [nan, -4.4408920985006264e-17], 'true,false': [-4.4408920985006264e-17, nan]}, {'': [4.4408920985006264e-17, 0.0], 'true': [0.0, 0.0], 'false': [0.0, nan], 'true,false': [nan, 0.0], 'true,false,false': [0.0, nan]}, {'': [-2.2204460492503132e-17, 0.0], 'false': [0.0, nan], 'true': [nan, -2.2204460492503132e-17], 'true,false': [0.0, 0.0], 'true,false,false': [0.0, nan]}, {'': [0.0, 0.0], 'true': [0.0, 0.0], 'false': [0.0, nan], 'true,false': [0.0, nan], 'true,false,true': [nan, 0.0]}, {'': [-5.551115123125783e-18, -1.3877787807814458e-18], 'false': [-1.3877787807814458e-18, nan], 'true': [nan, -5.551115123125783e-18], 'true,false': [0.0, 0.0], 'true,false,false': [0.0, nan]}, {'': [0.0, -6.938893903907229e-19], 'true': [0.0, 0.0], 'true,false': [nan, 0.0], 'true,false,false': [0.0, nan], 'false': [-6.938893903907229e-19, nan]}, {'': [0.0, 6.938893903907229e-19], 'false': [6.938893903907229e-19, nan], 'true': [nan, 0.0], 'true,false': [0.0, nan], 'true,false,true': [nan, 0.0]}, {'': [0.0, 0.0], 'true': [0.0, 0.0], 'false': [0.0, nan], 'true,false': [nan, 0.0], 'true,false,false': [0.0, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;true;genre(B, D).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;true;genre(B, D).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;true;genre(B, E).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;true;genre(B, D).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(B, E).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;true;genre(B, D).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;true;genre(B, D).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.8581489350995122;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else return 0.8581489350995122;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else return -0.14185106490048777;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7194734122109545;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else return 0.7194734122109545;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else return -0.12544463852839138;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.5553664367462845;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return -0.11231637819360638;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.41751358415830997;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else return 0.41751358415830997;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else return -0.10159632948783633;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.32071184716014967;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else return 0.32071184716014967;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else return -0.09269127618926098;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.25517224256948945;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else return 0.25517224256948945;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else return -0.08518475138839687;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.20975771563253554;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else return 0.20975771563253554;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else return -0.07877675473109177;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.17709649774527736;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else return 0.17709649774527736;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else return -0.07324622576333704;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.15274385809367097;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return -0.06842697784420272;  // std dev = 1.86e-09, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.13400703000801117;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else return 0.13400703000801117;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else return -0.0641918400820262;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */


Results
   AUC ROC   = 0.85431
   AUC PR    = 0.075503
   CLL	      = -0.65144
   Precision = 0.075503 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.140406


Total learning time: 0.522 seconds
Total inference time: 0.69 seconds
AUC ROC: 0.85431


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.094637
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 0.311 seconds
Refined model CLL: -0.094637


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.867266
   AUC PR    = 0.082267
   CLL	      = -0.603438
   Precision = 0.082267 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.152027


Total learning time: 1.7269999999999999 seconds
Total inference time: 0.91 seconds
AUC ROC: 0.867266
Total revision time: 1.7269999999999999
Best scored revision CLL: -0.094637


Dataset: 4_cora_imdb, Fold: 4, Type: Transfer (trRDN-B), Time: 00:06:48
{'AUC ROC': 0.867266, 'AUC PR': 0.082267, 'CLL': -0.603438, 'Precision': [0.082267, 0.5], 'Recall': 1.0, 'F1': 0.152027, 'Learning time': 1.7269999999999999, 'Inference time': 0.91, 'parameter_5': {'AUC ROC': 0.867266, 'AUC PR': 0.082267, 'CLL': -0.603438, 'Precision': [0.082267, 0.5], 'Recall': 1.0, 'F1': 0.152027, 'Learning time': 0.564, 'Inference time': 0.91}}


Amount of data: 10
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;title(I, H), venue(I, A).;false;false
0;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
0;false;haswordvenue(A, L), haswordtitle(M, L).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordtitle(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordauthor(I, H).;false;true
2;true,false,false;haswordvenue(A, J), haswordtitle(K, J).;false;false
2;false;haswordvenue(A, L), haswordtitle(M, L).;true;false
2;false,true;haswordauthor(N, L).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;title(E, D), venue(E, B).;false;true
3;true,true,false;title(F, D), venue(F, A).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, A).;false;true
4;true,true,false;title(F, D), venue(F, B).;false;false
4;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
4;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
4;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
4;false,true;haswordauthor(M, K).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, B).;false;true
5;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
5;true,false;haswordvenue(B, H), haswordtitle(I, H).;true;true
5;true,false,true;title(J, I), venue(J, B).;false;false
5;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
5;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;title(E, D), venue(E, A).;false;true
6;true,true,false;title(F, D), venue(F, B).;false;false
6;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
6;true,false,true;title(I, H), venue(I, B).;false;false
6;true,false,false;haswordvenue(A, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;title(F, D), venue(F, A).;false;false
7;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
7;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
7;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
7;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;title(E, D), venue(E, A).;false;true
8;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
8;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
8;true,false,true;title(J, I), venue(J, A).;false;false
8;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
8;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, B).;false;true
9;true,true,false;title(F, D), venue(F, A).;false;false
9;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
9;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
9;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
9;false,true;haswordauthor(M, K).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995123;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.19148226843284552;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.1418510649004878;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7194734122109543;  // std dev = 2.98e-08, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else if ( genre(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(F, B) )
%   | | | then return 0.16653882456488175;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.12544463852839138;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A) )
%   | | then return 0.4520483882636046;  // std dev = 1.025, 12.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=10 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.11231637819360639;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.4428333839346599;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else if ( genre(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(F, B) )
%   | | | then return 0.06240753161412641;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.10159632948783627;  // std dev = 1.32e-09, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( genre(B, E) )
%   | | then return 0.33793635351315704;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.0499058165156003;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.09269127618926097;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.26689365832968215;  // std dev = 1.05e-08, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else if ( movie(E, B) )
%   | | then if ( genre(B, F) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.03966153040147643;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.08518475138839687;  // std dev = 3.73e-09, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( genre(B, E) )
%   | | then return 0.21800435508025368;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.031367808918632924;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.07877675473109173;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.1831218015095074;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else if ( genre(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(F, B) )
%   | | | then return 0.02471524893035622;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.07324622576333704;  // std dev = 9.31e-10, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A) )
%   | | then if ( genre(A, F) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.12282881766334323;  // std dev = 0.842, 12.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=10 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.06842697784420272;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.1416942153635362;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else if ( genre(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(F, A) )
%   | | | then return -0.0076211159136144735;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.0641918400820262;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.158784
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 0.62 seconds
Total inference time: 0.894 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 0.99
   AUC PR    = 0.991667
   CLL	      = -0.180681
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.9
   F1        = 0.947368


Total scoring time: 0.338 seconds
Parameter learned model CLL: -0.180681


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 9], 'true,false,false,true': [0.816, 2, 1], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 8, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [2.98e-08, 0, 9], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.816, 2, 1], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 8, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [1.025, 2, 10], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 8, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 9], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.816, 2, 1], 'true,false,false,false': [0.0, 0, 0], 'false,true': [1.32e-09, 8, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 9], 'true,false,false,true': [0.816, 2, 1], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 8, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, B)', 'true,false,true': 'genre(B, F)', 'false': 'movie(G, A)'}, {'true,true': [1.05e-08, 0, 9], 'true,false,true,true': [0.0, 0, 0], 'true,false,true,false': [0.816, 2, 1], 'true,false,false': [0.0, 0, 0], 'false,true': [3.73e-09, 8, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 9], 'true,false,false,true': [0.816, 2, 1], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 8, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 0, 9], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.816, 2, 1], 'true,false,false,false': [0.0, 0, 0], 'false,true': [9.31e-10, 8, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'true,false,true': 'genre(A, F)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 0, 0], 'true,false,true,true': [0.0, 0, 0], 'true,false,true,false': [0.842, 2, 10], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 8, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 9], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.816, 2, 1], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 8, 0], 'false,false': [0.0, 0, 0]}]]
[{'': [0.1388888888888887, -6.938893903907228e-18], 'true': [nan, 0.1388888888888887], 'true,false': [-2.9605947323337506e-16, 0.22222222222222224], 'true,false,false': [0.22222222222222224, nan], 'false': [-6.938893903907228e-18, nan]}, {'': [0.11288117897093038, 0.0], 'true': [9.868649107779169e-17, 0.2222222222222222], 'true,false': [nan, 0.2222222222222222], 'true,false,false': [0.2222222222222222, nan], 'false': [0.0, nan]}, {'': [0.08757941298236364, -1.734723475976807e-18], 'true': [nan, 0.08757941298236364], 'true,false': [0.08757941298236364, nan], 'false': [-1.734723475976807e-18, nan]}, {'': [0.08269127351439381, 1.734723475976807e-18], 'true': [0.0, 0.22222222222222224], 'true,false': [nan, 0.22222222222222224], 'true,false,false': [0.22222222222222224, nan], 'false': [1.734723475976807e-18, nan]}, {'': [0.07111085372613697, 0.0], 'true': [nan, 0.07111085372613697], 'true,false': [0.0, 0.22222222222222224], 'true,false,false': [0.22222222222222224, nan], 'false': [0.0, nan]}, {'': [0.06523701304857689, 1.734723475976807e-18], 'true': [1.2335811384723961e-17, 0.22222222222222224], 'true,false': [0.22222222222222224, nan], 'true,false,true': [nan, 0.22222222222222224], 'false': [1.734723475976807e-18, nan]}, {'': [0.062086780623644054, 0.0], 'true': [nan, 0.062086780623644054], 'true,false': [-2.4671622769447922e-17, 0.22222222222222224], 'true,false,false': [0.22222222222222224, nan], 'false': [0.0, nan]}, {'': [0.06026042478680768, 8.673617379884035e-19], 'true': [-6.1679056923619804e-18, 0.22222222222222224], 'true,false': [nan, 0.22222222222222224], 'true,false,false': [0.22222222222222224, nan], 'false': [8.673617379884035e-19, nan]}, {'': [0.059120231063917235, 0.0], 'true': [nan, 0.059120231063917235], 'true,false': [0.059120231063917235, nan], 'true,false,true': [nan, 0.059120231063917235], 'false': [0.0, nan]}, {'': [0.05973588083450656, 0.0], 'true': [0.0, 0.22222222222222218], 'true,false': [nan, 0.22222222222222218], 'true,false,false': [0.22222222222222218, nan], 'false': [0.0, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;true;genre(B, D).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;true;genre(B, D).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;true;genre(B, E).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;true;genre(B, D).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(B, E).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;true;genre(B, D).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;true;genre(B, D).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.8581489350995123;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else return 0.19148226843284552;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   else return -0.1418510649004878;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7194734122109543;  // std dev = 2.98e-08, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else return 0.16653882456488175;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   else return -0.12544463852839138;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( female(A) )
%   | then return 0.6060453312934738;  // std dev = 0.227, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return 0.342050571813698;  // std dev = 0.337, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else return -0.11231637819360639;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.4412841711176195;  // std dev = 0.097, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else return 0.06603381484794513;  // std dev = 0.774, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   else return -0.10159632948783627;  // std dev = 3.73e-09, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.3372760343895276;  // std dev = 0.087, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else return 0.05294655844895121;  // std dev = 0.772, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   else return -0.09269127618926097;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.2666799379305075;  // std dev = 0.076, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else return 0.042176094454252376;  // std dev = 0.771, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   else return -0.08518475138839687;  // std dev = 3.73e-09, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.21799490823284995;  // std dev = 0.066, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else return 0.0334250113895597;  // std dev = 0.771, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   else return -0.07877675473109173;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.1832026489376305;  // std dev = 0.058, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else return 0.02638437505737042;  // std dev = 0.770, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   else return -0.07324622576333704;  // std dev = 2.63e-09, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( female(A) )
%   | then return 0.2403952103861148;  // std dev = 0.457, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return 0.03958173637695474;  // std dev = 0.211, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else return -0.06842697784420272;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.14265851509956315;  // std dev = 0.082, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else return -0.003589016731477194;  // std dev = 0.730, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   else return -0.0641918400820262;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */


Results
   AUC ROC   = 0.999201
   AUC PR    = 0.95488
   CLL	      = -0.161973
   Precision = 0.918367 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.957447


Total learning time: 0.635 seconds
Total inference time: 0.739 seconds
AUC ROC: 0.999201


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.166609
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.9
   F1        = 0.947368


Total scoring time: 0.329 seconds
Refined model CLL: -0.166609


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.999201
   AUC PR    = 0.95488
   CLL	      = -0.161973
   Precision = 0.918367 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.957447


Total learning time: 1.922 seconds
Total inference time: 0.739 seconds
AUC ROC: 0.999201
Total revision time: 1.922
Best scored revision CLL: -0.166609


Dataset: 4_cora_imdb, Fold: 4, Type: Transfer (trRDN-B), Time: 00:06:53
{'AUC ROC': 0.999201, 'AUC PR': 0.95488, 'CLL': -0.161973, 'Precision': [0.918367, 0.5], 'Recall': 1.0, 'F1': 0.957447, 'Learning time': 1.922, 'Inference time': 0.739, 'parameter_10': {'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.158784, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 0.62, 'Inference time': 0.894}}


Amount of data: 15
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;title(I, H), venue(I, A).;false;false
0;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
0;false;haswordvenue(A, L), haswordtitle(M, L).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordtitle(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordauthor(I, H).;false;true
2;true,false,false;haswordvenue(A, J), haswordtitle(K, J).;false;false
2;false;haswordvenue(A, L), haswordtitle(M, L).;true;false
2;false,true;haswordauthor(N, L).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;title(E, D), venue(E, B).;false;true
3;true,true,false;title(F, D), venue(F, A).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, A).;false;true
4;true,true,false;title(F, D), venue(F, B).;false;false
4;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
4;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
4;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
4;false,true;haswordauthor(M, K).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, B).;false;true
5;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
5;true,false;haswordvenue(B, H), haswordtitle(I, H).;true;true
5;true,false,true;title(J, I), venue(J, B).;false;false
5;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
5;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;title(E, D), venue(E, A).;false;true
6;true,true,false;title(F, D), venue(F, B).;false;false
6;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
6;true,false,true;title(I, H), venue(I, B).;false;false
6;true,false,false;haswordvenue(A, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;title(F, D), venue(F, A).;false;false
7;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
7;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
7;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
7;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;title(E, D), venue(E, A).;false;true
8;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
8;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
8;true,false,true;title(J, I), venue(J, A).;false;false
8;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
8;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, B).;false;true
9;true,true,false;title(F, D), venue(F, A).;false;false
9;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
9;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
9;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
9;false,true;haswordauthor(M, K).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995123;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.19148226843284552;  // std dev = 1.155, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.1418510649004878;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7194734122109542;  // std dev = 4.21e-08, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else if ( genre(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(F, B) )
%   | | | then return 0.16653882456488173;  // std dev = 1.155, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.12544463852839138;  // std dev = 5.27e-09, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A) )
%   | | then return 0.4248594281365835;  // std dev = 1.426, 19.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=15 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.11231637819360638;  // std dev = 1.32e-09, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.4495517984126926;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else if ( genre(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(F, B) )
%   | | | then return 0.06774446256273245;  // std dev = 1.155, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.10159632948783628;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( genre(B, E) )
%   | | then return 0.3425314225351491;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.054322804718339224;  // std dev = 1.155, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.09269127618926097;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.2700113489217535;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else if ( movie(E, B) )
%   | | then if ( genre(B, F) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.043265003649056576;  // std dev = 1.155, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.08518475138839687;  // std dev = 5.27e-09, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( genre(B, E) )
%   | | then return 0.22018710589497134;  // std dev = 1.05e-08, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.03427524901914764;  // std dev = 1.155, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.07877675473109172;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.18470900599812318;  // std dev = 1.83e-08, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else if ( genre(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(F, B) )
%   | | | then return 0.027041276292085026;  // std dev = 1.155, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.07324622576333704;  // std dev = 1.32e-09, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A) )
%   | | then if ( genre(A, F) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.11515911393060707;  // std dev = 1.188, 19.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=15 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.06842697784420272;  // std dev = 2.63e-09, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.1437321705384514;  // std dev = 1.29e-08, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else if ( genre(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(F, A) )
%   | | | then return -0.003975180555335227;  // std dev = 1.155, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.06419184008202619;  // std dev = 1.61e-09, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.157747
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 0.679 seconds
Total inference time: 0.879 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 0.982222
   AUC PR    = 0.984649
   CLL	      = -0.208989
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.866667
   F1        = 0.928571


Total scoring time: 0.364 seconds
Parameter learned model CLL: -0.208989


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 13], 'true,false,false,true': [1.155, 4, 2], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 11, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [4.21e-08, 0, 13], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [1.155, 4, 2], 'true,false,false,false': [0.0, 0, 0], 'false,true': [5.27e-09, 11, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [1.426, 4, 15], 'true,false,false': [0.0, 0, 0], 'false,true': [1.32e-09, 11, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 13], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [1.155, 4, 2], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 11, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 13], 'true,false,false,true': [1.155, 4, 2], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 11, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, B)', 'true,false,true': 'genre(B, F)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 0, 13], 'true,false,true,true': [0.0, 0, 0], 'true,false,true,false': [1.155, 4, 2], 'true,false,false': [0.0, 0, 0], 'false,true': [5.27e-09, 11, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [1.05e-08, 0, 13], 'true,false,false,true': [1.155, 4, 2], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 11, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, A)'}, {'true,true': [1.83e-08, 0, 13], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [1.155, 4, 2], 'true,false,false,false': [0.0, 0, 0], 'false,true': [1.32e-09, 11, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'true,false,true': 'genre(A, F)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 0, 0], 'true,false,true,true': [0.0, 0, 0], 'true,false,true,false': [1.188, 4, 15], 'true,false,false': [0.0, 0, 0], 'false,true': [2.63e-09, 11, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [1.29e-08, 0, 13], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [1.155, 4, 2], 'true,false,false,false': [0.0, 0, 0], 'false,true': [1.61e-09, 11, 0], 'false,false': [0.0, 0, 0]}]]
[{'': [0.16620498614958412, -1.0092936587501423e-17], 'true': [nan, 0.16620498614958412], 'true,false': [-2.7328566760003855e-16, 0.22222222222222224], 'true,false,false': [0.22222222222222224, nan], 'false': [-1.0092936587501423e-17, nan]}, {'': [0.13623488275382042, 2.523234146875356e-18], 'true': [1.3664283380001927e-16, 0.2222222222222222], 'true,false': [nan, 0.2222222222222222], 'true,false,false': [0.2222222222222222, nan], 'false': [2.523234146875356e-18, nan]}, {'': [0.10707827707170503, 5.046468293750712e-18], 'true': [nan, 0.10707827707170503], 'true,false': [0.10707827707170503, nan], 'false': [5.046468293750712e-18, nan]}, {'': [0.10167292794078435, 0.0], 'true': [-6.832141690000964e-17, 0.22222222222222224], 'true,false': [nan, 0.22222222222222224], 'true,false,false': [0.22222222222222224, nan], 'false': [0.0, nan]}, {'': [0.08812282966558355, 0.0], 'true': [nan, 0.08812282966558355], 'true,false': [-6.832141690000964e-17, 0.22222222222222218], 'true,false,false': [0.22222222222222218, nan], 'false': [0.0, nan]}, {'': [0.08128426019586227, 2.523234146875356e-18], 'true': [-2.5620531337503614e-17, 0.22222222222222218], 'true,false': [0.22222222222222218, nan], 'true,false,true': [nan, 0.22222222222222218], 'false': [2.523234146875356e-18, nan]}, {'': [0.0776433916300295, 0.0], 'true': [nan, 0.0776433916300295], 'true,false': [8.540177112501205e-18, 0.2222222222222222], 'true,false,false': [0.2222222222222222, nan], 'false': [0.0, nan]}, {'': [0.07554665968588511, 6.30808536718839e-19], 'true': [2.5620531337503614e-17, 0.2222222222222222], 'true,false': [nan, 0.2222222222222222], 'true,false,false': [0.2222222222222222, nan], 'false': [6.30808536718839e-19, nan]}, {'': [0.07424434759021795, 6.30808536718839e-19], 'true': [nan, 0.07424434759021795], 'true,false': [0.07424434759021795, nan], 'true,false,true': [nan, 0.07424434759021795], 'false': [6.30808536718839e-19, nan]}, {'': [0.0748894607633532, 2.523234146875356e-18], 'true': [1.2810265668751807e-17, 0.22222222222222218], 'true,false': [nan, 0.22222222222222218], 'true,false,false': [0.22222222222222218, nan], 'false': [2.523234146875356e-18, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;true;genre(B, D).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;true;genre(B, D).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;true;genre(B, E).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;true;genre(B, D).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(B, E).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;true;genre(B, D).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;true;genre(B, D).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.8581489350995123;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else return 0.19148226843284552;  // std dev = 1.155, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   else return -0.1418510649004878;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7194734122109542;  // std dev = 4.21e-08, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else return 0.16653882456488173;  // std dev = 1.155, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   else return -0.12544463852839138;  // std dev = 5.27e-09, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B) )
%   | then if ( female(A) )
%   | | then return 0.6187150549302712;  // std dev = 0.110, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return 0.5553664367462846;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else return -0.19123909051776852;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   else return -0.11231637819360638;  // std dev = 7.45e-09, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.4104423771120868;  // std dev = 0.028, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else return 0.12271623886340333;  // std dev = 0.991, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   else return -0.10159632948783628;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.3159417593918674;  // std dev = 0.025, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else return 0.10219342832701271;  // std dev = 0.981, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   else return -0.09269127618926097;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.2519266192983268;  // std dev = 0.021, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else return 0.08409255035423523;  // std dev = 0.972, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   else return -0.08518475138839687;  // std dev = 5.27e-09, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.20746966804441966;  // std dev = 0.019, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else return 0.06852315440779207;  // std dev = 0.965, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   else return -0.07877675473109172;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.17542110391217833;  // std dev = 0.016, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else return 0.05539766510745076;  // std dev = 0.960, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   else return -0.07324622576333704;  // std dev = 2.63e-09, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B) )
%   | then if ( female(A) )
%   | | then return 0.25941531480643676;  // std dev = 0.195, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return 0.15522556787912523;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else return -0.23142274883095143;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   else return -0.06842697784420272;  // std dev = 2.63e-09, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.12739971027296962;  // std dev = 0.033, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else return 0.04900744235485127;  // std dev = 0.838, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   else return -0.06419184008202619;  // std dev = 5.27e-09, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */


Results
   AUC ROC   = 0.999201
   AUC PR    = 0.95488
   CLL	      = -0.113662
   Precision = 0.918367 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.957447


Total learning time: 0.693 seconds
Total inference time: 0.78 seconds
AUC ROC: 0.999201


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.154128
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.866667
   F1        = 0.928571


Total scoring time: 0.347 seconds
Refined model CLL: -0.154128


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.999201
   AUC PR    = 0.95488
   CLL	      = -0.113662
   Precision = 0.918367 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.957447


Total learning time: 2.083 seconds
Total inference time: 0.78 seconds
AUC ROC: 0.999201
Total revision time: 2.083
Best scored revision CLL: -0.154128


Dataset: 4_cora_imdb, Fold: 4, Type: Transfer (trRDN-B), Time: 00:06:57
{'AUC ROC': 0.999201, 'AUC PR': 0.95488, 'CLL': -0.113662, 'Precision': [0.918367, 0.5], 'Recall': 1.0, 'F1': 0.957447, 'Learning time': 2.083, 'Inference time': 0.78, 'parameter_15': {'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.157747, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 0.679, 'Inference time': 0.879}}


Amount of data: 20
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;title(I, H), venue(I, A).;false;false
0;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
0;false;haswordvenue(A, L), haswordtitle(M, L).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordtitle(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordauthor(I, H).;false;true
2;true,false,false;haswordvenue(A, J), haswordtitle(K, J).;false;false
2;false;haswordvenue(A, L), haswordtitle(M, L).;true;false
2;false,true;haswordauthor(N, L).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;title(E, D), venue(E, B).;false;true
3;true,true,false;title(F, D), venue(F, A).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, A).;false;true
4;true,true,false;title(F, D), venue(F, B).;false;false
4;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
4;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
4;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
4;false,true;haswordauthor(M, K).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, B).;false;true
5;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
5;true,false;haswordvenue(B, H), haswordtitle(I, H).;true;true
5;true,false,true;title(J, I), venue(J, B).;false;false
5;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
5;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;title(E, D), venue(E, A).;false;true
6;true,true,false;title(F, D), venue(F, B).;false;false
6;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
6;true,false,true;title(I, H), venue(I, B).;false;false
6;true,false,false;haswordvenue(A, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;title(F, D), venue(F, A).;false;false
7;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
7;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
7;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
7;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;title(E, D), venue(E, A).;false;true
8;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
8;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
8;true,false,true;title(J, I), venue(J, A).;false;false
8;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
8;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, B).;false;true
9;true,true,false;title(F, D), venue(F, A).;false;false
9;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
9;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
9;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
9;false,true;haswordauthor(M, K).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995123;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.2581489350995123;  // std dev = 1.549, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.1418510649004878;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7194734122109542;  // std dev = 5.96e-08, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | else if ( genre(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(F, B) )
%   | | | then return 0.22373365448410584;  // std dev = 1.549, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.12544463852839138;  // std dev = 7.45e-09, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A) )
%   | | then return 0.41440562344290505;  // std dev = 1.796, 26.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=20 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.11231637819360636;  // std dev = 2.95e-09, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.45213998581002995;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | else if ( genre(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(F, B) )
%   | | | then return 0.11171167833049375;  // std dev = 1.549, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.1015963294878363;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( genre(B, E) )
%   | | then return 0.34430497579425084;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.08826063126898412;  // std dev = 1.549, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.09269127618926096;  // std dev = 1.32e-09, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.2712138075990018;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | else if ( movie(E, B) )
%   | | then if ( genre(B, F) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.0690163403608203;  // std dev = 1.549, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.08518475138839686;  // std dev = 8.33e-09, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( genre(B, E) )
%   | | then return 0.22102782290567796;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.05355964640388711;  // std dev = 1.549, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.07877675473109172;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.18531951305460392;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | else if ( genre(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(F, B) )
%   | | | then return 0.04133508154484848;  // std dev = 1.549, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.07324622576333704;  // std dev = 9.31e-10, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A) )
%   | | then if ( genre(A, F) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.11003782695333858;  // std dev = 1.581, 26.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=20 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.06842697784420272;  // std dev = 3.73e-09, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.1447888525281511;  // std dev = 7.45e-09, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | else if ( genre(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(F, A) )
%   | | | then return 0.00582366026499691;  // std dev = 1.549, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.06419184008202619;  // std dev = 1.86e-09, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.182072
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 0.649 seconds
Total inference time: 0.877 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 0.97
   AUC PR    = 0.973459
   CLL	      = -0.244763
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.8
   F1        = 0.888889


Total scoring time: 0.393 seconds
Parameter learned model CLL: -0.244763


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 16], 'true,false,false,true': [1.549, 6, 4], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 14, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [5.96e-08, 0, 16], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [1.549, 6, 4], 'true,false,false,false': [0.0, 0, 0], 'false,true': [7.45e-09, 14, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [1.796, 6, 20], 'true,false,false': [0.0, 0, 0], 'false,true': [2.95e-09, 14, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 16], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [1.549, 6, 4], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 14, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 16], 'true,false,false,true': [1.549, 6, 4], 'true,false,false,false': [0.0, 0, 0], 'false,true': [1.32e-09, 14, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, B)', 'true,false,true': 'genre(B, F)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 0, 16], 'true,false,true,true': [0.0, 0, 0], 'true,false,true,false': [1.549, 6, 4], 'true,false,false': [0.0, 0, 0], 'false,true': [8.33e-09, 14, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 16], 'true,false,false,true': [1.549, 6, 4], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 14, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 0, 16], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [1.549, 6, 4], 'true,false,false,false': [0.0, 0, 0], 'false,true': [9.31e-10, 14, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'true,false,true': 'genre(A, F)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 0, 0], 'true,false,true,true': [0.0, 0, 0], 'true,false,true,false': [1.581, 6, 20], 'true,false,false': [0.0, 0, 0], 'false,true': [3.73e-09, 14, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [7.45e-09, 0, 16], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [1.549, 6, 4], 'true,false,false,false': [0.0, 0, 0], 'false,true': [1.86e-09, 14, 0], 'false,false': [0.0, 0, 0]}]]
[{'': [0.17751479289940847, -1.1895246692412391e-17], 'true': [nan, 0.17751479289940847], 'true,false': [-2.220446049250313e-16, 0.23999999999999985], 'true,false,false': [0.23999999999999985, nan], 'false': [-1.1895246692412391e-17, nan]}, {'': [0.1504752443529174, 3.96508223080413e-18], 'true': [2.220446049250313e-16, 0.2399999999999999], 'true,false': [nan, 0.2399999999999999], 'true,false,false': [0.2399999999999999, nan], 'false': [3.96508223080413e-18, nan]}, {'': [0.12409961372713244, 9.912705577010326e-18], 'true': [nan, 0.12409961372713244], 'true,false': [0.12409961372713244, nan], 'false': [9.912705577010326e-18, nan]}, {'': [0.11973761716766432, -3.96508223080413e-18], 'true': [0.0, 0.23999999999999994], 'true,false': [nan, 0.23999999999999994], 'true,false,false': [0.23999999999999994, nan], 'false': [-3.96508223080413e-18, nan]}, {'': [0.1078245458848221, 3.96508223080413e-18], 'true': [nan, 0.1078245458848221], 'true,false': [-6.938893903907228e-17, 0.23999999999999994], 'true,false,false': [0.23999999999999994, nan], 'false': [3.96508223080413e-18, nan]}, {'': [0.10198433509054088, 4.956352788505163e-18], 'true': [0.0, 0.2399999999999999], 'true,false': [0.2399999999999999, nan], 'true,false,true': [nan, 0.2399999999999999], 'false': [4.956352788505163e-18, nan]}, {'': [0.09894570180848154, -9.912705577010326e-19], 'true': [nan, 0.09894570180848154], 'true,false': [-2.7755575615628914e-17, 0.23999999999999994], 'true,false,false': [0.23999999999999994, nan], 'false': [-9.912705577010326e-19, nan]}, {'': [0.09721456012241124, 9.912705577010326e-19], 'true': [0.0, 0.24000000000000007], 'true,false': [nan, 0.24000000000000007], 'true,false,false': [0.24000000000000007, nan], 'false': [9.912705577010326e-19, nan]}, {'': [0.0961361056446748, 9.912705577010326e-19], 'true': [nan, 0.0961361056446748], 'true,false': [0.0961361056446748, nan], 'true,false,true': [nan, 0.0961361056446748], 'false': [9.912705577010326e-19, nan]}, {'': [0.09687842003804384, 3.469446951953614e-18], 'true': [3.469446951953614e-18, 0.2399999999999999], 'true,false': [nan, 0.2399999999999999], 'true,false,false': [0.2399999999999999, nan], 'false': [3.469446951953614e-18, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;true;genre(B, D).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;true;genre(B, D).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;true;genre(B, E).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;true;genre(B, D).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(B, E).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;true;genre(B, D).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;true;genre(B, D).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.8581489350995123;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | else if ( actor(B) )
%   | | then return -0.1418510649004878;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else return 0.8581489350995122;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else return -0.1418510649004878;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7194734122109542;  // std dev = 5.96e-08, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | else if ( actor(B) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else return 0.7194734122109545;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else return -0.12544463852839138;  // std dev = 7.45e-09, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.11231637819360639;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else return 0.5553664367462846;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   else return -0.11231637819360636;  // std dev = 1.18e-08, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.4175135841583098;  // std dev = 5.16e-08, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | else if ( actor(B) )
%   | | then return -0.10159632948783627;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else return 0.41751358415830997;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else return -0.1015963294878363;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.32071184716014967;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | else if ( actor(B) )
%   | | then return -0.09269127618926097;  // std dev = 2.63e-09, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else return 0.32071184716014967;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else return -0.09269127618926096;  // std dev = 7.45e-09, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.2551722425694894;  // std dev = 2.11e-08, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | else if ( actor(B) )
%   | | then return -0.08518475138839687;  // std dev = 2.63e-09, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else return 0.25517224256948945;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else return -0.08518475138839686;  // std dev = 8.33e-09, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.20975771563253562;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | else if ( actor(B) )
%   | | then return -0.07877675473109173;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else return 0.20975771563253554;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else return -0.07877675473109172;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.17709649774527741;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | else if ( actor(B) )
%   | | then return -0.07324622576333704;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else return 0.17709649774527736;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else return -0.07324622576333704;  // std dev = 3.73e-09, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B) )
%   | then return 0.15274385809367083;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | else return -0.06842697784420272;  // std dev = 1.86e-09, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   else return -0.06842697784420272;  // std dev = 3.73e-09, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.13400703000801117;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | else if ( actor(B) )
%   | | then return -0.0641918400820262;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else return 0.13400703000801117;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else return -0.06419184008202619;  // std dev = 6.97e-09, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */


Results
   AUC ROC   = 0.998942
   AUC PR    = 0.918367
   CLL	      = -0.068112
   Precision = 0.918367 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.957447


Total learning time: 0.865 seconds
Total inference time: 0.804 seconds
AUC ROC: 0.998942


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.094637
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 0.365 seconds
Refined model CLL: -0.094637


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.998942
   AUC PR    = 0.918367
   CLL	      = -0.068112
   Precision = 0.918367 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.957447


Total learning time: 2.2720000000000002 seconds
Total inference time: 0.804 seconds
AUC ROC: 0.998942
Total revision time: 2.2720000000000002
Best scored revision CLL: -0.094637


Dataset: 4_cora_imdb, Fold: 4, Type: Transfer (trRDN-B), Time: 00:07:01
{'AUC ROC': 0.998942, 'AUC PR': 0.918367, 'CLL': -0.068112, 'Precision': [0.918367, 0.5], 'Recall': 1.0, 'F1': 0.957447, 'Learning time': 2.2720000000000002, 'Inference time': 0.804, 'parameter_20': {'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.182072, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 0.649, 'Inference time': 0.877}}


Amount of data: 25
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;title(I, H), venue(I, A).;false;false
0;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
0;false;haswordvenue(A, L), haswordtitle(M, L).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordtitle(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordauthor(I, H).;false;true
2;true,false,false;haswordvenue(A, J), haswordtitle(K, J).;false;false
2;false;haswordvenue(A, L), haswordtitle(M, L).;true;false
2;false,true;haswordauthor(N, L).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;title(E, D), venue(E, B).;false;true
3;true,true,false;title(F, D), venue(F, A).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, A).;false;true
4;true,true,false;title(F, D), venue(F, B).;false;false
4;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
4;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
4;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
4;false,true;haswordauthor(M, K).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, B).;false;true
5;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
5;true,false;haswordvenue(B, H), haswordtitle(I, H).;true;true
5;true,false,true;title(J, I), venue(J, B).;false;false
5;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
5;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;title(E, D), venue(E, A).;false;true
6;true,true,false;title(F, D), venue(F, B).;false;false
6;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
6;true,false,true;title(I, H), venue(I, B).;false;false
6;true,false,false;haswordvenue(A, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;title(F, D), venue(F, A).;false;false
7;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
7;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
7;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
7;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;title(E, D), venue(E, A).;false;true
8;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
8;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
8;true,false,true;title(J, I), venue(J, A).;false;false
8;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
8;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, B).;false;true
9;true,true,false;title(F, D), venue(F, A).;false;false
9;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
9;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
9;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
9;false,true;haswordauthor(M, K).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995122;  // std dev = 0.000, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.2581489350995123;  // std dev = 1.549, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.14185106490048777;  // std dev = 0.000, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7194734122109543;  // std dev = 7.30e-08, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | else if ( genre(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(F, B) )
%   | | | then return 0.22373365448410584;  // std dev = 1.549, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.12544463852839138;  // std dev = 0.000, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A) )
%   | | then return 0.4371412384918372;  // std dev = 1.819, 31.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=25 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.11231637819360635;  // std dev = 3.73e-09, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.4465145233500466;  // std dev = 0.000, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | else if ( genre(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(F, B) )
%   | | | then return 0.10702446705145156;  // std dev = 1.549, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.10159632948783635;  // std dev = 0.000, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( genre(B, E) )
%   | | then return 0.3404525605255448;  // std dev = 0.000, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.0843751062528085;  // std dev = 1.549, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.09269127618926093;  // std dev = 2.63e-09, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.2686012871586548;  // std dev = 3.33e-08, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | else if ( movie(E, B) )
%   | | then if ( genre(B, F) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.06587273238900238;  // std dev = 1.549, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.08518475138839683;  // std dev = 1.29e-08, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( genre(B, E) )
%   | | then return 0.21920043184744462;  // std dev = 0.000, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.05106046572584735;  // std dev = 1.549, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.07877675473109179;  // std dev = 0.000, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.18399192369200104;  // std dev = 2.58e-08, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | else if ( genre(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(F, B) )
%   | | | then return 0.0393729020132431;  // std dev = 1.549, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.07324622576333704;  // std dev = 0.000, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A) )
%   | | then if ( genre(A, F) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.11675831948605116;  // std dev = 1.584, 31.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=25 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.06842697784420274;  // std dev = 0.000, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.1430380754842;  // std dev = 1.05e-08, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | else if ( genre(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(F, A) )
%   | | | then return 0.0026483444375207665;  // std dev = 1.549, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.0641918400820262;  // std dev = 1.32e-09, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.183052
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 0.767 seconds
Total inference time: 0.876 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 0.9808
   AUC PR    = 0.982645
   CLL	      = -0.215043
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.84
   F1        = 0.913043


Total scoring time: 0.381 seconds
Parameter learned model CLL: -0.215043


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 21], 'true,false,false,true': [1.549, 6, 4], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 19, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [7.3e-08, 0, 21], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [1.549, 6, 4], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 19, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [1.819, 6, 25], 'true,false,false': [0.0, 0, 0], 'false,true': [3.73e-09, 19, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 21], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [1.549, 6, 4], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 19, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 21], 'true,false,false,true': [1.549, 6, 4], 'true,false,false,false': [0.0, 0, 0], 'false,true': [2.63e-09, 19, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, B)', 'true,false,true': 'genre(B, F)', 'false': 'movie(G, A)'}, {'true,true': [3.33e-08, 0, 21], 'true,false,true,true': [0.0, 0, 0], 'true,false,true,false': [1.549, 6, 4], 'true,false,false': [0.0, 0, 0], 'false,true': [1.29e-08, 19, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 21], 'true,false,false,true': [1.549, 6, 4], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 19, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, A)'}, {'true,true': [2.58e-08, 0, 21], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [1.549, 6, 4], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 19, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'true,false,true': 'genre(A, F)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 0, 0], 'true,false,true,true': [0.0, 0, 0], 'true,false,true,false': [1.584, 6, 25], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 19, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [1.05e-08, 0, 21], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [1.549, 6, 4], 'true,false,false,false': [0.0, 0, 0], 'false,true': [1.32e-09, 19, 0], 'false,false': [0.0, 0, 0]}]]
[{'': [0.15608740894901246, 0.0], 'true': [nan, 0.15608740894901246], 'true,false': [0.0, 0.23999999999999985], 'true,false,false': [0.23999999999999985, nan], 'false': [0.0, nan]}, {'': [0.13112295582947542, 0.0], 'true': [2.5376526277146434e-16, 0.2399999999999999], 'true,false': [nan, 0.2399999999999999], 'true,false,false': [0.2399999999999999, nan], 'false': [0.0, nan]}, {'': [0.10677146959354664, 1.460819769243627e-17], 'true': [nan, 0.10677146959354664], 'true,false': [0.10677146959354664, nan], 'false': [1.460819769243627e-17, nan]}, {'': [0.10260482273504767, -5.843279076974508e-18], 'true': [0.0, 0.24], 'true,false': [nan, 0.24], 'true,false,false': [0.24, nan], 'false': [-5.843279076974508e-18, nan]}, {'': [0.09174910420731433, 7.304098846218135e-18], 'true': [nan, 0.09174910420731433], 'true,false': [-1.4802973661668753e-16, 0.24000000000000007], 'true,false,false': [0.24000000000000007, nan], 'false': [7.304098846218135e-18, nan]}, {'': [0.08640037674608565, 8.764918615461762e-18], 'true': [5.2867763077388404e-17, 0.23999999999999994], 'true,false': [0.23999999999999994, nan], 'true,false,true': [nan, 0.23999999999999994], 'false': [8.764918615461762e-18, nan]}, {'': [0.08359721136685545, -7.304098846218135e-19], 'true': [nan, 0.08359721136685545], 'true,false': [-3.172065784643304e-17, 0.24000000000000005], 'true,false,false': [0.24000000000000005, nan], 'false': [-7.304098846218135e-19, nan]}, {'': [0.08198967627531469, -7.304098846218135e-19], 'true': [3.172065784643304e-17, 0.24], 'true,false': [nan, 0.24], 'true,false,false': [0.24, nan], 'false': [-7.304098846218135e-19, nan]}, {'': [0.08098338057670221, -2.1912296538654404e-18], 'true': [nan, 0.08098338057670221], 'true,false': [0.08098338057670221, nan], 'true,false,true': [nan, 0.08098338057670221], 'false': [-2.1912296538654404e-18, nan]}, {'': [0.08172627271852795, 2.1912296538654404e-18], 'true': [5.28677630773884e-18, 0.24000000000000005], 'true,false': [nan, 0.24000000000000005], 'true,false,false': [0.24000000000000005, nan], 'false': [2.1912296538654404e-18, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;true;genre(B, D).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;true;genre(B, D).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;true;genre(B, E).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;true;genre(B, D).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(B, E).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;true;genre(B, D).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;true;genre(B, D).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.8581489350995122;  // std dev = 0.000, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | else if ( actor(B) )
%   | | then return -0.1418510649004878;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else return 0.8581489350995122;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else return -0.14185106490048777;  // std dev = 0.000, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7194734122109543;  // std dev = 7.30e-08, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | else if ( actor(B) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else return 0.7194734122109545;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else return -0.12544463852839138;  // std dev = 0.000, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.11231637819360639;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else return 0.5553664367462846;  // std dev = 0.000, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   else return -0.11231637819360635;  // std dev = 1.67e-08, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.41751358415830986;  // std dev = 4.71e-08, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | else if ( actor(B) )
%   | | then return -0.10159632948783627;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else return 0.41751358415830997;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else return -0.10159632948783635;  // std dev = 0.000, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.3207118471601496;  // std dev = 2.98e-08, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | else if ( actor(B) )
%   | | then return -0.09269127618926097;  // std dev = 2.63e-09, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else return 0.32071184716014967;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else return -0.09269127618926093;  // std dev = 1.18e-08, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.2551722425694895;  // std dev = 1.49e-08, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | else if ( actor(B) )
%   | | then return -0.08518475138839687;  // std dev = 2.63e-09, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else return 0.25517224256948945;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else return -0.08518475138839683;  // std dev = 1.29e-08, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.2097577156325356;  // std dev = 0.000, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | else if ( actor(B) )
%   | | then return -0.07877675473109173;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else return 0.20975771563253554;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else return -0.07877675473109179;  // std dev = 0.000, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.17709649774527744;  // std dev = 0.000, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | else if ( actor(B) )
%   | | then return -0.07324622576333704;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else return 0.17709649774527736;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else return -0.07324622576333704;  // std dev = 0.000, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B) )
%   | then return 0.15274385809367083;  // std dev = 0.000, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | else return -0.06842697784420272;  // std dev = 1.86e-09, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   else return -0.06842697784420274;  // std dev = 0.000, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.13400703000801117;  // std dev = 0.000, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | else if ( actor(B) )
%   | | then return -0.0641918400820262;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else return 0.13400703000801117;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else return -0.0641918400820262;  // std dev = 6.45e-09, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */


Results
   AUC ROC   = 0.998942
   AUC PR    = 0.918367
   CLL	      = -0.068112
   Precision = 0.918367 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.957447


Total learning time: 0.982 seconds
Total inference time: 0.779 seconds
AUC ROC: 0.998942


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.094637
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 0.359 seconds
Refined model CLL: -0.094637


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.998942
   AUC PR    = 0.918367
   CLL	      = -0.068112
   Precision = 0.918367 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.957447


Total learning time: 2.489 seconds
Total inference time: 0.779 seconds
AUC ROC: 0.998942
Total revision time: 2.489
Best scored revision CLL: -0.094637


Dataset: 4_cora_imdb, Fold: 4, Type: Transfer (trRDN-B), Time: 00:07:06
{'AUC ROC': 0.998942, 'AUC PR': 0.918367, 'CLL': -0.068112, 'Precision': [0.918367, 0.5], 'Recall': 1.0, 'F1': 0.957447, 'Learning time': 2.489, 'Inference time': 0.779, 'parameter_25': {'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.183052, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 0.767, 'Inference time': 0.876}}


Starting fold 5

Target train facts examples: 915
Target train pos examples: 337
Target train neg examples: 12165

Target test facts examples: 163
Target test pos	 examples: 45
Target test neg examples: 2071

Amount of data: 5
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;title(I, H), venue(I, A).;false;false
0;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
0;false;haswordvenue(A, L), haswordtitle(M, L).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordtitle(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordauthor(I, H).;false;true
2;true,false,false;haswordvenue(A, J), haswordtitle(K, J).;false;false
2;false;haswordvenue(A, L), haswordtitle(M, L).;true;false
2;false,true;haswordauthor(N, L).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;title(E, D), venue(E, B).;false;true
3;true,true,false;title(F, D), venue(F, A).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, A).;false;true
4;true,true,false;title(F, D), venue(F, B).;false;false
4;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
4;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
4;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
4;false,true;haswordauthor(M, K).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, B).;false;true
5;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
5;true,false;haswordvenue(B, H), haswordtitle(I, H).;true;true
5;true,false,true;title(J, I), venue(J, B).;false;false
5;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
5;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;title(E, D), venue(E, A).;false;true
6;true,true,false;title(F, D), venue(F, B).;false;false
6;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
6;true,false,true;title(I, H), venue(I, B).;false;false
6;true,false,false;haswordvenue(A, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;title(F, D), venue(F, A).;false;false
7;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
7;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
7;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
7;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;title(E, D), venue(E, A).;false;true
8;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
8;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
8;true,false,true;title(J, I), venue(J, A).;false;false
8;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
8;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, B).;false;true
9;true,true,false;title(F, D), venue(F, A).;false;false
9;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
9;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
9;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
9;false,true;haswordauthor(M, K).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995122;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.8581489350995122;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.14185106490048777;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7194734122109545;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( genre(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(F, B) )
%   | | | then return 0.7194734122109545;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.12544463852839138;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A) )
%   | | then return 0.5553664367462845;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.11231637819360638;  // std dev = 1.86e-09, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.41751358415830997;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( genre(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(F, B) )
%   | | | then return 0.41751358415830997;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.10159632948783633;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( genre(B, E) )
%   | | then return 0.32071184716014967;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.32071184716014967;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.09269127618926098;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.25517224256948945;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( movie(E, B) )
%   | | then if ( genre(B, F) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.25517224256948945;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.08518475138839687;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( genre(B, E) )
%   | | then return 0.20975771563253554;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.20975771563253554;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.07877675473109177;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.17709649774527736;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( genre(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(F, B) )
%   | | | then return 0.17709649774527736;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.07324622576333704;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A) )
%   | | then if ( genre(A, F) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.15274385809367097;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.06842697784420272;  // std dev = 1.86e-09, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.13400703000801117;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( genre(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(F, A) )
%   | | | then return 0.13400703000801117;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.0641918400820262;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 0.873008
   AUC PR    = 0.078809
   CLL	      = -0.579655
   Precision = 0.078809 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.146104


Total learning time: 0.572 seconds
Total inference time: 0.888 seconds
AUC ROC: 0.873008


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.094637
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 0.324 seconds
Parameter learned model CLL: -0.094637


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 4], 'true,false,false,true': [0.0, 0, 1], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 5, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 4], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 1], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 5, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 5], 'true,false,false': [0.0, 0, 0], 'false,true': [1.86e-09, 5, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 4], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 1], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 5, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 4], 'true,false,false,true': [0.0, 0, 1], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 5, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, B)', 'true,false,true': 'genre(B, F)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 0, 4], 'true,false,true,true': [0.0, 0, 0], 'true,false,true,false': [0.0, 0, 1], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 5, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 4], 'true,false,false,true': [0.0, 0, 1], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 5, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 0, 4], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 1], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 5, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'true,false,true': 'genre(A, F)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 0, 0], 'true,false,true,true': [0.0, 0, 0], 'true,false,true,false': [0.0, 0, 5], 'true,false,false': [0.0, 0, 0], 'false,true': [1.86e-09, 5, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 4], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 1], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 5, 0], 'false,false': [0.0, 0, 0]}]]
[{'': [0.0, -2.7755575615628915e-18], 'true': [nan, 0.0], 'true,false': [0.0, 0.0], 'true,false,false': [0.0, nan], 'false': [-2.7755575615628915e-18, nan]}, {'': [0.0, 0.0], 'true': [0.0, 0.0], 'false': [0.0, nan], 'true,false': [nan, 0.0], 'true,false,false': [0.0, nan]}, {'': [-4.4408920985006264e-17, 0.0], 'false': [0.0, nan], 'true': [nan, -4.4408920985006264e-17], 'true,false': [-4.4408920985006264e-17, nan]}, {'': [4.4408920985006264e-17, 0.0], 'true': [0.0, 0.0], 'false': [0.0, nan], 'true,false': [nan, 0.0], 'true,false,false': [0.0, nan]}, {'': [-2.2204460492503132e-17, 0.0], 'false': [0.0, nan], 'true': [nan, -2.2204460492503132e-17], 'true,false': [0.0, 0.0], 'true,false,false': [0.0, nan]}, {'': [0.0, 0.0], 'true': [0.0, 0.0], 'false': [0.0, nan], 'true,false': [0.0, nan], 'true,false,true': [nan, 0.0]}, {'': [-5.551115123125783e-18, -1.3877787807814458e-18], 'false': [-1.3877787807814458e-18, nan], 'true': [nan, -5.551115123125783e-18], 'true,false': [0.0, 0.0], 'true,false,false': [0.0, nan]}, {'': [0.0, -6.938893903907229e-19], 'true': [0.0, 0.0], 'true,false': [nan, 0.0], 'true,false,false': [0.0, nan], 'false': [-6.938893903907229e-19, nan]}, {'': [0.0, 6.938893903907229e-19], 'false': [6.938893903907229e-19, nan], 'true': [nan, 0.0], 'true,false': [0.0, nan], 'true,false,true': [nan, 0.0]}, {'': [0.0, 0.0], 'true': [0.0, 0.0], 'false': [0.0, nan], 'true,false': [nan, 0.0], 'true,false,false': [0.0, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;true;genre(B, D).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;true;genre(B, D).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;true;genre(B, E).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;true;genre(B, D).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(B, E).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;true;genre(B, D).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;true;genre(B, D).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.8581489350995122;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else return 0.8581489350995122;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else return -0.14185106490048777;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7194734122109545;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else return 0.7194734122109545;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else return -0.12544463852839138;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.5553664367462845;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return -0.11231637819360638;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.41751358415830997;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else return 0.41751358415830997;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else return -0.10159632948783633;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.32071184716014967;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else return 0.32071184716014967;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else return -0.09269127618926098;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.25517224256948945;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else return 0.25517224256948945;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else return -0.08518475138839687;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.20975771563253554;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else return 0.20975771563253554;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else return -0.07877675473109177;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.17709649774527736;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else return 0.17709649774527736;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else return -0.07324622576333704;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.15274385809367097;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return -0.06842697784420272;  // std dev = 1.86e-09, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.13400703000801117;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else return 0.13400703000801117;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else return -0.0641918400820262;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */


Results
   AUC ROC   = 0.864075
   AUC PR    = 0.074013
   CLL	      = -0.613037
   Precision = 0.074013 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.137825


Total learning time: 0.517 seconds
Total inference time: 0.732 seconds
AUC ROC: 0.864075


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.094637
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 0.315 seconds
Refined model CLL: -0.094637


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.873008
   AUC PR    = 0.078809
   CLL	      = -0.579655
   Precision = 0.078809 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.146104


Total learning time: 1.7279999999999998 seconds
Total inference time: 0.888 seconds
AUC ROC: 0.873008
Total revision time: 1.7279999999999998
Best scored revision CLL: -0.094637


Dataset: 4_cora_imdb, Fold: 5, Type: Transfer (trRDN-B), Time: 00:07:10
{'AUC ROC': 0.873008, 'AUC PR': 0.078809, 'CLL': -0.579655, 'Precision': [0.078809, 0.5], 'Recall': 1.0, 'F1': 0.146104, 'Learning time': 1.7279999999999998, 'Inference time': 0.888, 'parameter_5': {'AUC ROC': 0.873008, 'AUC PR': 0.078809, 'CLL': -0.579655, 'Precision': [0.078809, 0.5], 'Recall': 1.0, 'F1': 0.146104, 'Learning time': 0.572, 'Inference time': 0.888}}


Amount of data: 10
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;title(I, H), venue(I, A).;false;false
0;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
0;false;haswordvenue(A, L), haswordtitle(M, L).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordtitle(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordauthor(I, H).;false;true
2;true,false,false;haswordvenue(A, J), haswordtitle(K, J).;false;false
2;false;haswordvenue(A, L), haswordtitle(M, L).;true;false
2;false,true;haswordauthor(N, L).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;title(E, D), venue(E, B).;false;true
3;true,true,false;title(F, D), venue(F, A).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, A).;false;true
4;true,true,false;title(F, D), venue(F, B).;false;false
4;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
4;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
4;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
4;false,true;haswordauthor(M, K).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, B).;false;true
5;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
5;true,false;haswordvenue(B, H), haswordtitle(I, H).;true;true
5;true,false,true;title(J, I), venue(J, B).;false;false
5;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
5;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;title(E, D), venue(E, A).;false;true
6;true,true,false;title(F, D), venue(F, B).;false;false
6;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
6;true,false,true;title(I, H), venue(I, B).;false;false
6;true,false,false;haswordvenue(A, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;title(F, D), venue(F, A).;false;false
7;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
7;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
7;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
7;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;title(E, D), venue(E, A).;false;true
8;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
8;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
8;true,false,true;title(J, I), venue(J, A).;false;false
8;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
8;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, B).;false;true
9;true,true,false;title(F, D), venue(F, A).;false;false
9;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
9;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
9;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
9;false,true;haswordauthor(M, K).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995123;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.10814893509951219;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.1418510649004878;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7194734122109543;  // std dev = 2.98e-08, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else if ( genre(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(F, B) )
%   | | | then return 0.09446743783575562;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.12544463852839138;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A) )
%   | | then return 0.40960826950400075;  // std dev = 1.171, 13.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=10 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.11231637819360639;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.4533286061964762;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else if ( genre(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(F, B) )
%   | | | then return 0.01634295262101057;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.10159632948783627;  // std dev = 1.86e-09, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( genre(B, E) )
%   | | then return 0.34512013721027124;  // std dev = 1.49e-08, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.013403832053065383;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.09269127618926097;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.2717663291205828;  // std dev = 1.83e-08, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else if ( movie(E, B) )
%   | | then if ( genre(B, F) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.010974311728403824;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.08518475138839687;  // std dev = 2.63e-09, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( genre(B, E) )
%   | | then return 0.22141391594968068;  // std dev = 1.83e-08, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.00897245448030326;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.07877675473109173;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.18559973097152926;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else if ( genre(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(F, B) )
%   | | | then return 0.007327282346372699;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.07324622576333704;  // std dev = 9.31e-10, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A) )
%   | | then if ( genre(A, F) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.11203008428244846;  // std dev = 0.903, 13.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=10 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.06842697784420272;  // std dev = 2.63e-09, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.1447371610519791;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else if ( genre(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(F, A) )
%   | | | then return -0.015275938607475406;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.0641918400820262;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 0.971565
   AUC PR    = 0.823063
   CLL	      = -0.131842
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.777778
   F1        = 0.875


Total learning time: 0.651 seconds
Total inference time: 0.876 seconds
AUC ROC: 0.971565


Results scoring model
   AUC ROC   = 0.985
   AUC PR    = 0.988462
   CLL	      = -0.19586
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.9
   F1        = 0.947368


Total scoring time: 0.343 seconds
Parameter learned model CLL: -0.19586


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 9], 'true,false,false,true': [0.866, 3, 1], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 7, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [2.98e-08, 0, 9], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.866, 3, 1], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 7, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [1.171, 3, 10], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 7, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 9], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.866, 3, 1], 'true,false,false,false': [0.0, 0, 0], 'false,true': [1.86e-09, 7, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [1.49e-08, 0, 9], 'true,false,false,true': [0.866, 3, 1], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 7, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, B)', 'true,false,true': 'genre(B, F)', 'false': 'movie(G, A)'}, {'true,true': [1.83e-08, 0, 9], 'true,false,true,true': [0.0, 0, 0], 'true,false,true,false': [0.866, 3, 1], 'true,false,false': [0.0, 0, 0], 'false,true': [2.63e-09, 7, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [1.83e-08, 0, 9], 'true,false,false,true': [0.866, 3, 1], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 7, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 0, 9], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.866, 3, 1], 'true,false,false,false': [0.0, 0, 0], 'false,true': [9.31e-10, 7, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'true,false,true': 'genre(A, F)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 0, 0], 'true,false,true,true': [0.0, 0, 0], 'true,false,true,false': [0.903, 3, 10], 'true,false,false': [0.0, 0, 0], 'false,true': [2.63e-09, 7, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 9], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.866, 3, 1], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 7, 0], 'false,false': [0.0, 0, 0]}]]
[{'': [0.1775147928994082, -7.93016446160826e-18], 'true': [nan, 0.1775147928994082], 'true,false': [-2.9605947323337506e-16, 0.18750000000000003], 'true,false,false': [0.18750000000000003, nan], 'false': [-7.93016446160826e-18, nan]}, {'': [0.1409039576814726, -1.982541115402065e-18], 'true': [9.868649107779169e-17, 0.18749999999999997], 'true,false': [nan, 0.18749999999999997], 'true,false,false': [0.18749999999999997, nan], 'false': [-1.982541115402065e-18, nan]}, {'': [0.10549455515742416, -1.982541115402065e-18], 'true': [nan, 0.10549455515742416], 'true,false': [0.10549455515742416, nan], 'false': [-1.982541115402065e-18, nan]}, {'': [0.09836942373673356, 0.0], 'true': [-2.4671622769447922e-17, 0.18749999999999997], 'true,false': [nan, 0.18749999999999997], 'true,false,false': [0.18749999999999997, nan], 'false': [0.0, nan]}, {'': [0.0811318666027062, 0.0], 'true': [nan, 0.0811318666027062], 'true,false': [2.4671622769447922e-17, 0.18750000000000003], 'true,false,false': [0.18750000000000003, nan], 'false': [0.0, nan]}, {'': [0.07218017247383063, 9.912705577010326e-19], 'true': [3.700743415417188e-17, 0.1875], 'true,false': [0.1875, nan], 'true,false,true': [nan, 0.1875], 'false': [9.912705577010326e-19, nan]}, {'': [0.06730609162038356, -9.912705577010326e-19], 'true': [nan, 0.06730609162038356], 'true,false': [3.700743415417188e-17, 0.18749999999999997], 'true,false,false': [0.18749999999999997, nan], 'false': [-9.912705577010326e-19, nan]}, {'': [0.06446223889820785, 9.912705577010326e-19], 'true': [-6.1679056923619804e-18, 0.18750000000000003], 'true,false': [nan, 0.18750000000000003], 'true,false,false': [0.18750000000000003, nan], 'false': [9.912705577010326e-19, nan]}, {'': [0.06269098314255712, 9.912705577010326e-19], 'true': [nan, 0.06269098314255712], 'true,false': [0.06269098314255712, nan], 'true,false,true': [nan, 0.06269098314255712], 'false': [9.912705577010326e-19, nan]}, {'': [0.06314645511393226, -4.956352788505163e-19], 'true': [-3.0839528461809902e-18, 0.18749999999999997], 'true,false': [nan, 0.18749999999999997], 'true,false,false': [0.18749999999999997, nan], 'false': [-4.956352788505163e-19, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;true;genre(B, D).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;true;genre(B, D).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;true;genre(B, E).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;true;genre(B, D).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(B, E).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;true;genre(B, D).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;true;genre(B, D).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.8581489350995123;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else return 0.10814893509951219;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   else return -0.1418510649004878;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7194734122109543;  // std dev = 2.98e-08, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else return 0.09446743783575562;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   else return -0.12544463852839138;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( female(B) )
%   | then return -0.16834760679113825;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( female(A) )
%   | | then return 0.6474617555671436;  // std dev = 0.226, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.5553664367462846;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   else return -0.11231637819360639;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.41257741241615203;  // std dev = 0.028, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else return 0.07071936987729144;  // std dev = 0.751, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   else return -0.10159632948783627;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.31739691615792215;  // std dev = 0.025, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else return 0.060325832317446565;  // std dev = 0.746, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   else return -0.09269127618926097;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.2529264397474135;  // std dev = 0.021, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else return 0.05110738451888286;  // std dev = 0.742, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   else return -0.08518475138839687;  // std dev = 2.63e-09, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.20818055816638673;  // std dev = 0.019, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else return 0.04304259551531133;  // std dev = 0.739, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   else return -0.07877675473109173;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.17594549596216996;  // std dev = 0.016, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else return 0.036068732340696665;  // std dev = 0.736, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   else return -0.07324622576333704;  // std dev = 2.63e-09, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( female(B) )
%   | then return -0.18176018401300423;  // std dev = 5.27e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( female(A) )
%   | | then return 0.3170988472526208;  // std dev = 0.427, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.15446322679504876;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   else return -0.06842697784420272;  // std dev = 2.63e-09, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.1293161121435135;  // std dev = 0.034, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else return 0.030754461647473412;  // std dev = 0.648, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   else return -0.0641918400820262;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */


Results
   AUC ROC   = 0.98721
   AUC PR    = 0.840707
   CLL	      = -0.14035
   Precision = 0.945946 at threshold = 0.5
   Recall    = 0.777778
   F1        = 0.853659


Total learning time: 0.632 seconds
Total inference time: 0.733 seconds
AUC ROC: 0.98721


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.147176
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.9
   F1        = 0.947368


Total scoring time: 0.324 seconds
Refined model CLL: -0.147176


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.98721
   AUC PR    = 0.840707
   CLL	      = -0.14035
   Precision = 0.945946 at threshold = 0.5
   Recall    = 0.777778
   F1        = 0.853659


Total learning time: 1.95 seconds
Total inference time: 0.733 seconds
AUC ROC: 0.98721
Total revision time: 1.95
Best scored revision CLL: -0.147176


Dataset: 4_cora_imdb, Fold: 5, Type: Transfer (trRDN-B), Time: 00:07:14
{'AUC ROC': 0.98721, 'AUC PR': 0.840707, 'CLL': -0.14035, 'Precision': [0.945946, 0.5], 'Recall': 0.777778, 'F1': 0.853659, 'Learning time': 1.95, 'Inference time': 0.733, 'parameter_10': {'AUC ROC': 0.971565, 'AUC PR': 0.823063, 'CLL': -0.131842, 'Precision': [1.0, 0.5], 'Recall': 0.777778, 'F1': 0.875, 'Learning time': 0.651, 'Inference time': 0.876}}


Amount of data: 15
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;title(I, H), venue(I, A).;false;false
0;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
0;false;haswordvenue(A, L), haswordtitle(M, L).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordtitle(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordauthor(I, H).;false;true
2;true,false,false;haswordvenue(A, J), haswordtitle(K, J).;false;false
2;false;haswordvenue(A, L), haswordtitle(M, L).;true;false
2;false,true;haswordauthor(N, L).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;title(E, D), venue(E, B).;false;true
3;true,true,false;title(F, D), venue(F, A).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, A).;false;true
4;true,true,false;title(F, D), venue(F, B).;false;false
4;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
4;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
4;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
4;false,true;haswordauthor(M, K).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, B).;false;true
5;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
5;true,false;haswordvenue(B, H), haswordtitle(I, H).;true;true
5;true,false,true;title(J, I), venue(J, B).;false;false
5;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
5;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;title(E, D), venue(E, A).;false;true
6;true,true,false;title(F, D), venue(F, B).;false;false
6;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
6;true,false,true;title(I, H), venue(I, B).;false;false
6;true,false,false;haswordvenue(A, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;title(F, D), venue(F, A).;false;false
7;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
7;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
7;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
7;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;title(E, D), venue(E, A).;false;true
8;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
8;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
8;true,false,true;title(J, I), venue(J, A).;false;false
8;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
8;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, B).;false;true
9;true,true,false;title(F, D), venue(F, A).;false;false
9;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
9;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
9;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
9;false,true;haswordauthor(M, K).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14185106490048777;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995123;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.1438632208137979;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=2 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.1418510649004878;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.6591221228724296;  // std dev = 0.814, 14.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=13 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.12543301544918353;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=2 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.12544463852839138;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.16470121676331081;  // std dev = 0.074, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else if ( movie(E, A) )
%   | | then return 0.408378077464307;  // std dev = 1.550, 20.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=15 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.11231637819360639;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.4215556668574058;  // std dev = 0.635, 14.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=13 */
%   | else if ( genre(A, E) )
%   | | then return -0.09691372688723164;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.04013413822091551;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=2 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.10159632948783627;  // std dev = 1.32e-09, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1763207154306906;  // std dev = 0.124, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else if ( genre(B, E) )
%   | | then return 0.36651315903841836;  // std dev = 2.98e-08, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.03262277509133149;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=2 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.09269127618926097;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.2492878758498434;  // std dev = 0.499, 14.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=13 */
%   | else if ( movie(E, B) )
%   | | then if ( genre(B, F) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.013669040908457428;  // std dev = 1.199, 8.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.08518475138839687;  // std dev = 3.73e-09, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.17737616187838512;  // std dev = 0.143, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else if ( genre(B, E) )
%   | | then return 0.23812153798243774;  // std dev = 1.05e-08, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.023772367871527953;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=2 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.07877675473109173;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.1660839848322007;  // std dev = 0.426, 14.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=13 */
%   | else if ( genre(A, E) )
%   | | then return -0.0648312967206377;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.019150557111943356;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=2 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.07324622576333704;  // std dev = 9.31e-10, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.16852400745274074;  // std dev = 0.152, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else if ( movie(E, A) )
%   | | then if ( genre(A, F) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.11758571733891054;  // std dev = 1.241, 20.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=15 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.06842697784420272;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.12788129136807833;  // std dev = 0.386, 14.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=13 */
%   | else if ( genre(A, E) )
%   | | then return -0.05204028938005546;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.008419482216278609;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=2 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.0641918400820262;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 0.97178
   AUC PR    = 0.824078
   CLL	      = -0.139854
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.777778
   F1        = 0.875


Total learning time: 0.654 seconds
Total inference time: 0.901 seconds
AUC ROC: 0.97178


Results scoring model
   AUC ROC   = 0.977778
   AUC PR    = 0.981566
   CLL	      = -0.233854
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.866667
   F1        = 0.928571


Total scoring time: 0.364 seconds
Parameter learned model CLL: -0.233854


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 2, 0], 'true,false,true': [0.0, 0, 13], 'true,false,false,true': [1.195, 5, 2], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 8, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.814, 1, 13], 'true,false,true': [0.0, 1, 0], 'true,false,false,true': [1.195, 5, 2], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 8, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.074, 2, 0], 'true,false,true': [1.55, 5, 15], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 8, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.635, 1, 13], 'true,false,true': [0.0, 1, 0], 'true,false,false,true': [1.195, 5, 2], 'true,false,false,false': [0.0, 0, 0], 'false,true': [1.32e-09, 8, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.124, 2, 0], 'true,false,true': [2.98e-08, 0, 13], 'true,false,false,true': [1.195, 5, 2], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 8, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, B)', 'true,false,true': 'genre(B, F)', 'false': 'movie(G, A)'}, {'true,true': [0.499, 1, 13], 'true,false,true,true': [0.0, 0, 0], 'true,false,true,false': [1.199, 6, 2], 'true,false,false': [0.0, 0, 0], 'false,true': [3.73e-09, 8, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.143, 2, 0], 'true,false,true': [1.05e-08, 0, 13], 'true,false,false,true': [1.195, 5, 2], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 8, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, A)'}, {'true,true': [0.426, 1, 13], 'true,false,true': [0.0, 1, 0], 'true,false,false,true': [1.195, 5, 2], 'true,false,false,false': [0.0, 0, 0], 'false,true': [9.31e-10, 8, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'true,false,true': 'genre(A, F)', 'false': 'movie(G, A)'}, {'true,true': [0.152, 2, 0], 'true,false,true,true': [0.0, 0, 0], 'true,false,true,false': [1.241, 5, 15], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 8, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.386, 1, 13], 'true,false,true': [0.0, 1, 0], 'true,false,false,true': [1.195, 5, 2], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 8, 0], 'false,false': [0.0, 0, 0]}]]
[{'': [0.21694214876033016, -6.938893903907228e-18], 'true': [0.0, 0.18749999999999964], 'true,false': [-2.7328566760003855e-16, 0.20408163265306126], 'true,false,false': [0.20408163265306126, nan], 'false': [-6.938893903907228e-18, nan]}, {'': [0.17145293073554616, 0.0], 'true': [0.04734961562269037, 0.18545544702231984], 'true,false': [0.0, 0.20408163265306117], 'true,false,false': [0.20408163265306117, nan], 'false': [0.0, nan]}, {'': [0.13654563776200984, -1.734723475976807e-18], 'true': [0.0027441713119739954, 0.12006943190952031], 'true,false': [0.12006943190952031, nan], 'false': [-1.734723475976807e-18, nan]}, {'': [0.12077090310460914, 1.734723475976807e-18], 'true': [0.028806656478962918, 0.18062572265447396], 'true,false': [0.0, 0.2040816326530612], 'true,false,false': [0.2040816326530612, nan], 'false': [1.734723475976807e-18, nan]}, {'': [0.10368483553963138, 0.0], 'true': [0.007667451625380451, 0.0967909058105772], 'true,false': [6.832141690000964e-17, 0.20408163265306126], 'true,false,false': [0.20408163265306126, nan], 'false': [0.0, nan]}, {'': [0.08949061824348335, 1.734723475976807e-18], 'true': [0.01775061800551778, 0.1797071052368363], 'true,false': [0.1797071052368363, nan], 'true,false,true': [nan, 0.1797071052368363], 'false': [1.734723475976807e-18, nan]}, {'': [0.08494387788790293, 0.0], 'true': [0.010185724076748504, 0.08188118785901752], 'true,false': [8.540177112501205e-18, 0.20408163265306126], 'true,false,false': [0.20408163265306126, nan], 'false': [0.0, nan]}, {'': [0.07918726343318701, 8.673617379884035e-19], 'true': [0.012942931543230646, 0.1793428451716176], 'true,false': [0.0, 0.20408163265306123], 'true,false,false': [0.20408163265306123, nan], 'false': [8.673617379884035e-19, nan]}, {'': [0.0778635500148491, 0.0], 'true': [0.011559295499917611, 0.07705226868267365], 'true,false': [0.07705226868267365, nan], 'true,false,true': [nan, 0.07705226868267365], 'false': [0.0, nan]}, {'': [0.0764179030964247, 0.0], 'true': [0.010618620477597648, 0.17877954456710565], 'true,false': [0.0, 0.2040816326530612], 'true,false,false': [0.2040816326530612, nan], 'false': [0.0, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(A, D).;true;true
0;true,false;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;true;genre(B, D).;true;true
1;true,false;genre(A, E).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;true;genre(B, D).;true;true
3;true,false;genre(A, E).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;true;genre(A, D).;true;true
4;true,false;genre(B, E).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(A, D).;true;true
6;true,false;genre(B, E).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;true;genre(B, D).;true;true
7;true,false;genre(A, E).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;true;genre(B, D).;true;true
9;true,false;genre(A, E).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14185106490048777;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995123;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | else if ( female(B) )
%   | | | then return -0.14185106490048777;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | | else return 0.5248156017661788;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   else return -0.1418510649004878;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.7194734122109544;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return 0.6349816071370198;  // std dev = 0.253, 10.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( female(B) )
%   | | | then return -0.12544463852839138;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | | else return 0.448295606241962;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   else return -0.12544463852839138;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.5865298425187859;  // std dev = 0.169, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else if ( female(B) )
%   | | then return -0.11231637819360639;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return -0.2098769557190928;  // std dev = 0.136, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else return -0.11231637819360639;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.4099548107852292;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return 0.3694892226738535;  // std dev = 0.183, 10.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | else if ( genre(A, E) )
%   | | then return -0.09303123969871685;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( female(B) )
%   | | | then return -0.10159632948783628;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | | else return 0.2859432275552191;  // std dev = 0.671, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   else return -0.10159632948783627;  // std dev = 3.73e-09, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.163231812352274;  // std dev = 0.110, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else if ( genre(B, E) )
%   | | then return 0.33469201323423686;  // std dev = 0.046, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | else if ( female(A) )
%   | | | then return 0.19795731361486263;  // std dev = 0.581, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return -0.1686748855328943;  // std dev = 0.186, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else return -0.09269127618926097;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then if ( female(A) )
%   | | then return 0.31186782705632243;  // std dev = 0.221, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return 0.2721301875503701;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else if ( female(B) )
%   | | then return -0.09509124981165706;  // std dev = 0.031, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return -0.19033751364371673;  // std dev = 0.152, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else return -0.08518475138839687;  // std dev = 3.73e-09, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1219436629374348;  // std dev = 0.085, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else if ( genre(B, E) )
%   | | then return 0.2133262447750345;  // std dev = 0.045, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | else if ( female(A) )
%   | | | then return 0.13144900650853825;  // std dev = 0.466, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return -0.13114377272627914;  // std dev = 0.143, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else return -0.07877675473109173;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.16328408254532356;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return 0.1518620786328386;  // std dev = 0.106, 10.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | else if ( genre(A, E) )
%   | | then return -0.05490313948297463;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( female(B) )
%   | | | then return -0.08938201119291142;  // std dev = 0.050, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | | else return 0.14839963874044163;  // std dev = 0.456, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   else return -0.07324622576333704;  // std dev = 2.63e-09, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then if ( female(A) )
%   | | then return 0.19563336764163972;  // std dev = 0.185, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return 0.16504493599935977;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else if ( female(B) )
%   | | then return -0.08241895881162312;  // std dev = 0.046, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return -0.16335349491638818;  // std dev = 0.144, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else return -0.06842697784420272;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.1199492820628072;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return 0.11286002126649723;  // std dev = 0.092, 10.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | else if ( genre(A, E) )
%   | | then return -0.04461801591156082;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( female(A) )
%   | | | then return 0.08241353410863983;  // std dev = 0.361, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return -0.11041760633843382;  // std dev = 0.136, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else return -0.0641918400820262;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.10102
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 1.095 seconds
Total inference time: 0.886 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.119059
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 0.376 seconds
Refined model CLL: -0.119059


******************************************
Best model found
******************************************
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.10102
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 2.489 seconds
Total inference time: 0.886 seconds
AUC ROC: 1.0
Total revision time: 2.489
Best scored revision CLL: -0.119059


Dataset: 4_cora_imdb, Fold: 5, Type: Transfer (trRDN-B), Time: 00:07:19
{'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.10102, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 2.489, 'Inference time': 0.886, 'parameter_15': {'AUC ROC': 0.97178, 'AUC PR': 0.824078, 'CLL': -0.139854, 'Precision': [1.0, 0.5], 'Recall': 0.777778, 'F1': 0.875, 'Learning time': 0.654, 'Inference time': 0.901}}


Amount of data: 20
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;title(I, H), venue(I, A).;false;false
0;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
0;false;haswordvenue(A, L), haswordtitle(M, L).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordtitle(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordauthor(I, H).;false;true
2;true,false,false;haswordvenue(A, J), haswordtitle(K, J).;false;false
2;false;haswordvenue(A, L), haswordtitle(M, L).;true;false
2;false,true;haswordauthor(N, L).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;title(E, D), venue(E, B).;false;true
3;true,true,false;title(F, D), venue(F, A).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, A).;false;true
4;true,true,false;title(F, D), venue(F, B).;false;false
4;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
4;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
4;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
4;false,true;haswordauthor(M, K).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, B).;false;true
5;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
5;true,false;haswordvenue(B, H), haswordtitle(I, H).;true;true
5;true,false,true;title(J, I), venue(J, B).;false;false
5;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
5;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;title(E, D), venue(E, A).;false;true
6;true,true,false;title(F, D), venue(F, B).;false;false
6;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
6;true,false,true;title(I, H), venue(I, B).;false;false
6;true,false,false;haswordvenue(A, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;title(F, D), venue(F, A).;false;false
7;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
7;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
7;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
7;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;title(E, D), venue(E, A).;false;true
8;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
8;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
8;true,false,true;title(J, I), venue(J, A).;false;false
8;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
8;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, B).;false;true
9;true,true,false;title(F, D), venue(F, A).;false;false
9;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
9;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
9;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
9;false,true;haswordauthor(M, K).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14185106490048777;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995123;  // std dev = 0.000, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.19148226843284558;  // std dev = 1.414, 9.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=3 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.1418510649004878;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.6725335205032128;  // std dev = 0.821, 18.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=17 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.16653882456488167;  // std dev = 1.414, 9.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=3 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.12544463852839138;  // std dev = 5.27e-09, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.16584523890471548;  // std dev = 0.076, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else if ( movie(E, A) )
%   | | then return 0.419868431842302;  // std dev = 1.750, 26.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=20 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.11231637819360636;  // std dev = 2.63e-09, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.42605938827012807;  // std dev = 0.636, 18.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=17 */
%   | else if ( genre(A, E) )
%   | | then return -0.09681364656514709;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.06871682386181344;  // std dev = 1.414, 9.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=3 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.1015963294878363;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.17791384364477414;  // std dev = 0.126, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else if ( genre(B, E) )
%   | | then return 0.3597129415778835;  // std dev = 2.11e-08, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.055130489643618275;  // std dev = 1.414, 9.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=3 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.09269127618926097;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.2530082747156508;  // std dev = 0.501, 18.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=17 */
%   | else if ( movie(E, B) )
%   | | then if ( genre(B, F) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.0320023648489602;  // std dev = 1.419, 10.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=3 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.08518475138839687;  // std dev = 5.27e-09, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1798397814916021;  // std dev = 0.145, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else if ( genre(B, E) )
%   | | then return 0.2333785192134985;  // std dev = 0.000, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.03730038571248955;  // std dev = 1.414, 9.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=3 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.07877675473109172;  // std dev = 3.73e-09, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.16971536024584147;  // std dev = 0.429, 18.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=17 */
%   | else if ( genre(A, E) )
%   | | then return -0.06563820224837515;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.029468402689478354;  // std dev = 1.414, 9.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=3 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.07324622576333704;  // std dev = 1.32e-09, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.17089587680177387;  // std dev = 0.154, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else if ( movie(E, A) )
%   | | then if ( genre(A, F) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.1185585460896279;  // std dev = 1.458, 26.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=20 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.06842697784420272;  // std dev = 2.63e-09, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.13081555131252345;  // std dev = 0.389, 18.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=17 */
%   | else if ( genre(A, E) )
%   | | then return -0.05253850699264035;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.0027196619990828255;  // std dev = 1.414, 9.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=3 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.06419184008202619;  // std dev = 1.61e-09, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 0.97178
   AUC PR    = 0.824078
   CLL	      = -0.154757
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.777778
   F1        = 0.875


Total learning time: 0.675 seconds
Total inference time: 0.833 seconds
AUC ROC: 0.97178


Results scoring model
   AUC ROC   = 0.9775
   AUC PR    = 0.980535
   CLL	      = -0.233682
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.85
   F1        = 0.918919


Total scoring time: 0.374 seconds
Parameter learned model CLL: -0.233682


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 2, 0], 'true,false,true': [0.0, 0, 17], 'true,false,false,true': [1.414, 6, 3], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 12, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.821, 1, 17], 'true,false,true': [0.0, 1, 0], 'true,false,false,true': [1.414, 6, 3], 'true,false,false,false': [0.0, 0, 0], 'false,true': [5.27e-09, 12, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.076, 2, 0], 'true,false,true': [1.75, 6, 20], 'true,false,false': [0.0, 0, 0], 'false,true': [2.63e-09, 12, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.636, 1, 17], 'true,false,true': [0.0, 1, 0], 'true,false,false,true': [1.414, 6, 3], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 12, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.126, 2, 0], 'true,false,true': [2.11e-08, 0, 17], 'true,false,false,true': [1.414, 6, 3], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 12, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, B)', 'true,false,true': 'genre(B, F)', 'false': 'movie(G, A)'}, {'true,true': [0.501, 1, 17], 'true,false,true,true': [0.0, 0, 0], 'true,false,true,false': [1.419, 7, 3], 'true,false,false': [0.0, 0, 0], 'false,true': [5.27e-09, 12, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.145, 2, 0], 'true,false,true': [0.0, 0, 17], 'true,false,false,true': [1.414, 6, 3], 'true,false,false,false': [0.0, 0, 0], 'false,true': [3.73e-09, 12, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, A)'}, {'true,true': [0.429, 1, 17], 'true,false,true': [0.0, 1, 0], 'true,false,false,true': [1.414, 6, 3], 'true,false,false,false': [0.0, 0, 0], 'false,true': [1.32e-09, 12, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'true,false,true': 'genre(A, F)', 'false': 'movie(G, A)'}, {'true,true': [0.154, 2, 0], 'true,false,true,true': [0.0, 0, 0], 'true,false,true,false': [1.458, 6, 20], 'true,false,false': [0.0, 0, 0], 'false,true': [2.63e-09, 12, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.389, 1, 17], 'true,false,true': [0.0, 1, 0], 'true,false,false,true': [1.414, 6, 3], 'true,false,false,false': [0.0, 0, 0], 'false,true': [1.61e-09, 12, 0], 'false,false': [0.0, 0, 0]}]]
[{'': [0.20408163265306145, -1.1564823173178714e-17], 'true': [0.0, 0.17751479289940847], 'true,false': [-2.0898315757650005e-16, 0.2222222222222221], 'true,false,false': [0.2222222222222221, nan], 'false': [-1.1564823173178714e-17, nan]}, {'': [0.16401075038229657, 2.3129646346357427e-18], 'true': [0.0374570083700865, 0.20767289084479482], 'true,false': [0.0, 0.22222222222222238], 'true,false,false': [0.22222222222222238, nan], 'false': [2.3129646346357427e-18, nan]}, {'': [0.13231811080964445, 6.938893903907228e-18], 'true': [0.0028653389290293173, 0.11777169461749787], 'true,false': [0.11777169461749787, nan], 'false': [6.938893903907228e-18, nan]}, {'': [0.11886485765633933, 0.0], 'true': [0.02249193022228028, 0.2024660302975793], 'true,false': [0.0, 0.22222222222222218], 'true,false,false': [0.22222222222222218, nan], 'false': [0.0, nan]}, {'': [0.10388378763968843, 2.3129646346357427e-18], 'true': [0.00796404725127959, 0.09791994365979617], 'true,false': [2.6122894697062506e-17, 0.2222222222222222], 'true,false,false': [0.2222222222222222, nan], 'false': [2.3129646346357427e-18, nan]}, {'': [0.09206088565639899, 2.3129646346357427e-18], 'true': [0.013939724137359864, 0.20127951140752415], 'true,false': [0.20127951140752415, nan], 'true,false,true': [nan, 0.20127951140752415], 'false': [2.3129646346357427e-18, nan]}, {'': [0.08816613495060666, 1.1564823173178713e-18], 'true': [0.01045962527245839, 0.08562475601907928], 'true,false': [-1.959217102279688e-17, 0.2222222222222222], 'true,false,false': [0.2222222222222222, nan], 'false': [1.1564823173178713e-18, nan]}, {'': [0.08343996416678388, 1.1564823173178713e-18], 'true': [0.010222359615869266, 0.20081407396725237], 'true,false': [0.0, 0.22222222222222215], 'true,false,false': [0.22222222222222215, nan], 'false': [1.1564823173178713e-18, nan]}, {'': [0.08230725402241582, 5.782411586589357e-19], 'true': [0.011918153934991134, 0.0817372385450302], 'true,false': [0.0817372385450302, nan], 'true,false,true': [nan, 0.0817372385450302], 'false': [5.782411586589357e-19, nan]}, {'': [0.08130955511613247, 2.8912057932946786e-18], 'true': [0.008393828065867748, 0.20022337255848427], 'true,false': [0.0, 0.2222222222222222], 'true,false,false': [0.2222222222222222, nan], 'false': [2.8912057932946786e-18, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(A, D).;true;true
0;true,false;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;true;genre(B, D).;true;true
1;true,false;genre(A, E).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;true;genre(B, D).;true;true
3;true,false;genre(A, E).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;true;genre(A, D).;true;true
4;true,false;genre(B, E).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(A, D).;true;true
6;true,false;genre(B, E).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;true;genre(B, D).;true;true
7;true,false;genre(A, E).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;true;genre(B, D).;true;true
9;true,false;genre(A, E).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14185106490048777;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995123;  // std dev = 0.000, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else if ( director(B), female(A) )
%   | | | then return 0.8581489350995121;  // std dev = 2.11e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return -0.1418510649004878;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   else return -0.1418510649004878;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.7194734122109544;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return 0.6544797160002354;  // std dev = 0.225, 13.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( director(B), female(A) )
%   | | | then return 0.7194734122109545;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return -0.12544463852839138;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   else return -0.12544463852839138;  // std dev = 5.27e-09, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.5649580592044742;  // std dev = 0.035, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | else return -0.12531408962079327;  // std dev = 0.097, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   else return -0.11231637819360636;  // std dev = 9.13e-09, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.4151828019614098;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return 0.38282580498602764;  // std dev = 0.167, 13.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   | else if ( genre(A, E) )
%   | | then return -0.10041609792821855;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( female(A), director(B) )
%   | | | then return 0.4151828019614099;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return -0.10041609792821855;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   else return -0.1015963294878363;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1774067605672693;  // std dev = 0.121, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else if ( genre(B, E) )
%   | | then return 0.3343190526626985;  // std dev = 0.040, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else if ( director(B), female(A) )
%   | | | then return 0.3191320947341132;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return -0.09170220309596218;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   else return -0.09269127618926097;  // std dev = 5.27e-09, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.26290780548390824;  // std dev = 0.039, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | else return -0.1017762975064164;  // std dev = 0.137, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   else return -0.08518475138839687;  // std dev = 5.27e-09, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14179782199361524;  // std dev = 0.100, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else if ( genre(B, E) )
%   | | then return 0.21657912438814067;  // std dev = 0.031, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else if ( director(B), female(A) )
%   | | | then return 0.20754243912746573;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return -0.07680970446196993;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   else return -0.07877675473109172;  // std dev = 3.73e-09, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.17199280619722124;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return 0.15736576864927962;  // std dev = 0.100, 13.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   | else if ( genre(A, E) )
%   | | then return -0.0621518904324745;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( female(A), director(B) )
%   | | | then return 0.17546998424158733;  // std dev = 3.73e-09, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return -0.07153710868673853;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   else return -0.07324622576333704;  // std dev = 3.73e-09, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.15810966291602585;  // std dev = 0.030, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | else return -0.08443307540420106;  // std dev = 0.140, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   else return -0.06842697784420272;  // std dev = 2.63e-09, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.12991939239636163;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return 0.11661367766084152;  // std dev = 0.092, 13.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   | else if ( genre(A, E) )
%   | | then return -0.054136392218097795;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( female(A), director(B) )
%   | | | then return 0.13228263988001532;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return -0.061844979437480185;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   else return -0.06419184008202619;  // std dev = 5.89e-09, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */


Results
   AUC ROC   = 0.999914
   AUC PR    = 0.996046
   CLL	      = -0.066202
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.911111
   F1        = 0.953488


Total learning time: 1.019 seconds
Total inference time: 0.912 seconds
AUC ROC: 0.999914


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.101652
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 0.374 seconds
Refined model CLL: -0.101652


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.999914
   AUC PR    = 0.996046
   CLL	      = -0.066202
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.911111
   F1        = 0.953488


Total learning time: 2.4419999999999997 seconds
Total inference time: 0.912 seconds
AUC ROC: 0.999914
Total revision time: 2.4419999999999997
Best scored revision CLL: -0.101652


Dataset: 4_cora_imdb, Fold: 5, Type: Transfer (trRDN-B), Time: 00:07:23
{'AUC ROC': 0.999914, 'AUC PR': 0.996046, 'CLL': -0.066202, 'Precision': [1.0, 0.5], 'Recall': 0.911111, 'F1': 0.953488, 'Learning time': 2.4419999999999997, 'Inference time': 0.912, 'parameter_20': {'AUC ROC': 0.97178, 'AUC PR': 0.824078, 'CLL': -0.154757, 'Precision': [1.0, 0.5], 'Recall': 0.777778, 'F1': 0.875, 'Learning time': 0.675, 'Inference time': 0.833}}


Amount of data: 25
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;title(I, H), venue(I, A).;false;false
0;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
0;false;haswordvenue(A, L), haswordtitle(M, L).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordtitle(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordauthor(I, H).;false;true
2;true,false,false;haswordvenue(A, J), haswordtitle(K, J).;false;false
2;false;haswordvenue(A, L), haswordtitle(M, L).;true;false
2;false,true;haswordauthor(N, L).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;title(E, D), venue(E, B).;false;true
3;true,true,false;title(F, D), venue(F, A).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, A).;false;true
4;true,true,false;title(F, D), venue(F, B).;false;false
4;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
4;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
4;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
4;false,true;haswordauthor(M, K).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, B).;false;true
5;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
5;true,false;haswordvenue(B, H), haswordtitle(I, H).;true;true
5;true,false,true;title(J, I), venue(J, B).;false;false
5;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
5;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;title(E, D), venue(E, A).;false;true
6;true,true,false;title(F, D), venue(F, B).;false;false
6;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
6;true,false,true;title(I, H), venue(I, B).;false;false
6;true,false,false;haswordvenue(A, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;title(F, D), venue(F, A).;false;false
7;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
7;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
7;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
7;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;title(E, D), venue(E, A).;false;true
8;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
8;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
8;true,false,true;title(J, I), venue(J, A).;false;false
8;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
8;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, B).;false;true
9;true,true,false;title(F, D), venue(F, A).;false;false
9;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
9;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
9;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
9;false,true;haswordauthor(M, K).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14185106490048777;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995121;  // std dev = 5.96e-08, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.15814893509951225;  // std dev = 1.449, 10.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=3 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.1418510649004878;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.6827378447875044;  // std dev = 0.826, 23.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=22 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.1377866547829789;  // std dev = 1.449, 10.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=3 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.12544463852839138;  // std dev = 7.45e-09, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1667214812021605;  // std dev = 0.077, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else if ( movie(E, A) )
%   | | then return 0.4249687882744046;  // std dev = 1.863, 32.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=25 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.11231637819360635;  // std dev = 3.48e-09, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.43026657425115405;  // std dev = 0.638, 23.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=22 */
%   | else if ( genre(A, E) )
%   | | then return -0.09673705433294436;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.046322800018391;  // std dev = 1.449, 10.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=3 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.10159632948783631;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.17921070348906817;  // std dev = 0.128, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else if ( genre(B, E) )
%   | | then return 0.35523138676408017;  // std dev = 2.98e-08, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.037453111925308244;  // std dev = 1.449, 10.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=3 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.09269127618926094;  // std dev = 2.28e-09, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.2562385685703734;  // std dev = 0.503, 23.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=22 */
%   | else if ( movie(E, B) )
%   | | then if ( genre(B, F) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.02056466235087079;  // std dev = 1.453, 11.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=3 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.08518475138839685;  // std dev = 1.05e-08, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.18093001394856795;  // std dev = 0.148, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else if ( genre(B, E) )
%   | | then return 0.23012737878451087;  // std dev = 2.58e-08, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.026066264375056842;  // std dev = 1.449, 10.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=3 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.07877675473109173;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.17269275299422607;  // std dev = 0.432, 23.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=22 */
%   | else if ( genre(A, E) )
%   | | then return -0.06474696484253606;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.020851405289155456;  // std dev = 1.449, 10.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=3 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.07324622576333704;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.17225696309831173;  // std dev = 0.157, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else if ( movie(E, A) )
%   | | then if ( genre(A, F) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.11968918306224219;  // std dev = 1.501, 32.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=25 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.06842697784420272;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.13316176256423298;  // std dev = 0.392, 23.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=22 */
%   | else if ( genre(A, E) )
%   | | then return -0.051792194881708574;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.0082852444754698;  // std dev = 1.449, 10.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=3 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.06419184008202619;  // std dev = 1.86e-09, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 0.97178
   AUC PR    = 0.824078
   CLL	      = -0.144537
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.777778
   F1        = 0.875


Total learning time: 0.758 seconds
Total inference time: 0.862 seconds
AUC ROC: 0.97178


Results scoring model
   AUC ROC   = 0.9832
   AUC PR    = 0.985429
   CLL	      = -0.213073
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.88
   F1        = 0.93617


Total scoring time: 0.381 seconds
Parameter learned model CLL: -0.213073


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 2, 0], 'true,false,true': [5.96e-08, 0, 22], 'true,false,false,true': [1.449, 7, 3], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 16, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.826, 1, 22], 'true,false,true': [0.0, 1, 0], 'true,false,false,true': [1.449, 7, 3], 'true,false,false,false': [0.0, 0, 0], 'false,true': [7.45e-09, 16, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.077, 2, 0], 'true,false,true': [1.863, 7, 25], 'true,false,false': [0.0, 0, 0], 'false,true': [3.48e-09, 16, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.638, 1, 22], 'true,false,true': [0.0, 1, 0], 'true,false,false,true': [1.449, 7, 3], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 16, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.128, 2, 0], 'true,false,true': [2.98e-08, 0, 22], 'true,false,false,true': [1.449, 7, 3], 'true,false,false,false': [0.0, 0, 0], 'false,true': [2.28e-09, 16, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, B)', 'true,false,true': 'genre(B, F)', 'false': 'movie(G, A)'}, {'true,true': [0.503, 1, 22], 'true,false,true,true': [0.0, 0, 0], 'true,false,true,false': [1.453, 8, 3], 'true,false,false': [0.0, 0, 0], 'false,true': [1.05e-08, 16, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.148, 2, 0], 'true,false,true': [2.58e-08, 0, 22], 'true,false,false,true': [1.449, 7, 3], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 16, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, A)'}, {'true,true': [0.432, 1, 22], 'true,false,true': [0.0, 1, 0], 'true,false,false,true': [1.449, 7, 3], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 16, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'true,false,true': 'genre(A, F)', 'false': 'movie(G, A)'}, {'true,true': [0.157, 2, 0], 'true,false,true,true': [0.0, 0, 0], 'true,false,true,false': [1.501, 7, 25], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 16, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.392, 1, 22], 'true,false,true': [0.0, 1, 0], 'true,false,false,true': [1.449, 7, 3], 'true,false,false,false': [0.0, 0, 0], 'false,true': [1.86e-09, 16, 0], 'false,false': [0.0, 0, 0]}]]
[{'': [0.1946366782006932, -6.938893903907228e-18], 'true': [0.0, 0.1708984375000011], 'true,false': [1.6148698540002277e-16, 0.20999999999999988], 'true,false,false': [0.20999999999999988, nan], 'false': [-6.938893903907228e-18, nan]}, {'': [0.15452933153355652, 3.469446951953614e-18], 'true': [0.029689042106302396, 0.19663559618003112], 'true,false': [0.0, 0.20999999999999996], 'true,false,false': [0.20999999999999996, nan], 'false': [3.469446951953614e-18, nan]}, {'': [0.12158636913448667, 1.214306433183765e-17], 'true': [0.002959915233371385, 0.10840655926840931], 'true,false': [0.10840655926840931, nan], 'false': [1.214306433183765e-17, nan]}, {'': [0.10877048573792543, -6.938893903907228e-18], 'true': [0.017699765117327453, 0.19260050594438224], 'true,false': [0.0, 0.20999999999999996], 'true,false,false': [0.20999999999999996, nan], 'false': [-6.938893903907228e-18, nan]}, {'': [0.09314963977033448, 5.204170427930421e-18], 'true': [0.008208897948738962, 0.08732057327255009], 'true,false': [4.0371746350005693e-17, 0.21000000000000005], 'true,false,false': [0.21000000000000005, nan], 'false': [5.204170427930421e-18, nan]}, {'': [0.0816671689946521, 6.938893903907228e-18], 'true': [0.011013236503383183, 0.19182546075872775], 'true,false': [0.19182546075872775, nan], 'true,false,true': [nan, 0.19182546075872775], 'false': [6.938893903907228e-18, nan]}, {'': [0.07750229523809445, -1.734723475976807e-18], 'true': [0.010883790206641215, 0.07457129536238888], 'true,false': [3.027880976250427e-17, 0.2099999999999999], 'true,false,false': [0.2099999999999999, nan], 'false': [-1.734723475976807e-18, nan]}, {'': [0.0730266724099, 0.0], 'true': [0.008115146322813169, 0.1915146347908431], 'true,false': [0.0, 0.21000000000000002], 'true,false,false': [0.21000000000000002, nan], 'false': [0.0, nan]}, {'': [0.07175570720830424, 0.0], 'true': [0.012392583057958973, 0.0704522229231126], 'true,false': [0.0704522229231126, nan], 'true,false,true': [nan, 0.0704522229231126], 'false': [0.0, nan]}, {'': [0.0709548073468361, 3.469446951953614e-18], 'true': [0.006670558420550136, 0.1910655251845993], 'true,false': [0.0, 0.21000000000000005], 'true,false,false': [0.21000000000000005, nan], 'false': [3.469446951953614e-18, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(A, D).;true;true
0;true,false;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;true;genre(B, D).;true;true
1;true,false;genre(A, E).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;true;genre(B, D).;true;true
3;true,false;genre(A, E).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;true;genre(A, D).;true;true
4;true,false;genre(B, E).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(A, D).;true;true
6;true,false;genre(B, E).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;true;genre(B, D).;true;true
7;true,false;genre(A, E).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;true;genre(B, D).;true;true
9;true,false;genre(A, E).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14185106490048777;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995121;  // std dev = 5.96e-08, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | | else if ( director(B), female(A) )
%   | | | then return 0.8581489350995121;  // std dev = 2.11e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return -0.1418510649004878;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   else return -0.1418510649004878;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.7194734122109545;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return 0.6631455421616647;  // std dev = 0.211, 15.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=14 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( director(B), female(A) )
%   | | | then return 0.7194734122109545;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return -0.12544463852839138;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   else return -0.12544463852839138;  // std dev = 7.45e-09, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.5631293809241604;  // std dev = 0.034, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | else return -0.12403351981755126;  // std dev = 0.099, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   else return -0.11231637819360635;  // std dev = 1.39e-08, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.4156268848534195;  // std dev = 1.49e-08, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return 0.38758611896041156;  // std dev = 0.156, 15.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=14 */
%   | else if ( genre(A, E) )
%   | | then return -0.10053183446875165;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( female(A), director(B) )
%   | | | then return 0.4156268848534195;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return -0.10053183446875162;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   else return -0.10159632948783631;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.17888594927810877;  // std dev = 0.123, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else if ( genre(B, E) )
%   | | then return 0.3312782303493763;  // std dev = 0.042, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | | else if ( director(B), female(A) )
%   | | | then return 0.31943302434988874;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return -0.09179927160165825;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   else return -0.09269127618926094;  // std dev = 9.13e-09, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.26142048926385514;  // std dev = 0.039, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | else return -0.10016247365043429;  // std dev = 0.141, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   else return -0.08518475138839685;  // std dev = 1.05e-08, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14308840189869693;  // std dev = 0.102, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else if ( genre(B, E) )
%   | | then return 0.21502142725101162;  // std dev = 0.032, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | | else if ( director(B), female(A) )
%   | | | then return 0.20796560281737275;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return -0.0770000717591325;  // std dev = 2.63e-09, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   else return -0.07877675473109173;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.1730592881522749;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return 0.16030594703607842;  // std dev = 0.094, 15.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=14 */
%   | else if ( genre(A, E) )
%   | | then return -0.06215240853672167;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( director(B), female(A) )
%   | | | then return 0.17578094780296327;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return -0.07170275120787707;  // std dev = 3.73e-09, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   else return -0.07324622576333704;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.15708287214057098;  // std dev = 0.030, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | else if ( actor(A) )
%   | | then return -0.06707423592160706;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else return -0.11458832643025701;  // std dev = 0.127, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else return -0.06842697784420272;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.12338114938978208;  // std dev = 0.069, 23.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=22 */
%   | else if ( genre(A, E) )
%   | | then return -0.05261328978013636;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( director(B), female(A) )
%   | | | then return 0.13261168666938505;  // std dev = 2.63e-09, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return -0.06260452556159121;  // std dev = 0.003, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   else return -0.06419184008202619;  // std dev = 7.45e-09, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */


Results
   AUC ROC   = 0.999914
   AUC PR    = 0.996046
   CLL	      = -0.066446
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.911111
   F1        = 0.953488


Total learning time: 0.97 seconds
Total inference time: 0.95 seconds
AUC ROC: 0.999914


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.100257
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 0.381 seconds
Refined model CLL: -0.100257


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.999914
   AUC PR    = 0.996046
   CLL	      = -0.066446
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.911111
   F1        = 0.953488


Total learning time: 2.49 seconds
Total inference time: 0.95 seconds
AUC ROC: 0.999914
Total revision time: 2.49
Best scored revision CLL: -0.100257


Dataset: 4_cora_imdb, Fold: 5, Type: Transfer (trRDN-B), Time: 00:07:28
{'AUC ROC': 0.999914, 'AUC PR': 0.996046, 'CLL': -0.066446, 'Precision': [1.0, 0.5], 'Recall': 0.911111, 'F1': 0.953488, 'Learning time': 2.49, 'Inference time': 0.95, 'parameter_25': {'AUC ROC': 0.97178, 'AUC PR': 0.824078, 'CLL': -0.144537, 'Precision': [1.0, 0.5], 'Recall': 0.777778, 'F1': 0.875, 'Learning time': 0.758, 'Inference time': 0.862}}


Starting fold 1

Target train facts examples: 863
Target train pos examples: 326
Target train neg examples: 10928

Target test facts examples: 215
Target test pos	 examples: 56
Target test neg examples: 3308

Amount of data: 5
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;title(I, H), venue(I, A).;false;false
0;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
0;false;haswordvenue(A, L), haswordtitle(M, L).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordtitle(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordauthor(I, H).;false;true
2;true,false,false;haswordvenue(A, J), haswordtitle(K, J).;false;false
2;false;haswordvenue(A, L), haswordtitle(M, L).;true;false
2;false,true;haswordauthor(N, L).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;title(E, D), venue(E, B).;false;true
3;true,true,false;title(F, D), venue(F, A).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, A).;false;true
4;true,true,false;title(F, D), venue(F, B).;false;false
4;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
4;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
4;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
4;false,true;haswordauthor(M, K).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, B).;false;true
5;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
5;true,false;haswordvenue(B, H), haswordtitle(I, H).;true;true
5;true,false,true;title(J, I), venue(J, B).;false;false
5;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
5;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;title(E, D), venue(E, A).;false;true
6;true,true,false;title(F, D), venue(F, B).;false;false
6;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
6;true,false,true;title(I, H), venue(I, B).;false;false
6;true,false,false;haswordvenue(A, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;title(F, D), venue(F, A).;false;false
7;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
7;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
7;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
7;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;title(E, D), venue(E, A).;false;true
8;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
8;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
8;true,false,true;title(J, I), venue(J, A).;false;false
8;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
8;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, B).;false;true
9;true,true,false;title(F, D), venue(F, A).;false;false
9;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
9;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
9;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
9;false,true;haswordauthor(M, K).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995121;  // std dev = 2.11e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.5248156017661788;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.14185106490048777;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7194734122109545;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( genre(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(F, B) )
%   | | | then return 0.448295606241962;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.12544463852839138;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A) )
%   | | then return 0.4588648915344537;  // std dev = 0.850, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.11231637819360639;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.44115219622841795;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( genre(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(F, B) )
%   | | | then return 0.25764806362317955;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.10159632948783628;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( genre(B, E) )
%   | | then return 0.3367883597005703;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.19423264559711786;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.09269127618926096;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.26611421873834507;  // std dev = 5.27e-09, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( movie(E, B) )
%   | | then if ( genre(B, F) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.14571474080359395;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.08518475138839687;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( genre(B, E) )
%   | | then return 0.21745797501044284;  // std dev = 5.27e-09, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.10952452309991094;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.07877675473109173;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.18272400790575127;  // std dev = 3.73e-09, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( genre(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(F, B) )
%   | | | then return 0.08269573518423116;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.07324622576333704;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A) )
%   | | then if ( genre(A, F) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.10987717807344309;  // std dev = 0.825, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.06842697784420272;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.1429990335454343;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( genre(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(F, A) )
%   | | | then return 0.03679437442411152;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.0641918400820262;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.316619
   Precision = 0.059638 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.112563


Total learning time: 0.674 seconds
Total inference time: 0.982 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 0.96
   AUC PR    = 0.961111
   CLL	      = -0.256941
   Precision = 0.833333 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.909091


Total scoring time: 0.324 seconds
Parameter learned model CLL: -0.256941


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [2.11e-08, 0, 3], 'true,false,false,true': [0.816, 1, 2], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 4, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 3], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.816, 1, 2], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 4, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.85, 1, 5], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 4, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 3], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.816, 1, 2], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 4, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 3], 'true,false,false,true': [0.816, 1, 2], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 4, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, B)', 'true,false,true': 'genre(B, F)', 'false': 'movie(G, A)'}, {'true,true': [5.27e-09, 0, 3], 'true,false,true,true': [0.0, 0, 0], 'true,false,true,false': [0.816, 1, 2], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 4, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [5.27e-09, 0, 3], 'true,false,false,true': [0.816, 1, 2], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 4, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, A)'}, {'true,true': [3.73e-09, 0, 3], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.816, 1, 2], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 4, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'true,false,true': 'genre(A, F)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 0, 0], 'true,false,true,true': [0.0, 0, 0], 'true,false,true,false': [0.825, 1, 5], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 4, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 3], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.816, 1, 2], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 4, 0], 'false,false': [0.0, 0, 0]}]]
[{'': [0.1388888888888887, 0.0], 'true': [nan, 0.1388888888888887], 'true,false': [1.4802973661668753e-16, 0.22222222222222224], 'true,false,false': [0.22222222222222224, nan], 'false': [0.0, nan]}, {'': [0.12949546172365034, 0.0], 'true': [0.0, 0.2222222222222222], 'true,false': [nan, 0.2222222222222222], 'true,false,false': [0.2222222222222222, nan], 'false': [0.0, nan]}, {'': [0.12042365933938219, 0.0], 'true': [nan, 0.12042365933938219], 'true,false': [0.12042365933938219, nan], 'false': [0.0, nan]}, {'': [0.11952955278191134, 0.0], 'true': [0.0, 0.22222222222222224], 'true,false': [nan, 0.22222222222222224], 'true,false,false': [0.22222222222222224, nan], 'false': [0.0, nan]}, {'': [0.1161916440169974, 0.0], 'true': [nan, 0.1161916440169974], 'true,false': [0.0, 0.22222222222222224], 'true,false,false': [0.22222222222222224, nan], 'false': [0.0, nan]}, {'': [0.11473511968285126, 0.0], 'true': [9.25185853854297e-18, 0.22222222222222224], 'true,false': [0.22222222222222224, nan], 'true,false,true': [nan, 0.22222222222222224], 'false': [0.0, nan]}, {'': [0.11402351862144187, 0.0], 'true': [nan, 0.11402351862144187], 'true,false': [9.25185853854297e-18, 0.22222222222222224], 'true,false,false': [0.22222222222222224, nan], 'false': [0.0, nan]}, {'': [0.11361252494702383, 0.0], 'true': [4.625929269271485e-18, 0.22222222222222224], 'true,false': [nan, 0.22222222222222224], 'true,false,false': [0.22222222222222224, nan], 'false': [0.0, nan]}, {'': [0.11333163598576834, 0.0], 'true': [nan, 0.11333163598576834], 'true,false': [0.11333163598576834, nan], 'true,false,true': [nan, 0.11333163598576834], 'false': [0.0, nan]}, {'': [0.1139309685158802, 0.0], 'true': [0.0, 0.2222222222222222], 'true,false': [nan, 0.2222222222222222], 'true,false,false': [0.2222222222222222, nan], 'false': [0.0, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;true;genre(B, D).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;true;genre(B, D).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;true;genre(B, E).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;true;genre(B, D).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(B, E).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;true;genre(B, D).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;true;genre(B, D).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.8581489350995121;  // std dev = 2.11e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return 0.5248156017661788;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   else return -0.14185106490048777;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7194734122109545;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return 0.448295606241962;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   else return -0.12544463852839138;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.4588648915344537;  // std dev = 0.850, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   else return -0.11231637819360639;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.44115219622841795;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return 0.25764806362317955;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   else return -0.10159632948783628;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.3367883597005703;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return 0.19423264559711786;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   else return -0.09269127618926096;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.26611421873834507;  // std dev = 5.27e-09, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return 0.14571474080359395;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   else return -0.08518475138839687;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.21745797501044284;  // std dev = 5.27e-09, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return 0.10952452309991094;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   else return -0.07877675473109173;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.18272400790575127;  // std dev = 3.73e-09, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return 0.08269573518423116;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   else return -0.07324622576333704;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.10987717807344309;  // std dev = 0.825, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   else return -0.06842697784420272;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.1429990335454343;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return 0.03679437442411152;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   else return -0.0641918400820262;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */


Results
   AUC ROC   = 0.999547
   AUC PR    = 0.949153
   CLL	      = -0.331887
   Precision = 0.056112 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.106262


Total learning time: 0.497 seconds
Total inference time: 0.931 seconds
AUC ROC: 0.999547


Results scoring model
   AUC ROC   = 0.96
   AUC PR    = 0.961111
   CLL	      = -0.256941
   Precision = 0.833333 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.909091


Total scoring time: 0.315 seconds
Refined model CLL: -0.256941


******************************************
Best model found
******************************************
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.316619
   Precision = 0.059638 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.112563


Total learning time: 1.81 seconds
Total inference time: 0.982 seconds
AUC ROC: 1.0
Total revision time: 1.81
Best scored revision CLL: -0.256941


Dataset: 4_cora_imdb, Fold: 1, Type: Transfer (trRDN-B), Time: 00:07:33
{'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.316619, 'Precision': [0.059638, 0.5], 'Recall': 1.0, 'F1': 0.112563, 'Learning time': 1.81, 'Inference time': 0.982, 'parameter_5': {'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.316619, 'Precision': [0.059638, 0.5], 'Recall': 1.0, 'F1': 0.112563, 'Learning time': 0.674, 'Inference time': 0.982}}


Amount of data: 10
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;title(I, H), venue(I, A).;false;false
0;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
0;false;haswordvenue(A, L), haswordtitle(M, L).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordtitle(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordauthor(I, H).;false;true
2;true,false,false;haswordvenue(A, J), haswordtitle(K, J).;false;false
2;false;haswordvenue(A, L), haswordtitle(M, L).;true;false
2;false,true;haswordauthor(N, L).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;title(E, D), venue(E, B).;false;true
3;true,true,false;title(F, D), venue(F, A).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, A).;false;true
4;true,true,false;title(F, D), venue(F, B).;false;false
4;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
4;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
4;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
4;false,true;haswordauthor(M, K).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, B).;false;true
5;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
5;true,false;haswordvenue(B, H), haswordtitle(I, H).;true;true
5;true,false,true;title(J, I), venue(J, B).;false;false
5;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
5;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;title(E, D), venue(E, A).;false;true
6;true,true,false;title(F, D), venue(F, B).;false;false
6;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
6;true,false,true;title(I, H), venue(I, B).;false;false
6;true,false,false;haswordvenue(A, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;title(F, D), venue(F, A).;false;false
7;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
7;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
7;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
7;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;title(E, D), venue(E, A).;false;true
8;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
8;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
8;true,false,true;title(J, I), venue(J, A).;false;false
8;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
8;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, B).;false;true
9;true,true,false;title(F, D), venue(F, A).;false;false
9;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
9;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
9;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
9;false,true;haswordauthor(M, K).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995122;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.6081489350995123;  // std dev = 1.225, 8.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=6 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.1418510649004878;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7194734122109545;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( genre(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(F, B) )
%   | | | then return 0.5170719622367218;  // std dev = 1.225, 8.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=6 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.12544463852839138;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A) )
%   | | then return 0.4601704475038683;  // std dev = 1.247, 12.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=10 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.11231637819360639;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.4408303532325759;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( genre(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(F, B) )
%   | | | then return 0.30344718688164063;  // std dev = 1.225, 8.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=6 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.10159632948783627;  // std dev = 1.32e-09, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( genre(B, E) )
%   | | then return 0.336568670931749;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.22780496261266941;  // std dev = 1.225, 8.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=6 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.09269127618926097;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.2659650334318834;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( movie(E, B) )
%   | | then if ( genre(B, F) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.17149397108856412;  // std dev = 1.225, 8.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=6 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.08518475138839687;  // std dev = 3.73e-09, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( genre(B, E) )
%   | | then return 0.217353366048328;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.13033243125398064;  // std dev = 1.225, 8.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=6 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.07877675473109173;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.18264782457064033;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( genre(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(F, B) )
%   | | | then return 0.10012952947630709;  // std dev = 1.225, 8.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=6 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.07324622576333704;  // std dev = 9.31e-10, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A) )
%   | | then if ( genre(A, F) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.10411504417461774;  // std dev = 1.232, 12.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=10 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.06842697784420272;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.14365323512553396;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( genre(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(F, A) )
%   | | | then return 0.055187757181329664;  // std dev = 1.225, 8.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=6 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.0641918400820262;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.371362
   Precision = 0.059638 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.112563


Total learning time: 0.657 seconds
Total inference time: 1.102 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 0.94
   AUC PR    = 0.933006
   CLL	      = -0.278899
   Precision = 0.833333 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.909091


Total scoring time: 0.343 seconds
Parameter learned model CLL: -0.278899


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 4], 'true,false,false,true': [1.225, 2, 6], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 8, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 4], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [1.225, 2, 6], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 8, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [1.247, 2, 10], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 8, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 4], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [1.225, 2, 6], 'true,false,false,false': [0.0, 0, 0], 'false,true': [1.32e-09, 8, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 4], 'true,false,false,true': [1.225, 2, 6], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 8, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, B)', 'true,false,true': 'genre(B, F)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 0, 4], 'true,false,true,true': [0.0, 0, 0], 'true,false,true,false': [1.225, 2, 6], 'true,false,false': [0.0, 0, 0], 'false,true': [3.73e-09, 8, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 4], 'true,false,false,true': [1.225, 2, 6], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 8, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 0, 4], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [1.225, 2, 6], 'true,false,false,false': [0.0, 0, 0], 'false,true': [9.31e-10, 8, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'true,false,true': 'genre(A, F)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 0, 0], 'true,false,true,true': [0.0, 0, 0], 'true,false,true,false': [1.232, 2, 10], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 8, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 4], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [1.225, 2, 6], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 8, 0], 'false,false': [0.0, 0, 0]}]]
[{'': [0.1388888888888887, -6.938893903907228e-18], 'true': [nan, 0.1388888888888887], 'true,false': [0.0, 0.1874999999999999], 'true,false,false': [0.1874999999999999, nan], 'false': [-6.938893903907228e-18, nan]}, {'': [0.13410363265592706, 0.0], 'true': [0.0, 0.18749999999999994], 'true,false': [nan, 0.18749999999999994], 'true,false,false': [0.18749999999999994, nan], 'false': [0.0, nan]}, {'': [0.12953113818392092, -1.734723475976807e-18], 'true': [nan, 0.12953113818392092], 'true,false': [0.12953113818392092, nan], 'false': [-1.734723475976807e-18, nan]}, {'': [0.12919425208813518, 1.734723475976807e-18], 'true': [0.0, 0.18749999999999994], 'true,false': [nan, 0.18749999999999994], 'true,false,false': [0.18749999999999994, nan], 'false': [1.734723475976807e-18, nan]}, {'': [0.12762878761051502, 0.0], 'true': [nan, 0.12762878761051502], 'true,false': [0.0, 0.18749999999999997], 'true,false,false': [0.18749999999999997, nan], 'false': [0.0, nan]}, {'': [0.12698328480450563, 1.734723475976807e-18], 'true': [0.0, 0.1875], 'true,false': [0.1875, nan], 'true,false,true': [nan, 0.1875], 'false': [1.734723475976807e-18, nan]}, {'': [0.12668280957610714, 0.0], 'true': [nan, 0.12668280957610714], 'true,false': [0.0, 0.1875], 'true,false,false': [0.1875, nan], 'false': [0.0, nan]}, {'': [0.12651317089450564, 8.673617379884035e-19], 'true': [0.0, 0.1875], 'true,false': [nan, 0.1875], 'true,false,false': [0.1875, nan], 'false': [8.673617379884035e-19, nan]}, {'': [0.12639535344543706, 0.0], 'true': [nan, 0.12639535344543706], 'true,false': [0.12639535344543706, nan], 'true,false,true': [nan, 0.12639535344543706], 'false': [0.0, nan]}, {'': [0.12673914239731032, 0.0], 'true': [0.0, 0.18750000000000003], 'true,false': [nan, 0.18750000000000003], 'true,false,false': [0.18750000000000003, nan], 'false': [0.0, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;true;genre(B, D).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;true;genre(B, D).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;true;genre(B, E).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;true;genre(B, D).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(B, E).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;true;genre(B, D).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;true;genre(B, D).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.8581489350995122;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( director(B), female(A) )
%   | | then return 0.8581489350995122;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return 0.19148226843284555;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   else return -0.1418510649004878;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7194734122109545;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( female(A), director(B) )
%   | | then return 0.7194734122109545;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return 0.16653882456488175;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   else return -0.12544463852839138;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), female(A) )
%   | then return 0.5553664367462846;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else return 0.34873033978092466;  // std dev = 0.961, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   else return -0.11231637819360639;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.45571873604657176;  // std dev = 0.044, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( female(A), director(B) )
%   | | then return 0.4175135841583099;  // std dev = 1.49e-08, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return 0.08232628759821341;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   else return -0.10159632948783627;  // std dev = 3.73e-09, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.3469536382927593;  // std dev = 0.040, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( female(A), director(B) )
%   | | then return 0.32071184716014967;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return 0.06653393538549601;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   else return -0.09269127618926097;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.2731213796757578;  // std dev = 0.035, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( female(A), director(B) )
%   | | then return 0.25517224256948945;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return 0.053318562951260105;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   else return -0.08518475138839687;  // std dev = 3.73e-09, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.22242673576958077;  // std dev = 0.030, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( female(A), director(B) )
%   | | then return 0.20975771563253556;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return 0.042444221859412955;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   else return -0.07877675473109173;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.1863754335529806;  // std dev = 0.026, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( female(A), director(B) )
%   | | then return 0.17709649774527736;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return 0.03361207607344274;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   else return -0.07324622576333704;  // std dev = 2.63e-09, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( female(A) )
%   | then return 0.08523143555228592;  // std dev = 0.160, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | else return 0.17714489869098574;  // std dev = 0.708, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   else return -0.06842697784420272;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.13992748655355486;  // std dev = 0.012, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( female(A), director(B) )
%   | | then return 0.14203715611803436;  // std dev = 3.73e-09, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return -0.005566524139809866;  // std dev = 0.808, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   else return -0.0641918400820262;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */


Results
   AUC ROC   = 0.999765
   AUC PR    = 0.983476
   CLL	      = -0.161629
   Precision = 0.949153 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.973913


Total learning time: 0.694 seconds
Total inference time: 0.957 seconds
AUC ROC: 0.999765


Results scoring model
   AUC ROC   = 0.995
   AUC PR    = 0.995455
   CLL	      = -0.178937
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.9
   F1        = 0.947368


Total scoring time: 0.336 seconds
Refined model CLL: -0.178937


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.999765
   AUC PR    = 0.983476
   CLL	      = -0.161629
   Precision = 0.949153 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.973913


Total learning time: 2.03 seconds
Total inference time: 0.957 seconds
AUC ROC: 0.999765
Total revision time: 2.03
Best scored revision CLL: -0.178937


Dataset: 4_cora_imdb, Fold: 1, Type: Transfer (trRDN-B), Time: 00:07:37
{'AUC ROC': 0.999765, 'AUC PR': 0.983476, 'CLL': -0.161629, 'Precision': [0.949153, 0.5], 'Recall': 1.0, 'F1': 0.973913, 'Learning time': 2.03, 'Inference time': 0.957, 'parameter_10': {'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.371362, 'Precision': [0.059638, 0.5], 'Recall': 1.0, 'F1': 0.112563, 'Learning time': 0.657, 'Inference time': 1.102}}


Amount of data: 15
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;title(I, H), venue(I, A).;false;false
0;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
0;false;haswordvenue(A, L), haswordtitle(M, L).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordtitle(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordauthor(I, H).;false;true
2;true,false,false;haswordvenue(A, J), haswordtitle(K, J).;false;false
2;false;haswordvenue(A, L), haswordtitle(M, L).;true;false
2;false,true;haswordauthor(N, L).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;title(E, D), venue(E, B).;false;true
3;true,true,false;title(F, D), venue(F, A).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, A).;false;true
4;true,true,false;title(F, D), venue(F, B).;false;false
4;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
4;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
4;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
4;false,true;haswordauthor(M, K).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, B).;false;true
5;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
5;true,false;haswordvenue(B, H), haswordtitle(I, H).;true;true
5;true,false,true;title(J, I), venue(J, B).;false;false
5;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
5;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;title(E, D), venue(E, A).;false;true
6;true,true,false;title(F, D), venue(F, B).;false;false
6;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
6;true,false,true;title(I, H), venue(I, B).;false;false
6;true,false,false;haswordvenue(A, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;title(F, D), venue(F, A).;false;false
7;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
7;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
7;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
7;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;title(E, D), venue(E, A).;false;true
8;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
8;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
8;true,false,true;title(J, I), venue(J, A).;false;false
8;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
8;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, B).;false;true
9;true,true,false;title(F, D), venue(F, A).;false;false
9;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
9;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
9;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
9;false,true;haswordauthor(M, K).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995123;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.5581489350995124;  // std dev = 1.449, 10.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=7 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.1418510649004878;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7194734122109543;  // std dev = 2.98e-08, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( genre(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(F, B) )
%   | | | then return 0.47588605454691735;  // std dev = 1.449, 10.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=7 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.12544463852839138;  // std dev = 5.27e-09, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A) )
%   | | then return 0.4594114156676483;  // std dev = 1.494, 18.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=15 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.11231637819360636;  // std dev = 2.63e-09, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.44101746217981047;  // std dev = 2.11e-08, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( genre(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(F, B) )
%   | | | then return 0.27604381055593863;  // std dev = 1.449, 10.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=7 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.1015963294878363;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( genre(B, E) )
%   | | then return 0.3366963876426183;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.2076268544221736;  // std dev = 1.449, 10.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=7 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.09269127618926097;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.2660517637682736;  // std dev = 1.49e-08, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( movie(E, B) )
%   | | then if ( genre(B, F) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.15583612551717282;  // std dev = 1.449, 10.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=7 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.08518475138839687;  // std dev = 5.27e-09, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( genre(B, E) )
%   | | then return 0.21741418272268476;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.11752223910281479;  // std dev = 1.449, 10.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=7 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.07877675473109172;  // std dev = 3.73e-09, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.18269211627432758;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( genre(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(F, B) )
%   | | | then return 0.08924773308841431;  // std dev = 1.449, 10.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=7 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.07324622576333704;  // std dev = 1.32e-09, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A) )
%   | | then if ( genre(A, F) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.10768469255275684;  // std dev = 1.461, 18.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=15 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.06842697784420272;  // std dev = 2.63e-09, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.14324563543345492;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( genre(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(F, A) )
%   | | | then return 0.043573907534141545;  // std dev = 1.449, 10.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=7 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.06419184008202619;  // std dev = 1.61e-09, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.33763
   Precision = 0.059638 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.112563


Total learning time: 0.682 seconds
Total inference time: 1.074 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 0.953333
   AUC PR    = 0.951062
   CLL	      = -0.265513
   Precision = 0.833333 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.909091


Total scoring time: 0.369 seconds
Parameter learned model CLL: -0.265513


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 8], 'true,false,false,true': [1.449, 3, 7], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 12, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [2.98e-08, 0, 8], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [1.449, 3, 7], 'true,false,false,false': [0.0, 0, 0], 'false,true': [5.27e-09, 12, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [1.494, 3, 15], 'true,false,false': [0.0, 0, 0], 'false,true': [2.63e-09, 12, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [2.11e-08, 0, 8], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [1.449, 3, 7], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 12, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 8], 'true,false,false,true': [1.449, 3, 7], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 12, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, B)', 'true,false,true': 'genre(B, F)', 'false': 'movie(G, A)'}, {'true,true': [1.49e-08, 0, 8], 'true,false,true,true': [0.0, 0, 0], 'true,false,true,false': [1.449, 3, 7], 'true,false,false': [0.0, 0, 0], 'false,true': [5.27e-09, 12, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 8], 'true,false,false,true': [1.449, 3, 7], 'true,false,false,false': [0.0, 0, 0], 'false,true': [3.73e-09, 12, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 0, 8], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [1.449, 3, 7], 'true,false,false,false': [0.0, 0, 0], 'false,true': [1.32e-09, 12, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'true,false,true': 'genre(A, F)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 0, 0], 'true,false,true,true': [0.0, 0, 0], 'true,false,true,false': [1.461, 3, 15], 'true,false,false': [0.0, 0, 0], 'false,true': [2.63e-09, 12, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 8], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [1.449, 3, 7], 'true,false,false,false': [0.0, 0, 0], 'false,true': [1.61e-09, 12, 0], 'false,false': [0.0, 0, 0]}]]
[{'': [0.1388888888888886, -1.1564823173178714e-17], 'true': [nan, 0.1388888888888886], 'true,false': [-2.220446049250313e-16, 0.20999999999999988], 'true,false,false': [0.20999999999999988, nan], 'false': [-1.1564823173178714e-17, nan]}, {'': [0.13131723476882629, 2.3129646346357427e-18], 'true': [1.1102230246251565e-16, 0.2100000000000001], 'true,false': [nan, 0.2100000000000001], 'true,false,false': [0.2100000000000001, nan], 'false': [2.3129646346357427e-18, nan]}, {'': [0.12403255952282782, 6.938893903907228e-18], 'true': [nan, 0.12403255952282782], 'true,false': [0.12403255952282782, nan], 'false': [6.938893903907228e-18, nan]}, {'': [0.12338674215558375, 0.0], 'true': [5.551115123125783e-17, 0.2100000000000001], 'true,false': [nan, 0.2100000000000001], 'true,false,false': [0.2100000000000001, nan], 'false': [0.0, nan]}, {'': [0.12077998627302305, 2.3129646346357427e-18], 'true': [nan, 0.12077998627302305], 'true,false': [-5.551115123125783e-17, 0.21000000000000002], 'true,false,false': [0.21000000000000002, nan], 'false': [2.3129646346357427e-18, nan]}, {'': [0.11966604615187595, 2.3129646346357427e-18], 'true': [2.7755575615628914e-17, 0.21000000000000005], 'true,false': [0.21000000000000005, nan], 'true,false,true': [nan, 0.21000000000000005], 'false': [2.3129646346357427e-18, nan]}, {'': [0.11913046923460624, 1.1564823173178713e-18], 'true': [nan, 0.11913046923460624], 'true,false': [-6.938893903907228e-18, 0.20999999999999996], 'true,false,false': [0.20999999999999996, nan], 'false': [1.1564823173178713e-18, nan]}, {'': [0.11882267969111011, 1.1564823173178713e-18], 'true': [0.0, 0.21000000000000002], 'true,false': [nan, 0.21000000000000002], 'true,false,false': [0.21000000000000002, nan], 'false': [1.1564823173178713e-18, nan]}, {'': [0.11861033991551127, 5.782411586589357e-19], 'true': [nan, 0.11861033991551127], 'true,false': [0.11861033991551127, nan], 'true,false,true': [nan, 0.11861033991551127], 'false': [5.782411586589357e-19, nan]}, {'': [0.11911961810924317, 2.8912057932946786e-18], 'true': [0.0, 0.21000000000000002], 'true,false': [nan, 0.21000000000000002], 'true,false,false': [0.21000000000000002, nan], 'false': [2.8912057932946786e-18, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;true;genre(B, D).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;true;genre(B, D).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;true;genre(B, E).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;true;genre(B, D).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(B, E).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;true;genre(B, D).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;true;genre(B, D).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.8581489350995123;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( actor(B) )
%   | | then return -0.14185106490048777;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else return 0.8581489350995123;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   else return -0.1418510649004878;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7194734122109543;  // std dev = 2.98e-08, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( actor(B) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else return 0.7194734122109543;  // std dev = 2.11e-08, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   else return -0.12544463852839138;  // std dev = 5.27e-09, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.11231637819360639;  // std dev = 2.63e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else return 0.5553664367462846;  // std dev = 0.000, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   else return -0.11231637819360636;  // std dev = 9.13e-09, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.41751358415830986;  // std dev = 2.98e-08, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( actor(B) )
%   | | then return -0.1015963294878363;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else return 0.41751358415830986;  // std dev = 2.58e-08, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   else return -0.1015963294878363;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.3207118471601497;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( actor(B) )
%   | | then return -0.09269127618926094;  // std dev = 2.63e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else return 0.3207118471601497;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   else return -0.09269127618926097;  // std dev = 5.27e-09, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.2551722425694894;  // std dev = 1.49e-08, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( actor(B) )
%   | | then return -0.08518475138839687;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else return 0.2551722425694894;  // std dev = 1.29e-08, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   else return -0.08518475138839687;  // std dev = 5.27e-09, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.2097577156325356;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( actor(B) )
%   | | then return -0.07877675473109173;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else return 0.2097577156325356;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   else return -0.07877675473109172;  // std dev = 3.73e-09, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.17709649774527736;  // std dev = 7.45e-09, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( actor(B) )
%   | | then return -0.07324622576333704;  // std dev = 1.86e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else return 0.17709649774527736;  // std dev = 5.27e-09, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   else return -0.07324622576333704;  // std dev = 3.73e-09, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.06842697784420272;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else return 0.15274385809367091;  // std dev = 1.67e-08, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   else return -0.06842697784420272;  // std dev = 2.63e-09, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.13400703000801117;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( actor(B) )
%   | | then return -0.0641918400820262;  // std dev = 1.32e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else return 0.13400703000801117;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   else return -0.06419184008202619;  // std dev = 5.89e-09, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */


Results
   AUC ROC   = 0.999547
   AUC PR    = 0.949153
   CLL	      = -0.065262
   Precision = 0.949153 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.973913


Total learning time: 0.787 seconds
Total inference time: 0.924 seconds
AUC ROC: 0.999547


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.094637
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 0.346 seconds
Refined model CLL: -0.094637


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.999547
   AUC PR    = 0.949153
   CLL	      = -0.065262
   Precision = 0.949153 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.973913


Total learning time: 2.184 seconds
Total inference time: 0.924 seconds
AUC ROC: 0.999547
Total revision time: 2.184
Best scored revision CLL: -0.094637


Dataset: 4_cora_imdb, Fold: 1, Type: Transfer (trRDN-B), Time: 00:07:42
{'AUC ROC': 0.999547, 'AUC PR': 0.949153, 'CLL': -0.065262, 'Precision': [0.949153, 0.5], 'Recall': 1.0, 'F1': 0.973913, 'Learning time': 2.184, 'Inference time': 0.924, 'parameter_15': {'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.33763, 'Precision': [0.059638, 0.5], 'Recall': 1.0, 'F1': 0.112563, 'Learning time': 0.682, 'Inference time': 1.074}}


Amount of data: 20
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;title(I, H), venue(I, A).;false;false
0;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
0;false;haswordvenue(A, L), haswordtitle(M, L).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordtitle(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordauthor(I, H).;false;true
2;true,false,false;haswordvenue(A, J), haswordtitle(K, J).;false;false
2;false;haswordvenue(A, L), haswordtitle(M, L).;true;false
2;false,true;haswordauthor(N, L).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;title(E, D), venue(E, B).;false;true
3;true,true,false;title(F, D), venue(F, A).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, A).;false;true
4;true,true,false;title(F, D), venue(F, B).;false;false
4;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
4;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
4;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
4;false,true;haswordauthor(M, K).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, B).;false;true
5;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
5;true,false;haswordvenue(B, H), haswordtitle(I, H).;true;true
5;true,false,true;title(J, I), venue(J, B).;false;false
5;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
5;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;title(E, D), venue(E, A).;false;true
6;true,true,false;title(F, D), venue(F, B).;false;false
6;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
6;true,false,true;title(I, H), venue(I, B).;false;false
6;true,false,false;haswordvenue(A, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;title(F, D), venue(F, A).;false;false
7;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
7;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
7;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
7;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;title(E, D), venue(E, A).;false;true
8;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
8;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
8;true,false,true;title(J, I), venue(J, A).;false;false
8;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
8;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, B).;false;true
9;true,true,false;title(F, D), venue(F, A).;false;false
9;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
9;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
9;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
9;false,true;haswordauthor(M, K).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995123;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.4945125714631487;  // std dev = 1.595, 11.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=7 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.1418510649004878;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7194734122109542;  // std dev = 4.21e-08, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else if ( genre(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(F, B) )
%   | | | then return 0.42312069605298835;  // std dev = 1.595, 11.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=7 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.12544463852839138;  // std dev = 7.45e-09, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A) )
%   | | then return 0.4583416818353443;  // std dev = 1.677, 24.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=20 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.11231637819360635;  // std dev = 3.48e-09, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.44128119071328137;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else if ( genre(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(F, B) )
%   | | | then return 0.24080964318406786;  // std dev = 1.595, 11.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=7 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.10159632948783631;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( genre(B, E) )
%   | | then return 0.33687641804825036;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.18203978866835294;  // std dev = 1.595, 11.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=7 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.09269127618926094;  // std dev = 2.28e-09, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.2661740146722939;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else if ( movie(E, B) )
%   | | then if ( genre(B, F) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.136657541028811;  // std dev = 1.595, 11.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=7 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.08518475138839685;  // std dev = 1.05e-08, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( genre(B, E) )
%   | | then return 0.21749990116951531;  // std dev = 1.05e-08, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.10254486959902355;  // std dev = 1.595, 11.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=7 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.07877675473109173;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.1827545393460483;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else if ( genre(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(F, B) )
%   | | | then return 0.07713631037530279;  // std dev = 1.595, 11.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=7 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.07324622576333704;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A) )
%   | | then if ( genre(A, F) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.11173746640497474;  // std dev = 1.614, 24.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=20 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.06842697784420272;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.14279249093728114;  // std dev = 1.49e-08, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else if ( genre(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(F, A) )
%   | | | then return 0.03123032588263065;  // std dev = 1.595, 11.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=7 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.06419184008202619;  // std dev = 1.86e-09, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.298475
   Precision = 0.059638 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.112563


Total learning time: 0.68 seconds
Total inference time: 1.044 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 0.965
   AUC PR    = 0.965075
   CLL	      = -0.249366
   Precision = 0.833333 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.909091


Total scoring time: 0.374 seconds
Parameter learned model CLL: -0.249366


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 13], 'true,false,false,true': [1.595, 4, 7], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 16, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [4.21e-08, 0, 13], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [1.595, 4, 7], 'true,false,false,false': [0.0, 0, 0], 'false,true': [7.45e-09, 16, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [1.677, 4, 20], 'true,false,false': [0.0, 0, 0], 'false,true': [3.48e-09, 16, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 13], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [1.595, 4, 7], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 16, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 13], 'true,false,false,true': [1.595, 4, 7], 'true,false,false,false': [0.0, 0, 0], 'false,true': [2.28e-09, 16, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, B)', 'true,false,true': 'genre(B, F)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 0, 13], 'true,false,true,true': [0.0, 0, 0], 'true,false,true,false': [1.595, 4, 7], 'true,false,false': [0.0, 0, 0], 'false,true': [1.05e-08, 16, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [1.05e-08, 0, 13], 'true,false,false,true': [1.595, 4, 7], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 16, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 0, 13], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [1.595, 4, 7], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 16, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'true,false,true': 'genre(A, F)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 0, 0], 'true,false,true,true': [0.0, 0, 0], 'true,false,true,false': [1.614, 4, 20], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 16, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [1.49e-08, 0, 13], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [1.595, 4, 7], 'true,false,false,false': [0.0, 0, 0], 'false,true': [1.86e-09, 16, 0], 'false,false': [0.0, 0, 0]}]]
[{'': [0.13888888888888906, -6.938893903907228e-18], 'true': [nan, 0.13888888888888906], 'true,false': [-2.7328566760003855e-16, 0.23140495867768587], 'true,false,false': [0.23140495867768587, nan], 'false': [-6.938893903907228e-18, nan]}, {'': [0.12786436531322995, 3.469446951953614e-18], 'true': [1.3664283380001927e-16, 0.23140495867768598], 'true,false': [nan, 0.23140495867768598], 'true,false,false': [0.23140495867768598, nan], 'false': [3.469446951953614e-18, nan]}, {'': [0.11718600968350275, 1.214306433183765e-17], 'true': [nan, 0.11718600968350275], 'true,false': [0.11718600968350275, nan], 'false': [1.214306433183765e-17, nan]}, {'': [0.11603804410875229, -6.938893903907228e-18], 'true': [0.0, 0.23140495867768596], 'true,false': [nan, 0.23140495867768596], 'true,false,false': [0.23140495867768596, nan], 'false': [-6.938893903907228e-18, nan]}, {'': [0.112012579319417, 5.204170427930421e-18], 'true': [nan, 0.112012579319417], 'true,false': [-3.416070845000482e-17, 0.2314049586776859], 'true,false,false': [0.2314049586776859, nan], 'false': [5.204170427930421e-18, nan]}, {'': [0.11022511287161492, 6.938893903907228e-18], 'true': [-5.124106267500723e-17, 0.23140495867768598], 'true,false': [0.23140495867768598, nan], 'true,false,true': [nan, 0.23140495867768598], 'false': [6.938893903907228e-18, nan]}, {'': [0.10934132876463783, -1.734723475976807e-18], 'true': [nan, 0.10934132876463783], 'true,false': [8.540177112501205e-18, 0.23140495867768596], 'true,false,false': [0.23140495867768596, nan], 'false': [-1.734723475976807e-18, nan]}, {'': [0.10883004194880246, 0.0], 'true': [-2.9890619893754213e-17, 0.23140495867768596], 'true,false': [nan, 0.23140495867768596], 'true,false,false': [0.23140495867768596, nan], 'false': [0.0, nan]}, {'': [0.10848421622137644, 0.0], 'true': [nan, 0.10848421622137644], 'true,false': [0.10848421622137644, nan], 'true,false,true': [nan, 0.10848421622137644], 'false': [0.0, nan]}, {'': [0.10915052738708246, 3.469446951953614e-18], 'true': [1.708035422500241e-17, 0.2314049586776859], 'true,false': [nan, 0.2314049586776859], 'true,false,false': [0.2314049586776859, nan], 'false': [3.469446951953614e-18, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;true;genre(B, D).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;true;genre(B, D).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;true;genre(B, E).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;true;genre(B, D).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(B, E).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;true;genre(B, D).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;true;genre(B, D).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.8581489350995123;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else if ( actor(B) )
%   | | then return -0.14185106490048777;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return 0.8581489350995123;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   else return -0.1418510649004878;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7194734122109542;  // std dev = 4.21e-08, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else if ( actor(B) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return 0.7194734122109543;  // std dev = 2.11e-08, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   else return -0.12544463852839138;  // std dev = 7.45e-09, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.11231637819360639;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else return 0.5553664367462846;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   else return -0.11231637819360635;  // std dev = 1.39e-08, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.4175135841583098;  // std dev = 4.21e-08, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else if ( actor(B) )
%   | | then return -0.10159632948783628;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return 0.41751358415830986;  // std dev = 2.58e-08, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   else return -0.10159632948783631;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.3207118471601497;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else if ( actor(B) )
%   | | then return -0.09269127618926096;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return 0.3207118471601497;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   else return -0.09269127618926094;  // std dev = 9.13e-09, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.2551722425694894;  // std dev = 2.11e-08, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else if ( actor(B) )
%   | | then return -0.08518475138839687;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return 0.2551722425694894;  // std dev = 1.29e-08, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   else return -0.08518475138839685;  // std dev = 1.05e-08, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.20975771563253562;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else if ( actor(B) )
%   | | then return -0.07877675473109173;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return 0.2097577156325356;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   else return -0.07877675473109173;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.1770964977452774;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else if ( actor(B) )
%   | | then return -0.07324622576333704;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return 0.17709649774527736;  // std dev = 5.27e-09, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   else return -0.07324622576333704;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.06842697784420272;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else return 0.15274385809367086;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   else return -0.06842697784420272;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.13400703000801117;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else if ( actor(B) )
%   | | then return -0.0641918400820262;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return 0.13400703000801117;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   else return -0.06419184008202619;  // std dev = 7.45e-09, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */


Results
   AUC ROC   = 0.999547
   AUC PR    = 0.949153
   CLL	      = -0.065262
   Precision = 0.949153 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.973913


Total learning time: 0.817 seconds
Total inference time: 0.895 seconds
AUC ROC: 0.999547


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.094637
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 0.364 seconds
Refined model CLL: -0.094637


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.999547
   AUC PR    = 0.949153
   CLL	      = -0.065262
   Precision = 0.949153 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.973913


Total learning time: 2.235 seconds
Total inference time: 0.895 seconds
AUC ROC: 0.999547
Total revision time: 2.235
Best scored revision CLL: -0.094637


Dataset: 4_cora_imdb, Fold: 1, Type: Transfer (trRDN-B), Time: 00:07:46
{'AUC ROC': 0.999547, 'AUC PR': 0.949153, 'CLL': -0.065262, 'Precision': [0.949153, 0.5], 'Recall': 1.0, 'F1': 0.973913, 'Learning time': 2.235, 'Inference time': 0.895, 'parameter_20': {'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.298475, 'Precision': [0.059638, 0.5], 'Recall': 1.0, 'F1': 0.112563, 'Learning time': 0.68, 'Inference time': 1.044}}


Amount of data: 25
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;title(I, H), venue(I, A).;false;false
0;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
0;false;haswordvenue(A, L), haswordtitle(M, L).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordtitle(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordauthor(I, H).;false;true
2;true,false,false;haswordvenue(A, J), haswordtitle(K, J).;false;false
2;false;haswordvenue(A, L), haswordtitle(M, L).;true;false
2;false,true;haswordauthor(N, L).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;title(E, D), venue(E, B).;false;true
3;true,true,false;title(F, D), venue(F, A).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, A).;false;true
4;true,true,false;title(F, D), venue(F, B).;false;false
4;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
4;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
4;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
4;false,true;haswordauthor(M, K).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, B).;false;true
5;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
5;true,false;haswordvenue(B, H), haswordtitle(I, H).;true;true
5;true,false,true;title(J, I), venue(J, B).;false;false
5;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
5;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;title(E, D), venue(E, A).;false;true
6;true,true,false;title(F, D), venue(F, B).;false;false
6;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
6;true,false,true;title(I, H), venue(I, B).;false;false
6;true,false,false;haswordvenue(A, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;title(F, D), venue(F, A).;false;false
7;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
7;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
7;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
7;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;title(E, D), venue(E, A).;false;true
8;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
8;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
8;true,false,true;title(J, I), venue(J, A).;false;false
8;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
8;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, B).;false;true
9;true,true,false;title(F, D), venue(F, A).;false;false
9;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
9;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
9;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
9;false,true;haswordauthor(M, K).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995123;  // std dev = 0.000, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.42957750652808374;  // std dev = 1.852, 14.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=8 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.14185106490048777;  // std dev = 0.000, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7194734122109542;  // std dev = 7.30e-08, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | else if ( genre(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(F, B) )
%   | | | then return 0.3688769765977055;  // std dev = 1.852, 14.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=8 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.12544463852839138;  // std dev = 0.000, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A) )
%   | | then return 0.44130006918954867;  // std dev = 1.979, 31.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=25 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.11231637819360635;  // std dev = 3.73e-09, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.44548694287987894;  // std dev = 3.65e-08, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | else if ( genre(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(F, B) )
%   | | | then return 0.20793790166597967;  // std dev = 1.852, 14.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=8 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.10159632948783635;  // std dev = 0.000, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( genre(B, E) )
%   | | then return 0.3397498068080908;  // std dev = 1.49e-08, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.1586056121741752;  // std dev = 1.852, 14.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=8 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.09269127618926093;  // std dev = 2.63e-09, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.2681244659459604;  // std dev = 3.33e-08, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | else if ( movie(E, B) )
%   | | then if ( genre(B, F) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.11970320872862171;  // std dev = 1.852, 14.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=8 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.08518475138839683;  // std dev = 1.29e-08, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( genre(B, E) )
%   | | then return 0.21886658255794272;  // std dev = 1.49e-08, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.08991981559717008;  // std dev = 1.852, 14.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=8 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.07877675473109179;  // std dev = 0.000, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.18374914925216235;  // std dev = 0.000, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | else if ( genre(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(F, B) )
%   | | | then return 0.0674483828831167;  // std dev = 1.852, 14.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=8 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.07324622576333704;  // std dev = 0.000, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A) )
%   | | then if ( genre(A, F) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.10937099156436403;  // std dev = 1.875, 31.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=25 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.06842697784420274;  // std dev = 0.000, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.14377663223560339;  // std dev = 1.29e-08, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | else if ( genre(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(F, A) )
%   | | | then return 0.023392071745961855;  // std dev = 1.852, 14.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=8 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.0641918400820262;  // std dev = 1.32e-09, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.261391
   Precision = 0.059638 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.112563


Total learning time: 0.767 seconds
Total inference time: 0.966 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 0.9616
   AUC PR    = 0.963007
   CLL	      = -0.261248
   Precision = 0.806452 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.892857


Total scoring time: 0.39 seconds
Parameter learned model CLL: -0.261248


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 17], 'true,false,false,true': [1.852, 6, 8], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 19, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [7.3e-08, 0, 17], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [1.852, 6, 8], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 19, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [1.979, 6, 25], 'true,false,false': [0.0, 0, 0], 'false,true': [3.73e-09, 19, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [3.65e-08, 0, 17], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [1.852, 6, 8], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 19, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [1.49e-08, 0, 17], 'true,false,false,true': [1.852, 6, 8], 'true,false,false,false': [0.0, 0, 0], 'false,true': [2.63e-09, 19, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, B)', 'true,false,true': 'genre(B, F)', 'false': 'movie(G, A)'}, {'true,true': [3.33e-08, 0, 17], 'true,false,true,true': [0.0, 0, 0], 'true,false,true,false': [1.852, 6, 8], 'true,false,false': [0.0, 0, 0], 'false,true': [1.29e-08, 19, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [1.49e-08, 0, 17], 'true,false,false,true': [1.852, 6, 8], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 19, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 0, 17], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [1.852, 6, 8], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 19, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'true,false,true': 'genre(A, F)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 0, 0], 'true,false,true,true': [0.0, 0, 0], 'true,false,true,false': [1.875, 6, 25], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 19, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [1.29e-08, 0, 17], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [1.852, 6, 8], 'true,false,false,false': [0.0, 0, 0], 'false,true': [1.32e-09, 19, 0], 'false,false': [0.0, 0, 0]}]]
[{'': [0.15608740894901246, 0.0], 'true': [nan, 0.15608740894901246], 'true,false': [-2.0898315757650005e-16, 0.24489795918367338], 'true,false,false': [0.24489795918367338, nan], 'false': [0.0, nan]}, {'': [0.14104075455142182, 0.0], 'true': [3.134747363647501e-16, 0.24489795918367352], 'true,false': [nan, 0.24489795918367352], 'true,false,false': [0.24489795918367352, nan], 'false': [0.0, nan]}, {'': [0.12639831516451389, 1.460819769243627e-17], 'true': [nan, 0.12639831516451389], 'true,false': [0.12639831516451389, nan], 'false': [1.460819769243627e-17, nan]}, {'': [0.12457434595977648, -5.843279076974508e-18], 'true': [7.836868409118753e-17, 0.24489795918367344], 'true,false': [nan, 0.24489795918367344], 'true,false,false': [0.24489795918367344, nan], 'false': [-5.843279076974508e-18, nan]}, {'': [0.11872555719782735, 7.304098846218135e-18], 'true': [nan, 0.11872555719782735], 'true,false': [1.3061447348531253e-17, 0.24489795918367344], 'true,false,false': [0.24489795918367344, nan], 'false': [7.304098846218135e-18, nan]}, {'': [0.11605471930185274, 8.764918615461762e-18], 'true': [6.530723674265627e-17, 0.24489795918367357], 'true,false': [0.24489795918367357, nan], 'true,false,true': [nan, 0.24489795918367357], 'false': [8.764918615461762e-18, nan]}, {'': [0.11471696590906101, -7.304098846218135e-19], 'true': [nan, 0.11471696590906101], 'true,false': [1.3061447348531253e-17, 0.24489795918367344], 'true,false,false': [0.24489795918367344, nan], 'false': [-7.304098846218135e-19, nan]}, {'': [0.11394887713956793, -7.304098846218135e-19], 'true': [0.0, 0.24489795918367344], 'true,false': [nan, 0.24489795918367344], 'true,false,false': [0.24489795918367344, nan], 'false': [-7.304098846218135e-19, nan]}, {'': [0.11344374096423387, -2.1912296538654404e-18], 'true': [nan, 0.11344374096423387], 'true,false': [0.11344374096423387, nan], 'true,false,true': [nan, 0.11344374096423387], 'false': [-2.1912296538654404e-18, nan]}, {'': [0.11418825762532141, 2.1912296538654404e-18], 'true': [9.79608551139844e-18, 0.24489795918367344], 'true,false': [nan, 0.24489795918367344], 'true,false,false': [0.24489795918367344, nan], 'false': [2.1912296538654404e-18, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;true;genre(B, D).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;true;genre(B, D).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;true;genre(B, E).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;true;genre(B, D).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(B, E).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;true;genre(B, D).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;true;genre(B, D).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.8581489350995123;  // std dev = 0.000, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | else if ( actor(B) )
%   | | then return -0.1418510649004878;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else return 0.8581489350995123;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   else return -0.14185106490048777;  // std dev = 0.000, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7194734122109542;  // std dev = 7.30e-08, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | else if ( actor(B) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else return 0.7194734122109543;  // std dev = 2.98e-08, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   else return -0.12544463852839138;  // std dev = 0.000, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.11231637819360639;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else return 0.5553664367462846;  // std dev = 0.000, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   else return -0.11231637819360635;  // std dev = 1.67e-08, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.4175135841583098;  // std dev = 5.16e-08, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | else if ( actor(B) )
%   | | then return -0.10159632948783627;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else return 0.41751358415830986;  // std dev = 2.98e-08, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   else return -0.10159632948783635;  // std dev = 0.000, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.32071184716014967;  // std dev = 1.49e-08, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | else if ( actor(B) )
%   | | then return -0.09269127618926097;  // std dev = 2.63e-09, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else return 0.3207118471601497;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   else return -0.09269127618926093;  // std dev = 1.18e-08, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.2551722425694894;  // std dev = 2.11e-08, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | else if ( actor(B) )
%   | | then return -0.08518475138839687;  // std dev = 2.63e-09, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else return 0.2551722425694894;  // std dev = 1.49e-08, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   else return -0.08518475138839683;  // std dev = 1.29e-08, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.20975771563253562;  // std dev = 0.000, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | else if ( actor(B) )
%   | | then return -0.07877675473109173;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else return 0.2097577156325356;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   else return -0.07877675473109179;  // std dev = 0.000, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.17709649774527741;  // std dev = 0.000, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | else if ( actor(B) )
%   | | then return -0.07324622576333704;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else return 0.17709649774527736;  // std dev = 7.45e-09, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   else return -0.07324622576333704;  // std dev = 0.000, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B) )
%   | then return 0.15274385809367086;  // std dev = 0.000, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | else return -0.06842697784420272;  // std dev = 1.86e-09, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   else return -0.06842697784420274;  // std dev = 0.000, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.13400703000801117;  // std dev = 0.000, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | else if ( actor(B) )
%   | | then return -0.0641918400820262;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else return 0.13400703000801117;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   else return -0.0641918400820262;  // std dev = 6.45e-09, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */


Results
   AUC ROC   = 0.999547
   AUC PR    = 0.949153
   CLL	      = -0.065262
   Precision = 0.949153 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.973913


Total learning time: 0.872 seconds
Total inference time: 0.938 seconds
AUC ROC: 0.999547


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.094637
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 0.363 seconds
Refined model CLL: -0.094637


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.999547
   AUC PR    = 0.949153
   CLL	      = -0.065262
   Precision = 0.949153 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.973913


Total learning time: 2.392 seconds
Total inference time: 0.938 seconds
AUC ROC: 0.999547
Total revision time: 2.392
Best scored revision CLL: -0.094637


Dataset: 4_cora_imdb, Fold: 1, Type: Transfer (trRDN-B), Time: 00:07:51
{'AUC ROC': 0.999547, 'AUC PR': 0.949153, 'CLL': -0.065262, 'Precision': [0.949153, 0.5], 'Recall': 1.0, 'F1': 0.973913, 'Learning time': 2.392, 'Inference time': 0.938, 'parameter_25': {'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.261391, 'Precision': [0.059638, 0.5], 'Recall': 1.0, 'F1': 0.112563, 'Learning time': 0.767, 'Inference time': 0.966}}


Starting fold 2

Target train facts examples: 870
Target train pos examples: 324
Target train neg examples: 10813

Target test facts examples: 208
Target test pos	 examples: 58
Target test neg examples: 3423

Amount of data: 5
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;title(I, H), venue(I, A).;false;false
0;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
0;false;haswordvenue(A, L), haswordtitle(M, L).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordtitle(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordauthor(I, H).;false;true
2;true,false,false;haswordvenue(A, J), haswordtitle(K, J).;false;false
2;false;haswordvenue(A, L), haswordtitle(M, L).;true;false
2;false,true;haswordauthor(N, L).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;title(E, D), venue(E, B).;false;true
3;true,true,false;title(F, D), venue(F, A).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, A).;false;true
4;true,true,false;title(F, D), venue(F, B).;false;false
4;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
4;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
4;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
4;false,true;haswordauthor(M, K).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, B).;false;true
5;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
5;true,false;haswordvenue(B, H), haswordtitle(I, H).;true;true
5;true,false,true;title(J, I), venue(J, B).;false;false
5;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
5;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;title(E, D), venue(E, A).;false;true
6;true,true,false;title(F, D), venue(F, B).;false;false
6;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
6;true,false,true;title(I, H), venue(I, B).;false;false
6;true,false,false;haswordvenue(A, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;title(F, D), venue(F, A).;false;false
7;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
7;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
7;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
7;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;title(E, D), venue(E, A).;false;true
8;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
8;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
8;true,false,true;title(J, I), venue(J, A).;false;false
8;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
8;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, B).;false;true
9;true,true,false;title(F, D), venue(F, A).;false;false
9;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
9;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
9;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
9;false,true;haswordauthor(M, K).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995121;  // std dev = 2.11e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.5248156017661788;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.14185106490048777;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7194734122109545;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( genre(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(F, B) )
%   | | | then return 0.448295606241962;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.12544463852839138;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A) )
%   | | then return 0.4588648915344537;  // std dev = 0.850, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.11231637819360639;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.44115219622841795;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( genre(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(F, B) )
%   | | | then return 0.25764806362317955;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.10159632948783628;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( genre(B, E) )
%   | | then return 0.3367883597005703;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.19423264559711786;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.09269127618926096;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.26611421873834507;  // std dev = 5.27e-09, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( movie(E, B) )
%   | | then if ( genre(B, F) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.14571474080359395;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.08518475138839687;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( genre(B, E) )
%   | | then return 0.21745797501044284;  // std dev = 5.27e-09, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.10952452309991094;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.07877675473109173;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.18272400790575127;  // std dev = 3.73e-09, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( genre(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(F, B) )
%   | | | then return 0.08269573518423116;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.07324622576333704;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A) )
%   | | then if ( genre(A, F) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.10987717807344309;  // std dev = 0.825, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.06842697784420272;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.1429990335454343;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( genre(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(F, A) )
%   | | | then return 0.03679437442411152;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.0641918400820262;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.296832
   Precision = 0.064516 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.121212


Total learning time: 0.621 seconds
Total inference time: 1.015 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 0.96
   AUC PR    = 0.961111
   CLL	      = -0.256941
   Precision = 0.833333 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.909091


Total scoring time: 0.355 seconds
Parameter learned model CLL: -0.256941


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [2.11e-08, 0, 3], 'true,false,false,true': [0.816, 1, 2], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 4, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 3], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.816, 1, 2], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 4, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.85, 1, 5], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 4, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 3], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.816, 1, 2], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 4, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 3], 'true,false,false,true': [0.816, 1, 2], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 4, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, B)', 'true,false,true': 'genre(B, F)', 'false': 'movie(G, A)'}, {'true,true': [5.27e-09, 0, 3], 'true,false,true,true': [0.0, 0, 0], 'true,false,true,false': [0.816, 1, 2], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 4, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [5.27e-09, 0, 3], 'true,false,false,true': [0.816, 1, 2], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 4, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, A)'}, {'true,true': [3.73e-09, 0, 3], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.816, 1, 2], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 4, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'true,false,true': 'genre(A, F)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 0, 0], 'true,false,true,true': [0.0, 0, 0], 'true,false,true,false': [0.825, 1, 5], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 4, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 3], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.816, 1, 2], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 4, 0], 'false,false': [0.0, 0, 0]}]]
[{'': [0.1388888888888887, 0.0], 'true': [nan, 0.1388888888888887], 'true,false': [1.4802973661668753e-16, 0.22222222222222224], 'true,false,false': [0.22222222222222224, nan], 'false': [0.0, nan]}, {'': [0.12949546172365034, 0.0], 'true': [0.0, 0.2222222222222222], 'true,false': [nan, 0.2222222222222222], 'true,false,false': [0.2222222222222222, nan], 'false': [0.0, nan]}, {'': [0.12042365933938219, 0.0], 'true': [nan, 0.12042365933938219], 'true,false': [0.12042365933938219, nan], 'false': [0.0, nan]}, {'': [0.1195295527819113, 0.0], 'true': [0.0, 0.22222222222222224], 'true,false': [nan, 0.22222222222222224], 'true,false,false': [0.22222222222222224, nan], 'false': [0.0, nan]}, {'': [0.1161916440169974, 0.0], 'true': [nan, 0.1161916440169974], 'true,false': [0.0, 0.22222222222222224], 'true,false,false': [0.22222222222222224, nan], 'false': [0.0, nan]}, {'': [0.11473511968285126, 0.0], 'true': [9.25185853854297e-18, 0.22222222222222224], 'true,false': [0.22222222222222224, nan], 'true,false,true': [nan, 0.22222222222222224], 'false': [0.0, nan]}, {'': [0.1140235186214419, 0.0], 'true': [nan, 0.1140235186214419], 'true,false': [9.25185853854297e-18, 0.22222222222222224], 'true,false,false': [0.22222222222222224, nan], 'false': [0.0, nan]}, {'': [0.11361252494702383, 0.0], 'true': [4.625929269271485e-18, 0.22222222222222224], 'true,false': [nan, 0.22222222222222224], 'true,false,false': [0.22222222222222224, nan], 'false': [0.0, nan]}, {'': [0.11333163598576834, 0.0], 'true': [nan, 0.11333163598576834], 'true,false': [0.11333163598576834, nan], 'true,false,true': [nan, 0.11333163598576834], 'false': [0.0, nan]}, {'': [0.1139309685158802, 0.0], 'true': [0.0, 0.2222222222222222], 'true,false': [nan, 0.2222222222222222], 'true,false,false': [0.2222222222222222, nan], 'false': [0.0, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;true;genre(B, D).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;true;genre(B, D).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;true;genre(B, E).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;true;genre(B, D).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(B, E).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;true;genre(B, D).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;true;genre(B, D).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.8581489350995121;  // std dev = 2.11e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return 0.5248156017661788;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   else return -0.14185106490048777;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7194734122109545;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return 0.448295606241962;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   else return -0.12544463852839138;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.4588648915344537;  // std dev = 0.850, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   else return -0.11231637819360639;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.44115219622841795;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return 0.25764806362317955;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   else return -0.10159632948783628;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.3367883597005703;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return 0.19423264559711786;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   else return -0.09269127618926096;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.26611421873834507;  // std dev = 5.27e-09, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return 0.14571474080359395;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   else return -0.08518475138839687;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.21745797501044284;  // std dev = 5.27e-09, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return 0.10952452309991094;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   else return -0.07877675473109173;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.18272400790575127;  // std dev = 3.73e-09, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return 0.08269573518423116;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   else return -0.07324622576333704;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.10987717807344309;  // std dev = 0.825, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   else return -0.06842697784420272;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.1429990335454343;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return 0.03679437442411152;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   else return -0.0641918400820262;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */


Results
   AUC ROC   = 0.999416
   AUC PR    = 0.935484
   CLL	      = -0.312473
   Precision = 0.060354 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.113837


Total learning time: 0.517 seconds
Total inference time: 0.928 seconds
AUC ROC: 0.999416


Results scoring model
   AUC ROC   = 0.96
   AUC PR    = 0.961111
   CLL	      = -0.256941
   Precision = 0.833333 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.909091


Total scoring time: 0.315 seconds
Refined model CLL: -0.256941


******************************************
Best model found
******************************************
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.296832
   Precision = 0.064516 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.121212


Total learning time: 1.8079999999999998 seconds
Total inference time: 1.015 seconds
AUC ROC: 1.0
Total revision time: 1.8079999999999998
Best scored revision CLL: -0.256941


Dataset: 4_cora_imdb, Fold: 2, Type: Transfer (trRDN-B), Time: 00:07:56
{'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.296832, 'Precision': [0.064516, 0.5], 'Recall': 1.0, 'F1': 0.121212, 'Learning time': 1.8079999999999998, 'Inference time': 1.015, 'parameter_5': {'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.296832, 'Precision': [0.064516, 0.5], 'Recall': 1.0, 'F1': 0.121212, 'Learning time': 0.621, 'Inference time': 1.015}}


Amount of data: 10
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;title(I, H), venue(I, A).;false;false
0;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
0;false;haswordvenue(A, L), haswordtitle(M, L).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordtitle(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordauthor(I, H).;false;true
2;true,false,false;haswordvenue(A, J), haswordtitle(K, J).;false;false
2;false;haswordvenue(A, L), haswordtitle(M, L).;true;false
2;false,true;haswordauthor(N, L).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;title(E, D), venue(E, B).;false;true
3;true,true,false;title(F, D), venue(F, A).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, A).;false;true
4;true,true,false;title(F, D), venue(F, B).;false;false
4;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
4;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
4;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
4;false,true;haswordauthor(M, K).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, B).;false;true
5;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
5;true,false;haswordvenue(B, H), haswordtitle(I, H).;true;true
5;true,false,true;title(J, I), venue(J, B).;false;false
5;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
5;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;title(E, D), venue(E, A).;false;true
6;true,true,false;title(F, D), venue(F, B).;false;false
6;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
6;true,false,true;title(I, H), venue(I, B).;false;false
6;true,false,false;haswordvenue(A, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;title(F, D), venue(F, A).;false;false
7;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
7;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
7;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
7;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;title(E, D), venue(E, A).;false;true
8;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
8;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
8;true,false,true;title(J, I), venue(J, A).;false;false
8;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
8;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, B).;false;true
9;true,true,false;title(F, D), venue(F, A).;false;false
9;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
9;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
9;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
9;false,true;haswordauthor(M, K).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995123;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.4581489350995122;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.1418510649004878;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7194734122109543;  // std dev = 2.11e-08, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else if ( genre(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(F, B) )
%   | | | then return 0.3927941835770488;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.12544463852839138;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A) )
%   | | then return 0.4576827004733086;  // std dev = 1.166, 12.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=10 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.11231637819360639;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.4414436702340988;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else if ( genre(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(F, B) )
%   | | | then return 0.22043010076231942;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.10159632948783627;  // std dev = 1.32e-09, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( genre(B, E) )
%   | | then return 0.33698734092212085;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.16732466055377906;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.09269127618926097;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.2662493348314436;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else if ( movie(E, B) )
%   | | then if ( genre(B, F) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.1258817014084466;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.08518475138839687;  // std dev = 3.73e-09, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( genre(B, E) )
%   | | then return 0.21755270989039133;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.09443465938232935;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.07877675473109173;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.18279299402619933;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else if ( genre(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(F, B) )
%   | | | then return 0.07085882798320102;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.07324622576333704;  // std dev = 9.31e-10, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A) )
%   | | then if ( genre(A, F) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.11380012961135921;  // std dev = 1.110, 12.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=10 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.06842697784420272;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.1425669694307674;  // std dev = 5.27e-09, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else if ( genre(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(F, A) )
%   | | | then return 0.025226055948217363;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.0641918400820262;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.26113
   Precision = 0.064516 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.121212


Total learning time: 0.641 seconds
Total inference time: 1.033 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 0.97
   AUC PR    = 0.971071
   CLL	      = -0.240519
   Precision = 0.833333 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.909091


Total scoring time: 0.355 seconds
Parameter learned model CLL: -0.240519


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 7], 'true,false,false,true': [1.095, 2, 3], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 8, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [2.11e-08, 0, 7], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [1.095, 2, 3], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 8, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [1.166, 2, 10], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 8, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 7], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [1.095, 2, 3], 'true,false,false,false': [0.0, 0, 0], 'false,true': [1.32e-09, 8, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 7], 'true,false,false,true': [1.095, 2, 3], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 8, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, B)', 'true,false,true': 'genre(B, F)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 0, 7], 'true,false,true,true': [0.0, 0, 0], 'true,false,true,false': [1.095, 2, 3], 'true,false,false': [0.0, 0, 0], 'false,true': [3.73e-09, 8, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 7], 'true,false,false,true': [1.095, 2, 3], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 8, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 0, 7], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [1.095, 2, 3], 'true,false,false,false': [0.0, 0, 0], 'false,true': [9.31e-10, 8, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'true,false,true': 'genre(A, F)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 0, 0], 'true,false,true,true': [0.0, 0, 0], 'true,false,true,false': [1.11, 2, 10], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 8, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [5.27e-09, 0, 7], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [1.095, 2, 3], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 8, 0], 'false,false': [0.0, 0, 0]}]]
[{'': [0.1388888888888887, -6.938893903907228e-18], 'true': [nan, 0.1388888888888887], 'true,false': [-2.5376526277146434e-16, 0.23999999999999994], 'true,false,false': [0.23999999999999994, nan], 'false': [-6.938893903907228e-18, nan]}, {'': [0.1259387232272886, 0.0], 'true': [6.344131569286608e-17, 0.24], 'true,false': [nan, 0.24], 'true,false,false': [0.24, nan], 'false': [0.0, nan]}, {'': [0.11335895726514755, -1.734723475976807e-18], 'true': [nan, 0.11335895726514755], 'true,false': [0.11335895726514755, nan], 'false': [-1.734723475976807e-18, nan]}, {'': [0.11187253420953464, 1.734723475976807e-18], 'true': [-9.516197353929913e-17, 0.24000000000000005], 'true,false': [nan, 0.24000000000000005], 'true,false,false': [0.24000000000000005, nan], 'false': [1.734723475976807e-18, nan]}, {'': [0.10699645749195803, 0.0], 'true': [nan, 0.10699645749195803], 'true,false': [-3.172065784643304e-17, 0.24000000000000005], 'true,false,false': [0.24000000000000005, nan], 'false': [0.0, nan]}, {'': [0.10478894123574341, 1.734723475976807e-18], 'true': [-3.172065784643304e-17, 0.24], 'true,false': [0.24, nan], 'true,false,true': [nan, 0.24], 'false': [1.734723475976807e-18, nan]}, {'': [0.10368424932383125, 0.0], 'true': [nan, 0.10368424932383125], 'true,false': [0.0, 0.24000000000000005], 'true,false,false': [0.24000000000000005, nan], 'false': [0.0, nan]}, {'': [0.10304530564910386, 8.673617379884035e-19], 'true': [-7.93016446160826e-18, 0.24], 'true,false': [nan, 0.24], 'true,false,false': [0.24, nan], 'false': [8.673617379884035e-19, nan]}, {'': [0.1026189693300093, 0.0], 'true': [nan, 0.1026189693300093], 'true,false': [0.1026189693300093, nan], 'true,false,true': [nan, 0.1026189693300093], 'false': [0.0, nan]}, {'': [0.10334660520272343, 0.0], 'true': [3.96508223080413e-18, 0.24], 'true,false': [nan, 0.24], 'true,false,false': [0.24, nan], 'false': [0.0, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;true;genre(B, D).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;true;genre(B, D).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;true;genre(B, E).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;true;genre(B, D).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(B, E).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;true;genre(B, D).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;true;genre(B, D).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.8581489350995123;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else return 0.4581489350995122;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   else return -0.1418510649004878;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7194734122109543;  // std dev = 2.11e-08, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else return 0.3927941835770488;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   else return -0.12544463852839138;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( female(A), director(B) )
%   | then return 0.6381459532187134;  // std dev = 0.203, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else return 0.27721944772790375;  // std dev = 0.964, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   else return -0.11231637819360639;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.4482516212011592;  // std dev = 0.116, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else return 0.21103034331834936;  // std dev = 1.003, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   else return -0.10159632948783627;  // std dev = 3.73e-09, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.3423937688921607;  // std dev = 0.105, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else return 0.16025189402390055;  // std dev = 0.999, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   else return -0.09269127618926097;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.27036145487719077;  // std dev = 0.092, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else return 0.12077834646496903;  // std dev = 0.997, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   else return -0.08518475138839687;  // std dev = 3.73e-09, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.2206962208103664;  // std dev = 0.080, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else return 0.09083103587471153;  // std dev = 0.997, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   else return -0.07877675473109173;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.18524324858135227;  // std dev = 0.070, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else return 0.06834126375439223;  // std dev = 0.997, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   else return -0.07324622576333704;  // std dev = 2.63e-09, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( female(A), director(B) )
%   | then return 0.27390432535475484;  // std dev = 0.347, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else return -0.045484106824186576;  // std dev = 0.778, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   else return -0.06842697784420272;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.15072689804007453;  // std dev = 0.108, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else return 0.017263899275699945;  // std dev = 0.914, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   else return -0.0641918400820262;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */


Results
   AUC ROC   = 0.999617
   AUC PR    = 0.971227
   CLL	      = -0.222497
   Precision = 0.935484 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.966667


Total learning time: 0.587 seconds
Total inference time: 0.923 seconds
AUC ROC: 0.999617


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.205922
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 0.32 seconds
Refined model CLL: -0.205922


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.999617
   AUC PR    = 0.971227
   CLL	      = -0.222497
   Precision = 0.935484 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.966667


Total learning time: 1.903 seconds
Total inference time: 0.923 seconds
AUC ROC: 0.999617
Total revision time: 1.903
Best scored revision CLL: -0.205922


Dataset: 4_cora_imdb, Fold: 2, Type: Transfer (trRDN-B), Time: 00:08:00
{'AUC ROC': 0.999617, 'AUC PR': 0.971227, 'CLL': -0.222497, 'Precision': [0.935484, 0.5], 'Recall': 1.0, 'F1': 0.966667, 'Learning time': 1.903, 'Inference time': 0.923, 'parameter_10': {'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.26113, 'Precision': [0.064516, 0.5], 'Recall': 1.0, 'F1': 0.121212, 'Learning time': 0.641, 'Inference time': 1.033}}


Amount of data: 15
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;title(I, H), venue(I, A).;false;false
0;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
0;false;haswordvenue(A, L), haswordtitle(M, L).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordtitle(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordauthor(I, H).;false;true
2;true,false,false;haswordvenue(A, J), haswordtitle(K, J).;false;false
2;false;haswordvenue(A, L), haswordtitle(M, L).;true;false
2;false,true;haswordauthor(N, L).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;title(E, D), venue(E, B).;false;true
3;true,true,false;title(F, D), venue(F, A).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, A).;false;true
4;true,true,false;title(F, D), venue(F, B).;false;false
4;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
4;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
4;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
4;false,true;haswordauthor(M, K).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, B).;false;true
5;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
5;true,false;haswordvenue(B, H), haswordtitle(I, H).;true;true
5;true,false,true;title(J, I), venue(J, B).;false;false
5;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
5;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;title(E, D), venue(E, A).;false;true
6;true,true,false;title(F, D), venue(F, B).;false;false
6;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
6;true,false,true;title(I, H), venue(I, B).;false;false
6;true,false,false;haswordvenue(A, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;title(F, D), venue(F, A).;false;false
7;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
7;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
7;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
7;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;title(E, D), venue(E, A).;false;true
8;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
8;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
8;true,false,true;title(J, I), venue(J, A).;false;false
8;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
8;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, B).;false;true
9;true,true,false;title(F, D), venue(F, A).;false;false
9;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
9;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
9;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
9;false,true;haswordauthor(M, K).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14185106490048777;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995123;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.4295775065280837;  // std dev = 1.309, 7.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=4 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.1418510649004878;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7194734122109542;  // std dev = 4.21e-08, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.36887697659770574;  // std dev = 1.309, 7.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=4 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.12544463852839138;  // std dev = 5.27e-09, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.11231637819360639;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( movie(E, A) )
%   | | then return 0.4571426202390953;  // std dev = 1.410, 18.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=15 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.11231637819360638;  // std dev = 1.32e-09, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.44157684265026964;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else if ( genre(A, E) )
%   | | then return -0.10159632948783628;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.20426461941251192;  // std dev = 1.309, 7.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=4 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.10159632948783628;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.09269127618926096;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( genre(B, E) )
%   | | then return 0.3370782610930801;  // std dev = 2.58e-08, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.1556526831634886;  // std dev = 1.309, 7.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=4 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.09269127618926097;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.2663110709356129;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else if ( movie(E, B) )
%   | | then if ( genre(B, F) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.0920940578851844;  // std dev = 1.323, 8.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=4 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.08518475138839687;  // std dev = 5.27e-09, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.09264106258274463;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( genre(B, E) )
%   | | then return 0.2175959925931172;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.09451003881346168;  // std dev = 1.309, 7.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=4 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.07877675473109172;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.18282451060049398;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else if ( genre(A, E) )
%   | | then return -0.08514213390823679;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.07089894596677085;  // std dev = 1.309, 7.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=4 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.07324622576333704;  // std dev = 1.32e-09, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.07874015863358219;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( movie(E, A) )
%   | | then if ( genre(A, F) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.11667252735339842;  // std dev = 1.327, 18.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=15 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.06842697784420272;  // std dev = 2.63e-09, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.14223809614483648;  // std dev = 7.45e-09, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else if ( genre(A, E) )
%   | | then return -0.07321447787166528;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.02414776511813813;  // std dev = 1.309, 7.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=4 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.06419184008202619;  // std dev = 1.61e-09, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.243742
   Precision = 0.064516 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.121212


Total learning time: 0.682 seconds
Total inference time: 1.042 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 0.973333
   AUC PR    = 0.974396
   CLL	      = -0.234
   Precision = 0.833333 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.909091


Total scoring time: 0.357 seconds
Parameter learned model CLL: -0.234


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 1, 0], 'true,false,true': [0.0, 0, 11], 'true,false,false,true': [1.309, 3, 4], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 11, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [4.21e-08, 0, 11], 'true,false,true': [0.0, 1, 0], 'true,false,false,true': [1.309, 3, 4], 'true,false,false,false': [0.0, 0, 0], 'false,true': [5.27e-09, 11, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.0, 1, 0], 'true,false,true': [1.41, 3, 15], 'true,false,false': [0.0, 0, 0], 'false,true': [1.32e-09, 11, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 11], 'true,false,true': [0.0, 1, 0], 'true,false,false,true': [1.309, 3, 4], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 11, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 1, 0], 'true,false,true': [2.58e-08, 0, 11], 'true,false,false,true': [1.309, 3, 4], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 11, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, B)', 'true,false,true': 'genre(B, F)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 0, 11], 'true,false,true,true': [0.0, 0, 0], 'true,false,true,false': [1.323, 4, 4], 'true,false,false': [0.0, 0, 0], 'false,true': [5.27e-09, 11, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 1, 0], 'true,false,true': [0.0, 0, 11], 'true,false,false,true': [1.309, 3, 4], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 11, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 0, 11], 'true,false,true': [0.0, 1, 0], 'true,false,false,true': [1.309, 3, 4], 'true,false,false,false': [0.0, 0, 0], 'false,true': [1.32e-09, 11, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'true,false,true': 'genre(A, F)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 1, 0], 'true,false,true,true': [0.0, 0, 0], 'true,false,true,false': [1.327, 3, 15], 'true,false,false': [0.0, 0, 0], 'false,true': [2.63e-09, 11, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [7.45e-09, 0, 11], 'true,false,true': [0.0, 1, 0], 'true,false,false,true': [1.309, 3, 4], 'true,false,false,false': [0.0, 0, 0], 'false,true': [1.61e-09, 11, 0], 'false,false': [0.0, 0, 0]}]]
[{'': [0.16620498614958412, -1.0092936587501423e-17], 'true': [0.0, 0.1388888888888886], 'true,false': [-1.6148698540002277e-16, 0.24489795918367332], 'true,false,false': [0.24489795918367332, nan], 'false': [-1.0092936587501423e-17, nan]}, {'': [0.14293443904153638, 2.523234146875356e-18], 'true': [1.6148698540002277e-16, 0.24101191763362237], 'true,false': [0.0, 0.24489795918367355], 'true,false,false': [0.24489795918367355, nan], 'false': [2.523234146875356e-18, nan]}, {'': [0.12075789292247156, 5.046468293750712e-18], 'true': [0.0, 0.11039910944118331], 'true,false': [0.11039910944118331, nan], 'false': [5.046468293750712e-18, nan]}, {'': [0.11304185342396136, 0.0], 'true': [-4.0371746350005693e-17, 0.22451784616751974], 'true,false': [0.0, 0.24489795918367344], 'true,false,false': [0.24489795918367344, nan], 'false': [0.0, nan]}, {'': [0.10407020924813815, 0.0], 'true': [0.0, 0.10306054432817438], 'true,false': [6.055761952500853e-17, 0.24489795918367346], 'true,false,false': [0.24489795918367346, nan], 'false': [0.0, nan]}, {'': [0.09951467655281403, 2.523234146875356e-18], 'true': [0.0, 0.21877539660249412], 'true,false': [0.21877539660249412, nan], 'true,false,true': [nan, 0.21877539660249412], 'false': [2.523234146875356e-18, nan]}, {'': [0.09706893727015406, 0.0], 'true': [0.0, 0.09883859432875652], 'true,false': [-3.027880976250427e-17, 0.2448979591836735], 'true,false,false': [0.2448979591836735, nan], 'false': [0.0, nan]}, {'': [0.0955577346686452, 6.30808536718839e-19], 'true': [-1.0092936587501423e-17, 0.2169488663210254], 'true,false': [0.0, 0.2448979591836735], 'true,false,false': [0.2448979591836735, nan], 'false': [6.30808536718839e-19, nan]}, {'': [0.09455975735178922, 6.30808536718839e-19], 'true': [0.0, 0.09780328152863237], 'true,false': [0.09780328152863237, nan], 'true,false,true': [nan, 0.09780328152863237], 'false': [6.30808536718839e-19, nan]}, {'': [0.09479831708536272, 2.523234146875356e-18], 'true': [5.046468293750712e-18, 0.21532252435633992], 'true,false': [0.0, 0.24489795918367352], 'true,false,false': [0.24489795918367352, nan], 'false': [2.523234146875356e-18, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(A, D).;true;true
0;true,false;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;true;genre(B, D).;true;true
1;true,false;genre(A, E).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;true;genre(A, D).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;true;genre(B, D).;true;true
3;true,false;genre(A, E).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;true;genre(A, D).;true;true
4;true,false;genre(B, E).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;true;genre(B, D).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(A, D).;true;true
6;true,false;genre(B, E).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;true;genre(B, D).;true;true
7;true,false;genre(A, E).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;true;genre(A, D).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;true;genre(B, D).;true;true
9;true,false;genre(A, E).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14185106490048777;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995123;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | else if ( actor(B) )
%   | | | then return -0.14185106490048777;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.8581489350995122;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else return -0.1418510649004878;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7194734122109542;  // std dev = 4.21e-08, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( actor(B) )
%   | | | then return -0.12544463852839138;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.7194734122109545;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else return -0.12544463852839138;  // std dev = 5.27e-09, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.11231637819360639;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( director(B) )
%   | | then return 0.5553664367462846;  // std dev = 0.000, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else return -0.11231637819360639;  // std dev = 2.63e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else return -0.11231637819360638;  // std dev = 7.45e-09, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.4175135841583098;  // std dev = 4.21e-08, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else if ( genre(A, E) )
%   | | then return -0.10159632948783628;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( actor(B) )
%   | | | then return -0.1015963294878363;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.41751358415830997;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else return -0.10159632948783628;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.09269127618926096;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( genre(B, E) )
%   | | then return 0.3207118471601497;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | else if ( actor(B) )
%   | | | then return -0.09269127618926094;  // std dev = 2.63e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.32071184716014967;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else return -0.09269127618926097;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.2551722425694894;  // std dev = 2.11e-08, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else if ( actor(B) )
%   | | then return -0.08518475138839687;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return 0.25517224256948945;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else return -0.08518475138839687;  // std dev = 5.27e-09, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.07877675473109173;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( genre(B, E) )
%   | | then return 0.20975771563253562;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | else if ( actor(B) )
%   | | | then return -0.07877675473109173;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.20975771563253554;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else return -0.07877675473109172;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.17709649774527736;  // std dev = 7.45e-09, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else if ( genre(A, E) )
%   | | then return -0.07324622576333704;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( actor(B) )
%   | | | then return -0.07324622576333704;  // std dev = 1.86e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.17709649774527736;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else return -0.07324622576333704;  // std dev = 2.63e-09, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.06842697784420272;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( actor(B) )
%   | | then return -0.06842697784420272;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else return 0.15274385809367091;  // std dev = 1.67e-08, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   else return -0.06842697784420272;  // std dev = 2.63e-09, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.13400703000801117;  // std dev = 5.27e-09, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else if ( genre(A, E) )
%   | | then return -0.0641918400820262;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( actor(B) )
%   | | | then return -0.0641918400820262;  // std dev = 1.32e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.13400703000801117;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else return -0.06419184008202619;  // std dev = 5.27e-09, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063857
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 0.767 seconds
Total inference time: 0.938 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.094637
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 0.366 seconds
Refined model CLL: -0.094637


******************************************
Best model found
******************************************
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063857
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 2.172 seconds
Total inference time: 0.938 seconds
AUC ROC: 1.0
Total revision time: 2.172
Best scored revision CLL: -0.094637


Dataset: 4_cora_imdb, Fold: 2, Type: Transfer (trRDN-B), Time: 00:08:05
{'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.063857, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 2.172, 'Inference time': 0.938, 'parameter_15': {'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.243742, 'Precision': [0.064516, 0.5], 'Recall': 1.0, 'F1': 0.121212, 'Learning time': 0.682, 'Inference time': 1.042}}


Amount of data: 20
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;title(I, H), venue(I, A).;false;false
0;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
0;false;haswordvenue(A, L), haswordtitle(M, L).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordtitle(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordauthor(I, H).;false;true
2;true,false,false;haswordvenue(A, J), haswordtitle(K, J).;false;false
2;false;haswordvenue(A, L), haswordtitle(M, L).;true;false
2;false,true;haswordauthor(N, L).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;title(E, D), venue(E, B).;false;true
3;true,true,false;title(F, D), venue(F, A).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, A).;false;true
4;true,true,false;title(F, D), venue(F, B).;false;false
4;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
4;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
4;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
4;false,true;haswordauthor(M, K).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, B).;false;true
5;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
5;true,false;haswordvenue(B, H), haswordtitle(I, H).;true;true
5;true,false,true;title(J, I), venue(J, B).;false;false
5;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
5;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;title(E, D), venue(E, A).;false;true
6;true,true,false;title(F, D), venue(F, B).;false;false
6;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
6;true,false,true;title(I, H), venue(I, B).;false;false
6;true,false,false;haswordvenue(A, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;title(F, D), venue(F, A).;false;false
7;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
7;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
7;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
7;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;title(E, D), venue(E, A).;false;true
8;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
8;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
8;true,false,true;title(J, I), venue(J, A).;false;false
8;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
8;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, B).;false;true
9;true,true,false;title(F, D), venue(F, A).;false;false
9;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
9;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
9;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
9;false,true;haswordauthor(M, K).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14185106490048777;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995123;  // std dev = 0.000, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.4831489350995123;  // std dev = 1.369, 8.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=5 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.1418510649004878;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7194734122109542;  // std dev = 5.16e-08, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.4136573287083126;  // std dev = 1.369, 8.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=5 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.12544463852839138;  // std dev = 7.45e-09, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.11231637819360639;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( movie(E, A) )
%   | | then return 0.479275632300574;  // std dev = 1.458, 23.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=20 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.11231637819360635;  // std dev = 3.48e-09, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.436126405829298;  // std dev = 4.71e-08, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else if ( genre(A, E) )
%   | | then return -0.10159632948783628;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.22942043652438734;  // std dev = 1.369, 8.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=5 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.10159632948783631;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.09269127618926096;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( genre(B, E) )
%   | | then return 0.3333606216961357;  // std dev = 3.65e-08, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.17347170869036455;  // std dev = 1.369, 8.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=5 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.09269127618926094;  // std dev = 2.28e-09, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.2637855459211856;  // std dev = 2.11e-08, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else if ( movie(E, B) )
%   | | then if ( genre(B, F) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.1063184018669803;  // std dev = 1.384, 9.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=5 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.08518475138839685;  // std dev = 1.05e-08, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.09384369063780017;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( genre(B, E) )
%   | | then return 0.21582394434703983;  // std dev = 0.000, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.10368980658748177;  // std dev = 1.369, 8.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=5 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.07877675473109173;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.181533167237302;  // std dev = 0.000, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else if ( genre(A, E) )
%   | | then return -0.08616192847271968;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.0778945489915488;  // std dev = 1.369, 8.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=5 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.07324622576333704;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.07961519337053033;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( movie(E, A) )
%   | | then if ( genre(A, F) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.12221351162512584;  // std dev = 1.387, 23.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=20 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.06842697784420272;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.14066940983248127;  // std dev = 1.29e-08, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else if ( genre(A, E) )
%   | | then return -0.07397307755788575;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.028936309123427845;  // std dev = 1.369, 8.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=5 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.06419184008202619;  // std dev = 1.86e-09, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.272252
   Precision = 0.064516 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.121212


Total learning time: 0.68 seconds
Total inference time: 1.034 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 0.98125
   AUC PR    = 0.981482
   CLL	      = -0.209107
   Precision = 0.869565 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.930233


Total scoring time: 0.381 seconds
Parameter learned model CLL: -0.209107


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 1, 0], 'true,false,true': [0.0, 0, 15], 'true,false,false,true': [1.369, 3, 5], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 16, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [5.16e-08, 0, 15], 'true,false,true': [0.0, 1, 0], 'true,false,false,true': [1.369, 3, 5], 'true,false,false,false': [0.0, 0, 0], 'false,true': [7.45e-09, 16, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.0, 1, 0], 'true,false,true': [1.458, 3, 20], 'true,false,false': [0.0, 0, 0], 'false,true': [3.48e-09, 16, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [4.71e-08, 0, 15], 'true,false,true': [0.0, 1, 0], 'true,false,false,true': [1.369, 3, 5], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 16, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 1, 0], 'true,false,true': [3.65e-08, 0, 15], 'true,false,false,true': [1.369, 3, 5], 'true,false,false,false': [0.0, 0, 0], 'false,true': [2.28e-09, 16, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, B)', 'true,false,true': 'genre(B, F)', 'false': 'movie(G, A)'}, {'true,true': [2.11e-08, 0, 15], 'true,false,true,true': [0.0, 0, 0], 'true,false,true,false': [1.384, 4, 5], 'true,false,false': [0.0, 0, 0], 'false,true': [1.05e-08, 16, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 1, 0], 'true,false,true': [0.0, 0, 15], 'true,false,false,true': [1.369, 3, 5], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 16, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 0, 15], 'true,false,true': [0.0, 1, 0], 'true,false,false,true': [1.369, 3, 5], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 16, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'true,false,true': 'genre(A, F)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 1, 0], 'true,false,true,true': [0.0, 0, 0], 'true,false,true,false': [1.387, 3, 20], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 16, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [1.29e-08, 0, 15], 'true,false,true': [0.0, 1, 0], 'true,false,false,true': [1.369, 3, 5], 'true,false,false,false': [0.0, 0, 0], 'false,true': [1.86e-09, 16, 0], 'false,false': [0.0, 0, 0]}]]
[{'': [0.13888888888888906, -6.938893903907228e-18], 'true': [0.0, 0.11342155009451807], 'true,false': [-2.3684757858670006e-16, 0.23437499999999983], 'true,false,false': [0.23437499999999983, nan], 'false': [-6.938893903907228e-18, nan]}, {'': [0.12023639299839028, 3.469446951953614e-18], 'true': [1.7763568394002506e-16, 0.2370376228225662], 'true,false': [0.0, 0.2343749999999998], 'true,false,false': [0.2343749999999998, nan], 'false': [3.469446951953614e-18, nan]}, {'': [0.10250350581196126, 1.214306433183765e-17], 'true': [0.0, 0.09237763385767596], 'true,false': [0.09237763385767596, nan], 'false': [1.214306433183765e-17, nan]}, {'': [0.09607820455860694, -6.938893903907228e-18], 'true': [1.4802973661668753e-16, 0.21915526907468552], 'true,false': [0.0, 0.23437499999999994], 'true,false,false': [0.23437499999999994, nan], 'false': [-6.938893903907228e-18, nan]}, {'': [0.08916194602742467, 5.204170427930421e-18], 'true': [0.0, 0.08732086151277905], 'true,false': [8.881784197001253e-17, 0.23437500000000003], 'true,false,false': [0.23437500000000003, nan], 'false': [5.204170427930421e-18, nan]}, {'': [0.08565560773389176, 6.938893903907228e-18], 'true': [2.960594732333751e-17, 0.21291751554667743], 'true,false': [0.21291751554667743, nan], 'true,false,true': [nan, 0.21291751554667743], 'false': [6.938893903907228e-18, nan]}, {'': [0.08378377483453903, -1.734723475976807e-18], 'true': [0.0, 0.08437407898323161], 'true,false': [-2.960594732333751e-17, 0.23437500000000006], 'true,false,false': [0.23437500000000006, nan], 'false': [-1.734723475976807e-18, nan]}, {'': [0.08260267668301823, 0.0], 'true': [-1.4802973661668754e-17, 0.21099155830103547], 'true,false': [0.0, 0.23437500000000003], 'true,false,false': [0.23437500000000003, nan], 'false': [0.0, nan]}, {'': [0.08181505778815494, 0.0], 'true': [0.0, 0.08367494979038426], 'true,false': [0.08367494979038426, nan], 'true,false,true': [nan, 0.08367494979038426], 'false': [0.0, nan]}, {'': [0.08207275692902949, 3.469446951953614e-18], 'true': [1.1102230246251566e-17, 0.2093792930239135], 'true,false': [0.0, 0.23437500000000003], 'true,false,false': [0.23437500000000003, nan], 'false': [3.469446951953614e-18, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(A, D).;true;true
0;true,false;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;true;genre(B, D).;true;true
1;true,false;genre(A, E).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;true;genre(A, D).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;true;genre(B, D).;true;true
3;true,false;genre(A, E).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;true;genre(A, D).;true;true
4;true,false;genre(B, E).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;true;genre(B, D).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(A, D).;true;true
6;true,false;genre(B, E).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;true;genre(B, D).;true;true
7;true,false;genre(A, E).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;true;genre(A, D).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;true;genre(B, D).;true;true
9;true,false;genre(A, E).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14185106490048777;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995123;  // std dev = 0.000, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else if ( actor(B) )
%   | | | then return -0.14185106490048777;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.8581489350995122;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return -0.1418510649004878;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7194734122109542;  // std dev = 5.16e-08, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( actor(B) )
%   | | | then return -0.12544463852839138;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.7194734122109545;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return -0.12544463852839138;  // std dev = 7.45e-09, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.11231637819360639;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( actor(B) )
%   | | then return -0.11231637819360639;  // std dev = 2.63e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else return 0.5553664367462846;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   else return -0.11231637819360635;  // std dev = 1.39e-08, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.4175135841583098;  // std dev = 4.71e-08, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else if ( genre(A, E) )
%   | | then return -0.10159632948783628;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( actor(B) )
%   | | | then return -0.1015963294878363;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.4175135841583099;  // std dev = 1.49e-08, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return -0.10159632948783631;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.09269127618926096;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( genre(B, E) )
%   | | then return 0.32071184716014967;  // std dev = 0.000, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else if ( actor(B) )
%   | | | then return -0.09269127618926094;  // std dev = 2.63e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.32071184716014967;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return -0.09269127618926094;  // std dev = 9.13e-09, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.2551722425694894;  // std dev = 2.36e-08, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else if ( actor(B) )
%   | | then return -0.08518475138839687;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return 0.25517224256948945;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return -0.08518475138839685;  // std dev = 1.05e-08, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.07877675473109173;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( genre(B, E) )
%   | | then return 0.20975771563253562;  // std dev = 0.000, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else if ( actor(B) )
%   | | | then return -0.07877675473109173;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.20975771563253556;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return -0.07877675473109173;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.17709649774527741;  // std dev = 0.000, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else if ( genre(A, E) )
%   | | then return -0.07324622576333704;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( actor(B) )
%   | | | then return -0.07324622576333704;  // std dev = 1.86e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.17709649774527736;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return -0.07324622576333704;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.06842697784420272;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( director(B) )
%   | | then return 0.15274385809367086;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return -0.06842697784420272;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else return -0.06842697784420272;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.13400703000801117;  // std dev = 0.000, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else if ( genre(A, E) )
%   | | then return -0.0641918400820262;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( actor(B) )
%   | | | then return -0.0641918400820262;  // std dev = 1.32e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.13400703000801117;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return -0.06419184008202619;  // std dev = 7.45e-09, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063857
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 0.822 seconds
Total inference time: 1.031 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.094637
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 0.37 seconds
Refined model CLL: -0.094637


******************************************
Best model found
******************************************
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063857
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 2.253 seconds
Total inference time: 1.031 seconds
AUC ROC: 1.0
Total revision time: 2.253
Best scored revision CLL: -0.094637


Dataset: 4_cora_imdb, Fold: 2, Type: Transfer (trRDN-B), Time: 00:08:10
{'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.063857, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 2.253, 'Inference time': 1.031, 'parameter_20': {'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.272252, 'Precision': [0.064516, 0.5], 'Recall': 1.0, 'F1': 0.121212, 'Learning time': 0.68, 'Inference time': 1.034}}


Amount of data: 25
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;title(I, H), venue(I, A).;false;false
0;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
0;false;haswordvenue(A, L), haswordtitle(M, L).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordtitle(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordauthor(I, H).;false;true
2;true,false,false;haswordvenue(A, J), haswordtitle(K, J).;false;false
2;false;haswordvenue(A, L), haswordtitle(M, L).;true;false
2;false,true;haswordauthor(N, L).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;title(E, D), venue(E, B).;false;true
3;true,true,false;title(F, D), venue(F, A).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, A).;false;true
4;true,true,false;title(F, D), venue(F, B).;false;false
4;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
4;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
4;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
4;false,true;haswordauthor(M, K).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, B).;false;true
5;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
5;true,false;haswordvenue(B, H), haswordtitle(I, H).;true;true
5;true,false,true;title(J, I), venue(J, B).;false;false
5;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
5;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;title(E, D), venue(E, A).;false;true
6;true,true,false;title(F, D), venue(F, B).;false;false
6;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
6;true,false,true;title(I, H), venue(I, B).;false;false
6;true,false,false;haswordvenue(A, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;title(F, D), venue(F, A).;false;false
7;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
7;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
7;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
7;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;title(E, D), venue(E, A).;false;true
8;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
8;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
8;true,false,true;title(J, I), venue(J, A).;false;false
8;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
8;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, B).;false;true
9;true,true,false;title(F, D), venue(F, A).;false;false
9;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
9;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
9;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
9;false,true;haswordauthor(M, K).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14185106490048777;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995122;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.41370449065506787;  // std dev = 1.491, 9.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=5 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.14185106490048777;  // std dev = 7.45e-09, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7194734122109543;  // std dev = 7.30e-08, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.35555573927149886;  // std dev = 1.491, 9.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=5 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.12544463852839138;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.11231637819360639;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( movie(E, A) )
%   | | then return 0.4738228396521684;  // std dev = 1.628, 29.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=25 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.11231637819360636;  // std dev = 3.48e-09, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.4374678213686912;  // std dev = 4.71e-08, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | else if ( genre(A, E) )
%   | | then return -0.10159632948783628;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.19129443335946186;  // std dev = 1.491, 9.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=5 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.10159632948783634;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.09269127618926096;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( genre(B, E) )
%   | | then return 0.33427492356436433;  // std dev = 4.21e-08, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.14595635298282283;  // std dev = 1.491, 9.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=5 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.09269127618926093;  // std dev = 2.95e-09, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.26440689537733686;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | else if ( movie(E, B) )
%   | | then if ( genre(B, F) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.09070861915952602;  // std dev = 1.502, 10.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.08518475138839683;  // std dev = 1.39e-08, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.09252467011706245;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( genre(B, E) )
%   | | then return 0.21626018947552333;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.08775033243587124;  // std dev = 1.491, 9.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=5 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.07877675473109179;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.1818512654853941;  // std dev = 1.83e-08, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | else if ( genre(A, E) )
%   | | then return -0.08504333617784375;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.06585589619141943;  // std dev = 1.491, 9.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=5 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.07324622576333704;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.07865531047234937;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( movie(E, A) )
%   | | then if ( genre(A, F) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.12315069099313693;  // std dev = 1.514, 29.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=25 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.06842697784420274;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.140776327609192;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | else if ( genre(A, E) )
%   | | then return -0.07314086309491663;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.01867282334723054;  // std dev = 1.491, 9.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=5 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.0641918400820262;  // std dev = 1.32e-09, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.237452
   Precision = 0.064516 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.121212


Total learning time: 0.72 seconds
Total inference time: 1.003 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 0.984
   AUC PR    = 0.984576
   CLL	      = -0.203305
   Precision = 0.862069 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.925926


Total scoring time: 0.373 seconds
Parameter learned model CLL: -0.203305


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 1, 0], 'true,false,true': [0.0, 0, 20], 'true,false,false,true': [1.491, 4, 5], 'true,false,false,false': [0.0, 0, 0], 'false,true': [7.45e-09, 20, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [7.3e-08, 0, 20], 'true,false,true': [0.0, 1, 0], 'true,false,false,true': [1.491, 4, 5], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 20, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.0, 1, 0], 'true,false,true': [1.628, 4, 25], 'true,false,false': [0.0, 0, 0], 'false,true': [3.48e-09, 20, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [4.71e-08, 0, 20], 'true,false,true': [0.0, 1, 0], 'true,false,false,true': [1.491, 4, 5], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 20, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 1, 0], 'true,false,true': [4.21e-08, 0, 20], 'true,false,false,true': [1.491, 4, 5], 'true,false,false,false': [0.0, 0, 0], 'false,true': [2.95e-09, 20, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, B)', 'true,false,true': 'genre(B, F)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 0, 20], 'true,false,true,true': [0.0, 0, 0], 'true,false,true,false': [1.502, 5, 5], 'true,false,false': [0.0, 0, 0], 'false,true': [1.39e-08, 20, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 1, 0], 'true,false,true': [0.0, 0, 20], 'true,false,false,true': [1.491, 4, 5], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 20, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, A)'}, {'true,true': [1.83e-08, 0, 20], 'true,false,true': [0.0, 1, 0], 'true,false,false,true': [1.491, 4, 5], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 20, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'true,false,true': 'genre(A, F)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 1, 0], 'true,false,true,true': [0.0, 0, 0], 'true,false,true,false': [1.514, 4, 25], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 20, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 20], 'true,false,true': [0.0, 1, 0], 'true,false,false,true': [1.491, 4, 5], 'true,false,false,false': [0.0, 0, 0], 'false,true': [1.32e-09, 20, 0], 'false,false': [0.0, 0, 0]}]]
[{'': [0.13888888888888987, 2.7755575615628915e-18], 'true': [0.0, 0.11890606420927562], 'true,false': [-8.881784197001253e-17, 0.2469135802469134], 'true,false,false': [0.2469135802469134, nan], 'false': [2.7755575615628915e-18, nan]}, {'': [0.11873904696549224, 0.0], 'true': [2.6645352591003756e-16, 0.24304474493214961], 'true,false': [0.0, 0.2469135802469136], 'true,false,false': [0.2469135802469136, nan], 'false': [0.0, nan]}, {'': [0.0994281209672231, 1.1102230246251566e-17], 'true': [0.0, 0.09140470410608272], 'true,false': [0.09140470410608272, nan], 'false': [1.1102230246251566e-17, nan]}, {'': [0.09350975053955692, -1.3877787807814458e-18], 'true': [1.1102230246251565e-16, 0.22994287212873674], 'true,false': [0.0, 0.2469135802469136], 'true,false,false': [0.2469135802469136, nan], 'false': [-1.3877787807814458e-18, nan]}, {'': [0.0857874919157226, 6.938893903907228e-18], 'true': [0.0, 0.08421872005838521], 'true,false': [8.881784197001253e-17, 0.2469135802469136], 'true,false,false': [0.2469135802469136, nan], 'false': [6.938893903907228e-18, nan]}, {'': [0.08192463054699782, 9.714451465470119e-18], 'true': [0.0, 0.22565983086696764], 'true,false': [0.22565983086696764, nan], 'true,false,true': [nan, 0.22565983086696764], 'false': [9.714451465470119e-18, nan]}, {'': [0.0798208679444349, 0.0], 'true': [0.0, 0.0801630266927322], 'true,false': [-3.8857805861880476e-17, 0.2469135802469136], 'true,false,false': [0.2469135802469136, nan], 'false': [0.0, nan]}, {'': [0.07857571451683242, -1.3877787807814458e-18], 'true': [1.6653345369377347e-17, 0.22427157427188912], 'true,false': [0.0, 0.24691358024691354], 'true,false,false': [0.24691358024691354, nan], 'false': [-1.3877787807814458e-18, nan]}, {'': [0.07775278671989598, -2.7755575615628915e-18], 'true': [0.0, 0.07907639522219452], 'true,false': [0.07907639522219452, nan], 'true,false,true': [nan, 0.07907639522219452], 'false': [-2.7755575615628915e-18, nan]}, {'': [0.07815712618772608, 2.0816681711721684e-18], 'true': [0.0, 0.2229808999938509], 'true,false': [0.0, 0.24691358024691354], 'true,false,false': [0.24691358024691354, nan], 'false': [2.0816681711721684e-18, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(A, D).;true;true
0;true,false;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;true;genre(B, D).;true;true
1;true,false;genre(A, E).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;true;genre(A, D).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;true;genre(B, D).;true;true
3;true,false;genre(A, E).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;true;genre(A, D).;true;true
4;true,false;genre(B, E).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;true;genre(B, D).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(A, D).;true;true
6;true,false;genre(B, E).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;true;genre(B, D).;true;true
7;true,false;genre(A, E).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;true;genre(A, D).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;true;genre(B, D).;true;true
9;true,false;genre(A, E).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14185106490048777;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995122;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else if ( actor(B) )
%   | | | then return -0.14185106490048777;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | | else return 0.8581489350995122;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return -0.14185106490048777;  // std dev = 7.45e-09, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7194734122109543;  // std dev = 7.30e-08, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( actor(B) )
%   | | | then return -0.12544463852839138;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | | else return 0.7194734122109545;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return -0.12544463852839138;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.11231637819360639;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( actor(B) )
%   | | then return -0.11231637819360639;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return 0.5553664367462846;  // std dev = 0.000, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   else return -0.11231637819360636;  // std dev = 1.49e-08, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.41751358415830986;  // std dev = 5.16e-08, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | else if ( genre(A, E) )
%   | | then return -0.10159632948783628;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( actor(B) )
%   | | | then return -0.10159632948783628;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | | else return 0.4175135841583099;  // std dev = 1.49e-08, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return -0.10159632948783634;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.09269127618926096;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( genre(B, E) )
%   | | then return 0.3207118471601496;  // std dev = 2.11e-08, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else if ( actor(B) )
%   | | | then return -0.09269127618926096;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | | else return 0.32071184716014967;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return -0.09269127618926093;  // std dev = 1.18e-08, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.25517224256948945;  // std dev = 1.49e-08, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | else if ( actor(B) )
%   | | then return -0.08518475138839687;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.25517224256948945;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return -0.08518475138839683;  // std dev = 1.39e-08, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.07877675473109173;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( genre(B, E) )
%   | | then return 0.2097577156325356;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else if ( actor(B) )
%   | | | then return -0.07877675473109173;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | | else return 0.20975771563253556;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return -0.07877675473109179;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.17709649774527744;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | else if ( genre(A, E) )
%   | | then return -0.07324622576333704;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( actor(B) )
%   | | | then return -0.07324622576333704;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | | else return 0.17709649774527736;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return -0.07324622576333704;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.06842697784420272;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( actor(B) )
%   | | then return -0.06842697784420272;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return 0.15274385809367086;  // std dev = 0.000, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   else return -0.06842697784420274;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.13400703000801117;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | else if ( genre(A, E) )
%   | | then return -0.0641918400820262;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( actor(B) )
%   | | | then return -0.0641918400820262;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | | else return 0.13400703000801117;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return -0.0641918400820262;  // std dev = 6.45e-09, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063857
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 0.852 seconds
Total inference time: 0.917 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.094637
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 0.377 seconds
Refined model CLL: -0.094637


******************************************
Best model found
******************************************
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063857
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 2.322 seconds
Total inference time: 0.917 seconds
AUC ROC: 1.0
Total revision time: 2.322
Best scored revision CLL: -0.094637


Dataset: 4_cora_imdb, Fold: 2, Type: Transfer (trRDN-B), Time: 00:08:14
{'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.063857, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 2.322, 'Inference time': 0.917, 'parameter_25': {'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.237452, 'Precision': [0.064516, 0.5], 'Recall': 1.0, 'F1': 0.121212, 'Learning time': 0.72, 'Inference time': 1.003}}


Starting fold 3

Target train facts examples: 737
Target train pos examples: 204
Target train neg examples: 10693

Target test facts examples: 341
Target test pos	 examples: 178
Target test neg examples: 3543

Amount of data: 5
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;title(I, H), venue(I, A).;false;false
0;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
0;false;haswordvenue(A, L), haswordtitle(M, L).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordtitle(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordauthor(I, H).;false;true
2;true,false,false;haswordvenue(A, J), haswordtitle(K, J).;false;false
2;false;haswordvenue(A, L), haswordtitle(M, L).;true;false
2;false,true;haswordauthor(N, L).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;title(E, D), venue(E, B).;false;true
3;true,true,false;title(F, D), venue(F, A).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, A).;false;true
4;true,true,false;title(F, D), venue(F, B).;false;false
4;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
4;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
4;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
4;false,true;haswordauthor(M, K).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, B).;false;true
5;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
5;true,false;haswordvenue(B, H), haswordtitle(I, H).;true;true
5;true,false,true;title(J, I), venue(J, B).;false;false
5;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
5;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;title(E, D), venue(E, A).;false;true
6;true,true,false;title(F, D), venue(F, B).;false;false
6;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
6;true,false,true;title(I, H), venue(I, B).;false;false
6;true,false,false;haswordvenue(A, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;title(F, D), venue(F, A).;false;false
7;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
7;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
7;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
7;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;title(E, D), venue(E, A).;false;true
8;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
8;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
8;true,false,true;title(J, I), venue(J, A).;false;false
8;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
8;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, B).;false;true
9;true,true,false;title(F, D), venue(F, A).;false;false
9;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
9;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
9;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
9;false,true;haswordauthor(M, K).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995121;  // std dev = 2.11e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.5248156017661788;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.14185106490048777;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7194734122109545;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( genre(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(F, B) )
%   | | | then return 0.448295606241962;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.12544463852839138;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A) )
%   | | then return 0.4588648915344537;  // std dev = 0.850, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.11231637819360639;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.44115219622841795;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( genre(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(F, B) )
%   | | | then return 0.25764806362317955;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.10159632948783628;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( genre(B, E) )
%   | | then return 0.3367883597005703;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.19423264559711786;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.09269127618926096;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.26611421873834507;  // std dev = 5.27e-09, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( movie(E, B) )
%   | | then if ( genre(B, F) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.14571474080359395;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.08518475138839687;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( genre(B, E) )
%   | | then return 0.21745797501044284;  // std dev = 5.27e-09, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.10952452309991094;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.07877675473109173;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.18272400790575127;  // std dev = 3.73e-09, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( genre(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(F, B) )
%   | | | then return 0.08269573518423116;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.07324622576333704;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A) )
%   | | then if ( genre(A, F) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.10987717807344309;  // std dev = 0.825, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.06842697784420272;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.1429990335454343;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( genre(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(F, A) )
%   | | | then return 0.03679437442411152;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.0641918400820262;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 0.976419
   AUC PR    = 0.83578
   CLL	      = -0.238934
   Precision = 0.226752 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.369678


Total learning time: 0.618 seconds
Total inference time: 1.043 seconds
AUC ROC: 0.976419


Results scoring model
   AUC ROC   = 0.96
   AUC PR    = 0.961111
   CLL	      = -0.256941
   Precision = 0.833333 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.909091


Total scoring time: 0.316 seconds
Parameter learned model CLL: -0.256941


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [2.11e-08, 0, 3], 'true,false,false,true': [0.816, 1, 2], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 4, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 3], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.816, 1, 2], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 4, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.85, 1, 5], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 4, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 3], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.816, 1, 2], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 4, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 3], 'true,false,false,true': [0.816, 1, 2], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 4, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, B)', 'true,false,true': 'genre(B, F)', 'false': 'movie(G, A)'}, {'true,true': [5.27e-09, 0, 3], 'true,false,true,true': [0.0, 0, 0], 'true,false,true,false': [0.816, 1, 2], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 4, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [5.27e-09, 0, 3], 'true,false,false,true': [0.816, 1, 2], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 4, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, A)'}, {'true,true': [3.73e-09, 0, 3], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.816, 1, 2], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 4, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'true,false,true': 'genre(A, F)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 0, 0], 'true,false,true,true': [0.0, 0, 0], 'true,false,true,false': [0.825, 1, 5], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 4, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 3], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.816, 1, 2], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 4, 0], 'false,false': [0.0, 0, 0]}]]
[{'': [0.1388888888888887, 0.0], 'true': [nan, 0.1388888888888887], 'true,false': [1.4802973661668753e-16, 0.22222222222222224], 'true,false,false': [0.22222222222222224, nan], 'false': [0.0, nan]}, {'': [0.12949546172365034, 0.0], 'true': [0.0, 0.2222222222222222], 'true,false': [nan, 0.2222222222222222], 'true,false,false': [0.2222222222222222, nan], 'false': [0.0, nan]}, {'': [0.12042365933938219, 0.0], 'true': [nan, 0.12042365933938219], 'true,false': [0.12042365933938219, nan], 'false': [0.0, nan]}, {'': [0.1195295527819113, 0.0], 'true': [0.0, 0.22222222222222224], 'true,false': [nan, 0.22222222222222224], 'true,false,false': [0.22222222222222224, nan], 'false': [0.0, nan]}, {'': [0.1161916440169974, 0.0], 'true': [nan, 0.1161916440169974], 'true,false': [0.0, 0.22222222222222224], 'true,false,false': [0.22222222222222224, nan], 'false': [0.0, nan]}, {'': [0.11473511968285126, 0.0], 'true': [9.25185853854297e-18, 0.22222222222222224], 'true,false': [0.22222222222222224, nan], 'true,false,true': [nan, 0.22222222222222224], 'false': [0.0, nan]}, {'': [0.1140235186214419, 0.0], 'true': [nan, 0.1140235186214419], 'true,false': [9.25185853854297e-18, 0.22222222222222224], 'true,false,false': [0.22222222222222224, nan], 'false': [0.0, nan]}, {'': [0.11361252494702383, 0.0], 'true': [4.625929269271485e-18, 0.22222222222222224], 'true,false': [nan, 0.22222222222222224], 'true,false,false': [0.22222222222222224, nan], 'false': [0.0, nan]}, {'': [0.11333163598576834, 0.0], 'true': [nan, 0.11333163598576834], 'true,false': [0.11333163598576834, nan], 'true,false,true': [nan, 0.11333163598576834], 'false': [0.0, nan]}, {'': [0.1139309685158802, 0.0], 'true': [0.0, 0.2222222222222222], 'true,false': [nan, 0.2222222222222222], 'true,false,false': [0.2222222222222222, nan], 'false': [0.0, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;true;genre(B, D).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;true;genre(B, D).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;true;genre(B, E).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;true;genre(B, D).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(B, E).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;true;genre(B, D).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;true;genre(B, D).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.8581489350995121;  // std dev = 2.11e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return 0.5248156017661788;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   else return -0.14185106490048777;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7194734122109545;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return 0.448295606241962;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   else return -0.12544463852839138;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.4588648915344537;  // std dev = 0.850, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   else return -0.11231637819360639;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.44115219622841795;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return 0.25764806362317955;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   else return -0.10159632948783628;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.3367883597005703;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return 0.19423264559711786;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   else return -0.09269127618926096;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.26611421873834507;  // std dev = 5.27e-09, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return 0.14571474080359395;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   else return -0.08518475138839687;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.21745797501044284;  // std dev = 5.27e-09, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return 0.10952452309991094;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   else return -0.07877675473109173;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.18272400790575127;  // std dev = 3.73e-09, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return 0.08269573518423116;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   else return -0.07324622576333704;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.10987717807344309;  // std dev = 0.825, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   else return -0.06842697784420272;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.1429990335454343;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return 0.03679437442411152;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   else return -0.0641918400820262;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */


Results
   AUC ROC   = 0.961149
   AUC PR    = 0.587865
   CLL	      = -0.289564
   Precision = 0.183316 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.309835


Total learning time: 0.549 seconds
Total inference time: 0.872 seconds
AUC ROC: 0.961149


Results scoring model
   AUC ROC   = 0.96
   AUC PR    = 0.961111
   CLL	      = -0.256941
   Precision = 0.833333 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.909091


Total scoring time: 0.305 seconds
Refined model CLL: -0.256941


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.976419
   AUC PR    = 0.83578
   CLL	      = -0.238934
   Precision = 0.226752 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.369678


Total learning time: 1.788 seconds
Total inference time: 1.043 seconds
AUC ROC: 0.976419
Total revision time: 1.788
Best scored revision CLL: -0.256941


Dataset: 4_cora_imdb, Fold: 3, Type: Transfer (trRDN-B), Time: 00:08:19
{'AUC ROC': 0.976419, 'AUC PR': 0.83578, 'CLL': -0.238934, 'Precision': [0.226752, 0.5], 'Recall': 1.0, 'F1': 0.369678, 'Learning time': 1.788, 'Inference time': 1.043, 'parameter_5': {'AUC ROC': 0.976419, 'AUC PR': 0.83578, 'CLL': -0.238934, 'Precision': [0.226752, 0.5], 'Recall': 1.0, 'F1': 0.369678, 'Learning time': 0.618, 'Inference time': 1.043}}


Amount of data: 10
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;title(I, H), venue(I, A).;false;false
0;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
0;false;haswordvenue(A, L), haswordtitle(M, L).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordtitle(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordauthor(I, H).;false;true
2;true,false,false;haswordvenue(A, J), haswordtitle(K, J).;false;false
2;false;haswordvenue(A, L), haswordtitle(M, L).;true;false
2;false,true;haswordauthor(N, L).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;title(E, D), venue(E, B).;false;true
3;true,true,false;title(F, D), venue(F, A).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, A).;false;true
4;true,true,false;title(F, D), venue(F, B).;false;false
4;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
4;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
4;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
4;false,true;haswordauthor(M, K).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, B).;false;true
5;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
5;true,false;haswordvenue(B, H), haswordtitle(I, H).;true;true
5;true,false,true;title(J, I), venue(J, B).;false;false
5;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
5;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;title(E, D), venue(E, A).;false;true
6;true,true,false;title(F, D), venue(F, B).;false;false
6;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
6;true,false,true;title(I, H), venue(I, B).;false;false
6;true,false,false;haswordvenue(A, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;title(F, D), venue(F, A).;false;false
7;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
7;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
7;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
7;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;title(E, D), venue(E, A).;false;true
8;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
8;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
8;true,false,true;title(J, I), venue(J, A).;false;false
8;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
8;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, B).;false;true
9;true,true,false;title(F, D), venue(F, A).;false;false
9;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
9;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
9;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
9;false,true;haswordauthor(M, K).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995123;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.5248156017661788;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.1418510649004878;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7194734122109543;  // std dev = 2.98e-08, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( genre(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(F, B) )
%   | | | then return 0.448295606241962;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.12544463852839138;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A) )
%   | | then return 0.5027292302671041;  // std dev = 0.865, 11.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=10 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.11231637819360639;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.43036758424200905;  // std dev = 2.58e-08, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( genre(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(F, B) )
%   | | | then return 0.2470043000521082;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.10159632948783627;  // std dev = 1.32e-09, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( genre(B, E) )
%   | | then return 0.3294399511962147;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.1859459190232067;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.09269127618926097;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.2611192941188012;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( movie(E, B) )
%   | | then if ( genre(B, F) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.13949579523816905;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.08518475138839687;  // std dev = 3.73e-09, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( genre(B, E) )
%   | | then return 0.21394994175079235;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.1049119730383085;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.07877675473109173;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.1801652442961057;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( genre(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(F, B) )
%   | | | then return 0.07927369334280236;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.07324622576333704;  // std dev = 1.32e-09, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A) )
%   | | then if ( genre(A, F) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.12919557019309688;  // std dev = 0.828, 11.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=10 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.06842697784420272;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.13888412039647413;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( genre(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(F, A) )
%   | | | then return 0.029828343170511456;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.0641918400820262;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 0.976419
   AUC PR    = 0.83578
   CLL	      = -0.240903
   Precision = 0.226752 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.369678


Total learning time: 0.638 seconds
Total inference time: 1.07 seconds
AUC ROC: 0.976419


Results scoring model
   AUC ROC   = 0.99
   AUC PR    = 0.990191
   CLL	      = -0.176248
   Precision = 0.909091 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.952381


Total scoring time: 0.339 seconds
Parameter learned model CLL: -0.176248


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 8], 'true,false,false,true': [0.816, 1, 2], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 9, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [2.98e-08, 0, 8], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.816, 1, 2], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 9, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.865, 1, 10], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 9, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [2.58e-08, 0, 8], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.816, 1, 2], 'true,false,false,false': [0.0, 0, 0], 'false,true': [1.32e-09, 9, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 8], 'true,false,false,true': [0.816, 1, 2], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 9, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, B)', 'true,false,true': 'genre(B, F)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 0, 8], 'true,false,true,true': [0.0, 0, 0], 'true,false,true,false': [0.816, 1, 2], 'true,false,false': [0.0, 0, 0], 'false,true': [3.73e-09, 9, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 8], 'true,false,false,true': [0.816, 1, 2], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 9, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 0, 8], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.816, 1, 2], 'true,false,false,false': [0.0, 0, 0], 'false,true': [1.32e-09, 9, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'true,false,true': 'genre(A, F)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 0, 0], 'true,false,true,true': [0.0, 0, 0], 'true,false,true,false': [0.828, 1, 10], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 9, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 8], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.816, 1, 2], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 9, 0], 'false,false': [0.0, 0, 0]}]]
[{'': [0.0826446280991734, -9.25185853854297e-18], 'true': [nan, 0.0826446280991734], 'true,false': [-2.220446049250313e-16, 0.22222222222222224], 'true,false,false': [0.22222222222222224, nan], 'false': [-9.25185853854297e-18, nan]}, {'': [0.07519199167055447, 0.0], 'true': [1.1102230246251565e-16, 0.2222222222222222], 'true,false': [nan, 0.2222222222222222], 'true,false,false': [0.2222222222222222, nan], 'false': [0.0, nan]}, {'': [0.06799452862187878, -1.5419764230904951e-18], 'true': [nan, 0.06799452862187878], 'true,false': [0.06799452862187878, nan], 'false': [-1.5419764230904951e-18, nan]}, {'': [0.06727490569476934, 3.0839528461809902e-18], 'true': [8.326672684688674e-17, 0.22222222222222224], 'true,false': [nan, 0.22222222222222224], 'true,false,false': [0.22222222222222224, nan], 'false': [3.0839528461809902e-18, nan]}, {'': [0.06469013411401454, 0.0], 'true': [nan, 0.06469013411401454], 'true,false': [0.0, 0.2222222222222222], 'true,false,false': [0.2222222222222222, nan], 'false': [0.0, nan]}, {'': [0.0635400656599384, 1.5419764230904951e-18], 'true': [0.0, 0.22222222222222224], 'true,false': [0.22222222222222224, nan], 'true,false,true': [nan, 0.22222222222222224], 'false': [1.5419764230904951e-18, nan]}, {'': [0.06296426463004962, 0.0], 'true': [nan, 0.06296426463004962], 'true,false': [-2.7755575615628914e-17, 0.22222222222222224], 'true,false,false': [0.22222222222222224, nan], 'false': [0.0, nan]}, {'': [0.06262505664978217, 7.709882115452476e-19], 'true': [0.0, 0.2222222222222222], 'true,false': [nan, 0.2222222222222222], 'true,false,false': [0.2222222222222222, nan], 'false': [7.709882115452476e-19, nan]}, {'': [0.06239105973329397, 0.0], 'true': [nan, 0.06239105973329397], 'true,false': [0.06239105973329397, nan], 'true,false,true': [nan, 0.06239105973329397], 'false': [0.0, nan]}, {'': [0.06296503499542103, 7.709882115452476e-19], 'true': [0.0, 0.2222222222222222], 'true,false': [nan, 0.2222222222222222], 'true,false,false': [0.2222222222222222, nan], 'false': [7.709882115452476e-19, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;true;genre(B, D).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;true;genre(B, D).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;true;genre(B, E).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;true;genre(B, D).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(B, E).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;true;genre(B, D).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;true;genre(B, D).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.8581489350995123;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else return 0.5248156017661788;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   else return -0.1418510649004878;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7194734122109543;  // std dev = 2.98e-08, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else return 0.448295606241962;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   else return -0.12544463852839138;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( female(A) )
%   | then return 0.26880985104950844;  // std dev = 0.702, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else return 0.5904489974737025;  // std dev = 0.061, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   else return -0.11231637819360639;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.42885385992555525;  // std dev = 0.034, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else return 0.2512267139309439;  // std dev = 0.753, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   else return -0.10159632948783627;  // std dev = 5.27e-09, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.3288541909924769;  // std dev = 0.031, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else return 0.18957447169951983;  // std dev = 0.751, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   else return -0.09269127618926097;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.2609907736367168;  // std dev = 0.028, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else return 0.14248644154494355;  // std dev = 0.751, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   else return -0.08518475138839687;  // std dev = 3.73e-09, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.2140254439647646;  // std dev = 0.024, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else return 0.10733073510720752;  // std dev = 0.752, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   else return -0.07877675473109173;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.18032629617596102;  // std dev = 0.022, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else return 0.08121634492163832;  // std dev = 0.752, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   else return -0.07324622576333704;  // std dev = 2.63e-09, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.12976031142212088;  // std dev = 0.231, 11.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=10 */
%   else return -0.06842697784420272;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.13903393317077511;  // std dev = 0.018, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else return 0.03137355414968568;  // std dev = 0.755, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   else return -0.0641918400820262;  // std dev = 2.63e-09, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */


Results
   AUC ROC   = 0.944035
   AUC PR    = 0.501068
   CLL	      = -0.295127
   Precision = 0.183316 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.309835


Total learning time: 0.681 seconds
Total inference time: 0.97 seconds
AUC ROC: 0.944035


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.166071
   Precision = 0.909091 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.952381


Total scoring time: 0.343 seconds
Refined model CLL: -0.166071


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.944035
   AUC PR    = 0.501068
   CLL	      = -0.295127
   Precision = 0.183316 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.309835


Total learning time: 2.0010000000000003 seconds
Total inference time: 0.97 seconds
AUC ROC: 0.944035
Total revision time: 2.0010000000000003
Best scored revision CLL: -0.166071


Dataset: 4_cora_imdb, Fold: 3, Type: Transfer (trRDN-B), Time: 00:08:23
{'AUC ROC': 0.944035, 'AUC PR': 0.501068, 'CLL': -0.295127, 'Precision': [0.183316, 0.5], 'Recall': 1.0, 'F1': 0.309835, 'Learning time': 2.0010000000000003, 'Inference time': 0.97, 'parameter_10': {'AUC ROC': 0.976419, 'AUC PR': 0.83578, 'CLL': -0.240903, 'Precision': [0.226752, 0.5], 'Recall': 1.0, 'F1': 0.369678, 'Learning time': 0.638, 'Inference time': 1.07}}


Amount of data: 15
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;title(I, H), venue(I, A).;false;false
0;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
0;false;haswordvenue(A, L), haswordtitle(M, L).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordtitle(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordauthor(I, H).;false;true
2;true,false,false;haswordvenue(A, J), haswordtitle(K, J).;false;false
2;false;haswordvenue(A, L), haswordtitle(M, L).;true;false
2;false,true;haswordauthor(N, L).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;title(E, D), venue(E, B).;false;true
3;true,true,false;title(F, D), venue(F, A).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, A).;false;true
4;true,true,false;title(F, D), venue(F, B).;false;false
4;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
4;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
4;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
4;false,true;haswordauthor(M, K).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, B).;false;true
5;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
5;true,false;haswordvenue(B, H), haswordtitle(I, H).;true;true
5;true,false,true;title(J, I), venue(J, B).;false;false
5;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
5;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;title(E, D), venue(E, A).;false;true
6;true,true,false;title(F, D), venue(F, B).;false;false
6;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
6;true,false,true;title(I, H), venue(I, B).;false;false
6;true,false,false;haswordvenue(A, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;title(F, D), venue(F, A).;false;false
7;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
7;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
7;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
7;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;title(E, D), venue(E, A).;false;true
8;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
8;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
8;true,false,true;title(J, I), venue(J, A).;false;false
8;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
8;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, B).;false;true
9;true,true,false;title(F, D), venue(F, A).;false;false
9;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
9;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
9;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
9;false,true;haswordauthor(M, K).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995123;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.3581489350995122;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.1418510649004878;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7194734122109542;  // std dev = 4.21e-08, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else if ( genre(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(F, B) )
%   | | | then return 0.308741135785635;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.12544463852839138;  // std dev = 7.45e-09, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A) )
%   | | then return 0.4850243031021205;  // std dev = 1.128, 17.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=15 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.11231637819360636;  // std dev = 2.95e-09, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.43471321456227047;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else if ( genre(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(F, B) )
%   | | | then return 0.156578933294651;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.1015963294878363;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( genre(B, E) )
%   | | then return 0.3323978394480437;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.1204613063574287;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.09269127618926096;  // std dev = 1.32e-09, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.2631310809144827;  // std dev = 1.49e-08, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else if ( movie(E, B) )
%   | | then if ( genre(B, F) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.09171155646090635;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.08518475138839686;  // std dev = 7.45e-09, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( genre(B, E) )
%   | | then return 0.21536425529913664;  // std dev = 1.83e-08, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.0693828959030587;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.07877675473109172;  // std dev = 3.73e-09, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.18119783675761925;  // std dev = 7.45e-09, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else if ( genre(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(F, B) )
%   | | | then return 0.05229577729270728;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.07324622576333704;  // std dev = 9.31e-10, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A) )
%   | | then if ( genre(A, F) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.12843260674795665;  // std dev = 1.021, 17.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=15 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.06842697784420272;  // std dev = 2.63e-09, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.13968803194146684;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else if ( genre(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(F, A) )
%   | | | then return 0.007305117641450018;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.06419184008202619;  // std dev = 1.86e-09, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 0.976419
   AUC PR    = 0.83578
   CLL	      = -0.187147
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.724719
   F1        = 0.840391


Total learning time: 0.729 seconds
Total inference time: 1.048 seconds
AUC ROC: 0.976419


Results scoring model
   AUC ROC   = 0.991111
   AUC PR    = 0.991634
   CLL	      = -0.176679
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.866667
   F1        = 0.928571


Total scoring time: 0.366 seconds
Parameter learned model CLL: -0.176679


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 13], 'true,false,false,true': [1.0, 2, 2], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 13, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [4.21e-08, 0, 13], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [1.0, 2, 2], 'true,false,false,false': [0.0, 0, 0], 'false,true': [7.45e-09, 13, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [1.128, 2, 15], 'true,false,false': [0.0, 0, 0], 'false,true': [2.95e-09, 13, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 13], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [1.0, 2, 2], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 13, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 13], 'true,false,false,true': [1.0, 2, 2], 'true,false,false,false': [0.0, 0, 0], 'false,true': [1.32e-09, 13, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, B)', 'true,false,true': 'genre(B, F)', 'false': 'movie(G, A)'}, {'true,true': [1.49e-08, 0, 13], 'true,false,true,true': [0.0, 0, 0], 'true,false,true,false': [1.0, 2, 2], 'true,false,false': [0.0, 0, 0], 'false,true': [7.45e-09, 13, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [1.83e-08, 0, 13], 'true,false,false,true': [1.0, 2, 2], 'true,false,false,false': [0.0, 0, 0], 'false,true': [3.73e-09, 13, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, A)'}, {'true,true': [7.45e-09, 0, 13], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [1.0, 2, 2], 'true,false,false,false': [0.0, 0, 0], 'false,true': [9.31e-10, 13, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'true,false,true': 'genre(A, F)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 0, 0], 'true,false,true,true': [0.0, 0, 0], 'true,false,true,false': [1.021, 2, 15], 'true,false,false': [0.0, 0, 0], 'false,true': [2.63e-09, 13, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 13], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [1.0, 2, 2], 'true,false,false,false': [0.0, 0, 0], 'false,true': [1.86e-09, 13, 0], 'false,false': [0.0, 0, 0]}]]
[{'': [0.10380622837370206, -1.2810265668751807e-17], 'true': [nan, 0.10380622837370206], 'true,false': [-2.7328566760003855e-16, 0.25], 'true,false,false': [0.25, nan], 'false': [-1.2810265668751807e-17, nan]}, {'': [0.08917803512343028, 4.270088556250602e-18], 'true': [1.3664283380001927e-16, 0.25], 'true,false': [nan, 0.25], 'true,false,false': [0.25, nan], 'false': [4.270088556250602e-18, nan]}, {'': [0.0749045806500081, 8.540177112501205e-18], 'true': [nan, 0.0749045806500081], 'true,false': [0.0749045806500081, nan], 'false': [8.540177112501205e-18, nan]}, {'': [0.07274273798493175, -2.135044278125301e-18], 'true': [-1.3664283380001927e-16, 0.25], 'true,false': [nan, 0.25], 'true,false,false': [0.25, nan], 'false': [-2.135044278125301e-18, nan]}, {'': [0.06690549789287327, 2.135044278125301e-18], 'true': [nan, 0.06690549789287327], 'true,false': [-5.124106267500723e-17, 0.24999999999999997], 'true,false,false': [0.24999999999999997, nan], 'false': [2.135044278125301e-18, nan]}, {'': [0.06411073347723976, 4.270088556250602e-18], 'true': [1.708035422500241e-17, 0.24999999999999994], 'true,false': [0.24999999999999994, nan], 'true,false,true': [nan, 0.24999999999999994], 'false': [4.270088556250602e-18, nan]}, {'': [0.06265795494511629, 1.0675221390626506e-18], 'true': [nan, 0.06265795494511629], 'true,false': [2.5620531337503614e-17, 0.24999999999999994], 'true,false,false': [0.24999999999999994, nan], 'false': [1.0675221390626506e-18, nan]}, {'': [0.06181321290167257, 0.0], 'true': [4.270088556250602e-18, 0.25000000000000006], 'true,false': [nan, 0.25000000000000006], 'true,false,false': [0.25000000000000006, nan], 'false': [0.0, nan]}, {'': [0.061266253969371395, 5.337610695313253e-19], 'true': [nan, 0.061266253969371395], 'true,false': [0.061266253969371395, nan], 'true,false,true': [nan, 0.061266253969371395], 'false': [5.337610695313253e-19, nan]}, {'': [0.06197685907240629, 3.736327486719277e-18], 'true': [0.0, 0.25], 'true,false': [nan, 0.25], 'true,false,false': [0.25, nan], 'false': [3.736327486719277e-18, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;true;genre(B, D).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;true;genre(B, D).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;true;genre(B, E).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;true;genre(B, D).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(B, E).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;true;genre(B, D).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;true;genre(B, D).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.8581489350995123;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else return 0.3581489350995122;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   else return -0.1418510649004878;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7194734122109542;  // std dev = 4.21e-08, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else return 0.308741135785635;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   else return -0.12544463852839138;  // std dev = 7.45e-09, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( female(A) )
%   | then return 0.28904841408371845;  // std dev = 0.923, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | else return 0.5919202425667032;  // std dev = 0.078, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   else return -0.11231637819360636;  // std dev = 1.05e-08, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.4316321459193118;  // std dev = 0.124, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else return 0.16570452680130898;  // std dev = 0.933, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   else return -0.1015963294878363;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.3307482220817046;  // std dev = 0.113, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else return 0.1280778070563725;  // std dev = 0.929, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   else return -0.09269127618926096;  // std dev = 5.27e-09, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.2622800437733442;  // std dev = 0.100, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else return 0.09786931012062688;  // std dev = 0.927, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   else return -0.08518475138839686;  // std dev = 7.45e-09, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.21493148797457076;  // std dev = 0.088, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else return 0.0742635252905751;  // std dev = 0.926, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   else return -0.07877675473109172;  // std dev = 3.73e-09, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.18098699611259786;  // std dev = 0.077, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else return 0.056117847408140575;  // std dev = 0.925, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   else return -0.07324622576333704;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( female(A) )
%   | then return -0.017170557169108387;  // std dev = 0.698, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | else return 0.2088271371458009;  // std dev = 0.140, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   else return -0.06842697784420272;  // std dev = 2.63e-09, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.140118657882156;  // std dev = 0.113, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else return 0.01835998904508304;  // std dev = 0.869, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   else return -0.06419184008202619;  // std dev = 6.97e-09, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */


Results
   AUC ROC   = 0.944035
   AUC PR    = 0.501068
   CLL	      = -0.238022
   Precision = 0.19883 at threshold = 0.5
   Recall    = 0.764045
   F1        = 0.315545


Total learning time: 0.641 seconds
Total inference time: 0.914 seconds
AUC ROC: 0.944035


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.160713
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 0.333 seconds
Refined model CLL: -0.160713


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.944035
   AUC PR    = 0.501068
   CLL	      = -0.238022
   Precision = 0.19883 at threshold = 0.5
   Recall    = 0.764045
   F1        = 0.315545


Total learning time: 2.069 seconds
Total inference time: 0.914 seconds
AUC ROC: 0.944035
Total revision time: 2.069
Best scored revision CLL: -0.160713


Dataset: 4_cora_imdb, Fold: 3, Type: Transfer (trRDN-B), Time: 00:08:28
{'AUC ROC': 0.944035, 'AUC PR': 0.501068, 'CLL': -0.238022, 'Precision': [0.19883, 0.5], 'Recall': 0.764045, 'F1': 0.315545, 'Learning time': 2.069, 'Inference time': 0.914, 'parameter_15': {'AUC ROC': 0.976419, 'AUC PR': 0.83578, 'CLL': -0.187147, 'Precision': [1.0, 0.5], 'Recall': 0.724719, 'F1': 0.840391, 'Learning time': 0.729, 'Inference time': 1.048}}


Amount of data: 20
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;title(I, H), venue(I, A).;false;false
0;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
0;false;haswordvenue(A, L), haswordtitle(M, L).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordtitle(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordauthor(I, H).;false;true
2;true,false,false;haswordvenue(A, J), haswordtitle(K, J).;false;false
2;false;haswordvenue(A, L), haswordtitle(M, L).;true;false
2;false,true;haswordauthor(N, L).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;title(E, D), venue(E, B).;false;true
3;true,true,false;title(F, D), venue(F, A).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, A).;false;true
4;true,true,false;title(F, D), venue(F, B).;false;false
4;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
4;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
4;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
4;false,true;haswordauthor(M, K).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, B).;false;true
5;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
5;true,false;haswordvenue(B, H), haswordtitle(I, H).;true;true
5;true,false,true;title(J, I), venue(J, B).;false;false
5;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
5;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;title(E, D), venue(E, A).;false;true
6;true,true,false;title(F, D), venue(F, B).;false;false
6;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
6;true,false,true;title(I, H), venue(I, B).;false;false
6;true,false,false;haswordvenue(A, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;title(F, D), venue(F, A).;false;false
7;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
7;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
7;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
7;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;title(E, D), venue(E, A).;false;true
8;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
8;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
8;true,false,true;title(J, I), venue(J, A).;false;false
8;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
8;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, B).;false;true
9;true,true,false;title(F, D), venue(F, A).;false;false
9;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
9;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
9;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
9;false,true;haswordauthor(M, K).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995123;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.3581489350995122;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.14185106490048777;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7194734122109542;  // std dev = 7.30e-08, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | else if ( genre(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(F, B) )
%   | | | then return 0.308741135785635;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.12544463852839138;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A) )
%   | | then return 0.5010111516576123;  // std dev = 1.137, 22.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=20 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.11231637819360635;  // std dev = 3.73e-09, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.43078882378339767;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | else if ( genre(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(F, B) )
%   | | | then return 0.1529652011782946;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.10159632948783635;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( genre(B, E) )
%   | | then return 0.32972649830862644;  // std dev = 4.21e-08, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.11754326056254583;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.09269127618926093;  // std dev = 2.63e-09, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.26131426285303394;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | else if ( movie(E, B) )
%   | | then if ( genre(B, F) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.08942535006230103;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.08518475138839683;  // std dev = 1.18e-08, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( genre(B, E) )
%   | | then return 0.2140870910092807;  // std dev = 1.05e-08, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.06762432347909586;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.07877675473109179;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.18026543620387056;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | else if ( genre(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(F, B) )
%   | | | then return 0.050957625318328356;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.07324622576333704;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A) )
%   | | then if ( genre(A, F) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.13390302054047565;  // std dev = 1.022, 22.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=20 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.06842697784420274;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.13839099137138783;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | else if ( genre(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(F, A) )
%   | | | then return 0.004919840291304892;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.0641918400820262;  // std dev = 1.32e-09, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 0.976419
   AUC PR    = 0.83578
   CLL	      = -0.187566
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.724719
   F1        = 0.840391


Total learning time: 0.684 seconds
Total inference time: 1.055 seconds
AUC ROC: 0.976419


Results scoring model
   AUC ROC   = 0.995
   AUC PR    = 0.995227
   CLL	      = -0.156281
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.9
   F1        = 0.947368


Total scoring time: 0.373 seconds
Parameter learned model CLL: -0.156281


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 18], 'true,false,false,true': [1.0, 2, 2], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 18, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [7.3e-08, 0, 18], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [1.0, 2, 2], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 18, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [1.137, 2, 20], 'true,false,false': [0.0, 0, 0], 'false,true': [3.73e-09, 18, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 18], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [1.0, 2, 2], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 18, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [4.21e-08, 0, 18], 'true,false,false,true': [1.0, 2, 2], 'true,false,false,false': [0.0, 0, 0], 'false,true': [2.63e-09, 18, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, B)', 'true,false,true': 'genre(B, F)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 0, 18], 'true,false,true,true': [0.0, 0, 0], 'true,false,true,false': [1.0, 2, 2], 'true,false,false': [0.0, 0, 0], 'false,true': [1.18e-08, 18, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [1.05e-08, 0, 18], 'true,false,false,true': [1.0, 2, 2], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 18, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 0, 18], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [1.0, 2, 2], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 18, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'true,false,true': 'genre(A, F)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 0, 0], 'true,false,true,true': [0.0, 0, 0], 'true,false,true,false': [1.022, 2, 20], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 18, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 18], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [1.0, 2, 2], 'true,false,false,false': [0.0, 0, 0], 'false,true': [1.32e-09, 18, 0], 'false,false': [0.0, 0, 0]}]]
[{'': [0.08264462809917356, -3.0839528461809902e-18], 'true': [nan, 0.08264462809917356], 'true,false': [-2.9605947323337506e-16, 0.25], 'true,false,false': [0.25, nan], 'false': [-3.0839528461809902e-18, nan]}, {'': [0.07055056241450806, 0.0], 'true': [2.9605947323337506e-16, 0.25], 'true,false': [nan, 0.25], 'true,false,false': [0.25, nan], 'false': [0.0, nan]}, {'': [0.05874978203136391, 1.5419764230904953e-17], 'true': [nan, 0.05874978203136391], 'true,false': [0.05874978203136391, nan], 'false': [1.5419764230904953e-17, nan]}, {'': [0.05693675516523644, -4.625929269271485e-18], 'true': [0.0, 0.25], 'true,false': [nan, 0.25], 'true,false,false': [0.25, nan], 'false': [-4.625929269271485e-18, nan]}, {'': [0.0521519923541106, 6.1679056923619804e-18], 'true': [nan, 0.0521519923541106], 'true,false': [9.868649107779169e-17, 0.25], 'true,false,false': [0.25, nan], 'false': [6.1679056923619804e-18, nan]}, {'': [0.04984978818286634, 7.709882115452476e-18], 'true': [-9.868649107779169e-17, 0.25], 'true,false': [0.25, nan], 'true,false,true': [nan, 0.25], 'false': [7.709882115452476e-18, nan]}, {'': [0.04864565422237032, 0.0], 'true': [nan, 0.04864565422237032], 'true,false': [6.1679056923619804e-18, 0.24999999999999997], 'true,false,false': [0.24999999999999997, nan], 'false': [0.0, nan]}, {'': [0.0479418940430429, -7.709882115452476e-19], 'true': [-3.0839528461809905e-17, 0.25000000000000006], 'true,false': [nan, 0.25000000000000006], 'true,false,false': [0.25000000000000006, nan], 'false': [-7.709882115452476e-19, nan]}, {'': [0.047484773454074806, -1.5419764230904951e-18], 'true': [nan, 0.047484773454074806], 'true,false': [0.047484773454074806, nan], 'true,false,true': [nan, 0.047484773454074806], 'false': [-1.5419764230904951e-18, nan]}, {'': [0.048104643529517065, 2.3129646346357427e-18], 'true': [-1.850371707708594e-17, 0.24999999999999997], 'true,false': [nan, 0.24999999999999997], 'true,false,false': [0.24999999999999997, nan], 'false': [2.3129646346357427e-18, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;true;genre(B, D).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;true;genre(B, D).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;true;genre(B, E).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;true;genre(B, D).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(B, E).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;true;genre(B, D).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;true;genre(B, D).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.8581489350995123;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | else return 0.3581489350995122;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   else return -0.14185106490048777;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7194734122109542;  // std dev = 7.30e-08, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | else return 0.308741135785635;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   else return -0.12544463852839138;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( female(A) )
%   | then return 0.28904841408371845;  // std dev = 0.923, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | else return 0.5804971782478224;  // std dev = 0.066, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   else return -0.11231637819360635;  // std dev = 1.67e-08, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.42739788054357075;  // std dev = 0.127, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | else return 0.167030742173918;  // std dev = 0.935, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   else return -0.10159632948783635;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.3277549987920925;  // std dev = 0.116, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | else return 0.1291471908882455;  // std dev = 0.932, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   else return -0.09269127618926093;  // std dev = 1.05e-08, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.2601758422057559;  // std dev = 0.103, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | else return 0.09870205828759904;  // std dev = 0.930, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   else return -0.08518475138839683;  // std dev = 1.18e-08, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.21341097218268848;  // std dev = 0.090, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | else return 0.07489812606260204;  // std dev = 0.929, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   else return -0.07877675473109179;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.17985117537412065;  // std dev = 0.080, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | else return 0.05659520836278331;  // std dev = 0.928, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   else return -0.07324622576333704;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( female(A) )
%   | then return -0.01631695960504424;  // std dev = 0.701, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | else return 0.19102784807484774;  // std dev = 0.119, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   else return -0.06842697784420274;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.13813797633098363;  // std dev = 0.115, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | else return 0.02081471956145664;  // std dev = 0.876, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   else return -0.0641918400820262;  // std dev = 6.45e-09, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */


Results
   AUC ROC   = 0.944035
   AUC PR    = 0.501068
   CLL	      = -0.236118
   Precision = 0.19883 at threshold = 0.5
   Recall    = 0.764045
   F1        = 0.315545


Total learning time: 0.691 seconds
Total inference time: 0.965 seconds
AUC ROC: 0.944035


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.144755
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 0.351 seconds
Refined model CLL: -0.144755


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.944035
   AUC PR    = 0.501068
   CLL	      = -0.236118
   Precision = 0.19883 at threshold = 0.5
   Recall    = 0.764045
   F1        = 0.315545


Total learning time: 2.0989999999999998 seconds
Total inference time: 0.965 seconds
AUC ROC: 0.944035
Total revision time: 2.0989999999999998
Best scored revision CLL: -0.144755


Dataset: 4_cora_imdb, Fold: 3, Type: Transfer (trRDN-B), Time: 00:08:32
{'AUC ROC': 0.944035, 'AUC PR': 0.501068, 'CLL': -0.236118, 'Precision': [0.19883, 0.5], 'Recall': 0.764045, 'F1': 0.315545, 'Learning time': 2.0989999999999998, 'Inference time': 0.965, 'parameter_20': {'AUC ROC': 0.976419, 'AUC PR': 0.83578, 'CLL': -0.187566, 'Precision': [1.0, 0.5], 'Recall': 0.724719, 'F1': 0.840391, 'Learning time': 0.684, 'Inference time': 1.055}}


Amount of data: 25
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;title(I, H), venue(I, A).;false;false
0;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
0;false;haswordvenue(A, L), haswordtitle(M, L).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordtitle(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordauthor(I, H).;false;true
2;true,false,false;haswordvenue(A, J), haswordtitle(K, J).;false;false
2;false;haswordvenue(A, L), haswordtitle(M, L).;true;false
2;false,true;haswordauthor(N, L).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;title(E, D), venue(E, B).;false;true
3;true,true,false;title(F, D), venue(F, A).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, A).;false;true
4;true,true,false;title(F, D), venue(F, B).;false;false
4;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
4;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
4;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
4;false,true;haswordauthor(M, K).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, B).;false;true
5;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
5;true,false;haswordvenue(B, H), haswordtitle(I, H).;true;true
5;true,false,true;title(J, I), venue(J, B).;false;false
5;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
5;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;title(E, D), venue(E, A).;false;true
6;true,true,false;title(F, D), venue(F, B).;false;false
6;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
6;true,false,true;title(I, H), venue(I, B).;false;false
6;true,false,false;haswordvenue(A, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;title(F, D), venue(F, A).;false;false
7;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
7;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
7;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
7;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;title(E, D), venue(E, A).;false;true
8;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
8;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
8;true,false,true;title(J, I), venue(J, A).;false;false
8;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
8;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, B).;false;true
9;true,true,false;title(F, D), venue(F, A).;false;false
9;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
9;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
9;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
9;false,true;haswordauthor(M, K).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995121;  // std dev = 8.43e-08, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.19148226843284552;  // std dev = 1.155, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.14185106490048774;  // std dev = 1.05e-08, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7194734122109543;  // std dev = 5.96e-08, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | else if ( genre(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(F, B) )
%   | | | then return 0.16653882456488173;  // std dev = 1.155, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.12544463852839138;  // std dev = 0.000, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A) )
%   | | then return 0.46986184489854954;  // std dev = 1.465, 29.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=25 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.11231637819360636;  // std dev = 3.23e-09, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.4384428217075188;  // std dev = 2.98e-08, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | else if ( genre(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(F, B) )
%   | | | then return 0.0588746053352178;  // std dev = 1.155, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.10159632948783634;  // std dev = 0.000, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( genre(B, E) )
%   | | then return 0.33493974091945405;  // std dev = 0.000, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.04699654452058518;  // std dev = 1.155, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.09269127618926103;  // std dev = 0.000, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.2648586015874412;  // std dev = 0.000, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | else if ( movie(E, B) )
%   | | then if ( genre(B, F) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.037297283799337784;  // std dev = 1.155, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.08518475138839683;  // std dev = 1.49e-08, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( genre(B, E) )
%   | | then return 0.2165772173781645;  // std dev = 2.58e-08, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.02946591028873589;  // std dev = 1.155, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.07877675473109179;  // std dev = 0.000, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.18208235418373594;  // std dev = 0.000, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | else if ( genre(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(F, B) )
%   | | | then return 0.023197151987130665;  // std dev = 1.155, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.07324622576333704;  // std dev = 0.000, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A) )
%   | | then if ( genre(A, F) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.12790121764163495;  // std dev = 1.193, 29.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=25 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.06842697784420275;  // std dev = 0.000, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.14036205129094712;  // std dev = 0.000, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | else if ( genre(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(F, A) )
%   | | | then return -0.010020379662044518;  // std dev = 1.155, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.0641918400820262;  // std dev = 1.32e-09, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 0.97199
   AUC PR    = 0.81824
   CLL	      = -0.148588
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.724719
   F1        = 0.840391


Total learning time: 0.7 seconds
Total inference time: 1.119 seconds
AUC ROC: 0.97199


Results scoring model
   AUC ROC   = 0.9936
   AUC PR    = 0.994164
   CLL	      = -0.163621
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.92
   F1        = 0.958333


Total scoring time: 0.368 seconds
Parameter learned model CLL: -0.163621


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [8.43e-08, 0, 23], 'true,false,false,true': [1.155, 4, 2], 'true,false,false,false': [0.0, 0, 0], 'false,true': [1.05e-08, 21, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [5.96e-08, 0, 23], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [1.155, 4, 2], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 21, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [1.465, 4, 25], 'true,false,false': [0.0, 0, 0], 'false,true': [3.23e-09, 21, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [2.98e-08, 0, 23], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [1.155, 4, 2], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 21, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 23], 'true,false,false,true': [1.155, 4, 2], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 21, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, B)', 'true,false,true': 'genre(B, F)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 0, 23], 'true,false,true,true': [0.0, 0, 0], 'true,false,true,false': [1.155, 4, 2], 'true,false,false': [0.0, 0, 0], 'false,true': [1.49e-08, 21, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [2.58e-08, 0, 23], 'true,false,false,true': [1.155, 4, 2], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 21, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 0, 23], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [1.155, 4, 2], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 21, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'true,false,true': 'genre(A, F)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 0, 0], 'true,false,true,true': [0.0, 0, 0], 'true,false,true,false': [1.193, 4, 25], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 21, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 23], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [1.155, 4, 2], 'true,false,false,false': [0.0, 0, 0], 'false,true': [1.32e-09, 21, 0], 'false,false': [0.0, 0, 0]}]]
[{'': [0.11890606420927562, 5.28677630773884e-18], 'true': [nan, 0.11890606420927562], 'true,false': [3.089316242435218e-16, 0.22222222222222224], 'true,false,false': [0.22222222222222224, nan], 'false': [5.28677630773884e-18, nan]}, {'': [0.09614545243802904, -2.64338815386942e-18], 'true': [1.544658121217609e-16, 0.2222222222222222], 'true,false': [nan, 0.2222222222222222], 'true,false,false': [0.2222222222222222, nan], 'false': [-2.64338815386942e-18, nan]}, {'': [0.0740026465312692, 7.93016446160826e-18], 'true': [nan, 0.0740026465312692], 'true,false': [0.0740026465312692, nan], 'false': [7.93016446160826e-18, nan]}, {'': [0.06961784414757863, -2.64338815386942e-18], 'true': [3.8616453030440226e-17, 0.2222222222222222], 'true,false': [nan, 0.2222222222222222], 'true,false,false': [0.2222222222222222, nan], 'false': [-2.64338815386942e-18, nan]}, {'': [0.05958195470546674, -7.93016446160826e-18], 'true': [nan, 0.05958195470546674], 'true,false': [-7.723290606088045e-17, 0.22222222222222218], 'true,false,false': [0.22222222222222218, nan], 'false': [-7.93016446160826e-18, nan]}, {'': [0.054474292306116376, 1.057355261547768e-17], 'true': [-4.827056628805028e-17, 0.22222222222222224], 'true,false': [0.22222222222222224, nan], 'true,false,true': [nan, 0.22222222222222224], 'false': [1.057355261547768e-17, nan]}, {'': [0.05172192052067218, 0.0], 'true': [nan, 0.05172192052067218], 'true,false': [2.896233977283017e-17, 0.2222222222222222], 'true,false,false': [0.2222222222222222, nan], 'false': [0.0, nan]}, {'': [0.05011939203151053, -1.32169407693471e-18], 'true': [-9.654113257610057e-18, 0.2222222222222222], 'true,false': [nan, 0.2222222222222222], 'true,false,false': [0.2222222222222222, nan], 'false': [-1.32169407693471e-18, nan]}, {'': [0.0491157021862052, -2.64338815386942e-18], 'true': [nan, 0.0491157021862052], 'true,false': [0.0491157021862052, nan], 'true,false,true': [nan, 0.0491157021862052], 'false': [-2.64338815386942e-18, nan]}, {'': [0.04968789475754379, 1.32169407693471e-18], 'true': [-1.4481169886415085e-17, 0.22222222222222218], 'true,false': [nan, 0.22222222222222218], 'true,false,false': [0.22222222222222218, nan], 'false': [1.32169407693471e-18, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;true;genre(B, D).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;true;genre(B, D).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;true;genre(B, E).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;true;genre(B, D).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(B, E).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;true;genre(B, D).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;true;genre(B, D).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.8581489350995121;  // std dev = 8.43e-08, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | else return 0.19148226843284552;  // std dev = 1.155, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   else return -0.14185106490048774;  // std dev = 1.05e-08, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7194734122109543;  // std dev = 5.96e-08, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | else return 0.16653882456488173;  // std dev = 1.155, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   else return -0.12544463852839138;  // std dev = 0.000, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B) )
%   | then return 0.5756379945651604;  // std dev = 0.069, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | else return -0.19123909051776852;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   else return -0.11231637819360636;  // std dev = 1.29e-08, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.41259202058250827;  // std dev = 5.96e-08, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | else return 0.1257345796118947;  // std dev = 1.002, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   else return -0.10159632948783634;  // std dev = 0.000, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.3173770057292786;  // std dev = 0.000, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | else return 0.10483477677367577;  // std dev = 0.991, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   else return -0.09269127618926103;  // std dev = 0.000, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.2528953753270479;  // std dev = 0.000, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | else return 0.08633489789336846;  // std dev = 0.983, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   else return -0.08518475138839683;  // std dev = 1.49e-08, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.20814806543641395;  // std dev = 0.000, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | else return 0.07038013096408842;  // std dev = 0.976, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   else return -0.07877675473109179;  // std dev = 0.000, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.17591499233776503;  // std dev = 2.98e-08, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | else return 0.05690512511215543;  // std dev = 0.971, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   else return -0.07324622576333704;  // std dev = 0.000, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B) )
%   | then if ( female(A) )
%   | | then return 0.15184697524652147;  // std dev = 3.73e-09, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return 0.19706207239182763;  // std dev = 0.136, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | else return -0.23343273509443177;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   else return -0.06842697784420275;  // std dev = 0.000, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.12928549039621187;  // std dev = 0.010, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | else return 0.0558279598409764;  // std dev = 0.866, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   else return -0.0641918400820262;  // std dev = 5.27e-09, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */


Results
   AUC ROC   = 0.984082
   AUC PR    = 0.607654
   CLL	      = -0.144125
   Precision = 0.693548 at threshold = 0.5
   Recall    = 0.724719
   F1        = 0.708791


Total learning time: 0.715 seconds
Total inference time: 0.845 seconds
AUC ROC: 0.984082


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.132023
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.92
   F1        = 0.958333


Total scoring time: 0.367 seconds
Refined model CLL: -0.132023


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.984082
   AUC PR    = 0.607654
   CLL	      = -0.144125
   Precision = 0.693548 at threshold = 0.5
   Recall    = 0.724719
   F1        = 0.708791


Total learning time: 2.15 seconds
Total inference time: 0.845 seconds
AUC ROC: 0.984082
Total revision time: 2.15
Best scored revision CLL: -0.132023


Dataset: 4_cora_imdb, Fold: 3, Type: Transfer (trRDN-B), Time: 00:08:37
{'AUC ROC': 0.984082, 'AUC PR': 0.607654, 'CLL': -0.144125, 'Precision': [0.693548, 0.5], 'Recall': 0.724719, 'F1': 0.708791, 'Learning time': 2.15, 'Inference time': 0.845, 'parameter_25': {'AUC ROC': 0.97199, 'AUC PR': 0.81824, 'CLL': -0.148588, 'Precision': [1.0, 0.5], 'Recall': 0.724719, 'F1': 0.840391, 'Learning time': 0.7, 'Inference time': 1.119}}


Starting fold 4

Target train facts examples: 927
Target train pos examples: 337
Target train neg examples: 12345

Target test facts examples: 151
Target test pos	 examples: 45
Target test neg examples: 1891

Amount of data: 5
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;title(I, H), venue(I, A).;false;false
0;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
0;false;haswordvenue(A, L), haswordtitle(M, L).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordtitle(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordauthor(I, H).;false;true
2;true,false,false;haswordvenue(A, J), haswordtitle(K, J).;false;false
2;false;haswordvenue(A, L), haswordtitle(M, L).;true;false
2;false,true;haswordauthor(N, L).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;title(E, D), venue(E, B).;false;true
3;true,true,false;title(F, D), venue(F, A).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, A).;false;true
4;true,true,false;title(F, D), venue(F, B).;false;false
4;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
4;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
4;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
4;false,true;haswordauthor(M, K).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, B).;false;true
5;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
5;true,false;haswordvenue(B, H), haswordtitle(I, H).;true;true
5;true,false,true;title(J, I), venue(J, B).;false;false
5;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
5;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;title(E, D), venue(E, A).;false;true
6;true,true,false;title(F, D), venue(F, B).;false;false
6;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
6;true,false,true;title(I, H), venue(I, B).;false;false
6;true,false,false;haswordvenue(A, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;title(F, D), venue(F, A).;false;false
7;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
7;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
7;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
7;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;title(E, D), venue(E, A).;false;true
8;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
8;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
8;true,false,true;title(J, I), venue(J, A).;false;false
8;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
8;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, B).;false;true
9;true,true,false;title(F, D), venue(F, A).;false;false
9;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
9;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
9;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
9;false,true;haswordauthor(M, K).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995122;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.14185106490048777;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.14185106490048777;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7194734122109545;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else if ( genre(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(F, B) )
%   | | | then return -0.12544463852839138;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.12544463852839138;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A) )
%   | | then return 0.44408596758963603;  // std dev = 0.610, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.11231637819360639;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.4447988520039283;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else if ( genre(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(F, B) )
%   | | | then return -0.16476268394672763;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.10159632948783628;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( genre(B, E) )
%   | | then return 0.3392793852013426;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.14332149068065764;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.09269127618926096;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.26780523845758497;  // std dev = 1.05e-08, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else if ( movie(E, B) )
%   | | then if ( genre(B, F) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.12660743296270735;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.08518475138839687;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( genre(B, E) )
%   | | then return 0.21864301681019258;  // std dev = 7.45e-09, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else if ( movie(F, B) )
%   | | | then return -0.11325642590314079;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.07877675473109173;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.18358653197988706;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else if ( genre(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(F, B) )
%   | | | then return -0.10237059603983752;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.07324622576333704;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A) )
%   | | then if ( genre(A, F) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.11581812324404982;  // std dev = 0.229, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.06842697784420272;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.14287183817646565;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else if ( genre(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(F, A) )
%   | | | then return -0.10361292501647422;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.0641918400820262;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.076544
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 0.608 seconds
Total inference time: 0.847 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.102333
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 0.329 seconds
Parameter learned model CLL: -0.102333


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 5], 'true,false,false,true': [0.0, 1, 0], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 4, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 5], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 1, 0], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 4, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.61, 1, 5], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 4, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 5], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 1, 0], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 4, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 5], 'true,false,false,true': [0.0, 1, 0], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 4, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, B)', 'true,false,true': 'genre(B, F)', 'false': 'movie(G, A)'}, {'true,true': [1.05e-08, 0, 5], 'true,false,true,true': [0.0, 0, 0], 'true,false,true,false': [0.0, 1, 0], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 4, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [7.45e-09, 0, 5], 'true,false,false,true': [0.0, 1, 0], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 4, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 0, 5], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 1, 0], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 4, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'true,false,true': 'genre(A, F)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 0, 0], 'true,false,true,true': [0.0, 0, 0], 'true,false,true,false': [0.229, 1, 5], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 4, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 5], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 1, 0], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 4, 0], 'false,false': [0.0, 0, 0]}]]
[{'': [0.1388888888888887, 0.0], 'true': [nan, 0.1388888888888887], 'true,false': [0.0, 0.0], 'false': [0.0, nan], 'true,false,false': [0.0, nan]}, {'': [0.09915090450905224, 0.0], 'true': [0.0, 0.0], 'false': [0.0, nan], 'true,false': [nan, 0.0], 'true,false,false': [0.0, nan]}, {'': [0.061916714078618984, 0.0], 'true': [nan, 0.061916714078618984], 'true,false': [0.061916714078618984, nan], 'false': [0.0, nan]}, {'': [0.051606286959794835, 0.0], 'true': [0.0, 0.0], 'false': [0.0, nan], 'true,false': [nan, 0.0], 'true,false,false': [0.0, nan]}, {'': [0.03234772297251024, 0.0], 'true': [nan, 0.03234772297251024], 'true,false': [-2.2204460492503132e-17, 0.0], 'false': [0.0, nan], 'true,false,false': [0.0, nan]}, {'': [0.021605743802346058, 0.0], 'true': [2.2204460492503132e-17, 0.0], 'false': [0.0, nan], 'true,false': [0.0, nan], 'true,false,true': [nan, 0.0]}, {'': [0.015299616676864075, 0.0], 'true': [nan, 0.015299616676864075], 'true,false': [1.1102230246251566e-17, 0.0], 'false': [0.0, nan], 'true,false,false': [0.0, nan]}, {'': [0.011357149870179049, 0.0], 'true': [0.0, 0.0], 'false': [0.0, nan], 'true,false': [nan, 0.0], 'true,false,false': [0.0, nan]}, {'': [0.008749356217304974, 0.0], 'true': [nan, 0.008749356217304974], 'true,false': [0.008749356217304974, nan], 'true,false,true': [nan, 0.008749356217304974], 'false': [0.0, nan]}, {'': [0.008438158123094395, 0.0], 'true': [0.0, 0.0], 'false': [0.0, nan], 'true,false': [nan, 0.0], 'true,false,false': [0.0, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;true;genre(B, D).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;true;genre(B, D).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;true;genre(B, E).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;true;genre(B, D).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(B, E).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;true;genre(B, D).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;true;genre(B, D).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.8581489350995122;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return -0.14185106490048777;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   else return -0.14185106490048777;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7194734122109545;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return -0.12544463852839138;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   else return -0.12544463852839138;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.44408596758963603;  // std dev = 0.610, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   else return -0.11231637819360639;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.4447988520039283;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return -0.16476268394672763;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   else return -0.10159632948783628;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.3392793852013426;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return -0.14332149068065764;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   else return -0.09269127618926096;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.26780523845758497;  // std dev = 1.05e-08, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return -0.12660743296270735;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   else return -0.08518475138839687;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.21864301681019258;  // std dev = 7.45e-09, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return -0.11325642590314079;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   else return -0.07877675473109173;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.18358653197988706;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return -0.10237059603983752;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   else return -0.07324622576333704;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.11581812324404982;  // std dev = 0.229, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   else return -0.06842697784420272;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.14287183817646565;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return -0.10361292501647422;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   else return -0.0641918400820262;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */


Results
   AUC ROC   = 0.998942
   AUC PR    = 0.918367
   CLL	      = -0.078574
   Precision = 0.918367 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.957447


Total learning time: 0.519 seconds
Total inference time: 0.72 seconds
AUC ROC: 0.998942


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.102333
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 0.316 seconds
Refined model CLL: -0.102333


******************************************
Best model found
******************************************
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.076544
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 1.772 seconds
Total inference time: 0.847 seconds
AUC ROC: 1.0
Total revision time: 1.772
Best scored revision CLL: -0.102333


Dataset: 4_cora_imdb, Fold: 4, Type: Transfer (trRDN-B), Time: 00:08:41
{'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.076544, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 1.772, 'Inference time': 0.847, 'parameter_5': {'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.076544, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 0.608, 'Inference time': 0.847}}


Amount of data: 10
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;title(I, H), venue(I, A).;false;false
0;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
0;false;haswordvenue(A, L), haswordtitle(M, L).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordtitle(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordauthor(I, H).;false;true
2;true,false,false;haswordvenue(A, J), haswordtitle(K, J).;false;false
2;false;haswordvenue(A, L), haswordtitle(M, L).;true;false
2;false,true;haswordauthor(N, L).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;title(E, D), venue(E, B).;false;true
3;true,true,false;title(F, D), venue(F, A).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, A).;false;true
4;true,true,false;title(F, D), venue(F, B).;false;false
4;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
4;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
4;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
4;false,true;haswordauthor(M, K).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, B).;false;true
5;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
5;true,false;haswordvenue(B, H), haswordtitle(I, H).;true;true
5;true,false,true;title(J, I), venue(J, B).;false;false
5;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
5;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;title(E, D), venue(E, A).;false;true
6;true,true,false;title(F, D), venue(F, B).;false;false
6;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
6;true,false,true;title(I, H), venue(I, B).;false;false
6;true,false,false;haswordvenue(A, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;title(F, D), venue(F, A).;false;false
7;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
7;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
7;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
7;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;title(E, D), venue(E, A).;false;true
8;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
8;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
8;true,false,true;title(J, I), venue(J, A).;false;false
8;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
8;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, B).;false;true
9;true,true,false;title(F, D), venue(F, A).;false;false
9;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
9;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
9;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
9;false,true;haswordauthor(M, K).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995123;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.10814893509951219;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.1418510649004878;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7194734122109543;  // std dev = 2.98e-08, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else if ( genre(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(F, B) )
%   | | | then return 0.09446743783575562;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.12544463852839138;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A) )
%   | | then return 0.40960826950400075;  // std dev = 1.171, 13.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=10 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.11231637819360639;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.4533286061964762;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else if ( genre(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(F, B) )
%   | | | then return 0.01634295262101057;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.10159632948783627;  // std dev = 1.86e-09, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( genre(B, E) )
%   | | then return 0.34512013721027124;  // std dev = 1.49e-08, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.013403832053065383;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.09269127618926097;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.2717663291205828;  // std dev = 1.83e-08, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else if ( movie(E, B) )
%   | | then if ( genre(B, F) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.010974311728403824;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.08518475138839687;  // std dev = 2.63e-09, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( genre(B, E) )
%   | | then return 0.22141391594968068;  // std dev = 1.83e-08, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.00897245448030326;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.07877675473109173;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.18559973097152926;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else if ( genre(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(F, B) )
%   | | | then return 0.007327282346372699;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.07324622576333704;  // std dev = 9.31e-10, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A) )
%   | | then if ( genre(A, F) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.11203008428244852;  // std dev = 0.903, 13.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=10 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.06842697784420272;  // std dev = 2.63e-09, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.1447371610519791;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else if ( genre(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(F, A) )
%   | | | then return -0.015275938607475448;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.0641918400820262;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.130213
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 0.664 seconds
Total inference time: 0.858 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 0.985
   AUC PR    = 0.988462
   CLL	      = -0.19586
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.9
   F1        = 0.947368


Total scoring time: 0.345 seconds
Parameter learned model CLL: -0.19586


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 9], 'true,false,false,true': [0.866, 3, 1], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 7, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [2.98e-08, 0, 9], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.866, 3, 1], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 7, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [1.171, 3, 10], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 7, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 9], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.866, 3, 1], 'true,false,false,false': [0.0, 0, 0], 'false,true': [1.86e-09, 7, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [1.49e-08, 0, 9], 'true,false,false,true': [0.866, 3, 1], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 7, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, B)', 'true,false,true': 'genre(B, F)', 'false': 'movie(G, A)'}, {'true,true': [1.83e-08, 0, 9], 'true,false,true,true': [0.0, 0, 0], 'true,false,true,false': [0.866, 3, 1], 'true,false,false': [0.0, 0, 0], 'false,true': [2.63e-09, 7, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [1.83e-08, 0, 9], 'true,false,false,true': [0.866, 3, 1], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 7, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 0, 9], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.866, 3, 1], 'true,false,false,false': [0.0, 0, 0], 'false,true': [9.31e-10, 7, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'true,false,true': 'genre(A, F)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 0, 0], 'true,false,true,true': [0.0, 0, 0], 'true,false,true,false': [0.903, 3, 10], 'true,false,false': [0.0, 0, 0], 'false,true': [2.63e-09, 7, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 9], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.866, 3, 1], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 7, 0], 'false,false': [0.0, 0, 0]}]]
[{'': [0.1775147928994082, -7.93016446160826e-18], 'true': [nan, 0.1775147928994082], 'true,false': [-2.9605947323337506e-16, 0.18750000000000003], 'true,false,false': [0.18750000000000003, nan], 'false': [-7.93016446160826e-18, nan]}, {'': [0.1409039576814726, -1.982541115402065e-18], 'true': [9.868649107779169e-17, 0.18749999999999997], 'true,false': [nan, 0.18749999999999997], 'true,false,false': [0.18749999999999997, nan], 'false': [-1.982541115402065e-18, nan]}, {'': [0.10549455515742423, -1.982541115402065e-18], 'true': [nan, 0.10549455515742423], 'true,false': [0.10549455515742423, nan], 'false': [-1.982541115402065e-18, nan]}, {'': [0.09836942373673356, 0.0], 'true': [-2.4671622769447922e-17, 0.18749999999999997], 'true,false': [nan, 0.18749999999999997], 'true,false,false': [0.18749999999999997, nan], 'false': [0.0, nan]}, {'': [0.08113186660270619, 0.0], 'true': [nan, 0.08113186660270619], 'true,false': [2.4671622769447922e-17, 0.18750000000000003], 'true,false,false': [0.18750000000000003, nan], 'false': [0.0, nan]}, {'': [0.07218017247383063, 9.912705577010326e-19], 'true': [3.700743415417188e-17, 0.1875], 'true,false': [0.1875, nan], 'true,false,true': [nan, 0.1875], 'false': [9.912705577010326e-19, nan]}, {'': [0.06730609162038358, -9.912705577010326e-19], 'true': [nan, 0.06730609162038358], 'true,false': [3.700743415417188e-17, 0.18749999999999997], 'true,false,false': [0.18749999999999997, nan], 'false': [-9.912705577010326e-19, nan]}, {'': [0.06446223889820787, 9.912705577010326e-19], 'true': [-6.1679056923619804e-18, 0.18750000000000003], 'true,false': [nan, 0.18750000000000003], 'true,false,false': [0.18750000000000003, nan], 'false': [9.912705577010326e-19, nan]}, {'': [0.06269098314255711, 9.912705577010326e-19], 'true': [nan, 0.06269098314255711], 'true,false': [0.06269098314255711, nan], 'true,false,true': [nan, 0.06269098314255711], 'false': [9.912705577010326e-19, nan]}, {'': [0.06314645511393226, -4.956352788505163e-19], 'true': [-3.0839528461809902e-18, 0.18749999999999997], 'true,false': [nan, 0.18749999999999997], 'true,false,false': [0.18749999999999997, nan], 'false': [-4.956352788505163e-19, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;true;genre(B, D).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;true;genre(B, D).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;true;genre(B, E).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;true;genre(B, D).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(B, E).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;true;genre(B, D).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;true;genre(B, D).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.8581489350995123;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else return 0.10814893509951219;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   else return -0.1418510649004878;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7194734122109543;  // std dev = 2.98e-08, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else return 0.09446743783575562;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   else return -0.12544463852839138;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.16834760679113825;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( female(A) )
%   | | then return 0.6014140961567142;  // std dev = 0.252, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return 0.5553664367462845;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else return -0.11231637819360639;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.4113167686203896;  // std dev = 0.017, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else return 0.07301085418748224;  // std dev = 0.759, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   else return -0.10159632948783627;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.31652417668304733;  // std dev = 0.015, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else return 0.06234732919227759;  // std dev = 0.754, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   else return -0.09269127618926097;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.2523190208051688;  // std dev = 0.013, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else return 0.052862644041504175;  // std dev = 0.750, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   else return -0.08518475138839687;  // std dev = 2.63e-09, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.20774404158718662;  // std dev = 0.011, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else return 0.04454612116444539;  // std dev = 0.747, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   else return -0.07877675473109173;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.17562059069257138;  // std dev = 0.010, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else return 0.03734186918124224;  // std dev = 0.744, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   else return -0.07324622576333704;  // std dev = 2.63e-09, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.1830793328023396;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( female(A) )
%   | | then return 0.23647265194234715;  // std dev = 0.479, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return 0.15492118618159967;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else return -0.06842697784420272;  // std dev = 2.63e-09, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.12776973585649484;  // std dev = 0.021, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else return 0.03703997469892644;  // std dev = 0.673, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   else return -0.0641918400820262;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */


Results
   AUC ROC   = 0.999201
   AUC PR    = 0.95488
   CLL	      = -0.100451
   Precision = 0.918367 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.957447


Total learning time: 0.742 seconds
Total inference time: 0.736 seconds
AUC ROC: 0.999201


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.150189
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.9
   F1        = 0.947368


Total scoring time: 0.331 seconds
Refined model CLL: -0.150189


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.999201
   AUC PR    = 0.95488
   CLL	      = -0.100451
   Precision = 0.918367 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.957447


Total learning time: 2.082 seconds
Total inference time: 0.736 seconds
AUC ROC: 0.999201
Total revision time: 2.082
Best scored revision CLL: -0.150189


Dataset: 4_cora_imdb, Fold: 4, Type: Transfer (trRDN-B), Time: 00:08:45
{'AUC ROC': 0.999201, 'AUC PR': 0.95488, 'CLL': -0.100451, 'Precision': [0.918367, 0.5], 'Recall': 1.0, 'F1': 0.957447, 'Learning time': 2.082, 'Inference time': 0.736, 'parameter_10': {'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.130213, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 0.664, 'Inference time': 0.858}}


Amount of data: 15
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;title(I, H), venue(I, A).;false;false
0;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
0;false;haswordvenue(A, L), haswordtitle(M, L).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordtitle(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordauthor(I, H).;false;true
2;true,false,false;haswordvenue(A, J), haswordtitle(K, J).;false;false
2;false;haswordvenue(A, L), haswordtitle(M, L).;true;false
2;false,true;haswordauthor(N, L).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;title(E, D), venue(E, B).;false;true
3;true,true,false;title(F, D), venue(F, A).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, A).;false;true
4;true,true,false;title(F, D), venue(F, B).;false;false
4;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
4;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
4;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
4;false,true;haswordauthor(M, K).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, B).;false;true
5;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
5;true,false;haswordvenue(B, H), haswordtitle(I, H).;true;true
5;true,false,true;title(J, I), venue(J, B).;false;false
5;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
5;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;title(E, D), venue(E, A).;false;true
6;true,true,false;title(F, D), venue(F, B).;false;false
6;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
6;true,false,true;title(I, H), venue(I, B).;false;false
6;true,false,false;haswordvenue(A, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;title(F, D), venue(F, A).;false;false
7;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
7;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
7;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
7;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;title(E, D), venue(E, A).;false;true
8;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
8;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
8;true,false,true;title(J, I), venue(J, A).;false;false
8;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
8;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, B).;false;true
9;true,true,false;title(F, D), venue(F, A).;false;false
9;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
9;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
9;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
9;false,true;haswordauthor(M, K).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995123;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.10814893509951219;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.1418510649004878;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7194734122109542;  // std dev = 5.16e-08, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | else if ( genre(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(F, B) )
%   | | | then return 0.09446743783575562;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.12544463852839138;  // std dev = 5.27e-09, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A) )
%   | | then return 0.4500966492935239;  // std dev = 1.203, 18.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=15 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.11231637819360636;  // std dev = 2.63e-09, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.4433149939337246;  // std dev = 2.11e-08, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | else if ( genre(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(F, B) )
%   | | | then return 0.009015023525078554;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.1015963294878363;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( genre(B, E) )
%   | | then return 0.3382653516950622;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.007362226464175031;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.09269127618926097;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.2671169929995241;  // std dev = 2.36e-08, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | else if ( movie(E, B) )
%   | | then if ( genre(B, F) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.006006747057296209;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.08518475138839687;  // std dev = 5.27e-09, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( genre(B, E) )
%   | | then return 0.21816086004058377;  // std dev = 1.05e-08, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.0048970360774989105;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.07877675473109172;  // std dev = 3.73e-09, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.183235709162413;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | else if ( genre(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(F, B) )
%   | | | then return 0.003989819118291112;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.07324622576333704;  // std dev = 1.32e-09, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A) )
%   | | then if ( genre(A, F) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.12313278418597957;  // std dev = 0.908, 18.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=15 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.06842697784420272;  // std dev = 2.63e-09, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.14173598583405655;  // std dev = 7.45e-09, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | else if ( genre(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(F, A) )
%   | | | then return -0.020342940079948746;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.06419184008202619;  // std dev = 1.61e-09, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.131537
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 0.666 seconds
Total inference time: 0.867 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 0.993333
   AUC PR    = 0.994444
   CLL	      = -0.162512
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.933333
   F1        = 0.965517


Total scoring time: 0.356 seconds
Parameter learned model CLL: -0.162512


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 14], 'true,false,false,true': [0.866, 3, 1], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 12, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [5.16e-08, 0, 14], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.866, 3, 1], 'true,false,false,false': [0.0, 0, 0], 'false,true': [5.27e-09, 12, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [1.203, 3, 15], 'true,false,false': [0.0, 0, 0], 'false,true': [2.63e-09, 12, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [2.11e-08, 0, 14], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.866, 3, 1], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 12, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 14], 'true,false,false,true': [0.866, 3, 1], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 12, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, B)', 'true,false,true': 'genre(B, F)', 'false': 'movie(G, A)'}, {'true,true': [2.36e-08, 0, 14], 'true,false,true,true': [0.0, 0, 0], 'true,false,true,false': [0.866, 3, 1], 'true,false,false': [0.0, 0, 0], 'false,true': [5.27e-09, 12, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [1.05e-08, 0, 14], 'true,false,false,true': [0.866, 3, 1], 'true,false,false,false': [0.0, 0, 0], 'false,true': [3.73e-09, 12, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 0, 14], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.866, 3, 1], 'true,false,false,false': [0.0, 0, 0], 'false,true': [1.32e-09, 12, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'true,false,true': 'genre(A, F)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 0, 0], 'true,false,true,true': [0.0, 0, 0], 'true,false,true,false': [0.908, 3, 15], 'true,false,false': [0.0, 0, 0], 'false,true': [2.63e-09, 12, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [7.45e-09, 0, 14], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.866, 3, 1], 'true,false,false,false': [0.0, 0, 0], 'false,true': [1.61e-09, 12, 0], 'false,false': [0.0, 0, 0]}]]
[{'': [0.1388888888888886, -1.1564823173178714e-17], 'true': [nan, 0.1388888888888886], 'true,false': [-2.5376526277146434e-16, 0.18750000000000003], 'true,false,false': [0.18750000000000003, nan], 'false': [-1.1564823173178714e-17, nan]}, {'': [0.10918338953167517, 2.3129646346357427e-18], 'true': [1.9032394707859825e-16, 0.18749999999999997], 'true,false': [nan, 0.18749999999999997], 'true,false,false': [0.18749999999999997, nan], 'false': [2.3129646346357427e-18, nan]}, {'': [0.08045271519288942, 6.938893903907228e-18], 'true': [nan, 0.08045271519288942], 'true,false': [0.08045271519288942, nan], 'false': [6.938893903907228e-18, nan]}, {'': [0.0742670432118186, 0.0], 'true': [3.172065784643304e-17, 0.18750000000000003], 'true,false': [nan, 0.18750000000000003], 'true,false,false': [0.18750000000000003, nan], 'false': [0.0, nan]}, {'': [0.06059205303735747, 2.3129646346357427e-18], 'true': [nan, 0.06059205303735747], 'true,false': [-3.172065784643304e-17, 0.18750000000000003], 'true,false,false': [0.18750000000000003, nan], 'false': [2.3129646346357427e-18, nan]}, {'': [0.053450615401285845, 2.3129646346357427e-18], 'true': [3.9650822308041306e-17, 0.18750000000000003], 'true,false': [0.18750000000000003, nan], 'true,false,true': [nan, 0.18750000000000003], 'false': [2.3129646346357427e-18, nan]}, {'': [0.04952765951307417, 1.1564823173178713e-18], 'true': [nan, 0.04952765951307417], 'true,false': [7.93016446160826e-18, 0.18750000000000003], 'true,false,false': [0.18750000000000003, nan], 'false': [1.1564823173178713e-18, nan]}, {'': [0.04721984256009789, 1.1564823173178713e-18], 'true': [-2.3790493384824782e-17, 0.1875], 'true,false': [nan, 0.1875], 'true,false,false': [0.1875, nan], 'false': [1.1564823173178713e-18, nan]}, {'': [0.045772987077909125, 5.782411586589357e-19], 'true': [nan, 0.045772987077909125], 'true,false': [0.045772987077909125, nan], 'true,false,true': [nan, 0.045772987077909125], 'false': [5.782411586589357e-19, nan]}, {'': [0.04620708759452005, 2.8912057932946786e-18], 'true': [3.96508223080413e-18, 0.18749999999999994], 'true,false': [nan, 0.18749999999999994], 'true,false,false': [0.18749999999999994, nan], 'false': [2.8912057932946786e-18, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;true;genre(B, D).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;true;genre(B, D).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;true;genre(B, E).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;true;genre(B, D).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(B, E).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;true;genre(B, D).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;true;genre(B, D).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.8581489350995123;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | else return 0.10814893509951219;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   else return -0.1418510649004878;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7194734122109542;  // std dev = 5.16e-08, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | else return 0.09446743783575562;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   else return -0.12544463852839138;  // std dev = 5.27e-09, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.16834760679113825;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( female(A) )
%   | | then return 0.5899021813041068;  // std dev = 0.091, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return 0.5553664367462846;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   else return -0.11231637819360636;  // std dev = 9.13e-09, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.4133264510184233;  // std dev = 0.016, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | else return 0.07357624724487244;  // std dev = 0.761, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   else return -0.1015963294878363;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.31788061582184757;  // std dev = 0.014, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | else return 0.06284723693339997;  // std dev = 0.756, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   else return -0.09269127618926097;  // std dev = 5.27e-09, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.25324303481420524;  // std dev = 0.012, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | else return 0.05329753654021299;  // std dev = 0.752, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   else return -0.08518475138839687;  // std dev = 5.27e-09, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.2083962215748168;  // std dev = 0.011, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | else return 0.04491922680660607;  // std dev = 0.749, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   else return -0.07877675473109172;  // std dev = 3.73e-09, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.17609865769259891;  // std dev = 0.009, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | else return 0.03765820715930932;  // std dev = 0.746, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   else return -0.07324622576333704;  // std dev = 3.73e-09, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B) )
%   | then if ( female(A) )
%   | | then return 0.21553438839968161;  // std dev = 0.174, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return 0.15421287298679318;  // std dev = 7.45e-09, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else return -0.18340704500794813;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else return -0.06842697784420272;  // std dev = 2.63e-09, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.12974392153911227;  // std dev = 0.020, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | else return 0.03863061215884185;  // std dev = 0.679, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   else return -0.06419184008202619;  // std dev = 5.89e-09, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */


Results
   AUC ROC   = 0.999201
   AUC PR    = 0.95488
   CLL	      = -0.100623
   Precision = 0.918367 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.957447


Total learning time: 0.678 seconds
Total inference time: 0.745 seconds
AUC ROC: 0.999201


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.132208
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.933333
   F1        = 0.965517


Total scoring time: 0.337 seconds
Refined model CLL: -0.132208


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.999201
   AUC PR    = 0.95488
   CLL	      = -0.100623
   Precision = 0.918367 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.957447


Total learning time: 2.0370000000000004 seconds
Total inference time: 0.745 seconds
AUC ROC: 0.999201
Total revision time: 2.0370000000000004
Best scored revision CLL: -0.132208


Dataset: 4_cora_imdb, Fold: 4, Type: Transfer (trRDN-B), Time: 00:08:49
{'AUC ROC': 0.999201, 'AUC PR': 0.95488, 'CLL': -0.100623, 'Precision': [0.918367, 0.5], 'Recall': 1.0, 'F1': 0.957447, 'Learning time': 2.0370000000000004, 'Inference time': 0.745, 'parameter_15': {'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.131537, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 0.666, 'Inference time': 0.867}}


Amount of data: 20
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;title(I, H), venue(I, A).;false;false
0;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
0;false;haswordvenue(A, L), haswordtitle(M, L).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordtitle(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordauthor(I, H).;false;true
2;true,false,false;haswordvenue(A, J), haswordtitle(K, J).;false;false
2;false;haswordvenue(A, L), haswordtitle(M, L).;true;false
2;false,true;haswordauthor(N, L).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;title(E, D), venue(E, B).;false;true
3;true,true,false;title(F, D), venue(F, A).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, A).;false;true
4;true,true,false;title(F, D), venue(F, B).;false;false
4;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
4;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
4;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
4;false,true;haswordauthor(M, K).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, B).;false;true
5;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
5;true,false;haswordvenue(B, H), haswordtitle(I, H).;true;true
5;true,false,true;title(J, I), venue(J, B).;false;false
5;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
5;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;title(E, D), venue(E, A).;false;true
6;true,true,false;title(F, D), venue(F, B).;false;false
6;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
6;true,false,true;title(I, H), venue(I, B).;false;false
6;true,false,false;haswordvenue(A, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;title(F, D), venue(F, A).;false;false
7;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
7;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
7;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
7;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;title(E, D), venue(E, A).;false;true
8;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
8;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
8;true,false,true;title(J, I), venue(J, A).;false;false
8;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
8;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, B).;false;true
9;true,true,false;title(F, D), venue(F, A).;false;false
9;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
9;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
9;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
9;false,true;haswordauthor(M, K).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995123;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.19148226843284552;  // std dev = 1.155, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.1418510649004878;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7194734122109542;  // std dev = 7.30e-08, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | else if ( genre(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(F, B) )
%   | | | then return 0.16653882456488173;  // std dev = 1.155, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.12544463852839138;  // std dev = 7.45e-09, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A) )
%   | | then return 0.4520483882636046;  // std dev = 1.450, 24.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=20 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.11231637819360635;  // std dev = 3.48e-09, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.44283338393466004;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | else if ( genre(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(F, B) )
%   | | | then return 0.06240753161412644;  // std dev = 1.155, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.10159632948783631;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( genre(B, E) )
%   | | then return 0.3379363535131572;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.04990581651560031;  // std dev = 1.155, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.09269127618926094;  // std dev = 2.28e-09, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.26689365832968204;  // std dev = 3.33e-08, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | else if ( movie(E, B) )
%   | | then if ( genre(B, F) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.03966153040147641;  // std dev = 1.155, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.08518475138839685;  // std dev = 1.05e-08, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( genre(B, E) )
%   | | then return 0.2180043550802537;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.031367808918632945;  // std dev = 1.155, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.07877675473109173;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.18312180150950746;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | else if ( genre(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(F, B) )
%   | | | then return 0.02471524893035622;  // std dev = 1.155, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.07324622576333704;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A) )
%   | | then if ( genre(A, F) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.12282881766334319;  // std dev = 1.191, 24.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=20 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.06842697784420272;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.14169421536353616;  // std dev = 1.29e-08, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | else if ( genre(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(F, A) )
%   | | | then return -0.007621115913614492;  // std dev = 1.155, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.06419184008202619;  // std dev = 1.86e-09, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.158784
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 0.757 seconds
Total inference time: 0.889 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 0.99
   AUC PR    = 0.991071
   CLL	      = -0.180681
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.9
   F1        = 0.947368


Total scoring time: 0.38 seconds
Parameter learned model CLL: -0.180681


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 18], 'true,false,false,true': [1.155, 4, 2], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 16, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [7.3e-08, 0, 18], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [1.155, 4, 2], 'true,false,false,false': [0.0, 0, 0], 'false,true': [7.45e-09, 16, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [1.45, 4, 20], 'true,false,false': [0.0, 0, 0], 'false,true': [3.48e-09, 16, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 18], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [1.155, 4, 2], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 16, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 18], 'true,false,false,true': [1.155, 4, 2], 'true,false,false,false': [0.0, 0, 0], 'false,true': [2.28e-09, 16, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, B)', 'true,false,true': 'genre(B, F)', 'false': 'movie(G, A)'}, {'true,true': [3.33e-08, 0, 18], 'true,false,true,true': [0.0, 0, 0], 'true,false,true,false': [1.155, 4, 2], 'true,false,false': [0.0, 0, 0], 'false,true': [1.05e-08, 16, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 18], 'true,false,false,true': [1.155, 4, 2], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 16, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 0, 18], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [1.155, 4, 2], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 16, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'true,false,true': 'genre(A, F)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 0, 0], 'true,false,true,true': [0.0, 0, 0], 'true,false,true,false': [1.191, 4, 20], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 16, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [1.29e-08, 0, 18], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [1.155, 4, 2], 'true,false,false,false': [0.0, 0, 0], 'false,true': [1.86e-09, 16, 0], 'false,false': [0.0, 0, 0]}]]
[{'': [0.13888888888888906, -6.938893903907228e-18], 'true': [nan, 0.13888888888888906], 'true,false': [-2.9605947323337506e-16, 0.22222222222222224], 'true,false,false': [0.22222222222222224, nan], 'false': [-6.938893903907228e-18, nan]}, {'': [0.11288117897093024, 3.469446951953614e-18], 'true': [2.9605947323337506e-16, 0.2222222222222222], 'true,false': [nan, 0.2222222222222222], 'true,false,false': [0.2222222222222222, nan], 'false': [3.469446951953614e-18, nan]}, {'': [0.08757941298236364, 1.214306433183765e-17], 'true': [nan, 0.08757941298236364], 'true,false': [0.08757941298236364, nan], 'false': [1.214306433183765e-17, nan]}, {'': [0.08269127351439375, -6.938893903907228e-18], 'true': [-1.2335811384723962e-16, 0.22222222222222232], 'true,false': [nan, 0.22222222222222232], 'true,false,false': [0.22222222222222232, nan], 'false': [-6.938893903907228e-18, nan]}, {'': [0.07111085372613697, 5.204170427930421e-18], 'true': [nan, 0.07111085372613697], 'true,false': [-9.868649107779169e-17, 0.22222222222222218], 'true,false,false': [0.22222222222222218, nan], 'false': [5.204170427930421e-18, nan]}, {'': [0.06523701304857692, 6.938893903907228e-18], 'true': [6.167905692361981e-17, 0.22222222222222218], 'true,false': [0.22222222222222218, nan], 'true,false,true': [nan, 0.22222222222222218], 'false': [6.938893903907228e-18, nan]}, {'': [0.06208678062364401, -1.734723475976807e-18], 'true': [nan, 0.06208678062364401], 'true,false': [-3.700743415417188e-17, 0.2222222222222222], 'true,false,false': [0.2222222222222222, nan], 'false': [-1.734723475976807e-18, nan]}, {'': [0.060260424786807654, 0.0], 'true': [-2.4671622769447922e-17, 0.22222222222222218], 'true,false': [nan, 0.22222222222222218], 'true,false,false': [0.22222222222222218, nan], 'false': [0.0, nan]}, {'': [0.05912023106391726, 0.0], 'true': [nan, 0.05912023106391726], 'true,false': [0.05912023106391726, nan], 'true,false,true': [nan, 0.05912023106391726], 'false': [0.0, nan]}, {'': [0.059735880834506545, 3.469446951953614e-18], 'true': [9.25185853854297e-18, 0.22222222222222218], 'true,false': [nan, 0.22222222222222218], 'true,false,false': [0.22222222222222218, nan], 'false': [3.469446951953614e-18, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;true;genre(B, D).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;true;genre(B, D).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;true;genre(B, E).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;true;genre(B, D).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(B, E).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;true;genre(B, D).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;true;genre(B, D).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.8581489350995123;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | else return 0.19148226843284552;  // std dev = 1.155, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   else return -0.1418510649004878;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7194734122109542;  // std dev = 7.30e-08, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | else return 0.16653882456488173;  // std dev = 1.155, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   else return -0.12544463852839138;  // std dev = 7.45e-09, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.19123909051776852;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else if ( female(A) )
%   | | then return 0.5807058840198793;  // std dev = 0.076, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else return 0.5807058840198793;  // std dev = 0.076, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else return -0.11231637819360635;  // std dev = 1.39e-08, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.41136431414875657;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | else return 0.1253821825099226;  // std dev = 1.000, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   else return -0.10159632948783631;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.3165456186031116;  // std dev = 4.47e-08, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | else return 0.10452571665264603;  // std dev = 0.990, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   else return -0.09269127618926094;  // std dev = 9.13e-09, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.25232731829518545;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | else return 0.08607206235147502;  // std dev = 0.982, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   else return -0.08518475138839685;  // std dev = 1.05e-08, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.2077460634407853;  // std dev = 2.36e-08, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | else return 0.07016216624251687;  // std dev = 0.975, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   else return -0.07877675473109173;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.17561963413337547;  // std dev = 2.58e-08, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | else return 0.056727996307193496;  // std dev = 0.970, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   else return -0.07324622576333704;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B) )
%   | then if ( female(A) )
%   | | then return 0.19677042586751084;  // std dev = 0.135, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else return 0.19677042586751084;  // std dev = 0.135, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | else return -0.23319672465380975;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   else return -0.06842697784420272;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.1280064241038106;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | else return 0.05565647033276581;  // std dev = 0.865, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   else return -0.06419184008202619;  // std dev = 7.45e-09, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */


Results
   AUC ROC   = 0.998942
   AUC PR    = 0.918367
   CLL	      = -0.114551
   Precision = 0.918367 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.957447


Total learning time: 0.734 seconds
Total inference time: 0.743 seconds
AUC ROC: 0.998942


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.141265
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.9
   F1        = 0.947368


Total scoring time: 0.354 seconds
Refined model CLL: -0.141265


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.998942
   AUC PR    = 0.918367
   CLL	      = -0.114551
   Precision = 0.918367 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.957447


Total learning time: 2.225 seconds
Total inference time: 0.743 seconds
AUC ROC: 0.998942
Total revision time: 2.225
Best scored revision CLL: -0.141265


Dataset: 4_cora_imdb, Fold: 4, Type: Transfer (trRDN-B), Time: 00:08:53
{'AUC ROC': 0.998942, 'AUC PR': 0.918367, 'CLL': -0.114551, 'Precision': [0.918367, 0.5], 'Recall': 1.0, 'F1': 0.957447, 'Learning time': 2.225, 'Inference time': 0.743, 'parameter_20': {'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.158784, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 0.757, 'Inference time': 0.889}}


Amount of data: 25
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;title(I, H), venue(I, A).;false;false
0;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
0;false;haswordvenue(A, L), haswordtitle(M, L).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordtitle(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordauthor(I, H).;false;true
2;true,false,false;haswordvenue(A, J), haswordtitle(K, J).;false;false
2;false;haswordvenue(A, L), haswordtitle(M, L).;true;false
2;false,true;haswordauthor(N, L).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;title(E, D), venue(E, B).;false;true
3;true,true,false;title(F, D), venue(F, A).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, A).;false;true
4;true,true,false;title(F, D), venue(F, B).;false;false
4;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
4;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
4;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
4;false,true;haswordauthor(M, K).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, B).;false;true
5;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
5;true,false;haswordvenue(B, H), haswordtitle(I, H).;true;true
5;true,false,true;title(J, I), venue(J, B).;false;false
5;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
5;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;title(E, D), venue(E, A).;false;true
6;true,true,false;title(F, D), venue(F, B).;false;false
6;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
6;true,false,true;title(I, H), venue(I, B).;false;false
6;true,false,false;haswordvenue(A, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;title(F, D), venue(F, A).;false;false
7;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
7;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
7;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
7;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;title(E, D), venue(E, A).;false;true
8;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
8;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
8;true,false,true;title(J, I), venue(J, A).;false;false
8;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
8;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, B).;false;true
9;true,true,false;title(F, D), venue(F, A).;false;false
9;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
9;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
9;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
9;false,true;haswordauthor(M, K).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995122;  // std dev = 0.000, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.30259337954395676;  // std dev = 1.491, 9.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=4 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.14185106490048777;  // std dev = 7.45e-09, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7194734122109543;  // std dev = 7.30e-08, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | else if ( genre(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(F, B) )
%   | | | then return 0.2616318086752123;  // std dev = 1.491, 9.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=4 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.12544463852839138;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A) )
%   | | then return 0.4545381499271804;  // std dev = 1.713, 30.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=25 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.11231637819360636;  // std dev = 3.48e-09, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.4422191678540698;  // std dev = 0.000, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | else if ( genre(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(F, B) )
%   | | | then return 0.1303910261046746;  // std dev = 1.491, 9.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=4 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.10159632948783634;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( genre(B, E) )
%   | | then return 0.337516855252501;  // std dev = 6.32e-08, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.10164544389174912;  // std dev = 1.491, 9.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=4 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.09269127618926093;  // std dev = 2.95e-09, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.26660886273727874;  // std dev = 3.33e-08, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | else if ( movie(E, B) )
%   | | then if ( genre(B, F) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.07839445395321017;  // std dev = 1.491, 9.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=4 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.08518475138839683;  // std dev = 1.39e-08, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( genre(B, E) )
%   | | then return 0.21780474784413112;  // std dev = 0.000, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.060018890453011675;  // std dev = 1.491, 9.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=4 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.07877675473109179;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.18297649970036073;  // std dev = 2.79e-08, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | else if ( genre(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(F, B) )
%   | | | then return 0.04572097953530646;  // std dev = 1.491, 9.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=4 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.07324622576333704;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A) )
%   | | then if ( genre(A, F) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.1204461557274423;  // std dev = 1.522, 30.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=25 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.06842697784420274;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.14188359575448378;  // std dev = 0.000, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | else if ( genre(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(F, A) )
%   | | | then return 0.0052962331678169106;  // std dev = 1.491, 9.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=4 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.0641918400820262;  // std dev = 1.32e-09, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.202032
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 0.737 seconds
Total inference time: 0.881 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 0.984
   AUC PR    = 0.985189
   CLL	      = -0.204906
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.84
   F1        = 0.913043


Total scoring time: 0.394 seconds
Parameter learned model CLL: -0.204906


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 21], 'true,false,false,true': [1.491, 5, 4], 'true,false,false,false': [0.0, 0, 0], 'false,true': [7.45e-09, 20, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [7.3e-08, 0, 21], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [1.491, 5, 4], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 20, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [1.713, 5, 25], 'true,false,false': [0.0, 0, 0], 'false,true': [3.48e-09, 20, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 21], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [1.491, 5, 4], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 20, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [6.32e-08, 0, 21], 'true,false,false,true': [1.491, 5, 4], 'true,false,false,false': [0.0, 0, 0], 'false,true': [2.95e-09, 20, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, B)', 'true,false,true': 'genre(B, F)', 'false': 'movie(G, A)'}, {'true,true': [3.33e-08, 0, 21], 'true,false,true,true': [0.0, 0, 0], 'true,false,true,false': [1.491, 5, 4], 'true,false,false': [0.0, 0, 0], 'false,true': [1.39e-08, 20, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 21], 'true,false,false,true': [1.491, 5, 4], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 20, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, A)'}, {'true,true': [2.79e-08, 0, 21], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [1.491, 5, 4], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 20, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'true,false,true': 'genre(A, F)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 0, 0], 'true,false,true,true': [0.0, 0, 0], 'true,false,true,false': [1.522, 5, 25], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 20, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 21], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [1.491, 5, 4], 'true,false,false,false': [0.0, 0, 0], 'false,true': [1.32e-09, 20, 0], 'false,false': [0.0, 0, 0]}]]
[{'': [0.13888888888888987, 2.7755575615628915e-18], 'true': [nan, 0.13888888888888987], 'true,false': [0.0, 0.2469135802469134], 'true,false,false': [0.2469135802469134, nan], 'false': [2.7755575615628915e-18, nan]}, {'': [0.11809405019899141, 0.0], 'true': [2.5376526277146434e-16, 0.24691358024691354], 'true,false': [nan, 0.24691358024691354], 'true,false,false': [0.24691358024691354, nan], 'false': [0.0, nan]}, {'': [0.09779554206078347, 1.1102230246251566e-17], 'true': [nan, 0.09779554206078347], 'true,false': [0.09779554206078347, nan], 'false': [1.1102230246251566e-17, nan]}, {'': [0.09449379997131886, -1.3877787807814458e-18], 'true': [-1.691768418476429e-16, 0.24691358024691354], 'true,false': [nan, 0.24691358024691354], 'true,false,false': [0.24691358024691354, nan], 'false': [-1.3877787807814458e-18, nan]}, {'': [0.08575749184050994, 6.938893903907228e-18], 'true': [nan, 0.08575749184050994], 'true,false': [1.9032394707859825e-16, 0.24691358024691365], 'true,false,false': [0.24691358024691365, nan], 'false': [6.938893903907228e-18, nan]}, {'': [0.08151325344560073, 9.714451465470119e-18], 'true': [5.2867763077388404e-17, 0.2469135802469136], 'true,false': [0.2469135802469136, nan], 'true,false,true': [nan, 0.2469135802469136], 'false': [9.714451465470119e-18, nan]}, {'': [0.0793023132005307, 0.0], 'true': [nan, 0.0793023132005307], 'true,false': [-5.28677630773884e-18, 0.24691358024691365], 'true,false,false': [0.24691358024691365, nan], 'false': [0.0, nan]}, {'': [0.07803028041538784, -1.3877787807814458e-18], 'true': [3.700743415417188e-17, 0.24691358024691354], 'true,false': [nan, 0.24691358024691354], 'true,false,false': [0.24691358024691354, nan], 'false': [-1.3877787807814458e-18, nan]}, {'': [0.07722432304310775, -2.7755575615628915e-18], 'true': [nan, 0.07722432304310775], 'true,false': [0.07722432304310775, nan], 'true,false,true': [nan, 0.07722432304310775], 'false': [-2.7755575615628915e-18, nan]}, {'': [0.07799185667393418, 2.0816681711721684e-18], 'true': [-7.93016446160826e-18, 0.2469135802469136], 'true,false': [nan, 0.2469135802469136], 'true,false,false': [0.2469135802469136, nan], 'false': [2.0816681711721684e-18, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;true;genre(B, D).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;true;genre(B, D).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;true;genre(B, E).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;true;genre(B, D).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(B, E).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;true;genre(B, D).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;true;genre(B, D).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.8581489350995122;  // std dev = 0.000, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | else if ( actor(B) )
%   | | then return -0.14185106490048777;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.8581489350995122;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else return -0.14185106490048777;  // std dev = 7.45e-09, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7194734122109543;  // std dev = 7.30e-08, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | else if ( actor(B) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.7194734122109545;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else return -0.12544463852839138;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B) )
%   | then return 0.5553664367462846;  // std dev = 0.000, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | else return -0.11231637819360638;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else return -0.11231637819360636;  // std dev = 1.49e-08, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.41751358415830986;  // std dev = 4.71e-08, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | else if ( actor(B) )
%   | | then return -0.10159632948783633;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.41751358415830997;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else return -0.10159632948783634;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.3207118471601496;  // std dev = 2.98e-08, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | else if ( actor(B) )
%   | | then return -0.09269127618926098;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.32071184716014967;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else return -0.09269127618926093;  // std dev = 1.18e-08, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.2551722425694895;  // std dev = 1.49e-08, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | else if ( actor(B) )
%   | | then return -0.08518475138839687;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.25517224256948945;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else return -0.08518475138839683;  // std dev = 1.39e-08, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.2097577156325356;  // std dev = 0.000, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | else if ( actor(B) )
%   | | then return -0.07877675473109177;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.20975771563253554;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else return -0.07877675473109179;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.17709649774527744;  // std dev = 0.000, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | else if ( actor(B) )
%   | | then return -0.07324622576333704;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.17709649774527736;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else return -0.07324622576333704;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.06842697784420272;  // std dev = 1.86e-09, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else return 0.15274385809367083;  // std dev = 0.000, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   else return -0.06842697784420274;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.13400703000801117;  // std dev = 0.000, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | else if ( actor(B) )
%   | | then return -0.0641918400820262;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.13400703000801117;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else return -0.0641918400820262;  // std dev = 6.45e-09, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */


Results
   AUC ROC   = 0.998942
   AUC PR    = 0.918367
   CLL	      = -0.068112
   Precision = 0.918367 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.957447


Total learning time: 0.87 seconds
Total inference time: 0.76 seconds
AUC ROC: 0.998942


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.094637
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 0.372 seconds
Refined model CLL: -0.094637


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.998942
   AUC PR    = 0.918367
   CLL	      = -0.068112
   Precision = 0.918367 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.957447


Total learning time: 2.3729999999999998 seconds
Total inference time: 0.76 seconds
AUC ROC: 0.998942
Total revision time: 2.3729999999999998
Best scored revision CLL: -0.094637


Dataset: 4_cora_imdb, Fold: 4, Type: Transfer (trRDN-B), Time: 00:08:58
{'AUC ROC': 0.998942, 'AUC PR': 0.918367, 'CLL': -0.068112, 'Precision': [0.918367, 0.5], 'Recall': 1.0, 'F1': 0.957447, 'Learning time': 2.3729999999999998, 'Inference time': 0.76, 'parameter_25': {'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.202032, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 0.737, 'Inference time': 0.881}}


Starting fold 5

Target train facts examples: 915
Target train pos examples: 337
Target train neg examples: 12165

Target test facts examples: 163
Target test pos	 examples: 45
Target test neg examples: 2071

Amount of data: 5
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;title(I, H), venue(I, A).;false;false
0;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
0;false;haswordvenue(A, L), haswordtitle(M, L).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordtitle(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordauthor(I, H).;false;true
2;true,false,false;haswordvenue(A, J), haswordtitle(K, J).;false;false
2;false;haswordvenue(A, L), haswordtitle(M, L).;true;false
2;false,true;haswordauthor(N, L).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;title(E, D), venue(E, B).;false;true
3;true,true,false;title(F, D), venue(F, A).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, A).;false;true
4;true,true,false;title(F, D), venue(F, B).;false;false
4;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
4;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
4;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
4;false,true;haswordauthor(M, K).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, B).;false;true
5;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
5;true,false;haswordvenue(B, H), haswordtitle(I, H).;true;true
5;true,false,true;title(J, I), venue(J, B).;false;false
5;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
5;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;title(E, D), venue(E, A).;false;true
6;true,true,false;title(F, D), venue(F, B).;false;false
6;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
6;true,false,true;title(I, H), venue(I, B).;false;false
6;true,false,false;haswordvenue(A, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;title(F, D), venue(F, A).;false;false
7;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
7;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
7;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
7;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;title(E, D), venue(E, A).;false;true
8;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
8;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
8;true,false,true;title(J, I), venue(J, A).;false;false
8;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
8;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, B).;false;true
9;true,true,false;title(F, D), venue(F, A).;false;false
9;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
9;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
9;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
9;false,true;haswordauthor(M, K).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14185106490048777;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995121;  // std dev = 2.11e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.5248156017661788;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.14185106490048777;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.508243899526118;  // std dev = 0.732, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | else if ( genre(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(F, B) )
%   | | | then return 0.448295606241962;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.12544463852839138;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1925372682092009;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( movie(E, A) )
%   | | then return 0.48454902138745176;  // std dev = 0.870, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.11231637819360639;  // std dev = 1.86e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.3243606620580961;  // std dev = 0.564, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | else if ( genre(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(F, B) )
%   | | | then return 0.251425435659778;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.1015963294878363;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.21386496419643714;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( genre(B, E) )
%   | | then return 0.4072603703285081;  // std dev = 7.45e-09, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.18937960823106528;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.09269127618926094;  // std dev = 1.32e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.19030005119994975;  // std dev = 0.428, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | else if ( movie(E, B) )
%   | | then if ( genre(B, F) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.142070217855965;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.08518475138839687;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.20992978816319682;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( genre(B, E) )
%   | | then return 0.27431022555494444;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.1068210582479973;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.07877675473109173;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.12308672214854023;  // std dev = 0.347, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | else if ( genre(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(F, B) )
%   | | | then return 0.08069026407235506;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.07324622576333704;  // std dev = 9.31e-10, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.19588858991210534;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( movie(E, A) )
%   | | then if ( genre(A, F) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.1319186792185342;  // std dev = 0.835, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.06842697784420272;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.09486179141919687;  // std dev = 0.302, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | else if ( genre(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(F, A) )
%   | | | then return 0.030222110750400415;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.0641918400820262;  // std dev = 9.31e-10, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 0.97178
   AUC PR    = 0.824078
   CLL	      = -0.307254
   Precision = 0.078809 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.146104


Total learning time: 0.592 seconds
Total inference time: 0.909 seconds
AUC ROC: 0.97178


Results scoring model
   AUC ROC   = 0.96
   AUC PR    = 0.961111
   CLL	      = -0.285236
   Precision = 0.833333 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.909091


Total scoring time: 0.329 seconds
Parameter learned model CLL: -0.285236


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 1, 0], 'true,false,true': [2.11e-08, 0, 3], 'true,false,false,true': [0.816, 1, 2], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 3, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.732, 1, 3], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.816, 1, 2], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 3, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.0, 1, 0], 'true,false,true': [0.87, 1, 5], 'true,false,false': [0.0, 0, 0], 'false,true': [1.86e-09, 3, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.564, 1, 3], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.816, 1, 2], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 3, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 1, 0], 'true,false,true': [7.45e-09, 0, 3], 'true,false,false,true': [0.816, 1, 2], 'true,false,false,false': [0.0, 0, 0], 'false,true': [1.32e-09, 3, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, B)', 'true,false,true': 'genre(B, F)', 'false': 'movie(G, A)'}, {'true,true': [0.428, 1, 3], 'true,false,true,true': [0.0, 0, 0], 'true,false,true,false': [0.816, 1, 2], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 3, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 1, 0], 'true,false,true': [0.0, 0, 3], 'true,false,false,true': [0.816, 1, 2], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 3, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, A)'}, {'true,true': [0.347, 1, 3], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.816, 1, 2], 'true,false,false,false': [0.0, 0, 0], 'false,true': [9.31e-10, 3, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'true,false,true': 'genre(A, F)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 1, 0], 'true,false,true,true': [0.0, 0, 0], 'true,false,true,false': [0.835, 1, 5], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 3, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.302, 1, 3], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.816, 1, 2], 'true,false,false,false': [0.0, 0, 0], 'false,true': [9.31e-10, 3, 0], 'false,false': [0.0, 0, 0]}]]
[{'': [0.20408163265306106, 0.0], 'true': [0.0, 0.1388888888888887], 'true,false': [1.4802973661668753e-16, 0.22222222222222224], 'true,false,false': [0.22222222222222224, nan], 'false': [0.0, nan]}, {'': [0.17260604962287843, 0.0], 'true': [0.13385372108722043, 0.2222222222222222], 'true,false': [nan, 0.2222222222222222], 'true,false,false': [0.2222222222222222, nan], 'false': [0.0, nan]}, {'': [0.16417089742957652, 2.3129646346357427e-18], 'true': [0.0, 0.12604045030215902], 'true,false': [0.12604045030215902, nan], 'false': [2.3129646346357427e-18, nan]}, {'': [0.14203553161712143, -1.1564823173178713e-18], 'true': [0.07961570769910695, 0.2222222222222222], 'true,false': [nan, 0.2222222222222222], 'true,false,false': [0.2222222222222222, nan], 'false': [-1.1564823173178713e-18, nan]}, {'': [0.13753313273957188, 2.3129646346357427e-18], 'true': [0.0, 0.12297911773415172], 'true,false': [1.850371707708594e-17, 0.2222222222222222], 'true,false,false': [0.2222222222222222, nan], 'false': [2.3129646346357427e-18, nan]}, {'': [0.12194081139661264, 0.0], 'true': [0.04573284606695321, 0.2222222222222222], 'true,false': [0.2222222222222222, nan], 'true,false,true': [nan, 0.2222222222222222], 'false': [0.0, nan]}, {'': [0.12088976991667547, 0.0], 'true': [0.0, 0.11812426640240471], 'true,false': [-9.25185853854297e-18, 0.2222222222222222], 'true,false,false': [0.2222222222222222, nan], 'false': [0.0, nan]}, {'': [0.1128565267198381, 1.1564823173178713e-18], 'true': [0.03006191523987613, 0.2222222222222222], 'true,false': [nan, 0.2222222222222222], 'true,false,false': [0.2222222222222222, nan], 'false': [1.1564823173178713e-18, nan]}, {'': [0.11267564366151898, -5.782411586589357e-19], 'true': [0.0, 0.11610383107726441], 'true,false': [0.11610383107726441, nan], 'true,false,true': [nan, 0.11610383107726441], 'false': [-5.782411586589357e-19, nan]}, {'': [0.10930817577872685, 5.782411586589357e-19], 'true': [0.022831945953120776, 0.2222222222222222], 'true,false': [nan, 0.2222222222222222], 'true,false,false': [0.2222222222222222, nan], 'false': [5.782411586589357e-19, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(A, D).;true;true
0;true,false;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;true;genre(A, D).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;true;genre(A, D).;true;true
4;true,false;genre(B, E).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(A, D).;true;true
6;true,false;genre(B, E).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;true;genre(A, D).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14185106490048777;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995121;  // std dev = 2.11e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.5248156017661788;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   else return -0.14185106490048777;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( female(A) )
%   | then return 0.7505511758931249;  // std dev = 0.062, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else return 0.12521923775261948;  // std dev = 0.731, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   else return -0.12544463852839138;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1398385180259343;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else return 0.4674743040942793;  // std dev = 0.785, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   else return -0.11231637819360639;  // std dev = 2.63e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( female(A) )
%   | then return 0.4728388789534753;  // std dev = 0.083, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else return 0.04228604141282961;  // std dev = 0.683, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   else return -0.1015963294878363;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1285114967496439;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( genre(B, E) )
%   | | then return 0.40606470547080004;  // std dev = 0.208, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.14996722483534056;  // std dev = 0.606, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   else return -0.09269127618926094;  // std dev = 2.63e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( female(A) )
%   | then return 0.3009023039355713;  // std dev = 0.123, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else return -0.00646936834742345;  // std dev = 0.619, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   else return -0.08518475138839687;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.11413676350449906;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( genre(B, E) )
%   | | then return 0.2850004750577867;  // std dev = 0.235, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.07121023980596791;  // std dev = 0.551, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   else return -0.07877675473109173;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( female(A) )
%   | then return 0.215270744572782;  // std dev = 0.132, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else return -0.030540346896805317;  // std dev = 0.574, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   else return -0.07324622576333704;  // std dev = 1.86e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.10030481893172088;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else return 0.1256262775245696;  // std dev = 0.611, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   else return -0.06842697784420272;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( female(A) )
%   | then return 0.16432484088849858;  // std dev = 0.107, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else return -0.04193274138508687;  // std dev = 0.570, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   else return -0.0641918400820262;  // std dev = 1.32e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */


Results
   AUC ROC   = 0.926766
   AUC PR    = 0.462557
   CLL	      = -0.317858
   Precision = 0.140411 at threshold = 0.5
   Recall    = 0.911111
   F1        = 0.243323


Total learning time: 0.71 seconds
Total inference time: 0.744 seconds
AUC ROC: 0.926766


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.192955
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 0.315 seconds
Refined model CLL: -0.192955


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.926766
   AUC PR    = 0.462557
   CLL	      = -0.317858
   Precision = 0.140411 at threshold = 0.5
   Recall    = 0.911111
   F1        = 0.243323


Total learning time: 1.946 seconds
Total inference time: 0.744 seconds
AUC ROC: 0.926766
Total revision time: 1.946
Best scored revision CLL: -0.192955


Dataset: 4_cora_imdb, Fold: 5, Type: Transfer (trRDN-B), Time: 00:09:02
{'AUC ROC': 0.926766, 'AUC PR': 0.462557, 'CLL': -0.317858, 'Precision': [0.140411, 0.5], 'Recall': 0.911111, 'F1': 0.243323, 'Learning time': 1.946, 'Inference time': 0.744, 'parameter_5': {'AUC ROC': 0.97178, 'AUC PR': 0.824078, 'CLL': -0.307254, 'Precision': [0.078809, 0.5], 'Recall': 1.0, 'F1': 0.146104, 'Learning time': 0.592, 'Inference time': 0.909}}


Amount of data: 10
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;title(I, H), venue(I, A).;false;false
0;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
0;false;haswordvenue(A, L), haswordtitle(M, L).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordtitle(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordauthor(I, H).;false;true
2;true,false,false;haswordvenue(A, J), haswordtitle(K, J).;false;false
2;false;haswordvenue(A, L), haswordtitle(M, L).;true;false
2;false,true;haswordauthor(N, L).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;title(E, D), venue(E, B).;false;true
3;true,true,false;title(F, D), venue(F, A).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, A).;false;true
4;true,true,false;title(F, D), venue(F, B).;false;false
4;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
4;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
4;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
4;false,true;haswordauthor(M, K).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, B).;false;true
5;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
5;true,false;haswordvenue(B, H), haswordtitle(I, H).;true;true
5;true,false,true;title(J, I), venue(J, B).;false;false
5;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
5;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;title(E, D), venue(E, A).;false;true
6;true,true,false;title(F, D), venue(F, B).;false;false
6;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
6;true,false,true;title(I, H), venue(I, B).;false;false
6;true,false,false;haswordvenue(A, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;title(F, D), venue(F, A).;false;false
7;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
7;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
7;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
7;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;title(E, D), venue(E, A).;false;true
8;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
8;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
8;true,false,true;title(J, I), venue(J, A).;false;false
8;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
8;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, B).;false;true
9;true,true,false;title(F, D), venue(F, A).;false;false
9;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
9;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
9;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
9;false,true;haswordauthor(M, K).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14185106490048777;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995123;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.19148226843284552;  // std dev = 1.155, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.14185106490048777;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.6255936287954715;  // std dev = 0.797, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | else if ( genre(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(F, B) )
%   | | | then return 0.16653882456488173;  // std dev = 1.155, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.12544463852839138;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.21144163248133876;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( movie(E, A) )
%   | | then return 0.39141861312374876;  // std dev = 1.409, 14.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=10 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.11231637819360638;  // std dev = 1.86e-09, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.4079353093127498;  // std dev = 0.622, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | else if ( genre(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(F, B) )
%   | | | then return 0.07421580980357131;  // std dev = 1.155, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.10159632948783633;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.246055106409335;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( genre(B, E) )
%   | | then return 0.38152120215664315;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.05971561355028541;  // std dev = 1.155, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.09269127618926098;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.24085640485577256;  // std dev = 0.471, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | else if ( movie(E, B) )
%   | | then if ( genre(B, F) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.04768805050641908;  // std dev = 1.155, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.08518475138839687;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.24509195863463237;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( genre(B, E) )
%   | | then return 0.248715619954055;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.0378585902242537;  // std dev = 1.155, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.07877675473109177;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.1598754375315655;  // std dev = 0.384, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | else if ( genre(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(F, B) )
%   | | | then return 0.029917046317223434;  // std dev = 1.155, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.07324622576333704;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.22966938369515008;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( movie(E, A) )
%   | | then if ( genre(A, F) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.11314564098542686;  // std dev = 1.191, 14.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=10 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.06842697784420272;  // std dev = 1.86e-09, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.12468151933163818;  // std dev = 0.335, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | else if ( genre(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(F, A) )
%   | | | then return -0.001140447261038254;  // std dev = 1.155, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.0641918400820262;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 0.97178
   AUC PR    = 0.824078
   CLL	      = -0.154555
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.777778
   F1        = 0.875


Total learning time: 0.658 seconds
Total inference time: 0.882 seconds
AUC ROC: 0.97178


Results scoring model
   AUC ROC   = 0.96
   AUC PR    = 0.967532
   CLL	      = -0.282408
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.8
   F1        = 0.888889


Total scoring time: 0.339 seconds
Parameter learned model CLL: -0.282408


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 1, 0], 'true,false,true': [0.0, 0, 8], 'true,false,false,true': [1.155, 4, 2], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 5, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.797, 1, 8], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [1.155, 4, 2], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 5, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.0, 1, 0], 'true,false,true': [1.409, 4, 10], 'true,false,false': [0.0, 0, 0], 'false,true': [1.86e-09, 5, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.622, 1, 8], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [1.155, 4, 2], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 5, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 1, 0], 'true,false,true': [0.0, 0, 8], 'true,false,false,true': [1.155, 4, 2], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 5, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, B)', 'true,false,true': 'genre(B, F)', 'false': 'movie(G, A)'}, {'true,true': [0.471, 1, 8], 'true,false,true,true': [0.0, 0, 0], 'true,false,true,false': [1.155, 4, 2], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 5, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 1, 0], 'true,false,true': [0.0, 0, 8], 'true,false,false,true': [1.155, 4, 2], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 5, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, A)'}, {'true,true': [0.384, 1, 8], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [1.155, 4, 2], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 5, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'true,false,true': 'genre(A, F)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 1, 0], 'true,false,true,true': [0.0, 0, 0], 'true,false,true,false': [1.191, 4, 10], 'true,false,false': [0.0, 0, 0], 'false,true': [1.86e-09, 5, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.335, 1, 8], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [1.155, 4, 2], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 5, 0], 'false,false': [0.0, 0, 0]}]]
[{'': [0.22222222222222215, -2.7755575615628915e-18], 'true': [0.0, 0.20408163265306115], 'true,false': [-2.220446049250313e-16, 0.22222222222222224], 'true,false,false': [0.22222222222222224, nan], 'false': [-2.7755575615628915e-18, nan]}, {'': [0.18176879000167562, 0.0], 'true': [0.07050730987310382, 0.2222222222222222], 'true,false': [nan, 0.2222222222222222], 'true,false,false': [0.2222222222222222, nan], 'false': [0.0, nan]}, {'': [0.1550168120750757, 0.0], 'true': [0.0, 0.14186007646027457], 'true,false': [0.14186007646027457, nan], 'false': [0.0, nan]}, {'': [0.1413954556959501, 0.0], 'true': [0.04296346293737289, 0.22222222222222224], 'true,false': [nan, 0.22222222222222224], 'true,false,false': [0.22222222222222224, nan], 'false': [0.0, nan]}, {'': [0.12747828779063017, 0.0], 'true': [0.0, 0.12059944304012407], 'true,false': [-5.551115123125783e-17, 0.22222222222222224], 'true,false,false': [0.22222222222222224, nan], 'false': [0.0, nan]}, {'': [0.11263961803968332, 0.0], 'true': [0.02465894333584247, 0.22222222222222224], 'true,false': [0.22222222222222224, nan], 'true,false,true': [nan, 0.22222222222222224], 'false': [0.0, nan]}, {'': [0.10917887311698234, -1.3877787807814458e-18], 'true': [0.0, 0.10612642674498694], 'true,false': [0.0, 0.2222222222222223], 'true,false,false': [0.2222222222222223, nan], 'false': [-1.3877787807814458e-18, nan]}, {'': [0.10279702717269273, -6.938893903907229e-19], 'true': [0.016424557094198364, 0.22222222222222224], 'true,false': [nan, 0.22222222222222224], 'true,false,false': [0.22222222222222224, nan], 'false': [-6.938893903907229e-19, nan]}, {'': [0.1018196644707985, 6.938893903907229e-19], 'true': [0.0, 0.10125768823750114], 'true,false': [0.10125768823750114, nan], 'true,false,true': [nan, 0.10125768823750114], 'false': [6.938893903907229e-19, nan]}, {'': [0.1001894403470712, 0.0], 'true': [0.012501785519404443, 0.22222222222222218], 'true,false': [nan, 0.22222222222222218], 'true,false,false': [0.22222222222222218, nan], 'false': [0.0, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(A, D).;true;true
0;true,false;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;true;genre(A, D).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;true;genre(A, D).;true;true
4;true,false;genre(B, E).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(A, D).;true;true
6;true,false;genre(B, E).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;true;genre(A, D).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14185106490048777;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995123;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return 0.19148226843284552;  // std dev = 1.155, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   else return -0.14185106490048777;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.7422198280150731;  // std dev = 0.144, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | else return -0.15852453472043954;  // std dev = 0.037, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else return -0.12544463852839138;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.10906032026094267;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( director(B) )
%   | | then if ( female(A) )
%   | | | then return 0.6114355465009826;  // std dev = 0.169, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.5497427206538619;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return -0.1459105377484046;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   else return -0.11231637819360638;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then if ( female(A) )
%   | | then return 0.4644369077850552;  // std dev = 0.181, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return 0.41335538682031725;  // std dev = 1.05e-08, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return -0.12270085357155125;  // std dev = 0.027, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else return -0.10159632948783633;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.08849614969513127;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( genre(B, E) )
%   | | then return 0.30891776402135246;  // std dev = 0.033, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return 0.07225906677257092;  // std dev = 0.650, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   else return -0.09269127618926098;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then if ( female(A) )
%   | | then return 0.31247723861743076;  // std dev = 0.215, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return 0.2549498571781823;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return -0.1148026762276396;  // std dev = 0.037, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else return -0.08518475138839687;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.07341104856936664;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( genre(B, E) )
%   | | then return 0.19954226004210318;  // std dev = 0.037, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return 0.04439274412203168;  // std dev = 0.539, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   else return -0.07877675473109177;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then if ( female(A) )
%   | | then return 0.23111633914236868;  // std dev = 0.209, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return 0.17845111393129598;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return -0.10627352705193853;  // std dev = 0.042, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else return -0.07324622576333704;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.062087022822592805;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( actor(B) )
%   | | then return -0.10526203839618718;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else if ( female(A) )
%   | | | then return 0.19428037089435324;  // std dev = 0.184, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.15377069551566058;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return -0.06842697784420272;  // std dev = 1.86e-09, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then if ( female(A) )
%   | | then return 0.1667638145695806;  // std dev = 0.164, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return 0.13480815657571488;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return -0.08831541347949759;  // std dev = 0.033, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else return -0.0641918400820262;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.071676
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 0.862 seconds
Total inference time: 0.854 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.108876
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 0.345 seconds
Refined model CLL: -0.108876


******************************************
Best model found
******************************************
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.071676
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 2.2039999999999997 seconds
Total inference time: 0.854 seconds
AUC ROC: 1.0
Total revision time: 2.2039999999999997
Best scored revision CLL: -0.108876


Dataset: 4_cora_imdb, Fold: 5, Type: Transfer (trRDN-B), Time: 00:09:07
{'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.071676, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 2.2039999999999997, 'Inference time': 0.854, 'parameter_10': {'AUC ROC': 0.97178, 'AUC PR': 0.824078, 'CLL': -0.154555, 'Precision': [1.0, 0.5], 'Recall': 0.777778, 'F1': 0.875, 'Learning time': 0.658, 'Inference time': 0.882}}


Amount of data: 15
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;title(I, H), venue(I, A).;false;false
0;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
0;false;haswordvenue(A, L), haswordtitle(M, L).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordtitle(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordauthor(I, H).;false;true
2;true,false,false;haswordvenue(A, J), haswordtitle(K, J).;false;false
2;false;haswordvenue(A, L), haswordtitle(M, L).;true;false
2;false,true;haswordauthor(N, L).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;title(E, D), venue(E, B).;false;true
3;true,true,false;title(F, D), venue(F, A).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, A).;false;true
4;true,true,false;title(F, D), venue(F, B).;false;false
4;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
4;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
4;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
4;false,true;haswordauthor(M, K).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, B).;false;true
5;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
5;true,false;haswordvenue(B, H), haswordtitle(I, H).;true;true
5;true,false,true;title(J, I), venue(J, B).;false;false
5;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
5;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;title(E, D), venue(E, A).;false;true
6;true,true,false;title(F, D), venue(F, B).;false;false
6;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
6;true,false,true;title(I, H), venue(I, B).;false;false
6;true,false,false;haswordvenue(A, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;title(F, D), venue(F, A).;false;false
7;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
7;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
7;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
7;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;title(E, D), venue(E, A).;false;true
8;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
8;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
8;true,false,true;title(J, I), venue(J, A).;false;false
8;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
8;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, B).;false;true
9;true,true,false;title(F, D), venue(F, A).;false;false
9;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
9;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
9;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
9;false,true;haswordauthor(M, K).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14185106490048777;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995123;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.30259337954395676;  // std dev = 1.491, 9.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=4 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.1418510649004878;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.6490635746493422;  // std dev = 0.809, 12.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=11 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.2616318086752123;  // std dev = 1.491, 9.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=4 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.12544463852839138;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.16384887554122557;  // std dev = 0.073, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else if ( movie(E, A) )
%   | | then return 0.4136455969376843;  // std dev = 1.685, 20.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=15 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.11231637819360639;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.41492182077036005;  // std dev = 0.631, 12.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=11 */
%   | else if ( genre(A, E) )
%   | | then return -0.09698835066611577;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.1391325707492677;  // std dev = 1.491, 9.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=4 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.10159632948783627;  // std dev = 1.32e-09, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.17481947872384113;  // std dev = 0.122, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else if ( genre(B, E) )
%   | | then return 0.3691698236142775;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.10885163325558507;  // std dev = 1.491, 9.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=4 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.09269127618926097;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.24498593854110717;  // std dev = 0.495, 12.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=11 */
%   | else if ( movie(E, B) )
%   | | then if ( genre(B, F) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.06818201081361558;  // std dev = 1.498, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.08518475138839687;  // std dev = 3.73e-09, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.17756573079649668;  // std dev = 0.137, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else if ( genre(B, E) )
%   | | then return 0.2405008298018883;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.06830407610431413;  // std dev = 1.491, 9.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=4 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.07877675473109173;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.1626723228585863;  // std dev = 0.421, 12.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=11 */
%   | else if ( genre(A, E) )
%   | | then return -0.0683486956359184;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.05214550246499311;  // std dev = 1.491, 9.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=4 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.07324622576333704;  // std dev = 9.31e-10, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.16786914461758928;  // std dev = 0.147, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else if ( movie(E, A) )
%   | | then if ( genre(A, F) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.11389172137228964;  // std dev = 1.521, 20.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=15 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.06842697784420272;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.12561389974917095;  // std dev = 0.382, 12.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=11 */
%   | else if ( genre(A, E) )
%   | | then return -0.05475611256779889;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.011935431015682983;  // std dev = 1.491, 9.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=4 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.0641918400820262;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 0.97178
   AUC PR    = 0.824078
   CLL	      = -0.194197
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.777778
   F1        = 0.875


Total learning time: 0.661 seconds
Total inference time: 0.908 seconds
AUC ROC: 0.97178


Results scoring model
   AUC ROC   = 0.955556
   AUC PR    = 0.96054
   CLL	      = -0.291208
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.733333
   F1        = 0.846154


Total scoring time: 0.356 seconds
Parameter learned model CLL: -0.291208


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 2, 0], 'true,false,true': [0.0, 0, 11], 'true,false,false,true': [1.491, 5, 4], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 8, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.809, 1, 11], 'true,false,true': [0.0, 1, 0], 'true,false,false,true': [1.491, 5, 4], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 8, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.073, 2, 0], 'true,false,true': [1.685, 5, 15], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 8, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.631, 1, 11], 'true,false,true': [0.0, 1, 0], 'true,false,false,true': [1.491, 5, 4], 'true,false,false,false': [0.0, 0, 0], 'false,true': [1.32e-09, 8, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.122, 2, 0], 'true,false,true': [0.0, 0, 11], 'true,false,false,true': [1.491, 5, 4], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 8, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, B)', 'true,false,true': 'genre(B, F)', 'false': 'movie(G, A)'}, {'true,true': [0.495, 1, 11], 'true,false,true,true': [0.0, 0, 0], 'true,false,true,false': [1.498, 6, 4], 'true,false,false': [0.0, 0, 0], 'false,true': [3.73e-09, 8, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.137, 2, 0], 'true,false,true': [0.0, 0, 11], 'true,false,false,true': [1.491, 5, 4], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 8, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, A)'}, {'true,true': [0.421, 1, 11], 'true,false,true': [0.0, 1, 0], 'true,false,false,true': [1.491, 5, 4], 'true,false,false,false': [0.0, 0, 0], 'false,true': [9.31e-10, 8, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'true,false,true': 'genre(A, F)', 'false': 'movie(G, A)'}, {'true,true': [0.147, 2, 0], 'true,false,true,true': [0.0, 0, 0], 'true,false,true,false': [1.521, 5, 15], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 8, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.382, 1, 11], 'true,false,true': [0.0, 1, 0], 'true,false,false,true': [1.491, 5, 4], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 8, 0], 'false,false': [0.0, 0, 0]}]]
[{'': [0.21694214876033016, -6.938893903907228e-18], 'true': [0.0, 0.18749999999999964], 'true,false': [-1.6148698540002277e-16, 0.2469135802469134], 'true,false,false': [0.2469135802469134, nan], 'false': [-6.938893903907228e-18, nan]}, {'': [0.18190821030919063, 0.0], 'true': [0.054532997479978786, 0.235706758060401], 'true,false': [0.0, 0.24691358024691354], 'true,false,false': [0.24691358024691354, nan], 'false': [0.0, nan]}, {'': [0.15691508985299027, -1.734723475976807e-18], 'true': [0.0026555982828823828, 0.14202286939693798], 'true,false': [0.14202286939693798, nan], 'false': [-1.734723475976807e-18, nan]}, {'': [0.14360029932746285, 1.734723475976807e-18], 'true': [0.03315456503884077, 0.22724000027992677], 'true,false': [0.0, 0.24691358024691368], 'true,false,false': [0.24691358024691368, nan], 'false': [1.734723475976807e-18, nan]}, {'': [0.13198736650801685, 0.0], 'true': [0.007395970429271301, 0.1278830872684382], 'true,false': [0.0, 0.24691358024691365], 'true,false,false': [0.24691358024691365, nan], 'false': [0.0, nan]}, {'': [0.1209242866448668, 1.734723475976807e-18], 'true': [0.02038485621922262, 0.22452089650480272], 'true,false': [0.22452089650480272, nan], 'true,false,true': [nan, 0.22452089650480272], 'false': [1.734723475976807e-18, nan]}, {'': [0.11812344390030673, 0.0], 'true': [0.00941022471443008, 0.11844991230214688], 'true,false': [-4.0371746350005693e-17, 0.24691358024691348], 'true,false,false': [0.24691358024691348, nan], 'false': [0.0, nan]}, {'': [0.11339551011815262, 8.673617379884035e-19], 'true': [0.014788153725893996, 0.22352891888206053], 'true,false': [0.0, 0.24691358024691354], 'true,false,false': [0.24691358024691354, nan], 'false': [8.673617379884035e-19, nan]}, {'': [0.1126497567742983, 0.0], 'true': [0.010763310840144372, 0.11562120267649853], 'true,false': [0.11562120267649853, nan], 'true,false,true': [nan, 0.11562120267649853], 'false': [0.0, nan]}, {'': [0.1114006782036694, 0.0], 'true': [0.012132377379964802, 0.22262252080092146], 'true,false': [0.0, 0.24691358024691348], 'true,false,false': [0.24691358024691348, nan], 'false': [0.0, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(A, D).;true;true
0;true,false;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;true;genre(B, D).;true;true
1;true,false;genre(A, E).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;true;genre(B, D).;true;true
3;true,false;genre(A, E).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;true;genre(A, D).;true;true
4;true,false;genre(B, E).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(A, D).;true;true
6;true,false;genre(B, E).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;true;genre(B, D).;true;true
7;true,false;genre(A, E).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;true;genre(B, D).;true;true
9;true,false;genre(A, E).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14185106490048777;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995123;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | else if ( actor(B) )
%   | | | then return -0.14185106490048777;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | | else return 0.8581489350995122;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else return -0.1418510649004878;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.7194734122109544;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return 0.6138586558685362;  // std dev = 0.279, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( actor(B) )
%   | | | then return -0.12544463852839138;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | | else return 0.7194734122109545;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else return -0.12544463852839138;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.5674551484676194;  // std dev = 0.050, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else return -0.12619855819415524;  // std dev = 0.090, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   else return -0.11231637819360639;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.41457662230009606;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return 0.3616967338585154;  // std dev = 0.208, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | else if ( genre(A, E) )
%   | | then return -0.10033622972149853;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( actor(B) )
%   | | | then return -0.10033622972149851;  // std dev = 4.56e-09, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | | else return 0.41457662230009606;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else return -0.10159632948783627;  // std dev = 3.73e-09, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1713920483152079;  // std dev = 0.113, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else if ( genre(B, E) )
%   | | then return 0.34122134074310534;  // std dev = 0.056, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | else if ( actor(B) )
%   | | | then return -0.0916352076035501;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | | else return 0.3187213656297754;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else return -0.09269127618926097;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.2650997067882705;  // std dev = 0.056, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else return -0.10286811417149222;  // std dev = 0.127, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   else return -0.08518475138839687;  // std dev = 3.73e-09, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1371826145912016;  // std dev = 0.093, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else if ( genre(B, E) )
%   | | then return 0.22037396551453928;  // std dev = 0.043, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | else if ( actor(B) )
%   | | | then return -0.07668008061869862;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | | else return 0.2069391456376395;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else return -0.07877675473109173;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.1698981687744311;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return 0.1465241668843753;  // std dev = 0.124, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | else if ( genre(A, E) )
%   | | then return -0.06266290871362554;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( actor(B) )
%   | | | then return -0.07142429107962592;  // std dev = 1.86e-09, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | | else return 0.1750264332102318;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else return -0.07324622576333704;  // std dev = 2.63e-09, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.1596588078773563;  // std dev = 0.044, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else return -0.08541312108883058;  // std dev = 0.129, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   else return -0.06842697784420272;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.12831878439679267;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return 0.10742437424495407;  // std dev = 0.113, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | else if ( genre(A, E) )
%   | | then return -0.05450844573482461;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( actor(B) )
%   | | | then return -0.06169620755892589;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | | else return 0.1318042228877787;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else return -0.0641918400820262;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063759
   Precision = 0.978261 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.989011


Total learning time: 0.953 seconds
Total inference time: 0.866 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.103417
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 0.372 seconds
Refined model CLL: -0.103417


******************************************
Best model found
******************************************
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063759
   Precision = 0.978261 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.989011


Total learning time: 2.3419999999999996 seconds
Total inference time: 0.866 seconds
AUC ROC: 1.0
Total revision time: 2.3419999999999996
Best scored revision CLL: -0.103417


Dataset: 4_cora_imdb, Fold: 5, Type: Transfer (trRDN-B), Time: 00:09:11
{'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.063759, 'Precision': [0.978261, 0.5], 'Recall': 1.0, 'F1': 0.989011, 'Learning time': 2.3419999999999996, 'Inference time': 0.866, 'parameter_15': {'AUC ROC': 0.97178, 'AUC PR': 0.824078, 'CLL': -0.194197, 'Precision': [1.0, 0.5], 'Recall': 0.777778, 'F1': 0.875, 'Learning time': 0.661, 'Inference time': 0.908}}


Amount of data: 20
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;title(I, H), venue(I, A).;false;false
0;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
0;false;haswordvenue(A, L), haswordtitle(M, L).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordtitle(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordauthor(I, H).;false;true
2;true,false,false;haswordvenue(A, J), haswordtitle(K, J).;false;false
2;false;haswordvenue(A, L), haswordtitle(M, L).;true;false
2;false,true;haswordauthor(N, L).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;title(E, D), venue(E, B).;false;true
3;true,true,false;title(F, D), venue(F, A).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, A).;false;true
4;true,true,false;title(F, D), venue(F, B).;false;false
4;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
4;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
4;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
4;false,true;haswordauthor(M, K).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, B).;false;true
5;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
5;true,false;haswordvenue(B, H), haswordtitle(I, H).;true;true
5;true,false,true;title(J, I), venue(J, B).;false;false
5;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
5;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;title(E, D), venue(E, A).;false;true
6;true,true,false;title(F, D), venue(F, B).;false;false
6;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
6;true,false,true;title(I, H), venue(I, B).;false;false
6;true,false,false;haswordvenue(A, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;title(F, D), venue(F, A).;false;false
7;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
7;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
7;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
7;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;title(E, D), venue(E, A).;false;true
8;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
8;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
8;true,false,true;title(J, I), venue(J, A).;false;false
8;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
8;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, B).;false;true
9;true,true,false;title(F, D), venue(F, A).;false;false
9;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
9;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
9;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
9;false,true;haswordauthor(M, K).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14185106490048777;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995123;  // std dev = 0.000, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.3126943896449669;  // std dev = 1.651, 11.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=5 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.1418510649004878;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.6666660340397451;  // std dev = 0.818, 16.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.27021896952830904;  // std dev = 1.651, 11.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=5 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.12544463852839138;  // std dev = 5.27e-09, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1653436653191577;  // std dev = 0.075, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else if ( movie(E, A) )
%   | | then return 0.4235590600166397;  // std dev = 1.863, 26.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=20 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.11231637819360636;  // std dev = 2.63e-09, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.4220720261441844;  // std dev = 0.634, 16.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   | else if ( genre(A, E) )
%   | | then return -0.09685751341304191;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.14313372280800693;  // std dev = 1.651, 11.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=5 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.1015963294878363;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.17701872918777928;  // std dev = 0.125, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else if ( genre(B, E) )
%   | | then return 0.36113390629048653;  // std dev = 1.49e-08, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.11164466673020104;  // std dev = 1.651, 11.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=5 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.09269127618926097;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.25042394826259456;  // std dev = 0.499, 16.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   | else if ( movie(E, B) )
%   | | then if ( genre(B, F) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.07261106049749438;  // std dev = 1.659, 12.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=5 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.08518475138839687;  // std dev = 5.27e-09, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.18025233875707095;  // std dev = 0.141, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else if ( genre(B, E) )
%   | | then return 0.23469207922964663;  // std dev = 0.000, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.06901475193974078;  // std dev = 1.651, 11.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=5 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.07877675473109172;  // std dev = 3.73e-09, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.16766701576151505;  // std dev = 0.426, 16.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   | else if ( genre(A, E) )
%   | | then return -0.06823284582738387;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.05254177972722401;  // std dev = 1.651, 11.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=5 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.07324622576333704;  // std dev = 1.32e-09, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.17068606556735272;  // std dev = 0.151, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else if ( movie(E, A) )
%   | | then if ( genre(A, F) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.11503885031518478;  // std dev = 1.684, 26.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=20 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.06842697784420272;  // std dev = 2.63e-09, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.1296050180026723;  // std dev = 0.386, 16.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   | else if ( genre(A, E) )
%   | | then return -0.054522542753876385;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.01168049194794825;  // std dev = 1.651, 11.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=5 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.06419184008202619;  // std dev = 1.61e-09, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 0.97178
   AUC PR    = 0.824078
   CLL	      = -0.198587
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.777778
   F1        = 0.875


Total learning time: 0.682 seconds
Total inference time: 0.915 seconds
AUC ROC: 0.97178


Results scoring model
   AUC ROC   = 0.9625
   AUC PR    = 0.966139
   CLL	      = -0.273236
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.75
   F1        = 0.857143


Total scoring time: 0.367 seconds
Parameter learned model CLL: -0.273236


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 2, 0], 'true,false,true': [0.0, 0, 15], 'true,false,false,true': [1.651, 6, 5], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 12, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.818, 1, 15], 'true,false,true': [0.0, 1, 0], 'true,false,false,true': [1.651, 6, 5], 'true,false,false,false': [0.0, 0, 0], 'false,true': [5.27e-09, 12, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.075, 2, 0], 'true,false,true': [1.863, 6, 20], 'true,false,false': [0.0, 0, 0], 'false,true': [2.63e-09, 12, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.634, 1, 15], 'true,false,true': [0.0, 1, 0], 'true,false,false,true': [1.651, 6, 5], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 12, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.125, 2, 0], 'true,false,true': [1.49e-08, 0, 15], 'true,false,false,true': [1.651, 6, 5], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 12, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, B)', 'true,false,true': 'genre(B, F)', 'false': 'movie(G, A)'}, {'true,true': [0.499, 1, 15], 'true,false,true,true': [0.0, 0, 0], 'true,false,true,false': [1.659, 7, 5], 'true,false,false': [0.0, 0, 0], 'false,true': [5.27e-09, 12, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.141, 2, 0], 'true,false,true': [0.0, 0, 15], 'true,false,false,true': [1.651, 6, 5], 'true,false,false,false': [0.0, 0, 0], 'false,true': [3.73e-09, 12, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, A)'}, {'true,true': [0.426, 1, 15], 'true,false,true': [0.0, 1, 0], 'true,false,false,true': [1.651, 6, 5], 'true,false,false,false': [0.0, 0, 0], 'false,true': [1.32e-09, 12, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'true,false,true': 'genre(A, F)', 'false': 'movie(G, A)'}, {'true,true': [0.151, 2, 0], 'true,false,true,true': [0.0, 0, 0], 'true,false,true,false': [1.684, 6, 20], 'true,false,false': [0.0, 0, 0], 'false,true': [2.63e-09, 12, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.386, 1, 15], 'true,false,true': [0.0, 1, 0], 'true,false,false,true': [1.651, 6, 5], 'true,false,false,false': [0.0, 0, 0], 'false,true': [1.61e-09, 12, 0], 'false,false': [0.0, 0, 0]}]]
[{'': [0.20408163265306145, -1.1564823173178714e-17], 'true': [0.0, 0.17751479289940847], 'true,false': [-2.3684757858670006e-16, 0.24793388429752045], 'true,false,false': [0.24793388429752045, nan], 'false': [-1.1564823173178714e-17, nan]}, {'': [0.1715895425873048, 2.3129646346357427e-18], 'true': [0.041829287839756535, 0.2392313842042891], 'true,false': [0.0, 0.2479338842975206], 'true,false,false': [0.2479338842975206, nan], 'false': [2.3129646346357427e-18, nan]}, {'': [0.14715740405191866, 6.938893903907228e-18], 'true': [0.0028118931798956533, 0.13348901775194746], 'true,false': [0.13348901775194746, nan], 'false': [6.938893903907228e-18, nan]}, {'': [0.1355131866261519, 0.0], 'true': [0.02509505532766551, 0.2316724059400326], 'true,false': [0.0, 0.24793388429752056], 'true,false,false': [0.24793388429752056, nan], 'false': [0.0, nan]}, {'': [0.12447983738430428, 2.3129646346357427e-18], 'true': [0.007798550536559382, 0.12008801215590512], 'true,false': [1.4802973661668754e-17, 0.24793388429752075], 'true,false,false': [0.24793388429752075, nan], 'false': [2.3129646346357427e-18, nan]}, {'': [0.11487554968362002, 2.3129646346357427e-18], 'true': [0.015533610622586028, 0.22926436954288576], 'true,false': [0.22926436954288576, nan], 'true,false,true': [nan, 0.22926436954288576], 'false': [2.3129646346357427e-18, nan]}, {'': [0.11222051444868304, 1.1564823173178713e-18], 'true': [0.009925890716522022, 0.11159492910865201], 'true,false': [-6.661338147750939e-17, 0.2479338842975207], 'true,false,false': [0.2479338842975207, nan], 'false': [1.1564823173178713e-18, nan]}, {'': [0.10820658994635404, 1.1564823173178713e-18], 'true': [0.011354523018131338, 0.2283869745779801], 'true,false': [0.0, 0.24793388429752064], 'true,false,false': [0.24793388429752064, nan], 'false': [1.1564823173178713e-18, nan]}, {'': [0.10747991979521733, 5.782411586589357e-19], 'true': [0.011377536556228987, 0.10904107313102368], 'true,false': [0.10904107313102368, nan], 'true,false,true': [nan, 0.10904107313102368], 'false': [5.782411586589357e-19, nan]}, {'': [0.10660855579454222, 2.8912057932946786e-18], 'true': [0.00932884523348318, 0.2276075276882901], 'true,false': [0.0, 0.24793388429752072], 'true,false,false': [0.24793388429752072, nan], 'false': [2.8912057932946786e-18, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(A, D).;true;true
0;true,false;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;true;genre(B, D).;true;true
1;true,false;genre(A, E).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;true;genre(B, D).;true;true
3;true,false;genre(A, E).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;true;genre(A, D).;true;true
4;true,false;genre(B, E).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(A, D).;true;true
6;true,false;genre(B, E).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;true;genre(B, D).;true;true
7;true,false;genre(A, E).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;true;genre(B, D).;true;true
9;true,false;genre(A, E).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14185106490048777;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995123;  // std dev = 0.000, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else if ( actor(B) )
%   | | | then return -0.1418510649004878;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | | else return 0.8581489350995122;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return -0.1418510649004878;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.7194734122109544;  // std dev = 2.11e-08, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return 0.6349816071370198;  // std dev = 0.253, 10.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( actor(B) )
%   | | | then return -0.12544463852839138;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | | else return 0.7194734122109545;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return -0.12544463852839138;  // std dev = 5.27e-09, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.5647059667846935;  // std dev = 0.046, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | else return -0.12490322699685912;  // std dev = 0.094, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   else return -0.11231637819360636;  // std dev = 9.13e-09, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.4152440128327788;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return 0.3730237917702447;  // std dev = 0.189, 10.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | else if ( genre(A, E) )
%   | | then return -0.10045321835419617;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( actor(B) )
%   | | | then return -0.10045321835419617;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | | else return 0.4152440128327788;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return -0.1015963294878363;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.17464097668980783;  // std dev = 0.117, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else if ( genre(B, E) )
%   | | then return 0.33605872457124025;  // std dev = 0.053, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else if ( actor(B) )
%   | | | then return -0.09173333792161555;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | | else return 0.3191735722069644;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return -0.09269127618926097;  // std dev = 5.27e-09, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.262783887282965;  // std dev = 0.052, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | else return -0.10124983885867744;  // std dev = 0.133, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   else return -0.08518475138839687;  // std dev = 5.27e-09, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1397917626778266;  // std dev = 0.097, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else if ( genre(B, E) )
%   | | then return 0.2176694909199289;  // std dev = 0.041, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else if ( actor(B) )
%   | | | then return -0.07687135257973243;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | | else return 0.20758739564614928;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return -0.07877675473109172;  // std dev = 3.73e-09, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.17163490329813058;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return 0.15273865793853914;  // std dev = 0.113, 10.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | else if ( genre(A, E) )
%   | | then return -0.06248333063542673;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( actor(B) )
%   | | | then return -0.07159075557724222;  // std dev = 2.63e-09, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | | else return 0.17550302670951445;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return -0.07324622576333704;  // std dev = 3.73e-09, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.15804461359989047;  // std dev = 0.040, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | else return -0.08391426328563925;  // std dev = 0.136, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   else return -0.06842697784420272;  // std dev = 2.63e-09, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.129683062693422;  // std dev = 5.27e-09, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return 0.11262654503287792;  // std dev = 0.103, 10.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | else if ( genre(A, E) )
%   | | then return -0.05443721241334997;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( actor(B) )
%   | | | then return -0.061918856119998374;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | | else return 0.13231252933595494;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return -0.06419184008202619;  // std dev = 5.89e-09, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.0638
   Precision = 0.978261 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.989011


Total learning time: 0.996 seconds
Total inference time: 0.808 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.101475
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 0.388 seconds
Refined model CLL: -0.101475


******************************************
Best model found
******************************************
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.0638
   Precision = 0.978261 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.989011


Total learning time: 2.433 seconds
Total inference time: 0.808 seconds
AUC ROC: 1.0
Total revision time: 2.433
Best scored revision CLL: -0.101475


Dataset: 4_cora_imdb, Fold: 5, Type: Transfer (trRDN-B), Time: 00:09:16
{'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.0638, 'Precision': [0.978261, 0.5], 'Recall': 1.0, 'F1': 0.989011, 'Learning time': 2.433, 'Inference time': 0.808, 'parameter_20': {'AUC ROC': 0.97178, 'AUC PR': 0.824078, 'CLL': -0.198587, 'Precision': [1.0, 0.5], 'Recall': 0.777778, 'F1': 0.875, 'Learning time': 0.682, 'Inference time': 0.915}}


Amount of data: 25
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;title(I, H), venue(I, A).;false;false
0;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
0;false;haswordvenue(A, L), haswordtitle(M, L).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordtitle(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordauthor(I, H).;false;true
2;true,false,false;haswordvenue(A, J), haswordtitle(K, J).;false;false
2;false;haswordvenue(A, L), haswordtitle(M, L).;true;false
2;false,true;haswordauthor(N, L).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;title(E, D), venue(E, B).;false;true
3;true,true,false;title(F, D), venue(F, A).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, A).;false;true
4;true,true,false;title(F, D), venue(F, B).;false;false
4;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
4;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
4;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
4;false,true;haswordauthor(M, K).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, B).;false;true
5;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
5;true,false;haswordvenue(B, H), haswordtitle(I, H).;true;true
5;true,false,true;title(J, I), venue(J, B).;false;false
5;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
5;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;title(E, D), venue(E, A).;false;true
6;true,true,false;title(F, D), venue(F, B).;false;false
6;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
6;true,false,true;title(I, H), venue(I, B).;false;false
6;true,false,false;haswordvenue(A, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;title(F, D), venue(F, A).;false;false
7;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
7;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
7;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
7;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;title(E, D), venue(E, A).;false;true
8;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
8;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
8;true,false,true;title(J, I), venue(J, A).;false;false
8;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
8;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, B).;false;true
9;true,true,false;title(F, D), venue(F, A).;false;false
9;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
9;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
9;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
9;false,true;haswordauthor(M, K).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14185106490048777;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995123;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.3966104735610508;  // std dev = 1.797, 13.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=7 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.1418510649004878;  // std dev = 0.000, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.6750040411194097;  // std dev = 0.822, 19.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=18 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.3411827428099923;  // std dev = 1.797, 13.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=7 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.12544463852839138;  // std dev = 0.000, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.16605692277680872;  // std dev = 0.076, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else if ( movie(E, A) )
%   | | then return 0.4469094495386263;  // std dev = 1.960, 31.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=25 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.11231637819360635;  // std dev = 3.48e-09, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.4210134034947709;  // std dev = 0.630, 19.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=18 */
%   | else if ( genre(A, E) )
%   | | then return -0.09679513834526887;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.18760978497532627;  // std dev = 1.797, 13.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=7 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.10159632948783631;  // std dev = 0.000, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.17763337755389816;  // std dev = 0.126, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else if ( genre(B, E) )
%   | | then return 0.3540975995828709;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.14378287999559042;  // std dev = 1.797, 13.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=7 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.09269127618926094;  // std dev = 2.28e-09, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.25094087435294365;  // std dev = 0.498, 19.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=18 */
%   | else if ( movie(E, B) )
%   | | then if ( genre(B, F) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.0958019777363036;  // std dev = 1.806, 14.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=7 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.08518475138839685;  // std dev = 1.18e-08, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.18172521206779974;  // std dev = 0.141, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else if ( genre(B, E) )
%   | | then return 0.23038930223801074;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.08534904252824232;  // std dev = 1.797, 13.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=7 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.07877675473109173;  // std dev = 0.000, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.16903255463306974;  // std dev = 0.426, 19.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=18 */
%   | else if ( genre(A, E) )
%   | | then return -0.06954469666798399;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.06412737232388413;  // std dev = 1.797, 13.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=7 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.07324622576333704;  // std dev = 0.000, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.17190271533595267;  // std dev = 0.151, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else if ( movie(E, A) )
%   | | then if ( genre(A, F) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.11726731820569224;  // std dev = 1.827, 31.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=25 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.06842697784420272;  // std dev = 0.000, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.1306192204997842;  // std dev = 0.386, 19.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=18 */
%   | else if ( genre(A, E) )
%   | | then return -0.05545393463529929;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.018811404045458967;  // std dev = 1.797, 13.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=7 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.06419184008202619;  // std dev = 1.86e-09, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 0.97178
   AUC PR    = 0.824078
   CLL	      = -0.235794
   Precision = 0.078809 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.146104


Total learning time: 0.692 seconds
Total inference time: 0.909 seconds
AUC ROC: 0.97178


Results scoring model
   AUC ROC   = 0.9664
   AUC PR    = 0.968146
   CLL	      = -0.260542
   Precision = 0.806452 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.892857


Total scoring time: 0.392 seconds
Parameter learned model CLL: -0.260542


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 2, 0], 'true,false,true': [0.0, 0, 18], 'true,false,false,true': [1.797, 6, 7], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 17, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.822, 1, 18], 'true,false,true': [0.0, 1, 0], 'true,false,false,true': [1.797, 6, 7], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 17, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.076, 2, 0], 'true,false,true': [1.96, 6, 25], 'true,false,false': [0.0, 0, 0], 'false,true': [3.48e-09, 17, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.63, 1, 18], 'true,false,true': [0.0, 1, 0], 'true,false,false,true': [1.797, 6, 7], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 17, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.126, 2, 0], 'true,false,true': [0.0, 0, 18], 'true,false,false,true': [1.797, 6, 7], 'true,false,false,false': [0.0, 0, 0], 'false,true': [2.28e-09, 17, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, B)', 'true,false,true': 'genre(B, F)', 'false': 'movie(G, A)'}, {'true,true': [0.498, 1, 18], 'true,false,true,true': [0.0, 0, 0], 'true,false,true,false': [1.806, 7, 7], 'true,false,false': [0.0, 0, 0], 'false,true': [1.18e-08, 17, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.141, 2, 0], 'true,false,true': [0.0, 0, 18], 'true,false,false,true': [1.797, 6, 7], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 17, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, A)'}, {'true,true': [0.426, 1, 18], 'true,false,true': [0.0, 1, 0], 'true,false,false,true': [1.797, 6, 7], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 17, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'true,false,true': 'genre(A, F)', 'false': 'movie(G, A)'}, {'true,true': [0.151, 2, 0], 'true,false,true,true': [0.0, 0, 0], 'true,false,true,false': [1.827, 6, 25], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 17, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.386, 1, 18], 'true,false,true': [0.0, 1, 0], 'true,false,false,true': [1.797, 6, 7], 'true,false,false,false': [0.0, 0, 0], 'false,true': [1.86e-09, 17, 0], 'false,false': [0.0, 0, 0]}]]
[{'': [0.1836547291092757, -3.2653618371328133e-18], 'true': [0.0, 0.15608740894901246], 'true,false': [-2.9605947323337506e-16, 0.24852071005917156], 'true,false,false': [0.24852071005917156, nan], 'false': [-3.2653618371328133e-18, nan]}, {'': [0.1574498295248642, 0.0], 'true': [0.03559544937499509, 0.2452112433671458], 'true,false': [0.0, 0.24852071005917173], 'true,false,false': [0.24852071005917173, nan], 'false': [0.0, nan]}, {'': [0.13801453555144144, 1.3061447348531253e-17], 'true': [0.0028880461320991598, 0.12396099336094754], 'true,false': [0.12396099336094754, nan], 'false': [1.3061447348531253e-17, nan]}, {'': [0.127947348005003, -8.163404592832034e-18], 'true': [0.020921034618214297, 0.23613412916370488], 'true,false': [0.0, 0.24852071005917165], 'true,false,false': [0.24852071005917165, nan], 'false': [-8.163404592832034e-18, nan]}, {'': [0.1196995691732238, 4.89804275569922e-18], 'true': [0.007916844941781472, 0.114988761677642], 'true,false': [0.0, 0.24852071005917167], 'true,false,false': [0.24852071005917167, nan], 'false': [4.89804275569922e-18, nan]}, {'': [0.11223840059476643, 8.163404592832034e-18], 'true': [0.01302955164482816, 0.23302160350571713], 'true,false': [0.23302160350571713, nan], 'true,false,true': [nan, 0.23302160350571713], 'false': [8.163404592832034e-18, nan]}, {'': [0.11033939729496142, -2.44902137784961e-18], 'true': [0.009892577530644514, 0.10934071650055009], 'true,false': [-4.9343245538895844e-17, 0.24852071005917167], 'true,false,false': [0.24852071005917167, nan], 'false': [-2.44902137784961e-18, nan]}, {'': [0.10711311183792814, 0.0], 'true': [0.009567440623307662, 0.23195436794459487], 'true,false': [0.0, 0.2485207100591716], 'true,false,false': [0.2485207100591716, nan], 'false': [0.0, nan]}, {'': [0.10659732176103955, -8.163404592832033e-19], 'true': [0.011390358968611507, 0.10767186959075091], 'true,false': [0.10767186959075091, nan], 'true,false,true': [nan, 0.10767186959075091], 'false': [-8.163404592832033e-19, nan]}, {'': [0.10593053394653835, 3.2653618371328133e-18], 'true': [0.00785595258648665, 0.2311350441716889], 'true,false': [0.0, 0.24852071005917167], 'true,false,false': [0.24852071005917167, nan], 'false': [3.2653618371328133e-18, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(A, D).;true;true
0;true,false;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;true;genre(B, D).;true;true
1;true,false;genre(A, E).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;true;genre(B, D).;true;true
3;true,false;genre(A, E).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;true;genre(A, D).;true;true
4;true,false;genre(B, E).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(A, D).;true;true
6;true,false;genre(B, E).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;true;genre(B, D).;true;true
7;true,false;genre(A, E).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;true;genre(B, D).;true;true
9;true,false;genre(A, E).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14185106490048777;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995123;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | else if ( actor(B) )
%   | | | then return -0.1418510649004878;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | | else return 0.8581489350995123;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   else return -0.1418510649004878;  // std dev = 0.000, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.7194734122109543;  // std dev = 2.98e-08, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return 0.6426626803255592;  // std dev = 0.243, 11.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=10 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( actor(B) )
%   | | | then return -0.12544463852839138;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | | else return 0.7194734122109543;  // std dev = 2.11e-08, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   else return -0.12544463852839138;  // std dev = 0.000, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.5629175015269037;  // std dev = 0.046, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | else return -0.12506453619345081;  // std dev = 0.095, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   else return -0.11231637819360635;  // std dev = 1.49e-08, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.4156783472906982;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return 0.3773160527920432;  // std dev = 0.181, 11.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=10 */
%   | else if ( genre(A, E) )
%   | | then return -0.10043864301242679;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( actor(B) )
%   | | | then return -0.10043864301242679;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | | else return 0.4156783472906982;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   else return -0.10159632948783631;  // std dev = 0.000, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.17576742647642177;  // std dev = 0.119, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else if ( genre(B, E) )
%   | | then return 0.3336581305616191;  // std dev = 0.054, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | else if ( actor(B) )
%   | | | then return -0.09172111303386328;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | | else return 0.3194678992960216;  // std dev = 1.05e-08, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   else return -0.09269127618926094;  // std dev = 9.13e-09, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.2613134230393983;  // std dev = 0.052, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | else return -0.10146461033926421;  // std dev = 0.135, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   else return -0.08518475138839685;  // std dev = 1.18e-08, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14060889736456184;  // std dev = 0.098, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else if ( genre(B, E) )
%   | | then return 0.21648379885125663;  // std dev = 0.041, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | else if ( actor(B) )
%   | | | then return -0.0768465705518076;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | | else return 0.2080039196978966;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   else return -0.07877675473109173;  // std dev = 0.000, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.17254829873052313;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return 0.15531205951680754;  // std dev = 0.108, 11.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=10 */
%   | else if ( genre(A, E) )
%   | | then return -0.062348436503933326;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( actor(B) )
%   | | | then return -0.07156919061937411;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | | else return 0.1758090988978962;  // std dev = 5.27e-09, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   else return -0.07324622576333704;  // std dev = 0.000, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.1570227636419771;  // std dev = 0.041, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | else return -0.08413997301979759;  // std dev = 0.138, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   else return -0.06842697784420272;  // std dev = 0.000, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.13042064797802222;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return 0.11482045979881807;  // std dev = 0.099, 11.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=10 */
%   | else if ( genre(A, E) )
%   | | then return -0.05431401762443805;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( actor(B) )
%   | | | then return -0.06188815703708054;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | | else return 0.13263771328357987;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   else return -0.06419184008202619;  // std dev = 7.45e-09, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063791
   Precision = 0.978261 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.989011


Total learning time: 0.986 seconds
Total inference time: 0.88 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.100183
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 0.381 seconds
Refined model CLL: -0.100183


******************************************
Best model found
******************************************
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063791
   Precision = 0.978261 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.989011


Total learning time: 2.4510000000000005 seconds
Total inference time: 0.88 seconds
AUC ROC: 1.0
Total revision time: 2.4510000000000005
Best scored revision CLL: -0.100183


Dataset: 4_cora_imdb, Fold: 5, Type: Transfer (trRDN-B), Time: 00:09:21
{'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.063791, 'Precision': [0.978261, 0.5], 'Recall': 1.0, 'F1': 0.989011, 'Learning time': 2.4510000000000005, 'Inference time': 0.88, 'parameter_25': {'AUC ROC': 0.97178, 'AUC PR': 0.824078, 'CLL': -0.235794, 'Precision': [0.078809, 0.5], 'Recall': 1.0, 'F1': 0.146104, 'Learning time': 0.692, 'Inference time': 0.909}}


