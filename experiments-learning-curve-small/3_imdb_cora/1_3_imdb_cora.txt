Starting experiment #1 for 3_imdb_cora

Start learning from source dataset

Source train facts examples: 1078
Source train pos examples: 382
Source train neg examples: 14236

WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.8581489350995083;  // std dev = 1.43e-06, 382.000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.14185106490048766;  // std dev = 6.14e-08, 60.000 (wgt'ed) examples reached here.  /* #neg=60 */
%   else return -0.14185106490048902;  // std dev = 0.000, 691.000 (wgt'ed) examples reached here.  /* #neg=691 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.7194734122109581;  // std dev = 0.000, 382.000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.12544463852839152;  // std dev = 0.000, 73.000 (wgt'ed) examples reached here.  /* #neg=73 */
%   else return -0.12544463852839233;  // std dev = 0.000, 643.000 (wgt'ed) examples reached here.  /* #neg=643 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.555366436746283;  // std dev = 0.000, 382.000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.11231637819360628;  // std dev = 4.47e-08, 60.000 (wgt'ed) examples reached here.  /* #neg=60 */
%   else return -0.11231637819360665;  // std dev = 0.000, 719.000 (wgt'ed) examples reached here.  /* #neg=719 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.417513584158312;  // std dev = 0.000, 382.000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.10159632948783619;  // std dev = 4.59e-08, 63.000 (wgt'ed) examples reached here.  /* #neg=63 */
%   else return -0.10159632948783516;  // std dev = 4.35e-07, 701.000 (wgt'ed) examples reached here.  /* #neg=701 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.32071184716015166;  // std dev = 0.000, 382.000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.09269127618926105;  // std dev = 0.000, 45.000 (wgt'ed) examples reached here.  /* #neg=45 */
%   else return -0.0926912761892619;  // std dev = 0.000, 637.000 (wgt'ed) examples reached here.  /* #neg=637 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.25517224256948734;  // std dev = 4.42e-07, 382.000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.08518475138839679;  // std dev = 1.67e-08, 68.000 (wgt'ed) examples reached here.  /* #neg=68 */
%   else return -0.08518475138839675;  // std dev = 1.40e-07, 695.000 (wgt'ed) examples reached here.  /* #neg=695 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.20975771563253462;  // std dev = 2.53e-07, 382.000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.07877675473109179;  // std dev = 0.000, 49.000 (wgt'ed) examples reached here.  /* #neg=49 */
%   else return -0.07877675473109284;  // std dev = 0.000, 713.000 (wgt'ed) examples reached here.  /* #neg=713 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.17709649774527667;  // std dev = 2.60e-07, 382.000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.07324622576333704;  // std dev = 0.000, 60.000 (wgt'ed) examples reached here.  /* #neg=60 */
%   else return -0.0732462257633365;  // std dev = 2.47e-07, 716.000 (wgt'ed) examples reached here.  /* #neg=716 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.15274385809367164;  // std dev = 0.000, 382.000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.06842697784420268;  // std dev = 1.97e-08, 58.000 (wgt'ed) examples reached here.  /* #neg=58 */
%   else return -0.06842697784420256;  // std dev = 1.85e-07, 709.000 (wgt'ed) examples reached here.  /* #neg=709 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.13400703000801212;  // std dev = 0.000, 382.000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.06419184008202625;  // std dev = 0.000, 67.000 (wgt'ed) examples reached here.  /* #neg=67 */
%   else return -0.06419184008202533;  // std dev = 2.52e-07, 677.000 (wgt'ed) examples reached here.  /* #neg=677 */


Starting fold 1

Target train facts examples: 35095
Target train pos examples: 2649
Target train neg examples: 4334

Target test facts examples: 7463
Target test pos	 examples: 368
Target test neg examples: 688

Amount of data: 5
******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.8581489350995122;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else return 0.23314893509951226;  // std dev = 1.369, 8.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=3 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.7194734122109545;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else return 0.202334239218108;  // std dev = 1.369, 8.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=3 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.5553664367462845;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else return 0.17149281961528945;  // std dev = 1.369, 8.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=3 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.41751358415830997;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else return 0.14228146899184052;  // std dev = 1.369, 8.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=3 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.32071184716014967;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else return 0.11591746118730598;  // std dev = 1.369, 8.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=3 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.25517224256948945;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else return 0.09305316265470472;  // std dev = 1.369, 8.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=3 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.20975771563253554;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else return 0.07383827012230793;  // std dev = 1.369, 8.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=3 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.17709649774527736;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else return 0.058073729831299666;  // std dev = 1.369, 8.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=3 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.15274385809367097;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else return 0.045370205025705;  // std dev = 1.369, 8.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=3 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.13400703000801117;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else return 0.035268216809254856;  // std dev = 1.369, 8.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=3 */


Results
   AUC ROC   = 0.630435
   AUC PR    = 0.597315
   CLL	      = -0.562003
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.26087
   F1        = 0.413793


Total learning time: 0.857 seconds
Total inference time: 0.711 seconds
AUC ROC: 0.630435


Results scoring model
   AUC ROC   = 0.7
   AUC PR    = 0.787662
   CLL	      = -0.555937
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.4
   F1        = 0.571429


Total scoring time: 0.646 seconds
Parameter learned model CLL: -0.555937


Structure after Parameter Learning
[['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 2], 'false': [1.369, 5, 3]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 2], 'false': [1.369, 5, 3]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 2], 'false': [1.369, 5, 3]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 2], 'false': [1.369, 5, 3]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 2], 'false': [1.369, 5, 3]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 2], 'false': [1.369, 5, 3]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 2], 'false': [1.369, 5, 3]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 2], 'false': [1.369, 5, 3]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 2], 'false': [1.369, 5, 3]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 2], 'false': [1.369, 5, 3]}]]
[{'': [0.0, 0.2343749999999999]}, {'': [0.0, 0.23437500000000008]}, {'': [0.0, 0.23437499999999992]}, {'': [0.0, 0.23437499999999994]}, {'': [0.0, 0.23437499999999994]}, {'': [0.0, 0.23437499999999994]}, {'': [0.0, 0.23437499999999997]}, {'': [0.0, 0.23437499999999994]}, {'': [0.0, 0.2343749999999999]}, {'': [0.0, 0.234375]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
1;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
2;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
3;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
4;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
5;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
6;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
7;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
8;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
9;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.8581489350995122;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else return 0.23314893509951226;  // std dev = 0.484, 8.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=3 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.7194734122109545;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else return 0.202334239218108;  // std dev = 0.484, 8.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=3 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.5553664367462845;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else return 0.17149281961528945;  // std dev = 0.484, 8.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=3 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.41751358415830997;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else return 0.14228146899184052;  // std dev = 0.484, 8.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=3 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.32071184716014967;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else return 0.11591746118730598;  // std dev = 0.484, 8.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=3 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.25517224256948945;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else return 0.09305316265470472;  // std dev = 0.484, 8.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=3 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.20975771563253554;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else return 0.07383827012230793;  // std dev = 0.484, 8.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=3 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.17709649774527736;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else return 0.058073729831299666;  // std dev = 0.484, 8.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=3 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.15274385809367097;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else return 0.045370205025705;  // std dev = 0.484, 8.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=3 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.13400703000801117;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else return 0.035268216809254856;  // std dev = 0.484, 8.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=3 */


Results
   AUC ROC   = 0.630435
   AUC PR    = 0.597315
   CLL	      = -0.562003
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.26087
   F1        = 0.413793


Total learning time: 1.189 seconds
Total inference time: 0.686 seconds
AUC ROC: 0.630435


Results scoring model
   AUC ROC   = 0.7
   AUC PR    = 0.787662
   CLL	      = -0.555937
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.4
   F1        = 0.571429


Total scoring time: 0.643 seconds
Refined model CLL: -0.555937


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.630435
   AUC PR    = 0.597315
   CLL	      = -0.562003
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.26087
   F1        = 0.413793


Total learning time: 3.335 seconds
Total inference time: 0.711 seconds
AUC ROC: 0.630435
Total revision time: 3.335
Best scored revision CLL: -0.555937


Dataset: 3_imdb_cora, Fold: 1, Type: Transfer (trRDN-B), Time: 00:00:05
{'AUC ROC': 0.630435, 'AUC PR': 0.597315, 'CLL': -0.562003, 'Precision': [1.0, 0.5], 'Recall': 0.26087, 'F1': 0.413793, 'Learning time': 3.335, 'Inference time': 0.711, 'parameter_5': {'AUC ROC': 0.630435, 'AUC PR': 0.597315, 'CLL': -0.562003, 'Precision': [1.0, 0.5], 'Recall': 0.26087, 'F1': 0.413793, 'Learning time': 0.857, 'Inference time': 0.711}}


Amount of data: 10
******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.8581489350995121;  // std dev = 2.11e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return 0.26991364098186527;  // std dev = 2.029, 17.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=7 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.7194734122109545;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return 0.2337836550996701;  // std dev = 2.029, 17.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=7 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.5553664367462845;  // std dev = 1.05e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return 0.19697678246055136;  // std dev = 2.029, 17.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=7 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.41751358415830997;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return 0.16189848815690908;  // std dev = 2.029, 17.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=7 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.32071184716014967;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return 0.1303444240371668;  // std dev = 2.029, 17.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=7 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.25517224256948945;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return 0.10325226905662939;  // std dev = 2.029, 17.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=7 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.20975771563253554;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return 0.08080125457789766;  // std dev = 2.029, 17.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=7 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.17709649774527736;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return 0.06267194972365497;  // std dev = 2.029, 17.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=7 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.15274385809367097;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return 0.04829996903690906;  // std dev = 2.029, 17.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=7 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.13400703000801117;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return 0.0370533980540081;  // std dev = 2.029, 17.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=7 */


Results
   AUC ROC   = 0.630435
   AUC PR    = 0.597315
   CLL	      = -0.573514
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.26087
   F1        = 0.413793


Total learning time: 0.922 seconds
Total inference time: 0.714 seconds
AUC ROC: 0.630435


Results scoring model
   AUC ROC   = 0.65
   AUC PR    = 0.72976
   CLL	      = -0.59634
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.3
   F1        = 0.461538


Total scoring time: 0.657 seconds
Parameter learned model CLL: -0.59634


Structure after Parameter Learning
[['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [2.11e-08, 0, 3], 'false': [2.029, 10, 7]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 3], 'false': [2.029, 10, 7]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [1.05e-08, 0, 3], 'false': [2.029, 10, 7]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 3], 'false': [2.029, 10, 7]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 3], 'false': [2.029, 10, 7]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 3], 'false': [2.029, 10, 7]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 3], 'false': [2.029, 10, 7]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 3], 'false': [2.029, 10, 7]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 3], 'false': [2.029, 10, 7]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 3], 'false': [2.029, 10, 7]}]]
[{'': [1.4802973661668753e-16, 0.24221453287197234]}, {'': [0.0, 0.2422145328719722]}, {'': [3.700743415417188e-17, 0.2422145328719721]}, {'': [-3.700743415417188e-17, 0.2422145328719721]}, {'': [0.0, 0.2422145328719724]}, {'': [0.0, 0.24221453287197225]}, {'': [0.0, 0.24221453287197228]}, {'': [0.0, 0.24221453287197228]}, {'': [-4.625929269271485e-18, 0.2422145328719724]}, {'': [-2.3129646346357427e-18, 0.24221453287197245]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
1;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
2;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
3;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
4;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
5;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
6;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
7;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
8;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
9;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.8581489350995121;  // std dev = 2.11e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return 0.26991364098186527;  // std dev = 0.492, 17.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=7 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.7194734122109545;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return 0.2337836550996701;  // std dev = 0.492, 17.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=7 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.5553664367462845;  // std dev = 1.05e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return 0.19697678246055136;  // std dev = 0.492, 17.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=7 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.41751358415830997;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return 0.16189848815690908;  // std dev = 0.492, 17.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=7 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.32071184716014967;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return 0.1303444240371668;  // std dev = 0.492, 17.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=7 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.25517224256948945;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return 0.10325226905662939;  // std dev = 0.492, 17.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=7 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.20975771563253554;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return 0.08080125457789766;  // std dev = 0.492, 17.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=7 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.17709649774527736;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return 0.06267194972365497;  // std dev = 0.492, 17.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=7 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.15274385809367097;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return 0.04829996903690906;  // std dev = 0.492, 17.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=7 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.13400703000801117;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return 0.0370533980540081;  // std dev = 0.492, 17.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=7 */


Results
   AUC ROC   = 0.630435
   AUC PR    = 0.597315
   CLL	      = -0.573514
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.26087
   F1        = 0.413793


Total learning time: 1.224 seconds
Total inference time: 0.687 seconds
AUC ROC: 0.630435


Results scoring model
   AUC ROC   = 0.65
   AUC PR    = 0.72976
   CLL	      = -0.59634
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.3
   F1        = 0.461538


Total scoring time: 0.651 seconds
Refined model CLL: -0.59634


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.630435
   AUC PR    = 0.597315
   CLL	      = -0.573514
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.26087
   F1        = 0.413793


Total learning time: 3.4539999999999997 seconds
Total inference time: 0.714 seconds
AUC ROC: 0.630435
Total revision time: 3.4539999999999997
Best scored revision CLL: -0.59634


Dataset: 3_imdb_cora, Fold: 1, Type: Transfer (trRDN-B), Time: 00:00:10
{'AUC ROC': 0.630435, 'AUC PR': 0.597315, 'CLL': -0.573514, 'Precision': [1.0, 0.5], 'Recall': 0.26087, 'F1': 0.413793, 'Learning time': 3.4539999999999997, 'Inference time': 0.714, 'parameter_10': {'AUC ROC': 0.630435, 'AUC PR': 0.597315, 'CLL': -0.573514, 'Precision': [1.0, 0.5], 'Recall': 0.26087, 'F1': 0.413793, 'Learning time': 0.922, 'Inference time': 0.714}}


Amount of data: 15
******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.8581489350995121;  // std dev = 2.11e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return 0.30259337954395676;  // std dev = 2.582, 27.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=12 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.7194734122109545;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return 0.261631808675212;  // std dev = 2.582, 27.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=12 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.5553664367462845;  // std dev = 1.05e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return 0.2192721473492705;  // std dev = 2.582, 27.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=12 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.41751358415830997;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return 0.1787352457468729;  // std dev = 2.582, 27.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=12 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.32071184716014967;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return 0.14243924477676276;  // std dev = 2.582, 27.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=12 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.25517224256948945;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return 0.11159559999632997;  // std dev = 2.582, 27.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=12 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.20975771563253554;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return 0.08637026299843599;  // std dev = 2.582, 27.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=12 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.17709649774527736;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return 0.06628370899125427;  // std dev = 2.582, 27.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=12 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.15274385809367097;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return 0.050575643621874215;  // std dev = 2.582, 27.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=12 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.13400703000801117;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return 0.038438849075129344;  // std dev = 2.582, 27.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=12 */


Results
   AUC ROC   = 0.630435
   AUC PR    = 0.597315
   CLL	      = -0.587529
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.26087
   F1        = 0.413793


Total learning time: 0.889 seconds
Total inference time: 0.682 seconds
AUC ROC: 0.630435


Results scoring model
   AUC ROC   = 0.6
   AUC PR    = 0.671449
   CLL	      = -0.632522
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.2
   F1        = 0.333333


Total scoring time: 0.658 seconds
Parameter learned model CLL: -0.632522


Structure after Parameter Learning
[['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [2.11e-08, 0, 3], 'false': [2.582, 15, 12]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 3], 'false': [2.582, 15, 12]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [1.05e-08, 0, 3], 'false': [2.582, 15, 12]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 3], 'false': [2.582, 15, 12]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 3], 'false': [2.582, 15, 12]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 3], 'false': [2.582, 15, 12]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 3], 'false': [2.582, 15, 12]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 3], 'false': [2.582, 15, 12]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 3], 'false': [2.582, 15, 12]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 3], 'false': [2.582, 15, 12]}]]
[{'': [1.4802973661668753e-16, 0.2469135802469131]}, {'': [0.0, 0.2469135802469134]}, {'': [3.700743415417188e-17, 0.24691358024691332]}, {'': [-3.700743415417188e-17, 0.24691358024691365]}, {'': [0.0, 0.24691358024691382]}, {'': [0.0, 0.24691358024691357]}, {'': [0.0, 0.24691358024691337]}, {'': [0.0, 0.24691358024691382]}, {'': [-4.625929269271485e-18, 0.24691358024691362]}, {'': [-2.3129646346357427e-18, 0.24691358024691384]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
1;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
2;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
3;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
4;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
5;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
6;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
7;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
8;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
9;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.8581489350995121;  // std dev = 2.11e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return 0.30259337954395676;  // std dev = 0.497, 27.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=12 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.7194734122109545;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return 0.261631808675212;  // std dev = 0.497, 27.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=12 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.5553664367462845;  // std dev = 1.05e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return 0.2192721473492705;  // std dev = 0.497, 27.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=12 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.41751358415830997;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return 0.1787352457468729;  // std dev = 0.497, 27.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=12 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.32071184716014967;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return 0.14243924477676276;  // std dev = 0.497, 27.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=12 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.25517224256948945;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return 0.11159559999632997;  // std dev = 0.497, 27.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=12 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.20975771563253554;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return 0.08637026299843599;  // std dev = 0.497, 27.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=12 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.17709649774527736;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return 0.06628370899125427;  // std dev = 0.497, 27.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=12 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.15274385809367097;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return 0.050575643621874215;  // std dev = 0.497, 27.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=12 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.13400703000801117;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return 0.038438849075129344;  // std dev = 0.497, 27.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=12 */


Results
   AUC ROC   = 0.630435
   AUC PR    = 0.597315
   CLL	      = -0.587529
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.26087
   F1        = 0.413793


Total learning time: 1.318 seconds
Total inference time: 0.683 seconds
AUC ROC: 0.630435


Results scoring model
   AUC ROC   = 0.6
   AUC PR    = 0.671449
   CLL	      = -0.632522
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.2
   F1        = 0.333333


Total scoring time: 0.701 seconds
Refined model CLL: -0.632522


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.630435
   AUC PR    = 0.597315
   CLL	      = -0.587529
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.26087
   F1        = 0.413793


Total learning time: 3.5660000000000003 seconds
Total inference time: 0.682 seconds
AUC ROC: 0.630435
Total revision time: 3.5660000000000003
Best scored revision CLL: -0.632522


Dataset: 3_imdb_cora, Fold: 1, Type: Transfer (trRDN-B), Time: 00:00:16
{'AUC ROC': 0.630435, 'AUC PR': 0.597315, 'CLL': -0.587529, 'Precision': [1.0, 0.5], 'Recall': 0.26087, 'F1': 0.413793, 'Learning time': 3.5660000000000003, 'Inference time': 0.682, 'parameter_15': {'AUC ROC': 0.630435, 'AUC PR': 0.597315, 'CLL': -0.587529, 'Precision': [1.0, 0.5], 'Recall': 0.26087, 'F1': 0.413793, 'Learning time': 0.889, 'Inference time': 0.682}}


Amount of data: 20
******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.8581489350995121;  // std dev = 2.11e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return 0.31760839455897183;  // std dev = 3.031, 37.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=17 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.7194734122109545;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return 0.2743930062984994;  // std dev = 3.031, 37.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=17 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.5553664367462845;  // std dev = 1.05e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return 0.22940409212560184;  // std dev = 3.031, 37.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=17 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.41751358415830997;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return 0.18628870627050972;  // std dev = 3.031, 37.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=17 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.32071184716014967;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return 0.14778567561990727;  // std dev = 3.031, 37.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=17 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.25517224256948945;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return 0.11523398454885339;  // std dev = 3.031, 37.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=17 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.20975771563253554;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return 0.08877605966596111;  // std dev = 3.031, 37.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=17 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.17709649774527736;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return 0.06784002556264199;  // std dev = 3.031, 37.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=17 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.15274385809367097;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return 0.05156345950024885;  // std dev = 3.031, 37.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=17 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.13400703000801117;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return 0.03905337379799511;  // std dev = 3.031, 37.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=17 */


Results
   AUC ROC   = 0.630435
   AUC PR    = 0.597315
   CLL	      = -0.595127
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.26087
   F1        = 0.413793


Total learning time: 0.982 seconds
Total inference time: 0.726 seconds
AUC ROC: 0.630435


Results scoring model
   AUC ROC   = 0.575
   AUC PR    = 0.638591
   CLL	      = -0.649272
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.15
   F1        = 0.26087


Total scoring time: 0.658 seconds
Parameter learned model CLL: -0.649272


Structure after Parameter Learning
[['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [2.11e-08, 0, 3], 'false': [3.031, 20, 17]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 3], 'false': [3.031, 20, 17]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [1.05e-08, 0, 3], 'false': [3.031, 20, 17]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 3], 'false': [3.031, 20, 17]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 3], 'false': [3.031, 20, 17]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 3], 'false': [3.031, 20, 17]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 3], 'false': [3.031, 20, 17]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 3], 'false': [3.031, 20, 17]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 3], 'false': [3.031, 20, 17]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 3], 'false': [3.031, 20, 17]}]]
[{'': [1.4802973661668753e-16, 0.24835646457268032]}, {'': [0.0, 0.24835646457268137]}, {'': [3.700743415417188e-17, 0.2483564645726806]}, {'': [-3.700743415417188e-17, 0.24835646457268118]}, {'': [0.0, 0.24835646457268037]}, {'': [0.0, 0.24835646457268085]}, {'': [0.0, 0.24835646457268098]}, {'': [0.0, 0.24835646457268104]}, {'': [-4.625929269271485e-18, 0.2483564645726807]}, {'': [-2.3129646346357427e-18, 0.24835646457268074]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
1;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
2;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
3;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
4;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
5;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
6;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
7;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
8;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
9;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.8581489350995121;  // std dev = 2.11e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return 0.31760839455897183;  // std dev = 0.498, 37.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=17 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.7194734122109545;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return 0.2743930062984994;  // std dev = 0.498, 37.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=17 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.5553664367462845;  // std dev = 1.05e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return 0.22940409212560184;  // std dev = 0.498, 37.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=17 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.41751358415830997;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return 0.18628870627050972;  // std dev = 0.498, 37.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=17 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.32071184716014967;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return 0.14778567561990727;  // std dev = 0.498, 37.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=17 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.25517224256948945;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return 0.11523398454885339;  // std dev = 0.498, 37.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=17 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.20975771563253554;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return 0.08877605966596111;  // std dev = 0.498, 37.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=17 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.17709649774527736;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return 0.06784002556264199;  // std dev = 0.498, 37.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=17 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.15274385809367097;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return 0.05156345950024885;  // std dev = 0.498, 37.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=17 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.13400703000801117;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return 0.03905337379799511;  // std dev = 0.498, 37.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=17 */


Results
   AUC ROC   = 0.630435
   AUC PR    = 0.597315
   CLL	      = -0.595127
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.26087
   F1        = 0.413793


Total learning time: 1.383 seconds
Total inference time: 0.716 seconds
AUC ROC: 0.630435


Results scoring model
   AUC ROC   = 0.575
   AUC PR    = 0.638591
   CLL	      = -0.649272
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.15
   F1        = 0.26087


Total scoring time: 0.666 seconds
Refined model CLL: -0.649272


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.630435
   AUC PR    = 0.597315
   CLL	      = -0.595127
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.26087
   F1        = 0.413793


Total learning time: 3.689 seconds
Total inference time: 0.726 seconds
AUC ROC: 0.630435
Total revision time: 3.689
Best scored revision CLL: -0.649272


Dataset: 3_imdb_cora, Fold: 1, Type: Transfer (trRDN-B), Time: 00:00:22
{'AUC ROC': 0.630435, 'AUC PR': 0.597315, 'CLL': -0.595127, 'Precision': [1.0, 0.5], 'Recall': 0.26087, 'F1': 0.413793, 'Learning time': 3.689, 'Inference time': 0.726, 'parameter_20': {'AUC ROC': 0.630435, 'AUC PR': 0.597315, 'CLL': -0.595127, 'Precision': [1.0, 0.5], 'Recall': 0.26087, 'F1': 0.413793, 'Learning time': 0.982, 'Inference time': 0.726}}


Amount of data: 25
******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.8581489350995121;  // std dev = 2.11e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return 0.3262340414824902;  // std dev = 3.421, 47.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=22 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.7194734122109545;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return 0.28171422482890246;  // std dev = 3.421, 47.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=22 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.5553664367462845;  // std dev = 1.05e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return 0.23519292070564615;  // std dev = 3.421, 47.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=22 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.41751358415830997;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return 0.19057755295478856;  // std dev = 3.421, 47.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=22 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.32071184716014967;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return 0.15080101353659994;  // std dev = 3.421, 47.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=22 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.25517224256948945;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return 0.11727501093763941;  // std dev = 3.421, 47.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=22 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.20975771563253554;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return 0.09012256866998798;  // std dev = 3.421, 47.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=22 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.17709649774527736;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return 0.06871315573496113;  // std dev = 3.421, 47.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=22 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.15274385809367097;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return 0.05212246791353032;  // std dev = 3.421, 47.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=22 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.13400703000801117;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return 0.039407136735360955;  // std dev = 3.421, 47.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=22 */


Results
   AUC ROC   = 0.630435
   AUC PR    = 0.597315
   CLL	      = -0.599818
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.26087
   F1        = 0.413793


Total learning time: 0.977 seconds
Total inference time: 0.711 seconds
AUC ROC: 0.630435


Results scoring model
   AUC ROC   = 0.56
   AUC PR    = 0.617178
   CLL	      = -0.658938
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.12
   F1        = 0.214286


Total scoring time: 0.662 seconds
Parameter learned model CLL: -0.658938


Structure after Parameter Learning
[['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [2.11e-08, 0, 3], 'false': [3.421, 25, 22]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 3], 'false': [3.421, 25, 22]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [1.05e-08, 0, 3], 'false': [3.421, 25, 22]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 3], 'false': [3.421, 25, 22]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 3], 'false': [3.421, 25, 22]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 3], 'false': [3.421, 25, 22]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 3], 'false': [3.421, 25, 22]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 3], 'false': [3.421, 25, 22]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 3], 'false': [3.421, 25, 22]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 3], 'false': [3.421, 25, 22]}]]
[{'': [1.4802973661668753e-16, 0.24898143956541524]}, {'': [0.0, 0.24898143956541438]}, {'': [3.700743415417188e-17, 0.24898143956541438]}, {'': [-3.700743415417188e-17, 0.24898143956541452]}, {'': [0.0, 0.24898143956541383]}, {'': [0.0, 0.24898143956541466]}, {'': [0.0, 0.24898143956541408]}, {'': [0.0, 0.24898143956541424]}, {'': [-4.625929269271485e-18, 0.2489814395654141]}, {'': [-2.3129646346357427e-18, 0.24898143956541377]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
1;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
2;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
3;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
4;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
5;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
6;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
7;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
8;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
9;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.8581489350995121;  // std dev = 2.11e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.33542166237223897;  // std dev = 0.499, 44.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=21 */
%   | else return 0.19148226843284552;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.7194734122109545;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.2895046483036715;  // std dev = 0.499, 44.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=21 */
%   | else return 0.16653882456488175;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.5553664367462845;  // std dev = 1.05e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.24133361143941967;  // std dev = 0.499, 44.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=21 */
%   | else return 0.1420942428155648;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.41751358415830997;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.19510617706416022;  // std dev = 0.499, 44.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=21 */
%   | else return 0.11914890490746428;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.32071184716014967;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.1539697830320135;  // std dev = 0.499, 44.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=21 */
%   | else return 0.09841340278401862;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.25517224256948945;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.11941263944458726;  // std dev = 0.499, 44.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=21 */
%   | else return 0.08026654944252243;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.20975771563253554;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.09153195825447669;  // std dev = 0.499, 44.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=21 */
%   | else return 0.06479591611329232;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.17709649774527736;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.06963016621449226;  // std dev = 0.499, 44.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=21 */
%   | else return 0.05187916934404054;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.15274385809367097;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.052714615005579606;  // std dev = 0.499, 44.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=21 */
%   | else return 0.04126932998424626;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.13400703000801117;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.039787569275654695;  // std dev = 0.499, 44.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=21 */
%   | else return 0.032663748734830134;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */


Results
   AUC ROC   = 0.677894
   AUC PR    = 0.622063
   CLL	      = -0.582144
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.26087
   F1        = 0.413793


Total learning time: 2.727 seconds
Total inference time: 0.769 seconds
AUC ROC: 0.677894


Results scoring model
   AUC ROC   = 0.5752
   AUC PR    = 0.62466
   CLL	      = -0.656552
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.12
   F1        = 0.214286


Total scoring time: 0.793 seconds
Refined model CLL: -0.656552


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.677894
   AUC PR    = 0.622063
   CLL	      = -0.582144
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.26087
   F1        = 0.413793


Total learning time: 5.159 seconds
Total inference time: 0.769 seconds
AUC ROC: 0.677894
Total revision time: 5.159
Best scored revision CLL: -0.656552


Dataset: 3_imdb_cora, Fold: 1, Type: Transfer (trRDN-B), Time: 00:00:29
{'AUC ROC': 0.677894, 'AUC PR': 0.622063, 'CLL': -0.582144, 'Precision': [1.0, 0.5], 'Recall': 0.26087, 'F1': 0.413793, 'Learning time': 5.159, 'Inference time': 0.769, 'parameter_25': {'AUC ROC': 0.630435, 'AUC PR': 0.597315, 'CLL': -0.599818, 'Precision': [1.0, 0.5], 'Recall': 0.26087, 'F1': 0.413793, 'Learning time': 0.977, 'Inference time': 0.711}}


Starting fold 2

Target train facts examples: 33542
Target train pos examples: 2246
Target train neg examples: 4478

Target test facts examples: 9016
Target test pos	 examples: 771
Target test neg examples: 544

Amount of data: 5
******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.8581489350995122;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else return 0.30259337954395676;  // std dev = 1.491, 9.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=4 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.7194734122109545;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else return 0.2616318086752123;  // std dev = 1.491, 9.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=4 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.5553664367462845;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else return 0.2192721473492705;  // std dev = 1.491, 9.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=4 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.41751358415830997;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else return 0.17873524574687283;  // std dev = 1.491, 9.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=4 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.32071184716014967;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else return 0.1424392447767628;  // std dev = 1.491, 9.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=4 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.25517224256948945;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else return 0.11159559999632969;  // std dev = 1.491, 9.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=4 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.20975771563253554;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else return 0.08637026299843623;  // std dev = 1.491, 9.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=4 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.17709649774527736;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else return 0.06628370899125427;  // std dev = 1.491, 9.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=4 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.15274385809367097;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else return 0.05057564362187433;  // std dev = 1.491, 9.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=4 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.13400703000801117;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else return 0.038438849075129386;  // std dev = 1.491, 9.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=4 */


Results
   AUC ROC   = 0.566796
   AUC PR    = 0.695289
   CLL	      = -0.67834
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.133593
   F1        = 0.235698


Total learning time: 0.856 seconds
Total inference time: 0.762 seconds
AUC ROC: 0.566796


Results scoring model
   AUC ROC   = 0.6
   AUC PR    = 0.685394
   CLL	      = -0.632522
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.2
   F1        = 0.333333


Total scoring time: 0.649 seconds
Parameter learned model CLL: -0.632522


Structure after Parameter Learning
[['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 1], 'false': [1.491, 5, 4]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 1], 'false': [1.491, 5, 4]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 1], 'false': [1.491, 5, 4]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 1], 'false': [1.491, 5, 4]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 1], 'false': [1.491, 5, 4]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 1], 'false': [1.491, 5, 4]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 1], 'false': [1.491, 5, 4]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 1], 'false': [1.491, 5, 4]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 1], 'false': [1.491, 5, 4]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 1], 'false': [1.491, 5, 4]}]]
[{'': [0.0, 0.2469135802469134]}, {'': [0.0, 0.24691358024691354]}, {'': [0.0, 0.24691358024691365]}, {'': [0.0, 0.2469135802469136]}, {'': [0.0, 0.2469135802469136]}, {'': [0.0, 0.2469135802469136]}, {'': [0.0, 0.2469135802469136]}, {'': [0.0, 0.2469135802469136]}, {'': [0.0, 0.2469135802469136]}, {'': [0.0, 0.2469135802469136]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
1;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
2;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
3;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
4;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
5;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
6;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
7;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
8;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
9;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.8581489350995122;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else return 0.30259337954395676;  // std dev = 0.497, 9.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=4 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.7194734122109545;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else return 0.2616318086752123;  // std dev = 0.497, 9.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=4 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.5553664367462845;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else return 0.2192721473492705;  // std dev = 0.497, 9.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=4 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.41751358415830997;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else return 0.17873524574687283;  // std dev = 0.497, 9.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=4 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.32071184716014967;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else return 0.1424392447767628;  // std dev = 0.497, 9.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=4 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.25517224256948945;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else return 0.11159559999632969;  // std dev = 0.497, 9.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=4 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.20975771563253554;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else return 0.08637026299843623;  // std dev = 0.497, 9.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=4 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.17709649774527736;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else return 0.06628370899125427;  // std dev = 0.497, 9.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=4 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.15274385809367097;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else return 0.05057564362187433;  // std dev = 0.497, 9.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=4 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.13400703000801117;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else return 0.038438849075129386;  // std dev = 0.497, 9.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=4 */


Results
   AUC ROC   = 0.566796
   AUC PR    = 0.695289
   CLL	      = -0.67834
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.133593
   F1        = 0.235698


Total learning time: 1.165 seconds
Total inference time: 0.761 seconds
AUC ROC: 0.566796


Results scoring model
   AUC ROC   = 0.6
   AUC PR    = 0.685394
   CLL	      = -0.632522
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.2
   F1        = 0.333333


Total scoring time: 0.63 seconds
Refined model CLL: -0.632522


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.566796
   AUC PR    = 0.695289
   CLL	      = -0.67834
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.133593
   F1        = 0.235698


Total learning time: 3.3 seconds
Total inference time: 0.762 seconds
AUC ROC: 0.566796
Total revision time: 3.3
Best scored revision CLL: -0.632522


Dataset: 3_imdb_cora, Fold: 2, Type: Transfer (trRDN-B), Time: 00:00:34
{'AUC ROC': 0.566796, 'AUC PR': 0.695289, 'CLL': -0.67834, 'Precision': [1.0, 0.5], 'Recall': 0.133593, 'F1': 0.235698, 'Learning time': 3.3, 'Inference time': 0.762, 'parameter_5': {'AUC ROC': 0.566796, 'AUC PR': 0.695289, 'CLL': -0.67834, 'Precision': [1.0, 0.5], 'Recall': 0.133593, 'F1': 0.235698, 'Learning time': 0.856, 'Inference time': 0.762}}


Amount of data: 10
******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.8581489350995122;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else return 0.33183314562582816;  // std dev = 2.176, 19.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=9 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.7194734122109545;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else return 0.28646280754165054;  // std dev = 2.176, 19.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=9 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.5553664367462845;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else return 0.23893826810287416;  // std dev = 2.176, 19.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=9 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.41751358415830997;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else return 0.19334220366104113;  // std dev = 2.176, 19.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=9 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.32071184716014967;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else return 0.15273729662465255;  // std dev = 2.176, 19.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=9 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.25517224256948945;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else return 0.11858202407945204;  // std dev = 2.176, 19.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=9 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.20975771563253554;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else return 0.09098433275637943;  // std dev = 2.176, 19.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=9 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.17709649774527736;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else return 0.06927339775071423;  // std dev = 2.176, 19.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=9 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.15274385809367097;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else return 0.052483554573519914;  // std dev = 2.176, 19.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=9 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.13400703000801117;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else return 0.0396383789772704;  // std dev = 2.176, 19.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=9 */


Results
   AUC ROC   = 0.566796
   AUC PR    = 0.695289
   CLL	      = -0.665297
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.133593
   F1        = 0.235698


Total learning time: 0.868 seconds
Total inference time: 0.758 seconds
AUC ROC: 0.566796


Results scoring model
   AUC ROC   = 0.55
   AUC PR    = 0.608377
   CLL	      = -0.665231
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.1
   F1        = 0.181818


Total scoring time: 0.652 seconds
Parameter learned model CLL: -0.665231


Structure after Parameter Learning
[['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 1], 'false': [2.176, 10, 9]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 1], 'false': [2.176, 10, 9]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 1], 'false': [2.176, 10, 9]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 1], 'false': [2.176, 10, 9]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 1], 'false': [2.176, 10, 9]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 1], 'false': [2.176, 10, 9]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 1], 'false': [2.176, 10, 9]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 1], 'false': [2.176, 10, 9]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 1], 'false': [2.176, 10, 9]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 1], 'false': [2.176, 10, 9]}]]
[{'': [0.0, 0.2493074792243767]}, {'': [0.0, 0.24930747922437685]}, {'': [0.0, 0.249307479224377]}, {'': [0.0, 0.24930747922437685]}, {'': [0.0, 0.24930747922437663]}, {'': [0.0, 0.24930747922437657]}, {'': [0.0, 0.24930747922437685]}, {'': [0.0, 0.2493074792243767]}, {'': [0.0, 0.2493074792243768]}, {'': [0.0, 0.2493074792243768]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
1;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
2;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
3;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
4;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
5;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
6;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
7;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
8;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
9;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.8581489350995122;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else return 0.33183314562582816;  // std dev = 0.499, 19.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=9 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.7194734122109545;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else return 0.28646280754165054;  // std dev = 0.499, 19.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=9 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.5553664367462845;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else return 0.23893826810287416;  // std dev = 0.499, 19.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=9 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.41751358415830997;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else return 0.19334220366104113;  // std dev = 0.499, 19.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=9 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.32071184716014967;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else return 0.15273729662465255;  // std dev = 0.499, 19.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=9 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.25517224256948945;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else return 0.11858202407945204;  // std dev = 0.499, 19.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=9 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.20975771563253554;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else return 0.09098433275637943;  // std dev = 0.499, 19.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=9 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.17709649774527736;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else return 0.06927339775071423;  // std dev = 0.499, 19.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=9 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.15274385809367097;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else return 0.052483554573519914;  // std dev = 0.499, 19.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=9 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.13400703000801117;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else return 0.0396383789772704;  // std dev = 0.499, 19.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=9 */


Results
   AUC ROC   = 0.566796
   AUC PR    = 0.695289
   CLL	      = -0.665297
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.133593
   F1        = 0.235698


Total learning time: 1.303 seconds
Total inference time: 0.75 seconds
AUC ROC: 0.566796


Results scoring model
   AUC ROC   = 0.55
   AUC PR    = 0.608377
   CLL	      = -0.665231
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.1
   F1        = 0.181818


Total scoring time: 0.662 seconds
Refined model CLL: -0.665231


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.566796
   AUC PR    = 0.695289
   CLL	      = -0.665297
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.133593
   F1        = 0.235698


Total learning time: 3.485 seconds
Total inference time: 0.758 seconds
AUC ROC: 0.566796
Total revision time: 3.485
Best scored revision CLL: -0.665231


Dataset: 3_imdb_cora, Fold: 2, Type: Transfer (trRDN-B), Time: 00:00:40
{'AUC ROC': 0.566796, 'AUC PR': 0.695289, 'CLL': -0.665297, 'Precision': [1.0, 0.5], 'Recall': 0.133593, 'F1': 0.235698, 'Learning time': 3.485, 'Inference time': 0.758, 'parameter_10': {'AUC ROC': 0.566796, 'AUC PR': 0.695289, 'CLL': -0.665297, 'Precision': [1.0, 0.5], 'Recall': 0.133593, 'F1': 0.235698, 'Learning time': 0.868, 'Inference time': 0.758}}


Amount of data: 15
******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.8581489350995122;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else return 0.34090755578916754;  // std dev = 2.691, 29.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=14 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.7194734122109545;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else return 0.29415244793700734;  // std dev = 2.691, 29.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=14 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.5553664367462845;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else return 0.24498779946109306;  // std dev = 2.691, 29.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=14 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.41751358415830997;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else return 0.19779098606161633;  // std dev = 2.691, 29.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=14 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.32071184716014967;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else return 0.15584137344552781;  // std dev = 2.691, 29.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=14 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.25517224256948945;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else return 0.12067218458973308;  // std dev = 2.691, 29.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=14 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.20975771563253554;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else return 0.09236254816787717;  // std dev = 2.691, 29.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=14 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.17709649774527736;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else return 0.07017260157159257;  // std dev = 2.691, 29.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=14 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.15274385809367097;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else return 0.05306775044395041;  // std dev = 2.691, 29.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=14 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.13400703000801117;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else return 0.04001751672480079;  // std dev = 2.691, 29.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=14 */


Results
   AUC ROC   = 0.566796
   AUC PR    = 0.695289
   CLL	      = -0.66191
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.133593
   F1        = 0.235698


Total learning time: 0.868 seconds
Total inference time: 0.772 seconds
AUC ROC: 0.566796


Results scoring model
   AUC ROC   = 0.533333
   AUC PR    = 0.578635
   CLL	      = -0.675463
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.066667
   F1        = 0.125


Total scoring time: 0.682 seconds
Parameter learned model CLL: -0.675463


Structure after Parameter Learning
[['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 1], 'false': [2.691, 15, 14]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 1], 'false': [2.691, 15, 14]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 1], 'false': [2.691, 15, 14]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 1], 'false': [2.691, 15, 14]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 1], 'false': [2.691, 15, 14]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 1], 'false': [2.691, 15, 14]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 1], 'false': [2.691, 15, 14]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 1], 'false': [2.691, 15, 14]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 1], 'false': [2.691, 15, 14]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 1], 'false': [2.691, 15, 14]}]]
[{'': [0.0, 0.2497027348394764]}, {'': [0.0, 0.24970273483947725]}, {'': [0.0, 0.24970273483947666]}, {'': [0.0, 0.24970273483947678]}, {'': [0.0, 0.2497027348394767]}, {'': [0.0, 0.24970273483947683]}, {'': [0.0, 0.24970273483947672]}, {'': [0.0, 0.24970273483947705]}, {'': [0.0, 0.249702734839477]}, {'': [0.0, 0.24970273483947683]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
1;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
2;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
3;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
4;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
5;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
6;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
7;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
8;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
9;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.8581489350995122;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else return 0.34090755578916754;  // std dev = 0.500, 29.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=14 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.7194734122109545;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else return 0.29415244793700734;  // std dev = 0.500, 29.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=14 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.5553664367462845;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else return 0.24498779946109306;  // std dev = 0.500, 29.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=14 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.41751358415830997;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else return 0.19779098606161633;  // std dev = 0.500, 29.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=14 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.32071184716014967;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else return 0.15584137344552781;  // std dev = 0.500, 29.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=14 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.25517224256948945;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else return 0.12067218458973308;  // std dev = 0.500, 29.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=14 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.20975771563253554;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else return 0.09236254816787717;  // std dev = 0.500, 29.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=14 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.17709649774527736;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else return 0.07017260157159257;  // std dev = 0.500, 29.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=14 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.15274385809367097;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else return 0.05306775044395041;  // std dev = 0.500, 29.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=14 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.13400703000801117;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else return 0.04001751672480079;  // std dev = 0.500, 29.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=14 */


Results
   AUC ROC   = 0.566796
   AUC PR    = 0.695289
   CLL	      = -0.66191
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.133593
   F1        = 0.235698


Total learning time: 1.25 seconds
Total inference time: 0.73 seconds
AUC ROC: 0.566796


Results scoring model
   AUC ROC   = 0.533333
   AUC PR    = 0.578635
   CLL	      = -0.675463
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.066667
   F1        = 0.125


Total scoring time: 0.639 seconds
Refined model CLL: -0.675463


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.566796
   AUC PR    = 0.695289
   CLL	      = -0.66191
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.133593
   F1        = 0.235698


Total learning time: 3.439 seconds
Total inference time: 0.772 seconds
AUC ROC: 0.566796
Total revision time: 3.439
Best scored revision CLL: -0.675463


Dataset: 3_imdb_cora, Fold: 2, Type: Transfer (trRDN-B), Time: 00:00:46
{'AUC ROC': 0.566796, 'AUC PR': 0.695289, 'CLL': -0.66191, 'Precision': [1.0, 0.5], 'Recall': 0.133593, 'F1': 0.235698, 'Learning time': 3.439, 'Inference time': 0.772, 'parameter_15': {'AUC ROC': 0.566796, 'AUC PR': 0.695289, 'CLL': -0.66191, 'Precision': [1.0, 0.5], 'Recall': 0.133593, 'F1': 0.235698, 'Learning time': 0.868, 'Inference time': 0.772}}


Amount of data: 20
******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.3716624486130258;  // std dev = 3.040, 37.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=19 */
%   else return 0.19148226843284552;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.3201556683650765;  // std dev = 3.040, 37.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=19 */
%   else return 0.16653882456488175;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.265303516394226;  // std dev = 3.040, 37.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=19 */
%   else return 0.1420942428155648;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.21258460027071055;  // std dev = 3.040, 37.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=19 */
%   else return 0.11914890490746428;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.16606958335154767;  // std dev = 3.040, 37.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=19 */
%   else return 0.09841340278401862;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.1275293036246512;  // std dev = 3.040, 37.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=19 */
%   else return 0.08026654944252243;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.09690096040223692;  // std dev = 3.040, 37.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=19 */
%   else return 0.06479591611329232;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.07317637672775297;  // std dev = 3.040, 37.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=19 */
%   else return 0.05187916934404054;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.055071800493588605;  // std dev = 3.040, 37.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=19 */
%   else return 0.04126932998424626;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.041371070247097935;  // std dev = 3.040, 37.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=19 */
%   else return 0.032663748734830134;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */


Results
   AUC ROC   = 0.493954
   AUC PR    = 0.583332
   CLL	      = -0.707232
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 0.936 seconds
Total inference time: 0.702 seconds
AUC ROC: 0.493954


Results scoring model
   AUC ROC   = 0.525
   AUC PR    = 0.513176
   CLL	      = -0.690461
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total scoring time: 0.649 seconds
Parameter learned model CLL: -0.690461


Structure after Parameter Learning
[['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [3.04, 18, 19], 'false': [0.816, 2, 1]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [3.04, 18, 19], 'false': [0.816, 2, 1]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [3.04, 18, 19], 'false': [0.816, 2, 1]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [3.04, 18, 19], 'false': [0.816, 2, 1]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [3.04, 18, 19], 'false': [0.816, 2, 1]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [3.04, 18, 19], 'false': [0.816, 2, 1]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [3.04, 18, 19], 'false': [0.816, 2, 1]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [3.04, 18, 19], 'false': [0.816, 2, 1]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [3.04, 18, 19], 'false': [0.816, 2, 1]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [3.04, 18, 19], 'false': [0.816, 2, 1]}]]
[{'': [0.24981738495251968, 0.22222222222222224]}, {'': [0.24981738495252026, 0.2222222222222222]}, {'': [0.24981738495252043, 0.22222222222222218]}, {'': [0.24981738495251976, 0.22222222222222224]}, {'': [0.24981738495251976, 0.2222222222222222]}, {'': [0.2498173849525202, 0.22222222222222224]}, {'': [0.2498173849525201, 0.22222222222222224]}, {'': [0.2498173849525203, 0.2222222222222222]}, {'': [0.2498173849525199, 0.22222222222222218]}, {'': [0.24981738495252007, 0.2222222222222222]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Pruning resulted in null theory

Candidate for revision
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.3716624486130258;  // std dev = 0.500, 37.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=19 */
%   else return 0.19148226843284552;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.3201556683650765;  // std dev = 0.500, 37.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=19 */
%   else return 0.16653882456488175;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.08512333621404618;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | else return 0.2812017675865949;  // std dev = 0.499, 34.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=18 */
%   else return 0.1420942428155648;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.06890127232123726;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | else return 0.22512777744586668;  // std dev = 0.499, 34.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=18 */
%   else return 0.11914890490746428;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.16574515263890724;  // std dev = 0.498, 37.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=19 */
%   else return 0.09841340278401862;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.12734397073918183;  // std dev = 0.498, 37.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=19 */
%   else return 0.08026654944252243;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.09681985629380079;  // std dev = 0.498, 37.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=19 */
%   else return 0.06479591611329232;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return -0.029231723906039897;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | else return 0.08220014761030375;  // std dev = 0.499, 34.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=18 */
%   else return 0.05187916934404054;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return -0.022503442060737917;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | else return 0.06180214370913798;  // std dev = 0.499, 34.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=18 */
%   else return 0.04126932998424626;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.04122136555082983;  // std dev = 0.497, 37.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=19 */
%   else return 0.032663748734830134;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */


Results
   AUC ROC   = 0.490426
   AUC PR    = 0.581545
   CLL	      = -0.706312
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 1.651 seconds
Total inference time: 0.848 seconds
AUC ROC: 0.490426


Results scoring model
   AUC ROC   = 0.55
   AUC PR    = 0.527882
   CLL	      = -0.685629
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total scoring time: 0.677 seconds
Refined model CLL: -0.685629


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.490426
   AUC PR    = 0.581545
   CLL	      = -0.706312
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 3.913 seconds
Total inference time: 0.848 seconds
AUC ROC: 0.490426
Total revision time: 3.913
Best scored revision CLL: -0.685629


Dataset: 3_imdb_cora, Fold: 2, Type: Transfer (trRDN-B), Time: 00:00:52
{'AUC ROC': 0.490426, 'AUC PR': 0.581545, 'CLL': -0.706312, 'Precision': [nan, 0.5], 'Recall': 0.0, 'F1': nan, 'Learning time': 3.913, 'Inference time': 0.848, 'parameter_20': {'AUC ROC': 0.493954, 'AUC PR': 0.583332, 'CLL': -0.707232, 'Precision': [nan, 0.5], 'Recall': 0.0, 'F1': nan, 'Learning time': 0.936, 'Inference time': 0.702}}


Amount of data: 25
******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.8581489350995121;  // std dev = 2.11e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return 0.3262340414824902;  // std dev = 3.421, 47.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=22 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.7194734122109545;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return 0.28171422482890246;  // std dev = 3.421, 47.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=22 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.5553664367462845;  // std dev = 1.05e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return 0.23519292070564615;  // std dev = 3.421, 47.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=22 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.41751358415830997;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return 0.19057755295478856;  // std dev = 3.421, 47.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=22 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.32071184716014967;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return 0.15080101353659994;  // std dev = 3.421, 47.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=22 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.25517224256948945;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return 0.11727501093763941;  // std dev = 3.421, 47.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=22 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.20975771563253554;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return 0.09012256866998798;  // std dev = 3.421, 47.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=22 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.17709649774527736;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return 0.06871315573496113;  // std dev = 3.421, 47.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=22 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.15274385809367097;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return 0.05212246791353032;  // std dev = 3.421, 47.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=22 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.13400703000801117;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return 0.039407136735360955;  // std dev = 3.421, 47.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=22 */


Results
   AUC ROC   = 0.566796
   AUC PR    = 0.695289
   CLL	      = -0.667541
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.133593
   F1        = 0.235698


Total learning time: 0.929 seconds
Total inference time: 0.733 seconds
AUC ROC: 0.566796


Results scoring model
   AUC ROC   = 0.56
   AUC PR    = 0.617178
   CLL	      = -0.658938
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.12
   F1        = 0.214286


Total scoring time: 0.669 seconds
Parameter learned model CLL: -0.658938


Structure after Parameter Learning
[['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [2.11e-08, 0, 3], 'false': [3.421, 25, 22]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 3], 'false': [3.421, 25, 22]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [1.05e-08, 0, 3], 'false': [3.421, 25, 22]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 3], 'false': [3.421, 25, 22]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 3], 'false': [3.421, 25, 22]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 3], 'false': [3.421, 25, 22]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 3], 'false': [3.421, 25, 22]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 3], 'false': [3.421, 25, 22]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 3], 'false': [3.421, 25, 22]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 3], 'false': [3.421, 25, 22]}]]
[{'': [1.4802973661668753e-16, 0.24898143956541524]}, {'': [0.0, 0.24898143956541438]}, {'': [3.700743415417188e-17, 0.24898143956541438]}, {'': [-3.700743415417188e-17, 0.24898143956541452]}, {'': [0.0, 0.24898143956541383]}, {'': [0.0, 0.24898143956541466]}, {'': [0.0, 0.24898143956541408]}, {'': [0.0, 0.24898143956541424]}, {'': [-4.625929269271485e-18, 0.2489814395654141]}, {'': [-2.3129646346357427e-18, 0.24898143956541377]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
1;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
2;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
3;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
4;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
5;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
6;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
7;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
8;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
9;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.8581489350995121;  // std dev = 2.11e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then return 0.19148226843284552;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | else return 0.35814893509951223;  // std dev = 0.500, 38.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=19 */
%   | else return 0.19148226843284552;  // std dev = 1.155, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.7194734122109545;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then return 0.16653882456488175;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | else return 0.3087411357856347;  // std dev = 0.500, 38.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=19 */
%   | else return 0.16653882456488173;  // std dev = 1.155, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.5553664367462845;  // std dev = 1.05e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.24804762783592688;  // std dev = 0.499, 41.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=20 */
%   | else return 0.1420942428155648;  // std dev = 1.155, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.41751358415830997;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.20003405326851734;  // std dev = 0.499, 41.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=20 */
%   | else return 0.11914890490746428;  // std dev = 1.155, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.32071184716014967;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then return 0.06319034314807075;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | else return 0.16486002469007852;  // std dev = 0.500, 38.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=19 */
%   | else return 0.09841340278401867;  // std dev = 1.155, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.25517224256948945;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.12157965582931368;  // std dev = 0.498, 41.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=20 */
%   | else return 0.0802665494425224;  // std dev = 1.155, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.20975771563253554;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return -0.3572801383401498;  // std dev = 0.109, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | | then return 0.025256823805547352;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | else if ( haswordvenue(A, H), haswordvenue(B, H) )
%   | | | then return 0.12612627887757372;  // std dev = 2.995, 36.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=19 */
%   | | | else return 0.131462582779959;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.17709649774527736;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.01984700767235222;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | then return -0.2811453406727088;  // std dev = 0.094, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else if ( haswordvenue(A, H), haswordvenue(B, H) )
%   | | | then return 0.09547507085652678;  // std dev = 2.995, 36.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=19 */
%   | | | else return 0.1048691206351331;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.15274385809367097;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return -0.22861755913011317;  // std dev = 0.081, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | | then return 0.015559951734559374;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | else if ( haswordvenue(A, H), haswordvenue(B, H) )
%   | | | then return 0.07190944221270648;  // std dev = 2.995, 36.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=19 */
%   | | | else return 0.0825952064949481;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.13400703000801117;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.03759390865948674;  // std dev = 0.488, 41.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=20 */
%   | else return 0.03142289254232511;  // std dev = 1.110, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */


Results
   AUC ROC   = 0.551733
   AUC PR    = 0.688303
   CLL	      = -0.668093
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.133593
   F1        = 0.235698


Total learning time: 2.956 seconds
Total inference time: 0.936 seconds
AUC ROC: 0.551733


Results scoring model
   AUC ROC   = 0.6488
   AUC PR    = 0.664683
   CLL	      = -0.627878
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.12
   F1        = 0.214286


Total scoring time: 0.704 seconds
Refined model CLL: -0.627878


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.551733
   AUC PR    = 0.688303
   CLL	      = -0.668093
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.133593
   F1        = 0.235698


Total learning time: 5.258 seconds
Total inference time: 0.936 seconds
AUC ROC: 0.551733
Total revision time: 5.258
Best scored revision CLL: -0.627878


Dataset: 3_imdb_cora, Fold: 2, Type: Transfer (trRDN-B), Time: 00:00:59
{'AUC ROC': 0.551733, 'AUC PR': 0.688303, 'CLL': -0.668093, 'Precision': [1.0, 0.5], 'Recall': 0.133593, 'F1': 0.235698, 'Learning time': 5.258, 'Inference time': 0.936, 'parameter_25': {'AUC ROC': 0.566796, 'AUC PR': 0.695289, 'CLL': -0.667541, 'Precision': [1.0, 0.5], 'Recall': 0.133593, 'F1': 0.235698, 'Learning time': 0.929, 'Inference time': 0.733}}


Starting fold 3

Target train facts examples: 33252
Target train pos examples: 2436
Target train neg examples: 2800

Target test facts examples: 9306
Target test pos	 examples: 581
Target test neg examples: 2222

Amount of data: 5
******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.8581489350995122;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else return 0.30259337954395676;  // std dev = 1.491, 9.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=4 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.7194734122109545;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else return 0.2616318086752123;  // std dev = 1.491, 9.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=4 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.5553664367462845;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else return 0.2192721473492705;  // std dev = 1.491, 9.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=4 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.41751358415830997;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else return 0.17873524574687283;  // std dev = 1.491, 9.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=4 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.32071184716014967;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else return 0.1424392447767628;  // std dev = 1.491, 9.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=4 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.25517224256948945;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else return 0.11159559999632969;  // std dev = 1.491, 9.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=4 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.20975771563253554;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else return 0.08637026299843623;  // std dev = 1.491, 9.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=4 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.17709649774527736;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else return 0.06628370899125427;  // std dev = 1.491, 9.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=4 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.15274385809367097;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else return 0.05057564362187433;  // std dev = 1.491, 9.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=4 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.13400703000801117;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else return 0.038438849075129386;  // std dev = 1.491, 9.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=4 */


Results
   AUC ROC   = 0.585198
   AUC PR    = 0.401731
   CLL	      = -0.581019
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.170396
   F1        = 0.291176


Total learning time: 0.853 seconds
Total inference time: 0.914 seconds
AUC ROC: 0.585198


Results scoring model
   AUC ROC   = 0.6
   AUC PR    = 0.685394
   CLL	      = -0.632522
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.2
   F1        = 0.333333


Total scoring time: 0.63 seconds
Parameter learned model CLL: -0.632522


Structure after Parameter Learning
[['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 1], 'false': [1.491, 5, 4]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 1], 'false': [1.491, 5, 4]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 1], 'false': [1.491, 5, 4]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 1], 'false': [1.491, 5, 4]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 1], 'false': [1.491, 5, 4]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 1], 'false': [1.491, 5, 4]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 1], 'false': [1.491, 5, 4]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 1], 'false': [1.491, 5, 4]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 1], 'false': [1.491, 5, 4]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 1], 'false': [1.491, 5, 4]}]]
[{'': [0.0, 0.2469135802469134]}, {'': [0.0, 0.24691358024691354]}, {'': [0.0, 0.24691358024691365]}, {'': [0.0, 0.2469135802469136]}, {'': [0.0, 0.2469135802469136]}, {'': [0.0, 0.2469135802469136]}, {'': [0.0, 0.2469135802469136]}, {'': [0.0, 0.2469135802469136]}, {'': [0.0, 0.2469135802469136]}, {'': [0.0, 0.2469135802469136]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
1;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
2;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
3;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
4;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
5;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
6;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
7;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
8;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
9;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.8581489350995122;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else return 0.30259337954395676;  // std dev = 0.497, 9.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=4 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.7194734122109545;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else return 0.2616318086752123;  // std dev = 0.497, 9.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=4 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.5553664367462845;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else return 0.2192721473492705;  // std dev = 0.497, 9.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=4 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.41751358415830997;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else return 0.17873524574687283;  // std dev = 0.497, 9.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=4 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.32071184716014967;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else return 0.1424392447767628;  // std dev = 0.497, 9.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=4 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.25517224256948945;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else return 0.11159559999632969;  // std dev = 0.497, 9.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=4 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.20975771563253554;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else return 0.08637026299843623;  // std dev = 0.497, 9.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=4 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.17709649774527736;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else return 0.06628370899125427;  // std dev = 0.497, 9.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=4 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.15274385809367097;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else return 0.05057564362187433;  // std dev = 0.497, 9.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=4 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.13400703000801117;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else return 0.038438849075129386;  // std dev = 0.497, 9.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=4 */


Results
   AUC ROC   = 0.585198
   AUC PR    = 0.401731
   CLL	      = -0.581019
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.170396
   F1        = 0.291176


Total learning time: 1.174 seconds
Total inference time: 0.922 seconds
AUC ROC: 0.585198


Results scoring model
   AUC ROC   = 0.6
   AUC PR    = 0.685394
   CLL	      = -0.632522
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.2
   F1        = 0.333333


Total scoring time: 0.647 seconds
Refined model CLL: -0.632522


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.585198
   AUC PR    = 0.401731
   CLL	      = -0.581019
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.170396
   F1        = 0.291176


Total learning time: 3.3040000000000003 seconds
Total inference time: 0.914 seconds
AUC ROC: 0.585198
Total revision time: 3.3040000000000003
Best scored revision CLL: -0.632522


Dataset: 3_imdb_cora, Fold: 3, Type: Transfer (trRDN-B), Time: 00:01:05
{'AUC ROC': 0.585198, 'AUC PR': 0.401731, 'CLL': -0.581019, 'Precision': [1.0, 0.5], 'Recall': 0.170396, 'F1': 0.291176, 'Learning time': 3.3040000000000003, 'Inference time': 0.914, 'parameter_5': {'AUC ROC': 0.585198, 'AUC PR': 0.401731, 'CLL': -0.581019, 'Precision': [1.0, 0.5], 'Recall': 0.170396, 'F1': 0.291176, 'Learning time': 0.853, 'Inference time': 0.914}}


Amount of data: 10
******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.8581489350995122;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else return 0.33183314562582816;  // std dev = 2.176, 19.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=9 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.7194734122109545;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else return 0.28646280754165054;  // std dev = 2.176, 19.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=9 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.5553664367462845;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else return 0.23893826810287416;  // std dev = 2.176, 19.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=9 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.41751358415830997;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else return 0.19334220366104113;  // std dev = 2.176, 19.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=9 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.32071184716014967;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else return 0.15273729662465255;  // std dev = 2.176, 19.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=9 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.25517224256948945;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else return 0.11858202407945204;  // std dev = 2.176, 19.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=9 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.20975771563253554;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else return 0.09098433275637943;  // std dev = 2.176, 19.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=9 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.17709649774527736;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else return 0.06927339775071423;  // std dev = 2.176, 19.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=9 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.15274385809367097;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else return 0.052483554573519914;  // std dev = 2.176, 19.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=9 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.13400703000801117;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else return 0.0396383789772704;  // std dev = 2.176, 19.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=9 */


Results
   AUC ROC   = 0.585198
   AUC PR    = 0.401731
   CLL	      = -0.609219
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.170396
   F1        = 0.291176


Total learning time: 0.896 seconds
Total inference time: 0.9 seconds
AUC ROC: 0.585198


Results scoring model
   AUC ROC   = 0.55
   AUC PR    = 0.608377
   CLL	      = -0.665231
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.1
   F1        = 0.181818


Total scoring time: 0.634 seconds
Parameter learned model CLL: -0.665231


Structure after Parameter Learning
[['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 1], 'false': [2.176, 10, 9]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 1], 'false': [2.176, 10, 9]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 1], 'false': [2.176, 10, 9]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 1], 'false': [2.176, 10, 9]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 1], 'false': [2.176, 10, 9]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 1], 'false': [2.176, 10, 9]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 1], 'false': [2.176, 10, 9]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 1], 'false': [2.176, 10, 9]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 1], 'false': [2.176, 10, 9]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 1], 'false': [2.176, 10, 9]}]]
[{'': [0.0, 0.2493074792243767]}, {'': [0.0, 0.24930747922437685]}, {'': [0.0, 0.249307479224377]}, {'': [0.0, 0.24930747922437685]}, {'': [0.0, 0.24930747922437663]}, {'': [0.0, 0.24930747922437657]}, {'': [0.0, 0.24930747922437685]}, {'': [0.0, 0.2493074792243767]}, {'': [0.0, 0.2493074792243768]}, {'': [0.0, 0.2493074792243768]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
1;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
2;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
3;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
4;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
5;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
6;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
7;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
8;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
9;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.8581489350995122;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else return 0.33183314562582816;  // std dev = 0.499, 19.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=9 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.7194734122109545;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else return 0.28646280754165054;  // std dev = 0.499, 19.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=9 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.5553664367462845;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else return 0.23893826810287416;  // std dev = 0.499, 19.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=9 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.41751358415830997;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else return 0.19334220366104113;  // std dev = 0.499, 19.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=9 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.32071184716014967;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else return 0.15273729662465255;  // std dev = 0.499, 19.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=9 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.25517224256948945;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else return 0.11858202407945204;  // std dev = 0.499, 19.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=9 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.20975771563253554;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else return 0.09098433275637943;  // std dev = 0.499, 19.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=9 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.17709649774527736;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else return 0.06927339775071423;  // std dev = 0.499, 19.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=9 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.15274385809367097;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else return 0.052483554573519914;  // std dev = 0.499, 19.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=9 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.13400703000801117;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else return 0.0396383789772704;  // std dev = 0.499, 19.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=9 */


Results
   AUC ROC   = 0.585198
   AUC PR    = 0.401731
   CLL	      = -0.609219
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.170396
   F1        = 0.291176


Total learning time: 1.256 seconds
Total inference time: 0.897 seconds
AUC ROC: 0.585198


Results scoring model
   AUC ROC   = 0.55
   AUC PR    = 0.608377
   CLL	      = -0.665231
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.1
   F1        = 0.181818


Total scoring time: 0.623 seconds
Refined model CLL: -0.665231


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.585198
   AUC PR    = 0.401731
   CLL	      = -0.609219
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.170396
   F1        = 0.291176


Total learning time: 3.409 seconds
Total inference time: 0.9 seconds
AUC ROC: 0.585198
Total revision time: 3.409
Best scored revision CLL: -0.665231


Dataset: 3_imdb_cora, Fold: 3, Type: Transfer (trRDN-B), Time: 00:01:11
{'AUC ROC': 0.585198, 'AUC PR': 0.401731, 'CLL': -0.609219, 'Precision': [1.0, 0.5], 'Recall': 0.170396, 'F1': 0.291176, 'Learning time': 3.409, 'Inference time': 0.9, 'parameter_10': {'AUC ROC': 0.585198, 'AUC PR': 0.401731, 'CLL': -0.609219, 'Precision': [1.0, 0.5], 'Recall': 0.170396, 'F1': 0.291176, 'Learning time': 0.896, 'Inference time': 0.9}}


Amount of data: 15
******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.3966104735610508;  // std dev = 2.542, 26.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=14 */
%   else return 0.10814893509951219;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.34118274280999283;  // std dev = 2.542, 26.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=14 */
%   else return 0.09446743783575562;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.2815735770744793;  // std dev = 2.542, 26.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=14 */
%   else return 0.08165239320886175;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.22427810686169078;  // std dev = 2.542, 26.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=14 */
%   else return 0.06990902274840138;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.1740703004191193;  // std dev = 2.542, 26.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=14 */
%   else return 0.059354635365447495;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.13288558879104354;  // std dev = 2.542, 26.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=14 */
%   else return 0.05002771289938789;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.1004901590509401;  // std dev = 2.542, 26.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=14 */
%   else return 0.04190386852605735;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.07562016402676984;  // std dev = 2.542, 26.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=14 */
%   else return 0.03491396367325339;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.05677556359574457;  // std dev = 2.542, 26.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=14 */
%   else return 0.028961035597951046;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.042589775603555285;  // std dev = 2.542, 26.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=14 */
%   else return 0.023934242922604827;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */


Results
   AUC ROC   = 0.548677
   AUC PR    = 0.225256
   CLL	      = -0.654847
   Precision = 0.22586 at threshold = 0.5
   Recall    = 0.938038
   F1        = 0.364061


Total learning time: 0.913 seconds
Total inference time: 0.879 seconds
AUC ROC: 0.548677


Results scoring model
   AUC ROC   = 0.566667
   AUC PR    = 0.537179
   CLL	      = -0.675053
   Precision = 0.538462 at threshold = 0.5
   Recall    = 0.933333
   F1        = 0.682927


Total scoring time: 0.659 seconds
Parameter learned model CLL: -0.675053


Structure after Parameter Learning
[['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [2.542, 12, 14], 'false': [0.866, 3, 1]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [2.542, 12, 14], 'false': [0.866, 3, 1]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [2.542, 12, 14], 'false': [0.866, 3, 1]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [2.542, 12, 14], 'false': [0.866, 3, 1]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [2.542, 12, 14], 'false': [0.866, 3, 1]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [2.542, 12, 14], 'false': [0.866, 3, 1]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [2.542, 12, 14], 'false': [0.866, 3, 1]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [2.542, 12, 14], 'false': [0.866, 3, 1]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [2.542, 12, 14], 'false': [0.866, 3, 1]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [2.542, 12, 14], 'false': [0.866, 3, 1]}]]
[{'': [0.24852071005917115, 0.18750000000000003]}, {'': [0.24852071005917137, 0.18749999999999997]}, {'': [0.2485207100591718, 0.18749999999999994]}, {'': [0.24852071005917167, 0.18749999999999997]}, {'': [0.2485207100591716, 0.18749999999999997]}, {'': [0.24852071005917153, 0.18750000000000006]}, {'': [0.2485207100591717, 0.18750000000000003]}, {'': [0.24852071005917167, 0.18749999999999994]}, {'': [0.2485207100591716, 0.18749999999999997]}, {'': [0.24852071005917148, 0.1875]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Pruning resulted in null theory

Candidate for revision
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.3966104735610508;  // std dev = 0.499, 26.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=14 */
%   else return 0.10814893509951219;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.34118274280999283;  // std dev = 0.499, 26.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=14 */
%   else return 0.09446743783575562;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.2815735770744793;  // std dev = 0.499, 26.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=14 */
%   else return 0.08165239320886175;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.22427810686169078;  // std dev = 0.499, 26.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=14 */
%   else return 0.06990902274840138;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.1740703004191193;  // std dev = 0.499, 26.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=14 */
%   else return 0.059354635365447495;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.13288558879104354;  // std dev = 0.499, 26.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=14 */
%   else return 0.05002771289938789;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.1004901590509401;  // std dev = 0.499, 26.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=14 */
%   else return 0.04190386852605735;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.07562016402676984;  // std dev = 0.499, 26.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=14 */
%   else return 0.03491396367325339;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.05677556359574457;  // std dev = 0.499, 26.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=14 */
%   else return 0.028961035597951046;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.042589775603555285;  // std dev = 0.499, 26.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=14 */
%   else return 0.023934242922604827;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */


Results
   AUC ROC   = 0.548677
   AUC PR    = 0.225256
   CLL	      = -0.654847
   Precision = 0.22586 at threshold = 0.5
   Recall    = 0.938038
   F1        = 0.364061


Total learning time: 1.426 seconds
Total inference time: 0.977 seconds
AUC ROC: 0.548677


Results scoring model
   AUC ROC   = 0.566667
   AUC PR    = 0.537179
   CLL	      = -0.675053
   Precision = 0.538462 at threshold = 0.5
   Recall    = 0.933333
   F1        = 0.682927


Total scoring time: 0.681 seconds
Refined model CLL: -0.675053


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.548677
   AUC PR    = 0.225256
   CLL	      = -0.654847
   Precision = 0.22586 at threshold = 0.5
   Recall    = 0.938038
   F1        = 0.364061


Total learning time: 3.6790000000000003 seconds
Total inference time: 0.879 seconds
AUC ROC: 0.548677
Total revision time: 3.6790000000000003
Best scored revision CLL: -0.675053


Dataset: 3_imdb_cora, Fold: 3, Type: Transfer (trRDN-B), Time: 00:01:17
{'AUC ROC': 0.548677, 'AUC PR': 0.225256, 'CLL': -0.654847, 'Precision': [0.22586, 0.5], 'Recall': 0.938038, 'F1': 0.364061, 'Learning time': 3.6790000000000003, 'Inference time': 0.879, 'parameter_15': {'AUC ROC': 0.548677, 'AUC PR': 0.225256, 'CLL': -0.654847, 'Precision': [0.22586, 0.5], 'Recall': 0.938038, 'F1': 0.364061, 'Learning time': 0.913, 'Inference time': 0.879}}


Amount of data: 20
******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.4010060779566551;  // std dev = 2.947, 35.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=19 */
%   else return 0.0581489350995122;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.3448813335003233;  // std dev = 2.947, 35.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=19 */
%   else return 0.050922032513554226;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.284420989587347;  // std dev = 2.947, 35.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=19 */
%   else return 0.04434629760466851;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.2263113194788674;  // std dev = 2.947, 35.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=19 */
%   else return 0.038428662236904595;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.17545554879562322;  // std dev = 2.947, 35.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=19 */
%   else return 0.03315494592188569;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.133814568042519;  // std dev = 2.947, 35.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=19 */
%   else return 0.02849510592572117;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.10111882783055877;  // std dev = 2.947, 35.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=19 */
%   else return 0.024408230135271946;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.076056059384118;  // std dev = 2.947, 35.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=19 */
%   else return 0.020846889108740264;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.05708711789987074;  // std dev = 2.947, 35.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=19 */
%   else return 0.017760671541598484;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.042819182238245115;  // std dev = 2.947, 35.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=19 */
%   else return 0.015098879183171288;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */


Results
   AUC ROC   = 0.548677
   AUC PR    = 0.225256
   CLL	      = -0.654741
   Precision = 0.22586 at threshold = 0.5
   Recall    = 0.938038
   F1        = 0.364061


Total learning time: 0.928 seconds
Total inference time: 0.894 seconds
AUC ROC: 0.548677


Results scoring model
   AUC ROC   = 0.575
   AUC PR    = 0.541786
   CLL	      = -0.667711
   Precision = 0.542857 at threshold = 0.5
   Recall    = 0.95
   F1        = 0.690909


Total scoring time: 0.648 seconds
Parameter learned model CLL: -0.667711


Structure after Parameter Learning
[['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [2.947, 16, 19], 'false': [0.894, 4, 1]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [2.947, 16, 19], 'false': [0.894, 4, 1]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [2.947, 16, 19], 'false': [0.894, 4, 1]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [2.947, 16, 19], 'false': [0.894, 4, 1]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [2.947, 16, 19], 'false': [0.894, 4, 1]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [2.947, 16, 19], 'false': [0.894, 4, 1]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [2.947, 16, 19], 'false': [0.894, 4, 1]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [2.947, 16, 19], 'false': [0.894, 4, 1]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [2.947, 16, 19], 'false': [0.894, 4, 1]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [2.947, 16, 19], 'false': [0.894, 4, 1]}]]
[{'': [0.24816326530612207, 0.16000000000000003]}, {'': [0.24816326530612248, 0.16]}, {'': [0.24816326530612218, 0.15999999999999998]}, {'': [0.24816326530612273, 0.16000000000000003]}, {'': [0.24816326530612237, 0.16000000000000003]}, {'': [0.24816326530612243, 0.15999999999999998]}, {'': [0.24816326530612248, 0.15999999999999998]}, {'': [0.24816326530612243, 0.16]}, {'': [0.24816326530612254, 0.16]}, {'': [0.24816326530612248, 0.15999999999999998]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Pruning resulted in null theory

Candidate for revision
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.4010060779566551;  // std dev = 0.498, 35.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=19 */
%   else return 0.0581489350995122;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.3448813335003233;  // std dev = 0.498, 35.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=19 */
%   else return 0.050922032513554226;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.284420989587347;  // std dev = 0.498, 35.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=19 */
%   else return 0.04434629760466851;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.2263113194788674;  // std dev = 0.498, 35.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=19 */
%   else return 0.038428662236904595;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.17545554879562322;  // std dev = 0.498, 35.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=19 */
%   else return 0.03315494592188569;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.133814568042519;  // std dev = 0.498, 35.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=19 */
%   else return 0.02849510592572117;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.10111882783055877;  // std dev = 0.498, 35.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=19 */
%   else return 0.024408230135271946;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.076056059384118;  // std dev = 0.498, 35.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=19 */
%   else return 0.020846889108740264;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.05708711789987074;  // std dev = 0.498, 35.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=19 */
%   else return 0.017760671541598484;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.042819182238245115;  // std dev = 0.498, 35.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=19 */
%   else return 0.015098879183171288;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */


Results
   AUC ROC   = 0.548677
   AUC PR    = 0.225256
   CLL	      = -0.654741
   Precision = 0.22586 at threshold = 0.5
   Recall    = 0.938038
   F1        = 0.364061


Total learning time: 1.496 seconds
Total inference time: 0.966 seconds
AUC ROC: 0.548677


Results scoring model
   AUC ROC   = 0.575
   AUC PR    = 0.541786
   CLL	      = -0.667711
   Precision = 0.542857 at threshold = 0.5
   Recall    = 0.95
   F1        = 0.690909


Total scoring time: 0.67 seconds
Refined model CLL: -0.667711


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.548677
   AUC PR    = 0.225256
   CLL	      = -0.654741
   Precision = 0.22586 at threshold = 0.5
   Recall    = 0.938038
   F1        = 0.364061


Total learning time: 3.742 seconds
Total inference time: 0.894 seconds
AUC ROC: 0.548677
Total revision time: 3.742
Best scored revision CLL: -0.667711


Dataset: 3_imdb_cora, Fold: 3, Type: Transfer (trRDN-B), Time: 00:01:23
{'AUC ROC': 0.548677, 'AUC PR': 0.225256, 'CLL': -0.654741, 'Precision': [0.22586, 0.5], 'Recall': 0.938038, 'F1': 0.364061, 'Learning time': 3.742, 'Inference time': 0.894, 'parameter_20': {'AUC ROC': 0.548677, 'AUC PR': 0.225256, 'CLL': -0.654741, 'Precision': [0.22586, 0.5], 'Recall': 0.938038, 'F1': 0.364061, 'Learning time': 0.928, 'Inference time': 0.894}}


Amount of data: 25
******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.39148226843284467;  // std dev = 3.347, 45.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=24 */
%   else return 0.0581489350995122;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.3368653790512673;  // std dev = 3.347, 45.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=24 */
%   else return 0.050922032513554226;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.27824435389960744;  // std dev = 3.347, 45.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=24 */
%   else return 0.04434629760466851;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.22189595847385687;  // std dev = 3.347, 45.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=24 */
%   else return 0.038428662236904595;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.17244533059929687;  // std dev = 3.347, 45.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=24 */
%   else return 0.03315494592188569;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.1317967397461822;  // std dev = 3.347, 45.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=24 */
%   else return 0.02849510592572117;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.09975589749696753;  // std dev = 3.347, 45.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=24 */
%   else return 0.024408230135271946;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.07511419612884186;  // std dev = 3.347, 45.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=24 */
%   else return 0.020846889108740264;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.056416881273956165;  // std dev = 3.347, 45.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=24 */
%   else return 0.017760671541598484;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.04232811156004819;  // std dev = 3.347, 45.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=24 */
%   else return 0.015098879183171288;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */


Results
   AUC ROC   = 0.548677
   AUC PR    = 0.225256
   CLL	      = -0.645903
   Precision = 0.22586 at threshold = 0.5
   Recall    = 0.938038
   F1        = 0.364061


Total learning time: 0.925 seconds
Total inference time: 0.971 seconds
AUC ROC: 0.548677


Results scoring model
   AUC ROC   = 0.56
   AUC PR    = 0.532667
   CLL	      = -0.67374
   Precision = 0.533333 at threshold = 0.5
   Recall    = 0.96
   F1        = 0.685714


Total scoring time: 0.67 seconds
Parameter learned model CLL: -0.67374


Structure after Parameter Learning
[['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [3.347, 21, 24], 'false': [0.894, 4, 1]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [3.347, 21, 24], 'false': [0.894, 4, 1]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [3.347, 21, 24], 'false': [0.894, 4, 1]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [3.347, 21, 24], 'false': [0.894, 4, 1]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [3.347, 21, 24], 'false': [0.894, 4, 1]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [3.347, 21, 24], 'false': [0.894, 4, 1]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [3.347, 21, 24], 'false': [0.894, 4, 1]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [3.347, 21, 24], 'false': [0.894, 4, 1]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [3.347, 21, 24], 'false': [0.894, 4, 1]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [3.347, 21, 24], 'false': [0.894, 4, 1]}]]
[{'': [0.24888888888889013, 0.16000000000000003]}, {'': [0.24888888888888935, 0.16]}, {'': [0.24888888888888855, 0.15999999999999998]}, {'': [0.2488888888888889, 0.16000000000000003]}, {'': [0.24888888888888897, 0.16000000000000003]}, {'': [0.2488888888888888, 0.15999999999999998]}, {'': [0.2488888888888889, 0.15999999999999998]}, {'': [0.24888888888888863, 0.16]}, {'': [0.2488888888888891, 0.16]}, {'': [0.24888888888888888, 0.15999999999999998]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Pruning resulted in null theory

Candidate for revision
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.39148226843284467;  // std dev = 0.499, 45.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=24 */
%   else return 0.0581489350995122;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.3368653790512673;  // std dev = 0.499, 45.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=24 */
%   else return 0.050922032513554226;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.27824435389960744;  // std dev = 0.499, 45.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=24 */
%   else return 0.04434629760466851;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.22189595847385687;  // std dev = 0.499, 45.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=24 */
%   else return 0.038428662236904595;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.17244533059929687;  // std dev = 0.499, 45.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=24 */
%   else return 0.03315494592188569;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.1317967397461822;  // std dev = 0.499, 45.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=24 */
%   else return 0.02849510592572117;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.09975589749696753;  // std dev = 0.499, 45.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=24 */
%   else return 0.024408230135271946;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.07511419612884186;  // std dev = 0.499, 45.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=24 */
%   else return 0.020846889108740264;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.056416881273956165;  // std dev = 0.499, 45.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=24 */
%   else return 0.017760671541598484;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.04232811156004819;  // std dev = 0.499, 45.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=24 */
%   else return 0.015098879183171288;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */


Results
   AUC ROC   = 0.548677
   AUC PR    = 0.225256
   CLL	      = -0.645903
   Precision = 0.22586 at threshold = 0.5
   Recall    = 0.938038
   F1        = 0.364061


Total learning time: 1.429 seconds
Total inference time: 0.883 seconds
AUC ROC: 0.548677


Results scoring model
   AUC ROC   = 0.56
   AUC PR    = 0.532667
   CLL	      = -0.67374
   Precision = 0.533333 at threshold = 0.5
   Recall    = 0.96
   F1        = 0.685714


Total scoring time: 0.656 seconds
Refined model CLL: -0.67374


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.548677
   AUC PR    = 0.225256
   CLL	      = -0.645903
   Precision = 0.22586 at threshold = 0.5
   Recall    = 0.938038
   F1        = 0.364061


Total learning time: 3.68 seconds
Total inference time: 0.971 seconds
AUC ROC: 0.548677
Total revision time: 3.68
Best scored revision CLL: -0.67374


Dataset: 3_imdb_cora, Fold: 3, Type: Transfer (trRDN-B), Time: 00:01:29
{'AUC ROC': 0.548677, 'AUC PR': 0.225256, 'CLL': -0.645903, 'Precision': [0.22586, 0.5], 'Recall': 0.938038, 'F1': 0.364061, 'Learning time': 3.68, 'Inference time': 0.971, 'parameter_25': {'AUC ROC': 0.548677, 'AUC PR': 0.225256, 'CLL': -0.645903, 'Precision': [0.22586, 0.5], 'Recall': 0.938038, 'F1': 0.364061, 'Learning time': 0.925, 'Inference time': 0.971}}


Starting fold 4

Target train facts examples: 34429
Target train pos examples: 2270
Target train neg examples: 3954

Target test facts examples: 8129
Target test pos	 examples: 747
Target test neg examples: 1068

Amount of data: 5
******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.3581489350995123;  // std dev = 1.581, 10.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.30874113578563506;  // std dev = 1.581, 10.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.2564123687585864;  // std dev = 1.581, 10.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.20613740734453975;  // std dev = 1.581, 10.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.16162857548414675;  // std dev = 1.581, 10.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.1245559779208197;  // std dev = 1.581, 10.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.09492800936730683;  // std dev = 1.581, 10.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.07186088850055855;  // std dev = 1.581, 10.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.05418307375954949;  // std dev = 1.581, 10.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.04076025323305626;  // std dev = 1.581, 10.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */


Results
   AUC ROC   = 0.423025
   AUC PR    = 0.374896
   CLL	      = -0.76
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 0.867 seconds
Total inference time: 0.854 seconds
AUC ROC: 0.423025


Results scoring model
   AUC ROC   = 0.5
   AUC PR    = 0.5
   CLL	      = -0.695026
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total scoring time: 0.628 seconds
Parameter learned model CLL: -0.695026


Structure after Parameter Learning
[['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 0], 'false': [1.581, 5, 5]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 0], 'false': [1.581, 5, 5]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 0], 'false': [1.581, 5, 5]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 0], 'false': [1.581, 5, 5]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 0], 'false': [1.581, 5, 5]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 0], 'false': [1.581, 5, 5]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 0], 'false': [1.581, 5, 5]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 0], 'false': [1.581, 5, 5]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 0], 'false': [1.581, 5, 5]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 0], 'false': [1.581, 5, 5]}]]
[{'': [nan, 0.24999999999999983]}, {'': [nan, 0.24999999999999994]}, {'': [nan, 0.25000000000000006]}, {'': [nan, 0.24999999999999992]}, {'': [nan, 0.24999999999999994]}, {'': [nan, 0.24999999999999986]}, {'': [nan, 0.25]}, {'': [nan, 0.25000000000000006]}, {'': [nan, 0.25]}, {'': [nan, 0.24999999999999994]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Pruning resulted in null theory

Candidate for revision
0;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
1;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
2;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
3;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
4;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
5;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
6;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
7;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
8;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
9;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.3581489350995123;  // std dev = 0.500, 10.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.30874113578563506;  // std dev = 0.500, 10.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.2564123687585864;  // std dev = 0.500, 10.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.20613740734453975;  // std dev = 0.500, 10.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.16162857548414675;  // std dev = 0.500, 10.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.1245559779208197;  // std dev = 0.500, 10.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.09492800936730683;  // std dev = 0.500, 10.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.07186088850055855;  // std dev = 0.500, 10.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.05418307375954949;  // std dev = 0.500, 10.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.04076025323305626;  // std dev = 0.500, 10.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */


Results
   AUC ROC   = 0.423025
   AUC PR    = 0.374896
   CLL	      = -0.76
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 1.223 seconds
Total inference time: 0.816 seconds
AUC ROC: 0.423025


Results scoring model
   AUC ROC   = 0.5
   AUC PR    = 0.5
   CLL	      = -0.695026
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total scoring time: 0.629 seconds
Refined model CLL: -0.695026


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.423025
   AUC PR    = 0.374896
   CLL	      = -0.76
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 3.347 seconds
Total inference time: 0.854 seconds
AUC ROC: 0.423025
Total revision time: 3.347
Best scored revision CLL: -0.695026


Dataset: 3_imdb_cora, Fold: 4, Type: Transfer (trRDN-B), Time: 00:01:35
{'AUC ROC': 0.423025, 'AUC PR': 0.374896, 'CLL': -0.76, 'Precision': [nan, 0.5], 'Recall': 0.0, 'F1': nan, 'Learning time': 3.347, 'Inference time': 0.854, 'parameter_5': {'AUC ROC': 0.423025, 'AUC PR': 0.374896, 'CLL': -0.76, 'Precision': [nan, 0.5], 'Recall': 0.0, 'F1': nan, 'Learning time': 0.867, 'Inference time': 0.854}}


Amount of data: 10
******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.3875606998053947;  // std dev = 2.058, 17.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=9 */
%   else return 0.19148226843284552;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.3335621649521725;  // std dev = 2.058, 17.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=9 */
%   else return 0.16653882456488175;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.2756931975053717;  // std dev = 2.058, 17.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=9 */
%   else return 0.1420942428155648;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.22006690870309975;  // std dev = 2.058, 17.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=9 */
%   else return 0.11914890490746428;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.1711960835655672;  // std dev = 2.058, 17.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=9 */
%   else return 0.09841340278401862;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.13096016067527044;  // std dev = 2.058, 17.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=9 */
%   else return 0.08026654944252243;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.09919352208121096;  // std dev = 2.058, 17.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=9 */
%   else return 0.06479591611329232;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.07472887841652442;  // std dev = 2.058, 17.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=9 */
%   else return 0.05187916934404054;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.05614584081272424;  // std dev = 2.058, 17.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=9 */
%   else return 0.04126932998424626;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.04213215515674406;  // std dev = 2.058, 17.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=9 */
%   else return 0.032663748734830134;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */


Results
   AUC ROC   = 0.528075
   AUC PR    = 0.425919
   CLL	      = -0.682112
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 0.913 seconds
Total inference time: 0.786 seconds
AUC ROC: 0.528075


Results scoring model
   AUC ROC   = 0.55
   AUC PR    = 0.527941
   CLL	      = -0.685109
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total scoring time: 0.66 seconds
Parameter learned model CLL: -0.685109


Structure after Parameter Learning
[['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [2.058, 8, 9], 'false': [0.816, 2, 1]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [2.058, 8, 9], 'false': [0.816, 2, 1]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [2.058, 8, 9], 'false': [0.816, 2, 1]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [2.058, 8, 9], 'false': [0.816, 2, 1]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [2.058, 8, 9], 'false': [0.816, 2, 1]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [2.058, 8, 9], 'false': [0.816, 2, 1]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [2.058, 8, 9], 'false': [0.816, 2, 1]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [2.058, 8, 9], 'false': [0.816, 2, 1]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [2.058, 8, 9], 'false': [0.816, 2, 1]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [2.058, 8, 9], 'false': [0.816, 2, 1]}]]
[{'': [0.24913494809688577, 0.22222222222222224]}, {'': [0.24913494809688555, 0.2222222222222222]}, {'': [0.24913494809688586, 0.22222222222222218]}, {'': [0.24913494809688566, 0.22222222222222224]}, {'': [0.24913494809688586, 0.2222222222222222]}, {'': [0.24913494809688586, 0.22222222222222224]}, {'': [0.2491349480968859, 0.22222222222222224]}, {'': [0.24913494809688577, 0.2222222222222222]}, {'': [0.24913494809688572, 0.22222222222222218]}, {'': [0.24913494809688583, 0.2222222222222222]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Pruning resulted in null theory

Candidate for revision
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.3875606998053947;  // std dev = 0.499, 17.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=9 */
%   else return 0.19148226843284552;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.3335621649521725;  // std dev = 0.499, 17.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=9 */
%   else return 0.16653882456488175;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.2756931975053717;  // std dev = 0.499, 17.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=9 */
%   else return 0.1420942428155648;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.22006690870309975;  // std dev = 0.499, 17.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=9 */
%   else return 0.11914890490746428;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.1711960835655672;  // std dev = 0.499, 17.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=9 */
%   else return 0.09841340278401862;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.13096016067527044;  // std dev = 0.499, 17.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=9 */
%   else return 0.08026654944252243;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.09919352208121096;  // std dev = 0.499, 17.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=9 */
%   else return 0.06479591611329232;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.07472887841652442;  // std dev = 0.499, 17.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=9 */
%   else return 0.05187916934404054;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.05614584081272424;  // std dev = 0.499, 17.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=9 */
%   else return 0.04126932998424626;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.04213215515674406;  // std dev = 0.499, 17.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=9 */
%   else return 0.032663748734830134;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */


Results
   AUC ROC   = 0.528075
   AUC PR    = 0.425919
   CLL	      = -0.682112
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 1.364 seconds
Total inference time: 0.802 seconds
AUC ROC: 0.528075


Results scoring model
   AUC ROC   = 0.55
   AUC PR    = 0.527941
   CLL	      = -0.685109
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total scoring time: 0.644 seconds
Refined model CLL: -0.685109


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.528075
   AUC PR    = 0.425919
   CLL	      = -0.682112
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 3.5810000000000004 seconds
Total inference time: 0.786 seconds
AUC ROC: 0.528075
Total revision time: 3.5810000000000004
Best scored revision CLL: -0.685109


Dataset: 3_imdb_cora, Fold: 4, Type: Transfer (trRDN-B), Time: 00:01:41
{'AUC ROC': 0.528075, 'AUC PR': 0.425919, 'CLL': -0.682112, 'Precision': [nan, 0.5], 'Recall': 0.0, 'F1': nan, 'Learning time': 3.5810000000000004, 'Inference time': 0.786, 'parameter_10': {'AUC ROC': 0.528075, 'AUC PR': 0.425919, 'CLL': -0.682112, 'Precision': [nan, 0.5], 'Recall': 0.0, 'F1': nan, 'Learning time': 0.913, 'Inference time': 0.786}}


Amount of data: 15
******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.41814893509951234;  // std dev = 2.482, 25.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=14 */
%   else return 0.0581489350995122;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.35928812485445805;  // std dev = 2.482, 25.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=14 */
%   else return 0.050922032513554226;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.2954715283798251;  // std dev = 2.482, 25.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=14 */
%   else return 0.04434629760466851;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.23416667865890822;  // std dev = 2.482, 25.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=14 */
%   else return 0.038428662236904595;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.18079518226327237;  // std dev = 2.482, 25.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=14 */
%   else return 0.03315494592188569;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.1374049750226437;  // std dev = 2.482, 25.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=14 */
%   else return 0.02849510592572117;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.10357035484665861;  // std dev = 2.482, 25.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=14 */
%   else return 0.024408230135271946;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.07778105384254747;  // std dev = 2.482, 25.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=14 */
%   else return 0.020846889108740264;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.058343297820867085;  // std dev = 2.482, 25.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=14 */
%   else return 0.017760671541598484;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.043763178362585115;  // std dev = 2.482, 25.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=14 */
%   else return 0.015098879183171288;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */


Results
   AUC ROC   = 0.528075
   AUC PR    = 0.425919
   CLL	      = -0.690365
   Precision = 0.4262 at threshold = 0.5
   Recall    = 0.962517
   F1        = 0.590797


Total learning time: 0.889 seconds
Total inference time: 0.843 seconds
AUC ROC: 0.528075


Results scoring model
   AUC ROC   = 0.6
   AUC PR    = 0.558
   CLL	      = -0.656906
   Precision = 0.56 at threshold = 0.5
   Recall    = 0.933333
   F1        = 0.7


Total scoring time: 0.665 seconds
Parameter learned model CLL: -0.656906


Structure after Parameter Learning
[['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [2.482, 11, 14], 'false': [0.894, 4, 1]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [2.482, 11, 14], 'false': [0.894, 4, 1]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [2.482, 11, 14], 'false': [0.894, 4, 1]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [2.482, 11, 14], 'false': [0.894, 4, 1]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [2.482, 11, 14], 'false': [0.894, 4, 1]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [2.482, 11, 14], 'false': [0.894, 4, 1]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [2.482, 11, 14], 'false': [0.894, 4, 1]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [2.482, 11, 14], 'false': [0.894, 4, 1]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [2.482, 11, 14], 'false': [0.894, 4, 1]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [2.482, 11, 14], 'false': [0.894, 4, 1]}]]
[{'': [0.24639999999999954, 0.16000000000000003]}, {'': [0.24639999999999992, 0.16]}, {'': [0.24639999999999965, 0.15999999999999998]}, {'': [0.24640000000000023, 0.16000000000000003]}, {'': [0.24640000000000023, 0.16000000000000003]}, {'': [0.2464, 0.15999999999999998]}, {'': [0.2463999999999999, 0.15999999999999998]}, {'': [0.2464, 0.16]}, {'': [0.24639999999999998, 0.16]}, {'': [0.24639999999999992, 0.15999999999999998]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Pruning resulted in null theory

Candidate for revision
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.41814893509951234;  // std dev = 0.496, 25.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=14 */
%   else return 0.0581489350995122;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.35928812485445805;  // std dev = 0.496, 25.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=14 */
%   else return 0.050922032513554226;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.2954715283798251;  // std dev = 0.496, 25.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=14 */
%   else return 0.04434629760466851;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.23416667865890822;  // std dev = 0.496, 25.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=14 */
%   else return 0.038428662236904595;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.18079518226327237;  // std dev = 0.496, 25.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=14 */
%   else return 0.03315494592188569;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.1374049750226437;  // std dev = 0.496, 25.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=14 */
%   else return 0.02849510592572117;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.10357035484665861;  // std dev = 0.496, 25.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=14 */
%   else return 0.024408230135271946;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.07778105384254747;  // std dev = 0.496, 25.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=14 */
%   else return 0.020846889108740264;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.058343297820867085;  // std dev = 0.496, 25.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=14 */
%   else return 0.017760671541598484;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.043763178362585115;  // std dev = 0.496, 25.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=14 */
%   else return 0.015098879183171288;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */


Results
   AUC ROC   = 0.528075
   AUC PR    = 0.425919
   CLL	      = -0.690365
   Precision = 0.4262 at threshold = 0.5
   Recall    = 0.962517
   F1        = 0.590797


Total learning time: 1.292 seconds
Total inference time: 0.831 seconds
AUC ROC: 0.528075


Results scoring model
   AUC ROC   = 0.6
   AUC PR    = 0.558
   CLL	      = -0.656906
   Precision = 0.56 at threshold = 0.5
   Recall    = 0.933333
   F1        = 0.7


Total scoring time: 0.657 seconds
Refined model CLL: -0.656906


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.528075
   AUC PR    = 0.425919
   CLL	      = -0.690365
   Precision = 0.4262 at threshold = 0.5
   Recall    = 0.962517
   F1        = 0.590797


Total learning time: 3.503 seconds
Total inference time: 0.843 seconds
AUC ROC: 0.528075
Total revision time: 3.503
Best scored revision CLL: -0.656906


Dataset: 3_imdb_cora, Fold: 4, Type: Transfer (trRDN-B), Time: 00:01:46
{'AUC ROC': 0.528075, 'AUC PR': 0.425919, 'CLL': -0.690365, 'Precision': [0.4262, 0.5], 'Recall': 0.962517, 'F1': 0.590797, 'Learning time': 3.503, 'Inference time': 0.843, 'parameter_15': {'AUC ROC': 0.528075, 'AUC PR': 0.425919, 'CLL': -0.690365, 'Precision': [0.4262, 0.5], 'Recall': 0.962517, 'F1': 0.590797, 'Learning time': 0.889, 'Inference time': 0.843}}


Amount of data: 20
******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.41697246451127695;  // std dev = 2.895, 34.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=19 */
%   else return 0.024815601766178873;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.3583003250108236;  // std dev = 2.895, 34.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=19 */
%   else return 0.02176788419240575;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.29471590880166004;  // std dev = 2.895, 34.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=19 */
%   else return 0.01904987294481035;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.23363128206423614;  // std dev = 2.895, 34.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=19 */
%   else return 0.01663677639228948;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.18043177542736205;  // std dev = 2.895, 34.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=19 */
%   else return 0.014502864105143046;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.1371600215023839;  // std dev = 2.895, 34.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=19 */
%   else return 0.01262239661487466;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.10340190180828672;  // std dev = 2.895, 34.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=19 */
%   else return 0.010970321301480393;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.07766118912062178;  // std dev = 2.895, 34.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=19 */
%   else return 0.009522764707203951;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.05825481259536227;  // std dev = 2.895, 34.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=19 */
%   else return 0.00825735549633603;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.043695727742500565;  // std dev = 2.895, 34.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=19 */
%   else return 0.007153411981729964;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */


Results
   AUC ROC   = 0.528075
   AUC PR    = 0.425919
   CLL	      = -0.690538
   Precision = 0.4262 at threshold = 0.5
   Recall    = 0.962517
   F1        = 0.590797


Total learning time: 0.997 seconds
Total inference time: 0.769 seconds
AUC ROC: 0.528075


Results scoring model
   AUC ROC   = 0.6
   AUC PR    = 0.557353
   CLL	      = -0.652723
   Precision = 0.558824 at threshold = 0.5
   Recall    = 0.95
   F1        = 0.703704


Total scoring time: 0.652 seconds
Parameter learned model CLL: -0.652723


Structure after Parameter Learning
[['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [2.895, 15, 19], 'false': [0.913, 5, 1]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [2.895, 15, 19], 'false': [0.913, 5, 1]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [2.895, 15, 19], 'false': [0.913, 5, 1]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [2.895, 15, 19], 'false': [0.913, 5, 1]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [2.895, 15, 19], 'false': [0.913, 5, 1]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [2.895, 15, 19], 'false': [0.913, 5, 1]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [2.895, 15, 19], 'false': [0.913, 5, 1]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [2.895, 15, 19], 'false': [0.913, 5, 1]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [2.895, 15, 19], 'false': [0.913, 5, 1]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [2.895, 15, 19], 'false': [0.913, 5, 1]}]]
[{'': [0.24653979238754284, 0.13888888888888892]}, {'': [0.24653979238754278, 0.13888888888888887]}, {'': [0.24653979238754384, 0.13888888888888892]}, {'': [0.2465397923875433, 0.13888888888888887]}, {'': [0.2465397923875436, 0.1388888888888889]}, {'': [0.24653979238754348, 0.13888888888888892]}, {'': [0.2465397923875432, 0.1388888888888889]}, {'': [0.2465397923875432, 0.13888888888888892]}, {'': [0.24653979238754342, 0.13888888888888892]}, {'': [0.2465397923875432, 0.1388888888888889]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Pruning resulted in null theory

Candidate for revision
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.41697246451127695;  // std dev = 0.497, 34.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=19 */
%   else return 0.024815601766178873;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.3583003250108236;  // std dev = 0.497, 34.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=19 */
%   else return 0.02176788419240575;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.29471590880166004;  // std dev = 0.497, 34.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=19 */
%   else return 0.01904987294481035;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.23363128206423614;  // std dev = 0.497, 34.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=19 */
%   else return 0.01663677639228948;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.18043177542736205;  // std dev = 0.497, 34.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=19 */
%   else return 0.014502864105143046;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.1371600215023839;  // std dev = 0.497, 34.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=19 */
%   else return 0.01262239661487466;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.10340190180828672;  // std dev = 0.497, 34.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=19 */
%   else return 0.010970321301480393;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.07766118912062178;  // std dev = 0.497, 34.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=19 */
%   else return 0.009522764707203951;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.05825481259536227;  // std dev = 0.497, 34.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=19 */
%   else return 0.00825735549633603;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.043695727742500565;  // std dev = 0.497, 34.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=19 */
%   else return 0.007153411981729964;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */


Results
   AUC ROC   = 0.528075
   AUC PR    = 0.425919
   CLL	      = -0.690538
   Precision = 0.4262 at threshold = 0.5
   Recall    = 0.962517
   F1        = 0.590797


Total learning time: 1.374 seconds
Total inference time: 0.808 seconds
AUC ROC: 0.528075


Results scoring model
   AUC ROC   = 0.6
   AUC PR    = 0.557353
   CLL	      = -0.652723
   Precision = 0.558824 at threshold = 0.5
   Recall    = 0.95
   F1        = 0.703704


Total scoring time: 0.667 seconds
Refined model CLL: -0.652723


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.528075
   AUC PR    = 0.425919
   CLL	      = -0.690538
   Precision = 0.4262 at threshold = 0.5
   Recall    = 0.962517
   F1        = 0.590797


Total learning time: 3.6900000000000004 seconds
Total inference time: 0.769 seconds
AUC ROC: 0.528075
Total revision time: 3.6900000000000004
Best scored revision CLL: -0.652723


Dataset: 3_imdb_cora, Fold: 4, Type: Transfer (trRDN-B), Time: 00:01:52
{'AUC ROC': 0.528075, 'AUC PR': 0.425919, 'CLL': -0.690538, 'Precision': [0.4262, 0.5], 'Recall': 0.962517, 'F1': 0.590797, 'Learning time': 3.6900000000000004, 'Inference time': 0.769, 'parameter_20': {'AUC ROC': 0.528075, 'AUC PR': 0.425919, 'CLL': -0.690538, 'Precision': [0.4262, 0.5], 'Recall': 0.962517, 'F1': 0.590797, 'Learning time': 0.997, 'Inference time': 0.769}}


Amount of data: 25
******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.8581489350995121;  // std dev = 2.11e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return 0.3262340414824902;  // std dev = 3.421, 47.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=22 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.7194734122109545;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return 0.28171422482890246;  // std dev = 3.421, 47.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=22 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.5553664367462845;  // std dev = 1.05e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return 0.23519292070564615;  // std dev = 3.421, 47.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=22 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.41751358415830997;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return 0.19057755295478856;  // std dev = 3.421, 47.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=22 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.32071184716014967;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return 0.15080101353659994;  // std dev = 3.421, 47.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=22 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.25517224256948945;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return 0.11727501093763941;  // std dev = 3.421, 47.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=22 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.20975771563253554;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return 0.09012256866998798;  // std dev = 3.421, 47.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=22 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.17709649774527736;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return 0.06871315573496113;  // std dev = 3.421, 47.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=22 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.15274385809367097;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return 0.05212246791353032;  // std dev = 3.421, 47.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=22 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.13400703000801117;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return 0.039407136735360955;  // std dev = 3.421, 47.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=22 */


Results
   AUC ROC   = 0.576975
   AUC PR    = 0.567681
   CLL	      = -0.634676
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.153949
   F1        = 0.266821


Total learning time: 0.975 seconds
Total inference time: 0.827 seconds
AUC ROC: 0.576975


Results scoring model
   AUC ROC   = 0.56
   AUC PR    = 0.617178
   CLL	      = -0.658938
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.12
   F1        = 0.214286


Total scoring time: 0.672 seconds
Parameter learned model CLL: -0.658938


Structure after Parameter Learning
[['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [2.11e-08, 0, 3], 'false': [3.421, 25, 22]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 3], 'false': [3.421, 25, 22]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [1.05e-08, 0, 3], 'false': [3.421, 25, 22]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 3], 'false': [3.421, 25, 22]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 3], 'false': [3.421, 25, 22]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 3], 'false': [3.421, 25, 22]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 3], 'false': [3.421, 25, 22]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 3], 'false': [3.421, 25, 22]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 3], 'false': [3.421, 25, 22]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 3], 'false': [3.421, 25, 22]}]]
[{'': [1.4802973661668753e-16, 0.24898143956541524]}, {'': [0.0, 0.24898143956541438]}, {'': [3.700743415417188e-17, 0.24898143956541438]}, {'': [-3.700743415417188e-17, 0.24898143956541452]}, {'': [0.0, 0.24898143956541383]}, {'': [0.0, 0.24898143956541466]}, {'': [0.0, 0.24898143956541408]}, {'': [0.0, 0.24898143956541424]}, {'': [-4.625929269271485e-18, 0.2489814395654141]}, {'': [-2.3129646346357427e-18, 0.24898143956541377]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
1;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
2;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
3;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
4;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
5;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
6;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
7;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
8;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
9;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.8581489350995121;  // std dev = 2.11e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.3703440570507312;  // std dev = 0.500, 41.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=21 */
%   | else return 0.024815601766178873;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.7194734122109545;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.31904282398387;  // std dev = 0.500, 41.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=21 */
%   | else return 0.02176788419240575;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.5553664367462845;  // std dev = 1.05e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.26443852004756274;  // std dev = 0.500, 41.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=21 */
%   | else return 0.01904987294481035;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.41751358415830997;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.21195918406347247;  // std dev = 0.500, 41.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=21 */
%   | else return 0.01663677639228948;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.32071184716014967;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.16563980122975733;  // std dev = 0.500, 41.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=21 */
%   | else return 0.014502864105143046;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.25517224256948945;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.1272416898298555;  // std dev = 0.500, 41.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=21 */
%   | else return 0.01262239661487466;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.20975771563253554;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.09670963449127609;  // std dev = 0.500, 41.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=21 */
%   | else return 0.010970321301480393;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.17709649774527736;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.07304803800429877;  // std dev = 0.500, 41.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=21 */
%   | else return 0.009522764707203951;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.15274385809367097;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.054984265879041136;  // std dev = 0.500, 41.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=21 */
%   | else return 0.00825735549633603;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.13400703000801117;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.04131014405823589;  // std dev = 0.500, 41.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=21 */
%   | else return 0.007153411981729964;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */


Results
   AUC ROC   = 0.597842
   AUC PR    = 0.578142
   CLL	      = -0.639315
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.153949
   F1        = 0.266821


Total learning time: 2.702 seconds
Total inference time: 0.91 seconds
AUC ROC: 0.597842


Results scoring model
   AUC ROC   = 0.628
   AUC PR    = 0.652687
   CLL	      = -0.631414
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.12
   F1        = 0.214286


Total scoring time: 0.764 seconds
Refined model CLL: -0.631414


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.597842
   AUC PR    = 0.578142
   CLL	      = -0.639315
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.153949
   F1        = 0.266821


Total learning time: 5.113 seconds
Total inference time: 0.91 seconds
AUC ROC: 0.597842
Total revision time: 5.113
Best scored revision CLL: -0.631414


Dataset: 3_imdb_cora, Fold: 4, Type: Transfer (trRDN-B), Time: 00:02:00
{'AUC ROC': 0.597842, 'AUC PR': 0.578142, 'CLL': -0.639315, 'Precision': [1.0, 0.5], 'Recall': 0.153949, 'F1': 0.266821, 'Learning time': 5.113, 'Inference time': 0.91, 'parameter_25': {'AUC ROC': 0.576975, 'AUC PR': 0.567681, 'CLL': -0.634676, 'Precision': [1.0, 0.5], 'Recall': 0.153949, 'F1': 0.266821, 'Learning time': 0.975, 'Inference time': 0.827}}


Starting fold 5

Target train facts examples: 33914
Target train pos examples: 2467
Target train neg examples: 4522

Target test facts examples: 8644
Target test pos	 examples: 550
Target test neg examples: 500

Amount of data: 5
******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.3581489350995123;  // std dev = 1.581, 10.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.30874113578563506;  // std dev = 1.581, 10.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.2564123687585864;  // std dev = 1.581, 10.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.20613740734453975;  // std dev = 1.581, 10.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.16162857548414675;  // std dev = 1.581, 10.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.1245559779208197;  // std dev = 1.581, 10.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.09492800936730683;  // std dev = 1.581, 10.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.07186088850055855;  // std dev = 1.581, 10.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.05418307375954949;  // std dev = 1.581, 10.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.04076025323305626;  // std dev = 1.581, 10.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */


Results
   AUC ROC   = 0.425455
   AUC PR    = 0.48656
   CLL	      = -0.791397
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 0.942 seconds
Total inference time: 0.726 seconds
AUC ROC: 0.425455


Results scoring model
   AUC ROC   = 0.5
   AUC PR    = 0.5
   CLL	      = -0.695026
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total scoring time: 0.636 seconds
Parameter learned model CLL: -0.695026


Structure after Parameter Learning
[['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 0], 'false': [1.581, 5, 5]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 0], 'false': [1.581, 5, 5]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 0], 'false': [1.581, 5, 5]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 0], 'false': [1.581, 5, 5]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 0], 'false': [1.581, 5, 5]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 0], 'false': [1.581, 5, 5]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 0], 'false': [1.581, 5, 5]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 0], 'false': [1.581, 5, 5]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 0], 'false': [1.581, 5, 5]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 0], 'false': [1.581, 5, 5]}]]
[{'': [nan, 0.24999999999999983]}, {'': [nan, 0.24999999999999994]}, {'': [nan, 0.25000000000000006]}, {'': [nan, 0.24999999999999992]}, {'': [nan, 0.24999999999999994]}, {'': [nan, 0.24999999999999986]}, {'': [nan, 0.25]}, {'': [nan, 0.25000000000000006]}, {'': [nan, 0.25]}, {'': [nan, 0.24999999999999994]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Pruning resulted in null theory

Candidate for revision
0;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
1;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
2;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
3;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
4;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
5;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
6;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
7;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
8;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
9;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.3581489350995123;  // std dev = 0.500, 10.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.30874113578563506;  // std dev = 0.500, 10.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.2564123687585864;  // std dev = 0.500, 10.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.20613740734453975;  // std dev = 0.500, 10.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.16162857548414675;  // std dev = 0.500, 10.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.1245559779208197;  // std dev = 0.500, 10.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.09492800936730683;  // std dev = 0.500, 10.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.07186088850055855;  // std dev = 0.500, 10.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.05418307375954949;  // std dev = 0.500, 10.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.04076025323305626;  // std dev = 0.500, 10.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */


Results
   AUC ROC   = 0.425455
   AUC PR    = 0.48656
   CLL	      = -0.791397
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 1.327 seconds
Total inference time: 0.723 seconds
AUC ROC: 0.425455


Results scoring model
   AUC ROC   = 0.5
   AUC PR    = 0.5
   CLL	      = -0.695026
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total scoring time: 0.634 seconds
Refined model CLL: -0.695026


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.425455
   AUC PR    = 0.48656
   CLL	      = -0.791397
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 3.5389999999999997 seconds
Total inference time: 0.726 seconds
AUC ROC: 0.425455
Total revision time: 3.5389999999999997
Best scored revision CLL: -0.695026


Dataset: 3_imdb_cora, Fold: 5, Type: Transfer (trRDN-B), Time: 00:02:05
{'AUC ROC': 0.425455, 'AUC PR': 0.48656, 'CLL': -0.791397, 'Precision': [nan, 0.5], 'Recall': 0.0, 'F1': nan, 'Learning time': 3.5389999999999997, 'Inference time': 0.726, 'parameter_5': {'AUC ROC': 0.425455, 'AUC PR': 0.48656, 'CLL': -0.791397, 'Precision': [nan, 0.5], 'Recall': 0.0, 'F1': nan, 'Learning time': 0.942, 'Inference time': 0.726}}


Amount of data: 10
******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.8581489350995122;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else return 0.33183314562582816;  // std dev = 2.176, 19.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=9 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.7194734122109545;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else return 0.28646280754165054;  // std dev = 2.176, 19.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=9 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.5553664367462845;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else return 0.23893826810287416;  // std dev = 2.176, 19.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=9 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.41751358415830997;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else return 0.19334220366104113;  // std dev = 2.176, 19.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=9 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.32071184716014967;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else return 0.15273729662465255;  // std dev = 2.176, 19.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=9 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.25517224256948945;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else return 0.11858202407945204;  // std dev = 2.176, 19.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=9 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.20975771563253554;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else return 0.09098433275637943;  // std dev = 2.176, 19.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=9 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.17709649774527736;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else return 0.06927339775071423;  // std dev = 2.176, 19.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=9 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.15274385809367097;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else return 0.052483554573519914;  // std dev = 2.176, 19.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=9 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.13400703000801117;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else return 0.0396383789772704;  // std dev = 2.176, 19.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=9 */


Results
   AUC ROC   = 0.574545
   AUC PR    = 0.655418
   CLL	      = -0.651348
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.149091
   F1        = 0.259494


Total learning time: 0.901 seconds
Total inference time: 0.703 seconds
AUC ROC: 0.574545


Results scoring model
   AUC ROC   = 0.55
   AUC PR    = 0.608377
   CLL	      = -0.665231
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.1
   F1        = 0.181818


Total scoring time: 0.644 seconds
Parameter learned model CLL: -0.665231


Structure after Parameter Learning
[['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 1], 'false': [2.176, 10, 9]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 1], 'false': [2.176, 10, 9]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 1], 'false': [2.176, 10, 9]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 1], 'false': [2.176, 10, 9]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 1], 'false': [2.176, 10, 9]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 1], 'false': [2.176, 10, 9]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 1], 'false': [2.176, 10, 9]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 1], 'false': [2.176, 10, 9]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 1], 'false': [2.176, 10, 9]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 1], 'false': [2.176, 10, 9]}]]
[{'': [0.0, 0.2493074792243767]}, {'': [0.0, 0.24930747922437685]}, {'': [0.0, 0.249307479224377]}, {'': [0.0, 0.24930747922437685]}, {'': [0.0, 0.24930747922437663]}, {'': [0.0, 0.24930747922437657]}, {'': [0.0, 0.24930747922437685]}, {'': [0.0, 0.2493074792243767]}, {'': [0.0, 0.2493074792243768]}, {'': [0.0, 0.2493074792243768]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
1;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
2;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
3;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
4;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
5;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
6;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
7;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
8;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
9;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.8581489350995122;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else return 0.33183314562582816;  // std dev = 0.499, 19.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=9 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.7194734122109545;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else return 0.28646280754165054;  // std dev = 0.499, 19.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=9 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.5553664367462845;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else return 0.23893826810287416;  // std dev = 0.499, 19.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=9 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.41751358415830997;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else return 0.19334220366104113;  // std dev = 0.499, 19.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=9 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.32071184716014967;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else return 0.15273729662465255;  // std dev = 0.499, 19.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=9 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.25517224256948945;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else return 0.11858202407945204;  // std dev = 0.499, 19.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=9 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.20975771563253554;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else return 0.09098433275637943;  // std dev = 0.499, 19.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=9 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.17709649774527736;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else return 0.06927339775071423;  // std dev = 0.499, 19.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=9 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.15274385809367097;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else return 0.052483554573519914;  // std dev = 0.499, 19.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=9 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.13400703000801117;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else return 0.0396383789772704;  // std dev = 0.499, 19.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=9 */


Results
   AUC ROC   = 0.574545
   AUC PR    = 0.655418
   CLL	      = -0.651348
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.149091
   F1        = 0.259494


Total learning time: 1.219 seconds
Total inference time: 0.715 seconds
AUC ROC: 0.574545


Results scoring model
   AUC ROC   = 0.55
   AUC PR    = 0.608377
   CLL	      = -0.665231
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.1
   F1        = 0.181818


Total scoring time: 0.635 seconds
Refined model CLL: -0.665231


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.574545
   AUC PR    = 0.655418
   CLL	      = -0.651348
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.149091
   F1        = 0.259494


Total learning time: 3.399 seconds
Total inference time: 0.703 seconds
AUC ROC: 0.574545
Total revision time: 3.399
Best scored revision CLL: -0.665231


Dataset: 3_imdb_cora, Fold: 5, Type: Transfer (trRDN-B), Time: 00:02:11
{'AUC ROC': 0.574545, 'AUC PR': 0.655418, 'CLL': -0.651348, 'Precision': [1.0, 0.5], 'Recall': 0.149091, 'F1': 0.259494, 'Learning time': 3.399, 'Inference time': 0.703, 'parameter_10': {'AUC ROC': 0.574545, 'AUC PR': 0.655418, 'CLL': -0.651348, 'Precision': [1.0, 0.5], 'Recall': 0.149091, 'F1': 0.259494, 'Learning time': 0.901, 'Inference time': 0.703}}


Amount of data: 15
******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.37666745361803083;  // std dev = 2.596, 27.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=14 */
%   else return 0.19148226843284552;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.32437884151130014;  // std dev = 2.596, 27.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=14 */
%   else return 0.16653882456488175;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.2685825285923573;  // std dev = 2.596, 27.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=14 */
%   else return 0.1420942428155648;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.21495192589405884;  // std dev = 2.596, 27.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=14 */
%   else return 0.11914890490746428;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.16769453154858402;  // std dev = 2.596, 27.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=14 */
%   else return 0.09841340278401862;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.1286166480029106;  // std dev = 2.596, 27.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=14 */
%   else return 0.08026654944252243;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.09762538532838719;  // std dev = 2.596, 27.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=14 */
%   else return 0.06479591611329232;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.07366394600228472;  // std dev = 2.596, 27.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=14 */
%   else return 0.05187916934404054;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.05540606060826155;  // std dev = 2.596, 27.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=14 */
%   else return 0.04126932998424626;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.04160526031693688;  // std dev = 2.596, 27.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=14 */
%   else return 0.032663748734830134;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */


Results
   AUC ROC   = 0.614727
   AUC PR    = 0.592038
   CLL	      = -0.671104
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 0.993 seconds
Total inference time: 0.757 seconds
AUC ROC: 0.614727


Results scoring model
   AUC ROC   = 0.533333
   AUC PR    = 0.517901
   CLL	      = -0.688774
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total scoring time: 0.64 seconds
Parameter learned model CLL: -0.688774


Structure after Parameter Learning
[['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [2.596, 13, 14], 'false': [0.816, 2, 1]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [2.596, 13, 14], 'false': [0.816, 2, 1]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [2.596, 13, 14], 'false': [0.816, 2, 1]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [2.596, 13, 14], 'false': [0.816, 2, 1]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [2.596, 13, 14], 'false': [0.816, 2, 1]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [2.596, 13, 14], 'false': [0.816, 2, 1]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [2.596, 13, 14], 'false': [0.816, 2, 1]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [2.596, 13, 14], 'false': [0.816, 2, 1]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [2.596, 13, 14], 'false': [0.816, 2, 1]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [2.596, 13, 14], 'false': [0.816, 2, 1]}]]
[{'': [0.24965706447187883, 0.22222222222222224]}, {'': [0.24965706447187902, 0.2222222222222222]}, {'': [0.24965706447187944, 0.22222222222222218]}, {'': [0.24965706447187924, 0.22222222222222224]}, {'': [0.24965706447187955, 0.2222222222222222]}, {'': [0.24965706447187944, 0.22222222222222224]}, {'': [0.24965706447187916, 0.22222222222222224]}, {'': [0.2496570644718794, 0.2222222222222222]}, {'': [0.2496570644718793, 0.22222222222222218]}, {'': [0.24965706447187927, 0.2222222222222222]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Pruning resulted in null theory

Candidate for revision
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.37666745361803083;  // std dev = 0.500, 27.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=14 */
%   else return 0.19148226843284552;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.32437884151130014;  // std dev = 0.500, 27.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=14 */
%   else return 0.16653882456488175;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.2685825285923573;  // std dev = 0.500, 27.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=14 */
%   else return 0.1420942428155648;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.21495192589405884;  // std dev = 0.500, 27.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=14 */
%   else return 0.11914890490746428;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.16769453154858402;  // std dev = 0.500, 27.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=14 */
%   else return 0.09841340278401862;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.1286166480029106;  // std dev = 0.500, 27.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=14 */
%   else return 0.08026654944252243;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.09762538532838719;  // std dev = 0.500, 27.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=14 */
%   else return 0.06479591611329232;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.07366394600228472;  // std dev = 0.500, 27.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=14 */
%   else return 0.05187916934404054;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.05540606060826155;  // std dev = 0.500, 27.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=14 */
%   else return 0.04126932998424626;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.04160526031693688;  // std dev = 0.500, 27.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=14 */
%   else return 0.032663748734830134;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */


Results
   AUC ROC   = 0.614727
   AUC PR    = 0.592038
   CLL	      = -0.671104
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 1.424 seconds
Total inference time: 0.735 seconds
AUC ROC: 0.614727


Results scoring model
   AUC ROC   = 0.533333
   AUC PR    = 0.517901
   CLL	      = -0.688774
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total scoring time: 0.66 seconds
Refined model CLL: -0.688774


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.614727
   AUC PR    = 0.592038
   CLL	      = -0.671104
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 3.717 seconds
Total inference time: 0.757 seconds
AUC ROC: 0.614727
Total revision time: 3.717
Best scored revision CLL: -0.688774


Dataset: 3_imdb_cora, Fold: 5, Type: Transfer (trRDN-B), Time: 00:02:17
{'AUC ROC': 0.614727, 'AUC PR': 0.592038, 'CLL': -0.671104, 'Precision': [nan, 0.5], 'Recall': 0.0, 'F1': nan, 'Learning time': 3.717, 'Inference time': 0.757, 'parameter_15': {'AUC ROC': 0.614727, 'AUC PR': 0.592038, 'CLL': -0.671104, 'Precision': [nan, 0.5], 'Recall': 0.0, 'F1': nan, 'Learning time': 0.993, 'Inference time': 0.757}}


Amount of data: 20
******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.8581489350995121;  // std dev = 2.11e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return 0.31760839455897183;  // std dev = 3.031, 37.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=17 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.7194734122109545;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return 0.2743930062984994;  // std dev = 3.031, 37.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=17 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.5553664367462845;  // std dev = 1.05e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return 0.22940409212560184;  // std dev = 3.031, 37.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=17 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.41751358415830997;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return 0.18628870627050972;  // std dev = 3.031, 37.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=17 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.32071184716014967;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return 0.14778567561990727;  // std dev = 3.031, 37.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=17 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.25517224256948945;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return 0.11523398454885339;  // std dev = 3.031, 37.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=17 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.20975771563253554;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return 0.08877605966596111;  // std dev = 3.031, 37.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=17 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.17709649774527736;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return 0.06784002556264199;  // std dev = 3.031, 37.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=17 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.15274385809367097;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return 0.05156345950024885;  // std dev = 3.031, 37.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=17 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.13400703000801117;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return 0.03905337379799511;  // std dev = 3.031, 37.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=17 */


Results
   AUC ROC   = 0.574545
   AUC PR    = 0.655418
   CLL	      = -0.653768
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.149091
   F1        = 0.259494


Total learning time: 0.989 seconds
Total inference time: 0.702 seconds
AUC ROC: 0.574545


Results scoring model
   AUC ROC   = 0.575
   AUC PR    = 0.638591
   CLL	      = -0.649272
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.15
   F1        = 0.26087


Total scoring time: 0.677 seconds
Parameter learned model CLL: -0.649272


Structure after Parameter Learning
[['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [2.11e-08, 0, 3], 'false': [3.031, 20, 17]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 3], 'false': [3.031, 20, 17]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [1.05e-08, 0, 3], 'false': [3.031, 20, 17]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 3], 'false': [3.031, 20, 17]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 3], 'false': [3.031, 20, 17]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 3], 'false': [3.031, 20, 17]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 3], 'false': [3.031, 20, 17]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 3], 'false': [3.031, 20, 17]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 3], 'false': [3.031, 20, 17]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 3], 'false': [3.031, 20, 17]}]]
[{'': [1.4802973661668753e-16, 0.24835646457268032]}, {'': [0.0, 0.24835646457268137]}, {'': [3.700743415417188e-17, 0.2483564645726806]}, {'': [-3.700743415417188e-17, 0.24835646457268118]}, {'': [0.0, 0.24835646457268037]}, {'': [0.0, 0.24835646457268085]}, {'': [0.0, 0.24835646457268098]}, {'': [0.0, 0.24835646457268104]}, {'': [-4.625929269271485e-18, 0.2483564645726807]}, {'': [-2.3129646346357427e-18, 0.24835646457268074]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
1;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
2;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
3;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
4;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
5;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
6;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
7;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
8;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
9;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.8581489350995121;  // std dev = 2.11e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return -0.14185106490048777;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else return 0.35814893509951234;  // std dev = 0.500, 34.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=17 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.7194734122109545;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.2832007961201038;  // std dev = 0.496, 34.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=16 */
%   | else return 0.16401254434762622;  // std dev = 0.791, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.5553664367462845;  // std dev = 1.05e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.23632086686999915;  // std dev = 0.495, 34.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=16 */
%   | else return 0.13986433403309048;  // std dev = 0.788, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.41751358415830997;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.1914098427178017;  // std dev = 0.495, 34.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=16 */
%   | else return 0.11729136742626663;  // std dev = 0.786, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.32071184716014967;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return -0.21046734553754154;  // std dev = 0.038, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else return 0.17854224000921648;  // std dev = 0.500, 34.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=17 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.25517224256948945;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return -0.17770062026193675;  // std dev = 0.033, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else return 0.13846514078946587;  // std dev = 0.500, 34.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=17 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.20975771563253554;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.08629873122556746;  // std dev = 0.489, 34.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=16 */
%   | else return 0.06963143469529996;  // std dev = 0.748, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.17709649774527736;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.06595713183771784;  // std dev = 0.489, 34.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=16 */
%   | else return 0.05655602597464086;  // std dev = 0.746, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.15274385809367097;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.05019234414420905;  // std dev = 0.489, 34.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=16 */
%   | else return 0.04566793062980129;  // std dev = 0.744, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.13400703000801117;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return -0.1800243080265845;  // std dev = 0.037, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else return 0.0572132595742695;  // std dev = 0.500, 34.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=17 */


Results
   AUC ROC   = 0.665935
   AUC PR    = 0.707959
   CLL	      = -0.651982
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.149091
   F1        = 0.259494


Total learning time: 2.304 seconds
Total inference time: 0.709 seconds
AUC ROC: 0.665935


Results scoring model
   AUC ROC   = 0.63875
   AUC PR    = 0.670539
   CLL	      = -0.615119
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.15
   F1        = 0.26087


Total scoring time: 0.699 seconds
Refined model CLL: -0.615119


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.665935
   AUC PR    = 0.707959
   CLL	      = -0.651982
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.149091
   F1        = 0.259494


Total learning time: 4.669 seconds
Total inference time: 0.709 seconds
AUC ROC: 0.665935
Total revision time: 4.669
Best scored revision CLL: -0.615119


Dataset: 3_imdb_cora, Fold: 5, Type: Transfer (trRDN-B), Time: 00:02:23
{'AUC ROC': 0.665935, 'AUC PR': 0.707959, 'CLL': -0.651982, 'Precision': [1.0, 0.5], 'Recall': 0.149091, 'F1': 0.259494, 'Learning time': 4.669, 'Inference time': 0.709, 'parameter_20': {'AUC ROC': 0.574545, 'AUC PR': 0.655418, 'CLL': -0.653768, 'Precision': [1.0, 0.5], 'Recall': 0.149091, 'F1': 0.259494, 'Learning time': 0.989, 'Inference time': 0.702}}


Amount of data: 25
******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.8581489350995121;  // std dev = 2.11e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return 0.3262340414824902;  // std dev = 3.421, 47.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=22 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.7194734122109545;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return 0.28171422482890246;  // std dev = 3.421, 47.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=22 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.5553664367462845;  // std dev = 1.05e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return 0.23519292070564615;  // std dev = 3.421, 47.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=22 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.41751358415830997;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return 0.19057755295478856;  // std dev = 3.421, 47.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=22 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.32071184716014967;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return 0.15080101353659994;  // std dev = 3.421, 47.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=22 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.25517224256948945;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return 0.11727501093763941;  // std dev = 3.421, 47.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=22 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.20975771563253554;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return 0.09012256866998798;  // std dev = 3.421, 47.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=22 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.17709649774527736;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return 0.06871315573496113;  // std dev = 3.421, 47.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=22 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.15274385809367097;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return 0.05212246791353032;  // std dev = 3.421, 47.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=22 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.13400703000801117;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return 0.039407136735360955;  // std dev = 3.421, 47.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=22 */


Results
   AUC ROC   = 0.574545
   AUC PR    = 0.655418
   CLL	      = -0.652212
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.149091
   F1        = 0.259494


Total learning time: 0.904 seconds
Total inference time: 0.736 seconds
AUC ROC: 0.574545


Results scoring model
   AUC ROC   = 0.56
   AUC PR    = 0.617178
   CLL	      = -0.658938
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.12
   F1        = 0.214286


Total scoring time: 0.655 seconds
Parameter learned model CLL: -0.658938


Structure after Parameter Learning
[['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [2.11e-08, 0, 3], 'false': [3.421, 25, 22]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 3], 'false': [3.421, 25, 22]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [1.05e-08, 0, 3], 'false': [3.421, 25, 22]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 3], 'false': [3.421, 25, 22]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 3], 'false': [3.421, 25, 22]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 3], 'false': [3.421, 25, 22]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 3], 'false': [3.421, 25, 22]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 3], 'false': [3.421, 25, 22]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 3], 'false': [3.421, 25, 22]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 3], 'false': [3.421, 25, 22]}]]
[{'': [1.4802973661668753e-16, 0.24898143956541524]}, {'': [0.0, 0.24898143956541438]}, {'': [3.700743415417188e-17, 0.24898143956541438]}, {'': [-3.700743415417188e-17, 0.24898143956541452]}, {'': [0.0, 0.24898143956541383]}, {'': [0.0, 0.24898143956541466]}, {'': [0.0, 0.24898143956541408]}, {'': [0.0, 0.24898143956541424]}, {'': [-4.625929269271485e-18, 0.2489814395654141]}, {'': [-2.3129646346357427e-18, 0.24898143956541377]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
1;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
2;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
3;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
4;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
5;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
6;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
7;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
8;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
9;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.8581489350995121;  // std dev = 2.11e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.33542166237223897;  // std dev = 0.499, 44.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=21 */
%   | else return 0.19148226843284552;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.7194734122109545;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return -0.18077688890218777;  // std dev = 0.017, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else return 0.31318526513097145;  // std dev = 0.500, 44.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=22 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.5553664367462845;  // std dev = 1.05e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return -0.15554487063679975;  // std dev = 0.015, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else return 0.2609145081274981;  // std dev = 0.500, 44.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=22 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.41751358415830997;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return -0.13620007140153226;  // std dev = 0.014, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else return 0.21029722115474622;  // std dev = 0.500, 44.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=22 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.32071184716014967;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.1506088996980755;  // std dev = 0.492, 44.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=21 */
%   | else return 0.09308911163938455;  // std dev = 0.750, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.25517224256948945;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.11697943892158161;  // std dev = 0.492, 44.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=21 */
%   | else return 0.07652978869516448;  // std dev = 0.747, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.20975771563253554;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return -0.14859996104507017;  // std dev = 0.024, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else return 0.10426923095476144;  // std dev = 0.500, 44.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=22 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.17709649774527736;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return -0.13078831899528764;  // std dev = 0.022, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else return 0.07909940133338406;  // std dev = 0.500, 44.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=22 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.15274385809367097;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return -0.11664185660506406;  // std dev = 0.020, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else return 0.05971991091258162;  // std dev = 0.500, 44.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=22 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.13400703000801117;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return -0.10516348679428206;  // std dev = 0.018, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else return 0.04496366101273781;  // std dev = 0.500, 44.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=22 */


Results
   AUC ROC   = 0.665935
   AUC PR    = 0.707959
   CLL	      = -0.666943
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.149091
   F1        = 0.259494


Total learning time: 1.929 seconds
Total inference time: 0.786 seconds
AUC ROC: 0.665935


Results scoring model
   AUC ROC   = 0.6128
   AUC PR    = 0.643611
   CLL	      = -0.625918
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.12
   F1        = 0.214286


Total scoring time: 0.718 seconds
Refined model CLL: -0.625918


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.665935
   AUC PR    = 0.707959
   CLL	      = -0.666943
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.149091
   F1        = 0.259494


Total learning time: 4.206 seconds
Total inference time: 0.786 seconds
AUC ROC: 0.665935
Total revision time: 4.206
Best scored revision CLL: -0.625918


Dataset: 3_imdb_cora, Fold: 5, Type: Transfer (trRDN-B), Time: 00:02:30
{'AUC ROC': 0.665935, 'AUC PR': 0.707959, 'CLL': -0.666943, 'Precision': [1.0, 0.5], 'Recall': 0.149091, 'F1': 0.259494, 'Learning time': 4.206, 'Inference time': 0.786, 'parameter_25': {'AUC ROC': 0.574545, 'AUC PR': 0.655418, 'CLL': -0.652212, 'Precision': [1.0, 0.5], 'Recall': 0.149091, 'F1': 0.259494, 'Learning time': 0.904, 'Inference time': 0.736}}


Starting fold 1

Target train facts examples: 35095
Target train pos examples: 2649
Target train neg examples: 4334

Target test facts examples: 7463
Target test pos	 examples: 368
Target test neg examples: 688

Amount of data: 5
******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.3581489350995123;  // std dev = 1.581, 10.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.30874113578563506;  // std dev = 1.581, 10.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.2564123687585864;  // std dev = 1.581, 10.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.20613740734453975;  // std dev = 1.581, 10.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.16162857548414675;  // std dev = 1.581, 10.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.1245559779208197;  // std dev = 1.581, 10.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.09492800936730683;  // std dev = 1.581, 10.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.07186088850055855;  // std dev = 1.581, 10.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.05418307375954949;  // std dev = 1.581, 10.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.04076025323305626;  // std dev = 1.581, 10.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */


Results
   AUC ROC   = 0.369565
   AUC PR    = 0.292101
   CLL	      = -0.785228
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 0.849 seconds
Total inference time: 0.697 seconds
AUC ROC: 0.369565


Results scoring model
   AUC ROC   = 0.5
   AUC PR    = 0.5
   CLL	      = -0.695026
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total scoring time: 0.627 seconds
Parameter learned model CLL: -0.695026


Structure after Parameter Learning
[['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 0], 'false': [1.581, 5, 5]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 0], 'false': [1.581, 5, 5]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 0], 'false': [1.581, 5, 5]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 0], 'false': [1.581, 5, 5]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 0], 'false': [1.581, 5, 5]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 0], 'false': [1.581, 5, 5]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 0], 'false': [1.581, 5, 5]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 0], 'false': [1.581, 5, 5]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 0], 'false': [1.581, 5, 5]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 0], 'false': [1.581, 5, 5]}]]
[{'': [nan, 0.24999999999999983]}, {'': [nan, 0.24999999999999994]}, {'': [nan, 0.25000000000000006]}, {'': [nan, 0.24999999999999992]}, {'': [nan, 0.24999999999999994]}, {'': [nan, 0.24999999999999986]}, {'': [nan, 0.25]}, {'': [nan, 0.25000000000000006]}, {'': [nan, 0.25]}, {'': [nan, 0.24999999999999994]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Pruning resulted in null theory

Candidate for revision
0;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
1;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
2;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
3;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
4;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
5;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
6;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
7;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
8;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
9;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.3581489350995123;  // std dev = 0.500, 10.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.30874113578563506;  // std dev = 0.500, 10.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.2564123687585864;  // std dev = 0.500, 10.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.20613740734453975;  // std dev = 0.500, 10.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.16162857548414675;  // std dev = 0.500, 10.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.1245559779208197;  // std dev = 0.500, 10.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.09492800936730683;  // std dev = 0.500, 10.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.07186088850055855;  // std dev = 0.500, 10.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.05418307375954949;  // std dev = 0.500, 10.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.04076025323305626;  // std dev = 0.500, 10.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */


Results
   AUC ROC   = 0.369565
   AUC PR    = 0.292101
   CLL	      = -0.785228
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 1.263 seconds
Total inference time: 0.724 seconds
AUC ROC: 0.369565


Results scoring model
   AUC ROC   = 0.5
   AUC PR    = 0.5
   CLL	      = -0.695026
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total scoring time: 0.669 seconds
Refined model CLL: -0.695026


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.369565
   AUC PR    = 0.292101
   CLL	      = -0.785228
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 3.408 seconds
Total inference time: 0.697 seconds
AUC ROC: 0.369565
Total revision time: 3.408
Best scored revision CLL: -0.695026


Dataset: 3_imdb_cora, Fold: 1, Type: Transfer (trRDN-B), Time: 00:02:35
{'AUC ROC': 0.369565, 'AUC PR': 0.292101, 'CLL': -0.785228, 'Precision': [nan, 0.5], 'Recall': 0.0, 'F1': nan, 'Learning time': 3.408, 'Inference time': 0.697, 'parameter_5': {'AUC ROC': 0.369565, 'AUC PR': 0.292101, 'CLL': -0.785228, 'Precision': [nan, 0.5], 'Recall': 0.0, 'F1': nan, 'Learning time': 0.849, 'Inference time': 0.697}}


Amount of data: 10
******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.3581489350995123;  // std dev = 2.236, 20.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=10 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.3087411357856348;  // std dev = 2.236, 20.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=10 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.2564123687585864;  // std dev = 2.236, 20.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=10 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.20613740734453953;  // std dev = 2.236, 20.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=10 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.16162857548414683;  // std dev = 2.236, 20.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=10 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.12455597792081981;  // std dev = 2.236, 20.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=10 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.09492800936730669;  // std dev = 2.236, 20.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=10 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.07186088850055856;  // std dev = 2.236, 20.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=10 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.054183073759549595;  // std dev = 2.236, 20.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=10 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.040760253233056355;  // std dev = 2.236, 20.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=10 */


Results
   AUC ROC   = 0.369565
   AUC PR    = 0.292101
   CLL	      = -0.785228
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 0.922 seconds
Total inference time: 0.71 seconds
AUC ROC: 0.369565


Results scoring model
   AUC ROC   = 0.5
   AUC PR    = 0.5
   CLL	      = -0.695026
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total scoring time: 0.64 seconds
Parameter learned model CLL: -0.695026


Structure after Parameter Learning
[['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 0], 'false': [2.236, 10, 10]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 0], 'false': [2.236, 10, 10]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 0], 'false': [2.236, 10, 10]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 0], 'false': [2.236, 10, 10]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 0], 'false': [2.236, 10, 10]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 0], 'false': [2.236, 10, 10]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 0], 'false': [2.236, 10, 10]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 0], 'false': [2.236, 10, 10]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 0], 'false': [2.236, 10, 10]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 0], 'false': [2.236, 10, 10]}]]
[{'': [nan, 0.25]}, {'': [nan, 0.2500000000000001]}, {'': [nan, 0.25000000000000006]}, {'': [nan, 0.2500000000000002]}, {'': [nan, 0.24999999999999978]}, {'': [nan, 0.24999999999999994]}, {'': [nan, 0.25000000000000017]}, {'': [nan, 0.2500000000000001]}, {'': [nan, 0.24999999999999994]}, {'': [nan, 0.24999999999999994]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Pruning resulted in null theory

Candidate for revision
0;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
1;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
2;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
3;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
4;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
5;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
6;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
7;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
8;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
9;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.3581489350995123;  // std dev = 0.500, 20.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=10 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.3087411357856348;  // std dev = 0.500, 20.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=10 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.2564123687585864;  // std dev = 0.500, 20.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=10 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.20613740734453953;  // std dev = 0.500, 20.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=10 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.16162857548414683;  // std dev = 0.500, 20.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=10 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.12455597792081981;  // std dev = 0.500, 20.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=10 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.09492800936730669;  // std dev = 0.500, 20.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=10 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.07186088850055856;  // std dev = 0.500, 20.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=10 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.054183073759549595;  // std dev = 0.500, 20.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=10 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.040760253233056355;  // std dev = 0.500, 20.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=10 */


Results
   AUC ROC   = 0.369565
   AUC PR    = 0.292101
   CLL	      = -0.785228
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 1.311 seconds
Total inference time: 0.698 seconds
AUC ROC: 0.369565


Results scoring model
   AUC ROC   = 0.5
   AUC PR    = 0.5
   CLL	      = -0.695026
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total scoring time: 0.655 seconds
Refined model CLL: -0.695026


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.369565
   AUC PR    = 0.292101
   CLL	      = -0.785228
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 3.5280000000000005 seconds
Total inference time: 0.71 seconds
AUC ROC: 0.369565
Total revision time: 3.5280000000000005
Best scored revision CLL: -0.695026


Dataset: 3_imdb_cora, Fold: 1, Type: Transfer (trRDN-B), Time: 00:02:41
{'AUC ROC': 0.369565, 'AUC PR': 0.292101, 'CLL': -0.785228, 'Precision': [nan, 0.5], 'Recall': 0.0, 'F1': nan, 'Learning time': 3.5280000000000005, 'Inference time': 0.71, 'parameter_10': {'AUC ROC': 0.369565, 'AUC PR': 0.292101, 'CLL': -0.785228, 'Precision': [nan, 0.5], 'Recall': 0.0, 'F1': nan, 'Learning time': 0.922, 'Inference time': 0.71}}


Amount of data: 15
******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.8581489350995122;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else return 0.34090755578916754;  // std dev = 2.691, 29.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=14 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.7194734122109545;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else return 0.29415244793700734;  // std dev = 2.691, 29.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=14 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.5553664367462845;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else return 0.24498779946109306;  // std dev = 2.691, 29.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=14 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.41751358415830997;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else return 0.19779098606161633;  // std dev = 2.691, 29.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=14 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.32071184716014967;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else return 0.15584137344552781;  // std dev = 2.691, 29.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=14 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.25517224256948945;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else return 0.12067218458973308;  // std dev = 2.691, 29.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=14 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.20975771563253554;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else return 0.09236254816787717;  // std dev = 2.691, 29.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=14 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.17709649774527736;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else return 0.07017260157159257;  // std dev = 2.691, 29.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=14 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.15274385809367097;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else return 0.05306775044395041;  // std dev = 2.691, 29.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=14 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.13400703000801117;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else return 0.04001751672480079;  // std dev = 2.691, 29.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=14 */


Results
   AUC ROC   = 0.630435
   AUC PR    = 0.597315
   CLL	      = -0.60834
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.26087
   F1        = 0.413793


Total learning time: 0.903 seconds
Total inference time: 0.714 seconds
AUC ROC: 0.630435


Results scoring model
   AUC ROC   = 0.533333
   AUC PR    = 0.578635
   CLL	      = -0.675463
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.066667
   F1        = 0.125


Total scoring time: 0.689 seconds
Parameter learned model CLL: -0.675463


Structure after Parameter Learning
[['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 1], 'false': [2.691, 15, 14]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 1], 'false': [2.691, 15, 14]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 1], 'false': [2.691, 15, 14]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 1], 'false': [2.691, 15, 14]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 1], 'false': [2.691, 15, 14]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 1], 'false': [2.691, 15, 14]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 1], 'false': [2.691, 15, 14]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 1], 'false': [2.691, 15, 14]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 1], 'false': [2.691, 15, 14]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 1], 'false': [2.691, 15, 14]}]]
[{'': [0.0, 0.2497027348394764]}, {'': [0.0, 0.24970273483947725]}, {'': [0.0, 0.24970273483947666]}, {'': [0.0, 0.24970273483947678]}, {'': [0.0, 0.2497027348394767]}, {'': [0.0, 0.24970273483947683]}, {'': [0.0, 0.24970273483947672]}, {'': [0.0, 0.24970273483947705]}, {'': [0.0, 0.249702734839477]}, {'': [0.0, 0.24970273483947683]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
1;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
2;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
3;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
4;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
5;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
6;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
7;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
8;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
9;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.8581489350995122;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else return 0.34090755578916754;  // std dev = 0.500, 29.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=14 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.7194734122109545;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else return 0.29415244793700734;  // std dev = 0.500, 29.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=14 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.5553664367462845;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else return 0.24498779946109306;  // std dev = 0.500, 29.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=14 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.41751358415830997;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else return 0.19779098606161633;  // std dev = 0.500, 29.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=14 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.32071184716014967;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else return 0.15584137344552781;  // std dev = 0.500, 29.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=14 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.25517224256948945;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else return 0.12067218458973308;  // std dev = 0.500, 29.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=14 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.20975771563253554;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else return 0.09236254816787717;  // std dev = 0.500, 29.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=14 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.17709649774527736;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else return 0.07017260157159257;  // std dev = 0.500, 29.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=14 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.15274385809367097;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else return 0.05306775044395041;  // std dev = 0.500, 29.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=14 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.13400703000801117;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else return 0.04001751672480079;  // std dev = 0.500, 29.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=14 */


Results
   AUC ROC   = 0.630435
   AUC PR    = 0.597315
   CLL	      = -0.60834
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.26087
   F1        = 0.413793


Total learning time: 1.312 seconds
Total inference time: 0.725 seconds
AUC ROC: 0.630435


Results scoring model
   AUC ROC   = 0.533333
   AUC PR    = 0.578635
   CLL	      = -0.675463
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.066667
   F1        = 0.125


Total scoring time: 0.667 seconds
Refined model CLL: -0.675463


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.630435
   AUC PR    = 0.597315
   CLL	      = -0.60834
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.26087
   F1        = 0.413793


Total learning time: 3.5709999999999997 seconds
Total inference time: 0.714 seconds
AUC ROC: 0.630435
Total revision time: 3.5709999999999997
Best scored revision CLL: -0.675463


Dataset: 3_imdb_cora, Fold: 1, Type: Transfer (trRDN-B), Time: 00:02:46
{'AUC ROC': 0.630435, 'AUC PR': 0.597315, 'CLL': -0.60834, 'Precision': [1.0, 0.5], 'Recall': 0.26087, 'F1': 0.413793, 'Learning time': 3.5709999999999997, 'Inference time': 0.714, 'parameter_15': {'AUC ROC': 0.630435, 'AUC PR': 0.597315, 'CLL': -0.60834, 'Precision': [1.0, 0.5], 'Recall': 0.26087, 'F1': 0.413793, 'Learning time': 0.903, 'Inference time': 0.714}}


Amount of data: 20
******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.8581489350995121;  // std dev = 2.11e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return 0.31760839455897183;  // std dev = 3.031, 37.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=17 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.7194734122109545;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return 0.2743930062984994;  // std dev = 3.031, 37.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=17 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.5553664367462845;  // std dev = 1.05e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return 0.22940409212560184;  // std dev = 3.031, 37.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=17 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.41751358415830997;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return 0.18628870627050972;  // std dev = 3.031, 37.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=17 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.32071184716014967;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return 0.14778567561990727;  // std dev = 3.031, 37.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=17 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.25517224256948945;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return 0.11523398454885339;  // std dev = 3.031, 37.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=17 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.20975771563253554;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return 0.08877605966596111;  // std dev = 3.031, 37.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=17 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.17709649774527736;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return 0.06784002556264199;  // std dev = 3.031, 37.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=17 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.15274385809367097;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return 0.05156345950024885;  // std dev = 3.031, 37.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=17 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.13400703000801117;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return 0.03905337379799511;  // std dev = 3.031, 37.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=17 */


Results
   AUC ROC   = 0.630435
   AUC PR    = 0.597315
   CLL	      = -0.595127
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.26087
   F1        = 0.413793


Total learning time: 0.935 seconds
Total inference time: 0.665 seconds
AUC ROC: 0.630435


Results scoring model
   AUC ROC   = 0.575
   AUC PR    = 0.638591
   CLL	      = -0.649272
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.15
   F1        = 0.26087


Total scoring time: 0.655 seconds
Parameter learned model CLL: -0.649272


Structure after Parameter Learning
[['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [2.11e-08, 0, 3], 'false': [3.031, 20, 17]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 3], 'false': [3.031, 20, 17]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [1.05e-08, 0, 3], 'false': [3.031, 20, 17]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 3], 'false': [3.031, 20, 17]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 3], 'false': [3.031, 20, 17]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 3], 'false': [3.031, 20, 17]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 3], 'false': [3.031, 20, 17]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 3], 'false': [3.031, 20, 17]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 3], 'false': [3.031, 20, 17]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 3], 'false': [3.031, 20, 17]}]]
[{'': [1.4802973661668753e-16, 0.24835646457268032]}, {'': [0.0, 0.24835646457268137]}, {'': [3.700743415417188e-17, 0.2483564645726806]}, {'': [-3.700743415417188e-17, 0.24835646457268118]}, {'': [0.0, 0.24835646457268037]}, {'': [0.0, 0.24835646457268085]}, {'': [0.0, 0.24835646457268098]}, {'': [0.0, 0.24835646457268104]}, {'': [-4.625929269271485e-18, 0.2483564645726807]}, {'': [-2.3129646346357427e-18, 0.24835646457268074]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
1;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
2;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
3;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
4;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
5;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
6;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
7;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
8;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
9;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.8581489350995121;  // std dev = 2.11e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( haswordvenue(B, D), haswordtitle(E, D) )
%   | then if ( haswordvenue(A, D) )
%   | | then return 0.34201990284144784;  // std dev = 0.500, 31.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=15 */
%   | | else return 0.5248156017661788;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else return -0.14185106490048777;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.7194734122109545;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( haswordvenue(B, D), haswordtitle(E, D) )
%   | then if ( haswordvenue(A, D) )
%   | | then return 0.29509450923344677;  // std dev = 0.500, 31.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=15 */
%   | | else return 0.448295606241962;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else return -0.12544463852839138;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.5553664367462845;  // std dev = 1.05e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( haswordvenue(B, D), haswordtitle(E, D) )
%   | then if ( haswordvenue(A, D) )
%   | | then return 0.24572761349189018;  // std dev = 0.500, 31.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=15 */
%   | | else return 0.36236334632262296;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else return -0.11231637819360639;  // std dev = 2.63e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.41751358415830997;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( haswordvenue(B, D), haswordtitle(E, D) )
%   | then if ( haswordvenue(A, D) )
%   | | then return 0.19833363740893878;  // std dev = 0.500, 31.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=15 */
%   | | else return 0.2807538536965855;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else return -0.1015963294878363;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.32071184716014967;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( haswordvenue(B, D), haswordtitle(E, D) )
%   | then if ( haswordvenue(A, D) )
%   | | then return 0.15621904329059622;  // std dev = 0.500, 31.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=15 */
%   | | else return 0.21248070121827137;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else return -0.09269127618926094;  // std dev = 2.63e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.25517224256948945;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( haswordvenue(B, D), haswordtitle(E, D) )
%   | then if ( haswordvenue(A, D) )
%   | | then return 0.12092610815781832;  // std dev = 0.500, 31.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=15 */
%   | | else return 0.1594898822817116;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else return -0.08518475138839687;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.20975771563253554;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.09826494483012153;  // std dev = 0.489, 33.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=16 */
%   | else return -0.06284406100809184;  // std dev = 0.708, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.17709649774527736;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( haswordvenue(B, D), haswordtitle(E, D) )
%   | then if ( haswordvenue(A, D) )
%   | | then return 0.0688906114411628;  // std dev = 0.500, 31.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=15 */
%   | | else return 0.1220914183040664;  // std dev = 0.801, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else return -0.07829329645735794;  // std dev = 0.010, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.15274385809367097;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.058585352504553954;  // std dev = 0.489, 33.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=16 */
%   | else return -0.06533600405397919;  // std dev = 0.707, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.13400703000801117;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( haswordvenue(B, D), haswordtitle(E, D) )
%   | then if ( haswordvenue(A, D) )
%   | | then return 0.037646738434991646;  // std dev = 0.500, 31.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=15 */
%   | | else return 0.09816295536410731;  // std dev = 0.790, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else return -0.07158093548553242;  // std dev = 0.016, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */


Results
   AUC ROC   = 0.630838
   AUC PR    = 0.584265
   CLL	      = -0.61175
   Precision = 0.585106 at threshold = 0.5
   Recall    = 0.298913
   F1        = 0.395683


Total learning time: 15.417 seconds
Total inference time: 0.887 seconds
AUC ROC: 0.630838


Results scoring model
   AUC ROC   = 0.66125
   AUC PR    = 0.701502
   CLL	      = -0.599153
   Precision = 0.833333 at threshold = 0.5
   Recall    = 0.25
   F1        = 0.384615


Total scoring time: 0.747 seconds
Refined model CLL: -0.599153


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.630838
   AUC PR    = 0.584265
   CLL	      = -0.61175
   Precision = 0.585106 at threshold = 0.5
   Recall    = 0.298913
   F1        = 0.395683


Total learning time: 17.754 seconds
Total inference time: 0.887 seconds
AUC ROC: 0.630838
Total revision time: 17.754
Best scored revision CLL: -0.599153


Dataset: 3_imdb_cora, Fold: 1, Type: Transfer (trRDN-B), Time: 00:03:06
{'AUC ROC': 0.630838, 'AUC PR': 0.584265, 'CLL': -0.61175, 'Precision': [0.585106, 0.5], 'Recall': 0.298913, 'F1': 0.395683, 'Learning time': 17.754, 'Inference time': 0.887, 'parameter_20': {'AUC ROC': 0.630435, 'AUC PR': 0.597315, 'CLL': -0.595127, 'Precision': [1.0, 0.5], 'Recall': 0.26087, 'F1': 0.413793, 'Learning time': 0.935, 'Inference time': 0.665}}


Amount of data: 25
******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.8581489350995122;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return 0.30259337954395643;  // std dev = 3.333, 45.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=20 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.7194734122109545;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return 0.26163180867521296;  // std dev = 3.333, 45.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=20 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.5553664367462845;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return 0.2192721473492705;  // std dev = 3.333, 45.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=20 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.4175135841583099;  // std dev = 1.49e-08, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return 0.1787352457468729;  // std dev = 3.333, 45.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=20 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.32071184716014967;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return 0.14243924477676323;  // std dev = 3.333, 45.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=20 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.25517224256948945;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return 0.11159559999632924;  // std dev = 3.333, 45.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=20 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.20975771563253556;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return 0.08637026299843586;  // std dev = 3.333, 45.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=20 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.17709649774527736;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return 0.06628370899125421;  // std dev = 3.333, 45.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=20 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.15274385809367097;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return 0.05057564362187412;  // std dev = 3.333, 45.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=20 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.13400703000801117;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return 0.03843884907512935;  // std dev = 3.333, 45.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=20 */


Results
   AUC ROC   = 0.630435
   AUC PR    = 0.597315
   CLL	      = -0.587529
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.26087
   F1        = 0.413793


Total learning time: 0.978 seconds
Total inference time: 0.705 seconds
AUC ROC: 0.630435


Results scoring model
   AUC ROC   = 0.6
   AUC PR    = 0.670073
   CLL	      = -0.632522
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.2
   F1        = 0.333333


Total scoring time: 0.654 seconds
Parameter learned model CLL: -0.632522


Structure after Parameter Learning
[['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 5], 'false': [3.333, 25, 20]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 5], 'false': [3.333, 25, 20]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 5], 'false': [3.333, 25, 20]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [1.49e-08, 0, 5], 'false': [3.333, 25, 20]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 5], 'false': [3.333, 25, 20]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 5], 'false': [3.333, 25, 20]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 5], 'false': [3.333, 25, 20]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 5], 'false': [3.333, 25, 20]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 5], 'false': [3.333, 25, 20]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 5], 'false': [3.333, 25, 20]}]]
[{'': [0.0, 0.2469135802469133]}, {'': [0.0, 0.24691358024691287]}, {'': [-4.4408920985006264e-17, 0.24691358024691334]}, {'': [4.4408920985006264e-17, 0.24691358024691293]}, {'': [-2.2204460492503132e-17, 0.24691358024691365]}, {'': [0.0, 0.24691358024691348]}, {'': [-5.551115123125783e-18, 0.24691358024691382]}, {'': [0.0, 0.2469135802469139]}, {'': [0.0, 0.24691358024691354]}, {'': [0.0, 0.24691358024691348]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
1;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
2;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
3;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
4;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
5;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
6;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
7;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
8;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
9;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.8581489350995122;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( haswordvenue(A, D), haswordtitle(E, D) )
%   | then if ( haswordvenue(B, D) )
%   | | then return 0.31760839455897183;  // std dev = 0.498, 37.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=17 */
%   | | else return -0.14185106490048777;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else return 0.8581489350995121;  // std dev = 2.11e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.7194734122109545;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( haswordvenue(A, D), haswordtitle(E, D) )
%   | then if ( haswordvenue(B, D) )
%   | | then return 0.2743930062984994;  // std dev = 0.498, 37.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=17 */
%   | | else return -0.12544463852839138;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else return 0.7194734122109545;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.5553664367462845;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( haswordvenue(A, D), haswordtitle(E, D) )
%   | then if ( title(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.6120498958240371;  // std dev = 1.589, 19.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=16 */
%   | | | else return -0.15883342168013348;  // std dev = 0.972, 19.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=1 */
%   | | else return -0.17118587276373187;  // std dev = 0.118, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else return 0.5553664367462845;  // std dev = 1.05e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.4175135841583099;  // std dev = 1.49e-08, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( haswordvenue(B, D), haswordtitle(E, D) )
%   | then if ( title(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.4524366065646923;  // std dev = 1.689, 23.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=19 */
%   | | | else return -0.14063216334943443;  // std dev = 0.968, 16.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=1 */
%   | | else return -0.16620922670110547;  // std dev = 0.086, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else return -0.09742850093974058;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.32071184716014967;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( haswordvenue(B, D), haswordtitle(E, D) )
%   | then if ( title(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.34680051688835023;  // std dev = 1.670, 23.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=19 */
%   | | | else return -0.11881490502484712;  // std dev = 0.968, 16.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=1 */
%   | | else return -0.14477360414193702;  // std dev = 0.076, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else return -0.0891906305298024;  // std dev = 1.86e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.25517224256948945;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( haswordvenue(B, D), haswordtitle(E, D) )
%   | then if ( title(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.2642296106809187;  // std dev = 1.658, 23.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=19 */
%   | | | else return -0.10184072650265844;  // std dev = 0.968, 16.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=1 */
%   | | else return -0.12799005137263855;  // std dev = 0.068, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else return -0.08220572958583693;  // std dev = 1.86e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.20975771563253556;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.07098138807834378;  // std dev = 0.346, 37.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=17 */
%   | | else return 0.10684855234276881;  // std dev = 0.224, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else return -0.050862563470956565;  // std dev = 0.313, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.17709649774527736;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( haswordvenue(A, D), haswordtitle(E, D) )
%   | then if ( title(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.21064198782488308;  // std dev = 1.589, 19.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=16 */
%   | | | else return -0.09430759724002172;  // std dev = 0.969, 19.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=1 */
%   | | else return -0.1462585622676511;  // std dev = 0.117, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else return 0.19015276818010798;  // std dev = 0.020, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.15274385809367097;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( haswordvenue(A, D), haswordtitle(E, D) )
%   | then if ( title(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.16311367593428788;  // std dev = 1.589, 19.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=16 */
%   | | | else return -0.0829547072741936;  // std dev = 0.969, 19.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=1 */
%   | | else return -0.12935162036851994;  // std dev = 0.105, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else return 0.1625993728964461;  // std dev = 0.018, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.13400703000801117;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( haswordvenue(A, D), haswordtitle(E, D) )
%   | then if ( title(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.12864386248684587;  // std dev = 1.589, 19.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=16 */
%   | | | else return -0.07358362481831178;  // std dev = 0.968, 19.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=1 */
%   | | else return -0.11577873475134852;  // std dev = 0.095, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else return 0.1416694396923486;  // std dev = 0.016, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */


Results
   AUC ROC   = 0.852343
   AUC PR    = 0.777167
   CLL	      = -0.471292
   Precision = 0.619608 at threshold = 0.5
   Recall    = 0.858696
   F1        = 0.719818


Total learning time: 64.913 seconds
Total inference time: 2.046 seconds
AUC ROC: 0.852343


Results scoring model
   AUC ROC   = 0.9432
   AUC PR    = 0.939281
   CLL	      = -0.293226
   Precision = 0.888889 at threshold = 0.5
   Recall    = 0.96
   F1        = 0.923077


Total scoring time: 1.424 seconds
Refined model CLL: -0.293226


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.852343
   AUC PR    = 0.777167
   CLL	      = -0.471292
   Precision = 0.619608 at threshold = 0.5
   Recall    = 0.858696
   F1        = 0.719818


Total learning time: 67.96900000000001 seconds
Total inference time: 2.046 seconds
AUC ROC: 0.852343
Total revision time: 67.96900000000001
Best scored revision CLL: -0.293226


Dataset: 3_imdb_cora, Fold: 1, Type: Transfer (trRDN-B), Time: 00:04:17
{'AUC ROC': 0.852343, 'AUC PR': 0.777167, 'CLL': -0.471292, 'Precision': [0.619608, 0.5], 'Recall': 0.858696, 'F1': 0.719818, 'Learning time': 67.96900000000001, 'Inference time': 2.046, 'parameter_25': {'AUC ROC': 0.630435, 'AUC PR': 0.597315, 'CLL': -0.587529, 'Precision': [1.0, 0.5], 'Recall': 0.26087, 'F1': 0.413793, 'Learning time': 0.978, 'Inference time': 0.705}}


Starting fold 2

Target train facts examples: 33542
Target train pos examples: 2246
Target train neg examples: 4478

Target test facts examples: 9016
Target test pos	 examples: 771
Target test neg examples: 544

Amount of data: 5
******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.3581489350995123;  // std dev = 1.581, 10.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.30874113578563506;  // std dev = 1.581, 10.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.2564123687585864;  // std dev = 1.581, 10.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.20613740734453975;  // std dev = 1.581, 10.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.16162857548414675;  // std dev = 1.581, 10.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.1245559779208197;  // std dev = 1.581, 10.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.09492800936730683;  // std dev = 1.581, 10.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.07186088850055855;  // std dev = 1.581, 10.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.05418307375954949;  // std dev = 1.581, 10.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.04076025323305626;  // std dev = 1.581, 10.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */


Results
   AUC ROC   = 0.433204
   AUC PR    = 0.553567
   CLL	      = -0.79934
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 0.869 seconds
Total inference time: 0.795 seconds
AUC ROC: 0.433204


Results scoring model
   AUC ROC   = 0.5
   AUC PR    = 0.5
   CLL	      = -0.695026
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total scoring time: 0.627 seconds
Parameter learned model CLL: -0.695026


Structure after Parameter Learning
[['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 0], 'false': [1.581, 5, 5]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 0], 'false': [1.581, 5, 5]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 0], 'false': [1.581, 5, 5]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 0], 'false': [1.581, 5, 5]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 0], 'false': [1.581, 5, 5]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 0], 'false': [1.581, 5, 5]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 0], 'false': [1.581, 5, 5]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 0], 'false': [1.581, 5, 5]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 0], 'false': [1.581, 5, 5]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 0], 'false': [1.581, 5, 5]}]]
[{'': [nan, 0.24999999999999983]}, {'': [nan, 0.24999999999999994]}, {'': [nan, 0.25000000000000006]}, {'': [nan, 0.24999999999999992]}, {'': [nan, 0.24999999999999994]}, {'': [nan, 0.24999999999999986]}, {'': [nan, 0.25]}, {'': [nan, 0.25000000000000006]}, {'': [nan, 0.25]}, {'': [nan, 0.24999999999999994]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Pruning resulted in null theory

Candidate for revision
0;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
1;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
2;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
3;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
4;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
5;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
6;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
7;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
8;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
9;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.3581489350995123;  // std dev = 0.500, 10.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.30874113578563506;  // std dev = 0.500, 10.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.2564123687585864;  // std dev = 0.500, 10.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.20613740734453975;  // std dev = 0.500, 10.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.16162857548414675;  // std dev = 0.500, 10.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.1245559779208197;  // std dev = 0.500, 10.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.09492800936730683;  // std dev = 0.500, 10.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.07186088850055855;  // std dev = 0.500, 10.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.05418307375954949;  // std dev = 0.500, 10.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.04076025323305626;  // std dev = 0.500, 10.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */


Results
   AUC ROC   = 0.433204
   AUC PR    = 0.553567
   CLL	      = -0.79934
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 1.201 seconds
Total inference time: 0.696 seconds
AUC ROC: 0.433204


Results scoring model
   AUC ROC   = 0.5
   AUC PR    = 0.5
   CLL	      = -0.695026
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total scoring time: 0.672 seconds
Refined model CLL: -0.695026


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.433204
   AUC PR    = 0.553567
   CLL	      = -0.79934
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 3.369 seconds
Total inference time: 0.795 seconds
AUC ROC: 0.433204
Total revision time: 3.369
Best scored revision CLL: -0.695026


Dataset: 3_imdb_cora, Fold: 2, Type: Transfer (trRDN-B), Time: 00:04:23
{'AUC ROC': 0.433204, 'AUC PR': 0.553567, 'CLL': -0.79934, 'Precision': [nan, 0.5], 'Recall': 0.0, 'F1': nan, 'Learning time': 3.369, 'Inference time': 0.795, 'parameter_5': {'AUC ROC': 0.433204, 'AUC PR': 0.553567, 'CLL': -0.79934, 'Precision': [nan, 0.5], 'Recall': 0.0, 'F1': nan, 'Learning time': 0.869, 'Inference time': 0.795}}


Amount of data: 10
******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.8581489350995122;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else return 0.3025933795439568;  // std dev = 2.108, 18.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=8 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.7194734122109545;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else return 0.2616318086752123;  // std dev = 2.108, 18.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=8 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.5553664367462845;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else return 0.2192721473492705;  // std dev = 2.108, 18.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=8 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.41751358415830997;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else return 0.1787352457468729;  // std dev = 2.108, 18.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=8 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.32071184716014967;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else return 0.1424392447767627;  // std dev = 2.108, 18.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=8 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.25517224256948945;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else return 0.11159559999632984;  // std dev = 2.108, 18.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=8 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.20975771563253554;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else return 0.08637026299843614;  // std dev = 2.108, 18.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=8 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.17709649774527736;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else return 0.06628370899125427;  // std dev = 2.108, 18.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=8 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.15274385809367097;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else return 0.05057564362187417;  // std dev = 2.108, 18.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=8 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.13400703000801117;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else return 0.03843884907512937;  // std dev = 2.108, 18.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=8 */


Results
   AUC ROC   = 0.566796
   AUC PR    = 0.695289
   CLL	      = -0.67834
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.133593
   F1        = 0.235698


Total learning time: 0.889 seconds
Total inference time: 0.753 seconds
AUC ROC: 0.566796


Results scoring model
   AUC ROC   = 0.6
   AUC PR    = 0.673962
   CLL	      = -0.632522
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.2
   F1        = 0.333333


Total scoring time: 0.637 seconds
Parameter learned model CLL: -0.632522


Structure after Parameter Learning
[['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 2], 'false': [2.108, 10, 8]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 2], 'false': [2.108, 10, 8]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 2], 'false': [2.108, 10, 8]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 2], 'false': [2.108, 10, 8]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 2], 'false': [2.108, 10, 8]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 2], 'false': [2.108, 10, 8]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 2], 'false': [2.108, 10, 8]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 2], 'false': [2.108, 10, 8]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 2], 'false': [2.108, 10, 8]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 2], 'false': [2.108, 10, 8]}]]
[{'': [0.0, 0.2469135802469136]}, {'': [0.0, 0.2469135802469138]}, {'': [0.0, 0.2469135802469134]}, {'': [0.0, 0.24691358024691354]}, {'': [0.0, 0.24691358024691384]}, {'': [0.0, 0.24691358024691348]}, {'': [0.0, 0.24691358024691348]}, {'': [0.0, 0.24691358024691368]}, {'': [0.0, 0.2469135802469136]}, {'': [0.0, 0.24691358024691365]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
1;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
2;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
3;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
4;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
5;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
6;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
7;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
8;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
9;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.8581489350995122;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else return 0.3025933795439568;  // std dev = 0.497, 18.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=8 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.7194734122109545;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else return 0.2616318086752123;  // std dev = 0.497, 18.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=8 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.5553664367462845;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else return 0.2192721473492705;  // std dev = 0.497, 18.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=8 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.41751358415830997;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else return 0.1787352457468729;  // std dev = 0.497, 18.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=8 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.32071184716014967;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else return 0.1424392447767627;  // std dev = 0.497, 18.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=8 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.25517224256948945;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else return 0.11159559999632984;  // std dev = 0.497, 18.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=8 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.20975771563253554;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else return 0.08637026299843614;  // std dev = 0.497, 18.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=8 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.17709649774527736;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else return 0.06628370899125427;  // std dev = 0.497, 18.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=8 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.15274385809367097;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else return 0.05057564362187417;  // std dev = 0.497, 18.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=8 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.13400703000801117;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else return 0.03843884907512937;  // std dev = 0.497, 18.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=8 */


Results
   AUC ROC   = 0.566796
   AUC PR    = 0.695289
   CLL	      = -0.67834
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.133593
   F1        = 0.235698


Total learning time: 1.339 seconds
Total inference time: 0.797 seconds
AUC ROC: 0.566796


Results scoring model
   AUC ROC   = 0.6
   AUC PR    = 0.673962
   CLL	      = -0.632522
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.2
   F1        = 0.333333


Total scoring time: 0.63 seconds
Refined model CLL: -0.632522


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.566796
   AUC PR    = 0.695289
   CLL	      = -0.67834
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.133593
   F1        = 0.235698


Total learning time: 3.495 seconds
Total inference time: 0.753 seconds
AUC ROC: 0.566796
Total revision time: 3.495
Best scored revision CLL: -0.632522


Dataset: 3_imdb_cora, Fold: 2, Type: Transfer (trRDN-B), Time: 00:04:29
{'AUC ROC': 0.566796, 'AUC PR': 0.695289, 'CLL': -0.67834, 'Precision': [1.0, 0.5], 'Recall': 0.133593, 'F1': 0.235698, 'Learning time': 3.495, 'Inference time': 0.753, 'parameter_10': {'AUC ROC': 0.566796, 'AUC PR': 0.695289, 'CLL': -0.67834, 'Precision': [1.0, 0.5], 'Recall': 0.133593, 'F1': 0.235698, 'Learning time': 0.889, 'Inference time': 0.753}}


Amount of data: 15
******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.8581489350995121;  // std dev = 2.11e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return 0.30259337954395676;  // std dev = 2.582, 27.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=12 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.7194734122109545;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return 0.261631808675212;  // std dev = 2.582, 27.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=12 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.5553664367462845;  // std dev = 1.05e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return 0.2192721473492705;  // std dev = 2.582, 27.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=12 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.41751358415830997;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return 0.1787352457468729;  // std dev = 2.582, 27.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=12 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.32071184716014967;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return 0.14243924477676276;  // std dev = 2.582, 27.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=12 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.25517224256948945;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return 0.11159559999632997;  // std dev = 2.582, 27.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=12 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.20975771563253554;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return 0.08637026299843599;  // std dev = 2.582, 27.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=12 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.17709649774527736;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return 0.06628370899125427;  // std dev = 2.582, 27.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=12 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.15274385809367097;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return 0.050575643621874215;  // std dev = 2.582, 27.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=12 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.13400703000801117;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return 0.038438849075129344;  // std dev = 2.582, 27.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=12 */


Results
   AUC ROC   = 0.566796
   AUC PR    = 0.695289
   CLL	      = -0.67834
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.133593
   F1        = 0.235698


Total learning time: 0.881 seconds
Total inference time: 0.805 seconds
AUC ROC: 0.566796


Results scoring model
   AUC ROC   = 0.6
   AUC PR    = 0.671449
   CLL	      = -0.632522
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.2
   F1        = 0.333333


Total scoring time: 0.666 seconds
Parameter learned model CLL: -0.632522


Structure after Parameter Learning
[['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [2.11e-08, 0, 3], 'false': [2.582, 15, 12]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 3], 'false': [2.582, 15, 12]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [1.05e-08, 0, 3], 'false': [2.582, 15, 12]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 3], 'false': [2.582, 15, 12]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 3], 'false': [2.582, 15, 12]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 3], 'false': [2.582, 15, 12]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 3], 'false': [2.582, 15, 12]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 3], 'false': [2.582, 15, 12]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 3], 'false': [2.582, 15, 12]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 3], 'false': [2.582, 15, 12]}]]
[{'': [1.4802973661668753e-16, 0.2469135802469131]}, {'': [0.0, 0.2469135802469134]}, {'': [3.700743415417188e-17, 0.24691358024691332]}, {'': [-3.700743415417188e-17, 0.24691358024691365]}, {'': [0.0, 0.24691358024691382]}, {'': [0.0, 0.24691358024691357]}, {'': [0.0, 0.24691358024691337]}, {'': [0.0, 0.24691358024691382]}, {'': [-4.625929269271485e-18, 0.24691358024691362]}, {'': [-2.3129646346357427e-18, 0.24691358024691384]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
1;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
2;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
3;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
4;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
5;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
6;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
7;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
8;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
9;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.8581489350995121;  // std dev = 2.11e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.31648226843284566;  // std dev = 0.498, 24.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=11 */
%   | else return 0.19148226843284552;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.7194734122109545;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.2734366587491455;  // std dev = 0.498, 24.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=11 */
%   | else return 0.16653882456488175;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.5553664367462845;  // std dev = 1.05e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.22864662696661894;  // std dev = 0.498, 24.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=11 */
%   | else return 0.1420942428155648;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.41751358415830997;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.18572608234333768;  // std dev = 0.498, 24.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=11 */
%   | else return 0.11914890490746428;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.32071184716014967;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.14738904413680162;  // std dev = 0.498, 24.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=11 */
%   | else return 0.09841340278401862;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.25517224256948945;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.1149649585880258;  // std dev = 0.498, 24.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=11 */
%   | else return 0.08026654944252243;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.20975771563253554;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.08859845631213437;  // std dev = 0.498, 24.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=11 */
%   | else return 0.06479591611329232;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.17709649774527736;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.06772501561009063;  // std dev = 0.498, 24.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=11 */
%   | else return 0.05187916934404054;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.15274385809367097;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.051490123639326;  // std dev = 0.498, 24.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=11 */
%   | else return 0.04126932998424626;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.13400703000801117;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.03900731574306549;  // std dev = 0.498, 24.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=11 */
%   | else return 0.032663748734830134;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */


Results
   AUC ROC   = 0.558785
   AUC PR    = 0.691683
   CLL	      = -0.677479
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.133593
   F1        = 0.235698


Total learning time: 2.505 seconds
Total inference time: 0.848 seconds
AUC ROC: 0.558785


Results scoring model
   AUC ROC   = 0.62
   AUC PR    = 0.681226
   CLL	      = -0.629647
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.2
   F1        = 0.333333


Total scoring time: 0.73 seconds
Refined model CLL: -0.629647


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.558785
   AUC PR    = 0.691683
   CLL	      = -0.677479
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.133593
   F1        = 0.235698


Total learning time: 4.782 seconds
Total inference time: 0.848 seconds
AUC ROC: 0.558785
Total revision time: 4.782
Best scored revision CLL: -0.629647


Dataset: 3_imdb_cora, Fold: 2, Type: Transfer (trRDN-B), Time: 00:04:36
{'AUC ROC': 0.558785, 'AUC PR': 0.691683, 'CLL': -0.677479, 'Precision': [1.0, 0.5], 'Recall': 0.133593, 'F1': 0.235698, 'Learning time': 4.782, 'Inference time': 0.848, 'parameter_15': {'AUC ROC': 0.566796, 'AUC PR': 0.695289, 'CLL': -0.67834, 'Precision': [1.0, 0.5], 'Recall': 0.133593, 'F1': 0.235698, 'Learning time': 0.881, 'Inference time': 0.805}}


Amount of data: 20
******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.8581489350995122;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return 0.28672036367094095;  // std dev = 2.928, 35.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=15 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.7194734122109545;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return 0.24811816884741356;  // std dev = 2.928, 35.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=15 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.5553664367462845;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return 0.20848477447886862;  // std dev = 2.928, 35.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=15 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.4175135841583099;  // std dev = 1.49e-08, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return 0.17062637354018517;  // std dev = 2.928, 35.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=15 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.32071184716014967;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return 0.1366458537535223;  // std dev = 2.928, 35.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=15 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.25517224256948945;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return 0.10762034996184425;  // std dev = 2.928, 35.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=15 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.20975771563253556;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return 0.08372807955323847;  // std dev = 2.928, 35.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=15 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.17709649774527736;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return 0.06457405393631668;  // std dev = 2.928, 35.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=15 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.15274385809367097;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return 0.04949778322519463;  // std dev = 2.928, 35.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=15 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.13400703000801117;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return 0.037779403633540945;  // std dev = 2.928, 35.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=15 */


Results
   AUC ROC   = 0.566796
   AUC PR    = 0.695289
   CLL	      = -0.686829
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.133593
   F1        = 0.235698


Total learning time: 1.092 seconds
Total inference time: 0.722 seconds
AUC ROC: 0.566796


Results scoring model
   AUC ROC   = 0.625
   AUC PR    = 0.699813
   CLL	      = -0.614907
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.25
   F1        = 0.4


Total scoring time: 0.664 seconds
Parameter learned model CLL: -0.614907


Structure after Parameter Learning
[['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 5], 'false': [2.928, 20, 15]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 5], 'false': [2.928, 20, 15]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 5], 'false': [2.928, 20, 15]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [1.49e-08, 0, 5], 'false': [2.928, 20, 15]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 5], 'false': [2.928, 20, 15]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 5], 'false': [2.928, 20, 15]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 5], 'false': [2.928, 20, 15]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 5], 'false': [2.928, 20, 15]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 5], 'false': [2.928, 20, 15]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 5], 'false': [2.928, 20, 15]}]]
[{'': [0.0, 0.244897959183673]}, {'': [0.0, 0.24489795918367285]}, {'': [-4.4408920985006264e-17, 0.2448979591836731]}, {'': [4.4408920985006264e-17, 0.24489795918367346]}, {'': [-2.2204460492503132e-17, 0.24489795918367316]}, {'': [0.0, 0.24489795918367335]}, {'': [-5.551115123125783e-18, 0.24489795918367357]}, {'': [0.0, 0.2448979591836733]}, {'': [0.0, 0.24489795918367366]}, {'': [0.0, 0.24489795918367346]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
1;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
2;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
3;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
4;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
5;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
6;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
7;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
8;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
9;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.8581489350995122;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.324815601766179;  // std dev = 0.499, 30.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=14 */
%   | else return 0.0581489350995122;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.7194734122109545;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.28051077705998734;  // std dev = 0.499, 30.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=14 */
%   | else return 0.050922032513554226;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.5553664367462845;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.2342425620659102;  // std dev = 0.499, 30.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=14 */
%   | else return 0.04434629760466851;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.4175135841583099;  // std dev = 1.49e-08, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.1898747687046811;  // std dev = 0.499, 30.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=14 */
%   | else return 0.038428662236904595;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.32071184716014967;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.15030788490124342;  // std dev = 0.499, 30.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=14 */
%   | else return 0.03315494592188569;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.25517224256948945;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.11694170908536865;  // std dev = 0.499, 30.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=14 */
%   | else return 0.02849510592572117;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.20975771563253556;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.08990276855148759;  // std dev = 0.499, 30.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=14 */
%   | else return 0.024408230135271946;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.17709649774527736;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.0685704620206655;  // std dev = 0.499, 30.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=14 */
%   | else return 0.020846889108740264;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.15274385809367097;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.05203081637267782;  // std dev = 0.499, 30.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=14 */
%   | else return 0.017760671541598484;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.13400703000801117;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.03934879572263033;  // std dev = 0.499, 30.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=14 */
%   | else return 0.015098879183171288;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */


Results
   AUC ROC   = 0.558785
   AUC PR    = 0.691683
   CLL	      = -0.684291
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.133593
   F1        = 0.235698


Total learning time: 2.696 seconds
Total inference time: 0.841 seconds
AUC ROC: 0.558785


Results scoring model
   AUC ROC   = 0.675
   AUC PR    = 0.724734
   CLL	      = -0.598013
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.25
   F1        = 0.4


Total scoring time: 0.675 seconds
Refined model CLL: -0.598013


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.558785
   AUC PR    = 0.691683
   CLL	      = -0.684291
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.133593
   F1        = 0.235698


Total learning time: 5.127 seconds
Total inference time: 0.841 seconds
AUC ROC: 0.558785
Total revision time: 5.127
Best scored revision CLL: -0.598013


Dataset: 3_imdb_cora, Fold: 2, Type: Transfer (trRDN-B), Time: 00:04:43
{'AUC ROC': 0.558785, 'AUC PR': 0.691683, 'CLL': -0.684291, 'Precision': [1.0, 0.5], 'Recall': 0.133593, 'F1': 0.235698, 'Learning time': 5.127, 'Inference time': 0.841, 'parameter_20': {'AUC ROC': 0.566796, 'AUC PR': 0.695289, 'CLL': -0.686829, 'Precision': [1.0, 0.5], 'Recall': 0.133593, 'F1': 0.235698, 'Learning time': 1.092, 'Inference time': 0.722}}


Amount of data: 25
******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.8581489350995122;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return 0.30259337954395643;  // std dev = 3.333, 45.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=20 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.7194734122109545;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return 0.26163180867521296;  // std dev = 3.333, 45.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=20 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.5553664367462845;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return 0.2192721473492705;  // std dev = 3.333, 45.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=20 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.4175135841583099;  // std dev = 1.49e-08, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return 0.1787352457468729;  // std dev = 3.333, 45.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=20 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.32071184716014967;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return 0.14243924477676323;  // std dev = 3.333, 45.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=20 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.25517224256948945;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return 0.11159559999632924;  // std dev = 3.333, 45.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=20 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.20975771563253556;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return 0.08637026299843586;  // std dev = 3.333, 45.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=20 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.17709649774527736;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return 0.06628370899125421;  // std dev = 3.333, 45.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=20 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.15274385809367097;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return 0.05057564362187412;  // std dev = 3.333, 45.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=20 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.13400703000801117;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return 0.03843884907512935;  // std dev = 3.333, 45.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=20 */


Results
   AUC ROC   = 0.566796
   AUC PR    = 0.695289
   CLL	      = -0.67834
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.133593
   F1        = 0.235698


Total learning time: 0.979 seconds
Total inference time: 0.737 seconds
AUC ROC: 0.566796


Results scoring model
   AUC ROC   = 0.6
   AUC PR    = 0.670073
   CLL	      = -0.632522
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.2
   F1        = 0.333333


Total scoring time: 0.656 seconds
Parameter learned model CLL: -0.632522


Structure after Parameter Learning
[['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 5], 'false': [3.333, 25, 20]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 5], 'false': [3.333, 25, 20]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 5], 'false': [3.333, 25, 20]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [1.49e-08, 0, 5], 'false': [3.333, 25, 20]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 5], 'false': [3.333, 25, 20]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 5], 'false': [3.333, 25, 20]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 5], 'false': [3.333, 25, 20]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 5], 'false': [3.333, 25, 20]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 5], 'false': [3.333, 25, 20]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 5], 'false': [3.333, 25, 20]}]]
[{'': [0.0, 0.2469135802469133]}, {'': [0.0, 0.24691358024691287]}, {'': [-4.4408920985006264e-17, 0.24691358024691334]}, {'': [4.4408920985006264e-17, 0.24691358024691293]}, {'': [-2.2204460492503132e-17, 0.24691358024691365]}, {'': [0.0, 0.24691358024691348]}, {'': [-5.551115123125783e-18, 0.24691358024691382]}, {'': [0.0, 0.2469135802469139]}, {'': [0.0, 0.24691358024691354]}, {'': [0.0, 0.24691358024691348]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
1;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
2;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
3;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
4;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
5;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
6;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
7;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
8;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
9;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.8581489350995122;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then if ( title(F, E), venue(F, A) )
%   | | | then return 0.24050187627598293;  // std dev = 2.834, 34.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=13 */
%   | | | else return 0.8581489350995121;  // std dev = 2.11e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.8581489350995121;  // std dev = 2.11e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return 0.0581489350995122;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.7194734122109545;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then if ( title(F, E), venue(F, A) )
%   | | | then return 0.20863426638373414;  // std dev = 2.834, 34.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=13 */
%   | | | else return 0.7194734122109545;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.7194734122109545;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return 0.050922032513554226;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.5553664367462845;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then if ( title(F, E), venue(F, A) )
%   | | | then return 0.176623763594354;  // std dev = 2.834, 34.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=13 */
%   | | | else return 0.5553664367462845;  // std dev = 1.05e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.5553664367462845;  // std dev = 1.05e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return 0.04434629760466851;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.4175135841583099;  // std dev = 1.49e-08, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( haswordvenue(A, D), haswordtitle(E, D) )
%   | then if ( title(F, E), venue(F, B) )
%   | | then if ( samebib(F, G), venue(G, A) )
%   | | | then return 0.5547607652035885;  // std dev = 1.556, 16.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=13 */
%   | | | else return -0.15447388960603373;  // std dev = 1.136, 23.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=2 */
%   | | else return 0.41751358415830997;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return 0.3647903028773731;  // std dev = 0.710, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.32071184716014967;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( haswordvenue(A, D), haswordtitle(E, D) )
%   | then if ( title(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.43316400692036877;  // std dev = 1.561, 17.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=14 */
%   | | | else return -0.15469266578707078;  // std dev = 0.974, 22.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=1 */
%   | | else return 0.3656377038802711;  // std dev = 0.110, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return 0.2992714278917093;  // std dev = 0.708, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.25517224256948945;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( haswordvenue(A, D), haswordtitle(E, D) )
%   | then if ( title(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.3318663685335661;  // std dev = 1.558, 17.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=14 */
%   | | | else return -0.1311426516965511;  // std dev = 0.973, 22.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=1 */
%   | | else return 0.2868926788157261;  // std dev = 0.098, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return 0.241579341564661;  // std dev = 0.708, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.20975771563253556;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( haswordvenue(A, D), haswordtitle(E, D) )
%   | then if ( title(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.2527058242262865;  // std dev = 1.554, 17.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=14 */
%   | | | else return -0.11292424760484421;  // std dev = 0.973, 22.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=1 */
%   | | else return 0.23269823285179556;  // std dev = 0.087, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return 0.19302601473986225;  // std dev = 0.708, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.17709649774527736;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( haswordvenue(A, D), haswordtitle(E, D) )
%   | then if ( title(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.19418933123020274;  // std dev = 1.552, 17.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=14 */
%   | | | else return -0.0984822946716749;  // std dev = 0.973, 22.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=1 */
%   | | else return 0.19422942886937652;  // std dev = 0.076, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return 0.15338151733421196;  // std dev = 0.709, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.15274385809367097;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( haswordvenue(A, D), haswordtitle(E, D) )
%   | then if ( title(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.15137880136074688;  // std dev = 1.550, 17.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=14 */
%   | | | else return -0.0867948287299744;  // std dev = 0.973, 22.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=1 */
%   | | else return 0.16593633843575406;  // std dev = 0.068, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return 0.12161022967741307;  // std dev = 0.710, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.13400703000801117;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( haswordvenue(A, D), haswordtitle(E, D) )
%   | then if ( title(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.1197379423950065;  // std dev = 1.549, 17.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=14 */
%   | | | else return -0.0771691002802562;  // std dev = 0.973, 22.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=1 */
%   | | else return 0.1444394281846508;  // std dev = 0.061, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return 0.09640673163071357;  // std dev = 0.711, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */


Results
   AUC ROC   = 0.786288
   AUC PR    = 0.794504
   CLL	      = -0.468271
   Precision = 0.746341 at threshold = 0.5
   Recall    = 0.992218
   F1        = 0.851893


Total learning time: 60.184 seconds
Total inference time: 3.27 seconds
AUC ROC: 0.786288


Results scoring model
   AUC ROC   = 0.9448
   AUC PR    = 0.947237
   CLL	      = -0.306439
   Precision = 0.884615 at threshold = 0.5
   Recall    = 0.92
   F1        = 0.901961


Total scoring time: 1.311 seconds
Refined model CLL: -0.306439


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.786288
   AUC PR    = 0.794504
   CLL	      = -0.468271
   Precision = 0.746341 at threshold = 0.5
   Recall    = 0.992218
   F1        = 0.851893


Total learning time: 63.129999999999995 seconds
Total inference time: 3.27 seconds
AUC ROC: 0.786288
Total revision time: 63.129999999999995
Best scored revision CLL: -0.306439


Dataset: 3_imdb_cora, Fold: 2, Type: Transfer (trRDN-B), Time: 00:05:51
{'AUC ROC': 0.786288, 'AUC PR': 0.794504, 'CLL': -0.468271, 'Precision': [0.746341, 0.5], 'Recall': 0.992218, 'F1': 0.851893, 'Learning time': 63.129999999999995, 'Inference time': 3.27, 'parameter_25': {'AUC ROC': 0.566796, 'AUC PR': 0.695289, 'CLL': -0.67834, 'Precision': [1.0, 0.5], 'Recall': 0.133593, 'F1': 0.235698, 'Learning time': 0.979, 'Inference time': 0.737}}


Starting fold 3

Target train facts examples: 33252
Target train pos examples: 2436
Target train neg examples: 2800

Target test facts examples: 9306
Target test pos	 examples: 581
Target test neg examples: 2222

Amount of data: 5
******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.3581489350995123;  // std dev = 1.581, 10.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.30874113578563506;  // std dev = 1.581, 10.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.2564123687585864;  // std dev = 1.581, 10.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.20613740734453975;  // std dev = 1.581, 10.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.16162857548414675;  // std dev = 1.581, 10.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.1245559779208197;  // std dev = 1.581, 10.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.09492800936730683;  // std dev = 1.581, 10.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.07186088850055855;  // std dev = 1.581, 10.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.05418307375954949;  // std dev = 1.581, 10.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.04076025323305626;  // std dev = 1.581, 10.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */


Results
   AUC ROC   = 0.414802
   AUC PR    = 0.180757
   CLL	      = -0.70139
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 0.909 seconds
Total inference time: 0.938 seconds
AUC ROC: 0.414802


Results scoring model
   AUC ROC   = 0.5
   AUC PR    = 0.5
   CLL	      = -0.695026
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total scoring time: 0.638 seconds
Parameter learned model CLL: -0.695026


Structure after Parameter Learning
[['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 0], 'false': [1.581, 5, 5]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 0], 'false': [1.581, 5, 5]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 0], 'false': [1.581, 5, 5]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 0], 'false': [1.581, 5, 5]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 0], 'false': [1.581, 5, 5]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 0], 'false': [1.581, 5, 5]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 0], 'false': [1.581, 5, 5]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 0], 'false': [1.581, 5, 5]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 0], 'false': [1.581, 5, 5]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 0], 'false': [1.581, 5, 5]}]]
[{'': [nan, 0.24999999999999983]}, {'': [nan, 0.24999999999999994]}, {'': [nan, 0.25000000000000006]}, {'': [nan, 0.24999999999999992]}, {'': [nan, 0.24999999999999994]}, {'': [nan, 0.24999999999999986]}, {'': [nan, 0.25]}, {'': [nan, 0.25000000000000006]}, {'': [nan, 0.25]}, {'': [nan, 0.24999999999999994]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Pruning resulted in null theory

Candidate for revision
0;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
1;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
2;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
3;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
4;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
5;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
6;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
7;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
8;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
9;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.3581489350995123;  // std dev = 0.500, 10.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.30874113578563506;  // std dev = 0.500, 10.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.2564123687585864;  // std dev = 0.500, 10.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.20613740734453975;  // std dev = 0.500, 10.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.16162857548414675;  // std dev = 0.500, 10.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.1245559779208197;  // std dev = 0.500, 10.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.09492800936730683;  // std dev = 0.500, 10.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.07186088850055855;  // std dev = 0.500, 10.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.05418307375954949;  // std dev = 0.500, 10.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.04076025323305626;  // std dev = 0.500, 10.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */


Results
   AUC ROC   = 0.414802
   AUC PR    = 0.180757
   CLL	      = -0.70139
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 1.183 seconds
Total inference time: 0.932 seconds
AUC ROC: 0.414802


Results scoring model
   AUC ROC   = 0.5
   AUC PR    = 0.5
   CLL	      = -0.695026
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total scoring time: 0.689 seconds
Refined model CLL: -0.695026


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.414802
   AUC PR    = 0.180757
   CLL	      = -0.70139
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 3.4190000000000005 seconds
Total inference time: 0.938 seconds
AUC ROC: 0.414802
Total revision time: 3.4190000000000005
Best scored revision CLL: -0.695026


Dataset: 3_imdb_cora, Fold: 3, Type: Transfer (trRDN-B), Time: 00:05:57
{'AUC ROC': 0.414802, 'AUC PR': 0.180757, 'CLL': -0.70139, 'Precision': [nan, 0.5], 'Recall': 0.0, 'F1': nan, 'Learning time': 3.4190000000000005, 'Inference time': 0.938, 'parameter_5': {'AUC ROC': 0.414802, 'AUC PR': 0.180757, 'CLL': -0.70139, 'Precision': [nan, 0.5], 'Recall': 0.0, 'F1': nan, 'Learning time': 0.909, 'Inference time': 0.938}}


Amount of data: 10
******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.3581489350995123;  // std dev = 2.236, 20.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=10 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.3087411357856348;  // std dev = 2.236, 20.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=10 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.2564123687585864;  // std dev = 2.236, 20.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=10 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.20613740734453953;  // std dev = 2.236, 20.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=10 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.16162857548414683;  // std dev = 2.236, 20.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=10 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.12455597792081981;  // std dev = 2.236, 20.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=10 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.09492800936730669;  // std dev = 2.236, 20.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=10 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.07186088850055856;  // std dev = 2.236, 20.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=10 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.054183073759549595;  // std dev = 2.236, 20.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=10 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.040760253233056355;  // std dev = 2.236, 20.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=10 */


Results
   AUC ROC   = 0.414802
   AUC PR    = 0.180757
   CLL	      = -0.70139
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 0.892 seconds
Total inference time: 0.925 seconds
AUC ROC: 0.414802


Results scoring model
   AUC ROC   = 0.5
   AUC PR    = 0.5
   CLL	      = -0.695026
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total scoring time: 0.642 seconds
Parameter learned model CLL: -0.695026


Structure after Parameter Learning
[['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 0], 'false': [2.236, 10, 10]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 0], 'false': [2.236, 10, 10]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 0], 'false': [2.236, 10, 10]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 0], 'false': [2.236, 10, 10]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 0], 'false': [2.236, 10, 10]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 0], 'false': [2.236, 10, 10]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 0], 'false': [2.236, 10, 10]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 0], 'false': [2.236, 10, 10]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 0], 'false': [2.236, 10, 10]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 0], 'false': [2.236, 10, 10]}]]
[{'': [nan, 0.25]}, {'': [nan, 0.2500000000000001]}, {'': [nan, 0.25000000000000006]}, {'': [nan, 0.2500000000000002]}, {'': [nan, 0.24999999999999978]}, {'': [nan, 0.24999999999999994]}, {'': [nan, 0.25000000000000017]}, {'': [nan, 0.2500000000000001]}, {'': [nan, 0.24999999999999994]}, {'': [nan, 0.24999999999999994]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Pruning resulted in null theory

Candidate for revision
0;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
1;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
2;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
3;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
4;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
5;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
6;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
7;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
8;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
9;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(B, D), haswordtitle(E, D) )
%   | then return 0.3875606998053947;  // std dev = 0.499, 17.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=9 */
%   | else return 0.19148226843284552;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(B, D), haswordtitle(E, D) )
%   | then return 0.3335621649521725;  // std dev = 0.499, 17.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=9 */
%   | else return 0.16653882456488175;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(B, D), haswordtitle(E, D) )
%   | then return 0.2756931975053717;  // std dev = 0.499, 17.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=9 */
%   | else return 0.1420942428155648;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(B, D), haswordtitle(E, D) )
%   | then return 0.22006690870309975;  // std dev = 0.499, 17.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=9 */
%   | else return 0.11914890490746428;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(B, D), haswordtitle(E, D) )
%   | then return 0.1711960835655672;  // std dev = 0.499, 17.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=9 */
%   | else return 0.09841340278401862;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(B, D), haswordtitle(E, D) )
%   | then return 0.13096016067527044;  // std dev = 0.499, 17.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=9 */
%   | else return 0.08026654944252243;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(B, D), haswordtitle(E, D) )
%   | then return 0.09919352208121096;  // std dev = 0.499, 17.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=9 */
%   | else return 0.06479591611329232;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(B, D), haswordtitle(E, D) )
%   | then return 0.07472887841652442;  // std dev = 0.499, 17.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=9 */
%   | else return 0.05187916934404054;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(B, D), haswordtitle(E, D) )
%   | then return 0.05614584081272424;  // std dev = 0.499, 17.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=9 */
%   | else return 0.04126932998424626;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(B, D), haswordtitle(E, D) )
%   | then return 0.04213215515674406;  // std dev = 0.499, 17.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=9 */
%   | else return 0.032663748734830134;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */


Results
   AUC ROC   = 0.431038
   AUC PR    = 0.185799
   CLL	      = -0.716768
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 9.064 seconds
Total inference time: 1.264 seconds
AUC ROC: 0.431038


Results scoring model
   AUC ROC   = 0.55
   AUC PR    = 0.527941
   CLL	      = -0.685109
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total scoring time: 0.718 seconds
Refined model CLL: -0.685109


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.431038
   AUC PR    = 0.185799
   CLL	      = -0.716768
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 11.316 seconds
Total inference time: 1.264 seconds
AUC ROC: 0.431038
Total revision time: 11.316
Best scored revision CLL: -0.685109


Dataset: 3_imdb_cora, Fold: 3, Type: Transfer (trRDN-B), Time: 00:06:11
{'AUC ROC': 0.431038, 'AUC PR': 0.185799, 'CLL': -0.716768, 'Precision': [nan, 0.5], 'Recall': 0.0, 'F1': nan, 'Learning time': 11.316, 'Inference time': 1.264, 'parameter_10': {'AUC ROC': 0.414802, 'AUC PR': 0.180757, 'CLL': -0.70139, 'Precision': [nan, 0.5], 'Recall': 0.0, 'F1': nan, 'Learning time': 0.892, 'Inference time': 0.925}}


Amount of data: 15
******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.41370449065506787;  // std dev = 2.582, 27.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=15 */
%   else return -0.14185106490048777;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.3555557392714985;  // std dev = 2.582, 27.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=15 */
%   else return -0.12544463852839138;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.29261484610968785;  // std dev = 2.582, 27.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=15 */
%   else return -0.11231637819360639;  // std dev = 2.63e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.23214124828648158;  // std dev = 2.582, 27.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=15 */
%   else return -0.1015963294878363;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.17942003892665268;  // std dev = 2.582, 27.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=15 */
%   else return -0.09269127618926094;  // std dev = 2.63e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.13647857812921962;  // std dev = 2.582, 27.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=15 */
%   else return -0.08518475138839687;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.10293424750437853;  // std dev = 2.582, 27.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=15 */
%   else return -0.07877675473109173;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.07732947852152011;  // std dev = 2.582, 27.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=15 */
%   else return -0.07324622576333704;  // std dev = 1.86e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.05801086896812466;  // std dev = 2.582, 27.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=15 */
%   else return -0.06842697784420272;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.04351050232227124;  // std dev = 2.582, 27.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=15 */
%   else return -0.0641918400820262;  // std dev = 1.32e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */


Results
   AUC ROC   = 0.548677
   AUC PR    = 0.225256
   CLL	      = -0.663164
   Precision = 0.22586 at threshold = 0.5
   Recall    = 0.938038
   F1        = 0.364061


Total learning time: 0.9 seconds
Total inference time: 0.897 seconds
AUC ROC: 0.548677


Results scoring model
   AUC ROC   = 0.6
   AUC PR    = 0.555556
   CLL	      = -0.626428
   Precision = 0.555556 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.714286


Total scoring time: 0.65 seconds
Parameter learned model CLL: -0.626428


Structure after Parameter Learning
[['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [2.582, 12, 15], 'false': [0.0, 3, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [2.582, 12, 15], 'false': [0.0, 3, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [2.582, 12, 15], 'false': [2.63e-09, 3, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [2.582, 12, 15], 'false': [0.0, 3, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [2.582, 12, 15], 'false': [2.63e-09, 3, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [2.582, 12, 15], 'false': [0.0, 3, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [2.582, 12, 15], 'false': [0.0, 3, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [2.582, 12, 15], 'false': [1.86e-09, 3, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [2.582, 12, 15], 'false': [0.0, 3, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [2.582, 12, 15], 'false': [1.32e-09, 3, 0]}]]
[{'': [0.24691358024691312, 0.0]}, {'': [0.24691358024691415, 0.0]}, {'': [0.24691358024691415, 2.3129646346357427e-18]}, {'': [0.24691358024691343, -1.1564823173178713e-18]}, {'': [0.24691358024691337, 2.3129646346357427e-18]}, {'': [0.24691358024691348, 0.0]}, {'': [0.24691358024691346, 0.0]}, {'': [0.24691358024691365, 1.1564823173178713e-18]}, {'': [0.24691358024691348, -5.782411586589357e-19]}, {'': [0.24691358024691354, 5.782411586589357e-19]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordtitle(E, D) )
%   | then return 0.399815601766179;  // std dev = 0.498, 24.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=13 */
%   | else return 0.5248156017661788;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   else return -0.14185106490048777;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordtitle(E, D) )
%   | then return 0.34387981480959035;  // std dev = 0.498, 24.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=13 */
%   | else return 0.448295606241962;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   else return -0.12544463852839138;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordtitle(E, D) )
%   | then return 0.28365037994782877;  // std dev = 0.498, 24.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=13 */
%   | else return 0.36236334632262296;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   else return -0.11231637819360639;  // std dev = 2.63e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordtitle(E, D) )
%   | then return 0.22576143804174864;  // std dev = 0.498, 24.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=13 */
%   | else return 0.2807538536965855;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   else return -0.1015963294878363;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordtitle(E, D) )
%   | then return 0.17508105549888486;  // std dev = 0.498, 24.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=13 */
%   | else return 0.21248070121827137;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   else return -0.09269127618926094;  // std dev = 2.63e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordtitle(E, D) )
%   | then return 0.13356334544682333;  // std dev = 0.498, 24.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=13 */
%   | else return 0.1594898822817116;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   else return -0.08518475138839687;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordtitle(E, D) )
%   | then return 0.10094860785291686;  // std dev = 0.498, 24.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=13 */
%   | else return 0.11975529938157474;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   else return -0.07877675473109173;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordtitle(E, D) )
%   | then return 0.07593778502481809;  // std dev = 0.498, 24.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=13 */
%   | else return 0.09028081829440963;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   else return -0.07324622576333704;  // std dev = 1.86e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordtitle(E, D) )
%   | then return 0.05700234792881318;  // std dev = 0.498, 24.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=13 */
%   | else return 0.06840311429118533;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   else return -0.06842697784420272;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordtitle(E, D) )
%   | then return 0.042756570861011034;  // std dev = 0.498, 24.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=13 */
%   | else return 0.052078905701252655;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   else return -0.0641918400820262;  // std dev = 1.32e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */


Results
   AUC ROC   = 0.556996
   AUC PR    = 0.245836
   CLL	      = -0.6499
   Precision = 0.22586 at threshold = 0.5
   Recall    = 0.938038
   F1        = 0.364061


Total learning time: 73.27 seconds
Total inference time: 1.246 seconds
AUC ROC: 0.556996


Results scoring model
   AUC ROC   = 0.62
   AUC PR    = 0.588495
   CLL	      = -0.623616
   Precision = 0.555556 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.714286


Total scoring time: 0.78 seconds
Refined model CLL: -0.623616


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.556996
   AUC PR    = 0.245836
   CLL	      = -0.6499
   Precision = 0.22586 at threshold = 0.5
   Recall    = 0.938038
   F1        = 0.364061


Total learning time: 75.6 seconds
Total inference time: 1.246 seconds
AUC ROC: 0.556996
Total revision time: 75.6
Best scored revision CLL: -0.623616


Dataset: 3_imdb_cora, Fold: 3, Type: Transfer (trRDN-B), Time: 00:07:29
{'AUC ROC': 0.556996, 'AUC PR': 0.245836, 'CLL': -0.6499, 'Precision': [0.22586, 0.5], 'Recall': 0.938038, 'F1': 0.364061, 'Learning time': 75.6, 'Inference time': 1.246, 'parameter_15': {'AUC ROC': 0.548677, 'AUC PR': 0.225256, 'CLL': -0.663164, 'Precision': [0.22586, 0.5], 'Recall': 0.938038, 'F1': 0.364061, 'Learning time': 0.9, 'Inference time': 0.897}}


Amount of data: 20
******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.4295775065280833;  // std dev = 2.928, 35.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=20 */
%   else return -0.14185106490048777;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.3688769765977062;  // std dev = 2.928, 35.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=20 */
%   else return -0.12544463852839138;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.30279090858494073;  // std dev = 2.928, 35.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=20 */
%   else return -0.11231637819360638;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.23934016640989278;  // std dev = 2.928, 35.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=20 */
%   else return -0.10159632948783633;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.18430382771628487;  // std dev = 2.928, 35.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=20 */
%   else return -0.09269127618926098;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.13977569193759035;  // std dev = 2.928, 35.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=20 */
%   else return -0.08518475138839687;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.10521075613481361;  // std dev = 2.928, 35.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=20 */
%   else return -0.07877675473109177;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.07895904348963041;  // std dev = 2.928, 35.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=20 */
%   else return -0.07324622576333704;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.05922227782586406;  // std dev = 2.928, 35.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=20 */
%   else return -0.06842697784420272;  // std dev = 1.86e-09, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.04444053765471742;  // std dev = 2.928, 35.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=20 */
%   else return -0.0641918400820262;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */


Results
   AUC ROC   = 0.548677
   AUC PR    = 0.225256
   CLL	      = -0.679107
   Precision = 0.22586 at threshold = 0.5
   Recall    = 0.938038
   F1        = 0.364061


Total learning time: 0.906 seconds
Total inference time: 0.996 seconds
AUC ROC: 0.548677


Results scoring model
   AUC ROC   = 0.625
   AUC PR    = 0.571429
   CLL	      = -0.607307
   Precision = 0.571429 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.727273


Total scoring time: 0.672 seconds
Parameter learned model CLL: -0.607307


Structure after Parameter Learning
[['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [2.928, 15, 20], 'false': [0.0, 5, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [2.928, 15, 20], 'false': [0.0, 5, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [2.928, 15, 20], 'false': [0.0, 5, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [2.928, 15, 20], 'false': [0.0, 5, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [2.928, 15, 20], 'false': [0.0, 5, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [2.928, 15, 20], 'false': [0.0, 5, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [2.928, 15, 20], 'false': [0.0, 5, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [2.928, 15, 20], 'false': [0.0, 5, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [2.928, 15, 20], 'false': [1.86e-09, 5, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [2.928, 15, 20], 'false': [0.0, 5, 0]}]]
[{'': [0.2448979591836734, -2.7755575615628915e-18]}, {'': [0.24489795918367352, 0.0]}, {'': [0.24489795918367327, 0.0]}, {'': [0.24489795918367352, 0.0]}, {'': [0.2448979591836736, 0.0]}, {'': [0.24489795918367366, 0.0]}, {'': [0.2448979591836736, -1.3877787807814458e-18]}, {'': [0.24489795918367357, -6.938893903907229e-19]}, {'': [0.24489795918367346, 6.938893903907229e-19]}, {'': [0.24489795918367335, 0.0]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordtitle(E, D) )
%   | then return 0.42064893509951234;  // std dev = 0.496, 32.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=18 */
%   | else return 0.5248156017661788;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   else return -0.14185106490048777;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordtitle(E, D) )
%   | then return 0.361386758207022;  // std dev = 0.496, 32.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=18 */
%   | else return 0.448295606241962;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   else return -0.12544463852839138;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordtitle(E, D) )
%   | then return 0.2970758814621242;  // std dev = 0.496, 32.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=18 */
%   | else return 0.36236334632262296;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   else return -0.11231637819360638;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordtitle(E, D) )
%   | then return 0.23530262435174626;  // std dev = 0.496, 32.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=18 */
%   | else return 0.2807538536965855;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   else return -0.10159632948783633;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordtitle(E, D) )
%   | then return 0.1815660099203646;  // std dev = 0.496, 32.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=18 */
%   | else return 0.21248070121827137;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   else return -0.09269127618926098;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordtitle(E, D) )
%   | then return 0.13792489283057746;  // std dev = 0.496, 32.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=18 */
%   | else return 0.1594898822817116;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   else return -0.08518475138839687;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordtitle(E, D) )
%   | then return 0.10392852578813322;  // std dev = 0.496, 32.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=18 */
%   | else return 0.11975529938157474;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   else return -0.07877675473109177;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordtitle(E, D) )
%   | then return 0.07803658977375322;  // std dev = 0.496, 32.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=18 */
%   | else return 0.09028081829440963;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   else return -0.07324622576333704;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordtitle(E, D) )
%   | then return 0.058532528913204436;  // std dev = 0.496, 32.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=18 */
%   | else return 0.06840311429118533;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   else return -0.06842697784420272;  // std dev = 1.86e-09, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordtitle(E, D) )
%   | then return 0.04390788942410159;  // std dev = 0.496, 32.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=18 */
%   | else return 0.052078905701252655;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   else return -0.0641918400820262;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */


Results
   AUC ROC   = 0.556996
   AUC PR    = 0.245836
   CLL	      = -0.670134
   Precision = 0.22586 at threshold = 0.5
   Recall    = 0.938038
   F1        = 0.364061


Total learning time: 122.248 seconds
Total inference time: 1.088 seconds
AUC ROC: 0.556996


Results scoring model
   AUC ROC   = 0.6375
   AUC PR    = 0.594756
   CLL	      = -0.605791
   Precision = 0.571429 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.727273


Total scoring time: 0.744 seconds
Refined model CLL: -0.605791


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.556996
   AUC PR    = 0.245836
   CLL	      = -0.670134
   Precision = 0.22586 at threshold = 0.5
   Recall    = 0.938038
   F1        = 0.364061


Total learning time: 124.57000000000001 seconds
Total inference time: 1.088 seconds
AUC ROC: 0.556996
Total revision time: 124.57000000000001
Best scored revision CLL: -0.605791


Dataset: 3_imdb_cora, Fold: 3, Type: Transfer (trRDN-B), Time: 00:09:36
{'AUC ROC': 0.556996, 'AUC PR': 0.245836, 'CLL': -0.670134, 'Precision': [0.22586, 0.5], 'Recall': 0.938038, 'F1': 0.364061, 'Learning time': 124.57000000000001, 'Inference time': 1.088, 'parameter_20': {'AUC ROC': 0.548677, 'AUC PR': 0.225256, 'CLL': -0.679107, 'Precision': [0.22586, 0.5], 'Recall': 0.938038, 'F1': 0.364061, 'Learning time': 0.906, 'Inference time': 0.996}}


Amount of data: 25
******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.8581489350995122;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else return 0.31467067422994655;  // std dev = 3.378, 46.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=21 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.7194734122109545;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else return 0.2718979338779211;  // std dev = 3.378, 46.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=21 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.5553664367462845;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else return 0.22742727023532366;  // std dev = 3.378, 46.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=21 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.41751358415830997;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else return 0.18481967858369794;  // std dev = 3.378, 46.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=21 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.32071184716014967;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else return 0.14674952708917505;  // std dev = 3.378, 46.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=21 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.25517224256948945;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else return 0.11453090292473048;  // std dev = 3.378, 46.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=21 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.20975771563253554;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else return 0.08831182757523444;  // std dev = 3.378, 46.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=21 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.17709649774527736;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else return 0.06753946269031201;  // std dev = 3.378, 46.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=21 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.15274385809367097;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else return 0.05137193645873037;  // std dev = 3.378, 46.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=21 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.13400703000801117;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else return 0.03893324925844389;  // std dev = 3.378, 46.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=21 */


Results
   AUC ROC   = 0.585198
   AUC PR    = 0.401731
   CLL	      = -0.592343
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.170396
   F1        = 0.291176


Total learning time: 0.908 seconds
Total inference time: 0.912 seconds
AUC ROC: 0.585198


Results scoring model
   AUC ROC   = 0.58
   AUC PR    = 0.644703
   CLL	      = -0.645987
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.16
   F1        = 0.275862


Total scoring time: 0.655 seconds
Parameter learned model CLL: -0.645987


Structure after Parameter Learning
[['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 4], 'false': [3.378, 25, 21]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 4], 'false': [3.378, 25, 21]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 4], 'false': [3.378, 25, 21]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 4], 'false': [3.378, 25, 21]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 4], 'false': [3.378, 25, 21]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 4], 'false': [3.378, 25, 21]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 4], 'false': [3.378, 25, 21]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 4], 'false': [3.378, 25, 21]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 4], 'false': [3.378, 25, 21]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 4], 'false': [3.378, 25, 21]}]]
[{'': [0.0, 0.2481096408317579]}, {'': [0.0, 0.2481096408317583]}, {'': [0.0, 0.24810964083175807]}, {'': [0.0, 0.24810964083175777]}, {'': [0.0, 0.24810964083175846]}, {'': [0.0, 0.24810964083175827]}, {'': [0.0, 0.24810964083175777]}, {'': [0.0, 0.2481096408317585]}, {'': [0.0, 0.248109640831758]}, {'': [0.0, 0.24810964083175827]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
1;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
2;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
3;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
4;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
5;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
6;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
7;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
8;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
9;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.8581489350995122;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( haswordvenue(A, D), haswordtitle(E, D) )
%   | then if ( haswordvenue(B, D) )
%   | | then return 0.34463542158599886;  // std dev = 0.500, 37.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=18 */
%   | | else return 0.4581489350995122;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | else return -0.14185106490048777;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.7194734122109545;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( haswordvenue(A, D), haswordtitle(E, D) )
%   | then if ( haswordvenue(B, D) )
%   | | then return 0.29730916159900167;  // std dev = 0.500, 37.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=18 */
%   | | else return 0.3927941835770488;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | else return -0.12544463852839138;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.5553664367462845;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( haswordvenue(A, D), haswordtitle(E, D) )
%   | then if ( haswordvenue(B, D) )
%   | | then return 0.24746568088746768;  // std dev = 0.500, 37.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=18 */
%   | | else return 0.32092546969114216;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | else return -0.11231637819360639;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.41751358415830997;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.19960731229002016;  // std dev = 0.500, 37.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=18 */
%   | | else return 0.4008449867136079;  // std dev = 0.615, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else return -0.058098675670086454;  // std dev = 0.823, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.32071184716014967;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( haswordvenue(A, D), haswordtitle(E, D) )
%   | then if ( haswordvenue(B, D) )
%   | | then return 0.15710468965464464;  // std dev = 0.500, 37.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=18 */
%   | | else return 0.22170796029472029;  // std dev = 1.020, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | else return -0.10842495543575756;  // std dev = 0.042, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.25517224256948945;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.12152127258369383;  // std dev = 0.500, 37.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=18 */
%   | | else return 0.29040808779305777;  // std dev = 0.517, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else return -0.06997684159836885;  // std dev = 0.818, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.20975771563253554;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( haswordvenue(A, D), haswordtitle(E, D) )
%   | then if ( haswordvenue(B, D) )
%   | | then return 0.09292271552958961;  // std dev = 0.500, 37.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=18 */
%   | | else return 0.15002713915855276;  // std dev = 0.963, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | else return -0.1035720876898397;  // std dev = 0.075, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.17709649774527736;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.07053945296948243;  // std dev = 0.500, 37.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=18 */
%   | | else return 0.2105051970599173;  // std dev = 0.447, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else return -0.07310257527192361;  // std dev = 0.817, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.15274385809367097;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( haswordvenue(A, D), haswordtitle(E, D) )
%   | then if ( haswordvenue(B, D) )
%   | | then return 0.05330792185958126;  // std dev = 0.500, 37.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=18 */
%   | | else return 0.10507734760028646;  // std dev = 0.926, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | else return -0.09818907953652578;  // std dev = 0.099, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.13400703000801117;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.04017529674779365;  // std dev = 0.500, 37.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=18 */
%   | | else return 0.15726377591182955;  // std dev = 0.400, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else return -0.07147580890513687;  // std dev = 0.817, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */


Results
   AUC ROC   = 0.6191
   AUC PR    = 0.417282
   CLL	      = -0.595685
   Precision = 0.927273 at threshold = 0.5
   Recall    = 0.175559
   F1        = 0.295224


Total learning time: 18.474 seconds
Total inference time: 1.363 seconds
AUC ROC: 0.6191


Results scoring model
   AUC ROC   = 0.6944
   AUC PR    = 0.730951
   CLL	      = -0.584378
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.24
   F1        = 0.387097


Total scoring time: 0.787 seconds
Refined model CLL: -0.584378


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.6191
   AUC PR    = 0.417282
   CLL	      = -0.595685
   Precision = 0.927273 at threshold = 0.5
   Recall    = 0.175559
   F1        = 0.295224


Total learning time: 20.823999999999998 seconds
Total inference time: 1.363 seconds
AUC ROC: 0.6191
Total revision time: 20.823999999999998
Best scored revision CLL: -0.584378


Dataset: 3_imdb_cora, Fold: 3, Type: Transfer (trRDN-B), Time: 00:10:00
{'AUC ROC': 0.6191, 'AUC PR': 0.417282, 'CLL': -0.595685, 'Precision': [0.927273, 0.5], 'Recall': 0.175559, 'F1': 0.295224, 'Learning time': 20.823999999999998, 'Inference time': 1.363, 'parameter_25': {'AUC ROC': 0.585198, 'AUC PR': 0.401731, 'CLL': -0.592343, 'Precision': [1.0, 0.5], 'Recall': 0.170396, 'F1': 0.291176, 'Learning time': 0.908, 'Inference time': 0.912}}


Starting fold 4

Target train facts examples: 34429
Target train pos examples: 2270
Target train neg examples: 3954

Target test facts examples: 8129
Target test pos	 examples: 747
Target test neg examples: 1068

Amount of data: 5
******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.3581489350995123;  // std dev = 1.581, 10.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.30874113578563506;  // std dev = 1.581, 10.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.2564123687585864;  // std dev = 1.581, 10.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.20613740734453975;  // std dev = 1.581, 10.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.16162857548414675;  // std dev = 1.581, 10.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.1245559779208197;  // std dev = 1.581, 10.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.09492800936730683;  // std dev = 1.581, 10.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.07186088850055855;  // std dev = 1.581, 10.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.05418307375954949;  // std dev = 1.581, 10.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.04076025323305626;  // std dev = 1.581, 10.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */


Results
   AUC ROC   = 0.423025
   AUC PR    = 0.374896
   CLL	      = -0.76
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 0.87 seconds
Total inference time: 0.793 seconds
AUC ROC: 0.423025


Results scoring model
   AUC ROC   = 0.5
   AUC PR    = 0.5
   CLL	      = -0.695026
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total scoring time: 0.632 seconds
Parameter learned model CLL: -0.695026


Structure after Parameter Learning
[['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 0], 'false': [1.581, 5, 5]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 0], 'false': [1.581, 5, 5]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 0], 'false': [1.581, 5, 5]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 0], 'false': [1.581, 5, 5]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 0], 'false': [1.581, 5, 5]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 0], 'false': [1.581, 5, 5]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 0], 'false': [1.581, 5, 5]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 0], 'false': [1.581, 5, 5]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 0], 'false': [1.581, 5, 5]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 0], 'false': [1.581, 5, 5]}]]
[{'': [nan, 0.24999999999999983]}, {'': [nan, 0.24999999999999994]}, {'': [nan, 0.25000000000000006]}, {'': [nan, 0.24999999999999992]}, {'': [nan, 0.24999999999999994]}, {'': [nan, 0.24999999999999986]}, {'': [nan, 0.25]}, {'': [nan, 0.25000000000000006]}, {'': [nan, 0.25]}, {'': [nan, 0.24999999999999994]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Pruning resulted in null theory

Candidate for revision
0;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
1;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
2;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
3;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
4;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
5;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
6;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
7;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
8;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
9;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.3581489350995123;  // std dev = 0.500, 10.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.30874113578563506;  // std dev = 0.500, 10.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.2564123687585864;  // std dev = 0.500, 10.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.20613740734453975;  // std dev = 0.500, 10.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.16162857548414675;  // std dev = 0.500, 10.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.1245559779208197;  // std dev = 0.500, 10.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.09492800936730683;  // std dev = 0.500, 10.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.07186088850055855;  // std dev = 0.500, 10.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.05418307375954949;  // std dev = 0.500, 10.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.04076025323305626;  // std dev = 0.500, 10.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */


Results
   AUC ROC   = 0.423025
   AUC PR    = 0.374896
   CLL	      = -0.76
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 1.212 seconds
Total inference time: 0.834 seconds
AUC ROC: 0.423025


Results scoring model
   AUC ROC   = 0.5
   AUC PR    = 0.5
   CLL	      = -0.695026
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total scoring time: 0.626 seconds
Refined model CLL: -0.695026


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.423025
   AUC PR    = 0.374896
   CLL	      = -0.76
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 3.34 seconds
Total inference time: 0.793 seconds
AUC ROC: 0.423025
Total revision time: 3.34
Best scored revision CLL: -0.695026


Dataset: 3_imdb_cora, Fold: 4, Type: Transfer (trRDN-B), Time: 00:10:06
{'AUC ROC': 0.423025, 'AUC PR': 0.374896, 'CLL': -0.76, 'Precision': [nan, 0.5], 'Recall': 0.0, 'F1': nan, 'Learning time': 3.34, 'Inference time': 0.793, 'parameter_5': {'AUC ROC': 0.423025, 'AUC PR': 0.374896, 'CLL': -0.76, 'Precision': [nan, 0.5], 'Recall': 0.0, 'F1': nan, 'Learning time': 0.87, 'Inference time': 0.793}}


Amount of data: 10
******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.3581489350995123;  // std dev = 2.236, 20.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=10 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.3087411357856348;  // std dev = 2.236, 20.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=10 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.2564123687585864;  // std dev = 2.236, 20.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=10 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.20613740734453953;  // std dev = 2.236, 20.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=10 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.16162857548414683;  // std dev = 2.236, 20.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=10 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.12455597792081981;  // std dev = 2.236, 20.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=10 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.09492800936730669;  // std dev = 2.236, 20.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=10 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.07186088850055856;  // std dev = 2.236, 20.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=10 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.054183073759549595;  // std dev = 2.236, 20.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=10 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.040760253233056355;  // std dev = 2.236, 20.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=10 */


Results
   AUC ROC   = 0.423025
   AUC PR    = 0.374896
   CLL	      = -0.76
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 0.876 seconds
Total inference time: 0.755 seconds
AUC ROC: 0.423025


Results scoring model
   AUC ROC   = 0.5
   AUC PR    = 0.5
   CLL	      = -0.695026
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total scoring time: 0.635 seconds
Parameter learned model CLL: -0.695026


Structure after Parameter Learning
[['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 0], 'false': [2.236, 10, 10]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 0], 'false': [2.236, 10, 10]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 0], 'false': [2.236, 10, 10]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 0], 'false': [2.236, 10, 10]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 0], 'false': [2.236, 10, 10]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 0], 'false': [2.236, 10, 10]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 0], 'false': [2.236, 10, 10]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 0], 'false': [2.236, 10, 10]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 0], 'false': [2.236, 10, 10]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 0], 'false': [2.236, 10, 10]}]]
[{'': [nan, 0.25]}, {'': [nan, 0.2500000000000001]}, {'': [nan, 0.25000000000000006]}, {'': [nan, 0.2500000000000002]}, {'': [nan, 0.24999999999999978]}, {'': [nan, 0.24999999999999994]}, {'': [nan, 0.25000000000000017]}, {'': [nan, 0.2500000000000001]}, {'': [nan, 0.24999999999999994]}, {'': [nan, 0.24999999999999994]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Pruning resulted in null theory

Candidate for revision
0;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
1;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
2;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
3;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
4;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
5;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
6;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
7;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
8;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
9;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.3581489350995123;  // std dev = 0.500, 20.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=10 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.3087411357856348;  // std dev = 0.500, 20.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=10 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.2564123687585864;  // std dev = 0.500, 20.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=10 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.20613740734453953;  // std dev = 0.500, 20.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=10 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.16162857548414683;  // std dev = 0.500, 20.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=10 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.12455597792081981;  // std dev = 0.500, 20.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=10 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.09492800936730669;  // std dev = 0.500, 20.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=10 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.07186088850055856;  // std dev = 0.500, 20.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=10 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.054183073759549595;  // std dev = 0.500, 20.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=10 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.040760253233056355;  // std dev = 0.500, 20.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=10 */


Results
   AUC ROC   = 0.423025
   AUC PR    = 0.374896
   CLL	      = -0.76
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 1.366 seconds
Total inference time: 0.817 seconds
AUC ROC: 0.423025


Results scoring model
   AUC ROC   = 0.5
   AUC PR    = 0.5
   CLL	      = -0.695026
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total scoring time: 0.648 seconds
Refined model CLL: -0.695026


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.423025
   AUC PR    = 0.374896
   CLL	      = -0.76
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 3.5250000000000004 seconds
Total inference time: 0.755 seconds
AUC ROC: 0.423025
Total revision time: 3.5250000000000004
Best scored revision CLL: -0.695026


Dataset: 3_imdb_cora, Fold: 4, Type: Transfer (trRDN-B), Time: 00:10:11
{'AUC ROC': 0.423025, 'AUC PR': 0.374896, 'CLL': -0.76, 'Precision': [nan, 0.5], 'Recall': 0.0, 'F1': nan, 'Learning time': 3.5250000000000004, 'Inference time': 0.755, 'parameter_10': {'AUC ROC': 0.423025, 'AUC PR': 0.374896, 'CLL': -0.76, 'Precision': [nan, 0.5], 'Recall': 0.0, 'F1': nan, 'Learning time': 0.876, 'Inference time': 0.755}}


Amount of data: 15
******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.3966104735610508;  // std dev = 2.542, 26.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=14 */
%   else return 0.10814893509951219;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.34118274280999283;  // std dev = 2.542, 26.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=14 */
%   else return 0.09446743783575562;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.2815735770744793;  // std dev = 2.542, 26.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=14 */
%   else return 0.08165239320886175;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.22427810686169078;  // std dev = 2.542, 26.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=14 */
%   else return 0.06990902274840138;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.1740703004191193;  // std dev = 2.542, 26.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=14 */
%   else return 0.059354635365447495;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.13288558879104354;  // std dev = 2.542, 26.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=14 */
%   else return 0.05002771289938789;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.1004901590509401;  // std dev = 2.542, 26.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=14 */
%   else return 0.04190386852605735;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.07562016402676984;  // std dev = 2.542, 26.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=14 */
%   else return 0.03491396367325339;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.05677556359574457;  // std dev = 2.542, 26.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=14 */
%   else return 0.028961035597951046;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.042589775603555285;  // std dev = 2.542, 26.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=14 */
%   else return 0.023934242922604827;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */


Results
   AUC ROC   = 0.528075
   AUC PR    = 0.425919
   CLL	      = -0.683206
   Precision = 0.4262 at threshold = 0.5
   Recall    = 0.962517
   F1        = 0.590797


Total learning time: 0.954 seconds
Total inference time: 0.789 seconds
AUC ROC: 0.528075


Results scoring model
   AUC ROC   = 0.566667
   AUC PR    = 0.537179
   CLL	      = -0.675053
   Precision = 0.538462 at threshold = 0.5
   Recall    = 0.933333
   F1        = 0.682927


Total scoring time: 0.648 seconds
Parameter learned model CLL: -0.675053


Structure after Parameter Learning
[['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [2.542, 12, 14], 'false': [0.866, 3, 1]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [2.542, 12, 14], 'false': [0.866, 3, 1]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [2.542, 12, 14], 'false': [0.866, 3, 1]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [2.542, 12, 14], 'false': [0.866, 3, 1]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [2.542, 12, 14], 'false': [0.866, 3, 1]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [2.542, 12, 14], 'false': [0.866, 3, 1]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [2.542, 12, 14], 'false': [0.866, 3, 1]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [2.542, 12, 14], 'false': [0.866, 3, 1]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [2.542, 12, 14], 'false': [0.866, 3, 1]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [2.542, 12, 14], 'false': [0.866, 3, 1]}]]
[{'': [0.24852071005917115, 0.18750000000000003]}, {'': [0.24852071005917137, 0.18749999999999997]}, {'': [0.2485207100591718, 0.18749999999999994]}, {'': [0.24852071005917167, 0.18749999999999997]}, {'': [0.2485207100591716, 0.18749999999999997]}, {'': [0.24852071005917153, 0.18750000000000006]}, {'': [0.2485207100591717, 0.18750000000000003]}, {'': [0.24852071005917167, 0.18749999999999994]}, {'': [0.2485207100591716, 0.18749999999999997]}, {'': [0.24852071005917148, 0.1875]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Pruning resulted in null theory

Candidate for revision
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.3966104735610508;  // std dev = 0.499, 26.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=14 */
%   else return 0.10814893509951219;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.34118274280999283;  // std dev = 0.499, 26.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=14 */
%   else return 0.09446743783575562;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.2815735770744793;  // std dev = 0.499, 26.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=14 */
%   else return 0.08165239320886175;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.22427810686169078;  // std dev = 0.499, 26.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=14 */
%   else return 0.06990902274840138;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.1740703004191193;  // std dev = 0.499, 26.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=14 */
%   else return 0.059354635365447495;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.13288558879104354;  // std dev = 0.499, 26.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=14 */
%   else return 0.05002771289938789;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.1004901590509401;  // std dev = 0.499, 26.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=14 */
%   else return 0.04190386852605735;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.07562016402676984;  // std dev = 0.499, 26.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=14 */
%   else return 0.03491396367325339;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.05677556359574457;  // std dev = 0.499, 26.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=14 */
%   else return 0.028961035597951046;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.042589775603555285;  // std dev = 0.499, 26.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=14 */
%   else return 0.023934242922604827;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */


Results
   AUC ROC   = 0.528075
   AUC PR    = 0.425919
   CLL	      = -0.683206
   Precision = 0.4262 at threshold = 0.5
   Recall    = 0.962517
   F1        = 0.590797


Total learning time: 1.37 seconds
Total inference time: 0.771 seconds
AUC ROC: 0.528075


Results scoring model
   AUC ROC   = 0.566667
   AUC PR    = 0.537179
   CLL	      = -0.675053
   Precision = 0.538462 at threshold = 0.5
   Recall    = 0.933333
   F1        = 0.682927


Total scoring time: 0.646 seconds
Refined model CLL: -0.675053


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.528075
   AUC PR    = 0.425919
   CLL	      = -0.683206
   Precision = 0.4262 at threshold = 0.5
   Recall    = 0.962517
   F1        = 0.590797


Total learning time: 3.618 seconds
Total inference time: 0.789 seconds
AUC ROC: 0.528075
Total revision time: 3.618
Best scored revision CLL: -0.675053


Dataset: 3_imdb_cora, Fold: 4, Type: Transfer (trRDN-B), Time: 00:10:17
{'AUC ROC': 0.528075, 'AUC PR': 0.425919, 'CLL': -0.683206, 'Precision': [0.4262, 0.5], 'Recall': 0.962517, 'F1': 0.590797, 'Learning time': 3.618, 'Inference time': 0.789, 'parameter_15': {'AUC ROC': 0.528075, 'AUC PR': 0.425919, 'CLL': -0.683206, 'Precision': [0.4262, 0.5], 'Recall': 0.962517, 'F1': 0.590797, 'Learning time': 0.954, 'Inference time': 0.789}}


Amount of data: 20
******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.8581489350995121;  // std dev = 2.11e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return 0.31760839455897183;  // std dev = 3.031, 37.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=17 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.7194734122109545;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return 0.2743930062984994;  // std dev = 3.031, 37.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=17 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.5553664367462845;  // std dev = 1.05e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return 0.22940409212560184;  // std dev = 3.031, 37.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=17 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.41751358415830997;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return 0.18628870627050972;  // std dev = 3.031, 37.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=17 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.32071184716014967;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return 0.14778567561990727;  // std dev = 3.031, 37.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=17 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.25517224256948945;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return 0.11523398454885339;  // std dev = 3.031, 37.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=17 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.20975771563253554;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return 0.08877605966596111;  // std dev = 3.031, 37.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=17 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.17709649774527736;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return 0.06784002556264199;  // std dev = 3.031, 37.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=17 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.15274385809367097;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return 0.05156345950024885;  // std dev = 3.031, 37.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=17 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.13400703000801117;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return 0.03905337379799511;  // std dev = 3.031, 37.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=17 */


Results
   AUC ROC   = 0.576975
   AUC PR    = 0.567681
   CLL	      = -0.632677
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.153949
   F1        = 0.266821


Total learning time: 0.934 seconds
Total inference time: 0.797 seconds
AUC ROC: 0.576975


Results scoring model
   AUC ROC   = 0.575
   AUC PR    = 0.638591
   CLL	      = -0.649272
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.15
   F1        = 0.26087


Total scoring time: 0.719 seconds
Parameter learned model CLL: -0.649272


Structure after Parameter Learning
[['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [2.11e-08, 0, 3], 'false': [3.031, 20, 17]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 3], 'false': [3.031, 20, 17]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [1.05e-08, 0, 3], 'false': [3.031, 20, 17]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 3], 'false': [3.031, 20, 17]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 3], 'false': [3.031, 20, 17]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 3], 'false': [3.031, 20, 17]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 3], 'false': [3.031, 20, 17]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 3], 'false': [3.031, 20, 17]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 3], 'false': [3.031, 20, 17]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 3], 'false': [3.031, 20, 17]}]]
[{'': [1.4802973661668753e-16, 0.24835646457268032]}, {'': [0.0, 0.24835646457268137]}, {'': [3.700743415417188e-17, 0.2483564645726806]}, {'': [-3.700743415417188e-17, 0.24835646457268118]}, {'': [0.0, 0.24835646457268037]}, {'': [0.0, 0.24835646457268085]}, {'': [0.0, 0.24835646457268098]}, {'': [0.0, 0.24835646457268104]}, {'': [-4.625929269271485e-18, 0.2483564645726807]}, {'': [-2.3129646346357427e-18, 0.24835646457268074]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
1;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
2;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
3;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
4;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
5;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
6;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
7;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
8;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
9;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.8581489350995121;  // std dev = 2.11e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.35814893509951234;  // std dev = 0.500, 32.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=16 */
%   | else return 0.0581489350995122;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.7194734122109545;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.3087411357856347;  // std dev = 0.500, 32.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=16 */
%   | else return 0.050922032513554226;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.5553664367462845;  // std dev = 1.05e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.25641236875858675;  // std dev = 0.500, 32.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=16 */
%   | else return 0.04434629760466851;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.41751358415830997;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.20613740734453992;  // std dev = 0.500, 32.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=16 */
%   | else return 0.038428662236904595;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.32071184716014967;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( haswordvenue(B, D), haswordtitle(E, D) )
%   | then if ( haswordvenue(A, D) )
%   | | then return 0.12829524215081334;  // std dev = 0.499, 30.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=14 */
%   | | else return 0.10931282244263933;  // std dev = 0.676, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | else return 0.29027335331245085;  // std dev = 0.922, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.25517224256948945;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.1312767956448581;  // std dev = 0.499, 32.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=16 */
%   | else return 2.5797406664573863E-4;  // std dev = 0.882, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.20975771563253554;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( haswordvenue(B, D), haswordtitle(E, D) )
%   | then if ( haswordvenue(A, D) )
%   | | then return 0.0679914533243851;  // std dev = 0.499, 30.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=14 */
%   | | else return 0.08019759865167397;  // std dev = 0.644, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | else return 0.232072644566581;  // std dev = 0.901, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.17709649774527736;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( haswordvenue(B, D), haswordtitle(E, D) )
%   | then if ( haswordvenue(A, D) )
%   | | then return 0.051584930456475456;  // std dev = 0.499, 30.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=14 */
%   | | else return 0.06557764969138535;  // std dev = 0.638, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | else return 0.18671569771500485;  // std dev = 0.895, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.15274385809367097;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.06870259121625494;  // std dev = 0.497, 32.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=16 */
%   | else return -0.05573872121055873;  // std dev = 0.861, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.13400703000801117;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( haswordvenue(B, D), haswordtitle(E, D) )
%   | then if ( title(F, E), venue(F, B) )
%   | | then if ( samebib(F, G), venue(G, A) )
%   | | | then return 0.43033687661190145;  // std dev = 1.323, 16.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=14 */
%   | | | else return -0.4445517090303079;  // std dev = 2.11e-08, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | | else return 0.054173848053282354;  // std dev = 0.614, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | else return 0.15169063860443632;  // std dev = 0.882, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */


Results
   AUC ROC   = 0.88854
   AUC PR    = 0.842269
   CLL	      = -0.503807
   Precision = 0.807692 at threshold = 0.5
   Recall    = 0.927711
   F1        = 0.863551


Total learning time: 17.277 seconds
Total inference time: 1.505 seconds
AUC ROC: 0.88854


Results scoring model
   AUC ROC   = 0.92
   AUC PR    = 0.92535
   CLL	      = -0.494431
   Precision = 0.9 at threshold = 0.5
   Recall    = 0.9
   F1        = 0.9


Total scoring time: 0.937 seconds
Refined model CLL: -0.494431


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.88854
   AUC PR    = 0.842269
   CLL	      = -0.503807
   Precision = 0.807692 at threshold = 0.5
   Recall    = 0.927711
   F1        = 0.863551


Total learning time: 19.867 seconds
Total inference time: 1.505 seconds
AUC ROC: 0.88854
Total revision time: 19.867
Best scored revision CLL: -0.494431


Dataset: 3_imdb_cora, Fold: 4, Type: Transfer (trRDN-B), Time: 00:10:40
{'AUC ROC': 0.88854, 'AUC PR': 0.842269, 'CLL': -0.503807, 'Precision': [0.807692, 0.5], 'Recall': 0.927711, 'F1': 0.863551, 'Learning time': 19.867, 'Inference time': 1.505, 'parameter_20': {'AUC ROC': 0.576975, 'AUC PR': 0.567681, 'CLL': -0.632677, 'Precision': [1.0, 0.5], 'Recall': 0.153949, 'F1': 0.266821, 'Learning time': 0.934, 'Inference time': 0.797}}


Amount of data: 25
******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.8581489350995122;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return 0.30259337954395643;  // std dev = 3.333, 45.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=20 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.7194734122109545;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return 0.26163180867521296;  // std dev = 3.333, 45.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=20 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.5553664367462845;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return 0.2192721473492705;  // std dev = 3.333, 45.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=20 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.4175135841583099;  // std dev = 1.49e-08, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return 0.1787352457468729;  // std dev = 3.333, 45.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=20 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.32071184716014967;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return 0.14243924477676323;  // std dev = 3.333, 45.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=20 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.25517224256948945;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return 0.11159559999632924;  // std dev = 3.333, 45.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=20 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.20975771563253556;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return 0.08637026299843586;  // std dev = 3.333, 45.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=20 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.17709649774527736;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return 0.06628370899125421;  // std dev = 3.333, 45.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=20 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.15274385809367097;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return 0.05057564362187412;  // std dev = 3.333, 45.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=20 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.13400703000801117;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return 0.03843884907512935;  // std dev = 3.333, 45.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=20 */


Results
   AUC ROC   = 0.576975
   AUC PR    = 0.567681
   CLL	      = -0.629819
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.153949
   F1        = 0.266821


Total learning time: 0.981 seconds
Total inference time: 0.812 seconds
AUC ROC: 0.576975


Results scoring model
   AUC ROC   = 0.6
   AUC PR    = 0.670073
   CLL	      = -0.632522
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.2
   F1        = 0.333333


Total scoring time: 0.708 seconds
Parameter learned model CLL: -0.632522


Structure after Parameter Learning
[['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 5], 'false': [3.333, 25, 20]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 5], 'false': [3.333, 25, 20]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 5], 'false': [3.333, 25, 20]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [1.49e-08, 0, 5], 'false': [3.333, 25, 20]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 5], 'false': [3.333, 25, 20]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 5], 'false': [3.333, 25, 20]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 5], 'false': [3.333, 25, 20]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 5], 'false': [3.333, 25, 20]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 5], 'false': [3.333, 25, 20]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 5], 'false': [3.333, 25, 20]}]]
[{'': [0.0, 0.2469135802469133]}, {'': [0.0, 0.24691358024691287]}, {'': [-4.4408920985006264e-17, 0.24691358024691334]}, {'': [4.4408920985006264e-17, 0.24691358024691293]}, {'': [-2.2204460492503132e-17, 0.24691358024691365]}, {'': [0.0, 0.24691358024691348]}, {'': [-5.551115123125783e-18, 0.24691358024691382]}, {'': [0.0, 0.2469135802469139]}, {'': [0.0, 0.24691358024691354]}, {'': [0.0, 0.24691358024691348]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
1;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
2;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
3;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
4;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
5;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
6;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
7;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
8;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
9;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.8581489350995122;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.33314893509951227;  // std dev = 0.499, 40.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=19 */
%   | else return 0.0581489350995122;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.7194734122109545;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.2875782915172319;  // std dev = 0.499, 40.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=19 */
%   | else return 0.050922032513554226;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.5553664367462845;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.23981702128969618;  // std dev = 0.499, 40.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=19 */
%   | else return 0.04434629760466851;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.4175135841583099;  // std dev = 1.49e-08, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.1939897087673514;  // std dev = 0.499, 40.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=19 */
%   | else return 0.038428662236904595;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.32071184716014967;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( haswordvenue(B, D), haswordtitle(E, D) )
%   | then if ( title(F, E), venue(F, B) )
%   | | then if ( samebib(F, G), venue(G, A) )
%   | | | then return 0.5202952343346738;  // std dev = 1.589, 19.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=16 */
%   | | | else return -0.2662544732676654;  // std dev = 0.972, 18.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=1 */
%   | | else return 0.00567245854933239;  // std dev = 0.787, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | else return 0.29441370223560903;  // std dev = 0.929, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.25517224256948945;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( haswordvenue(B, D), haswordtitle(E, D) )
%   | then if ( title(F, E), venue(F, B) )
%   | | then if ( samebib(F, G), venue(G, A) )
%   | | | then return 0.39816131962410073;  // std dev = 1.589, 19.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=16 */
%   | | | else return -0.2110877223581909;  // std dev = 0.972, 18.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=1 */
%   | | else return 0.004657828230756181;  // std dev = 0.787, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | else return 0.24382613863705688;  // std dev = 0.920, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.20975771563253556;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( haswordvenue(B, D), haswordtitle(E, D) )
%   | then if ( title(F, E), venue(F, B) )
%   | | then if ( samebib(F, G), venue(G, A) )
%   | | | then return 0.2989651650759349;  // std dev = 1.589, 19.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=16 */
%   | | | else return -0.17188707473776277;  // std dev = 0.972, 18.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=1 */
%   | | else return 0.003822637518878333;  // std dev = 0.786, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | else return 0.19634094117488624;  // std dev = 0.914, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.17709649774527736;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.06439894105107276;  // std dev = 0.369, 40.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=19 */
%   | else return -0.04423547450840698;  // std dev = 0.848, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.15274385809367097;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( haswordvenue(B, D), haswordtitle(E, D) )
%   | then if ( title(F, E), venue(F, B) )
%   | | then if ( samebib(F, G), venue(G, A) )
%   | | | then return 0.21114126120168394;  // std dev = 1.589, 19.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=16 */
%   | | | else return -0.15355479037372619;  // std dev = 0.972, 18.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=1 */
%   | | else return -9.466502026366785E-4;  // std dev = 0.778, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | else return 0.15760275507355037;  // std dev = 0.901, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.13400703000801117;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.03870511942143359;  // std dev = 0.353, 40.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=19 */
%   | else return -0.05619141469900726;  // std dev = 0.839, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */


Results
   AUC ROC   = 0.917023
   AUC PR    = 0.863769
   CLL	      = -0.380625
   Precision = 0.807692 at threshold = 0.5
   Recall    = 0.927711
   F1        = 0.863551


Total learning time: 36.016 seconds
Total inference time: 2.654 seconds
AUC ROC: 0.917023


Results scoring model
   AUC ROC   = 0.92
   AUC PR    = 0.909971
   CLL	      = -0.393837
   Precision = 0.88 at threshold = 0.5
   Recall    = 0.88
   F1        = 0.88


Total scoring time: 1.113 seconds
Refined model CLL: -0.393837


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.917023
   AUC PR    = 0.863769
   CLL	      = -0.380625
   Precision = 0.807692 at threshold = 0.5
   Recall    = 0.927711
   F1        = 0.863551


Total learning time: 38.818 seconds
Total inference time: 2.654 seconds
AUC ROC: 0.917023
Total revision time: 38.818
Best scored revision CLL: -0.393837


Dataset: 3_imdb_cora, Fold: 4, Type: Transfer (trRDN-B), Time: 00:11:23
{'AUC ROC': 0.917023, 'AUC PR': 0.863769, 'CLL': -0.380625, 'Precision': [0.807692, 0.5], 'Recall': 0.927711, 'F1': 0.863551, 'Learning time': 38.818, 'Inference time': 2.654, 'parameter_25': {'AUC ROC': 0.576975, 'AUC PR': 0.567681, 'CLL': -0.629819, 'Precision': [1.0, 0.5], 'Recall': 0.153949, 'F1': 0.266821, 'Learning time': 0.981, 'Inference time': 0.812}}


Starting fold 5

Target train facts examples: 33914
Target train pos examples: 2467
Target train neg examples: 4522

Target test facts examples: 8644
Target test pos	 examples: 550
Target test neg examples: 500

Amount of data: 5
******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.8581489350995122;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else return 0.23314893509951226;  // std dev = 1.369, 8.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=3 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.7194734122109545;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else return 0.202334239218108;  // std dev = 1.369, 8.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=3 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.5553664367462845;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else return 0.17149281961528945;  // std dev = 1.369, 8.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=3 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.41751358415830997;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else return 0.14228146899184052;  // std dev = 1.369, 8.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=3 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.32071184716014967;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else return 0.11591746118730598;  // std dev = 1.369, 8.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=3 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.25517224256948945;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else return 0.09305316265470472;  // std dev = 1.369, 8.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=3 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.20975771563253554;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else return 0.07383827012230793;  // std dev = 1.369, 8.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=3 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.17709649774527736;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else return 0.058073729831299666;  // std dev = 1.369, 8.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=3 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.15274385809367097;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else return 0.045370205025705;  // std dev = 1.369, 8.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=3 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.13400703000801117;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else return 0.035268216809254856;  // std dev = 1.369, 8.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=3 */


Results
   AUC ROC   = 0.574545
   AUC PR    = 0.655418
   CLL	      = -0.684232
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.149091
   F1        = 0.259494


Total learning time: 0.942 seconds
Total inference time: 0.77 seconds
AUC ROC: 0.574545


Results scoring model
   AUC ROC   = 0.7
   AUC PR    = 0.787662
   CLL	      = -0.555937
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.4
   F1        = 0.571429


Total scoring time: 0.656 seconds
Parameter learned model CLL: -0.555937


Structure after Parameter Learning
[['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 2], 'false': [1.369, 5, 3]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 2], 'false': [1.369, 5, 3]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 2], 'false': [1.369, 5, 3]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 2], 'false': [1.369, 5, 3]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 2], 'false': [1.369, 5, 3]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 2], 'false': [1.369, 5, 3]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 2], 'false': [1.369, 5, 3]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 2], 'false': [1.369, 5, 3]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 2], 'false': [1.369, 5, 3]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 2], 'false': [1.369, 5, 3]}]]
[{'': [0.0, 0.2343749999999999]}, {'': [0.0, 0.23437500000000008]}, {'': [0.0, 0.23437499999999992]}, {'': [0.0, 0.23437499999999994]}, {'': [0.0, 0.23437499999999994]}, {'': [0.0, 0.23437499999999994]}, {'': [0.0, 0.23437499999999997]}, {'': [0.0, 0.23437499999999994]}, {'': [0.0, 0.2343749999999999]}, {'': [0.0, 0.234375]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
1;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
2;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
3;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
4;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
5;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
6;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
7;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
8;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
9;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.8581489350995122;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else return 0.23314893509951226;  // std dev = 0.484, 8.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=3 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.7194734122109545;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else return 0.202334239218108;  // std dev = 0.484, 8.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=3 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.5553664367462845;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else return 0.17149281961528945;  // std dev = 0.484, 8.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=3 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.41751358415830997;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else return 0.14228146899184052;  // std dev = 0.484, 8.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=3 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.32071184716014967;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else return 0.11591746118730598;  // std dev = 0.484, 8.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=3 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.25517224256948945;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else return 0.09305316265470472;  // std dev = 0.484, 8.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=3 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.20975771563253554;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else return 0.07383827012230793;  // std dev = 0.484, 8.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=3 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.17709649774527736;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else return 0.058073729831299666;  // std dev = 0.484, 8.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=3 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.15274385809367097;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else return 0.045370205025705;  // std dev = 0.484, 8.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=3 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.13400703000801117;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else return 0.035268216809254856;  // std dev = 0.484, 8.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=3 */


Results
   AUC ROC   = 0.574545
   AUC PR    = 0.655418
   CLL	      = -0.684232
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.149091
   F1        = 0.259494


Total learning time: 1.252 seconds
Total inference time: 0.72 seconds
AUC ROC: 0.574545


Results scoring model
   AUC ROC   = 0.7
   AUC PR    = 0.787662
   CLL	      = -0.555937
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.4
   F1        = 0.571429


Total scoring time: 0.7 seconds
Refined model CLL: -0.555937


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.574545
   AUC PR    = 0.655418
   CLL	      = -0.684232
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.149091
   F1        = 0.259494


Total learning time: 3.55 seconds
Total inference time: 0.77 seconds
AUC ROC: 0.574545
Total revision time: 3.55
Best scored revision CLL: -0.555937


Dataset: 3_imdb_cora, Fold: 5, Type: Transfer (trRDN-B), Time: 00:11:28
{'AUC ROC': 0.574545, 'AUC PR': 0.655418, 'CLL': -0.684232, 'Precision': [1.0, 0.5], 'Recall': 0.149091, 'F1': 0.259494, 'Learning time': 3.55, 'Inference time': 0.77, 'parameter_5': {'AUC ROC': 0.574545, 'AUC PR': 0.655418, 'CLL': -0.684232, 'Precision': [1.0, 0.5], 'Recall': 0.149091, 'F1': 0.259494, 'Learning time': 0.942, 'Inference time': 0.77}}


Amount of data: 10
******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.44638422921715937;  // std dev = 2.029, 17.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=10 */
%   else return -0.14185106490048777;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.382955427940009;  // std dev = 2.029, 17.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=10 */
%   else return -0.12544463852839138;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.3134863926750183;  // std dev = 2.029, 17.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=10 */
%   else return -0.11231637819360639;  // std dev = 2.63e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.24686056424534744;  // std dev = 2.029, 17.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=10 */
%   else return -0.1015963294878363;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.18939831465027204;  // std dev = 2.029, 17.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=10 */
%   else return -0.09269127618926094;  // std dev = 2.63e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.14324053978445067;  // std dev = 2.029, 17.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=10 */
%   else return -0.08518475138839687;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.10764416962019872;  // std dev = 2.029, 17.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=10 */
%   else return -0.07877675473109173;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.08074344532804135;  // std dev = 2.029, 17.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=10 */
%   else return -0.07324622576333704;  // std dev = 1.86e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.060585260580884905;  // std dev = 2.029, 17.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=10 */
%   else return -0.06842697784420272;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.04551511900055642;  // std dev = 2.029, 17.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=10 */
%   else return -0.0641918400820262;  // std dev = 1.32e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */


Results
   AUC ROC   = 0.614727
   AUC PR    = 0.592038
   CLL	      = -0.688614
   Precision = 0.595694 at threshold = 0.5
   Recall    = 0.905455
   F1        = 0.718615


Total learning time: 0.901 seconds
Total inference time: 0.727 seconds
AUC ROC: 0.614727


Results scoring model
   AUC ROC   = 0.65
   AUC PR    = 0.588235
   CLL	      = -0.587251
   Precision = 0.588235 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.740741


Total scoring time: 0.651 seconds
Parameter learned model CLL: -0.587251


Structure after Parameter Learning
[['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [2.029, 7, 10], 'false': [0.0, 3, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [2.029, 7, 10], 'false': [0.0, 3, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [2.029, 7, 10], 'false': [2.63e-09, 3, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [2.029, 7, 10], 'false': [0.0, 3, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [2.029, 7, 10], 'false': [2.63e-09, 3, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [2.029, 7, 10], 'false': [0.0, 3, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [2.029, 7, 10], 'false': [0.0, 3, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [2.029, 7, 10], 'false': [1.86e-09, 3, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [2.029, 7, 10], 'false': [0.0, 3, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [2.029, 7, 10], 'false': [1.32e-09, 3, 0]}]]
[{'': [0.24221453287197228, 0.0]}, {'': [0.2422145328719721, 0.0]}, {'': [0.24221453287197214, 2.3129646346357427e-18]}, {'': [0.24221453287197225, -1.1564823173178713e-18]}, {'': [0.2422145328719722, 2.3129646346357427e-18]}, {'': [0.2422145328719724, 0.0]}, {'': [0.24221453287197234, 0.0]}, {'': [0.24221453287197225, 1.1564823173178713e-18]}, {'': [0.24221453287197228, -5.782411586589357e-19]}, {'': [0.24221453287197234, 5.782411586589357e-19]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.44638422921715937;  // std dev = 0.492, 17.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=10 */
%   else return -0.14185106490048777;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.382955427940009;  // std dev = 0.492, 17.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=10 */
%   else return -0.12544463852839138;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.3134863926750183;  // std dev = 0.492, 17.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=10 */
%   else return -0.11231637819360639;  // std dev = 2.63e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.24686056424534744;  // std dev = 0.492, 17.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=10 */
%   else return -0.1015963294878363;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.18939831465027204;  // std dev = 0.492, 17.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=10 */
%   else return -0.09269127618926094;  // std dev = 2.63e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.14324053978445067;  // std dev = 0.492, 17.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=10 */
%   else return -0.08518475138839687;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.10764416962019872;  // std dev = 0.492, 17.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=10 */
%   else return -0.07877675473109173;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.08074344532804135;  // std dev = 0.492, 17.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=10 */
%   else return -0.07324622576333704;  // std dev = 1.86e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.060585260580884905;  // std dev = 0.492, 17.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=10 */
%   else return -0.06842697784420272;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.04551511900055642;  // std dev = 0.492, 17.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=10 */
%   else return -0.0641918400820262;  // std dev = 1.32e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */


Results
   AUC ROC   = 0.614727
   AUC PR    = 0.592038
   CLL	      = -0.688614
   Precision = 0.595694 at threshold = 0.5
   Recall    = 0.905455
   F1        = 0.718615


Total learning time: 1.326 seconds
Total inference time: 0.679 seconds
AUC ROC: 0.614727


Results scoring model
   AUC ROC   = 0.65
   AUC PR    = 0.588235
   CLL	      = -0.587251
   Precision = 0.588235 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.740741


Total scoring time: 0.68 seconds
Refined model CLL: -0.587251


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.614727
   AUC PR    = 0.592038
   CLL	      = -0.688614
   Precision = 0.595694 at threshold = 0.5
   Recall    = 0.905455
   F1        = 0.718615


Total learning time: 3.5580000000000003 seconds
Total inference time: 0.727 seconds
AUC ROC: 0.614727
Total revision time: 3.5580000000000003
Best scored revision CLL: -0.587251


Dataset: 3_imdb_cora, Fold: 5, Type: Transfer (trRDN-B), Time: 00:11:34
{'AUC ROC': 0.614727, 'AUC PR': 0.592038, 'CLL': -0.688614, 'Precision': [0.595694, 0.5], 'Recall': 0.905455, 'F1': 0.718615, 'Learning time': 3.5580000000000003, 'Inference time': 0.727, 'parameter_10': {'AUC ROC': 0.614727, 'AUC PR': 0.592038, 'CLL': -0.688614, 'Precision': [0.595694, 0.5], 'Recall': 0.905455, 'F1': 0.718615, 'Learning time': 0.901, 'Inference time': 0.727}}


Amount of data: 15
******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.8581489350995122;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return 0.2581489350995123;  // std dev = 2.449, 25.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=10 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.7194734122109545;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return 0.22373365448410582;  // std dev = 2.449, 25.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=10 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.5553664367462845;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return 0.1888683221574971;  // std dev = 2.449, 25.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=10 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.4175135841583099;  // std dev = 1.49e-08, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return 0.15570029437174387;  // std dev = 2.449, 25.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=10 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.32071184716014967;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return 0.1258262822937211;  // std dev = 2.449, 25.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=10 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.25517224256948945;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return 0.1000891691788054;  // std dev = 2.449, 25.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=10 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.20975771563253556;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return 0.07866279780602582;  // std dev = 2.449, 25.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=10 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.17709649774527736;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return 0.06127260860742249;  // std dev = 2.449, 25.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=10 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.15274385809367097;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return 0.04741549148811444;  // std dev = 2.449, 25.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=10 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.13400703000801117;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return 0.036517889972878886;  // std dev = 2.449, 25.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=10 */


Results
   AUC ROC   = 0.574545
   AUC PR    = 0.655418
   CLL	      = -0.672205
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.149091
   F1        = 0.259494


Total learning time: 0.917 seconds
Total inference time: 0.708 seconds
AUC ROC: 0.574545


Results scoring model
   AUC ROC   = 0.666667
   AUC PR    = 0.744924
   CLL	      = -0.583386
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.333333
   F1        = 0.5


Total scoring time: 0.685 seconds
Parameter learned model CLL: -0.583386


Structure after Parameter Learning
[['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 5], 'false': [2.449, 15, 10]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 5], 'false': [2.449, 15, 10]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 5], 'false': [2.449, 15, 10]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [1.49e-08, 0, 5], 'false': [2.449, 15, 10]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 5], 'false': [2.449, 15, 10]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 5], 'false': [2.449, 15, 10]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 5], 'false': [2.449, 15, 10]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 5], 'false': [2.449, 15, 10]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 5], 'false': [2.449, 15, 10]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 5], 'false': [2.449, 15, 10]}]]
[{'': [0.0, 0.24000000000000005]}, {'': [0.0, 0.24000000000000024]}, {'': [-4.4408920985006264e-17, 0.24000000000000005]}, {'': [4.4408920985006264e-17, 0.24000000000000013]}, {'': [-2.2204460492503132e-17, 0.23999999999999982]}, {'': [0.0, 0.2399999999999998]}, {'': [-5.551115123125783e-18, 0.23999999999999996]}, {'': [0.0, 0.23999999999999988]}, {'': [0.0, 0.23999999999999988]}, {'': [0.0, 0.24]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
1;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
2;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
3;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
4;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
5;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
6;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
7;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
8;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
9;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.8581489350995122;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.3343394112899885;  // std dev = 0.499, 21.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=10 */
%   | else return -0.14185106490048777;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.7194734122109545;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.28858739689073243;  // std dev = 0.499, 21.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=10 */
%   | else return -0.12544463852839138;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.5553664367462845;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.2406116240341722;  // std dev = 0.499, 21.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=10 */
%   | else return -0.11231637819360639;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.4175135841583099;  // std dev = 1.49e-08, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.19457483298384468;  // std dev = 0.499, 21.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=10 */
%   | else return -0.10159632948783628;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.32071184716014967;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.15359877152831786;  // std dev = 0.499, 21.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=10 */
%   | else return -0.09269127618926096;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.25517224256948945;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.11916270481716036;  // std dev = 0.499, 21.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=10 */
%   | else return -0.08518475138839687;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.20975771563253556;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.09136717210389952;  // std dev = 0.499, 21.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=10 */
%   | else return -0.07877675473109173;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.17709649774527736;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.06952274321783654;  // std dev = 0.499, 21.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=10 */
%   | else return -0.07324622576333704;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.15274385809367097;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.052644946262454;  // std dev = 0.499, 21.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=10 */
%   | else return -0.06842697784420272;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.13400703000801117;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.03974248258629829;  // std dev = 0.499, 21.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=10 */
%   | else return -0.0641918400820262;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */


Results
   AUC ROC   = 0.66512
   AUC PR    = 0.704679
   CLL	      = -0.668436
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.149091
   F1        = 0.259494


Total learning time: 2.38 seconds
Total inference time: 0.779 seconds
AUC ROC: 0.66512


Results scoring model
   AUC ROC   = 0.755556
   AUC PR    = 0.789027
   CLL	      = -0.515142
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.333333
   F1        = 0.5


Total scoring time: 0.675 seconds
Refined model CLL: -0.515142


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.66512
   AUC PR    = 0.704679
   CLL	      = -0.668436
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.149091
   F1        = 0.259494


Total learning time: 4.657 seconds
Total inference time: 0.779 seconds
AUC ROC: 0.66512
Total revision time: 4.657
Best scored revision CLL: -0.515142


Dataset: 3_imdb_cora, Fold: 5, Type: Transfer (trRDN-B), Time: 00:11:41
{'AUC ROC': 0.66512, 'AUC PR': 0.704679, 'CLL': -0.668436, 'Precision': [1.0, 0.5], 'Recall': 0.149091, 'F1': 0.259494, 'Learning time': 4.657, 'Inference time': 0.779, 'parameter_15': {'AUC ROC': 0.574545, 'AUC PR': 0.655418, 'CLL': -0.672205, 'Precision': [1.0, 0.5], 'Recall': 0.149091, 'F1': 0.259494, 'Learning time': 0.917, 'Inference time': 0.708}}


Amount of data: 20
******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.8581489350995122;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return 0.28672036367094095;  // std dev = 2.928, 35.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=15 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.7194734122109545;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return 0.24811816884741356;  // std dev = 2.928, 35.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=15 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.5553664367462845;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return 0.20848477447886862;  // std dev = 2.928, 35.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=15 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.4175135841583099;  // std dev = 1.49e-08, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return 0.17062637354018517;  // std dev = 2.928, 35.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=15 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.32071184716014967;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return 0.1366458537535223;  // std dev = 2.928, 35.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=15 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.25517224256948945;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return 0.10762034996184425;  // std dev = 2.928, 35.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=15 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.20975771563253556;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return 0.08372807955323847;  // std dev = 2.928, 35.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=15 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.17709649774527736;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return 0.06457405393631668;  // std dev = 2.928, 35.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=15 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.15274385809367097;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return 0.04949778322519463;  // std dev = 2.928, 35.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=15 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.13400703000801117;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return 0.037779403633540945;  // std dev = 2.928, 35.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=15 */


Results
   AUC ROC   = 0.574545
   AUC PR    = 0.655418
   CLL	      = -0.661624
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.149091
   F1        = 0.259494


Total learning time: 0.967 seconds
Total inference time: 0.759 seconds
AUC ROC: 0.574545


Results scoring model
   AUC ROC   = 0.625
   AUC PR    = 0.699813
   CLL	      = -0.614907
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.25
   F1        = 0.4


Total scoring time: 0.675 seconds
Parameter learned model CLL: -0.614907


Structure after Parameter Learning
[['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 5], 'false': [2.928, 20, 15]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 5], 'false': [2.928, 20, 15]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 5], 'false': [2.928, 20, 15]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [1.49e-08, 0, 5], 'false': [2.928, 20, 15]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 5], 'false': [2.928, 20, 15]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 5], 'false': [2.928, 20, 15]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 5], 'false': [2.928, 20, 15]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 5], 'false': [2.928, 20, 15]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 5], 'false': [2.928, 20, 15]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 5], 'false': [2.928, 20, 15]}]]
[{'': [0.0, 0.244897959183673]}, {'': [0.0, 0.24489795918367285]}, {'': [-4.4408920985006264e-17, 0.2448979591836731]}, {'': [4.4408920985006264e-17, 0.24489795918367346]}, {'': [-2.2204460492503132e-17, 0.24489795918367316]}, {'': [0.0, 0.24489795918367335]}, {'': [-5.551115123125783e-18, 0.24489795918367357]}, {'': [0.0, 0.2448979591836733]}, {'': [0.0, 0.24489795918367366]}, {'': [0.0, 0.24489795918367346]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
1;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
2;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
3;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
4;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
5;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
6;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
7;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
8;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
9;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.8581489350995122;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then return 0.5248156017661788;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return 0.32243464938522665;  // std dev = 0.499, 28.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=13 */
%   | else return -0.14185106490048777;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.7194734122109545;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then return 0.448295606241962;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return 0.27849027391233155;  // std dev = 0.499, 28.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=13 */
%   | else return -0.12544463852839138;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.5553664367462845;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then return 0.36236334632262296;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return 0.2326459182080262;  // std dev = 0.499, 28.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=13 */
%   | else return -0.11231637819360639;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.4175135841583099;  // std dev = 1.49e-08, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.1976020207304567;  // std dev = 0.497, 31.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=15 */
%   | else return -0.10159632948783628;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.32071184716014967;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.1558223186605021;  // std dev = 0.497, 31.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=15 */
%   | else return -0.09269127618926096;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.25517224256948945;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.12079891795754882;  // std dev = 0.497, 31.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=15 */
%   | else return -0.08518475138839687;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.20975771563253556;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then return 0.16424223274782515;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return 0.08491166271400706;  // std dev = 0.499, 28.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=13 */
%   | else return -0.07877675473109173;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.17709649774527736;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then return 0.12329096195194549;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return 0.06472462515851969;  // std dev = 0.499, 28.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=13 */
%   | else return -0.07324622576333704;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.15274385809367097;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.05333908851213106;  // std dev = 0.496, 31.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=15 */
%   | else return -0.06842697784420272;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.13400703000801117;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then return 0.07991084805336483;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return 0.03609345651129969;  // std dev = 0.499, 28.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=13 */
%   | else return -0.0641918400820262;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */


Results
   AUC ROC   = 0.656422
   AUC PR    = 0.693112
   CLL	      = -0.674448
   Precision = 0.773723 at threshold = 0.5
   Recall    = 0.192727
   F1        = 0.308588


Total learning time: 3.204 seconds
Total inference time: 0.836 seconds
AUC ROC: 0.656422


Results scoring model
   AUC ROC   = 0.72125
   AUC PR    = 0.759974
   CLL	      = -0.554896
   Precision = 0.875 at threshold = 0.5
   Recall    = 0.35
   F1        = 0.5


Total scoring time: 0.749 seconds
Refined model CLL: -0.554896


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.656422
   AUC PR    = 0.693112
   CLL	      = -0.674448
   Precision = 0.773723 at threshold = 0.5
   Recall    = 0.192727
   F1        = 0.308588


Total learning time: 5.595 seconds
Total inference time: 0.836 seconds
AUC ROC: 0.656422
Total revision time: 5.595
Best scored revision CLL: -0.554896


Dataset: 3_imdb_cora, Fold: 5, Type: Transfer (trRDN-B), Time: 00:11:49
{'AUC ROC': 0.656422, 'AUC PR': 0.693112, 'CLL': -0.674448, 'Precision': [0.773723, 0.5], 'Recall': 0.192727, 'F1': 0.308588, 'Learning time': 5.595, 'Inference time': 0.836, 'parameter_20': {'AUC ROC': 0.574545, 'AUC PR': 0.655418, 'CLL': -0.661624, 'Precision': [1.0, 0.5], 'Recall': 0.149091, 'F1': 0.259494, 'Learning time': 0.967, 'Inference time': 0.759}}


Amount of data: 25
******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.8581489350995122;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return 0.30259337954395643;  // std dev = 3.333, 45.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=20 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.7194734122109545;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return 0.26163180867521296;  // std dev = 3.333, 45.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=20 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.5553664367462845;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return 0.2192721473492705;  // std dev = 3.333, 45.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=20 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.4175135841583099;  // std dev = 1.49e-08, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return 0.1787352457468729;  // std dev = 3.333, 45.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=20 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.32071184716014967;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return 0.14243924477676323;  // std dev = 3.333, 45.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=20 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.25517224256948945;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return 0.11159559999632924;  // std dev = 3.333, 45.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=20 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.20975771563253556;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return 0.08637026299843586;  // std dev = 3.333, 45.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=20 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.17709649774527736;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return 0.06628370899125421;  // std dev = 3.333, 45.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=20 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.15274385809367097;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return 0.05057564362187412;  // std dev = 3.333, 45.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=20 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.13400703000801117;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return 0.03843884907512935;  // std dev = 3.333, 45.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=20 */


Results
   AUC ROC   = 0.574545
   AUC PR    = 0.655418
   CLL	      = -0.657134
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.149091
   F1        = 0.259494


Total learning time: 0.936 seconds
Total inference time: 0.707 seconds
AUC ROC: 0.574545


Results scoring model
   AUC ROC   = 0.6
   AUC PR    = 0.670073
   CLL	      = -0.632522
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.2
   F1        = 0.333333


Total scoring time: 0.683 seconds
Parameter learned model CLL: -0.632522


Structure after Parameter Learning
[['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 5], 'false': [3.333, 25, 20]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 5], 'false': [3.333, 25, 20]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 5], 'false': [3.333, 25, 20]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [1.49e-08, 0, 5], 'false': [3.333, 25, 20]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 5], 'false': [3.333, 25, 20]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 5], 'false': [3.333, 25, 20]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 5], 'false': [3.333, 25, 20]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 5], 'false': [3.333, 25, 20]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 5], 'false': [3.333, 25, 20]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 5], 'false': [3.333, 25, 20]}]]
[{'': [0.0, 0.2469135802469133]}, {'': [0.0, 0.24691358024691287]}, {'': [-4.4408920985006264e-17, 0.24691358024691334]}, {'': [4.4408920985006264e-17, 0.24691358024691293]}, {'': [-2.2204460492503132e-17, 0.24691358024691365]}, {'': [0.0, 0.24691358024691348]}, {'': [-5.551115123125783e-18, 0.24691358024691382]}, {'': [0.0, 0.2469135802469139]}, {'': [0.0, 0.24691358024691354]}, {'': [0.0, 0.24691358024691348]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
1;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
2;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
3;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
4;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
5;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
6;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
7;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
8;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
9;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.8581489350995122;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.34595381314829243;  // std dev = 0.500, 41.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=20 */
%   | else return -0.14185106490048777;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.7194734122109545;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then return 0.3106203651257782;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else return 0.2971068516122651;  // std dev = 0.500, 37.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=18 */
%   | else return -0.12544463852839138;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.5553664367462845;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.2483402227946656;  // std dev = 0.500, 41.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=20 */
%   | else return -0.11231637819360639;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.4175135841583099;  // std dev = 1.49e-08, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.20024757166475682;  // std dev = 0.500, 41.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=20 */
%   | else return -0.10159632948783628;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.32071184716014967;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then return 0.167042304432095;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else return 0.15652329480400756;  // std dev = 0.500, 37.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=18 */
%   | else return -0.09269127618926096;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.25517224256948945;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then return 0.12896885274432512;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else return 0.12104614042513498;  // std dev = 0.500, 37.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=18 */
%   | else return -0.08518475138839687;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.20975771563253556;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then return 0.09840577044243502;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else return 0.09254689902934428;  // std dev = 0.500, 37.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=18 */
%   | else return -0.07877675473109173;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.17709649774527736;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then return 0.07454545489218246;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else return 0.07024825639400395;  // std dev = 0.500, 37.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=18 */
%   | else return -0.07324622576333704;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.15274385809367097;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then return 0.05623004373333741;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else return 0.05308512405355196;  // std dev = 0.500, 37.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=18 */
%   | else return -0.06842697784420272;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.13400703000801117;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.040230893272005394;  // std dev = 0.500, 41.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=20 */
%   | else return -0.0641918400820262;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */


Results
   AUC ROC   = 0.656422
   AUC PR    = 0.693112
   CLL	      = -0.665529
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.149091
   F1        = 0.259494


Total learning time: 3.624 seconds
Total inference time: 0.91 seconds
AUC ROC: 0.656422


Results scoring model
   AUC ROC   = 0.6656
   AUC PR    = 0.703551
   CLL	      = -0.5873
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.2
   F1        = 0.333333


Total scoring time: 0.763 seconds
Refined model CLL: -0.5873


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.656422
   AUC PR    = 0.693112
   CLL	      = -0.665529
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.149091
   F1        = 0.259494


Total learning time: 6.006 seconds
Total inference time: 0.91 seconds
AUC ROC: 0.656422
Total revision time: 6.006
Best scored revision CLL: -0.5873


Dataset: 3_imdb_cora, Fold: 5, Type: Transfer (trRDN-B), Time: 00:11:57
{'AUC ROC': 0.656422, 'AUC PR': 0.693112, 'CLL': -0.665529, 'Precision': [1.0, 0.5], 'Recall': 0.149091, 'F1': 0.259494, 'Learning time': 6.006, 'Inference time': 0.91, 'parameter_25': {'AUC ROC': 0.574545, 'AUC PR': 0.655418, 'CLL': -0.657134, 'Precision': [1.0, 0.5], 'Recall': 0.149091, 'F1': 0.259494, 'Learning time': 0.936, 'Inference time': 0.707}}


Starting fold 1

Target train facts examples: 35095
Target train pos examples: 2649
Target train neg examples: 4334

Target test facts examples: 7463
Target test pos	 examples: 368
Target test neg examples: 688

Amount of data: 5
******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.3581489350995123;  // std dev = 1.581, 10.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.30874113578563506;  // std dev = 1.581, 10.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.2564123687585864;  // std dev = 1.581, 10.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.20613740734453975;  // std dev = 1.581, 10.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.16162857548414675;  // std dev = 1.581, 10.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.1245559779208197;  // std dev = 1.581, 10.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.09492800936730683;  // std dev = 1.581, 10.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.07186088850055855;  // std dev = 1.581, 10.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.05418307375954949;  // std dev = 1.581, 10.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.04076025323305626;  // std dev = 1.581, 10.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */


Results
   AUC ROC   = 0.369565
   AUC PR    = 0.292101
   CLL	      = -0.785228
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 0.903 seconds
Total inference time: 0.697 seconds
AUC ROC: 0.369565


Results scoring model
   AUC ROC   = 0.5
   AUC PR    = 0.5
   CLL	      = -0.695026
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total scoring time: 0.647 seconds
Parameter learned model CLL: -0.695026


Structure after Parameter Learning
[['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 0], 'false': [1.581, 5, 5]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 0], 'false': [1.581, 5, 5]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 0], 'false': [1.581, 5, 5]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 0], 'false': [1.581, 5, 5]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 0], 'false': [1.581, 5, 5]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 0], 'false': [1.581, 5, 5]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 0], 'false': [1.581, 5, 5]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 0], 'false': [1.581, 5, 5]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 0], 'false': [1.581, 5, 5]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 0], 'false': [1.581, 5, 5]}]]
[{'': [nan, 0.24999999999999983]}, {'': [nan, 0.24999999999999994]}, {'': [nan, 0.25000000000000006]}, {'': [nan, 0.24999999999999992]}, {'': [nan, 0.24999999999999994]}, {'': [nan, 0.24999999999999986]}, {'': [nan, 0.25]}, {'': [nan, 0.25000000000000006]}, {'': [nan, 0.25]}, {'': [nan, 0.24999999999999994]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Pruning resulted in null theory

Candidate for revision
0;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
1;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
2;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
3;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
4;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
5;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
6;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
7;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
8;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
9;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.3581489350995123;  // std dev = 0.500, 10.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.30874113578563506;  // std dev = 0.500, 10.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.2564123687585864;  // std dev = 0.500, 10.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.20613740734453975;  // std dev = 0.500, 10.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.16162857548414675;  // std dev = 0.500, 10.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.1245559779208197;  // std dev = 0.500, 10.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.09492800936730683;  // std dev = 0.500, 10.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.07186088850055855;  // std dev = 0.500, 10.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.05418307375954949;  // std dev = 0.500, 10.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.04076025323305626;  // std dev = 0.500, 10.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */


Results
   AUC ROC   = 0.369565
   AUC PR    = 0.292101
   CLL	      = -0.785228
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 1.293 seconds
Total inference time: 0.708 seconds
AUC ROC: 0.369565


Results scoring model
   AUC ROC   = 0.5
   AUC PR    = 0.5
   CLL	      = -0.695026
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total scoring time: 0.668 seconds
Refined model CLL: -0.695026


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.369565
   AUC PR    = 0.292101
   CLL	      = -0.785228
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 3.511 seconds
Total inference time: 0.697 seconds
AUC ROC: 0.369565
Total revision time: 3.511
Best scored revision CLL: -0.695026


Dataset: 3_imdb_cora, Fold: 1, Type: Transfer (trRDN-B), Time: 00:12:02
{'AUC ROC': 0.369565, 'AUC PR': 0.292101, 'CLL': -0.785228, 'Precision': [nan, 0.5], 'Recall': 0.0, 'F1': nan, 'Learning time': 3.511, 'Inference time': 0.697, 'parameter_5': {'AUC ROC': 0.369565, 'AUC PR': 0.292101, 'CLL': -0.785228, 'Precision': [nan, 0.5], 'Recall': 0.0, 'F1': nan, 'Learning time': 0.903, 'Inference time': 0.697}}


Amount of data: 10
******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.3581489350995123;  // std dev = 2.236, 20.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=10 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.3087411357856348;  // std dev = 2.236, 20.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=10 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.2564123687585864;  // std dev = 2.236, 20.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=10 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.20613740734453953;  // std dev = 2.236, 20.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=10 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.16162857548414683;  // std dev = 2.236, 20.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=10 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.12455597792081981;  // std dev = 2.236, 20.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=10 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.09492800936730669;  // std dev = 2.236, 20.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=10 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.07186088850055856;  // std dev = 2.236, 20.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=10 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.054183073759549595;  // std dev = 2.236, 20.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=10 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.040760253233056355;  // std dev = 2.236, 20.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=10 */


Results
   AUC ROC   = 0.369565
   AUC PR    = 0.292101
   CLL	      = -0.785228
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 0.889 seconds
Total inference time: 0.729 seconds
AUC ROC: 0.369565


Results scoring model
   AUC ROC   = 0.5
   AUC PR    = 0.5
   CLL	      = -0.695026
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total scoring time: 0.652 seconds
Parameter learned model CLL: -0.695026


Structure after Parameter Learning
[['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 0], 'false': [2.236, 10, 10]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 0], 'false': [2.236, 10, 10]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 0], 'false': [2.236, 10, 10]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 0], 'false': [2.236, 10, 10]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 0], 'false': [2.236, 10, 10]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 0], 'false': [2.236, 10, 10]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 0], 'false': [2.236, 10, 10]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 0], 'false': [2.236, 10, 10]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 0], 'false': [2.236, 10, 10]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 0], 'false': [2.236, 10, 10]}]]
[{'': [nan, 0.25]}, {'': [nan, 0.2500000000000001]}, {'': [nan, 0.25000000000000006]}, {'': [nan, 0.2500000000000002]}, {'': [nan, 0.24999999999999978]}, {'': [nan, 0.24999999999999994]}, {'': [nan, 0.25000000000000017]}, {'': [nan, 0.2500000000000001]}, {'': [nan, 0.24999999999999994]}, {'': [nan, 0.24999999999999994]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Pruning resulted in null theory

Candidate for revision
0;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
1;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
2;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
3;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
4;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
5;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
6;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
7;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
8;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
9;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.3581489350995123;  // std dev = 0.500, 20.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=10 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.3087411357856348;  // std dev = 0.500, 20.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=10 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.2564123687585864;  // std dev = 0.500, 20.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=10 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.20613740734453953;  // std dev = 0.500, 20.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=10 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.16162857548414683;  // std dev = 0.500, 20.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=10 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.12455597792081981;  // std dev = 0.500, 20.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=10 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.09492800936730669;  // std dev = 0.500, 20.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=10 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.07186088850055856;  // std dev = 0.500, 20.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=10 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.054183073759549595;  // std dev = 0.500, 20.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=10 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.040760253233056355;  // std dev = 0.500, 20.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=10 */


Results
   AUC ROC   = 0.369565
   AUC PR    = 0.292101
   CLL	      = -0.785228
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 1.282 seconds
Total inference time: 0.722 seconds
AUC ROC: 0.369565


Results scoring model
   AUC ROC   = 0.5
   AUC PR    = 0.5
   CLL	      = -0.695026
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total scoring time: 0.646 seconds
Refined model CLL: -0.695026


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.369565
   AUC PR    = 0.292101
   CLL	      = -0.785228
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 3.469 seconds
Total inference time: 0.729 seconds
AUC ROC: 0.369565
Total revision time: 3.469
Best scored revision CLL: -0.695026


Dataset: 3_imdb_cora, Fold: 1, Type: Transfer (trRDN-B), Time: 00:12:08
{'AUC ROC': 0.369565, 'AUC PR': 0.292101, 'CLL': -0.785228, 'Precision': [nan, 0.5], 'Recall': 0.0, 'F1': nan, 'Learning time': 3.469, 'Inference time': 0.729, 'parameter_10': {'AUC ROC': 0.369565, 'AUC PR': 0.292101, 'CLL': -0.785228, 'Precision': [nan, 0.5], 'Recall': 0.0, 'F1': nan, 'Learning time': 0.889, 'Inference time': 0.729}}


Amount of data: 15
******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.41370449065506787;  // std dev = 2.582, 27.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=15 */
%   else return -0.14185106490048777;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.3555557392714985;  // std dev = 2.582, 27.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=15 */
%   else return -0.12544463852839138;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.29261484610968785;  // std dev = 2.582, 27.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=15 */
%   else return -0.11231637819360639;  // std dev = 2.63e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.23214124828648158;  // std dev = 2.582, 27.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=15 */
%   else return -0.1015963294878363;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.17942003892665268;  // std dev = 2.582, 27.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=15 */
%   else return -0.09269127618926094;  // std dev = 2.63e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.13647857812921962;  // std dev = 2.582, 27.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=15 */
%   else return -0.08518475138839687;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.10293424750437853;  // std dev = 2.582, 27.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=15 */
%   else return -0.07877675473109173;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.07732947852152011;  // std dev = 2.582, 27.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=15 */
%   else return -0.07324622576333704;  // std dev = 1.86e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.05801086896812466;  // std dev = 2.582, 27.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=15 */
%   else return -0.06842697784420272;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.04351050232227124;  // std dev = 2.582, 27.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=15 */
%   else return -0.0641918400820262;  // std dev = 1.32e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */


Results
   AUC ROC   = 0.57476
   AUC PR    = 0.387492
   CLL	      = -0.660631
   Precision = 0.388764 at threshold = 0.5
   Recall    = 0.940217
   F1        = 0.550079


Total learning time: 0.935 seconds
Total inference time: 0.699 seconds
AUC ROC: 0.57476


Results scoring model
   AUC ROC   = 0.6
   AUC PR    = 0.555556
   CLL	      = -0.626428
   Precision = 0.555556 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.714286


Total scoring time: 0.674 seconds
Parameter learned model CLL: -0.626428


Structure after Parameter Learning
[['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [2.582, 12, 15], 'false': [0.0, 3, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [2.582, 12, 15], 'false': [0.0, 3, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [2.582, 12, 15], 'false': [2.63e-09, 3, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [2.582, 12, 15], 'false': [0.0, 3, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [2.582, 12, 15], 'false': [2.63e-09, 3, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [2.582, 12, 15], 'false': [0.0, 3, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [2.582, 12, 15], 'false': [0.0, 3, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [2.582, 12, 15], 'false': [1.86e-09, 3, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [2.582, 12, 15], 'false': [0.0, 3, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [2.582, 12, 15], 'false': [1.32e-09, 3, 0]}]]
[{'': [0.24691358024691312, 0.0]}, {'': [0.24691358024691415, 0.0]}, {'': [0.24691358024691415, 2.3129646346357427e-18]}, {'': [0.24691358024691343, -1.1564823173178713e-18]}, {'': [0.24691358024691337, 2.3129646346357427e-18]}, {'': [0.24691358024691348, 0.0]}, {'': [0.24691358024691346, 0.0]}, {'': [0.24691358024691365, 1.1564823173178713e-18]}, {'': [0.24691358024691348, -5.782411586589357e-19]}, {'': [0.24691358024691354, 5.782411586589357e-19]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.41370449065506787;  // std dev = 0.497, 27.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=15 */
%   else return -0.14185106490048777;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.3555557392714985;  // std dev = 0.497, 27.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=15 */
%   else return -0.12544463852839138;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.29261484610968785;  // std dev = 0.497, 27.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=15 */
%   else return -0.11231637819360639;  // std dev = 2.63e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.23214124828648158;  // std dev = 0.497, 27.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=15 */
%   else return -0.1015963294878363;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.17942003892665268;  // std dev = 0.497, 27.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=15 */
%   else return -0.09269127618926094;  // std dev = 2.63e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.13647857812921962;  // std dev = 0.497, 27.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=15 */
%   else return -0.08518475138839687;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.10293424750437853;  // std dev = 0.497, 27.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=15 */
%   else return -0.07877675473109173;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.07732947852152011;  // std dev = 0.497, 27.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=15 */
%   else return -0.07324622576333704;  // std dev = 1.86e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.05801086896812466;  // std dev = 0.497, 27.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=15 */
%   else return -0.06842697784420272;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.04351050232227124;  // std dev = 0.497, 27.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=15 */
%   else return -0.0641918400820262;  // std dev = 1.32e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */


Results
   AUC ROC   = 0.57476
   AUC PR    = 0.387492
   CLL	      = -0.660631
   Precision = 0.388764 at threshold = 0.5
   Recall    = 0.940217
   F1        = 0.550079


Total learning time: 1.562 seconds
Total inference time: 0.697 seconds
AUC ROC: 0.57476


Results scoring model
   AUC ROC   = 0.6
   AUC PR    = 0.555556
   CLL	      = -0.626428
   Precision = 0.555556 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.714286


Total scoring time: 0.673 seconds
Refined model CLL: -0.626428


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.57476
   AUC PR    = 0.387492
   CLL	      = -0.660631
   Precision = 0.388764 at threshold = 0.5
   Recall    = 0.940217
   F1        = 0.550079


Total learning time: 3.8440000000000003 seconds
Total inference time: 0.699 seconds
AUC ROC: 0.57476
Total revision time: 3.8440000000000003
Best scored revision CLL: -0.626428


Dataset: 3_imdb_cora, Fold: 1, Type: Transfer (trRDN-B), Time: 00:12:14
{'AUC ROC': 0.57476, 'AUC PR': 0.387492, 'CLL': -0.660631, 'Precision': [0.388764, 0.5], 'Recall': 0.940217, 'F1': 0.550079, 'Learning time': 3.8440000000000003, 'Inference time': 0.699, 'parameter_15': {'AUC ROC': 0.57476, 'AUC PR': 0.387492, 'CLL': -0.660631, 'Precision': [0.388764, 0.5], 'Recall': 0.940217, 'F1': 0.550079, 'Learning time': 0.935, 'Inference time': 0.699}}


Amount of data: 20
******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.8581489350995121;  // std dev = 2.11e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return 0.31760839455897183;  // std dev = 3.031, 37.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=17 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.7194734122109545;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return 0.2743930062984994;  // std dev = 3.031, 37.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=17 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.5553664367462845;  // std dev = 1.05e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return 0.22940409212560184;  // std dev = 3.031, 37.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=17 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.41751358415830997;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return 0.18628870627050972;  // std dev = 3.031, 37.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=17 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.32071184716014967;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return 0.14778567561990727;  // std dev = 3.031, 37.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=17 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.25517224256948945;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return 0.11523398454885339;  // std dev = 3.031, 37.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=17 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.20975771563253554;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return 0.08877605966596111;  // std dev = 3.031, 37.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=17 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.17709649774527736;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return 0.06784002556264199;  // std dev = 3.031, 37.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=17 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.15274385809367097;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return 0.05156345950024885;  // std dev = 3.031, 37.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=17 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.13400703000801117;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return 0.03905337379799511;  // std dev = 3.031, 37.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=17 */


Results
   AUC ROC   = 0.630435
   AUC PR    = 0.597315
   CLL	      = -0.595127
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.26087
   F1        = 0.413793


Total learning time: 0.967 seconds
Total inference time: 0.715 seconds
AUC ROC: 0.630435


Results scoring model
   AUC ROC   = 0.575
   AUC PR    = 0.638591
   CLL	      = -0.649272
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.15
   F1        = 0.26087


Total scoring time: 0.666 seconds
Parameter learned model CLL: -0.649272


Structure after Parameter Learning
[['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [2.11e-08, 0, 3], 'false': [3.031, 20, 17]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 3], 'false': [3.031, 20, 17]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [1.05e-08, 0, 3], 'false': [3.031, 20, 17]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 3], 'false': [3.031, 20, 17]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 3], 'false': [3.031, 20, 17]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 3], 'false': [3.031, 20, 17]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 3], 'false': [3.031, 20, 17]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 3], 'false': [3.031, 20, 17]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 3], 'false': [3.031, 20, 17]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 3], 'false': [3.031, 20, 17]}]]
[{'': [1.4802973661668753e-16, 0.24835646457268032]}, {'': [0.0, 0.24835646457268137]}, {'': [3.700743415417188e-17, 0.2483564645726806]}, {'': [-3.700743415417188e-17, 0.24835646457268118]}, {'': [0.0, 0.24835646457268037]}, {'': [0.0, 0.24835646457268085]}, {'': [0.0, 0.24835646457268098]}, {'': [0.0, 0.24835646457268104]}, {'': [-4.625929269271485e-18, 0.2483564645726807]}, {'': [-2.3129646346357427e-18, 0.24835646457268074]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
1;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
2;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
3;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
4;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
5;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
6;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
7;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
8;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
9;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.8581489350995121;  // std dev = 2.11e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.35814893509951234;  // std dev = 0.500, 34.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=17 */
%   | else return -0.14185106490048777;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.7194734122109545;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.3087411357856347;  // std dev = 0.500, 34.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=17 */
%   | else return -0.12544463852839138;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.5553664367462845;  // std dev = 1.05e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.25641236875858675;  // std dev = 0.500, 34.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=17 */
%   | else return -0.11231637819360639;  // std dev = 2.63e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.41751358415830997;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.20613740734453997;  // std dev = 0.500, 34.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=17 */
%   | else return -0.1015963294878363;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.32071184716014967;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.16162857548414647;  // std dev = 0.500, 34.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=17 */
%   | else return -0.09269127618926094;  // std dev = 2.63e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.25517224256948945;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.12455597792081956;  // std dev = 0.500, 34.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=17 */
%   | else return -0.08518475138839687;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.20975771563253554;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.09492800936730651;  // std dev = 0.500, 34.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=17 */
%   | else return -0.07877675473109173;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.17709649774527736;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.07186088850055873;  // std dev = 0.500, 34.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=17 */
%   | else return -0.07324622576333704;  // std dev = 1.86e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.15274385809367097;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.054183073759549505;  // std dev = 0.500, 34.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=17 */
%   | else return -0.06842697784420272;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.13400703000801117;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( haswordvenue(B, D), haswordtitle(E, D) )
%   | then return 0.022967544606142098;  // std dev = 0.493, 34.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=16 */
%   | else return 0.13745885768966792;  // std dev = 0.494, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */


Results
   AUC ROC   = 0.676528
   AUC PR    = 0.619703
   CLL	      = -0.580869
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.26087
   F1        = 0.413793


Total learning time: 3.475 seconds
Total inference time: 0.774 seconds
AUC ROC: 0.676528


Results scoring model
   AUC ROC   = 0.66
   AUC PR    = 0.700075
   CLL	      = -0.604782
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.15
   F1        = 0.26087


Total scoring time: 0.679 seconds
Refined model CLL: -0.604782


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.676528
   AUC PR    = 0.619703
   CLL	      = -0.580869
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.26087
   F1        = 0.413793


Total learning time: 5.787000000000001 seconds
Total inference time: 0.774 seconds
AUC ROC: 0.676528
Total revision time: 5.787000000000001
Best scored revision CLL: -0.604782


Dataset: 3_imdb_cora, Fold: 1, Type: Transfer (trRDN-B), Time: 00:12:22
{'AUC ROC': 0.676528, 'AUC PR': 0.619703, 'CLL': -0.580869, 'Precision': [1.0, 0.5], 'Recall': 0.26087, 'F1': 0.413793, 'Learning time': 5.787000000000001, 'Inference time': 0.774, 'parameter_20': {'AUC ROC': 0.630435, 'AUC PR': 0.597315, 'CLL': -0.595127, 'Precision': [1.0, 0.5], 'Recall': 0.26087, 'F1': 0.413793, 'Learning time': 0.967, 'Inference time': 0.715}}


Amount of data: 25
******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.8581489350995122;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else return 0.31467067422994655;  // std dev = 3.378, 46.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=21 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.7194734122109545;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else return 0.2718979338779211;  // std dev = 3.378, 46.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=21 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.5553664367462845;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else return 0.22742727023532366;  // std dev = 3.378, 46.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=21 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.41751358415830997;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else return 0.18481967858369794;  // std dev = 3.378, 46.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=21 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.32071184716014967;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else return 0.14674952708917505;  // std dev = 3.378, 46.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=21 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.25517224256948945;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else return 0.11453090292473048;  // std dev = 3.378, 46.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=21 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.20975771563253554;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else return 0.08831182757523444;  // std dev = 3.378, 46.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=21 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.17709649774527736;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else return 0.06753946269031201;  // std dev = 3.378, 46.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=21 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.15274385809367097;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else return 0.05137193645873037;  // std dev = 3.378, 46.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=21 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.13400703000801117;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else return 0.03893324925844389;  // std dev = 3.378, 46.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=21 */


Results
   AUC ROC   = 0.630435
   AUC PR    = 0.597315
   CLL	      = -0.593584
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.26087
   F1        = 0.413793


Total learning time: 0.982 seconds
Total inference time: 0.682 seconds
AUC ROC: 0.630435


Results scoring model
   AUC ROC   = 0.58
   AUC PR    = 0.644703
   CLL	      = -0.645987
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.16
   F1        = 0.275862


Total scoring time: 0.724 seconds
Parameter learned model CLL: -0.645987


Structure after Parameter Learning
[['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 4], 'false': [3.378, 25, 21]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 4], 'false': [3.378, 25, 21]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 4], 'false': [3.378, 25, 21]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 4], 'false': [3.378, 25, 21]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 4], 'false': [3.378, 25, 21]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 4], 'false': [3.378, 25, 21]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 4], 'false': [3.378, 25, 21]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 4], 'false': [3.378, 25, 21]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 4], 'false': [3.378, 25, 21]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 4], 'false': [3.378, 25, 21]}]]
[{'': [0.0, 0.2481096408317579]}, {'': [0.0, 0.2481096408317583]}, {'': [0.0, 0.24810964083175807]}, {'': [0.0, 0.24810964083175777]}, {'': [0.0, 0.24810964083175846]}, {'': [0.0, 0.24810964083175827]}, {'': [0.0, 0.24810964083175777]}, {'': [0.0, 0.2481096408317585]}, {'': [0.0, 0.248109640831758]}, {'': [0.0, 0.24810964083175827]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
1;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
2;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
3;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
4;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
5;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
6;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
7;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
8;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
9;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.8581489350995122;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.3581489350995117;  // std dev = 0.500, 42.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=21 */
%   | else return -0.14185106490048777;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.7194734122109545;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.3087411357856348;  // std dev = 0.500, 42.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=21 */
%   | else return -0.12544463852839138;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.5553664367462845;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.2564123687585871;  // std dev = 0.500, 42.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=21 */
%   | else return -0.11231637819360639;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.41751358415830997;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.2061374073445401;  // std dev = 0.500, 42.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=21 */
%   | else return -0.10159632948783628;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.32071184716014967;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.16162857548414633;  // std dev = 0.500, 42.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=21 */
%   | else return -0.09269127618926096;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.25517224256948945;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.12455597792081938;  // std dev = 0.500, 42.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=21 */
%   | else return -0.08518475138839687;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.20975771563253554;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.0949280093673068;  // std dev = 0.500, 42.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=21 */
%   | else return -0.07877675473109173;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.17709649774527736;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.07186088850055887;  // std dev = 0.500, 42.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=21 */
%   | else return -0.07324622576333704;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.15274385809367097;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.05418307375954963;  // std dev = 0.500, 42.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=21 */
%   | else return -0.06842697784420272;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.13400703000801117;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.04076025323305634;  // std dev = 0.500, 42.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=21 */
%   | else return -0.0641918400820262;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */


Results
   AUC ROC   = 0.677894
   AUC PR    = 0.622063
   CLL	      = -0.584014
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.26087
   F1        = 0.413793


Total learning time: 2.987 seconds
Total inference time: 0.752 seconds
AUC ROC: 0.677894


Results scoring model
   AUC ROC   = 0.6472
   AUC PR    = 0.678502
   CLL	      = -0.598964
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.16
   F1        = 0.275862


Total scoring time: 0.694 seconds
Refined model CLL: -0.598964


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.677894
   AUC PR    = 0.622063
   CLL	      = -0.584014
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.26087
   F1        = 0.413793


Total learning time: 5.387 seconds
Total inference time: 0.752 seconds
AUC ROC: 0.677894
Total revision time: 5.387
Best scored revision CLL: -0.598964


Dataset: 3_imdb_cora, Fold: 1, Type: Transfer (trRDN-B), Time: 00:12:29
{'AUC ROC': 0.677894, 'AUC PR': 0.622063, 'CLL': -0.584014, 'Precision': [1.0, 0.5], 'Recall': 0.26087, 'F1': 0.413793, 'Learning time': 5.387, 'Inference time': 0.752, 'parameter_25': {'AUC ROC': 0.630435, 'AUC PR': 0.597315, 'CLL': -0.593584, 'Precision': [1.0, 0.5], 'Recall': 0.26087, 'F1': 0.413793, 'Learning time': 0.982, 'Inference time': 0.682}}


Starting fold 2

Target train facts examples: 33542
Target train pos examples: 2246
Target train neg examples: 4478

Target test facts examples: 9016
Target test pos	 examples: 771
Target test neg examples: 544

Amount of data: 5
******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.8581489350995122;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else return 0.30259337954395676;  // std dev = 1.491, 9.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=4 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.7194734122109545;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else return 0.2616318086752123;  // std dev = 1.491, 9.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=4 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.5553664367462845;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else return 0.2192721473492705;  // std dev = 1.491, 9.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=4 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.41751358415830997;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else return 0.17873524574687283;  // std dev = 1.491, 9.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=4 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.32071184716014967;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else return 0.1424392447767628;  // std dev = 1.491, 9.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=4 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.25517224256948945;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else return 0.11159559999632969;  // std dev = 1.491, 9.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=4 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.20975771563253554;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else return 0.08637026299843623;  // std dev = 1.491, 9.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=4 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.17709649774527736;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else return 0.06628370899125427;  // std dev = 1.491, 9.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=4 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.15274385809367097;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else return 0.05057564362187433;  // std dev = 1.491, 9.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=4 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.13400703000801117;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else return 0.038438849075129386;  // std dev = 1.491, 9.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=4 */


Results
   AUC ROC   = 0.566796
   AUC PR    = 0.695289
   CLL	      = -0.67834
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.133593
   F1        = 0.235698


Total learning time: 0.917 seconds
Total inference time: 0.745 seconds
AUC ROC: 0.566796


Results scoring model
   AUC ROC   = 0.6
   AUC PR    = 0.685394
   CLL	      = -0.632522
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.2
   F1        = 0.333333


Total scoring time: 0.677 seconds
Parameter learned model CLL: -0.632522


Structure after Parameter Learning
[['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 1], 'false': [1.491, 5, 4]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 1], 'false': [1.491, 5, 4]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 1], 'false': [1.491, 5, 4]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 1], 'false': [1.491, 5, 4]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 1], 'false': [1.491, 5, 4]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 1], 'false': [1.491, 5, 4]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 1], 'false': [1.491, 5, 4]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 1], 'false': [1.491, 5, 4]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 1], 'false': [1.491, 5, 4]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 1], 'false': [1.491, 5, 4]}]]
[{'': [0.0, 0.2469135802469134]}, {'': [0.0, 0.24691358024691354]}, {'': [0.0, 0.24691358024691365]}, {'': [0.0, 0.2469135802469136]}, {'': [0.0, 0.2469135802469136]}, {'': [0.0, 0.2469135802469136]}, {'': [0.0, 0.2469135802469136]}, {'': [0.0, 0.2469135802469136]}, {'': [0.0, 0.2469135802469136]}, {'': [0.0, 0.2469135802469136]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
1;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
2;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
3;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
4;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
5;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
6;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
7;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
8;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
9;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.8581489350995122;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else return 0.30259337954395676;  // std dev = 0.497, 9.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=4 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.7194734122109545;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else return 0.2616318086752123;  // std dev = 0.497, 9.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=4 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.5553664367462845;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else return 0.2192721473492705;  // std dev = 0.497, 9.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=4 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.41751358415830997;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else return 0.17873524574687283;  // std dev = 0.497, 9.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=4 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.32071184716014967;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else return 0.1424392447767628;  // std dev = 0.497, 9.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=4 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.25517224256948945;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else return 0.11159559999632969;  // std dev = 0.497, 9.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=4 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.20975771563253554;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else return 0.08637026299843623;  // std dev = 0.497, 9.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=4 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.17709649774527736;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else return 0.06628370899125427;  // std dev = 0.497, 9.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=4 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.15274385809367097;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else return 0.05057564362187433;  // std dev = 0.497, 9.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=4 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.13400703000801117;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else return 0.038438849075129386;  // std dev = 0.497, 9.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=4 */


Results
   AUC ROC   = 0.566796
   AUC PR    = 0.695289
   CLL	      = -0.67834
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.133593
   F1        = 0.235698


Total learning time: 1.23 seconds
Total inference time: 0.731 seconds
AUC ROC: 0.566796


Results scoring model
   AUC ROC   = 0.6
   AUC PR    = 0.685394
   CLL	      = -0.632522
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.2
   F1        = 0.333333


Total scoring time: 0.635 seconds
Refined model CLL: -0.632522


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.566796
   AUC PR    = 0.695289
   CLL	      = -0.67834
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.133593
   F1        = 0.235698


Total learning time: 3.4589999999999996 seconds
Total inference time: 0.745 seconds
AUC ROC: 0.566796
Total revision time: 3.4589999999999996
Best scored revision CLL: -0.632522


Dataset: 3_imdb_cora, Fold: 2, Type: Transfer (trRDN-B), Time: 00:12:35
{'AUC ROC': 0.566796, 'AUC PR': 0.695289, 'CLL': -0.67834, 'Precision': [1.0, 0.5], 'Recall': 0.133593, 'F1': 0.235698, 'Learning time': 3.4589999999999996, 'Inference time': 0.745, 'parameter_5': {'AUC ROC': 0.566796, 'AUC PR': 0.695289, 'CLL': -0.67834, 'Precision': [1.0, 0.5], 'Recall': 0.133593, 'F1': 0.235698, 'Learning time': 0.917, 'Inference time': 0.745}}


Amount of data: 10
******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.8581489350995122;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else return 0.33183314562582816;  // std dev = 2.176, 19.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=9 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.7194734122109545;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else return 0.28646280754165054;  // std dev = 2.176, 19.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=9 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.5553664367462845;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else return 0.23893826810287416;  // std dev = 2.176, 19.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=9 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.41751358415830997;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else return 0.19334220366104113;  // std dev = 2.176, 19.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=9 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.32071184716014967;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else return 0.15273729662465255;  // std dev = 2.176, 19.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=9 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.25517224256948945;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else return 0.11858202407945204;  // std dev = 2.176, 19.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=9 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.20975771563253554;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else return 0.09098433275637943;  // std dev = 2.176, 19.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=9 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.17709649774527736;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else return 0.06927339775071423;  // std dev = 2.176, 19.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=9 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.15274385809367097;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else return 0.052483554573519914;  // std dev = 2.176, 19.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=9 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.13400703000801117;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else return 0.0396383789772704;  // std dev = 2.176, 19.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=9 */


Results
   AUC ROC   = 0.566796
   AUC PR    = 0.695289
   CLL	      = -0.665297
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.133593
   F1        = 0.235698


Total learning time: 0.911 seconds
Total inference time: 0.768 seconds
AUC ROC: 0.566796


Results scoring model
   AUC ROC   = 0.55
   AUC PR    = 0.608377
   CLL	      = -0.665231
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.1
   F1        = 0.181818


Total scoring time: 0.69 seconds
Parameter learned model CLL: -0.665231


Structure after Parameter Learning
[['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 1], 'false': [2.176, 10, 9]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 1], 'false': [2.176, 10, 9]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 1], 'false': [2.176, 10, 9]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 1], 'false': [2.176, 10, 9]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 1], 'false': [2.176, 10, 9]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 1], 'false': [2.176, 10, 9]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 1], 'false': [2.176, 10, 9]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 1], 'false': [2.176, 10, 9]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 1], 'false': [2.176, 10, 9]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 1], 'false': [2.176, 10, 9]}]]
[{'': [0.0, 0.2493074792243767]}, {'': [0.0, 0.24930747922437685]}, {'': [0.0, 0.249307479224377]}, {'': [0.0, 0.24930747922437685]}, {'': [0.0, 0.24930747922437663]}, {'': [0.0, 0.24930747922437657]}, {'': [0.0, 0.24930747922437685]}, {'': [0.0, 0.2493074792243767]}, {'': [0.0, 0.2493074792243768]}, {'': [0.0, 0.2493074792243768]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
1;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
2;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
3;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
4;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
5;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
6;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
7;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
8;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
9;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.8581489350995122;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else return 0.33183314562582816;  // std dev = 0.499, 19.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=9 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.7194734122109545;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else return 0.28646280754165054;  // std dev = 0.499, 19.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=9 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.5553664367462845;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else return 0.23893826810287416;  // std dev = 0.499, 19.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=9 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.41751358415830997;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else return 0.19334220366104113;  // std dev = 0.499, 19.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=9 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.32071184716014967;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else return 0.15273729662465255;  // std dev = 0.499, 19.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=9 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.25517224256948945;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else return 0.11858202407945204;  // std dev = 0.499, 19.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=9 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.20975771563253554;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else return 0.09098433275637943;  // std dev = 0.499, 19.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=9 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.17709649774527736;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else return 0.06927339775071423;  // std dev = 0.499, 19.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=9 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.15274385809367097;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else return 0.052483554573519914;  // std dev = 0.499, 19.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=9 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.13400703000801117;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else return 0.0396383789772704;  // std dev = 0.499, 19.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=9 */


Results
   AUC ROC   = 0.566796
   AUC PR    = 0.695289
   CLL	      = -0.665297
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.133593
   F1        = 0.235698


Total learning time: 1.258 seconds
Total inference time: 0.709 seconds
AUC ROC: 0.566796


Results scoring model
   AUC ROC   = 0.55
   AUC PR    = 0.608377
   CLL	      = -0.665231
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.1
   F1        = 0.181818


Total scoring time: 0.645 seconds
Refined model CLL: -0.665231


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.566796
   AUC PR    = 0.695289
   CLL	      = -0.665297
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.133593
   F1        = 0.235698


Total learning time: 3.504 seconds
Total inference time: 0.768 seconds
AUC ROC: 0.566796
Total revision time: 3.504
Best scored revision CLL: -0.665231


Dataset: 3_imdb_cora, Fold: 2, Type: Transfer (trRDN-B), Time: 00:12:40
{'AUC ROC': 0.566796, 'AUC PR': 0.695289, 'CLL': -0.665297, 'Precision': [1.0, 0.5], 'Recall': 0.133593, 'F1': 0.235698, 'Learning time': 3.504, 'Inference time': 0.768, 'parameter_10': {'AUC ROC': 0.566796, 'AUC PR': 0.695289, 'CLL': -0.665297, 'Precision': [1.0, 0.5], 'Recall': 0.133593, 'F1': 0.235698, 'Learning time': 0.911, 'Inference time': 0.768}}


Amount of data: 15
******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.41370449065506787;  // std dev = 2.582, 27.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=15 */
%   else return -0.14185106490048777;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.3555557392714985;  // std dev = 2.582, 27.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=15 */
%   else return -0.12544463852839138;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.29261484610968785;  // std dev = 2.582, 27.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=15 */
%   else return -0.11231637819360639;  // std dev = 2.63e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.23214124828648158;  // std dev = 2.582, 27.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=15 */
%   else return -0.1015963294878363;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.17942003892665268;  // std dev = 2.582, 27.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=15 */
%   else return -0.09269127618926094;  // std dev = 2.63e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.13647857812921962;  // std dev = 2.582, 27.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=15 */
%   else return -0.08518475138839687;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.10293424750437853;  // std dev = 2.582, 27.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=15 */
%   else return -0.07877675473109173;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.07732947852152011;  // std dev = 2.582, 27.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=15 */
%   else return -0.07324622576333704;  // std dev = 1.86e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.05801086896812466;  // std dev = 2.582, 27.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=15 */
%   else return -0.06842697784420272;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.04351050232227124;  // std dev = 2.582, 27.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=15 */
%   else return -0.0641918400820262;  // std dev = 1.32e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */


Results
   AUC ROC   = 0.493954
   AUC PR    = 0.583332
   CLL	      = -0.730545
   Precision = 0.583268 at threshold = 0.5
   Recall    = 0.958495
   F1        = 0.725221


Total learning time: 0.983 seconds
Total inference time: 0.727 seconds
AUC ROC: 0.493954


Results scoring model
   AUC ROC   = 0.6
   AUC PR    = 0.555556
   CLL	      = -0.626428
   Precision = 0.555556 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.714286


Total scoring time: 0.648 seconds
Parameter learned model CLL: -0.626428


Structure after Parameter Learning
[['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [2.582, 12, 15], 'false': [0.0, 3, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [2.582, 12, 15], 'false': [0.0, 3, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [2.582, 12, 15], 'false': [2.63e-09, 3, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [2.582, 12, 15], 'false': [0.0, 3, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [2.582, 12, 15], 'false': [2.63e-09, 3, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [2.582, 12, 15], 'false': [0.0, 3, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [2.582, 12, 15], 'false': [0.0, 3, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [2.582, 12, 15], 'false': [1.86e-09, 3, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [2.582, 12, 15], 'false': [0.0, 3, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [2.582, 12, 15], 'false': [1.32e-09, 3, 0]}]]
[{'': [0.24691358024691312, 0.0]}, {'': [0.24691358024691415, 0.0]}, {'': [0.24691358024691415, 2.3129646346357427e-18]}, {'': [0.24691358024691343, -1.1564823173178713e-18]}, {'': [0.24691358024691337, 2.3129646346357427e-18]}, {'': [0.24691358024691348, 0.0]}, {'': [0.24691358024691346, 0.0]}, {'': [0.24691358024691365, 1.1564823173178713e-18]}, {'': [0.24691358024691348, -5.782411586589357e-19]}, {'': [0.24691358024691354, 5.782411586589357e-19]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.41370449065506787;  // std dev = 0.497, 27.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=15 */
%   else return -0.14185106490048777;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.3555557392714985;  // std dev = 0.497, 27.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=15 */
%   else return -0.12544463852839138;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.29261484610968785;  // std dev = 0.497, 27.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=15 */
%   else return -0.11231637819360639;  // std dev = 2.63e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.23214124828648158;  // std dev = 0.497, 27.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=15 */
%   else return -0.1015963294878363;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.17942003892665268;  // std dev = 0.497, 27.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=15 */
%   else return -0.09269127618926094;  // std dev = 2.63e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.13647857812921962;  // std dev = 0.497, 27.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=15 */
%   else return -0.08518475138839687;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.10293424750437853;  // std dev = 0.497, 27.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=15 */
%   else return -0.07877675473109173;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.07732947852152011;  // std dev = 0.497, 27.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=15 */
%   else return -0.07324622576333704;  // std dev = 1.86e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.05801086896812466;  // std dev = 0.497, 27.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=15 */
%   else return -0.06842697784420272;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.04351050232227124;  // std dev = 0.497, 27.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=15 */
%   else return -0.0641918400820262;  // std dev = 1.32e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */


Results
   AUC ROC   = 0.493954
   AUC PR    = 0.583332
   CLL	      = -0.730545
   Precision = 0.583268 at threshold = 0.5
   Recall    = 0.958495
   F1        = 0.725221


Total learning time: 1.318 seconds
Total inference time: 0.759 seconds
AUC ROC: 0.493954


Results scoring model
   AUC ROC   = 0.6
   AUC PR    = 0.555556
   CLL	      = -0.626428
   Precision = 0.555556 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.714286


Total scoring time: 0.671 seconds
Refined model CLL: -0.626428


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.493954
   AUC PR    = 0.583332
   CLL	      = -0.730545
   Precision = 0.583268 at threshold = 0.5
   Recall    = 0.958495
   F1        = 0.725221


Total learning time: 3.62 seconds
Total inference time: 0.727 seconds
AUC ROC: 0.493954
Total revision time: 3.62
Best scored revision CLL: -0.626428


Dataset: 3_imdb_cora, Fold: 2, Type: Transfer (trRDN-B), Time: 00:12:46
{'AUC ROC': 0.493954, 'AUC PR': 0.583332, 'CLL': -0.730545, 'Precision': [0.583268, 0.5], 'Recall': 0.958495, 'F1': 0.725221, 'Learning time': 3.62, 'Inference time': 0.727, 'parameter_15': {'AUC ROC': 0.493954, 'AUC PR': 0.583332, 'CLL': -0.730545, 'Precision': [0.583268, 0.5], 'Recall': 0.958495, 'F1': 0.725221, 'Learning time': 0.983, 'Inference time': 0.727}}


Amount of data: 20
******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.4137044906550675;  // std dev = 2.981, 36.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=20 */
%   else return -0.14185106490048777;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.35555573927149847;  // std dev = 2.981, 36.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=20 */
%   else return -0.12544463852839138;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.29261484610968785;  // std dev = 2.981, 36.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=20 */
%   else return -0.11231637819360639;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.23214124828648167;  // std dev = 2.981, 36.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=20 */
%   else return -0.10159632948783628;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.17942003892665268;  // std dev = 2.981, 36.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=20 */
%   else return -0.09269127618926096;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.13647857812921968;  // std dev = 2.981, 36.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=20 */
%   else return -0.08518475138839687;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.10293424750437874;  // std dev = 2.981, 36.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=20 */
%   else return -0.07877675473109173;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.0773294785215201;  // std dev = 2.981, 36.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=20 */
%   else return -0.07324622576333704;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.05801086896812446;  // std dev = 2.981, 36.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=20 */
%   else return -0.06842697784420272;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.04351050232227129;  // std dev = 2.981, 36.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=20 */
%   else return -0.0641918400820262;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */


Results
   AUC ROC   = 0.493954
   AUC PR    = 0.583332
   CLL	      = -0.730545
   Precision = 0.583268 at threshold = 0.5
   Recall    = 0.958495
   F1        = 0.725221


Total learning time: 0.899 seconds
Total inference time: 0.739 seconds
AUC ROC: 0.493954


Results scoring model
   AUC ROC   = 0.6
   AUC PR    = 0.555556
   CLL	      = -0.626428
   Precision = 0.555556 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.714286


Total scoring time: 0.669 seconds
Parameter learned model CLL: -0.626428


Structure after Parameter Learning
[['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [2.981, 16, 20], 'false': [0.0, 4, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [2.981, 16, 20], 'false': [0.0, 4, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [2.981, 16, 20], 'false': [0.0, 4, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [2.981, 16, 20], 'false': [0.0, 4, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [2.981, 16, 20], 'false': [0.0, 4, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [2.981, 16, 20], 'false': [0.0, 4, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [2.981, 16, 20], 'false': [0.0, 4, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [2.981, 16, 20], 'false': [0.0, 4, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [2.981, 16, 20], 'false': [0.0, 4, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [2.981, 16, 20], 'false': [0.0, 4, 0]}]]
[{'': [0.24691358024691348, 0.0]}, {'': [0.2469135802469143, 0.0]}, {'': [0.24691358024691346, 0.0]}, {'': [0.24691358024691346, 0.0]}, {'': [0.24691358024691368, 0.0]}, {'': [0.24691358024691348, 0.0]}, {'': [0.2469135802469136, 0.0]}, {'': [0.2469135802469136, 0.0]}, {'': [0.24691358024691365, 0.0]}, {'': [0.24691358024691368, 0.0]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.4137044906550675;  // std dev = 0.497, 36.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=20 */
%   else return -0.14185106490048777;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.35555573927149847;  // std dev = 0.497, 36.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=20 */
%   else return -0.12544463852839138;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.29261484610968785;  // std dev = 0.497, 36.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=20 */
%   else return -0.11231637819360639;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.23214124828648167;  // std dev = 0.497, 36.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=20 */
%   else return -0.10159632948783628;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.17942003892665268;  // std dev = 0.497, 36.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=20 */
%   else return -0.09269127618926096;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.13647857812921968;  // std dev = 0.497, 36.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=20 */
%   else return -0.08518475138839687;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.10293424750437874;  // std dev = 0.497, 36.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=20 */
%   else return -0.07877675473109173;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.0773294785215201;  // std dev = 0.497, 36.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=20 */
%   else return -0.07324622576333704;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.05801086896812446;  // std dev = 0.497, 36.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=20 */
%   else return -0.06842697784420272;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.04351050232227129;  // std dev = 0.497, 36.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=20 */
%   else return -0.0641918400820262;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */


Results
   AUC ROC   = 0.493954
   AUC PR    = 0.583332
   CLL	      = -0.730545
   Precision = 0.583268 at threshold = 0.5
   Recall    = 0.958495
   F1        = 0.725221


Total learning time: 1.417 seconds
Total inference time: 0.787 seconds
AUC ROC: 0.493954


Results scoring model
   AUC ROC   = 0.6
   AUC PR    = 0.555556
   CLL	      = -0.626428
   Precision = 0.555556 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.714286


Total scoring time: 0.654 seconds
Refined model CLL: -0.626428


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.493954
   AUC PR    = 0.583332
   CLL	      = -0.730545
   Precision = 0.583268 at threshold = 0.5
   Recall    = 0.958495
   F1        = 0.725221


Total learning time: 3.6390000000000002 seconds
Total inference time: 0.739 seconds
AUC ROC: 0.493954
Total revision time: 3.6390000000000002
Best scored revision CLL: -0.626428


Dataset: 3_imdb_cora, Fold: 2, Type: Transfer (trRDN-B), Time: 00:12:52
{'AUC ROC': 0.493954, 'AUC PR': 0.583332, 'CLL': -0.730545, 'Precision': [0.583268, 0.5], 'Recall': 0.958495, 'F1': 0.725221, 'Learning time': 3.6390000000000002, 'Inference time': 0.739, 'parameter_20': {'AUC ROC': 0.493954, 'AUC PR': 0.583332, 'CLL': -0.730545, 'Precision': [0.583268, 0.5], 'Recall': 0.958495, 'F1': 0.725221, 'Learning time': 0.899, 'Inference time': 0.739}}


Amount of data: 25
******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.41370449065506687;  // std dev = 3.333, 45.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=25 */
%   else return -0.14185106490048777;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.3555557392714994;  // std dev = 3.333, 45.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=25 */
%   else return -0.12544463852839138;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.29261484610968785;  // std dev = 3.333, 45.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=25 */
%   else return -0.11231637819360638;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.23214124828648153;  // std dev = 3.333, 45.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=25 */
%   else return -0.10159632948783633;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.17942003892665268;  // std dev = 3.333, 45.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=25 */
%   else return -0.09269127618926098;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.13647857812921968;  // std dev = 3.333, 45.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=25 */
%   else return -0.08518475138839687;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.10293424750437888;  // std dev = 3.333, 45.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=25 */
%   else return -0.07877675473109177;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.0773294785215201;  // std dev = 3.333, 45.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=25 */
%   else return -0.07324622576333704;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.0580108689681243;  // std dev = 3.333, 45.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=25 */
%   else return -0.06842697784420272;  // std dev = 1.86e-09, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.043510502322271126;  // std dev = 3.333, 45.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=25 */
%   else return -0.0641918400820262;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */


Results
   AUC ROC   = 0.493954
   AUC PR    = 0.583332
   CLL	      = -0.730545
   Precision = 0.583268 at threshold = 0.5
   Recall    = 0.958495
   F1        = 0.725221


Total learning time: 1.031 seconds
Total inference time: 0.756 seconds
AUC ROC: 0.493954


Results scoring model
   AUC ROC   = 0.6
   AUC PR    = 0.555556
   CLL	      = -0.626428
   Precision = 0.555556 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.714286


Total scoring time: 0.654 seconds
Parameter learned model CLL: -0.626428


Structure after Parameter Learning
[['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [3.333, 20, 25], 'false': [0.0, 5, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [3.333, 20, 25], 'false': [0.0, 5, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [3.333, 20, 25], 'false': [0.0, 5, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [3.333, 20, 25], 'false': [0.0, 5, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [3.333, 20, 25], 'false': [0.0, 5, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [3.333, 20, 25], 'false': [0.0, 5, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [3.333, 20, 25], 'false': [0.0, 5, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [3.333, 20, 25], 'false': [0.0, 5, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [3.333, 20, 25], 'false': [1.86e-09, 5, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [3.333, 20, 25], 'false': [0.0, 5, 0]}]]
[{'': [0.24691358024691487, -2.7755575615628915e-18]}, {'': [0.24691358024691287, 0.0]}, {'': [0.24691358024691346, 0.0]}, {'': [0.24691358024691362, 0.0]}, {'': [0.24691358024691376, 0.0]}, {'': [0.2469135802469133, 0.0]}, {'': [0.24691358024691368, -1.3877787807814458e-18]}, {'': [0.24691358024691346, -6.938893903907229e-19]}, {'': [0.24691358024691382, 6.938893903907229e-19]}, {'': [0.2469135802469139, 0.0]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.5248156017661788;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | then return 0.5248156017661788;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return 0.3966104735610501;  // std dev = 0.499, 39.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=21 */
%   else return -0.14185106490048777;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.5316289395752953;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | else return 0.33827767923756863;  // std dev = 0.499, 41.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=22 */
%   else return -0.12544463852839138;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.29224494497910514;  // std dev = 0.495, 45.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=25 */
%   else return -0.11231637819360638;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.3075212579651872;  // std dev = 0.799, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else return 0.22653192900258484;  // std dev = 0.497, 42.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=23 */
%   else return -0.10159632948783633;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.300940799664236;  // std dev = 0.860, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | else return 0.1674414884747924;  // std dev = 0.499, 41.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=22 */
%   else return -0.09269127618926098;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.22592467652186993;  // std dev = 0.860, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | else return 0.12768995528692567;  // std dev = 0.499, 41.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=22 */
%   else return -0.08518475138839687;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.10306587667391122;  // std dev = 0.494, 45.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=25 */
%   else return -0.07877675473109177;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.1452569257317818;  // std dev = 0.861, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | else return 0.07100457717324837;  // std dev = 0.499, 41.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=22 */
%   else return -0.07324622576333704;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.09375282974377908;  // std dev = 0.772, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else return 0.05592816513330913;  // std dev = 0.497, 42.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=23 */
%   else return -0.06842697784420272;  // std dev = 1.86e-09, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.07127658705937918;  // std dev = 0.773, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | then return 0.019561700350904914;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return 0.043762567449212225;  // std dev = 0.499, 39.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=21 */
%   else return -0.0641918400820262;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */


Results
   AUC ROC   = 0.500861
   AUC PR    = 0.59422
   CLL	      = -0.733348
   Precision = 0.583268 at threshold = 0.5
   Recall    = 0.958495
   F1        = 0.725221


Total learning time: 1.904 seconds
Total inference time: 0.96 seconds
AUC ROC: 0.500861


Results scoring model
   AUC ROC   = 0.6264
   AUC PR    = 0.621153
   CLL	      = -0.620093
   Precision = 0.555556 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.714286


Total scoring time: 0.764 seconds
Refined model CLL: -0.620093


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.500861
   AUC PR    = 0.59422
   CLL	      = -0.733348
   Precision = 0.583268 at threshold = 0.5
   Recall    = 0.958495
   F1        = 0.725221


Total learning time: 4.353 seconds
Total inference time: 0.96 seconds
AUC ROC: 0.500861
Total revision time: 4.353
Best scored revision CLL: -0.620093


Dataset: 3_imdb_cora, Fold: 2, Type: Transfer (trRDN-B), Time: 00:12:58
{'AUC ROC': 0.500861, 'AUC PR': 0.59422, 'CLL': -0.733348, 'Precision': [0.583268, 0.5], 'Recall': 0.958495, 'F1': 0.725221, 'Learning time': 4.353, 'Inference time': 0.96, 'parameter_25': {'AUC ROC': 0.493954, 'AUC PR': 0.583332, 'CLL': -0.730545, 'Precision': [0.583268, 0.5], 'Recall': 0.958495, 'F1': 0.725221, 'Learning time': 1.031, 'Inference time': 0.756}}


Starting fold 3

Target train facts examples: 33252
Target train pos examples: 2436
Target train neg examples: 2800

Target test facts examples: 9306
Target test pos	 examples: 581
Target test neg examples: 2222

Amount of data: 5
******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.3581489350995123;  // std dev = 1.581, 10.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.30874113578563506;  // std dev = 1.581, 10.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.2564123687585864;  // std dev = 1.581, 10.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.20613740734453975;  // std dev = 1.581, 10.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.16162857548414675;  // std dev = 1.581, 10.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.1245559779208197;  // std dev = 1.581, 10.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.09492800936730683;  // std dev = 1.581, 10.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.07186088850055855;  // std dev = 1.581, 10.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.05418307375954949;  // std dev = 1.581, 10.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.04076025323305626;  // std dev = 1.581, 10.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */


Results
   AUC ROC   = 0.414802
   AUC PR    = 0.180757
   CLL	      = -0.70139
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 0.864 seconds
Total inference time: 0.952 seconds
AUC ROC: 0.414802


Results scoring model
   AUC ROC   = 0.5
   AUC PR    = 0.5
   CLL	      = -0.695026
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total scoring time: 0.607 seconds
Parameter learned model CLL: -0.695026


Structure after Parameter Learning
[['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 0], 'false': [1.581, 5, 5]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 0], 'false': [1.581, 5, 5]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 0], 'false': [1.581, 5, 5]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 0], 'false': [1.581, 5, 5]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 0], 'false': [1.581, 5, 5]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 0], 'false': [1.581, 5, 5]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 0], 'false': [1.581, 5, 5]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 0], 'false': [1.581, 5, 5]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 0], 'false': [1.581, 5, 5]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 0], 'false': [1.581, 5, 5]}]]
[{'': [nan, 0.24999999999999983]}, {'': [nan, 0.24999999999999994]}, {'': [nan, 0.25000000000000006]}, {'': [nan, 0.24999999999999992]}, {'': [nan, 0.24999999999999994]}, {'': [nan, 0.24999999999999986]}, {'': [nan, 0.25]}, {'': [nan, 0.25000000000000006]}, {'': [nan, 0.25]}, {'': [nan, 0.24999999999999994]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Pruning resulted in null theory

Candidate for revision
0;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
1;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
2;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
3;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
4;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
5;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
6;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
7;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
8;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
9;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.3581489350995123;  // std dev = 0.500, 10.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.30874113578563506;  // std dev = 0.500, 10.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.2564123687585864;  // std dev = 0.500, 10.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.20613740734453975;  // std dev = 0.500, 10.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.16162857548414675;  // std dev = 0.500, 10.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.1245559779208197;  // std dev = 0.500, 10.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.09492800936730683;  // std dev = 0.500, 10.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.07186088850055855;  // std dev = 0.500, 10.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.05418307375954949;  // std dev = 0.500, 10.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.04076025323305626;  // std dev = 0.500, 10.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */


Results
   AUC ROC   = 0.414802
   AUC PR    = 0.180757
   CLL	      = -0.70139
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 1.196 seconds
Total inference time: 0.932 seconds
AUC ROC: 0.414802


Results scoring model
   AUC ROC   = 0.5
   AUC PR    = 0.5
   CLL	      = -0.695026
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total scoring time: 0.621 seconds
Refined model CLL: -0.695026


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.414802
   AUC PR    = 0.180757
   CLL	      = -0.70139
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 3.288 seconds
Total inference time: 0.952 seconds
AUC ROC: 0.414802
Total revision time: 3.288
Best scored revision CLL: -0.695026


Dataset: 3_imdb_cora, Fold: 3, Type: Transfer (trRDN-B), Time: 00:13:04
{'AUC ROC': 0.414802, 'AUC PR': 0.180757, 'CLL': -0.70139, 'Precision': [nan, 0.5], 'Recall': 0.0, 'F1': nan, 'Learning time': 3.288, 'Inference time': 0.952, 'parameter_5': {'AUC ROC': 0.414802, 'AUC PR': 0.180757, 'CLL': -0.70139, 'Precision': [nan, 0.5], 'Recall': 0.0, 'F1': nan, 'Learning time': 0.864, 'Inference time': 0.952}}


Amount of data: 10
******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.42064893509951234;  // std dev = 1.984, 16.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=9 */
%   else return 0.10814893509951219;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.361386758207022;  // std dev = 1.984, 16.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=9 */
%   else return 0.09446743783575562;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.29707588146212427;  // std dev = 1.984, 16.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=9 */
%   else return 0.08165239320886175;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.23530262435174626;  // std dev = 1.984, 16.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=9 */
%   else return 0.06990902274840138;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.18156600992036426;  // std dev = 1.984, 16.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=9 */
%   else return 0.059354635365447495;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.1379248928305776;  // std dev = 1.984, 16.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=9 */
%   else return 0.05002771289938789;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.10392852578813351;  // std dev = 1.984, 16.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=9 */
%   else return 0.04190386852605735;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.07803658977375333;  // std dev = 1.984, 16.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=9 */
%   else return 0.03491396367325339;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.05853252891320447;  // std dev = 1.984, 16.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=9 */
%   else return 0.028961035597951046;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.043907889424101815;  // std dev = 1.984, 16.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=9 */
%   else return 0.023934242922604827;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */


Results
   AUC ROC   = 0.548677
   AUC PR    = 0.225256
   CLL	      = -0.678046
   Precision = 0.22586 at threshold = 0.5
   Recall    = 0.938038
   F1        = 0.364061


Total learning time: 0.905 seconds
Total inference time: 0.892 seconds
AUC ROC: 0.548677


Results scoring model
   AUC ROC   = 0.6
   AUC PR    = 0.559375
   CLL	      = -0.662683
   Precision = 0.5625 at threshold = 0.5
   Recall    = 0.9
   F1        = 0.692308


Total scoring time: 0.681 seconds
Parameter learned model CLL: -0.662683


Structure after Parameter Learning
[['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [1.984, 7, 9], 'false': [0.866, 3, 1]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [1.984, 7, 9], 'false': [0.866, 3, 1]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [1.984, 7, 9], 'false': [0.866, 3, 1]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [1.984, 7, 9], 'false': [0.866, 3, 1]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [1.984, 7, 9], 'false': [0.866, 3, 1]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [1.984, 7, 9], 'false': [0.866, 3, 1]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [1.984, 7, 9], 'false': [0.866, 3, 1]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [1.984, 7, 9], 'false': [0.866, 3, 1]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [1.984, 7, 9], 'false': [0.866, 3, 1]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [1.984, 7, 9], 'false': [0.866, 3, 1]}]]
[{'': [0.24609374999999992, 0.18750000000000003]}, {'': [0.24609375000000006, 0.18749999999999997]}, {'': [0.24609375000000022, 0.18749999999999994]}, {'': [0.2460937500000001, 0.18749999999999997]}, {'': [0.2460937500000001, 0.18749999999999997]}, {'': [0.24609374999999992, 0.18750000000000006]}, {'': [0.24609375000000003, 0.18750000000000003]}, {'': [0.24609374999999997, 0.18749999999999994]}, {'': [0.24609374999999997, 0.18749999999999997]}, {'': [0.24609375000000003, 0.1875]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Pruning resulted in null theory

Candidate for revision
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.42064893509951234;  // std dev = 0.496, 16.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=9 */
%   else return 0.10814893509951219;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.361386758207022;  // std dev = 0.496, 16.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=9 */
%   else return 0.09446743783575562;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.29707588146212427;  // std dev = 0.496, 16.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=9 */
%   else return 0.08165239320886175;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.23530262435174626;  // std dev = 0.496, 16.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=9 */
%   else return 0.06990902274840138;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.18156600992036426;  // std dev = 0.496, 16.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=9 */
%   else return 0.059354635365447495;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.1379248928305776;  // std dev = 0.496, 16.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=9 */
%   else return 0.05002771289938789;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.10392852578813351;  // std dev = 0.496, 16.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=9 */
%   else return 0.04190386852605735;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.07803658977375333;  // std dev = 0.496, 16.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=9 */
%   else return 0.03491396367325339;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.05853252891320447;  // std dev = 0.496, 16.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=9 */
%   else return 0.028961035597951046;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.043907889424101815;  // std dev = 0.496, 16.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=9 */
%   else return 0.023934242922604827;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */


Results
   AUC ROC   = 0.548677
   AUC PR    = 0.225256
   CLL	      = -0.678046
   Precision = 0.22586 at threshold = 0.5
   Recall    = 0.938038
   F1        = 0.364061


Total learning time: 1.312 seconds
Total inference time: 0.934 seconds
AUC ROC: 0.548677


Results scoring model
   AUC ROC   = 0.6
   AUC PR    = 0.559375
   CLL	      = -0.662683
   Precision = 0.5625 at threshold = 0.5
   Recall    = 0.9
   F1        = 0.692308


Total scoring time: 0.636 seconds
Refined model CLL: -0.662683


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.548677
   AUC PR    = 0.225256
   CLL	      = -0.678046
   Precision = 0.22586 at threshold = 0.5
   Recall    = 0.938038
   F1        = 0.364061


Total learning time: 3.5340000000000003 seconds
Total inference time: 0.892 seconds
AUC ROC: 0.548677
Total revision time: 3.5340000000000003
Best scored revision CLL: -0.662683


Dataset: 3_imdb_cora, Fold: 3, Type: Transfer (trRDN-B), Time: 00:13:10
{'AUC ROC': 0.548677, 'AUC PR': 0.225256, 'CLL': -0.678046, 'Precision': [0.22586, 0.5], 'Recall': 0.938038, 'F1': 0.364061, 'Learning time': 3.5340000000000003, 'Inference time': 0.892, 'parameter_10': {'AUC ROC': 0.548677, 'AUC PR': 0.225256, 'CLL': -0.678046, 'Precision': [0.22586, 0.5], 'Recall': 0.938038, 'F1': 0.364061, 'Learning time': 0.905, 'Inference time': 0.892}}


Amount of data: 15
******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.3966104735610508;  // std dev = 2.542, 26.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=14 */
%   else return 0.10814893509951219;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.34118274280999283;  // std dev = 2.542, 26.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=14 */
%   else return 0.09446743783575562;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.2815735770744793;  // std dev = 2.542, 26.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=14 */
%   else return 0.08165239320886175;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.22427810686169078;  // std dev = 2.542, 26.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=14 */
%   else return 0.06990902274840138;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.1740703004191193;  // std dev = 2.542, 26.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=14 */
%   else return 0.059354635365447495;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.13288558879104354;  // std dev = 2.542, 26.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=14 */
%   else return 0.05002771289938789;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.1004901590509401;  // std dev = 2.542, 26.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=14 */
%   else return 0.04190386852605735;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.07562016402676984;  // std dev = 2.542, 26.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=14 */
%   else return 0.03491396367325339;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.05677556359574457;  // std dev = 2.542, 26.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=14 */
%   else return 0.028961035597951046;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.042589775603555285;  // std dev = 2.542, 26.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=14 */
%   else return 0.023934242922604827;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */


Results
   AUC ROC   = 0.548677
   AUC PR    = 0.225256
   CLL	      = -0.654847
   Precision = 0.22586 at threshold = 0.5
   Recall    = 0.938038
   F1        = 0.364061


Total learning time: 0.847 seconds
Total inference time: 0.913 seconds
AUC ROC: 0.548677


Results scoring model
   AUC ROC   = 0.566667
   AUC PR    = 0.537179
   CLL	      = -0.675053
   Precision = 0.538462 at threshold = 0.5
   Recall    = 0.933333
   F1        = 0.682927


Total scoring time: 0.64 seconds
Parameter learned model CLL: -0.675053


Structure after Parameter Learning
[['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [2.542, 12, 14], 'false': [0.866, 3, 1]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [2.542, 12, 14], 'false': [0.866, 3, 1]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [2.542, 12, 14], 'false': [0.866, 3, 1]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [2.542, 12, 14], 'false': [0.866, 3, 1]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [2.542, 12, 14], 'false': [0.866, 3, 1]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [2.542, 12, 14], 'false': [0.866, 3, 1]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [2.542, 12, 14], 'false': [0.866, 3, 1]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [2.542, 12, 14], 'false': [0.866, 3, 1]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [2.542, 12, 14], 'false': [0.866, 3, 1]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [2.542, 12, 14], 'false': [0.866, 3, 1]}]]
[{'': [0.24852071005917115, 0.18750000000000003]}, {'': [0.24852071005917137, 0.18749999999999997]}, {'': [0.2485207100591718, 0.18749999999999994]}, {'': [0.24852071005917167, 0.18749999999999997]}, {'': [0.2485207100591716, 0.18749999999999997]}, {'': [0.24852071005917153, 0.18750000000000006]}, {'': [0.2485207100591717, 0.18750000000000003]}, {'': [0.24852071005917167, 0.18749999999999994]}, {'': [0.2485207100591716, 0.18749999999999997]}, {'': [0.24852071005917148, 0.1875]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Pruning resulted in null theory

Candidate for revision
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.3966104735610508;  // std dev = 0.499, 26.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=14 */
%   else return 0.10814893509951219;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.34118274280999283;  // std dev = 0.499, 26.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=14 */
%   else return 0.09446743783575562;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.2815735770744793;  // std dev = 0.499, 26.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=14 */
%   else return 0.08165239320886175;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.22427810686169078;  // std dev = 0.499, 26.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=14 */
%   else return 0.06990902274840138;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.1740703004191193;  // std dev = 0.499, 26.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=14 */
%   else return 0.059354635365447495;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.13288558879104354;  // std dev = 0.499, 26.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=14 */
%   else return 0.05002771289938789;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.1004901590509401;  // std dev = 0.499, 26.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=14 */
%   else return 0.04190386852605735;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.07562016402676984;  // std dev = 0.499, 26.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=14 */
%   else return 0.03491396367325339;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.05677556359574457;  // std dev = 0.499, 26.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=14 */
%   else return 0.028961035597951046;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.042589775603555285;  // std dev = 0.499, 26.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=14 */
%   else return 0.023934242922604827;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */


Results
   AUC ROC   = 0.548677
   AUC PR    = 0.225256
   CLL	      = -0.654847
   Precision = 0.22586 at threshold = 0.5
   Recall    = 0.938038
   F1        = 0.364061


Total learning time: 1.434 seconds
Total inference time: 0.898 seconds
AUC ROC: 0.548677


Results scoring model
   AUC ROC   = 0.566667
   AUC PR    = 0.537179
   CLL	      = -0.675053
   Precision = 0.538462 at threshold = 0.5
   Recall    = 0.933333
   F1        = 0.682927


Total scoring time: 0.644 seconds
Refined model CLL: -0.675053


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.548677
   AUC PR    = 0.225256
   CLL	      = -0.654847
   Precision = 0.22586 at threshold = 0.5
   Recall    = 0.938038
   F1        = 0.364061


Total learning time: 3.5650000000000004 seconds
Total inference time: 0.913 seconds
AUC ROC: 0.548677
Total revision time: 3.5650000000000004
Best scored revision CLL: -0.675053


Dataset: 3_imdb_cora, Fold: 3, Type: Transfer (trRDN-B), Time: 00:13:16
{'AUC ROC': 0.548677, 'AUC PR': 0.225256, 'CLL': -0.654847, 'Precision': [0.22586, 0.5], 'Recall': 0.938038, 'F1': 0.364061, 'Learning time': 3.5650000000000004, 'Inference time': 0.913, 'parameter_15': {'AUC ROC': 0.548677, 'AUC PR': 0.225256, 'CLL': -0.654847, 'Precision': [0.22586, 0.5], 'Recall': 0.938038, 'F1': 0.364061, 'Learning time': 0.847, 'Inference time': 0.913}}


Amount of data: 20
******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.4010060779566551;  // std dev = 2.947, 35.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=19 */
%   else return 0.0581489350995122;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.3448813335003233;  // std dev = 2.947, 35.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=19 */
%   else return 0.050922032513554226;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.284420989587347;  // std dev = 2.947, 35.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=19 */
%   else return 0.04434629760466851;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.2263113194788674;  // std dev = 2.947, 35.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=19 */
%   else return 0.038428662236904595;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.17545554879562322;  // std dev = 2.947, 35.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=19 */
%   else return 0.03315494592188569;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.133814568042519;  // std dev = 2.947, 35.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=19 */
%   else return 0.02849510592572117;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.10111882783055877;  // std dev = 2.947, 35.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=19 */
%   else return 0.024408230135271946;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.076056059384118;  // std dev = 2.947, 35.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=19 */
%   else return 0.020846889108740264;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.05708711789987074;  // std dev = 2.947, 35.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=19 */
%   else return 0.017760671541598484;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.042819182238245115;  // std dev = 2.947, 35.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=19 */
%   else return 0.015098879183171288;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */


Results
   AUC ROC   = 0.548677
   AUC PR    = 0.225256
   CLL	      = -0.654741
   Precision = 0.22586 at threshold = 0.5
   Recall    = 0.938038
   F1        = 0.364061


Total learning time: 0.931 seconds
Total inference time: 0.899 seconds
AUC ROC: 0.548677


Results scoring model
   AUC ROC   = 0.575
   AUC PR    = 0.541786
   CLL	      = -0.667711
   Precision = 0.542857 at threshold = 0.5
   Recall    = 0.95
   F1        = 0.690909


Total scoring time: 0.707 seconds
Parameter learned model CLL: -0.667711


Structure after Parameter Learning
[['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [2.947, 16, 19], 'false': [0.894, 4, 1]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [2.947, 16, 19], 'false': [0.894, 4, 1]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [2.947, 16, 19], 'false': [0.894, 4, 1]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [2.947, 16, 19], 'false': [0.894, 4, 1]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [2.947, 16, 19], 'false': [0.894, 4, 1]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [2.947, 16, 19], 'false': [0.894, 4, 1]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [2.947, 16, 19], 'false': [0.894, 4, 1]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [2.947, 16, 19], 'false': [0.894, 4, 1]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [2.947, 16, 19], 'false': [0.894, 4, 1]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [2.947, 16, 19], 'false': [0.894, 4, 1]}]]
[{'': [0.24816326530612207, 0.16000000000000003]}, {'': [0.24816326530612248, 0.16]}, {'': [0.24816326530612218, 0.15999999999999998]}, {'': [0.24816326530612273, 0.16000000000000003]}, {'': [0.24816326530612237, 0.16000000000000003]}, {'': [0.24816326530612243, 0.15999999999999998]}, {'': [0.24816326530612248, 0.15999999999999998]}, {'': [0.24816326530612243, 0.16]}, {'': [0.24816326530612254, 0.16]}, {'': [0.24816326530612248, 0.15999999999999998]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Pruning resulted in null theory

Candidate for revision
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.4010060779566551;  // std dev = 0.498, 35.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=19 */
%   else return 0.0581489350995122;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.3448813335003233;  // std dev = 0.498, 35.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=19 */
%   else return 0.050922032513554226;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.284420989587347;  // std dev = 0.498, 35.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=19 */
%   else return 0.04434629760466851;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.2263113194788674;  // std dev = 0.498, 35.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=19 */
%   else return 0.038428662236904595;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.17545554879562322;  // std dev = 0.498, 35.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=19 */
%   else return 0.03315494592188569;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.133814568042519;  // std dev = 0.498, 35.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=19 */
%   else return 0.02849510592572117;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.10111882783055877;  // std dev = 0.498, 35.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=19 */
%   else return 0.024408230135271946;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.076056059384118;  // std dev = 0.498, 35.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=19 */
%   else return 0.020846889108740264;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.05708711789987074;  // std dev = 0.498, 35.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=19 */
%   else return 0.017760671541598484;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.042819182238245115;  // std dev = 0.498, 35.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=19 */
%   else return 0.015098879183171288;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */


Results
   AUC ROC   = 0.548677
   AUC PR    = 0.225256
   CLL	      = -0.654741
   Precision = 0.22586 at threshold = 0.5
   Recall    = 0.938038
   F1        = 0.364061


Total learning time: 1.402 seconds
Total inference time: 0.905 seconds
AUC ROC: 0.548677


Results scoring model
   AUC ROC   = 0.575
   AUC PR    = 0.541786
   CLL	      = -0.667711
   Precision = 0.542857 at threshold = 0.5
   Recall    = 0.95
   F1        = 0.690909


Total scoring time: 0.646 seconds
Refined model CLL: -0.667711


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.548677
   AUC PR    = 0.225256
   CLL	      = -0.654741
   Precision = 0.22586 at threshold = 0.5
   Recall    = 0.938038
   F1        = 0.364061


Total learning time: 3.686 seconds
Total inference time: 0.899 seconds
AUC ROC: 0.548677
Total revision time: 3.686
Best scored revision CLL: -0.667711


Dataset: 3_imdb_cora, Fold: 3, Type: Transfer (trRDN-B), Time: 00:13:22
{'AUC ROC': 0.548677, 'AUC PR': 0.225256, 'CLL': -0.654741, 'Precision': [0.22586, 0.5], 'Recall': 0.938038, 'F1': 0.364061, 'Learning time': 3.686, 'Inference time': 0.899, 'parameter_20': {'AUC ROC': 0.548677, 'AUC PR': 0.225256, 'CLL': -0.654741, 'Precision': [0.22586, 0.5], 'Recall': 0.938038, 'F1': 0.364061, 'Learning time': 0.931, 'Inference time': 0.899}}


Amount of data: 25
******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.3697768420762556;  // std dev = 3.278, 43.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=22 */
%   else return 0.28672036367094084;  // std dev = 1.309, 7.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=3 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.31856399095141696;  // std dev = 3.278, 43.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=22 */
%   else return 0.24811816884741303;  // std dev = 1.309, 7.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=3 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.26406620901387173;  // std dev = 3.278, 43.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=22 */
%   else return 0.20848477447886868;  // std dev = 1.309, 7.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=3 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.2116898738090047;  // std dev = 3.278, 43.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=22 */
%   else return 0.17062637354018514;  // std dev = 1.309, 7.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=3 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.16545466791447316;  // std dev = 3.278, 43.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=22 */
%   else return 0.13664585375352217;  // std dev = 1.309, 7.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=3 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.12711779198406117;  // std dev = 3.278, 43.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=22 */
%   else return 0.10762034996184422;  // std dev = 1.309, 7.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=3 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.09662725081640343;  // std dev = 3.278, 43.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=22 */
%   else return 0.08372807955323866;  // std dev = 1.309, 7.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=3 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.07299283009042855;  // std dev = 3.278, 43.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=22 */
%   else return 0.06457405393631663;  // std dev = 1.309, 7.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=3 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.054946667649313795;  // std dev = 3.278, 43.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=22 */
%   else return 0.04949778322519479;  // std dev = 1.309, 7.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=3 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.04128402614589619;  // std dev = 3.278, 43.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=22 */
%   else return 0.03777940363354092;  // std dev = 1.309, 7.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=3 */


Results
   AUC ROC   = 0.548677
   AUC PR    = 0.225256
   CLL	      = -0.655316
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 0.933 seconds
Total inference time: 0.9 seconds
AUC ROC: 0.548677


Results scoring model
   AUC ROC   = 0.52
   AUC PR    = 0.510899
   CLL	      = -0.693373
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total scoring time: 0.69 seconds
Parameter learned model CLL: -0.693373


Structure after Parameter Learning
[['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [3.278, 21, 22], 'false': [1.309, 4, 3]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [3.278, 21, 22], 'false': [1.309, 4, 3]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [3.278, 21, 22], 'false': [1.309, 4, 3]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [3.278, 21, 22], 'false': [1.309, 4, 3]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [3.278, 21, 22], 'false': [1.309, 4, 3]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [3.278, 21, 22], 'false': [1.309, 4, 3]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [3.278, 21, 22], 'false': [1.309, 4, 3]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [3.278, 21, 22], 'false': [1.309, 4, 3]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [3.278, 21, 22], 'false': [1.309, 4, 3]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [3.278, 21, 22], 'false': [1.309, 4, 3]}]]
[{'': [0.2498647917793413, 0.24489795918367335]}, {'': [0.24986479177933996, 0.2448979591836735]}, {'': [0.2498647917793402, 0.2448979591836735]}, {'': [0.24986479177934046, 0.2448979591836735]}, {'': [0.24986479177934004, 0.24489795918367352]}, {'': [0.2498647917793403, 0.24489795918367344]}, {'': [0.24986479177933993, 0.24489795918367346]}, {'': [0.24986479177934026, 0.24489795918367346]}, {'': [0.24986479177934046, 0.2448979591836735]}, {'': [0.24986479177934018, 0.2448979591836735]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Pruning resulted in null theory

Candidate for revision
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.3697768420762556;  // std dev = 0.500, 43.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=22 */
%   else return 0.28672036367094084;  // std dev = 0.495, 7.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=3 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.31856399095141696;  // std dev = 0.500, 43.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=22 */
%   else return 0.24811816884741303;  // std dev = 0.495, 7.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=3 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.26406620901387173;  // std dev = 0.500, 43.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=22 */
%   else return 0.20848477447886868;  // std dev = 0.495, 7.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=3 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.2116898738090047;  // std dev = 0.500, 43.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=22 */
%   else return 0.17062637354018514;  // std dev = 0.495, 7.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=3 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.16545466791447316;  // std dev = 0.500, 43.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=22 */
%   else return 0.13664585375352217;  // std dev = 0.495, 7.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=3 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.12711779198406117;  // std dev = 0.500, 43.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=22 */
%   else return 0.10762034996184422;  // std dev = 0.495, 7.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=3 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.09662725081640343;  // std dev = 0.500, 43.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=22 */
%   else return 0.08372807955323866;  // std dev = 0.495, 7.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=3 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.07299283009042855;  // std dev = 0.500, 43.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=22 */
%   else return 0.06457405393631663;  // std dev = 0.495, 7.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=3 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.054946667649313795;  // std dev = 0.500, 43.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=22 */
%   else return 0.04949778322519479;  // std dev = 0.495, 7.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=3 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.04128402614589619;  // std dev = 0.500, 43.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=22 */
%   else return 0.03777940363354092;  // std dev = 0.495, 7.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=3 */


Results
   AUC ROC   = 0.548677
   AUC PR    = 0.225256
   CLL	      = -0.655316
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 1.511 seconds
Total inference time: 0.923 seconds
AUC ROC: 0.548677


Results scoring model
   AUC ROC   = 0.52
   AUC PR    = 0.510899
   CLL	      = -0.693373
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total scoring time: 0.683 seconds
Refined model CLL: -0.693373


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.548677
   AUC PR    = 0.225256
   CLL	      = -0.655316
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 3.817 seconds
Total inference time: 0.9 seconds
AUC ROC: 0.548677
Total revision time: 3.817
Best scored revision CLL: -0.693373


Dataset: 3_imdb_cora, Fold: 3, Type: Transfer (trRDN-B), Time: 00:13:28
{'AUC ROC': 0.548677, 'AUC PR': 0.225256, 'CLL': -0.655316, 'Precision': [nan, 0.5], 'Recall': 0.0, 'F1': nan, 'Learning time': 3.817, 'Inference time': 0.9, 'parameter_25': {'AUC ROC': 0.548677, 'AUC PR': 0.225256, 'CLL': -0.655316, 'Precision': [nan, 0.5], 'Recall': 0.0, 'F1': nan, 'Learning time': 0.933, 'Inference time': 0.9}}


Starting fold 4

Target train facts examples: 34429
Target train pos examples: 2270
Target train neg examples: 3954

Target test facts examples: 8129
Target test pos	 examples: 747
Target test neg examples: 1068

Amount of data: 5
******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.8581489350995122;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else return 0.30259337954395676;  // std dev = 1.491, 9.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=4 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.7194734122109545;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else return 0.2616318086752123;  // std dev = 1.491, 9.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=4 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.5553664367462845;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else return 0.2192721473492705;  // std dev = 1.491, 9.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=4 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.41751358415830997;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else return 0.17873524574687283;  // std dev = 1.491, 9.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=4 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.32071184716014967;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else return 0.1424392447767628;  // std dev = 1.491, 9.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=4 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.25517224256948945;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else return 0.11159559999632969;  // std dev = 1.491, 9.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=4 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.20975771563253554;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else return 0.08637026299843623;  // std dev = 1.491, 9.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=4 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.17709649774527736;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else return 0.06628370899125427;  // std dev = 1.491, 9.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=4 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.15274385809367097;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else return 0.05057564362187433;  // std dev = 1.491, 9.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=4 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.13400703000801117;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else return 0.038438849075129386;  // std dev = 1.491, 9.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=4 */


Results
   AUC ROC   = 0.576975
   AUC PR    = 0.567681
   CLL	      = -0.629819
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.153949
   F1        = 0.266821


Total learning time: 0.879 seconds
Total inference time: 0.781 seconds
AUC ROC: 0.576975


Results scoring model
   AUC ROC   = 0.6
   AUC PR    = 0.685394
   CLL	      = -0.632522
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.2
   F1        = 0.333333


Total scoring time: 0.631 seconds
Parameter learned model CLL: -0.632522


Structure after Parameter Learning
[['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 1], 'false': [1.491, 5, 4]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 1], 'false': [1.491, 5, 4]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 1], 'false': [1.491, 5, 4]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 1], 'false': [1.491, 5, 4]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 1], 'false': [1.491, 5, 4]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 1], 'false': [1.491, 5, 4]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 1], 'false': [1.491, 5, 4]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 1], 'false': [1.491, 5, 4]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 1], 'false': [1.491, 5, 4]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 1], 'false': [1.491, 5, 4]}]]
[{'': [0.0, 0.2469135802469134]}, {'': [0.0, 0.24691358024691354]}, {'': [0.0, 0.24691358024691365]}, {'': [0.0, 0.2469135802469136]}, {'': [0.0, 0.2469135802469136]}, {'': [0.0, 0.2469135802469136]}, {'': [0.0, 0.2469135802469136]}, {'': [0.0, 0.2469135802469136]}, {'': [0.0, 0.2469135802469136]}, {'': [0.0, 0.2469135802469136]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
1;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
2;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
3;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
4;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
5;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
6;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
7;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
8;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
9;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.8581489350995122;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else return 0.30259337954395676;  // std dev = 0.497, 9.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=4 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.7194734122109545;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else return 0.2616318086752123;  // std dev = 0.497, 9.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=4 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.5553664367462845;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else return 0.2192721473492705;  // std dev = 0.497, 9.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=4 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.41751358415830997;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else return 0.17873524574687283;  // std dev = 0.497, 9.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=4 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.32071184716014967;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else return 0.1424392447767628;  // std dev = 0.497, 9.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=4 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.25517224256948945;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else return 0.11159559999632969;  // std dev = 0.497, 9.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=4 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.20975771563253554;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else return 0.08637026299843623;  // std dev = 0.497, 9.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=4 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.17709649774527736;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else return 0.06628370899125427;  // std dev = 0.497, 9.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=4 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.15274385809367097;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else return 0.05057564362187433;  // std dev = 0.497, 9.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=4 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.13400703000801117;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else return 0.038438849075129386;  // std dev = 0.497, 9.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=4 */


Results
   AUC ROC   = 0.576975
   AUC PR    = 0.567681
   CLL	      = -0.629819
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.153949
   F1        = 0.266821


Total learning time: 1.209 seconds
Total inference time: 0.91 seconds
AUC ROC: 0.576975


Results scoring model
   AUC ROC   = 0.6
   AUC PR    = 0.685394
   CLL	      = -0.632522
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.2
   F1        = 0.333333


Total scoring time: 0.619 seconds
Refined model CLL: -0.632522


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.576975
   AUC PR    = 0.567681
   CLL	      = -0.629819
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.153949
   F1        = 0.266821


Total learning time: 3.338 seconds
Total inference time: 0.781 seconds
AUC ROC: 0.576975
Total revision time: 3.338
Best scored revision CLL: -0.632522


Dataset: 3_imdb_cora, Fold: 4, Type: Transfer (trRDN-B), Time: 00:13:34
{'AUC ROC': 0.576975, 'AUC PR': 0.567681, 'CLL': -0.629819, 'Precision': [1.0, 0.5], 'Recall': 0.153949, 'F1': 0.266821, 'Learning time': 3.338, 'Inference time': 0.781, 'parameter_5': {'AUC ROC': 0.576975, 'AUC PR': 0.567681, 'CLL': -0.629819, 'Precision': [1.0, 0.5], 'Recall': 0.153949, 'F1': 0.266821, 'Learning time': 0.879, 'Inference time': 0.781}}


Amount of data: 10
******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.8581489350995122;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else return 0.3025933795439568;  // std dev = 2.108, 18.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=8 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.7194734122109545;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else return 0.2616318086752123;  // std dev = 2.108, 18.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=8 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.5553664367462845;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else return 0.2192721473492705;  // std dev = 2.108, 18.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=8 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.41751358415830997;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else return 0.1787352457468729;  // std dev = 2.108, 18.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=8 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.32071184716014967;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else return 0.1424392447767627;  // std dev = 2.108, 18.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=8 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.25517224256948945;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else return 0.11159559999632984;  // std dev = 2.108, 18.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=8 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.20975771563253554;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else return 0.08637026299843614;  // std dev = 2.108, 18.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=8 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.17709649774527736;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else return 0.06628370899125427;  // std dev = 2.108, 18.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=8 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.15274385809367097;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else return 0.05057564362187417;  // std dev = 2.108, 18.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=8 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.13400703000801117;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else return 0.03843884907512937;  // std dev = 2.108, 18.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=8 */


Results
   AUC ROC   = 0.576975
   AUC PR    = 0.567681
   CLL	      = -0.629819
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.153949
   F1        = 0.266821


Total learning time: 0.916 seconds
Total inference time: 0.797 seconds
AUC ROC: 0.576975


Results scoring model
   AUC ROC   = 0.6
   AUC PR    = 0.673962
   CLL	      = -0.632522
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.2
   F1        = 0.333333


Total scoring time: 0.646 seconds
Parameter learned model CLL: -0.632522


Structure after Parameter Learning
[['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 2], 'false': [2.108, 10, 8]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 2], 'false': [2.108, 10, 8]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 2], 'false': [2.108, 10, 8]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 2], 'false': [2.108, 10, 8]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 2], 'false': [2.108, 10, 8]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 2], 'false': [2.108, 10, 8]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 2], 'false': [2.108, 10, 8]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 2], 'false': [2.108, 10, 8]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 2], 'false': [2.108, 10, 8]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 2], 'false': [2.108, 10, 8]}]]
[{'': [0.0, 0.2469135802469136]}, {'': [0.0, 0.2469135802469138]}, {'': [0.0, 0.2469135802469134]}, {'': [0.0, 0.24691358024691354]}, {'': [0.0, 0.24691358024691384]}, {'': [0.0, 0.24691358024691348]}, {'': [0.0, 0.24691358024691348]}, {'': [0.0, 0.24691358024691368]}, {'': [0.0, 0.2469135802469136]}, {'': [0.0, 0.24691358024691365]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
1;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
2;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
3;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
4;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
5;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
6;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
7;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
8;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
9;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.8581489350995122;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else return 0.3025933795439568;  // std dev = 0.497, 18.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=8 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.7194734122109545;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else return 0.2616318086752123;  // std dev = 0.497, 18.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=8 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.5553664367462845;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else return 0.2192721473492705;  // std dev = 0.497, 18.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=8 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.41751358415830997;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else return 0.1787352457468729;  // std dev = 0.497, 18.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=8 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.32071184716014967;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else return 0.1424392447767627;  // std dev = 0.497, 18.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=8 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.25517224256948945;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else return 0.11159559999632984;  // std dev = 0.497, 18.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=8 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.20975771563253554;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else return 0.08637026299843614;  // std dev = 0.497, 18.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=8 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.17709649774527736;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else return 0.06628370899125427;  // std dev = 0.497, 18.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=8 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.15274385809367097;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else return 0.05057564362187417;  // std dev = 0.497, 18.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=8 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.13400703000801117;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else return 0.03843884907512937;  // std dev = 0.497, 18.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=8 */


Results
   AUC ROC   = 0.576975
   AUC PR    = 0.567681
   CLL	      = -0.629819
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.153949
   F1        = 0.266821


Total learning time: 1.237 seconds
Total inference time: 0.764 seconds
AUC ROC: 0.576975


Results scoring model
   AUC ROC   = 0.6
   AUC PR    = 0.673962
   CLL	      = -0.632522
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.2
   F1        = 0.333333


Total scoring time: 0.631 seconds
Refined model CLL: -0.632522


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.576975
   AUC PR    = 0.567681
   CLL	      = -0.629819
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.153949
   F1        = 0.266821


Total learning time: 3.4300000000000006 seconds
Total inference time: 0.797 seconds
AUC ROC: 0.576975
Total revision time: 3.4300000000000006
Best scored revision CLL: -0.632522


Dataset: 3_imdb_cora, Fold: 4, Type: Transfer (trRDN-B), Time: 00:13:40
{'AUC ROC': 0.576975, 'AUC PR': 0.567681, 'CLL': -0.629819, 'Precision': [1.0, 0.5], 'Recall': 0.153949, 'F1': 0.266821, 'Learning time': 3.4300000000000006, 'Inference time': 0.797, 'parameter_10': {'AUC ROC': 0.576975, 'AUC PR': 0.567681, 'CLL': -0.629819, 'Precision': [1.0, 0.5], 'Recall': 0.153949, 'F1': 0.266821, 'Learning time': 0.916, 'Inference time': 0.797}}


Amount of data: 15
******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.37666745361803083;  // std dev = 2.596, 27.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=14 */
%   else return 0.19148226843284552;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.32437884151130014;  // std dev = 2.596, 27.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=14 */
%   else return 0.16653882456488175;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.2685825285923573;  // std dev = 2.596, 27.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=14 */
%   else return 0.1420942428155648;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.21495192589405884;  // std dev = 2.596, 27.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=14 */
%   else return 0.11914890490746428;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.16769453154858402;  // std dev = 2.596, 27.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=14 */
%   else return 0.09841340278401862;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.1286166480029106;  // std dev = 2.596, 27.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=14 */
%   else return 0.08026654944252243;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.09762538532838719;  // std dev = 2.596, 27.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=14 */
%   else return 0.06479591611329232;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.07366394600228472;  // std dev = 2.596, 27.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=14 */
%   else return 0.05187916934404054;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.05540606060826155;  // std dev = 2.596, 27.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=14 */
%   else return 0.04126932998424626;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.04160526031693688;  // std dev = 2.596, 27.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=14 */
%   else return 0.032663748734830134;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */


Results
   AUC ROC   = 0.528075
   AUC PR    = 0.425919
   CLL	      = -0.679519
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 0.963 seconds
Total inference time: 0.821 seconds
AUC ROC: 0.528075


Results scoring model
   AUC ROC   = 0.533333
   AUC PR    = 0.517901
   CLL	      = -0.688774
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total scoring time: 0.676 seconds
Parameter learned model CLL: -0.688774


Structure after Parameter Learning
[['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [2.596, 13, 14], 'false': [0.816, 2, 1]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [2.596, 13, 14], 'false': [0.816, 2, 1]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [2.596, 13, 14], 'false': [0.816, 2, 1]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [2.596, 13, 14], 'false': [0.816, 2, 1]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [2.596, 13, 14], 'false': [0.816, 2, 1]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [2.596, 13, 14], 'false': [0.816, 2, 1]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [2.596, 13, 14], 'false': [0.816, 2, 1]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [2.596, 13, 14], 'false': [0.816, 2, 1]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [2.596, 13, 14], 'false': [0.816, 2, 1]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [2.596, 13, 14], 'false': [0.816, 2, 1]}]]
[{'': [0.24965706447187883, 0.22222222222222224]}, {'': [0.24965706447187902, 0.2222222222222222]}, {'': [0.24965706447187944, 0.22222222222222218]}, {'': [0.24965706447187924, 0.22222222222222224]}, {'': [0.24965706447187955, 0.2222222222222222]}, {'': [0.24965706447187944, 0.22222222222222224]}, {'': [0.24965706447187916, 0.22222222222222224]}, {'': [0.2496570644718794, 0.2222222222222222]}, {'': [0.2496570644718793, 0.22222222222222218]}, {'': [0.24965706447187927, 0.2222222222222222]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Pruning resulted in null theory

Candidate for revision
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.37666745361803083;  // std dev = 0.500, 27.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=14 */
%   else return 0.19148226843284552;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.32437884151130014;  // std dev = 0.500, 27.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=14 */
%   else return 0.16653882456488175;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.2685825285923573;  // std dev = 0.500, 27.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=14 */
%   else return 0.1420942428155648;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.21495192589405884;  // std dev = 0.500, 27.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=14 */
%   else return 0.11914890490746428;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.16769453154858402;  // std dev = 0.500, 27.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=14 */
%   else return 0.09841340278401862;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.1286166480029106;  // std dev = 0.500, 27.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=14 */
%   else return 0.08026654944252243;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.09762538532838719;  // std dev = 0.500, 27.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=14 */
%   else return 0.06479591611329232;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.07366394600228472;  // std dev = 0.500, 27.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=14 */
%   else return 0.05187916934404054;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.05540606060826155;  // std dev = 0.500, 27.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=14 */
%   else return 0.04126932998424626;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.04160526031693688;  // std dev = 0.500, 27.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=14 */
%   else return 0.032663748734830134;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */


Results
   AUC ROC   = 0.528075
   AUC PR    = 0.425919
   CLL	      = -0.679519
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 1.384 seconds
Total inference time: 0.806 seconds
AUC ROC: 0.528075


Results scoring model
   AUC ROC   = 0.533333
   AUC PR    = 0.517901
   CLL	      = -0.688774
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total scoring time: 0.663 seconds
Refined model CLL: -0.688774


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.528075
   AUC PR    = 0.425919
   CLL	      = -0.679519
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 3.686 seconds
Total inference time: 0.821 seconds
AUC ROC: 0.528075
Total revision time: 3.686
Best scored revision CLL: -0.688774


Dataset: 3_imdb_cora, Fold: 4, Type: Transfer (trRDN-B), Time: 00:13:46
{'AUC ROC': 0.528075, 'AUC PR': 0.425919, 'CLL': -0.679519, 'Precision': [nan, 0.5], 'Recall': 0.0, 'F1': nan, 'Learning time': 3.686, 'Inference time': 0.821, 'parameter_15': {'AUC ROC': 0.528075, 'AUC PR': 0.425919, 'CLL': -0.679519, 'Precision': [nan, 0.5], 'Recall': 0.0, 'F1': nan, 'Learning time': 0.963, 'Inference time': 0.821}}


Amount of data: 20
******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.8581489350995121;  // std dev = 2.11e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return 0.31760839455897183;  // std dev = 3.031, 37.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=17 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.7194734122109545;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return 0.2743930062984994;  // std dev = 3.031, 37.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=17 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.5553664367462845;  // std dev = 1.05e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return 0.22940409212560184;  // std dev = 3.031, 37.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=17 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.41751358415830997;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return 0.18628870627050972;  // std dev = 3.031, 37.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=17 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.32071184716014967;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return 0.14778567561990727;  // std dev = 3.031, 37.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=17 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.25517224256948945;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return 0.11523398454885339;  // std dev = 3.031, 37.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=17 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.20975771563253554;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return 0.08877605966596111;  // std dev = 3.031, 37.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=17 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.17709649774527736;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return 0.06784002556264199;  // std dev = 3.031, 37.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=17 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.15274385809367097;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return 0.05156345950024885;  // std dev = 3.031, 37.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=17 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.13400703000801117;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return 0.03905337379799511;  // std dev = 3.031, 37.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=17 */


Results
   AUC ROC   = 0.576975
   AUC PR    = 0.567681
   CLL	      = -0.632677
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.153949
   F1        = 0.266821


Total learning time: 0.913 seconds
Total inference time: 0.855 seconds
AUC ROC: 0.576975


Results scoring model
   AUC ROC   = 0.575
   AUC PR    = 0.638591
   CLL	      = -0.649272
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.15
   F1        = 0.26087


Total scoring time: 0.676 seconds
Parameter learned model CLL: -0.649272


Structure after Parameter Learning
[['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [2.11e-08, 0, 3], 'false': [3.031, 20, 17]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 3], 'false': [3.031, 20, 17]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [1.05e-08, 0, 3], 'false': [3.031, 20, 17]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 3], 'false': [3.031, 20, 17]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 3], 'false': [3.031, 20, 17]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 3], 'false': [3.031, 20, 17]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 3], 'false': [3.031, 20, 17]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 3], 'false': [3.031, 20, 17]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 3], 'false': [3.031, 20, 17]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 3], 'false': [3.031, 20, 17]}]]
[{'': [1.4802973661668753e-16, 0.24835646457268032]}, {'': [0.0, 0.24835646457268137]}, {'': [3.700743415417188e-17, 0.2483564645726806]}, {'': [-3.700743415417188e-17, 0.24835646457268118]}, {'': [0.0, 0.24835646457268037]}, {'': [0.0, 0.24835646457268085]}, {'': [0.0, 0.24835646457268098]}, {'': [0.0, 0.24835646457268104]}, {'': [-4.625929269271485e-18, 0.2483564645726807]}, {'': [-2.3129646346357427e-18, 0.24835646457268074]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
1;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
2;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
3;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
4;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
5;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
6;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
7;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
8;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
9;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.8581489350995121;  // std dev = 2.11e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( haswordvenue(B, D), haswordtitle(E, D) )
%   | then return 0.35814893509951234;  // std dev = 0.500, 34.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=17 */
%   | else return -0.14185106490048777;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.7194734122109545;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( haswordvenue(B, D), haswordtitle(E, D) )
%   | then return 0.3087411357856347;  // std dev = 0.500, 34.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=17 */
%   | else return -0.12544463852839138;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.5553664367462845;  // std dev = 1.05e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( haswordvenue(B, D), haswordtitle(E, D) )
%   | then return 0.25641236875858675;  // std dev = 0.500, 34.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=17 */
%   | else return -0.11231637819360639;  // std dev = 2.63e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.41751358415830997;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( haswordvenue(B, D), haswordtitle(E, D) )
%   | then return 0.20613740734453997;  // std dev = 0.500, 34.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=17 */
%   | else return -0.1015963294878363;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.32071184716014967;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( haswordvenue(B, D), haswordtitle(E, D) )
%   | then return 0.16162857548414647;  // std dev = 0.500, 34.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=17 */
%   | else return -0.09269127618926094;  // std dev = 2.63e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.25517224256948945;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( haswordvenue(B, D), haswordtitle(E, D) )
%   | then return 0.12455597792081956;  // std dev = 0.500, 34.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=17 */
%   | else return -0.08518475138839687;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.20975771563253554;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( haswordvenue(B, D), haswordtitle(E, D) )
%   | then return 0.09492800936730651;  // std dev = 0.500, 34.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=17 */
%   | else return -0.07877675473109173;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.17709649774527736;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( haswordvenue(B, D), haswordtitle(E, D) )
%   | then return 0.07186088850055873;  // std dev = 0.500, 34.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=17 */
%   | else return -0.07324622576333704;  // std dev = 1.86e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.15274385809367097;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( haswordvenue(B, D), haswordtitle(E, D) )
%   | then return 0.054183073759549505;  // std dev = 0.500, 34.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=17 */
%   | else return -0.06842697784420272;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.13400703000801117;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( haswordvenue(B, D), haswordtitle(E, D) )
%   | then return 0.040760253233056314;  // std dev = 0.500, 34.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=17 */
%   | else return -0.0641918400820262;  // std dev = 1.32e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */


Results
   AUC ROC   = 0.582695
   AUC PR    = 0.570484
   CLL	      = -0.65409
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.153949
   F1        = 0.266821


Total learning time: 10.875 seconds
Total inference time: 1.057 seconds
AUC ROC: 0.582695


Results scoring model
   AUC ROC   = 0.63875
   AUC PR    = 0.670539
   CLL	      = -0.604968
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.15
   F1        = 0.26087


Total scoring time: 0.709 seconds
Refined model CLL: -0.604968


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.582695
   AUC PR    = 0.570484
   CLL	      = -0.65409
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.153949
   F1        = 0.266821


Total learning time: 13.173 seconds
Total inference time: 1.057 seconds
AUC ROC: 0.582695
Total revision time: 13.173
Best scored revision CLL: -0.604968


Dataset: 3_imdb_cora, Fold: 4, Type: Transfer (trRDN-B), Time: 00:14:01
{'AUC ROC': 0.582695, 'AUC PR': 0.570484, 'CLL': -0.65409, 'Precision': [1.0, 0.5], 'Recall': 0.153949, 'F1': 0.266821, 'Learning time': 13.173, 'Inference time': 1.057, 'parameter_20': {'AUC ROC': 0.576975, 'AUC PR': 0.567681, 'CLL': -0.632677, 'Precision': [1.0, 0.5], 'Recall': 0.153949, 'F1': 0.266821, 'Learning time': 0.913, 'Inference time': 0.855}}


Amount of data: 25
******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.8581489350995122;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else return 0.31467067422994655;  // std dev = 3.378, 46.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=21 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.7194734122109545;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else return 0.2718979338779211;  // std dev = 3.378, 46.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=21 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.5553664367462845;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else return 0.22742727023532366;  // std dev = 3.378, 46.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=21 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.41751358415830997;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else return 0.18481967858369794;  // std dev = 3.378, 46.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=21 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.32071184716014967;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else return 0.14674952708917505;  // std dev = 3.378, 46.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=21 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.25517224256948945;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else return 0.11453090292473048;  // std dev = 3.378, 46.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=21 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.20975771563253554;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else return 0.08831182757523444;  // std dev = 3.378, 46.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=21 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.17709649774527736;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else return 0.06753946269031201;  // std dev = 3.378, 46.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=21 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.15274385809367097;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else return 0.05137193645873037;  // std dev = 3.378, 46.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=21 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.13400703000801117;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else return 0.03893324925844389;  // std dev = 3.378, 46.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=21 */


Results
   AUC ROC   = 0.576975
   AUC PR    = 0.567681
   CLL	      = -0.632055
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.153949
   F1        = 0.266821


Total learning time: 0.908 seconds
Total inference time: 0.783 seconds
AUC ROC: 0.576975


Results scoring model
   AUC ROC   = 0.58
   AUC PR    = 0.644703
   CLL	      = -0.645987
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.16
   F1        = 0.275862


Total scoring time: 0.656 seconds
Parameter learned model CLL: -0.645987


Structure after Parameter Learning
[['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 4], 'false': [3.378, 25, 21]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 4], 'false': [3.378, 25, 21]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 4], 'false': [3.378, 25, 21]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 4], 'false': [3.378, 25, 21]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 4], 'false': [3.378, 25, 21]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 4], 'false': [3.378, 25, 21]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 4], 'false': [3.378, 25, 21]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 4], 'false': [3.378, 25, 21]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 4], 'false': [3.378, 25, 21]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 4], 'false': [3.378, 25, 21]}]]
[{'': [0.0, 0.2481096408317579]}, {'': [0.0, 0.2481096408317583]}, {'': [0.0, 0.24810964083175807]}, {'': [0.0, 0.24810964083175777]}, {'': [0.0, 0.24810964083175846]}, {'': [0.0, 0.24810964083175827]}, {'': [0.0, 0.24810964083175777]}, {'': [0.0, 0.2481096408317585]}, {'': [0.0, 0.248109640831758]}, {'': [0.0, 0.24810964083175827]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
1;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
2;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
3;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
4;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
5;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
6;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
7;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
8;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
9;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.8581489350995122;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.34595381314829243;  // std dev = 0.500, 41.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=20 */
%   | else return 0.0581489350995122;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.7194734122109545;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( haswordvenue(B, D), haswordtitle(E, D) )
%   | then return 0.2994082106718219;  // std dev = 0.501, 41.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=20 */
%   | else return 0.04286169903599901;  // std dev = 0.858, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.5553664367462845;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( haswordvenue(B, D), haswordtitle(E, D) )
%   | then return 0.24934425242116462;  // std dev = 0.501, 41.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=20 */
%   | else return 0.037112695601109504;  // std dev = 0.857, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.41751358415830997;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.20193861354979636;  // std dev = 0.502, 41.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=20 */
%   | else return 0.025850768023937182;  // std dev = 0.829, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.32071184716014967;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.15904339766624823;  // std dev = 0.502, 41.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=20 */
%   | else return 0.022124202223273236;  // std dev = 0.828, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.25517224256948945;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( haswordvenue(B, D), haswordtitle(E, D) )
%   | then return 0.12368813485259475;  // std dev = 0.503, 41.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=20 */
%   | else return 0.013886783128861612;  // std dev = 0.805, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.20975771563253554;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( haswordvenue(B, D), haswordtitle(E, D) )
%   | then return 0.09464757069095271;  // std dev = 0.504, 41.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=20 */
%   | else return 0.011796745900739569;  // std dev = 0.804, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.17709649774527736;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.07218959908005099;  // std dev = 0.504, 41.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=20 */
%   | else return 0.007576845842619207;  // std dev = 0.793, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.15274385809367097;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( haswordvenue(B, D), haswordtitle(E, D) )
%   | then return 0.054614905093548605;  // std dev = 0.504, 41.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=20 */
%   | else return 0.00624955367567952;  // std dev = 0.791, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.13400703000801117;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.04141330819153339;  // std dev = 0.505, 41.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=20 */
%   | else return 0.0034510375668317496;  // std dev = 0.783, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */


Results
   AUC ROC   = 0.593524
   AUC PR    = 0.576013
   CLL	      = -0.634306
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.153949
   F1        = 0.266821


Total learning time: 6.584 seconds
Total inference time: 1.012 seconds
AUC ROC: 0.593524


Results scoring model
   AUC ROC   = 0.6136
   AUC PR    = 0.660224
   CLL	      = -0.627748
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.16
   F1        = 0.275862


Total scoring time: 0.696 seconds
Refined model CLL: -0.627748


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.593524
   AUC PR    = 0.576013
   CLL	      = -0.634306
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.153949
   F1        = 0.266821


Total learning time: 8.844 seconds
Total inference time: 1.012 seconds
AUC ROC: 0.593524
Total revision time: 8.844
Best scored revision CLL: -0.627748


Dataset: 3_imdb_cora, Fold: 4, Type: Transfer (trRDN-B), Time: 00:14:13
{'AUC ROC': 0.593524, 'AUC PR': 0.576013, 'CLL': -0.634306, 'Precision': [1.0, 0.5], 'Recall': 0.153949, 'F1': 0.266821, 'Learning time': 8.844, 'Inference time': 1.012, 'parameter_25': {'AUC ROC': 0.576975, 'AUC PR': 0.567681, 'CLL': -0.632055, 'Precision': [1.0, 0.5], 'Recall': 0.153949, 'F1': 0.266821, 'Learning time': 0.908, 'Inference time': 0.783}}


Starting fold 5

Target train facts examples: 33914
Target train pos examples: 2467
Target train neg examples: 4522

Target test facts examples: 8644
Target test pos	 examples: 550
Target test neg examples: 500

Amount of data: 5
******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.8581489350995122;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else return 0.30259337954395676;  // std dev = 1.491, 9.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=4 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.7194734122109545;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else return 0.2616318086752123;  // std dev = 1.491, 9.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=4 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.5553664367462845;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else return 0.2192721473492705;  // std dev = 1.491, 9.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=4 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.41751358415830997;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else return 0.17873524574687283;  // std dev = 1.491, 9.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=4 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.32071184716014967;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else return 0.1424392447767628;  // std dev = 1.491, 9.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=4 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.25517224256948945;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else return 0.11159559999632969;  // std dev = 1.491, 9.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=4 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.20975771563253554;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else return 0.08637026299843623;  // std dev = 1.491, 9.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=4 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.17709649774527736;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else return 0.06628370899125427;  // std dev = 1.491, 9.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=4 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.15274385809367097;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else return 0.05057564362187433;  // std dev = 1.491, 9.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=4 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.13400703000801117;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else return 0.038438849075129386;  // std dev = 1.491, 9.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=4 */


Results
   AUC ROC   = 0.574545
   AUC PR    = 0.655418
   CLL	      = -0.657134
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.149091
   F1        = 0.259494


Total learning time: 0.906 seconds
Total inference time: 0.681 seconds
AUC ROC: 0.574545


Results scoring model
   AUC ROC   = 0.6
   AUC PR    = 0.685394
   CLL	      = -0.632522
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.2
   F1        = 0.333333


Total scoring time: 0.65 seconds
Parameter learned model CLL: -0.632522


Structure after Parameter Learning
[['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 1], 'false': [1.491, 5, 4]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 1], 'false': [1.491, 5, 4]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 1], 'false': [1.491, 5, 4]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 1], 'false': [1.491, 5, 4]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 1], 'false': [1.491, 5, 4]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 1], 'false': [1.491, 5, 4]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 1], 'false': [1.491, 5, 4]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 1], 'false': [1.491, 5, 4]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 1], 'false': [1.491, 5, 4]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 1], 'false': [1.491, 5, 4]}]]
[{'': [0.0, 0.2469135802469134]}, {'': [0.0, 0.24691358024691354]}, {'': [0.0, 0.24691358024691365]}, {'': [0.0, 0.2469135802469136]}, {'': [0.0, 0.2469135802469136]}, {'': [0.0, 0.2469135802469136]}, {'': [0.0, 0.2469135802469136]}, {'': [0.0, 0.2469135802469136]}, {'': [0.0, 0.2469135802469136]}, {'': [0.0, 0.2469135802469136]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
1;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
2;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
3;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
4;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
5;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
6;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
7;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
8;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
9;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.8581489350995122;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else return 0.30259337954395676;  // std dev = 0.497, 9.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=4 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.7194734122109545;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else return 0.2616318086752123;  // std dev = 0.497, 9.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=4 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.5553664367462845;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else return 0.2192721473492705;  // std dev = 0.497, 9.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=4 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.41751358415830997;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else return 0.17873524574687283;  // std dev = 0.497, 9.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=4 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.32071184716014967;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else return 0.1424392447767628;  // std dev = 0.497, 9.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=4 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.25517224256948945;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else return 0.11159559999632969;  // std dev = 0.497, 9.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=4 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.20975771563253554;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else return 0.08637026299843623;  // std dev = 0.497, 9.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=4 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.17709649774527736;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else return 0.06628370899125427;  // std dev = 0.497, 9.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=4 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.15274385809367097;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else return 0.05057564362187433;  // std dev = 0.497, 9.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=4 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.13400703000801117;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else return 0.038438849075129386;  // std dev = 0.497, 9.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=4 */


Results
   AUC ROC   = 0.574545
   AUC PR    = 0.655418
   CLL	      = -0.657134
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.149091
   F1        = 0.259494


Total learning time: 1.206 seconds
Total inference time: 0.696 seconds
AUC ROC: 0.574545


Results scoring model
   AUC ROC   = 0.6
   AUC PR    = 0.685394
   CLL	      = -0.632522
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.2
   F1        = 0.333333


Total scoring time: 0.642 seconds
Refined model CLL: -0.632522


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.574545
   AUC PR    = 0.655418
   CLL	      = -0.657134
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.149091
   F1        = 0.259494


Total learning time: 3.404 seconds
Total inference time: 0.681 seconds
AUC ROC: 0.574545
Total revision time: 3.404
Best scored revision CLL: -0.632522


Dataset: 3_imdb_cora, Fold: 5, Type: Transfer (trRDN-B), Time: 00:14:18
{'AUC ROC': 0.574545, 'AUC PR': 0.655418, 'CLL': -0.657134, 'Precision': [1.0, 0.5], 'Recall': 0.149091, 'F1': 0.259494, 'Learning time': 3.404, 'Inference time': 0.681, 'parameter_5': {'AUC ROC': 0.574545, 'AUC PR': 0.655418, 'CLL': -0.657134, 'Precision': [1.0, 0.5], 'Recall': 0.149091, 'F1': 0.259494, 'Learning time': 0.906, 'Inference time': 0.681}}


Amount of data: 10
******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.8581489350995122;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else return 0.33183314562582816;  // std dev = 2.176, 19.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=9 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.7194734122109545;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else return 0.28646280754165054;  // std dev = 2.176, 19.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=9 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.5553664367462845;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else return 0.23893826810287416;  // std dev = 2.176, 19.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=9 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.41751358415830997;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else return 0.19334220366104113;  // std dev = 2.176, 19.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=9 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.32071184716014967;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else return 0.15273729662465255;  // std dev = 2.176, 19.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=9 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.25517224256948945;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else return 0.11858202407945204;  // std dev = 2.176, 19.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=9 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.20975771563253554;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else return 0.09098433275637943;  // std dev = 2.176, 19.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=9 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.17709649774527736;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else return 0.06927339775071423;  // std dev = 2.176, 19.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=9 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.15274385809367097;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else return 0.052483554573519914;  // std dev = 2.176, 19.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=9 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.13400703000801117;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else return 0.0396383789772704;  // std dev = 2.176, 19.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=9 */


Results
   AUC ROC   = 0.574545
   AUC PR    = 0.655418
   CLL	      = -0.651348
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.149091
   F1        = 0.259494


Total learning time: 0.947 seconds
Total inference time: 0.726 seconds
AUC ROC: 0.574545


Results scoring model
   AUC ROC   = 0.55
   AUC PR    = 0.608377
   CLL	      = -0.665231
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.1
   F1        = 0.181818


Total scoring time: 0.67 seconds
Parameter learned model CLL: -0.665231


Structure after Parameter Learning
[['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 1], 'false': [2.176, 10, 9]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 1], 'false': [2.176, 10, 9]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 1], 'false': [2.176, 10, 9]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 1], 'false': [2.176, 10, 9]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 1], 'false': [2.176, 10, 9]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 1], 'false': [2.176, 10, 9]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 1], 'false': [2.176, 10, 9]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 1], 'false': [2.176, 10, 9]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 1], 'false': [2.176, 10, 9]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 1], 'false': [2.176, 10, 9]}]]
[{'': [0.0, 0.2493074792243767]}, {'': [0.0, 0.24930747922437685]}, {'': [0.0, 0.249307479224377]}, {'': [0.0, 0.24930747922437685]}, {'': [0.0, 0.24930747922437663]}, {'': [0.0, 0.24930747922437657]}, {'': [0.0, 0.24930747922437685]}, {'': [0.0, 0.2493074792243767]}, {'': [0.0, 0.2493074792243768]}, {'': [0.0, 0.2493074792243768]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
1;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
2;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
3;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
4;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
5;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
6;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
7;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
8;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
9;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.8581489350995122;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.8581489350995121;  // std dev = 2.11e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return 0.23314893509951234;  // std dev = 0.484, 16.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=6 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.7194734122109545;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.7194734122109545;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return 0.202334239218108;  // std dev = 0.484, 16.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=6 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.5553664367462845;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else return 0.23210444337281477;  // std dev = 0.466, 19.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=9 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.41751358415830997;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.4975683215010007;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return 0.13128382089151402;  // std dev = 0.484, 16.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=6 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.32071184716014967;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.3758278281241878;  // std dev = 7.45e-09, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return 0.10628040940321029;  // std dev = 0.484, 16.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=6 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.25517224256948945;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.2925310471928245;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return 0.08488964679498039;  // std dev = 0.484, 16.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=6 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.20975771563253554;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.2358345204381801;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return 0.067100661945181;  // std dev = 0.484, 16.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=6 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.17709649774527736;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.1959993857397101;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return 0.052620471505318345;  // std dev = 0.484, 16.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=6 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.15274385809367097;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.16693767867847265;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return 0.041019729203395805;  // std dev = 0.484, 16.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=6 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.13400703000801117;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.14499282870906993;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return 0.03183413856336946;  // std dev = 0.484, 16.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=6 */


Results
   AUC ROC   = 0.552196
   AUC PR    = 0.634229
   CLL	      = -0.754808
   Precision = 0.638743 at threshold = 0.5
   Recall    = 0.221818
   F1        = 0.329285


Total learning time: 1.426 seconds
Total inference time: 0.755 seconds
AUC ROC: 0.552196


Results scoring model
   AUC ROC   = 0.7
   AUC PR    = 0.779088
   CLL	      = -0.557184
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.4
   F1        = 0.571429


Total scoring time: 0.71 seconds
Refined model CLL: -0.557184


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.552196
   AUC PR    = 0.634229
   CLL	      = -0.754808
   Precision = 0.638743 at threshold = 0.5
   Recall    = 0.221818
   F1        = 0.329285


Total learning time: 3.753 seconds
Total inference time: 0.755 seconds
AUC ROC: 0.552196
Total revision time: 3.753
Best scored revision CLL: -0.557184


Dataset: 3_imdb_cora, Fold: 5, Type: Transfer (trRDN-B), Time: 00:14:24
{'AUC ROC': 0.552196, 'AUC PR': 0.634229, 'CLL': -0.754808, 'Precision': [0.638743, 0.5], 'Recall': 0.221818, 'F1': 0.329285, 'Learning time': 3.753, 'Inference time': 0.755, 'parameter_10': {'AUC ROC': 0.574545, 'AUC PR': 0.655418, 'CLL': -0.651348, 'Precision': [1.0, 0.5], 'Recall': 0.149091, 'F1': 0.259494, 'Learning time': 0.947, 'Inference time': 0.726}}


Amount of data: 15
******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.41370449065506787;  // std dev = 2.582, 27.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=15 */
%   else return -0.14185106490048777;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.3555557392714985;  // std dev = 2.582, 27.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=15 */
%   else return -0.12544463852839138;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.29261484610968785;  // std dev = 2.582, 27.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=15 */
%   else return -0.11231637819360639;  // std dev = 2.63e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.23214124828648158;  // std dev = 2.582, 27.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=15 */
%   else return -0.1015963294878363;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.17942003892665268;  // std dev = 2.582, 27.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=15 */
%   else return -0.09269127618926094;  // std dev = 2.63e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.13647857812921962;  // std dev = 2.582, 27.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=15 */
%   else return -0.08518475138839687;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.10293424750437853;  // std dev = 2.582, 27.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=15 */
%   else return -0.07877675473109173;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.07732947852152011;  // std dev = 2.582, 27.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=15 */
%   else return -0.07324622576333704;  // std dev = 1.86e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.05801086896812466;  // std dev = 2.582, 27.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=15 */
%   else return -0.06842697784420272;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.04351050232227124;  // std dev = 2.582, 27.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=15 */
%   else return -0.0641918400820262;  // std dev = 1.32e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */


Results
   AUC ROC   = 0.614727
   AUC PR    = 0.592038
   CLL	      = -0.694314
   Precision = 0.595694 at threshold = 0.5
   Recall    = 0.905455
   F1        = 0.718615


Total learning time: 0.918 seconds
Total inference time: 0.744 seconds
AUC ROC: 0.614727


Results scoring model
   AUC ROC   = 0.6
   AUC PR    = 0.555556
   CLL	      = -0.626428
   Precision = 0.555556 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.714286


Total scoring time: 0.678 seconds
Parameter learned model CLL: -0.626428


Structure after Parameter Learning
[['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [2.582, 12, 15], 'false': [0.0, 3, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [2.582, 12, 15], 'false': [0.0, 3, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [2.582, 12, 15], 'false': [2.63e-09, 3, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [2.582, 12, 15], 'false': [0.0, 3, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [2.582, 12, 15], 'false': [2.63e-09, 3, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [2.582, 12, 15], 'false': [0.0, 3, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [2.582, 12, 15], 'false': [0.0, 3, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [2.582, 12, 15], 'false': [1.86e-09, 3, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [2.582, 12, 15], 'false': [0.0, 3, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [2.582, 12, 15], 'false': [1.32e-09, 3, 0]}]]
[{'': [0.24691358024691312, 0.0]}, {'': [0.24691358024691415, 0.0]}, {'': [0.24691358024691415, 2.3129646346357427e-18]}, {'': [0.24691358024691343, -1.1564823173178713e-18]}, {'': [0.24691358024691337, 2.3129646346357427e-18]}, {'': [0.24691358024691348, 0.0]}, {'': [0.24691358024691346, 0.0]}, {'': [0.24691358024691365, 1.1564823173178713e-18]}, {'': [0.24691358024691348, -5.782411586589357e-19]}, {'': [0.24691358024691354, 5.782411586589357e-19]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.41370449065506787;  // std dev = 0.497, 27.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=15 */
%   else return -0.14185106490048777;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.8000001837159433;  // std dev = 1.49e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return 0.30000018371594317;  // std dev = 0.500, 24.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=12 */
%   else return -0.12544463852839138;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.6425146706345224;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return 0.24768346554910728;  // std dev = 0.500, 24.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=12 */
%   else return -0.11231637819360639;  // std dev = 2.63e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.48594886440588625;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return 0.19817277717198492;  // std dev = 0.500, 24.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=12 */
%   else return -0.1015963294878363;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.3676833458014371;  // std dev = 1.05e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return 0.15485270915213198;  // std dev = 0.500, 24.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=12 */
%   else return -0.09269127618926094;  // std dev = 2.63e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.28703021460310285;  // std dev = 5.27e-09, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return 0.11906614501789554;  // std dev = 0.500, 24.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=12 */
%   else return -0.08518475138839687;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.232030396730196;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return 0.09061787617821086;  // std dev = 0.500, 24.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=12 */
%   else return -0.07877675473109173;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.19326823787506398;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return 0.0685413461174377;  // std dev = 0.500, 24.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=12 */
%   else return -0.07324622576333704;  // std dev = 1.86e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.1649043852437705;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return 0.05165529207236016;  // std dev = 0.500, 24.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=12 */
%   else return -0.06842697784420272;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.14343050880617414;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return 0.038847973560056856;  // std dev = 0.500, 24.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=12 */
%   else return -0.0641918400820262;  // std dev = 1.32e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */


Results
   AUC ROC   = 0.605095
   AUC PR    = 0.573681
   CLL	      = -0.73528
   Precision = 0.491803 at threshold = 0.5
   Recall    = 0.054545
   F1        = 0.0982


Total learning time: 1.632 seconds
Total inference time: 0.892 seconds
AUC ROC: 0.605095


Results scoring model
   AUC ROC   = 0.68
   AUC PR    = 0.71162
   CLL	      = -0.575664
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.2
   F1        = 0.333333


Total scoring time: 0.719 seconds
Refined model CLL: -0.575664


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.605095
   AUC PR    = 0.573681
   CLL	      = -0.73528
   Precision = 0.491803 at threshold = 0.5
   Recall    = 0.054545
   F1        = 0.0982


Total learning time: 3.9469999999999996 seconds
Total inference time: 0.892 seconds
AUC ROC: 0.605095
Total revision time: 3.9469999999999996
Best scored revision CLL: -0.575664


Dataset: 3_imdb_cora, Fold: 5, Type: Transfer (trRDN-B), Time: 00:14:30
{'AUC ROC': 0.605095, 'AUC PR': 0.573681, 'CLL': -0.73528, 'Precision': [0.491803, 0.5], 'Recall': 0.054545, 'F1': 0.0982, 'Learning time': 3.9469999999999996, 'Inference time': 0.892, 'parameter_15': {'AUC ROC': 0.614727, 'AUC PR': 0.592038, 'CLL': -0.694314, 'Precision': [0.595694, 0.5], 'Recall': 0.905455, 'F1': 0.718615, 'Learning time': 0.918, 'Inference time': 0.744}}


Amount of data: 20
******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.8581489350995121;  // std dev = 2.11e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return 0.31760839455897183;  // std dev = 3.031, 37.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=17 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.7194734122109545;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return 0.2743930062984994;  // std dev = 3.031, 37.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=17 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.5553664367462845;  // std dev = 1.05e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return 0.22940409212560184;  // std dev = 3.031, 37.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=17 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.41751358415830997;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return 0.18628870627050972;  // std dev = 3.031, 37.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=17 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.32071184716014967;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return 0.14778567561990727;  // std dev = 3.031, 37.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=17 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.25517224256948945;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return 0.11523398454885339;  // std dev = 3.031, 37.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=17 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.20975771563253554;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return 0.08877605966596111;  // std dev = 3.031, 37.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=17 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.17709649774527736;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return 0.06784002556264199;  // std dev = 3.031, 37.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=17 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.15274385809367097;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return 0.05156345950024885;  // std dev = 3.031, 37.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=17 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.13400703000801117;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return 0.03905337379799511;  // std dev = 3.031, 37.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=17 */


Results
   AUC ROC   = 0.574545
   AUC PR    = 0.655418
   CLL	      = -0.653768
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.149091
   F1        = 0.259494


Total learning time: 1.009 seconds
Total inference time: 0.708 seconds
AUC ROC: 0.574545


Results scoring model
   AUC ROC   = 0.575
   AUC PR    = 0.638591
   CLL	      = -0.649272
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.15
   F1        = 0.26087


Total scoring time: 0.675 seconds
Parameter learned model CLL: -0.649272


Structure after Parameter Learning
[['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [2.11e-08, 0, 3], 'false': [3.031, 20, 17]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 3], 'false': [3.031, 20, 17]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [1.05e-08, 0, 3], 'false': [3.031, 20, 17]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 3], 'false': [3.031, 20, 17]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 3], 'false': [3.031, 20, 17]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 3], 'false': [3.031, 20, 17]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 3], 'false': [3.031, 20, 17]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 3], 'false': [3.031, 20, 17]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 3], 'false': [3.031, 20, 17]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 3], 'false': [3.031, 20, 17]}]]
[{'': [1.4802973661668753e-16, 0.24835646457268032]}, {'': [0.0, 0.24835646457268137]}, {'': [3.700743415417188e-17, 0.2483564645726806]}, {'': [-3.700743415417188e-17, 0.24835646457268118]}, {'': [0.0, 0.24835646457268037]}, {'': [0.0, 0.24835646457268085]}, {'': [0.0, 0.24835646457268098]}, {'': [0.0, 0.24835646457268104]}, {'': [-4.625929269271485e-18, 0.2483564645726807]}, {'': [-2.3129646346357427e-18, 0.24835646457268074]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
1;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
2;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
3;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
4;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
5;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
6;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
7;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
8;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
9;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.8581489350995121;  // std dev = 2.11e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.35814893509951234;  // std dev = 0.500, 34.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=17 */
%   | else return -0.14185106490048777;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.7194734122109545;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( haswordvenue(B, D), haswordtitle(E, D) )
%   | then return 0.31067684830581044;  // std dev = 0.498, 34.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=17 */
%   | else return -0.14738271375704926;  // std dev = 0.054, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.5553664367462845;  // std dev = 1.05e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( haswordvenue(B, D), haswordtitle(E, D) )
%   | then return 0.25841655796572677;  // std dev = 0.498, 34.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=17 */
%   | else return -0.12992901089260392;  // std dev = 0.048, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.41751358415830997;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.45531918523206344;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | else if ( haswordvenue(A, F), haswordvenue(B, F) )
%   | | then return 0.17674257795495568;  // std dev = 0.495, 30.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=14 */
%   | | else return -0.13275343302356502;  // std dev = 0.085, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.32071184716014967;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.16432656878169577;  // std dev = 0.493, 34.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=17 */
%   | else return -0.11847738828618164;  // std dev = 0.077, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.25517224256948945;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( haswordvenue(B, D), haswordtitle(E, D) )
%   | then return 0.12804535689118052;  // std dev = 0.492, 34.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=17 */
%   | else return -0.11907840574213531;  // std dev = 0.101, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.20975771563253554;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.28122594545118806;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | else if ( haswordvenue(A, F), haswordvenue(B, F) )
%   | | then return 0.07348230724995683;  // std dev = 0.494, 30.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=14 */
%   | | else return -0.10755650053344064;  // std dev = 0.092, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.17709649774527736;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.21103929227251786;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | else if ( haswordvenue(B, F), haswordtitle(G, F) )
%   | | then return 0.056822127214891535;  // std dev = 0.493, 30.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=14 */
%   | | else return -0.10679388293971404;  // std dev = 0.107, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.15274385809367097;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( haswordvenue(B, D), haswordtitle(E, D) )
%   | then return 0.05678719054701559;  // std dev = 0.488, 34.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=17 */
%   | else return -0.09738629211838638;  // std dev = 0.099, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.13400703000801117;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.04358890955118886;  // std dev = 0.487, 34.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=17 */
%   | else return -0.09604196112379008;  // std dev = 0.108, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */


Results
   AUC ROC   = 0.650949
   AUC PR    = 0.689006
   CLL	      = -0.66077
   Precision = 0.77037 at threshold = 0.5
   Recall    = 0.189091
   F1        = 0.30365


Total learning time: 7.248 seconds
Total inference time: 0.818 seconds
AUC ROC: 0.650949


Results scoring model
   AUC ROC   = 0.69875
   AUC PR    = 0.728663
   CLL	      = -0.584688
   Precision = 0.857143 at threshold = 0.5
   Recall    = 0.3
   F1        = 0.444444


Total scoring time: 0.708 seconds
Refined model CLL: -0.584688


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.650949
   AUC PR    = 0.689006
   CLL	      = -0.66077
   Precision = 0.77037 at threshold = 0.5
   Recall    = 0.189091
   F1        = 0.30365


Total learning time: 9.64 seconds
Total inference time: 0.818 seconds
AUC ROC: 0.650949
Total revision time: 9.64
Best scored revision CLL: -0.584688


Dataset: 3_imdb_cora, Fold: 5, Type: Transfer (trRDN-B), Time: 00:14:42
{'AUC ROC': 0.650949, 'AUC PR': 0.689006, 'CLL': -0.66077, 'Precision': [0.77037, 0.5], 'Recall': 0.189091, 'F1': 0.30365, 'Learning time': 9.64, 'Inference time': 0.818, 'parameter_20': {'AUC ROC': 0.574545, 'AUC PR': 0.655418, 'CLL': -0.653768, 'Precision': [1.0, 0.5], 'Recall': 0.149091, 'F1': 0.259494, 'Learning time': 1.009, 'Inference time': 0.708}}


Amount of data: 25
******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.41370449065506687;  // std dev = 3.333, 45.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=25 */
%   else return -0.14185106490048777;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.3555557392714994;  // std dev = 3.333, 45.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=25 */
%   else return -0.12544463852839138;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.29261484610968785;  // std dev = 3.333, 45.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=25 */
%   else return -0.11231637819360638;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.23214124828648153;  // std dev = 3.333, 45.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=25 */
%   else return -0.10159632948783633;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.17942003892665268;  // std dev = 3.333, 45.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=25 */
%   else return -0.09269127618926098;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.13647857812921968;  // std dev = 3.333, 45.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=25 */
%   else return -0.08518475138839687;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.10293424750437888;  // std dev = 3.333, 45.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=25 */
%   else return -0.07877675473109177;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.0773294785215201;  // std dev = 3.333, 45.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=25 */
%   else return -0.07324622576333704;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.0580108689681243;  // std dev = 3.333, 45.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=25 */
%   else return -0.06842697784420272;  // std dev = 1.86e-09, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.043510502322271126;  // std dev = 3.333, 45.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=25 */
%   else return -0.0641918400820262;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */


Results
   AUC ROC   = 0.614727
   AUC PR    = 0.592038
   CLL	      = -0.694314
   Precision = 0.595694 at threshold = 0.5
   Recall    = 0.905455
   F1        = 0.718615


Total learning time: 0.92 seconds
Total inference time: 0.725 seconds
AUC ROC: 0.614727


Results scoring model
   AUC ROC   = 0.6
   AUC PR    = 0.555556
   CLL	      = -0.626428
   Precision = 0.555556 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.714286


Total scoring time: 0.708 seconds
Parameter learned model CLL: -0.626428


Structure after Parameter Learning
[['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [3.333, 20, 25], 'false': [0.0, 5, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [3.333, 20, 25], 'false': [0.0, 5, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [3.333, 20, 25], 'false': [0.0, 5, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [3.333, 20, 25], 'false': [0.0, 5, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [3.333, 20, 25], 'false': [0.0, 5, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [3.333, 20, 25], 'false': [0.0, 5, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [3.333, 20, 25], 'false': [0.0, 5, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [3.333, 20, 25], 'false': [0.0, 5, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [3.333, 20, 25], 'false': [1.86e-09, 5, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [3.333, 20, 25], 'false': [0.0, 5, 0]}]]
[{'': [0.24691358024691487, -2.7755575615628915e-18]}, {'': [0.24691358024691287, 0.0]}, {'': [0.24691358024691346, 0.0]}, {'': [0.24691358024691362, 0.0]}, {'': [0.24691358024691376, 0.0]}, {'': [0.2469135802469133, 0.0]}, {'': [0.24691358024691368, -1.3877787807814458e-18]}, {'': [0.24691358024691346, -6.938893903907229e-19]}, {'': [0.24691358024691382, 6.938893903907229e-19]}, {'': [0.2469135802469139, 0.0]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.6081489350995122;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | else return 0.3947343009531699;  // std dev = 0.499, 41.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=22 */
%   else return -0.14185106490048777;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.3553784852811839;  // std dev = 0.496, 45.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=25 */
%   else return -0.12544463852839138;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.2924837774544286;  // std dev = 0.496, 45.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=25 */
%   else return -0.11231637819360638;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.23207417972627162;  // std dev = 0.495, 45.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=25 */
%   else return -0.10159632948783633;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.327352529823409;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | else return 0.16497844382184143;  // std dev = 0.499, 41.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=22 */
%   else return -0.09269127618926098;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.13641559741786685;  // std dev = 0.494, 45.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=25 */
%   else return -0.08518475138839687;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.21210940730033348;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | else return 0.09233638540249171;  // std dev = 0.499, 41.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=22 */
%   else return -0.07877675473109177;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.16000059630743668;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | else return 0.06943767497114568;  // std dev = 0.499, 41.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=22 */
%   else return -0.07324622576333704;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.12192590089807287;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | else return 0.052120652544474066;  // std dev = 0.499, 41.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=22 */
%   else return -0.06842697784420272;  // std dev = 1.86e-09, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.0939164464718559;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | else return 0.0390954703731528;  // std dev = 0.499, 41.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=22 */
%   else return -0.0641918400820262;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */


Results
   AUC ROC   = 0.605095
   AUC PR    = 0.573681
   CLL	      = -0.702553
   Precision = 0.595694 at threshold = 0.5
   Recall    = 0.905455
   F1        = 0.718615


Total learning time: 1.649 seconds
Total inference time: 0.829 seconds
AUC ROC: 0.605095


Results scoring model
   AUC ROC   = 0.628
   AUC PR    = 0.606864
   CLL	      = -0.619838
   Precision = 0.555556 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.714286


Total scoring time: 0.758 seconds
Refined model CLL: -0.619838


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.605095
   AUC PR    = 0.573681
   CLL	      = -0.702553
   Precision = 0.595694 at threshold = 0.5
   Recall    = 0.905455
   F1        = 0.718615


Total learning time: 4.035 seconds
Total inference time: 0.829 seconds
AUC ROC: 0.605095
Total revision time: 4.035
Best scored revision CLL: -0.619838


Dataset: 3_imdb_cora, Fold: 5, Type: Transfer (trRDN-B), Time: 00:14:48
{'AUC ROC': 0.605095, 'AUC PR': 0.573681, 'CLL': -0.702553, 'Precision': [0.595694, 0.5], 'Recall': 0.905455, 'F1': 0.718615, 'Learning time': 4.035, 'Inference time': 0.829, 'parameter_25': {'AUC ROC': 0.614727, 'AUC PR': 0.592038, 'CLL': -0.694314, 'Precision': [0.595694, 0.5], 'Recall': 0.905455, 'F1': 0.718615, 'Learning time': 0.92, 'Inference time': 0.725}}


Starting fold 1

Target train facts examples: 35095
Target train pos examples: 2649
Target train neg examples: 4334

Target test facts examples: 7463
Target test pos	 examples: 368
Target test neg examples: 688

Amount of data: 5
******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.8581489350995122;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else return 0.30259337954395676;  // std dev = 1.491, 9.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=4 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.7194734122109545;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else return 0.2616318086752123;  // std dev = 1.491, 9.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=4 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.5553664367462845;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else return 0.2192721473492705;  // std dev = 1.491, 9.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=4 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.41751358415830997;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else return 0.17873524574687283;  // std dev = 1.491, 9.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=4 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.32071184716014967;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else return 0.1424392447767628;  // std dev = 1.491, 9.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=4 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.25517224256948945;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else return 0.11159559999632969;  // std dev = 1.491, 9.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=4 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.20975771563253554;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else return 0.08637026299843623;  // std dev = 1.491, 9.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=4 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.17709649774527736;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else return 0.06628370899125427;  // std dev = 1.491, 9.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=4 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.15274385809367097;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else return 0.05057564362187433;  // std dev = 1.491, 9.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=4 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.13400703000801117;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else return 0.038438849075129386;  // std dev = 1.491, 9.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=4 */


Results
   AUC ROC   = 0.630435
   AUC PR    = 0.597315
   CLL	      = -0.587529
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.26087
   F1        = 0.413793


Total learning time: 0.912 seconds
Total inference time: 0.685 seconds
AUC ROC: 0.630435


Results scoring model
   AUC ROC   = 0.6
   AUC PR    = 0.685394
   CLL	      = -0.632522
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.2
   F1        = 0.333333


Total scoring time: 0.641 seconds
Parameter learned model CLL: -0.632522


Structure after Parameter Learning
[['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 1], 'false': [1.491, 5, 4]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 1], 'false': [1.491, 5, 4]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 1], 'false': [1.491, 5, 4]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 1], 'false': [1.491, 5, 4]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 1], 'false': [1.491, 5, 4]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 1], 'false': [1.491, 5, 4]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 1], 'false': [1.491, 5, 4]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 1], 'false': [1.491, 5, 4]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 1], 'false': [1.491, 5, 4]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 1], 'false': [1.491, 5, 4]}]]
[{'': [0.0, 0.2469135802469134]}, {'': [0.0, 0.24691358024691354]}, {'': [0.0, 0.24691358024691365]}, {'': [0.0, 0.2469135802469136]}, {'': [0.0, 0.2469135802469136]}, {'': [0.0, 0.2469135802469136]}, {'': [0.0, 0.2469135802469136]}, {'': [0.0, 0.2469135802469136]}, {'': [0.0, 0.2469135802469136]}, {'': [0.0, 0.2469135802469136]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
1;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
2;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
3;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
4;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
5;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
6;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
7;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
8;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
9;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.8581489350995122;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else return 0.30259337954395676;  // std dev = 0.497, 9.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=4 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.7194734122109545;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else return 0.2616318086752123;  // std dev = 0.497, 9.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=4 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.5553664367462845;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else return 0.2192721473492705;  // std dev = 0.497, 9.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=4 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.41751358415830997;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else return 0.17873524574687283;  // std dev = 0.497, 9.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=4 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.32071184716014967;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else return 0.1424392447767628;  // std dev = 0.497, 9.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=4 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.25517224256948945;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else return 0.11159559999632969;  // std dev = 0.497, 9.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=4 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.20975771563253554;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else return 0.08637026299843623;  // std dev = 0.497, 9.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=4 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.17709649774527736;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else return 0.06628370899125427;  // std dev = 0.497, 9.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=4 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.15274385809367097;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else return 0.05057564362187433;  // std dev = 0.497, 9.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=4 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.13400703000801117;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else return 0.038438849075129386;  // std dev = 0.497, 9.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=4 */


Results
   AUC ROC   = 0.630435
   AUC PR    = 0.597315
   CLL	      = -0.587529
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.26087
   F1        = 0.413793


Total learning time: 1.175 seconds
Total inference time: 0.64 seconds
AUC ROC: 0.630435


Results scoring model
   AUC ROC   = 0.6
   AUC PR    = 0.685394
   CLL	      = -0.632522
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.2
   F1        = 0.333333


Total scoring time: 0.645 seconds
Refined model CLL: -0.632522


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.630435
   AUC PR    = 0.597315
   CLL	      = -0.587529
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.26087
   F1        = 0.413793


Total learning time: 3.3729999999999998 seconds
Total inference time: 0.685 seconds
AUC ROC: 0.630435
Total revision time: 3.3729999999999998
Best scored revision CLL: -0.632522


Dataset: 3_imdb_cora, Fold: 1, Type: Transfer (trRDN-B), Time: 00:14:53
{'AUC ROC': 0.630435, 'AUC PR': 0.597315, 'CLL': -0.587529, 'Precision': [1.0, 0.5], 'Recall': 0.26087, 'F1': 0.413793, 'Learning time': 3.3729999999999998, 'Inference time': 0.685, 'parameter_5': {'AUC ROC': 0.630435, 'AUC PR': 0.597315, 'CLL': -0.587529, 'Precision': [1.0, 0.5], 'Recall': 0.26087, 'F1': 0.413793, 'Learning time': 0.912, 'Inference time': 0.685}}


Amount of data: 10
******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.42064893509951234;  // std dev = 1.984, 16.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=9 */
%   else return 0.10814893509951219;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.361386758207022;  // std dev = 1.984, 16.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=9 */
%   else return 0.09446743783575562;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.29707588146212427;  // std dev = 1.984, 16.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=9 */
%   else return 0.08165239320886175;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.23530262435174626;  // std dev = 1.984, 16.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=9 */
%   else return 0.06990902274840138;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.18156600992036426;  // std dev = 1.984, 16.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=9 */
%   else return 0.059354635365447495;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.1379248928305776;  // std dev = 1.984, 16.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=9 */
%   else return 0.05002771289938789;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.10392852578813351;  // std dev = 1.984, 16.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=9 */
%   else return 0.04190386852605735;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.07803658977375333;  // std dev = 1.984, 16.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=9 */
%   else return 0.03491396367325339;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.05853252891320447;  // std dev = 1.984, 16.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=9 */
%   else return 0.028961035597951046;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.043907889424101815;  // std dev = 1.984, 16.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=9 */
%   else return 0.023934242922604827;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */


Results
   AUC ROC   = 0.57476
   AUC PR    = 0.387492
   CLL	      = -0.663035
   Precision = 0.388764 at threshold = 0.5
   Recall    = 0.940217
   F1        = 0.550079


Total learning time: 0.908 seconds
Total inference time: 0.703 seconds
AUC ROC: 0.57476


Results scoring model
   AUC ROC   = 0.6
   AUC PR    = 0.559375
   CLL	      = -0.662683
   Precision = 0.5625 at threshold = 0.5
   Recall    = 0.9
   F1        = 0.692308


Total scoring time: 0.672 seconds
Parameter learned model CLL: -0.662683


Structure after Parameter Learning
[['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [1.984, 7, 9], 'false': [0.866, 3, 1]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [1.984, 7, 9], 'false': [0.866, 3, 1]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [1.984, 7, 9], 'false': [0.866, 3, 1]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [1.984, 7, 9], 'false': [0.866, 3, 1]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [1.984, 7, 9], 'false': [0.866, 3, 1]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [1.984, 7, 9], 'false': [0.866, 3, 1]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [1.984, 7, 9], 'false': [0.866, 3, 1]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [1.984, 7, 9], 'false': [0.866, 3, 1]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [1.984, 7, 9], 'false': [0.866, 3, 1]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [1.984, 7, 9], 'false': [0.866, 3, 1]}]]
[{'': [0.24609374999999992, 0.18750000000000003]}, {'': [0.24609375000000006, 0.18749999999999997]}, {'': [0.24609375000000022, 0.18749999999999994]}, {'': [0.2460937500000001, 0.18749999999999997]}, {'': [0.2460937500000001, 0.18749999999999997]}, {'': [0.24609374999999992, 0.18750000000000006]}, {'': [0.24609375000000003, 0.18750000000000003]}, {'': [0.24609374999999997, 0.18749999999999994]}, {'': [0.24609374999999997, 0.18749999999999997]}, {'': [0.24609375000000003, 0.1875]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Pruning resulted in null theory

Candidate for revision
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.42064893509951234;  // std dev = 0.496, 16.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=9 */
%   else return 0.10814893509951219;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.361386758207022;  // std dev = 0.496, 16.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=9 */
%   else return 0.09446743783575562;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.29707588146212427;  // std dev = 0.496, 16.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=9 */
%   else return 0.08165239320886175;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.23530262435174626;  // std dev = 0.496, 16.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=9 */
%   else return 0.06990902274840138;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.18156600992036426;  // std dev = 0.496, 16.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=9 */
%   else return 0.059354635365447495;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.1379248928305776;  // std dev = 0.496, 16.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=9 */
%   else return 0.05002771289938789;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.10392852578813351;  // std dev = 0.496, 16.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=9 */
%   else return 0.04190386852605735;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.07803658977375333;  // std dev = 0.496, 16.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=9 */
%   else return 0.03491396367325339;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.05853252891320447;  // std dev = 0.496, 16.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=9 */
%   else return 0.028961035597951046;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.043907889424101815;  // std dev = 0.496, 16.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=9 */
%   else return 0.023934242922604827;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */


Results
   AUC ROC   = 0.57476
   AUC PR    = 0.387492
   CLL	      = -0.663035
   Precision = 0.388764 at threshold = 0.5
   Recall    = 0.940217
   F1        = 0.550079


Total learning time: 1.285 seconds
Total inference time: 0.726 seconds
AUC ROC: 0.57476


Results scoring model
   AUC ROC   = 0.6
   AUC PR    = 0.559375
   CLL	      = -0.662683
   Precision = 0.5625 at threshold = 0.5
   Recall    = 0.9
   F1        = 0.692308


Total scoring time: 0.654 seconds
Refined model CLL: -0.662683


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.57476
   AUC PR    = 0.387492
   CLL	      = -0.663035
   Precision = 0.388764 at threshold = 0.5
   Recall    = 0.940217
   F1        = 0.550079


Total learning time: 3.519 seconds
Total inference time: 0.703 seconds
AUC ROC: 0.57476
Total revision time: 3.519
Best scored revision CLL: -0.662683


Dataset: 3_imdb_cora, Fold: 1, Type: Transfer (trRDN-B), Time: 00:14:59
{'AUC ROC': 0.57476, 'AUC PR': 0.387492, 'CLL': -0.663035, 'Precision': [0.388764, 0.5], 'Recall': 0.940217, 'F1': 0.550079, 'Learning time': 3.519, 'Inference time': 0.703, 'parameter_10': {'AUC ROC': 0.57476, 'AUC PR': 0.387492, 'CLL': -0.663035, 'Precision': [0.388764, 0.5], 'Recall': 0.940217, 'F1': 0.550079, 'Learning time': 0.908, 'Inference time': 0.703}}


Amount of data: 15
******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.8581489350995121;  // std dev = 2.11e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return 0.30259337954395676;  // std dev = 2.582, 27.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=12 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.7194734122109545;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return 0.261631808675212;  // std dev = 2.582, 27.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=12 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.5553664367462845;  // std dev = 1.05e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return 0.2192721473492705;  // std dev = 2.582, 27.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=12 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.41751358415830997;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return 0.1787352457468729;  // std dev = 2.582, 27.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=12 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.32071184716014967;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return 0.14243924477676276;  // std dev = 2.582, 27.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=12 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.25517224256948945;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return 0.11159559999632997;  // std dev = 2.582, 27.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=12 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.20975771563253554;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return 0.08637026299843599;  // std dev = 2.582, 27.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=12 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.17709649774527736;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return 0.06628370899125427;  // std dev = 2.582, 27.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=12 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.15274385809367097;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return 0.050575643621874215;  // std dev = 2.582, 27.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=12 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.13400703000801117;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return 0.038438849075129344;  // std dev = 2.582, 27.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=12 */


Results
   AUC ROC   = 0.630435
   AUC PR    = 0.597315
   CLL	      = -0.587529
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.26087
   F1        = 0.413793


Total learning time: 0.978 seconds
Total inference time: 0.709 seconds
AUC ROC: 0.630435


Results scoring model
   AUC ROC   = 0.6
   AUC PR    = 0.671449
   CLL	      = -0.632522
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.2
   F1        = 0.333333


Total scoring time: 0.66 seconds
Parameter learned model CLL: -0.632522


Structure after Parameter Learning
[['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [2.11e-08, 0, 3], 'false': [2.582, 15, 12]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 3], 'false': [2.582, 15, 12]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [1.05e-08, 0, 3], 'false': [2.582, 15, 12]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 3], 'false': [2.582, 15, 12]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 3], 'false': [2.582, 15, 12]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 3], 'false': [2.582, 15, 12]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 3], 'false': [2.582, 15, 12]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 3], 'false': [2.582, 15, 12]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 3], 'false': [2.582, 15, 12]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 3], 'false': [2.582, 15, 12]}]]
[{'': [1.4802973661668753e-16, 0.2469135802469131]}, {'': [0.0, 0.2469135802469134]}, {'': [3.700743415417188e-17, 0.24691358024691332]}, {'': [-3.700743415417188e-17, 0.24691358024691365]}, {'': [0.0, 0.24691358024691382]}, {'': [0.0, 0.24691358024691357]}, {'': [0.0, 0.24691358024691337]}, {'': [0.0, 0.24691358024691382]}, {'': [-4.625929269271485e-18, 0.24691358024691362]}, {'': [-2.3129646346357427e-18, 0.24691358024691384]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
1;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
2;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
3;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
4;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
5;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
6;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
7;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
8;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
9;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.8581489350995121;  // std dev = 2.11e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.3364098046647297;  // std dev = 0.500, 23.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=11 */
%   | else return 0.10814893509951219;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.7194734122109545;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.2903420413038522;  // std dev = 0.500, 23.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=11 */
%   | else return 0.09446743783575562;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.5553664367462845;  // std dev = 1.05e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.24199250248352006;  // std dev = 0.500, 23.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=11 */
%   | else return 0.08165239320886175;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.41751358415830997;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.19559083008480332;  // std dev = 0.500, 23.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=11 */
%   | else return 0.06990902274840138;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.32071184716014967;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.15430801515067702;  // std dev = 0.500, 23.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=11 */
%   | else return 0.059354635365447495;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.25517224256948945;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.11964041722261386;  // std dev = 0.500, 23.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=11 */
%   | else return 0.05002771289938789;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.20975771563253554;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.09168214183844779;  // std dev = 0.500, 23.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=11 */
%   | else return 0.04190386852605735;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.17709649774527736;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.06972812331540001;  // std dev = 0.500, 23.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=11 */
%   | else return 0.03491396367325339;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.15274385809367097;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.052778219211505634;  // std dev = 0.500, 23.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=11 */
%   | else return 0.028961035597951046;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.13400703000801117;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.03982881031836408;  // std dev = 0.500, 23.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=11 */
%   | else return 0.023934242922604827;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */


Results
   AUC ROC   = 0.677894
   AUC PR    = 0.622063
   CLL	      = -0.57413
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.26087
   F1        = 0.413793


Total learning time: 2.474 seconds
Total inference time: 0.81 seconds
AUC ROC: 0.677894


Results scoring model
   AUC ROC   = 0.646667
   AUC PR    = 0.695021
   CLL	      = -0.619892
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.2
   F1        = 0.333333


Total scoring time: 0.683 seconds
Refined model CLL: -0.619892


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.677894
   AUC PR    = 0.622063
   CLL	      = -0.57413
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.26087
   F1        = 0.413793


Total learning time: 4.795 seconds
Total inference time: 0.81 seconds
AUC ROC: 0.677894
Total revision time: 4.795
Best scored revision CLL: -0.619892


Dataset: 3_imdb_cora, Fold: 1, Type: Transfer (trRDN-B), Time: 00:15:06
{'AUC ROC': 0.677894, 'AUC PR': 0.622063, 'CLL': -0.57413, 'Precision': [1.0, 0.5], 'Recall': 0.26087, 'F1': 0.413793, 'Learning time': 4.795, 'Inference time': 0.81, 'parameter_15': {'AUC ROC': 0.630435, 'AUC PR': 0.597315, 'CLL': -0.587529, 'Precision': [1.0, 0.5], 'Recall': 0.26087, 'F1': 0.413793, 'Learning time': 0.978, 'Inference time': 0.709}}


Amount of data: 20
******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.8581489350995122;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else return 0.3025933795439568;  // std dev = 2.981, 36.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=16 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.7194734122109545;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else return 0.2616318086752119;  // std dev = 2.981, 36.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=16 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.5553664367462845;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else return 0.2192721473492705;  // std dev = 2.981, 36.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=16 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.41751358415830997;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else return 0.1787352457468729;  // std dev = 2.981, 36.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=16 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.32071184716014967;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else return 0.14243924477676304;  // std dev = 2.981, 36.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=16 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.25517224256948945;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else return 0.11159559999632974;  // std dev = 2.981, 36.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=16 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.20975771563253554;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else return 0.08637026299843592;  // std dev = 2.981, 36.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=16 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.17709649774527736;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else return 0.06628370899125449;  // std dev = 2.981, 36.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=16 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.15274385809367097;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else return 0.05057564362187414;  // std dev = 2.981, 36.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=16 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.13400703000801117;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else return 0.038438849075129365;  // std dev = 2.981, 36.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=16 */


Results
   AUC ROC   = 0.630435
   AUC PR    = 0.597315
   CLL	      = -0.587529
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.26087
   F1        = 0.413793


Total learning time: 0.954 seconds
Total inference time: 0.768 seconds
AUC ROC: 0.630435


Results scoring model
   AUC ROC   = 0.6
   AUC PR    = 0.670516
   CLL	      = -0.632522
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.2
   F1        = 0.333333


Total scoring time: 0.685 seconds
Parameter learned model CLL: -0.632522


Structure after Parameter Learning
[['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 4], 'false': [2.981, 20, 16]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 4], 'false': [2.981, 20, 16]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 4], 'false': [2.981, 20, 16]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 4], 'false': [2.981, 20, 16]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 4], 'false': [2.981, 20, 16]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 4], 'false': [2.981, 20, 16]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 4], 'false': [2.981, 20, 16]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 4], 'false': [2.981, 20, 16]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 4], 'false': [2.981, 20, 16]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 4], 'false': [2.981, 20, 16]}]]
[{'': [0.0, 0.2469135802469131]}, {'': [0.0, 0.2469135802469134]}, {'': [0.0, 0.24691358024691334]}, {'': [0.0, 0.24691358024691315]}, {'': [0.0, 0.24691358024691373]}, {'': [0.0, 0.24691358024691348]}, {'': [0.0, 0.2469135802469136]}, {'': [0.0, 0.24691358024691384]}, {'': [0.0, 0.24691358024691354]}, {'': [0.0, 0.24691358024691373]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
1;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
2;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
3;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
4;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
5;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
6;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
7;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
8;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
9;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.8581489350995122;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.32689893509951234;  // std dev = 0.499, 32.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=15 */
%   | else return 0.10814893509951219;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.7194734122109545;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.282278275096264;  // std dev = 0.499, 32.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=15 */
%   | else return 0.09446743783575562;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.5553664367462845;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.2356381872329708;  // std dev = 0.499, 32.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=15 */
%   | else return 0.08165239320886175;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.41751358415830997;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.19090664721414535;  // std dev = 0.499, 32.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=15 */
%   | else return 0.06990902274840138;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.32071184716014967;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.1510318027655978;  // std dev = 0.499, 32.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=15 */
%   | else return 0.059354635365447495;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.25517224256948945;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.11743093728048029;  // std dev = 0.499, 32.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=15 */
%   | else return 0.05002771289938789;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.20975771563253554;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.09022538846398226;  // std dev = 0.499, 32.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=15 */
%   | else return 0.04190386852605735;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.17709649774527736;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.0687799321239834;  // std dev = 0.499, 32.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=15 */
%   | else return 0.03491396367325339;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.15274385809367097;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.052165400700860697;  // std dev = 0.499, 32.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=15 */
%   | else return 0.028961035597951046;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.13400703000801117;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.03943451380431906;  // std dev = 0.499, 32.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=15 */
%   | else return 0.023934242922604827;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */


Results
   AUC ROC   = 0.677894
   AUC PR    = 0.622063
   CLL	      = -0.570498
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.26087
   F1        = 0.413793


Total learning time: 2.682 seconds
Total inference time: 0.742 seconds
AUC ROC: 0.677894


Results scoring model
   AUC ROC   = 0.635
   AUC PR    = 0.687825
   CLL	      = -0.623419
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.2
   F1        = 0.333333


Total scoring time: 0.696 seconds
Refined model CLL: -0.623419


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.677894
   AUC PR    = 0.622063
   CLL	      = -0.570498
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.26087
   F1        = 0.413793


Total learning time: 5.0169999999999995 seconds
Total inference time: 0.742 seconds
AUC ROC: 0.677894
Total revision time: 5.0169999999999995
Best scored revision CLL: -0.623419


Dataset: 3_imdb_cora, Fold: 1, Type: Transfer (trRDN-B), Time: 00:15:13
{'AUC ROC': 0.677894, 'AUC PR': 0.622063, 'CLL': -0.570498, 'Precision': [1.0, 0.5], 'Recall': 0.26087, 'F1': 0.413793, 'Learning time': 5.0169999999999995, 'Inference time': 0.742, 'parameter_20': {'AUC ROC': 0.630435, 'AUC PR': 0.597315, 'CLL': -0.587529, 'Precision': [1.0, 0.5], 'Recall': 0.26087, 'F1': 0.413793, 'Learning time': 0.954, 'Inference time': 0.768}}


Amount of data: 25
******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.8581489350995122;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return 0.30259337954395643;  // std dev = 3.333, 45.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=20 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.7194734122109545;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return 0.26163180867521296;  // std dev = 3.333, 45.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=20 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.5553664367462845;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return 0.2192721473492705;  // std dev = 3.333, 45.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=20 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.4175135841583099;  // std dev = 1.49e-08, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return 0.1787352457468729;  // std dev = 3.333, 45.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=20 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.32071184716014967;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return 0.14243924477676323;  // std dev = 3.333, 45.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=20 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.25517224256948945;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return 0.11159559999632924;  // std dev = 3.333, 45.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=20 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.20975771563253556;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return 0.08637026299843586;  // std dev = 3.333, 45.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=20 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.17709649774527736;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return 0.06628370899125421;  // std dev = 3.333, 45.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=20 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.15274385809367097;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return 0.05057564362187412;  // std dev = 3.333, 45.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=20 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.13400703000801117;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return 0.03843884907512935;  // std dev = 3.333, 45.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=20 */


Results
   AUC ROC   = 0.630435
   AUC PR    = 0.597315
   CLL	      = -0.587529
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.26087
   F1        = 0.413793


Total learning time: 1.007 seconds
Total inference time: 0.689 seconds
AUC ROC: 0.630435


Results scoring model
   AUC ROC   = 0.6
   AUC PR    = 0.670073
   CLL	      = -0.632522
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.2
   F1        = 0.333333


Total scoring time: 0.697 seconds
Parameter learned model CLL: -0.632522


Structure after Parameter Learning
[['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 5], 'false': [3.333, 25, 20]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 5], 'false': [3.333, 25, 20]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 5], 'false': [3.333, 25, 20]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [1.49e-08, 0, 5], 'false': [3.333, 25, 20]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 5], 'false': [3.333, 25, 20]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 5], 'false': [3.333, 25, 20]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 5], 'false': [3.333, 25, 20]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 5], 'false': [3.333, 25, 20]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 5], 'false': [3.333, 25, 20]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 5], 'false': [3.333, 25, 20]}]]
[{'': [0.0, 0.2469135802469133]}, {'': [0.0, 0.24691358024691287]}, {'': [-4.4408920985006264e-17, 0.24691358024691334]}, {'': [4.4408920985006264e-17, 0.24691358024691293]}, {'': [-2.2204460492503132e-17, 0.24691358024691365]}, {'': [0.0, 0.24691358024691348]}, {'': [-5.551115123125783e-18, 0.24691358024691382]}, {'': [0.0, 0.2469135802469139]}, {'': [0.0, 0.24691358024691354]}, {'': [0.0, 0.24691358024691348]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
1;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
2;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
3;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
4;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
5;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
6;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
7;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
8;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
9;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.8581489350995122;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.34532842227899946;  // std dev = 0.500, 39.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=19 */
%   | else return 0.024815601766178873;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.7194734122109545;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.2978958405278236;  // std dev = 0.500, 39.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=19 */
%   | else return 0.02176788419240575;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.5553664367462845;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.24792584310385932;  // std dev = 0.500, 39.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=19 */
%   | else return 0.01904987294481035;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.4175135841583099;  // std dev = 1.49e-08, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.19994424504706734;  // std dev = 0.500, 39.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=19 */
%   | else return 0.01663677639228948;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.32071184716014967;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.1573387903540145;  // std dev = 0.500, 39.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=19 */
%   | else return 0.014502864105143046;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.25517224256948945;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.12167852492130384;  // std dev = 0.500, 39.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=19 */
%   | else return 0.01262239661487466;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.20975771563253556;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.09302649043065797;  // std dev = 0.500, 39.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=19 */
%   | else return 0.010970321301480393;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.17709649774527736;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.07060751351378104;  // std dev = 0.500, 39.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=19 */
%   | else return 0.009522764707203951;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.15274385809367097;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.05335260550290741;  // std dev = 0.500, 39.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=19 */
%   | else return 0.00825735549633603;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.13400703000801117;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.04020477898541032;  // std dev = 0.500, 39.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=19 */
%   | else return 0.007153411981729964;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */


Results
   AUC ROC   = 0.677894
   AUC PR    = 0.622063
   CLL	      = -0.573441
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.26087
   F1        = 0.413793


Total learning time: 3.031 seconds
Total inference time: 0.817 seconds
AUC ROC: 0.677894


Results scoring model
   AUC ROC   = 0.66
   AUC PR    = 0.700513
   CLL	      = -0.608609
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.2
   F1        = 0.333333


Total scoring time: 0.694 seconds
Refined model CLL: -0.608609


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.677894
   AUC PR    = 0.622063
   CLL	      = -0.573441
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.26087
   F1        = 0.413793


Total learning time: 5.428999999999999 seconds
Total inference time: 0.817 seconds
AUC ROC: 0.677894
Total revision time: 5.428999999999999
Best scored revision CLL: -0.608609


Dataset: 3_imdb_cora, Fold: 1, Type: Transfer (trRDN-B), Time: 00:15:21
{'AUC ROC': 0.677894, 'AUC PR': 0.622063, 'CLL': -0.573441, 'Precision': [1.0, 0.5], 'Recall': 0.26087, 'F1': 0.413793, 'Learning time': 5.428999999999999, 'Inference time': 0.817, 'parameter_25': {'AUC ROC': 0.630435, 'AUC PR': 0.597315, 'CLL': -0.587529, 'Precision': [1.0, 0.5], 'Recall': 0.26087, 'F1': 0.413793, 'Learning time': 1.007, 'Inference time': 0.689}}


Starting fold 2

Target train facts examples: 33542
Target train pos examples: 2246
Target train neg examples: 4478

Target test facts examples: 9016
Target test pos	 examples: 771
Target test neg examples: 544

Amount of data: 5
******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.3581489350995123;  // std dev = 1.581, 10.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.30874113578563506;  // std dev = 1.581, 10.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.2564123687585864;  // std dev = 1.581, 10.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.20613740734453975;  // std dev = 1.581, 10.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.16162857548414675;  // std dev = 1.581, 10.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.1245559779208197;  // std dev = 1.581, 10.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.09492800936730683;  // std dev = 1.581, 10.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.07186088850055855;  // std dev = 1.581, 10.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.05418307375954949;  // std dev = 1.581, 10.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.04076025323305626;  // std dev = 1.581, 10.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */


Results
   AUC ROC   = 0.433204
   AUC PR    = 0.553567
   CLL	      = -0.79934
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 0.862 seconds
Total inference time: 0.814 seconds
AUC ROC: 0.433204


Results scoring model
   AUC ROC   = 0.5
   AUC PR    = 0.5
   CLL	      = -0.695026
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total scoring time: 0.616 seconds
Parameter learned model CLL: -0.695026


Structure after Parameter Learning
[['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 0], 'false': [1.581, 5, 5]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 0], 'false': [1.581, 5, 5]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 0], 'false': [1.581, 5, 5]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 0], 'false': [1.581, 5, 5]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 0], 'false': [1.581, 5, 5]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 0], 'false': [1.581, 5, 5]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 0], 'false': [1.581, 5, 5]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 0], 'false': [1.581, 5, 5]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 0], 'false': [1.581, 5, 5]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 0], 'false': [1.581, 5, 5]}]]
[{'': [nan, 0.24999999999999983]}, {'': [nan, 0.24999999999999994]}, {'': [nan, 0.25000000000000006]}, {'': [nan, 0.24999999999999992]}, {'': [nan, 0.24999999999999994]}, {'': [nan, 0.24999999999999986]}, {'': [nan, 0.25]}, {'': [nan, 0.25000000000000006]}, {'': [nan, 0.25]}, {'': [nan, 0.24999999999999994]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Pruning resulted in null theory

Candidate for revision
0;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
1;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
2;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
3;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
4;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
5;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
6;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
7;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
8;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
9;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.3581489350995123;  // std dev = 0.500, 10.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.30874113578563506;  // std dev = 0.500, 10.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.2564123687585864;  // std dev = 0.500, 10.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.20613740734453975;  // std dev = 0.500, 10.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.16162857548414675;  // std dev = 0.500, 10.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.1245559779208197;  // std dev = 0.500, 10.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.09492800936730683;  // std dev = 0.500, 10.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.07186088850055855;  // std dev = 0.500, 10.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.05418307375954949;  // std dev = 0.500, 10.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.04076025323305626;  // std dev = 0.500, 10.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */


Results
   AUC ROC   = 0.433204
   AUC PR    = 0.553567
   CLL	      = -0.79934
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 1.21 seconds
Total inference time: 0.816 seconds
AUC ROC: 0.433204


Results scoring model
   AUC ROC   = 0.5
   AUC PR    = 0.5
   CLL	      = -0.695026
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total scoring time: 0.651 seconds
Refined model CLL: -0.695026


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.433204
   AUC PR    = 0.553567
   CLL	      = -0.79934
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 3.3389999999999995 seconds
Total inference time: 0.814 seconds
AUC ROC: 0.433204
Total revision time: 3.3389999999999995
Best scored revision CLL: -0.695026


Dataset: 3_imdb_cora, Fold: 2, Type: Transfer (trRDN-B), Time: 00:15:26
{'AUC ROC': 0.433204, 'AUC PR': 0.553567, 'CLL': -0.79934, 'Precision': [nan, 0.5], 'Recall': 0.0, 'F1': nan, 'Learning time': 3.3389999999999995, 'Inference time': 0.814, 'parameter_5': {'AUC ROC': 0.433204, 'AUC PR': 0.553567, 'CLL': -0.79934, 'Precision': [nan, 0.5], 'Recall': 0.0, 'F1': nan, 'Learning time': 0.862, 'Inference time': 0.814}}


Amount of data: 10
******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.4831489350995123;  // std dev = 1.936, 16.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=10 */
%   else return -0.14185106490048777;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.4136573287083127;  // std dev = 1.936, 16.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=10 */
%   else return -0.12544463852839138;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.3366053739648666;  // std dev = 1.936, 16.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=10 */
%   else return -0.11231637819360639;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.2629755854486897;  // std dev = 1.936, 16.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=10 */
%   else return -0.10159632948783628;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.200325451702911;  // std dev = 1.936, 16.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=10 */
%   else return -0.09269127618926096;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.1507988995405441;  // std dev = 1.936, 16.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=10 */
%   else return -0.08518475138839687;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.11312434025950241;  // std dev = 1.936, 16.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=10 */
%   else return -0.07877675473109173;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.08492715391619834;  // std dev = 1.936, 16.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=10 */
%   else return -0.07324622576333704;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.06391587871034282;  // std dev = 1.936, 16.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=10 */
%   else return -0.06842697784420272;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.04824192700154655;  // std dev = 1.936, 16.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=10 */
%   else return -0.0641918400820262;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */


Results
   AUC ROC   = 0.493954
   AUC PR    = 0.583332
   CLL	      = -0.72352
   Precision = 0.583268 at threshold = 0.5
   Recall    = 0.958495
   F1        = 0.725221


Total learning time: 0.865 seconds
Total inference time: 0.712 seconds
AUC ROC: 0.493954


Results scoring model
   AUC ROC   = 0.7
   AUC PR    = 0.625
   CLL	      = -0.543944
   Precision = 0.625 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.769231


Total scoring time: 0.647 seconds
Parameter learned model CLL: -0.543944


Structure after Parameter Learning
[['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [1.936, 6, 10], 'false': [0.0, 4, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [1.936, 6, 10], 'false': [0.0, 4, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [1.936, 6, 10], 'false': [0.0, 4, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [1.936, 6, 10], 'false': [0.0, 4, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [1.936, 6, 10], 'false': [0.0, 4, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [1.936, 6, 10], 'false': [0.0, 4, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [1.936, 6, 10], 'false': [0.0, 4, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [1.936, 6, 10], 'false': [0.0, 4, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [1.936, 6, 10], 'false': [0.0, 4, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [1.936, 6, 10], 'false': [0.0, 4, 0]}]]
[{'': [0.23437499999999994, 0.0]}, {'': [0.23437499999999992, 0.0]}, {'': [0.23437500000000006, 0.0]}, {'': [0.23437500000000003, 0.0]}, {'': [0.23437499999999992, 0.0]}, {'': [0.234375, 0.0]}, {'': [0.23437499999999994, 0.0]}, {'': [0.23437499999999994, 0.0]}, {'': [0.23437500000000003, 0.0]}, {'': [0.23437499999999997, 0.0]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.4831489350995123;  // std dev = 0.484, 16.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=10 */
%   else return -0.14185106490048777;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.4136573287083127;  // std dev = 0.484, 16.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=10 */
%   else return -0.12544463852839138;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.3366053739648666;  // std dev = 0.484, 16.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=10 */
%   else return -0.11231637819360639;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.2629755854486897;  // std dev = 0.484, 16.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=10 */
%   else return -0.10159632948783628;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.200325451702911;  // std dev = 0.484, 16.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=10 */
%   else return -0.09269127618926096;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.1507988995405441;  // std dev = 0.484, 16.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=10 */
%   else return -0.08518475138839687;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.11312434025950241;  // std dev = 0.484, 16.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=10 */
%   else return -0.07877675473109173;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.08492715391619834;  // std dev = 0.484, 16.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=10 */
%   else return -0.07324622576333704;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.06391587871034282;  // std dev = 0.484, 16.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=10 */
%   else return -0.06842697784420272;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.04824192700154655;  // std dev = 0.484, 16.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=10 */
%   else return -0.0641918400820262;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */


Results
   AUC ROC   = 0.493954
   AUC PR    = 0.583332
   CLL	      = -0.72352
   Precision = 0.583268 at threshold = 0.5
   Recall    = 0.958495
   F1        = 0.725221


Total learning time: 1.359 seconds
Total inference time: 0.805 seconds
AUC ROC: 0.493954


Results scoring model
   AUC ROC   = 0.7
   AUC PR    = 0.625
   CLL	      = -0.543944
   Precision = 0.625 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.769231


Total scoring time: 0.679 seconds
Refined model CLL: -0.543944


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.493954
   AUC PR    = 0.583332
   CLL	      = -0.72352
   Precision = 0.583268 at threshold = 0.5
   Recall    = 0.958495
   F1        = 0.725221


Total learning time: 3.55 seconds
Total inference time: 0.712 seconds
AUC ROC: 0.493954
Total revision time: 3.55
Best scored revision CLL: -0.543944


Dataset: 3_imdb_cora, Fold: 2, Type: Transfer (trRDN-B), Time: 00:15:32
{'AUC ROC': 0.493954, 'AUC PR': 0.583332, 'CLL': -0.72352, 'Precision': [0.583268, 0.5], 'Recall': 0.958495, 'F1': 0.725221, 'Learning time': 3.55, 'Inference time': 0.712, 'parameter_10': {'AUC ROC': 0.493954, 'AUC PR': 0.583332, 'CLL': -0.72352, 'Precision': [0.583268, 0.5], 'Recall': 0.958495, 'F1': 0.725221, 'Learning time': 0.865, 'Inference time': 0.712}}


Amount of data: 15
******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.5103228481429906;  // std dev = 2.284, 23.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=15 */
%   else return -0.1418510649004878;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.43626645181029383;  // std dev = 2.284, 23.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=15 */
%   else return -0.12544463852839138;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.35345603789484054;  // std dev = 2.284, 23.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=15 */
%   else return -0.11231637819360639;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.2746225896235672;  // std dev = 2.284, 23.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=15 */
%   else return -0.10159632948783627;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.20826977829850513;  // std dev = 2.284, 23.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=15 */
%   else return -0.09269127618926097;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.15643938312045685;  // std dev = 2.284, 23.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=15 */
%   else return -0.08518475138839687;  // std dev = 2.63e-09, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.11738593845040234;  // std dev = 2.284, 23.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=15 */
%   else return -0.07877675473109173;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.08833350664316318;  // std dev = 2.284, 23.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=15 */
%   else return -0.07324622576333704;  // std dev = 2.63e-09, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.06674591472426745;  // std dev = 2.284, 23.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=15 */
%   else return -0.06842697784420272;  // std dev = 2.63e-09, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.050644331949424255;  // std dev = 2.284, 23.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=15 */
%   else return -0.0641918400820262;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */


Results
   AUC ROC   = 0.493954
   AUC PR    = 0.583332
   CLL	      = -0.725319
   Precision = 0.583268 at threshold = 0.5
   Recall    = 0.958495
   F1        = 0.725221


Total learning time: 0.901 seconds
Total inference time: 0.759 seconds
AUC ROC: 0.493954


Results scoring model
   AUC ROC   = 0.733333
   AUC PR    = 0.652174
   CLL	      = -0.512321
   Precision = 0.652174 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.789474


Total scoring time: 0.659 seconds
Parameter learned model CLL: -0.512321


Structure after Parameter Learning
[['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [2.284, 8, 15], 'false': [0.0, 7, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [2.284, 8, 15], 'false': [0.0, 7, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [2.284, 8, 15], 'false': [0.0, 7, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [2.284, 8, 15], 'false': [0.0, 7, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [2.284, 8, 15], 'false': [0.0, 7, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [2.284, 8, 15], 'false': [2.63e-09, 7, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [2.284, 8, 15], 'false': [0.0, 7, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [2.284, 8, 15], 'false': [2.63e-09, 7, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [2.284, 8, 15], 'false': [2.63e-09, 7, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [2.284, 8, 15], 'false': [0.0, 7, 0]}]]
[{'': [0.22684310018903553, -7.93016446160826e-18]}, {'': [0.22684310018903614, -1.982541115402065e-18]}, {'': [0.22684310018903595, -1.982541115402065e-18]}, {'': [0.22684310018903592, 0.0]}, {'': [0.226843100189036, 0.0]}, {'': [0.22684310018903608, 9.912705577010326e-19]}, {'': [0.22684310018903592, -9.912705577010326e-19]}, {'': [0.22684310018903595, 9.912705577010326e-19]}, {'': [0.22684310018903595, 9.912705577010326e-19]}, {'': [0.22684310018903583, -4.956352788505163e-19]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.5103228481429906;  // std dev = 0.476, 23.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=15 */
%   else return -0.1418510649004878;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.43626645181029383;  // std dev = 0.476, 23.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=15 */
%   else return -0.12544463852839138;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.35345603789484054;  // std dev = 0.476, 23.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=15 */
%   else return -0.11231637819360639;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.2746225896235672;  // std dev = 0.476, 23.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=15 */
%   else return -0.10159632948783627;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.20826977829850513;  // std dev = 0.476, 23.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=15 */
%   else return -0.09269127618926097;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.15643938312045685;  // std dev = 0.476, 23.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=15 */
%   else return -0.08518475138839687;  // std dev = 2.63e-09, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.11738593845040234;  // std dev = 0.476, 23.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=15 */
%   else return -0.07877675473109173;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.08833350664316318;  // std dev = 0.476, 23.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=15 */
%   else return -0.07324622576333704;  // std dev = 2.63e-09, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.06674591472426745;  // std dev = 0.476, 23.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=15 */
%   else return -0.06842697784420272;  // std dev = 2.63e-09, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.050644331949424255;  // std dev = 0.476, 23.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=15 */
%   else return -0.0641918400820262;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */


Results
   AUC ROC   = 0.493954
   AUC PR    = 0.583332
   CLL	      = -0.725319
   Precision = 0.583268 at threshold = 0.5
   Recall    = 0.958495
   F1        = 0.725221


Total learning time: 1.354 seconds
Total inference time: 0.766 seconds
AUC ROC: 0.493954


Results scoring model
   AUC ROC   = 0.733333
   AUC PR    = 0.652174
   CLL	      = -0.512321
   Precision = 0.652174 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.789474


Total scoring time: 0.663 seconds
Refined model CLL: -0.512321


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.493954
   AUC PR    = 0.583332
   CLL	      = -0.725319
   Precision = 0.583268 at threshold = 0.5
   Recall    = 0.958495
   F1        = 0.725221


Total learning time: 3.577 seconds
Total inference time: 0.759 seconds
AUC ROC: 0.493954
Total revision time: 3.577
Best scored revision CLL: -0.512321


Dataset: 3_imdb_cora, Fold: 2, Type: Transfer (trRDN-B), Time: 00:15:38
{'AUC ROC': 0.493954, 'AUC PR': 0.583332, 'CLL': -0.725319, 'Precision': [0.583268, 0.5], 'Recall': 0.958495, 'F1': 0.725221, 'Learning time': 3.577, 'Inference time': 0.759, 'parameter_15': {'AUC ROC': 0.493954, 'AUC PR': 0.583332, 'CLL': -0.725319, 'Precision': [0.583268, 0.5], 'Recall': 0.958495, 'F1': 0.725221, 'Learning time': 0.901, 'Inference time': 0.759}}


Amount of data: 20
******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.48314893509951184;  // std dev = 2.739, 32.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=20 */
%   else return -0.1418510649004878;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.4136573287083127;  // std dev = 2.739, 32.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=20 */
%   else return -0.12544463852839138;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.33660537396486667;  // std dev = 2.739, 32.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=20 */
%   else return -0.11231637819360639;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.26297558544868976;  // std dev = 2.739, 32.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=20 */
%   else return -0.10159632948783627;  // std dev = 3.73e-09, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.200325451702911;  // std dev = 2.739, 32.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=20 */
%   else return -0.09269127618926097;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.15079889954054396;  // std dev = 2.739, 32.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=20 */
%   else return -0.08518475138839687;  // std dev = 3.73e-09, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.11312434025950255;  // std dev = 2.739, 32.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=20 */
%   else return -0.07877675473109173;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.08492715391619826;  // std dev = 2.739, 32.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=20 */
%   else return -0.07324622576333704;  // std dev = 2.63e-09, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.06391587871034268;  // std dev = 2.739, 32.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=20 */
%   else return -0.06842697784420272;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.04824192700154656;  // std dev = 2.739, 32.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=20 */
%   else return -0.0641918400820262;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */


Results
   AUC ROC   = 0.493954
   AUC PR    = 0.583332
   CLL	      = -0.72352
   Precision = 0.583268 at threshold = 0.5
   Recall    = 0.958495
   F1        = 0.725221


Total learning time: 0.94 seconds
Total inference time: 0.75 seconds
AUC ROC: 0.493954


Results scoring model
   AUC ROC   = 0.7
   AUC PR    = 0.625
   CLL	      = -0.543944
   Precision = 0.625 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.769231


Total scoring time: 0.666 seconds
Parameter learned model CLL: -0.543944


Structure after Parameter Learning
[['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [2.739, 12, 20], 'false': [0.0, 8, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [2.739, 12, 20], 'false': [0.0, 8, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [2.739, 12, 20], 'false': [0.0, 8, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [2.739, 12, 20], 'false': [3.73e-09, 8, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [2.739, 12, 20], 'false': [0.0, 8, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [2.739, 12, 20], 'false': [3.73e-09, 8, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [2.739, 12, 20], 'false': [0.0, 8, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [2.739, 12, 20], 'false': [2.63e-09, 8, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [2.739, 12, 20], 'false': [0.0, 8, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [2.739, 12, 20], 'false': [0.0, 8, 0]}]]
[{'': [0.23437500000000003, -6.938893903907228e-18]}, {'': [0.23437499999999964, 0.0]}, {'': [0.2343750000000001, -1.734723475976807e-18]}, {'': [0.23437500000000028, 1.734723475976807e-18]}, {'': [0.23437500000000003, 0.0]}, {'': [0.23437500000000008, 1.734723475976807e-18]}, {'': [0.23437500000000014, 0.0]}, {'': [0.23437499999999994, 8.673617379884035e-19]}, {'': [0.23437499999999983, 0.0]}, {'': [0.234375, 0.0]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.48314893509951184;  // std dev = 0.484, 32.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=20 */
%   else return -0.1418510649004878;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.4136573287083127;  // std dev = 0.484, 32.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=20 */
%   else return -0.12544463852839138;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.33660537396486667;  // std dev = 0.484, 32.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=20 */
%   else return -0.11231637819360639;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.26297558544868976;  // std dev = 0.484, 32.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=20 */
%   else return -0.10159632948783627;  // std dev = 3.73e-09, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.200325451702911;  // std dev = 0.484, 32.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=20 */
%   else return -0.09269127618926097;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.15079889954054396;  // std dev = 0.484, 32.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=20 */
%   else return -0.08518475138839687;  // std dev = 3.73e-09, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.11312434025950255;  // std dev = 0.484, 32.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=20 */
%   else return -0.07877675473109173;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.08492715391619826;  // std dev = 0.484, 32.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=20 */
%   else return -0.07324622576333704;  // std dev = 2.63e-09, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.06391587871034268;  // std dev = 0.484, 32.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=20 */
%   else return -0.06842697784420272;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.04824192700154656;  // std dev = 0.484, 32.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=20 */
%   else return -0.0641918400820262;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */


Results
   AUC ROC   = 0.493954
   AUC PR    = 0.583332
   CLL	      = -0.72352
   Precision = 0.583268 at threshold = 0.5
   Recall    = 0.958495
   F1        = 0.725221


Total learning time: 1.376 seconds
Total inference time: 0.736 seconds
AUC ROC: 0.493954


Results scoring model
   AUC ROC   = 0.7
   AUC PR    = 0.625
   CLL	      = -0.543944
   Precision = 0.625 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.769231


Total scoring time: 0.663 seconds
Refined model CLL: -0.543944


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.493954
   AUC PR    = 0.583332
   CLL	      = -0.72352
   Precision = 0.583268 at threshold = 0.5
   Recall    = 0.958495
   F1        = 0.725221


Total learning time: 3.6449999999999996 seconds
Total inference time: 0.75 seconds
AUC ROC: 0.493954
Total revision time: 3.6449999999999996
Best scored revision CLL: -0.543944


Dataset: 3_imdb_cora, Fold: 2, Type: Transfer (trRDN-B), Time: 00:15:43
{'AUC ROC': 0.493954, 'AUC PR': 0.583332, 'CLL': -0.72352, 'Precision': [0.583268, 0.5], 'Recall': 0.958495, 'F1': 0.725221, 'Learning time': 3.6449999999999996, 'Inference time': 0.75, 'parameter_20': {'AUC ROC': 0.493954, 'AUC PR': 0.583332, 'CLL': -0.72352, 'Precision': [0.583268, 0.5], 'Recall': 0.958495, 'F1': 0.725221, 'Learning time': 0.94, 'Inference time': 0.75}}


Amount of data: 25
******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.4735335504841268;  // std dev = 3.038, 39.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=24 */
%   else return -0.050941973991396876;  // std dev = 0.953, 11.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=1 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.40564015880039006;  // std dev = 3.038, 39.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=24 */
%   else return -0.04485324549538032;  // std dev = 0.953, 11.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=1 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.3305950535941955;  // std dev = 3.038, 39.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=24 */
%   else return -0.03967602222259858;  // std dev = 0.953, 11.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=1 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.25880281585306303;  // std dev = 3.038, 39.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=24 */
%   else return -0.03523714120212422;  // std dev = 0.953, 11.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=1 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.19749150848042699;  // std dev = 3.038, 39.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=24 */
%   else return -0.03140372896424817;  // std dev = 0.953, 11.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=1 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.14881887681514572;  // std dev = 3.038, 39.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=24 */
%   else return -0.02807225121041149;  // std dev = 0.953, 11.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=1 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.11166419304190402;  // std dev = 3.038, 39.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=24 */
%   else return -0.025160914581453895;  // std dev = 0.953, 11.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=1 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.08379022739458943;  // std dev = 3.038, 39.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=24 */
%   else return -0.0226042930389592;  // std dev = 0.953, 11.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=1 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.06299353154599818;  // std dev = 3.038, 39.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=24 */
%   else return -0.020349460879216408;  // std dev = 0.953, 11.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=1 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.047474404246060434;  // std dev = 3.038, 39.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=24 */
%   else return -0.018353165369625054;  // std dev = 0.953, 11.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=1 */


Results
   AUC ROC   = 0.493954
   AUC PR    = 0.583332
   CLL	      = -0.710109
   Precision = 0.583268 at threshold = 0.5
   Recall    = 0.958495
   F1        = 0.725221


Total learning time: 0.968 seconds
Total inference time: 0.764 seconds
AUC ROC: 0.493954


Results scoring model
   AUC ROC   = 0.68
   AUC PR    = 0.613077
   CLL	      = -0.589125
   Precision = 0.615385 at threshold = 0.5
   Recall    = 0.96
   F1        = 0.75


Total scoring time: 0.658 seconds
Parameter learned model CLL: -0.589125


Structure after Parameter Learning
[['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [3.038, 15, 24], 'false': [0.953, 10, 1]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [3.038, 15, 24], 'false': [0.953, 10, 1]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [3.038, 15, 24], 'false': [0.953, 10, 1]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [3.038, 15, 24], 'false': [0.953, 10, 1]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [3.038, 15, 24], 'false': [0.953, 10, 1]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [3.038, 15, 24], 'false': [0.953, 10, 1]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [3.038, 15, 24], 'false': [0.953, 10, 1]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [3.038, 15, 24], 'false': [0.953, 10, 1]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [3.038, 15, 24], 'false': [0.953, 10, 1]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [3.038, 15, 24], 'false': [0.953, 10, 1]}]]
[{'': [0.2366863905325456, 0.0826446280991736]}, {'': [0.23668639053254464, 0.0826446280991736]}, {'': [0.23668639053254473, 0.08264462809917358]}, {'': [0.2366863905325441, 0.08264462809917354]}, {'': [0.23668639053254387, 0.08264462809917361]}, {'': [0.23668639053254445, 0.08264462809917351]}, {'': [0.23668639053254445, 0.08264462809917356]}, {'': [0.2366863905325444, 0.08264462809917353]}, {'': [0.23668639053254453, 0.08264462809917357]}, {'': [0.2366863905325445, 0.08264462809917354]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Pruning resulted in null theory

Candidate for revision
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.4735335504841268;  // std dev = 0.487, 39.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=24 */
%   else if ( haswordvenue(A, D), haswordtitle(E, D) )
%   | then return -0.1418510649004878;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else return 0.19148226843284552;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.40564015880039006;  // std dev = 0.487, 39.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=24 */
%   else if ( haswordvenue(A, D), haswordtitle(E, D) )
%   | then return -0.12544463852839138;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else return 0.16653882456488175;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.3305950535941955;  // std dev = 0.487, 39.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=24 */
%   else if ( haswordvenue(A, D), haswordtitle(E, D) )
%   | then return -0.11231637819360639;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else return 0.1420942428155648;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.25880281585306303;  // std dev = 0.487, 39.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=24 */
%   else if ( haswordvenue(A, D), haswordtitle(E, D) )
%   | then return -0.10159632948783627;  // std dev = 3.73e-09, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else return 0.11914890490746428;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.19749150848042699;  // std dev = 0.487, 39.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=24 */
%   else if ( haswordvenue(A, D), haswordtitle(E, D) )
%   | then return -0.09269127618926097;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else return 0.09841340278401862;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.14881887681514572;  // std dev = 0.487, 39.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=24 */
%   else if ( haswordvenue(A, D), haswordtitle(E, D) )
%   | then return -0.08518475138839687;  // std dev = 3.73e-09, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else return 0.08026654944252243;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.11166419304190402;  // std dev = 0.487, 39.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=24 */
%   else if ( haswordvenue(A, D), haswordtitle(E, D) )
%   | then return -0.07877675473109173;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else return 0.06479591611329232;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.08379022739458943;  // std dev = 0.487, 39.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=24 */
%   else if ( haswordvenue(B, D), haswordtitle(E, D) )
%   | then if ( title(F, E), venue(F, A) )
%   | | then return 0.04347059894628065;  // std dev = 0.776, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else return -0.07324622576333704;  // std dev = 1.86e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else return -0.14264887183865563;  // std dev = 0.170, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.06299353154599818;  // std dev = 0.487, 39.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=24 */
%   else if ( haswordvenue(A, D), haswordtitle(E, D) )
%   | then return -0.0702880644071155;  // std dev = 0.014, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else return 0.055273259049566835;  // std dev = 0.802, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.047474404246060434;  // std dev = 0.487, 39.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=24 */
%   else if ( haswordvenue(B, D), haswordtitle(E, D) )
%   | then if ( title(F, E), venue(F, A) )
%   | | then return 0.03639311654266729;  // std dev = 0.766, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else return -0.06408013292533926;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else return -0.12806954196772466;  // std dev = 0.167, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */


Results
   AUC ROC   = 0.493954
   AUC PR    = 0.583331
   CLL	      = -0.71678
   Precision = 0.583268 at threshold = 0.5
   Recall    = 0.958495
   F1        = 0.725221


Total learning time: 2.097 seconds
Total inference time: 0.82 seconds
AUC ROC: 0.493954


Results scoring model
   AUC ROC   = 0.6872
   AUC PR    = 0.615272
   CLL	      = -0.56865
   Precision = 0.615385 at threshold = 0.5
   Recall    = 0.96
   F1        = 0.75


Total scoring time: 0.703 seconds
Refined model CLL: -0.56865


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.493954
   AUC PR    = 0.583331
   CLL	      = -0.71678
   Precision = 0.583268 at threshold = 0.5
   Recall    = 0.958495
   F1        = 0.725221


Total learning time: 4.426 seconds
Total inference time: 0.82 seconds
AUC ROC: 0.493954
Total revision time: 4.426
Best scored revision CLL: -0.56865


Dataset: 3_imdb_cora, Fold: 2, Type: Transfer (trRDN-B), Time: 00:15:50
{'AUC ROC': 0.493954, 'AUC PR': 0.583331, 'CLL': -0.71678, 'Precision': [0.583268, 0.5], 'Recall': 0.958495, 'F1': 0.725221, 'Learning time': 4.426, 'Inference time': 0.82, 'parameter_25': {'AUC ROC': 0.493954, 'AUC PR': 0.583332, 'CLL': -0.710109, 'Precision': [0.583268, 0.5], 'Recall': 0.958495, 'F1': 0.725221, 'Learning time': 0.968, 'Inference time': 0.764}}


Starting fold 3

Target train facts examples: 33252
Target train pos examples: 2436
Target train neg examples: 2800

Target test facts examples: 9306
Target test pos	 examples: 581
Target test neg examples: 2222

Amount of data: 5
******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.8581489350995122;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else return 0.23314893509951226;  // std dev = 1.369, 8.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=3 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.7194734122109545;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else return 0.202334239218108;  // std dev = 1.369, 8.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=3 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.5553664367462845;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else return 0.17149281961528945;  // std dev = 1.369, 8.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=3 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.41751358415830997;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else return 0.14228146899184052;  // std dev = 1.369, 8.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=3 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.32071184716014967;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else return 0.11591746118730598;  // std dev = 1.369, 8.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=3 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.25517224256948945;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else return 0.09305316265470472;  // std dev = 1.369, 8.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=3 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.20975771563253554;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else return 0.07383827012230793;  // std dev = 1.369, 8.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=3 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.17709649774527736;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else return 0.058073729831299666;  // std dev = 1.369, 8.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=3 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.15274385809367097;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else return 0.045370205025705;  // std dev = 1.369, 8.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=3 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.13400703000801117;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else return 0.035268216809254856;  // std dev = 1.369, 8.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=3 */


Results
   AUC ROC   = 0.585198
   AUC PR    = 0.401731
   CLL	      = -0.524825
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.170396
   F1        = 0.291176


Total learning time: 0.922 seconds
Total inference time: 0.957 seconds
AUC ROC: 0.585198


Results scoring model
   AUC ROC   = 0.7
   AUC PR    = 0.787662
   CLL	      = -0.555937
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.4
   F1        = 0.571429


Total scoring time: 0.631 seconds
Parameter learned model CLL: -0.555937


Structure after Parameter Learning
[['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 2], 'false': [1.369, 5, 3]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 2], 'false': [1.369, 5, 3]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 2], 'false': [1.369, 5, 3]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 2], 'false': [1.369, 5, 3]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 2], 'false': [1.369, 5, 3]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 2], 'false': [1.369, 5, 3]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 2], 'false': [1.369, 5, 3]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 2], 'false': [1.369, 5, 3]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 2], 'false': [1.369, 5, 3]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 2], 'false': [1.369, 5, 3]}]]
[{'': [0.0, 0.2343749999999999]}, {'': [0.0, 0.23437500000000008]}, {'': [0.0, 0.23437499999999992]}, {'': [0.0, 0.23437499999999994]}, {'': [0.0, 0.23437499999999994]}, {'': [0.0, 0.23437499999999994]}, {'': [0.0, 0.23437499999999997]}, {'': [0.0, 0.23437499999999994]}, {'': [0.0, 0.2343749999999999]}, {'': [0.0, 0.234375]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
1;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
2;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
3;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
4;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
5;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
6;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
7;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
8;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
9;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.8581489350995122;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else return 0.23314893509951226;  // std dev = 0.484, 8.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=3 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.7194734122109545;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else return 0.202334239218108;  // std dev = 0.484, 8.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=3 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.5553664367462845;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else return 0.17149281961528945;  // std dev = 0.484, 8.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=3 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.41751358415830997;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else return 0.14228146899184052;  // std dev = 0.484, 8.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=3 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.32071184716014967;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else return 0.11591746118730598;  // std dev = 0.484, 8.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=3 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.25517224256948945;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else return 0.09305316265470472;  // std dev = 0.484, 8.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=3 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.20975771563253554;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else return 0.07383827012230793;  // std dev = 0.484, 8.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=3 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.17709649774527736;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else return 0.058073729831299666;  // std dev = 0.484, 8.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=3 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.15274385809367097;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else return 0.045370205025705;  // std dev = 0.484, 8.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=3 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.13400703000801117;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else return 0.035268216809254856;  // std dev = 0.484, 8.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=3 */


Results
   AUC ROC   = 0.585198
   AUC PR    = 0.401731
   CLL	      = -0.524825
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.170396
   F1        = 0.291176


Total learning time: 1.191 seconds
Total inference time: 0.973 seconds
AUC ROC: 0.585198


Results scoring model
   AUC ROC   = 0.7
   AUC PR    = 0.787662
   CLL	      = -0.555937
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.4
   F1        = 0.571429


Total scoring time: 0.638 seconds
Refined model CLL: -0.555937


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.585198
   AUC PR    = 0.401731
   CLL	      = -0.524825
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.170396
   F1        = 0.291176


Total learning time: 3.3819999999999997 seconds
Total inference time: 0.957 seconds
AUC ROC: 0.585198
Total revision time: 3.3819999999999997
Best scored revision CLL: -0.555937


Dataset: 3_imdb_cora, Fold: 3, Type: Transfer (trRDN-B), Time: 00:15:56
{'AUC ROC': 0.585198, 'AUC PR': 0.401731, 'CLL': -0.524825, 'Precision': [1.0, 0.5], 'Recall': 0.170396, 'F1': 0.291176, 'Learning time': 3.3819999999999997, 'Inference time': 0.957, 'parameter_5': {'AUC ROC': 0.585198, 'AUC PR': 0.401731, 'CLL': -0.524825, 'Precision': [1.0, 0.5], 'Recall': 0.170396, 'F1': 0.291176, 'Learning time': 0.922, 'Inference time': 0.957}}


Amount of data: 10
******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.8581489350995121;  // std dev = 2.11e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return 0.26991364098186527;  // std dev = 2.029, 17.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=7 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.7194734122109545;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return 0.2337836550996701;  // std dev = 2.029, 17.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=7 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.5553664367462845;  // std dev = 1.05e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return 0.19697678246055136;  // std dev = 2.029, 17.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=7 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.41751358415830997;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return 0.16189848815690908;  // std dev = 2.029, 17.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=7 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.32071184716014967;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return 0.1303444240371668;  // std dev = 2.029, 17.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=7 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.25517224256948945;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return 0.10325226905662939;  // std dev = 2.029, 17.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=7 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.20975771563253554;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return 0.08080125457789766;  // std dev = 2.029, 17.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=7 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.17709649774527736;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return 0.06267194972365497;  // std dev = 2.029, 17.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=7 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.15274385809367097;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return 0.04829996903690906;  // std dev = 2.029, 17.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=7 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.13400703000801117;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return 0.0370533980540081;  // std dev = 2.029, 17.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=7 */


Results
   AUC ROC   = 0.585198
   AUC PR    = 0.401731
   CLL	      = -0.552672
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.170396
   F1        = 0.291176


Total learning time: 0.904 seconds
Total inference time: 0.928 seconds
AUC ROC: 0.585198


Results scoring model
   AUC ROC   = 0.65
   AUC PR    = 0.72976
   CLL	      = -0.59634
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.3
   F1        = 0.461538


Total scoring time: 0.72 seconds
Parameter learned model CLL: -0.59634


Structure after Parameter Learning
[['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [2.11e-08, 0, 3], 'false': [2.029, 10, 7]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 3], 'false': [2.029, 10, 7]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [1.05e-08, 0, 3], 'false': [2.029, 10, 7]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 3], 'false': [2.029, 10, 7]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 3], 'false': [2.029, 10, 7]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 3], 'false': [2.029, 10, 7]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 3], 'false': [2.029, 10, 7]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 3], 'false': [2.029, 10, 7]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 3], 'false': [2.029, 10, 7]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 3], 'false': [2.029, 10, 7]}]]
[{'': [1.4802973661668753e-16, 0.24221453287197234]}, {'': [0.0, 0.2422145328719722]}, {'': [3.700743415417188e-17, 0.2422145328719721]}, {'': [-3.700743415417188e-17, 0.2422145328719721]}, {'': [0.0, 0.2422145328719724]}, {'': [0.0, 0.24221453287197225]}, {'': [0.0, 0.24221453287197228]}, {'': [0.0, 0.24221453287197228]}, {'': [-4.625929269271485e-18, 0.2422145328719724]}, {'': [-2.3129646346357427e-18, 0.24221453287197245]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
1;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
2;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
3;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
4;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
5;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
6;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
7;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
8;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
9;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.8581489350995121;  // std dev = 2.11e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return 0.26991364098186527;  // std dev = 0.492, 17.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=7 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.7194734122109545;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return 0.2337836550996701;  // std dev = 0.492, 17.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=7 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.5553664367462845;  // std dev = 1.05e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return 0.19697678246055136;  // std dev = 0.492, 17.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=7 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.41751358415830997;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return 0.16189848815690908;  // std dev = 0.492, 17.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=7 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.32071184716014967;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return 0.1303444240371668;  // std dev = 0.492, 17.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=7 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.25517224256948945;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return 0.10325226905662939;  // std dev = 0.492, 17.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=7 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.20975771563253554;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return 0.08080125457789766;  // std dev = 0.492, 17.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=7 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.17709649774527736;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return 0.06267194972365497;  // std dev = 0.492, 17.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=7 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.15274385809367097;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return 0.04829996903690906;  // std dev = 0.492, 17.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=7 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.13400703000801117;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return 0.0370533980540081;  // std dev = 0.492, 17.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=7 */


Results
   AUC ROC   = 0.585198
   AUC PR    = 0.401731
   CLL	      = -0.552672
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.170396
   F1        = 0.291176


Total learning time: 1.238 seconds
Total inference time: 0.875 seconds
AUC ROC: 0.585198


Results scoring model
   AUC ROC   = 0.65
   AUC PR    = 0.72976
   CLL	      = -0.59634
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.3
   F1        = 0.461538


Total scoring time: 0.65 seconds
Refined model CLL: -0.59634


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.585198
   AUC PR    = 0.401731
   CLL	      = -0.552672
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.170396
   F1        = 0.291176


Total learning time: 3.512 seconds
Total inference time: 0.928 seconds
AUC ROC: 0.585198
Total revision time: 3.512
Best scored revision CLL: -0.59634


Dataset: 3_imdb_cora, Fold: 3, Type: Transfer (trRDN-B), Time: 00:16:02
{'AUC ROC': 0.585198, 'AUC PR': 0.401731, 'CLL': -0.552672, 'Precision': [1.0, 0.5], 'Recall': 0.170396, 'F1': 0.291176, 'Learning time': 3.512, 'Inference time': 0.928, 'parameter_10': {'AUC ROC': 0.585198, 'AUC PR': 0.401731, 'CLL': -0.552672, 'Precision': [1.0, 0.5], 'Recall': 0.170396, 'F1': 0.291176, 'Learning time': 0.904, 'Inference time': 0.928}}


Amount of data: 15
******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.8581489350995122;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return 0.2581489350995123;  // std dev = 2.449, 25.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=10 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.7194734122109545;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return 0.22373365448410582;  // std dev = 2.449, 25.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=10 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.5553664367462845;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return 0.1888683221574971;  // std dev = 2.449, 25.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=10 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.4175135841583099;  // std dev = 1.49e-08, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return 0.15570029437174387;  // std dev = 2.449, 25.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=10 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.32071184716014967;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return 0.1258262822937211;  // std dev = 2.449, 25.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=10 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.25517224256948945;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return 0.1000891691788054;  // std dev = 2.449, 25.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=10 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.20975771563253556;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return 0.07866279780602582;  // std dev = 2.449, 25.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=10 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.17709649774527736;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return 0.06127260860742249;  // std dev = 2.449, 25.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=10 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.15274385809367097;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return 0.04741549148811444;  // std dev = 2.449, 25.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=10 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.13400703000801117;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return 0.036517889972878886;  // std dev = 2.449, 25.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=10 */


Results
   AUC ROC   = 0.585198
   AUC PR    = 0.401731
   CLL	      = -0.54329
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.170396
   F1        = 0.291176


Total learning time: 0.927 seconds
Total inference time: 0.913 seconds
AUC ROC: 0.585198


Results scoring model
   AUC ROC   = 0.666667
   AUC PR    = 0.744924
   CLL	      = -0.583386
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.333333
   F1        = 0.5


Total scoring time: 0.645 seconds
Parameter learned model CLL: -0.583386


Structure after Parameter Learning
[['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 5], 'false': [2.449, 15, 10]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 5], 'false': [2.449, 15, 10]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 5], 'false': [2.449, 15, 10]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [1.49e-08, 0, 5], 'false': [2.449, 15, 10]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 5], 'false': [2.449, 15, 10]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 5], 'false': [2.449, 15, 10]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 5], 'false': [2.449, 15, 10]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 5], 'false': [2.449, 15, 10]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 5], 'false': [2.449, 15, 10]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 5], 'false': [2.449, 15, 10]}]]
[{'': [0.0, 0.24000000000000005]}, {'': [0.0, 0.24000000000000024]}, {'': [-4.4408920985006264e-17, 0.24000000000000005]}, {'': [4.4408920985006264e-17, 0.24000000000000013]}, {'': [-2.2204460492503132e-17, 0.23999999999999982]}, {'': [0.0, 0.2399999999999998]}, {'': [-5.551115123125783e-18, 0.23999999999999996]}, {'': [0.0, 0.23999999999999988]}, {'': [0.0, 0.23999999999999988]}, {'': [0.0, 0.24]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
1;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
2;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
3;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
4;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
5;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
6;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
7;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
8;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
9;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.8581489350995122;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return 0.2581489350995123;  // std dev = 0.490, 25.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=10 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.7194734122109545;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return 0.22373365448410582;  // std dev = 0.490, 25.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=10 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.5553664367462845;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return 0.1888683221574971;  // std dev = 0.490, 25.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=10 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.4175135841583099;  // std dev = 1.49e-08, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return 0.15570029437174387;  // std dev = 0.490, 25.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=10 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.32071184716014967;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return 0.1258262822937211;  // std dev = 0.490, 25.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=10 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.25517224256948945;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return 0.1000891691788054;  // std dev = 0.490, 25.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=10 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.20975771563253556;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return 0.07866279780602582;  // std dev = 0.490, 25.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=10 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.17709649774527736;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return 0.06127260860742249;  // std dev = 0.490, 25.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=10 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.15274385809367097;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return 0.04741549148811444;  // std dev = 0.490, 25.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=10 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.13400703000801117;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return 0.036517889972878886;  // std dev = 0.490, 25.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=10 */


Results
   AUC ROC   = 0.585198
   AUC PR    = 0.401731
   CLL	      = -0.54329
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.170396
   F1        = 0.291176


Total learning time: 1.301 seconds
Total inference time: 0.929 seconds
AUC ROC: 0.585198


Results scoring model
   AUC ROC   = 0.666667
   AUC PR    = 0.744924
   CLL	      = -0.583386
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.333333
   F1        = 0.5


Total scoring time: 0.654 seconds
Refined model CLL: -0.583386


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.585198
   AUC PR    = 0.401731
   CLL	      = -0.54329
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.170396
   F1        = 0.291176


Total learning time: 3.527 seconds
Total inference time: 0.913 seconds
AUC ROC: 0.585198
Total revision time: 3.527
Best scored revision CLL: -0.583386


Dataset: 3_imdb_cora, Fold: 3, Type: Transfer (trRDN-B), Time: 00:16:08
{'AUC ROC': 0.585198, 'AUC PR': 0.401731, 'CLL': -0.54329, 'Precision': [1.0, 0.5], 'Recall': 0.170396, 'F1': 0.291176, 'Learning time': 3.527, 'Inference time': 0.913, 'parameter_15': {'AUC ROC': 0.585198, 'AUC PR': 0.401731, 'CLL': -0.54329, 'Precision': [1.0, 0.5], 'Recall': 0.170396, 'F1': 0.291176, 'Learning time': 0.927, 'Inference time': 0.913}}


Amount of data: 20
******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.8581489350995123;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else return 0.26991364098186527;  // std dev = 2.870, 34.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=14 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.7194734122109544;  // std dev = 2.11e-08, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else return 0.2337836550996707;  // std dev = 2.870, 34.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=14 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.5553664367462846;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else return 0.19697678246055098;  // std dev = 2.870, 34.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=14 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.4175135841583099;  // std dev = 2.11e-08, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else return 0.16189848815690908;  // std dev = 2.870, 34.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=14 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.3207118471601497;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else return 0.1303444240371668;  // std dev = 2.870, 34.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=14 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.2551722425694894;  // std dev = 7.45e-09, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else return 0.10325226905662921;  // std dev = 2.870, 34.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=14 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.20975771563253556;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else return 0.0808012545778974;  // std dev = 2.870, 34.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=14 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.17709649774527736;  // std dev = 5.27e-09, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else return 0.06267194972365514;  // std dev = 2.870, 34.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=14 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.15274385809367097;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else return 0.0482999690369091;  // std dev = 2.870, 34.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=14 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.13400703000801117;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else return 0.037053398054008216;  // std dev = 2.870, 34.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=14 */


Results
   AUC ROC   = 0.585198
   AUC PR    = 0.401731
   CLL	      = -0.552672
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.170396
   F1        = 0.291176


Total learning time: 0.926 seconds
Total inference time: 0.91 seconds
AUC ROC: 0.585198


Results scoring model
   AUC ROC   = 0.65
   AUC PR    = 0.727043
   CLL	      = -0.59634
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.3
   F1        = 0.461538


Total scoring time: 0.677 seconds
Parameter learned model CLL: -0.59634


Structure after Parameter Learning
[['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 6], 'false': [2.87, 20, 14]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [2.11e-08, 0, 6], 'false': [2.87, 20, 14]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 6], 'false': [2.87, 20, 14]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [2.11e-08, 0, 6], 'false': [2.87, 20, 14]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 6], 'false': [2.87, 20, 14]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [7.45e-09, 0, 6], 'false': [2.87, 20, 14]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 6], 'false': [2.87, 20, 14]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [5.27e-09, 0, 6], 'false': [2.87, 20, 14]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 6], 'false': [2.87, 20, 14]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 6], 'false': [2.87, 20, 14]}]]
[{'': [-1.4802973661668753e-16, 0.2422145328719718]}, {'': [7.401486830834377e-17, 0.2422145328719724]}, {'': [-7.401486830834377e-17, 0.24221453287197275]}, {'': [7.401486830834377e-17, 0.2422145328719725]}, {'': [-3.700743415417188e-17, 0.24221453287197198]}, {'': [9.25185853854297e-18, 0.2422145328719724]}, {'': [-9.25185853854297e-18, 0.24221453287197234]}, {'': [4.625929269271485e-18, 0.2422145328719724]}, {'': [-4.625929269271485e-18, 0.24221453287197225]}, {'': [0.0, 0.2422145328719724]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
1;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
2;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
3;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
4;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
5;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
6;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
7;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
8;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
9;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.8581489350995123;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.2775037738091898;  // std dev = 0.493, 31.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=13 */
%   | else return 0.19148226843284552;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.7194734122109544;  // std dev = 2.11e-08, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.24026060722470613;  // std dev = 0.493, 31.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=13 */
%   | else return 0.16653882456488175;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.5553664367462846;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.20218492663507778;  // std dev = 0.493, 31.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=13 */
%   | else return 0.1420942428155648;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.4175135841583099;  // std dev = 2.11e-08, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.16585841498049866;  // std dev = 0.493, 31.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=13 */
%   | else return 0.11914890490746428;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.3207118471601497;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.13321210446743792;  // std dev = 0.493, 31.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=13 */
%   | else return 0.09841340278401862;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.2551722425694894;  // std dev = 7.45e-09, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.10524616388851478;  // std dev = 0.493, 31.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=13 */
%   | else return 0.08026654944252243;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.20975771563253556;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.08214074703601558;  // std dev = 0.493, 31.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=13 */
%   | else return 0.06479591611329232;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.17709649774527736;  // std dev = 5.27e-09, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.0635440201630567;  // std dev = 0.493, 31.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=13 */
%   | else return 0.05187916934404054;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.15274385809367097;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.04884943547086747;  // std dev = 0.493, 31.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=13 */
%   | else return 0.04126932998424626;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.13400703000801117;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.03738599021709134;  // std dev = 0.493, 31.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=13 */
%   | else return 0.032663748734830134;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */


Results
   AUC ROC   = 0.620301
   AUC PR    = 0.416414
   CLL	      = -0.545855
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.170396
   F1        = 0.291176


Total learning time: 2.901 seconds
Total inference time: 1.082 seconds
AUC ROC: 0.620301


Results scoring model
   AUC ROC   = 0.66
   AUC PR    = 0.731728
   CLL	      = -0.595271
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.3
   F1        = 0.461538


Total scoring time: 0.712 seconds
Refined model CLL: -0.595271


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.620301
   AUC PR    = 0.416414
   CLL	      = -0.545855
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.170396
   F1        = 0.291176


Total learning time: 5.215999999999999 seconds
Total inference time: 1.082 seconds
AUC ROC: 0.620301
Total revision time: 5.215999999999999
Best scored revision CLL: -0.595271


Dataset: 3_imdb_cora, Fold: 3, Type: Transfer (trRDN-B), Time: 00:16:15
{'AUC ROC': 0.620301, 'AUC PR': 0.416414, 'CLL': -0.545855, 'Precision': [1.0, 0.5], 'Recall': 0.170396, 'F1': 0.291176, 'Learning time': 5.215999999999999, 'Inference time': 1.082, 'parameter_20': {'AUC ROC': 0.585198, 'AUC PR': 0.401731, 'CLL': -0.552672, 'Precision': [1.0, 0.5], 'Recall': 0.170396, 'F1': 0.291176, 'Learning time': 0.926, 'Inference time': 0.91}}


Amount of data: 25
******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.8581489350995123;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else return 0.2899671169176941;  // std dev = 3.286, 44.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=19 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.7194734122109544;  // std dev = 2.11e-08, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else return 0.2508842618859418;  // std dev = 3.286, 44.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=19 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.5553664367462846;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else return 0.21069769466233998;  // std dev = 3.286, 44.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=19 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.4175135841583099;  // std dev = 2.11e-08, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else return 0.17229550544638697;  // std dev = 3.286, 44.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=19 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.3207118471601497;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else return 0.13784307869842588;  // std dev = 3.286, 44.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=19 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.2551722425694894;  // std dev = 7.45e-09, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else return 0.1084448836218004;  // std dev = 3.286, 44.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=19 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.20975771563253556;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else return 0.08427759008146234;  // std dev = 3.286, 44.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=19 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.17709649774527736;  // std dev = 5.27e-09, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else return 0.06492998468824879;  // std dev = 3.286, 44.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=19 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.15274385809367097;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else return 0.04972186647217598;  // std dev = 3.286, 44.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=19 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.13400703000801117;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else return 0.03791581791474125;  // std dev = 3.286, 44.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=19 */


Results
   AUC ROC   = 0.585198
   AUC PR    = 0.401731
   CLL	      = -0.56967
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.170396
   F1        = 0.291176


Total learning time: 1.079 seconds
Total inference time: 0.957 seconds
AUC ROC: 0.585198


Results scoring model
   AUC ROC   = 0.62
   AUC PR    = 0.693742
   CLL	      = -0.618503
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.24
   F1        = 0.387097


Total scoring time: 0.745 seconds
Parameter learned model CLL: -0.618503


Structure after Parameter Learning
[['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 6], 'false': [3.286, 25, 19]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [2.11e-08, 0, 6], 'false': [3.286, 25, 19]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 6], 'false': [3.286, 25, 19]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [2.11e-08, 0, 6], 'false': [3.286, 25, 19]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 6], 'false': [3.286, 25, 19]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [7.45e-09, 0, 6], 'false': [3.286, 25, 19]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 6], 'false': [3.286, 25, 19]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [5.27e-09, 0, 6], 'false': [3.286, 25, 19]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 6], 'false': [3.286, 25, 19]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 6], 'false': [3.286, 25, 19]}]]
[{'': [-1.4802973661668753e-16, 0.24535123966942105]}, {'': [7.401486830834377e-17, 0.24535123966942118]}, {'': [-7.401486830834377e-17, 0.24535123966942185]}, {'': [7.401486830834377e-17, 0.2453512396694215]}, {'': [-3.700743415417188e-17, 0.24535123966942116]}, {'': [9.25185853854297e-18, 0.24535123966942143]}, {'': [-9.25185853854297e-18, 0.24535123966942116]}, {'': [4.625929269271485e-18, 0.24535123966942124]}, {'': [-4.625929269271485e-18, 0.24535123966942127]}, {'': [0.0, 0.2453512396694215]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
1;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
2;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
3;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
4;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
5;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
6;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
7;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
8;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
9;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.8581489350995123;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.2971733253434148;  // std dev = 0.496, 41.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=18 */
%   | else return 0.19148226843284552;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.7194734122109544;  // std dev = 2.11e-08, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.25702007654150416;  // std dev = 0.496, 41.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=18 */
%   | else return 0.16653882456488175;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.5553664367462846;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.21559750946631662;  // std dev = 0.496, 41.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=18 */
%   | else return 0.1420942428155648;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.4175135841583099;  // std dev = 2.11e-08, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.17598082026505293;  // std dev = 0.496, 41.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=18 */
%   | else return 0.11914890490746428;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.3207118471601497;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.14047775562300263;  // std dev = 0.496, 41.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=18 */
%   | else return 0.09841340278401862;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.2551722425694894;  // std dev = 7.45e-09, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.11025374600791472;  // std dev = 0.496, 41.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=18 */
%   | else return 0.08026654944252243;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.20975771563253556;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.08548029352486944;  // std dev = 0.496, 41.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=18 */
%   | else return 0.06479591611329232;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.17709649774527736;  // std dev = 5.27e-09, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.06570822480575533;  // std dev = 0.496, 41.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=18 */
%   | else return 0.05187916934404054;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.15274385809367097;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.05021229057361077;  // std dev = 0.496, 41.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=18 */
%   | else return 0.04126932998424626;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.13400703000801117;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.03821552242700876;  // std dev = 0.496, 41.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=18 */
%   | else return 0.032663748734830134;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */


Results
   AUC ROC   = 0.620301
   AUC PR    = 0.416414
   CLL	      = -0.559558
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.170396
   F1        = 0.291176


Total learning time: 3.313 seconds
Total inference time: 0.962 seconds
AUC ROC: 0.620301


Results scoring model
   AUC ROC   = 0.6304
   AUC PR    = 0.698666
   CLL	      = -0.617199
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.24
   F1        = 0.387097


Total scoring time: 0.761 seconds
Refined model CLL: -0.617199


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.620301
   AUC PR    = 0.416414
   CLL	      = -0.559558
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.170396
   F1        = 0.291176


Total learning time: 5.898000000000001 seconds
Total inference time: 0.962 seconds
AUC ROC: 0.620301
Total revision time: 5.898000000000001
Best scored revision CLL: -0.617199


Dataset: 3_imdb_cora, Fold: 3, Type: Transfer (trRDN-B), Time: 00:16:24
{'AUC ROC': 0.620301, 'AUC PR': 0.416414, 'CLL': -0.559558, 'Precision': [1.0, 0.5], 'Recall': 0.170396, 'F1': 0.291176, 'Learning time': 5.898000000000001, 'Inference time': 0.962, 'parameter_25': {'AUC ROC': 0.585198, 'AUC PR': 0.401731, 'CLL': -0.56967, 'Precision': [1.0, 0.5], 'Recall': 0.170396, 'F1': 0.291176, 'Learning time': 1.079, 'Inference time': 0.957}}


Starting fold 4

Target train facts examples: 34429
Target train pos examples: 2270
Target train neg examples: 3954

Target test facts examples: 8129
Target test pos	 examples: 747
Target test neg examples: 1068

Amount of data: 5
******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.8581489350995122;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else return 0.30259337954395676;  // std dev = 1.491, 9.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=4 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.7194734122109545;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else return 0.2616318086752123;  // std dev = 1.491, 9.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=4 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.5553664367462845;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else return 0.2192721473492705;  // std dev = 1.491, 9.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=4 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.41751358415830997;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else return 0.17873524574687283;  // std dev = 1.491, 9.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=4 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.32071184716014967;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else return 0.1424392447767628;  // std dev = 1.491, 9.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=4 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.25517224256948945;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else return 0.11159559999632969;  // std dev = 1.491, 9.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=4 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.20975771563253554;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else return 0.08637026299843623;  // std dev = 1.491, 9.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=4 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.17709649774527736;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else return 0.06628370899125427;  // std dev = 1.491, 9.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=4 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.15274385809367097;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else return 0.05057564362187433;  // std dev = 1.491, 9.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=4 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.13400703000801117;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else return 0.038438849075129386;  // std dev = 1.491, 9.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=4 */


Results
   AUC ROC   = 0.576975
   AUC PR    = 0.567681
   CLL	      = -0.629819
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.153949
   F1        = 0.266821


Total learning time: 0.869 seconds
Total inference time: 0.81 seconds
AUC ROC: 0.576975


Results scoring model
   AUC ROC   = 0.6
   AUC PR    = 0.685394
   CLL	      = -0.632522
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.2
   F1        = 0.333333


Total scoring time: 0.629 seconds
Parameter learned model CLL: -0.632522


Structure after Parameter Learning
[['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 1], 'false': [1.491, 5, 4]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 1], 'false': [1.491, 5, 4]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 1], 'false': [1.491, 5, 4]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 1], 'false': [1.491, 5, 4]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 1], 'false': [1.491, 5, 4]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 1], 'false': [1.491, 5, 4]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 1], 'false': [1.491, 5, 4]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 1], 'false': [1.491, 5, 4]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 1], 'false': [1.491, 5, 4]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 1], 'false': [1.491, 5, 4]}]]
[{'': [0.0, 0.2469135802469134]}, {'': [0.0, 0.24691358024691354]}, {'': [0.0, 0.24691358024691365]}, {'': [0.0, 0.2469135802469136]}, {'': [0.0, 0.2469135802469136]}, {'': [0.0, 0.2469135802469136]}, {'': [0.0, 0.2469135802469136]}, {'': [0.0, 0.2469135802469136]}, {'': [0.0, 0.2469135802469136]}, {'': [0.0, 0.2469135802469136]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
1;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
2;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
3;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
4;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
5;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
6;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
7;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
8;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
9;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.8581489350995122;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else return 0.30259337954395676;  // std dev = 0.497, 9.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=4 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.7194734122109545;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else return 0.2616318086752123;  // std dev = 0.497, 9.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=4 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.5553664367462845;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else return 0.2192721473492705;  // std dev = 0.497, 9.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=4 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.41751358415830997;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else return 0.17873524574687283;  // std dev = 0.497, 9.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=4 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.32071184716014967;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else return 0.1424392447767628;  // std dev = 0.497, 9.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=4 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.25517224256948945;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else return 0.11159559999632969;  // std dev = 0.497, 9.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=4 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.20975771563253554;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else return 0.08637026299843623;  // std dev = 0.497, 9.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=4 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.17709649774527736;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else return 0.06628370899125427;  // std dev = 0.497, 9.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=4 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.15274385809367097;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else return 0.05057564362187433;  // std dev = 0.497, 9.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=4 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.13400703000801117;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else return 0.038438849075129386;  // std dev = 0.497, 9.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=4 */


Results
   AUC ROC   = 0.576975
   AUC PR    = 0.567681
   CLL	      = -0.629819
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.153949
   F1        = 0.266821


Total learning time: 1.195 seconds
Total inference time: 0.805 seconds
AUC ROC: 0.576975


Results scoring model
   AUC ROC   = 0.6
   AUC PR    = 0.685394
   CLL	      = -0.632522
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.2
   F1        = 0.333333


Total scoring time: 0.64 seconds
Refined model CLL: -0.632522


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.576975
   AUC PR    = 0.567681
   CLL	      = -0.629819
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.153949
   F1        = 0.266821


Total learning time: 3.333 seconds
Total inference time: 0.81 seconds
AUC ROC: 0.576975
Total revision time: 3.333
Best scored revision CLL: -0.632522


Dataset: 3_imdb_cora, Fold: 4, Type: Transfer (trRDN-B), Time: 00:16:29
{'AUC ROC': 0.576975, 'AUC PR': 0.567681, 'CLL': -0.629819, 'Precision': [1.0, 0.5], 'Recall': 0.153949, 'F1': 0.266821, 'Learning time': 3.333, 'Inference time': 0.81, 'parameter_5': {'AUC ROC': 0.576975, 'AUC PR': 0.567681, 'CLL': -0.629819, 'Precision': [1.0, 0.5], 'Recall': 0.153949, 'F1': 0.266821, 'Learning time': 0.869, 'Inference time': 0.81}}


Amount of data: 10
******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.8581489350995122;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else return 0.3025933795439568;  // std dev = 2.108, 18.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=8 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.7194734122109545;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else return 0.2616318086752123;  // std dev = 2.108, 18.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=8 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.5553664367462845;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else return 0.2192721473492705;  // std dev = 2.108, 18.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=8 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.41751358415830997;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else return 0.1787352457468729;  // std dev = 2.108, 18.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=8 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.32071184716014967;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else return 0.1424392447767627;  // std dev = 2.108, 18.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=8 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.25517224256948945;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else return 0.11159559999632984;  // std dev = 2.108, 18.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=8 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.20975771563253554;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else return 0.08637026299843614;  // std dev = 2.108, 18.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=8 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.17709649774527736;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else return 0.06628370899125427;  // std dev = 2.108, 18.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=8 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.15274385809367097;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else return 0.05057564362187417;  // std dev = 2.108, 18.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=8 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.13400703000801117;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else return 0.03843884907512937;  // std dev = 2.108, 18.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=8 */


Results
   AUC ROC   = 0.576975
   AUC PR    = 0.567681
   CLL	      = -0.629819
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.153949
   F1        = 0.266821


Total learning time: 0.909 seconds
Total inference time: 0.835 seconds
AUC ROC: 0.576975


Results scoring model
   AUC ROC   = 0.6
   AUC PR    = 0.673962
   CLL	      = -0.632522
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.2
   F1        = 0.333333


Total scoring time: 0.648 seconds
Parameter learned model CLL: -0.632522


Structure after Parameter Learning
[['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 2], 'false': [2.108, 10, 8]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 2], 'false': [2.108, 10, 8]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 2], 'false': [2.108, 10, 8]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 2], 'false': [2.108, 10, 8]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 2], 'false': [2.108, 10, 8]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 2], 'false': [2.108, 10, 8]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 2], 'false': [2.108, 10, 8]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 2], 'false': [2.108, 10, 8]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 2], 'false': [2.108, 10, 8]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 2], 'false': [2.108, 10, 8]}]]
[{'': [0.0, 0.2469135802469136]}, {'': [0.0, 0.2469135802469138]}, {'': [0.0, 0.2469135802469134]}, {'': [0.0, 0.24691358024691354]}, {'': [0.0, 0.24691358024691384]}, {'': [0.0, 0.24691358024691348]}, {'': [0.0, 0.24691358024691348]}, {'': [0.0, 0.24691358024691368]}, {'': [0.0, 0.2469135802469136]}, {'': [0.0, 0.24691358024691365]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
1;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
2;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
3;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
4;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
5;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
6;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
7;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
8;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
9;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.8581489350995122;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else return 0.3025933795439568;  // std dev = 0.497, 18.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=8 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.7194734122109545;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else return 0.2616318086752123;  // std dev = 0.497, 18.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=8 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.5553664367462845;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else return 0.2192721473492705;  // std dev = 0.497, 18.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=8 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.41751358415830997;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else return 0.1787352457468729;  // std dev = 0.497, 18.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=8 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.32071184716014967;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else return 0.1424392447767627;  // std dev = 0.497, 18.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=8 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.25517224256948945;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else return 0.11159559999632984;  // std dev = 0.497, 18.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=8 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.20975771563253554;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else return 0.08637026299843614;  // std dev = 0.497, 18.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=8 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.17709649774527736;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else return 0.06628370899125427;  // std dev = 0.497, 18.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=8 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.15274385809367097;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else return 0.05057564362187417;  // std dev = 0.497, 18.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=8 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.13400703000801117;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else return 0.03843884907512937;  // std dev = 0.497, 18.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=8 */


Results
   AUC ROC   = 0.576975
   AUC PR    = 0.567681
   CLL	      = -0.629819
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.153949
   F1        = 0.266821


Total learning time: 1.226 seconds
Total inference time: 0.802 seconds
AUC ROC: 0.576975


Results scoring model
   AUC ROC   = 0.6
   AUC PR    = 0.673962
   CLL	      = -0.632522
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.2
   F1        = 0.333333


Total scoring time: 0.643 seconds
Refined model CLL: -0.632522


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.576975
   AUC PR    = 0.567681
   CLL	      = -0.629819
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.153949
   F1        = 0.266821


Total learning time: 3.426 seconds
Total inference time: 0.835 seconds
AUC ROC: 0.576975
Total revision time: 3.426
Best scored revision CLL: -0.632522


Dataset: 3_imdb_cora, Fold: 4, Type: Transfer (trRDN-B), Time: 00:16:35
{'AUC ROC': 0.576975, 'AUC PR': 0.567681, 'CLL': -0.629819, 'Precision': [1.0, 0.5], 'Recall': 0.153949, 'F1': 0.266821, 'Learning time': 3.426, 'Inference time': 0.835, 'parameter_10': {'AUC ROC': 0.576975, 'AUC PR': 0.567681, 'CLL': -0.629819, 'Precision': [1.0, 0.5], 'Recall': 0.153949, 'F1': 0.266821, 'Learning time': 0.909, 'Inference time': 0.835}}


Amount of data: 15
******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.8581489350995122;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else return 0.2812258581764354;  // std dev = 2.519, 26.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=11 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.7194734122109545;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else return 0.24343481888732565;  // std dev = 2.519, 26.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=11 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.5553664367462845;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else return 0.2047323048430412;  // std dev = 2.519, 26.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=11 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.41751358415830997;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else return 0.16778925982029097;  // std dev = 2.519, 26.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=11 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.32071184716014967;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else return 0.1346051315246625;  // std dev = 2.519, 26.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=11 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.25517224256948945;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else return 0.1062110453196897;  // std dev = 2.519, 26.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=11 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.20975771563253554;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else return 0.08278679559835075;  // std dev = 2.519, 26.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=11 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.17709649774527736;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else return 0.06396363163531019;  // std dev = 2.519, 26.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=11 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.15274385809367097;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else return 0.04911358160877256;  // std dev = 2.519, 26.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=11 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.13400703000801117;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else return 0.03754608823819938;  // std dev = 2.519, 26.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=11 */


Results
   AUC ROC   = 0.576975
   AUC PR    = 0.567681
   CLL	      = -0.627137
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.153949
   F1        = 0.266821


Total learning time: 0.908 seconds
Total inference time: 0.822 seconds
AUC ROC: 0.576975


Results scoring model
   AUC ROC   = 0.633333
   AUC PR    = 0.709873
   CLL	      = -0.608828
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.266667
   F1        = 0.421053


Total scoring time: 0.661 seconds
Parameter learned model CLL: -0.608828


Structure after Parameter Learning
[['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 4], 'false': [2.519, 15, 11]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 4], 'false': [2.519, 15, 11]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 4], 'false': [2.519, 15, 11]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 4], 'false': [2.519, 15, 11]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 4], 'false': [2.519, 15, 11]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 4], 'false': [2.519, 15, 11]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 4], 'false': [2.519, 15, 11]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 4], 'false': [2.519, 15, 11]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 4], 'false': [2.519, 15, 11]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 4], 'false': [2.519, 15, 11]}]]
[{'': [0.0, 0.24408284023668594]}, {'': [0.0, 0.24408284023668642]}, {'': [0.0, 0.24408284023668653]}, {'': [0.0, 0.24408284023668647]}, {'': [0.0, 0.2440828402366864]}, {'': [0.0, 0.24408284023668617]}, {'': [0.0, 0.24408284023668625]}, {'': [0.0, 0.24408284023668653]}, {'': [0.0, 0.24408284023668647]}, {'': [0.0, 0.2440828402366862]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
1;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
2;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
3;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
4;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
5;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
6;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
7;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
8;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
9;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.8581489350995122;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( haswordvenue(A, D), haswordtitle(E, D) )
%   | then return 0.3126943896449669;  // std dev = 0.498, 22.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=10 */
%   | else return 0.10814893509951219;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.7194734122109545;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( haswordvenue(A, D), haswordtitle(E, D) )
%   | then return 0.27021896952830937;  // std dev = 0.498, 22.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=10 */
%   | else return 0.09446743783575562;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.5553664367462845;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( haswordvenue(A, D), haswordtitle(E, D) )
%   | then return 0.22609590054065024;  // std dev = 0.498, 22.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=10 */
%   | else return 0.08165239320886175;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.41751358415830997;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( haswordvenue(A, D), haswordtitle(E, D) )
%   | then return 0.18382902223075034;  // std dev = 0.498, 22.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=10 */
%   | else return 0.06990902274840138;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.32071184716014967;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( haswordvenue(A, D), haswordtitle(E, D) )
%   | then return 0.14604980861094888;  // std dev = 0.498, 22.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=10 */
%   | else return 0.059354635365447495;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.25517224256948945;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( haswordvenue(A, D), haswordtitle(E, D) )
%   | then return 0.1140555737810176;  // std dev = 0.498, 22.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=10 */
%   | else return 0.05002771289938789;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.20975771563253554;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( haswordvenue(A, D), haswordtitle(E, D) )
%   | then return 0.08799782365414523;  // std dev = 0.498, 22.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=10 */
%   | else return 0.04190386852605735;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.17709649774527736;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( haswordvenue(A, D), haswordtitle(E, D) )
%   | then return 0.06733625981328874;  // std dev = 0.498, 22.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=10 */
%   | else return 0.03491396367325339;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.15274385809367097;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( haswordvenue(A, D), haswordtitle(E, D) )
%   | then return 0.051242682155655195;  // std dev = 0.498, 22.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=10 */
%   | else return 0.028961035597951046;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.13400703000801117;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( haswordvenue(A, D), haswordtitle(E, D) )
%   | then return 0.038852466071820496;  // std dev = 0.498, 22.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=10 */
%   | else return 0.023934242922604827;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */


Results
   AUC ROC   = 0.582695
   AUC PR    = 0.570484
   CLL	      = -0.630916
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.153949
   F1        = 0.266821


Total learning time: 9.776 seconds
Total inference time: 1.033 seconds
AUC ROC: 0.582695


Results scoring model
   AUC ROC   = 0.673333
   AUC PR    = 0.72965
   CLL	      = -0.598607
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.266667
   F1        = 0.421053


Total scoring time: 0.712 seconds
Refined model CLL: -0.598607


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.582695
   AUC PR    = 0.570484
   CLL	      = -0.630916
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.153949
   F1        = 0.266821


Total learning time: 12.056999999999999 seconds
Total inference time: 1.033 seconds
AUC ROC: 0.582695
Total revision time: 12.056999999999999
Best scored revision CLL: -0.598607


Dataset: 3_imdb_cora, Fold: 4, Type: Transfer (trRDN-B), Time: 00:16:50
{'AUC ROC': 0.582695, 'AUC PR': 0.570484, 'CLL': -0.630916, 'Precision': [1.0, 0.5], 'Recall': 0.153949, 'F1': 0.266821, 'Learning time': 12.056999999999999, 'Inference time': 1.033, 'parameter_15': {'AUC ROC': 0.576975, 'AUC PR': 0.567681, 'CLL': -0.627137, 'Precision': [1.0, 0.5], 'Recall': 0.153949, 'F1': 0.266821, 'Learning time': 0.908, 'Inference time': 0.822}}


Amount of data: 20
******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.8581489350995122;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else return 0.3025933795439568;  // std dev = 2.981, 36.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=16 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.7194734122109545;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else return 0.2616318086752119;  // std dev = 2.981, 36.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=16 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.5553664367462845;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else return 0.2192721473492705;  // std dev = 2.981, 36.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=16 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.41751358415830997;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else return 0.1787352457468729;  // std dev = 2.981, 36.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=16 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.32071184716014967;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else return 0.14243924477676304;  // std dev = 2.981, 36.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=16 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.25517224256948945;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else return 0.11159559999632974;  // std dev = 2.981, 36.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=16 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.20975771563253554;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else return 0.08637026299843592;  // std dev = 2.981, 36.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=16 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.17709649774527736;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else return 0.06628370899125449;  // std dev = 2.981, 36.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=16 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.15274385809367097;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else return 0.05057564362187414;  // std dev = 2.981, 36.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=16 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.13400703000801117;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else return 0.038438849075129365;  // std dev = 2.981, 36.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=16 */


Results
   AUC ROC   = 0.576975
   AUC PR    = 0.567681
   CLL	      = -0.629819
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.153949
   F1        = 0.266821


Total learning time: 0.947 seconds
Total inference time: 0.864 seconds
AUC ROC: 0.576975


Results scoring model
   AUC ROC   = 0.6
   AUC PR    = 0.670516
   CLL	      = -0.632522
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.2
   F1        = 0.333333


Total scoring time: 0.651 seconds
Parameter learned model CLL: -0.632522


Structure after Parameter Learning
[['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 4], 'false': [2.981, 20, 16]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 4], 'false': [2.981, 20, 16]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 4], 'false': [2.981, 20, 16]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 4], 'false': [2.981, 20, 16]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 4], 'false': [2.981, 20, 16]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 4], 'false': [2.981, 20, 16]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 4], 'false': [2.981, 20, 16]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 4], 'false': [2.981, 20, 16]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 4], 'false': [2.981, 20, 16]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 4], 'false': [2.981, 20, 16]}]]
[{'': [0.0, 0.2469135802469131]}, {'': [0.0, 0.2469135802469134]}, {'': [0.0, 0.24691358024691334]}, {'': [0.0, 0.24691358024691315]}, {'': [0.0, 0.24691358024691373]}, {'': [0.0, 0.24691358024691348]}, {'': [0.0, 0.2469135802469136]}, {'': [0.0, 0.24691358024691384]}, {'': [0.0, 0.24691358024691354]}, {'': [0.0, 0.24691358024691373]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
1;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
2;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
3;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
4;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
5;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
6;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
7;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
8;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
9;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.8581489350995122;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.34090755578916754;  // std dev = 0.500, 29.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=14 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then return 0.19148226843284552;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | else return 0.10814893509951219;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.7194734122109545;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.29415244793700734;  // std dev = 0.500, 29.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=14 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then return 0.16653882456488175;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | else return 0.09446743783575562;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.5553664367462845;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.24498779946109306;  // std dev = 0.500, 29.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=14 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then return 0.1420942428155648;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | else return 0.08165239320886175;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.41751358415830997;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.19779098606161633;  // std dev = 0.500, 29.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=14 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then return 0.11914890490746428;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | else return 0.06990902274840138;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.32071184716014967;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.15584137344552781;  // std dev = 0.500, 29.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=14 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then return 0.09841340278401862;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | else return 0.059354635365447495;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.25517224256948945;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( haswordvenue(A, D), haswordtitle(E, D) )
%   | then if ( title(F, E), venue(F, B) )
%   | | then if ( samebib(F, G), venue(G, A) )
%   | | | then return 0.4572272921631474;  // std dev = 1.578, 16.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=13 */
%   | | | else return -0.35300146508249614;  // std dev = 0.104, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else return 0.007586781303114983;  // std dev = 0.776, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | else return 0.16760488309952587;  // std dev = 1.013, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.20975771563253554;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( haswordvenue(A, D), haswordtitle(E, D) )
%   | then if ( title(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.3355214754073532;  // std dev = 1.570, 15.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=12 */
%   | | | else return -0.20708995575095987;  // std dev = 0.882, 13.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=1 */
%   | | else return -0.030366029734454125;  // std dev = 0.687, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | else return 0.1371664490116032;  // std dev = 1.008, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.17709649774527736;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( haswordvenue(A, D), haswordtitle(E, D) )
%   | then if ( title(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.25218394511005315;  // std dev = 1.571, 15.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=12 */
%   | | | else return -0.16712186417399144;  // std dev = 0.888, 13.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=1 */
%   | | else return -0.023606191122089597;  // std dev = 0.688, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | else return 0.11045526007138115;  // std dev = 1.004, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.15274385809367097;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( haswordvenue(A, D), haswordtitle(E, D) )
%   | then if ( title(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.19103083424524314;  // std dev = 1.570, 15.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=12 */
%   | | | else return -0.1377562485970463;  // std dev = 0.893, 13.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=1 */
%   | | else return -0.018388628929719025;  // std dev = 0.689, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | else return 0.08783374918624341;  // std dev = 1.001, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.13400703000801117;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.03712802807866191;  // std dev = 0.380, 29.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=14 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then return 0.031932099960321335;  // std dev = 0.533, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | else return -0.042472214120715265;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */


Results
   AUC ROC   = 0.919812
   AUC PR    = 0.865029
   CLL	      = -0.388374
   Precision = 0.805104 at threshold = 0.5
   Recall    = 0.92905
   F1        = 0.862648


Total learning time: 28.212 seconds
Total inference time: 2.637 seconds
AUC ROC: 0.919812


Results scoring model
   AUC ROC   = 0.905
   AUC PR    = 0.885436
   CLL	      = -0.43042
   Precision = 0.842105 at threshold = 0.5
   Recall    = 0.8
   F1        = 0.820513


Total scoring time: 1.055 seconds
Refined model CLL: -0.43042


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.919812
   AUC PR    = 0.865029
   CLL	      = -0.388374
   Precision = 0.805104 at threshold = 0.5
   Recall    = 0.92905
   F1        = 0.862648


Total learning time: 30.865 seconds
Total inference time: 2.637 seconds
AUC ROC: 0.919812
Total revision time: 30.865
Best scored revision CLL: -0.43042


Dataset: 3_imdb_cora, Fold: 4, Type: Transfer (trRDN-B), Time: 00:17:25
{'AUC ROC': 0.919812, 'AUC PR': 0.865029, 'CLL': -0.388374, 'Precision': [0.805104, 0.5], 'Recall': 0.92905, 'F1': 0.862648, 'Learning time': 30.865, 'Inference time': 2.637, 'parameter_20': {'AUC ROC': 0.576975, 'AUC PR': 0.567681, 'CLL': -0.629819, 'Precision': [1.0, 0.5], 'Recall': 0.153949, 'F1': 0.266821, 'Learning time': 0.947, 'Inference time': 0.864}}


Amount of data: 25
******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.8581489350995122;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else return 0.31467067422994655;  // std dev = 3.378, 46.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=21 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.7194734122109545;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else return 0.2718979338779211;  // std dev = 3.378, 46.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=21 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.5553664367462845;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else return 0.22742727023532366;  // std dev = 3.378, 46.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=21 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.41751358415830997;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else return 0.18481967858369794;  // std dev = 3.378, 46.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=21 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.32071184716014967;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else return 0.14674952708917505;  // std dev = 3.378, 46.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=21 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.25517224256948945;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else return 0.11453090292473048;  // std dev = 3.378, 46.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=21 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.20975771563253554;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else return 0.08831182757523444;  // std dev = 3.378, 46.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=21 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.17709649774527736;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else return 0.06753946269031201;  // std dev = 3.378, 46.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=21 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.15274385809367097;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else return 0.05137193645873037;  // std dev = 3.378, 46.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=21 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.13400703000801117;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else return 0.03893324925844389;  // std dev = 3.378, 46.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=21 */


Results
   AUC ROC   = 0.576975
   AUC PR    = 0.567681
   CLL	      = -0.632055
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.153949
   F1        = 0.266821


Total learning time: 1.025 seconds
Total inference time: 0.785 seconds
AUC ROC: 0.576975


Results scoring model
   AUC ROC   = 0.58
   AUC PR    = 0.644703
   CLL	      = -0.645987
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.16
   F1        = 0.275862


Total scoring time: 0.668 seconds
Parameter learned model CLL: -0.645987


Structure after Parameter Learning
[['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 4], 'false': [3.378, 25, 21]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 4], 'false': [3.378, 25, 21]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 4], 'false': [3.378, 25, 21]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 4], 'false': [3.378, 25, 21]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 4], 'false': [3.378, 25, 21]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 4], 'false': [3.378, 25, 21]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 4], 'false': [3.378, 25, 21]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 4], 'false': [3.378, 25, 21]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 4], 'false': [3.378, 25, 21]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 4], 'false': [3.378, 25, 21]}]]
[{'': [0.0, 0.2481096408317579]}, {'': [0.0, 0.2481096408317583]}, {'': [0.0, 0.24810964083175807]}, {'': [0.0, 0.24810964083175777]}, {'': [0.0, 0.24810964083175846]}, {'': [0.0, 0.24810964083175827]}, {'': [0.0, 0.24810964083175777]}, {'': [0.0, 0.2481096408317585]}, {'': [0.0, 0.248109640831758]}, {'': [0.0, 0.24810964083175827]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
1;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
2;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
3;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
4;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
5;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
6;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
7;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
8;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
9;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.8581489350995122;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.35814893509951223;  // std dev = 0.500, 38.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=19 */
%   | else if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then return 0.19148226843284552;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | else return 0.0581489350995122;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.7194734122109545;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.3087411357856347;  // std dev = 0.500, 38.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=19 */
%   | else if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then return 0.16653882456488175;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | else return 0.050922032513554226;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.5553664367462845;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.2564123687585871;  // std dev = 0.500, 38.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=19 */
%   | else if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then return 0.1420942428155648;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | else return 0.04434629760466851;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.41751358415830997;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.20613740734454009;  // std dev = 0.500, 38.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=19 */
%   | else if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then return 0.11914890490746428;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | else return 0.038428662236904595;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.32071184716014967;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.16162857548414636;  // std dev = 0.500, 38.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=19 */
%   | else if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then return 0.09841340278401862;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | else return 0.03315494592188569;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.25517224256948945;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.12455597792081945;  // std dev = 0.500, 38.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=19 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then return 0.0173236885633221;  // std dev = 0.845, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | else return 0.07849510592572118;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.20975771563253554;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( haswordvenue(A, D), haswordtitle(E, D) )
%   | then if ( title(F, E), venue(F, B) )
%   | | then if ( samebib(F, G), venue(G, A) )
%   | | | then return 0.4198696742967241;  // std dev = 1.830, 22.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=18 */
%   | | | else return -0.3797514466681417;  // std dev = 0.257, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | | else return -0.11789283352089697;  // std dev = 0.832, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | else return 0.17262758929968927;  // std dev = 0.986, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.17709649774527736;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( haswordvenue(A, D), haswordtitle(E, D) )
%   | then if ( title(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.3084981052678048;  // std dev = 1.824, 21.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=17 */
%   | | | else return -0.23903195179586886;  // std dev = 0.916, 16.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=1 */
%   | | else return -0.12435518396528972;  // std dev = 0.720, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | else return 0.14240875453116392;  // std dev = 0.980, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.15274385809367097;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( haswordvenue(A, D), haswordtitle(E, D) )
%   | then if ( title(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.23238919108295195;  // std dev = 1.825, 21.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=17 */
%   | | | else return -0.19183561122760412;  // std dev = 0.917, 16.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=1 */
%   | | else return -0.09682507485017458;  // std dev = 0.723, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | else return 0.11563484905652222;  // std dev = 0.976, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.13400703000801117;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( haswordvenue(A, D), haswordtitle(E, D) )
%   | then if ( title(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.1772071495860961;  // std dev = 1.824, 21.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=17 */
%   | | | else return -0.15759834498830494;  // std dev = 0.919, 16.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=1 */
%   | | else return -0.07603754431767579;  // std dev = 0.726, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | else return 0.09272853566002456;  // std dev = 0.972, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */


Results
   AUC ROC   = 0.917006
   AUC PR    = 0.863753
   CLL	      = -0.389478
   Precision = 0.807692 at threshold = 0.5
   Recall    = 0.927711
   F1        = 0.863551


Total learning time: 33.453 seconds
Total inference time: 2.673 seconds
AUC ROC: 0.917006


Results scoring model
   AUC ROC   = 0.9032
   AUC PR    = 0.878878
   CLL	      = -0.422509
   Precision = 0.846154 at threshold = 0.5
   Recall    = 0.88
   F1        = 0.862745


Total scoring time: 1.101 seconds
Refined model CLL: -0.422509


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.917006
   AUC PR    = 0.863753
   CLL	      = -0.389478
   Precision = 0.807692 at threshold = 0.5
   Recall    = 0.927711
   F1        = 0.863551


Total learning time: 36.247 seconds
Total inference time: 2.673 seconds
AUC ROC: 0.917006
Total revision time: 36.247
Best scored revision CLL: -0.422509


Dataset: 3_imdb_cora, Fold: 4, Type: Transfer (trRDN-B), Time: 00:18:05
{'AUC ROC': 0.917006, 'AUC PR': 0.863753, 'CLL': -0.389478, 'Precision': [0.807692, 0.5], 'Recall': 0.927711, 'F1': 0.863551, 'Learning time': 36.247, 'Inference time': 2.673, 'parameter_25': {'AUC ROC': 0.576975, 'AUC PR': 0.567681, 'CLL': -0.632055, 'Precision': [1.0, 0.5], 'Recall': 0.153949, 'F1': 0.266821, 'Learning time': 1.025, 'Inference time': 0.785}}


Starting fold 5

Target train facts examples: 33914
Target train pos examples: 2467
Target train neg examples: 4522

Target test facts examples: 8644
Target test pos	 examples: 550
Target test neg examples: 500

Amount of data: 5
******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.3581489350995123;  // std dev = 1.581, 10.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.30874113578563506;  // std dev = 1.581, 10.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.2564123687585864;  // std dev = 1.581, 10.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.20613740734453975;  // std dev = 1.581, 10.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.16162857548414675;  // std dev = 1.581, 10.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.1245559779208197;  // std dev = 1.581, 10.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.09492800936730683;  // std dev = 1.581, 10.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.07186088850055855;  // std dev = 1.581, 10.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.05418307375954949;  // std dev = 1.581, 10.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.04076025323305626;  // std dev = 1.581, 10.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */


Results
   AUC ROC   = 0.425455
   AUC PR    = 0.48656
   CLL	      = -0.791397
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 0.889 seconds
Total inference time: 0.719 seconds
AUC ROC: 0.425455


Results scoring model
   AUC ROC   = 0.5
   AUC PR    = 0.5
   CLL	      = -0.695026
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total scoring time: 0.664 seconds
Parameter learned model CLL: -0.695026


Structure after Parameter Learning
[['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 0], 'false': [1.581, 5, 5]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 0], 'false': [1.581, 5, 5]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 0], 'false': [1.581, 5, 5]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 0], 'false': [1.581, 5, 5]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 0], 'false': [1.581, 5, 5]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 0], 'false': [1.581, 5, 5]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 0], 'false': [1.581, 5, 5]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 0], 'false': [1.581, 5, 5]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 0], 'false': [1.581, 5, 5]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 0], 'false': [1.581, 5, 5]}]]
[{'': [nan, 0.24999999999999983]}, {'': [nan, 0.24999999999999994]}, {'': [nan, 0.25000000000000006]}, {'': [nan, 0.24999999999999992]}, {'': [nan, 0.24999999999999994]}, {'': [nan, 0.24999999999999986]}, {'': [nan, 0.25]}, {'': [nan, 0.25000000000000006]}, {'': [nan, 0.25]}, {'': [nan, 0.24999999999999994]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Pruning resulted in null theory

Candidate for revision
0;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
1;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
2;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
3;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
4;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
5;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
6;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
7;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
8;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
9;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.3581489350995123;  // std dev = 0.500, 10.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.30874113578563506;  // std dev = 0.500, 10.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.2564123687585864;  // std dev = 0.500, 10.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.20613740734453975;  // std dev = 0.500, 10.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.16162857548414675;  // std dev = 0.500, 10.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.1245559779208197;  // std dev = 0.500, 10.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.09492800936730683;  // std dev = 0.500, 10.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.07186088850055855;  // std dev = 0.500, 10.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.05418307375954949;  // std dev = 0.500, 10.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.04076025323305626;  // std dev = 0.500, 10.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */


Results
   AUC ROC   = 0.425455
   AUC PR    = 0.48656
   CLL	      = -0.791397
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 1.324 seconds
Total inference time: 0.674 seconds
AUC ROC: 0.425455


Results scoring model
   AUC ROC   = 0.5
   AUC PR    = 0.5
   CLL	      = -0.695026
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total scoring time: 0.688 seconds
Refined model CLL: -0.695026


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.425455
   AUC PR    = 0.48656
   CLL	      = -0.791397
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 3.5649999999999995 seconds
Total inference time: 0.719 seconds
AUC ROC: 0.425455
Total revision time: 3.5649999999999995
Best scored revision CLL: -0.695026


Dataset: 3_imdb_cora, Fold: 5, Type: Transfer (trRDN-B), Time: 00:18:10
{'AUC ROC': 0.425455, 'AUC PR': 0.48656, 'CLL': -0.791397, 'Precision': [nan, 0.5], 'Recall': 0.0, 'F1': nan, 'Learning time': 3.5649999999999995, 'Inference time': 0.719, 'parameter_5': {'AUC ROC': 0.425455, 'AUC PR': 0.48656, 'CLL': -0.791397, 'Precision': [nan, 0.5], 'Recall': 0.0, 'F1': nan, 'Learning time': 0.889, 'Inference time': 0.719}}


Amount of data: 10
******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.3581489350995123;  // std dev = 2.236, 20.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=10 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.3087411357856348;  // std dev = 2.236, 20.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=10 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.2564123687585864;  // std dev = 2.236, 20.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=10 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.20613740734453953;  // std dev = 2.236, 20.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=10 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.16162857548414683;  // std dev = 2.236, 20.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=10 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.12455597792081981;  // std dev = 2.236, 20.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=10 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.09492800936730669;  // std dev = 2.236, 20.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=10 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.07186088850055856;  // std dev = 2.236, 20.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=10 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.054183073759549595;  // std dev = 2.236, 20.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=10 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.040760253233056355;  // std dev = 2.236, 20.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=10 */


Results
   AUC ROC   = 0.425455
   AUC PR    = 0.48656
   CLL	      = -0.791397
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 0.904 seconds
Total inference time: 0.708 seconds
AUC ROC: 0.425455


Results scoring model
   AUC ROC   = 0.5
   AUC PR    = 0.5
   CLL	      = -0.695026
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total scoring time: 0.658 seconds
Parameter learned model CLL: -0.695026


Structure after Parameter Learning
[['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 0], 'false': [2.236, 10, 10]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 0], 'false': [2.236, 10, 10]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 0], 'false': [2.236, 10, 10]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 0], 'false': [2.236, 10, 10]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 0], 'false': [2.236, 10, 10]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 0], 'false': [2.236, 10, 10]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 0], 'false': [2.236, 10, 10]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 0], 'false': [2.236, 10, 10]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 0], 'false': [2.236, 10, 10]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 0], 'false': [2.236, 10, 10]}]]
[{'': [nan, 0.25]}, {'': [nan, 0.2500000000000001]}, {'': [nan, 0.25000000000000006]}, {'': [nan, 0.2500000000000002]}, {'': [nan, 0.24999999999999978]}, {'': [nan, 0.24999999999999994]}, {'': [nan, 0.25000000000000017]}, {'': [nan, 0.2500000000000001]}, {'': [nan, 0.24999999999999994]}, {'': [nan, 0.24999999999999994]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Pruning resulted in null theory

Candidate for revision
0;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
1;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
2;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
3;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
4;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
5;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
6;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
7;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
8;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
9;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.3581489350995123;  // std dev = 0.500, 20.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=10 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.3087411357856348;  // std dev = 0.500, 20.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=10 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.2564123687585864;  // std dev = 0.500, 20.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=10 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.20613740734453953;  // std dev = 0.500, 20.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=10 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.16162857548414683;  // std dev = 0.500, 20.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=10 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.12455597792081981;  // std dev = 0.500, 20.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=10 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.09492800936730669;  // std dev = 0.500, 20.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=10 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.07186088850055856;  // std dev = 0.500, 20.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=10 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.054183073759549595;  // std dev = 0.500, 20.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=10 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.040760253233056355;  // std dev = 0.500, 20.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=10 */


Results
   AUC ROC   = 0.425455
   AUC PR    = 0.48656
   CLL	      = -0.791397
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 1.268 seconds
Total inference time: 0.726 seconds
AUC ROC: 0.425455


Results scoring model
   AUC ROC   = 0.5
   AUC PR    = 0.5
   CLL	      = -0.695026
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total scoring time: 0.651 seconds
Refined model CLL: -0.695026


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.425455
   AUC PR    = 0.48656
   CLL	      = -0.791397
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 3.481 seconds
Total inference time: 0.708 seconds
AUC ROC: 0.425455
Total revision time: 3.481
Best scored revision CLL: -0.695026


Dataset: 3_imdb_cora, Fold: 5, Type: Transfer (trRDN-B), Time: 00:18:16
{'AUC ROC': 0.425455, 'AUC PR': 0.48656, 'CLL': -0.791397, 'Precision': [nan, 0.5], 'Recall': 0.0, 'F1': nan, 'Learning time': 3.481, 'Inference time': 0.708, 'parameter_10': {'AUC ROC': 0.425455, 'AUC PR': 0.48656, 'CLL': -0.791397, 'Precision': [nan, 0.5], 'Recall': 0.0, 'F1': nan, 'Learning time': 0.904, 'Inference time': 0.708}}


Amount of data: 15
******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.35814893509951234;  // std dev = 2.739, 30.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=15 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.3087411357856347;  // std dev = 2.739, 30.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=15 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.2564123687585867;  // std dev = 2.739, 30.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=15 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.20613740734453984;  // std dev = 2.739, 30.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=15 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.16162857548414664;  // std dev = 2.739, 30.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=15 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.12455597792081967;  // std dev = 2.739, 30.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=15 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.09492800936730655;  // std dev = 2.739, 30.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=15 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.07186088850055862;  // std dev = 2.739, 30.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=15 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.05418307375954946;  // std dev = 2.739, 30.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=15 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.040760253233056286;  // std dev = 2.739, 30.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=15 */


Results
   AUC ROC   = 0.425455
   AUC PR    = 0.48656
   CLL	      = -0.791397
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 0.959 seconds
Total inference time: 0.745 seconds
AUC ROC: 0.425455


Results scoring model
   AUC ROC   = 0.5
   AUC PR    = 0.5
   CLL	      = -0.695026
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total scoring time: 0.65 seconds
Parameter learned model CLL: -0.695026


Structure after Parameter Learning
[['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 0], 'false': [2.739, 15, 15]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 0], 'false': [2.739, 15, 15]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 0], 'false': [2.739, 15, 15]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 0], 'false': [2.739, 15, 15]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 0], 'false': [2.739, 15, 15]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 0], 'false': [2.739, 15, 15]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 0], 'false': [2.739, 15, 15]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 0], 'false': [2.739, 15, 15]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 0], 'false': [2.739, 15, 15]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 0], 'false': [2.739, 15, 15]}]]
[{'': [nan, 0.24999999999999953]}, {'': [nan, 0.2500000000000001]}, {'': [nan, 0.2499999999999999]}, {'': [nan, 0.24999999999999983]}, {'': [nan, 0.24999999999999983]}, {'': [nan, 0.24999999999999992]}, {'': [nan, 0.2500000000000003]}, {'': [nan, 0.2500000000000001]}, {'': [nan, 0.24999999999999983]}, {'': [nan, 0.25000000000000006]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Pruning resulted in null theory

Candidate for revision
0;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
1;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
2;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
3;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
4;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
5;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
6;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
7;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
8;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
9;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.35814893509951234;  // std dev = 0.500, 30.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=15 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.3087411357856347;  // std dev = 0.500, 30.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=15 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.2564123687585867;  // std dev = 0.500, 30.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=15 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.20613740734453984;  // std dev = 0.500, 30.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=15 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.16162857548414664;  // std dev = 0.500, 30.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=15 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.12455597792081967;  // std dev = 0.500, 30.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=15 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.09492800936730655;  // std dev = 0.500, 30.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=15 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.07186088850055862;  // std dev = 0.500, 30.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=15 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.05418307375954946;  // std dev = 0.500, 30.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=15 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.040760253233056286;  // std dev = 0.500, 30.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=15 */


Results
   AUC ROC   = 0.425455
   AUC PR    = 0.48656
   CLL	      = -0.791397
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 1.355 seconds
Total inference time: 0.703 seconds
AUC ROC: 0.425455


Results scoring model
   AUC ROC   = 0.5
   AUC PR    = 0.5
   CLL	      = -0.695026
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total scoring time: 0.654 seconds
Refined model CLL: -0.695026


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.425455
   AUC PR    = 0.48656
   CLL	      = -0.791397
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 3.618 seconds
Total inference time: 0.745 seconds
AUC ROC: 0.425455
Total revision time: 3.618
Best scored revision CLL: -0.695026


Dataset: 3_imdb_cora, Fold: 5, Type: Transfer (trRDN-B), Time: 00:18:22
{'AUC ROC': 0.425455, 'AUC PR': 0.48656, 'CLL': -0.791397, 'Precision': [nan, 0.5], 'Recall': 0.0, 'F1': nan, 'Learning time': 3.618, 'Inference time': 0.745, 'parameter_15': {'AUC ROC': 0.425455, 'AUC PR': 0.48656, 'CLL': -0.791397, 'Precision': [nan, 0.5], 'Recall': 0.0, 'F1': nan, 'Learning time': 0.959, 'Inference time': 0.745}}


Amount of data: 20
******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.8581489350995122;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else return 0.34532842227899946;  // std dev = 3.121, 39.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=19 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.7194734122109545;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else return 0.2978958405278236;  // std dev = 3.121, 39.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=19 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.5553664367462845;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else return 0.24792584310385932;  // std dev = 3.121, 39.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=19 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.41751358415830997;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else return 0.19994424504706734;  // std dev = 3.121, 39.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=19 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.32071184716014967;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else return 0.1573387903540145;  // std dev = 3.121, 39.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=19 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.25517224256948945;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else return 0.12167852492130384;  // std dev = 3.121, 39.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=19 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.20975771563253554;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else return 0.09302649043065797;  // std dev = 3.121, 39.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=19 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.17709649774527736;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else return 0.07060751351378104;  // std dev = 3.121, 39.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=19 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.15274385809367097;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else return 0.05335260550290741;  // std dev = 3.121, 39.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=19 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.13400703000801117;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else return 0.04020477898541032;  // std dev = 3.121, 39.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=19 */


Results
   AUC ROC   = 0.574545
   AUC PR    = 0.655418
   CLL	      = -0.649729
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.149091
   F1        = 0.259494


Total learning time: 0.926 seconds
Total inference time: 0.716 seconds
AUC ROC: 0.574545


Results scoring model
   AUC ROC   = 0.525
   AUC PR    = 0.562431
   CLL	      = -0.680463
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.05
   F1        = 0.095238


Total scoring time: 0.663 seconds
Parameter learned model CLL: -0.680463


Structure after Parameter Learning
[['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 1], 'false': [3.121, 20, 19]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 1], 'false': [3.121, 20, 19]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 1], 'false': [3.121, 20, 19]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 1], 'false': [3.121, 20, 19]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 1], 'false': [3.121, 20, 19]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 1], 'false': [3.121, 20, 19]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 1], 'false': [3.121, 20, 19]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 1], 'false': [3.121, 20, 19]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 1], 'false': [3.121, 20, 19]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 1], 'false': [3.121, 20, 19]}]]
[{'': [0.0, 0.24983563445101864]}, {'': [0.0, 0.249835634451019]}, {'': [0.0, 0.24983563445101914]}, {'': [0.0, 0.24983563445101928]}, {'': [0.0, 0.24983563445101895]}, {'': [0.0, 0.2498356344510195]}, {'': [0.0, 0.24983563445101892]}, {'': [0.0, 0.24983563445101914]}, {'': [0.0, 0.24983563445101928]}, {'': [0.0, 0.24983563445101895]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
1;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
2;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
3;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
4;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
5;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
6;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
7;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
8;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
9;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.8581489350995122;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else return 0.34532842227899946;  // std dev = 0.500, 39.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=19 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.7194734122109545;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else return 0.2978958405278236;  // std dev = 0.500, 39.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=19 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.5553664367462845;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else return 0.24792584310385932;  // std dev = 0.500, 39.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=19 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.41751358415830997;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else return 0.19994424504706734;  // std dev = 0.500, 39.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=19 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.32071184716014967;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else return 0.1573387903540145;  // std dev = 0.500, 39.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=19 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.25517224256948945;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else return 0.12167852492130384;  // std dev = 0.500, 39.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=19 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.20975771563253554;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else return 0.09302649043065797;  // std dev = 0.500, 39.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=19 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.17709649774527736;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else return 0.07060751351378104;  // std dev = 0.500, 39.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=19 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.15274385809367097;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else return 0.05335260550290741;  // std dev = 0.500, 39.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=19 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.13400703000801117;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else return 0.04020477898541032;  // std dev = 0.500, 39.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=19 */


Results
   AUC ROC   = 0.574545
   AUC PR    = 0.655418
   CLL	      = -0.649729
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.149091
   F1        = 0.259494


Total learning time: 1.358 seconds
Total inference time: 0.721 seconds
AUC ROC: 0.574545


Results scoring model
   AUC ROC   = 0.525
   AUC PR    = 0.562431
   CLL	      = -0.680463
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.05
   F1        = 0.095238


Total scoring time: 0.66 seconds
Refined model CLL: -0.680463


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.574545
   AUC PR    = 0.655418
   CLL	      = -0.649729
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.149091
   F1        = 0.259494


Total learning time: 3.607 seconds
Total inference time: 0.716 seconds
AUC ROC: 0.574545
Total revision time: 3.607
Best scored revision CLL: -0.680463


Dataset: 3_imdb_cora, Fold: 5, Type: Transfer (trRDN-B), Time: 00:18:27
{'AUC ROC': 0.574545, 'AUC PR': 0.655418, 'CLL': -0.649729, 'Precision': [1.0, 0.5], 'Recall': 0.149091, 'F1': 0.259494, 'Learning time': 3.607, 'Inference time': 0.716, 'parameter_20': {'AUC ROC': 0.574545, 'AUC PR': 0.655418, 'CLL': -0.649729, 'Precision': [1.0, 0.5], 'Recall': 0.149091, 'F1': 0.259494, 'Learning time': 0.926, 'Inference time': 0.716}}


Amount of data: 25
******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.8581489350995122;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else return 0.337315601766178;  // std dev = 3.461, 48.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=23 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.7194734122109545;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else return 0.29110956985202097;  // std dev = 3.461, 48.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=23 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.5553664367462845;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else return 0.24259622205193923;  // std dev = 3.461, 48.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=23 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.41751358415830997;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else return 0.19603468759080514;  // std dev = 3.461, 48.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=23 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.32071184716014967;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else return 0.154617629205858;  // std dev = 3.461, 48.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=23 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.25517224256948945;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else return 0.11984886138420121;  // std dev = 3.461, 48.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=23 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.20975771563253554;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else return 0.09181958434880073;  // std dev = 3.461, 48.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=23 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.17709649774527736;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else return 0.06981781615570097;  // std dev = 3.461, 48.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=23 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.15274385809367097;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else return 0.05283652085596411;  // std dev = 3.461, 48.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=23 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.13400703000801117;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else return 0.03986668012550317;  // std dev = 3.461, 48.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=23 */


Results
   AUC ROC   = 0.574545
   AUC PR    = 0.655418
   CLL	      = -0.650611
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.149091
   F1        = 0.259494


Total learning time: 0.947 seconds
Total inference time: 0.705 seconds
AUC ROC: 0.574545


Results scoring model
   AUC ROC   = 0.54
   AUC PR    = 0.586766
   CLL	      = -0.671408
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.08
   F1        = 0.148148


Total scoring time: 0.669 seconds
Parameter learned model CLL: -0.671408


Structure after Parameter Learning
[['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 2], 'false': [3.461, 25, 23]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 2], 'false': [3.461, 25, 23]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 2], 'false': [3.461, 25, 23]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 2], 'false': [3.461, 25, 23]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 2], 'false': [3.461, 25, 23]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 2], 'false': [3.461, 25, 23]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 2], 'false': [3.461, 25, 23]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 2], 'false': [3.461, 25, 23]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 2], 'false': [3.461, 25, 23]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 2], 'false': [3.461, 25, 23]}]]
[{'': [0.0, 0.24956597222222343]}, {'': [0.0, 0.24956597222222232]}, {'': [0.0, 0.24956597222222257]}, {'': [0.0, 0.2495659722222224]}, {'': [0.0, 0.24956597222222224]}, {'': [0.0, 0.24956597222222257]}, {'': [0.0, 0.24956597222222252]}, {'': [0.0, 0.24956597222222265]}, {'': [0.0, 0.2495659722222224]}, {'': [0.0, 0.24956597222222246]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
1;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
2;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
3;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
4;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
5;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
6;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
7;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
8;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
9;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.8581489350995122;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else return 0.337315601766178;  // std dev = 0.500, 48.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=23 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.7194734122109545;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else return 0.29110956985202097;  // std dev = 0.500, 48.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=23 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.5553664367462845;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else return 0.24259622205193923;  // std dev = 0.500, 48.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=23 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.41751358415830997;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else return 0.19603468759080514;  // std dev = 0.500, 48.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=23 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.32071184716014967;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else return 0.154617629205858;  // std dev = 0.500, 48.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=23 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.25517224256948945;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else return 0.11984886138420121;  // std dev = 0.500, 48.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=23 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.20975771563253554;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else return 0.09181958434880073;  // std dev = 0.500, 48.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=23 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.17709649774527736;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else return 0.06981781615570097;  // std dev = 0.500, 48.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=23 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.15274385809367097;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else return 0.05283652085596411;  // std dev = 0.500, 48.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=23 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.13400703000801117;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else return 0.03986668012550317;  // std dev = 0.500, 48.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=23 */


Results
   AUC ROC   = 0.574545
   AUC PR    = 0.655418
   CLL	      = -0.650611
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.149091
   F1        = 0.259494


Total learning time: 1.354 seconds
Total inference time: 0.721 seconds
AUC ROC: 0.574545


Results scoring model
   AUC ROC   = 0.54
   AUC PR    = 0.586766
   CLL	      = -0.671408
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.08
   F1        = 0.148148


Total scoring time: 0.673 seconds
Refined model CLL: -0.671408


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.574545
   AUC PR    = 0.655418
   CLL	      = -0.650611
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.149091
   F1        = 0.259494


Total learning time: 3.6430000000000002 seconds
Total inference time: 0.705 seconds
AUC ROC: 0.574545
Total revision time: 3.6430000000000002
Best scored revision CLL: -0.671408


Dataset: 3_imdb_cora, Fold: 5, Type: Transfer (trRDN-B), Time: 00:18:33
{'AUC ROC': 0.574545, 'AUC PR': 0.655418, 'CLL': -0.650611, 'Precision': [1.0, 0.5], 'Recall': 0.149091, 'F1': 0.259494, 'Learning time': 3.6430000000000002, 'Inference time': 0.705, 'parameter_25': {'AUC ROC': 0.574545, 'AUC PR': 0.655418, 'CLL': -0.650611, 'Precision': [1.0, 0.5], 'Recall': 0.149091, 'F1': 0.259494, 'Learning time': 0.947, 'Inference time': 0.705}}


Starting fold 1

Target train facts examples: 35095
Target train pos examples: 2649
Target train neg examples: 4334

Target test facts examples: 7463
Target test pos	 examples: 368
Target test neg examples: 688

Amount of data: 5
******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.3581489350995123;  // std dev = 1.581, 10.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.30874113578563506;  // std dev = 1.581, 10.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.2564123687585864;  // std dev = 1.581, 10.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.20613740734453975;  // std dev = 1.581, 10.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.16162857548414675;  // std dev = 1.581, 10.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.1245559779208197;  // std dev = 1.581, 10.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.09492800936730683;  // std dev = 1.581, 10.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.07186088850055855;  // std dev = 1.581, 10.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.05418307375954949;  // std dev = 1.581, 10.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.04076025323305626;  // std dev = 1.581, 10.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */


Results
   AUC ROC   = 0.369565
   AUC PR    = 0.292101
   CLL	      = -0.785228
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 0.844 seconds
Total inference time: 0.704 seconds
AUC ROC: 0.369565


Results scoring model
   AUC ROC   = 0.5
   AUC PR    = 0.5
   CLL	      = -0.695026
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total scoring time: 0.635 seconds
Parameter learned model CLL: -0.695026


Structure after Parameter Learning
[['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 0], 'false': [1.581, 5, 5]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 0], 'false': [1.581, 5, 5]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 0], 'false': [1.581, 5, 5]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 0], 'false': [1.581, 5, 5]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 0], 'false': [1.581, 5, 5]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 0], 'false': [1.581, 5, 5]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 0], 'false': [1.581, 5, 5]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 0], 'false': [1.581, 5, 5]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 0], 'false': [1.581, 5, 5]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 0], 'false': [1.581, 5, 5]}]]
[{'': [nan, 0.24999999999999983]}, {'': [nan, 0.24999999999999994]}, {'': [nan, 0.25000000000000006]}, {'': [nan, 0.24999999999999992]}, {'': [nan, 0.24999999999999994]}, {'': [nan, 0.24999999999999986]}, {'': [nan, 0.25]}, {'': [nan, 0.25000000000000006]}, {'': [nan, 0.25]}, {'': [nan, 0.24999999999999994]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Pruning resulted in null theory

Candidate for revision
0;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
1;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
2;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
3;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
4;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
5;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
6;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
7;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
8;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
9;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.3581489350995123;  // std dev = 0.500, 10.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.30874113578563506;  // std dev = 0.500, 10.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.2564123687585864;  // std dev = 0.500, 10.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.20613740734453975;  // std dev = 0.500, 10.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.16162857548414675;  // std dev = 0.500, 10.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.1245559779208197;  // std dev = 0.500, 10.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.09492800936730683;  // std dev = 0.500, 10.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.07186088850055855;  // std dev = 0.500, 10.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.05418307375954949;  // std dev = 0.500, 10.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.04076025323305626;  // std dev = 0.500, 10.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */


Results
   AUC ROC   = 0.369565
   AUC PR    = 0.292101
   CLL	      = -0.785228
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 1.272 seconds
Total inference time: 0.729 seconds
AUC ROC: 0.369565


Results scoring model
   AUC ROC   = 0.5
   AUC PR    = 0.5
   CLL	      = -0.695026
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total scoring time: 0.648 seconds
Refined model CLL: -0.695026


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.369565
   AUC PR    = 0.292101
   CLL	      = -0.785228
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 3.3990000000000005 seconds
Total inference time: 0.704 seconds
AUC ROC: 0.369565
Total revision time: 3.3990000000000005
Best scored revision CLL: -0.695026


Dataset: 3_imdb_cora, Fold: 1, Type: Transfer (trRDN-B), Time: 00:18:39
{'AUC ROC': 0.369565, 'AUC PR': 0.292101, 'CLL': -0.785228, 'Precision': [nan, 0.5], 'Recall': 0.0, 'F1': nan, 'Learning time': 3.3990000000000005, 'Inference time': 0.704, 'parameter_5': {'AUC ROC': 0.369565, 'AUC PR': 0.292101, 'CLL': -0.785228, 'Precision': [nan, 0.5], 'Recall': 0.0, 'F1': nan, 'Learning time': 0.844, 'Inference time': 0.704}}


Amount of data: 10
******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.42064893509951234;  // std dev = 1.984, 16.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=9 */
%   else return 0.10814893509951219;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.361386758207022;  // std dev = 1.984, 16.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=9 */
%   else return 0.09446743783575562;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.29707588146212427;  // std dev = 1.984, 16.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=9 */
%   else return 0.08165239320886175;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.23530262435174626;  // std dev = 1.984, 16.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=9 */
%   else return 0.06990902274840138;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.18156600992036426;  // std dev = 1.984, 16.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=9 */
%   else return 0.059354635365447495;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.1379248928305776;  // std dev = 1.984, 16.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=9 */
%   else return 0.05002771289938789;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.10392852578813351;  // std dev = 1.984, 16.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=9 */
%   else return 0.04190386852605735;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.07803658977375333;  // std dev = 1.984, 16.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=9 */
%   else return 0.03491396367325339;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.05853252891320447;  // std dev = 1.984, 16.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=9 */
%   else return 0.028961035597951046;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.043907889424101815;  // std dev = 1.984, 16.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=9 */
%   else return 0.023934242922604827;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */


Results
   AUC ROC   = 0.57476
   AUC PR    = 0.387492
   CLL	      = -0.663035
   Precision = 0.388764 at threshold = 0.5
   Recall    = 0.940217
   F1        = 0.550079


Total learning time: 0.903 seconds
Total inference time: 0.713 seconds
AUC ROC: 0.57476


Results scoring model
   AUC ROC   = 0.6
   AUC PR    = 0.559375
   CLL	      = -0.662683
   Precision = 0.5625 at threshold = 0.5
   Recall    = 0.9
   F1        = 0.692308


Total scoring time: 0.669 seconds
Parameter learned model CLL: -0.662683


Structure after Parameter Learning
[['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [1.984, 7, 9], 'false': [0.866, 3, 1]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [1.984, 7, 9], 'false': [0.866, 3, 1]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [1.984, 7, 9], 'false': [0.866, 3, 1]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [1.984, 7, 9], 'false': [0.866, 3, 1]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [1.984, 7, 9], 'false': [0.866, 3, 1]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [1.984, 7, 9], 'false': [0.866, 3, 1]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [1.984, 7, 9], 'false': [0.866, 3, 1]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [1.984, 7, 9], 'false': [0.866, 3, 1]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [1.984, 7, 9], 'false': [0.866, 3, 1]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [1.984, 7, 9], 'false': [0.866, 3, 1]}]]
[{'': [0.24609374999999992, 0.18750000000000003]}, {'': [0.24609375000000006, 0.18749999999999997]}, {'': [0.24609375000000022, 0.18749999999999994]}, {'': [0.2460937500000001, 0.18749999999999997]}, {'': [0.2460937500000001, 0.18749999999999997]}, {'': [0.24609374999999992, 0.18750000000000006]}, {'': [0.24609375000000003, 0.18750000000000003]}, {'': [0.24609374999999997, 0.18749999999999994]}, {'': [0.24609374999999997, 0.18749999999999997]}, {'': [0.24609375000000003, 0.1875]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Pruning resulted in null theory

Candidate for revision
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.42064893509951234;  // std dev = 0.496, 16.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=9 */
%   else return 0.10814893509951219;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.361386758207022;  // std dev = 0.496, 16.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=9 */
%   else return 0.09446743783575562;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.29707588146212427;  // std dev = 0.496, 16.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=9 */
%   else return 0.08165239320886175;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.23530262435174626;  // std dev = 0.496, 16.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=9 */
%   else return 0.06990902274840138;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.18156600992036426;  // std dev = 0.496, 16.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=9 */
%   else return 0.059354635365447495;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.1379248928305776;  // std dev = 0.496, 16.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=9 */
%   else return 0.05002771289938789;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.10392852578813351;  // std dev = 0.496, 16.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=9 */
%   else return 0.04190386852605735;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.07803658977375333;  // std dev = 0.496, 16.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=9 */
%   else return 0.03491396367325339;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.05853252891320447;  // std dev = 0.496, 16.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=9 */
%   else return 0.028961035597951046;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.043907889424101815;  // std dev = 0.496, 16.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=9 */
%   else return 0.023934242922604827;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */


Results
   AUC ROC   = 0.57476
   AUC PR    = 0.387492
   CLL	      = -0.663035
   Precision = 0.388764 at threshold = 0.5
   Recall    = 0.940217
   F1        = 0.550079


Total learning time: 1.3 seconds
Total inference time: 0.652 seconds
AUC ROC: 0.57476


Results scoring model
   AUC ROC   = 0.6
   AUC PR    = 0.559375
   CLL	      = -0.662683
   Precision = 0.5625 at threshold = 0.5
   Recall    = 0.9
   F1        = 0.692308


Total scoring time: 0.654 seconds
Refined model CLL: -0.662683


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.57476
   AUC PR    = 0.387492
   CLL	      = -0.663035
   Precision = 0.388764 at threshold = 0.5
   Recall    = 0.940217
   F1        = 0.550079


Total learning time: 3.526 seconds
Total inference time: 0.713 seconds
AUC ROC: 0.57476
Total revision time: 3.526
Best scored revision CLL: -0.662683


Dataset: 3_imdb_cora, Fold: 1, Type: Transfer (trRDN-B), Time: 00:18:44
{'AUC ROC': 0.57476, 'AUC PR': 0.387492, 'CLL': -0.663035, 'Precision': [0.388764, 0.5], 'Recall': 0.940217, 'F1': 0.550079, 'Learning time': 3.526, 'Inference time': 0.713, 'parameter_10': {'AUC ROC': 0.57476, 'AUC PR': 0.387492, 'CLL': -0.663035, 'Precision': [0.388764, 0.5], 'Recall': 0.940217, 'F1': 0.550079, 'Learning time': 0.903, 'Inference time': 0.713}}


Amount of data: 15
******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.46684458727342537;  // std dev = 2.341, 23.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=14 */
%   else return 0.0010060779566550668;  // std dev = 0.926, 7.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=1 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.4000577502324245;  // std dev = 2.341, 23.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=14 */
%   else return 8.835646163369372E-4;  // std dev = 0.926, 7.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=1 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.32639896342793484;  // std dev = 2.341, 23.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=14 */
%   else return 7.758973011973702E-4;  // std dev = 0.926, 7.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=1 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.2558830155880355;  // std dev = 2.341, 23.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=14 */
%   else return 6.8129367991872E-4;  // std dev = 0.926, 7.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=1 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.19551101822473715;  // std dev = 2.341, 23.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=14 */
%   else return 5.981815657342761E-4;  // std dev = 0.926, 7.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=1 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.1474439671528358;  // std dev = 2.341, 23.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=14 */
%   else return 5.251750232105731E-4;  // std dev = 0.926, 7.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=1 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.11066081658002226;  // std dev = 2.341, 23.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=14 */
%   else return 4.6105298554669334E-4;  // std dev = 0.926, 7.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=1 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.0830182315304215;  // std dev = 2.341, 23.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=14 */
%   else return 4.0474016800403E-4;  // std dev = 0.926, 7.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=1 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.0623742718572355;  // std dev = 2.341, 23.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=14 */
%   else return 3.552900687252162E-4;  // std dev = 0.926, 7.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=1 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.046964058523006;  // std dev = 2.341, 23.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=14 */
%   else return 3.118698576379649E-4;  // std dev = 0.926, 7.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=1 */


Results
   AUC ROC   = 0.57476
   AUC PR    = 0.387492
   CLL	      = -0.682559
   Precision = 0.388764 at threshold = 0.5
   Recall    = 0.940217
   F1        = 0.550079


Total learning time: 0.908 seconds
Total inference time: 0.685 seconds
AUC ROC: 0.57476


Results scoring model
   AUC ROC   = 0.666667
   AUC PR    = 0.605072
   CLL	      = -0.610829
   Precision = 0.608696 at threshold = 0.5
   Recall    = 0.933333
   F1        = 0.736842


Total scoring time: 0.661 seconds
Parameter learned model CLL: -0.610829


Structure after Parameter Learning
[['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [2.341, 9, 14], 'false': [0.926, 6, 1]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [2.341, 9, 14], 'false': [0.926, 6, 1]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [2.341, 9, 14], 'false': [0.926, 6, 1]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [2.341, 9, 14], 'false': [0.926, 6, 1]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [2.341, 9, 14], 'false': [0.926, 6, 1]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [2.341, 9, 14], 'false': [0.926, 6, 1]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [2.341, 9, 14], 'false': [0.926, 6, 1]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [2.341, 9, 14], 'false': [0.926, 6, 1]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [2.341, 9, 14], 'false': [0.926, 6, 1]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [2.341, 9, 14], 'false': [0.926, 6, 1]}]]
[{'': [0.2381852551984873, 0.12244897959183677]}, {'': [0.23818525519848768, 0.12244897959183668]}, {'': [0.2381852551984875, 0.12244897959183672]}, {'': [0.23818525519848774, 0.12244897959183673]}, {'': [0.23818525519848768, 0.12244897959183672]}, {'': [0.23818525519848754, 0.12244897959183676]}, {'': [0.23818525519848785, 0.12244897959183675]}, {'': [0.23818525519848768, 0.12244897959183673]}, {'': [0.2381852551984878, 0.12244897959183675]}, {'': [0.23818525519848774, 0.12244897959183676]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Pruning resulted in null theory

Candidate for revision
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.46684458727342537;  // std dev = 0.488, 23.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=14 */
%   else if ( haswordvenue(B, D), haswordtitle(E, D) )
%   | then return 0.10814893509951219;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | else return -0.14185106490048777;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.4000577502324245;  // std dev = 0.488, 23.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=14 */
%   else if ( haswordvenue(B, D), haswordtitle(E, D) )
%   | then return 0.09446743783575562;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | else return -0.12544463852839138;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.32639896342793484;  // std dev = 0.488, 23.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=14 */
%   else if ( haswordvenue(B, D), haswordtitle(E, D) )
%   | then return 0.08165239320886175;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | else return -0.11231637819360639;  // std dev = 2.63e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.2558830155880355;  // std dev = 0.488, 23.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=14 */
%   else if ( haswordvenue(B, D), haswordtitle(E, D) )
%   | then return 0.06990902274840138;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | else return -0.1015963294878363;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.19551101822473715;  // std dev = 0.488, 23.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=14 */
%   else if ( haswordvenue(B, D), haswordtitle(E, D) )
%   | then return 0.059354635365447495;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | else return -0.09269127618926094;  // std dev = 2.63e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.1474439671528358;  // std dev = 0.488, 23.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=14 */
%   else if ( haswordvenue(B, D), haswordtitle(E, D) )
%   | then return 0.05002771289938789;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | else return -0.08518475138839687;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.11066081658002226;  // std dev = 0.488, 23.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=14 */
%   else if ( haswordvenue(B, D), haswordtitle(E, D) )
%   | then return 0.04190386852605735;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | else return -0.07877675473109173;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.0830182315304215;  // std dev = 0.488, 23.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=14 */
%   else if ( haswordvenue(B, D), haswordtitle(E, D) )
%   | then return 0.03491396367325339;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | else return -0.07324622576333704;  // std dev = 1.86e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.0623742718572355;  // std dev = 0.488, 23.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=14 */
%   else if ( haswordvenue(B, D), haswordtitle(E, D) )
%   | then return 0.028961035597951046;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | else return -0.06842697784420272;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.046964058523006;  // std dev = 0.488, 23.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=14 */
%   else if ( haswordvenue(B, D), haswordtitle(E, D) )
%   | then return 0.023934242922604827;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | else return -0.0641918400820262;  // std dev = 1.32e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */


Results
   AUC ROC   = 0.574586
   AUC PR    = 0.387447
   CLL	      = -0.68838
   Precision = 0.388764 at threshold = 0.5
   Recall    = 0.940217
   F1        = 0.550079


Total learning time: 1.393 seconds
Total inference time: 0.724 seconds
AUC ROC: 0.574586


Results scoring model
   AUC ROC   = 0.673333
   AUC PR    = 0.606924
   CLL	      = -0.596491
   Precision = 0.608696 at threshold = 0.5
   Recall    = 0.933333
   F1        = 0.736842


Total scoring time: 0.666 seconds
Refined model CLL: -0.596491


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.574586
   AUC PR    = 0.387447
   CLL	      = -0.68838
   Precision = 0.388764 at threshold = 0.5
   Recall    = 0.940217
   F1        = 0.550079


Total learning time: 3.6279999999999997 seconds
Total inference time: 0.724 seconds
AUC ROC: 0.574586
Total revision time: 3.6279999999999997
Best scored revision CLL: -0.596491


Dataset: 3_imdb_cora, Fold: 1, Type: Transfer (trRDN-B), Time: 00:18:50
{'AUC ROC': 0.574586, 'AUC PR': 0.387447, 'CLL': -0.68838, 'Precision': [0.388764, 0.5], 'Recall': 0.940217, 'F1': 0.550079, 'Learning time': 3.6279999999999997, 'Inference time': 0.724, 'parameter_15': {'AUC ROC': 0.57476, 'AUC PR': 0.387492, 'CLL': -0.682559, 'Precision': [0.388764, 0.5], 'Recall': 0.940217, 'F1': 0.550079, 'Learning time': 0.908, 'Inference time': 0.685}}


Amount of data: 20
******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.45189893509951223;  // std dev = 2.778, 32.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=19 */
%   else return -0.016851064900487787;  // std dev = 0.935, 8.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.3875690021482188;  // std dev = 2.778, 32.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=19 */
%   else return -0.014812149378556561;  // std dev = 0.935, 8.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.3169783203041593;  // std dev = 2.778, 32.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=19 */
%   else return -0.013040256218347378;  // std dev = 0.935, 8.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.249306346547392;  // std dev = 2.778, 32.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=19 */
%   else return -0.011495970442168556;  // std dev = 0.935, 8.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.19105475388411708;  // std dev = 2.778, 32.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=19 */
%   else return -0.010146653378486747;  // std dev = 0.935, 8.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.14437410274375223;  // std dev = 2.778, 32.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=19 */
%   else return -0.008965076262161687;  // std dev = 0.935, 8.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.10845039691294578;  // std dev = 2.778, 32.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=19 */
%   else return -0.007928371071891604;  // std dev = 0.935, 8.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.08134458202961875;  // std dev = 2.778, 32.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=19 */
%   else return -0.007017216044217012;  // std dev = 0.935, 8.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.06105261988382277;  // std dev = 2.778, 32.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=19 */
%   else return -0.006215196862365345;  // std dev = 0.935, 8.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.04588971610398686;  // std dev = 2.778, 32.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=19 */
%   else return -0.00550830081717868;  // std dev = 0.935, 8.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */


Results
   AUC ROC   = 0.57476
   AUC PR    = 0.387492
   CLL	      = -0.673936
   Precision = 0.388764 at threshold = 0.5
   Recall    = 0.940217
   F1        = 0.550079


Total learning time: 0.932 seconds
Total inference time: 0.697 seconds
AUC ROC: 0.57476


Results scoring model
   AUC ROC   = 0.65
   AUC PR    = 0.591406
   CLL	      = -0.617696
   Precision = 0.59375 at threshold = 0.5
   Recall    = 0.95
   F1        = 0.730769


Total scoring time: 0.663 seconds
Parameter learned model CLL: -0.617696


Structure after Parameter Learning
[['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [2.778, 13, 19], 'false': [0.935, 7, 1]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [2.778, 13, 19], 'false': [0.935, 7, 1]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [2.778, 13, 19], 'false': [0.935, 7, 1]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [2.778, 13, 19], 'false': [0.935, 7, 1]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [2.778, 13, 19], 'false': [0.935, 7, 1]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [2.778, 13, 19], 'false': [0.935, 7, 1]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [2.778, 13, 19], 'false': [0.935, 7, 1]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [2.778, 13, 19], 'false': [0.935, 7, 1]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [2.778, 13, 19], 'false': [0.935, 7, 1]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [2.778, 13, 19], 'false': [0.935, 7, 1]}]]
[{'': [0.24121093749999964, 0.10937500000000004]}, {'': [0.24121093750000042, 0.10937499999999994]}, {'': [0.2412109375000006, 0.109375]}, {'': [0.24121093749999983, 0.10937500000000001]}, {'': [0.2412109374999999, 0.10937499999999997]}, {'': [0.24121093750000008, 0.10937500000000001]}, {'': [0.24121093750000008, 0.10937500000000003]}, {'': [0.24121093750000003, 0.10937500000000003]}, {'': [0.24121093749999983, 0.10937499999999996]}, {'': [0.24121093750000014, 0.10937500000000004]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Pruning resulted in null theory

Candidate for revision
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.45189893509951223;  // std dev = 0.491, 32.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=19 */
%   else if ( haswordvenue(B, D), haswordtitle(E, D) )
%   | then return 0.10814893509951219;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | else return -0.14185106490048777;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.3875690021482188;  // std dev = 0.491, 32.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=19 */
%   else if ( haswordvenue(B, D), haswordtitle(E, D) )
%   | then return 0.09446743783575562;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | else return -0.12544463852839138;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.3169783203041593;  // std dev = 0.491, 32.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=19 */
%   else if ( haswordvenue(B, D), haswordtitle(E, D) )
%   | then return 0.08165239320886175;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | else return -0.11231637819360639;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.249306346547392;  // std dev = 0.491, 32.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=19 */
%   else if ( haswordvenue(B, D), haswordtitle(E, D) )
%   | then return 0.06990902274840138;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | else return -0.10159632948783628;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.19105475388411708;  // std dev = 0.491, 32.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=19 */
%   else if ( haswordvenue(B, D), haswordtitle(E, D) )
%   | then return 0.059354635365447495;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | else return -0.09269127618926096;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.14437410274375223;  // std dev = 0.491, 32.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=19 */
%   else if ( haswordvenue(B, D), haswordtitle(E, D) )
%   | then return 0.05002771289938789;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | else return -0.08518475138839687;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.10845039691294578;  // std dev = 0.491, 32.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=19 */
%   else if ( haswordvenue(B, D), haswordtitle(E, D) )
%   | then return 0.04190386852605735;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | else return -0.07877675473109173;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.08134458202961875;  // std dev = 0.491, 32.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=19 */
%   else if ( haswordvenue(B, D), haswordtitle(E, D) )
%   | then return 0.03491396367325339;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | else return -0.07324622576333704;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.06105261988382277;  // std dev = 0.491, 32.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=19 */
%   else if ( haswordvenue(B, D), haswordtitle(E, D) )
%   | then return 0.028961035597951046;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | else return -0.06842697784420272;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.04588971610398686;  // std dev = 0.491, 32.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=19 */
%   else if ( haswordvenue(B, D), haswordtitle(E, D) )
%   | then return 0.023934242922604827;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | else return -0.0641918400820262;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */


Results
   AUC ROC   = 0.574586
   AUC PR    = 0.387447
   CLL	      = -0.679818
   Precision = 0.388764 at threshold = 0.5
   Recall    = 0.940217
   F1        = 0.550079


Total learning time: 1.434 seconds
Total inference time: 0.698 seconds
AUC ROC: 0.574586


Results scoring model
   AUC ROC   = 0.655
   AUC PR    = 0.592795
   CLL	      = -0.604897
   Precision = 0.59375 at threshold = 0.5
   Recall    = 0.95
   F1        = 0.730769


Total scoring time: 0.688 seconds
Refined model CLL: -0.604897


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.574586
   AUC PR    = 0.387447
   CLL	      = -0.679818
   Precision = 0.388764 at threshold = 0.5
   Recall    = 0.940217
   F1        = 0.550079


Total learning time: 3.7169999999999996 seconds
Total inference time: 0.698 seconds
AUC ROC: 0.574586
Total revision time: 3.7169999999999996
Best scored revision CLL: -0.604897


Dataset: 3_imdb_cora, Fold: 1, Type: Transfer (trRDN-B), Time: 00:18:55
{'AUC ROC': 0.574586, 'AUC PR': 0.387447, 'CLL': -0.679818, 'Precision': [0.388764, 0.5], 'Recall': 0.940217, 'F1': 0.550079, 'Learning time': 3.7169999999999996, 'Inference time': 0.698, 'parameter_20': {'AUC ROC': 0.57476, 'AUC PR': 0.387492, 'CLL': -0.673936, 'Precision': [0.388764, 0.5], 'Recall': 0.940217, 'F1': 0.550079, 'Learning time': 0.932, 'Inference time': 0.697}}


Amount of data: 25
******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.4295775065280828;  // std dev = 3.207, 42.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=24 */
%   else return -0.016851064900487787;  // std dev = 0.935, 8.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.3688769765977062;  // std dev = 3.207, 42.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=24 */
%   else return -0.014812149378556561;  // std dev = 0.935, 8.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.3027909085849407;  // std dev = 3.207, 42.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=24 */
%   else return -0.013040256218347378;  // std dev = 0.935, 8.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.23934016640989292;  // std dev = 3.207, 42.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=24 */
%   else return -0.011495970442168556;  // std dev = 0.935, 8.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.18430382771628495;  // std dev = 3.207, 42.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=24 */
%   else return -0.010146653378486747;  // std dev = 0.935, 8.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.1397756919375904;  // std dev = 3.207, 42.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=24 */
%   else return -0.008965076262161687;  // std dev = 0.935, 8.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.10521075613481373;  // std dev = 3.207, 42.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=24 */
%   else return -0.007928371071891604;  // std dev = 0.935, 8.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.07895904348963055;  // std dev = 3.207, 42.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=24 */
%   else return -0.007017216044217012;  // std dev = 0.935, 8.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.059222277825864054;  // std dev = 3.207, 42.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=24 */
%   else return -0.006215196862365345;  // std dev = 0.935, 8.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.044440537654717394;  // std dev = 3.207, 42.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=24 */
%   else return -0.00550830081717868;  // std dev = 0.935, 8.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */


Results
   AUC ROC   = 0.57476
   AUC PR    = 0.387492
   CLL	      = -0.662426
   Precision = 0.388764 at threshold = 0.5
   Recall    = 0.940217
   F1        = 0.550079


Total learning time: 0.951 seconds
Total inference time: 0.697 seconds
AUC ROC: 0.57476


Results scoring model
   AUC ROC   = 0.62
   AUC PR    = 0.57
   CLL	      = -0.635834
   Precision = 0.571429 at threshold = 0.5
   Recall    = 0.96
   F1        = 0.716418


Total scoring time: 0.678 seconds
Parameter learned model CLL: -0.635834


Structure after Parameter Learning
[['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [3.207, 18, 24], 'false': [0.935, 7, 1]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [3.207, 18, 24], 'false': [0.935, 7, 1]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [3.207, 18, 24], 'false': [0.935, 7, 1]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [3.207, 18, 24], 'false': [0.935, 7, 1]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [3.207, 18, 24], 'false': [0.935, 7, 1]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [3.207, 18, 24], 'false': [0.935, 7, 1]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [3.207, 18, 24], 'false': [0.935, 7, 1]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [3.207, 18, 24], 'false': [0.935, 7, 1]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [3.207, 18, 24], 'false': [0.935, 7, 1]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [3.207, 18, 24], 'false': [0.935, 7, 1]}]]
[{'': [0.2448979591836747, 0.10937500000000004]}, {'': [0.2448979591836734, 0.10937499999999994]}, {'': [0.24489795918367327, 0.109375]}, {'': [0.2448979591836738, 0.10937500000000001]}, {'': [0.2448979591836736, 0.10937499999999997]}, {'': [0.2448979591836738, 0.10937500000000001]}, {'': [0.24489795918367366, 0.10937500000000003]}, {'': [0.24489795918367352, 0.10937500000000003]}, {'': [0.2448979591836734, 0.10937499999999996]}, {'': [0.2448979591836735, 0.10937500000000004]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Pruning resulted in null theory

Candidate for revision
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.4295775065280828;  // std dev = 0.495, 42.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=24 */
%   else if ( haswordvenue(B, D), haswordtitle(E, D) )
%   | then return 0.10814893509951219;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | else return -0.14185106490048777;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.3688769765977062;  // std dev = 0.495, 42.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=24 */
%   else if ( haswordvenue(B, D), haswordtitle(E, D) )
%   | then return 0.09446743783575562;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | else return -0.12544463852839138;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.3027909085849407;  // std dev = 0.495, 42.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=24 */
%   else if ( haswordvenue(B, D), haswordtitle(E, D) )
%   | then return 0.08165239320886175;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | else return -0.11231637819360639;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.23934016640989292;  // std dev = 0.495, 42.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=24 */
%   else if ( haswordvenue(B, D), haswordtitle(E, D) )
%   | then return 0.06990902274840138;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | else return -0.10159632948783628;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.18430382771628495;  // std dev = 0.495, 42.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=24 */
%   else if ( haswordvenue(B, D), haswordtitle(E, D) )
%   | then return 0.059354635365447495;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | else return -0.09269127618926096;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.1397756919375904;  // std dev = 0.495, 42.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=24 */
%   else if ( haswordvenue(B, D), haswordtitle(E, D) )
%   | then return 0.05002771289938789;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | else return -0.08518475138839687;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.10521075613481373;  // std dev = 0.495, 42.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=24 */
%   else if ( haswordvenue(B, D), haswordtitle(E, D) )
%   | then return 0.04190386852605735;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | else return -0.07877675473109173;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.07895904348963055;  // std dev = 0.495, 42.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=24 */
%   else if ( haswordvenue(B, D), haswordtitle(E, D) )
%   | then return 0.03491396367325339;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | else return -0.07324622576333704;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.059222277825864054;  // std dev = 0.495, 42.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=24 */
%   else if ( haswordvenue(B, D), haswordtitle(E, D) )
%   | then return 0.028961035597951046;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | else return -0.06842697784420272;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.044440537654717394;  // std dev = 0.495, 42.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=24 */
%   else if ( haswordvenue(B, D), haswordtitle(E, D) )
%   | then return 0.023934242922604827;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | else return -0.0641918400820262;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */


Results
   AUC ROC   = 0.574586
   AUC PR    = 0.387447
   CLL	      = -0.668308
   Precision = 0.388764 at threshold = 0.5
   Recall    = 0.940217
   F1        = 0.550079


Total learning time: 1.479 seconds
Total inference time: 0.713 seconds
AUC ROC: 0.574586


Results scoring model
   AUC ROC   = 0.6232
   AUC PR    = 0.57087
   CLL	      = -0.625594
   Precision = 0.571429 at threshold = 0.5
   Recall    = 0.96
   F1        = 0.716418


Total scoring time: 0.696 seconds
Refined model CLL: -0.625594


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.574586
   AUC PR    = 0.387447
   CLL	      = -0.668308
   Precision = 0.388764 at threshold = 0.5
   Recall    = 0.940217
   F1        = 0.550079


Total learning time: 3.8040000000000003 seconds
Total inference time: 0.713 seconds
AUC ROC: 0.574586
Total revision time: 3.8040000000000003
Best scored revision CLL: -0.625594


Dataset: 3_imdb_cora, Fold: 1, Type: Transfer (trRDN-B), Time: 00:19:01
{'AUC ROC': 0.574586, 'AUC PR': 0.387447, 'CLL': -0.668308, 'Precision': [0.388764, 0.5], 'Recall': 0.940217, 'F1': 0.550079, 'Learning time': 3.8040000000000003, 'Inference time': 0.713, 'parameter_25': {'AUC ROC': 0.57476, 'AUC PR': 0.387492, 'CLL': -0.662426, 'Precision': [0.388764, 0.5], 'Recall': 0.940217, 'F1': 0.550079, 'Learning time': 0.951, 'Inference time': 0.697}}


Starting fold 2

Target train facts examples: 33542
Target train pos examples: 2246
Target train neg examples: 4478

Target test facts examples: 9016
Target test pos	 examples: 771
Target test neg examples: 544

Amount of data: 5
******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.3581489350995123;  // std dev = 1.581, 10.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.30874113578563506;  // std dev = 1.581, 10.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.2564123687585864;  // std dev = 1.581, 10.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.20613740734453975;  // std dev = 1.581, 10.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.16162857548414675;  // std dev = 1.581, 10.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.1245559779208197;  // std dev = 1.581, 10.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.09492800936730683;  // std dev = 1.581, 10.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.07186088850055855;  // std dev = 1.581, 10.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.05418307375954949;  // std dev = 1.581, 10.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.04076025323305626;  // std dev = 1.581, 10.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */


Results
   AUC ROC   = 0.433204
   AUC PR    = 0.553567
   CLL	      = -0.79934
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 0.87 seconds
Total inference time: 0.76 seconds
AUC ROC: 0.433204


Results scoring model
   AUC ROC   = 0.5
   AUC PR    = 0.5
   CLL	      = -0.695026
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total scoring time: 0.615 seconds
Parameter learned model CLL: -0.695026


Structure after Parameter Learning
[['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 0], 'false': [1.581, 5, 5]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 0], 'false': [1.581, 5, 5]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 0], 'false': [1.581, 5, 5]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 0], 'false': [1.581, 5, 5]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 0], 'false': [1.581, 5, 5]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 0], 'false': [1.581, 5, 5]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 0], 'false': [1.581, 5, 5]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 0], 'false': [1.581, 5, 5]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 0], 'false': [1.581, 5, 5]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 0], 'false': [1.581, 5, 5]}]]
[{'': [nan, 0.24999999999999983]}, {'': [nan, 0.24999999999999994]}, {'': [nan, 0.25000000000000006]}, {'': [nan, 0.24999999999999992]}, {'': [nan, 0.24999999999999994]}, {'': [nan, 0.24999999999999986]}, {'': [nan, 0.25]}, {'': [nan, 0.25000000000000006]}, {'': [nan, 0.25]}, {'': [nan, 0.24999999999999994]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Pruning resulted in null theory

Candidate for revision
0;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
1;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
2;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
3;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
4;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
5;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
6;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
7;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
8;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
9;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.3581489350995123;  // std dev = 0.500, 10.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.30874113578563506;  // std dev = 0.500, 10.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.2564123687585864;  // std dev = 0.500, 10.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.20613740734453975;  // std dev = 0.500, 10.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.16162857548414675;  // std dev = 0.500, 10.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.1245559779208197;  // std dev = 0.500, 10.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.09492800936730683;  // std dev = 0.500, 10.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.07186088850055855;  // std dev = 0.500, 10.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.05418307375954949;  // std dev = 0.500, 10.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.04076025323305626;  // std dev = 0.500, 10.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */


Results
   AUC ROC   = 0.433204
   AUC PR    = 0.553567
   CLL	      = -0.79934
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 1.265 seconds
Total inference time: 0.718 seconds
AUC ROC: 0.433204


Results scoring model
   AUC ROC   = 0.5
   AUC PR    = 0.5
   CLL	      = -0.695026
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total scoring time: 0.645 seconds
Refined model CLL: -0.695026


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.433204
   AUC PR    = 0.553567
   CLL	      = -0.79934
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 3.395 seconds
Total inference time: 0.76 seconds
AUC ROC: 0.433204
Total revision time: 3.395
Best scored revision CLL: -0.695026


Dataset: 3_imdb_cora, Fold: 2, Type: Transfer (trRDN-B), Time: 00:19:07
{'AUC ROC': 0.433204, 'AUC PR': 0.553567, 'CLL': -0.79934, 'Precision': [nan, 0.5], 'Recall': 0.0, 'F1': nan, 'Learning time': 3.395, 'Inference time': 0.76, 'parameter_5': {'AUC ROC': 0.433204, 'AUC PR': 0.553567, 'CLL': -0.79934, 'Precision': [nan, 0.5], 'Recall': 0.0, 'F1': nan, 'Learning time': 0.87, 'Inference time': 0.76}}


Amount of data: 10
******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.8581489350995122;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else return 0.33183314562582816;  // std dev = 2.176, 19.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=9 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.7194734122109545;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else return 0.28646280754165054;  // std dev = 2.176, 19.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=9 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.5553664367462845;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else return 0.23893826810287416;  // std dev = 2.176, 19.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=9 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.41751358415830997;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else return 0.19334220366104113;  // std dev = 2.176, 19.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=9 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.32071184716014967;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else return 0.15273729662465255;  // std dev = 2.176, 19.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=9 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.25517224256948945;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else return 0.11858202407945204;  // std dev = 2.176, 19.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=9 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.20975771563253554;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else return 0.09098433275637943;  // std dev = 2.176, 19.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=9 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.17709649774527736;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else return 0.06927339775071423;  // std dev = 2.176, 19.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=9 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.15274385809367097;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else return 0.052483554573519914;  // std dev = 2.176, 19.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=9 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.13400703000801117;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else return 0.0396383789772704;  // std dev = 2.176, 19.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=9 */


Results
   AUC ROC   = 0.566796
   AUC PR    = 0.695289
   CLL	      = -0.665297
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.133593
   F1        = 0.235698


Total learning time: 0.905 seconds
Total inference time: 0.75 seconds
AUC ROC: 0.566796


Results scoring model
   AUC ROC   = 0.55
   AUC PR    = 0.608377
   CLL	      = -0.665231
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.1
   F1        = 0.181818


Total scoring time: 0.649 seconds
Parameter learned model CLL: -0.665231


Structure after Parameter Learning
[['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 1], 'false': [2.176, 10, 9]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 1], 'false': [2.176, 10, 9]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 1], 'false': [2.176, 10, 9]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 1], 'false': [2.176, 10, 9]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 1], 'false': [2.176, 10, 9]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 1], 'false': [2.176, 10, 9]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 1], 'false': [2.176, 10, 9]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 1], 'false': [2.176, 10, 9]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 1], 'false': [2.176, 10, 9]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 1], 'false': [2.176, 10, 9]}]]
[{'': [0.0, 0.2493074792243767]}, {'': [0.0, 0.24930747922437685]}, {'': [0.0, 0.249307479224377]}, {'': [0.0, 0.24930747922437685]}, {'': [0.0, 0.24930747922437663]}, {'': [0.0, 0.24930747922437657]}, {'': [0.0, 0.24930747922437685]}, {'': [0.0, 0.2493074792243767]}, {'': [0.0, 0.2493074792243768]}, {'': [0.0, 0.2493074792243768]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
1;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
2;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
3;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
4;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
5;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
6;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
7;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
8;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
9;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.8581489350995122;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else return 0.33183314562582816;  // std dev = 0.499, 19.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=9 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.7194734122109545;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else return 0.28646280754165054;  // std dev = 0.499, 19.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=9 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.5553664367462845;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else return 0.23893826810287416;  // std dev = 0.499, 19.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=9 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.41751358415830997;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else return 0.19334220366104113;  // std dev = 0.499, 19.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=9 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.32071184716014967;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else return 0.15273729662465255;  // std dev = 0.499, 19.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=9 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.25517224256948945;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else return 0.11858202407945204;  // std dev = 0.499, 19.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=9 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.20975771563253554;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else return 0.09098433275637943;  // std dev = 0.499, 19.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=9 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.17709649774527736;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else return 0.06927339775071423;  // std dev = 0.499, 19.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=9 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.15274385809367097;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else return 0.052483554573519914;  // std dev = 0.499, 19.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=9 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.13400703000801117;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else return 0.0396383789772704;  // std dev = 0.499, 19.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=9 */


Results
   AUC ROC   = 0.566796
   AUC PR    = 0.695289
   CLL	      = -0.665297
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.133593
   F1        = 0.235698


Total learning time: 1.263 seconds
Total inference time: 0.777 seconds
AUC ROC: 0.566796


Results scoring model
   AUC ROC   = 0.55
   AUC PR    = 0.608377
   CLL	      = -0.665231
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.1
   F1        = 0.181818


Total scoring time: 0.648 seconds
Refined model CLL: -0.665231


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.566796
   AUC PR    = 0.695289
   CLL	      = -0.665297
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.133593
   F1        = 0.235698


Total learning time: 3.4650000000000003 seconds
Total inference time: 0.75 seconds
AUC ROC: 0.566796
Total revision time: 3.4650000000000003
Best scored revision CLL: -0.665231


Dataset: 3_imdb_cora, Fold: 2, Type: Transfer (trRDN-B), Time: 00:19:12
{'AUC ROC': 0.566796, 'AUC PR': 0.695289, 'CLL': -0.665297, 'Precision': [1.0, 0.5], 'Recall': 0.133593, 'F1': 0.235698, 'Learning time': 3.4650000000000003, 'Inference time': 0.75, 'parameter_10': {'AUC ROC': 0.566796, 'AUC PR': 0.695289, 'CLL': -0.665297, 'Precision': [1.0, 0.5], 'Recall': 0.133593, 'F1': 0.235698, 'Learning time': 0.905, 'Inference time': 0.75}}


Amount of data: 15
******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.8581489350995122;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else return 0.32243464938522665;  // std dev = 2.639, 28.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=13 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.7194734122109545;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else return 0.27849027391233155;  // std dev = 2.639, 28.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=13 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.5553664367462845;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else return 0.2326459182080262;  // std dev = 2.639, 28.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=13 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.41751358415830997;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else return 0.18869289576980006;  // std dev = 2.639, 28.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=13 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.32071184716014967;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else return 0.14947773606037712;  // std dev = 2.639, 28.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=13 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.25517224256948945;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else return 0.11638019789758561;  // std dev = 2.639, 28.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=13 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.20975771563253554;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else return 0.0895324095352972;  // std dev = 2.639, 28.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=13 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.17709649774527736;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else return 0.06833018551693014;  // std dev = 2.639, 28.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=13 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.15274385809367097;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else return 0.051876758256314486;  // std dev = 2.639, 28.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=13 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.13400703000801117;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else return 0.0392510379803672;  // std dev = 2.639, 28.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=13 */


Results
   AUC ROC   = 0.566796
   AUC PR    = 0.695289
   CLL	      = -0.669131
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.133593
   F1        = 0.235698


Total learning time: 0.932 seconds
Total inference time: 0.747 seconds
AUC ROC: 0.566796


Results scoring model
   AUC ROC   = 0.566667
   AUC PR    = 0.628449
   CLL	      = -0.654676
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.133333
   F1        = 0.235294


Total scoring time: 0.653 seconds
Parameter learned model CLL: -0.654676


Structure after Parameter Learning
[['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 2], 'false': [2.639, 15, 13]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 2], 'false': [2.639, 15, 13]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 2], 'false': [2.639, 15, 13]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 2], 'false': [2.639, 15, 13]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 2], 'false': [2.639, 15, 13]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 2], 'false': [2.639, 15, 13]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 2], 'false': [2.639, 15, 13]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 2], 'false': [2.639, 15, 13]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 2], 'false': [2.639, 15, 13]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 2], 'false': [2.639, 15, 13]}]]
[{'': [0.0, 0.2487244897959179]}, {'': [0.0, 0.24872448979591885]}, {'': [0.0, 0.24872448979591835]}, {'': [0.0, 0.24872448979591816]}, {'': [0.0, 0.24872448979591835]}, {'': [0.0, 0.24872448979591827]}, {'': [0.0, 0.24872448979591846]}, {'': [0.0, 0.2487244897959186]}, {'': [0.0, 0.24872448979591857]}, {'': [0.0, 0.24872448979591835]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
1;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
2;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
3;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
4;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
5;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
6;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
7;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
8;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
9;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.8581489350995122;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else return 0.32243464938522665;  // std dev = 0.499, 28.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=13 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.7194734122109545;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else return 0.27849027391233155;  // std dev = 0.499, 28.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=13 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.5553664367462845;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else return 0.2326459182080262;  // std dev = 0.499, 28.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=13 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.41751358415830997;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else return 0.18869289576980006;  // std dev = 0.499, 28.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=13 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.32071184716014967;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else return 0.14947773606037712;  // std dev = 0.499, 28.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=13 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.25517224256948945;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else return 0.11638019789758561;  // std dev = 0.499, 28.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=13 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.20975771563253554;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else return 0.0895324095352972;  // std dev = 0.499, 28.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=13 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.17709649774527736;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else return 0.06833018551693014;  // std dev = 0.499, 28.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=13 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.15274385809367097;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else return 0.051876758256314486;  // std dev = 0.499, 28.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=13 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.13400703000801117;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else return 0.0392510379803672;  // std dev = 0.499, 28.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=13 */


Results
   AUC ROC   = 0.566796
   AUC PR    = 0.695289
   CLL	      = -0.669131
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.133593
   F1        = 0.235698


Total learning time: 1.282 seconds
Total inference time: 0.747 seconds
AUC ROC: 0.566796


Results scoring model
   AUC ROC   = 0.566667
   AUC PR    = 0.628449
   CLL	      = -0.654676
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.133333
   F1        = 0.235294


Total scoring time: 0.665 seconds
Refined model CLL: -0.654676


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.566796
   AUC PR    = 0.695289
   CLL	      = -0.669131
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.133593
   F1        = 0.235698


Total learning time: 3.532 seconds
Total inference time: 0.747 seconds
AUC ROC: 0.566796
Total revision time: 3.532
Best scored revision CLL: -0.654676


Dataset: 3_imdb_cora, Fold: 2, Type: Transfer (trRDN-B), Time: 00:19:18
{'AUC ROC': 0.566796, 'AUC PR': 0.695289, 'CLL': -0.669131, 'Precision': [1.0, 0.5], 'Recall': 0.133593, 'F1': 0.235698, 'Learning time': 3.532, 'Inference time': 0.747, 'parameter_15': {'AUC ROC': 0.566796, 'AUC PR': 0.695289, 'CLL': -0.669131, 'Precision': [1.0, 0.5], 'Recall': 0.133593, 'F1': 0.235698, 'Learning time': 0.932, 'Inference time': 0.747}}


Amount of data: 20
******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.8581489350995121;  // std dev = 2.11e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return 0.31760839455897183;  // std dev = 3.031, 37.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=17 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.7194734122109545;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return 0.2743930062984994;  // std dev = 3.031, 37.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=17 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.5553664367462845;  // std dev = 1.05e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return 0.22940409212560184;  // std dev = 3.031, 37.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=17 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.41751358415830997;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return 0.18628870627050972;  // std dev = 3.031, 37.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=17 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.32071184716014967;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return 0.14778567561990727;  // std dev = 3.031, 37.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=17 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.25517224256948945;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return 0.11523398454885339;  // std dev = 3.031, 37.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=17 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.20975771563253554;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return 0.08877605966596111;  // std dev = 3.031, 37.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=17 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.17709649774527736;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return 0.06784002556264199;  // std dev = 3.031, 37.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=17 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.15274385809367097;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return 0.05156345950024885;  // std dev = 3.031, 37.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=17 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.13400703000801117;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return 0.03905337379799511;  // std dev = 3.031, 37.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=17 */


Results
   AUC ROC   = 0.566796
   AUC PR    = 0.695289
   CLL	      = -0.67123
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.133593
   F1        = 0.235698


Total learning time: 0.982 seconds
Total inference time: 0.724 seconds
AUC ROC: 0.566796


Results scoring model
   AUC ROC   = 0.575
   AUC PR    = 0.638591
   CLL	      = -0.649272
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.15
   F1        = 0.26087


Total scoring time: 0.696 seconds
Parameter learned model CLL: -0.649272


Structure after Parameter Learning
[['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [2.11e-08, 0, 3], 'false': [3.031, 20, 17]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 3], 'false': [3.031, 20, 17]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [1.05e-08, 0, 3], 'false': [3.031, 20, 17]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 3], 'false': [3.031, 20, 17]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 3], 'false': [3.031, 20, 17]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 3], 'false': [3.031, 20, 17]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 3], 'false': [3.031, 20, 17]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 3], 'false': [3.031, 20, 17]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 3], 'false': [3.031, 20, 17]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 3], 'false': [3.031, 20, 17]}]]
[{'': [1.4802973661668753e-16, 0.24835646457268032]}, {'': [0.0, 0.24835646457268137]}, {'': [3.700743415417188e-17, 0.2483564645726806]}, {'': [-3.700743415417188e-17, 0.24835646457268118]}, {'': [0.0, 0.24835646457268037]}, {'': [0.0, 0.24835646457268085]}, {'': [0.0, 0.24835646457268098]}, {'': [0.0, 0.24835646457268104]}, {'': [-4.625929269271485e-18, 0.2483564645726807]}, {'': [-2.3129646346357427e-18, 0.24835646457268074]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
1;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
2;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
3;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
4;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
5;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
6;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
7;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
8;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
9;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.8581489350995121;  // std dev = 2.11e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return 0.31760839455897183;  // std dev = 0.498, 37.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=17 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.7194734122109545;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return 0.2743930062984994;  // std dev = 0.498, 37.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=17 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.5553664367462845;  // std dev = 1.05e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return 0.22940409212560184;  // std dev = 0.498, 37.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=17 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.41751358415830997;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return 0.18628870627050972;  // std dev = 0.498, 37.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=17 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.32071184716014967;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return 0.14778567561990727;  // std dev = 0.498, 37.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=17 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.25517224256948945;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return 0.11523398454885339;  // std dev = 0.498, 37.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=17 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.20975771563253554;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return 0.08877605966596111;  // std dev = 0.498, 37.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=17 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.17709649774527736;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return 0.06784002556264199;  // std dev = 0.498, 37.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=17 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.15274385809367097;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return 0.05156345950024885;  // std dev = 0.498, 37.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=17 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.13400703000801117;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return 0.03905337379799511;  // std dev = 0.498, 37.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=17 */


Results
   AUC ROC   = 0.566796
   AUC PR    = 0.695289
   CLL	      = -0.67123
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.133593
   F1        = 0.235698


Total learning time: 1.3 seconds
Total inference time: 0.769 seconds
AUC ROC: 0.566796


Results scoring model
   AUC ROC   = 0.575
   AUC PR    = 0.638591
   CLL	      = -0.649272
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.15
   F1        = 0.26087


Total scoring time: 0.665 seconds
Refined model CLL: -0.649272


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.566796
   AUC PR    = 0.695289
   CLL	      = -0.67123
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.133593
   F1        = 0.235698


Total learning time: 3.643 seconds
Total inference time: 0.724 seconds
AUC ROC: 0.566796
Total revision time: 3.643
Best scored revision CLL: -0.649272


Dataset: 3_imdb_cora, Fold: 2, Type: Transfer (trRDN-B), Time: 00:19:24
{'AUC ROC': 0.566796, 'AUC PR': 0.695289, 'CLL': -0.67123, 'Precision': [1.0, 0.5], 'Recall': 0.133593, 'F1': 0.235698, 'Learning time': 3.643, 'Inference time': 0.724, 'parameter_20': {'AUC ROC': 0.566796, 'AUC PR': 0.695289, 'CLL': -0.67123, 'Precision': [1.0, 0.5], 'Recall': 0.133593, 'F1': 0.235698, 'Learning time': 0.982, 'Inference time': 0.724}}


Amount of data: 25
******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.8581489350995122;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return 0.30259337954395643;  // std dev = 3.333, 45.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=20 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.7194734122109545;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return 0.26163180867521296;  // std dev = 3.333, 45.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=20 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.5553664367462845;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return 0.2192721473492705;  // std dev = 3.333, 45.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=20 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.4175135841583099;  // std dev = 1.49e-08, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return 0.1787352457468729;  // std dev = 3.333, 45.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=20 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.32071184716014967;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return 0.14243924477676323;  // std dev = 3.333, 45.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=20 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.25517224256948945;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return 0.11159559999632924;  // std dev = 3.333, 45.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=20 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.20975771563253556;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return 0.08637026299843586;  // std dev = 3.333, 45.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=20 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.17709649774527736;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return 0.06628370899125421;  // std dev = 3.333, 45.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=20 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.15274385809367097;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return 0.05057564362187412;  // std dev = 3.333, 45.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=20 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.13400703000801117;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return 0.03843884907512935;  // std dev = 3.333, 45.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=20 */


Results
   AUC ROC   = 0.566796
   AUC PR    = 0.695289
   CLL	      = -0.67834
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.133593
   F1        = 0.235698


Total learning time: 0.989 seconds
Total inference time: 0.731 seconds
AUC ROC: 0.566796


Results scoring model
   AUC ROC   = 0.6
   AUC PR    = 0.670073
   CLL	      = -0.632522
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.2
   F1        = 0.333333


Total scoring time: 0.671 seconds
Parameter learned model CLL: -0.632522


Structure after Parameter Learning
[['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 5], 'false': [3.333, 25, 20]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 5], 'false': [3.333, 25, 20]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 5], 'false': [3.333, 25, 20]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [1.49e-08, 0, 5], 'false': [3.333, 25, 20]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 5], 'false': [3.333, 25, 20]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 5], 'false': [3.333, 25, 20]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 5], 'false': [3.333, 25, 20]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 5], 'false': [3.333, 25, 20]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 5], 'false': [3.333, 25, 20]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 5], 'false': [3.333, 25, 20]}]]
[{'': [0.0, 0.2469135802469133]}, {'': [0.0, 0.24691358024691287]}, {'': [-4.4408920985006264e-17, 0.24691358024691334]}, {'': [4.4408920985006264e-17, 0.24691358024691293]}, {'': [-2.2204460492503132e-17, 0.24691358024691365]}, {'': [0.0, 0.24691358024691348]}, {'': [-5.551115123125783e-18, 0.24691358024691382]}, {'': [0.0, 0.2469135802469139]}, {'': [0.0, 0.24691358024691354]}, {'': [0.0, 0.24691358024691348]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
1;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
2;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
3;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
4;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
5;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
6;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
7;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
8;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
9;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.8581489350995122;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then return 0.8581489350995121;  // std dev = 2.11e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.2684053453559226;  // std dev = 0.492, 39.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=16 */
%   | else return 0.19148226843284552;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.7194734122109545;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.26728002814741186;  // std dev = 0.490, 42.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=19 */
%   | else return 0.16653882456488175;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.5553664367462845;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then return 0.6625259339725299;  // std dev = 1.49e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.19002436270745388;  // std dev = 0.492, 39.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=16 */
%   | else return 0.1420942428155648;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.4175135841583099;  // std dev = 1.49e-08, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.5030112392882121;  // std dev = 1.05e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( haswordvenue(A, F), haswordvenue(B, F) )
%   | | then return 0.1556683590917146;  // std dev = 0.492, 39.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=16 */
%   | | else return 0.11914890490746428;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.32071184716014967;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.37966599701022874;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( haswordvenue(A, F), haswordvenue(B, F) )
%   | | then return 0.12501763634680982;  // std dev = 0.492, 39.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=16 */
%   | | else return 0.09841340278401862;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.25517224256948945;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.29512278519190405;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( haswordvenue(A, F), haswordvenue(B, F) )
%   | | then return 0.09886112273287902;  // std dev = 0.492, 39.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=16 */
%   | | else return 0.08026654944252243;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.20975771563253556;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.23762315962476854;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( haswordvenue(A, F), haswordvenue(B, F) )
%   | | then return 0.07727764143746872;  // std dev = 0.492, 39.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=16 */
%   | | else return 0.06479591611329232;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.17709649774527736;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then return 0.19728060857817853;  // std dev = 3.73e-09, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.059898308086891665;  // std dev = 0.492, 39.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=16 */
%   | else return 0.05187916934404054;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.15274385809367097;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.16788957441767438;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( haswordvenue(A, F), haswordvenue(B, F) )
%   | | then return 0.04614586000968547;  // std dev = 0.492, 39.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=16 */
%   | | else return 0.04126932998424626;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.13400703000801117;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.1457229597259122;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( haswordvenue(A, F), haswordvenue(B, F) )
%   | | then return 0.035396019930858905;  // std dev = 0.492, 39.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=16 */
%   | | else return 0.032663748734830134;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */


Results
   AUC ROC   = 0.560264
   AUC PR    = 0.693955
   CLL	      = -0.703372
   Precision = 0.909774 at threshold = 0.5
   Recall    = 0.156939
   F1        = 0.267699


Total learning time: 3.323 seconds
Total inference time: 0.955 seconds
AUC ROC: 0.560264


Results scoring model
   AUC ROC   = 0.6672
   AUC PR    = 0.740446
   CLL	      = -0.588449
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.32
   F1        = 0.484848


Total scoring time: 0.724 seconds
Refined model CLL: -0.588449


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.560264
   AUC PR    = 0.693955
   CLL	      = -0.703372
   Precision = 0.909774 at threshold = 0.5
   Recall    = 0.156939
   F1        = 0.267699


Total learning time: 5.707000000000001 seconds
Total inference time: 0.955 seconds
AUC ROC: 0.560264
Total revision time: 5.707000000000001
Best scored revision CLL: -0.588449


Dataset: 3_imdb_cora, Fold: 2, Type: Transfer (trRDN-B), Time: 00:19:32
{'AUC ROC': 0.560264, 'AUC PR': 0.693955, 'CLL': -0.703372, 'Precision': [0.909774, 0.5], 'Recall': 0.156939, 'F1': 0.267699, 'Learning time': 5.707000000000001, 'Inference time': 0.955, 'parameter_25': {'AUC ROC': 0.566796, 'AUC PR': 0.695289, 'CLL': -0.67834, 'Precision': [1.0, 0.5], 'Recall': 0.133593, 'F1': 0.235698, 'Learning time': 0.989, 'Inference time': 0.731}}


Starting fold 3

Target train facts examples: 33252
Target train pos examples: 2436
Target train neg examples: 2800

Target test facts examples: 9306
Target test pos	 examples: 581
Target test neg examples: 2222

Amount of data: 5
******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.28672036367094084;  // std dev = 1.309, 7.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=3 */
%   else return 0.5248156017661788;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.24811816884741303;  // std dev = 1.309, 7.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=3 */
%   else return 0.448295606241962;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.20848477447886868;  // std dev = 1.309, 7.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=3 */
%   else return 0.36236334632262296;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.17062637354018514;  // std dev = 1.309, 7.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=3 */
%   else return 0.2807538536965855;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.13664585375352217;  // std dev = 1.309, 7.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=3 */
%   else return 0.21248070121827137;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.10762034996184422;  // std dev = 1.309, 7.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=3 */
%   else return 0.1594898822817116;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.08372807955323866;  // std dev = 1.309, 7.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=3 */
%   else return 0.11975529938157474;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.06457405393631663;  // std dev = 1.309, 7.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=3 */
%   else return 0.09028081829440963;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.04949778322519479;  // std dev = 1.309, 7.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=3 */
%   else return 0.06840311429118533;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.03777940363354092;  // std dev = 1.309, 7.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=3 */
%   else return 0.052078905701252655;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */


Results
   AUC ROC   = 0.451323
   AUC PR    = 0.17765
   CLL	      = -0.648971
   Precision = 0.092308 at threshold = 0.5
   Recall    = 0.061962
   F1        = 0.07415


Total learning time: 0.847 seconds
Total inference time: 0.888 seconds
AUC ROC: 0.451323


Results scoring model
   AUC ROC   = 0.6
   AUC PR    = 0.600181
   CLL	      = -0.67122
   Precision = 0.666667 at threshold = 0.5
   Recall    = 0.4
   F1        = 0.5


Total scoring time: 0.658 seconds
Parameter learned model CLL: -0.67122


Structure after Parameter Learning
[['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [1.309, 4, 3], 'false': [0.816, 1, 2]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [1.309, 4, 3], 'false': [0.816, 1, 2]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [1.309, 4, 3], 'false': [0.816, 1, 2]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [1.309, 4, 3], 'false': [0.816, 1, 2]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [1.309, 4, 3], 'false': [0.816, 1, 2]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [1.309, 4, 3], 'false': [0.816, 1, 2]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [1.309, 4, 3], 'false': [0.816, 1, 2]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [1.309, 4, 3], 'false': [0.816, 1, 2]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [1.309, 4, 3], 'false': [0.816, 1, 2]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [1.309, 4, 3], 'false': [0.816, 1, 2]}]]
[{'': [0.24489795918367335, 0.22222222222222224]}, {'': [0.2448979591836735, 0.2222222222222222]}, {'': [0.2448979591836735, 0.22222222222222224]}, {'': [0.2448979591836735, 0.2222222222222222]}, {'': [0.24489795918367352, 0.2222222222222222]}, {'': [0.24489795918367344, 0.2222222222222222]}, {'': [0.24489795918367346, 0.22222222222222224]}, {'': [0.24489795918367346, 0.22222222222222224]}, {'': [0.2448979591836735, 0.2222222222222222]}, {'': [0.2448979591836735, 0.22222222222222224]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Pruning resulted in null theory

Candidate for revision
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.28672036367094084;  // std dev = 0.495, 7.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=3 */
%   else return 0.5248156017661788;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.24811816884741303;  // std dev = 0.495, 7.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=3 */
%   else return 0.448295606241962;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.20848477447886868;  // std dev = 0.495, 7.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=3 */
%   else return 0.36236334632262296;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.17062637354018514;  // std dev = 0.495, 7.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=3 */
%   else return 0.2807538536965855;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.13664585375352217;  // std dev = 0.495, 7.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=3 */
%   else return 0.21248070121827137;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.10762034996184422;  // std dev = 0.495, 7.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=3 */
%   else return 0.1594898822817116;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.08372807955323866;  // std dev = 0.495, 7.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=3 */
%   else return 0.11975529938157474;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.06457405393631663;  // std dev = 0.495, 7.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=3 */
%   else return 0.09028081829440963;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.04949778322519479;  // std dev = 0.495, 7.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=3 */
%   else return 0.06840311429118533;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.03777940363354092;  // std dev = 0.495, 7.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=3 */
%   else return 0.052078905701252655;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */


Results
   AUC ROC   = 0.451323
   AUC PR    = 0.17765
   CLL	      = -0.648971
   Precision = 0.092308 at threshold = 0.5
   Recall    = 0.061962
   F1        = 0.07415


Total learning time: 1.253 seconds
Total inference time: 0.917 seconds
AUC ROC: 0.451323


Results scoring model
   AUC ROC   = 0.6
   AUC PR    = 0.600181
   CLL	      = -0.67122
   Precision = 0.666667 at threshold = 0.5
   Recall    = 0.4
   F1        = 0.5


Total scoring time: 0.624 seconds
Refined model CLL: -0.67122


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.451323
   AUC PR    = 0.17765
   CLL	      = -0.648971
   Precision = 0.092308 at threshold = 0.5
   Recall    = 0.061962
   F1        = 0.07415


Total learning time: 3.382 seconds
Total inference time: 0.888 seconds
AUC ROC: 0.451323
Total revision time: 3.382
Best scored revision CLL: -0.67122


Dataset: 3_imdb_cora, Fold: 3, Type: Transfer (trRDN-B), Time: 00:19:38
{'AUC ROC': 0.451323, 'AUC PR': 0.17765, 'CLL': -0.648971, 'Precision': [0.092308, 0.5], 'Recall': 0.061962, 'F1': 0.07415, 'Learning time': 3.382, 'Inference time': 0.888, 'parameter_5': {'AUC ROC': 0.451323, 'AUC PR': 0.17765, 'CLL': -0.648971, 'Precision': [0.092308, 0.5], 'Recall': 0.061962, 'F1': 0.07415, 'Learning time': 0.847, 'Inference time': 0.888}}


Amount of data: 10
******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.29564893509951234;  // std dev = 1.984, 16.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=7 */
%   else return 0.6081489350995122;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.2557225255975429;  // std dev = 1.984, 16.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=7 */
%   else return 0.5170719622367217;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.214562364478699;  // std dev = 1.984, 16.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=7 */
%   else return 0.41257245288266;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.17520344886901457;  // std dev = 1.984, 16.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=7 */
%   else return 0.3151786576185065;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.13992299045211237;  // std dev = 1.984, 16.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=7 */
%   else return 0.23676009386434207;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.10987349688258453;  // std dev = 1.984, 16.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=7 */
%   else return 0.1780694542720751;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.0852277690731987;  // std dev = 1.984, 16.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=7 */
%   else return 0.13513671764223453;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.06554488992775385;  // std dev = 1.984, 16.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=7 */
%   else return 0.103671751136855;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.05010928780911203;  // std dev = 1.984, 16.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=7 */
%   else return 0.08034833303035915;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.038152426279861436;  // std dev = 1.984, 16.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=7 */
%   else return 0.06282214181758172;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */


Results
   AUC ROC   = 0.451323
   AUC PR    = 0.17765
   CLL	      = -0.680874
   Precision = 0.092308 at threshold = 0.5
   Recall    = 0.061962
   F1        = 0.07415


Total learning time: 0.907 seconds
Total inference time: 0.898 seconds
AUC ROC: 0.451323


Results scoring model
   AUC ROC   = 0.6
   AUC PR    = 0.620652
   CLL	      = -0.663306
   Precision = 0.75 at threshold = 0.5
   Recall    = 0.3
   F1        = 0.428571


Total scoring time: 0.635 seconds
Parameter learned model CLL: -0.663306


Structure after Parameter Learning
[['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [1.984, 9, 7], 'false': [0.866, 1, 3]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [1.984, 9, 7], 'false': [0.866, 1, 3]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [1.984, 9, 7], 'false': [0.866, 1, 3]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [1.984, 9, 7], 'false': [0.866, 1, 3]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [1.984, 9, 7], 'false': [0.866, 1, 3]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [1.984, 9, 7], 'false': [0.866, 1, 3]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [1.984, 9, 7], 'false': [0.866, 1, 3]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [1.984, 9, 7], 'false': [0.866, 1, 3]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [1.984, 9, 7], 'false': [0.866, 1, 3]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [1.984, 9, 7], 'false': [0.866, 1, 3]}]]
[{'': [0.24609375000000003, 0.18750000000000006]}, {'': [0.24609375000000006, 0.18750000000000006]}, {'': [0.24609374999999994, 0.18750000000000003]}, {'': [0.24609375000000008, 0.18750000000000003]}, {'': [0.24609375000000006, 0.1875]}, {'': [0.24609374999999992, 0.1875]}, {'': [0.24609375, 0.1875]}, {'': [0.24609375000000006, 0.1875]}, {'': [0.2460937500000001, 0.18749999999999997]}, {'': [0.24609375, 0.1875]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Pruning resulted in null theory

Candidate for revision
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.29564893509951234;  // std dev = 0.496, 16.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=7 */
%   else return 0.6081489350995122;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.2557225255975429;  // std dev = 0.496, 16.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=7 */
%   else return 0.5170719622367217;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.214562364478699;  // std dev = 0.496, 16.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=7 */
%   else return 0.41257245288266;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.17520344886901457;  // std dev = 0.496, 16.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=7 */
%   else return 0.3151786576185065;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.13992299045211237;  // std dev = 0.496, 16.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=7 */
%   else return 0.23676009386434207;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.10987349688258453;  // std dev = 0.496, 16.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=7 */
%   else return 0.1780694542720751;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.0852277690731987;  // std dev = 0.496, 16.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=7 */
%   else return 0.13513671764223453;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.06554488992775385;  // std dev = 0.496, 16.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=7 */
%   else return 0.103671751136855;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.05010928780911203;  // std dev = 0.496, 16.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=7 */
%   else return 0.08034833303035915;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.038152426279861436;  // std dev = 0.496, 16.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=7 */
%   else return 0.06282214181758172;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */


Results
   AUC ROC   = 0.451323
   AUC PR    = 0.17765
   CLL	      = -0.680874
   Precision = 0.092308 at threshold = 0.5
   Recall    = 0.061962
   F1        = 0.07415


Total learning time: 1.402 seconds
Total inference time: 0.93 seconds
AUC ROC: 0.451323


Results scoring model
   AUC ROC   = 0.6
   AUC PR    = 0.620652
   CLL	      = -0.663306
   Precision = 0.75 at threshold = 0.5
   Recall    = 0.3
   F1        = 0.428571


Total scoring time: 0.66 seconds
Refined model CLL: -0.663306


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.451323
   AUC PR    = 0.17765
   CLL	      = -0.680874
   Precision = 0.092308 at threshold = 0.5
   Recall    = 0.061962
   F1        = 0.07415


Total learning time: 3.604 seconds
Total inference time: 0.898 seconds
AUC ROC: 0.451323
Total revision time: 3.604
Best scored revision CLL: -0.663306


Dataset: 3_imdb_cora, Fold: 3, Type: Transfer (trRDN-B), Time: 00:19:44
{'AUC ROC': 0.451323, 'AUC PR': 0.17765, 'CLL': -0.680874, 'Precision': [0.092308, 0.5], 'Recall': 0.061962, 'F1': 0.07415, 'Learning time': 3.604, 'Inference time': 0.898, 'parameter_10': {'AUC ROC': 0.451323, 'AUC PR': 0.17765, 'CLL': -0.680874, 'Precision': [0.092308, 0.5], 'Recall': 0.061962, 'F1': 0.07415, 'Learning time': 0.907, 'Inference time': 0.898}}


Amount of data: 15
******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.29814893509951235;  // std dev = 2.482, 25.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=11 */
%   else return 0.6581489350995122;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.25785039367895846;  // std dev = 2.482, 25.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=11 */
%   else return 0.5580193346218546;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.21625962120764483;  // std dev = 2.482, 25.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=11 */
%   else return 0.4419486100244409;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.17647771694199513;  // std dev = 2.482, 25.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=11 */
%   else return 0.33541139495094313;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.1408320882487595;  // std dev = 2.482, 25.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=11 */
%   else return 0.25176837314502193;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.11049644214724878;  // std dev = 2.482, 25.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=11 */
%   else return 0.19047961032437172;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.08564138996387136;  // std dev = 2.482, 25.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=11 */
%   else return 0.14620194507639933;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.0658124100617541;  // std dev = 2.482, 25.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=11 */
%   else return 0.11389369465607464;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.05027801808250093;  // std dev = 2.482, 25.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=11 */
%   else return 0.08989956180301868;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.03825583137888899;  // std dev = 2.482, 25.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=11 */
%   else return 0.0717481021516045;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */


Results
   AUC ROC   = 0.451323
   AUC PR    = 0.17765
   CLL	      = -0.700662
   Precision = 0.092308 at threshold = 0.5
   Recall    = 0.061962
   F1        = 0.07415


Total learning time: 0.955 seconds
Total inference time: 0.888 seconds
AUC ROC: 0.451323


Results scoring model
   AUC ROC   = 0.6
   AUC PR    = 0.631472
   CLL	      = -0.657986
   Precision = 0.8 at threshold = 0.5
   Recall    = 0.266667
   F1        = 0.4


Total scoring time: 0.642 seconds
Parameter learned model CLL: -0.657986


Structure after Parameter Learning
[['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [2.482, 14, 11], 'false': [0.894, 1, 4]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [2.482, 14, 11], 'false': [0.894, 1, 4]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [2.482, 14, 11], 'false': [0.894, 1, 4]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [2.482, 14, 11], 'false': [0.894, 1, 4]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [2.482, 14, 11], 'false': [0.894, 1, 4]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [2.482, 14, 11], 'false': [0.894, 1, 4]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [2.482, 14, 11], 'false': [0.894, 1, 4]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [2.482, 14, 11], 'false': [0.894, 1, 4]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [2.482, 14, 11], 'false': [0.894, 1, 4]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [2.482, 14, 11], 'false': [0.894, 1, 4]}]]
[{'': [0.24639999999999954, 0.15999999999999986]}, {'': [0.24640000000000004, 0.16]}, {'': [0.24639999999999987, 0.15999999999999998]}, {'': [0.24639999999999976, 0.15999999999999998]}, {'': [0.2464, 0.16]}, {'': [0.24640000000000023, 0.16]}, {'': [0.24639999999999992, 0.16]}, {'': [0.24640000000000023, 0.16]}, {'': [0.24640000000000017, 0.16]}, {'': [0.2464, 0.16]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Pruning resulted in null theory

Candidate for revision
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.29814893509951235;  // std dev = 0.496, 25.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=11 */
%   else return 0.6581489350995122;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.25785039367895846;  // std dev = 0.496, 25.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=11 */
%   else return 0.5580193346218546;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.21625962120764483;  // std dev = 0.496, 25.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=11 */
%   else return 0.4419486100244409;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.17647771694199513;  // std dev = 0.496, 25.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=11 */
%   else return 0.33541139495094313;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.1408320882487595;  // std dev = 0.496, 25.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=11 */
%   else return 0.25176837314502193;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.11049644214724878;  // std dev = 0.496, 25.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=11 */
%   else return 0.19047961032437172;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.08564138996387136;  // std dev = 0.496, 25.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=11 */
%   else return 0.14620194507639933;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.0658124100617541;  // std dev = 0.496, 25.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=11 */
%   else return 0.11389369465607464;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.05027801808250093;  // std dev = 0.496, 25.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=11 */
%   else return 0.08989956180301868;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.03825583137888899;  // std dev = 0.496, 25.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=11 */
%   else return 0.0717481021516045;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */


Results
   AUC ROC   = 0.451323
   AUC PR    = 0.17765
   CLL	      = -0.700662
   Precision = 0.092308 at threshold = 0.5
   Recall    = 0.061962
   F1        = 0.07415


Total learning time: 1.375 seconds
Total inference time: 0.914 seconds
AUC ROC: 0.451323


Results scoring model
   AUC ROC   = 0.6
   AUC PR    = 0.631472
   CLL	      = -0.657986
   Precision = 0.8 at threshold = 0.5
   Recall    = 0.266667
   F1        = 0.4


Total scoring time: 0.702 seconds
Refined model CLL: -0.657986


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.451323
   AUC PR    = 0.17765
   CLL	      = -0.700662
   Precision = 0.092308 at threshold = 0.5
   Recall    = 0.061962
   F1        = 0.07415


Total learning time: 3.674 seconds
Total inference time: 0.888 seconds
AUC ROC: 0.451323
Total revision time: 3.674
Best scored revision CLL: -0.657986


Dataset: 3_imdb_cora, Fold: 3, Type: Transfer (trRDN-B), Time: 00:19:50
{'AUC ROC': 0.451323, 'AUC PR': 0.17765, 'CLL': -0.700662, 'Precision': [0.092308, 0.5], 'Recall': 0.061962, 'F1': 0.07415, 'Learning time': 3.674, 'Inference time': 0.888, 'parameter_15': {'AUC ROC': 0.451323, 'AUC PR': 0.17765, 'CLL': -0.700662, 'Precision': [0.092308, 0.5], 'Recall': 0.061962, 'F1': 0.07415, 'Learning time': 0.955, 'Inference time': 0.888}}


Amount of data: 20
******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.32873717039363;  // std dev = 2.910, 34.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=16 */
%   else return 0.5248156017661789;  // std dev = 1.155, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.2838374893261067;  // std dev = 2.910, 34.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=16 */
%   else return 0.448295606241962;  // std dev = 1.155, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.2368685074770855;  // std dev = 2.910, 34.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=16 */
%   else return 0.36236334632262296;  // std dev = 1.155, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.1918153831027405;  // std dev = 2.910, 34.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=16 */
%   else return 0.2807538536965854;  // std dev = 1.155, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.1516686618471827;  // std dev = 2.910, 34.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=16 */
%   else return 0.21248070121827137;  // std dev = 1.155, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.11786101189670178;  // std dev = 2.910, 34.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=16 */
%   else return 0.15948988228171151;  // std dev = 1.155, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.0905089646246743;  // std dev = 2.910, 34.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=16 */
%   else return 0.11975529938157475;  // std dev = 1.155, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.06896419203032808;  // std dev = 2.910, 34.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=16 */
%   else return 0.09028081829440963;  // std dev = 1.155, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.05228401282685906;  // std dev = 2.910, 34.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=16 */
%   else return 0.06840311429118533;  // std dev = 1.155, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.0395103119478826;  // std dev = 2.910, 34.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=16 */
%   else return 0.052078905701252655;  // std dev = 1.155, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */


Results
   AUC ROC   = 0.451323
   AUC PR    = 0.17765
   CLL	      = -0.677123
   Precision = 0.092308 at threshold = 0.5
   Recall    = 0.061962
   F1        = 0.07415


Total learning time: 0.961 seconds
Total inference time: 0.895 seconds
AUC ROC: 0.451323


Results scoring model
   AUC ROC   = 0.55
   AUC PR    = 0.562599
   CLL	      = -0.685222
   Precision = 0.666667 at threshold = 0.5
   Recall    = 0.2
   F1        = 0.307692


Total scoring time: 0.633 seconds
Parameter learned model CLL: -0.685222


Structure after Parameter Learning
[['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [2.91, 18, 16], 'false': [1.155, 2, 4]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [2.91, 18, 16], 'false': [1.155, 2, 4]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [2.91, 18, 16], 'false': [1.155, 2, 4]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [2.91, 18, 16], 'false': [1.155, 2, 4]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [2.91, 18, 16], 'false': [1.155, 2, 4]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [2.91, 18, 16], 'false': [1.155, 2, 4]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [2.91, 18, 16], 'false': [1.155, 2, 4]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [2.91, 18, 16], 'false': [1.155, 2, 4]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [2.91, 18, 16], 'false': [1.155, 2, 4]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [2.91, 18, 16], 'false': [1.155, 2, 4]}]]
[{'': [0.24913494809688536, 0.22222222222222213]}, {'': [0.24913494809688586, 0.2222222222222222]}, {'': [0.24913494809688566, 0.22222222222222224]}, {'': [0.24913494809688555, 0.2222222222222222]}, {'': [0.24913494809688586, 0.22222222222222224]}, {'': [0.24913494809688597, 0.2222222222222222]}, {'': [0.24913494809688572, 0.2222222222222222]}, {'': [0.24913494809688572, 0.2222222222222222]}, {'': [0.24913494809688583, 0.2222222222222222]}, {'': [0.24913494809688583, 0.2222222222222222]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Pruning resulted in null theory

Candidate for revision
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.32873717039363;  // std dev = 0.499, 34.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=16 */
%   else return 0.5248156017661789;  // std dev = 1.155, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.2838374893261067;  // std dev = 0.499, 34.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=16 */
%   else return 0.448295606241962;  // std dev = 1.155, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.2368685074770855;  // std dev = 0.499, 34.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=16 */
%   else return 0.36236334632262296;  // std dev = 1.155, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.1918153831027405;  // std dev = 0.499, 34.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=16 */
%   else return 0.2807538536965854;  // std dev = 1.155, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.1516686618471827;  // std dev = 0.499, 34.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=16 */
%   else return 0.21248070121827137;  // std dev = 1.155, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.11786101189670178;  // std dev = 0.499, 34.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=16 */
%   else return 0.15948988228171151;  // std dev = 1.155, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.0905089646246743;  // std dev = 0.499, 34.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=16 */
%   else return 0.11975529938157475;  // std dev = 1.155, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.06896419203032808;  // std dev = 0.499, 34.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=16 */
%   else return 0.09028081829440963;  // std dev = 1.155, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.05228401282685906;  // std dev = 0.499, 34.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=16 */
%   else return 0.06840311429118533;  // std dev = 1.155, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.0395103119478826;  // std dev = 0.499, 34.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=16 */
%   else return 0.052078905701252655;  // std dev = 1.155, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */


Results
   AUC ROC   = 0.451323
   AUC PR    = 0.17765
   CLL	      = -0.677123
   Precision = 0.092308 at threshold = 0.5
   Recall    = 0.061962
   F1        = 0.07415


Total learning time: 1.381 seconds
Total inference time: 0.897 seconds
AUC ROC: 0.451323


Results scoring model
   AUC ROC   = 0.55
   AUC PR    = 0.562599
   CLL	      = -0.685222
   Precision = 0.666667 at threshold = 0.5
   Recall    = 0.2
   F1        = 0.307692


Total scoring time: 0.659 seconds
Refined model CLL: -0.685222


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.451323
   AUC PR    = 0.17765
   CLL	      = -0.677123
   Precision = 0.092308 at threshold = 0.5
   Recall    = 0.061962
   F1        = 0.07415


Total learning time: 3.6339999999999995 seconds
Total inference time: 0.895 seconds
AUC ROC: 0.451323
Total revision time: 3.6339999999999995
Best scored revision CLL: -0.685222


Dataset: 3_imdb_cora, Fold: 3, Type: Transfer (trRDN-B), Time: 00:19:56
{'AUC ROC': 0.451323, 'AUC PR': 0.17765, 'CLL': -0.677123, 'Precision': [0.092308, 0.5], 'Recall': 0.061962, 'F1': 0.07415, 'Learning time': 3.6339999999999995, 'Inference time': 0.895, 'parameter_20': {'AUC ROC': 0.451323, 'AUC PR': 0.17765, 'CLL': -0.677123, 'Precision': [0.092308, 0.5], 'Recall': 0.061962, 'F1': 0.07415, 'Learning time': 0.961, 'Inference time': 0.895}}


Amount of data: 25
******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.3465210281227675;  // std dev = 3.278, 43.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=21 */
%   else return 0.4295775065280837;  // std dev = 1.309, 7.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=4 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.29890536680643803;  // std dev = 3.278, 43.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=21 */
%   else return 0.36887697659770574;  // std dev = 1.309, 7.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=4 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.24871740581779708;  // std dev = 3.278, 43.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=21 */
%   else return 0.3027909085849406;  // std dev = 1.309, 7.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=4 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.20052355810037237;  // std dev = 3.278, 43.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=21 */
%   else return 0.2393401664098931;  // std dev = 1.309, 7.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=4 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.15774111813624342;  // std dev = 3.278, 43.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=21 */
%   else return 0.1843038277162846;  // std dev = 1.309, 7.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=4 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.12194871865478606;  // std dev = 3.278, 43.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=21 */
%   else return 0.13977569193759043;  // std dev = 1.309, 7.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=4 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.09320482481946174;  // std dev = 3.278, 43.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=21 */
%   else return 0.1052107561348137;  // std dev = 1.309, 7.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=4 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.07072454933213954;  // std dev = 3.278, 43.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=21 */
%   else return 0.07895904348963037;  // std dev = 1.309, 7.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=4 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.053429537178442545;  // std dev = 3.278, 43.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=21 */
%   else return 0.0592222778258641;  // std dev = 1.309, 7.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=4 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.040255633335843186;  // std dev = 3.278, 43.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=21 */
%   else return 0.04444053765471761;  // std dev = 1.309, 7.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=4 */


Results
   AUC ROC   = 0.451323
   AUC PR    = 0.17765
   CLL	      = -0.665582
   Precision = 0.092308 at threshold = 0.5
   Recall    = 0.061962
   F1        = 0.07415


Total learning time: 0.974 seconds
Total inference time: 0.883 seconds
AUC ROC: 0.451323


Results scoring model
   AUC ROC   = 0.52
   AUC PR    = 0.52407
   CLL	      = -0.69338
   Precision = 0.571429 at threshold = 0.5
   Recall    = 0.16
   F1        = 0.25


Total scoring time: 0.66 seconds
Parameter learned model CLL: -0.69338


Structure after Parameter Learning
[['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [3.278, 22, 21], 'false': [1.309, 3, 4]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [3.278, 22, 21], 'false': [1.309, 3, 4]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [3.278, 22, 21], 'false': [1.309, 3, 4]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [3.278, 22, 21], 'false': [1.309, 3, 4]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [3.278, 22, 21], 'false': [1.309, 3, 4]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [3.278, 22, 21], 'false': [1.309, 3, 4]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [3.278, 22, 21], 'false': [1.309, 3, 4]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [3.278, 22, 21], 'false': [1.309, 3, 4]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [3.278, 22, 21], 'false': [1.309, 3, 4]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [3.278, 22, 21], 'false': [1.309, 3, 4]}]]
[{'': [0.24986479177934012, 0.24489795918367332]}, {'': [0.24986479177933985, 0.24489795918367355]}, {'': [0.24986479177934, 0.2448979591836735]}, {'': [0.24986479177933962, 0.24489795918367344]}, {'': [0.2498647917793406, 0.24489795918367346]}, {'': [0.24986479177934035, 0.2448979591836735]}, {'': [0.24986479177933985, 0.24489795918367344]}, {'': [0.2498647917793401, 0.2448979591836735]}, {'': [0.24986479177934018, 0.24489795918367344]}, {'': [0.24986479177934004, 0.24489795918367352]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Pruning resulted in null theory

Candidate for revision
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.3465210281227675;  // std dev = 0.500, 43.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=21 */
%   else if ( haswordvenue(B, D), haswordtitle(E, D) )
%   | then return 0.8581489350995122;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else return -0.14185106490048777;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.29890536680643803;  // std dev = 0.500, 43.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=21 */
%   else if ( haswordvenue(B, D), haswordtitle(E, D) )
%   | then return 0.7194734122109545;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else return -0.12544463852839138;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.24871740581779708;  // std dev = 0.500, 43.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=21 */
%   else if ( haswordvenue(B, D), haswordtitle(E, D) )
%   | then return 0.5553664367462845;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else return -0.11231637819360639;  // std dev = 2.63e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.20052355810037237;  // std dev = 0.500, 43.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=21 */
%   else if ( haswordvenue(B, D), haswordtitle(E, D) )
%   | then return 0.41751358415830997;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else return -0.1015963294878363;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.15774111813624342;  // std dev = 0.500, 43.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=21 */
%   else if ( haswordvenue(B, D), haswordtitle(E, D) )
%   | then return 0.32071184716014967;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else return -0.09269127618926094;  // std dev = 2.63e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.12194871865478606;  // std dev = 0.500, 43.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=21 */
%   else if ( haswordvenue(B, D), haswordtitle(E, D) )
%   | then return 0.25517224256948945;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else return -0.08518475138839687;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.09320482481946174;  // std dev = 0.500, 43.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=21 */
%   else if ( haswordvenue(B, D), haswordtitle(E, D) )
%   | then return 0.20975771563253554;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else return -0.07877675473109173;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.07072454933213954;  // std dev = 0.500, 43.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=21 */
%   else if ( haswordvenue(B, D), haswordtitle(E, D) )
%   | then return 0.17709649774527736;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else return -0.07324622576333704;  // std dev = 1.86e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.053429537178442545;  // std dev = 0.500, 43.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=21 */
%   else if ( haswordvenue(B, D), haswordtitle(E, D) )
%   | then return 0.15274385809367097;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else return -0.06842697784420272;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.040255633335843186;  // std dev = 0.500, 43.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=21 */
%   else if ( haswordvenue(B, D), haswordtitle(E, D) )
%   | then return 0.13400703000801117;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else return -0.0641918400820262;  // std dev = 1.32e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */


Results
   AUC ROC   = 0.501744
   AUC PR    = 0.195809
   CLL	      = -0.714219
   Precision = 0.094241 at threshold = 0.5
   Recall    = 0.030981
   F1        = 0.046632


Total learning time: 1.62 seconds
Total inference time: 0.923 seconds
AUC ROC: 0.501744


Results scoring model
   AUC ROC   = 0.6304
   AUC PR    = 0.66958
   CLL	      = -0.611353
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.16
   F1        = 0.275862


Total scoring time: 0.703 seconds
Refined model CLL: -0.611353


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.501744
   AUC PR    = 0.195809
   CLL	      = -0.714219
   Precision = 0.094241 at threshold = 0.5
   Recall    = 0.030981
   F1        = 0.046632


Total learning time: 3.957 seconds
Total inference time: 0.923 seconds
AUC ROC: 0.501744
Total revision time: 3.957
Best scored revision CLL: -0.611353


Dataset: 3_imdb_cora, Fold: 3, Type: Transfer (trRDN-B), Time: 00:20:02
{'AUC ROC': 0.501744, 'AUC PR': 0.195809, 'CLL': -0.714219, 'Precision': [0.094241, 0.5], 'Recall': 0.030981, 'F1': 0.046632, 'Learning time': 3.957, 'Inference time': 0.923, 'parameter_25': {'AUC ROC': 0.451323, 'AUC PR': 0.17765, 'CLL': -0.665582, 'Precision': [0.092308, 0.5], 'Recall': 0.061962, 'F1': 0.07415, 'Learning time': 0.974, 'Inference time': 0.883}}


Starting fold 4

Target train facts examples: 34429
Target train pos examples: 2270
Target train neg examples: 3954

Target test facts examples: 8129
Target test pos	 examples: 747
Target test neg examples: 1068

Amount of data: 5
******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.8581489350995122;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else return 0.30259337954395676;  // std dev = 1.491, 9.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=4 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.7194734122109545;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else return 0.2616318086752123;  // std dev = 1.491, 9.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=4 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.5553664367462845;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else return 0.2192721473492705;  // std dev = 1.491, 9.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=4 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.41751358415830997;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else return 0.17873524574687283;  // std dev = 1.491, 9.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=4 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.32071184716014967;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else return 0.1424392447767628;  // std dev = 1.491, 9.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=4 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.25517224256948945;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else return 0.11159559999632969;  // std dev = 1.491, 9.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=4 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.20975771563253554;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else return 0.08637026299843623;  // std dev = 1.491, 9.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=4 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.17709649774527736;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else return 0.06628370899125427;  // std dev = 1.491, 9.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=4 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.15274385809367097;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else return 0.05057564362187433;  // std dev = 1.491, 9.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=4 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.13400703000801117;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else return 0.038438849075129386;  // std dev = 1.491, 9.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=4 */


Results
   AUC ROC   = 0.576975
   AUC PR    = 0.567681
   CLL	      = -0.629819
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.153949
   F1        = 0.266821


Total learning time: 0.883 seconds
Total inference time: 0.841 seconds
AUC ROC: 0.576975


Results scoring model
   AUC ROC   = 0.6
   AUC PR    = 0.685394
   CLL	      = -0.632522
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.2
   F1        = 0.333333


Total scoring time: 0.632 seconds
Parameter learned model CLL: -0.632522


Structure after Parameter Learning
[['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 1], 'false': [1.491, 5, 4]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 1], 'false': [1.491, 5, 4]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 1], 'false': [1.491, 5, 4]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 1], 'false': [1.491, 5, 4]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 1], 'false': [1.491, 5, 4]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 1], 'false': [1.491, 5, 4]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 1], 'false': [1.491, 5, 4]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 1], 'false': [1.491, 5, 4]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 1], 'false': [1.491, 5, 4]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 1], 'false': [1.491, 5, 4]}]]
[{'': [0.0, 0.2469135802469134]}, {'': [0.0, 0.24691358024691354]}, {'': [0.0, 0.24691358024691365]}, {'': [0.0, 0.2469135802469136]}, {'': [0.0, 0.2469135802469136]}, {'': [0.0, 0.2469135802469136]}, {'': [0.0, 0.2469135802469136]}, {'': [0.0, 0.2469135802469136]}, {'': [0.0, 0.2469135802469136]}, {'': [0.0, 0.2469135802469136]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
1;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
2;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
3;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
4;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
5;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
6;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
7;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
8;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
9;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.8581489350995122;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else return 0.30259337954395676;  // std dev = 0.497, 9.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=4 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.7194734122109545;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else return 0.2616318086752123;  // std dev = 0.497, 9.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=4 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.5553664367462845;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else return 0.2192721473492705;  // std dev = 0.497, 9.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=4 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.41751358415830997;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else return 0.17873524574687283;  // std dev = 0.497, 9.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=4 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.32071184716014967;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else return 0.1424392447767628;  // std dev = 0.497, 9.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=4 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.25517224256948945;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else return 0.11159559999632969;  // std dev = 0.497, 9.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=4 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.20975771563253554;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else return 0.08637026299843623;  // std dev = 0.497, 9.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=4 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.17709649774527736;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else return 0.06628370899125427;  // std dev = 0.497, 9.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=4 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.15274385809367097;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else return 0.05057564362187433;  // std dev = 0.497, 9.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=4 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.13400703000801117;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else return 0.038438849075129386;  // std dev = 0.497, 9.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=4 */


Results
   AUC ROC   = 0.576975
   AUC PR    = 0.567681
   CLL	      = -0.629819
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.153949
   F1        = 0.266821


Total learning time: 1.153 seconds
Total inference time: 0.804 seconds
AUC ROC: 0.576975


Results scoring model
   AUC ROC   = 0.6
   AUC PR    = 0.685394
   CLL	      = -0.632522
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.2
   F1        = 0.333333


Total scoring time: 0.647 seconds
Refined model CLL: -0.632522


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.576975
   AUC PR    = 0.567681
   CLL	      = -0.629819
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.153949
   F1        = 0.266821


Total learning time: 3.3150000000000004 seconds
Total inference time: 0.841 seconds
AUC ROC: 0.576975
Total revision time: 3.3150000000000004
Best scored revision CLL: -0.632522


Dataset: 3_imdb_cora, Fold: 4, Type: Transfer (trRDN-B), Time: 00:20:08
{'AUC ROC': 0.576975, 'AUC PR': 0.567681, 'CLL': -0.629819, 'Precision': [1.0, 0.5], 'Recall': 0.153949, 'F1': 0.266821, 'Learning time': 3.3150000000000004, 'Inference time': 0.841, 'parameter_5': {'AUC ROC': 0.576975, 'AUC PR': 0.567681, 'CLL': -0.629819, 'Precision': [1.0, 0.5], 'Recall': 0.153949, 'F1': 0.266821, 'Learning time': 0.883, 'Inference time': 0.841}}


Amount of data: 10
******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.3875606998053947;  // std dev = 2.058, 17.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=9 */
%   else return 0.19148226843284552;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.3335621649521725;  // std dev = 2.058, 17.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=9 */
%   else return 0.16653882456488175;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.2756931975053717;  // std dev = 2.058, 17.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=9 */
%   else return 0.1420942428155648;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.22006690870309975;  // std dev = 2.058, 17.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=9 */
%   else return 0.11914890490746428;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.1711960835655672;  // std dev = 2.058, 17.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=9 */
%   else return 0.09841340278401862;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.13096016067527044;  // std dev = 2.058, 17.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=9 */
%   else return 0.08026654944252243;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.09919352208121096;  // std dev = 2.058, 17.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=9 */
%   else return 0.06479591611329232;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.07472887841652442;  // std dev = 2.058, 17.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=9 */
%   else return 0.05187916934404054;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.05614584081272424;  // std dev = 2.058, 17.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=9 */
%   else return 0.04126932998424626;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.04213215515674406;  // std dev = 2.058, 17.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=9 */
%   else return 0.032663748734830134;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */


Results
   AUC ROC   = 0.528075
   AUC PR    = 0.425919
   CLL	      = -0.682112
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 0.942 seconds
Total inference time: 0.817 seconds
AUC ROC: 0.528075


Results scoring model
   AUC ROC   = 0.55
   AUC PR    = 0.527941
   CLL	      = -0.685109
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total scoring time: 0.658 seconds
Parameter learned model CLL: -0.685109


Structure after Parameter Learning
[['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [2.058, 8, 9], 'false': [0.816, 2, 1]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [2.058, 8, 9], 'false': [0.816, 2, 1]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [2.058, 8, 9], 'false': [0.816, 2, 1]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [2.058, 8, 9], 'false': [0.816, 2, 1]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [2.058, 8, 9], 'false': [0.816, 2, 1]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [2.058, 8, 9], 'false': [0.816, 2, 1]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [2.058, 8, 9], 'false': [0.816, 2, 1]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [2.058, 8, 9], 'false': [0.816, 2, 1]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [2.058, 8, 9], 'false': [0.816, 2, 1]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [2.058, 8, 9], 'false': [0.816, 2, 1]}]]
[{'': [0.24913494809688577, 0.22222222222222224]}, {'': [0.24913494809688555, 0.2222222222222222]}, {'': [0.24913494809688586, 0.22222222222222218]}, {'': [0.24913494809688566, 0.22222222222222224]}, {'': [0.24913494809688586, 0.2222222222222222]}, {'': [0.24913494809688586, 0.22222222222222224]}, {'': [0.2491349480968859, 0.22222222222222224]}, {'': [0.24913494809688577, 0.2222222222222222]}, {'': [0.24913494809688572, 0.22222222222222218]}, {'': [0.24913494809688583, 0.2222222222222222]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Pruning resulted in null theory

Candidate for revision
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.3875606998053947;  // std dev = 0.499, 17.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=9 */
%   else return 0.19148226843284552;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.3335621649521725;  // std dev = 0.499, 17.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=9 */
%   else return 0.16653882456488175;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.2756931975053717;  // std dev = 0.499, 17.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=9 */
%   else return 0.1420942428155648;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.22006690870309975;  // std dev = 0.499, 17.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=9 */
%   else return 0.11914890490746428;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.1711960835655672;  // std dev = 0.499, 17.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=9 */
%   else return 0.09841340278401862;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.13096016067527044;  // std dev = 0.499, 17.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=9 */
%   else return 0.08026654944252243;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.09919352208121096;  // std dev = 0.499, 17.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=9 */
%   else return 0.06479591611329232;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.07472887841652442;  // std dev = 0.499, 17.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=9 */
%   else return 0.05187916934404054;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.05614584081272424;  // std dev = 0.499, 17.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=9 */
%   else return 0.04126932998424626;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.04213215515674406;  // std dev = 0.499, 17.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=9 */
%   else return 0.032663748734830134;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */


Results
   AUC ROC   = 0.528075
   AUC PR    = 0.425919
   CLL	      = -0.682112
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 1.241 seconds
Total inference time: 0.808 seconds
AUC ROC: 0.528075


Results scoring model
   AUC ROC   = 0.55
   AUC PR    = 0.527941
   CLL	      = -0.685109
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total scoring time: 0.645 seconds
Refined model CLL: -0.685109


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.528075
   AUC PR    = 0.425919
   CLL	      = -0.682112
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 3.486 seconds
Total inference time: 0.817 seconds
AUC ROC: 0.528075
Total revision time: 3.486
Best scored revision CLL: -0.685109


Dataset: 3_imdb_cora, Fold: 4, Type: Transfer (trRDN-B), Time: 00:20:13
{'AUC ROC': 0.528075, 'AUC PR': 0.425919, 'CLL': -0.682112, 'Precision': [nan, 0.5], 'Recall': 0.0, 'F1': nan, 'Learning time': 3.486, 'Inference time': 0.817, 'parameter_10': {'AUC ROC': 0.528075, 'AUC PR': 0.425919, 'CLL': -0.682112, 'Precision': [nan, 0.5], 'Recall': 0.0, 'F1': nan, 'Learning time': 0.942, 'Inference time': 0.817}}


Amount of data: 15
******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.35814893509951234;  // std dev = 2.550, 26.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=13 */
%   else return 0.3581489350995122;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.3087411357856347;  // std dev = 2.550, 26.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=13 */
%   else return 0.308741135785635;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.25641236875858664;  // std dev = 2.550, 26.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=13 */
%   else return 0.2564123687585864;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.2061374073445397;  // std dev = 2.550, 26.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=13 */
%   else return 0.20613740734453975;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.16162857548414683;  // std dev = 2.550, 26.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=13 */
%   else return 0.16162857548414666;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.12455597792081982;  // std dev = 2.550, 26.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=13 */
%   else return 0.12455597792081964;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.0949280093673066;  // std dev = 2.550, 26.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=13 */
%   else return 0.09492800936730683;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.0718608885005585;  // std dev = 2.550, 26.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=13 */
%   else return 0.0718608885005586;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.054183073759549435;  // std dev = 2.550, 26.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=13 */
%   else return 0.05418307375954945;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.04076025323305631;  // std dev = 2.550, 26.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=13 */
%   else return 0.04076025323305622;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */


Results
   AUC ROC   = 0.528075
   AUC PR    = 0.425919
   CLL	      = -0.684181
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 0.891 seconds
Total inference time: 0.78 seconds
AUC ROC: 0.528075


Results scoring model
   AUC ROC   = 0.5
   AUC PR    = 0.5
   CLL	      = -0.695026
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total scoring time: 0.655 seconds
Parameter learned model CLL: -0.695026


Structure after Parameter Learning
[['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [2.55, 13, 13], 'false': [1.0, 2, 2]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [2.55, 13, 13], 'false': [1.0, 2, 2]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [2.55, 13, 13], 'false': [1.0, 2, 2]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [2.55, 13, 13], 'false': [1.0, 2, 2]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [2.55, 13, 13], 'false': [1.0, 2, 2]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [2.55, 13, 13], 'false': [1.0, 2, 2]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [2.55, 13, 13], 'false': [1.0, 2, 2]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [2.55, 13, 13], 'false': [1.0, 2, 2]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [2.55, 13, 13], 'false': [1.0, 2, 2]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [2.55, 13, 13], 'false': [1.0, 2, 2]}]]
[{'': [0.24999999999999956, 0.25]}, {'': [0.25000000000000017, 0.25]}, {'': [0.24999999999999994, 0.25]}, {'': [0.25000000000000017, 0.25]}, {'': [0.24999999999999972, 0.24999999999999997]}, {'': [0.24999999999999986, 0.24999999999999997]}, {'': [0.2500000000000003, 0.25]}, {'': [0.25000000000000006, 0.24999999999999997]}, {'': [0.24999999999999983, 0.24999999999999997]}, {'': [0.25000000000000006, 0.25]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Pruning resulted in null theory

Candidate for revision
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.35814893509951234;  // std dev = 0.500, 26.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=13 */
%   else return 0.3581489350995122;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.3087411357856347;  // std dev = 0.500, 26.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=13 */
%   else return 0.308741135785635;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.25641236875858664;  // std dev = 0.500, 26.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=13 */
%   else return 0.2564123687585864;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.2061374073445397;  // std dev = 0.500, 26.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=13 */
%   else return 0.20613740734453975;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.16162857548414683;  // std dev = 0.500, 26.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=13 */
%   else return 0.16162857548414666;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.12455597792081982;  // std dev = 0.500, 26.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=13 */
%   else return 0.12455597792081964;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.0949280093673066;  // std dev = 0.500, 26.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=13 */
%   else return 0.09492800936730683;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.0718608885005585;  // std dev = 0.500, 26.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=13 */
%   else return 0.0718608885005586;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.054183073759549435;  // std dev = 0.500, 26.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=13 */
%   else return 0.05418307375954945;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.04076025323305631;  // std dev = 0.500, 26.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=13 */
%   else return 0.04076025323305622;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */


Results
   AUC ROC   = 0.528075
   AUC PR    = 0.425919
   CLL	      = -0.684181
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 1.262 seconds
Total inference time: 0.803 seconds
AUC ROC: 0.528075


Results scoring model
   AUC ROC   = 0.5
   AUC PR    = 0.5
   CLL	      = -0.695026
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total scoring time: 0.641 seconds
Refined model CLL: -0.695026


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.528075
   AUC PR    = 0.425919
   CLL	      = -0.684181
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 3.449 seconds
Total inference time: 0.78 seconds
AUC ROC: 0.528075
Total revision time: 3.449
Best scored revision CLL: -0.695026


Dataset: 3_imdb_cora, Fold: 4, Type: Transfer (trRDN-B), Time: 00:20:19
{'AUC ROC': 0.528075, 'AUC PR': 0.425919, 'CLL': -0.684181, 'Precision': [nan, 0.5], 'Recall': 0.0, 'F1': nan, 'Learning time': 3.449, 'Inference time': 0.78, 'parameter_15': {'AUC ROC': 0.528075, 'AUC PR': 0.425919, 'CLL': -0.684181, 'Precision': [nan, 0.5], 'Recall': 0.0, 'F1': nan, 'Learning time': 0.891, 'Inference time': 0.78}}


Amount of data: 20
******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.8581489350995121;  // std dev = 2.11e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return 0.31760839455897183;  // std dev = 3.031, 37.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=17 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.7194734122109545;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return 0.2743930062984994;  // std dev = 3.031, 37.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=17 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.5553664367462845;  // std dev = 1.05e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return 0.22940409212560184;  // std dev = 3.031, 37.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=17 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.41751358415830997;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return 0.18628870627050972;  // std dev = 3.031, 37.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=17 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.32071184716014967;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return 0.14778567561990727;  // std dev = 3.031, 37.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=17 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.25517224256948945;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return 0.11523398454885339;  // std dev = 3.031, 37.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=17 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.20975771563253554;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return 0.08877605966596111;  // std dev = 3.031, 37.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=17 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.17709649774527736;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return 0.06784002556264199;  // std dev = 3.031, 37.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=17 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.15274385809367097;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return 0.05156345950024885;  // std dev = 3.031, 37.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=17 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.13400703000801117;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return 0.03905337379799511;  // std dev = 3.031, 37.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=17 */


Results
   AUC ROC   = 0.576975
   AUC PR    = 0.567681
   CLL	      = -0.632677
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.153949
   F1        = 0.266821


Total learning time: 0.927 seconds
Total inference time: 0.819 seconds
AUC ROC: 0.576975


Results scoring model
   AUC ROC   = 0.575
   AUC PR    = 0.638591
   CLL	      = -0.649272
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.15
   F1        = 0.26087


Total scoring time: 0.655 seconds
Parameter learned model CLL: -0.649272


Structure after Parameter Learning
[['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [2.11e-08, 0, 3], 'false': [3.031, 20, 17]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 3], 'false': [3.031, 20, 17]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [1.05e-08, 0, 3], 'false': [3.031, 20, 17]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 3], 'false': [3.031, 20, 17]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 3], 'false': [3.031, 20, 17]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 3], 'false': [3.031, 20, 17]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 3], 'false': [3.031, 20, 17]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 3], 'false': [3.031, 20, 17]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 3], 'false': [3.031, 20, 17]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 3], 'false': [3.031, 20, 17]}]]
[{'': [1.4802973661668753e-16, 0.24835646457268032]}, {'': [0.0, 0.24835646457268137]}, {'': [3.700743415417188e-17, 0.2483564645726806]}, {'': [-3.700743415417188e-17, 0.24835646457268118]}, {'': [0.0, 0.24835646457268037]}, {'': [0.0, 0.24835646457268085]}, {'': [0.0, 0.24835646457268098]}, {'': [0.0, 0.24835646457268104]}, {'': [-4.625929269271485e-18, 0.2483564645726807]}, {'': [-2.3129646346357427e-18, 0.24835646457268074]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
1;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
2;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
3;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
4;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
5;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
6;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
7;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
8;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
9;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.8581489350995121;  // std dev = 2.11e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( haswordvenue(B, D), haswordtitle(E, D) )
%   | then if ( title(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.7331489350995123;  // std dev = 1.323, 16.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=14 */
%   | | | else return -0.1418510649004878;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | | else return 0.5248156017661788;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else return 0.10814893509951219;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.7194734122109545;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( haswordvenue(B, D), haswordtitle(E, D) )
%   | then if ( title(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.6189976143448207;  // std dev = 1.323, 16.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=14 */
%   | | | else return -0.12544463852839138;  // std dev = 7.45e-09, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | | else return 0.448295606241962;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else return 0.09446743783575562;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.5553664367462845;  // std dev = 1.05e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( haswordvenue(B, D), haswordtitle(E, D) )
%   | then if ( title(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.4851287515461651;  // std dev = 1.323, 16.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=14 */
%   | | | else return -0.11231637819360636;  // std dev = 1.18e-08, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | | else return 0.36236334632262296;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else return 0.08165239320886175;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.41751358415830997;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.16266627844746498;  // std dev = 0.340, 31.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=15 */
%   | else return 0.08463507750890718;  // std dev = 1.119, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.32071184716014967;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.13334490179262565;  // std dev = 0.332, 31.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=15 */
%   | else return 0.0693302550430588;  // std dev = 1.119, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.25517224256948945;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.10882021793793453;  // std dev = 0.326, 31.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=15 */
%   | else return 0.05637169286813451;  // std dev = 1.119, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.20975771563253554;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.08856326839085181;  // std dev = 0.321, 31.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=15 */
%   | else return 0.04556332778372966;  // std dev = 1.118, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.17709649774527736;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.07195865760045299;  // std dev = 0.318, 31.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=15 */
%   | else return 0.03665396903508259;  // std dev = 1.118, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.15274385809367097;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( haswordvenue(B, D), haswordtitle(E, D) )
%   | then if ( title(F, E), venue(F, A) )
%   | | then if ( title(G, E), venue(G, B) )
%   | | | then return 0.27681945935531693;  // std dev = 0.961, 13.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   | | | else return -0.1331027597899835;  // std dev = 0.867, 17.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=2 */
%   | | else return 0.18686287946531474;  // std dev = 0.790, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else return 0.022622143585517514;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.13400703000801117;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.04252350544276748;  // std dev = 0.292, 31.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=15 */
%   | else return 0.011174682560700885;  // std dev = 1.118, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */


Results
   AUC ROC   = 0.924601
   AUC PR    = 0.873664
   CLL	      = -0.360368
   Precision = 0.792135 at threshold = 0.5
   Recall    = 0.943775
   F1        = 0.861332


Total learning time: 34.965 seconds
Total inference time: 2.72 seconds
AUC ROC: 0.924601


Results scoring model
   AUC ROC   = 0.955
   AUC PR    = 0.943087
   CLL	      = -0.352389
   Precision = 0.863636 at threshold = 0.5
   Recall    = 0.95
   F1        = 0.904762


Total scoring time: 1.09 seconds
Refined model CLL: -0.352389


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.924601
   AUC PR    = 0.873664
   CLL	      = -0.360368
   Precision = 0.792135 at threshold = 0.5
   Recall    = 0.943775
   F1        = 0.861332


Total learning time: 37.63700000000001 seconds
Total inference time: 2.72 seconds
AUC ROC: 0.924601
Total revision time: 37.63700000000001
Best scored revision CLL: -0.352389


Dataset: 3_imdb_cora, Fold: 4, Type: Transfer (trRDN-B), Time: 00:21:01
{'AUC ROC': 0.924601, 'AUC PR': 0.873664, 'CLL': -0.360368, 'Precision': [0.792135, 0.5], 'Recall': 0.943775, 'F1': 0.861332, 'Learning time': 37.63700000000001, 'Inference time': 2.72, 'parameter_20': {'AUC ROC': 0.576975, 'AUC PR': 0.567681, 'CLL': -0.632677, 'Precision': [1.0, 0.5], 'Recall': 0.153949, 'F1': 0.266821, 'Learning time': 0.927, 'Inference time': 0.819}}


Amount of data: 25
******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.8581489350995122;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else return 0.31467067422994655;  // std dev = 3.378, 46.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=21 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.7194734122109545;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else return 0.2718979338779211;  // std dev = 3.378, 46.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=21 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.5553664367462845;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else return 0.22742727023532366;  // std dev = 3.378, 46.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=21 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.41751358415830997;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else return 0.18481967858369794;  // std dev = 3.378, 46.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=21 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.32071184716014967;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else return 0.14674952708917505;  // std dev = 3.378, 46.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=21 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.25517224256948945;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else return 0.11453090292473048;  // std dev = 3.378, 46.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=21 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.20975771563253554;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else return 0.08831182757523444;  // std dev = 3.378, 46.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=21 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.17709649774527736;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else return 0.06753946269031201;  // std dev = 3.378, 46.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=21 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.15274385809367097;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else return 0.05137193645873037;  // std dev = 3.378, 46.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=21 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.13400703000801117;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else return 0.03893324925844389;  // std dev = 3.378, 46.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=21 */


Results
   AUC ROC   = 0.576975
   AUC PR    = 0.567681
   CLL	      = -0.632055
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.153949
   F1        = 0.266821


Total learning time: 0.94 seconds
Total inference time: 0.85 seconds
AUC ROC: 0.576975


Results scoring model
   AUC ROC   = 0.58
   AUC PR    = 0.644703
   CLL	      = -0.645987
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.16
   F1        = 0.275862


Total scoring time: 0.66 seconds
Parameter learned model CLL: -0.645987


Structure after Parameter Learning
[['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 4], 'false': [3.378, 25, 21]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 4], 'false': [3.378, 25, 21]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 4], 'false': [3.378, 25, 21]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 4], 'false': [3.378, 25, 21]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 4], 'false': [3.378, 25, 21]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 4], 'false': [3.378, 25, 21]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 4], 'false': [3.378, 25, 21]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 4], 'false': [3.378, 25, 21]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 4], 'false': [3.378, 25, 21]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 4], 'false': [3.378, 25, 21]}]]
[{'': [0.0, 0.2481096408317579]}, {'': [0.0, 0.2481096408317583]}, {'': [0.0, 0.24810964083175807]}, {'': [0.0, 0.24810964083175777]}, {'': [0.0, 0.24810964083175846]}, {'': [0.0, 0.24810964083175827]}, {'': [0.0, 0.24810964083175777]}, {'': [0.0, 0.2481096408317585]}, {'': [0.0, 0.248109640831758]}, {'': [0.0, 0.24810964083175827]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
1;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
2;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
3;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
4;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
5;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
6;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
7;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
8;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
9;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.8581489350995122;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.34532842227899946;  // std dev = 0.500, 39.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=19 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then return 0.19148226843284552;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | else return 0.10814893509951219;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.7194734122109545;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.2978958405278236;  // std dev = 0.500, 39.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=19 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then return 0.16653882456488175;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | else return 0.09446743783575562;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.5553664367462845;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.24792584310385932;  // std dev = 0.500, 39.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=19 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then return 0.1420942428155648;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | else return 0.08165239320886175;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.41751358415830997;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.19994424504706734;  // std dev = 0.500, 39.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=19 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then return 0.11914890490746428;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | else return 0.06990902274840138;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.32071184716014967;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.1573387903540145;  // std dev = 0.500, 39.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=19 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then return 0.09841340278401862;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | else return 0.059354635365447495;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.25517224256948945;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.12167852492130384;  // std dev = 0.500, 39.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=19 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then return 0.08026654944252243;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | else return 0.05002771289938789;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.20975771563253554;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.09302649043065797;  // std dev = 0.500, 39.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=19 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then return 0.06479591611329232;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | else return 0.04190386852605735;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.17709649774527736;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.07060751351378104;  // std dev = 0.500, 39.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=19 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then return 0.05187916934404054;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | else return 0.03491396367325339;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.15274385809367097;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.05335260550290741;  // std dev = 0.500, 39.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=19 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then return 0.04126932998424626;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | else return 0.028961035597951046;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.13400703000801117;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.04020477898541032;  // std dev = 0.500, 39.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=19 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then return 0.032663748734830134;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | else return 0.023934242922604827;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */


Results
   AUC ROC   = 0.597925
   AUC PR    = 0.578163
   CLL	      = -0.631924
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.153949
   F1        = 0.266821


Total learning time: 2.645 seconds
Total inference time: 0.944 seconds
AUC ROC: 0.597925


Results scoring model
   AUC ROC   = 0.6248
   AUC PR    = 0.667606
   CLL	      = -0.635342
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.16
   F1        = 0.275862


Total scoring time: 0.692 seconds
Refined model CLL: -0.635342


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.597925
   AUC PR    = 0.578163
   CLL	      = -0.631924
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.153949
   F1        = 0.266821


Total learning time: 4.937 seconds
Total inference time: 0.944 seconds
AUC ROC: 0.597925
Total revision time: 4.937
Best scored revision CLL: -0.635342


Dataset: 3_imdb_cora, Fold: 4, Type: Transfer (trRDN-B), Time: 00:21:08
{'AUC ROC': 0.597925, 'AUC PR': 0.578163, 'CLL': -0.631924, 'Precision': [1.0, 0.5], 'Recall': 0.153949, 'F1': 0.266821, 'Learning time': 4.937, 'Inference time': 0.944, 'parameter_25': {'AUC ROC': 0.576975, 'AUC PR': 0.567681, 'CLL': -0.632055, 'Precision': [1.0, 0.5], 'Recall': 0.153949, 'F1': 0.266821, 'Learning time': 0.94, 'Inference time': 0.85}}


Starting fold 5

Target train facts examples: 33914
Target train pos examples: 2467
Target train neg examples: 4522

Target test facts examples: 8644
Target test pos	 examples: 550
Target test neg examples: 500

Amount of data: 5
******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.3581489350995123;  // std dev = 1.581, 10.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.30874113578563506;  // std dev = 1.581, 10.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.2564123687585864;  // std dev = 1.581, 10.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.20613740734453975;  // std dev = 1.581, 10.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.16162857548414675;  // std dev = 1.581, 10.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.1245559779208197;  // std dev = 1.581, 10.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.09492800936730683;  // std dev = 1.581, 10.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.07186088850055855;  // std dev = 1.581, 10.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.05418307375954949;  // std dev = 1.581, 10.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.04076025323305626;  // std dev = 1.581, 10.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */


Results
   AUC ROC   = 0.425455
   AUC PR    = 0.48656
   CLL	      = -0.791397
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 0.911 seconds
Total inference time: 0.721 seconds
AUC ROC: 0.425455


Results scoring model
   AUC ROC   = 0.5
   AUC PR    = 0.5
   CLL	      = -0.695026
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total scoring time: 0.627 seconds
Parameter learned model CLL: -0.695026


Structure after Parameter Learning
[['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 0], 'false': [1.581, 5, 5]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 0], 'false': [1.581, 5, 5]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 0], 'false': [1.581, 5, 5]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 0], 'false': [1.581, 5, 5]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 0], 'false': [1.581, 5, 5]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 0], 'false': [1.581, 5, 5]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 0], 'false': [1.581, 5, 5]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 0], 'false': [1.581, 5, 5]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 0], 'false': [1.581, 5, 5]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 0], 'false': [1.581, 5, 5]}]]
[{'': [nan, 0.24999999999999983]}, {'': [nan, 0.24999999999999994]}, {'': [nan, 0.25000000000000006]}, {'': [nan, 0.24999999999999992]}, {'': [nan, 0.24999999999999994]}, {'': [nan, 0.24999999999999986]}, {'': [nan, 0.25]}, {'': [nan, 0.25000000000000006]}, {'': [nan, 0.25]}, {'': [nan, 0.24999999999999994]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Pruning resulted in null theory

Candidate for revision
0;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
1;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
2;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
3;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
4;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
5;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
6;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
7;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
8;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
9;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.3581489350995123;  // std dev = 0.500, 10.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.30874113578563506;  // std dev = 0.500, 10.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.2564123687585864;  // std dev = 0.500, 10.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.20613740734453975;  // std dev = 0.500, 10.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.16162857548414675;  // std dev = 0.500, 10.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.1245559779208197;  // std dev = 0.500, 10.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.09492800936730683;  // std dev = 0.500, 10.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.07186088850055855;  // std dev = 0.500, 10.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.05418307375954949;  // std dev = 0.500, 10.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return 0.04076025323305626;  // std dev = 0.500, 10.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */


Results
   AUC ROC   = 0.425455
   AUC PR    = 0.48656
   CLL	      = -0.791397
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 1.272 seconds
Total inference time: 0.712 seconds
AUC ROC: 0.425455


Results scoring model
   AUC ROC   = 0.5
   AUC PR    = 0.5
   CLL	      = -0.695026
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total scoring time: 0.675 seconds
Refined model CLL: -0.695026


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.425455
   AUC PR    = 0.48656
   CLL	      = -0.791397
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 3.4850000000000003 seconds
Total inference time: 0.721 seconds
AUC ROC: 0.425455
Total revision time: 3.4850000000000003
Best scored revision CLL: -0.695026


Dataset: 3_imdb_cora, Fold: 5, Type: Transfer (trRDN-B), Time: 00:21:14
{'AUC ROC': 0.425455, 'AUC PR': 0.48656, 'CLL': -0.791397, 'Precision': [nan, 0.5], 'Recall': 0.0, 'F1': nan, 'Learning time': 3.4850000000000003, 'Inference time': 0.721, 'parameter_5': {'AUC ROC': 0.425455, 'AUC PR': 0.48656, 'CLL': -0.791397, 'Precision': [nan, 0.5], 'Recall': 0.0, 'F1': nan, 'Learning time': 0.911, 'Inference time': 0.721}}


Amount of data: 10
******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.3875606998053947;  // std dev = 2.058, 17.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=9 */
%   else return 0.19148226843284552;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.3335621649521725;  // std dev = 2.058, 17.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=9 */
%   else return 0.16653882456488175;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.2756931975053717;  // std dev = 2.058, 17.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=9 */
%   else return 0.1420942428155648;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.22006690870309975;  // std dev = 2.058, 17.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=9 */
%   else return 0.11914890490746428;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.1711960835655672;  // std dev = 2.058, 17.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=9 */
%   else return 0.09841340278401862;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.13096016067527044;  // std dev = 2.058, 17.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=9 */
%   else return 0.08026654944252243;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.09919352208121096;  // std dev = 2.058, 17.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=9 */
%   else return 0.06479591611329232;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.07472887841652442;  // std dev = 2.058, 17.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=9 */
%   else return 0.05187916934404054;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.05614584081272424;  // std dev = 2.058, 17.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=9 */
%   else return 0.04126932998424626;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.04213215515674406;  // std dev = 2.058, 17.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=9 */
%   else return 0.032663748734830134;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */


Results
   AUC ROC   = 0.614727
   AUC PR    = 0.592038
   CLL	      = -0.667652
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 0.919 seconds
Total inference time: 0.689 seconds
AUC ROC: 0.614727


Results scoring model
   AUC ROC   = 0.55
   AUC PR    = 0.527941
   CLL	      = -0.685109
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total scoring time: 0.654 seconds
Parameter learned model CLL: -0.685109


Structure after Parameter Learning
[['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [2.058, 8, 9], 'false': [0.816, 2, 1]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [2.058, 8, 9], 'false': [0.816, 2, 1]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [2.058, 8, 9], 'false': [0.816, 2, 1]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [2.058, 8, 9], 'false': [0.816, 2, 1]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [2.058, 8, 9], 'false': [0.816, 2, 1]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [2.058, 8, 9], 'false': [0.816, 2, 1]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [2.058, 8, 9], 'false': [0.816, 2, 1]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [2.058, 8, 9], 'false': [0.816, 2, 1]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [2.058, 8, 9], 'false': [0.816, 2, 1]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [2.058, 8, 9], 'false': [0.816, 2, 1]}]]
[{'': [0.24913494809688577, 0.22222222222222224]}, {'': [0.24913494809688555, 0.2222222222222222]}, {'': [0.24913494809688586, 0.22222222222222218]}, {'': [0.24913494809688566, 0.22222222222222224]}, {'': [0.24913494809688586, 0.2222222222222222]}, {'': [0.24913494809688586, 0.22222222222222224]}, {'': [0.2491349480968859, 0.22222222222222224]}, {'': [0.24913494809688577, 0.2222222222222222]}, {'': [0.24913494809688572, 0.22222222222222218]}, {'': [0.24913494809688583, 0.2222222222222222]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Pruning resulted in null theory

Candidate for revision
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.3875606998053947;  // std dev = 0.499, 17.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=9 */
%   else return 0.19148226843284552;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.3335621649521725;  // std dev = 0.499, 17.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=9 */
%   else return 0.16653882456488175;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.2756931975053717;  // std dev = 0.499, 17.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=9 */
%   else return 0.1420942428155648;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.22006690870309975;  // std dev = 0.499, 17.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=9 */
%   else return 0.11914890490746428;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.1711960835655672;  // std dev = 0.499, 17.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=9 */
%   else return 0.09841340278401862;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.13096016067527044;  // std dev = 0.499, 17.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=9 */
%   else return 0.08026654944252243;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.09919352208121096;  // std dev = 0.499, 17.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=9 */
%   else return 0.06479591611329232;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.07472887841652442;  // std dev = 0.499, 17.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=9 */
%   else return 0.05187916934404054;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.05614584081272424;  // std dev = 0.499, 17.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=9 */
%   else return 0.04126932998424626;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.04213215515674406;  // std dev = 0.499, 17.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=9 */
%   else return 0.032663748734830134;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */


Results
   AUC ROC   = 0.614727
   AUC PR    = 0.592038
   CLL	      = -0.667652
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 1.381 seconds
Total inference time: 0.753 seconds
AUC ROC: 0.614727


Results scoring model
   AUC ROC   = 0.55
   AUC PR    = 0.527941
   CLL	      = -0.685109
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total scoring time: 0.726 seconds
Refined model CLL: -0.685109


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.614727
   AUC PR    = 0.592038
   CLL	      = -0.667652
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 3.6799999999999997 seconds
Total inference time: 0.689 seconds
AUC ROC: 0.614727
Total revision time: 3.6799999999999997
Best scored revision CLL: -0.685109


Dataset: 3_imdb_cora, Fold: 5, Type: Transfer (trRDN-B), Time: 00:21:19
{'AUC ROC': 0.614727, 'AUC PR': 0.592038, 'CLL': -0.667652, 'Precision': [nan, 0.5], 'Recall': 0.0, 'F1': nan, 'Learning time': 3.6799999999999997, 'Inference time': 0.689, 'parameter_10': {'AUC ROC': 0.614727, 'AUC PR': 0.592038, 'CLL': -0.667652, 'Precision': [nan, 0.5], 'Recall': 0.0, 'F1': nan, 'Learning time': 0.919, 'Inference time': 0.689}}


Amount of data: 15
******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.35814893509951234;  // std dev = 2.550, 26.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=13 */
%   else return 0.3581489350995122;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.3087411357856347;  // std dev = 2.550, 26.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=13 */
%   else return 0.308741135785635;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.25641236875858664;  // std dev = 2.550, 26.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=13 */
%   else return 0.2564123687585864;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.2061374073445397;  // std dev = 2.550, 26.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=13 */
%   else return 0.20613740734453975;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.16162857548414683;  // std dev = 2.550, 26.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=13 */
%   else return 0.16162857548414666;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.12455597792081982;  // std dev = 2.550, 26.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=13 */
%   else return 0.12455597792081964;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.0949280093673066;  // std dev = 2.550, 26.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=13 */
%   else return 0.09492800936730683;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.0718608885005585;  // std dev = 2.550, 26.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=13 */
%   else return 0.0718608885005586;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.054183073759549435;  // std dev = 2.550, 26.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=13 */
%   else return 0.05418307375954945;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.04076025323305631;  // std dev = 2.550, 26.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=13 */
%   else return 0.04076025323305622;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */


Results
   AUC ROC   = 0.614727
   AUC PR    = 0.592038
   CLL	      = -0.697946
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 0.94 seconds
Total inference time: 0.703 seconds
AUC ROC: 0.614727


Results scoring model
   AUC ROC   = 0.5
   AUC PR    = 0.5
   CLL	      = -0.695026
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total scoring time: 0.669 seconds
Parameter learned model CLL: -0.695026


Structure after Parameter Learning
[['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [2.55, 13, 13], 'false': [1.0, 2, 2]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [2.55, 13, 13], 'false': [1.0, 2, 2]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [2.55, 13, 13], 'false': [1.0, 2, 2]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [2.55, 13, 13], 'false': [1.0, 2, 2]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [2.55, 13, 13], 'false': [1.0, 2, 2]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [2.55, 13, 13], 'false': [1.0, 2, 2]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [2.55, 13, 13], 'false': [1.0, 2, 2]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [2.55, 13, 13], 'false': [1.0, 2, 2]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [2.55, 13, 13], 'false': [1.0, 2, 2]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [2.55, 13, 13], 'false': [1.0, 2, 2]}]]
[{'': [0.24999999999999956, 0.25]}, {'': [0.25000000000000017, 0.25]}, {'': [0.24999999999999994, 0.25]}, {'': [0.25000000000000017, 0.25]}, {'': [0.24999999999999972, 0.24999999999999997]}, {'': [0.24999999999999986, 0.24999999999999997]}, {'': [0.2500000000000003, 0.25]}, {'': [0.25000000000000006, 0.24999999999999997]}, {'': [0.24999999999999983, 0.24999999999999997]}, {'': [0.25000000000000006, 0.25]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Pruning resulted in null theory

Candidate for revision
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.35814893509951234;  // std dev = 0.500, 26.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=13 */
%   else return 0.3581489350995122;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.3087411357856347;  // std dev = 0.500, 26.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=13 */
%   else return 0.308741135785635;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.25641236875858664;  // std dev = 0.500, 26.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=13 */
%   else return 0.2564123687585864;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.2061374073445397;  // std dev = 0.500, 26.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=13 */
%   else return 0.20613740734453975;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.16162857548414683;  // std dev = 0.500, 26.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=13 */
%   else return 0.16162857548414666;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.12455597792081982;  // std dev = 0.500, 26.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=13 */
%   else return 0.12455597792081964;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.0949280093673066;  // std dev = 0.500, 26.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=13 */
%   else return 0.09492800936730683;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.0718608885005585;  // std dev = 0.500, 26.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=13 */
%   else return 0.0718608885005586;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.054183073759549435;  // std dev = 0.500, 26.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=13 */
%   else return 0.05418307375954945;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.04076025323305631;  // std dev = 0.500, 26.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=13 */
%   else return 0.04076025323305622;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */


Results
   AUC ROC   = 0.614727
   AUC PR    = 0.592038
   CLL	      = -0.697946
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 1.456 seconds
Total inference time: 0.715 seconds
AUC ROC: 0.614727


Results scoring model
   AUC ROC   = 0.5
   AUC PR    = 0.5
   CLL	      = -0.695026
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total scoring time: 0.722 seconds
Refined model CLL: -0.695026


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.614727
   AUC PR    = 0.592038
   CLL	      = -0.697946
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 3.787 seconds
Total inference time: 0.703 seconds
AUC ROC: 0.614727
Total revision time: 3.787
Best scored revision CLL: -0.695026


Dataset: 3_imdb_cora, Fold: 5, Type: Transfer (trRDN-B), Time: 00:21:25
{'AUC ROC': 0.614727, 'AUC PR': 0.592038, 'CLL': -0.697946, 'Precision': [nan, 0.5], 'Recall': 0.0, 'F1': nan, 'Learning time': 3.787, 'Inference time': 0.703, 'parameter_15': {'AUC ROC': 0.614727, 'AUC PR': 0.592038, 'CLL': -0.697946, 'Precision': [nan, 0.5], 'Recall': 0.0, 'F1': nan, 'Learning time': 0.94, 'Inference time': 0.703}}


Amount of data: 20
******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.8581489350995121;  // std dev = 2.11e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return 0.31760839455897183;  // std dev = 3.031, 37.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=17 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.7194734122109545;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return 0.2743930062984994;  // std dev = 3.031, 37.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=17 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.5553664367462845;  // std dev = 1.05e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return 0.22940409212560184;  // std dev = 3.031, 37.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=17 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.41751358415830997;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return 0.18628870627050972;  // std dev = 3.031, 37.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=17 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.32071184716014967;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return 0.14778567561990727;  // std dev = 3.031, 37.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=17 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.25517224256948945;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return 0.11523398454885339;  // std dev = 3.031, 37.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=17 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.20975771563253554;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return 0.08877605966596111;  // std dev = 3.031, 37.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=17 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.17709649774527736;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return 0.06784002556264199;  // std dev = 3.031, 37.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=17 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.15274385809367097;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return 0.05156345950024885;  // std dev = 3.031, 37.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=17 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.13400703000801117;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return 0.03905337379799511;  // std dev = 3.031, 37.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=17 */


Results
   AUC ROC   = 0.574545
   AUC PR    = 0.655418
   CLL	      = -0.653768
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.149091
   F1        = 0.259494


Total learning time: 0.921 seconds
Total inference time: 0.701 seconds
AUC ROC: 0.574545


Results scoring model
   AUC ROC   = 0.575
   AUC PR    = 0.638591
   CLL	      = -0.649272
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.15
   F1        = 0.26087


Total scoring time: 0.67 seconds
Parameter learned model CLL: -0.649272


Structure after Parameter Learning
[['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [2.11e-08, 0, 3], 'false': [3.031, 20, 17]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 3], 'false': [3.031, 20, 17]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [1.05e-08, 0, 3], 'false': [3.031, 20, 17]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 3], 'false': [3.031, 20, 17]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 3], 'false': [3.031, 20, 17]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 3], 'false': [3.031, 20, 17]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 3], 'false': [3.031, 20, 17]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 3], 'false': [3.031, 20, 17]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 3], 'false': [3.031, 20, 17]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 3], 'false': [3.031, 20, 17]}]]
[{'': [1.4802973661668753e-16, 0.24835646457268032]}, {'': [0.0, 0.24835646457268137]}, {'': [3.700743415417188e-17, 0.2483564645726806]}, {'': [-3.700743415417188e-17, 0.24835646457268118]}, {'': [0.0, 0.24835646457268037]}, {'': [0.0, 0.24835646457268085]}, {'': [0.0, 0.24835646457268098]}, {'': [0.0, 0.24835646457268104]}, {'': [-4.625929269271485e-18, 0.2483564645726807]}, {'': [-2.3129646346357427e-18, 0.24835646457268074]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
1;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
2;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
3;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
4;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
5;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
6;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
7;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
8;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
9;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.8581489350995121;  // std dev = 2.11e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.3126943896449669;  // std dev = 0.498, 33.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=15 */
%   | else return 0.3581489350995122;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.7194734122109545;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.27021896952830937;  // std dev = 0.498, 33.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=15 */
%   | else return 0.308741135785635;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.5553664367462845;  // std dev = 1.05e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.2260959005406503;  // std dev = 0.498, 33.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=15 */
%   | else return 0.2564123687585864;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.41751358415830997;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.18382902223075068;  // std dev = 0.498, 33.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=15 */
%   | else return 0.20613740734453975;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.32071184716014967;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.1460498086109486;  // std dev = 0.498, 33.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=15 */
%   | else return 0.16162857548414666;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.25517224256948945;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.11405557378101747;  // std dev = 0.498, 33.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=15 */
%   | else return 0.12455597792081964;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.20975771563253554;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.0879978236541454;  // std dev = 0.498, 33.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=15 */
%   | else return 0.09492800936730683;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.17709649774527736;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.06733625981328885;  // std dev = 0.498, 33.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=15 */
%   | else return 0.0718608885005586;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.15274385809367097;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.051242682155655056;  // std dev = 0.498, 33.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=15 */
%   | else return 0.05418307375954945;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.13400703000801117;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.03885246607182051;  // std dev = 0.498, 33.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=15 */
%   | else return 0.04076025323305622;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */


Results
   AUC ROC   = 0.483971
   AUC PR    = 0.587349
   CLL	      = -0.662226
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.149091
   F1        = 0.259494


Total learning time: 2.619 seconds
Total inference time: 0.787 seconds
AUC ROC: 0.483971


Results scoring model
   AUC ROC   = 0.5825
   AUC PR    = 0.646116
   CLL	      = -0.648905
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.15
   F1        = 0.26087


Total scoring time: 0.696 seconds
Refined model CLL: -0.648905


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.483971
   AUC PR    = 0.587349
   CLL	      = -0.662226
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.149091
   F1        = 0.259494


Total learning time: 4.906000000000001 seconds
Total inference time: 0.787 seconds
AUC ROC: 0.483971
Total revision time: 4.906000000000001
Best scored revision CLL: -0.648905


Dataset: 3_imdb_cora, Fold: 5, Type: Transfer (trRDN-B), Time: 00:21:32
{'AUC ROC': 0.483971, 'AUC PR': 0.587349, 'CLL': -0.662226, 'Precision': [1.0, 0.5], 'Recall': 0.149091, 'F1': 0.259494, 'Learning time': 4.906000000000001, 'Inference time': 0.787, 'parameter_20': {'AUC ROC': 0.574545, 'AUC PR': 0.655418, 'CLL': -0.653768, 'Precision': [1.0, 0.5], 'Recall': 0.149091, 'F1': 0.259494, 'Learning time': 0.921, 'Inference time': 0.701}}


Amount of data: 25
******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.8581489350995121;  // std dev = 2.11e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return 0.3262340414824902;  // std dev = 3.421, 47.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=22 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.7194734122109545;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return 0.28171422482890246;  // std dev = 3.421, 47.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=22 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.5553664367462845;  // std dev = 1.05e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return 0.23519292070564615;  // std dev = 3.421, 47.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=22 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.41751358415830997;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return 0.19057755295478856;  // std dev = 3.421, 47.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=22 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.32071184716014967;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return 0.15080101353659994;  // std dev = 3.421, 47.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=22 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.25517224256948945;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return 0.11727501093763941;  // std dev = 3.421, 47.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=22 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.20975771563253554;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return 0.09012256866998798;  // std dev = 3.421, 47.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=22 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.17709649774527736;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return 0.06871315573496113;  // std dev = 3.421, 47.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=22 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.15274385809367097;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return 0.05212246791353032;  // std dev = 3.421, 47.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=22 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.13400703000801117;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return 0.039407136735360955;  // std dev = 3.421, 47.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=22 */


Results
   AUC ROC   = 0.574545
   AUC PR    = 0.655418
   CLL	      = -0.652212
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.149091
   F1        = 0.259494


Total learning time: 0.968 seconds
Total inference time: 0.705 seconds
AUC ROC: 0.574545


Results scoring model
   AUC ROC   = 0.56
   AUC PR    = 0.617178
   CLL	      = -0.658938
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.12
   F1        = 0.214286


Total scoring time: 0.681 seconds
Parameter learned model CLL: -0.658938


Structure after Parameter Learning
[['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [2.11e-08, 0, 3], 'false': [3.421, 25, 22]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 3], 'false': [3.421, 25, 22]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [1.05e-08, 0, 3], 'false': [3.421, 25, 22]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 3], 'false': [3.421, 25, 22]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 3], 'false': [3.421, 25, 22]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 3], 'false': [3.421, 25, 22]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 3], 'false': [3.421, 25, 22]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 3], 'false': [3.421, 25, 22]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 3], 'false': [3.421, 25, 22]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 3], 'false': [3.421, 25, 22]}]]
[{'': [1.4802973661668753e-16, 0.24898143956541524]}, {'': [0.0, 0.24898143956541438]}, {'': [3.700743415417188e-17, 0.24898143956541438]}, {'': [-3.700743415417188e-17, 0.24898143956541452]}, {'': [0.0, 0.24898143956541383]}, {'': [0.0, 0.24898143956541466]}, {'': [0.0, 0.24898143956541408]}, {'': [0.0, 0.24898143956541424]}, {'': [-4.625929269271485e-18, 0.2489814395654141]}, {'': [-2.3129646346357427e-18, 0.24898143956541377]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
1;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
2;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
3;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
4;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
5;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
6;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
7;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
8;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
9;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.8581489350995121;  // std dev = 2.11e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.3343394112899882;  // std dev = 0.499, 42.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=20 */
%   | else return 0.2581489350995122;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.7194734122109545;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.28858739689073304;  // std dev = 0.499, 42.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=20 */
%   | else return 0.22373365448410584;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.5553664367462845;  // std dev = 1.05e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.24061162403417152;  // std dev = 0.499, 42.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=20 */
%   | else return 0.1888683221574974;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.41751358415830997;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.19457483298384468;  // std dev = 0.499, 42.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=20 */
%   | else return 0.15570029437174368;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.32071184716014967;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.15359877152831758;  // std dev = 0.499, 42.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=20 */
%   | else return 0.12582628229372092;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.25517224256948945;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.1191627048171604;  // std dev = 0.499, 42.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=20 */
%   | else return 0.10008916917880559;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.20975771563253554;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.09136717210389951;  // std dev = 0.499, 42.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=20 */
%   | else return 0.07866279780602592;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.17709649774527736;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.06952274321783661;  // std dev = 0.499, 42.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=20 */
%   | else return 0.06127260860742232;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.15274385809367097;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.05264494626245404;  // std dev = 0.499, 42.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=20 */
%   | else return 0.04741549148811439;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.13400703000801117;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.03974248258629834;  // std dev = 0.499, 42.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=20 */
%   | else return 0.036517889972878734;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */


Results
   AUC ROC   = 0.66512
   AUC PR    = 0.704679
   CLL	      = -0.640595
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.149091
   F1        = 0.259494


Total learning time: 2.935 seconds
Total inference time: 0.79 seconds
AUC ROC: 0.66512


Results scoring model
   AUC ROC   = 0.5728
   AUC PR    = 0.623609
   CLL	      = -0.657893
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.12
   F1        = 0.214286


Total scoring time: 0.683 seconds
Refined model CLL: -0.657893


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.66512
   AUC PR    = 0.704679
   CLL	      = -0.640595
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.149091
   F1        = 0.259494


Total learning time: 5.2669999999999995 seconds
Total inference time: 0.79 seconds
AUC ROC: 0.66512
Total revision time: 5.2669999999999995
Best scored revision CLL: -0.657893


Dataset: 3_imdb_cora, Fold: 5, Type: Transfer (trRDN-B), Time: 00:21:40
{'AUC ROC': 0.66512, 'AUC PR': 0.704679, 'CLL': -0.640595, 'Precision': [1.0, 0.5], 'Recall': 0.149091, 'F1': 0.259494, 'Learning time': 5.2669999999999995, 'Inference time': 0.79, 'parameter_25': {'AUC ROC': 0.574545, 'AUC PR': 0.655418, 'CLL': -0.652212, 'Precision': [1.0, 0.5], 'Recall': 0.149091, 'F1': 0.259494, 'Learning time': 0.968, 'Inference time': 0.705}}


