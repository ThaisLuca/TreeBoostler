Starting experiment #1 for 1_imdb_uwcse

Start learning from source dataset

Source train facts examples: 1078
Source train pos examples: 382
Source train neg examples: 14236

WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.8581489350995083;  // std dev = 1.43e-06, 382.000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.14185106490048766;  // std dev = 5.77e-08, 55.000 (wgt'ed) examples reached here.  /* #neg=55 */
%   else return -0.1418510649004893;  // std dev = 0.000, 732.000 (wgt'ed) examples reached here.  /* #neg=732 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.7194734122109581;  // std dev = 0.000, 382.000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.12544463852839152;  // std dev = 0.000, 43.000 (wgt'ed) examples reached here.  /* #neg=43 */
%   else return -0.12544463852839238;  // std dev = 0.000, 701.000 (wgt'ed) examples reached here.  /* #neg=701 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.555366436746283;  // std dev = 0.000, 382.000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.11231637819360629;  // std dev = 4.08e-08, 57.000 (wgt'ed) examples reached here.  /* #neg=57 */
%   else return -0.11231637819360625;  // std dev = 0.000, 657.000 (wgt'ed) examples reached here.  /* #neg=657 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.417513584158312;  // std dev = 0.000, 382.000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.10159632948783616;  // std dev = 5.27e-08, 70.000 (wgt'ed) examples reached here.  /* #neg=70 */
%   else return -0.10159632948783509;  // std dev = 4.66e-07, 747.000 (wgt'ed) examples reached here.  /* #neg=747 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.32071184716015166;  // std dev = 0.000, 382.000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.09269127618926107;  // std dev = 0.000, 55.000 (wgt'ed) examples reached here.  /* #neg=55 */
%   else return -0.0926912761892619;  // std dev = 0.000, 754.000 (wgt'ed) examples reached here.  /* #neg=754 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.25517224256948734;  // std dev = 4.42e-07, 382.000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.08518475138839679;  // std dev = 1.83e-08, 69.000 (wgt'ed) examples reached here.  /* #neg=69 */
%   else return -0.08518475138839675;  // std dev = 1.33e-07, 721.000 (wgt'ed) examples reached here.  /* #neg=721 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.20975771563253462;  // std dev = 2.53e-07, 382.000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.07877675473109176;  // std dev = 1.49e-08, 55.000 (wgt'ed) examples reached here.  /* #neg=55 */
%   else return -0.07877675473109284;  // std dev = 0.000, 724.000 (wgt'ed) examples reached here.  /* #neg=724 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.17709649774527667;  // std dev = 2.60e-07, 382.000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.07324622576333704;  // std dev = 1.29e-08, 46.000 (wgt'ed) examples reached here.  /* #neg=46 */
%   else return -0.07324622576333654;  // std dev = 2.37e-07, 702.000 (wgt'ed) examples reached here.  /* #neg=702 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.15274385809367164;  // std dev = 0.000, 382.000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.0684269778442027;  // std dev = 1.67e-08, 54.000 (wgt'ed) examples reached here.  /* #neg=54 */
%   else return -0.06842697784420262;  // std dev = 1.79e-07, 735.000 (wgt'ed) examples reached here.  /* #neg=735 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.13400703000801212;  // std dev = 0.000, 382.000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.06419184008202625;  // std dev = 0.000, 47.000 (wgt'ed) examples reached here.  /* #neg=47 */
%   else return -0.06419184008202537;  // std dev = 2.48e-07, 678.000 (wgt'ed) examples reached here.  /* #neg=678 */


Starting fold 1

Target train facts examples: 708
Target train pos examples: 35
Target train neg examples: 35

Target test facts examples: 1679
Target test pos	 examples: 78
Target test neg examples: 78

Amount of data: 0.2
******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- actor(A), director(B).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


WILL Produced-Tree #1
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( yearsinprogram(A, C), yearsinprogram(B, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.7331489350995123;  // std dev = 0.935, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   else return -0.1418510649004878;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #2
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( yearsinprogram(A, C), yearsinprogram(B, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.6189976143448207;  // std dev = 0.935, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   else return -0.12544463852839138;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #3
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( yearsinprogram(A, C), yearsinprogram(B, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.4851287515461648;  // std dev = 0.935, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   else return -0.11231637819360639;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #4
% FOR advisedby(A, B):
%   if ( student(A), professor(B) )
%   then if ( yearsinprogram(A, C), yearsinprogram(B, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.36568225360444984;  // std dev = 0.935, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   else return -0.1015963294878363;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #5
% FOR advisedby(A, B):
%   if ( student(A), professor(B) )
%   then if ( yearsinprogram(A, C), yearsinprogram(B, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.27560196347331406;  // std dev = 0.935, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   else return -0.09269127618926094;  // std dev = 3.73e-09, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #6
% FOR advisedby(A, B):
%   if ( student(A), professor(B) )
%   then if ( yearsinprogram(A, C), yearsinprogram(B, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.21158287903019785;  // std dev = 0.935, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   else return -0.08518475138839687;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #7
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( yearsinprogram(A, C), yearsinprogram(B, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.16608044254560703;  // std dev = 0.935, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   else return -0.07877675473109173;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #8
% FOR advisedby(A, B):
%   if ( student(A), professor(B) )
%   then if ( yearsinprogram(A, C), yearsinprogram(B, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.13303193637503513;  // std dev = 0.935, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   else return -0.07324622576333704;  // std dev = 2.63e-09, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #9
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( yearsinprogram(A, C), yearsinprogram(B, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.10839224498101034;  // std dev = 0.935, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   else return -0.06842697784420272;  // std dev = 1.86e-09, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #10
% FOR advisedby(A, B):
%   if ( student(A), professor(B) )
%   then if ( yearsinprogram(A, C), yearsinprogram(B, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.08956128580326395;  // std dev = 0.935, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   else return -0.0641918400820262;  // std dev = 1.86e-09, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */


Results
   AUC ROC   = 0.935897
   AUC PR    = 0.886364
   CLL	      = -0.241873
   Precision = 0.886364 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.939759


Total learning time: 0.846 seconds
Total inference time: 0.676 seconds
AUC ROC: 0.935897


Results scoring model
   AUC ROC   = 0.928571
   AUC PR    = 0.875
   CLL	      = -0.253212
   Precision = 0.875 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.933333


Total scoring time: 0.478 seconds
Parameter learned model CLL: -0.253212


Structure after Parameter Learning
[['advisedby(A, B)', {'': 'professor(B), student(A)', 'true': 'yearsinprogram(A, C), yearsinprogram(B, C)'}, {'true,true': [0.0, 0, 0], 'true,false': [0.935, 1, 7], 'false': [0.0, 6, 0]}], ['advisedby(A, B)', {'': 'professor(B), student(A)', 'true': 'yearsinprogram(A, C), yearsinprogram(B, C)'}, {'true,true': [0.0, 0, 0], 'true,false': [0.935, 1, 7], 'false': [0.0, 6, 0]}], ['advisedby(A, B)', {'': 'professor(B), student(A)', 'true': 'yearsinprogram(A, C), yearsinprogram(B, C)'}, {'true,true': [0.0, 0, 0], 'true,false': [0.935, 1, 7], 'false': [0.0, 6, 0]}], ['advisedby(A, B)', {'': 'student(A), professor(B)', 'true': 'yearsinprogram(A, C), yearsinprogram(B, C)'}, {'true,true': [0.0, 0, 0], 'true,false': [0.935, 1, 7], 'false': [0.0, 6, 0]}], ['advisedby(A, B)', {'': 'student(A), professor(B)', 'true': 'yearsinprogram(A, C), yearsinprogram(B, C)'}, {'true,true': [0.0, 0, 0], 'true,false': [0.935, 1, 7], 'false': [3.73e-09, 6, 0]}], ['advisedby(A, B)', {'': 'student(A), professor(B)', 'true': 'yearsinprogram(A, C), yearsinprogram(B, C)'}, {'true,true': [0.0, 0, 0], 'true,false': [0.935, 1, 7], 'false': [0.0, 6, 0]}], ['advisedby(A, B)', {'': 'professor(B), student(A)', 'true': 'yearsinprogram(A, C), yearsinprogram(B, C)'}, {'true,true': [0.0, 0, 0], 'true,false': [0.935, 1, 7], 'false': [0.0, 6, 0]}], ['advisedby(A, B)', {'': 'student(A), professor(B)', 'true': 'yearsinprogram(A, C), yearsinprogram(B, C)'}, {'true,true': [0.0, 0, 0], 'true,false': [0.935, 1, 7], 'false': [2.63e-09, 6, 0]}], ['advisedby(A, B)', {'': 'professor(B), student(A)', 'true': 'yearsinprogram(A, C), yearsinprogram(B, C)'}, {'true,true': [0.0, 0, 0], 'true,false': [0.935, 1, 7], 'false': [1.86e-09, 6, 0]}], ['advisedby(A, B)', {'': 'student(A), professor(B)', 'true': 'yearsinprogram(A, C), yearsinprogram(B, C)'}, {'true,true': [0.0, 0, 0], 'true,false': [0.935, 1, 7], 'false': [1.86e-09, 6, 0]}]]
[{'': [0.10937499999999978, -6.938893903907228e-18], 'true': [nan, 0.10937499999999978]}, {'': [0.10937500000000017, -2.3129646346357427e-18], 'true': [nan, 0.10937500000000017]}, {'': [0.10937500000000008, 0.0], 'true': [nan, 0.10937500000000008]}, {'': [0.10937499999999994, -1.1564823173178713e-18], 'true': [nan, 0.10937499999999994]}, {'': [0.10937500000000004, 2.3129646346357427e-18], 'true': [nan, 0.10937500000000004]}, {'': [0.10937499999999997, 0.0], 'true': [nan, 0.10937499999999997]}, {'': [0.10937499999999997, -1.1564823173178713e-18], 'true': [nan, 0.10937499999999997]}, {'': [0.10937499999999999, 1.1564823173178713e-18], 'true': [nan, 0.10937499999999999]}, {'': [0.109375, 5.782411586589357e-19], 'true': [nan, 0.109375]}, {'': [0.109375, 5.782411586589357e-19], 'true': [nan, 0.109375]}]


******************************************
Performing Theory Revision
******************************************
******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.935897
   AUC PR    = 0.886364
   CLL	      = -0.241873
   Precision = 0.886364 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.939759


Total learning time: 1.3239999999999998 seconds
Total inference time: 0.676 seconds
AUC ROC: 0.935897
Total revision time: 1.3239999999999998
Best scored revision CLL: -0.253212


Dataset: 1_imdb_uwcse, Fold: 1, Type: Transfer (trRDN-B), Time: 00:00:07
{'AUC ROC': 0.935897, 'AUC PR': 0.886364, 'CLL': -0.241873, 'Precision': [0.886364, 0.5], 'Recall': 1.0, 'F1': 0.939759, 'Learning time': 1.3239999999999998, 'Inference time': 0.676, 'parameter_0.2': {'AUC ROC': 0.935897, 'AUC PR': 0.886364, 'CLL': -0.241873, 'Precision': [0.886364, 0.5], 'Recall': 1.0, 'F1': 0.939759, 'Learning time': 0.846, 'Inference time': 0.676}}


Amount of data: 0.4
******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- actor(A), director(B).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


WILL Produced-Tree #1
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( publication(C, A), publication(C, B) )
%   | then return 0.8581489350995122;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else return 0.6914822684328455;  // std dev = 1.291, 12.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=10 */
%   else return -0.1418510649004878;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
WILL Produced-Tree #2
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( publication(C, A), publication(C, B) )
%   | then return 0.7194734122109545;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else return 0.585186000855536;  // std dev = 1.291, 12.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=10 */
%   else return -0.12544463852839138;  // std dev = 5.27e-09, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
WILL Produced-Tree #3
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( publication(C, A), publication(C, B) )
%   | then return 0.5553664367462845;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else return 0.46125983910675555;  // std dev = 1.291, 12.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=10 */
%   else return -0.11231637819360636;  // std dev = 9.13e-09, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
WILL Produced-Tree #4
% FOR advisedby(A, B):
%   if ( student(A), professor(B) )
%   then if ( publication(C, A), publication(C, B) )
%   | then return 0.41751358415830997;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else return 0.3488463256948422;  // std dev = 1.291, 12.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=10 */
%   else return -0.10159632948783627;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
WILL Produced-Tree #5
% FOR advisedby(A, B):
%   if ( student(A), professor(B) )
%   then if ( publication(C, A), publication(C, B) )
%   | then return 0.32071184716014967;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else return 0.2621270550835419;  // std dev = 1.291, 12.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=10 */
%   else return -0.09269127618926098;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
WILL Produced-Tree #6
% FOR advisedby(A, B):
%   if ( student(A), professor(B) )
%   then if ( publication(C, A), publication(C, B) )
%   | then return 0.25517224256948945;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else return 0.19945264276423433;  // std dev = 1.291, 12.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=10 */
%   else return -0.08518475138839687;  // std dev = 3.73e-09, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
WILL Produced-Tree #7
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( publication(C, A), publication(C, B) )
%   | then return 0.20975771563253554;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else return 0.15451336627983223;  // std dev = 1.291, 12.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=10 */
%   else return -0.07877675473109179;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
WILL Produced-Tree #8
% FOR advisedby(A, B):
%   if ( student(A), professor(B) )
%   then if ( publication(C, A), publication(C, B) )
%   | then return 0.17709649774527736;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else return 0.12179491558002797;  // std dev = 1.291, 12.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=10 */
%   else return -0.07324622576333704;  // std dev = 3.73e-09, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
WILL Produced-Tree #9
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( publication(C, A), publication(C, B) )
%   | then return 0.15274385809367097;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else return 0.09745354768081678;  // std dev = 1.291, 12.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=10 */
%   else return -0.06842697784420272;  // std dev = 2.63e-09, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
WILL Produced-Tree #10
% FOR advisedby(A, B):
%   if ( student(A), professor(B) )
%   then if ( publication(C, A), publication(C, B) )
%   | then return 0.13400703000801117;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else return 0.07895233872555123;  // std dev = 1.291, 12.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=10 */
%   else return -0.0641918400820262;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */


Results
   AUC ROC   = 0.951677
   AUC PR    = 0.929498
   CLL	      = -0.233239
   Precision = 0.886364 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.939759


Total learning time: 0.884 seconds
Total inference time: 0.709 seconds
AUC ROC: 0.951677


Results scoring model
   AUC ROC   = 0.94898
   AUC PR    = 0.936241
   CLL	      = -0.243372
   Precision = 0.875 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.933333


Total scoring time: 0.518 seconds
Parameter learned model CLL: -0.243372


Structure after Parameter Learning
[['advisedby(A, B)', {'': 'professor(B), student(A)', 'true': 'publication(C, A), publication(C, B)'}, {'true,true': [0.0, 0, 4], 'true,false': [1.291, 2, 10], 'false': [0.0, 12, 0]}], ['advisedby(A, B)', {'': 'professor(B), student(A)', 'true': 'publication(C, A), publication(C, B)'}, {'true,true': [0.0, 0, 4], 'true,false': [1.291, 2, 10], 'false': [5.27e-09, 12, 0]}], ['advisedby(A, B)', {'': 'professor(B), student(A)', 'true': 'publication(C, A), publication(C, B)'}, {'true,true': [0.0, 0, 4], 'true,false': [1.291, 2, 10], 'false': [9.13e-09, 12, 0]}], ['advisedby(A, B)', {'': 'student(A), professor(B)', 'true': 'publication(C, A), publication(C, B)'}, {'true,true': [0.0, 0, 4], 'true,false': [1.291, 2, 10], 'false': [0.0, 12, 0]}], ['advisedby(A, B)', {'': 'student(A), professor(B)', 'true': 'publication(C, A), publication(C, B)'}, {'true,true': [0.0, 0, 4], 'true,false': [1.291, 2, 10], 'false': [0.0, 12, 0]}], ['advisedby(A, B)', {'': 'student(A), professor(B)', 'true': 'publication(C, A), publication(C, B)'}, {'true,true': [0.0, 0, 4], 'true,false': [1.291, 2, 10], 'false': [3.73e-09, 12, 0]}], ['advisedby(A, B)', {'': 'professor(B), student(A)', 'true': 'publication(C, A), publication(C, B)'}, {'true,true': [0.0, 0, 4], 'true,false': [1.291, 2, 10], 'false': [0.0, 12, 0]}], ['advisedby(A, B)', {'': 'student(A), professor(B)', 'true': 'publication(C, A), publication(C, B)'}, {'true,true': [0.0, 0, 4], 'true,false': [1.291, 2, 10], 'false': [3.73e-09, 12, 0]}], ['advisedby(A, B)', {'': 'professor(B), student(A)', 'true': 'publication(C, A), publication(C, B)'}, {'true,true': [0.0, 0, 4], 'true,false': [1.291, 2, 10], 'false': [2.63e-09, 12, 0]}], ['advisedby(A, B)', {'': 'student(A), professor(B)', 'true': 'publication(C, A), publication(C, B)'}, {'true,true': [0.0, 0, 4], 'true,false': [1.291, 2, 10], 'false': [0.0, 12, 0]}]]
[{'': [0.10937499999999967, -1.1564823173178714e-17], 'true': [0.0, 0.1388888888888887]}, {'': [0.10754787457576792, 2.3129646346357427e-18], 'true': [0.0, 0.13888888888888898]}, {'': [0.10582717636403338, 6.938893903907228e-18], 'true': [0.0, 0.13888888888888887]}, {'': [0.10505076523883344, 0.0], 'true': [0.0, 0.13888888888888898]}, {'': [0.10481020001591526, 0.0], 'true': [0.0, 0.13888888888888884]}, {'': [0.1047487930046275, 1.1564823173178713e-18], 'true': [0.0, 0.13888888888888887]}, {'': [0.10473890506705484, -1.1564823173178713e-18], 'true': [0.0, 0.13888888888888892]}, {'': [0.10474009135228786, 1.1564823173178713e-18], 'true': [0.0, 0.13888888888888887]}, {'': [0.10473985762145727, 5.782411586589357e-19], 'true': [0.0, 0.1388888888888889]}, {'': [0.10473498273520546, -5.782411586589357e-19], 'true': [0.0, 0.13888888888888887]}]


******************************************
Performing Theory Revision
******************************************
******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.951677
   AUC PR    = 0.929498
   CLL	      = -0.233239
   Precision = 0.886364 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.939759


Total learning time: 1.4020000000000001 seconds
Total inference time: 0.709 seconds
AUC ROC: 0.951677
Total revision time: 1.4020000000000001
Best scored revision CLL: -0.243372


Dataset: 1_imdb_uwcse, Fold: 1, Type: Transfer (trRDN-B), Time: 00:00:10
{'AUC ROC': 0.951677, 'AUC PR': 0.929498, 'CLL': -0.233239, 'Precision': [0.886364, 0.5], 'Recall': 1.0, 'F1': 0.939759, 'Learning time': 1.4020000000000001, 'Inference time': 0.709, 'parameter_0.4': {'AUC ROC': 0.951677, 'AUC PR': 0.929498, 'CLL': -0.233239, 'Precision': [0.886364, 0.5], 'Recall': 1.0, 'F1': 0.939759, 'Learning time': 0.884, 'Inference time': 0.709}}


Amount of data: 0.6
******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- actor(A), director(B).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


WILL Produced-Tree #1
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( publication(C, A), publication(C, B) )
%   | then return 0.8581489350995123;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else return 0.6914822684328455;  // std dev = 1.581, 18.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=15 */
%   else return -0.14185106490048777;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
WILL Produced-Tree #2
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( publication(C, A), publication(C, B) )
%   | then return 0.7194734122109544;  // std dev = 2.11e-08, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else return 0.5851860008555358;  // std dev = 1.581, 18.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=15 */
%   else return -0.12544463852839138;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
WILL Produced-Tree #3
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( publication(C, A), publication(C, B) )
%   | then return 0.5553664367462846;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else return 0.4612598391067555;  // std dev = 1.581, 18.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=15 */
%   else return -0.11231637819360635;  // std dev = 1.67e-08, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
WILL Produced-Tree #4
% FOR advisedby(A, B):
%   if ( student(A), professor(B) )
%   then if ( publication(C, A), publication(C, B) )
%   | then return 0.4175135841583099;  // std dev = 2.11e-08, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else return 0.34884632569484214;  // std dev = 1.581, 18.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=15 */
%   else return -0.10159632948783634;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
WILL Produced-Tree #5
% FOR advisedby(A, B):
%   if ( student(A), professor(B) )
%   then if ( publication(C, A), publication(C, B) )
%   | then return 0.3207118471601497;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else return 0.26212705508354195;  // std dev = 1.581, 18.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=15 */
%   else return -0.09269127618926097;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
WILL Produced-Tree #6
% FOR advisedby(A, B):
%   if ( student(A), professor(B) )
%   then if ( publication(C, A), publication(C, B) )
%   | then return 0.2551722425694894;  // std dev = 7.45e-09, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else return 0.19945264276423427;  // std dev = 1.581, 18.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=15 */
%   else return -0.08518475138839687;  // std dev = 5.27e-09, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
WILL Produced-Tree #7
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( publication(C, A), publication(C, B) )
%   | then return 0.20975771563253556;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else return 0.15451336627983223;  // std dev = 1.581, 18.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=15 */
%   else return -0.07877675473109175;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
WILL Produced-Tree #8
% FOR advisedby(A, B):
%   if ( student(A), professor(B) )
%   then if ( publication(C, A), publication(C, B) )
%   | then return 0.17709649774527736;  // std dev = 5.27e-09, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else return 0.121794915580028;  // std dev = 1.581, 18.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=15 */
%   else return -0.07324622576333704;  // std dev = 3.73e-09, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
WILL Produced-Tree #9
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( publication(C, A), publication(C, B) )
%   | then return 0.15274385809367097;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else return 0.09745354768081678;  // std dev = 1.581, 18.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=15 */
%   else return -0.06842697784420274;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
WILL Produced-Tree #10
% FOR advisedby(A, B):
%   if ( student(A), professor(B) )
%   then if ( publication(C, A), publication(C, B) )
%   | then return 0.13400703000801117;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else return 0.07895233872555121;  // std dev = 1.581, 18.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=15 */
%   else return -0.06419184008202618;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */


Results
   AUC ROC   = 0.951677
   AUC PR    = 0.929498
   CLL	      = -0.233239
   Precision = 0.886364 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.939759


Total learning time: 0.896 seconds
Total inference time: 0.683 seconds
AUC ROC: 0.951677


Results scoring model
   AUC ROC   = 0.94898
   AUC PR    = 0.936088
   CLL	      = -0.243372
   Precision = 0.875 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.933333


Total scoring time: 0.54 seconds
Parameter learned model CLL: -0.243372


Structure after Parameter Learning
[['advisedby(A, B)', {'': 'professor(B), student(A)', 'true': 'publication(C, A), publication(C, B)'}, {'true,true': [0.0, 0, 6], 'true,false': [1.581, 3, 15], 'false': [0.0, 18, 0]}], ['advisedby(A, B)', {'': 'professor(B), student(A)', 'true': 'publication(C, A), publication(C, B)'}, {'true,true': [2.11e-08, 0, 6], 'true,false': [1.581, 3, 15], 'false': [0.0, 18, 0]}], ['advisedby(A, B)', {'': 'professor(B), student(A)', 'true': 'publication(C, A), publication(C, B)'}, {'true,true': [0.0, 0, 6], 'true,false': [1.581, 3, 15], 'false': [1.67e-08, 18, 0]}], ['advisedby(A, B)', {'': 'student(A), professor(B)', 'true': 'publication(C, A), publication(C, B)'}, {'true,true': [2.11e-08, 0, 6], 'true,false': [1.581, 3, 15], 'false': [0.0, 18, 0]}], ['advisedby(A, B)', {'': 'student(A), professor(B)', 'true': 'publication(C, A), publication(C, B)'}, {'true,true': [0.0, 0, 6], 'true,false': [1.581, 3, 15], 'false': [0.0, 18, 0]}], ['advisedby(A, B)', {'': 'student(A), professor(B)', 'true': 'publication(C, A), publication(C, B)'}, {'true,true': [7.45e-09, 0, 6], 'true,false': [1.581, 3, 15], 'false': [5.27e-09, 18, 0]}], ['advisedby(A, B)', {'': 'professor(B), student(A)', 'true': 'publication(C, A), publication(C, B)'}, {'true,true': [0.0, 0, 6], 'true,false': [1.581, 3, 15], 'false': [0.0, 18, 0]}], ['advisedby(A, B)', {'': 'student(A), professor(B)', 'true': 'publication(C, A), publication(C, B)'}, {'true,true': [5.27e-09, 0, 6], 'true,false': [1.581, 3, 15], 'false': [3.73e-09, 18, 0]}], ['advisedby(A, B)', {'': 'professor(B), student(A)', 'true': 'publication(C, A), publication(C, B)'}, {'true,true': [0.0, 0, 6], 'true,false': [1.581, 3, 15], 'false': [0.0, 18, 0]}], ['advisedby(A, B)', {'': 'student(A), professor(B)', 'true': 'publication(C, A), publication(C, B)'}, {'true,true': [0.0, 0, 6], 'true,false': [1.581, 3, 15], 'false': [0.0, 18, 0]}]]
[{'': [0.10937500000000015, -3.0839528461809902e-18], 'true': [-1.4802973661668753e-16, 0.13888888888888878]}, {'': [0.10754787457576809, 0.0], 'true': [7.401486830834377e-17, 0.13888888888888903]}, {'': [0.10582717636403338, 1.5419764230904953e-17], 'true': [-7.401486830834377e-17, 0.13888888888888898]}, {'': [0.10505076523883326, -6.1679056923619804e-18], 'true': [7.401486830834377e-17, 0.13888888888888898]}, {'': [0.1048102000159153, 0.0], 'true': [-3.700743415417188e-17, 0.13888888888888884]}, {'': [0.10474879300462753, 1.5419764230904951e-18], 'true': [9.25185853854297e-18, 0.1388888888888889]}, {'': [0.10473890506705484, -3.854941057726238e-18], 'true': [-9.25185853854297e-18, 0.1388888888888889]}, {'': [0.10474009135228786, 7.709882115452476e-19], 'true': [4.625929269271485e-18, 0.13888888888888887]}, {'': [0.10473985762145725, -1.5419764230904951e-18], 'true': [-4.625929269271485e-18, 0.1388888888888889]}, {'': [0.10473498273520547, 0.0], 'true': [0.0, 0.1388888888888889]}]


******************************************
Performing Theory Revision
******************************************
******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.951677
   AUC PR    = 0.929498
   CLL	      = -0.233239
   Precision = 0.886364 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.939759


Total learning time: 1.436 seconds
Total inference time: 0.683 seconds
AUC ROC: 0.951677
Total revision time: 1.436
Best scored revision CLL: -0.243372


Dataset: 1_imdb_uwcse, Fold: 1, Type: Transfer (trRDN-B), Time: 00:00:12
{'AUC ROC': 0.951677, 'AUC PR': 0.929498, 'CLL': -0.233239, 'Precision': [0.886364, 0.5], 'Recall': 1.0, 'F1': 0.939759, 'Learning time': 1.436, 'Inference time': 0.683, 'parameter_0.6': {'AUC ROC': 0.951677, 'AUC PR': 0.929498, 'CLL': -0.233239, 'Precision': [0.886364, 0.5], 'Recall': 1.0, 'F1': 0.939759, 'Learning time': 0.896, 'Inference time': 0.683}}


Amount of data: 0.8
******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- actor(A), director(B).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


WILL Produced-Tree #1
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( publication(C, A), publication(C, B) )
%   | then return 0.8581489350995123;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else return 0.6842358916212514;  // std dev = 1.818, 23.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=19 */
%   else return -0.14185106490048774;  // std dev = 1.49e-08, 24.000 (wgt'ed) examples reached here.  /* #neg=24 */
WILL Produced-Tree #2
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( publication(C, A), publication(C, B) )
%   | then return 0.7194734122109543;  // std dev = 2.98e-08, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else return 0.579289113510837;  // std dev = 1.818, 23.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=19 */
%   else return -0.12544463852839138;  // std dev = 0.000, 24.000 (wgt'ed) examples reached here.  /* #neg=24 */
WILL Produced-Tree #3
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( publication(C, A), publication(C, B) )
%   | then return 0.5553664367462846;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else return 0.4570789878895825;  // std dev = 1.818, 23.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=19 */
%   else return -0.11231637819360639;  // std dev = 7.45e-09, 24.000 (wgt'ed) examples reached here.  /* #neg=24 */
WILL Produced-Tree #4
% FOR advisedby(A, B):
%   if ( student(A), professor(B) )
%   then if ( publication(C, A), publication(C, B) )
%   | then return 0.41751358415830986;  // std dev = 3.33e-08, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else return 0.3459255379460509;  // std dev = 1.818, 23.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=19 */
%   else return -0.10159632948783635;  // std dev = 0.000, 24.000 (wgt'ed) examples reached here.  /* #neg=24 */
WILL Produced-Tree #5
% FOR advisedby(A, B):
%   if ( student(A), professor(B) )
%   then if ( publication(C, A), publication(C, B) )
%   | then return 0.3207118471601497;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else return 0.25984624421661445;  // std dev = 1.818, 23.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=19 */
%   else return -0.09269127618926097;  // std dev = 7.45e-09, 24.000 (wgt'ed) examples reached here.  /* #neg=24 */
WILL Produced-Tree #6
% FOR advisedby(A, B):
%   if ( student(A), professor(B) )
%   then if ( publication(C, A), publication(C, B) )
%   | then return 0.2551722425694894;  // std dev = 1.83e-08, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else return 0.1974495333890909;  // std dev = 1.818, 23.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=19 */
%   else return -0.08518475138839687;  // std dev = 7.45e-09, 24.000 (wgt'ed) examples reached here.  /* #neg=24 */
WILL Produced-Tree #7
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( publication(C, A), publication(C, B) )
%   | then return 0.2097577156325356;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else return 0.15263813727398762;  // std dev = 1.818, 23.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=19 */
%   else return -0.07877675473109176;  // std dev = 0.000, 24.000 (wgt'ed) examples reached here.  /* #neg=24 */
WILL Produced-Tree #8
% FOR advisedby(A, B):
%   if ( student(A), professor(B) )
%   then if ( publication(C, A), publication(C, B) )
%   | then return 0.17709649774527736;  // std dev = 7.45e-09, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else return 0.1199981320074182;  // std dev = 1.818, 23.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=19 */
%   else return -0.07324622576333704;  // std dev = 5.27e-09, 24.000 (wgt'ed) examples reached here.  /* #neg=24 */
WILL Produced-Tree #9
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( publication(C, A), publication(C, B) )
%   | then return 0.15274385809367097;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else return 0.09572464243777015;  // std dev = 1.818, 23.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=19 */
%   else return -0.06842697784420275;  // std dev = 0.000, 24.000 (wgt'ed) examples reached here.  /* #neg=24 */
WILL Produced-Tree #10
% FOR advisedby(A, B):
%   if ( student(A), professor(B) )
%   then if ( publication(C, A), publication(C, B) )
%   | then return 0.13400703000801117;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else return 0.07729377897012918;  // std dev = 1.818, 23.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=19 */
%   else return -0.06419184008202618;  // std dev = 3.73e-09, 24.000 (wgt'ed) examples reached here.  /* #neg=24 */


Results
   AUC ROC   = 0.951677
   AUC PR    = 0.929498
   CLL	      = -0.234261
   Precision = 0.886364 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.939759


Total learning time: 1.009 seconds
Total inference time: 0.696 seconds
AUC ROC: 0.951677


Results scoring model
   AUC ROC   = 0.951531
   AUC PR    = 0.94063
   CLL	      = -0.241723
   Precision = 0.875 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.933333


Total scoring time: 0.553 seconds
Parameter learned model CLL: -0.241723


Structure after Parameter Learning
[['advisedby(A, B)', {'': 'professor(B), student(A)', 'true': 'publication(C, A), publication(C, B)'}, {'true,true': [0.0, 0, 9], 'true,false': [1.818, 4, 19], 'false': [1.49e-08, 24, 0]}], ['advisedby(A, B)', {'': 'professor(B), student(A)', 'true': 'publication(C, A), publication(C, B)'}, {'true,true': [2.98e-08, 0, 9], 'true,false': [1.818, 4, 19], 'false': [0.0, 24, 0]}], ['advisedby(A, B)', {'': 'professor(B), student(A)', 'true': 'publication(C, A), publication(C, B)'}, {'true,true': [0.0, 0, 9], 'true,false': [1.818, 4, 19], 'false': [7.45e-09, 24, 0]}], ['advisedby(A, B)', {'': 'student(A), professor(B)', 'true': 'publication(C, A), publication(C, B)'}, {'true,true': [3.33e-08, 0, 9], 'true,false': [1.818, 4, 19], 'false': [0.0, 24, 0]}], ['advisedby(A, B)', {'': 'student(A), professor(B)', 'true': 'publication(C, A), publication(C, B)'}, {'true,true': [0.0, 0, 9], 'true,false': [1.818, 4, 19], 'false': [7.45e-09, 24, 0]}], ['advisedby(A, B)', {'': 'student(A), professor(B)', 'true': 'publication(C, A), publication(C, B)'}, {'true,true': [1.83e-08, 0, 9], 'true,false': [1.818, 4, 19], 'false': [7.45e-09, 24, 0]}], ['advisedby(A, B)', {'': 'professor(B), student(A)', 'true': 'publication(C, A), publication(C, B)'}, {'true,true': [0.0, 0, 9], 'true,false': [1.818, 4, 19], 'false': [0.0, 24, 0]}], ['advisedby(A, B)', {'': 'student(A), professor(B)', 'true': 'publication(C, A), publication(C, B)'}, {'true,true': [7.45e-09, 0, 9], 'true,false': [1.818, 4, 19], 'false': [5.27e-09, 24, 0]}], ['advisedby(A, B)', {'': 'professor(B), student(A)', 'true': 'publication(C, A), publication(C, B)'}, {'true,true': [0.0, 0, 9], 'true,false': [1.818, 4, 19], 'false': [0.0, 24, 0]}], ['advisedby(A, B)', {'': 'student(A), professor(B)', 'true': 'publication(C, A), publication(C, B)'}, {'true,true': [0.0, 0, 9], 'true,false': [1.818, 4, 19], 'false': [3.73e-09, 24, 0]}]]
[{'': [0.10937500000000122, 9.25185853854297e-18], 'true': [-2.9605947323337506e-16, 0.1436672967863892]}, {'': [0.1072334174007869, -4.625929269271485e-18], 'true': [9.868649107779169e-17, 0.14366729678638943]}, {'': [0.10521370889995485, 2.3129646346357427e-18], 'true': [-1.4802973661668753e-16, 0.1436672967863895]}, {'': [0.10429684965371452, -6.938893903907228e-18], 'true': [1.2335811384723962e-16, 0.14366729678638948]}, {'': [0.10400975303756864, 2.3129646346357427e-18], 'true': [-3.700743415417188e-17, 0.14366729678638954]}, {'': [0.10393441019911469, 2.3129646346357427e-18], 'true': [3.700743415417188e-17, 0.14366729678638945]}, {'': [0.10392040840310288, -4.625929269271485e-18], 'true': [-2.4671622769447922e-17, 0.1436672967863894]}, {'': [0.1039199186253506, 1.1564823173178713e-18], 'true': [6.1679056923619804e-18, 0.14366729678638943]}, {'': [0.10391809273658549, -4.625929269271485e-18], 'true': [-3.0839528461809902e-18, 0.14366729678638943]}, {'': [0.10391105835287379, 5.782411586589357e-19], 'true': [0.0, 0.14366729678638943]}]


******************************************
Performing Theory Revision
******************************************
******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.951677
   AUC PR    = 0.929498
   CLL	      = -0.234261
   Precision = 0.886364 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.939759


Total learning time: 1.5619999999999998 seconds
Total inference time: 0.696 seconds
AUC ROC: 0.951677
Total revision time: 1.5619999999999998
Best scored revision CLL: -0.241723


Dataset: 1_imdb_uwcse, Fold: 1, Type: Transfer (trRDN-B), Time: 00:00:15
{'AUC ROC': 0.951677, 'AUC PR': 0.929498, 'CLL': -0.234261, 'Precision': [0.886364, 0.5], 'Recall': 1.0, 'F1': 0.939759, 'Learning time': 1.5619999999999998, 'Inference time': 0.696, 'parameter_0.8': {'AUC ROC': 0.951677, 'AUC PR': 0.929498, 'CLL': -0.234261, 'Precision': [0.886364, 0.5], 'Recall': 1.0, 'F1': 0.939759, 'Learning time': 1.009, 'Inference time': 0.696}}


Amount of data: 1.0
******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- actor(A), director(B).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


WILL Produced-Tree #1
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( publication(C, A), publication(C, B) )
%   | then return 0.8581489350995123;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | else return 0.6981489350995124;  // std dev = 1.833, 25.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=21 */
%   else return -0.1418510649004877;  // std dev = 2.79e-08, 31.000 (wgt'ed) examples reached here.  /* #neg=31 */
WILL Produced-Tree #2
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( publication(C, A), publication(C, B) )
%   | then return 0.7194734122109542;  // std dev = 5.16e-08, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | else return 0.5906067787080473;  // std dev = 1.833, 25.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=21 */
%   else return -0.12544463852839138;  // std dev = 0.000, 31.000 (wgt'ed) examples reached here.  /* #neg=31 */
WILL Produced-Tree #3
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( publication(C, A), publication(C, B) )
%   | then return 0.5553664367462846;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | else return 0.46509811886993035;  // std dev = 1.833, 25.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=21 */
%   else return -0.11231637819360642;  // std dev = 0.000, 31.000 (wgt'ed) examples reached here.  /* #neg=31 */
WILL Produced-Tree #4
% FOR advisedby(A, B):
%   if ( student(A), professor(B) )
%   then if ( publication(C, A), publication(C, B) )
%   | then return 0.4175135841583098;  // std dev = 4.21e-08, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | else return 0.3515344950410331;  // std dev = 1.833, 25.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=21 */
%   else return -0.10159632948783635;  // std dev = 0.000, 31.000 (wgt'ed) examples reached here.  /* #neg=31 */
WILL Produced-Tree #5
% FOR advisedby(A, B):
%   if ( student(A), professor(B) )
%   then if ( publication(C, A), publication(C, B) )
%   | then return 0.3207118471601497;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | else return 0.26424079302882064;  // std dev = 1.833, 25.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=21 */
%   else return -0.09269127618926096;  // std dev = 1.05e-08, 31.000 (wgt'ed) examples reached here.  /* #neg=31 */
WILL Produced-Tree #6
% FOR advisedby(A, B):
%   if ( student(A), professor(B) )
%   then if ( publication(C, A), publication(C, B) )
%   | then return 0.2551722425694894;  // std dev = 2.11e-08, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | else return 0.2013224077066599;  // std dev = 1.833, 25.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=21 */
%   else return -0.08518475138839685;  // std dev = 1.39e-08, 31.000 (wgt'ed) examples reached here.  /* #neg=31 */
WILL Produced-Tree #7
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( publication(C, A), publication(C, B) )
%   | then return 0.20975771563253562;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | else return 0.15627330750411392;  // std dev = 1.833, 25.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=21 */
%   else return -0.07877675473109176;  // std dev = 0.000, 31.000 (wgt'ed) examples reached here.  /* #neg=31 */
WILL Produced-Tree #8
% FOR advisedby(A, B):
%   if ( student(A), professor(B) )
%   then if ( publication(C, A), publication(C, B) )
%   | then return 0.1770964977452774;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | else return 0.12348807414404181;  // std dev = 1.833, 25.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=21 */
%   else return -0.07324622576333704;  // std dev = 0.000, 31.000 (wgt'ed) examples reached here.  /* #neg=31 */
WILL Produced-Tree #9
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( publication(C, A), publication(C, B) )
%   | then return 0.1527438580936708;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | else return 0.09908822601080444;  // std dev = 1.833, 25.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=21 */
%   else return -0.06842697784420275;  // std dev = 0.000, 31.000 (wgt'ed) examples reached here.  /* #neg=31 */
WILL Produced-Tree #10
% FOR advisedby(A, B):
%   if ( student(A), professor(B) )
%   then if ( publication(C, A), publication(C, B) )
%   | then return 0.13400703000801117;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | else return 0.08052540822653942;  // std dev = 1.833, 25.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=21 */
%   else return -0.06419184008202619;  // std dev = 0.000, 31.000 (wgt'ed) examples reached here.  /* #neg=31 */


Results
   AUC ROC   = 0.951677
   AUC PR    = 0.929498
   CLL	      = -0.232353
   Precision = 0.886364 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.939759


Total learning time: 1.029 seconds
Total inference time: 0.698 seconds
AUC ROC: 0.951677


Results scoring model
   AUC ROC   = 0.965714
   AUC PR    = 0.959106
   CLL	      = -0.214852
   Precision = 0.897436 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.945946


Total scoring time: 0.591 seconds
Parameter learned model CLL: -0.214852


Structure after Parameter Learning
[['advisedby(A, B)', {'': 'professor(B), student(A)', 'true': 'publication(C, A), publication(C, B)'}, {'true,true': [0.0, 0, 14], 'true,false': [1.833, 4, 21], 'false': [2.79e-08, 31, 0]}], ['advisedby(A, B)', {'': 'professor(B), student(A)', 'true': 'publication(C, A), publication(C, B)'}, {'true,true': [5.16e-08, 0, 14], 'true,false': [1.833, 4, 21], 'false': [0.0, 31, 0]}], ['advisedby(A, B)', {'': 'professor(B), student(A)', 'true': 'publication(C, A), publication(C, B)'}, {'true,true': [0.0, 0, 14], 'true,false': [1.833, 4, 21], 'false': [0.0, 31, 0]}], ['advisedby(A, B)', {'': 'student(A), professor(B)', 'true': 'publication(C, A), publication(C, B)'}, {'true,true': [4.21e-08, 0, 14], 'true,false': [1.833, 4, 21], 'false': [0.0, 31, 0]}], ['advisedby(A, B)', {'': 'student(A), professor(B)', 'true': 'publication(C, A), publication(C, B)'}, {'true,true': [0.0, 0, 14], 'true,false': [1.833, 4, 21], 'false': [1.05e-08, 31, 0]}], ['advisedby(A, B)', {'': 'student(A), professor(B)', 'true': 'publication(C, A), publication(C, B)'}, {'true,true': [2.11e-08, 0, 14], 'true,false': [1.833, 4, 21], 'false': [1.39e-08, 31, 0]}], ['advisedby(A, B)', {'': 'professor(B), student(A)', 'true': 'publication(C, A), publication(C, B)'}, {'true,true': [0.0, 0, 14], 'true,false': [1.833, 4, 21], 'false': [0.0, 31, 0]}], ['advisedby(A, B)', {'': 'student(A), professor(B)', 'true': 'publication(C, A), publication(C, B)'}, {'true,true': [0.0, 0, 14], 'true,false': [1.833, 4, 21], 'false': [0.0, 31, 0]}], ['advisedby(A, B)', {'': 'professor(B), student(A)', 'true': 'publication(C, A), publication(C, B)'}, {'true,true': [0.0, 0, 14], 'true,false': [1.833, 4, 21], 'false': [0.0, 31, 0]}], ['advisedby(A, B)', {'': 'student(A), professor(B)', 'true': 'publication(C, A), publication(C, B)'}, {'true,true': [0.0, 0, 14], 'true,false': [1.833, 4, 21], 'false': [0.0, 31, 0]}]]
[{'': [0.09204470742932458, 2.5069552168955147e-17], 'true': [-2.5376526277146434e-16, 0.1343999999999997]}, {'': [0.08997522237385325, -7.162729191130042e-18], 'true': [1.9032394707859825e-16, 0.13440000000000013]}, {'': [0.08802888180425988, -8.953411488912552e-18], 'true': [-2.5376526277146434e-16, 0.13440000000000013]}, {'': [0.08715557795546391, -7.162729191130042e-18], 'true': [1.2688263138573217e-16, 0.13439999999999988]}, {'': [0.0868876679711678, 3.581364595565021e-18], 'true': [-3.172065784643304e-17, 0.13440000000000005]}, {'': [0.08682112534527543, 6.267388042238787e-18], 'true': [3.172065784643304e-17, 0.13440000000000002]}, {'': [0.08681209971696031, -1.7906822977825105e-18], 'true': [-3.172065784643304e-17, 0.13440000000000005]}, {'': [0.08681515587005474, 0.0], 'true': [0.0, 0.13440000000000002]}, {'': [0.0868163211038621, -4.476705744456276e-18], 'true': [-1.9825411154020653e-17, 0.1344]}, {'': [0.08681203113341988, -8.953411488912552e-19], 'true': [0.0, 0.13439999999999996]}]


******************************************
Performing Theory Revision
******************************************
******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.951677
   AUC PR    = 0.929498
   CLL	      = -0.232353
   Precision = 0.886364 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.939759


Total learning time: 1.6199999999999999 seconds
Total inference time: 0.698 seconds
AUC ROC: 0.951677
Total revision time: 1.6199999999999999
Best scored revision CLL: -0.214852


Dataset: 1_imdb_uwcse, Fold: 1, Type: Transfer (trRDN-B), Time: 00:00:17
{'AUC ROC': 0.951677, 'AUC PR': 0.929498, 'CLL': -0.232353, 'Precision': [0.886364, 0.5], 'Recall': 1.0, 'F1': 0.939759, 'Learning time': 1.6199999999999999, 'Inference time': 0.698, 'parameter_1.0': {'AUC ROC': 0.951677, 'AUC PR': 0.929498, 'CLL': -0.232353, 'Precision': [0.886364, 0.5], 'Recall': 1.0, 'F1': 0.939759, 'Learning time': 1.029, 'Inference time': 0.698}}


Starting fold 2

Target train facts examples: 422
Target train pos examples: 20
Target train neg examples: 20

Target test facts examples: 1965
Target test pos	 examples: 93
Target test neg examples: 93

Amount of data: 0.2
******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- actor(A), director(B).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


WILL Produced-Tree #1
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( yearsinprogram(A, C), yearsinprogram(B, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.6581489350995122;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   else return -0.14185106490048777;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #2
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( yearsinprogram(A, C), yearsinprogram(B, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.5580193346218546;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   else return -0.12544463852839138;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #3
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( yearsinprogram(A, C), yearsinprogram(B, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.4419486100244409;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   else return -0.11231637819360639;  // std dev = 2.63e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #4
% FOR advisedby(A, B):
%   if ( student(A), professor(B) )
%   then if ( yearsinprogram(A, C), yearsinprogram(B, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.33541139495094313;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   else return -0.1015963294878363;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #5
% FOR advisedby(A, B):
%   if ( student(A), professor(B) )
%   then if ( yearsinprogram(A, C), yearsinprogram(B, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.25176837314502193;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   else return -0.09269127618926094;  // std dev = 2.63e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #6
% FOR advisedby(A, B):
%   if ( student(A), professor(B) )
%   then if ( yearsinprogram(A, C), yearsinprogram(B, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.19047961032437172;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   else return -0.08518475138839687;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #7
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( yearsinprogram(A, C), yearsinprogram(B, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.14620194507639933;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   else return -0.07877675473109173;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #8
% FOR advisedby(A, B):
%   if ( student(A), professor(B) )
%   then if ( yearsinprogram(A, C), yearsinprogram(B, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.11389369465607464;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   else return -0.07324622576333704;  // std dev = 1.86e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #9
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( yearsinprogram(A, C), yearsinprogram(B, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.08989956180301868;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   else return -0.06842697784420272;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #10
% FOR advisedby(A, B):
%   if ( student(A), professor(B) )
%   then if ( yearsinprogram(A, C), yearsinprogram(B, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.0717481021516045;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   else return -0.0641918400820262;  // std dev = 1.32e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */


Results
   AUC ROC   = 0.935484
   AUC PR    = 0.885714
   CLL	      = -0.263668
   Precision = 0.885714 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.939394


Total learning time: 0.821 seconds
Total inference time: 0.763 seconds
AUC ROC: 0.935484


Results scoring model
   AUC ROC   = 0.875
   AUC PR    = 0.8
   CLL	      = -0.341891
   Precision = 0.8 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.888889


Total scoring time: 0.424 seconds
Parameter learned model CLL: -0.341891


Structure after Parameter Learning
[['advisedby(A, B)', {'': 'professor(B), student(A)', 'true': 'yearsinprogram(A, C), yearsinprogram(B, C)'}, {'true,true': [0.0, 0, 0], 'true,false': [0.894, 1, 4], 'false': [0.0, 3, 0]}], ['advisedby(A, B)', {'': 'professor(B), student(A)', 'true': 'yearsinprogram(A, C), yearsinprogram(B, C)'}, {'true,true': [0.0, 0, 0], 'true,false': [0.894, 1, 4], 'false': [0.0, 3, 0]}], ['advisedby(A, B)', {'': 'professor(B), student(A)', 'true': 'yearsinprogram(A, C), yearsinprogram(B, C)'}, {'true,true': [0.0, 0, 0], 'true,false': [0.894, 1, 4], 'false': [2.63e-09, 3, 0]}], ['advisedby(A, B)', {'': 'student(A), professor(B)', 'true': 'yearsinprogram(A, C), yearsinprogram(B, C)'}, {'true,true': [0.0, 0, 0], 'true,false': [0.894, 1, 4], 'false': [0.0, 3, 0]}], ['advisedby(A, B)', {'': 'student(A), professor(B)', 'true': 'yearsinprogram(A, C), yearsinprogram(B, C)'}, {'true,true': [0.0, 0, 0], 'true,false': [0.894, 1, 4], 'false': [2.63e-09, 3, 0]}], ['advisedby(A, B)', {'': 'student(A), professor(B)', 'true': 'yearsinprogram(A, C), yearsinprogram(B, C)'}, {'true,true': [0.0, 0, 0], 'true,false': [0.894, 1, 4], 'false': [0.0, 3, 0]}], ['advisedby(A, B)', {'': 'professor(B), student(A)', 'true': 'yearsinprogram(A, C), yearsinprogram(B, C)'}, {'true,true': [0.0, 0, 0], 'true,false': [0.894, 1, 4], 'false': [0.0, 3, 0]}], ['advisedby(A, B)', {'': 'student(A), professor(B)', 'true': 'yearsinprogram(A, C), yearsinprogram(B, C)'}, {'true,true': [0.0, 0, 0], 'true,false': [0.894, 1, 4], 'false': [1.86e-09, 3, 0]}], ['advisedby(A, B)', {'': 'professor(B), student(A)', 'true': 'yearsinprogram(A, C), yearsinprogram(B, C)'}, {'true,true': [0.0, 0, 0], 'true,false': [0.894, 1, 4], 'false': [0.0, 3, 0]}], ['advisedby(A, B)', {'': 'student(A), professor(B)', 'true': 'yearsinprogram(A, C), yearsinprogram(B, C)'}, {'true,true': [0.0, 0, 0], 'true,false': [0.894, 1, 4], 'false': [1.32e-09, 3, 0]}]]
[{'': [0.15999999999999986, 0.0], 'true': [nan, 0.15999999999999986]}, {'': [0.16, 0.0], 'true': [nan, 0.16]}, {'': [0.15999999999999998, 2.3129646346357427e-18], 'true': [nan, 0.15999999999999998]}, {'': [0.15999999999999998, -1.1564823173178713e-18], 'true': [nan, 0.15999999999999998]}, {'': [0.16, 2.3129646346357427e-18], 'true': [nan, 0.16]}, {'': [0.16, 0.0], 'true': [nan, 0.16]}, {'': [0.16, 0.0], 'true': [nan, 0.16]}, {'': [0.16, 1.1564823173178713e-18], 'true': [nan, 0.16]}, {'': [0.16, -5.782411586589357e-19], 'true': [nan, 0.16]}, {'': [0.16, 5.782411586589357e-19], 'true': [nan, 0.16]}]


******************************************
Performing Theory Revision
******************************************
******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.935484
   AUC PR    = 0.885714
   CLL	      = -0.263668
   Precision = 0.885714 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.939394


Total learning time: 1.2449999999999999 seconds
Total inference time: 0.763 seconds
AUC ROC: 0.935484
Total revision time: 1.2449999999999999
Best scored revision CLL: -0.341891


Dataset: 1_imdb_uwcse, Fold: 2, Type: Transfer (trRDN-B), Time: 00:00:20
{'AUC ROC': 0.935484, 'AUC PR': 0.885714, 'CLL': -0.263668, 'Precision': [0.885714, 0.5], 'Recall': 1.0, 'F1': 0.939394, 'Learning time': 1.2449999999999999, 'Inference time': 0.763, 'parameter_0.2': {'AUC ROC': 0.935484, 'AUC PR': 0.885714, 'CLL': -0.263668, 'Precision': [0.885714, 0.5], 'Recall': 1.0, 'F1': 0.939394, 'Learning time': 0.821, 'Inference time': 0.763}}


Amount of data: 0.4
******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- actor(A), director(B).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


WILL Produced-Tree #1
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( yearsinprogram(A, C), yearsinprogram(B, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.6581489350995123;  // std dev = 1.265, 10.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   else return -0.1418510649004878;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #2
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( yearsinprogram(A, C), yearsinprogram(B, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.5580193346218546;  // std dev = 1.265, 10.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   else return -0.12544463852839138;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #3
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( yearsinprogram(A, C), yearsinprogram(B, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.44194861002444086;  // std dev = 1.265, 10.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   else return -0.11231637819360639;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #4
% FOR advisedby(A, B):
%   if ( student(A), professor(B) )
%   then if ( yearsinprogram(A, C), yearsinprogram(B, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.335411394950943;  // std dev = 1.265, 10.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   else return -0.1015963294878363;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #5
% FOR advisedby(A, B):
%   if ( student(A), professor(B) )
%   then if ( yearsinprogram(A, C), yearsinprogram(B, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.25176837314502193;  // std dev = 1.265, 10.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   else return -0.09269127618926094;  // std dev = 3.73e-09, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #6
% FOR advisedby(A, B):
%   if ( student(A), professor(B) )
%   then if ( yearsinprogram(A, C), yearsinprogram(B, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.19047961032437172;  // std dev = 1.265, 10.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   else return -0.08518475138839687;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #7
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( yearsinprogram(A, C), yearsinprogram(B, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.14620194507639933;  // std dev = 1.265, 10.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   else return -0.07877675473109173;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #8
% FOR advisedby(A, B):
%   if ( student(A), professor(B) )
%   then if ( yearsinprogram(A, C), yearsinprogram(B, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.11389369465607464;  // std dev = 1.265, 10.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   else return -0.07324622576333704;  // std dev = 2.63e-09, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #9
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( yearsinprogram(A, C), yearsinprogram(B, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.08989956180301868;  // std dev = 1.265, 10.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   else return -0.06842697784420272;  // std dev = 1.86e-09, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #10
% FOR advisedby(A, B):
%   if ( student(A), professor(B) )
%   then if ( yearsinprogram(A, C), yearsinprogram(B, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.07174810215160456;  // std dev = 1.265, 10.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   else return -0.0641918400820262;  // std dev = 1.86e-09, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */


Results
   AUC ROC   = 0.935484
   AUC PR    = 0.885714
   CLL	      = -0.263668
   Precision = 0.885714 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.939394


Total learning time: 0.852 seconds
Total inference time: 0.728 seconds
AUC ROC: 0.935484


Results scoring model
   AUC ROC   = 0.875
   AUC PR    = 0.8
   CLL	      = -0.341891
   Precision = 0.8 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.888889


Total scoring time: 0.461 seconds
Parameter learned model CLL: -0.341891


Structure after Parameter Learning
[['advisedby(A, B)', {'': 'professor(B), student(A)', 'true': 'yearsinprogram(A, C), yearsinprogram(B, C)'}, {'true,true': [0.0, 0, 0], 'true,false': [1.265, 2, 8], 'false': [0.0, 6, 0]}], ['advisedby(A, B)', {'': 'professor(B), student(A)', 'true': 'yearsinprogram(A, C), yearsinprogram(B, C)'}, {'true,true': [0.0, 0, 0], 'true,false': [1.265, 2, 8], 'false': [0.0, 6, 0]}], ['advisedby(A, B)', {'': 'professor(B), student(A)', 'true': 'yearsinprogram(A, C), yearsinprogram(B, C)'}, {'true,true': [0.0, 0, 0], 'true,false': [1.265, 2, 8], 'false': [0.0, 6, 0]}], ['advisedby(A, B)', {'': 'student(A), professor(B)', 'true': 'yearsinprogram(A, C), yearsinprogram(B, C)'}, {'true,true': [0.0, 0, 0], 'true,false': [1.265, 2, 8], 'false': [0.0, 6, 0]}], ['advisedby(A, B)', {'': 'student(A), professor(B)', 'true': 'yearsinprogram(A, C), yearsinprogram(B, C)'}, {'true,true': [0.0, 0, 0], 'true,false': [1.265, 2, 8], 'false': [3.73e-09, 6, 0]}], ['advisedby(A, B)', {'': 'student(A), professor(B)', 'true': 'yearsinprogram(A, C), yearsinprogram(B, C)'}, {'true,true': [0.0, 0, 0], 'true,false': [1.265, 2, 8], 'false': [0.0, 6, 0]}], ['advisedby(A, B)', {'': 'professor(B), student(A)', 'true': 'yearsinprogram(A, C), yearsinprogram(B, C)'}, {'true,true': [0.0, 0, 0], 'true,false': [1.265, 2, 8], 'false': [0.0, 6, 0]}], ['advisedby(A, B)', {'': 'student(A), professor(B)', 'true': 'yearsinprogram(A, C), yearsinprogram(B, C)'}, {'true,true': [0.0, 0, 0], 'true,false': [1.265, 2, 8], 'false': [2.63e-09, 6, 0]}], ['advisedby(A, B)', {'': 'professor(B), student(A)', 'true': 'yearsinprogram(A, C), yearsinprogram(B, C)'}, {'true,true': [0.0, 0, 0], 'true,false': [1.265, 2, 8], 'false': [1.86e-09, 6, 0]}], ['advisedby(A, B)', {'': 'student(A), professor(B)', 'true': 'yearsinprogram(A, C), yearsinprogram(B, C)'}, {'true,true': [0.0, 0, 0], 'true,false': [1.265, 2, 8], 'false': [1.86e-09, 6, 0]}]]
[{'': [0.15999999999999986, -6.938893903907228e-18], 'true': [nan, 0.15999999999999986]}, {'': [0.1600000000000001, -2.3129646346357427e-18], 'true': [nan, 0.1600000000000001]}, {'': [0.15999999999999998, 0.0], 'true': [nan, 0.15999999999999998]}, {'': [0.16000000000000011, -1.1564823173178713e-18], 'true': [nan, 0.16000000000000011]}, {'': [0.16, 2.3129646346357427e-18], 'true': [nan, 0.16]}, {'': [0.16, 0.0], 'true': [nan, 0.16]}, {'': [0.15999999999999998, -1.1564823173178713e-18], 'true': [nan, 0.15999999999999998]}, {'': [0.16000000000000003, 1.1564823173178713e-18], 'true': [nan, 0.16000000000000003]}, {'': [0.15999999999999998, 5.782411586589357e-19], 'true': [nan, 0.15999999999999998]}, {'': [0.15999999999999998, 5.782411586589357e-19], 'true': [nan, 0.15999999999999998]}]


******************************************
Performing Theory Revision
******************************************
******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.935484
   AUC PR    = 0.885714
   CLL	      = -0.263668
   Precision = 0.885714 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.939394


Total learning time: 1.313 seconds
Total inference time: 0.728 seconds
AUC ROC: 0.935484
Total revision time: 1.313
Best scored revision CLL: -0.341891


Dataset: 1_imdb_uwcse, Fold: 2, Type: Transfer (trRDN-B), Time: 00:00:22
{'AUC ROC': 0.935484, 'AUC PR': 0.885714, 'CLL': -0.263668, 'Precision': [0.885714, 0.5], 'Recall': 1.0, 'F1': 0.939394, 'Learning time': 1.313, 'Inference time': 0.728, 'parameter_0.4': {'AUC ROC': 0.935484, 'AUC PR': 0.885714, 'CLL': -0.263668, 'Precision': [0.885714, 0.5], 'Recall': 1.0, 'F1': 0.939394, 'Learning time': 0.852, 'Inference time': 0.728}}


Amount of data: 0.6
******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- actor(A), director(B).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


WILL Produced-Tree #1
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( publication(C, A), publication(C, B) )
%   | then return 0.8581489350995122;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return 0.63592671287729;  // std dev = 1.247, 9.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=7 */
%   else return -0.1418510649004878;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
WILL Produced-Tree #2
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( publication(C, A), publication(C, B) )
%   | then return 0.7194734122109545;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return 0.5398498420741676;  // std dev = 1.247, 9.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=7 */
%   else return -0.12544463852839138;  // std dev = 5.27e-09, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
WILL Produced-Tree #3
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( publication(C, A), publication(C, B) )
%   | then return 0.5553664367462845;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return 0.42895627253508517;  // std dev = 1.247, 9.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=7 */
%   else return -0.11231637819360638;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
WILL Produced-Tree #4
% FOR advisedby(A, B):
%   if ( student(A), professor(B) )
%   then if ( publication(C, A), publication(C, B) )
%   | then return 0.4175135841583099;  // std dev = 1.49e-08, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return 0.3264400476801373;  // std dev = 1.247, 9.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=7 */
%   else return -0.10159632948783628;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
WILL Produced-Tree #5
% FOR advisedby(A, B):
%   if ( student(A), professor(B) )
%   then if ( publication(C, A), publication(C, B) )
%   | then return 0.32071184716014967;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return 0.24503149911444552;  // std dev = 1.247, 9.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=7 */
%   else return -0.09269127618926096;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
WILL Produced-Tree #6
% FOR advisedby(A, B):
%   if ( student(A), professor(B) )
%   then if ( publication(C, A), publication(C, B) )
%   | then return 0.25517224256948945;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return 0.18482045881522158;  // std dev = 1.247, 9.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=7 */
%   else return -0.08518475138839687;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
WILL Produced-Tree #7
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( publication(C, A), publication(C, B) )
%   | then return 0.20975771563253556;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return 0.14108814406879133;  // std dev = 1.247, 9.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=7 */
%   else return -0.07877675473109172;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
WILL Produced-Tree #8
% FOR advisedby(A, B):
%   if ( student(A), professor(B) )
%   then if ( publication(C, A), publication(C, B) )
%   | then return 0.17709649774527736;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return 0.10912169797108993;  // std dev = 1.247, 9.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=7 */
%   else return -0.07324622576333704;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
WILL Produced-Tree #9
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( publication(C, A), publication(C, B) )
%   | then return 0.15274385809367097;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return 0.0854052341130851;  // std dev = 1.247, 9.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=7 */
%   else return -0.06842697784420272;  // std dev = 2.63e-09, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
WILL Produced-Tree #10
% FOR advisedby(A, B):
%   if ( student(A), professor(B) )
%   then if ( publication(C, A), publication(C, B) )
%   | then return 0.13400703000801117;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return 0.0675192639640355;  // std dev = 1.247, 9.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=7 */
%   else return -0.0641918400820262;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */


Results
   AUC ROC   = 0.952307
   AUC PR    = 0.931984
   CLL	      = -0.242486
   Precision = 0.885714 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.939394


Total learning time: 0.846 seconds
Total inference time: 0.723 seconds
AUC ROC: 0.952307


Results scoring model
   AUC ROC   = 0.951389
   AUC PR    = 0.944864
   CLL	      = -0.253903
   Precision = 0.857143 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.923077


Total scoring time: 0.456 seconds
Parameter learned model CLL: -0.253903


Structure after Parameter Learning
[['advisedby(A, B)', {'': 'professor(B), student(A)', 'true': 'publication(C, A), publication(C, B)'}, {'true,true': [0.0, 0, 5], 'true,false': [1.247, 2, 7], 'false': [0.0, 10, 0]}], ['advisedby(A, B)', {'': 'professor(B), student(A)', 'true': 'publication(C, A), publication(C, B)'}, {'true,true': [0.0, 0, 5], 'true,false': [1.247, 2, 7], 'false': [5.27e-09, 10, 0]}], ['advisedby(A, B)', {'': 'professor(B), student(A)', 'true': 'publication(C, A), publication(C, B)'}, {'true,true': [0.0, 0, 5], 'true,false': [1.247, 2, 7], 'false': [0.0, 10, 0]}], ['advisedby(A, B)', {'': 'student(A), professor(B)', 'true': 'publication(C, A), publication(C, B)'}, {'true,true': [1.49e-08, 0, 5], 'true,false': [1.247, 2, 7], 'false': [0.0, 10, 0]}], ['advisedby(A, B)', {'': 'student(A), professor(B)', 'true': 'publication(C, A), publication(C, B)'}, {'true,true': [0.0, 0, 5], 'true,false': [1.247, 2, 7], 'false': [0.0, 10, 0]}], ['advisedby(A, B)', {'': 'student(A), professor(B)', 'true': 'publication(C, A), publication(C, B)'}, {'true,true': [0.0, 0, 5], 'true,false': [1.247, 2, 7], 'false': [0.0, 10, 0]}], ['advisedby(A, B)', {'': 'professor(B), student(A)', 'true': 'publication(C, A), publication(C, B)'}, {'true,true': [0.0, 0, 5], 'true,false': [1.247, 2, 7], 'false': [0.0, 10, 0]}], ['advisedby(A, B)', {'': 'student(A), professor(B)', 'true': 'publication(C, A), publication(C, B)'}, {'true,true': [0.0, 0, 5], 'true,false': [1.247, 2, 7], 'false': [0.0, 10, 0]}], ['advisedby(A, B)', {'': 'professor(B), student(A)', 'true': 'publication(C, A), publication(C, B)'}, {'true,true': [0.0, 0, 5], 'true,false': [1.247, 2, 7], 'false': [2.63e-09, 10, 0]}], ['advisedby(A, B)', {'': 'student(A), professor(B)', 'true': 'publication(C, A), publication(C, B)'}, {'true,true': [0.0, 0, 5], 'true,false': [1.247, 2, 7], 'false': [0.0, 10, 0]}]]
[{'': [0.1224489795918365, -1.1102230246251566e-17], 'true': [0.0, 0.1728395061728395]}, {'': [0.1185188060738194, 2.7755575615628915e-18], 'true': [0.0, 0.17283950617283944]}, {'': [0.11477988066578255, 0.0], 'true': [-4.4408920985006264e-17, 0.1728395061728395]}, {'': [0.11301543512692168, 0.0], 'true': [4.4408920985006264e-17, 0.17283950617283952]}, {'': [0.11242610181832723, 0.0], 'true': [-2.2204460492503132e-17, 0.1728395061728395]}, {'': [0.11224744685847503, 0.0], 'true': [0.0, 0.1728395061728395]}, {'': [0.11219375372664005, 0.0], 'true': [-5.551115123125783e-18, 0.1728395061728395]}, {'': [0.11217195704578119, -6.938893903907229e-19], 'true': [0.0, 0.1728395061728395]}, {'': [0.1121521930630598, 6.938893903907229e-19], 'true': [0.0, 0.1728395061728395]}, {'': [0.1121260500728883, 0.0], 'true': [0.0, 0.1728395061728395]}]


******************************************
Performing Theory Revision
******************************************
******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.952307
   AUC PR    = 0.931984
   CLL	      = -0.242486
   Precision = 0.885714 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.939394


Total learning time: 1.302 seconds
Total inference time: 0.723 seconds
AUC ROC: 0.952307
Total revision time: 1.302
Best scored revision CLL: -0.253903


Dataset: 1_imdb_uwcse, Fold: 2, Type: Transfer (trRDN-B), Time: 00:00:24
{'AUC ROC': 0.952307, 'AUC PR': 0.931984, 'CLL': -0.242486, 'Precision': [0.885714, 0.5], 'Recall': 1.0, 'F1': 0.939394, 'Learning time': 1.302, 'Inference time': 0.723, 'parameter_0.6': {'AUC ROC': 0.952307, 'AUC PR': 0.931984, 'CLL': -0.242486, 'Precision': [0.885714, 0.5], 'Recall': 1.0, 'F1': 0.939394, 'Learning time': 0.846, 'Inference time': 0.723}}


Amount of data: 0.8
******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- actor(A), director(B).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


WILL Produced-Tree #1
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( publication(C, A), publication(C, B) )
%   | then return 0.8581489350995123;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else return 0.6763307532813304;  // std dev = 1.279, 11.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=9 */
%   else return -0.1418510649004878;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
WILL Produced-Tree #2
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( publication(C, A), publication(C, B) )
%   | then return 0.7194734122109543;  // std dev = 2.11e-08, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else return 0.5728505077589574;  // std dev = 1.279, 11.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=9 */
%   else return -0.12544463852839138;  // std dev = 7.45e-09, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
WILL Produced-Tree #3
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( publication(C, A), publication(C, B) )
%   | then return 0.5553664367462846;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else return 0.45250734201965837;  // std dev = 1.279, 11.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=9 */
%   else return -0.11231637819360636;  // std dev = 1.18e-08, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
WILL Produced-Tree #4
% FOR advisedby(A, B):
%   if ( student(A), professor(B) )
%   then if ( publication(C, A), publication(C, B) )
%   | then return 0.41751358415830986;  // std dev = 2.58e-08, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else return 0.34273989085368034;  // std dev = 1.279, 11.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=9 */
%   else return -0.10159632948783627;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
WILL Produced-Tree #5
% FOR advisedby(A, B):
%   if ( student(A), professor(B) )
%   then if ( publication(C, A), publication(C, B) )
%   | then return 0.3207118471601497;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else return 0.2573771265051454;  // std dev = 1.279, 11.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=9 */
%   else return -0.09269127618926098;  // std dev = 3.73e-09, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
WILL Produced-Tree #6
% FOR advisedby(A, B):
%   if ( student(A), professor(B) )
%   then if ( publication(C, A), publication(C, B) )
%   | then return 0.2551722425694894;  // std dev = 1.29e-08, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else return 0.19529825339842236;  // std dev = 1.279, 11.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=9 */
%   else return -0.08518475138839687;  // std dev = 3.73e-09, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
WILL Produced-Tree #7
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( publication(C, A), publication(C, B) )
%   | then return 0.2097577156325356;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else return 0.1506364669407769;  // std dev = 1.279, 11.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=9 */
%   else return -0.07877675473109179;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
WILL Produced-Tree #8
% FOR advisedby(A, B):
%   if ( student(A), professor(B) )
%   then if ( publication(C, A), publication(C, B) )
%   | then return 0.17709649774527736;  // std dev = 5.27e-09, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else return 0.11808890552787812;  // std dev = 1.279, 11.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=9 */
%   else return -0.07324622576333704;  // std dev = 3.73e-09, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
WILL Produced-Tree #9
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( publication(C, A), publication(C, B) )
%   | then return 0.152743858093671;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else return 0.09389442014327223;  // std dev = 1.279, 11.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=9 */
%   else return -0.06842697784420272;  // std dev = 3.73e-09, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
WILL Produced-Tree #10
% FOR advisedby(A, B):
%   if ( student(A), professor(B) )
%   then if ( publication(C, A), publication(C, B) )
%   | then return 0.13400703000801117;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else return 0.07554408412491892;  // std dev = 1.279, 11.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=9 */
%   else return -0.0641918400820262;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */


Results
   AUC ROC   = 0.952307
   AUC PR    = 0.931984
   CLL	      = -0.235424
   Precision = 0.885714 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.939394


Total learning time: 0.851 seconds
Total inference time: 0.708 seconds
AUC ROC: 0.952307


Results scoring model
   AUC ROC   = 0.964844
   AUC PR    = 0.959335
   CLL	      = -0.22178
   Precision = 0.888889 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.941176


Total scoring time: 0.484 seconds
Parameter learned model CLL: -0.22178


Structure after Parameter Learning
[['advisedby(A, B)', {'': 'professor(B), student(A)', 'true': 'publication(C, A), publication(C, B)'}, {'true,true': [0.0, 0, 7], 'true,false': [1.279, 2, 9], 'false': [0.0, 14, 0]}], ['advisedby(A, B)', {'': 'professor(B), student(A)', 'true': 'publication(C, A), publication(C, B)'}, {'true,true': [2.11e-08, 0, 7], 'true,false': [1.279, 2, 9], 'false': [7.45e-09, 14, 0]}], ['advisedby(A, B)', {'': 'professor(B), student(A)', 'true': 'publication(C, A), publication(C, B)'}, {'true,true': [0.0, 0, 7], 'true,false': [1.279, 2, 9], 'false': [1.18e-08, 14, 0]}], ['advisedby(A, B)', {'': 'student(A), professor(B)', 'true': 'publication(C, A), publication(C, B)'}, {'true,true': [2.58e-08, 0, 7], 'true,false': [1.279, 2, 9], 'false': [0.0, 14, 0]}], ['advisedby(A, B)', {'': 'student(A), professor(B)', 'true': 'publication(C, A), publication(C, B)'}, {'true,true': [0.0, 0, 7], 'true,false': [1.279, 2, 9], 'false': [3.73e-09, 14, 0]}], ['advisedby(A, B)', {'': 'student(A), professor(B)', 'true': 'publication(C, A), publication(C, B)'}, {'true,true': [1.29e-08, 0, 7], 'true,false': [1.279, 2, 9], 'false': [3.73e-09, 14, 0]}], ['advisedby(A, B)', {'': 'professor(B), student(A)', 'true': 'publication(C, A), publication(C, B)'}, {'true,true': [0.0, 0, 7], 'true,false': [1.279, 2, 9], 'false': [0.0, 14, 0]}], ['advisedby(A, B)', {'': 'student(A), professor(B)', 'true': 'publication(C, A), publication(C, B)'}, {'true,true': [5.27e-09, 0, 7], 'true,false': [1.279, 2, 9], 'false': [3.73e-09, 14, 0]}], ['advisedby(A, B)', {'': 'professor(B), student(A)', 'true': 'publication(C, A), publication(C, B)'}, {'true,true': [0.0, 0, 7], 'true,false': [1.279, 2, 9], 'false': [3.73e-09, 14, 0]}], ['advisedby(A, B)', {'': 'student(A), professor(B)', 'true': 'publication(C, A), publication(C, B)'}, {'true,true': [0.0, 0, 7], 'true,false': [1.279, 2, 9], 'false': [0.0, 14, 0]}]]
[{'': [0.09876543209876518, -1.1895246692412391e-17], 'true': [-2.5376526277146434e-16, 0.14876033057851226]}, {'': [0.0960182491204038, 3.96508223080413e-18], 'true': [6.344131569286608e-17, 0.14876033057851246]}, {'': [0.09342347204901241, 9.912705577010326e-18], 'true': [-6.344131569286608e-17, 0.14876033057851235]}, {'': [0.09223784122144268, 0.0], 'true': [9.516197353929913e-17, 0.14876033057851243]}, {'': [0.09186239055944417, 9.912705577010326e-19], 'true': [-3.172065784643304e-17, 0.14876033057851237]}, {'': [0.09176105659613659, 9.912705577010326e-19], 'true': [2.3790493384824782e-17, 0.1487603305785124]}, {'': [0.09173976929677366, -9.912705577010326e-19], 'true': [-1.586032892321652e-17, 0.1487603305785124]}, {'': [0.0917365785242937, 9.912705577010326e-19], 'true': [3.96508223080413e-18, 0.14876033057851243]}, {'': [0.09173214874466189, 9.912705577010326e-19], 'true': [-7.93016446160826e-18, 0.1487603305785124]}, {'': [0.09172137342508585, -4.956352788505163e-19], 'true': [0.0, 0.14876033057851243]}]


******************************************
Performing Theory Revision
******************************************
******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.952307
   AUC PR    = 0.931984
   CLL	      = -0.235424
   Precision = 0.885714 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.939394


Total learning time: 1.335 seconds
Total inference time: 0.708 seconds
AUC ROC: 0.952307
Total revision time: 1.335
Best scored revision CLL: -0.22178


Dataset: 1_imdb_uwcse, Fold: 2, Type: Transfer (trRDN-B), Time: 00:00:27
{'AUC ROC': 0.952307, 'AUC PR': 0.931984, 'CLL': -0.235424, 'Precision': [0.885714, 0.5], 'Recall': 1.0, 'F1': 0.939394, 'Learning time': 1.335, 'Inference time': 0.708, 'parameter_0.8': {'AUC ROC': 0.952307, 'AUC PR': 0.931984, 'CLL': -0.235424, 'Precision': [0.885714, 0.5], 'Recall': 1.0, 'F1': 0.939394, 'Learning time': 0.851, 'Inference time': 0.708}}


Amount of data: 1.0
******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- actor(A), director(B).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


WILL Produced-Tree #1
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( publication(C, A), publication(C, B) )
%   | then return 0.8581489350995123;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else return 0.7043027812533584;  // std dev = 1.301, 13.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=11 */
%   else return -0.1418510649004878;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
WILL Produced-Tree #2
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( publication(C, A), publication(C, B) )
%   | then return 0.7194734122109543;  // std dev = 2.98e-08, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else return 0.5956068723141557;  // std dev = 1.301, 13.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=11 */
%   else return -0.12544463852839138;  // std dev = 7.45e-09, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
WILL Produced-Tree #3
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( publication(C, A), publication(C, B) )
%   | then return 0.5553664367462846;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else return 0.46863440886780416;  // std dev = 1.301, 13.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=11 */
%   else return -0.11231637819360635;  // std dev = 1.58e-08, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
WILL Produced-Tree #4
% FOR advisedby(A, B):
%   if ( student(A), professor(B) )
%   then if ( publication(C, A), publication(C, B) )
%   | then return 0.41751358415830986;  // std dev = 3.33e-08, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else return 0.3540171821738477;  // std dev = 1.301, 13.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=11 */
%   else return -0.10159632948783628;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
WILL Produced-Tree #5
% FOR advisedby(A, B):
%   if ( student(A), professor(B) )
%   then if ( publication(C, A), publication(C, B) )
%   | then return 0.3207118471601497;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else return 0.2662055261992428;  // std dev = 1.301, 13.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=11 */
%   else return -0.09269127618926097;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
WILL Produced-Tree #6
% FOR advisedby(A, B):
%   if ( student(A), professor(B) )
%   then if ( publication(C, A), publication(C, B) )
%   | then return 0.2551722425694894;  // std dev = 1.83e-08, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else return 0.20307171050188988;  // std dev = 1.301, 13.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=11 */
%   else return -0.08518475138839687;  // std dev = 5.27e-09, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
WILL Produced-Tree #7
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( publication(C, A), publication(C, B) )
%   | then return 0.2097577156325356;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else return 0.1579278943667103;  // std dev = 1.301, 13.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=11 */
%   else return -0.07877675473109173;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
WILL Produced-Tree #8
% FOR advisedby(A, B):
%   if ( student(A), professor(B) )
%   then if ( publication(C, A), publication(C, B) )
%   | then return 0.17709649774527736;  // std dev = 7.45e-09, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else return 0.12508565429655724;  // std dev = 1.301, 13.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=11 */
%   else return -0.07324622576333704;  // std dev = 3.73e-09, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
WILL Produced-Tree #9
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( publication(C, A), publication(C, B) )
%   | then return 0.15274385809367097;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else return 0.10063530397647748;  // std dev = 1.301, 13.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=11 */
%   else return -0.06842697784420272;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
WILL Produced-Tree #10
% FOR advisedby(A, B):
%   if ( student(A), professor(B) )
%   then if ( publication(C, A), publication(C, B) )
%   | then return 0.13400703000801117;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else return 0.08201840165050943;  // std dev = 1.301, 13.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=11 */
%   else return -0.0641918400820262;  // std dev = 3.73e-09, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */


Results
   AUC ROC   = 0.952307
   AUC PR    = 0.931984
   CLL	      = -0.231667
   Precision = 0.885714 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.939394


Total learning time: 0.91 seconds
Total inference time: 0.723 seconds
AUC ROC: 0.952307


Results scoring model
   AUC ROC   = 0.9725
   AUC PR    = 0.967814
   CLL	      = -0.200825
   Precision = 0.909091 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.952381


Total scoring time: 0.515 seconds
Parameter learned model CLL: -0.200825


Structure after Parameter Learning
[['advisedby(A, B)', {'': 'professor(B), student(A)', 'true': 'publication(C, A), publication(C, B)'}, {'true,true': [0.0, 0, 9], 'true,false': [1.301, 2, 11], 'false': [0.0, 18, 0]}], ['advisedby(A, B)', {'': 'professor(B), student(A)', 'true': 'publication(C, A), publication(C, B)'}, {'true,true': [2.98e-08, 0, 9], 'true,false': [1.301, 2, 11], 'false': [7.45e-09, 18, 0]}], ['advisedby(A, B)', {'': 'professor(B), student(A)', 'true': 'publication(C, A), publication(C, B)'}, {'true,true': [0.0, 0, 9], 'true,false': [1.301, 2, 11], 'false': [1.58e-08, 18, 0]}], ['advisedby(A, B)', {'': 'student(A), professor(B)', 'true': 'publication(C, A), publication(C, B)'}, {'true,true': [3.33e-08, 0, 9], 'true,false': [1.301, 2, 11], 'false': [0.0, 18, 0]}], ['advisedby(A, B)', {'': 'student(A), professor(B)', 'true': 'publication(C, A), publication(C, B)'}, {'true,true': [0.0, 0, 9], 'true,false': [1.301, 2, 11], 'false': [0.0, 18, 0]}], ['advisedby(A, B)', {'': 'student(A), professor(B)', 'true': 'publication(C, A), publication(C, B)'}, {'true,true': [1.83e-08, 0, 9], 'true,false': [1.301, 2, 11], 'false': [5.27e-09, 18, 0]}], ['advisedby(A, B)', {'': 'professor(B), student(A)', 'true': 'publication(C, A), publication(C, B)'}, {'true,true': [0.0, 0, 9], 'true,false': [1.301, 2, 11], 'false': [0.0, 18, 0]}], ['advisedby(A, B)', {'': 'student(A), professor(B)', 'true': 'publication(C, A), publication(C, B)'}, {'true,true': [7.45e-09, 0, 9], 'true,false': [1.301, 2, 11], 'false': [3.73e-09, 18, 0]}], ['advisedby(A, B)', {'': 'professor(B), student(A)', 'true': 'publication(C, A), publication(C, B)'}, {'true,true': [0.0, 0, 9], 'true,false': [1.301, 2, 11], 'false': [0.0, 18, 0]}], ['advisedby(A, B)', {'': 'student(A), professor(B)', 'true': 'publication(C, A), publication(C, B)'}, {'true,true': [0.0, 0, 9], 'true,false': [1.301, 2, 11], 'false': [3.73e-09, 18, 0]}]]
[{'': [0.08264462809917356, -9.25185853854297e-18], 'true': [-2.9605947323337506e-16, 0.13017751479289916]}, {'': [0.08063200586027235, 3.0839528461809902e-18], 'true': [9.868649107779169e-17, 0.13017751479289957]}, {'': [0.07874151912392344, 1.3877787807814457e-17], 'true': [-1.4802973661668753e-16, 0.13017751479289946]}, {'': [0.07789770458547739, 0.0], 'true': [1.2335811384723962e-16, 0.13017751479289938]}, {'': [0.07764125846417015, 0.0], 'true': [-3.700743415417188e-17, 0.13017751479289943]}, {'': [0.0775792596848167, 1.5419764230904951e-18], 'true': [3.700743415417188e-17, 0.1301775147928994]}, {'': [0.07757245843873056, -1.5419764230904951e-18], 'true': [-2.4671622769447922e-17, 0.1301775147928994]}, {'': [0.07757700245374001, 7.709882115452476e-19], 'true': [6.1679056923619804e-18, 0.13017751479289943]}, {'': [0.07757946176858432, 0.0], 'true': [-3.0839528461809902e-18, 0.13017751479289938]}, {'': [0.07757644395816753, 7.709882115452476e-19], 'true': [0.0, 0.13017751479289943]}]


******************************************
Performing Theory Revision
******************************************
******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.952307
   AUC PR    = 0.931984
   CLL	      = -0.231667
   Precision = 0.885714 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.939394


Total learning time: 1.425 seconds
Total inference time: 0.723 seconds
AUC ROC: 0.952307
Total revision time: 1.425
Best scored revision CLL: -0.200825


Dataset: 1_imdb_uwcse, Fold: 2, Type: Transfer (trRDN-B), Time: 00:00:29
{'AUC ROC': 0.952307, 'AUC PR': 0.931984, 'CLL': -0.231667, 'Precision': [0.885714, 0.5], 'Recall': 1.0, 'F1': 0.939394, 'Learning time': 1.425, 'Inference time': 0.723, 'parameter_1.0': {'AUC ROC': 0.952307, 'AUC PR': 0.931984, 'CLL': -0.231667, 'Precision': [0.885714, 0.5], 'Recall': 1.0, 'F1': 0.939394, 'Learning time': 0.91, 'Inference time': 0.723}}


Starting fold 3

Target train facts examples: 162
Target train pos examples: 9
Target train neg examples: 9

Target test facts examples: 2225
Target test pos	 examples: 104
Target test neg examples: 104

Amount of data: 0.2
******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- actor(A), director(B).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


WILL Produced-Tree #1
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( yearsinprogram(A, C), yearsinprogram(B, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.8581489350995122;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else return -0.14185106490048777;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
WILL Produced-Tree #2
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( yearsinprogram(A, C), yearsinprogram(B, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.7194734122109545;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else return -0.12544463852839138;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
WILL Produced-Tree #3
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( yearsinprogram(A, C), yearsinprogram(B, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.5553664367462845;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else return -0.11231637819360639;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
WILL Produced-Tree #4
% FOR advisedby(A, B):
%   if ( student(A), professor(B) )
%   then if ( yearsinprogram(A, C), yearsinprogram(B, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.41751358415830997;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else return -0.10159632948783628;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
WILL Produced-Tree #5
% FOR advisedby(A, B):
%   if ( student(A), professor(B) )
%   then if ( yearsinprogram(A, C), yearsinprogram(B, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.32071184716014967;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else return -0.09269127618926096;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
WILL Produced-Tree #6
% FOR advisedby(A, B):
%   if ( student(A), professor(B) )
%   then if ( yearsinprogram(A, C), yearsinprogram(B, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.25517224256948945;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else return -0.08518475138839687;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
WILL Produced-Tree #7
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( yearsinprogram(A, C), yearsinprogram(B, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.20975771563253554;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else return -0.07877675473109173;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
WILL Produced-Tree #8
% FOR advisedby(A, B):
%   if ( student(A), professor(B) )
%   then if ( yearsinprogram(A, C), yearsinprogram(B, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.17709649774527736;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else return -0.07324622576333704;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
WILL Produced-Tree #9
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( yearsinprogram(A, C), yearsinprogram(B, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.15274385809367097;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else return -0.06842697784420272;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
WILL Produced-Tree #10
% FOR advisedby(A, B):
%   if ( student(A), professor(B) )
%   then if ( yearsinprogram(A, C), yearsinprogram(B, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.13400703000801117;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else return -0.0641918400820262;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */


Results
   AUC ROC   = 0.942308
   AUC PR    = 0.896552
   CLL	      = -0.213747
   Precision = 0.896552 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.945455


Total learning time: 0.723 seconds
Total inference time: 0.751 seconds
AUC ROC: 0.942308


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.094637
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 0.384 seconds
Parameter learned model CLL: -0.094637


Structure after Parameter Learning
[['advisedby(A, B)', {'': 'professor(B), student(A)', 'true': 'yearsinprogram(A, C), yearsinprogram(B, C)'}, {'true,true': [0.0, 0, 0], 'true,false': [0.0, 0, 1], 'false': [0.0, 1, 0]}], ['advisedby(A, B)', {'': 'professor(B), student(A)', 'true': 'yearsinprogram(A, C), yearsinprogram(B, C)'}, {'true,true': [0.0, 0, 0], 'true,false': [0.0, 0, 1], 'false': [0.0, 1, 0]}], ['advisedby(A, B)', {'': 'professor(B), student(A)', 'true': 'yearsinprogram(A, C), yearsinprogram(B, C)'}, {'true,true': [0.0, 0, 0], 'true,false': [0.0, 0, 1], 'false': [0.0, 1, 0]}], ['advisedby(A, B)', {'': 'student(A), professor(B)', 'true': 'yearsinprogram(A, C), yearsinprogram(B, C)'}, {'true,true': [0.0, 0, 0], 'true,false': [0.0, 0, 1], 'false': [0.0, 1, 0]}], ['advisedby(A, B)', {'': 'student(A), professor(B)', 'true': 'yearsinprogram(A, C), yearsinprogram(B, C)'}, {'true,true': [0.0, 0, 0], 'true,false': [0.0, 0, 1], 'false': [0.0, 1, 0]}], ['advisedby(A, B)', {'': 'student(A), professor(B)', 'true': 'yearsinprogram(A, C), yearsinprogram(B, C)'}, {'true,true': [0.0, 0, 0], 'true,false': [0.0, 0, 1], 'false': [0.0, 1, 0]}], ['advisedby(A, B)', {'': 'professor(B), student(A)', 'true': 'yearsinprogram(A, C), yearsinprogram(B, C)'}, {'true,true': [0.0, 0, 0], 'true,false': [0.0, 0, 1], 'false': [0.0, 1, 0]}], ['advisedby(A, B)', {'': 'student(A), professor(B)', 'true': 'yearsinprogram(A, C), yearsinprogram(B, C)'}, {'true,true': [0.0, 0, 0], 'true,false': [0.0, 0, 1], 'false': [0.0, 1, 0]}], ['advisedby(A, B)', {'': 'professor(B), student(A)', 'true': 'yearsinprogram(A, C), yearsinprogram(B, C)'}, {'true,true': [0.0, 0, 0], 'true,false': [0.0, 0, 1], 'false': [0.0, 1, 0]}], ['advisedby(A, B)', {'': 'student(A), professor(B)', 'true': 'yearsinprogram(A, C), yearsinprogram(B, C)'}, {'true,true': [0.0, 0, 0], 'true,false': [0.0, 0, 1], 'false': [0.0, 1, 0]}]]
[{'': [0.0, 0.0], 'true': [nan, 0.0]}, {'': [0.0, 0.0], 'true': [nan, 0.0]}, {'': [0.0, 0.0], 'true': [nan, 0.0]}, {'': [0.0, 0.0], 'true': [nan, 0.0]}, {'': [0.0, 0.0], 'true': [nan, 0.0]}, {'': [0.0, 0.0], 'true': [nan, 0.0]}, {'': [0.0, 0.0], 'true': [nan, 0.0]}, {'': [0.0, 0.0], 'true': [nan, 0.0]}, {'': [0.0, 0.0], 'true': [nan, 0.0]}, {'': [0.0, 0.0], 'true': [nan, 0.0]}]


******************************************
Performing Theory Revision
******************************************
******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.942308
   AUC PR    = 0.896552
   CLL	      = -0.213747
   Precision = 0.896552 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.945455


Total learning time: 1.107 seconds
Total inference time: 0.751 seconds
AUC ROC: 0.942308
Total revision time: 1.107
Best scored revision CLL: -0.094637


Dataset: 1_imdb_uwcse, Fold: 3, Type: Transfer (trRDN-B), Time: 00:00:31
{'AUC ROC': 0.942308, 'AUC PR': 0.896552, 'CLL': -0.213747, 'Precision': [0.896552, 0.5], 'Recall': 1.0, 'F1': 0.945455, 'Learning time': 1.107, 'Inference time': 0.751, 'parameter_0.2': {'AUC ROC': 0.942308, 'AUC PR': 0.896552, 'CLL': -0.213747, 'Precision': [0.896552, 0.5], 'Recall': 1.0, 'F1': 0.945455, 'Learning time': 0.723, 'Inference time': 0.751}}


Amount of data: 0.4
******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- actor(A), director(B).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


WILL Produced-Tree #1
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( yearsinprogram(A, C), yearsinprogram(B, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.6081489350995122;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   else return -0.14185106490048777;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
WILL Produced-Tree #2
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( yearsinprogram(A, C), yearsinprogram(B, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.5170719622367217;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   else return -0.12544463852839138;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
WILL Produced-Tree #3
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( yearsinprogram(A, C), yearsinprogram(B, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.41257245288266;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   else return -0.11231637819360639;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
WILL Produced-Tree #4
% FOR advisedby(A, B):
%   if ( student(A), professor(B) )
%   then if ( yearsinprogram(A, C), yearsinprogram(B, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.3151786576185065;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   else return -0.10159632948783628;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
WILL Produced-Tree #5
% FOR advisedby(A, B):
%   if ( student(A), professor(B) )
%   then if ( yearsinprogram(A, C), yearsinprogram(B, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.23676009386434207;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   else return -0.09269127618926096;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
WILL Produced-Tree #6
% FOR advisedby(A, B):
%   if ( student(A), professor(B) )
%   then if ( yearsinprogram(A, C), yearsinprogram(B, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.1780694542720751;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   else return -0.08518475138839687;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
WILL Produced-Tree #7
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( yearsinprogram(A, C), yearsinprogram(B, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.13513671764223453;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   else return -0.07877675473109173;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
WILL Produced-Tree #8
% FOR advisedby(A, B):
%   if ( student(A), professor(B) )
%   then if ( yearsinprogram(A, C), yearsinprogram(B, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.103671751136855;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   else return -0.07324622576333704;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
WILL Produced-Tree #9
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( yearsinprogram(A, C), yearsinprogram(B, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.08034833303035915;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   else return -0.06842697784420272;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
WILL Produced-Tree #10
% FOR advisedby(A, B):
%   if ( student(A), professor(B) )
%   then if ( yearsinprogram(A, C), yearsinprogram(B, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.06282214181758172;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   else return -0.0641918400820262;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */


Results
   AUC ROC   = 0.942308
   AUC PR    = 0.896552
   CLL	      = -0.275102
   Precision = 0.896552 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.945455


Total learning time: 0.777 seconds
Total inference time: 0.722 seconds
AUC ROC: 0.942308


Results scoring model
   AUC ROC   = 0.833333
   AUC PR    = 0.75
   CLL	      = -0.399699
   Precision = 0.75 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.857143


Total scoring time: 0.407 seconds
Parameter learned model CLL: -0.399699


Structure after Parameter Learning
[['advisedby(A, B)', {'': 'professor(B), student(A)', 'true': 'yearsinprogram(A, C), yearsinprogram(B, C)'}, {'true,true': [0.0, 0, 0], 'true,false': [0.866, 1, 3], 'false': [0.0, 2, 0]}], ['advisedby(A, B)', {'': 'professor(B), student(A)', 'true': 'yearsinprogram(A, C), yearsinprogram(B, C)'}, {'true,true': [0.0, 0, 0], 'true,false': [0.866, 1, 3], 'false': [0.0, 2, 0]}], ['advisedby(A, B)', {'': 'professor(B), student(A)', 'true': 'yearsinprogram(A, C), yearsinprogram(B, C)'}, {'true,true': [0.0, 0, 0], 'true,false': [0.866, 1, 3], 'false': [0.0, 2, 0]}], ['advisedby(A, B)', {'': 'student(A), professor(B)', 'true': 'yearsinprogram(A, C), yearsinprogram(B, C)'}, {'true,true': [0.0, 0, 0], 'true,false': [0.866, 1, 3], 'false': [0.0, 2, 0]}], ['advisedby(A, B)', {'': 'student(A), professor(B)', 'true': 'yearsinprogram(A, C), yearsinprogram(B, C)'}, {'true,true': [0.0, 0, 0], 'true,false': [0.866, 1, 3], 'false': [0.0, 2, 0]}], ['advisedby(A, B)', {'': 'student(A), professor(B)', 'true': 'yearsinprogram(A, C), yearsinprogram(B, C)'}, {'true,true': [0.0, 0, 0], 'true,false': [0.866, 1, 3], 'false': [0.0, 2, 0]}], ['advisedby(A, B)', {'': 'professor(B), student(A)', 'true': 'yearsinprogram(A, C), yearsinprogram(B, C)'}, {'true,true': [0.0, 0, 0], 'true,false': [0.866, 1, 3], 'false': [0.0, 2, 0]}], ['advisedby(A, B)', {'': 'student(A), professor(B)', 'true': 'yearsinprogram(A, C), yearsinprogram(B, C)'}, {'true,true': [0.0, 0, 0], 'true,false': [0.866, 1, 3], 'false': [0.0, 2, 0]}], ['advisedby(A, B)', {'': 'professor(B), student(A)', 'true': 'yearsinprogram(A, C), yearsinprogram(B, C)'}, {'true,true': [0.0, 0, 0], 'true,false': [0.866, 1, 3], 'false': [0.0, 2, 0]}], ['advisedby(A, B)', {'': 'student(A), professor(B)', 'true': 'yearsinprogram(A, C), yearsinprogram(B, C)'}, {'true,true': [0.0, 0, 0], 'true,false': [0.866, 1, 3], 'false': [0.0, 2, 0]}]]
[{'': [0.18750000000000006, 0.0], 'true': [nan, 0.18750000000000006]}, {'': [0.18750000000000006, 0.0], 'true': [nan, 0.18750000000000006]}, {'': [0.18750000000000003, 0.0], 'true': [nan, 0.18750000000000003]}, {'': [0.18750000000000003, 0.0], 'true': [nan, 0.18750000000000003]}, {'': [0.1875, 0.0], 'true': [nan, 0.1875]}, {'': [0.1875, 0.0], 'true': [nan, 0.1875]}, {'': [0.1875, 0.0], 'true': [nan, 0.1875]}, {'': [0.1875, 0.0], 'true': [nan, 0.1875]}, {'': [0.18749999999999997, 0.0], 'true': [nan, 0.18749999999999997]}, {'': [0.1875, 0.0], 'true': [nan, 0.1875]}]


******************************************
Performing Theory Revision
******************************************
******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.942308
   AUC PR    = 0.896552
   CLL	      = -0.275102
   Precision = 0.896552 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.945455


Total learning time: 1.184 seconds
Total inference time: 0.722 seconds
AUC ROC: 0.942308
Total revision time: 1.184
Best scored revision CLL: -0.399699


Dataset: 1_imdb_uwcse, Fold: 3, Type: Transfer (trRDN-B), Time: 00:00:34
{'AUC ROC': 0.942308, 'AUC PR': 0.896552, 'CLL': -0.275102, 'Precision': [0.896552, 0.5], 'Recall': 1.0, 'F1': 0.945455, 'Learning time': 1.184, 'Inference time': 0.722, 'parameter_0.4': {'AUC ROC': 0.942308, 'AUC PR': 0.896552, 'CLL': -0.275102, 'Precision': [0.896552, 0.5], 'Recall': 1.0, 'F1': 0.945455, 'Learning time': 0.777, 'Inference time': 0.722}}


Amount of data: 0.6
******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- actor(A), director(B).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


WILL Produced-Tree #1
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( yearsinprogram(A, C), yearsinprogram(B, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.6914822684328455;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   else return -0.14185106490048777;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #2
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( yearsinprogram(A, C), yearsinprogram(B, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.5851860008555361;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   else return -0.12544463852839138;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #3
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( yearsinprogram(A, C), yearsinprogram(B, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.46125983910675533;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   else return -0.11231637819360639;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #4
% FOR advisedby(A, B):
%   if ( student(A), professor(B) )
%   then if ( yearsinprogram(A, C), yearsinprogram(B, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.3488463256948422;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   else return -0.10159632948783628;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #5
% FOR advisedby(A, B):
%   if ( student(A), professor(B) )
%   then if ( yearsinprogram(A, C), yearsinprogram(B, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.26212705508354184;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   else return -0.09269127618926096;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #6
% FOR advisedby(A, B):
%   if ( student(A), professor(B) )
%   then if ( yearsinprogram(A, C), yearsinprogram(B, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.19945264276423433;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   else return -0.08518475138839687;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #7
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( yearsinprogram(A, C), yearsinprogram(B, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.15451336627983223;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   else return -0.07877675473109173;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #8
% FOR advisedby(A, B):
%   if ( student(A), professor(B) )
%   then if ( yearsinprogram(A, C), yearsinprogram(B, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.12179491558002796;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   else return -0.07324622576333704;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #9
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( yearsinprogram(A, C), yearsinprogram(B, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.09745354768081688;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   else return -0.06842697784420272;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #10
% FOR advisedby(A, B):
%   if ( student(A), professor(B) )
%   then if ( yearsinprogram(A, C), yearsinprogram(B, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.07895233872555124;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   else return -0.0641918400820262;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */


Results
   AUC ROC   = 0.942308
   AUC PR    = 0.896552
   CLL	      = -0.243561
   Precision = 0.896552 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.945455


Total learning time: 0.791 seconds
Total inference time: 0.751 seconds
AUC ROC: 0.942308


Results scoring model
   AUC ROC   = 0.9
   AUC PR    = 0.833333
   CLL	      = -0.302866
   Precision = 0.833333 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.909091


Total scoring time: 0.404 seconds
Parameter learned model CLL: -0.302866


Structure after Parameter Learning
[['advisedby(A, B)', {'': 'professor(B), student(A)', 'true': 'yearsinprogram(A, C), yearsinprogram(B, C)'}, {'true,true': [0.0, 0, 0], 'true,false': [0.913, 1, 5], 'false': [0.0, 4, 0]}], ['advisedby(A, B)', {'': 'professor(B), student(A)', 'true': 'yearsinprogram(A, C), yearsinprogram(B, C)'}, {'true,true': [0.0, 0, 0], 'true,false': [0.913, 1, 5], 'false': [0.0, 4, 0]}], ['advisedby(A, B)', {'': 'professor(B), student(A)', 'true': 'yearsinprogram(A, C), yearsinprogram(B, C)'}, {'true,true': [0.0, 0, 0], 'true,false': [0.913, 1, 5], 'false': [0.0, 4, 0]}], ['advisedby(A, B)', {'': 'student(A), professor(B)', 'true': 'yearsinprogram(A, C), yearsinprogram(B, C)'}, {'true,true': [0.0, 0, 0], 'true,false': [0.913, 1, 5], 'false': [0.0, 4, 0]}], ['advisedby(A, B)', {'': 'student(A), professor(B)', 'true': 'yearsinprogram(A, C), yearsinprogram(B, C)'}, {'true,true': [0.0, 0, 0], 'true,false': [0.913, 1, 5], 'false': [0.0, 4, 0]}], ['advisedby(A, B)', {'': 'student(A), professor(B)', 'true': 'yearsinprogram(A, C), yearsinprogram(B, C)'}, {'true,true': [0.0, 0, 0], 'true,false': [0.913, 1, 5], 'false': [0.0, 4, 0]}], ['advisedby(A, B)', {'': 'professor(B), student(A)', 'true': 'yearsinprogram(A, C), yearsinprogram(B, C)'}, {'true,true': [0.0, 0, 0], 'true,false': [0.913, 1, 5], 'false': [0.0, 4, 0]}], ['advisedby(A, B)', {'': 'student(A), professor(B)', 'true': 'yearsinprogram(A, C), yearsinprogram(B, C)'}, {'true,true': [0.0, 0, 0], 'true,false': [0.913, 1, 5], 'false': [0.0, 4, 0]}], ['advisedby(A, B)', {'': 'professor(B), student(A)', 'true': 'yearsinprogram(A, C), yearsinprogram(B, C)'}, {'true,true': [0.0, 0, 0], 'true,false': [0.913, 1, 5], 'false': [0.0, 4, 0]}], ['advisedby(A, B)', {'': 'student(A), professor(B)', 'true': 'yearsinprogram(A, C), yearsinprogram(B, C)'}, {'true,true': [0.0, 0, 0], 'true,false': [0.913, 1, 5], 'false': [0.0, 4, 0]}]]
[{'': [0.1388888888888887, 0.0], 'true': [nan, 0.1388888888888887]}, {'': [0.13888888888888884, 0.0], 'true': [nan, 0.13888888888888884]}, {'': [0.13888888888888887, 0.0], 'true': [nan, 0.13888888888888887]}, {'': [0.13888888888888898, 0.0], 'true': [nan, 0.13888888888888898]}, {'': [0.13888888888888884, 0.0], 'true': [nan, 0.13888888888888884]}, {'': [0.13888888888888887, 0.0], 'true': [nan, 0.13888888888888887]}, {'': [0.1388888888888889, 0.0], 'true': [nan, 0.1388888888888889]}, {'': [0.13888888888888887, 0.0], 'true': [nan, 0.13888888888888887]}, {'': [0.13888888888888892, 0.0], 'true': [nan, 0.13888888888888892]}, {'': [0.13888888888888887, 0.0], 'true': [nan, 0.13888888888888887]}]


******************************************
Performing Theory Revision
******************************************
******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.942308
   AUC PR    = 0.896552
   CLL	      = -0.243561
   Precision = 0.896552 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.945455


Total learning time: 1.195 seconds
Total inference time: 0.751 seconds
AUC ROC: 0.942308
Total revision time: 1.195
Best scored revision CLL: -0.302866


Dataset: 1_imdb_uwcse, Fold: 3, Type: Transfer (trRDN-B), Time: 00:00:36
{'AUC ROC': 0.942308, 'AUC PR': 0.896552, 'CLL': -0.243561, 'Precision': [0.896552, 0.5], 'Recall': 1.0, 'F1': 0.945455, 'Learning time': 1.195, 'Inference time': 0.751, 'parameter_0.6': {'AUC ROC': 0.942308, 'AUC PR': 0.896552, 'CLL': -0.243561, 'Precision': [0.896552, 0.5], 'Recall': 1.0, 'F1': 0.945455, 'Learning time': 0.791, 'Inference time': 0.751}}


Amount of data: 0.8
******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- actor(A), director(B).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


WILL Produced-Tree #1
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( yearsinprogram(A, C), yearsinprogram(B, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.6359267128772901;  // std dev = 1.247, 9.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=7 */
%   else return -0.14185106490048777;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #2
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( yearsinprogram(A, C), yearsinprogram(B, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.5398498420741675;  // std dev = 1.247, 9.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=7 */
%   else return -0.12544463852839138;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #3
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( yearsinprogram(A, C), yearsinprogram(B, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.4289562725350853;  // std dev = 1.247, 9.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=7 */
%   else return -0.11231637819360638;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #4
% FOR advisedby(A, B):
%   if ( student(A), professor(B) )
%   then if ( yearsinprogram(A, C), yearsinprogram(B, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.32644004768013724;  // std dev = 1.247, 9.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=7 */
%   else return -0.10159632948783633;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #5
% FOR advisedby(A, B):
%   if ( student(A), professor(B) )
%   then if ( yearsinprogram(A, C), yearsinprogram(B, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.24503149911444544;  // std dev = 1.247, 9.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=7 */
%   else return -0.09269127618926098;  // std dev = 2.63e-09, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #6
% FOR advisedby(A, B):
%   if ( student(A), professor(B) )
%   then if ( yearsinprogram(A, C), yearsinprogram(B, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.18482045881522163;  // std dev = 1.247, 9.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=7 */
%   else return -0.08518475138839687;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #7
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( yearsinprogram(A, C), yearsinprogram(B, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.1410881440687913;  // std dev = 1.247, 9.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=7 */
%   else return -0.07877675473109177;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #8
% FOR advisedby(A, B):
%   if ( student(A), professor(B) )
%   then if ( yearsinprogram(A, C), yearsinprogram(B, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.10912169797108993;  // std dev = 1.247, 9.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=7 */
%   else return -0.07324622576333703;  // std dev = 2.63e-09, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #9
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( yearsinprogram(A, C), yearsinprogram(B, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.08540523411308514;  // std dev = 1.247, 9.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=7 */
%   else return -0.06842697784420272;  // std dev = 1.86e-09, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #10
% FOR advisedby(A, B):
%   if ( student(A), professor(B) )
%   then if ( yearsinprogram(A, C), yearsinprogram(B, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.0675192639640355;  // std dev = 1.247, 9.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=7 */
%   else return -0.0641918400820262;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */


Results
   AUC ROC   = 0.942308
   AUC PR    = 0.896552
   CLL	      = -0.263351
   Precision = 0.896552 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.945455


Total learning time: 0.797 seconds
Total inference time: 0.743 seconds
AUC ROC: 0.942308


Results scoring model
   AUC ROC   = 0.857143
   AUC PR    = 0.777778
   CLL	      = -0.367664
   Precision = 0.777778 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.875


Total scoring time: 0.447 seconds
Parameter learned model CLL: -0.367664


Structure after Parameter Learning
[['advisedby(A, B)', {'': 'professor(B), student(A)', 'true': 'yearsinprogram(A, C), yearsinprogram(B, C)'}, {'true,true': [0.0, 0, 0], 'true,false': [1.247, 2, 7], 'false': [0.0, 5, 0]}], ['advisedby(A, B)', {'': 'professor(B), student(A)', 'true': 'yearsinprogram(A, C), yearsinprogram(B, C)'}, {'true,true': [0.0, 0, 0], 'true,false': [1.247, 2, 7], 'false': [0.0, 5, 0]}], ['advisedby(A, B)', {'': 'professor(B), student(A)', 'true': 'yearsinprogram(A, C), yearsinprogram(B, C)'}, {'true,true': [0.0, 0, 0], 'true,false': [1.247, 2, 7], 'false': [0.0, 5, 0]}], ['advisedby(A, B)', {'': 'student(A), professor(B)', 'true': 'yearsinprogram(A, C), yearsinprogram(B, C)'}, {'true,true': [0.0, 0, 0], 'true,false': [1.247, 2, 7], 'false': [0.0, 5, 0]}], ['advisedby(A, B)', {'': 'student(A), professor(B)', 'true': 'yearsinprogram(A, C), yearsinprogram(B, C)'}, {'true,true': [0.0, 0, 0], 'true,false': [1.247, 2, 7], 'false': [2.63e-09, 5, 0]}], ['advisedby(A, B)', {'': 'student(A), professor(B)', 'true': 'yearsinprogram(A, C), yearsinprogram(B, C)'}, {'true,true': [0.0, 0, 0], 'true,false': [1.247, 2, 7], 'false': [0.0, 5, 0]}], ['advisedby(A, B)', {'': 'professor(B), student(A)', 'true': 'yearsinprogram(A, C), yearsinprogram(B, C)'}, {'true,true': [0.0, 0, 0], 'true,false': [1.247, 2, 7], 'false': [0.0, 5, 0]}], ['advisedby(A, B)', {'': 'student(A), professor(B)', 'true': 'yearsinprogram(A, C), yearsinprogram(B, C)'}, {'true,true': [0.0, 0, 0], 'true,false': [1.247, 2, 7], 'false': [2.63e-09, 5, 0]}], ['advisedby(A, B)', {'': 'professor(B), student(A)', 'true': 'yearsinprogram(A, C), yearsinprogram(B, C)'}, {'true,true': [0.0, 0, 0], 'true,false': [1.247, 2, 7], 'false': [1.86e-09, 5, 0]}], ['advisedby(A, B)', {'': 'student(A), professor(B)', 'true': 'yearsinprogram(A, C), yearsinprogram(B, C)'}, {'true,true': [0.0, 0, 0], 'true,false': [1.247, 2, 7], 'false': [0.0, 5, 0]}]]
[{'': [0.17283950617283939, -2.7755575615628915e-18], 'true': [nan, 0.17283950617283939]}, {'': [0.1728395061728397, 0.0], 'true': [nan, 0.1728395061728397]}, {'': [0.17283950617283944, 0.0], 'true': [nan, 0.17283950617283944]}, {'': [0.17283950617283966, 0.0], 'true': [nan, 0.17283950617283966]}, {'': [0.1728395061728395, 1.3877787807814458e-18], 'true': [nan, 0.1728395061728395]}, {'': [0.1728395061728395, 0.0], 'true': [nan, 0.1728395061728395]}, {'': [0.1728395061728395, -1.3877787807814458e-18], 'true': [nan, 0.1728395061728395]}, {'': [0.1728395061728395, 1.3877787807814458e-18], 'true': [nan, 0.1728395061728395]}, {'': [0.1728395061728395, 6.938893903907229e-19], 'true': [nan, 0.1728395061728395]}, {'': [0.1728395061728395, 0.0], 'true': [nan, 0.1728395061728395]}]


******************************************
Performing Theory Revision
******************************************
******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.942308
   AUC PR    = 0.896552
   CLL	      = -0.263351
   Precision = 0.896552 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.945455


Total learning time: 1.244 seconds
Total inference time: 0.743 seconds
AUC ROC: 0.942308
Total revision time: 1.244
Best scored revision CLL: -0.367664


Dataset: 1_imdb_uwcse, Fold: 3, Type: Transfer (trRDN-B), Time: 00:00:38
{'AUC ROC': 0.942308, 'AUC PR': 0.896552, 'CLL': -0.263351, 'Precision': [0.896552, 0.5], 'Recall': 1.0, 'F1': 0.945455, 'Learning time': 1.244, 'Inference time': 0.743, 'parameter_0.8': {'AUC ROC': 0.942308, 'AUC PR': 0.896552, 'CLL': -0.263351, 'Precision': [0.896552, 0.5], 'Recall': 1.0, 'F1': 0.945455, 'Learning time': 0.797, 'Inference time': 0.743}}


Amount of data: 1.0
******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- actor(A), director(B).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


WILL Produced-Tree #1
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( yearsinprogram(A, C), yearsinprogram(B, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.6763307532813305;  // std dev = 1.279, 11.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=9 */
%   else return -0.1418510649004878;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
WILL Produced-Tree #2
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( yearsinprogram(A, C), yearsinprogram(B, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.5728505077589573;  // std dev = 1.279, 11.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=9 */
%   else return -0.12544463852839138;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
WILL Produced-Tree #3
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( yearsinprogram(A, C), yearsinprogram(B, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.45250734201965837;  // std dev = 1.279, 11.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=9 */
%   else return -0.11231637819360639;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
WILL Produced-Tree #4
% FOR advisedby(A, B):
%   if ( student(A), professor(B) )
%   then if ( yearsinprogram(A, C), yearsinprogram(B, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.34273989085368034;  // std dev = 1.279, 11.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=9 */
%   else return -0.10159632948783628;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
WILL Produced-Tree #5
% FOR advisedby(A, B):
%   if ( student(A), professor(B) )
%   then if ( yearsinprogram(A, C), yearsinprogram(B, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.2573771265051453;  // std dev = 1.279, 11.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=9 */
%   else return -0.09269127618926096;  // std dev = 2.63e-09, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
WILL Produced-Tree #6
% FOR advisedby(A, B):
%   if ( student(A), professor(B) )
%   then if ( yearsinprogram(A, C), yearsinprogram(B, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.19529825339842233;  // std dev = 1.279, 11.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=9 */
%   else return -0.08518475138839687;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
WILL Produced-Tree #7
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( yearsinprogram(A, C), yearsinprogram(B, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.15063646694077695;  // std dev = 1.279, 11.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=9 */
%   else return -0.07877675473109173;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
WILL Produced-Tree #8
% FOR advisedby(A, B):
%   if ( student(A), professor(B) )
%   then if ( yearsinprogram(A, C), yearsinprogram(B, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.11808890552787804;  // std dev = 1.279, 11.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=9 */
%   else return -0.07324622576333704;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
WILL Produced-Tree #9
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( yearsinprogram(A, C), yearsinprogram(B, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.09389442014327215;  // std dev = 1.279, 11.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=9 */
%   else return -0.06842697784420272;  // std dev = 2.63e-09, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
WILL Produced-Tree #10
% FOR advisedby(A, B):
%   if ( student(A), professor(B) )
%   then if ( yearsinprogram(A, C), yearsinprogram(B, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.07554408412491875;  // std dev = 1.279, 11.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=9 */
%   else return -0.0641918400820262;  // std dev = 1.86e-09, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */


Results
   AUC ROC   = 0.942308
   AUC PR    = 0.896552
   CLL	      = -0.248469
   Precision = 0.896552 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.945455


Total learning time: 0.827 seconds
Total inference time: 0.749 seconds
AUC ROC: 0.942308


Results scoring model
   AUC ROC   = 0.888889
   AUC PR    = 0.818182
   CLL	      = -0.320668
   Precision = 0.818182 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.9


Total scoring time: 0.44 seconds
Parameter learned model CLL: -0.320668


Structure after Parameter Learning
[['advisedby(A, B)', {'': 'professor(B), student(A)', 'true': 'yearsinprogram(A, C), yearsinprogram(B, C)'}, {'true,true': [0.0, 0, 0], 'true,false': [1.279, 2, 9], 'false': [0.0, 7, 0]}], ['advisedby(A, B)', {'': 'professor(B), student(A)', 'true': 'yearsinprogram(A, C), yearsinprogram(B, C)'}, {'true,true': [0.0, 0, 0], 'true,false': [1.279, 2, 9], 'false': [0.0, 7, 0]}], ['advisedby(A, B)', {'': 'professor(B), student(A)', 'true': 'yearsinprogram(A, C), yearsinprogram(B, C)'}, {'true,true': [0.0, 0, 0], 'true,false': [1.279, 2, 9], 'false': [0.0, 7, 0]}], ['advisedby(A, B)', {'': 'student(A), professor(B)', 'true': 'yearsinprogram(A, C), yearsinprogram(B, C)'}, {'true,true': [0.0, 0, 0], 'true,false': [1.279, 2, 9], 'false': [0.0, 7, 0]}], ['advisedby(A, B)', {'': 'student(A), professor(B)', 'true': 'yearsinprogram(A, C), yearsinprogram(B, C)'}, {'true,true': [0.0, 0, 0], 'true,false': [1.279, 2, 9], 'false': [2.63e-09, 7, 0]}], ['advisedby(A, B)', {'': 'student(A), professor(B)', 'true': 'yearsinprogram(A, C), yearsinprogram(B, C)'}, {'true,true': [0.0, 0, 0], 'true,false': [1.279, 2, 9], 'false': [0.0, 7, 0]}], ['advisedby(A, B)', {'': 'professor(B), student(A)', 'true': 'yearsinprogram(A, C), yearsinprogram(B, C)'}, {'true,true': [0.0, 0, 0], 'true,false': [1.279, 2, 9], 'false': [0.0, 7, 0]}], ['advisedby(A, B)', {'': 'student(A), professor(B)', 'true': 'yearsinprogram(A, C), yearsinprogram(B, C)'}, {'true,true': [0.0, 0, 0], 'true,false': [1.279, 2, 9], 'false': [0.0, 7, 0]}], ['advisedby(A, B)', {'': 'professor(B), student(A)', 'true': 'yearsinprogram(A, C), yearsinprogram(B, C)'}, {'true,true': [0.0, 0, 0], 'true,false': [1.279, 2, 9], 'false': [2.63e-09, 7, 0]}], ['advisedby(A, B)', {'': 'student(A), professor(B)', 'true': 'yearsinprogram(A, C), yearsinprogram(B, C)'}, {'true,true': [0.0, 0, 0], 'true,false': [1.279, 2, 9], 'false': [1.86e-09, 7, 0]}]]
[{'': [0.14876033057851218, -7.93016446160826e-18], 'true': [nan, 0.14876033057851218]}, {'': [0.1487603305785126, -1.982541115402065e-18], 'true': [nan, 0.1487603305785126]}, {'': [0.14876033057851237, -1.982541115402065e-18], 'true': [nan, 0.14876033057851237]}, {'': [0.14876033057851243, -1.982541115402065e-18], 'true': [nan, 0.14876033057851243]}, {'': [0.14876033057851243, 9.912705577010326e-19], 'true': [nan, 0.14876033057851243]}, {'': [0.14876033057851243, -9.912705577010326e-19], 'true': [nan, 0.14876033057851243]}, {'': [0.14876033057851237, -9.912705577010326e-19], 'true': [nan, 0.14876033057851237]}, {'': [0.14876033057851237, 0.0], 'true': [nan, 0.14876033057851237]}, {'': [0.1487603305785124, 9.912705577010326e-19], 'true': [nan, 0.1487603305785124]}, {'': [0.14876033057851237, 4.956352788505163e-19], 'true': [nan, 0.14876033057851237]}]


******************************************
Performing Theory Revision
******************************************
******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.942308
   AUC PR    = 0.896552
   CLL	      = -0.248469
   Precision = 0.896552 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.945455


Total learning time: 1.267 seconds
Total inference time: 0.749 seconds
AUC ROC: 0.942308
Total revision time: 1.267
Best scored revision CLL: -0.320668


Dataset: 1_imdb_uwcse, Fold: 3, Type: Transfer (trRDN-B), Time: 00:00:40
{'AUC ROC': 0.942308, 'AUC PR': 0.896552, 'CLL': -0.248469, 'Precision': [0.896552, 0.5], 'Recall': 1.0, 'F1': 0.945455, 'Learning time': 1.267, 'Inference time': 0.749, 'parameter_1.0': {'AUC ROC': 0.942308, 'AUC PR': 0.896552, 'CLL': -0.248469, 'Precision': [0.896552, 0.5], 'Recall': 1.0, 'F1': 0.945455, 'Learning time': 0.827, 'Inference time': 0.749}}


Starting fold 4

Target train facts examples: 681
Target train pos examples: 33
Target train neg examples: 33

Target test facts examples: 1706
Target test pos	 examples: 80
Target test neg examples: 80

Amount of data: 0.2
******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- actor(A), director(B).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


WILL Produced-Tree #1
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( publication(C, A), publication(C, B) )
%   | then return 0.8581489350995121;  // std dev = 2.11e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return 0.6081489350995122;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   else return -0.14185106490048777;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #2
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( publication(C, A), publication(C, B) )
%   | then return 0.7194734122109545;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return 0.5170719622367217;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   else return -0.12544463852839138;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #3
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( publication(C, A), publication(C, B) )
%   | then return 0.5553664367462845;  // std dev = 1.05e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return 0.41257245288266;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   else return -0.11231637819360638;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #4
% FOR advisedby(A, B):
%   if ( student(A), professor(B) )
%   then if ( publication(C, A), publication(C, B) )
%   | then return 0.41751358415830997;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return 0.3151786576185065;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   else return -0.10159632948783633;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #5
% FOR advisedby(A, B):
%   if ( student(A), professor(B) )
%   then if ( publication(C, A), publication(C, B) )
%   | then return 0.32071184716014967;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return 0.23676009386434205;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   else return -0.09269127618926098;  // std dev = 2.63e-09, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #6
% FOR advisedby(A, B):
%   if ( student(A), professor(B) )
%   then if ( publication(C, A), publication(C, B) )
%   | then return 0.25517224256948945;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return 0.1780694542720751;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   else return -0.08518475138839687;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #7
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( publication(C, A), publication(C, B) )
%   | then return 0.20975771563253554;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return 0.13513671764223456;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   else return -0.07877675473109177;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #8
% FOR advisedby(A, B):
%   if ( student(A), professor(B) )
%   then if ( publication(C, A), publication(C, B) )
%   | then return 0.17709649774527736;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return 0.103671751136855;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   else return -0.07324622576333703;  // std dev = 2.63e-09, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #9
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( publication(C, A), publication(C, B) )
%   | then return 0.15274385809367097;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return 0.08034833303035915;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   else return -0.06842697784420272;  // std dev = 1.86e-09, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #10
% FOR advisedby(A, B):
%   if ( student(A), professor(B) )
%   then if ( publication(C, A), publication(C, B) )
%   | then return 0.13400703000801117;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return 0.06282214181758172;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   else return -0.0641918400820262;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */


Results
   AUC ROC   = 0.959375
   AUC PR    = 0.95045
   CLL	      = -0.240523
   Precision = 0.888889 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.941176


Total learning time: 0.804 seconds
Total inference time: 0.717 seconds
AUC ROC: 0.959375


Results scoring model
   AUC ROC   = 0.958333
   AUC PR    = 0.955667
   CLL	      = -0.247168
   Precision = 0.857143 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.923077


Total scoring time: 0.479 seconds
Parameter learned model CLL: -0.247168


Structure after Parameter Learning
[['advisedby(A, B)', {'': 'professor(B), student(A)', 'true': 'publication(C, A), publication(C, B)'}, {'true,true': [2.11e-08, 0, 3], 'true,false': [0.866, 1, 3], 'false': [0.0, 5, 0]}], ['advisedby(A, B)', {'': 'professor(B), student(A)', 'true': 'publication(C, A), publication(C, B)'}, {'true,true': [0.0, 0, 3], 'true,false': [0.866, 1, 3], 'false': [0.0, 5, 0]}], ['advisedby(A, B)', {'': 'professor(B), student(A)', 'true': 'publication(C, A), publication(C, B)'}, {'true,true': [1.05e-08, 0, 3], 'true,false': [0.866, 1, 3], 'false': [0.0, 5, 0]}], ['advisedby(A, B)', {'': 'student(A), professor(B)', 'true': 'publication(C, A), publication(C, B)'}, {'true,true': [0.0, 0, 3], 'true,false': [0.866, 1, 3], 'false': [0.0, 5, 0]}], ['advisedby(A, B)', {'': 'student(A), professor(B)', 'true': 'publication(C, A), publication(C, B)'}, {'true,true': [0.0, 0, 3], 'true,false': [0.866, 1, 3], 'false': [2.63e-09, 5, 0]}], ['advisedby(A, B)', {'': 'student(A), professor(B)', 'true': 'publication(C, A), publication(C, B)'}, {'true,true': [0.0, 0, 3], 'true,false': [0.866, 1, 3], 'false': [0.0, 5, 0]}], ['advisedby(A, B)', {'': 'professor(B), student(A)', 'true': 'publication(C, A), publication(C, B)'}, {'true,true': [0.0, 0, 3], 'true,false': [0.866, 1, 3], 'false': [0.0, 5, 0]}], ['advisedby(A, B)', {'': 'student(A), professor(B)', 'true': 'publication(C, A), publication(C, B)'}, {'true,true': [0.0, 0, 3], 'true,false': [0.866, 1, 3], 'false': [2.63e-09, 5, 0]}], ['advisedby(A, B)', {'': 'professor(B), student(A)', 'true': 'publication(C, A), publication(C, B)'}, {'true,true': [0.0, 0, 3], 'true,false': [0.866, 1, 3], 'false': [1.86e-09, 5, 0]}], ['advisedby(A, B)', {'': 'student(A), professor(B)', 'true': 'publication(C, A), publication(C, B)'}, {'true,true': [0.0, 0, 3], 'true,false': [0.866, 1, 3], 'false': [0.0, 5, 0]}]]
[{'': [0.12244897959183662, -2.7755575615628915e-18], 'true': [1.4802973661668753e-16, 0.18750000000000006]}, {'': [0.1171754319065319, 0.0], 'true': [0.0, 0.18750000000000006]}, {'': [0.1121363563659538, 0.0], 'true': [3.700743415417188e-17, 0.18749999999999997]}, {'': [0.10970753563834458, 0.0], 'true': [-3.700743415417188e-17, 0.18750000000000003]}, {'': [0.1088688727056588, 1.3877787807814458e-18], 'true': [0.0, 0.18750000000000003]}, {'': [0.10859873631752714, 0.0], 'true': [0.0, 0.1875]}, {'': [0.10850652081822085, -1.3877787807814458e-18], 'true': [0.0, 0.1875]}, {'': [0.10846314940763535, 1.3877787807814458e-18], 'true': [0.0, 0.1875]}, {'': [0.10842639478755738, 6.938893903907229e-19], 'true': [-4.625929269271485e-18, 0.18749999999999997]}, {'': [0.10838382570775935, 0.0], 'true': [-2.3129646346357427e-18, 0.18750000000000003]}]


******************************************
Performing Theory Revision
******************************************
******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.959375
   AUC PR    = 0.95045
   CLL	      = -0.240523
   Precision = 0.888889 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.941176


Total learning time: 1.283 seconds
Total inference time: 0.717 seconds
AUC ROC: 0.959375
Total revision time: 1.283
Best scored revision CLL: -0.247168


Dataset: 1_imdb_uwcse, Fold: 4, Type: Transfer (trRDN-B), Time: 00:00:43
{'AUC ROC': 0.959375, 'AUC PR': 0.95045, 'CLL': -0.240523, 'Precision': [0.888889, 0.5], 'Recall': 1.0, 'F1': 0.941176, 'Learning time': 1.283, 'Inference time': 0.717, 'parameter_0.2': {'AUC ROC': 0.959375, 'AUC PR': 0.95045, 'CLL': -0.240523, 'Precision': [0.888889, 0.5], 'Recall': 1.0, 'F1': 0.941176, 'Learning time': 0.804, 'Inference time': 0.717}}


Amount of data: 0.4
******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- actor(A), director(B).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


WILL Produced-Tree #1
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( publication(C, A), publication(C, B) )
%   | then return 0.8581489350995123;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else return 0.7152917922423693;  // std dev = 0.926, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   else return -0.1418510649004878;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
WILL Produced-Tree #2
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( publication(C, A), publication(C, B) )
%   | then return 0.7194734122109543;  // std dev = 2.11e-08, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else return 0.6045267906174346;  // std dev = 0.926, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   else return -0.12544463852839138;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
WILL Produced-Tree #3
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( publication(C, A), publication(C, B) )
%   | then return 0.5553664367462846;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else return 0.4749335700127619;  // std dev = 0.926, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   else return -0.11231637819360639;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
WILL Produced-Tree #4
% FOR advisedby(A, B):
%   if ( student(A), professor(B) )
%   then if ( publication(C, A), publication(C, B) )
%   | then return 0.41751358415830986;  // std dev = 2.58e-08, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else return 0.35845481591378264;  // std dev = 0.926, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   else return -0.10159632948783627;  // std dev = 3.73e-09, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
WILL Produced-Tree #5
% FOR advisedby(A, B):
%   if ( student(A), professor(B) )
%   then if ( publication(C, A), publication(C, B) )
%   | then return 0.3207118471601497;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else return 0.26974781327936176;  // std dev = 0.926, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   else return -0.09269127618926097;  // std dev = 3.73e-09, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
WILL Produced-Tree #6
% FOR advisedby(A, B):
%   if ( student(A), professor(B) )
%   then if ( publication(C, A), publication(C, B) )
%   | then return 0.2551722425694894;  // std dev = 1.29e-08, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else return 0.20625258815983655;  // std dev = 0.926, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   else return -0.08518475138839687;  // std dev = 3.73e-09, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
WILL Produced-Tree #7
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( publication(C, A), publication(C, B) )
%   | then return 0.2097577156325356;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else return 0.16095555079641394;  // std dev = 0.926, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   else return -0.07877675473109173;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
WILL Produced-Tree #8
% FOR advisedby(A, B):
%   if ( student(A), professor(B) )
%   then if ( publication(C, A), publication(C, B) )
%   | then return 0.17709649774527736;  // std dev = 5.27e-09, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else return 0.12802275604229368;  // std dev = 0.926, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   else return -0.07324622576333704;  // std dev = 3.73e-09, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
WILL Produced-Tree #9
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( publication(C, A), publication(C, B) )
%   | then return 0.152743858093671;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else return 0.10349083403071084;  // std dev = 0.926, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   else return -0.06842697784420272;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
WILL Produced-Tree #10
% FOR advisedby(A, B):
%   if ( student(A), professor(B) )
%   then if ( publication(C, A), publication(C, B) )
%   | then return 0.13400703000801117;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else return 0.08478440748267761;  // std dev = 0.926, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   else return -0.0641918400820262;  // std dev = 2.63e-09, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */


Results
   AUC ROC   = 0.959375
   AUC PR    = 0.95045
   CLL	      = -0.223999
   Precision = 0.888889 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.941176


Total learning time: 0.894 seconds
Total inference time: 0.713 seconds
AUC ROC: 0.959375


Results scoring model
   AUC ROC   = 0.982249
   AUC PR    = 0.979882
   CLL	      = -0.177712
   Precision = 0.928571 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.962963


Total scoring time: 0.479 seconds
Parameter learned model CLL: -0.177712


Structure after Parameter Learning
[['advisedby(A, B)', {'': 'professor(B), student(A)', 'true': 'publication(C, A), publication(C, B)'}, {'true,true': [0.0, 0, 7], 'true,false': [0.926, 1, 6], 'false': [0.0, 12, 0]}], ['advisedby(A, B)', {'': 'professor(B), student(A)', 'true': 'publication(C, A), publication(C, B)'}, {'true,true': [2.11e-08, 0, 7], 'true,false': [0.926, 1, 6], 'false': [0.0, 12, 0]}], ['advisedby(A, B)', {'': 'professor(B), student(A)', 'true': 'publication(C, A), publication(C, B)'}, {'true,true': [0.0, 0, 7], 'true,false': [0.926, 1, 6], 'false': [0.0, 12, 0]}], ['advisedby(A, B)', {'': 'student(A), professor(B)', 'true': 'publication(C, A), publication(C, B)'}, {'true,true': [2.58e-08, 0, 7], 'true,false': [0.926, 1, 6], 'false': [3.73e-09, 12, 0]}], ['advisedby(A, B)', {'': 'student(A), professor(B)', 'true': 'publication(C, A), publication(C, B)'}, {'true,true': [0.0, 0, 7], 'true,false': [0.926, 1, 6], 'false': [3.73e-09, 12, 0]}], ['advisedby(A, B)', {'': 'student(A), professor(B)', 'true': 'publication(C, A), publication(C, B)'}, {'true,true': [1.29e-08, 0, 7], 'true,false': [0.926, 1, 6], 'false': [3.73e-09, 12, 0]}], ['advisedby(A, B)', {'': 'professor(B), student(A)', 'true': 'publication(C, A), publication(C, B)'}, {'true,true': [0.0, 0, 7], 'true,false': [0.926, 1, 6], 'false': [0.0, 12, 0]}], ['advisedby(A, B)', {'': 'student(A), professor(B)', 'true': 'publication(C, A), publication(C, B)'}, {'true,true': [5.27e-09, 0, 7], 'true,false': [0.926, 1, 6], 'false': [3.73e-09, 12, 0]}], ['advisedby(A, B)', {'': 'professor(B), student(A)', 'true': 'publication(C, A), publication(C, B)'}, {'true,true': [0.0, 0, 7], 'true,false': [0.926, 1, 6], 'false': [0.0, 12, 0]}], ['advisedby(A, B)', {'': 'student(A), professor(B)', 'true': 'publication(C, A), publication(C, B)'}, {'true,true': [0.0, 0, 7], 'true,false': [0.926, 1, 6], 'false': [2.63e-09, 12, 0]}]]
[{'': [0.06632653061224467, -6.938893903907228e-18], 'true': [-2.5376526277146434e-16, 0.1224489795918368]}, {'': [0.06452767124985945, 0.0], 'true': [6.344131569286608e-17, 0.12244897959183668]}, {'': [0.06284185130866142, 0.0], 'true': [-6.344131569286608e-17, 0.12244897959183668]}, {'': [0.06209647432255868, 1.1564823173178713e-18], 'true': [9.516197353929913e-17, 0.12244897959183673]}, {'': [0.061873822983268885, 1.1564823173178713e-18], 'true': [-3.172065784643304e-17, 0.12244897959183673]}, {'': [0.061822772942808364, 1.1564823173178713e-18], 'true': [2.3790493384824782e-17, 0.12244897959183673]}, {'': [0.06181990261909135, 0.0], 'true': [-1.586032892321652e-17, 0.12244897959183675]}, {'': [0.061826547827101175, 1.1564823173178713e-18], 'true': [3.96508223080413e-18, 0.12244897959183673]}, {'': [0.06183095489075501, -5.782411586589357e-19], 'true': [-7.93016446160826e-18, 0.12244897959183673]}, {'': [0.061830206437986236, 5.782411586589357e-19], 'true': [0.0, 0.12244897959183673]}]


******************************************
Performing Theory Revision
******************************************
******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.959375
   AUC PR    = 0.95045
   CLL	      = -0.223999
   Precision = 0.888889 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.941176


Total learning time: 1.373 seconds
Total inference time: 0.713 seconds
AUC ROC: 0.959375
Total revision time: 1.373
Best scored revision CLL: -0.177712


Dataset: 1_imdb_uwcse, Fold: 4, Type: Transfer (trRDN-B), Time: 00:00:45
{'AUC ROC': 0.959375, 'AUC PR': 0.95045, 'CLL': -0.223999, 'Precision': [0.888889, 0.5], 'Recall': 1.0, 'F1': 0.941176, 'Learning time': 1.373, 'Inference time': 0.713, 'parameter_0.4': {'AUC ROC': 0.959375, 'AUC PR': 0.95045, 'CLL': -0.223999, 'Precision': [0.888889, 0.5], 'Recall': 1.0, 'F1': 0.941176, 'Learning time': 0.894, 'Inference time': 0.713}}


Amount of data: 0.6
******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- actor(A), director(B).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


WILL Produced-Tree #1
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( publication(C, A), publication(C, B) )
%   | then return 0.8581489350995123;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else return 0.643863220813798;  // std dev = 1.535, 14.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=11 */
%   else return -0.1418510649004878;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
WILL Produced-Tree #2
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( publication(C, A), publication(C, B) )
%   | then return 0.7194734122109543;  // std dev = 2.98e-08, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else return 0.546344324661819;  // std dev = 1.535, 14.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=11 */
%   else return -0.12544463852839138;  // std dev = 7.45e-09, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
WILL Produced-Tree #3
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( publication(C, A), publication(C, B) )
%   | then return 0.5553664367462846;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else return 0.4336077424125802;  // std dev = 1.535, 14.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=11 */
%   else return -0.11231637819360638;  // std dev = 7.45e-09, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
WILL Produced-Tree #4
% FOR advisedby(A, B):
%   if ( student(A), professor(B) )
%   then if ( publication(C, A), publication(C, B) )
%   | then return 0.41751358415830986;  // std dev = 2.98e-08, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else return 0.329646879661406;  // std dev = 1.535, 14.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=11 */
%   else return -0.10159632948783627;  // std dev = 5.27e-09, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
WILL Produced-Tree #5
% FOR advisedby(A, B):
%   if ( student(A), professor(B) )
%   then if ( publication(C, A), publication(C, B) )
%   | then return 0.3207118471601497;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else return 0.2474238613374282;  // std dev = 1.535, 14.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=11 */
%   else return -0.09269127618926097;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
WILL Produced-Tree #6
% FOR advisedby(A, B):
%   if ( student(A), professor(B) )
%   then if ( publication(C, A), publication(C, B) )
%   | then return 0.2551722425694894;  // std dev = 1.49e-08, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else return 0.18681376626705765;  // std dev = 1.535, 14.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=11 */
%   else return -0.08518475138839687;  // std dev = 5.27e-09, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
WILL Produced-Tree #7
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( publication(C, A), publication(C, B) )
%   | then return 0.2097577156325356;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else return 0.14287708768965182;  // std dev = 1.535, 14.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=11 */
%   else return -0.07877675473109172;  // std dev = 3.73e-09, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
WILL Produced-Tree #8
% FOR advisedby(A, B):
%   if ( student(A), professor(B) )
%   then if ( publication(C, A), publication(C, B) )
%   | then return 0.17709649774527736;  // std dev = 7.45e-09, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else return 0.11078243293091554;  // std dev = 1.535, 14.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=11 */
%   else return -0.07324622576333704;  // std dev = 3.73e-09, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
WILL Produced-Tree #9
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( publication(C, A), publication(C, B) )
%   | then return 0.15274385809367097;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else return 0.08696285935559465;  // std dev = 1.535, 14.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=11 */
%   else return -0.06842697784420272;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
WILL Produced-Tree #10
% FOR advisedby(A, B):
%   if ( student(A), professor(B) )
%   then if ( publication(C, A), publication(C, B) )
%   | then return 0.13400703000801117;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else return 0.06897951845459195;  // std dev = 1.535, 14.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=11 */
%   else return -0.0641918400820262;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */


Results
   AUC ROC   = 0.959375
   AUC PR    = 0.95045
   CLL	      = -0.233491
   Precision = 0.888889 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.941176


Total learning time: 0.905 seconds
Total inference time: 0.693 seconds
AUC ROC: 0.959375


Results scoring model
   AUC ROC   = 0.954294
   AUC PR    = 0.947783
   CLL	      = -0.247387
   Precision = 0.863636 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.926829


Total scoring time: 0.507 seconds
Parameter learned model CLL: -0.247387


Structure after Parameter Learning
[['advisedby(A, B)', {'': 'professor(B), student(A)', 'true': 'publication(C, A), publication(C, B)'}, {'true,true': [0.0, 0, 8], 'true,false': [1.535, 3, 11], 'false': [0.0, 16, 0]}], ['advisedby(A, B)', {'': 'professor(B), student(A)', 'true': 'publication(C, A), publication(C, B)'}, {'true,true': [2.98e-08, 0, 8], 'true,false': [1.535, 3, 11], 'false': [7.45e-09, 16, 0]}], ['advisedby(A, B)', {'': 'professor(B), student(A)', 'true': 'publication(C, A), publication(C, B)'}, {'true,true': [0.0, 0, 8], 'true,false': [1.535, 3, 11], 'false': [7.45e-09, 16, 0]}], ['advisedby(A, B)', {'': 'student(A), professor(B)', 'true': 'publication(C, A), publication(C, B)'}, {'true,true': [2.98e-08, 0, 8], 'true,false': [1.535, 3, 11], 'false': [5.27e-09, 16, 0]}], ['advisedby(A, B)', {'': 'student(A), professor(B)', 'true': 'publication(C, A), publication(C, B)'}, {'true,true': [0.0, 0, 8], 'true,false': [1.535, 3, 11], 'false': [0.0, 16, 0]}], ['advisedby(A, B)', {'': 'student(A), professor(B)', 'true': 'publication(C, A), publication(C, B)'}, {'true,true': [1.49e-08, 0, 8], 'true,false': [1.535, 3, 11], 'false': [5.27e-09, 16, 0]}], ['advisedby(A, B)', {'': 'professor(B), student(A)', 'true': 'publication(C, A), publication(C, B)'}, {'true,true': [0.0, 0, 8], 'true,false': [1.535, 3, 11], 'false': [3.73e-09, 16, 0]}], ['advisedby(A, B)', {'': 'student(A), professor(B)', 'true': 'publication(C, A), publication(C, B)'}, {'true,true': [7.45e-09, 0, 8], 'true,false': [1.535, 3, 11], 'false': [3.73e-09, 16, 0]}], ['advisedby(A, B)', {'': 'professor(B), student(A)', 'true': 'publication(C, A), publication(C, B)'}, {'true,true': [0.0, 0, 8], 'true,false': [1.535, 3, 11], 'false': [0.0, 16, 0]}], ['advisedby(A, B)', {'': 'student(A), professor(B)', 'true': 'publication(C, A), publication(C, B)'}, {'true,true': [0.0, 0, 8], 'true,false': [1.535, 3, 11], 'false': [0.0, 16, 0]}]]
[{'': [0.11776859504132219, -6.938893903907228e-18], 'true': [-2.220446049250313e-16, 0.16836734693877536]}, {'': [0.11407891554580486, 3.469446951953614e-18], 'true': [1.1102230246251565e-16, 0.1683673469387756]}, {'': [0.1105734772261937, 3.469446951953614e-18], 'true': [-1.1102230246251565e-16, 0.16836734693877548]}, {'': [0.10892943249208108, 1.734723475976807e-18], 'true': [1.1102230246251565e-16, 0.16836734693877548]}, {'': [0.10838576299613506, 0.0], 'true': [-4.163336342344337e-17, 0.1683673469387755]}, {'': [0.10822418504291433, 1.734723475976807e-18], 'true': [2.7755575615628914e-17, 0.16836734693877548]}, {'': [0.10817793577949328, 8.673617379884035e-19], 'true': [-2.0816681711721685e-17, 0.1683673469387755]}, {'': [0.1081604732203918, 8.673617379884035e-19], 'true': [6.938893903907228e-18, 0.16836734693877556]}, {'': [0.10814417874830679, 0.0], 'true': [-3.469446951953614e-18, 0.16836734693877548]}, {'': [0.10812137088870212, 0.0], 'true': [0.0, 0.1683673469387755]}]


******************************************
Performing Theory Revision
******************************************
******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.959375
   AUC PR    = 0.95045
   CLL	      = -0.233491
   Precision = 0.888889 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.941176


Total learning time: 1.412 seconds
Total inference time: 0.693 seconds
AUC ROC: 0.959375
Total revision time: 1.412
Best scored revision CLL: -0.247387


Dataset: 1_imdb_uwcse, Fold: 4, Type: Transfer (trRDN-B), Time: 00:00:48
{'AUC ROC': 0.959375, 'AUC PR': 0.95045, 'CLL': -0.233491, 'Precision': [0.888889, 0.5], 'Recall': 1.0, 'F1': 0.941176, 'Learning time': 1.412, 'Inference time': 0.693, 'parameter_0.6': {'AUC ROC': 0.959375, 'AUC PR': 0.95045, 'CLL': -0.233491, 'Precision': [0.888889, 0.5], 'Recall': 1.0, 'F1': 0.941176, 'Learning time': 0.905, 'Inference time': 0.693}}


Amount of data: 0.8
******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- actor(A), director(B).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


WILL Produced-Tree #1
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( publication(C, A), publication(C, B) )
%   | then return 0.8581489350995123;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else return 0.6914822684328457;  // std dev = 1.581, 18.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=15 */
%   else return -0.14185106490048777;  // std dev = 7.45e-09, 23.000 (wgt'ed) examples reached here.  /* #neg=23 */
WILL Produced-Tree #2
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( publication(C, A), publication(C, B) )
%   | then return 0.7194734122109542;  // std dev = 4.21e-08, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else return 0.5851860008555358;  // std dev = 1.581, 18.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=15 */
%   else return -0.12544463852839138;  // std dev = 0.000, 23.000 (wgt'ed) examples reached here.  /* #neg=23 */
WILL Produced-Tree #3
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( publication(C, A), publication(C, B) )
%   | then return 0.5553664367462846;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else return 0.4612598391067555;  // std dev = 1.581, 18.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=15 */
%   else return -0.11231637819360636;  // std dev = 1.49e-08, 23.000 (wgt'ed) examples reached here.  /* #neg=23 */
WILL Produced-Tree #4
% FOR advisedby(A, B):
%   if ( student(A), professor(B) )
%   then if ( publication(C, A), publication(C, B) )
%   | then return 0.4175135841583098;  // std dev = 4.21e-08, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else return 0.34884632569484214;  // std dev = 1.581, 18.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=15 */
%   else return -0.10159632948783635;  // std dev = 0.000, 23.000 (wgt'ed) examples reached here.  /* #neg=23 */
WILL Produced-Tree #5
% FOR advisedby(A, B):
%   if ( student(A), professor(B) )
%   then if ( publication(C, A), publication(C, B) )
%   | then return 0.3207118471601497;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else return 0.26212705508354195;  // std dev = 1.581, 18.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=15 */
%   else return -0.09269127618926098;  // std dev = 0.000, 23.000 (wgt'ed) examples reached here.  /* #neg=23 */
WILL Produced-Tree #6
% FOR advisedby(A, B):
%   if ( student(A), professor(B) )
%   then if ( publication(C, A), publication(C, B) )
%   | then return 0.2551722425694894;  // std dev = 2.11e-08, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else return 0.1994526427642343;  // std dev = 1.581, 18.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=15 */
%   else return -0.08518475138839687;  // std dev = 5.27e-09, 23.000 (wgt'ed) examples reached here.  /* #neg=23 */
WILL Produced-Tree #7
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( publication(C, A), publication(C, B) )
%   | then return 0.20975771563253562;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else return 0.15451336627983223;  // std dev = 1.581, 18.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=15 */
%   else return -0.07877675473109175;  // std dev = 0.000, 23.000 (wgt'ed) examples reached here.  /* #neg=23 */
WILL Produced-Tree #8
% FOR advisedby(A, B):
%   if ( student(A), professor(B) )
%   then if ( publication(C, A), publication(C, B) )
%   | then return 0.17709649774527736;  // std dev = 7.45e-09, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else return 0.121794915580028;  // std dev = 1.581, 18.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=15 */
%   else return -0.07324622576333704;  // std dev = 3.73e-09, 23.000 (wgt'ed) examples reached here.  /* #neg=23 */
WILL Produced-Tree #9
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( publication(C, A), publication(C, B) )
%   | then return 0.15274385809367094;  // std dev = 7.45e-09, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else return 0.09745354768081678;  // std dev = 1.581, 18.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=15 */
%   else return -0.06842697784420274;  // std dev = 0.000, 23.000 (wgt'ed) examples reached here.  /* #neg=23 */
WILL Produced-Tree #10
% FOR advisedby(A, B):
%   if ( student(A), professor(B) )
%   then if ( publication(C, A), publication(C, B) )
%   | then return 0.13400703000801117;  // std dev = 5.27e-09, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else return 0.07895233872555121;  // std dev = 1.581, 18.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=15 */
%   else return -0.06419184008202618;  // std dev = 0.000, 23.000 (wgt'ed) examples reached here.  /* #neg=23 */


Results
   AUC ROC   = 0.959375
   AUC PR    = 0.95045
   CLL	      = -0.226482
   Precision = 0.888889 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.941176


Total learning time: 0.98 seconds
Total inference time: 0.7 seconds
AUC ROC: 0.959375


Results scoring model
   AUC ROC   = 0.966716
   AUC PR    = 0.960859
   CLL	      = -0.214769
   Precision = 0.896552 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.945455


Total scoring time: 0.515 seconds
Parameter learned model CLL: -0.214769


Structure after Parameter Learning
[['advisedby(A, B)', {'': 'professor(B), student(A)', 'true': 'publication(C, A), publication(C, B)'}, {'true,true': [0.0, 0, 11], 'true,false': [1.581, 3, 15], 'false': [7.45e-09, 23, 0]}], ['advisedby(A, B)', {'': 'professor(B), student(A)', 'true': 'publication(C, A), publication(C, B)'}, {'true,true': [4.21e-08, 0, 11], 'true,false': [1.581, 3, 15], 'false': [0.0, 23, 0]}], ['advisedby(A, B)', {'': 'professor(B), student(A)', 'true': 'publication(C, A), publication(C, B)'}, {'true,true': [0.0, 0, 11], 'true,false': [1.581, 3, 15], 'false': [1.49e-08, 23, 0]}], ['advisedby(A, B)', {'': 'student(A), professor(B)', 'true': 'publication(C, A), publication(C, B)'}, {'true,true': [4.21e-08, 0, 11], 'true,false': [1.581, 3, 15], 'false': [0.0, 23, 0]}], ['advisedby(A, B)', {'': 'student(A), professor(B)', 'true': 'publication(C, A), publication(C, B)'}, {'true,true': [0.0, 0, 11], 'true,false': [1.581, 3, 15], 'false': [0.0, 23, 0]}], ['advisedby(A, B)', {'': 'student(A), professor(B)', 'true': 'publication(C, A), publication(C, B)'}, {'true,true': [2.11e-08, 0, 11], 'true,false': [1.581, 3, 15], 'false': [5.27e-09, 23, 0]}], ['advisedby(A, B)', {'': 'professor(B), student(A)', 'true': 'publication(C, A), publication(C, B)'}, {'true,true': [0.0, 0, 11], 'true,false': [1.581, 3, 15], 'false': [0.0, 23, 0]}], ['advisedby(A, B)', {'': 'student(A), professor(B)', 'true': 'publication(C, A), publication(C, B)'}, {'true,true': [7.45e-09, 0, 11], 'true,false': [1.581, 3, 15], 'false': [3.73e-09, 23, 0]}], ['advisedby(A, B)', {'': 'professor(B), student(A)', 'true': 'publication(C, A), publication(C, B)'}, {'true,true': [7.45e-09, 0, 11], 'true,false': [1.581, 3, 15], 'false': [0.0, 23, 0]}], ['advisedby(A, B)', {'': 'student(A), professor(B)', 'true': 'publication(C, A), publication(C, B)'}, {'true,true': [5.27e-09, 0, 11], 'true,false': [1.581, 3, 15], 'false': [0.0, 23, 0]}]]
[{'': [0.09274673008323524, 2.413528314402514e-18], 'true': [-1.6148698540002277e-16, 0.1388888888888887]}, {'': [0.09045250362902563, 0.0], 'true': [1.6148698540002277e-16, 0.13888888888888903]}, {'': [0.0882919122953854, 9.654113257610057e-18], 'true': [-2.0185873175002846e-16, 0.13888888888888898]}, {'': [0.0873170131893078, -7.240584943207542e-18], 'true': [1.6148698540002277e-16, 0.13888888888888898]}, {'': [0.08701494793912785, -1.206764157201257e-18], 'true': [-6.055761952500853e-17, 0.1388888888888888]}, {'': [0.08693784234588188, 1.206764157201257e-18], 'true': [4.0371746350005693e-17, 0.1388888888888889]}, {'': [0.08692542657646835, -3.620292471603771e-18], 'true': [-2.5232341468753557e-17, 0.1388888888888889]}, {'': [0.08692691613319382, 6.033820786006285e-19], 'true': [5.046468293750712e-18, 0.13888888888888887]}, {'': [0.08692662264953491, -1.206764157201257e-18], 'true': [5.046468293750712e-18, 0.1388888888888889]}, {'': [0.08692050150817714, 0.0], 'true': [2.523234146875356e-18, 0.1388888888888889]}]


******************************************
Performing Theory Revision
******************************************
******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.959375
   AUC PR    = 0.95045
   CLL	      = -0.226482
   Precision = 0.888889 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.941176


Total learning time: 1.495 seconds
Total inference time: 0.7 seconds
AUC ROC: 0.959375
Total revision time: 1.495
Best scored revision CLL: -0.214769


Dataset: 1_imdb_uwcse, Fold: 4, Type: Transfer (trRDN-B), Time: 00:00:50
{'AUC ROC': 0.959375, 'AUC PR': 0.95045, 'CLL': -0.226482, 'Precision': [0.888889, 0.5], 'Recall': 1.0, 'F1': 0.941176, 'Learning time': 1.495, 'Inference time': 0.7, 'parameter_0.8': {'AUC ROC': 0.959375, 'AUC PR': 0.95045, 'CLL': -0.226482, 'Precision': [0.888889, 0.5], 'Recall': 1.0, 'F1': 0.941176, 'Learning time': 0.98, 'Inference time': 0.7}}


Amount of data: 1.0
******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- actor(A), director(B).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


WILL Produced-Tree #1
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( publication(C, A), publication(C, B) )
%   | then return 0.7867203636709409;  // std dev = 0.964, 14.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=13 */
%   | else return 0.7277141524908167;  // std dev = 1.615, 23.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=20 */
%   else return -0.1418510649004877;  // std dev = 2.11e-08, 29.000 (wgt'ed) examples reached here.  /* #neg=29 */
WILL Produced-Tree #2
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( publication(C, A), publication(C, B) )
%   | then return 0.6622329172201352;  // std dev = 0.964, 14.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=13 */
%   | else return 0.6145965951068212;  // std dev = 1.615, 23.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=20 */
%   else return -0.12544463852839138;  // std dev = 0.000, 29.000 (wgt'ed) examples reached here.  /* #neg=29 */
WILL Produced-Tree #3
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( publication(C, A), publication(C, B) )
%   | then return 0.5154428111118985;  // std dev = 0.964, 14.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=13 */
%   | else return 0.4820310770235997;  // std dev = 1.615, 23.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=20 */
%   else return -0.11231637819360639;  // std dev = 0.000, 29.000 (wgt'ed) examples reached here.  /* #neg=29 */
WILL Produced-Tree #4
% FOR advisedby(A, B):
%   if ( student(A), professor(B) )
%   then if ( publication(C, A), publication(C, B) )
%   | then return 0.3875647182006322;  // std dev = 0.964, 14.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=13 */
%   | else return 0.3634800616999764;  // std dev = 1.615, 23.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=20 */
%   else return -0.10159632948783635;  // std dev = 0.000, 29.000 (wgt'ed) examples reached here.  /* #neg=29 */
WILL Produced-Tree #5
% FOR advisedby(A, B):
%   if ( student(A), professor(B) )
%   then if ( publication(C, A), publication(C, B) )
%   | then return 0.29398103437200096;  // std dev = 0.964, 14.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=13 */
%   | else return 0.273806964396987;  // std dev = 1.615, 23.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=20 */
%   else return -0.09269127618926094;  // std dev = 1.29e-08, 29.000 (wgt'ed) examples reached here.  /* #neg=29 */
WILL Produced-Tree #6
% FOR advisedby(A, B):
%   if ( student(A), professor(B) )
%   then if ( publication(C, A), publication(C, B) )
%   | then return 0.2288562690978686;  // std dev = 0.964, 14.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=13 */
%   | else return 0.20993902519493918;  // std dev = 1.615, 23.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=20 */
%   else return -0.08518475138839686;  // std dev = 1.29e-08, 29.000 (wgt'ed) examples reached here.  /* #neg=29 */
WILL Produced-Tree #7
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( publication(C, A), publication(C, B) )
%   | then return 0.18306311556471894;  // std dev = 0.964, 14.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=13 */
%   | else return 0.16449338179098769;  // std dev = 1.615, 23.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=20 */
%   else return -0.07877675473109176;  // std dev = 0.000, 29.000 (wgt'ed) examples reached here.  /* #neg=29 */
WILL Produced-Tree #8
% FOR advisedby(A, B):
%   if ( student(A), professor(B) )
%   then if ( publication(C, A), publication(C, B) )
%   | then return 0.14991371797684416;  // std dev = 0.964, 14.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=13 */
%   | else return 0.13147590894712882;  // std dev = 1.615, 23.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=20 */
%   else return -0.07324622576333704;  // std dev = 7.45e-09, 29.000 (wgt'ed) examples reached here.  /* #neg=29 */
WILL Produced-Tree #9
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( publication(C, A), publication(C, B) )
%   | then return 0.12515667139271322;  // std dev = 0.964, 14.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=13 */
%   | else return 0.10686565883702655;  // std dev = 1.615, 23.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=20 */
%   else return -0.06842697784420275;  // std dev = 0.000, 29.000 (wgt'ed) examples reached here.  /* #neg=29 */
WILL Produced-Tree #10
% FOR advisedby(A, B):
%   if ( student(A), professor(B) )
%   then if ( publication(C, A), publication(C, B) )
%   | then return 0.10613658840585892;  // std dev = 0.964, 14.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=13 */
%   | else return 0.08806971003324962;  // std dev = 1.615, 23.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=20 */
%   else return -0.06419184008202618;  // std dev = 3.73e-09, 29.000 (wgt'ed) examples reached here.  /* #neg=29 */


Results
   AUC ROC   = 0.959375
   AUC PR    = 0.95045
   CLL	      = -0.231815
   Precision = 0.888889 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.941176


Total learning time: 1.043 seconds
Total inference time: 0.687 seconds
AUC ROC: 0.959375


Results scoring model
   AUC ROC   = 0.948118
   AUC PR    = 0.913976
   CLL	      = -0.231237
   Precision = 0.891892 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.942857


Total scoring time: 0.54 seconds
Parameter learned model CLL: -0.231237


Structure after Parameter Learning
[['advisedby(A, B)', {'': 'professor(B), student(A)', 'true': 'publication(C, A), publication(C, B)'}, {'true,true': [0.964, 1, 13], 'true,false': [1.615, 3, 20], 'false': [2.11e-08, 29, 0]}], ['advisedby(A, B)', {'': 'professor(B), student(A)', 'true': 'publication(C, A), publication(C, B)'}, {'true,true': [0.964, 1, 13], 'true,false': [1.615, 3, 20], 'false': [0.0, 29, 0]}], ['advisedby(A, B)', {'': 'professor(B), student(A)', 'true': 'publication(C, A), publication(C, B)'}, {'true,true': [0.964, 1, 13], 'true,false': [1.615, 3, 20], 'false': [0.0, 29, 0]}], ['advisedby(A, B)', {'': 'student(A), professor(B)', 'true': 'publication(C, A), publication(C, B)'}, {'true,true': [0.964, 1, 13], 'true,false': [1.615, 3, 20], 'false': [0.0, 29, 0]}], ['advisedby(A, B)', {'': 'student(A), professor(B)', 'true': 'publication(C, A), publication(C, B)'}, {'true,true': [0.964, 1, 13], 'true,false': [1.615, 3, 20], 'false': [1.29e-08, 29, 0]}], ['advisedby(A, B)', {'': 'student(A), professor(B)', 'true': 'publication(C, A), publication(C, B)'}, {'true,true': [0.964, 1, 13], 'true,false': [1.615, 3, 20], 'false': [1.29e-08, 29, 0]}], ['advisedby(A, B)', {'': 'professor(B), student(A)', 'true': 'publication(C, A), publication(C, B)'}, {'true,true': [0.964, 1, 13], 'true,false': [1.615, 3, 20], 'false': [0.0, 29, 0]}], ['advisedby(A, B)', {'': 'student(A), professor(B)', 'true': 'publication(C, A), publication(C, B)'}, {'true,true': [0.964, 1, 13], 'true,false': [1.615, 3, 20], 'false': [7.45e-09, 29, 0]}], ['advisedby(A, B)', {'': 'professor(B), student(A)', 'true': 'publication(C, A), publication(C, B)'}, {'true,true': [0.964, 1, 13], 'true,false': [1.615, 3, 20], 'false': [0.0, 29, 0]}], ['advisedby(A, B)', {'': 'student(A), professor(B)', 'true': 'publication(C, A), publication(C, B)'}, {'true,true': [0.964, 1, 13], 'true,false': [1.615, 3, 20], 'false': [3.73e-09, 29, 0]}]]
[{'': [0.09642074506939538, 1.5313421029312504e-17], 'true': [0.06632653061224467, 0.11342155009451776]}, {'': [0.09613555191013942, -3.828355257328126e-18], 'true': [0.0663265306122444, 0.11342155009451807]}, {'': [0.09586438622896976, 0.0], 'true': [0.06632653061224501, 0.11342155009451796]}, {'': [0.09573825036240785, -5.742532885992189e-18], 'true': [0.06632653061224479, 0.11342155009451801]}, {'': [0.09569754109975932, 5.742532885992189e-18], 'true': [0.06632653061224496, 0.11342155009451796]}, {'': [0.09568598509073324, 5.742532885992189e-18], 'true': [0.0663265306122449, 0.11342155009451795]}, {'': [0.09568292100918854, -2.8712664429960945e-18], 'true': [0.06632653061224485, 0.113421550094518]}, {'': [0.09568177267331078, 1.914177628664063e-18], 'true': [0.06632653061224492, 0.11342155009451795]}, {'': [0.09568050451041507, -3.828355257328126e-18], 'true': [0.06632653061224489, 0.11342155009451797]}, {'': [0.0956785877880845, 4.785444071660157e-19], 'true': [0.0663265306122449, 0.11342155009451796]}]


******************************************
Performing Theory Revision
******************************************
******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.959375
   AUC PR    = 0.95045
   CLL	      = -0.231815
   Precision = 0.888889 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.941176


Total learning time: 1.583 seconds
Total inference time: 0.687 seconds
AUC ROC: 0.959375
Total revision time: 1.583
Best scored revision CLL: -0.231237


Dataset: 1_imdb_uwcse, Fold: 4, Type: Transfer (trRDN-B), Time: 00:00:53
{'AUC ROC': 0.959375, 'AUC PR': 0.95045, 'CLL': -0.231815, 'Precision': [0.888889, 0.5], 'Recall': 1.0, 'F1': 0.941176, 'Learning time': 1.583, 'Inference time': 0.687, 'parameter_1.0': {'AUC ROC': 0.959375, 'AUC PR': 0.95045, 'CLL': -0.231815, 'Precision': [0.888889, 0.5], 'Recall': 1.0, 'F1': 0.941176, 'Learning time': 1.043, 'Inference time': 0.687}}


Starting fold 5

Target train facts examples: 414
Target train pos examples: 16
Target train neg examples: 16

Target test facts examples: 1973
Target test pos	 examples: 97
Target test neg examples: 97

Amount of data: 0.2
******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- actor(A), director(B).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


WILL Produced-Tree #1
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( yearsinprogram(A, C), yearsinprogram(B, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.8581489350995121;  // std dev = 2.11e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return -0.14185106490048777;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #2
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( yearsinprogram(A, C), yearsinprogram(B, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.7194734122109545;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return -0.12544463852839138;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #3
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( yearsinprogram(A, C), yearsinprogram(B, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.5553664367462845;  // std dev = 1.05e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return -0.11231637819360639;  // std dev = 2.63e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #4
% FOR advisedby(A, B):
%   if ( student(A), professor(B) )
%   then if ( yearsinprogram(A, C), yearsinprogram(B, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.41751358415830997;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return -0.1015963294878363;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #5
% FOR advisedby(A, B):
%   if ( student(A), professor(B) )
%   then if ( yearsinprogram(A, C), yearsinprogram(B, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.32071184716014967;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return -0.09269127618926094;  // std dev = 2.63e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #6
% FOR advisedby(A, B):
%   if ( student(A), professor(B) )
%   then if ( yearsinprogram(A, C), yearsinprogram(B, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.25517224256948945;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return -0.08518475138839687;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #7
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( yearsinprogram(A, C), yearsinprogram(B, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.20975771563253554;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return -0.07877675473109173;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #8
% FOR advisedby(A, B):
%   if ( student(A), professor(B) )
%   then if ( yearsinprogram(A, C), yearsinprogram(B, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.17709649774527736;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return -0.07324622576333704;  // std dev = 1.86e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #9
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( yearsinprogram(A, C), yearsinprogram(B, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.15274385809367097;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return -0.06842697784420272;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #10
% FOR advisedby(A, B):
%   if ( student(A), professor(B) )
%   then if ( yearsinprogram(A, C), yearsinprogram(B, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.13400703000801117;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return -0.0641918400820262;  // std dev = 1.32e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */


Results
   AUC ROC   = 0.938144
   AUC PR    = 0.889908
   CLL	      = -0.222343
   Precision = 0.889908 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.941748


Total learning time: 0.766 seconds
Total inference time: 0.689 seconds
AUC ROC: 0.938144


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.094637
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 0.449 seconds
Parameter learned model CLL: -0.094637


Structure after Parameter Learning
[['advisedby(A, B)', {'': 'professor(B), student(A)', 'true': 'yearsinprogram(A, C), yearsinprogram(B, C)'}, {'true,true': [0.0, 0, 0], 'true,false': [2.11e-08, 0, 3], 'false': [0.0, 3, 0]}], ['advisedby(A, B)', {'': 'professor(B), student(A)', 'true': 'yearsinprogram(A, C), yearsinprogram(B, C)'}, {'true,true': [0.0, 0, 0], 'true,false': [0.0, 0, 3], 'false': [0.0, 3, 0]}], ['advisedby(A, B)', {'': 'professor(B), student(A)', 'true': 'yearsinprogram(A, C), yearsinprogram(B, C)'}, {'true,true': [0.0, 0, 0], 'true,false': [1.05e-08, 0, 3], 'false': [2.63e-09, 3, 0]}], ['advisedby(A, B)', {'': 'student(A), professor(B)', 'true': 'yearsinprogram(A, C), yearsinprogram(B, C)'}, {'true,true': [0.0, 0, 0], 'true,false': [0.0, 0, 3], 'false': [0.0, 3, 0]}], ['advisedby(A, B)', {'': 'student(A), professor(B)', 'true': 'yearsinprogram(A, C), yearsinprogram(B, C)'}, {'true,true': [0.0, 0, 0], 'true,false': [0.0, 0, 3], 'false': [2.63e-09, 3, 0]}], ['advisedby(A, B)', {'': 'student(A), professor(B)', 'true': 'yearsinprogram(A, C), yearsinprogram(B, C)'}, {'true,true': [0.0, 0, 0], 'true,false': [0.0, 0, 3], 'false': [0.0, 3, 0]}], ['advisedby(A, B)', {'': 'professor(B), student(A)', 'true': 'yearsinprogram(A, C), yearsinprogram(B, C)'}, {'true,true': [0.0, 0, 0], 'true,false': [0.0, 0, 3], 'false': [0.0, 3, 0]}], ['advisedby(A, B)', {'': 'student(A), professor(B)', 'true': 'yearsinprogram(A, C), yearsinprogram(B, C)'}, {'true,true': [0.0, 0, 0], 'true,false': [0.0, 0, 3], 'false': [1.86e-09, 3, 0]}], ['advisedby(A, B)', {'': 'professor(B), student(A)', 'true': 'yearsinprogram(A, C), yearsinprogram(B, C)'}, {'true,true': [0.0, 0, 0], 'true,false': [0.0, 0, 3], 'false': [0.0, 3, 0]}], ['advisedby(A, B)', {'': 'student(A), professor(B)', 'true': 'yearsinprogram(A, C), yearsinprogram(B, C)'}, {'true,true': [0.0, 0, 0], 'true,false': [0.0, 0, 3], 'false': [1.32e-09, 3, 0]}]]
[{'': [1.4802973661668753e-16, 0.0], 'true': [nan, 1.4802973661668753e-16]}, {'': [0.0, 0.0], 'true': [nan, 0.0]}, {'': [3.700743415417188e-17, 2.3129646346357427e-18], 'true': [nan, 3.700743415417188e-17]}, {'': [-3.700743415417188e-17, -1.1564823173178713e-18], 'true': [nan, -3.700743415417188e-17]}, {'': [0.0, 2.3129646346357427e-18], 'true': [nan, 0.0]}, {'': [0.0, 0.0], 'true': [nan, 0.0]}, {'': [0.0, 0.0], 'true': [nan, 0.0]}, {'': [0.0, 1.1564823173178713e-18], 'true': [nan, 0.0]}, {'': [-4.625929269271485e-18, -5.782411586589357e-19], 'true': [nan, -4.625929269271485e-18]}, {'': [-2.3129646346357427e-18, 5.782411586589357e-19], 'true': [nan, -2.3129646346357427e-18]}]


******************************************
Performing Theory Revision
******************************************
******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.938144
   AUC PR    = 0.889908
   CLL	      = -0.222343
   Precision = 0.889908 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.941748


Total learning time: 1.215 seconds
Total inference time: 0.689 seconds
AUC ROC: 0.938144
Total revision time: 1.215
Best scored revision CLL: -0.094637


Dataset: 1_imdb_uwcse, Fold: 5, Type: Transfer (trRDN-B), Time: 00:00:55
{'AUC ROC': 0.938144, 'AUC PR': 0.889908, 'CLL': -0.222343, 'Precision': [0.889908, 0.5], 'Recall': 1.0, 'F1': 0.941748, 'Learning time': 1.215, 'Inference time': 0.689, 'parameter_0.2': {'AUC ROC': 0.938144, 'AUC PR': 0.889908, 'CLL': -0.222343, 'Precision': [0.889908, 0.5], 'Recall': 1.0, 'F1': 0.941748, 'Learning time': 0.766, 'Inference time': 0.689}}


Amount of data: 0.4
******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- actor(A), director(B).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


WILL Produced-Tree #1
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( yearsinprogram(A, C), yearsinprogram(B, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.7152917922423694;  // std dev = 0.926, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   else return -0.14185106490048777;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #2
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( yearsinprogram(A, C), yearsinprogram(B, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.6045267906174348;  // std dev = 0.926, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   else return -0.12544463852839138;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #3
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( yearsinprogram(A, C), yearsinprogram(B, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.4749335700127619;  // std dev = 0.926, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   else return -0.11231637819360638;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #4
% FOR advisedby(A, B):
%   if ( student(A), professor(B) )
%   then if ( yearsinprogram(A, C), yearsinprogram(B, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.3584548159137827;  // std dev = 0.926, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   else return -0.10159632948783633;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #5
% FOR advisedby(A, B):
%   if ( student(A), professor(B) )
%   then if ( yearsinprogram(A, C), yearsinprogram(B, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.2697478132793615;  // std dev = 0.926, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   else return -0.09269127618926098;  // std dev = 2.63e-09, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #6
% FOR advisedby(A, B):
%   if ( student(A), professor(B) )
%   then if ( yearsinprogram(A, C), yearsinprogram(B, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.2062525881598365;  // std dev = 0.926, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   else return -0.08518475138839687;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #7
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( yearsinprogram(A, C), yearsinprogram(B, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.16095555079641394;  // std dev = 0.926, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   else return -0.07877675473109177;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #8
% FOR advisedby(A, B):
%   if ( student(A), professor(B) )
%   then if ( yearsinprogram(A, C), yearsinprogram(B, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.12802275604229368;  // std dev = 0.926, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   else return -0.07324622576333703;  // std dev = 2.63e-09, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #9
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( yearsinprogram(A, C), yearsinprogram(B, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.10349083403071088;  // std dev = 0.926, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   else return -0.06842697784420272;  // std dev = 1.86e-09, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #10
% FOR advisedby(A, B):
%   if ( student(A), professor(B) )
%   then if ( yearsinprogram(A, C), yearsinprogram(B, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.08478440748267765;  // std dev = 0.926, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   else return -0.0641918400820262;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */


Results
   AUC ROC   = 0.938144
   AUC PR    = 0.889908
   CLL	      = -0.242765
   Precision = 0.889908 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.941748


Total learning time: 0.825 seconds
Total inference time: 0.751 seconds
AUC ROC: 0.938144


Results scoring model
   AUC ROC   = 0.916667
   AUC PR    = 0.857143
   CLL	      = -0.274632
   Precision = 0.857143 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.923077


Total scoring time: 0.466 seconds
Parameter learned model CLL: -0.274632


Structure after Parameter Learning
[['advisedby(A, B)', {'': 'professor(B), student(A)', 'true': 'yearsinprogram(A, C), yearsinprogram(B, C)'}, {'true,true': [0.0, 0, 0], 'true,false': [0.926, 1, 6], 'false': [0.0, 5, 0]}], ['advisedby(A, B)', {'': 'professor(B), student(A)', 'true': 'yearsinprogram(A, C), yearsinprogram(B, C)'}, {'true,true': [0.0, 0, 0], 'true,false': [0.926, 1, 6], 'false': [0.0, 5, 0]}], ['advisedby(A, B)', {'': 'professor(B), student(A)', 'true': 'yearsinprogram(A, C), yearsinprogram(B, C)'}, {'true,true': [0.0, 0, 0], 'true,false': [0.926, 1, 6], 'false': [0.0, 5, 0]}], ['advisedby(A, B)', {'': 'student(A), professor(B)', 'true': 'yearsinprogram(A, C), yearsinprogram(B, C)'}, {'true,true': [0.0, 0, 0], 'true,false': [0.926, 1, 6], 'false': [0.0, 5, 0]}], ['advisedby(A, B)', {'': 'student(A), professor(B)', 'true': 'yearsinprogram(A, C), yearsinprogram(B, C)'}, {'true,true': [0.0, 0, 0], 'true,false': [0.926, 1, 6], 'false': [2.63e-09, 5, 0]}], ['advisedby(A, B)', {'': 'student(A), professor(B)', 'true': 'yearsinprogram(A, C), yearsinprogram(B, C)'}, {'true,true': [0.0, 0, 0], 'true,false': [0.926, 1, 6], 'false': [0.0, 5, 0]}], ['advisedby(A, B)', {'': 'professor(B), student(A)', 'true': 'yearsinprogram(A, C), yearsinprogram(B, C)'}, {'true,true': [0.0, 0, 0], 'true,false': [0.926, 1, 6], 'false': [0.0, 5, 0]}], ['advisedby(A, B)', {'': 'student(A), professor(B)', 'true': 'yearsinprogram(A, C), yearsinprogram(B, C)'}, {'true,true': [0.0, 0, 0], 'true,false': [0.926, 1, 6], 'false': [2.63e-09, 5, 0]}], ['advisedby(A, B)', {'': 'professor(B), student(A)', 'true': 'yearsinprogram(A, C), yearsinprogram(B, C)'}, {'true,true': [0.0, 0, 0], 'true,false': [0.926, 1, 6], 'false': [1.86e-09, 5, 0]}], ['advisedby(A, B)', {'': 'student(A), professor(B)', 'true': 'yearsinprogram(A, C), yearsinprogram(B, C)'}, {'true,true': [0.0, 0, 0], 'true,false': [0.926, 1, 6], 'false': [0.0, 5, 0]}]]
[{'': [0.12244897959183662, -2.7755575615628915e-18], 'true': [nan, 0.12244897959183662]}, {'': [0.12244897959183668, 0.0], 'true': [nan, 0.12244897959183668]}, {'': [0.12244897959183668, 0.0], 'true': [nan, 0.12244897959183668]}, {'': [0.12244897959183672, 0.0], 'true': [nan, 0.12244897959183672]}, {'': [0.12244897959183679, 1.3877787807814458e-18], 'true': [nan, 0.12244897959183679]}, {'': [0.12244897959183675, 0.0], 'true': [nan, 0.12244897959183675]}, {'': [0.12244897959183675, -1.3877787807814458e-18], 'true': [nan, 0.12244897959183675]}, {'': [0.12244897959183673, 1.3877787807814458e-18], 'true': [nan, 0.12244897959183673]}, {'': [0.12244897959183673, 6.938893903907229e-19], 'true': [nan, 0.12244897959183673]}, {'': [0.12244897959183673, 0.0], 'true': [nan, 0.12244897959183673]}]


******************************************
Performing Theory Revision
******************************************
******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.938144
   AUC PR    = 0.889908
   CLL	      = -0.242765
   Precision = 0.889908 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.941748


Total learning time: 1.291 seconds
Total inference time: 0.751 seconds
AUC ROC: 0.938144
Total revision time: 1.291
Best scored revision CLL: -0.274632


Dataset: 1_imdb_uwcse, Fold: 5, Type: Transfer (trRDN-B), Time: 00:00:57
{'AUC ROC': 0.938144, 'AUC PR': 0.889908, 'CLL': -0.242765, 'Precision': [0.889908, 0.5], 'Recall': 1.0, 'F1': 0.941748, 'Learning time': 1.291, 'Inference time': 0.751, 'parameter_0.4': {'AUC ROC': 0.938144, 'AUC PR': 0.889908, 'CLL': -0.242765, 'Precision': [0.889908, 0.5], 'Recall': 1.0, 'F1': 0.941748, 'Learning time': 0.825, 'Inference time': 0.751}}


Amount of data: 0.6
******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- actor(A), director(B).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


WILL Produced-Tree #1
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( publication(C, A), publication(C, B) )
%   | then return 0.8581489350995121;  // std dev = 2.11e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return 0.7152917922423694;  // std dev = 0.926, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   else return -0.1418510649004878;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #2
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( publication(C, A), publication(C, B) )
%   | then return 0.7194734122109545;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return 0.6045267906174348;  // std dev = 0.926, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   else return -0.12544463852839138;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #3
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( publication(C, A), publication(C, B) )
%   | then return 0.5553664367462845;  // std dev = 1.05e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return 0.4749335700127619;  // std dev = 0.926, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   else return -0.11231637819360639;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #4
% FOR advisedby(A, B):
%   if ( student(A), professor(B) )
%   then if ( publication(C, A), publication(C, B) )
%   | then return 0.41751358415830997;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return 0.3584548159137827;  // std dev = 0.926, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   else return -0.10159632948783628;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #5
% FOR advisedby(A, B):
%   if ( student(A), professor(B) )
%   then if ( publication(C, A), publication(C, B) )
%   | then return 0.32071184716014967;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return 0.2697478132793615;  // std dev = 0.926, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   else return -0.09269127618926096;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #6
% FOR advisedby(A, B):
%   if ( student(A), professor(B) )
%   then if ( publication(C, A), publication(C, B) )
%   | then return 0.25517224256948945;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return 0.2062525881598365;  // std dev = 0.926, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   else return -0.08518475138839687;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #7
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( publication(C, A), publication(C, B) )
%   | then return 0.20975771563253554;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return 0.16095555079641394;  // std dev = 0.926, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   else return -0.07877675473109173;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #8
% FOR advisedby(A, B):
%   if ( student(A), professor(B) )
%   then if ( publication(C, A), publication(C, B) )
%   | then return 0.17709649774527736;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return 0.12802275604229368;  // std dev = 0.926, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   else return -0.07324622576333704;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #9
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( publication(C, A), publication(C, B) )
%   | then return 0.15274385809367097;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return 0.10349083403071088;  // std dev = 0.926, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   else return -0.06842697784420272;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #10
% FOR advisedby(A, B):
%   if ( student(A), professor(B) )
%   then if ( publication(C, A), publication(C, B) )
%   | then return 0.13400703000801117;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return 0.08478440748267765;  // std dev = 0.926, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   else return -0.0641918400820262;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */


Results
   AUC ROC   = 0.956584
   AUC PR    = 0.939
   CLL	      = -0.224265
   Precision = 0.889908 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.941748


Total learning time: 0.866 seconds
Total inference time: 0.73 seconds
AUC ROC: 0.956584


Results scoring model
   AUC ROC   = 0.962963
   AUC PR    = 0.954365
   CLL	      = -0.214634
   Precision = 0.9 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.947368


Total scoring time: 0.452 seconds
Parameter learned model CLL: -0.214634


Structure after Parameter Learning
[['advisedby(A, B)', {'': 'professor(B), student(A)', 'true': 'publication(C, A), publication(C, B)'}, {'true,true': [2.11e-08, 0, 3], 'true,false': [0.926, 1, 6], 'false': [0.0, 8, 0]}], ['advisedby(A, B)', {'': 'professor(B), student(A)', 'true': 'publication(C, A), publication(C, B)'}, {'true,true': [0.0, 0, 3], 'true,false': [0.926, 1, 6], 'false': [0.0, 8, 0]}], ['advisedby(A, B)', {'': 'professor(B), student(A)', 'true': 'publication(C, A), publication(C, B)'}, {'true,true': [1.05e-08, 0, 3], 'true,false': [0.926, 1, 6], 'false': [0.0, 8, 0]}], ['advisedby(A, B)', {'': 'student(A), professor(B)', 'true': 'publication(C, A), publication(C, B)'}, {'true,true': [0.0, 0, 3], 'true,false': [0.926, 1, 6], 'false': [0.0, 8, 0]}], ['advisedby(A, B)', {'': 'student(A), professor(B)', 'true': 'publication(C, A), publication(C, B)'}, {'true,true': [0.0, 0, 3], 'true,false': [0.926, 1, 6], 'false': [0.0, 8, 0]}], ['advisedby(A, B)', {'': 'student(A), professor(B)', 'true': 'publication(C, A), publication(C, B)'}, {'true,true': [0.0, 0, 3], 'true,false': [0.926, 1, 6], 'false': [0.0, 8, 0]}], ['advisedby(A, B)', {'': 'professor(B), student(A)', 'true': 'publication(C, A), publication(C, B)'}, {'true,true': [0.0, 0, 3], 'true,false': [0.926, 1, 6], 'false': [0.0, 8, 0]}], ['advisedby(A, B)', {'': 'student(A), professor(B)', 'true': 'publication(C, A), publication(C, B)'}, {'true,true': [0.0, 0, 3], 'true,false': [0.926, 1, 6], 'false': [0.0, 8, 0]}], ['advisedby(A, B)', {'': 'professor(B), student(A)', 'true': 'publication(C, A), publication(C, B)'}, {'true,true': [0.0, 0, 3], 'true,false': [0.926, 1, 6], 'false': [0.0, 8, 0]}], ['advisedby(A, B)', {'': 'student(A), professor(B)', 'true': 'publication(C, A), publication(C, B)'}, {'true,true': [0.0, 0, 3], 'true,false': [0.926, 1, 6], 'false': [0.0, 8, 0]}]]
[{'': [0.08999999999999977, -6.938893903907228e-18], 'true': [1.4802973661668753e-16, 0.12244897959183662]}, {'': [0.0884889581355961, 0.0], 'true': [0.0, 0.12244897959183668]}, {'': [0.0870728693849899, -1.734723475976807e-18], 'true': [3.700743415417188e-17, 0.12244897959183668]}, {'': [0.08644675271666347, 0.0], 'true': [-3.700743415417188e-17, 0.12244897959183672]}, {'': [0.08625972559166017, 0.0], 'true': [0.0, 0.12244897959183679]}, {'': [0.08621684355767331, 0.0], 'true': [0.0, 0.12244897959183675]}, {'': [0.08621443248575104, 0.0], 'true': [0.0, 0.12244897959183675]}, {'': [0.08622001446047928, 0.0], 'true': [0.0, 0.12244897959183673]}, {'': [0.08622371639394849, 0.0], 'true': [-4.625929269271485e-18, 0.12244897959183673]}, {'': [0.08622308769362272, 0.0], 'true': [-2.3129646346357427e-18, 0.12244897959183673]}]


******************************************
Performing Theory Revision
******************************************
******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.956584
   AUC PR    = 0.939
   CLL	      = -0.224265
   Precision = 0.889908 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.941748


Total learning time: 1.318 seconds
Total inference time: 0.73 seconds
AUC ROC: 0.956584
Total revision time: 1.318
Best scored revision CLL: -0.214634


Dataset: 1_imdb_uwcse, Fold: 5, Type: Transfer (trRDN-B), Time: 00:01:00
{'AUC ROC': 0.956584, 'AUC PR': 0.939, 'CLL': -0.224265, 'Precision': [0.889908, 0.5], 'Recall': 1.0, 'F1': 0.941748, 'Learning time': 1.318, 'Inference time': 0.73, 'parameter_0.6': {'AUC ROC': 0.956584, 'AUC PR': 0.939, 'CLL': -0.224265, 'Precision': [0.889908, 0.5], 'Recall': 1.0, 'F1': 0.941748, 'Learning time': 0.866, 'Inference time': 0.73}}


Amount of data: 0.8
******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- actor(A), director(B).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


WILL Produced-Tree #1
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( publication(C, A), publication(C, B) )
%   | then return 0.8581489350995121;  // std dev = 2.11e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return 0.6763307532813305;  // std dev = 1.279, 11.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=9 */
%   else return -0.1418510649004878;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
WILL Produced-Tree #2
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( publication(C, A), publication(C, B) )
%   | then return 0.7194734122109545;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return 0.5728505077589573;  // std dev = 1.279, 11.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=9 */
%   else return -0.12544463852839138;  // std dev = 5.27e-09, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
WILL Produced-Tree #3
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( publication(C, A), publication(C, B) )
%   | then return 0.5553664367462845;  // std dev = 1.05e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return 0.45250734201965837;  // std dev = 1.279, 11.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=9 */
%   else return -0.11231637819360638;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
WILL Produced-Tree #4
% FOR advisedby(A, B):
%   if ( student(A), professor(B) )
%   then if ( publication(C, A), publication(C, B) )
%   | then return 0.41751358415830997;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return 0.34273989085368034;  // std dev = 1.279, 11.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=9 */
%   else return -0.10159632948783628;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
WILL Produced-Tree #5
% FOR advisedby(A, B):
%   if ( student(A), professor(B) )
%   then if ( publication(C, A), publication(C, B) )
%   | then return 0.32071184716014967;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return 0.2573771265051453;  // std dev = 1.279, 11.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=9 */
%   else return -0.09269127618926096;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
WILL Produced-Tree #6
% FOR advisedby(A, B):
%   if ( student(A), professor(B) )
%   then if ( publication(C, A), publication(C, B) )
%   | then return 0.25517224256948945;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return 0.19529825339842233;  // std dev = 1.279, 11.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=9 */
%   else return -0.08518475138839687;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
WILL Produced-Tree #7
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( publication(C, A), publication(C, B) )
%   | then return 0.20975771563253554;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return 0.15063646694077695;  // std dev = 1.279, 11.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=9 */
%   else return -0.07877675473109172;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
WILL Produced-Tree #8
% FOR advisedby(A, B):
%   if ( student(A), professor(B) )
%   then if ( publication(C, A), publication(C, B) )
%   | then return 0.17709649774527736;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return 0.11808890552787804;  // std dev = 1.279, 11.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=9 */
%   else return -0.07324622576333704;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
WILL Produced-Tree #9
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( publication(C, A), publication(C, B) )
%   | then return 0.15274385809367097;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return 0.09389442014327215;  // std dev = 1.279, 11.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=9 */
%   else return -0.06842697784420272;  // std dev = 2.63e-09, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
WILL Produced-Tree #10
% FOR advisedby(A, B):
%   if ( student(A), professor(B) )
%   then if ( publication(C, A), publication(C, B) )
%   | then return 0.13400703000801117;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return 0.07554408412491875;  // std dev = 1.279, 11.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=9 */
%   else return -0.0641918400820262;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */


Results
   AUC ROC   = 0.956584
   AUC PR    = 0.939
   CLL	      = -0.228837
   Precision = 0.889908 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.941748


Total learning time: 0.84 seconds
Total inference time: 0.732 seconds
AUC ROC: 0.956584


Results scoring model
   AUC ROC   = 0.9375
   AUC PR    = 0.921408
   CLL	      = -0.264161
   Precision = 0.857143 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.923077


Total scoring time: 0.48 seconds
Parameter learned model CLL: -0.264161


Structure after Parameter Learning
[['advisedby(A, B)', {'': 'professor(B), student(A)', 'true': 'publication(C, A), publication(C, B)'}, {'true,true': [2.11e-08, 0, 3], 'true,false': [1.279, 2, 9], 'false': [0.0, 10, 0]}], ['advisedby(A, B)', {'': 'professor(B), student(A)', 'true': 'publication(C, A), publication(C, B)'}, {'true,true': [0.0, 0, 3], 'true,false': [1.279, 2, 9], 'false': [5.27e-09, 10, 0]}], ['advisedby(A, B)', {'': 'professor(B), student(A)', 'true': 'publication(C, A), publication(C, B)'}, {'true,true': [1.05e-08, 0, 3], 'true,false': [1.279, 2, 9], 'false': [0.0, 10, 0]}], ['advisedby(A, B)', {'': 'student(A), professor(B)', 'true': 'publication(C, A), publication(C, B)'}, {'true,true': [0.0, 0, 3], 'true,false': [1.279, 2, 9], 'false': [0.0, 10, 0]}], ['advisedby(A, B)', {'': 'student(A), professor(B)', 'true': 'publication(C, A), publication(C, B)'}, {'true,true': [0.0, 0, 3], 'true,false': [1.279, 2, 9], 'false': [0.0, 10, 0]}], ['advisedby(A, B)', {'': 'student(A), professor(B)', 'true': 'publication(C, A), publication(C, B)'}, {'true,true': [0.0, 0, 3], 'true,false': [1.279, 2, 9], 'false': [0.0, 10, 0]}], ['advisedby(A, B)', {'': 'professor(B), student(A)', 'true': 'publication(C, A), publication(C, B)'}, {'true,true': [0.0, 0, 3], 'true,false': [1.279, 2, 9], 'false': [0.0, 10, 0]}], ['advisedby(A, B)', {'': 'student(A), professor(B)', 'true': 'publication(C, A), publication(C, B)'}, {'true,true': [0.0, 0, 3], 'true,false': [1.279, 2, 9], 'false': [0.0, 10, 0]}], ['advisedby(A, B)', {'': 'professor(B), student(A)', 'true': 'publication(C, A), publication(C, B)'}, {'true,true': [0.0, 0, 3], 'true,false': [1.279, 2, 9], 'false': [2.63e-09, 10, 0]}], ['advisedby(A, B)', {'': 'student(A), professor(B)', 'true': 'publication(C, A), publication(C, B)'}, {'true,true': [0.0, 0, 3], 'true,false': [1.279, 2, 9], 'false': [0.0, 10, 0]}]]
[{'': [0.1224489795918365, -1.1102230246251566e-17], 'true': [1.4802973661668753e-16, 0.14876033057851218]}, {'': [0.12050272459550479, 2.7755575615628915e-18], 'true': [0.0, 0.1487603305785126]}, {'': [0.11866444229711363, 0.0], 'true': [3.700743415417188e-17, 0.14876033057851237]}, {'': [0.11782447643385006, 0.0], 'true': [-3.700743415417188e-17, 0.14876033057851243]}, {'': [0.11755848660625343, 0.0], 'true': [0.0, 0.14876033057851243]}, {'': [0.11748669607248163, 0.0], 'true': [0.0, 0.14876033057851243]}, {'': [0.11747161498284545, 0.0], 'true': [0.0, 0.14876033057851237]}, {'': [0.11746935446473286, -6.938893903907229e-19], 'true': [0.0, 0.14876033057851237]}, {'': [0.11746621616604326, 6.938893903907229e-19], 'true': [-4.625929269271485e-18, 0.1487603305785124]}, {'': [0.117458582339055, 0.0], 'true': [-2.3129646346357427e-18, 0.14876033057851237]}]


******************************************
Performing Theory Revision
******************************************
******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.956584
   AUC PR    = 0.939
   CLL	      = -0.228837
   Precision = 0.889908 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.941748


Total learning time: 1.3199999999999998 seconds
Total inference time: 0.732 seconds
AUC ROC: 0.956584
Total revision time: 1.3199999999999998
Best scored revision CLL: -0.264161


Dataset: 1_imdb_uwcse, Fold: 5, Type: Transfer (trRDN-B), Time: 00:01:02
{'AUC ROC': 0.956584, 'AUC PR': 0.939, 'CLL': -0.228837, 'Precision': [0.889908, 0.5], 'Recall': 1.0, 'F1': 0.941748, 'Learning time': 1.3199999999999998, 'Inference time': 0.732, 'parameter_0.8': {'AUC ROC': 0.956584, 'AUC PR': 0.939, 'CLL': -0.228837, 'Precision': [0.889908, 0.5], 'Recall': 1.0, 'F1': 0.941748, 'Learning time': 0.84, 'Inference time': 0.732}}


Amount of data: 1.0
******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- actor(A), director(B).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


WILL Produced-Tree #1
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( publication(C, A), publication(C, B) )
%   | then return 0.8581489350995122;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else return 0.7152917922423694;  // std dev = 1.309, 14.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=12 */
%   else return -0.1418510649004878;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
WILL Produced-Tree #2
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( publication(C, A), publication(C, B) )
%   | then return 0.7194734122109545;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else return 0.6045267906174346;  // std dev = 1.309, 14.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=12 */
%   else return -0.12544463852839138;  // std dev = 5.27e-09, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
WILL Produced-Tree #3
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( publication(C, A), publication(C, B) )
%   | then return 0.5553664367462845;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else return 0.4749335700127619;  // std dev = 1.309, 14.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=12 */
%   else return -0.11231637819360638;  // std dev = 9.13e-09, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
WILL Produced-Tree #4
% FOR advisedby(A, B):
%   if ( student(A), professor(B) )
%   then if ( publication(C, A), publication(C, B) )
%   | then return 0.41751358415830997;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else return 0.3584548159137825;  // std dev = 1.309, 14.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=12 */
%   else return -0.10159632948783627;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
WILL Produced-Tree #5
% FOR advisedby(A, B):
%   if ( student(A), professor(B) )
%   then if ( publication(C, A), publication(C, B) )
%   | then return 0.32071184716014967;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else return 0.26974781327936176;  // std dev = 1.309, 14.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=12 */
%   else return -0.09269127618926097;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
WILL Produced-Tree #6
% FOR advisedby(A, B):
%   if ( student(A), professor(B) )
%   then if ( publication(C, A), publication(C, B) )
%   | then return 0.25517224256948945;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else return 0.2062525881598365;  // std dev = 1.309, 14.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=12 */
%   else return -0.08518475138839687;  // std dev = 3.73e-09, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
WILL Produced-Tree #7
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( publication(C, A), publication(C, B) )
%   | then return 0.20975771563253554;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else return 0.16095555079641383;  // std dev = 1.309, 14.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=12 */
%   else return -0.07877675473109172;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
WILL Produced-Tree #8
% FOR advisedby(A, B):
%   if ( student(A), professor(B) )
%   then if ( publication(C, A), publication(C, B) )
%   | then return 0.17709649774527736;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else return 0.12802275604229368;  // std dev = 1.309, 14.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=12 */
%   else return -0.07324622576333704;  // std dev = 3.73e-09, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
WILL Produced-Tree #9
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( publication(C, A), publication(C, B) )
%   | then return 0.15274385809367097;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else return 0.10349083403071092;  // std dev = 1.309, 14.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=12 */
%   else return -0.06842697784420272;  // std dev = 3.73e-09, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
WILL Produced-Tree #10
% FOR advisedby(A, B):
%   if ( student(A), professor(B) )
%   then if ( publication(C, A), publication(C, B) )
%   | then return 0.13400703000801117;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else return 0.0847844074826777;  // std dev = 1.309, 14.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=12 */
%   else return -0.0641918400820262;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */


Results
   AUC ROC   = 0.956584
   AUC PR    = 0.939
   CLL	      = -0.224265
   Precision = 0.889908 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.941748


Total learning time: 0.871 seconds
Total inference time: 0.732 seconds
AUC ROC: 0.956584


Results scoring model
   AUC ROC   = 0.953125
   AUC PR    = 0.939105
   CLL	      = -0.229634
   Precision = 0.888889 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.941176


Total scoring time: 0.476 seconds
Parameter learned model CLL: -0.229634


Structure after Parameter Learning
[['advisedby(A, B)', {'': 'professor(B), student(A)', 'true': 'publication(C, A), publication(C, B)'}, {'true,true': [0.0, 0, 4], 'true,false': [1.309, 2, 12], 'false': [0.0, 14, 0]}], ['advisedby(A, B)', {'': 'professor(B), student(A)', 'true': 'publication(C, A), publication(C, B)'}, {'true,true': [0.0, 0, 4], 'true,false': [1.309, 2, 12], 'false': [5.27e-09, 14, 0]}], ['advisedby(A, B)', {'': 'professor(B), student(A)', 'true': 'publication(C, A), publication(C, B)'}, {'true,true': [0.0, 0, 4], 'true,false': [1.309, 2, 12], 'false': [9.13e-09, 14, 0]}], ['advisedby(A, B)', {'': 'student(A), professor(B)', 'true': 'publication(C, A), publication(C, B)'}, {'true,true': [0.0, 0, 4], 'true,false': [1.309, 2, 12], 'false': [0.0, 14, 0]}], ['advisedby(A, B)', {'': 'student(A), professor(B)', 'true': 'publication(C, A), publication(C, B)'}, {'true,true': [0.0, 0, 4], 'true,false': [1.309, 2, 12], 'false': [0.0, 14, 0]}], ['advisedby(A, B)', {'': 'student(A), professor(B)', 'true': 'publication(C, A), publication(C, B)'}, {'true,true': [0.0, 0, 4], 'true,false': [1.309, 2, 12], 'false': [3.73e-09, 14, 0]}], ['advisedby(A, B)', {'': 'professor(B), student(A)', 'true': 'publication(C, A), publication(C, B)'}, {'true,true': [0.0, 0, 4], 'true,false': [1.309, 2, 12], 'false': [0.0, 14, 0]}], ['advisedby(A, B)', {'': 'student(A), professor(B)', 'true': 'publication(C, A), publication(C, B)'}, {'true,true': [0.0, 0, 4], 'true,false': [1.309, 2, 12], 'false': [3.73e-09, 14, 0]}], ['advisedby(A, B)', {'': 'professor(B), student(A)', 'true': 'publication(C, A), publication(C, B)'}, {'true,true': [0.0, 0, 4], 'true,false': [1.309, 2, 12], 'false': [3.73e-09, 14, 0]}], ['advisedby(A, B)', {'': 'student(A), professor(B)', 'true': 'publication(C, A), publication(C, B)'}, {'true,true': [0.0, 0, 4], 'true,false': [1.309, 2, 12], 'false': [0.0, 14, 0]}]]
[{'': [0.09876543209876518, -7.93016446160826e-18], 'true': [0.0, 0.1224489795918365]}, {'': [0.09752177624328923, 1.982541115402065e-18], 'true': [0.0, 0.12244897959183675]}, {'': [0.09635627109875718, 5.9476233462061954e-18], 'true': [0.0, 0.1224489795918368]}, {'': [0.09584094873799476, 0.0], 'true': [0.0, 0.1224489795918368]}, {'': [0.09568701694786833, 0.0], 'true': [0.0, 0.12244897959183675]}, {'': [0.09565172309273522, 9.912705577010326e-19], 'true': [0.0, 0.12244897959183675]}, {'': [0.09564973867140004, -9.912705577010326e-19], 'true': [0.0, 0.12244897959183677]}, {'': [0.09565433288928336, 9.912705577010326e-19], 'true': [0.0, 0.12244897959183676]}, {'': [0.09565737974810574, 9.912705577010326e-19], 'true': [0.0, 0.12244897959183672]}, {'': [0.09565686229927794, -4.956352788505163e-19], 'true': [0.0, 0.12244897959183673]}]


******************************************
Performing Theory Revision
******************************************
******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.956584
   AUC PR    = 0.939
   CLL	      = -0.224265
   Precision = 0.889908 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.941748


Total learning time: 1.347 seconds
Total inference time: 0.732 seconds
AUC ROC: 0.956584
Total revision time: 1.347
Best scored revision CLL: -0.229634


Dataset: 1_imdb_uwcse, Fold: 5, Type: Transfer (trRDN-B), Time: 00:01:04
{'AUC ROC': 0.956584, 'AUC PR': 0.939, 'CLL': -0.224265, 'Precision': [0.889908, 0.5], 'Recall': 1.0, 'F1': 0.941748, 'Learning time': 1.347, 'Inference time': 0.732, 'parameter_1.0': {'AUC ROC': 0.956584, 'AUC PR': 0.939, 'CLL': -0.224265, 'Precision': [0.889908, 0.5], 'Recall': 1.0, 'F1': 0.941748, 'Learning time': 0.871, 'Inference time': 0.732}}


