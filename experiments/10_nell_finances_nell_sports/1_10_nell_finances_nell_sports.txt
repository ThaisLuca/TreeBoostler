Starting experiment #1 for 10_nell_finances_nell_sports

Start learning from source dataset

Source train facts examples: 5307
Source train pos examples: 778
Source train neg examples: 778

WILL Produced-Tree #1
% FOR companyeconomicsector(A, B):
%   if ( acquired(C, A) )
%   then if ( economicsectorcompany(B, C) )
%   | then return 0.8581489350995117;  // std dev = 2.46e-07, 41.000 (wgt'ed) examples reached here.  /* #pos=41 */
%   | else return 0.24362379543470916;  // std dev = 0.487, 179.000 (wgt'ed) examples reached here.  /* #neg=110 #pos=69 */
%   else if ( companyalsoknownas(A, D) )
%   | then if ( economicsectorcompany(B, D) )
%   | | then return 0.8146706742299468;  // std dev = 0.204, 23.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=22 */
%   | | else if ( acquired(A, E), economicsectorcompany(B, E) )
%   | | | then return 0.7581489350995123;  // std dev = 0.949, 10.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | | | else return 0.24397570675305477;  // std dev = 5.486, 127.000 (wgt'ed) examples reached here.  /* #neg=78 #pos=49 */
%   | else if ( companyceo(A, F) )
%   | | then if ( bankchiefexecutiveceo(G, F) )
%   | | | then return 0.35814893509951234;  // std dev = 2.345, 22.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=11 */
%   | | | else return 0.35814893509951307;  // std dev = 4.743, 90.000 (wgt'ed) examples reached here.  /* #neg=45 #pos=45 */
%   | | else if ( countryhascompanyoffice(H, A) )
%   | | | then return 0.35814893509951107;  // std dev = 4.123, 68.000 (wgt'ed) examples reached here.  /* #neg=34 #pos=34 */
%   | | | else return 0.3581489350995075;  // std dev = 15.780, 996.000 (wgt'ed) examples reached here.  /* #neg=498 #pos=498 */
WILL Produced-Tree #2
% FOR companyeconomicsector(A, B):
%   if ( companyalsoknownas(A, C), acquired(A, D) )
%   then if ( economicsectorcompany(B, D) )
%   | then return 0.6786703013517135;  // std dev = 0.244, 16.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   | else if ( economicsectorcompany(B, C), countryhascompanyoffice(E, C) )
%   | | then return 0.7444424496687171;  // std dev = 0.089, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return 0.19224642534479022;  // std dev = 0.479, 78.000 (wgt'ed) examples reached here.  /* #neg=49 #pos=29 */
%   else if ( acquired(A, F), cityhascompanyoffice(G, A) )
%   | then if ( cityhascompanyoffice(G, H), economicsectorcompany(B, H) )
%   | | then return 0.6483619200693441;  // std dev = 0.352, 33.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=28 */
%   | | else return -0.18531395603133854;  // std dev = 0.039, 23.000 (wgt'ed) examples reached here.  /* #neg=23 */
%   | else if ( acquired(I, A) )
%   | | then if ( economicsectorcompany(B, I) )
%   | | | then return 0.7194734122109547;  // std dev = 0.000, 33.000 (wgt'ed) examples reached here.  /* #pos=33 */
%   | | | else return 0.2120396433635582;  // std dev = 5.863, 145.000 (wgt'ed) examples reached here.  /* #neg=89 #pos=56 */
%   | | else if ( companyalsoknownas(A, J) )
%   | | | then return 0.311139464394771;  // std dev = 4.350, 80.000 (wgt'ed) examples reached here.  /* #neg=40 #pos=40 */
%   | | | else return 0.3087411357856259;  // std dev = 16.897, 1,142.000 (wgt'ed) examples reached here.  /* #neg=571 #pos=571 */
WILL Produced-Tree #3
% FOR companyeconomicsector(A, B):
%   if ( acquired(A, C), economicsectorcompany(B, C) )
%   then return 0.5912374754071779;  // std dev = 0.247, 33.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=31 */
%   else if ( acquired(A, D) )
%   | then if ( companyalsoknownas(A, E), economicsectorcompany(B, E) )
%   | | then if ( countryhascompanyoffice(F, D) )
%   | | | then return 0.26945243139052777;  // std dev = 0.712, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.633749616186174;  // std dev = 0.215, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else if ( companyalsoknownas(D, G), companyalsoknownas(A, G) )
%   | | | then return -0.07862698577846476;  // std dev = 0.935, 8.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */
%   | | | else return 0.1989267946232949;  // std dev = 6.936, 213.000 (wgt'ed) examples reached here.  /* #neg=121 #pos=92 */
%   | else if ( acquired(H, A), companyceo(H, I) )
%   | | then if ( economicsectorcompany(B, H) )
%   | | | then return 0.5553664367462846;  // std dev = 0.000, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | | | else return 0.1314374769376009;  // std dev = 3.901, 68.000 (wgt'ed) examples reached here.  /* #neg=45 #pos=23 */
%   | | else if ( cityhascompanyoffice(J, A) )
%   | | | then return 0.2569630478424085;  // std dev = 6.945, 196.000 (wgt'ed) examples reached here.  /* #neg=98 #pos=98 */
%   | | | else return 0.2574390517397664;  // std dev = 15.819, 1,008.000 (wgt'ed) examples reached here.  /* #neg=504 #pos=504 */
WILL Produced-Tree #4
% FOR companyeconomicsector(A, B):
%   if ( acquired(A, C), acquired(C, D) )
%   then if ( economicsectorcompany(B, D) )
%   | then if ( companyceo(C, E) )
%   | | then return 0.5303264918827899;  // std dev = 0.225, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return 0.704149303534038;  // std dev = 0.093, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( cityhascompanyoffice(F, A), companyceo(A, G) )
%   | | then if ( companyalsoknownas(A, H), economicsectorcompany(B, H) )
%   | | | then return 0.45474263893408073;  // std dev = 0.070, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.11624068594373209;  // std dev = 2.302, 27.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=11 */
%   | | else if ( acquired(D, I), economicsectorcompany(B, I) )
%   | | | then return 0.6371767735899123;  // std dev = 0.081, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.026580508981559406;  // std dev = 2.359, 29.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=9 */
%   else return 0.20561037428450055;  // std dev = 0.490, 1,484.000 (wgt'ed) examples reached here.  /* #neg=742 #pos=742 */
WILL Produced-Tree #5
% FOR companyeconomicsector(A, B):
%   if ( acquired(C, A), economicsectorcompany(B, C) )
%   then return 0.40848959030893617;  // std dev = 0.063, 41.000 (wgt'ed) examples reached here.  /* #pos=41 */
%   else if ( acquired(D, A), companyceo(D, E) )
%   | then if ( acquired(F, D), companyalsoknownas(F, G) )
%   | | then if ( acquired(A, H) )
%   | | | then return 0.05635632364324809;  // std dev = 0.695, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | else return -0.26751078969755404;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else if ( acquired(I, D), economicsectorcompany(B, I) )
%   | | | then return 0.6526695726320927;  // std dev = 0.277, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.052305952969364945;  // std dev = 4.164, 83.000 (wgt'ed) examples reached here.  /* #neg=56 #pos=27 */
%   | else if ( acquired(A, J), economicsectorcompany(B, J) )
%   | | then if ( companyalsoknownas(A, K), acquired(J, L) )
%   | | | then return 0.1168816799816828;  // std dev = 0.814, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | else return 0.4334608327310073;  // std dev = 1.000, 24.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=23 */
%   | | else if ( companyalsoknownas(A, M), economicsectorcompany(B, M) )
%   | | | then return 0.4837448177085103;  // std dev = 1.047, 21.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=20 */
%   | | | else return 0.15038283010009226;  // std dev = 18.376, 1,372.000 (wgt'ed) examples reached here.  /* #neg=713 #pos=659 */
WILL Produced-Tree #6
% FOR companyeconomicsector(A, B):
%   if ( companyalsoknownas(A, C), economicsectorcompany(B, C) )
%   then if ( acquired(A, D), countryhascompanyoffice(E, D) )
%   | then return 0.09646099513786752;  // std dev = 0.714, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else return 0.41921972130762736;  // std dev = 0.113, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   else if ( acquired(A, F), acquired(F, G) )
%   | then if ( economicsectorcompany(B, G) )
%   | | then return 0.400612658972914;  // std dev = 0.121, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( countryhascompanyoffice(H, A), companyalsoknownas(A, I) )
%   | | | then return -0.24291515478665432;  // std dev = 0.032, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | | else return 0.06752346437363509;  // std dev = 3.244, 54.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=23 */
%   | else if ( cityhascompanyoffice(J, A), countryhascompanyoffice(K, A) )
%   | | then if ( countryhascompanyoffice(K, L), economicsectorcompany(B, L) )
%   | | | then return 0.6348887680590205;  // std dev = 0.381, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | | | else return -0.3444453842918885;  // std dev = 0.181, 23.000 (wgt'ed) examples reached here.  /* #neg=23 */
%   | | else if ( cityhascompanyoffice(M, A), acquired(N, A) )
%   | | | then return 0.08872253678667645;  // std dev = 2.590, 41.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=20 */
%   | | | else return 0.12227092881802465;  // std dev = 18.197, 1,375.000 (wgt'ed) examples reached here.  /* #neg=697 #pos=678 */
WILL Produced-Tree #7
% FOR companyeconomicsector(A, B):
%   if ( acquired(A, C), companyceo(C, D) )
%   then if ( economicsectorcompany(B, C) )
%   | then return 0.22451380238556048;  // std dev = 0.280, 10.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | else if ( acquired(C, E) )
%   | | then return 0.0081469764971966;  // std dev = 0.397, 35.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=14 */
%   | | else return 0.09767991050064856;  // std dev = 0.472, 35.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=17 */
%   else if ( companyalsoknownas(A, F), cityhascompanyoffice(G, F) )
%   | then if ( acquired(F, H), economicsectorcompany(B, H) )
%   | | then return 0.4473219425833642;  // std dev = 0.312, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else if ( companyceo(A, I), acquired(F, J) )
%   | | | then return 0.10658570665634146;  // std dev = 2.597, 31.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=15 */
%   | | | else return -0.017525753374023813;  // std dev = 2.316, 36.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=16 */
%   | else if ( companyalsoknownas(A, K), acquired(K, L) )
%   | | then return 0.14944206903680032;  // std dev = 1.140, 6.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | else if ( companyalsoknownas(A, M) )
%   | | | then return 0.09332255779344036;  // std dev = 3.980, 74.000 (wgt'ed) examples reached here.  /* #neg=37 #pos=37 */
%   | | | else return 0.09801540951970787;  // std dev = 17.687, 1,324.000 (wgt'ed) examples reached here.  /* #neg=662 #pos=662 */
WILL Produced-Tree #8
% FOR companyeconomicsector(A, B):
%   if ( acquired(C, A), economicsectorcompany(B, C) )
%   then return 0.27221313510127454;  // std dev = 0.059, 41.000 (wgt'ed) examples reached here.  /* #pos=41 */
%   else if ( acquired(D, A), companyceo(D, E) )
%   | then if ( companyalsoknownas(D, F), acquired(G, F) )
%   | | then if ( economicsectorcompany(B, G) )
%   | | | then return 0.3375158482342493;  // std dev = 0.829, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.10906949909272504;  // std dev = 1.401, 9.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=4 */
%   | | else if ( countryhascompanyoffice(H, D) )
%   | | | then return 0.04558961246724151;  // std dev = 2.285, 25.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=10 */
%   | | | else return -0.04731510272084318;  // std dev = 3.203, 57.000 (wgt'ed) examples reached here.  /* #neg=41 #pos=16 */
%   | else if ( cityhascompanyoffice(I, A), acquired(J, A) )
%   | | then if ( acquired(K, J) )
%   | | | then return -0.09304914065331867;  // std dev = 0.946, 7.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=2 */
%   | | | else return 0.07141770727221661;  // std dev = 2.288, 25.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=11 */
%   | | else if ( companyceo(A, L) )
%   | | | then return 0.06617643672352401;  // std dev = 6.375, 200.000 (wgt'ed) examples reached here.  /* #neg=101 #pos=99 */
%   | | | else return 0.07350734165024315;  // std dev = 17.004, 1,189.000 (wgt'ed) examples reached here.  /* #neg=596 #pos=593 */
WILL Produced-Tree #9
% FOR companyeconomicsector(A, B):
%   if ( cityhascompanyoffice(C, A) )
%   then if ( cityhascompanyoffice(C, D), economicsectorcompany(B, D) )
%   | then if ( acquired(D, E), acquired(F, D) )
%   | | then return 0.4564890775260907;  // std dev = 0.174, 79.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=78 */
%   | | else if ( companyalsoknownas(A, G), companyalsoknownas(D, G) )
%   | | | then return 0.4477259464302744;  // std dev = 1.270, 30.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=29 */
%   | | | else return 0.20551320764059822;  // std dev = 4.137, 89.000 (wgt'ed) examples reached here.  /* #neg=30 #pos=59 */
%   | else return -0.36919508844056304;  // std dev = 0.082, 134.000 (wgt'ed) examples reached here.  /* #neg=134 */
%   else if ( acquired(A, H), economicsectorcompany(B, H) )
%   | then return 0.2555230172926549;  // std dev = 0.242, 17.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=16 */
%   | else if ( acquired(I, A), cityhascompanyoffice(J, I) )
%   | | then if ( acquired(K, I), economicsectorcompany(B, K) )
%   | | | then return 0.5221712480111234;  // std dev = 1.05e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.05428013074885209;  // std dev = 3.350, 57.000 (wgt'ed) examples reached here.  /* #neg=30 #pos=27 */
%   | | else if ( acquired(A, L) )
%   | | | then return 0.014724535600132293;  // std dev = 4.981, 111.000 (wgt'ed) examples reached here.  /* #neg=63 #pos=48 */
%   | | | else return 0.05565193830034197;  // std dev = 15.872, 1,036.000 (wgt'ed) examples reached here.  /* #neg=518 #pos=518 */
WILL Produced-Tree #10
% FOR companyeconomicsector(A, B):
%   if ( cityhascompanyoffice(C, A) )
%   then if ( cityhascompanyoffice(C, D), economicsectorcompany(B, D) )
%   | then if ( acquired(E, D), companyceo(D, F) )
%   | | then return 0.3398597709313422;  // std dev = 0.207, 96.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=92 */
%   | | else return 0.1931073107133985;  // std dev = 0.412, 102.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=74 */
%   | else return -0.2901294194462596;  // std dev = 0.073, 134.000 (wgt'ed) examples reached here.  /* #neg=134 */
%   else if ( companyalsoknownas(A, G), cityhascompanyoffice(H, G) )
%   | then if ( economicsectorcompany(B, G) )
%   | | then return 0.24328490453692372;  // std dev = 0.061, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else if ( acquired(I, G) )
%   | | | then return -0.36525828075229655;  // std dev = 0.100, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | | else return -0.06424801687165019;  // std dev = 1.420, 9.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=3 */
%   | else if ( acquired(A, J), economicsectorcompany(B, J) )
%   | | then return 0.20548871347385436;  // std dev = 0.240, 17.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=16 */
%   | | else if ( companyalsoknownas(A, K), economicsectorcompany(B, K) )
%   | | | then return 0.31704788312071014;  // std dev = 0.137, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.040413665193217915;  // std dev = 16.862, 1,176.000 (wgt'ed) examples reached here.  /* #neg=598 #pos=578 */


Starting fold 1

Target train facts examples: 9691
Target train pos examples: 264
Target train neg examples: 264

Target test facts examples: 9691
Target test pos	 examples: 133
Target test neg examples: 133

Amount of data: 0.2
******************************************
Performing Parameter Learning
******************************************
Refine
0;;companyeconomicsector(A, B) :- acquired(C, A).;true;true
0;true;economicsectorcompany(B, C).;false;false
0;false;companyalsoknownas(A, D).;true;true
0;false,true;economicsectorcompany(B, D).;false;true
0;false,true,false;acquired(A, E), economicsectorcompany(B, E).;false;false
0;false,false;companyceo(A, F).;true;true
0;false,false,true;bankchiefexecutiveceo(G, F).;false;false
0;false,false,false;countryhascompanyoffice(H, A).;false;false
1;;companyeconomicsector(A, B) :- companyalsoknownas(A, C), acquired(A, D).;true;true
1;true;economicsectorcompany(B, D).;false;true
1;true,false;economicsectorcompany(B, C), countryhascompanyoffice(E, C).;false;false
1;false;acquired(A, F), cityhascompanyoffice(G, A).;true;true
1;false,true;cityhascompanyoffice(G, H), economicsectorcompany(B, H).;false;false
1;false,false;acquired(I, A).;true;true
1;false,false,true;economicsectorcompany(B, I).;false;false
1;false,false,false;companyalsoknownas(A, J).;false;false
2;;companyeconomicsector(A, B) :- acquired(A, C), economicsectorcompany(B, C).;false;true
2;false;acquired(A, D).;true;true
2;false,true;companyalsoknownas(A, E), economicsectorcompany(B, E).;true;true
2;false,true,true;countryhascompanyoffice(F, D).;false;false
2;false,true,false;companyalsoknownas(D, G), companyalsoknownas(A, G).;false;false
2;false,false;acquired(H, A), companyceo(H, I).;true;true
2;false,false,true;economicsectorcompany(B, H).;false;false
2;false,false,false;cityhascompanyoffice(J, A).;false;false
3;;companyeconomicsector(A, B) :- acquired(A, C), acquired(C, D).;true;false
3;true;economicsectorcompany(B, D).;true;true
3;true,true;companyceo(C, E).;false;false
3;true,false;cityhascompanyoffice(F, A), companyceo(A, G).;true;true
3;true,false,true;companyalsoknownas(A, H), economicsectorcompany(B, H).;false;false
3;true,false,false;acquired(D, I), economicsectorcompany(B, I).;false;false
4;;companyeconomicsector(A, B) :- acquired(C, A), economicsectorcompany(B, C).;false;true
4;false;acquired(D, A), companyceo(D, E).;true;true
4;false,true;acquired(F, D), companyalsoknownas(F, G).;true;true
4;false,true,true;acquired(A, H).;false;false
4;false,true,false;acquired(I, D), economicsectorcompany(B, I).;false;false
4;false,false;acquired(A, J), economicsectorcompany(B, J).;true;true
4;false,false,true;companyalsoknownas(A, K), acquired(J, L).;false;false
4;false,false,false;companyalsoknownas(A, M), economicsectorcompany(B, M).;false;false
5;;companyeconomicsector(A, B) :- companyalsoknownas(A, C), economicsectorcompany(B, C).;true;true
5;true;acquired(A, D), countryhascompanyoffice(E, D).;false;false
5;false;acquired(A, F), acquired(F, G).;true;true
5;false,true;economicsectorcompany(B, G).;false;true
5;false,true,false;countryhascompanyoffice(H, A), companyalsoknownas(A, I).;false;false
5;false,false;cityhascompanyoffice(J, A), countryhascompanyoffice(K, A).;true;true
5;false,false,true;countryhascompanyoffice(K, L), economicsectorcompany(B, L).;false;false
5;false,false,false;cityhascompanyoffice(M, A), acquired(N, A).;false;false
6;;companyeconomicsector(A, B) :- acquired(A, C), companyceo(C, D).;true;true
6;true;economicsectorcompany(B, C).;false;true
6;true,false;acquired(C, E).;false;false
6;false;companyalsoknownas(A, F), cityhascompanyoffice(G, F).;true;true
6;false,true;acquired(F, H), economicsectorcompany(B, H).;false;true
6;false,true,false;companyceo(A, I), acquired(F, J).;false;false
6;false,false;companyalsoknownas(A, K), acquired(K, L).;false;true
6;false,false,false;companyalsoknownas(A, M).;false;false
7;;companyeconomicsector(A, B) :- acquired(C, A), economicsectorcompany(B, C).;false;true
7;false;acquired(D, A), companyceo(D, E).;true;true
7;false,true;companyalsoknownas(D, F), acquired(G, F).;true;true
7;false,true,true;economicsectorcompany(B, G).;false;false
7;false,true,false;countryhascompanyoffice(H, D).;false;false
7;false,false;cityhascompanyoffice(I, A), acquired(J, A).;true;true
7;false,false,true;acquired(K, J).;false;false
7;false,false,false;companyceo(A, L).;false;false
8;;companyeconomicsector(A, B) :- cityhascompanyoffice(C, A).;true;true
8;true;cityhascompanyoffice(C, D), economicsectorcompany(B, D).;true;false
8;true,true;acquired(D, E), acquired(F, D).;false;true
8;true,true,false;companyalsoknownas(A, G), companyalsoknownas(D, G).;false;false
8;false;acquired(A, H), economicsectorcompany(B, H).;false;true
8;false,false;acquired(I, A), cityhascompanyoffice(J, I).;true;true
8;false,false,true;acquired(K, I), economicsectorcompany(B, K).;false;false
8;false,false,false;acquired(A, L).;false;false
9;;companyeconomicsector(A, B) :- cityhascompanyoffice(C, A).;true;true
9;true;cityhascompanyoffice(C, D), economicsectorcompany(B, D).;true;false
9;true,true;acquired(E, D), companyceo(D, F).;false;false
9;false;companyalsoknownas(A, G), cityhascompanyoffice(H, G).;true;true
9;false,true;economicsectorcompany(B, G).;false;true
9;false,true,false;acquired(I, G).;false;false
9;false,false;acquired(A, J), economicsectorcompany(B, J).;false;true
9;false,false,false;companyalsoknownas(A, K), economicsectorcompany(B, K).;false;false


WILL Produced-Tree #1
% FOR teamplayssport(A, B):
%   if ( teamalsoknownas(A, C) )
%   then if ( recursion_teamplayssport(C, B) )
%   | then return 0.8581489350995122;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | else return 0.15226658215833588;  // std dev = 1.879, 17.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=5 */
%   else if ( teamplaysagainstteam(A, D) )
%   | then if ( recursion_teamplayssport(D, B) )
%   | | then return 0.858148935099512;  // std dev = 1.03e-07, 24.000 (wgt'ed) examples reached here.  /* #pos=24 */
%   | | else if ( teamalsoknownas(E, A), recursion_teamplayssport(E, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.10481402786345075;  // std dev = 0.981, 27.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=1 */
%   | else if ( teamplaysinleague(A, F) )
%   | | then return 0.4692600462106234;  // std dev = 0.487, 18.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=11 */
%   | | else if ( athleteplaysforteam(G, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.42064893509951234;  // std dev = 1.984, 16.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=9 */
WILL Produced-Tree #2
% FOR teamplayssport(A, B):
%   if ( teamplaysagainstteam(A, C), teamalsoknownas(D, A) )
%   then if ( recursion_teamplayssport(D, B) )
%   | then return 0.49925117916284667;  // std dev = 0.763, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | else if ( recursion_teamplayssport(C, B), athleteplaysforteam(E, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.10450994452550916;  // std dev = 0.848, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   else if ( teamalsoknownas(F, A), athleteledsportsteam(G, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( teamalsoknownas(A, H) )
%   | | then if ( recursion_teamplayssport(H, B) )
%   | | | then return 0.7194734122109545;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | | else return 0.12429876573280889;  // std dev = 1.690, 14.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=4 */
%   | | else if ( teamplaysagainstteam(A, I) )
%   | | | then return 0.27977884526613966;  // std dev = 2.904, 46.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=22 */
%   | | | else return 0.38292712440981325;  // std dev = 2.869, 34.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=20 */
WILL Produced-Tree #3
% FOR teamplayssport(A, B):
%   if ( teamalsoknownas(C, A), recursion_teamplayssport(C, B) )
%   then return 0.39646716322248554;  // std dev = 0.736, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   else if ( teamalsoknownas(D, A) )
%   | then if ( teamplaysagainstteam(A, E), recursion_teamplayssport(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( teamplaysagainstteam(D, F), teamplaysagainstteam(A, F) )
%   | | | then return -0.15323175708323317;  // std dev = 0.028, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.12231738017547539;  // std dev = 1.420, 9.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=3 */
%   | else if ( teamalsoknownas(A, G), teamplaysinleague(G, H) )
%   | | then if ( recursion_teamplayssport(G, B) )
%   | | | then return 0.5553664367462845;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | | else return 0.19604369386694534;  // std dev = 1.369, 8.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=3 */
%   | | else if ( athleteledsportsteam(I, A) )
%   | | | then return 0.24760705151521914;  // std dev = 1.933, 22.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=11 */
%   | | | else return 0.28344964746126206;  // std dev = 3.473, 57.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=31 */
WILL Produced-Tree #4
% FOR teamplayssport(A, B):
%   if ( teamalsoknownas(C, A), teamalsoknownas(D, C) )
%   then if ( recursion_teamplayssport(D, B) )
%   | then if ( teamplaysinleague(C, E) )
%   | | then return 0.2231151558939631;  // std dev = 1.432, 10.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( athleteledsportsteam(F, A), teamplaysinleague(A, G) )
%   | | then if ( teamplaysagainstteam(A, H), recursion_teamplayssport(H, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.12416832233106456;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( teamalsoknownas(I, D), recursion_teamplayssport(I, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.22466466545339536;  // std dev = 0.099, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   else return 0.2103272397216652;  // std dev = 4.220, 91.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=47 */
WILL Produced-Tree #5
% FOR teamplayssport(A, B):
%   if ( teamalsoknownas(A, C), recursion_teamplayssport(C, B) )
%   then return 0.39999007282781873;  // std dev = 0.046, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else if ( teamalsoknownas(A, D), teamplaysinleague(D, E) )
%   | then if ( teamalsoknownas(D, F), teamplaysagainstteam(F, G) )
%   | | then if ( teamalsoknownas(H, A) )
%   | | | then return 0.06619096841401353;  // std dev = 1.176, 7.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=2 */
%   | | | else return 0.2534436602827717;  // std dev = 1.225, 6.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | else if ( teamalsoknownas(D, I), recursion_teamplayssport(I, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.2465563397172283;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else if ( teamalsoknownas(J, A), recursion_teamplayssport(J, B) )
%   | | then if ( teamplaysagainstteam(A, K), teamalsoknownas(L, J) )
%   | | | then return 0.455869522341776;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | | else return 0.045624154351420115;  // std dev = 0.585, 2.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */
%   | | else if ( teamplaysagainstteam(A, M), recursion_teamplayssport(M, B) )
%   | | | then return 0.5466279034750825;  // std dev = 0.020, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | | else return 0.02620492245636905;  // std dev = 3.409, 62.000 (wgt'ed) examples reached here.  /* #neg=41 #pos=21 */
WILL Produced-Tree #6
% FOR teamplayssport(A, B):
%   if ( teamplaysagainstteam(A, C), recursion_teamplayssport(C, B) )
%   then if ( teamalsoknownas(D, A), athleteplaysforteam(E, D) )
%   | then return 0.1907497644303726;  // std dev = 0.662, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | else return 0.40221575743204396;  // std dev = 0.145, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   else if ( teamalsoknownas(F, A), teamalsoknownas(G, F) )
%   | then if ( recursion_teamplayssport(G, B) )
%   | | then return 0.09985510911354276;  // std dev = 1.357, 8.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=3 */
%   | | else if ( athleteplaysforteam(H, A), teamplaysagainstteam(A, I) )
%   | | | then return -0.12459810072806879;  // std dev = 0.015, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | | else return -0.2549153506668067;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( athleteledsportsteam(J, A), athleteplaysforteam(K, A) )
%   | | then if ( athleteplaysforteam(K, L), recursion_teamplayssport(L, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.23573867798507844;  // std dev = 0.050, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else if ( athleteledsportsteam(M, A), teamalsoknownas(A, N) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.09285191378449983;  // std dev = 3.422, 54.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=23 */
WILL Produced-Tree #7
% FOR teamplayssport(A, B):
%   if ( teamalsoknownas(C, A), teamplaysinleague(C, D) )
%   then if ( recursion_teamplayssport(C, B) )
%   | then return 0.14672902648229907;  // std dev = 0.664, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | else if ( teamalsoknownas(E, C) )
%   | | then return 0.018651089627382753;  // std dev = 1.399, 11.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=3 */
%   | | else return -0.16463308672774196;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   else if ( teamplaysagainstteam(A, F), athleteledsportsteam(G, F) )
%   | then if ( teamalsoknownas(H, F), recursion_teamplayssport(H, B) )
%   | | then return 0.31282163798844426;  // std dev = 0.111, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | else if ( teamplaysinleague(A, I), teamalsoknownas(J, F) )
%   | | | then return -0.2163200413755334;  // std dev = 0.137, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | | | else return 0.10715957235017866;  // std dev = 1.161, 12.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=7 */
%   | else if ( teamplaysagainstteam(A, K), teamalsoknownas(L, K) )
%   | | then return -0.030797429666724385;  // std dev = 0.404, 2.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */
%   | | else if ( teamplaysagainstteam(A, M) )
%   | | | then return -0.14081425493422062;  // std dev = 0.892, 7.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=1 */
%   | | | else return 0.2146961177421493;  // std dev = 2.842, 34.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=21 */
WILL Produced-Tree #8
% FOR teamplayssport(A, B):
%   if ( teamalsoknownas(A, C), recursion_teamplayssport(C, B) )
%   then return 0.21029655550453508;  // std dev = 0.071, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else if ( teamalsoknownas(A, D), teamplaysinleague(D, E) )
%   | then if ( teamplaysagainstteam(D, F), teamalsoknownas(F, G) )
%   | | then if ( recursion_teamplayssport(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.13442622320389994;  // std dev = 0.014, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else if ( athleteplaysforteam(H, D) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.11715940338328652;  // std dev = 1.681, 12.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=5 */
%   | else if ( athleteledsportsteam(I, A), teamalsoknownas(A, J) )
%   | | then if ( teamalsoknownas(J, K) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.46043665807495154;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( teamplaysinleague(A, L) )
%   | | | then return 0.0730319840849989;  // std dev = 2.727, 64.000 (wgt'ed) examples reached here.  /* #neg=30 #pos=34 */
%   | | | else return 0.06574667234120773;  // std dev = 2.075, 22.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=11 */
WILL Produced-Tree #9
% FOR teamplayssport(A, B):
%   if ( athleteledsportsteam(C, A) )
%   then if ( athleteledsportsteam(C, D), recursion_teamplayssport(D, B) )
%   | then if ( teamalsoknownas(E, D), teamalsoknownas(D, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( teamplaysagainstteam(A, G), teamplaysagainstteam(D, G) )
%   | | | then return 0.24489600978788592;  // std dev = 0.154, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.1824972370091525;  // std dev = 0.206, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   else if ( teamalsoknownas(H, A), recursion_teamplayssport(H, B) )
%   | then return 0.26050167408898717;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( teamalsoknownas(A, I), athleteledsportsteam(J, I) )
%   | | then if ( teamalsoknownas(I, K), recursion_teamplayssport(K, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.10955426540737315;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( teamalsoknownas(L, A) )
%   | | | then return 0.0053890952508248045;  // std dev = 1.393, 10.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=3 */
%   | | | else return 0.07489688707577338;  // std dev = 3.369, 63.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=34 */
WILL Produced-Tree #10
% FOR teamplayssport(A, B):
%   if ( athleteledsportsteam(C, A) )
%   then if ( athleteledsportsteam(C, D), recursion_teamplayssport(D, B) )
%   | then if ( teamalsoknownas(D, E), teamplaysinleague(D, F) )
%   | | then return 0.10778813272963306;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else return 0.21011808603755017;  // std dev = 0.091, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else return -0.15726895837744928;  // std dev = 0.186, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   else if ( teamplaysagainstteam(A, G), athleteledsportsteam(H, G) )
%   | then if ( recursion_teamplayssport(G, B) )
%   | | then return 0.2421730170476497;  // std dev = 0.064, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else if ( teamalsoknownas(G, I) )
%   | | | then return -0.26058177941159866;  // std dev = 0.234, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | | | else return 0.230245519897586;  // std dev = 0.662, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else if ( teamalsoknownas(J, A), recursion_teamplayssport(J, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( teamplaysagainstteam(A, K), recursion_teamplayssport(K, B) )
%   | | | then return 0.20949020263272122;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | | else return 0.06072626440293497;  // std dev = 3.375, 51.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=25 */


Results
   AUC ROC   = 0.854005
   AUC PR    = 0.856191
   CLL	      = -0.480734
   Precision = 0.726619 at threshold = 0.5
   Recall    = 0.759398
   F1        = 0.742647


Total learning time: 6.236 seconds
Total inference time: 3.573 seconds
AUC ROC: 0.854005


Results scoring model
   AUC ROC   = 0.919749
   AUC PR    = 0.921156
   CLL	      = -0.423636
   Precision = 0.789474 at threshold = 0.5
   Recall    = 0.865385
   F1        = 0.825688


Total scoring time: 2.93 seconds
Parameter learned model CLL: -0.423636


Structure after Parameter Learning
[['teamplayssport(A, B)', {'': 'teamalsoknownas(A, C)', 'true': 'recursion_teamplayssport(C, B)', 'false': 'teamplaysagainstteam(A, D)', 'false,true': 'recursion_teamplayssport(D, B)', 'false,true,false': 'teamalsoknownas(E, A), recursion_teamplayssport(E, B)', 'false,false': 'teamplaysinleague(A, F)', 'false,false,false': 'athleteplaysforteam(G, A)'}, {'true,true': [0.0, 0, 2], 'true,false': [1.879, 12, 5], 'false,true,true': [1.03e-07, 0, 24], 'false,true,false,true': [0.0, 0, 0], 'false,true,false,false': [0.981, 26, 1], 'false,false,true': [0.487, 7, 11], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.984, 7, 9]}], ['teamplayssport(A, B)', {'': 'teamplaysagainstteam(A, C), teamalsoknownas(D, A)', 'true': 'recursion_teamplayssport(D, B)', 'true,false': 'recursion_teamplayssport(C, B), athleteplaysforteam(E, C)', 'false': 'teamalsoknownas(F, A), athleteledsportsteam(G, A)', 'false,false': 'teamalsoknownas(A, H)', 'false,false,true': 'recursion_teamplayssport(H, B)', 'false,false,false': 'teamplaysagainstteam(A, I)'}, {'true,true': [0.763, 1, 3], 'true,false,true': [0.0, 0, 0], 'true,false,false': [0.848, 3, 1], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 2], 'false,false,true,false': [1.69, 10, 4], 'false,false,false,true': [2.904, 24, 22], 'false,false,false,false': [2.869, 14, 20]}], ['teamplayssport(A, B)', {'': 'teamalsoknownas(C, A), recursion_teamplayssport(C, B)', 'false': 'teamalsoknownas(D, A)', 'false,true': 'teamplaysagainstteam(A, E), recursion_teamplayssport(E, B)', 'false,true,false': 'teamplaysagainstteam(D, F), teamplaysagainstteam(A, F)', 'false,false': 'teamalsoknownas(A, G), teamplaysinleague(G, H)', 'false,false,true': 'recursion_teamplayssport(G, B)', 'false,false,false': 'athleteledsportsteam(I, A)'}, {'true': [0.736, 1, 3], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [0.028, 3, 0], 'false,true,false,false': [1.42, 6, 3], 'false,false,true,true': [0.0, 0, 1], 'false,false,true,false': [1.369, 5, 3], 'false,false,false,true': [1.933, 11, 11], 'false,false,false,false': [3.473, 26, 31]}], ['teamplayssport(A, B)', {'': 'teamalsoknownas(C, A), teamalsoknownas(D, C)', 'true': 'recursion_teamplayssport(D, B)', 'true,true': 'teamplaysinleague(C, E)', 'true,false': 'athleteledsportsteam(F, A), teamplaysinleague(A, G)', 'true,false,true': 'teamplaysagainstteam(A, H), recursion_teamplayssport(H, B)', 'true,false,false': 'teamalsoknownas(I, D), recursion_teamplayssport(I, B)'}, {'true,true,true': [1.432, 5, 5], 'true,true,false': [0.0, 0, 0], 'true,false,true,true': [0.0, 0, 0], 'true,false,true,false': [0.0, 1, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [0.099, 2, 0], 'false': [4.22, 44, 47]}], ['teamplayssport(A, B)', {'': 'teamalsoknownas(A, C), recursion_teamplayssport(C, B)', 'false': 'teamalsoknownas(A, D), teamplaysinleague(D, E)', 'false,true': 'teamalsoknownas(D, F), teamplaysagainstteam(F, G)', 'false,true,true': 'teamalsoknownas(H, A)', 'false,true,false': 'teamalsoknownas(D, I), recursion_teamplayssport(I, B)', 'false,false': 'teamalsoknownas(J, A), recursion_teamplayssport(J, B)', 'false,false,true': 'teamplaysagainstteam(A, K), teamalsoknownas(L, J)', 'false,false,false': 'teamplaysagainstteam(A, M), recursion_teamplayssport(M, B)'}, {'true': [0.046, 0, 2], 'false,true,true,true': [1.176, 5, 2], 'false,true,true,false': [1.225, 3, 3], 'false,true,false,true': [0.0, 0, 0], 'false,true,false,false': [0.0, 2, 0], 'false,false,true,true': [0.0, 0, 2], 'false,false,true,false': [0.585, 1, 1], 'false,false,false,true': [0.02, 0, 21], 'false,false,false,false': [3.409, 41, 21]}], ['teamplayssport(A, B)', {'': 'teamplaysagainstteam(A, C), recursion_teamplayssport(C, B)', 'true': 'teamalsoknownas(D, A), athleteplaysforteam(E, D)', 'false': 'teamalsoknownas(F, A), teamalsoknownas(G, F)', 'false,true': 'recursion_teamplayssport(G, B)', 'false,true,false': 'athleteplaysforteam(H, A), teamplaysagainstteam(A, I)', 'false,false': 'athleteledsportsteam(J, A), athleteplaysforteam(K, A)', 'false,false,true': 'athleteplaysforteam(K, L), recursion_teamplayssport(L, B)', 'false,false,false': 'athleteledsportsteam(M, A), teamalsoknownas(A, N)'}, {'true,true': [0.662, 1, 3], 'true,false': [0.145, 0, 23], 'false,true,true': [1.357, 5, 3], 'false,true,false,true': [0.015, 2, 0], 'false,true,false,false': [0.0, 1, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [0.05, 12, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [3.422, 31, 23]}], ['teamplayssport(A, B)', {'': 'teamalsoknownas(C, A), teamplaysinleague(C, D)', 'true': 'recursion_teamplayssport(C, B)', 'true,false': 'teamalsoknownas(E, C)', 'false': 'teamplaysagainstteam(A, F), athleteledsportsteam(G, F)', 'false,true': 'teamalsoknownas(H, F), recursion_teamplayssport(H, B)', 'false,true,false': 'teamplaysinleague(A, I), teamalsoknownas(J, F)', 'false,false': 'teamplaysagainstteam(A, K), teamalsoknownas(L, K)', 'false,false,false': 'teamplaysagainstteam(A, M)'}, {'true,true': [0.664, 1, 3], 'true,false,true': [1.399, 8, 3], 'true,false,false': [0.0, 1, 0], 'false,true,true': [0.111, 0, 16], 'false,true,false,true': [0.137, 17, 0], 'false,true,false,false': [1.161, 5, 7], 'false,false,true': [0.404, 1, 1], 'false,false,false,true': [0.892, 6, 1], 'false,false,false,false': [2.842, 13, 21]}], ['teamplayssport(A, B)', {'': 'teamalsoknownas(A, C), recursion_teamplayssport(C, B)', 'false': 'teamalsoknownas(A, D), teamplaysinleague(D, E)', 'false,true': 'teamplaysagainstteam(D, F), teamalsoknownas(F, G)', 'false,true,true': 'recursion_teamplayssport(G, B)', 'false,true,false': 'athleteplaysforteam(H, D)', 'false,false': 'athleteledsportsteam(I, A), teamalsoknownas(A, J)', 'false,false,true': 'teamalsoknownas(J, K)', 'false,false,false': 'teamplaysinleague(A, L)'}, {'true': [0.071, 0, 2], 'false,true,true,true': [0.0, 0, 0], 'false,true,true,false': [0.014, 3, 0], 'false,true,false,true': [0.0, 0, 0], 'false,true,false,false': [1.681, 7, 5], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [0.0, 1, 0], 'false,false,false,true': [2.727, 30, 34], 'false,false,false,false': [2.075, 11, 11]}], ['teamplayssport(A, B)', {'': 'athleteledsportsteam(C, A)', 'true': 'athleteledsportsteam(C, D), recursion_teamplayssport(D, B)', 'true,true': 'teamalsoknownas(E, D), teamalsoknownas(D, F)', 'true,true,false': 'teamplaysagainstteam(A, G), teamplaysagainstteam(D, G)', 'false': 'teamalsoknownas(H, A), recursion_teamplayssport(H, B)', 'false,false': 'teamalsoknownas(A, I), athleteledsportsteam(J, I)', 'false,false,true': 'teamalsoknownas(I, K), recursion_teamplayssport(K, B)', 'false,false,false': 'teamalsoknownas(L, A)'}, {'true,true,true': [0.0, 0, 0], 'true,true,false,true': [0.154, 0, 14], 'true,true,false,false': [0.0, 0, 0], 'true,false': [0.206, 15, 0], 'false,true': [0.0, 0, 1], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [0.0, 1, 0], 'false,false,false,true': [1.393, 7, 3], 'false,false,false,false': [3.369, 29, 34]}], ['teamplayssport(A, B)', {'': 'athleteledsportsteam(C, A)', 'true': 'athleteledsportsteam(C, D), recursion_teamplayssport(D, B)', 'true,true': 'teamalsoknownas(D, E), teamplaysinleague(D, F)', 'false': 'teamplaysagainstteam(A, G), athleteledsportsteam(H, G)', 'false,true': 'recursion_teamplayssport(G, B)', 'false,true,false': 'teamalsoknownas(G, I)', 'false,false': 'teamalsoknownas(J, A), recursion_teamplayssport(J, B)', 'false,false,false': 'teamplaysagainstteam(A, K), recursion_teamplayssport(K, B)'}, {'true,true,true': [0.0, 0, 1], 'true,true,false': [0.091, 0, 13], 'true,false': [0.186, 15, 0], 'false,true,true': [0.064, 0, 10], 'false,true,false,true': [0.234, 10, 0], 'false,true,false,false': [0.662, 1, 2], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 1], 'false,false,false,false': [3.375, 26, 25]}]]
[{'': [0.23268698060941836, 0.2491349480968861], 'false': [0.24990388312187753, 0.24221453287197228], 'false,true': [4.440892098500626e-16, 0.03566529492455423], 'false,false': [0.23765432098765396, 0.24609374999999992], 'false,false,false': [nan, 0.24609374999999992], 'true': [0.0, 0.20761245674740467], 'false,true,false': [nan, 0.035665294924554225]}, {'': [0.20159735255693026, 0.21409111761357025], 'false': [nan, 0.2140911176135704], 'false,false': [0.21731564761318944, 0.21084532444052412], 'false,false,true': [0.0, 0.20408163265306126], 'false,false,false': [0.18326786746605292, 0.24203825021670897], 'true': [0.14549349578608534, 0.17979088816627034], 'true,false': [nan, 0.17979088816627034]}, {'': [0.13535554548242218, 0.20501798154179604], 'false': [0.18234564858856525, 0.20250042157057868], 'false,false': [0.22108521812842788, 0.2002393473764002], 'false,false,true': [0.0, 0.23437500000000006], 'false,false,false': [0.16984180524511147, 0.21161396981749578], 'false,true': [nan, 0.18234564858856528], 'false,true,false': [0.0002607279299815339, 0.22405879038042187]}, {'': [0.1894800202600326, 0.1956712606398973], 'true': [0.20507146552208355, 0.005486397316654933], 'true,true': [0.20507146552208355, nan], 'true,false': [0.0, 0.004863090981328658], 'true,false,false': [nan, 0.004863090981328658], 'true,false,true': [nan, 0.0]}, {'': [0.0010610357999789877, 0.1935045004259134], 'false': [0.218094142348013, 0.18868574986560271], 'false,true': [0.2304020222359237, 0.0], 'false,true,true': [0.19742056914464917, 0.25], 'false,false': [0.12753302899824454, 0.19123633640454138], 'false,false,false': [1.9683000321137795e-05, 0.18747746423219108], 'false,false,true': [0.0, 0.17091542701771778], 'false,true,false': [nan, 0.0]}, {'': [0.022673559029312357, 0.19199840004695057], 'false': [0.1827912501621944, 0.19352722872593442], 'false,false': [0.0002059035641219046, 0.21685629102461343], 'false,false,false': [nan, 0.21685629102461343], 'false,true': [0.2303215243828248, 0.00385019352663007], 'true': [0.1096981437114167, 0.0009139795837148103], 'false,true,false': [0.0001144284127465936, 0.0], 'false,false,true': [nan, 0.0002059035641219046]}, {'': [0.1557229004855432, 0.15601375755472605], 'false': [0.08279922281555649, 0.22873426341901876], 'false,false': [0.08151912070091974, 0.23432712693869268], 'false,false,false': [0.11359623073889281, 0.23760511290726197], 'true': [0.11021740472535016, 0.16575397746085554], 'true,false': [0.17802309675787317, 0.0], 'false,true': [0.0007632339728170512, 0.07250396403447706], 'false,true,false': [0.0011060318890728587, 0.11231089566227175]}, {'': [0.0025313040585146704, 0.14703484302923395], 'false': [0.19852305276638296, 0.13815709725118797], 'false,true': [6.109480600791546e-05, 0.23547947675542333], 'false,true,false': [nan, 0.23547947675542333], 'false,false': [0.0, 0.1365152552283235], 'false,false,false': [0.11617550640181182, 0.1956459353873602], 'false,true,true': [nan, 6.109480600791546e-05], 'false,false,true': [nan, 0.0]}, {'': [0.04789428164900926, 0.17865451171879534], 'false': [0.0, 0.18054872955026066], 'false,false': [0.0, 0.18260848166979354], 'false,false,false': [0.19395382089348115, 0.18014580771857552], 'true': [0.0016858034285395387, 0.002839097285539664], 'true,true': [nan, 0.001685803428539531], 'true,true,false': [0.0016858034285395387, nan], 'false,false,true': [nan, 0.0]}, {'': [0.03418798446059824, 0.17798545463204113], 'false': [0.08304462933809104, 0.21944885517532378], 'false,false': [nan, 0.21944885517532395], 'false,false,false': [0.0, 0.22332618334045104], 'false,true': [0.00041339793976532537, 0.08065055390976601], 'false,true,false': [0.0054567970087230685, 0.1459799196718467], 'true': [0.0012821747695760705, 0.002307524333877331], 'true,true': [0.0, 0.0006328450734335215]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;teamplayssport(A, B) :- teamalsoknownas(A, C).;true;true
0;true;recursion_teamplayssport(C, B).;true;true
0;false;teamplaysagainstteam(A, D).;true;true
0;false,true;recursion_teamplayssport(D, B).;true;true
1;;teamplayssport(A, B) :- teamplaysagainstteam(A, C), teamalsoknownas(D, A).;true;true
1;false;teamalsoknownas(A, H).;true;true
1;false,true;recursion_teamplayssport(H, B).;true;true
2;;teamplayssport(A, B) :- teamalsoknownas(C, A), recursion_teamplayssport(C, B).;true;true
2;false;teamalsoknownas(D, A).;true;true
2;false,true;teamplaysagainstteam(D, F), teamplaysagainstteam(A, F).;true;true
2;false,false;teamalsoknownas(A, G), teamplaysinleague(G, H).;true;true
2;false,false,true;recursion_teamplayssport(G, B).;true;true
3;;teamplayssport(A, B) :- teamalsoknownas(C, A), teamalsoknownas(D, C).;true;true
3;true;recursion_teamplayssport(D, B).;true;true
3;true,false;athleteledsportsteam(F, A), teamplaysinleague(A, G).;true;true
4;;teamplayssport(A, B) :- teamalsoknownas(A, C), recursion_teamplayssport(C, B).;true;true
4;false;teamalsoknownas(A, D), teamplaysinleague(D, E).;true;true
4;false,true;teamalsoknownas(D, F), teamplaysagainstteam(F, G).;true;true
4;false,false;teamalsoknownas(J, A), recursion_teamplayssport(J, B).;true;true
4;false,false,true;teamplaysagainstteam(A, K), teamalsoknownas(L, J).;true;true
4;false,false,false;teamplaysagainstteam(A, M), recursion_teamplayssport(M, B).;true;true
5;;teamplayssport(A, B) :- teamplaysagainstteam(A, C), recursion_teamplayssport(C, B).;true;true
5;true;teamalsoknownas(D, A), athleteplaysforteam(E, D).;true;true
5;false;teamalsoknownas(F, A), teamalsoknownas(G, F).;true;true
5;false,true;recursion_teamplayssport(G, B).;true;true
5;false,true,false;athleteplaysforteam(H, A), teamplaysagainstteam(A, I).;true;true
5;false,false;athleteledsportsteam(J, A), athleteplaysforteam(K, A).;true;true
6;;teamplayssport(A, B) :- teamalsoknownas(C, A), teamplaysinleague(C, D).;true;true
6;true;recursion_teamplayssport(C, B).;true;true
6;true,false;teamalsoknownas(E, C).;true;true
6;false;teamplaysagainstteam(A, F), athleteledsportsteam(G, F).;true;true
6;false,true;teamalsoknownas(H, F), recursion_teamplayssport(H, B).;true;true
6;false,true,false;teamplaysinleague(A, I), teamalsoknownas(J, F).;true;true
7;;teamplayssport(A, B) :- teamalsoknownas(A, C), recursion_teamplayssport(C, B).;true;true
7;false;teamalsoknownas(A, D), teamplaysinleague(D, E).;true;true
7;false,true;teamplaysagainstteam(D, F), teamalsoknownas(F, G).;true;true
7;false,false;athleteledsportsteam(I, A), teamalsoknownas(A, J).;true;true
8;;teamplayssport(A, B) :- athleteledsportsteam(C, A).;true;true
8;true;athleteledsportsteam(C, D), recursion_teamplayssport(D, B).;true;true
8;false;teamalsoknownas(H, A), recursion_teamplayssport(H, B).;true;true
8;false,false;teamalsoknownas(A, I), athleteledsportsteam(J, I).;true;true
9;;teamplayssport(A, B) :- athleteledsportsteam(C, A).;true;true
9;true;athleteledsportsteam(C, D), recursion_teamplayssport(D, B).;true;true
9;true,true;teamalsoknownas(D, E), teamplaysinleague(D, F).;true;true
9;false;teamplaysagainstteam(A, G), athleteledsportsteam(H, G).;true;true
9;false,true;recursion_teamplayssport(G, B).;true;true
9;false,false;teamplaysagainstteam(A, K), recursion_teamplayssport(K, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR teamplayssport(A, B):
%   if ( teamalsoknownas(A, C) )
%   then if ( recursion_teamplayssport(C, B) )
%   | then return 0.8581489350995122;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | else if ( athleteplayssport(D, B), athleteledsportsteam(D, E) )
%   | | then if ( athleteplaysforteam(D, E), teamalsoknownas(E, F) )
%   | | | then return 0.024815601766178873;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | | | else return 0.8581489350995122;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return -0.14185106490048777;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   else if ( teamplaysagainstteam(A, G) )
%   | then if ( recursion_teamplayssport(G, B) )
%   | | then return 0.858148935099512;  // std dev = 1.03e-07, 24.000 (wgt'ed) examples reached here.  /* #pos=24 */
%   | | else return -0.10481402786345073;  // std dev = 0.189, 27.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=1 */
%   | else if ( athleteplayssport(H, B), athleteledsportsteam(H, I) )
%   | | then return 0.8081489350995122;  // std dev = 0.218, 20.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=19 */
%   | | else if ( athleteplayssport(J, B), athleteplaysinleague(J, K) )
%   | | | then return 0.0581489350995122;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else return -0.14185106490048777;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
WILL Produced-Tree #2
% FOR teamplayssport(A, B):
%   if ( teamplaysagainstteam(A, C), teamalsoknownas(D, A) )
%   then if ( teamplaysagainstteam(E, A), recursion_teamplayssport(E, B) )
%   | then return 0.5737245343368683;  // std dev = 0.812, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else return -0.12819127348780043;  // std dev = 0.003, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else if ( teamalsoknownas(A, F) )
%   | then if ( recursion_teamplayssport(F, B) )
%   | | then return 0.7194734122109545;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else if ( teamplaysagainstteam(G, A), teamplaysinleague(A, H) )
%   | | | then return -0.13192935317701457;  // std dev = 0.022, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | | else return 0.2921508508548142;  // std dev = 1.209, 8.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=4 */
%   | else if ( athleteplayssport(I, B), athleteledsportsteam(I, J) )
%   | | then if ( teamplaysagainstteam(A, K), recursion_teamplayssport(K, B) )
%   | | | then return 0.7194734122109543;  // std dev = 7.30e-08, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | | else return 0.4246405562657403;  // std dev = 2.349, 31.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=20 */
%   | | else if ( athleteplayssport(L, B), athleteplaysinleague(L, M) )
%   | | | then return -0.01676045129184297;  // std dev = 0.928, 8.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */
%   | | | else return -0.12771061236990383;  // std dev = 0.009, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
WILL Produced-Tree #3
% FOR teamplayssport(A, B):
%   if ( teamalsoknownas(C, A), recursion_teamplayssport(C, B) )
%   then return 0.38545074937886303;  // std dev = 0.712, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   else if ( teamalsoknownas(D, A) )
%   | then if ( teamplaysagainstteam(D, E), teamplaysagainstteam(A, E) )
%   | | then return -0.11453487332745037;  // std dev = 0.003, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else if ( teamplaysinleague(A, F) )
%   | | | then return 0.27291346418975165;  // std dev = 1.023, 6.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | | else return -0.15273659449455898;  // std dev = 0.053, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( teamalsoknownas(A, G), teamplaysinleague(G, H) )
%   | | then if ( recursion_teamplayssport(G, B) )
%   | | | then return 0.5553664367462845;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | | else return 0.1681699231692444;  // std dev = 1.072, 8.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=3 */
%   | | else if ( athleteplayssport(I, B), athleteledsportsteam(I, J) )
%   | | | then return 0.4264225061449314;  // std dev = 2.381, 51.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=40 */
%   | | | else return -0.06189109897197846;  // std dev = 1.145, 28.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=2 */
WILL Produced-Tree #4
% FOR teamplayssport(A, B):
%   if ( teamalsoknownas(C, A), teamalsoknownas(D, C) )
%   then if ( recursion_teamplayssport(D, B) )
%   | then if ( athleteplaysforteam(E, A) )
%   | | then return 0.5693727985689278;  // std dev = 0.181, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( teamalsoknownas(A, F), teamplaysinleague(A, G) )
%   | | | then return 0.0667207641474866;  // std dev = 0.646, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | else return 0.03154802328494974;  // std dev = 0.626, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | else return -0.10115707835766004;  // std dev = 0.003, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else if ( athleteplayssport(H, B), athleteledsportsteam(H, I) )
%   | then if ( teamplaysagainstteam(J, A), teamplaysagainstteam(A, K) )
%   | | then if ( recursion_teamplayssport(K, B) )
%   | | | then return 0.4182932065089178;  // std dev = 0.743, 24.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=23 */
%   | | | else return -0.2485910700337831;  // std dev = 0.104, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | else if ( teamplaysinleague(A, L), athleteplaysinleague(M, L) )
%   | | | then return 0.5883241115136703;  // std dev = 0.191, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return 0.4778246149199189;  // std dev = 0.977, 16.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   | else return -0.06732040796288574;  // std dev = 0.203, 33.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=2 */
WILL Produced-Tree #5
% FOR teamplayssport(A, B):
%   if ( teamalsoknownas(A, C), recursion_teamplayssport(C, B) )
%   then return 0.45377245927742227;  // std dev = 0.188, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else if ( teamalsoknownas(A, D), teamplaysinleague(D, E) )
%   | then if ( teamalsoknownas(D, F), teamplaysagainstteam(F, G) )
%   | | then if ( athleteplayssport(H, B), athleteledsportsteam(H, I) )
%   | | | then return 0.21234876681877068;  // std dev = 1.050, 9.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=5 */
%   | | | else return -0.1337674848499171;  // std dev = 0.061, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return -0.1220744272440563;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else if ( teamalsoknownas(J, A), recursion_teamplayssport(J, B) )
%   | | then if ( teamplaysagainstteam(A, K), teamalsoknownas(L, J) )
%   | | | then return 0.3573930702422937;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | | else return -0.004537748964529437;  // std dev = 0.562, 2.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */
%   | | else if ( teamplaysagainstteam(A, M), recursion_teamplayssport(M, B) )
%   | | | then return 0.3492498831294224;  // std dev = 0.000, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | | else return 0.056239795128760345;  // std dev = 2.333, 62.000 (wgt'ed) examples reached here.  /* #neg=41 #pos=21 */
WILL Produced-Tree #6
% FOR teamplayssport(A, B):
%   if ( teamplaysagainstteam(A, C), recursion_teamplayssport(C, B) )
%   then if ( teamalsoknownas(D, A), athleteplaysforteam(E, D) )
%   | then return 0.13831183967525634;  // std dev = 0.629, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | else return 0.281343471993575;  // std dev = 0.202, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   else if ( teamalsoknownas(F, A), teamalsoknownas(G, F) )
%   | then if ( recursion_teamplayssport(G, B) )
%   | | then if ( teamalsoknownas(A, H), teamplaysinleague(A, I) )
%   | | | then return 0.1433264607290112;  // std dev = 0.776, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return 0.01736044634696833;  // std dev = 0.619, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | else if ( athleteplaysforteam(J, A), teamplaysagainstteam(A, K) )
%   | | | then return -0.09106374284275381;  // std dev = 0.013, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | | else return -0.0938747958964162;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( athleteledsportsteam(L, A), athleteplaysforteam(M, A) )
%   | | then return -0.12973779934675814;  // std dev = 0.146, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else if ( teamplaysagainstteam(A, N), athleteplaysforteam(P, N) )
%   | | | then return -0.1223205183368816;  // std dev = 0.779, 18.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=1 */
%   | | | else return 0.1986022716149245;  // std dev = 1.807, 36.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=22 */
WILL Produced-Tree #7
% FOR teamplayssport(A, B):
%   if ( teamalsoknownas(C, A), teamplaysinleague(C, D) )
%   then if ( recursion_teamplayssport(C, B) )
%   | then return 0.10827143943112973;  // std dev = 0.633, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | else if ( teamalsoknownas(E, C) )
%   | | then if ( athleteplayssport(F, B), athleteledsportsteam(F, G) )
%   | | | then return 0.13211495958524186;  // std dev = 0.936, 6.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | | else return -0.10818756665883826;  // std dev = 0.068, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return -0.0927137420798007;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   else if ( teamplaysagainstteam(A, H), athleteledsportsteam(I, H) )
%   | then return 0.05281399425307646;  // std dev = 0.202, 45.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=23 */
%   | else if ( athleteplayssport(J, B), athleteledsportsteam(J, K) )
%   | | then if ( athleteplaysforteam(J, K), teamalsoknownas(K, L) )
%   | | | then return 0.06040501399941519;  // std dev = 0.968, 7.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=4 */
%   | | | else return 0.3563782821349308;  // std dev = 0.066, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else if ( teamplaysagainstteam(M, A), athleteplayssport(N, B) )
%   | | | then return 0.13569898071924705;  // std dev = 0.894, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   | | | else return -0.1394082885525279;  // std dev = 0.087, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
WILL Produced-Tree #8
% FOR teamplayssport(A, B):
%   if ( teamalsoknownas(A, C), recursion_teamplayssport(C, B) )
%   then return 0.27484158234387507;  // std dev = 0.139, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else if ( teamalsoknownas(A, D), teamplaysinleague(D, E) )
%   | then if ( teamplaysagainstteam(D, F), teamalsoknownas(F, G) )
%   | | then return -0.09084689494821681;  // std dev = 0.028, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else if ( athleteplayssport(H, B), athleteledsportsteam(H, I) )
%   | | | then return 0.09705834446377584;  // std dev = 0.931, 9.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=5 */
%   | | | else return -0.1432185335120834;  // std dev = 0.032, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( athleteledsportsteam(J, A), teamalsoknownas(A, K) )
%   | | then return -0.4611608072490179;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( athleteplayssport(L, B), athleteledsportsteam(L, M) )
%   | | | then return 0.16054224905960773;  // std dev = 1.671, 55.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=44 */
%   | | | else return -0.08027092038503529;  // std dev = 0.918, 31.000 (wgt'ed) examples reached here.  /* #neg=30 #pos=1 */
WILL Produced-Tree #9
% FOR teamplayssport(A, B):
%   if ( athleteledsportsteam(C, A) )
%   then if ( athleteledsportsteam(C, D), recursion_teamplayssport(D, B) )
%   | then if ( athleteledsportsteam(E, A), athleteplayssport(E, B) )
%   | | then if ( athleteplaysforteam(E, A) )
%   | | | then return 0.18166864480900582;  // std dev = 0.049, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.18750752748085264;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return 0.21610887642615598;  // std dev = 0.099, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( athleteplayssport(F, B), athleteplaysinleague(F, G) )
%   | | then return -0.21247286615719363;  // std dev = 0.211, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else return -0.09243493637503471;  // std dev = 0.005, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   else if ( teamalsoknownas(H, A), recursion_teamplayssport(H, B) )
%   | then return 0.2056717045534756;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( teamalsoknownas(A, I), athleteledsportsteam(J, I) )
%   | | then return -0.062409254225776686;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( athleteplayssport(K, B), athleteplaysinleague(K, L) )
%   | | | then return 0.11771407193198688;  // std dev = 2.006, 54.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=37 */
%   | | | else return -0.10264563598713765;  // std dev = 0.075, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
WILL Produced-Tree #10
% FOR teamplayssport(A, B):
%   if ( athleteledsportsteam(C, A) )
%   then if ( athleteledsportsteam(C, D), recursion_teamplayssport(D, B) )
%   | then return 0.16522121681201116;  // std dev = 0.028, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | else if ( athleteplayssport(E, B), athleteledsportsteam(E, F) )
%   | | then return -0.22761258473858853;  // std dev = 0.088, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return -0.08514630189268589;  // std dev = 0.004, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else if ( teamplaysagainstteam(A, G), athleteledsportsteam(H, G) )
%   | then if ( recursion_teamplayssport(G, B) )
%   | | then return 0.17061591224439873;  // std dev = 0.004, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else if ( athleteplayssport(I, B), teamplaysagainstteam(J, A) )
%   | | | then return -0.16314698200786432;  // std dev = 0.438, 10.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=1 */
%   | | | else return 0.13050587930079574;  // std dev = 0.514, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | else if ( teamplaysagainstteam(A, K), recursion_teamplayssport(K, B) )
%   | | then return 0.28663544471016167;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else if ( athleteplayssport(L, B), athleteledsportsteam(L, M) )
%   | | | then return 0.13904670471419292;  // std dev = 1.442, 30.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=24 */
%   | | | else return -0.0647894662811635;  // std dev = 0.905, 21.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=1 */


Results
   AUC ROC   = 0.940047
   AUC PR    = 0.923416
   CLL	      = -0.344293
   Precision = 0.865079 at threshold = 0.5
   Recall    = 0.819549
   F1        = 0.841699


Total learning time: 85.826 seconds
Total inference time: 5.773 seconds
AUC ROC: 0.940047


Results scoring model
   AUC ROC   = 0.993158
   AUC PR    = 0.993968
   CLL	      = -0.214914
   Precision = 0.980392 at threshold = 0.5
   Recall    = 0.961538
   F1        = 0.970874


Total scoring time: 4.765 seconds
Refined model CLL: -0.214914


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.940047
   AUC PR    = 0.923416
   CLL	      = -0.344293
   Precision = 0.865079 at threshold = 0.5
   Recall    = 0.819549
   F1        = 0.841699


Total learning time: 99.75699999999999 seconds
Total inference time: 5.773 seconds
AUC ROC: 0.940047
Total revision time: 99.75699999999999
Best scored revision CLL: -0.214914


Dataset: 10_nell_finances_nell_sports, Fold: 1, Type: Transfer (trRDN-B), Time: 20:12:24
{'AUC ROC': 0.940047, 'AUC PR': 0.923416, 'CLL': -0.344293, 'Precision': [0.865079, 0.5], 'Recall': 0.819549, 'F1': 0.841699, 'Learning time': 99.75699999999999, 'Inference time': 5.773, 'parameter_0.2': {'AUC ROC': 0.854005, 'AUC PR': 0.856191, 'CLL': -0.480734, 'Precision': [0.726619, 0.5], 'Recall': 0.759398, 'F1': 0.742647, 'Learning time': 6.236, 'Inference time': 3.573}}


Amount of data: 0.4
******************************************
Performing Parameter Learning
******************************************
Refine
0;;companyeconomicsector(A, B) :- acquired(C, A).;true;true
0;true;economicsectorcompany(B, C).;false;false
0;false;companyalsoknownas(A, D).;true;true
0;false,true;economicsectorcompany(B, D).;false;true
0;false,true,false;acquired(A, E), economicsectorcompany(B, E).;false;false
0;false,false;companyceo(A, F).;true;true
0;false,false,true;bankchiefexecutiveceo(G, F).;false;false
0;false,false,false;countryhascompanyoffice(H, A).;false;false
1;;companyeconomicsector(A, B) :- companyalsoknownas(A, C), acquired(A, D).;true;true
1;true;economicsectorcompany(B, D).;false;true
1;true,false;economicsectorcompany(B, C), countryhascompanyoffice(E, C).;false;false
1;false;acquired(A, F), cityhascompanyoffice(G, A).;true;true
1;false,true;cityhascompanyoffice(G, H), economicsectorcompany(B, H).;false;false
1;false,false;acquired(I, A).;true;true
1;false,false,true;economicsectorcompany(B, I).;false;false
1;false,false,false;companyalsoknownas(A, J).;false;false
2;;companyeconomicsector(A, B) :- acquired(A, C), economicsectorcompany(B, C).;false;true
2;false;acquired(A, D).;true;true
2;false,true;companyalsoknownas(A, E), economicsectorcompany(B, E).;true;true
2;false,true,true;countryhascompanyoffice(F, D).;false;false
2;false,true,false;companyalsoknownas(D, G), companyalsoknownas(A, G).;false;false
2;false,false;acquired(H, A), companyceo(H, I).;true;true
2;false,false,true;economicsectorcompany(B, H).;false;false
2;false,false,false;cityhascompanyoffice(J, A).;false;false
3;;companyeconomicsector(A, B) :- acquired(A, C), acquired(C, D).;true;false
3;true;economicsectorcompany(B, D).;true;true
3;true,true;companyceo(C, E).;false;false
3;true,false;cityhascompanyoffice(F, A), companyceo(A, G).;true;true
3;true,false,true;companyalsoknownas(A, H), economicsectorcompany(B, H).;false;false
3;true,false,false;acquired(D, I), economicsectorcompany(B, I).;false;false
4;;companyeconomicsector(A, B) :- acquired(C, A), economicsectorcompany(B, C).;false;true
4;false;acquired(D, A), companyceo(D, E).;true;true
4;false,true;acquired(F, D), companyalsoknownas(F, G).;true;true
4;false,true,true;acquired(A, H).;false;false
4;false,true,false;acquired(I, D), economicsectorcompany(B, I).;false;false
4;false,false;acquired(A, J), economicsectorcompany(B, J).;true;true
4;false,false,true;companyalsoknownas(A, K), acquired(J, L).;false;false
4;false,false,false;companyalsoknownas(A, M), economicsectorcompany(B, M).;false;false
5;;companyeconomicsector(A, B) :- companyalsoknownas(A, C), economicsectorcompany(B, C).;true;true
5;true;acquired(A, D), countryhascompanyoffice(E, D).;false;false
5;false;acquired(A, F), acquired(F, G).;true;true
5;false,true;economicsectorcompany(B, G).;false;true
5;false,true,false;countryhascompanyoffice(H, A), companyalsoknownas(A, I).;false;false
5;false,false;cityhascompanyoffice(J, A), countryhascompanyoffice(K, A).;true;true
5;false,false,true;countryhascompanyoffice(K, L), economicsectorcompany(B, L).;false;false
5;false,false,false;cityhascompanyoffice(M, A), acquired(N, A).;false;false
6;;companyeconomicsector(A, B) :- acquired(A, C), companyceo(C, D).;true;true
6;true;economicsectorcompany(B, C).;false;true
6;true,false;acquired(C, E).;false;false
6;false;companyalsoknownas(A, F), cityhascompanyoffice(G, F).;true;true
6;false,true;acquired(F, H), economicsectorcompany(B, H).;false;true
6;false,true,false;companyceo(A, I), acquired(F, J).;false;false
6;false,false;companyalsoknownas(A, K), acquired(K, L).;false;true
6;false,false,false;companyalsoknownas(A, M).;false;false
7;;companyeconomicsector(A, B) :- acquired(C, A), economicsectorcompany(B, C).;false;true
7;false;acquired(D, A), companyceo(D, E).;true;true
7;false,true;companyalsoknownas(D, F), acquired(G, F).;true;true
7;false,true,true;economicsectorcompany(B, G).;false;false
7;false,true,false;countryhascompanyoffice(H, D).;false;false
7;false,false;cityhascompanyoffice(I, A), acquired(J, A).;true;true
7;false,false,true;acquired(K, J).;false;false
7;false,false,false;companyceo(A, L).;false;false
8;;companyeconomicsector(A, B) :- cityhascompanyoffice(C, A).;true;true
8;true;cityhascompanyoffice(C, D), economicsectorcompany(B, D).;true;false
8;true,true;acquired(D, E), acquired(F, D).;false;true
8;true,true,false;companyalsoknownas(A, G), companyalsoknownas(D, G).;false;false
8;false;acquired(A, H), economicsectorcompany(B, H).;false;true
8;false,false;acquired(I, A), cityhascompanyoffice(J, I).;true;true
8;false,false,true;acquired(K, I), economicsectorcompany(B, K).;false;false
8;false,false,false;acquired(A, L).;false;false
9;;companyeconomicsector(A, B) :- cityhascompanyoffice(C, A).;true;true
9;true;cityhascompanyoffice(C, D), economicsectorcompany(B, D).;true;false
9;true,true;acquired(E, D), companyceo(D, F).;false;false
9;false;companyalsoknownas(A, G), cityhascompanyoffice(H, G).;true;true
9;false,true;economicsectorcompany(B, G).;false;true
9;false,true,false;acquired(I, G).;false;false
9;false,false;acquired(A, J), economicsectorcompany(B, J).;false;true
9;false,false,false;companyalsoknownas(A, K), economicsectorcompany(B, K).;false;false


WILL Produced-Tree #1
% FOR teamplayssport(A, B):
%   if ( teamplaysagainstteam(C, A) )
%   then if ( recursion_teamplayssport(C, B) )
%   | then return 0.7966104735610511;  // std dev = 1.937, 65.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=61 */
%   | else return -0.048101064900487704;  // std dev = 2.332, 64.000 (wgt'ed) examples reached here.  /* #neg=58 #pos=6 */
%   else if ( teamalsoknownas(D, A) )
%   | then if ( recursion_teamplayssport(D, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( teamplaysagainstteam(A, E), recursion_teamplayssport(E, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.22178529873587596;  // std dev = 1.595, 11.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=4 */
%   | else if ( teamplaysinleague(A, F) )
%   | | then return 0.37243464938522663;  // std dev = 0.500, 35.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=18 */
%   | | else if ( athleteplaysforteam(G, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.3152917922423695;  // std dev = 2.947, 35.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=16 */
WILL Produced-Tree #2
% FOR teamplayssport(A, B):
%   if ( teamalsoknownas(C, A), teamplaysagainstteam(A, D) )
%   then if ( recursion_teamplayssport(D, B) )
%   | then return 0.6206133667089229;  // std dev = 0.943, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | else if ( recursion_teamplayssport(C, B), athleteplaysforteam(E, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.13073549002411358;  // std dev = 1.120, 7.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=2 */
%   else if ( teamplaysagainstteam(A, F), athleteledsportsteam(G, A) )
%   | then if ( athleteledsportsteam(G, H), recursion_teamplayssport(H, B) )
%   | | then return 0.7317244778200339;  // std dev = 0.000, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | | else return -0.14868453310740581;  // std dev = 0.178, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */
%   | else if ( teamplaysagainstteam(I, A) )
%   | | then if ( recursion_teamplayssport(I, B) )
%   | | | then return 0.6960101921057482;  // std dev = 0.982, 28.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=27 */
%   | | | else return -0.007890879736744948;  // std dev = 2.088, 39.000 (wgt'ed) examples reached here.  /* #neg=34 #pos=5 */
%   | | else if ( teamalsoknownas(J, A) )
%   | | | then return 0.19258789115538322;  // std dev = 1.595, 11.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=4 */
%   | | | else return 0.2966164659043023;  // std dev = 4.180, 70.000 (wgt'ed) examples reached here.  /* #neg=36 #pos=34 */
WILL Produced-Tree #3
% FOR teamplayssport(A, B):
%   if ( teamplaysagainstteam(A, C), recursion_teamplayssport(C, B) )
%   then return 0.5348997585362302;  // std dev = 1.512, 58.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=55 */
%   else if ( teamplaysagainstteam(A, D) )
%   | then if ( teamalsoknownas(E, A), recursion_teamplayssport(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( teamalsoknownas(F, D), teamalsoknownas(F, A) )
%   | | | then return -0.1522108055402275;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return -0.014255982448985873;  // std dev = 2.446, 62.000 (wgt'ed) examples reached here.  /* #neg=53 #pos=9 */
%   | else if ( teamplaysagainstteam(G, A), teamplaysinleague(G, H) )
%   | | then if ( recursion_teamplayssport(G, B) )
%   | | | then return 0.5762454578218303;  // std dev = 1.05e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.15054337790952083;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=2 */
%   | | else if ( athleteledsportsteam(I, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.2345356356378998;  // std dev = 4.368, 77.000 (wgt'ed) examples reached here.  /* #neg=41 #pos=36 */
WILL Produced-Tree #4
% FOR teamplayssport(A, B):
%   if ( teamplaysagainstteam(A, C), teamplaysagainstteam(C, D) )
%   then if ( recursion_teamplayssport(D, B) )
%   | then if ( teamplaysinleague(C, E) )
%   | | then return 0.3390045097120194;  // std dev = 2.657, 77.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=61 */
%   | | else return 0.44336399953457895;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( athleteledsportsteam(F, A), teamplaysinleague(A, G) )
%   | | then if ( teamalsoknownas(H, A), recursion_teamplayssport(H, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.11977540964737005;  // std dev = 0.021, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | | else if ( teamplaysagainstteam(D, I), recursion_teamplayssport(I, B) )
%   | | | then return -0.1335130379101736;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | | else return -0.09953797347261066;  // std dev = 0.697, 20.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=1 */
%   else return 0.19160498164611822;  // std dev = 4.616, 90.000 (wgt'ed) examples reached here.  /* #neg=48 #pos=42 */
WILL Produced-Tree #5
% FOR teamplayssport(A, B):
%   if ( teamplaysagainstteam(C, A), recursion_teamplayssport(C, B) )
%   then return 0.32099575244147327;  // std dev = 1.743, 65.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=61 */
%   else if ( teamplaysagainstteam(D, A), teamplaysinleague(D, E) )
%   | then if ( teamplaysagainstteam(F, D), teamalsoknownas(G, F) )
%   | | then if ( teamplaysagainstteam(A, H) )
%   | | | then return -0.05490540697988799;  // std dev = 1.779, 50.000 (wgt'ed) examples reached here.  /* #neg=46 #pos=4 */
%   | | | else return 0.019630127560497684;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else if ( teamplaysagainstteam(I, D), recursion_teamplayssport(I, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.02493545247313404;  // std dev = 0.872, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | else if ( teamplaysagainstteam(A, J), recursion_teamplayssport(J, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( teamalsoknownas(K, A), recursion_teamplayssport(K, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.14250881019421752;  // std dev = 4.508, 84.000 (wgt'ed) examples reached here.  /* #neg=46 #pos=38 */
WILL Produced-Tree #6
% FOR teamplayssport(A, B):
%   if ( teamalsoknownas(C, A), recursion_teamplayssport(C, B) )
%   then if ( teamplaysagainstteam(A, D), athleteplaysforteam(E, D) )
%   | then return 0.18243809855615467;  // std dev = 0.935, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | else return -0.18408566729957465;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   else if ( teamplaysagainstteam(A, F), teamplaysagainstteam(F, G) )
%   | then if ( recursion_teamplayssport(G, B) )
%   | | then return 0.2145336835734978;  // std dev = 2.370, 70.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=55 */
%   | | else if ( athleteplaysforteam(H, A), teamalsoknownas(I, A) )
%   | | | then return -0.12840708661145836;  // std dev = 0.034, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return -0.09524800848080894;  // std dev = 0.632, 39.000 (wgt'ed) examples reached here.  /* #neg=38 #pos=1 */
%   | else if ( athleteledsportsteam(J, A), athleteplaysforteam(K, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( athleteledsportsteam(L, A), teamplaysagainstteam(M, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.12559916266266416;  // std dev = 4.594, 89.000 (wgt'ed) examples reached here.  /* #neg=47 #pos=42 */
WILL Produced-Tree #7
% FOR teamplayssport(A, B):
%   if ( teamplaysagainstteam(A, C), teamplaysinleague(C, D) )
%   then if ( recursion_teamplayssport(C, B) )
%   | then return 0.2106538767639979;  // std dev = 1.550, 56.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=53 */
%   | else if ( teamplaysagainstteam(C, E) )
%   | | then return -0.044890025421388216;  // std dev = 2.023, 60.000 (wgt'ed) examples reached here.  /* #neg=52 #pos=8 */
%   | | else return 0.04459232377514214;  // std dev = 0.766, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   else if ( teamalsoknownas(F, A), athleteledsportsteam(G, F) )
%   | then if ( teamplaysagainstteam(F, H), recursion_teamplayssport(H, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( teamplaysinleague(A, I), teamplaysagainstteam(F, J) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.2028438202032072;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( teamalsoknownas(K, A), teamplaysagainstteam(K, L) )
%   | | then return -0.13978728742502392;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( teamalsoknownas(M, A) )
%   | | | then return 0.018267090908970978;  // std dev = 1.643, 14.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=5 */
%   | | | else return 0.11975292253656794;  // std dev = 4.234, 75.000 (wgt'ed) examples reached here.  /* #neg=37 #pos=38 */
WILL Produced-Tree #8
% FOR teamplayssport(A, B):
%   if ( teamplaysagainstteam(C, A), recursion_teamplayssport(C, B) )
%   then return 0.17631456150164732;  // std dev = 1.790, 65.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=61 */
%   else if ( teamplaysagainstteam(D, A), teamplaysinleague(D, E) )
%   | then if ( teamalsoknownas(F, D), teamplaysagainstteam(G, F) )
%   | | then if ( recursion_teamplayssport(G, B) )
%   | | | then return 0.1356459168738373;  // std dev = 0.785, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | else return -0.07814810554761284;  // std dev = 0.894, 28.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=1 */
%   | | else if ( athleteplaysforteam(H, D) )
%   | | | then return -0.0036583699793277173;  // std dev = 1.673, 27.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=4 */
%   | | | else return -0.13624269318422924;  // std dev = 0.072, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( athleteledsportsteam(I, A), teamplaysagainstteam(J, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( teamplaysinleague(A, K) )
%   | | | then return 0.07756992838550186;  // std dev = 3.197, 42.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=20 */
%   | | | else return 0.042412325437199146;  // std dev = 3.155, 42.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=18 */
WILL Produced-Tree #9
% FOR teamplayssport(A, B):
%   if ( athleteledsportsteam(C, A) )
%   then if ( athleteledsportsteam(C, D), recursion_teamplayssport(D, B) )
%   | then if ( teamplaysagainstteam(D, E), teamplaysagainstteam(F, D) )
%   | | then return 0.18179926630941887;  // std dev = 0.041, 29.000 (wgt'ed) examples reached here.  /* #pos=29 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.1731823383894481;  // std dev = 1.001, 24.000 (wgt'ed) examples reached here.  /* #neg=24 */
%   else if ( teamplaysagainstteam(A, G), recursion_teamplayssport(G, B) )
%   | then return 0.2058487771417319;  // std dev = 0.455, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | else if ( teamplaysagainstteam(H, A), athleteledsportsteam(I, H) )
%   | | then if ( teamplaysagainstteam(J, H), recursion_teamplayssport(J, B) )
%   | | | then return 0.1130228961470701;  // std dev = 1.514, 12.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=6 */
%   | | | else return -0.009749901461649835;  // std dev = 1.183, 17.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=2 */
%   | | else if ( teamplaysagainstteam(A, K) )
%   | | | then return -0.006964598883414923;  // std dev = 1.472, 20.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=4 */
%   | | | else return 0.045870611376417514;  // std dev = 4.387, 82.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=38 */
WILL Produced-Tree #10
% FOR teamplayssport(A, B):
%   if ( athleteledsportsteam(C, A) )
%   then if ( athleteledsportsteam(C, D), recursion_teamplayssport(D, B) )
%   | then if ( teamplaysagainstteam(E, D), teamplaysinleague(D, F) )
%   | | then return 0.15631086775299147;  // std dev = 0.036, 29.000 (wgt'ed) examples reached here.  /* #pos=29 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.15633345632224388;  // std dev = 0.963, 24.000 (wgt'ed) examples reached here.  /* #neg=24 */
%   else if ( teamalsoknownas(G, A), athleteledsportsteam(H, G) )
%   | then if ( recursion_teamplayssport(G, B) )
%   | | then return 0.16975294822350173;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( teamplaysagainstteam(I, G) )
%   | | | then return -0.080353899610347;  // std dev = 0.292, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( teamplaysagainstteam(A, J), recursion_teamplayssport(J, B) )
%   | | then return 0.17698246863278597;  // std dev = 0.435, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | | else if ( teamalsoknownas(K, A), recursion_teamplayssport(K, B) )
%   | | | then return -0.16623980542853833;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | | else return 0.0343009069555801;  // std dev = 5.005, 127.000 (wgt'ed) examples reached here.  /* #neg=77 #pos=50 */


Results
   AUC ROC   = 0.893945
   AUC PR    = 0.895146
   CLL	      = -0.405318
   Precision = 0.920455 at threshold = 0.5
   Recall    = 0.609023
   F1        = 0.733032


Total learning time: 11.753 seconds
Total inference time: 6.184 seconds
AUC ROC: 0.893945


Results scoring model
   AUC ROC   = 0.893197
   AUC PR    = 0.904678
   CLL	      = -0.411761
   Precision = 0.938462 at threshold = 0.5
   Recall    = 0.580952
   F1        = 0.717647


Total scoring time: 4.501 seconds
Parameter learned model CLL: -0.411761


Structure after Parameter Learning
[['teamplayssport(A, B)', {'': 'teamplaysagainstteam(C, A)', 'true': 'recursion_teamplayssport(C, B)', 'false': 'teamalsoknownas(D, A)', 'false,true': 'recursion_teamplayssport(D, B)', 'false,true,false': 'teamplaysagainstteam(A, E), recursion_teamplayssport(E, B)', 'false,false': 'teamplaysinleague(A, F)', 'false,false,false': 'athleteplaysforteam(G, A)'}, {'true,true': [1.937, 4, 61], 'true,false': [2.332, 58, 6], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [0.0, 0, 0], 'false,true,false,false': [1.595, 7, 4], 'false,false,true': [0.5, 17, 18], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [2.947, 19, 16]}], ['teamplayssport(A, B)', {'': 'teamalsoknownas(C, A), teamplaysagainstteam(A, D)', 'true': 'recursion_teamplayssport(D, B)', 'true,false': 'recursion_teamplayssport(C, B), athleteplaysforteam(E, C)', 'false': 'teamplaysagainstteam(A, F), athleteledsportsteam(G, A)', 'false,true': 'athleteledsportsteam(G, H), recursion_teamplayssport(H, B)', 'false,false': 'teamplaysagainstteam(I, A)', 'false,false,true': 'recursion_teamplayssport(I, B)', 'false,false,false': 'teamalsoknownas(J, A)'}, {'true,true': [0.943, 1, 8], 'true,false,true': [0.0, 0, 0], 'true,false,false': [1.12, 5, 2], 'false,true,true': [0.0, 0, 25], 'false,true,false': [0.178, 21, 0], 'false,false,true,true': [0.982, 1, 27], 'false,false,true,false': [2.088, 34, 5], 'false,false,false,true': [1.595, 7, 4], 'false,false,false,false': [4.18, 36, 34]}], ['teamplayssport(A, B)', {'': 'teamplaysagainstteam(A, C), recursion_teamplayssport(C, B)', 'false': 'teamplaysagainstteam(A, D)', 'false,true': 'teamalsoknownas(E, A), recursion_teamplayssport(E, B)', 'false,true,false': 'teamalsoknownas(F, D), teamalsoknownas(F, A)', 'false,false': 'teamplaysagainstteam(G, A), teamplaysinleague(G, H)', 'false,false,true': 'recursion_teamplayssport(G, B)', 'false,false,false': 'athleteledsportsteam(I, A)'}, {'true': [1.512, 3, 55], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [0.0, 3, 0], 'false,true,false,false': [2.446, 53, 9], 'false,false,true,true': [1.05e-08, 0, 3], 'false,false,true,false': [1.195, 5, 2], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [4.368, 41, 36]}], ['teamplayssport(A, B)', {'': 'teamplaysagainstteam(A, C), teamplaysagainstteam(C, D)', 'true': 'recursion_teamplayssport(D, B)', 'true,true': 'teamplaysinleague(C, E)', 'true,false': 'athleteledsportsteam(F, A), teamplaysinleague(A, G)', 'true,false,true': 'teamalsoknownas(H, A), recursion_teamplayssport(H, B)', 'true,false,false': 'teamplaysagainstteam(D, I), recursion_teamplayssport(I, B)'}, {'true,true,true': [2.657, 16, 61], 'true,true,false': [0.0, 0, 1], 'true,false,true,true': [0.0, 0, 0], 'true,false,true,false': [0.021, 18, 0], 'true,false,false,true': [0.0, 4, 0], 'true,false,false,false': [0.697, 19, 1], 'false': [4.616, 48, 42]}], ['teamplayssport(A, B)', {'': 'teamplaysagainstteam(C, A), recursion_teamplayssport(C, B)', 'false': 'teamplaysagainstteam(D, A), teamplaysinleague(D, E)', 'false,true': 'teamplaysagainstteam(F, D), teamalsoknownas(G, F)', 'false,true,true': 'teamplaysagainstteam(A, H)', 'false,true,false': 'teamplaysagainstteam(I, D), recursion_teamplayssport(I, B)', 'false,false': 'teamplaysagainstteam(A, J), recursion_teamplayssport(J, B)', 'false,false,false': 'teamalsoknownas(K, A), recursion_teamplayssport(K, B)'}, {'true': [1.743, 4, 61], 'false,true,true,true': [1.779, 46, 4], 'false,true,true,false': [0.894, 4, 1], 'false,true,false,true': [0.0, 0, 0], 'false,true,false,false': [0.872, 5, 1], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [4.508, 46, 38]}], ['teamplayssport(A, B)', {'': 'teamalsoknownas(C, A), recursion_teamplayssport(C, B)', 'true': 'teamplaysagainstteam(A, D), athleteplaysforteam(E, D)', 'false': 'teamplaysagainstteam(A, F), teamplaysagainstteam(F, G)', 'false,true': 'recursion_teamplayssport(G, B)', 'false,true,false': 'athleteplaysforteam(H, A), teamalsoknownas(I, A)', 'false,false': 'athleteledsportsteam(J, A), athleteplaysforteam(K, A)', 'false,false,false': 'athleteledsportsteam(L, A), teamplaysagainstteam(M, A)'}, {'true,true': [0.935, 1, 7], 'true,false': [0.0, 1, 0], 'false,true,true': [2.37, 15, 55], 'false,true,false,true': [0.034, 3, 0], 'false,true,false,false': [0.632, 38, 1], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [4.594, 47, 42]}], ['teamplayssport(A, B)', {'': 'teamplaysagainstteam(A, C), teamplaysinleague(C, D)', 'true': 'recursion_teamplayssport(C, B)', 'true,false': 'teamplaysagainstteam(C, E)', 'false': 'teamalsoknownas(F, A), athleteledsportsteam(G, F)', 'false,true': 'teamplaysagainstteam(F, H), recursion_teamplayssport(H, B)', 'false,true,false': 'teamplaysinleague(A, I), teamplaysagainstteam(F, J)', 'false,false': 'teamalsoknownas(K, A), teamplaysagainstteam(K, L)', 'false,false,false': 'teamalsoknownas(M, A)'}, {'true,true': [1.55, 3, 53], 'true,false,true': [2.023, 52, 8], 'true,false,false': [0.766, 2, 1], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [0.0, 0, 0], 'false,true,false,false': [0.0, 1, 0], 'false,false,true': [0.0, 1, 0], 'false,false,false,true': [1.643, 9, 5], 'false,false,false,false': [4.234, 37, 38]}], ['teamplayssport(A, B)', {'': 'teamplaysagainstteam(C, A), recursion_teamplayssport(C, B)', 'false': 'teamplaysagainstteam(D, A), teamplaysinleague(D, E)', 'false,true': 'teamalsoknownas(F, D), teamplaysagainstteam(G, F)', 'false,true,true': 'recursion_teamplayssport(G, B)', 'false,true,false': 'athleteplaysforteam(H, D)', 'false,false': 'athleteledsportsteam(I, A), teamplaysagainstteam(J, A)', 'false,false,false': 'teamplaysinleague(A, K)'}, {'true': [1.79, 4, 61], 'false,true,true,true': [0.785, 2, 1], 'false,true,true,false': [0.894, 27, 1], 'false,true,false,true': [1.673, 23, 4], 'false,true,false,false': [0.072, 3, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [3.197, 22, 20], 'false,false,false,false': [3.155, 24, 18]}], ['teamplayssport(A, B)', {'': 'athleteledsportsteam(C, A)', 'true': 'athleteledsportsteam(C, D), recursion_teamplayssport(D, B)', 'true,true': 'teamplaysagainstteam(D, E), teamplaysagainstteam(F, D)', 'false': 'teamplaysagainstteam(A, G), recursion_teamplayssport(G, B)', 'false,false': 'teamplaysagainstteam(H, A), athleteledsportsteam(I, H)', 'false,false,true': 'teamplaysagainstteam(J, H), recursion_teamplayssport(J, B)', 'false,false,false': 'teamplaysagainstteam(A, K)'}, {'true,true,true': [0.041, 0, 29], 'true,true,false': [0.0, 0, 0], 'true,false': [1.001, 24, 0], 'false,true': [0.455, 0, 26], 'false,false,true,true': [1.514, 6, 6], 'false,false,true,false': [1.183, 15, 2], 'false,false,false,true': [1.472, 16, 4], 'false,false,false,false': [4.387, 44, 38]}], ['teamplayssport(A, B)', {'': 'athleteledsportsteam(C, A)', 'true': 'athleteledsportsteam(C, D), recursion_teamplayssport(D, B)', 'true,true': 'teamplaysagainstteam(E, D), teamplaysinleague(D, F)', 'false': 'teamalsoknownas(G, A), athleteledsportsteam(H, G)', 'false,true': 'recursion_teamplayssport(G, B)', 'false,true,false': 'teamplaysagainstteam(I, G)', 'false,false': 'teamplaysagainstteam(A, J), recursion_teamplayssport(J, B)', 'false,false,false': 'teamalsoknownas(K, A), recursion_teamplayssport(K, B)'}, {'true,true,true': [0.036, 0, 29], 'true,true,false': [0.0, 0, 0], 'true,false': [0.963, 24, 0], 'false,true,true': [0.0, 0, 3], 'false,true,false,true': [0.292, 3, 1], 'false,true,false,false': [0.0, 0, 0], 'false,false,true': [0.435, 0, 22], 'false,false,false,true': [0.0, 1, 0], 'false,false,false,false': [5.005, 77, 50]}]]
[{'': [0.24962442160927784, 0.24904740131077732], 'true': [0.057751479289940184, 0.08496093750000025], 'false': [0.2314049586776858, 0.24979591836734855], 'false,false': [0.24979591836734646, 0.24816326530612198], 'false,false,false': [nan, 0.24816326530612198], 'false,true': [nan, 0.2314049586776858], 'false,true,false': [nan, 0.2314049586776858]}, {'': [0.1930331569769567, 0.21890840203272938], 'false': [0.19300203307075392, 0.2264674490730896], 'false,false': [0.199981956335934, 0.24836870787790316], 'false,false,false': [0.23140495867768582, 0.2495647931295592], 'false,false,true': [0.03443877551020386, 0.11176857330703466], 'true': [0.09876543209876548, 0.17924557962294654], 'false,true': [-2.1316282072803005e-16, 0.001505474175510869], 'true,false': [nan, 0.17924557962294654]}, {'': [0.0394023394433804, 0.19382088302356903], 'false': [0.0929159464618539, 0.24026083413754407], 'false,false': [0.1809138176338927, 0.2477485497349263], 'false,false,false': [nan, 0.2477485497349263], 'false,false,true': [3.700743415417188e-17, 0.20408163265306128], 'false,true': [nan, 0.09291594646185389], 'false,true,false': [0.0, 0.0965335008991324]}, {'': [0.1094772018517478, 0.23678433951999556], 'true': [0.09067067466508458, 0.011729768732445398], 'true,true': [0.09170858893147531, 0.0], 'true,false': [2.3857941398283985e-05, 0.02041816106082758], 'true,false,false': [0.0, 0.02430940910573699], 'true,false,true': [nan, 2.3857941398283985e-05]}, {'': [0.04674229368482118, 0.18130800133335814], 'false': [0.07835059438290291, 0.24191660216450198], 'false,false': [nan, 0.24191660216450192], 'false,false,false': [nan, 0.241916602164502], 'false,true': [0.07254492912445189, 0.12675580909575676], 'false,true,false': [nan, 0.12675580909575676], 'false,true,true': [0.06329437240878609, 0.16000000000000006]}, {'': [0.11049033787032747, 0.1478504474568273], 'false': [0.07657218239245278, 0.23710827359142372], 'false,false': [nan, 0.23710827359142375], 'false,false,false': [nan, 0.23710827359142375], 'true': [0.109375, 0.0], 'false,true': [0.08021887494397828, 0.00959577029598603], 'false,true,false': [0.00037939875174947124, 0.010226184491629679]}, {'': [0.07542799278806764, 0.22964983478222806], 'false': [0.0, 0.23118643167597466], 'false,false': [0.0, 0.23312481715218705], 'false,false,false': [0.19281823246342158, 0.2390285867102394], 'true': [0.04287433842229595, 0.07465019108552373], 'true,false': [0.06821915932729207, 0.19564502547136567], 'false,true': [nan, 0.0], 'false,true,false': [nan, 0.0]}, {'': [0.049272607022465546, 0.17205901858556866], 'false': [0.07239786228739507, 0.24043191630518057], 'false,false': [nan, 0.24043191630518057], 'false,false,false': [0.24331881911375214, 0.23692698497407355], 'false,true': [0.04963043334241704, 0.09508892424285337], 'false,true,false': [0.10370225236447385, 0.001748228664537411], 'false,true,true': [0.20521821951141472, 0.028536969780595826]}, {'': [0.05014166600962386, 0.16615555715084881], 'false': [0.007949916426305355, 0.19281907726395317], 'false,false': [0.13101841121254307, 0.21038305595741932], 'false,false,false': [0.10831203833628833, 0.23473106151220863], 'false,false,true': [0.19107010729081297, 0.08239180910077239], 'true': [5.754167517423265e-05, 0.04171005365784678], 'true,true': [5.754167517423265e-05, nan]}, {'': [0.04175227644458538, 0.16474917788997992], 'false': [0.027484919437252498, 0.17112220549749563], 'false,false': [0.0086194176247405, 0.19600059552138993], 'false,false,false': [0.0, 0.19722971528680874], 'true': [4.547351481944655e-05, 0.03866407725671868], 'false,true': [0.0, 0.021289993872313034], 'false,true,false': [0.021289993872313034, nan], 'true,true': [4.547351481944655e-05, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
1;;teamplayssport(A, B) :- teamalsoknownas(C, A), teamplaysagainstteam(A, D).;true;true
1;false;teamplaysagainstteam(A, F), athleteledsportsteam(G, A).;true;true
1;false,true;athleteledsportsteam(G, H), recursion_teamplayssport(H, B).;true;true
2;;teamplayssport(A, B) :- teamplaysagainstteam(A, C), recursion_teamplayssport(C, B).;true;true
2;false;teamplaysagainstteam(A, D).;true;true
2;false,true;teamalsoknownas(F, D), teamalsoknownas(F, A).;true;true
2;false,false;teamplaysagainstteam(G, A), teamplaysinleague(G, H).;true;true
2;false,false,true;recursion_teamplayssport(G, B).;true;true
3;;teamplayssport(A, B) :- teamplaysagainstteam(A, C), teamplaysagainstteam(C, D).;true;true
3;true;recursion_teamplayssport(D, B).;true;true
3;true,true;teamplaysinleague(C, E).;true;true
3;true,false;athleteledsportsteam(F, A), teamplaysinleague(A, G).;true;true
3;true,false,false;teamplaysagainstteam(D, I), recursion_teamplayssport(I, B).;true;true
5;;teamplayssport(A, B) :- teamalsoknownas(C, A), recursion_teamplayssport(C, B).;true;true
5;true;teamplaysagainstteam(A, D), athleteplaysforteam(E, D).;true;true
5;false;teamplaysagainstteam(A, F), teamplaysagainstteam(F, G).;true;true
5;false,true;recursion_teamplayssport(G, B).;true;true
5;false,true,false;athleteplaysforteam(H, A), teamalsoknownas(I, A).;true;true
6;;teamplayssport(A, B) :- teamplaysagainstteam(A, C), teamplaysinleague(C, D).;true;true
6;false;teamalsoknownas(F, A), athleteledsportsteam(G, F).;true;true
6;false,false;teamalsoknownas(K, A), teamplaysagainstteam(K, L).;true;true
7;;teamplayssport(A, B) :- teamplaysagainstteam(C, A), recursion_teamplayssport(C, B).;true;true
7;false;teamplaysagainstteam(D, A), teamplaysinleague(D, E).;true;true
7;false,true;teamalsoknownas(F, D), teamplaysagainstteam(G, F).;true;true
7;false,true,false;athleteplaysforteam(H, D).;true;true
8;;teamplayssport(A, B) :- athleteledsportsteam(C, A).;true;true
8;true;athleteledsportsteam(C, D), recursion_teamplayssport(D, B).;true;true
9;;teamplayssport(A, B) :- athleteledsportsteam(C, A).;true;true
9;true;athleteledsportsteam(C, D), recursion_teamplayssport(D, B).;true;true
9;false;teamalsoknownas(G, A), athleteledsportsteam(H, G).;true;true
9;false,true;recursion_teamplayssport(G, B).;true;true
9;false,false;teamplaysagainstteam(A, J), recursion_teamplayssport(J, B).;true;true
9;false,false,false;teamalsoknownas(K, A), recursion_teamplayssport(K, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR teamplayssport(A, B):
%   if ( athleteplayssport(C, B), athleteledsportsteam(C, D) )
%   then if ( teamplaysagainstteam(A, D), recursion_teamplayssport(D, B) )
%   | then if ( teamalsoknownas(E, D), teamalsoknownas(F, E) )
%   | | then if ( teamalsoknownas(E, A) )
%   | | | then return 0.8581489350995122;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.5248156017661789;  // std dev = 1.155, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | | else return 0.858148935099512;  // std dev = 1.33e-07, 30.000 (wgt'ed) examples reached here.  /* #pos=30 */
%   | else if ( teamplaysagainstteam(G, A), recursion_teamplayssport(G, B) )
%   | | then if ( teamplaysagainstteam(A, D), athleteledsportsteam(H, G) )
%   | | | then return 0.3581489350995122;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return 0.8581489350995123;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | else if ( teamplaysagainstteam(I, A), teamplaysagainstteam(A, J) )
%   | | | then return 0.034619523334806335;  // std dev = 1.572, 17.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=3 */
%   | | | else return 0.5854216623722389;  // std dev = 3.303, 55.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=40 */
%   else if ( teamplaysagainstteam(A, K), teamalsoknownas(A, L) )
%   | then return 0.0803711573217344;  // std dev = 0.416, 9.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | else return -0.12669954974897255;  // std dev = 0.122, 66.000 (wgt'ed) examples reached here.  /* #neg=65 #pos=1 */
WILL Produced-Tree #2
% FOR teamplayssport(A, B):
%   if ( teamalsoknownas(C, A), teamplaysagainstteam(A, D) )
%   then if ( teamplaysagainstteam(E, A), recursion_teamplayssport(E, B) )
%   | then if ( teamalsoknownas(A, F), athleteledsportsteam(G, A) )
%   | | then return 0.41589598673584804;  // std dev = 0.744, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return 0.7322259441501947;  // std dev = 0.083, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else return 0.03128278073610443;  // std dev = 0.895, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   else if ( teamplaysagainstteam(A, H), athleteledsportsteam(I, A) )
%   | then if ( athleteledsportsteam(I, J), recursion_teamplayssport(J, B) )
%   | | then return 0.7255303422485153;  // std dev = 0.104, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | | else return -0.14088390942874826;  // std dev = 0.122, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */
%   | else if ( athleteplayssport(K, B), athleteledsportsteam(K, L) )
%   | | then if ( teamplaysagainstteam(A, M), recursion_teamplayssport(M, B) )
%   | | | then return 0.7347531939701877;  // std dev = 0.157, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | | else return 0.41780431195358564;  // std dev = 3.996, 74.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=47 */
%   | | else if ( athleteplayssport(N, B), athleteplaysinleague(N, P) )
%   | | | then return 0.11978333010376202;  // std dev = 1.210, 8.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | | | else return -0.12932101911695504;  // std dev = 0.047, 45.000 (wgt'ed) examples reached here.  /* #neg=45 */
WILL Produced-Tree #3
% FOR teamplayssport(A, B):
%   if ( teamplaysagainstteam(A, C), recursion_teamplayssport(C, B) )
%   then if ( athleteplaysforteam(D, A), athleteledsportsteam(D, A) )
%   | then return 0.4780280269504421;  // std dev = 0.254, 26.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=23 */
%   | else return 0.5778747378706693;  // std dev = 0.062, 32.000 (wgt'ed) examples reached here.  /* #pos=32 */
%   else if ( teamplaysagainstteam(A, E) )
%   | then if ( teamalsoknownas(F, E), teamalsoknownas(F, A) )
%   | | then return -0.1390832147211678;  // std dev = 0.021, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else if ( teamplaysagainstteam(G, A), recursion_teamplayssport(G, B) )
%   | | | then return 0.43445119107141494;  // std dev = 0.784, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.06199329393070145;  // std dev = 1.959, 57.000 (wgt'ed) examples reached here.  /* #neg=52 #pos=5 */
%   | else if ( teamplaysagainstteam(H, A), teamplaysinleague(H, I) )
%   | | then if ( recursion_teamplayssport(H, B) )
%   | | | then return 0.7050586158249672;  // std dev = 0.189, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.05560483242586255;  // std dev = 1.080, 7.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=2 */
%   | | else if ( athleteplayssport(J, B), athleteledsportsteam(J, K) )
%   | | | then return 0.4392839913688347;  // std dev = 3.000, 48.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=36 */
%   | | | else return -0.11724762679358344;  // std dev = 0.051, 29.000 (wgt'ed) examples reached here.  /* #neg=29 */
WILL Produced-Tree #4
% FOR teamplayssport(A, B):
%   if ( teamplaysagainstteam(A, C), teamplaysagainstteam(C, D) )
%   then if ( recursion_teamplayssport(D, B) )
%   | then if ( teamplaysinleague(C, E) )
%   | | then if ( teamplaysagainstteam(A, F), recursion_teamplayssport(F, B) )
%   | | | then return 0.39791865251172953;  // std dev = 1.301, 57.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=54 */
%   | | | else return 0.11530592994239819;  // std dev = 1.860, 20.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=7 */
%   | | else return 0.7353563046784549;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else return -0.10316274833171034;  // std dev = 0.100, 42.000 (wgt'ed) examples reached here.  /* #neg=41 #pos=1 */
%   else if ( athleteplayssport(G, B), athleteledsportsteam(G, H) )
%   | then if ( athleteplaysforteam(G, H), teamalsoknownas(H, I) )
%   | | then if ( teamalsoknownas(I, H) )
%   | | | then return 0.12327057569116058;  // std dev = 1.677, 12.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=6 */
%   | | | else return -0.20552581143821644;  // std dev = 1.317, 11.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=2 */
%   | | else if ( teamplaysinleague(A, J), teamalsoknownas(K, A) )
%   | | | then return 0.21057853487114628;  // std dev = 0.768, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.5878007010222056;  // std dev = 0.176, 31.000 (wgt'ed) examples reached here.  /* #pos=31 */
%   | else return -0.08180621276539336;  // std dev = 0.148, 33.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=1 */
WILL Produced-Tree #5
% FOR teamplayssport(A, B):
%   if ( athleteplayssport(C, B), athleteledsportsteam(C, D) )
%   then if ( teamplaysinleague(A, E), athleteplaysinleague(C, E) )
%   | then return 0.340746933741271;  // std dev = 0.130, 48.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=46 */
%   | else if ( teamplaysagainstteam(A, F), teamalsoknownas(F, G) )
%   | | then if ( teamalsoknownas(G, F) )
%   | | | then return 0.3395127525275379;  // std dev = 0.647, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | | else return -0.11533889801214746;  // std dev = 1.132, 17.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=4 */
%   | | else if ( athleteplaysforteam(C, D), teamalsoknownas(D, H) )
%   | | | then return 0.009065504891306522;  // std dev = 2.363, 26.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=10 */
%   | | | else return 0.41772688207727776;  // std dev = 0.932, 35.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=34 */
%   else if ( teamplaysagainstteam(A, I), teamplaysinleague(A, J) )
%   | then return -0.10434612767791733;  // std dev = 0.072, 36.000 (wgt'ed) examples reached here.  /* #neg=36 */
%   | else if ( teamplaysagainstteam(K, A) )
%   | | then if ( athleteplayssport(L, B), athleteplaysforteam(L, M) )
%   | | | then return -0.10813172094653101;  // std dev = 0.012, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | | else return 0.3066723299844409;  // std dev = 1.042, 6.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | else return -0.09817677513861861;  // std dev = 0.044, 29.000 (wgt'ed) examples reached here.  /* #neg=29 */
WILL Produced-Tree #6
% FOR teamplayssport(A, B):
%   if ( teamalsoknownas(C, A), recursion_teamplayssport(C, B) )
%   then if ( teamplaysagainstteam(A, D), athleteplaysforteam(E, D) )
%   | then if ( athleteplaysforteam(F, A), athleteplayssport(F, B) )
%   | | then return 0.2865313744209169;  // std dev = 0.088, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return 0.027316899643929676;  // std dev = 0.565, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else return -0.17851438066871209;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   else if ( teamplaysagainstteam(A, G), teamplaysagainstteam(G, H) )
%   | then if ( recursion_teamplayssport(H, B) )
%   | | then if ( teamplaysagainstteam(I, A), recursion_teamplayssport(I, B) )
%   | | | then return 0.2537710202618482;  // std dev = 1.166, 53.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=50 */
%   | | | else return 0.06926351215960752;  // std dev = 1.619, 17.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=5 */
%   | | else return -0.08906073549889662;  // std dev = 0.088, 42.000 (wgt'ed) examples reached here.  /* #neg=41 #pos=1 */
%   | else if ( athleteplayssport(J, B), athleteplaysinleague(J, K) )
%   | | then if ( teamplaysagainstteam(L, A), recursion_teamplayssport(L, B) )
%   | | | then return 0.4160376060459375;  // std dev = 0.359, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.1551909761315486;  // std dev = 2.756, 59.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=39 */
%   | | else return -0.08783083743983354;  // std dev = 0.019, 27.000 (wgt'ed) examples reached here.  /* #neg=27 */
WILL Produced-Tree #7
% FOR teamplayssport(A, B):
%   if ( teamplaysagainstteam(A, C), teamplaysinleague(C, D) )
%   then if ( teamplaysagainstteam(E, A), recursion_teamplayssport(E, B) )
%   | then if ( teamplaysinleague(A, F), teamplaysinleague(E, F) )
%   | | then return 0.21327507434350143;  // std dev = 0.102, 49.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=48 */
%   | | else return 0.10853391537906038;  // std dev = 0.321, 11.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=8 */
%   | else if ( teamplaysagainstteam(G, A), teamplaysinleague(A, H) )
%   | | then return -0.08135195768451496;  // std dev = 0.145, 47.000 (wgt'ed) examples reached here.  /* #neg=45 #pos=2 */
%   | | else if ( athleteplayssport(I, B), teamplaysagainstteam(J, A) )
%   | | | then return -0.032629445328660224;  // std dev = 0.890, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | | | else return 0.19862974334986547;  // std dev = 1.024, 6.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   else if ( teamalsoknownas(K, A), athleteledsportsteam(L, K) )
%   | then return -0.09294589869112195;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( teamalsoknownas(M, A), teamplaysagainstteam(M, N) )
%   | | then return -0.0946817503286061;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( athleteplayssport(P, B), athleteplaysinleague(P, Q) )
%   | | | then return 0.14619265773855047;  // std dev = 2.763, 62.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=43 */
%   | | | else return -0.08200384770880065;  // std dev = 0.040, 27.000 (wgt'ed) examples reached here.  /* #neg=27 */
WILL Produced-Tree #8
% FOR teamplayssport(A, B):
%   if ( teamplaysagainstteam(C, A), recursion_teamplayssport(C, B) )
%   then if ( teamplaysinleague(A, D), teamplaysagainstteam(A, E) )
%   | then return 0.15140060282421022;  // std dev = 0.171, 56.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=52 */
%   | else return 0.3261732368381724;  // std dev = 0.131, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   else if ( teamplaysagainstteam(F, A), teamplaysinleague(F, G) )
%   | then if ( teamalsoknownas(H, F), teamplaysagainstteam(I, H) )
%   | | then if ( teamplaysagainstteam(A, J) )
%   | | | then return -0.09449246115900033;  // std dev = 0.187, 27.000 (wgt'ed) examples reached here.  /* #neg=27 */
%   | | | else return 0.1994529802401424;  // std dev = 0.853, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else if ( athleteplaysforteam(K, F) )
%   | | | then return -0.018255082031345408;  // std dev = 1.552, 27.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=4 */
%   | | | else return -0.1208632153762904;  // std dev = 0.091, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( athleteplayssport(L, B), athleteledsportsteam(L, M) )
%   | | then if ( athleteplaysforteam(L, M), teamalsoknownas(M, N) )
%   | | | then return -0.15099890282468986;  // std dev = 1.892, 19.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=6 */
%   | | | else return 0.26483654875242024;  // std dev = 0.958, 33.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=32 */
%   | | else return -0.08615556337568404;  // std dev = 0.138, 32.000 (wgt'ed) examples reached here.  /* #neg=32 */
WILL Produced-Tree #9
% FOR teamplayssport(A, B):
%   if ( athleteledsportsteam(C, A) )
%   then if ( athleteledsportsteam(C, D), recursion_teamplayssport(D, B) )
%   | then return 0.17423892532798282;  // std dev = 0.191, 29.000 (wgt'ed) examples reached here.  /* #pos=29 */
%   | else return -0.13333460285397178;  // std dev = 0.137, 24.000 (wgt'ed) examples reached here.  /* #neg=24 */
%   else if ( athleteplayssport(E, B), athleteledsportsteam(E, F) )
%   | then if ( teamplaysinleague(A, G), athleteplaysinleague(E, G) )
%   | | then if ( teamplaysagainstteam(F, A), recursion_teamplayssport(F, B) )
%   | | | then return 0.1651385780410907;  // std dev = 0.074, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return 0.31606769381999766;  // std dev = 0.583, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( athleteplaysforteam(E, F), teamalsoknownas(F, H) )
%   | | | then return -0.021406411155494087;  // std dev = 2.415, 39.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=17 */
%   | | | else return 0.16553043077045698;  // std dev = 1.338, 41.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=36 */
%   | else if ( teamplaysagainstteam(I, A) )
%   | | then if ( teamplaysagainstteam(A, J), teamplaysinleague(A, K) )
%   | | | then return -0.08105783525339032;  // std dev = 0.059, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | | | else return 0.08068266497070561;  // std dev = 0.965, 10.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=3 */
%   | | else return -0.07887972029368047;  // std dev = 0.127, 30.000 (wgt'ed) examples reached here.  /* #neg=30 */
WILL Produced-Tree #10
% FOR teamplayssport(A, B):
%   if ( athleteledsportsteam(C, A) )
%   then if ( athleteledsportsteam(C, D), recursion_teamplayssport(D, B) )
%   | then return 0.15076081209346479;  // std dev = 0.174, 29.000 (wgt'ed) examples reached here.  /* #pos=29 */
%   | else if ( athleteplayssport(E, B), athleteledsportsteam(E, F) )
%   | | then return -0.2938719847757732;  // std dev = 0.397, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else return -0.06324380480349598;  // std dev = 0.018, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   else if ( teamalsoknownas(G, A), athleteledsportsteam(H, G) )
%   | then if ( recursion_teamplayssport(G, B) )
%   | | then return 0.1455352361094081;  // std dev = 0.023, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return -0.0085393252364525;  // std dev = 0.300, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | else if ( teamplaysagainstteam(A, I), recursion_teamplayssport(I, B) )
%   | | then if ( teamplaysagainstteam(A, J), teamplaysagainstteam(J, A) )
%   | | | then return 0.1538693268042859;  // std dev = 0.195, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | | else return 0.23893568013329922;  // std dev = 0.174, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( teamalsoknownas(K, A), recursion_teamplayssport(K, B) )
%   | | | then return -0.18297212263488208;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | | else return 0.016987732013630668;  // std dev = 3.135, 127.000 (wgt'ed) examples reached here.  /* #neg=77 #pos=50 */


Results
   AUC ROC   = 0.95794
   AUC PR    = 0.957462
   CLL	      = -0.300547
   Precision = 0.904348 at threshold = 0.5
   Recall    = 0.781955
   F1        = 0.83871


Total learning time: 176.665 seconds
Total inference time: 7.016 seconds
AUC ROC: 0.95794


Results scoring model
   AUC ROC   = 0.990113
   AUC PR    = 0.990814
   CLL	      = -0.225889
   Precision = 0.979381 at threshold = 0.5
   Recall    = 0.904762
   F1        = 0.940594


Total scoring time: 5.966 seconds
Refined model CLL: -0.225889


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.95794
   AUC PR    = 0.957462
   CLL	      = -0.300547
   Precision = 0.904348 at threshold = 0.5
   Recall    = 0.781955
   F1        = 0.83871


Total learning time: 198.885 seconds
Total inference time: 7.016 seconds
AUC ROC: 0.95794
Total revision time: 198.885
Best scored revision CLL: -0.225889


Dataset: 10_nell_finances_nell_sports, Fold: 1, Type: Transfer (trRDN-B), Time: 20:15:57
{'AUC ROC': 0.95794, 'AUC PR': 0.957462, 'CLL': -0.300547, 'Precision': [0.904348, 0.5], 'Recall': 0.781955, 'F1': 0.83871, 'Learning time': 198.885, 'Inference time': 7.016, 'parameter_0.4': {'AUC ROC': 0.893945, 'AUC PR': 0.895146, 'CLL': -0.405318, 'Precision': [0.920455, 0.5], 'Recall': 0.609023, 'F1': 0.733032, 'Learning time': 11.753, 'Inference time': 6.184}}


Amount of data: 0.6
******************************************
Performing Parameter Learning
******************************************
Refine
0;;companyeconomicsector(A, B) :- acquired(C, A).;true;true
0;true;economicsectorcompany(B, C).;false;false
0;false;companyalsoknownas(A, D).;true;true
0;false,true;economicsectorcompany(B, D).;false;true
0;false,true,false;acquired(A, E), economicsectorcompany(B, E).;false;false
0;false,false;companyceo(A, F).;true;true
0;false,false,true;bankchiefexecutiveceo(G, F).;false;false
0;false,false,false;countryhascompanyoffice(H, A).;false;false
1;;companyeconomicsector(A, B) :- companyalsoknownas(A, C), acquired(A, D).;true;true
1;true;economicsectorcompany(B, D).;false;true
1;true,false;economicsectorcompany(B, C), countryhascompanyoffice(E, C).;false;false
1;false;acquired(A, F), cityhascompanyoffice(G, A).;true;true
1;false,true;cityhascompanyoffice(G, H), economicsectorcompany(B, H).;false;false
1;false,false;acquired(I, A).;true;true
1;false,false,true;economicsectorcompany(B, I).;false;false
1;false,false,false;companyalsoknownas(A, J).;false;false
2;;companyeconomicsector(A, B) :- acquired(A, C), economicsectorcompany(B, C).;false;true
2;false;acquired(A, D).;true;true
2;false,true;companyalsoknownas(A, E), economicsectorcompany(B, E).;true;true
2;false,true,true;countryhascompanyoffice(F, D).;false;false
2;false,true,false;companyalsoknownas(D, G), companyalsoknownas(A, G).;false;false
2;false,false;acquired(H, A), companyceo(H, I).;true;true
2;false,false,true;economicsectorcompany(B, H).;false;false
2;false,false,false;cityhascompanyoffice(J, A).;false;false
3;;companyeconomicsector(A, B) :- acquired(A, C), acquired(C, D).;true;false
3;true;economicsectorcompany(B, D).;true;true
3;true,true;companyceo(C, E).;false;false
3;true,false;cityhascompanyoffice(F, A), companyceo(A, G).;true;true
3;true,false,true;companyalsoknownas(A, H), economicsectorcompany(B, H).;false;false
3;true,false,false;acquired(D, I), economicsectorcompany(B, I).;false;false
4;;companyeconomicsector(A, B) :- acquired(C, A), economicsectorcompany(B, C).;false;true
4;false;acquired(D, A), companyceo(D, E).;true;true
4;false,true;acquired(F, D), companyalsoknownas(F, G).;true;true
4;false,true,true;acquired(A, H).;false;false
4;false,true,false;acquired(I, D), economicsectorcompany(B, I).;false;false
4;false,false;acquired(A, J), economicsectorcompany(B, J).;true;true
4;false,false,true;companyalsoknownas(A, K), acquired(J, L).;false;false
4;false,false,false;companyalsoknownas(A, M), economicsectorcompany(B, M).;false;false
5;;companyeconomicsector(A, B) :- companyalsoknownas(A, C), economicsectorcompany(B, C).;true;true
5;true;acquired(A, D), countryhascompanyoffice(E, D).;false;false
5;false;acquired(A, F), acquired(F, G).;true;true
5;false,true;economicsectorcompany(B, G).;false;true
5;false,true,false;countryhascompanyoffice(H, A), companyalsoknownas(A, I).;false;false
5;false,false;cityhascompanyoffice(J, A), countryhascompanyoffice(K, A).;true;true
5;false,false,true;countryhascompanyoffice(K, L), economicsectorcompany(B, L).;false;false
5;false,false,false;cityhascompanyoffice(M, A), acquired(N, A).;false;false
6;;companyeconomicsector(A, B) :- acquired(A, C), companyceo(C, D).;true;true
6;true;economicsectorcompany(B, C).;false;true
6;true,false;acquired(C, E).;false;false
6;false;companyalsoknownas(A, F), cityhascompanyoffice(G, F).;true;true
6;false,true;acquired(F, H), economicsectorcompany(B, H).;false;true
6;false,true,false;companyceo(A, I), acquired(F, J).;false;false
6;false,false;companyalsoknownas(A, K), acquired(K, L).;false;true
6;false,false,false;companyalsoknownas(A, M).;false;false
7;;companyeconomicsector(A, B) :- acquired(C, A), economicsectorcompany(B, C).;false;true
7;false;acquired(D, A), companyceo(D, E).;true;true
7;false,true;companyalsoknownas(D, F), acquired(G, F).;true;true
7;false,true,true;economicsectorcompany(B, G).;false;false
7;false,true,false;countryhascompanyoffice(H, D).;false;false
7;false,false;cityhascompanyoffice(I, A), acquired(J, A).;true;true
7;false,false,true;acquired(K, J).;false;false
7;false,false,false;companyceo(A, L).;false;false
8;;companyeconomicsector(A, B) :- cityhascompanyoffice(C, A).;true;true
8;true;cityhascompanyoffice(C, D), economicsectorcompany(B, D).;true;false
8;true,true;acquired(D, E), acquired(F, D).;false;true
8;true,true,false;companyalsoknownas(A, G), companyalsoknownas(D, G).;false;false
8;false;acquired(A, H), economicsectorcompany(B, H).;false;true
8;false,false;acquired(I, A), cityhascompanyoffice(J, I).;true;true
8;false,false,true;acquired(K, I), economicsectorcompany(B, K).;false;false
8;false,false,false;acquired(A, L).;false;false
9;;companyeconomicsector(A, B) :- cityhascompanyoffice(C, A).;true;true
9;true;cityhascompanyoffice(C, D), economicsectorcompany(B, D).;true;false
9;true,true;acquired(E, D), companyceo(D, F).;false;false
9;false;companyalsoknownas(A, G), cityhascompanyoffice(H, G).;true;true
9;false,true;economicsectorcompany(B, G).;false;true
9;false,true,false;acquired(I, G).;false;false
9;false,false;acquired(A, J), economicsectorcompany(B, J).;false;true
9;false,false,false;companyalsoknownas(A, K), economicsectorcompany(B, K).;false;false


WILL Produced-Tree #1
% FOR teamplayssport(A, B):
%   if ( teamplaysagainstteam(C, A) )
%   then if ( recursion_teamplayssport(C, B) )
%   | then return 0.8038011090125552;  // std dev = 2.174, 92.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=87 */
%   | else return -0.0673829797941047;  // std dev = 2.545, 94.000 (wgt'ed) examples reached here.  /* #neg=87 #pos=7 */
%   else if ( teamalsoknownas(A, D) )
%   | then if ( recursion_teamplayssport(D, B) )
%   | | then return 0.8581489350995122;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else if ( teamplaysagainstteam(A, E), recursion_teamplayssport(E, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.3781489350995123;  // std dev = 2.498, 25.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=13 */
%   | else if ( teamplaysinleague(A, F) )
%   | | then return 0.34905802600860214;  // std dev = 0.500, 55.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=27 */
%   | | else if ( athleteplaysforteam(G, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.32753669020155207;  // std dev = 3.493, 49.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=23 */
WILL Produced-Tree #2
% FOR teamplayssport(A, B):
%   if ( teamalsoknownas(A, C), teamplaysagainstteam(A, D) )
%   then if ( recursion_teamplayssport(D, B) )
%   | then return 0.5484923973689336;  // std dev = 1.279, 11.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=9 */
%   | else if ( recursion_teamplayssport(C, B), athleteplaysforteam(E, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.027514113175587294;  // std dev = 1.480, 17.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=3 */
%   else if ( teamplaysagainstteam(A, F), athleteledsportsteam(G, A) )
%   | then if ( athleteledsportsteam(G, H), recursion_teamplayssport(H, B) )
%   | | then return 0.7303105791871154;  // std dev = 0.000, 32.000 (wgt'ed) examples reached here.  /* #pos=32 */
%   | | else return -0.1423351113788109;  // std dev = 0.186, 32.000 (wgt'ed) examples reached here.  /* #neg=32 */
%   | else if ( teamplaysagainstteam(I, A) )
%   | | then if ( recursion_teamplayssport(I, B) )
%   | | | then return 0.7085714487523329;  // std dev = 0.989, 46.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=45 */
%   | | | else return -0.013844824083206017;  // std dev = 2.298, 50.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=6 */
%   | | else if ( teamalsoknownas(A, J) )
%   | | | then return 0.3437053147826088;  // std dev = 2.426, 24.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=13 */
%   | | | else return 0.2924618157328863;  // std dev = 5.095, 104.000 (wgt'ed) examples reached here.  /* #neg=54 #pos=50 */
WILL Produced-Tree #3
% FOR teamplayssport(A, B):
%   if ( teamplaysagainstteam(A, C), recursion_teamplayssport(C, B) )
%   then return 0.5338928582308922;  // std dev = 1.778, 82.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=78 */
%   else if ( teamplaysagainstteam(A, D) )
%   | then if ( teamalsoknownas(A, E), recursion_teamplayssport(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( teamalsoknownas(D, F), teamalsoknownas(A, F) )
%   | | | then return -0.025955691116183073;  // std dev = 0.943, 9.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=1 */
%   | | | else return -0.04487326448192499;  // std dev = 2.418, 85.000 (wgt'ed) examples reached here.  /* #neg=76 #pos=9 */
%   | else if ( teamplaysagainstteam(G, A), teamplaysinleague(G, H) )
%   | | then if ( recursion_teamplayssport(G, B) )
%   | | | then return 0.5714151925477962;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.20108542423090484;  // std dev = 1.414, 9.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=3 */
%   | | else if ( athleteledsportsteam(I, A) )
%   | | | then return 0.76105644199876;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | | else return 0.24691127790806688;  // std dev = 5.577, 125.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=61 */
WILL Produced-Tree #4
% FOR teamplayssport(A, B):
%   if ( teamplaysagainstteam(A, C), teamplaysagainstteam(C, D) )
%   then if ( recursion_teamplayssport(D, B) )
%   | then if ( teamplaysinleague(C, E) )
%   | | then return 0.34203702502836403;  // std dev = 2.950, 104.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=84 */
%   | | else return 0.45860482819707565;  // std dev = 0.028, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | else if ( athleteledsportsteam(F, A), teamplaysinleague(A, G) )
%   | | then if ( teamalsoknownas(A, H), recursion_teamplayssport(H, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.11616875069877022;  // std dev = 0.036, 30.000 (wgt'ed) examples reached here.  /* #neg=30 */
%   | | else if ( teamplaysagainstteam(D, I), recursion_teamplayssport(I, B) )
%   | | | then return -0.12718276126059744;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | | else return -0.10615606139339731;  // std dev = 0.700, 32.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=1 */
%   else return 0.20757911020161843;  // std dev = 5.843, 143.000 (wgt'ed) examples reached here.  /* #neg=72 #pos=71 */
WILL Produced-Tree #5
% FOR teamplayssport(A, B):
%   if ( teamplaysagainstteam(C, A), recursion_teamplayssport(C, B) )
%   then return 0.3227545349379383;  // std dev = 1.992, 92.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=87 */
%   else if ( teamplaysagainstteam(D, A), teamplaysinleague(D, E) )
%   | then if ( teamplaysagainstteam(F, D), teamalsoknownas(F, G) )
%   | | then if ( teamplaysagainstteam(A, H) )
%   | | | then return -0.07531602780247801;  // std dev = 1.815, 81.000 (wgt'ed) examples reached here.  /* #neg=77 #pos=4 */
%   | | | else return 0.14678001109133407;  // std dev = 1.155, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   | | else if ( teamplaysagainstteam(I, D), recursion_teamplayssport(I, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.14678001109133407;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | else if ( teamplaysagainstteam(A, J), recursion_teamplayssport(J, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( teamalsoknownas(A, K), recursion_teamplayssport(K, B) )
%   | | | then return 0.5358522052774053;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | | else return 0.14866575365610915;  // std dev = 5.696, 133.000 (wgt'ed) examples reached here.  /* #neg=70 #pos=63 */
WILL Produced-Tree #6
% FOR teamplayssport(A, B):
%   if ( teamalsoknownas(A, C), recursion_teamplayssport(C, B) )
%   then if ( teamplaysagainstteam(A, D), athleteplaysforteam(E, D) )
%   | then return 0.3178479186575748;  // std dev = 0.023, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else return 0.16678126522278194;  // std dev = 0.466, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   else if ( teamplaysagainstteam(A, F), teamplaysagainstteam(F, G) )
%   | then if ( recursion_teamplayssport(G, B) )
%   | | then return 0.20226520767324307;  // std dev = 2.784, 97.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=77 */
%   | | else if ( athleteplaysforteam(H, A), teamalsoknownas(A, I) )
%   | | | then return -0.11293795623377297;  // std dev = 0.003, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | | else return -0.09354061935111324;  // std dev = 0.632, 60.000 (wgt'ed) examples reached here.  /* #neg=59 #pos=1 */
%   | else if ( athleteledsportsteam(J, A), athleteplaysforteam(K, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( athleteledsportsteam(L, A), teamplaysagainstteam(M, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.12835370960179737;  // std dev = 5.808, 140.000 (wgt'ed) examples reached here.  /* #neg=71 #pos=69 */
WILL Produced-Tree #7
% FOR teamplayssport(A, B):
%   if ( teamplaysagainstteam(A, C), teamplaysinleague(C, D) )
%   then if ( recursion_teamplayssport(C, B) )
%   | then return 0.20718191994822177;  // std dev = 1.812, 79.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=75 */
%   | else if ( teamplaysagainstteam(C, E) )
%   | | then return -0.05273754414912088;  // std dev = 2.110, 88.000 (wgt'ed) examples reached here.  /* #neg=79 #pos=9 */
%   | | else return 0.0810903890026366;  // std dev = 0.787, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   else if ( teamalsoknownas(A, F), athleteledsportsteam(G, F) )
%   | then if ( teamplaysagainstteam(F, H), recursion_teamplayssport(H, B) )
%   | | then return 0.36378393864919445;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else if ( teamplaysinleague(A, I), teamplaysagainstteam(F, J) )
%   | | | then return -0.4141984438838612;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( teamalsoknownas(A, K), teamplaysagainstteam(K, L) )
%   | | then return 0.053985412435695476;  // std dev = 0.255, 2.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */
%   | | else if ( teamalsoknownas(A, M) )
%   | | | then return 0.16505176471940636;  // std dev = 2.562, 29.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=17 */
%   | | | else return 0.08660198178646603;  // std dev = 5.158, 113.000 (wgt'ed) examples reached here.  /* #neg=59 #pos=54 */
WILL Produced-Tree #8
% FOR teamplayssport(A, B):
%   if ( teamplaysagainstteam(C, A), recursion_teamplayssport(C, B) )
%   then return 0.17772951623736677;  // std dev = 2.039, 92.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=87 */
%   else if ( teamplaysagainstteam(D, A), teamplaysinleague(D, E) )
%   | then if ( teamalsoknownas(D, F), teamplaysagainstteam(G, F) )
%   | | then if ( recursion_teamplayssport(G, B) )
%   | | | then return -0.150690708373335;  // std dev = 0.123, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | | | else return -0.09722099376937246;  // std dev = 0.194, 41.000 (wgt'ed) examples reached here.  /* #neg=41 */
%   | | else if ( athleteplaysforteam(H, D) )
%   | | | then return 0.04148708348132002;  // std dev = 2.157, 36.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=7 */
%   | | | else return -0.12485668726430858;  // std dev = 0.069, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( athleteledsportsteam(I, A), teamplaysagainstteam(J, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( teamplaysinleague(A, K) )
%   | | | then return 0.07986650949269523;  // std dev = 4.232, 74.000 (wgt'ed) examples reached here.  /* #neg=37 #pos=37 */
%   | | | else return 0.04755022703702183;  // std dev = 3.782, 60.000 (wgt'ed) examples reached here.  /* #neg=33 #pos=27 */
WILL Produced-Tree #9
% FOR teamplayssport(A, B):
%   if ( athleteledsportsteam(C, A) )
%   then if ( athleteledsportsteam(C, D), recursion_teamplayssport(D, B) )
%   | then if ( teamplaysagainstteam(D, E), teamplaysagainstteam(F, D) )
%   | | then return 0.18103840514352945;  // std dev = 0.022, 38.000 (wgt'ed) examples reached here.  /* #pos=38 */
%   | | else if ( teamalsoknownas(A, G), teamalsoknownas(D, G) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.4369269509656202;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else return -0.155143016184948;  // std dev = 1.218, 39.000 (wgt'ed) examples reached here.  /* #neg=39 */
%   else if ( teamplaysagainstteam(A, H), recursion_teamplayssport(H, B) )
%   | then return 0.19614587153351884;  // std dev = 0.464, 40.000 (wgt'ed) examples reached here.  /* #pos=40 */
%   | else if ( teamplaysagainstteam(I, A), athleteledsportsteam(J, I) )
%   | | then if ( teamplaysagainstteam(K, I), recursion_teamplayssport(K, B) )
%   | | | then return 0.1054650895398037;  // std dev = 1.551, 15.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=7 */
%   | | | else return -0.04738678500368538;  // std dev = 1.183, 27.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=2 */
%   | | else if ( teamplaysagainstteam(A, L) )
%   | | | then return -0.00884629524777376;  // std dev = 1.515, 23.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=4 */
%   | | | else return 0.05315584924638996;  // std dev = 5.632, 133.000 (wgt'ed) examples reached here.  /* #neg=67 #pos=66 */
WILL Produced-Tree #10
% FOR teamplayssport(A, B):
%   if ( athleteledsportsteam(C, A) )
%   then if ( athleteledsportsteam(C, D), recursion_teamplayssport(D, B) )
%   | then if ( teamplaysagainstteam(E, D), teamplaysinleague(D, F) )
%   | | then return 0.15572966035697214;  // std dev = 0.020, 38.000 (wgt'ed) examples reached here.  /* #pos=38 */
%   | | else return 0.33390621930736064;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else return -0.14129799964002995;  // std dev = 1.181, 39.000 (wgt'ed) examples reached here.  /* #neg=39 */
%   else if ( teamalsoknownas(A, G), athleteledsportsteam(H, G) )
%   | then if ( recursion_teamplayssport(G, B) )
%   | | then return 0.16112474268405663;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else if ( teamplaysagainstteam(I, G) )
%   | | | then return -0.09103102826411735;  // std dev = 0.443, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( teamplaysagainstteam(A, J), recursion_teamplayssport(J, B) )
%   | | then return 0.1681778815308219;  // std dev = 0.446, 39.000 (wgt'ed) examples reached here.  /* #pos=39 */
%   | | else if ( teamalsoknownas(A, K), recursion_teamplayssport(K, B) )
%   | | | then return -0.04383792317279739;  // std dev = 0.347, 2.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */
%   | | | else return 0.029552271136648413;  // std dev = 6.139, 193.000 (wgt'ed) examples reached here.  /* #neg=116 #pos=77 */


Results
   AUC ROC   = 0.893606
   AUC PR    = 0.892659
   CLL	      = -0.402062
   Precision = 0.920455 at threshold = 0.5
   Recall    = 0.609023
   F1        = 0.733032


Total learning time: 16.289 seconds
Total inference time: 6.266 seconds
AUC ROC: 0.893606


Results scoring model
   AUC ROC   = 0.8886
   AUC PR    = 0.90048
   CLL	      = -0.409303
   Precision = 0.946237 at threshold = 0.5
   Recall    = 0.556962
   F1        = 0.701195


Total scoring time: 5.707 seconds
Parameter learned model CLL: -0.409303


Structure after Parameter Learning
[['teamplayssport(A, B)', {'': 'teamplaysagainstteam(C, A)', 'true': 'recursion_teamplayssport(C, B)', 'false': 'teamalsoknownas(A, D)', 'false,true': 'recursion_teamplayssport(D, B)', 'false,true,false': 'teamplaysagainstteam(A, E), recursion_teamplayssport(E, B)', 'false,false': 'teamplaysinleague(A, F)', 'false,false,false': 'athleteplaysforteam(G, A)'}, {'true,true': [2.174, 5, 87], 'true,false': [2.545, 87, 7], 'false,true,true': [0.0, 0, 1], 'false,true,false,true': [0.0, 0, 0], 'false,true,false,false': [2.498, 12, 13], 'false,false,true': [0.5, 28, 27], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [3.493, 26, 23]}], ['teamplayssport(A, B)', {'': 'teamalsoknownas(A, C), teamplaysagainstteam(A, D)', 'true': 'recursion_teamplayssport(D, B)', 'true,false': 'recursion_teamplayssport(C, B), athleteplaysforteam(E, C)', 'false': 'teamplaysagainstteam(A, F), athleteledsportsteam(G, A)', 'false,true': 'athleteledsportsteam(G, H), recursion_teamplayssport(H, B)', 'false,false': 'teamplaysagainstteam(I, A)', 'false,false,true': 'recursion_teamplayssport(I, B)', 'false,false,false': 'teamalsoknownas(A, J)'}, {'true,true': [1.279, 2, 9], 'true,false,true': [0.0, 0, 0], 'true,false,false': [1.48, 14, 3], 'false,true,true': [0.0, 0, 32], 'false,true,false': [0.186, 32, 0], 'false,false,true,true': [0.989, 1, 45], 'false,false,true,false': [2.298, 44, 6], 'false,false,false,true': [2.426, 11, 13], 'false,false,false,false': [5.095, 54, 50]}], ['teamplayssport(A, B)', {'': 'teamplaysagainstteam(A, C), recursion_teamplayssport(C, B)', 'false': 'teamplaysagainstteam(A, D)', 'false,true': 'teamalsoknownas(A, E), recursion_teamplayssport(E, B)', 'false,true,false': 'teamalsoknownas(D, F), teamalsoknownas(A, F)', 'false,false': 'teamplaysagainstteam(G, A), teamplaysinleague(G, H)', 'false,false,true': 'recursion_teamplayssport(G, B)', 'false,false,false': 'athleteledsportsteam(I, A)'}, {'true': [1.778, 4, 78], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [0.943, 8, 1], 'false,true,false,false': [2.418, 76, 9], 'false,false,true,true': [0.0, 0, 5], 'false,false,true,false': [1.414, 6, 3], 'false,false,false,true': [0.0, 0, 1], 'false,false,false,false': [5.577, 64, 61]}], ['teamplayssport(A, B)', {'': 'teamplaysagainstteam(A, C), teamplaysagainstteam(C, D)', 'true': 'recursion_teamplayssport(D, B)', 'true,true': 'teamplaysinleague(C, E)', 'true,false': 'athleteledsportsteam(F, A), teamplaysinleague(A, G)', 'true,false,true': 'teamalsoknownas(A, H), recursion_teamplayssport(H, B)', 'true,false,false': 'teamplaysagainstteam(D, I), recursion_teamplayssport(I, B)'}, {'true,true,true': [2.95, 20, 84], 'true,true,false': [0.028, 0, 2], 'true,false,true,true': [0.0, 0, 0], 'true,false,true,false': [0.036, 30, 0], 'true,false,false,true': [0.0, 5, 0], 'true,false,false,false': [0.7, 31, 1], 'false': [5.843, 72, 71]}], ['teamplayssport(A, B)', {'': 'teamplaysagainstteam(C, A), recursion_teamplayssport(C, B)', 'false': 'teamplaysagainstteam(D, A), teamplaysinleague(D, E)', 'false,true': 'teamplaysagainstteam(F, D), teamalsoknownas(F, G)', 'false,true,true': 'teamplaysagainstteam(A, H)', 'false,true,false': 'teamplaysagainstteam(I, D), recursion_teamplayssport(I, B)', 'false,false': 'teamplaysagainstteam(A, J), recursion_teamplayssport(J, B)', 'false,false,false': 'teamalsoknownas(A, K), recursion_teamplayssport(K, B)'}, {'true': [1.992, 5, 87], 'false,true,true,true': [1.815, 77, 4], 'false,true,true,false': [1.155, 4, 2], 'false,true,false,true': [0.0, 0, 0], 'false,true,false,false': [0.816, 2, 1], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 1], 'false,false,false,false': [5.696, 70, 63]}], ['teamplayssport(A, B)', {'': 'teamalsoknownas(A, C), recursion_teamplayssport(C, B)', 'true': 'teamplaysagainstteam(A, D), athleteplaysforteam(E, D)', 'false': 'teamplaysagainstteam(A, F), teamplaysagainstteam(F, G)', 'false,true': 'recursion_teamplayssport(G, B)', 'false,true,false': 'athleteplaysforteam(H, A), teamalsoknownas(A, I)', 'false,false': 'athleteledsportsteam(J, A), athleteplaysforteam(K, A)', 'false,false,false': 'athleteledsportsteam(L, A), teamplaysagainstteam(M, A)'}, {'true,true': [0.023, 0, 9], 'true,false': [0.466, 1, 2], 'false,true,true': [2.784, 20, 77], 'false,true,false,true': [0.003, 7, 0], 'false,true,false,false': [0.632, 59, 1], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [5.808, 71, 69]}], ['teamplayssport(A, B)', {'': 'teamplaysagainstteam(A, C), teamplaysinleague(C, D)', 'true': 'recursion_teamplayssport(C, B)', 'true,false': 'teamplaysagainstteam(C, E)', 'false': 'teamalsoknownas(A, F), athleteledsportsteam(G, F)', 'false,true': 'teamplaysagainstteam(F, H), recursion_teamplayssport(H, B)', 'false,true,false': 'teamplaysinleague(A, I), teamplaysagainstteam(F, J)', 'false,false': 'teamalsoknownas(A, K), teamplaysagainstteam(K, L)', 'false,false,false': 'teamalsoknownas(A, M)'}, {'true,true': [1.812, 4, 75], 'true,false,true': [2.11, 79, 9], 'true,false,false': [0.787, 2, 1], 'false,true,true': [0.0, 0, 1], 'false,true,false,true': [0.0, 1, 0], 'false,true,false,false': [0.0, 0, 0], 'false,false,true': [0.255, 1, 1], 'false,false,false,true': [2.562, 12, 17], 'false,false,false,false': [5.158, 59, 54]}], ['teamplayssport(A, B)', {'': 'teamplaysagainstteam(C, A), recursion_teamplayssport(C, B)', 'false': 'teamplaysagainstteam(D, A), teamplaysinleague(D, E)', 'false,true': 'teamalsoknownas(D, F), teamplaysagainstteam(G, F)', 'false,true,true': 'recursion_teamplayssport(G, B)', 'false,true,false': 'athleteplaysforteam(H, D)', 'false,false': 'athleteledsportsteam(I, A), teamplaysagainstteam(J, A)', 'false,false,false': 'teamplaysinleague(A, K)'}, {'true': [2.039, 5, 87], 'false,true,true,true': [0.123, 10, 0], 'false,true,true,false': [0.194, 41, 0], 'false,true,false,true': [2.157, 29, 7], 'false,true,false,false': [0.069, 3, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [4.232, 37, 37], 'false,false,false,false': [3.782, 33, 27]}], ['teamplayssport(A, B)', {'': 'athleteledsportsteam(C, A)', 'true': 'athleteledsportsteam(C, D), recursion_teamplayssport(D, B)', 'true,true': 'teamplaysagainstteam(D, E), teamplaysagainstteam(F, D)', 'true,true,false': 'teamalsoknownas(A, G), teamalsoknownas(D, G)', 'false': 'teamplaysagainstteam(A, H), recursion_teamplayssport(H, B)', 'false,false': 'teamplaysagainstteam(I, A), athleteledsportsteam(J, I)', 'false,false,true': 'teamplaysagainstteam(K, I), recursion_teamplayssport(K, B)', 'false,false,false': 'teamplaysagainstteam(A, L)'}, {'true,true,true': [0.022, 0, 38], 'true,true,false,true': [0.0, 0, 0], 'true,true,false,false': [0.0, 0, 1], 'true,false': [1.218, 39, 0], 'false,true': [0.464, 0, 40], 'false,false,true,true': [1.551, 8, 7], 'false,false,true,false': [1.183, 25, 2], 'false,false,false,true': [1.515, 19, 4], 'false,false,false,false': [5.632, 67, 66]}], ['teamplayssport(A, B)', {'': 'athleteledsportsteam(C, A)', 'true': 'athleteledsportsteam(C, D), recursion_teamplayssport(D, B)', 'true,true': 'teamplaysagainstteam(E, D), teamplaysinleague(D, F)', 'false': 'teamalsoknownas(A, G), athleteledsportsteam(H, G)', 'false,true': 'recursion_teamplayssport(G, B)', 'false,true,false': 'teamplaysagainstteam(I, G)', 'false,false': 'teamplaysagainstteam(A, J), recursion_teamplayssport(J, B)', 'false,false,false': 'teamalsoknownas(A, K), recursion_teamplayssport(K, B)'}, {'true,true,true': [0.02, 0, 38], 'true,true,false': [0.0, 0, 1], 'true,false': [1.181, 39, 0], 'false,true,true': [0.0, 0, 1], 'false,true,false,true': [0.443, 2, 1], 'false,true,false,false': [0.0, 0, 0], 'false,false,true': [0.446, 0, 39], 'false,false,false,true': [0.347, 1, 1], 'false,false,false,false': [6.139, 116, 77]}]]
[{'': [0.24997109492427125, 0.24994082840236653], 'true': [0.0513941398865787, 0.06892258940697174], 'false': [0.24852071005917115, 0.24963017751479302], 'false,false': [0.24991735537190224, 0.2490628904623086], 'false,false,false': [nan, 0.2490628904623086], 'false,true': [0.0, 0.24959999999999957], 'false,true,false': [nan, 0.24959999999999957]}, {'': [0.20140945265909913, 0.21857144414351598], 'false': [0.1909182626535347, 0.2263739464932286], 'false,false': [0.19543502250116318, 0.24918615128421379], 'false,false,false': [0.2452696375236921, 0.24959760661549021], 'true': [0.14876033057851235, 0.12884788527343877], 'false,false,true': [0.02126654064272222, 0.10560000000000004], 'false,true': [-1.1102230246251565e-16, 0.0010812746754286853], 'true,false': [nan, 0.12884788527343877]}, {'': [0.038539330063367, 0.19558406945042034], 'false': [0.07167254492460426, 0.24207409321404671], 'false,false': [0.17434431723762184, 0.24892140145272607], 'false,false,false': [0.0, 0.24881479449166652], 'false,false,true': [-4.4408920985006264e-17, 0.2222222222222221], 'false,true': [nan, 0.07167254492460431], 'false,true,false': [0.09876543209876541, 0.06876962169499139]}, {'': [0.10274557929782095, 0.2387775562321208], 'true': [0.08234447981673651, 0.007367326016472287], 'true,true': [0.08366406270203078, 0.0003944953993545719], 'true,false': [4.340760506144995e-05, 0.013282611347204308], 'true,false,false': [0.0, 0.015298273139488047], 'true,false,true': [nan, 4.340760506145551e-05]}, {'': [0.04312543432494153, 0.18098249841076025], 'false': [0.06326093515464222, 0.24321986998453687], 'false,false': [nan, 0.24321986998453682], 'false,false,false': [0.0, 0.2439298344807484], 'false,true': [0.056354258660084276, 0.22222222222222224], 'false,true,false': [nan, 0.22222222222222224], 'false,true,true': [0.04066590487567896, 0.22222222222222224]}, {'': [0.02244220108240541, 0.1499208913480857], 'false': [0.07115469790643067, 0.24095910882477933], 'false,false': [nan, 0.24095910882477928], 'false,false,false': [nan, 0.24095910882477928], 'false,true': [0.0799243536487017, 0.0059930729000263454], 'true': [6.095557881554322e-05, 0.072470087258184], 'false,true,false': [1.2794016480668517e-06, 0.006652805075628571]}, {'': [0.06568845545894395, 0.23096486267015962], 'false': [0.15131414688295244, 0.23184963727039015], 'false,false': [0.032435425778433974, 0.23462543181115827], 'false,false,false': [0.22640902884055508, 0.23547718813969942], 'false,true': [0.0, 0.0], 'true': [0.04156171584039881, 0.05629573693391308], 'true,false': [0.050588068660856925, 0.20640119403293278], 'false,true,false': [0.0, nan]}, {'': [0.04520822067897242, 0.17040385035250277], 'false': [0.05803106337863154, 0.2406568178449659], 'false,false': [nan, 0.2406568178449659], 'false,false,false': [0.24198371228262988, 0.2384435884643607], 'false,true': [0.001484100514800232, 0.12143479733241581], 'false,true,false': [0.12929455325094108, 0.0015759570185359024], 'false,true,true': [0.0015052794689902449, 0.0009183446456625659]}, {'': [0.04921392818273224, 0.16482161397511702], 'false': [0.005385343310316393, 0.19273167602355604], 'false,false': [0.09592780371112324, 0.21850681697482427], 'false,false,false': [0.09974731076455814, 0.23847739239546326], 'false,false,true': [0.16031111317670688, 0.05181512146980186], 'true': [0.0016487534247571268, 0.03804283536038836], 'true,true': [1.3194291163093633e-05, 0.0], 'true,true,false': [nan, 0.0]}, {'': [0.04102211685163073, 0.16351607224129075], 'false': [0.061030635511751835, 0.16516033958128318], 'false,false': [0.005098420308306992, 0.1939350036080119], 'false,false,false': [0.060199049502418896, 0.19526562615461923], 'false,true': [0.0, 0.06547854747671879], 'false,true,false': [0.06547854747671879, nan], 'true': [0.0008032835013839651, 0.03576078921734886], 'true,true': [1.0399818858130542e-05, 0.0]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;teamplayssport(A, B) :- teamplaysagainstteam(C, A).;true;true
0;false;teamalsoknownas(A, D).;true;true
0;false,true;recursion_teamplayssport(D, B).;true;true
1;;teamplayssport(A, B) :- teamalsoknownas(A, C), teamplaysagainstteam(A, D).;true;true
1;false;teamplaysagainstteam(A, F), athleteledsportsteam(G, A).;true;true
1;false,true;athleteledsportsteam(G, H), recursion_teamplayssport(H, B).;true;true
2;;teamplayssport(A, B) :- teamplaysagainstteam(A, C), recursion_teamplayssport(C, B).;true;true
2;false;teamplaysagainstteam(A, D).;true;true
2;false,false;teamplaysagainstteam(G, A), teamplaysinleague(G, H).;true;true
2;false,false,true;recursion_teamplayssport(G, B).;true;true
2;false,false,false;athleteledsportsteam(I, A).;true;true
3;;teamplayssport(A, B) :- teamplaysagainstteam(A, C), teamplaysagainstteam(C, D).;true;true
3;true;recursion_teamplayssport(D, B).;true;true
3;true,true;teamplaysinleague(C, E).;true;true
3;true,false;athleteledsportsteam(F, A), teamplaysinleague(A, G).;true;true
3;true,false,false;teamplaysagainstteam(D, I), recursion_teamplayssport(I, B).;true;true
4;;teamplayssport(A, B) :- teamplaysagainstteam(C, A), recursion_teamplayssport(C, B).;true;true
4;false;teamplaysagainstteam(D, A), teamplaysinleague(D, E).;true;true
4;false,false;teamalsoknownas(A, K), recursion_teamplayssport(K, B).;true;true
5;;teamplayssport(A, B) :- teamalsoknownas(A, C), recursion_teamplayssport(C, B).;true;true
5;true;teamplaysagainstteam(A, D), athleteplaysforteam(E, D).;true;true
5;false;teamplaysagainstteam(A, F), teamplaysagainstteam(F, G).;true;true
5;false,true;recursion_teamplayssport(G, B).;true;true
5;false,true,false;athleteplaysforteam(H, A), teamalsoknownas(A, I).;true;true
6;;teamplayssport(A, B) :- teamplaysagainstteam(A, C), teamplaysinleague(C, D).;true;true
6;false;teamalsoknownas(A, F), athleteledsportsteam(G, F).;true;true
6;false,true;teamplaysagainstteam(F, H), recursion_teamplayssport(H, B).;true;true
7;;teamplayssport(A, B) :- teamplaysagainstteam(C, A), recursion_teamplayssport(C, B).;true;true
7;false;teamplaysagainstteam(D, A), teamplaysinleague(D, E).;true;true
7;false,true;teamalsoknownas(D, F), teamplaysagainstteam(G, F).;true;true
7;false,true,true;recursion_teamplayssport(G, B).;true;true
7;false,true,false;athleteplaysforteam(H, D).;true;true
8;;teamplayssport(A, B) :- athleteledsportsteam(C, A).;true;true
8;true;athleteledsportsteam(C, D), recursion_teamplayssport(D, B).;true;true
8;true,true;teamplaysagainstteam(D, E), teamplaysagainstteam(F, D).;true;true
9;;teamplayssport(A, B) :- athleteledsportsteam(C, A).;true;true
9;true;athleteledsportsteam(C, D), recursion_teamplayssport(D, B).;true;true
9;true,true;teamplaysagainstteam(E, D), teamplaysinleague(D, F).;true;true
9;false;teamalsoknownas(A, G), athleteledsportsteam(H, G).;true;true
9;false,true;recursion_teamplayssport(G, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR teamplayssport(A, B):
%   if ( teamplaysagainstteam(C, A) )
%   then if ( teamplaysagainstteam(D, A), recursion_teamplayssport(D, B) )
%   | then return 0.8038011090125552;  // std dev = 0.227, 92.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=87 */
%   | else if ( athleteplayssport(E, B), athleteledsportsteam(E, F) )
%   | | then return 0.08891816586874314;  // std dev = 0.421, 26.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=6 */
%   | | else return -0.12714518254754653;  // std dev = 0.120, 68.000 (wgt'ed) examples reached here.  /* #neg=67 #pos=1 */
%   else if ( teamalsoknownas(A, G) )
%   | then if ( recursion_teamplayssport(G, B) )
%   | | then return 0.8581489350995122;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else if ( athleteplayssport(H, B), athleteledsportsteam(H, I) )
%   | | | then return 0.5248156017661789;  // std dev = 2.000, 18.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=12 */
%   | | | else return 0.0010060779566550668;  // std dev = 0.926, 7.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=1 */
%   | else if ( athleteplayssport(J, B), athleteledsportsteam(J, K) )
%   | | then if ( athleteplaysforteam(J, K), teamalsoknownas(K, L) )
%   | | | then return 0.35814893509951234;  // std dev = 2.345, 22.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=11 */
%   | | | else return 0.8581489350995116;  // std dev = 2.46e-07, 39.000 (wgt'ed) examples reached here.  /* #pos=39 */
%   | | else return -0.14185106490048774;  // std dev = 2.11e-08, 43.000 (wgt'ed) examples reached here.  /* #neg=43 */
WILL Produced-Tree #2
% FOR teamplayssport(A, B):
%   if ( teamalsoknownas(A, C), teamplaysagainstteam(A, D) )
%   then if ( teamalsoknownas(A, E), recursion_teamplayssport(E, B) )
%   | then return 0.7303105791871154;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else if ( teamplaysagainstteam(A, F), teamalsoknownas(G, F) )
%   | | then return -0.1530021430261615;  // std dev = 0.051, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | | else return 0.31440186744141835;  // std dev = 1.183, 6.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   else if ( teamplaysagainstteam(A, H), athleteledsportsteam(I, A) )
%   | then if ( athleteledsportsteam(I, J), recursion_teamplayssport(J, B) )
%   | | then return 0.7303105791871154;  // std dev = 0.000, 32.000 (wgt'ed) examples reached here.  /* #pos=32 */
%   | | else return -0.13922537792474787;  // std dev = 0.197, 32.000 (wgt'ed) examples reached here.  /* #neg=32 */
%   | else if ( athleteplayssport(K, B), athleteledsportsteam(K, L) )
%   | | then if ( teamplaysagainstteam(M, A), recursion_teamplayssport(M, B) )
%   | | | then return 0.7065010553775916;  // std dev = 0.988, 42.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=41 */
%   | | | else return 0.47344151619973296;  // std dev = 4.223, 96.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=67 */
%   | | else if ( athleteplayssport(N, B), teamalsoknownas(A, P) )
%   | | | then return 0.3161327257680773;  // std dev = 1.115, 6.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | | else return -0.09478861367672924;  // std dev = 1.457, 80.000 (wgt'ed) examples reached here.  /* #neg=77 #pos=3 */
WILL Produced-Tree #3
% FOR teamplayssport(A, B):
%   if ( teamplaysagainstteam(A, C), recursion_teamplayssport(C, B) )
%   then if ( athleteledsportsteam(D, A), athleteplaysforteam(D, A) )
%   | then return 0.4710265710102416;  // std dev = 0.260, 34.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=30 */
%   | else return 0.5784981557281182;  // std dev = 0.266, 48.000 (wgt'ed) examples reached here.  /* #pos=48 */
%   else if ( teamplaysagainstteam(A, E) )
%   | then if ( teamplaysinleague(A, F), teamplaysagainstteam(G, A) )
%   | | then return -0.10786593702752297;  // std dev = 0.147, 73.000 (wgt'ed) examples reached here.  /* #neg=71 #pos=2 */
%   | | else if ( teamplaysagainstteam(H, A), recursion_teamplayssport(H, B) )
%   | | | then return 0.5719221564771522;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.04188477312891944;  // std dev = 1.611, 17.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=4 */
%   | else if ( teamplaysagainstteam(I, A), teamplaysinleague(I, J) )
%   | | then if ( recursion_teamplayssport(I, B) )
%   | | | then return 0.6609466073420046;  // std dev = 0.177, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.15095104628348632;  // std dev = 1.329, 9.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=3 */
%   | | else if ( athleteledsportsteam(K, A) )
%   | | | then return 0.6150072488842012;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | | else return 0.23578046959921248;  // std dev = 4.600, 125.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=61 */
WILL Produced-Tree #4
% FOR teamplayssport(A, B):
%   if ( teamplaysagainstteam(A, C), teamplaysagainstteam(C, D) )
%   then if ( recursion_teamplayssport(D, B) )
%   | then if ( teamplaysinleague(C, E) )
%   | | then if ( teamplaysagainstteam(A, F), recursion_teamplayssport(F, B) )
%   | | | then return 0.39985318763983607;  // std dev = 1.534, 80.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=76 */
%   | | | else return 0.08762173441070355;  // std dev = 1.929, 24.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=8 */
%   | | else return 0.5239338440760366;  // std dev = 0.143, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | else return -0.1050321848626142;  // std dev = 0.072, 67.000 (wgt'ed) examples reached here.  /* #neg=66 #pos=1 */
%   else if ( athleteplayssport(G, B), athleteledsportsteam(G, H) )
%   | then if ( athleteplaysforteam(G, H), teamalsoknownas(H, I) )
%   | | then if ( athleteledsportsteam(J, H), athleteplaysforteam(J, I) )
%   | | | then return -0.3252995695818654;  // std dev = 0.090, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | | else return 0.21550861988217568;  // std dev = 2.815, 32.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=17 */
%   | | else return 0.5475471667955574;  // std dev = 0.139, 50.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=49 */
%   | else if ( teamalsoknownas(K, A), athleteplaysforteam(L, K) )
%   | | then return 0.2699008563076759;  // std dev = 0.843, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else return -0.10601176586911545;  // std dev = 0.167, 53.000 (wgt'ed) examples reached here.  /* #neg=50 #pos=3 */
WILL Produced-Tree #5
% FOR teamplayssport(A, B):
%   if ( teamplaysagainstteam(C, A), recursion_teamplayssport(C, B) )
%   then if ( teamplaysagainstteam(D, A), teamplaysagainstteam(A, D) )
%   | then if ( teamalsoknownas(E, D), teamplaysagainstteam(A, E) )
%   | | then return 0.23827226390215783;  // std dev = 0.269, 36.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=31 */
%   | | else return 0.3435871085458427;  // std dev = 0.196, 46.000 (wgt'ed) examples reached here.  /* #pos=46 */
%   | else return 0.4565137300110552;  // std dev = 0.142, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else if ( teamplaysagainstteam(F, A), teamplaysinleague(F, G) )
%   | then if ( teamplaysagainstteam(A, H), teamalsoknownas(I, H) )
%   | | then return -0.1046509224050734;  // std dev = 0.218, 57.000 (wgt'ed) examples reached here.  /* #neg=57 */
%   | | else if ( teamalsoknownas(A, J), teamplaysinleague(J, K) )
%   | | | then return 0.35145159888277977;  // std dev = 1.076, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return -0.029210108599987822;  // std dev = 1.609, 28.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=4 */
%   | else if ( teamalsoknownas(A, L), recursion_teamplayssport(L, B) )
%   | | then return 0.5299732718286083;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else if ( athleteplayssport(M, B), athleteledsportsteam(M, N) )
%   | | | then return 0.28687848041527614;  // std dev = 3.240, 81.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=62 */
%   | | | else return -0.1174067196952632;  // std dev = 0.862, 52.000 (wgt'ed) examples reached here.  /* #neg=51 #pos=1 */
WILL Produced-Tree #6
% FOR teamplayssport(A, B):
%   if ( teamalsoknownas(A, C), recursion_teamplayssport(C, B) )
%   then if ( teamplaysagainstteam(A, D), athleteplaysforteam(E, D) )
%   | then return 0.2863241976741025;  // std dev = 0.069, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else return 0.1959824559872206;  // std dev = 0.521, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   else if ( teamplaysagainstteam(A, F), teamplaysagainstteam(F, G) )
%   | then if ( recursion_teamplayssport(G, B) )
%   | | then if ( teamplaysagainstteam(A, H), recursion_teamplayssport(H, B) )
%   | | | then return 0.23895893516364247;  // std dev = 1.543, 73.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=69 */
%   | | | else return 0.05589769838573632;  // std dev = 1.809, 24.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=8 */
%   | | else return -0.08946491816911376;  // std dev = 0.060, 67.000 (wgt'ed) examples reached here.  /* #neg=66 #pos=1 */
%   | else if ( athleteplayssport(I, B), athleteledsportsteam(I, J) )
%   | | then if ( athleteplaysforteam(I, J), teamalsoknownas(J, K) )
%   | | | then return 0.055417228142268786;  // std dev = 2.929, 36.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=17 */
%   | | | else return 0.34384786567814246;  // std dev = 0.987, 50.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=49 */
%   | | else if ( teamplaysagainstteam(L, A) )
%   | | | then return 0.12777042434095648;  // std dev = 0.717, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | | else return -0.10414739565807565;  // std dev = 0.870, 49.000 (wgt'ed) examples reached here.  /* #neg=48 #pos=1 */
WILL Produced-Tree #7
% FOR teamplayssport(A, B):
%   if ( teamplaysagainstteam(A, C), teamplaysinleague(C, D) )
%   then if ( teamplaysagainstteam(E, A), recursion_teamplayssport(E, B) )
%   | then return 0.19148185656068492;  // std dev = 0.188, 84.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=79 */
%   | else if ( teamplaysagainstteam(F, A), teamalsoknownas(F, G) )
%   | | then return -0.08915686248959069;  // std dev = 0.120, 58.000 (wgt'ed) examples reached here.  /* #neg=57 #pos=1 */
%   | | else if ( athleteplayssport(H, B), athleteledsportsteam(H, I) )
%   | | | then return 0.15986231838802553;  // std dev = 1.415, 10.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
%   | | | else return -0.08588972625370286;  // std dev = 0.048, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   else if ( teamalsoknownas(A, J), athleteledsportsteam(K, J) )
%   | then if ( teamplaysagainstteam(J, L), recursion_teamplayssport(L, B) )
%   | | then return 0.3529907554673152;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else return -0.16663647264213735;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( athleteplayssport(M, B), athleteplaysinleague(M, N) )
%   | | then if ( teamalsoknownas(P, A), teamalsoknownas(A, P) )
%   | | | then return 0.05008441467709318;  // std dev = 1.734, 17.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=10 */
%   | | | else return 0.19112522357685238;  // std dev = 2.804, 81.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=61 */
%   | | else return -0.09327220885095026;  // std dev = 0.130, 46.000 (wgt'ed) examples reached here.  /* #neg=45 #pos=1 */
WILL Produced-Tree #8
% FOR teamplayssport(A, B):
%   if ( teamplaysagainstteam(C, A), recursion_teamplayssport(C, B) )
%   then if ( teamplaysagainstteam(A, D), teamplaysagainstteam(D, A) )
%   | then if ( teamalsoknownas(E, D), teamplaysagainstteam(A, E) )
%   | | then return 0.10068868040529011;  // std dev = 0.276, 36.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=31 */
%   | | else return 0.19609470408557025;  // std dev = 0.176, 46.000 (wgt'ed) examples reached here.  /* #pos=46 */
%   | else return 0.2904285695215464;  // std dev = 0.130, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else if ( teamplaysagainstteam(F, A), teamplaysinleague(F, G) )
%   | then if ( teamalsoknownas(F, H), teamplaysagainstteam(I, H) )
%   | | then return -0.0906373574801611;  // std dev = 0.036, 51.000 (wgt'ed) examples reached here.  /* #neg=51 */
%   | | else if ( athleteplaysforteam(J, F) )
%   | | | then return 0.01623273211455669;  // std dev = 1.937, 36.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=7 */
%   | | | else return -0.12055167888021344;  // std dev = 0.111, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( athleteplayssport(K, B), athleteledsportsteam(K, L) )
%   | | then if ( athleteplaysforteam(K, L), teamalsoknownas(L, M) )
%   | | | then return -0.03715765595856452;  // std dev = 2.671, 32.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=14 */
%   | | | else return 0.24538200272933905;  // std dev = 0.977, 49.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=48 */
%   | | else return -0.08153919269817914;  // std dev = 0.132, 53.000 (wgt'ed) examples reached here.  /* #neg=51 #pos=2 */
WILL Produced-Tree #9
% FOR teamplayssport(A, B):
%   if ( athleteledsportsteam(C, A) )
%   then if ( athleteledsportsteam(C, D), recursion_teamplayssport(D, B) )
%   | then return 0.18299982866509934;  // std dev = 0.018, 39.000 (wgt'ed) examples reached here.  /* #pos=39 */
%   | else if ( teamplaysagainstteam(A, E), recursion_teamplayssport(E, B) )
%   | | then return -0.6219805223534485;  // std dev = 0.003, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return -0.07334909967056419;  // std dev = 0.087, 35.000 (wgt'ed) examples reached here.  /* #neg=35 */
%   else if ( athleteplayssport(F, B), athleteledsportsteam(F, G) )
%   | then if ( teamplaysagainstteam(H, A), recursion_teamplayssport(H, B) )
%   | | then return 0.15910674686896206;  // std dev = 0.121, 44.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=43 */
%   | | else if ( athleteplaysforteam(F, G), teamalsoknownas(G, I) )
%   | | | then return 0.013498639040955846;  // std dev = 3.181, 47.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=20 */
%   | | | else return 0.1720344978785358;  // std dev = 1.229, 52.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=47 */
%   | else if ( teamplaysagainstteam(J, A) )
%   | | then if ( recursion_teamplayssport(J, B) )
%   | | | then return 0.261168830872985;  // std dev = 0.228, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return -0.06458452287624081;  // std dev = 0.866, 38.000 (wgt'ed) examples reached here.  /* #neg=37 #pos=1 */
%   | | else return -0.07364423141331325;  // std dev = 0.136, 51.000 (wgt'ed) examples reached here.  /* #neg=49 #pos=2 */
WILL Produced-Tree #10
% FOR teamplayssport(A, B):
%   if ( athleteledsportsteam(C, A) )
%   then if ( athleteledsportsteam(C, D), recursion_teamplayssport(D, B) )
%   | then return 0.1572594576824426;  // std dev = 0.016, 39.000 (wgt'ed) examples reached here.  /* #pos=39 */
%   | else if ( teamplaysagainstteam(A, E), teamalsoknownas(E, F) )
%   | | then return -0.12484503603938162;  // std dev = 0.138, 29.000 (wgt'ed) examples reached here.  /* #neg=29 */
%   | | else return -0.0654249965125318;  // std dev = 0.010, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   else if ( teamalsoknownas(A, G), athleteledsportsteam(H, G) )
%   | then if ( recursion_teamplayssport(G, B) )
%   | | then return 0.15599469537936017;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else return 0.03299125449352535;  // std dev = 0.340, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | else if ( athleteplayssport(I, B), athleteledsportsteam(I, J) )
%   | | then if ( teamplaysagainstteam(A, J), athleteplaysinleague(I, K) )
%   | | | then return 0.1763580787590355;  // std dev = 0.579, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | | | else return 0.08314401043298215;  // std dev = 3.510, 120.000 (wgt'ed) examples reached here.  /* #neg=33 #pos=87 */
%   | | else if ( teamalsoknownas(L, A), teamalsoknownas(A, L) )
%   | | | then return 0.12042197513724158;  // std dev = 1.130, 8.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=3 */
%   | | | else return -0.06483080968382149;  // std dev = 0.726, 84.000 (wgt'ed) examples reached here.  /* #neg=79 #pos=5 */


Results
   AUC ROC   = 0.963593
   AUC PR    = 0.954651
   CLL	      = -0.289591
   Precision = 0.926471 at threshold = 0.5
   Recall    = 0.947368
   F1        = 0.936803


Total learning time: 130.579 seconds
Total inference time: 6.001 seconds
AUC ROC: 0.963593


Results scoring model
   AUC ROC   = 0.988443
   AUC PR    = 0.989123
   CLL	      = -0.225126
   Precision = 0.915152 at threshold = 0.5
   Recall    = 0.955696
   F1        = 0.934985


Total scoring time: 5.529 seconds
Refined model CLL: -0.225126


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.963593
   AUC PR    = 0.954651
   CLL	      = -0.289591
   Precision = 0.926471 at threshold = 0.5
   Recall    = 0.947368
   F1        = 0.936803


Total learning time: 158.104 seconds
Total inference time: 6.001 seconds
AUC ROC: 0.963593
Total revision time: 158.104
Best scored revision CLL: -0.225126


Dataset: 10_nell_finances_nell_sports, Fold: 1, Type: Transfer (trRDN-B), Time: 20:18:49
{'AUC ROC': 0.963593, 'AUC PR': 0.954651, 'CLL': -0.289591, 'Precision': [0.926471, 0.5], 'Recall': 0.947368, 'F1': 0.936803, 'Learning time': 158.104, 'Inference time': 6.001, 'parameter_0.6': {'AUC ROC': 0.893606, 'AUC PR': 0.892659, 'CLL': -0.402062, 'Precision': [0.920455, 0.5], 'Recall': 0.609023, 'F1': 0.733032, 'Learning time': 16.289, 'Inference time': 6.266}}


Amount of data: 0.8
******************************************
Performing Parameter Learning
******************************************
Refine
0;;companyeconomicsector(A, B) :- acquired(C, A).;true;true
0;true;economicsectorcompany(B, C).;false;false
0;false;companyalsoknownas(A, D).;true;true
0;false,true;economicsectorcompany(B, D).;false;true
0;false,true,false;acquired(A, E), economicsectorcompany(B, E).;false;false
0;false,false;companyceo(A, F).;true;true
0;false,false,true;bankchiefexecutiveceo(G, F).;false;false
0;false,false,false;countryhascompanyoffice(H, A).;false;false
1;;companyeconomicsector(A, B) :- companyalsoknownas(A, C), acquired(A, D).;true;true
1;true;economicsectorcompany(B, D).;false;true
1;true,false;economicsectorcompany(B, C), countryhascompanyoffice(E, C).;false;false
1;false;acquired(A, F), cityhascompanyoffice(G, A).;true;true
1;false,true;cityhascompanyoffice(G, H), economicsectorcompany(B, H).;false;false
1;false,false;acquired(I, A).;true;true
1;false,false,true;economicsectorcompany(B, I).;false;false
1;false,false,false;companyalsoknownas(A, J).;false;false
2;;companyeconomicsector(A, B) :- acquired(A, C), economicsectorcompany(B, C).;false;true
2;false;acquired(A, D).;true;true
2;false,true;companyalsoknownas(A, E), economicsectorcompany(B, E).;true;true
2;false,true,true;countryhascompanyoffice(F, D).;false;false
2;false,true,false;companyalsoknownas(D, G), companyalsoknownas(A, G).;false;false
2;false,false;acquired(H, A), companyceo(H, I).;true;true
2;false,false,true;economicsectorcompany(B, H).;false;false
2;false,false,false;cityhascompanyoffice(J, A).;false;false
3;;companyeconomicsector(A, B) :- acquired(A, C), acquired(C, D).;true;false
3;true;economicsectorcompany(B, D).;true;true
3;true,true;companyceo(C, E).;false;false
3;true,false;cityhascompanyoffice(F, A), companyceo(A, G).;true;true
3;true,false,true;companyalsoknownas(A, H), economicsectorcompany(B, H).;false;false
3;true,false,false;acquired(D, I), economicsectorcompany(B, I).;false;false
4;;companyeconomicsector(A, B) :- acquired(C, A), economicsectorcompany(B, C).;false;true
4;false;acquired(D, A), companyceo(D, E).;true;true
4;false,true;acquired(F, D), companyalsoknownas(F, G).;true;true
4;false,true,true;acquired(A, H).;false;false
4;false,true,false;acquired(I, D), economicsectorcompany(B, I).;false;false
4;false,false;acquired(A, J), economicsectorcompany(B, J).;true;true
4;false,false,true;companyalsoknownas(A, K), acquired(J, L).;false;false
4;false,false,false;companyalsoknownas(A, M), economicsectorcompany(B, M).;false;false
5;;companyeconomicsector(A, B) :- companyalsoknownas(A, C), economicsectorcompany(B, C).;true;true
5;true;acquired(A, D), countryhascompanyoffice(E, D).;false;false
5;false;acquired(A, F), acquired(F, G).;true;true
5;false,true;economicsectorcompany(B, G).;false;true
5;false,true,false;countryhascompanyoffice(H, A), companyalsoknownas(A, I).;false;false
5;false,false;cityhascompanyoffice(J, A), countryhascompanyoffice(K, A).;true;true
5;false,false,true;countryhascompanyoffice(K, L), economicsectorcompany(B, L).;false;false
5;false,false,false;cityhascompanyoffice(M, A), acquired(N, A).;false;false
6;;companyeconomicsector(A, B) :- acquired(A, C), companyceo(C, D).;true;true
6;true;economicsectorcompany(B, C).;false;true
6;true,false;acquired(C, E).;false;false
6;false;companyalsoknownas(A, F), cityhascompanyoffice(G, F).;true;true
6;false,true;acquired(F, H), economicsectorcompany(B, H).;false;true
6;false,true,false;companyceo(A, I), acquired(F, J).;false;false
6;false,false;companyalsoknownas(A, K), acquired(K, L).;false;true
6;false,false,false;companyalsoknownas(A, M).;false;false
7;;companyeconomicsector(A, B) :- acquired(C, A), economicsectorcompany(B, C).;false;true
7;false;acquired(D, A), companyceo(D, E).;true;true
7;false,true;companyalsoknownas(D, F), acquired(G, F).;true;true
7;false,true,true;economicsectorcompany(B, G).;false;false
7;false,true,false;countryhascompanyoffice(H, D).;false;false
7;false,false;cityhascompanyoffice(I, A), acquired(J, A).;true;true
7;false,false,true;acquired(K, J).;false;false
7;false,false,false;companyceo(A, L).;false;false
8;;companyeconomicsector(A, B) :- cityhascompanyoffice(C, A).;true;true
8;true;cityhascompanyoffice(C, D), economicsectorcompany(B, D).;true;false
8;true,true;acquired(D, E), acquired(F, D).;false;true
8;true,true,false;companyalsoknownas(A, G), companyalsoknownas(D, G).;false;false
8;false;acquired(A, H), economicsectorcompany(B, H).;false;true
8;false,false;acquired(I, A), cityhascompanyoffice(J, I).;true;true
8;false,false,true;acquired(K, I), economicsectorcompany(B, K).;false;false
8;false,false,false;acquired(A, L).;false;false
9;;companyeconomicsector(A, B) :- cityhascompanyoffice(C, A).;true;true
9;true;cityhascompanyoffice(C, D), economicsectorcompany(B, D).;true;false
9;true,true;acquired(E, D), companyceo(D, F).;false;false
9;false;companyalsoknownas(A, G), cityhascompanyoffice(H, G).;true;true
9;false,true;economicsectorcompany(B, G).;false;true
9;false,true,false;acquired(I, G).;false;false
9;false,false;acquired(A, J), economicsectorcompany(B, J).;false;true
9;false,false,false;companyalsoknownas(A, K), economicsectorcompany(B, K).;false;false


WILL Produced-Tree #1
% FOR teamplayssport(A, B):
%   if ( teamplaysagainstteam(C, A) )
%   then if ( recursion_teamplayssport(C, B) )
%   | then return 0.7775037738091879;  // std dev = 3.032, 124.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=114 */
%   | else return -0.039488860176078215;  // std dev = 3.416, 127.000 (wgt'ed) examples reached here.  /* #neg=114 #pos=13 */
%   else if ( teamalsoknownas(D, A) )
%   | then if ( recursion_teamplayssport(D, B) )
%   | | then return 0.10814893509951219;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | else if ( teamplaysagainstteam(A, E), recursion_teamplayssport(E, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.35814893509951234;  // std dev = 2.915, 34.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=17 */
%   | else if ( teamplaysinleague(A, F) )
%   | | then return 0.3446354215859975;  // std dev = 0.500, 74.000 (wgt'ed) examples reached here.  /* #neg=38 #pos=36 */
%   | | else if ( athleteplaysforteam(G, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.3666235113706976;  // std dev = 3.840, 59.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=30 */
WILL Produced-Tree #2
% FOR teamplayssport(A, B):
%   if ( teamalsoknownas(C, A), teamplaysagainstteam(A, D) )
%   then if ( recursion_teamplayssport(D, B) )
%   | then return 0.6640299773560558;  // std dev = 0.964, 14.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=13 */
%   | else if ( recursion_teamplayssport(C, B), athleteplaysforteam(E, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.031862968379078316;  // std dev = 1.509, 17.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=3 */
%   else if ( teamplaysagainstteam(A, F), athleteledsportsteam(G, A) )
%   | then if ( athleteledsportsteam(G, H), recursion_teamplayssport(H, B) )
%   | | then return 0.7354585487846276;  // std dev = 0.000, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | | else return -0.1526519622034763;  // std dev = 0.267, 41.000 (wgt'ed) examples reached here.  /* #neg=41 */
%   | else if ( teamplaysagainstteam(I, A) )
%   | | then if ( recursion_teamplayssport(I, B) )
%   | | | then return 0.6676619386151361;  // std dev = 1.931, 59.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=55 */
%   | | | else return 0.009554911270398208;  // std dev = 3.064, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else if ( teamalsoknownas(J, A) )
%   | | | then return 0.2861860096856474;  // std dev = 3.068, 38.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=18 */
%   | | | else return 0.3055568653665755;  // std dev = 5.766, 133.000 (wgt'ed) examples reached here.  /* #neg=67 #pos=66 */
WILL Produced-Tree #3
% FOR teamplayssport(A, B):
%   if ( teamplaysagainstteam(A, C), recursion_teamplayssport(C, B) )
%   then return 0.519499010165341;  // std dev = 2.512, 111.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=103 */
%   else if ( teamplaysagainstteam(A, D) )
%   | then if ( teamalsoknownas(E, A), recursion_teamplayssport(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( teamalsoknownas(F, D), teamalsoknownas(F, A) )
%   | | | then return 0.001931839802389122;  // std dev = 0.926, 7.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=1 */
%   | | | else return -0.031153451900928133;  // std dev = 3.177, 115.000 (wgt'ed) examples reached here.  /* #neg=101 #pos=14 */
%   | else if ( teamplaysagainstteam(G, A), teamplaysinleague(G, H) )
%   | | then if ( recursion_teamplayssport(G, B) )
%   | | | then return 0.5877893881024088;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.1395316358525791;  // std dev = 1.900, 18.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=5 */
%   | | else if ( athleteledsportsteam(I, A) )
%   | | | then return 0.7594757931993401;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | | else return 0.246959838970602;  // std dev = 6.355, 162.000 (wgt'ed) examples reached here.  /* #neg=83 #pos=79 */
WILL Produced-Tree #4
% FOR teamplayssport(A, B):
%   if ( teamplaysagainstteam(A, C), teamplaysagainstteam(C, D) )
%   then if ( recursion_teamplayssport(D, B) )
%   | then if ( teamplaysinleague(C, E) )
%   | | then return 0.32764735603390627;  // std dev = 3.752, 141.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=110 */
%   | | else return 0.45922724999001224;  // std dev = 0.000736, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( athleteledsportsteam(F, A), teamplaysinleague(A, G) )
%   | | then if ( teamalsoknownas(H, A), recursion_teamplayssport(H, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.12073181695641258;  // std dev = 0.052, 35.000 (wgt'ed) examples reached here.  /* #neg=35 */
%   | | else if ( teamplaysagainstteam(D, I), recursion_teamplayssport(I, B) )
%   | | | then return 0.007906591047701075;  // std dev = 0.926, 7.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=1 */
%   | | | else return -0.09940830473706366;  // std dev = 1.140, 43.000 (wgt'ed) examples reached here.  /* #neg=41 #pos=2 */
%   else return 0.2063770162712872;  // std dev = 6.766, 193.000 (wgt'ed) examples reached here.  /* #neg=98 #pos=95 */
WILL Produced-Tree #5
% FOR teamplayssport(A, B):
%   if ( teamplaysagainstteam(C, A), recursion_teamplayssport(C, B) )
%   then return 0.3108960185049489;  // std dev = 2.716, 124.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=114 */
%   else if ( teamplaysagainstteam(D, A), teamplaysinleague(D, E) )
%   | then if ( teamplaysagainstteam(F, D), teamalsoknownas(G, F) )
%   | | then if ( teamplaysagainstteam(A, H) )
%   | | | then return -0.06232606382665713;  // std dev = 2.415, 100.000 (wgt'ed) examples reached here.  /* #neg=93 #pos=7 */
%   | | | else return -0.003002009900114531;  // std dev = 1.279, 11.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=2 */
%   | | else if ( teamplaysagainstteam(I, D), recursion_teamplayssport(I, B) )
%   | | | then return -0.1848201917182964;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | | else return 0.1397425206216665;  // std dev = 1.401, 10.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=3 */
%   | else if ( teamplaysagainstteam(A, J), recursion_teamplayssport(J, B) )
%   | | then if ( teamalsoknownas(K, A), teamplaysagainstteam(J, L) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.5750929759178284;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else if ( teamalsoknownas(M, A), recursion_teamplayssport(M, B) )
%   | | | then return -0.02841684328225251;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | else return 0.1589369777223628;  // std dev = 6.496, 171.000 (wgt'ed) examples reached here.  /* #neg=88 #pos=83 */
WILL Produced-Tree #6
% FOR teamplayssport(A, B):
%   if ( teamalsoknownas(C, A), recursion_teamplayssport(C, B) )
%   then if ( teamplaysagainstteam(A, D), athleteplaysforteam(E, D) )
%   | then return 0.2310834290634813;  // std dev = 0.959, 13.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   | else return 0.0038315083781872614;  // std dev = 0.947, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   else if ( teamplaysagainstteam(A, F), teamplaysagainstteam(F, G) )
%   | then if ( recursion_teamplayssport(G, B) )
%   | | then return 0.1985997999469818;  // std dev = 3.472, 131.000 (wgt'ed) examples reached here.  /* #neg=30 #pos=101 */
%   | | else if ( athleteplaysforteam(H, A), teamalsoknownas(I, A) )
%   | | | then return -0.12325043835396583;  // std dev = 0.025, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | | | else return -0.08081885992182188;  // std dev = 1.451, 75.000 (wgt'ed) examples reached here.  /* #neg=72 #pos=3 */
%   | else if ( athleteledsportsteam(J, A), athleteplaysforteam(K, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( athleteledsportsteam(L, A), teamplaysagainstteam(M, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.13385386284658232;  // std dev = 6.665, 187.000 (wgt'ed) examples reached here.  /* #neg=94 #pos=93 */
WILL Produced-Tree #7
% FOR teamplayssport(A, B):
%   if ( teamplaysagainstteam(A, C), teamplaysinleague(C, D) )
%   then if ( recursion_teamplayssport(C, B) )
%   | then return 0.1997543170238106;  // std dev = 2.522, 107.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=99 */
%   | else if ( teamplaysagainstteam(C, E) )
%   | | then return -0.04737149985752649;  // std dev = 2.816, 114.000 (wgt'ed) examples reached here.  /* #neg=101 #pos=13 */
%   | | else return 0.23010516219393512;  // std dev = 1.009, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   else if ( teamalsoknownas(F, A), athleteledsportsteam(G, F) )
%   | then if ( teamplaysagainstteam(F, H), recursion_teamplayssport(H, B) )
%   | | then return 0.5232163670377041;  // std dev = 0.287, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else if ( teamplaysinleague(A, I), teamplaysagainstteam(F, J) )
%   | | | then return -0.39902305887404427;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | | else return -0.20535203682192887;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( teamalsoknownas(K, A), teamplaysagainstteam(K, L) )
%   | | then return 0.10897681205668572;  // std dev = 0.680, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else if ( teamalsoknownas(M, A) )
%   | | | then return 0.07960377482606079;  // std dev = 3.008, 39.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=18 */
%   | | | else return 0.10149880546736115;  // std dev = 5.871, 150.000 (wgt'ed) examples reached here.  /* #neg=75 #pos=75 */
WILL Produced-Tree #8
% FOR teamplayssport(A, B):
%   if ( teamplaysagainstteam(C, A), recursion_teamplayssport(C, B) )
%   then return 0.16737434718108368;  // std dev = 2.761, 124.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=114 */
%   else if ( teamplaysagainstteam(D, A), teamplaysinleague(D, E) )
%   | then if ( teamalsoknownas(F, D), teamplaysagainstteam(G, F) )
%   | | then if ( recursion_teamplayssport(G, B) )
%   | | | then return 0.05044419327229317;  // std dev = 1.150, 8.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | | | else return -0.09747159634474363;  // std dev = 0.930, 57.000 (wgt'ed) examples reached here.  /* #neg=56 #pos=1 */
%   | | else if ( athleteplaysforteam(H, D) )
%   | | | then return 0.029112931468449267;  // std dev = 2.537, 51.000 (wgt'ed) examples reached here.  /* #neg=42 #pos=9 */
%   | | | else return -0.18116334397464703;  // std dev = 0.120, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else if ( athleteledsportsteam(I, A), teamplaysagainstteam(J, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( teamplaysinleague(A, K) )
%   | | | then return 0.07201341738010036;  // std dev = 4.976, 101.000 (wgt'ed) examples reached here.  /* #neg=52 #pos=49 */
%   | | | else return 0.06488406760322245;  // std dev = 4.244, 75.000 (wgt'ed) examples reached here.  /* #neg=39 #pos=36 */
WILL Produced-Tree #9
% FOR teamplayssport(A, B):
%   if ( athleteledsportsteam(C, A) )
%   then if ( athleteledsportsteam(C, D), recursion_teamplayssport(D, B) )
%   | then if ( teamplaysagainstteam(D, E), teamplaysagainstteam(F, D) )
%   | | then return 0.1927712249354132;  // std dev = 0.014, 51.000 (wgt'ed) examples reached here.  /* #pos=51 */
%   | | else if ( teamalsoknownas(G, A), teamalsoknownas(G, D) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.42987818765349317;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else return -0.16340197675824805;  // std dev = 1.261, 48.000 (wgt'ed) examples reached here.  /* #neg=48 */
%   else if ( teamplaysagainstteam(A, H), recursion_teamplayssport(H, B) )
%   | then return 0.15852163194872246;  // std dev = 1.763, 55.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=52 */
%   | else if ( teamplaysagainstteam(I, A), athleteledsportsteam(J, I) )
%   | | then if ( teamplaysagainstteam(K, I), recursion_teamplayssport(K, B) )
%   | | | then return 0.07229261210211867;  // std dev = 1.659, 20.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=9 */
%   | | | else return -0.023298101940946885;  // std dev = 1.744, 37.000 (wgt'ed) examples reached here.  /* #neg=33 #pos=4 */
%   | | else if ( teamplaysagainstteam(A, L) )
%   | | | then return 0.043167846726619594;  // std dev = 2.218, 33.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=8 */
%   | | | else return 0.050208616827339375;  // std dev = 6.463, 177.000 (wgt'ed) examples reached here.  /* #neg=91 #pos=86 */
WILL Produced-Tree #10
% FOR teamplayssport(A, B):
%   if ( athleteledsportsteam(C, A) )
%   then if ( athleteledsportsteam(C, D), recursion_teamplayssport(D, B) )
%   | then if ( teamplaysagainstteam(E, D), teamplaysinleague(D, F) )
%   | | then return 0.16454709745708146;  // std dev = 0.012, 50.000 (wgt'ed) examples reached here.  /* #pos=50 */
%   | | else return 0.24650267540128112;  // std dev = 0.117, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | else return -0.14717730847129382;  // std dev = 1.207, 48.000 (wgt'ed) examples reached here.  /* #neg=48 */
%   else if ( teamalsoknownas(G, A), athleteledsportsteam(H, G) )
%   | then if ( recursion_teamplayssport(G, B) )
%   | | then return 0.17643098225934073;  // std dev = 0.008, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( teamplaysagainstteam(I, G) )
%   | | | then return -0.04191484073883422;  // std dev = 0.772, 8.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( teamplaysagainstteam(A, J), recursion_teamplayssport(J, B) )
%   | | then return 0.13044353859654934;  // std dev = 1.757, 51.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=48 */
%   | | else if ( teamalsoknownas(K, A), recursion_teamplayssport(K, B) )
%   | | | then return -0.29643887835331595;  // std dev = 0.071, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | | else return 0.03884147017002832;  // std dev = 7.176, 255.000 (wgt'ed) examples reached here.  /* #neg=150 #pos=105 */


Results
   AUC ROC   = 0.896489
   AUC PR    = 0.902844
   CLL	      = -0.406066
   Precision = 0.920455 at threshold = 0.5
   Recall    = 0.609023
   F1        = 0.733032


Total learning time: 17.749 seconds
Total inference time: 4.867 seconds
AUC ROC: 0.896489


Results scoring model
   AUC ROC   = 0.874868
   AUC PR    = 0.885618
   CLL	      = -0.435413
   Precision = 0.928 at threshold = 0.5
   Recall    = 0.549763
   F1        = 0.690476


Total scoring time: 5.683 seconds
Parameter learned model CLL: -0.435413


Structure after Parameter Learning
[['teamplayssport(A, B)', {'': 'teamplaysagainstteam(C, A)', 'true': 'recursion_teamplayssport(C, B)', 'false': 'teamalsoknownas(D, A)', 'false,true': 'recursion_teamplayssport(D, B)', 'false,true,false': 'teamplaysagainstteam(A, E), recursion_teamplayssport(E, B)', 'false,false': 'teamplaysinleague(A, F)', 'false,false,false': 'athleteplaysforteam(G, A)'}, {'true,true': [3.032, 10, 114], 'true,false': [3.416, 114, 13], 'false,true,true': [0.866, 3, 1], 'false,true,false,true': [0.0, 0, 0], 'false,true,false,false': [2.915, 17, 17], 'false,false,true': [0.5, 38, 36], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [3.84, 29, 30]}], ['teamplayssport(A, B)', {'': 'teamalsoknownas(C, A), teamplaysagainstteam(A, D)', 'true': 'recursion_teamplayssport(D, B)', 'true,false': 'recursion_teamplayssport(C, B), athleteplaysforteam(E, C)', 'false': 'teamplaysagainstteam(A, F), athleteledsportsteam(G, A)', 'false,true': 'athleteledsportsteam(G, H), recursion_teamplayssport(H, B)', 'false,false': 'teamplaysagainstteam(I, A)', 'false,false,true': 'recursion_teamplayssport(I, B)', 'false,false,false': 'teamalsoknownas(J, A)'}, {'true,true': [0.964, 1, 13], 'true,false,true': [0.0, 0, 0], 'true,false,false': [1.509, 14, 3], 'false,true,true': [0.0, 0, 45], 'false,true,false': [0.267, 41, 0], 'false,false,true,true': [1.931, 4, 55], 'false,false,true,false': [3.064, 64, 11], 'false,false,false,true': [3.068, 20, 18], 'false,false,false,false': [5.766, 67, 66]}], ['teamplayssport(A, B)', {'': 'teamplaysagainstteam(A, C), recursion_teamplayssport(C, B)', 'false': 'teamplaysagainstteam(A, D)', 'false,true': 'teamalsoknownas(E, A), recursion_teamplayssport(E, B)', 'false,true,false': 'teamalsoknownas(F, D), teamalsoknownas(F, A)', 'false,false': 'teamplaysagainstteam(G, A), teamplaysinleague(G, H)', 'false,false,true': 'recursion_teamplayssport(G, B)', 'false,false,false': 'athleteledsportsteam(I, A)'}, {'true': [2.512, 8, 103], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [0.926, 6, 1], 'false,true,false,false': [3.177, 101, 14], 'false,false,true,true': [0.0, 0, 8], 'false,false,true,false': [1.9, 13, 5], 'false,false,false,true': [0.0, 0, 1], 'false,false,false,false': [6.355, 83, 79]}], ['teamplayssport(A, B)', {'': 'teamplaysagainstteam(A, C), teamplaysagainstteam(C, D)', 'true': 'recursion_teamplayssport(D, B)', 'true,true': 'teamplaysinleague(C, E)', 'true,false': 'athleteledsportsteam(F, A), teamplaysinleague(A, G)', 'true,false,true': 'teamalsoknownas(H, A), recursion_teamplayssport(H, B)', 'true,false,false': 'teamplaysagainstteam(D, I), recursion_teamplayssport(I, B)'}, {'true,true,true': [3.752, 31, 110], 'true,true,false': [0.000736, 0, 3], 'true,false,true,true': [0.0, 0, 0], 'true,false,true,false': [0.052, 35, 0], 'true,false,false,true': [0.926, 6, 1], 'true,false,false,false': [1.14, 41, 2], 'false': [6.766, 98, 95]}], ['teamplayssport(A, B)', {'': 'teamplaysagainstteam(C, A), recursion_teamplayssport(C, B)', 'false': 'teamplaysagainstteam(D, A), teamplaysinleague(D, E)', 'false,true': 'teamplaysagainstteam(F, D), teamalsoknownas(G, F)', 'false,true,true': 'teamplaysagainstteam(A, H)', 'false,true,false': 'teamplaysagainstteam(I, D), recursion_teamplayssport(I, B)', 'false,false': 'teamplaysagainstteam(A, J), recursion_teamplayssport(J, B)', 'false,false,true': 'teamalsoknownas(K, A), teamplaysagainstteam(J, L)', 'false,false,false': 'teamalsoknownas(M, A), recursion_teamplayssport(M, B)'}, {'true': [2.716, 10, 114], 'false,true,true,true': [2.415, 93, 7], 'false,true,true,false': [1.279, 9, 2], 'false,true,false,true': [0.0, 1, 0], 'false,true,false,false': [1.401, 7, 3], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [0.0, 0, 1], 'false,false,false,true': [0.866, 3, 1], 'false,false,false,false': [6.496, 88, 83]}], ['teamplayssport(A, B)', {'': 'teamalsoknownas(C, A), recursion_teamplayssport(C, B)', 'true': 'teamplaysagainstteam(A, D), athleteplaysforteam(E, D)', 'false': 'teamplaysagainstteam(A, F), teamplaysagainstteam(F, G)', 'false,true': 'recursion_teamplayssport(G, B)', 'false,true,false': 'athleteplaysforteam(H, A), teamalsoknownas(I, A)', 'false,false': 'athleteledsportsteam(J, A), athleteplaysforteam(K, A)', 'false,false,false': 'athleteledsportsteam(L, A), teamplaysagainstteam(M, A)'}, {'true,true': [0.959, 1, 12], 'true,false': [0.947, 4, 2], 'false,true,true': [3.472, 30, 101], 'false,true,false,true': [0.025, 10, 0], 'false,true,false,false': [1.451, 72, 3], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [6.665, 94, 93]}], ['teamplayssport(A, B)', {'': 'teamplaysagainstteam(A, C), teamplaysinleague(C, D)', 'true': 'recursion_teamplayssport(C, B)', 'true,false': 'teamplaysagainstteam(C, E)', 'false': 'teamalsoknownas(F, A), athleteledsportsteam(G, F)', 'false,true': 'teamplaysagainstteam(F, H), recursion_teamplayssport(H, B)', 'false,true,false': 'teamplaysinleague(A, I), teamplaysagainstteam(F, J)', 'false,false': 'teamalsoknownas(K, A), teamplaysagainstteam(K, L)', 'false,false,false': 'teamalsoknownas(M, A)'}, {'true,true': [2.522, 8, 99], 'true,false,true': [2.816, 101, 13], 'true,false,false': [1.009, 2, 2], 'false,true,true': [0.287, 0, 2], 'false,true,false,true': [0.0, 1, 0], 'false,true,false,false': [0.0, 1, 0], 'false,false,true': [0.68, 2, 2], 'false,false,false,true': [3.008, 21, 18], 'false,false,false,false': [5.871, 75, 75]}], ['teamplayssport(A, B)', {'': 'teamplaysagainstteam(C, A), recursion_teamplayssport(C, B)', 'false': 'teamplaysagainstteam(D, A), teamplaysinleague(D, E)', 'false,true': 'teamalsoknownas(F, D), teamplaysagainstteam(G, F)', 'false,true,true': 'recursion_teamplayssport(G, B)', 'false,true,false': 'athleteplaysforteam(H, D)', 'false,false': 'athleteledsportsteam(I, A), teamplaysagainstteam(J, A)', 'false,false,false': 'teamplaysinleague(A, K)'}, {'true': [2.761, 10, 114], 'false,true,true,true': [1.15, 6, 2], 'false,true,true,false': [0.93, 56, 1], 'false,true,false,true': [2.537, 42, 9], 'false,true,false,false': [0.12, 6, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [4.976, 52, 49], 'false,false,false,false': [4.244, 39, 36]}], ['teamplayssport(A, B)', {'': 'athleteledsportsteam(C, A)', 'true': 'athleteledsportsteam(C, D), recursion_teamplayssport(D, B)', 'true,true': 'teamplaysagainstteam(D, E), teamplaysagainstteam(F, D)', 'true,true,false': 'teamalsoknownas(G, A), teamalsoknownas(G, D)', 'false': 'teamplaysagainstteam(A, H), recursion_teamplayssport(H, B)', 'false,false': 'teamplaysagainstteam(I, A), athleteledsportsteam(J, I)', 'false,false,true': 'teamplaysagainstteam(K, I), recursion_teamplayssport(K, B)', 'false,false,false': 'teamplaysagainstteam(A, L)'}, {'true,true,true': [0.014, 0, 51], 'true,true,false,true': [0.0, 0, 0], 'true,true,false,false': [0.0, 0, 1], 'true,false': [1.261, 48, 0], 'false,true': [1.763, 3, 52], 'false,false,true,true': [1.659, 11, 9], 'false,false,true,false': [1.744, 33, 4], 'false,false,false,true': [2.218, 25, 8], 'false,false,false,false': [6.463, 91, 86]}], ['teamplayssport(A, B)', {'': 'athleteledsportsteam(C, A)', 'true': 'athleteledsportsteam(C, D), recursion_teamplayssport(D, B)', 'true,true': 'teamplaysagainstteam(E, D), teamplaysinleague(D, F)', 'false': 'teamalsoknownas(G, A), athleteledsportsteam(H, G)', 'false,true': 'recursion_teamplayssport(G, B)', 'false,true,false': 'teamplaysagainstteam(I, G)', 'false,false': 'teamplaysagainstteam(A, J), recursion_teamplayssport(J, B)', 'false,false,false': 'teamalsoknownas(K, A), recursion_teamplayssport(K, B)'}, {'true,true,true': [0.012, 0, 50], 'true,true,false': [0.117, 0, 2], 'true,false': [1.207, 48, 0], 'false,true,true': [0.008, 0, 4], 'false,true,false,true': [0.772, 6, 2], 'false,true,false,false': [0.0, 0, 0], 'false,false,true': [1.757, 3, 48], 'false,false,false,true': [0.071, 4, 0], 'false,false,false,false': [7.176, 150, 105]}]]
[{'': [0.24996428628117381, 0.24992305324715425], 'true': [0.07414151925078395, 0.09188418376836698], 'false': [0.24930747922437624, 0.24998586692294614], 'false,false': [0.24981738495252173, 0.24992818155702537], 'false,false,false': [nan, 0.24992818155702537], 'false,true': [0.18750000000000003, 0.24999999999999953], 'false,true,false': [nan, 0.24999999999999953]}, {'': [0.20234596939912575, 0.22273288495226676], 'false': [0.19758744927310615, 0.2297931988663719], 'false,false': [0.20460923108191106, 0.24952636110476023], 'false,false,false': [0.2477452891953628, 0.24995185433764688], 'false,false,true': [0.06320022981901706, 0.125155555555556], 'true': [0.06632653061224504, 0.13388159776847708], 'false,true': [-3.9474596431116675e-16, 0.0017387857987977043], 'true,false': [nan, 0.13388159776847708]}, {'': [0.056859750264653224, 0.20030254241781958], 'false': [0.08981353012574504, 0.24017883317253624], 'false,false': [0.1816916134348921, 0.24940515788402004], 'false,false,false': [0.0, 0.2493332075316069], 'false,false,true': [-5.551115123125783e-17, 0.2006172839506173], 'false,true': [nan, 0.08981353012574518], 'false,true,false': [0.12244897959183669, 0.08776421749222031]}, {'': [0.11464998278348998, 0.23722136928832543], 'true': [0.09810912911810507, 0.02654398159927985], 'true,true': [0.09983586045680011, 1.8079955369879977e-07], 'true,false': [7.612637422398055e-05, 0.04452747819953017], 'true,false,false': [0.12255673256114373, 0.030212733282967013], 'true,false,true': [nan, 7.612637422399006e-05]}, {'': [0.05948143417117578, 0.1877056486498376], 'false': [0.0806593872654693, 0.2457832751241], 'false,false': [0.0, 0.2461833849364018], 'false,false,false': [0.1875, 0.24675377674097554], 'false,true': [0.06761210881257936, 0.18703983021623127], 'false,true,false': [0.0, 0.1961673628522659], 'false,true,true': [0.05833704066051525, 0.14876033057851248], 'false,false,true': [nan, 0.0]}, {'': [0.10680032807642158, 0.1563046445432294], 'false': [0.08492307250147385, 0.23756327741820352], 'false,false': [nan, 0.23756327741820352], 'false,false,false': [nan, 0.23756327741820352], 'true': [0.07073475909060348, 0.14960741205883368], 'false,true': [0.09200535707071063, 0.024950101906713287], 'false,true,false': [6.351679295434897e-05, 0.028056496920127176]}, {'': [0.0834565778974671, 0.22727946905476037], 'false': [0.1956726393011719, 0.22793094930353897], 'false,false': [0.11552427581518095, 0.2303069440392577], 'false,false,false': [0.23193901029217442, 0.22978368457908369], 'false,true': [0.04132235105235377, 0.009377116195677743], 'true': [0.05944972780724727, 0.07835151596898234], 'true,false': [0.0695661336177473, 0.2543515573004799], 'false,true,false': [0.0, 0.0]}, {'': [0.06147820226378848, 0.17744365927622774], 'false': [0.07586494942816342, 0.24308566087450423], 'false,false': [nan, 0.24308566087450426], 'false,false,false': [0.24520102719674633, 0.24020779943298123], 'false,true': [0.03599328843369858, 0.11736964263662109], 'false,true,false': [0.12624297829293668, 0.002384505124162259], 'false,true,true': [0.1652297292496809, 0.015162030653041886]}, {'': [0.0489465728799132, 0.17520672731812523], 'false': [0.05651545158754836, 0.19728938002711716], 'false,false': [0.10373213043402423, 0.2223611146188299], 'false,false,false': [0.1490419402900606, 0.2360230012331758], 'false,false,true': [0.13761205833263246, 0.08221248585519629], 'true': [0.0010641647084656065, 0.033152485533728036], 'true,true': [3.882379883832167e-06, 0.0], 'true,true,false': [nan, 0.0]}, {'': [0.03959466145983522, 0.17440107162310467], 'false': [0.06025816384470445, 0.17880644947269442], 'false,false': [0.060500353834160595, 0.20056132113106998], 'false,false,false': [0.0012761607612013087, 0.2019512561116913], 'false,true': [1.5244070085802808e-05, 0.07448799092509698], 'false,true,false': [0.07448799092509698, nan], 'true': [0.0005138096279801141, 0.0303756873545338], 'true,true': [3.087210265220186e-06, 0.006823488574537219]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
1;;teamplayssport(A, B) :- teamalsoknownas(C, A), teamplaysagainstteam(A, D).;true;true
1;false;teamplaysagainstteam(A, F), athleteledsportsteam(G, A).;true;true
1;false,true;athleteledsportsteam(G, H), recursion_teamplayssport(H, B).;true;true
2;;teamplayssport(A, B) :- teamplaysagainstteam(A, C), recursion_teamplayssport(C, B).;true;true
2;false;teamplaysagainstteam(A, D).;true;true
2;false,false;teamplaysagainstteam(G, A), teamplaysinleague(G, H).;true;true
2;false,false,true;recursion_teamplayssport(G, B).;true;true
2;false,false,false;athleteledsportsteam(I, A).;true;true
3;;teamplayssport(A, B) :- teamplaysagainstteam(A, C), teamplaysagainstteam(C, D).;true;true
3;true;recursion_teamplayssport(D, B).;true;true
3;true,true;teamplaysinleague(C, E).;true;true
3;true,false;athleteledsportsteam(F, A), teamplaysinleague(A, G).;true;true
4;;teamplayssport(A, B) :- teamplaysagainstteam(C, A), recursion_teamplayssport(C, B).;true;true
4;false;teamplaysagainstteam(D, A), teamplaysinleague(D, E).;true;true
4;false,true;teamplaysagainstteam(F, D), teamalsoknownas(G, F).;true;true
4;false,true,false;teamplaysagainstteam(I, D), recursion_teamplayssport(I, B).;true;true
4;false,false;teamplaysagainstteam(A, J), recursion_teamplayssport(J, B).;true;true
5;;teamplayssport(A, B) :- teamalsoknownas(C, A), recursion_teamplayssport(C, B).;true;true
5;false;teamplaysagainstteam(A, F), teamplaysagainstteam(F, G).;true;true
5;false,true;recursion_teamplayssport(G, B).;true;true
5;false,true,false;athleteplaysforteam(H, A), teamalsoknownas(I, A).;true;true
6;;teamplayssport(A, B) :- teamplaysagainstteam(A, C), teamplaysinleague(C, D).;true;true
6;false;teamalsoknownas(F, A), athleteledsportsteam(G, F).;true;true
6;false,true;teamplaysagainstteam(F, H), recursion_teamplayssport(H, B).;true;true
6;false,true,false;teamplaysinleague(A, I), teamplaysagainstteam(F, J).;true;true
7;;teamplayssport(A, B) :- teamplaysagainstteam(C, A), recursion_teamplayssport(C, B).;true;true
7;false;teamplaysagainstteam(D, A), teamplaysinleague(D, E).;true;true
7;false,true;teamalsoknownas(F, D), teamplaysagainstteam(G, F).;true;true
7;false,true,false;athleteplaysforteam(H, D).;true;true
8;;teamplayssport(A, B) :- athleteledsportsteam(C, A).;true;true
8;true;athleteledsportsteam(C, D), recursion_teamplayssport(D, B).;true;true
8;true,true;teamplaysagainstteam(D, E), teamplaysagainstteam(F, D).;true;true
9;;teamplayssport(A, B) :- athleteledsportsteam(C, A).;true;true
9;true;athleteledsportsteam(C, D), recursion_teamplayssport(D, B).;true;true
9;true,true;teamplaysagainstteam(E, D), teamplaysinleague(D, F).;true;true
9;false;teamalsoknownas(G, A), athleteledsportsteam(H, G).;true;true
9;false,true;recursion_teamplayssport(G, B).;true;true
9;false,false;teamplaysagainstteam(A, J), recursion_teamplayssport(J, B).;true;true
9;false,false,false;teamalsoknownas(K, A), recursion_teamplayssport(K, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR teamplayssport(A, B):
%   if ( athleteplayssport(C, B), athleteledsportsteam(C, D) )
%   then if ( teamplaysinleague(A, E), athleteplaysinleague(C, E) )
%   | then if ( teamplaysagainstteam(F, A), recursion_teamplayssport(F, B) )
%   | | then return 0.8581489350995125;  // std dev = 0.000, 78.000 (wgt'ed) examples reached here.  /* #pos=78 */
%   | | else if ( athleteplaysforteam(G, A), athleteplaysinleague(G, E) )
%   | | | then return -0.14185106490048777;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | | else return 0.8581489350995123;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else if ( teamplaysinleague(A, H), athleteplaysinleague(I, H) )
%   | | then if ( athleteplayssport(I, J), recursion_teamplayssport(A, J) )
%   | | | then return -0.14185106490048777;  // std dev = 0.000, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
%   | | | else return 0.5581489350995122;  // std dev = 2.510, 30.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=21 */
%   | | else if ( athleteplaysforteam(C, D), teamalsoknownas(D, K) )
%   | | | then return 0.34905802600860214;  // std dev = 3.707, 55.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=27 */
%   | | | else return 0.8112739350995126;  // std dev = 1.691, 64.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=61 */
%   else if ( teamplaysagainstteam(L, A), recursion_teamplayssport(L, B) )
%   | then return 0.8581489350995123;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else return -0.10895632805838243;  // std dev = 0.178, 152.000 (wgt'ed) examples reached here.  /* #neg=147 #pos=5 */
WILL Produced-Tree #2
% FOR teamplayssport(A, B):
%   if ( teamalsoknownas(C, A), teamplaysagainstteam(A, D) )
%   then if ( teamplaysagainstteam(E, A), recursion_teamplayssport(E, B) )
%   | then return 0.6850403750149174;  // std dev = 0.220, 15.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=14 */
%   | else if ( teamalsoknownas(F, A), teamplaysagainstteam(F, G) )
%   | | then return -0.12879368948468717;  // std dev = 0.003, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else return 0.3471479021398302;  // std dev = 0.955, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   else if ( teamplaysagainstteam(A, H), athleteledsportsteam(I, A) )
%   | then if ( athleteledsportsteam(I, J), recursion_teamplayssport(J, B) )
%   | | then return 0.7232342550333524;  // std dev = 0.094, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | | else return -0.13284196554642713;  // std dev = 0.133, 41.000 (wgt'ed) examples reached here.  /* #neg=41 */
%   | else if ( athleteplayssport(K, B), athleteledsportsteam(K, L) )
%   | | then if ( teamplaysagainstteam(M, A), recursion_teamplayssport(M, B) )
%   | | | then return 0.6730386336501094;  // std dev = 1.789, 54.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=50 */
%   | | | else return 0.43465596329647843;  // std dev = 5.169, 137.000 (wgt'ed) examples reached here.  /* #neg=46 #pos=91 */
%   | | else if ( athleteplayssport(N, B), athleteplaysinleague(N, P) )
%   | | | then return 0.15466811517235113;  // std dev = 1.957, 22.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=7 */
%   | | | else return -0.10735901822774965;  // std dev = 1.399, 92.000 (wgt'ed) examples reached here.  /* #neg=90 #pos=2 */
WILL Produced-Tree #3
% FOR teamplayssport(A, B):
%   if ( teamplaysagainstteam(A, C), recursion_teamplayssport(C, B) )
%   then if ( teamplaysagainstteam(D, A), teamalsoknownas(D, E) )
%   | then return 0.4955464930298952;  // std dev = 0.245, 80.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=72 */
%   | else return 0.5871945101705655;  // std dev = 0.250, 31.000 (wgt'ed) examples reached here.  /* #pos=31 */
%   else if ( teamplaysagainstteam(A, F) )
%   | then if ( teamplaysinleague(A, G), teamplaysagainstteam(H, A) )
%   | | then return -0.09361310190740883;  // std dev = 0.161, 93.000 (wgt'ed) examples reached here.  /* #neg=89 #pos=4 */
%   | | else if ( athleteplayssport(I, B), athleteplaysinleague(I, J) )
%   | | | then return 0.2172410710360757;  // std dev = 2.104, 20.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=10 */
%   | | | else return -0.018563758036007145;  // std dev = 0.898, 9.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=1 */
%   | else if ( teamplaysagainstteam(K, A), teamplaysinleague(K, L) )
%   | | then if ( recursion_teamplayssport(K, B) )
%   | | | then return 0.6371588912246987;  // std dev = 0.152, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.0621883842138934;  // std dev = 1.662, 18.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=5 */
%   | | else if ( athleteledsportsteam(M, A) )
%   | | | then return 0.6241487109753747;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | | else return 0.23918856352084206;  // std dev = 5.344, 162.000 (wgt'ed) examples reached here.  /* #neg=83 #pos=79 */
WILL Produced-Tree #4
% FOR teamplayssport(A, B):
%   if ( teamplaysagainstteam(A, C), teamplaysagainstteam(C, D) )
%   then if ( recursion_teamplayssport(D, B) )
%   | then if ( teamplaysinleague(C, E) )
%   | | then if ( teamplaysagainstteam(F, A), recursion_teamplayssport(F, B) )
%   | | | then return 0.3879665924954962;  // std dev = 2.323, 112.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=102 */
%   | | | else return 0.05597694765790793;  // std dev = 1.981, 29.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=8 */
%   | | else return 0.5209419229677275;  // std dev = 0.100, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return -0.09340215740012024;  // std dev = 0.154, 85.000 (wgt'ed) examples reached here.  /* #neg=82 #pos=3 */
%   else if ( athleteplayssport(G, B), athleteledsportsteam(G, H) )
%   | then if ( athleteplaysforteam(G, H), teamalsoknownas(H, I) )
%   | | then if ( athleteledsportsteam(J, H), athleteplaysforteam(J, I) )
%   | | | then return -0.20779227412278528;  // std dev = 0.799, 9.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=1 */
%   | | | else return 0.20991765935510276;  // std dev = 3.176, 44.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=24 */
%   | | else return 0.5370751685170467;  // std dev = 0.199, 67.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=64 */
%   | else if ( athleteplayssport(K, B), teamplaysagainstteam(L, A) )
%   | | then return 0.12004892247019623;  // std dev = 0.323, 8.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=3 */
%   | | else return -0.103567865914368;  // std dev = 0.209, 65.000 (wgt'ed) examples reached here.  /* #neg=62 #pos=3 */
WILL Produced-Tree #5
% FOR teamplayssport(A, B):
%   if ( teamplaysagainstteam(C, A), recursion_teamplayssport(C, B) )
%   then if ( teamplaysagainstteam(A, D), athleteledsportsteam(E, D) )
%   | then return 0.28528183355597864;  // std dev = 0.226, 99.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=89 */
%   | else return 0.4088950951697798;  // std dev = 0.084, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   else if ( teamplaysagainstteam(F, A), teamplaysinleague(F, G) )
%   | then if ( teamplaysagainstteam(H, F), teamalsoknownas(I, H) )
%   | | then if ( teamplaysagainstteam(A, J), athleteledsportsteam(K, J) )
%   | | | then return -0.09884037554174666;  // std dev = 1.033, 78.000 (wgt'ed) examples reached here.  /* #neg=76 #pos=2 */
%   | | | else return 0.022873627242920545;  // std dev = 2.034, 33.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=7 */
%   | | else if ( teamplaysagainstteam(L, F), recursion_teamplayssport(L, B) )
%   | | | then return -0.3220907771107838;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | | else return 0.061082250835203945;  // std dev = 1.208, 10.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=3 */
%   | else if ( teamplaysagainstteam(A, M), recursion_teamplayssport(M, B) )
%   | | then return 0.46605819228594103;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else if ( athleteplayssport(N, B), athleteledsportsteam(N, P) )
%   | | | then return 0.27611732789603827;  // std dev = 3.896, 109.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=81 */
%   | | | else return -0.09099379522795707;  // std dev = 1.684, 66.000 (wgt'ed) examples reached here.  /* #neg=63 #pos=3 */
WILL Produced-Tree #6
% FOR teamplayssport(A, B):
%   if ( teamalsoknownas(C, A), recursion_teamplayssport(C, B) )
%   then if ( teamalsoknownas(D, A), athleteledsportsteam(E, D) )
%   | then if ( teamalsoknownas(A, F), recursion_teamplayssport(D, B) )
%   | | then return 0.03172589907516878;  // std dev = 0.624, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return 0.4275320048315807;  // std dev = 0.185, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else if ( teamplaysagainstteam(A, G) )
%   | | then return 0.2766977894805116;  // std dev = 0.044, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return -0.22873859076682507;  // std dev = 0.231, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   else if ( teamplaysagainstteam(A, H), teamplaysagainstteam(H, I) )
%   | then if ( recursion_teamplayssport(I, B) )
%   | | then return 0.1913001887298963;  // std dev = 0.264, 131.000 (wgt'ed) examples reached here.  /* #neg=30 #pos=101 */
%   | | else return -0.08038215823696564;  // std dev = 0.146, 85.000 (wgt'ed) examples reached here.  /* #neg=82 #pos=3 */
%   | else if ( athleteplayssport(J, B), athleteledsportsteam(J, K) )
%   | | then if ( athleteplaysforteam(J, K), teamalsoknownas(K, L) )
%   | | | then return 0.051160787923066775;  // std dev = 3.319, 51.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=24 */
%   | | | else return 0.3388256867426439;  // std dev = 1.605, 67.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=64 */
%   | | else return -0.07460644658714254;  // std dev = 0.197, 69.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=5 */
WILL Produced-Tree #7
% FOR teamplayssport(A, B):
%   if ( teamplaysagainstteam(A, C), teamplaysinleague(C, D) )
%   then if ( teamplaysagainstteam(A, E), recursion_teamplayssport(E, B) )
%   | then return 0.19654395058185817;  // std dev = 0.205, 108.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=100 */
%   | else if ( teamplaysinleague(A, F), teamplaysagainstteam(G, A) )
%   | | then return -0.08108461054616493;  // std dev = 0.141, 93.000 (wgt'ed) examples reached here.  /* #neg=89 #pos=4 */
%   | | else if ( teamalsoknownas(A, H) )
%   | | | then return 0.2230873985699594;  // std dev = 1.315, 8.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=4 */
%   | | | else return 0.021252061721865313;  // std dev = 1.458, 16.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=6 */
%   else if ( teamalsoknownas(I, A), athleteledsportsteam(J, I) )
%   | then if ( teamplaysagainstteam(I, K), recursion_teamplayssport(K, B) )
%   | | then return 0.581601340056916;  // std dev = 0.285, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return -0.1230750742880466;  // std dev = 0.009, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else if ( athleteplayssport(L, B), athleteledsportsteam(L, M) )
%   | | then if ( athleteplaysforteam(L, M), teamalsoknownas(M, N) )
%   | | | then return 0.04190329087591099;  // std dev = 3.298, 51.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=24 */
%   | | | else return 0.2627840004560656;  // std dev = 1.612, 66.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=63 */
%   | | else return -0.05626539898219476;  // std dev = 0.200, 76.000 (wgt'ed) examples reached here.  /* #neg=68 #pos=8 */
WILL Produced-Tree #8
% FOR teamplayssport(A, B):
%   if ( teamplaysagainstteam(C, A), recursion_teamplayssport(C, B) )
%   then if ( teamplaysagainstteam(A, D), teamalsoknownas(D, E) )
%   | then if ( recursion_teamplayssport(E, B), recursion_teamplayssport(D, B) )
%   | | then return 0.19212980279804376;  // std dev = 0.139, 61.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=59 */
%   | | else return 0.007717261911346145;  // std dev = 0.366, 24.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=16 */
%   | else return 0.24111511339618233;  // std dev = 0.086, 39.000 (wgt'ed) examples reached here.  /* #pos=39 */
%   else if ( teamplaysagainstteam(F, A), teamplaysinleague(F, G) )
%   | then if ( teamalsoknownas(H, F), teamplaysagainstteam(I, H) )
%   | | then return -0.0762579240312221;  // std dev = 0.169, 65.000 (wgt'ed) examples reached here.  /* #neg=62 #pos=3 */
%   | | else if ( athleteplaysforteam(J, F) )
%   | | | then return -0.005938127797939602;  // std dev = 2.117, 51.000 (wgt'ed) examples reached here.  /* #neg=42 #pos=9 */
%   | | | else return -0.13981787609459648;  // std dev = 0.210, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else if ( athleteplayssport(K, B), athleteplaysforteam(K, L) )
%   | | then if ( teamalsoknownas(L, M), teamalsoknownas(M, N) )
%   | | | then return -0.024554314770677363;  // std dev = 3.092, 45.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=19 */
%   | | | else return 0.15924579511784578;  // std dev = 2.120, 87.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=64 */
%   | | else return -0.07407425403513904;  // std dev = 0.188, 44.000 (wgt'ed) examples reached here.  /* #neg=42 #pos=2 */
WILL Produced-Tree #9
% FOR teamplayssport(A, B):
%   if ( athleteledsportsteam(C, A) )
%   then if ( athleteledsportsteam(C, D), recursion_teamplayssport(D, B) )
%   | then return 0.17913489132341204;  // std dev = 0.025, 52.000 (wgt'ed) examples reached here.  /* #pos=52 */
%   | else return -0.12321869730085243;  // std dev = 0.132, 48.000 (wgt'ed) examples reached here.  /* #neg=48 */
%   else if ( athleteplayssport(E, B), athleteplaysinleague(E, F) )
%   | then if ( teamplaysagainstteam(G, A), recursion_teamplayssport(G, B) )
%   | | then if ( athleteledsportsteam(H, G), athleteplayssport(H, I) )
%   | | | then return 0.11395310221717972;  // std dev = 1.561, 38.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=34 */
%   | | | else return 0.24114765098839364;  // std dev = 0.459, 29.000 (wgt'ed) examples reached here.  /* #pos=29 */
%   | | else if ( athleteledsportsteam(E, J) )
%   | | | then return 0.09523656503406039;  // std dev = 4.239, 138.000 (wgt'ed) examples reached here.  /* #neg=47 #pos=91 */
%   | | | else return -0.03023499068675191;  // std dev = 1.173, 18.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=2 */
%   | else if ( teamalsoknownas(K, A), teamalsoknownas(A, K) )
%   | | then if ( teamalsoknownas(L, K), recursion_teamplayssport(L, B) )
%   | | | then return 0.2495646162234566;  // std dev = 1.030, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | | else return -0.11790492342933366;  // std dev = 0.074, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | else return -0.08724922227337692;  // std dev = 0.108, 86.000 (wgt'ed) examples reached here.  /* #neg=85 #pos=1 */
WILL Produced-Tree #10
% FOR teamplayssport(A, B):
%   if ( athleteledsportsteam(C, A) )
%   then if ( athleteledsportsteam(C, D), recursion_teamplayssport(D, B) )
%   | then return 0.1543828544779345;  // std dev = 0.022, 52.000 (wgt'ed) examples reached here.  /* #pos=52 */
%   | else return -0.11246888525906074;  // std dev = 0.126, 48.000 (wgt'ed) examples reached here.  /* #neg=48 */
%   else if ( teamalsoknownas(E, A), athleteledsportsteam(F, E) )
%   | then if ( recursion_teamplayssport(E, B) )
%   | | then return 0.1777129840425907;  // std dev = 0.053, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( athleteplayssport(G, B), athleteplaysinleague(G, H) )
%   | | | then return 0.29169497748163126;  // std dev = 0.561, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return -0.08437266612006186;  // std dev = 0.037, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else if ( teamplaysagainstteam(A, I), recursion_teamplayssport(I, B) )
%   | | then if ( teamplaysinleague(A, J) )
%   | | | then return 0.15203347744276424;  // std dev = 0.810, 40.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=39 */
%   | | | else return 0.02539652078228989;  // std dev = 1.224, 11.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=9 */
%   | | else if ( teamalsoknownas(K, A), recursion_teamplayssport(K, B) )
%   | | | then return -0.188988971808728;  // std dev = 0.244, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | | else return 0.023931671427617183;  // std dev = 4.806, 255.000 (wgt'ed) examples reached here.  /* #neg=150 #pos=105 */


Results
   AUC ROC   = 0.962632
   AUC PR    = 0.954753
   CLL	      = -0.296833
   Precision = 0.907563 at threshold = 0.5
   Recall    = 0.81203
   F1        = 0.857143


Total learning time: 249.974 seconds
Total inference time: 6.052 seconds
AUC ROC: 0.962632


Results scoring model
   AUC ROC   = 0.979044
   AUC PR    = 0.979453
   CLL	      = -0.261862
   Precision = 0.94898 at threshold = 0.5
   Recall    = 0.881517
   F1        = 0.914005


Total scoring time: 6.713 seconds
Refined model CLL: -0.261862


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.962632
   AUC PR    = 0.954753
   CLL	      = -0.296833
   Precision = 0.907563 at threshold = 0.5
   Recall    = 0.81203
   F1        = 0.857143


Total learning time: 280.119 seconds
Total inference time: 6.052 seconds
AUC ROC: 0.962632
Total revision time: 280.119
Best scored revision CLL: -0.261862


Dataset: 10_nell_finances_nell_sports, Fold: 1, Type: Transfer (trRDN-B), Time: 20:23:42
{'AUC ROC': 0.962632, 'AUC PR': 0.954753, 'CLL': -0.296833, 'Precision': [0.907563, 0.5], 'Recall': 0.81203, 'F1': 0.857143, 'Learning time': 280.119, 'Inference time': 6.052, 'parameter_0.8': {'AUC ROC': 0.896489, 'AUC PR': 0.902844, 'CLL': -0.406066, 'Precision': [0.920455, 0.5], 'Recall': 0.609023, 'F1': 0.733032, 'Learning time': 17.749, 'Inference time': 4.867}}


Amount of data: 1.0
******************************************
Performing Parameter Learning
******************************************
Refine
0;;companyeconomicsector(A, B) :- acquired(C, A).;true;true
0;true;economicsectorcompany(B, C).;false;false
0;false;companyalsoknownas(A, D).;true;true
0;false,true;economicsectorcompany(B, D).;false;true
0;false,true,false;acquired(A, E), economicsectorcompany(B, E).;false;false
0;false,false;companyceo(A, F).;true;true
0;false,false,true;bankchiefexecutiveceo(G, F).;false;false
0;false,false,false;countryhascompanyoffice(H, A).;false;false
1;;companyeconomicsector(A, B) :- companyalsoknownas(A, C), acquired(A, D).;true;true
1;true;economicsectorcompany(B, D).;false;true
1;true,false;economicsectorcompany(B, C), countryhascompanyoffice(E, C).;false;false
1;false;acquired(A, F), cityhascompanyoffice(G, A).;true;true
1;false,true;cityhascompanyoffice(G, H), economicsectorcompany(B, H).;false;false
1;false,false;acquired(I, A).;true;true
1;false,false,true;economicsectorcompany(B, I).;false;false
1;false,false,false;companyalsoknownas(A, J).;false;false
2;;companyeconomicsector(A, B) :- acquired(A, C), economicsectorcompany(B, C).;false;true
2;false;acquired(A, D).;true;true
2;false,true;companyalsoknownas(A, E), economicsectorcompany(B, E).;true;true
2;false,true,true;countryhascompanyoffice(F, D).;false;false
2;false,true,false;companyalsoknownas(D, G), companyalsoknownas(A, G).;false;false
2;false,false;acquired(H, A), companyceo(H, I).;true;true
2;false,false,true;economicsectorcompany(B, H).;false;false
2;false,false,false;cityhascompanyoffice(J, A).;false;false
3;;companyeconomicsector(A, B) :- acquired(A, C), acquired(C, D).;true;false
3;true;economicsectorcompany(B, D).;true;true
3;true,true;companyceo(C, E).;false;false
3;true,false;cityhascompanyoffice(F, A), companyceo(A, G).;true;true
3;true,false,true;companyalsoknownas(A, H), economicsectorcompany(B, H).;false;false
3;true,false,false;acquired(D, I), economicsectorcompany(B, I).;false;false
4;;companyeconomicsector(A, B) :- acquired(C, A), economicsectorcompany(B, C).;false;true
4;false;acquired(D, A), companyceo(D, E).;true;true
4;false,true;acquired(F, D), companyalsoknownas(F, G).;true;true
4;false,true,true;acquired(A, H).;false;false
4;false,true,false;acquired(I, D), economicsectorcompany(B, I).;false;false
4;false,false;acquired(A, J), economicsectorcompany(B, J).;true;true
4;false,false,true;companyalsoknownas(A, K), acquired(J, L).;false;false
4;false,false,false;companyalsoknownas(A, M), economicsectorcompany(B, M).;false;false
5;;companyeconomicsector(A, B) :- companyalsoknownas(A, C), economicsectorcompany(B, C).;true;true
5;true;acquired(A, D), countryhascompanyoffice(E, D).;false;false
5;false;acquired(A, F), acquired(F, G).;true;true
5;false,true;economicsectorcompany(B, G).;false;true
5;false,true,false;countryhascompanyoffice(H, A), companyalsoknownas(A, I).;false;false
5;false,false;cityhascompanyoffice(J, A), countryhascompanyoffice(K, A).;true;true
5;false,false,true;countryhascompanyoffice(K, L), economicsectorcompany(B, L).;false;false
5;false,false,false;cityhascompanyoffice(M, A), acquired(N, A).;false;false
6;;companyeconomicsector(A, B) :- acquired(A, C), companyceo(C, D).;true;true
6;true;economicsectorcompany(B, C).;false;true
6;true,false;acquired(C, E).;false;false
6;false;companyalsoknownas(A, F), cityhascompanyoffice(G, F).;true;true
6;false,true;acquired(F, H), economicsectorcompany(B, H).;false;true
6;false,true,false;companyceo(A, I), acquired(F, J).;false;false
6;false,false;companyalsoknownas(A, K), acquired(K, L).;false;true
6;false,false,false;companyalsoknownas(A, M).;false;false
7;;companyeconomicsector(A, B) :- acquired(C, A), economicsectorcompany(B, C).;false;true
7;false;acquired(D, A), companyceo(D, E).;true;true
7;false,true;companyalsoknownas(D, F), acquired(G, F).;true;true
7;false,true,true;economicsectorcompany(B, G).;false;false
7;false,true,false;countryhascompanyoffice(H, D).;false;false
7;false,false;cityhascompanyoffice(I, A), acquired(J, A).;true;true
7;false,false,true;acquired(K, J).;false;false
7;false,false,false;companyceo(A, L).;false;false
8;;companyeconomicsector(A, B) :- cityhascompanyoffice(C, A).;true;true
8;true;cityhascompanyoffice(C, D), economicsectorcompany(B, D).;true;false
8;true,true;acquired(D, E), acquired(F, D).;false;true
8;true,true,false;companyalsoknownas(A, G), companyalsoknownas(D, G).;false;false
8;false;acquired(A, H), economicsectorcompany(B, H).;false;true
8;false,false;acquired(I, A), cityhascompanyoffice(J, I).;true;true
8;false,false,true;acquired(K, I), economicsectorcompany(B, K).;false;false
8;false,false,false;acquired(A, L).;false;false
9;;companyeconomicsector(A, B) :- cityhascompanyoffice(C, A).;true;true
9;true;cityhascompanyoffice(C, D), economicsectorcompany(B, D).;true;false
9;true,true;acquired(E, D), companyceo(D, F).;false;false
9;false;companyalsoknownas(A, G), cityhascompanyoffice(H, G).;true;true
9;false,true;economicsectorcompany(B, G).;false;true
9;false,true,false;acquired(I, G).;false;false
9;false,false;acquired(A, J), economicsectorcompany(B, J).;false;true
9;false,false,false;companyalsoknownas(A, K), economicsectorcompany(B, K).;false;false


WILL Produced-Tree #1
% FOR teamplayssport(A, B):
%   if ( teamalsoknownas(A, C) )
%   then if ( recursion_teamplayssport(C, B) )
%   | then return 0.597279369882121;  // std dev = 2.106, 23.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=17 */
%   | else return 0.3014479041716774;  // std dev = 4.893, 97.000 (wgt'ed) examples reached here.  /* #neg=54 #pos=43 */
%   else if ( teamplaysagainstteam(D, A) )
%   | then if ( recursion_teamplayssport(D, B) )
%   | | then return 0.787282793367227;  // std dev = 2.892, 127.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=118 */
%   | | else if ( teamalsoknownas(E, A), recursion_teamplayssport(E, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.0998342581777986;  // std dev = 2.189, 119.000 (wgt'ed) examples reached here.  /* #neg=114 #pos=5 */
%   | else if ( athleteplaysforteam(F, A) )
%   | | then if ( athleteledsportsteam(F, G) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.35814893509951223;  // std dev = 1.225, 6.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | else if ( teamplaysinleague(A, H) )
%   | | | then return 0.3581489350995121;  // std dev = 4.528, 82.000 (wgt'ed) examples reached here.  /* #neg=41 #pos=41 */
%   | | | else return 0.35814893509951107;  // std dev = 4.301, 74.000 (wgt'ed) examples reached here.  /* #neg=37 #pos=37 */
WILL Produced-Tree #2
% FOR teamplayssport(A, B):
%   if ( teamplaysagainstteam(C, A), teamalsoknownas(D, A) )
%   then if ( recursion_teamplayssport(D, B) )
%   | then return 0.6448248196648052;  // std dev = 1.280, 18.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=16 */
%   | else if ( recursion_teamplayssport(C, B), teamplaysinleague(C, E) )
%   | | then return 0.5741656834762543;  // std dev = 0.904, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else return -0.0016358374153141908;  // std dev = 1.791, 25.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=4 */
%   else if ( teamalsoknownas(F, A) )
%   | then if ( recursion_teamplayssport(G, B) )
%   | | then return 0.3117669678704644;  // std dev = 3.537, 50.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=25 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( teamalsoknownas(A, H) )
%   | | then if ( recursion_teamplayssport(H, B) )
%   | | | then return 0.5467861926314248;  // std dev = 1.247, 9.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=7 */
%   | | | else return 0.25921889223439804;  // std dev = 3.256, 43.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=19 */
%   | | else if ( teamplaysagainstteam(I, A) )
%   | | | then return 0.29929940551132944;  // std dev = 6.637, 226.000 (wgt'ed) examples reached here.  /* #neg=113 #pos=113 */
%   | | | else return 0.30874113578563733;  // std dev = 6.164, 152.000 (wgt'ed) examples reached here.  /* #neg=76 #pos=76 */
WILL Produced-Tree #3
% FOR teamplayssport(A, B):
%   if ( teamalsoknownas(C, A), recursion_teamplayssport(C, B) )
%   then return 0.3962917847834682;  // std dev = 1.942, 24.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=18 */
%   else if ( teamalsoknownas(D, A) )
%   | then if ( teamplaysagainstteam(E, A), recursion_teamplayssport(E, B) )
%   | | then if ( teamplaysinleague(D, F) )
%   | | | then return 0.45997188867539895;  // std dev = 0.910, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( teamplaysagainstteam(G, D), teamplaysagainstteam(G, A) )
%   | | | then return -0.14742728464755545;  // std dev = 0.096, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | | | else return 0.27397241843703013;  // std dev = 3.662, 54.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=27 */
%   | else if ( teamalsoknownas(A, H), athleteplaysforteam(I, H) )
%   | | then if ( recursion_teamplayssport(H, B) )
%   | | | then return 0.6583465257756229;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return -0.05788540595607078;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | | else return 0.25281281012860035;  // std dev = 0.464, 420.000 (wgt'ed) examples reached here.  /* #neg=210 #pos=210 */
WILL Produced-Tree #4
% FOR teamplayssport(A, B):
%   if ( teamalsoknownas(C, A), teamalsoknownas(D, C) )
%   then if ( recursion_teamplayssport(D, B) )
%   | then if ( athleteplaysforteam(E, C) )
%   | | then return 0.5341785777143965;  // std dev = 0.114, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else return 0.3106091668293018;  // std dev = 3.519, 51.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=31 */
%   | else if ( athleteplaysforteam(F, A) )
%   | | then if ( teamplaysagainstteam(G, A), recursion_teamplayssport(G, B) )
%   | | | then return 0.1771121526687709;  // std dev = 0.778, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return -0.14769177061808367;  // std dev = 0.107, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | else if ( teamalsoknownas(H, D), recursion_teamplayssport(H, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.25619702859771726;  // std dev = 0.202, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   else return 0.2022838778639553;  // std dev = 9.584, 442.000 (wgt'ed) examples reached here.  /* #neg=221 #pos=221 */
WILL Produced-Tree #5
% FOR teamplayssport(A, B):
%   if ( teamalsoknownas(A, C), recursion_teamplayssport(C, B) )
%   then return 0.21890627564977244;  // std dev = 1.990, 23.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=17 */
%   else if ( teamalsoknownas(A, D), athleteplaysforteam(E, D) )
%   | then if ( teamalsoknownas(D, F), teamplaysagainstteam(G, F) )
%   | | then if ( teamalsoknownas(H, A) )
%   | | | then return -0.13923687999569884;  // std dev = 0.011, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | | else return -0.25069017569639857;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( teamalsoknownas(D, I), recursion_teamplayssport(I, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.09041545810633068;  // std dev = 0.912, 7.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=1 */
%   | else if ( teamalsoknownas(J, A), recursion_teamplayssport(J, B) )
%   | | then if ( teamplaysagainstteam(K, A), teamalsoknownas(L, J) )
%   | | | then return 0.36295117601052573;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.12479089539552814;  // std dev = 1.161, 8.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=5 */
%   | | else if ( teamplaysagainstteam(M, A), recursion_teamplayssport(M, B) )
%   | | | then return 0.48119306170279197;  // std dev = 3.123, 127.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=116 */
%   | | | else return 0.04693703894421556;  // std dev = 8.515, 355.000 (wgt'ed) examples reached here.  /* #neg=233 #pos=122 */
WILL Produced-Tree #6
% FOR teamplayssport(A, B):
%   if ( teamplaysagainstteam(C, A), recursion_teamplayssport(C, B) )
%   then if ( teamalsoknownas(D, A), teamplaysinleague(D, E) )
%   | then return 0.2842061591531076;  // std dev = 1.204, 21.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=19 */
%   | else return 0.36801919712639686;  // std dev = 3.152, 131.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=120 */
%   else if ( teamalsoknownas(F, A), teamalsoknownas(G, F) )
%   | then if ( recursion_teamplayssport(G, B) )
%   | | then return 0.21544249221727227;  // std dev = 3.527, 49.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=29 */
%   | | else if ( teamplaysinleague(A, H), teamplaysagainstteam(I, A) )
%   | | | then return -0.13132708571091023;  // std dev = 0.114, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | | else return -0.22675442044684954;  // std dev = 0.150, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | else if ( teamplaysinleague(A, J) )
%   | | then if ( teamplaysinleague(K, J), recursion_teamplayssport(K, B) )
%   | | | then return 0.2997327174496693;  // std dev = 4.479, 89.000 (wgt'ed) examples reached here.  /* #neg=33 #pos=56 */
%   | | | else return -0.2708888313924756;  // std dev = 0.527, 122.000 (wgt'ed) examples reached here.  /* #neg=122 */
%   | | else if ( teamalsoknownas(A, L) )
%   | | | then return 0.017362452667468872;  // std dev = 1.335, 8.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=3 */
%   | | | else return 0.10231556083210576;  // std dev = 4.493, 86.000 (wgt'ed) examples reached here.  /* #neg=49 #pos=37 */
WILL Produced-Tree #7
% FOR teamplayssport(A, B):
%   if ( teamalsoknownas(C, A), athleteplaysforteam(D, C) )
%   then if ( recursion_teamplayssport(C, B) )
%   | then return 0.1999205712205253;  // std dev = 1.075, 16.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=14 */
%   | else if ( teamalsoknownas(E, C) )
%   | | then return -0.018393390778928282;  // std dev = 1.078, 16.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=4 */
%   | | else return -0.11199080829501448;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   else if ( teamplaysagainstteam(F, A) )
%   | then if ( teamalsoknownas(G, F), recursion_teamplayssport(G, B) )
%   | | then return 0.30157192047593023;  // std dev = 2.277, 83.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=77 */
%   | | else if ( athleteplaysforteam(H, A), teamalsoknownas(I, F) )
%   | | | then return -0.16827702375718637;  // std dev = 1.832, 71.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=7 */
%   | | | else return 0.0438590935530371;  // std dev = 4.107, 126.000 (wgt'ed) examples reached here.  /* #neg=70 #pos=56 */
%   | else if ( teamplaysagainstteam(J, A), teamalsoknownas(K, J) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( teamplaysagainstteam(L, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.12005766107314957;  // std dev = 7.013, 212.000 (wgt'ed) examples reached here.  /* #neg=106 #pos=106 */
WILL Produced-Tree #8
% FOR teamplayssport(A, B):
%   if ( teamalsoknownas(A, C), recursion_teamplayssport(C, B) )
%   then return 0.06667267108497407;  // std dev = 1.925, 23.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=17 */
%   else if ( teamalsoknownas(A, D), athleteplaysforteam(E, D) )
%   | then if ( teamplaysagainstteam(F, D), teamalsoknownas(F, G) )
%   | | then if ( recursion_teamplayssport(G, B) )
%   | | | then return 0.11697896361354153;  // std dev = 0.625, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | else return -0.1485637659993899;  // std dev = 0.131, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( teamalsoknownas(A, H) )
%   | | then if ( teamalsoknownas(H, I) )
%   | | | then return 0.1156086241819154;  // std dev = 4.059, 79.000 (wgt'ed) examples reached here.  /* #neg=39 #pos=40 */
%   | | | else return -0.09886068078720127;  // std dev = 1.154, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   | | else if ( athleteplaysforteam(J, A) )
%   | | | then return 0.042661843029576124;  // std dev = 4.004, 182.000 (wgt'ed) examples reached here.  /* #neg=91 #pos=91 */
%   | | | else return 0.08201532677502218;  // std dev = 6.627, 226.000 (wgt'ed) examples reached here.  /* #neg=113 #pos=113 */
WILL Produced-Tree #9
% FOR teamplayssport(A, B):
%   if ( recursion_teamplayssport(C, B) )
%   then if ( teamalsoknownas(D, C), teamalsoknownas(C, E) )
%   | then return 0.10874250030830744;  // std dev = 7.796, 366.000 (wgt'ed) examples reached here.  /* #neg=150 #pos=216 */
%   | else if ( teamplaysagainstteam(F, A), teamplaysagainstteam(F, C) )
%   | | then return 0.22464295685726823;  // std dev = 1.813, 39.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=34 */
%   | | else return -0.1709737350425924;  // std dev = 3.111, 123.000 (wgt'ed) examples reached here.  /* #neg=109 #pos=14 */
%   else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR teamplayssport(A, B):
%   if ( recursion_teamplayssport(C, B) )
%   then if ( teamalsoknownas(C, D), athleteplaysforteam(E, C) )
%   | then return 0.159541043985367;  // std dev = 7.507, 370.000 (wgt'ed) examples reached here.  /* #neg=110 #pos=260 */
%   | else return -0.2409000183591225;  // std dev = 2.217, 158.000 (wgt'ed) examples reached here.  /* #neg=154 #pos=4 */
%   else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 0.905393
   AUC PR    = 0.898221
   CLL	      = -0.448019
   Precision = 0.829457 at threshold = 0.5
   Recall    = 0.804511
   F1        = 0.816794


Total learning time: 11.03 seconds
Total inference time: 3.967 seconds
AUC ROC: 0.905393


Results scoring model
   AUC ROC   = 0.921416
   AUC PR    = 0.905077
   CLL	      = -0.443465
   Precision = 0.851852 at threshold = 0.5
   Recall    = 0.784091
   F1        = 0.816568


Total scoring time: 4.549 seconds
Parameter learned model CLL: -0.443465


Structure after Parameter Learning
[['teamplayssport(A, B)', {'': 'teamalsoknownas(A, C)', 'true': 'recursion_teamplayssport(C, B)', 'false': 'teamplaysagainstteam(D, A)', 'false,true': 'recursion_teamplayssport(D, B)', 'false,true,false': 'teamalsoknownas(E, A), recursion_teamplayssport(E, B)', 'false,false': 'athleteplaysforteam(F, A)', 'false,false,true': 'athleteledsportsteam(F, G)', 'false,false,false': 'teamplaysinleague(A, H)'}, {'true,true': [2.106, 6, 17], 'true,false': [4.893, 54, 43], 'false,true,true': [2.892, 9, 118], 'false,true,false,true': [0.0, 0, 0], 'false,true,false,false': [2.189, 114, 5], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [1.225, 3, 3], 'false,false,false,true': [4.528, 41, 41], 'false,false,false,false': [4.301, 37, 37]}], ['teamplayssport(A, B)', {'': 'teamplaysagainstteam(C, A), teamalsoknownas(D, A)', 'true': 'recursion_teamplayssport(D, B)', 'true,false': 'recursion_teamplayssport(C, B), teamplaysinleague(C, E)', 'false': 'teamalsoknownas(F, A)', 'false,true': 'recursion_teamplayssport(G, B)', 'false,false': 'teamalsoknownas(A, H)', 'false,false,true': 'recursion_teamplayssport(H, B)', 'false,false,false': 'teamplaysagainstteam(I, A)'}, {'true,true': [1.28, 2, 16], 'true,false,true': [0.904, 1, 4], 'true,false,false': [1.791, 21, 4], 'false,true,true': [3.537, 25, 25], 'false,true,false': [0.0, 0, 0], 'false,false,true,true': [1.247, 2, 7], 'false,false,true,false': [3.256, 24, 19], 'false,false,false,true': [6.637, 113, 113], 'false,false,false,false': [6.164, 76, 76]}], ['teamplayssport(A, B)', {'': 'teamalsoknownas(C, A), recursion_teamplayssport(C, B)', 'false': 'teamalsoknownas(D, A)', 'false,true': 'teamplaysagainstteam(E, A), recursion_teamplayssport(E, B)', 'false,true,true': 'teamplaysinleague(D, F)', 'false,true,false': 'teamplaysagainstteam(G, D), teamplaysagainstteam(G, A)', 'false,false': 'teamalsoknownas(A, H), athleteplaysforteam(I, H)', 'false,false,true': 'recursion_teamplayssport(H, B)'}, {'true': [1.942, 6, 18], 'false,true,true,true': [0.91, 1, 4], 'false,true,true,false': [0.0, 0, 0], 'false,true,false,true': [0.096, 15, 0], 'false,true,false,false': [3.662, 27, 27], 'false,false,true,true': [0.0, 0, 4], 'false,false,true,false': [0.913, 5, 1], 'false,false,false': [0.464, 210, 210]}], ['teamplayssport(A, B)', {'': 'teamalsoknownas(C, A), teamalsoknownas(D, C)', 'true': 'recursion_teamplayssport(D, B)', 'true,true': 'athleteplaysforteam(E, C)', 'true,false': 'athleteplaysforteam(F, A)', 'true,false,true': 'teamplaysagainstteam(G, A), recursion_teamplayssport(G, B)', 'true,false,false': 'teamalsoknownas(H, D), recursion_teamplayssport(H, B)'}, {'true,true,true': [0.114, 0, 10], 'true,true,false': [3.519, 20, 31], 'true,false,true,true': [0.778, 1, 2], 'true,false,true,false': [0.107, 9, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [0.202, 13, 0], 'false': [9.584, 221, 221]}], ['teamplayssport(A, B)', {'': 'teamalsoknownas(A, C), recursion_teamplayssport(C, B)', 'false': 'teamalsoknownas(A, D), athleteplaysforteam(E, D)', 'false,true': 'teamalsoknownas(D, F), teamplaysagainstteam(G, F)', 'false,true,true': 'teamalsoknownas(H, A)', 'false,true,false': 'teamalsoknownas(D, I), recursion_teamplayssport(I, B)', 'false,false': 'teamalsoknownas(J, A), recursion_teamplayssport(J, B)', 'false,false,true': 'teamplaysagainstteam(K, A), teamalsoknownas(L, J)', 'false,false,false': 'teamplaysagainstteam(M, A), recursion_teamplayssport(M, B)'}, {'true': [1.99, 6, 17], 'false,true,true,true': [0.011, 4, 0], 'false,true,true,false': [0.0, 1, 0], 'false,true,false,true': [0.0, 0, 0], 'false,true,false,false': [0.912, 6, 1], 'false,false,true,true': [0.0, 0, 3], 'false,false,true,false': [1.161, 3, 5], 'false,false,false,true': [3.123, 11, 116], 'false,false,false,false': [8.515, 233, 122]}], ['teamplayssport(A, B)', {'': 'teamplaysagainstteam(C, A), recursion_teamplayssport(C, B)', 'true': 'teamalsoknownas(D, A), teamplaysinleague(D, E)', 'false': 'teamalsoknownas(F, A), teamalsoknownas(G, F)', 'false,true': 'recursion_teamplayssport(G, B)', 'false,true,false': 'teamplaysinleague(A, H), teamplaysagainstteam(I, A)', 'false,false': 'teamplaysinleague(A, J)', 'false,false,true': 'teamplaysinleague(K, J), recursion_teamplayssport(K, B)', 'false,false,false': 'teamalsoknownas(A, L)'}, {'true,true': [1.204, 2, 19], 'true,false': [3.152, 11, 120], 'false,true,true': [3.527, 20, 29], 'false,true,false,true': [0.114, 11, 0], 'false,true,false,false': [0.15, 11, 0], 'false,false,true,true': [4.479, 33, 56], 'false,false,true,false': [0.527, 122, 0], 'false,false,false,true': [1.335, 5, 3], 'false,false,false,false': [4.493, 49, 37]}], ['teamplayssport(A, B)', {'': 'teamalsoknownas(C, A), athleteplaysforteam(D, C)', 'true': 'recursion_teamplayssport(C, B)', 'true,false': 'teamalsoknownas(E, C)', 'false': 'teamplaysagainstteam(F, A)', 'false,true': 'teamalsoknownas(G, F), recursion_teamplayssport(G, B)', 'false,true,false': 'athleteplaysforteam(H, A), teamalsoknownas(I, F)', 'false,false': 'teamplaysagainstteam(J, A), teamalsoknownas(K, J)', 'false,false,false': 'teamplaysagainstteam(L, A)'}, {'true,true': [1.075, 2, 14], 'true,false,true': [1.078, 12, 4], 'true,false,false': [0.0, 4, 0], 'false,true,true': [2.277, 6, 77], 'false,true,false,true': [1.832, 64, 7], 'false,true,false,false': [4.107, 70, 56], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [7.013, 106, 106]}], ['teamplayssport(A, B)', {'': 'teamalsoknownas(A, C), recursion_teamplayssport(C, B)', 'false': 'teamalsoknownas(A, D), athleteplaysforteam(E, D)', 'false,true': 'teamplaysagainstteam(F, D), teamalsoknownas(F, G)', 'false,true,true': 'recursion_teamplayssport(G, B)', 'false,false': 'teamalsoknownas(A, H)', 'false,false,true': 'teamalsoknownas(H, I)', 'false,false,false': 'athleteplaysforteam(J, A)'}, {'true': [1.925, 6, 17], 'false,true,true,true': [0.625, 2, 1], 'false,true,true,false': [0.131, 9, 0], 'false,true,false': [0.0, 0, 0], 'false,false,true,true': [4.059, 39, 40], 'false,false,true,false': [1.154, 4, 2], 'false,false,false,true': [4.004, 91, 91], 'false,false,false,false': [6.627, 113, 113]}], ['teamplayssport(A, B)', {'': 'recursion_teamplayssport(C, B)', 'true': 'teamalsoknownas(D, C), teamalsoknownas(C, E)', 'true,false': 'teamplaysagainstteam(F, A), teamplaysagainstteam(F, C)'}, {'true,true': [7.796, 150, 216], 'true,false,true': [1.813, 5, 34], 'true,false,false': [3.111, 109, 14], 'false': [0.0, 0, 0]}], ['teamplayssport(A, B)', {'': 'recursion_teamplayssport(C, B)', 'true': 'teamalsoknownas(C, D), athleteplaysforteam(E, C)'}, {'true,true': [7.507, 110, 260], 'true,false': [2.217, 154, 4], 'false': [0.0, 0, 0]}]]
[{'': [0.24999999999999975, 0.2500000000000038], 'false': [0.2500000000000035, 0.2500000000000008], 'false,true': [0.0658441316882671, 0.040251394675517485], 'false,false': [0.24999999999999992, 0.25000000000000017], 'false,false,false': [0.25000000000000094, 0.2500000000000017], 'false,false,true': [nan, 0.24999999999999992], 'true': [0.19281663516068015, 0.2467849930917215], 'false,true,false': [nan, 0.040251394675517464]}, {'': [0.21780550518426436, 0.22364490990158797], 'false': [0.2501706050203416, 0.2205539297058216], 'false,true': [0.2501706050203416, nan], 'false,false': [0.24568553841631263, 0.21709247023296824], 'false,false,true': [0.1728395061728395, 0.2466197944835047], 'true': [0.09100594577380382, 0.18024398293022706], 'false,false,false': [0.19492412515897478, 0.24999999999999734], 'true,false': [0.16347427452498264, 0.1283400260344356]}, {'': [0.15713022104479285, 0.21707848385137257], 'false': [0.2255591707508833, 0.21523519255684515], 'false,true': [0.16547302919546475, 0.2247060593895602], 'false,true,false': [0.0006114578376150111, 0.24835070987287816], 'false,false': [0.20645049654104058, 0.2154307263232389], 'false,false,true': [0.0, 0.13888888888888884], 'false,true,true': [0.16547302919546475, nan]}, {'': [0.2161651225950361, 0.20783228721568864], 'true': [0.2100865170464346, 0.04476843667627588], 'true,true': [0.001291084731652159, 0.24283281732140352], 'true,false': [0.07115411867921687, 0.003137963140441099], 'true,false,true': [0.20165436226107225, 0.001279640339631846], 'true,false,false': [nan, 0.0031379631404411246]}, {'': [0.17220424353124827, 0.2042999376203732], 'false': [0.0714084161019572, 0.20564445721870636], 'false,false': [0.13381030043641562, 0.20726584677308346], 'false,false,false': [0.07678750063493203, 0.20425637407701724], 'false,false,true': [0.0, 0.16851998511935845], 'false,true': [0.0020118618371980867, 0.1188703300721166], 'false,true,false': [nan, 0.1188703300721166], 'false,true,true': [3.0459871988085946e-05, 0.0]}, {'': [0.07571186396892193, 0.20064239484497115], 'false': [0.20967918590770532, 0.19718100201904995], 'false,true': [0.2538515221276568, 0.003897676988046848], 'false,false': [0.17580421285436518, 0.23430618865128944], 'false,false,false': [0.2227020863934875, 0.23477142465501605], 'false,false,true': [0.22541082105168184, 0.0022736209739334713], 'true': [0.06898609598941643, 0.07581953306775119], 'false,true,false': [0.0011916035555554103, 0.002050562313135738]}, {'': [0.07905953845914077, 0.16972561352060808], 'false': [0.121336127471676, 0.2320014339825403], 'false,false': [nan, 0.2320014339825403], 'false,false,false': [nan, 0.2320014339825403], 'false,true': [0.062490434267131176, 0.11302732729768299], 'false,true,false': [0.04725912628976254, 0.13386828816437848], 'true': [0.07224022905750536, 0.05954393963073018], 'true,false': [0.07267782922527662, 0.0]}, {'': [0.1610557868913228, 0.15662204148696032], 'false': [0.04718945918902389, 0.15873057248039668], 'false,false': [0.21247987759101125, 0.14730924022142616], 'false,false,true': [0.20850144679992075, 0.2221123198014576], 'false,false,false': [0.08810018750819575, 0.19430002655571832], 'false,true': [0.04718945918902389, nan], 'false,true,true': [0.13011545633587837, 0.0019192248275008027]}, {'': [0.1556717726260277, nan], 'true': [0.1660484388004975, 0.10863845926609693], 'true,false': [0.08431537677679642, 0.07867170485985098]}, {'': [0.1496538638962664, nan], 'true': [0.1522953716531465, 0.031099443924971614]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
2;;teamplayssport(A, B) :- teamalsoknownas(C, A), recursion_teamplayssport(C, B).;true;true
2;false;teamalsoknownas(D, A).;true;true
2;false,true;teamplaysagainstteam(E, A), recursion_teamplayssport(E, B).;true;true
2;false,true,false;teamplaysagainstteam(G, D), teamplaysagainstteam(G, A).;true;true
2;false,false;teamalsoknownas(A, H), athleteplaysforteam(I, H).;true;true
2;false,false,true;recursion_teamplayssport(H, B).;true;true
3;;teamplayssport(A, B) :- teamalsoknownas(C, A), teamalsoknownas(D, C).;true;true
3;true;recursion_teamplayssport(D, B).;true;true
3;true,true;athleteplaysforteam(E, C).;true;true
3;true,false;athleteplaysforteam(F, A).;true;true
3;true,false,true;teamplaysagainstteam(G, A), recursion_teamplayssport(G, B).;true;true
4;;teamplayssport(A, B) :- teamalsoknownas(A, C), recursion_teamplayssport(C, B).;true;true
4;false;teamalsoknownas(A, D), athleteplaysforteam(E, D).;true;true
4;false,true;teamalsoknownas(D, F), teamplaysagainstteam(G, F).;true;true
4;false,true,true;teamalsoknownas(H, A).;true;true
4;false,false;teamalsoknownas(J, A), recursion_teamplayssport(J, B).;true;true
4;false,false,true;teamplaysagainstteam(K, A), teamalsoknownas(L, J).;true;true
5;;teamplayssport(A, B) :- teamplaysagainstteam(C, A), recursion_teamplayssport(C, B).;true;true
5;false;teamalsoknownas(F, A), teamalsoknownas(G, F).;true;true
5;false,true;recursion_teamplayssport(G, B).;true;true
5;false,true,false;teamplaysinleague(A, H), teamplaysagainstteam(I, A).;true;true
5;false,false;teamplaysinleague(A, J).;true;true
5;false,false,true;teamplaysinleague(K, J), recursion_teamplayssport(K, B).;true;true
6;;teamplayssport(A, B) :- teamalsoknownas(C, A), athleteplaysforteam(D, C).;true;true
6;true;recursion_teamplayssport(C, B).;true;true
6;true,false;teamalsoknownas(E, C).;true;true
7;;teamplayssport(A, B) :- teamalsoknownas(A, C), recursion_teamplayssport(C, B).;true;true
7;false;teamalsoknownas(A, D), athleteplaysforteam(E, D).;true;true
7;false,true;recursion_teamplayssport(G, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR teamplayssport(A, B):
%   if ( athleteplayssport(C, B), athleteledsportsteam(C, D) )
%   then if ( teamplaysinleague(A, E), athleteplaysinleague(C, E) )
%   | then return 0.7988269012012056;  // std dev = 0.236, 118.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=111 */
%   | else if ( teamplaysinleague(A, F), athleteplaysinleague(G, F) )
%   | | then if ( athleteplayssport(G, H), recursion_teamplayssport(A, H) )
%   | | | then return -0.1033895264389493;  // std dev = 0.981, 26.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=1 */
%   | | | else return 0.5504566274072041;  // std dev = 2.882, 39.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=27 */
%   | | else if ( teamplaysinleague(A, I), teamplaysinleague(D, I) )
%   | | | then return 0.8311219080724844;  // std dev = 0.986, 37.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=36 */
%   | | | else return 0.5067975837481615;  // std dev = 5.030, 111.000 (wgt'ed) examples reached here.  /* #neg=39 #pos=72 */
%   else if ( teamalsoknownas(A, J), recursion_teamplayssport(J, B) )
%   | then if ( teamplaysagainstteam(A, K) )
%   | | then return 0.8581489350995122;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( teamplaysinleague(A, L), teamplaysinleague(J, L) )
%   | | | then return -0.14185106490048777;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.4581489350995122;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | else return -0.08779701084643361;  // std dev = 0.226, 185.000 (wgt'ed) examples reached here.  /* #neg=175 #pos=10 */
WILL Produced-Tree #2
% FOR teamplayssport(A, B):
%   if ( athleteplayssport(C, B), athleteledsportsteam(C, D) )
%   then if ( teamplaysagainstteam(E, A), recursion_teamplayssport(E, B) )
%   | then if ( athleteplaysforteam(C, E), teamalsoknownas(F, D) )
%   | | then return 0.6907021314315088;  // std dev = 0.203, 101.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=96 */
%   | | else if ( teamalsoknownas(A, G), athleteplaysforteam(H, A) )
%   | | | then return 0.1262615468266909;  // std dev = 0.803, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | else return 0.6157973810440891;  // std dev = 2.076, 38.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=32 */
%   | else if ( athleteplaysforteam(C, D), teamalsoknownas(D, I) )
%   | | then if ( athleteledsportsteam(J, A) )
%   | | | then return -0.1839450032473829;  // std dev = 0.180, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | | | else return 0.23045232236158644;  // std dev = 4.489, 85.000 (wgt'ed) examples reached here.  /* #neg=47 #pos=38 */
%   | | else if ( teamplaysagainstteam(K, A), teamplaysagainstteam(A, K) )
%   | | | then return 0.03307206122587491;  // std dev = 1.471, 14.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=3 */
%   | | | else return 0.7175057834737766;  // std dev = 1.710, 80.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=77 */
%   else if ( teamplaysagainstteam(L, A), recursion_teamplayssport(L, B) )
%   | then return 0.816223927841625;  // std dev = 0.067, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | else return -0.0963820436679694;  // std dev = 0.182, 187.000 (wgt'ed) examples reached here.  /* #neg=180 #pos=7 */
WILL Produced-Tree #3
% FOR teamplayssport(A, B):
%   if ( teamalsoknownas(C, A), recursion_teamplayssport(C, B) )
%   then if ( teamplaysagainstteam(D, A), recursion_teamplayssport(D, B) )
%   | then return 0.5382940100952065;  // std dev = 0.197, 17.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=16 */
%   | else return 0.1166272591562438;  // std dev = 0.440, 7.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=2 */
%   else if ( teamalsoknownas(E, A) )
%   | then if ( teamplaysagainstteam(F, A), recursion_teamplayssport(F, B) )
%   | | then return 0.47097525686168423;  // std dev = 0.864, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else if ( teamplaysagainstteam(G, E), teamplaysagainstteam(G, A) )
%   | | | then return -0.13783822046730665;  // std dev = 0.172, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | | | else return 0.23392902846990749;  // std dev = 3.117, 54.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=27 */
%   | else if ( teamalsoknownas(A, H), athleteplaysforteam(I, H) )
%   | | then if ( recursion_teamplayssport(H, B) )
%   | | | then return 0.5655915470019278;  // std dev = 0.040, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return -0.02545669149319002;  // std dev = 0.672, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | | else if ( athleteplayssport(J, B), athleteledsportsteam(J, K) )
%   | | | then return 0.41129667709152035;  // std dev = 6.106, 267.000 (wgt'ed) examples reached here.  /* #neg=66 #pos=201 */
%   | | | else return -0.0694214256373665;  // std dev = 2.578, 153.000 (wgt'ed) examples reached here.  /* #neg=144 #pos=9 */
WILL Produced-Tree #4
% FOR teamplayssport(A, B):
%   if ( teamalsoknownas(C, A), teamalsoknownas(D, C) )
%   then if ( recursion_teamplayssport(D, B) )
%   | then if ( athleteplaysforteam(E, C) )
%   | | then return 0.4790883601137323;  // std dev = 0.107, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else if ( athleteplayssport(F, B), athleteledsportsteam(F, G) )
%   | | | then return 0.31902011462055335;  // std dev = 2.528, 38.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=27 */
%   | | | else return 0.11937463263162428;  // std dev = 1.501, 13.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=4 */
%   | else return -0.09853244276565462;  // std dev = 0.192, 25.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=2 */
%   else if ( athleteplayssport(H, B), athleteplaysinleague(H, I) )
%   | then if ( teamplaysagainstteam(J, A), recursion_teamplayssport(J, B) )
%   | | then if ( athleteledsportsteam(K, J), teamplaysagainstteam(A, L) )
%   | | | then return 0.39804255546954104;  // std dev = 2.740, 109.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=98 */
%   | | | else return 0.554121542714754;  // std dev = 0.938, 28.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=27 */
%   | | else if ( teamplaysagainstteam(M, A) )
%   | | | then return -0.039484655928881035;  // std dev = 2.840, 58.000 (wgt'ed) examples reached here.  /* #neg=45 #pos=13 */
%   | | | else return 0.30945511615412963;  // std dev = 4.043, 114.000 (wgt'ed) examples reached here.  /* #neg=33 #pos=81 */
%   | else return -0.09855119894689317;  // std dev = 0.122, 133.000 (wgt'ed) examples reached here.  /* #neg=131 #pos=2 */
WILL Produced-Tree #5
% FOR teamplayssport(A, B):
%   if ( teamalsoknownas(A, C), recursion_teamplayssport(C, B) )
%   then if ( teamplaysagainstteam(A, D) )
%   | then if ( teamalsoknownas(A, D) )
%   | | then return 0.26019385737826456;  // std dev = 0.203, 11.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=10 */
%   | | else return 0.4638210285398586;  // std dev = 0.342, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( teamalsoknownas(E, A) )
%   | | then return 0.19073574841476806;  // std dev = 0.996, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | else return 0.0454547507410149;  // std dev = 0.573, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   else if ( teamalsoknownas(A, F), athleteplaysforteam(G, F) )
%   | then return -0.06789648882876283;  // std dev = 0.171, 12.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=1 */
%   | else if ( teamalsoknownas(H, A), recursion_teamplayssport(H, B) )
%   | | then if ( teamplaysagainstteam(I, A), teamalsoknownas(J, H) )
%   | | | then return 0.34803249246046947;  // std dev = 0.061, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.12224789711718884;  // std dev = 0.976, 8.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=5 */
%   | | else if ( athleteplayssport(K, B), athleteledsportsteam(K, L) )
%   | | | then return 0.24267115173199977;  // std dev = 6.292, 308.000 (wgt'ed) examples reached here.  /* #neg=79 #pos=229 */
%   | | | else return -0.06600389038939435;  // std dev = 2.520, 174.000 (wgt'ed) examples reached here.  /* #neg=165 #pos=9 */
WILL Produced-Tree #6
% FOR teamplayssport(A, B):
%   if ( teamplaysagainstteam(C, A), recursion_teamplayssport(C, B) )
%   then if ( teamplaysagainstteam(D, A), athleteledsportsteam(E, D) )
%   | then return 0.24934136923019817;  // std dev = 0.258, 130.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=117 */
%   | else return 0.42224561019124224;  // std dev = 0.133, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   else if ( teamalsoknownas(F, A), teamalsoknownas(G, F) )
%   | then if ( recursion_teamplayssport(G, B) )
%   | | then if ( teamplaysagainstteam(H, A), athleteplayssport(I, B) )
%   | | | then return -0.01425743221342837;  // std dev = 1.190, 7.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=3 */
%   | | | else return 0.18561307710791747;  // std dev = 2.639, 42.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=26 */
%   | | else return -0.1272418586074532;  // std dev = 0.054, 22.000 (wgt'ed) examples reached here.  /* #neg=22 */
%   | else if ( teamplaysinleague(A, J) )
%   | | then if ( teamplaysinleague(K, J), recursion_teamplayssport(K, B) )
%   | | | then return 0.16269711201300896;  // std dev = 3.325, 89.000 (wgt'ed) examples reached here.  /* #neg=33 #pos=56 */
%   | | | else return -0.13421686433853192;  // std dev = 0.996, 122.000 (wgt'ed) examples reached here.  /* #neg=122 */
%   | | else if ( teamplaysagainstteam(L, A) )
%   | | | then return -0.08955711895853372;  // std dev = 1.646, 22.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=4 */
%   | | | else return 0.13610719003314606;  // std dev = 3.093, 72.000 (wgt'ed) examples reached here.  /* #neg=36 #pos=36 */
WILL Produced-Tree #7
% FOR teamplayssport(A, B):
%   if ( teamalsoknownas(C, A), athleteplaysforteam(D, C) )
%   then if ( recursion_teamplayssport(C, B) )
%   | then if ( athleteplaysforteam(E, A), athleteplayssport(E, B) )
%   | | then return 0.23205085448957813;  // std dev = 0.077, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else return 0.004328187234125018;  // std dev = 0.831, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | else if ( teamalsoknownas(F, C) )
%   | | then if ( teamplaysagainstteam(G, A) )
%   | | | then return -0.04655298330048853;  // std dev = 0.822, 13.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=2 */
%   | | | else return 0.43968574055404014;  // std dev = 0.694, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return -0.12663459935400254;  // std dev = 0.156, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   else if ( athleteplayssport(H, B), athleteplaysinleague(H, I) )
%   | then if ( athleteledsportsteam(H, J), teamplaysinleague(A, I) )
%   | | then return 0.251160653012949;  // std dev = 0.170, 105.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=100 */
%   | | else if ( teamplaysagainstteam(A, K), athleteledsportsteam(L, K) )
%   | | | then return -0.09093750586585139;  // std dev = 2.423, 53.000 (wgt'ed) examples reached here.  /* #neg=35 #pos=18 */
%   | | | else return 0.14242881582501368;  // std dev = 5.262, 188.000 (wgt'ed) examples reached here.  /* #neg=63 #pos=125 */
%   | else return -0.07821367264889728;  // std dev = 0.138, 146.000 (wgt'ed) examples reached here.  /* #neg=143 #pos=3 */
WILL Produced-Tree #8
% FOR teamplayssport(A, B):
%   if ( teamalsoknownas(A, C), recursion_teamplayssport(C, B) )
%   then if ( teamalsoknownas(D, A), athleteledsportsteam(E, D) )
%   | then return 0.2512149693500789;  // std dev = 0.286, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else if ( teamplaysagainstteam(A, F) )
%   | | then if ( teamalsoknownas(F, A), teamplaysagainstteam(F, A) )
%   | | | then return -0.036554611326884145;  // std dev = 0.556, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.2496189611953256;  // std dev = 0.437, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( teamplaysinleague(A, G) )
%   | | | then return -0.06571830392610176;  // std dev = 0.494, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | else return 0.025880106715644502;  // std dev = 0.782, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   else if ( teamalsoknownas(A, H), athleteplaysforteam(I, H) )
%   | then return -0.06292579423947532;  // std dev = 0.142, 12.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=1 */
%   | else if ( athleteplayssport(J, B), athleteledsportsteam(J, K) )
%   | | then if ( athleteplaysforteam(J, K), teamalsoknownas(K, L) )
%   | | | then return 0.04386396964949675;  // std dev = 5.167, 181.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=117 */
%   | | | else return 0.21506661907005004;  // std dev = 2.790, 136.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=119 */
%   | | else return -0.054085143198040614;  // std dev = 0.177, 176.000 (wgt'ed) examples reached here.  /* #neg=166 #pos=10 */
WILL Produced-Tree #9
% FOR teamplayssport(A, B):
%   if ( teamplaysagainstteam(C, A), recursion_teamplayssport(C, B) )
%   then if ( athleteplaysforteam(D, C), athleteplayssport(D, E) )
%   | then if ( athleteledsportsteam(D, F), teamalsoknownas(G, F) )
%   | | then return 0.17850450921585745;  // std dev = 0.187, 108.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=103 */
%   | | else if ( teamplaysagainstteam(A, C), athleteledsportsteam(D, H) )
%   | | | then return 0.13412239165222564;  // std dev = 0.977, 13.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=11 */
%   | | | else return -0.24793821368758875;  // std dev = 1.176, 8.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=3 */
%   | else if ( teamplaysinleague(A, I), athleteplaysforteam(J, A) )
%   | | then return 0.1351971704945448;  // std dev = 0.272, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | else return 0.3558362876903421;  // std dev = 0.146, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   else if ( teamplaysagainstteam(K, A), athleteledsportsteam(L, K) )
%   | then return -0.10432029225329867;  // std dev = 0.187, 116.000 (wgt'ed) examples reached here.  /* #neg=110 #pos=6 */
%   | else if ( athleteplayssport(M, B), athleteledsportsteam(M, N) )
%   | | then if ( athleteplaysforteam(M, N), teamalsoknownas(N, P) )
%   | | | then return -0.07098237855432539;  // std dev = 3.949, 74.000 (wgt'ed) examples reached here.  /* #neg=41 #pos=33 */
%   | | | else return 0.25322817618770943;  // std dev = 1.531, 82.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=80 */
%   | | else return -0.05934623199836188;  // std dev = 0.208, 104.000 (wgt'ed) examples reached here.  /* #neg=98 #pos=6 */
WILL Produced-Tree #10
% FOR teamplayssport(A, B):
%   if ( athleteplayssport(C, B), athleteplaysinleague(C, D) )
%   then if ( athleteledsportsteam(C, E), teamplaysinleague(A, D) )
%   | then if ( recursion_teamplayssport(E, B), teamplaysinleague(E, D) )
%   | | then return 0.18632482867642203;  // std dev = 0.116, 109.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=108 */
%   | | else if ( recursion_teamplayssport(E, B) )
%   | | | then return -0.4074196641446626;  // std dev = 0.220, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | | else return 0.24695360524487733;  // std dev = 0.116, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( teamplaysagainstteam(A, F), athleteledsportsteam(G, F) )
%   | | then if ( athleteplaysinleague(G, H), teamplaysinleague(A, H) )
%   | | | then return -0.1919928066628983;  // std dev = 1.520, 33.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=4 */
%   | | | else return 0.04287175270273867;  // std dev = 1.656, 28.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=18 */
%   | | else if ( teamplaysagainstteam(I, A), recursion_teamplayssport(I, B) )
%   | | | then return 0.23394105132349238;  // std dev = 0.957, 22.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=21 */
%   | | | else return 0.04919431454595266;  // std dev = 4.828, 169.000 (wgt'ed) examples reached here.  /* #neg=63 #pos=106 */
%   else if ( teamplaysinleague(A, J) )
%   | then return -0.06962580154602958;  // std dev = 0.079, 119.000 (wgt'ed) examples reached here.  /* #neg=118 #pos=1 */
%   | else return -0.0178940458069204;  // std dev = 0.262, 39.000 (wgt'ed) examples reached here.  /* #neg=36 #pos=3 */


Results
   AUC ROC   = 0.94864
   AUC PR    = 0.946316
   CLL	      = -0.329022
   Precision = 0.855172 at threshold = 0.5
   Recall    = 0.932331
   F1        = 0.892086


Total learning time: 437.691 seconds
Total inference time: 7.235 seconds
AUC ROC: 0.94864


Results scoring model
   AUC ROC   = 0.976591
   AUC PR    = 0.975845
   CLL	      = -0.281342
   Precision = 0.890071 at threshold = 0.5
   Recall    = 0.950758
   F1        = 0.919414


Total scoring time: 10.005 seconds
Refined model CLL: -0.281342


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.94864
   AUC PR    = 0.946316
   CLL	      = -0.329022
   Precision = 0.855172 at threshold = 0.5
   Recall    = 0.932331
   F1        = 0.892086


Total learning time: 463.275 seconds
Total inference time: 7.235 seconds
AUC ROC: 0.94864
Total revision time: 463.275
Best scored revision CLL: -0.281342


Dataset: 10_nell_finances_nell_sports, Fold: 1, Type: Transfer (trRDN-B), Time: 20:31:38
{'AUC ROC': 0.94864, 'AUC PR': 0.946316, 'CLL': -0.329022, 'Precision': [0.855172, 0.5], 'Recall': 0.932331, 'F1': 0.892086, 'Learning time': 463.275, 'Inference time': 7.235, 'parameter_1.0': {'AUC ROC': 0.905393, 'AUC PR': 0.898221, 'CLL': -0.448019, 'Precision': [0.829457, 0.5], 'Recall': 0.804511, 'F1': 0.816794, 'Learning time': 11.03, 'Inference time': 3.967}}


Starting fold 2

Target train facts examples: 9691
Target train pos examples: 264
Target train neg examples: 264

Target test facts examples: 9691
Target test pos	 examples: 133
Target test neg examples: 133

Amount of data: 0.2
******************************************
Performing Parameter Learning
******************************************
Refine
0;;companyeconomicsector(A, B) :- acquired(C, A).;true;true
0;true;economicsectorcompany(B, C).;false;false
0;false;companyalsoknownas(A, D).;true;true
0;false,true;economicsectorcompany(B, D).;false;true
0;false,true,false;acquired(A, E), economicsectorcompany(B, E).;false;false
0;false,false;companyceo(A, F).;true;true
0;false,false,true;bankchiefexecutiveceo(G, F).;false;false
0;false,false,false;countryhascompanyoffice(H, A).;false;false
1;;companyeconomicsector(A, B) :- companyalsoknownas(A, C), acquired(A, D).;true;true
1;true;economicsectorcompany(B, D).;false;true
1;true,false;economicsectorcompany(B, C), countryhascompanyoffice(E, C).;false;false
1;false;acquired(A, F), cityhascompanyoffice(G, A).;true;true
1;false,true;cityhascompanyoffice(G, H), economicsectorcompany(B, H).;false;false
1;false,false;acquired(I, A).;true;true
1;false,false,true;economicsectorcompany(B, I).;false;false
1;false,false,false;companyalsoknownas(A, J).;false;false
2;;companyeconomicsector(A, B) :- acquired(A, C), economicsectorcompany(B, C).;false;true
2;false;acquired(A, D).;true;true
2;false,true;companyalsoknownas(A, E), economicsectorcompany(B, E).;true;true
2;false,true,true;countryhascompanyoffice(F, D).;false;false
2;false,true,false;companyalsoknownas(D, G), companyalsoknownas(A, G).;false;false
2;false,false;acquired(H, A), companyceo(H, I).;true;true
2;false,false,true;economicsectorcompany(B, H).;false;false
2;false,false,false;cityhascompanyoffice(J, A).;false;false
3;;companyeconomicsector(A, B) :- acquired(A, C), acquired(C, D).;true;false
3;true;economicsectorcompany(B, D).;true;true
3;true,true;companyceo(C, E).;false;false
3;true,false;cityhascompanyoffice(F, A), companyceo(A, G).;true;true
3;true,false,true;companyalsoknownas(A, H), economicsectorcompany(B, H).;false;false
3;true,false,false;acquired(D, I), economicsectorcompany(B, I).;false;false
4;;companyeconomicsector(A, B) :- acquired(C, A), economicsectorcompany(B, C).;false;true
4;false;acquired(D, A), companyceo(D, E).;true;true
4;false,true;acquired(F, D), companyalsoknownas(F, G).;true;true
4;false,true,true;acquired(A, H).;false;false
4;false,true,false;acquired(I, D), economicsectorcompany(B, I).;false;false
4;false,false;acquired(A, J), economicsectorcompany(B, J).;true;true
4;false,false,true;companyalsoknownas(A, K), acquired(J, L).;false;false
4;false,false,false;companyalsoknownas(A, M), economicsectorcompany(B, M).;false;false
5;;companyeconomicsector(A, B) :- companyalsoknownas(A, C), economicsectorcompany(B, C).;true;true
5;true;acquired(A, D), countryhascompanyoffice(E, D).;false;false
5;false;acquired(A, F), acquired(F, G).;true;true
5;false,true;economicsectorcompany(B, G).;false;true
5;false,true,false;countryhascompanyoffice(H, A), companyalsoknownas(A, I).;false;false
5;false,false;cityhascompanyoffice(J, A), countryhascompanyoffice(K, A).;true;true
5;false,false,true;countryhascompanyoffice(K, L), economicsectorcompany(B, L).;false;false
5;false,false,false;cityhascompanyoffice(M, A), acquired(N, A).;false;false
6;;companyeconomicsector(A, B) :- acquired(A, C), companyceo(C, D).;true;true
6;true;economicsectorcompany(B, C).;false;true
6;true,false;acquired(C, E).;false;false
6;false;companyalsoknownas(A, F), cityhascompanyoffice(G, F).;true;true
6;false,true;acquired(F, H), economicsectorcompany(B, H).;false;true
6;false,true,false;companyceo(A, I), acquired(F, J).;false;false
6;false,false;companyalsoknownas(A, K), acquired(K, L).;false;true
6;false,false,false;companyalsoknownas(A, M).;false;false
7;;companyeconomicsector(A, B) :- acquired(C, A), economicsectorcompany(B, C).;false;true
7;false;acquired(D, A), companyceo(D, E).;true;true
7;false,true;companyalsoknownas(D, F), acquired(G, F).;true;true
7;false,true,true;economicsectorcompany(B, G).;false;false
7;false,true,false;countryhascompanyoffice(H, D).;false;false
7;false,false;cityhascompanyoffice(I, A), acquired(J, A).;true;true
7;false,false,true;acquired(K, J).;false;false
7;false,false,false;companyceo(A, L).;false;false
8;;companyeconomicsector(A, B) :- cityhascompanyoffice(C, A).;true;true
8;true;cityhascompanyoffice(C, D), economicsectorcompany(B, D).;true;false
8;true,true;acquired(D, E), acquired(F, D).;false;true
8;true,true,false;companyalsoknownas(A, G), companyalsoknownas(D, G).;false;false
8;false;acquired(A, H), economicsectorcompany(B, H).;false;true
8;false,false;acquired(I, A), cityhascompanyoffice(J, I).;true;true
8;false,false,true;acquired(K, I), economicsectorcompany(B, K).;false;false
8;false,false,false;acquired(A, L).;false;false
9;;companyeconomicsector(A, B) :- cityhascompanyoffice(C, A).;true;true
9;true;cityhascompanyoffice(C, D), economicsectorcompany(B, D).;true;false
9;true,true;acquired(E, D), companyceo(D, F).;false;false
9;false;companyalsoknownas(A, G), cityhascompanyoffice(H, G).;true;true
9;false,true;economicsectorcompany(B, G).;false;true
9;false,true,false;acquired(I, G).;false;false
9;false,false;acquired(A, J), economicsectorcompany(B, J).;false;true
9;false,false,false;companyalsoknownas(A, K), economicsectorcompany(B, K).;false;false


WILL Produced-Tree #1
% FOR teamplayssport(A, B):
%   if ( teamplaysagainstteam(C, A) )
%   then if ( recursion_teamplayssport(C, B) )
%   | then return 0.7581489350995116;  // std dev = 1.643, 30.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=27 */
%   | else return -0.016851064900487777;  // std dev = 1.620, 24.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=3 */
%   else if ( teamalsoknownas(D, A) )
%   | then if ( recursion_teamplayssport(D, B) )
%   | | then return 0.3581489350995122;  // std dev = 0.707, 2.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */
%   | | else if ( teamplaysagainstteam(A, E), recursion_teamplayssport(E, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.0803711573217344;  // std dev = 1.247, 9.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | else if ( teamplaysinleague(A, F) )
%   | | then return 0.33183314562582816;  // std dev = 0.499, 19.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=9 */
%   | | else if ( athleteplaysforteam(G, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.3581489350995123;  // std dev = 2.236, 20.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=10 */
WILL Produced-Tree #2
% FOR teamplayssport(A, B):
%   if ( teamalsoknownas(C, A), teamplaysagainstteam(A, D) )
%   then if ( recursion_teamplayssport(D, B) )
%   | then return 0.4707757035415012;  // std dev = 1.229, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   | else if ( recursion_teamplayssport(C, B), athleteplaysforteam(E, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.13981214937855654;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   else if ( teamplaysagainstteam(A, F), athleteledsportsteam(G, A) )
%   | then if ( athleteledsportsteam(G, H), recursion_teamplayssport(H, B) )
%   | | then return 0.739207012361511;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | else return -0.15191023320454977;  // std dev = 0.115, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | else if ( teamplaysagainstteam(I, A) )
%   | | then if ( recursion_teamplayssport(I, B) )
%   | | | then return 0.739207012361511;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return 0.01403400446759732;  // std dev = 1.301, 13.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=2 */
%   | | else if ( teamalsoknownas(J, A) )
%   | | | then return 0.11365558876433371;  // std dev = 1.466, 11.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=3 */
%   | | | else return 0.2978875912565142;  // std dev = 3.121, 39.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=19 */
WILL Produced-Tree #3
% FOR teamplayssport(A, B):
%   if ( teamplaysagainstteam(A, C), recursion_teamplayssport(C, B) )
%   then return 0.5268795650591861;  // std dev = 1.323, 29.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=27 */
%   else if ( teamplaysagainstteam(A, D) )
%   | then if ( teamalsoknownas(E, A), recursion_teamplayssport(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( teamalsoknownas(F, D), teamalsoknownas(F, A) )
%   | | | then return -0.1238286182573222;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | | else return -0.05108240349271465;  // std dev = 1.350, 23.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=2 */
%   | else if ( teamplaysagainstteam(G, A), teamplaysinleague(G, H) )
%   | | then if ( recursion_teamplayssport(G, B) )
%   | | | then return 0.5750887498568715;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( athleteledsportsteam(I, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.21491188693355248;  // std dev = 3.476, 50.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=22 */
WILL Produced-Tree #4
% FOR teamplayssport(A, B):
%   if ( teamplaysagainstteam(A, C), teamplaysagainstteam(C, D) )
%   then if ( recursion_teamplayssport(D, B) )
%   | then if ( teamplaysinleague(C, E) )
%   | | then return 0.3355549386728523;  // std dev = 1.950, 37.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=29 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( athleteledsportsteam(F, A), teamplaysinleague(A, G) )
%   | | then if ( teamalsoknownas(H, A), recursion_teamplayssport(H, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.11713515343112836;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else if ( teamplaysagainstteam(D, I), recursion_teamplayssport(I, B) )
%   | | | then return -0.13541570503063607;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | | else return -0.13270367347636633;  // std dev = 0.023, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   else return 0.18047005788102205;  // std dev = 3.481, 51.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=23 */
WILL Produced-Tree #5
% FOR teamplayssport(A, B):
%   if ( teamplaysagainstteam(C, A), recursion_teamplayssport(C, B) )
%   then return 0.28888867871758145;  // std dev = 1.423, 30.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=27 */
%   else if ( teamplaysagainstteam(D, A), teamplaysinleague(D, E) )
%   | then if ( teamplaysagainstteam(F, D), teamalsoknownas(G, F) )
%   | | then if ( teamplaysagainstteam(A, H) )
%   | | | then return -0.016123335630801545;  // std dev = 1.438, 24.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=3 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( teamplaysagainstteam(A, I), recursion_teamplayssport(I, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( teamalsoknownas(J, A), recursion_teamplayssport(J, B) )
%   | | | then return 0.21764574122089753;  // std dev = 0.707, 2.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */
%   | | | else return 0.13579229418129862;  // std dev = 3.395, 48.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=21 */
WILL Produced-Tree #6
% FOR teamplayssport(A, B):
%   if ( teamalsoknownas(C, A), recursion_teamplayssport(C, B) )
%   then if ( teamplaysagainstteam(A, D), athleteplaysforteam(E, D) )
%   | then return 0.10887557202922085;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | else return 0.17154204531130435;  // std dev = 0.707, 2.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */
%   else if ( teamplaysagainstteam(A, F), teamplaysagainstteam(F, G) )
%   | then if ( recursion_teamplayssport(G, B) )
%   | | then return 0.22459051039508077;  // std dev = 1.688, 33.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=26 */
%   | | else if ( athleteplaysforteam(H, A), teamalsoknownas(I, A) )
%   | | | then return -0.09714836937779323;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | | else return -0.11294792635016376;  // std dev = 0.028, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | else if ( athleteledsportsteam(J, A), athleteplaysforteam(K, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( athleteledsportsteam(L, A), teamplaysagainstteam(M, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.11102435940731373;  // std dev = 3.399, 49.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=22 */
WILL Produced-Tree #7
% FOR teamplayssport(A, B):
%   if ( teamplaysagainstteam(A, C), teamplaysinleague(C, D) )
%   then if ( recursion_teamplayssport(C, B) )
%   | then return 0.21132611495591352;  // std dev = 1.344, 29.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=27 */
%   | else if ( teamplaysagainstteam(C, E) )
%   | | then return -0.05963789207108744;  // std dev = 1.295, 24.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=2 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( teamalsoknownas(F, A), athleteledsportsteam(G, F) )
%   | then if ( teamplaysagainstteam(F, H), recursion_teamplayssport(H, B) )
%   | | then return 0.6326554545555897;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( teamalsoknownas(I, A), teamplaysagainstteam(I, J) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( teamalsoknownas(K, A) )
%   | | | then return -0.08524522907727224;  // std dev = 1.282, 10.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | | | else return 0.11769978636619174;  // std dev = 3.126, 40.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=20 */
WILL Produced-Tree #8
% FOR teamplayssport(A, B):
%   if ( teamplaysagainstteam(C, A), recursion_teamplayssport(C, B) )
%   then return 0.14476695276937146;  // std dev = 1.413, 30.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=27 */
%   else if ( teamplaysagainstteam(D, A), teamplaysinleague(D, E) )
%   | then if ( teamalsoknownas(F, D), teamplaysagainstteam(G, F) )
%   | | then if ( recursion_teamplayssport(G, B) )
%   | | | then return 0.2333409535443877;  // std dev = 0.870, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return -0.11240583992290071;  // std dev = 0.106, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | else if ( athleteplaysforteam(H, D) )
%   | | | then return -0.01821487092096169;  // std dev = 0.866, 10.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=1 */
%   | | | else return -0.10198946360501458;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( athleteledsportsteam(I, A), teamplaysagainstteam(J, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( teamplaysinleague(A, K) )
%   | | | then return 0.040158097626763124;  // std dev = 2.445, 27.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=11 */
%   | | | else return 0.08828131557251402;  // std dev = 2.395, 23.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=11 */
WILL Produced-Tree #9
% FOR teamplayssport(A, B):
%   if ( athleteledsportsteam(C, A) )
%   then if ( athleteledsportsteam(C, D), recursion_teamplayssport(D, B) )
%   | then if ( teamplaysagainstteam(D, E), teamplaysagainstteam(F, D) )
%   | | then return 0.2186961958672364;  // std dev = 0.257, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.2022409306143466;  // std dev = 0.670, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else if ( teamplaysagainstteam(A, G), recursion_teamplayssport(G, B) )
%   | then return 0.14294068572263433;  // std dev = 0.919, 15.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=14 */
%   | else if ( teamplaysagainstteam(H, A), athleteledsportsteam(I, H) )
%   | | then if ( teamplaysagainstteam(J, H), recursion_teamplayssport(J, B) )
%   | | | then return 0.272259493660252;  // std dev = 1.001, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return -0.09213673276847596;  // std dev = 0.020, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else if ( teamplaysagainstteam(A, K) )
%   | | | then return -0.09850503178989849;  // std dev = 0.006, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | | else return 0.047655831809665955;  // std dev = 3.425, 50.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=22 */
WILL Produced-Tree #10
% FOR teamplayssport(A, B):
%   if ( athleteledsportsteam(C, A) )
%   then if ( athleteledsportsteam(C, D), recursion_teamplayssport(D, B) )
%   | then if ( teamplaysagainstteam(E, D), teamplaysinleague(D, F) )
%   | | then return 0.18458003223217798;  // std dev = 0.235, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.17897137550734196;  // std dev = 0.640, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else if ( teamalsoknownas(G, A), athleteledsportsteam(H, G) )
%   | then if ( recursion_teamplayssport(G, B) )
%   | | then return 0.2335886906446324;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else if ( teamplaysagainstteam(I, G) )
%   | | | then return 0.19308059999629024;  // std dev = 0.372, 2.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( teamplaysagainstteam(A, J), recursion_teamplayssport(J, B) )
%   | | then return 0.1122473180579511;  // std dev = 0.914, 14.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=13 */
%   | | else if ( teamalsoknownas(K, A), recursion_teamplayssport(K, B) )
%   | | | then return -0.3792026770570399;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | | else return 0.03319752754092637;  // std dev = 3.563, 62.000 (wgt'ed) examples reached here.  /* #neg=38 #pos=24 */


Results
   AUC ROC   = 0.852903
   AUC PR    = 0.861757
   CLL	      = -0.471489
   Precision = 0.929577 at threshold = 0.5
   Recall    = 0.496241
   F1        = 0.647059


Total learning time: 8.478 seconds
Total inference time: 5.27 seconds
AUC ROC: 0.852903


Results scoring model
   AUC ROC   = 0.875
   AUC PR    = 0.890068
   CLL	      = -0.4425
   Precision = 0.935484 at threshold = 0.5
   Recall    = 0.557692
   F1        = 0.698795


Total scoring time: 3.942 seconds
Parameter learned model CLL: -0.4425


Structure after Parameter Learning
[['teamplayssport(A, B)', {'': 'teamplaysagainstteam(C, A)', 'true': 'recursion_teamplayssport(C, B)', 'false': 'teamalsoknownas(D, A)', 'false,true': 'recursion_teamplayssport(D, B)', 'false,true,false': 'teamplaysagainstteam(A, E), recursion_teamplayssport(E, B)', 'false,false': 'teamplaysinleague(A, F)', 'false,false,false': 'athleteplaysforteam(G, A)'}, {'true,true': [1.643, 3, 27], 'true,false': [1.62, 21, 3], 'false,true,true': [0.707, 1, 1], 'false,true,false,true': [0.0, 0, 0], 'false,true,false,false': [1.247, 7, 2], 'false,false,true': [0.499, 10, 9], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [2.236, 10, 10]}], ['teamplayssport(A, B)', {'': 'teamalsoknownas(C, A), teamplaysagainstteam(A, D)', 'true': 'recursion_teamplayssport(D, B)', 'true,false': 'recursion_teamplayssport(C, B), athleteplaysforteam(E, C)', 'false': 'teamplaysagainstteam(A, F), athleteledsportsteam(G, A)', 'false,true': 'athleteledsportsteam(G, H), recursion_teamplayssport(H, B)', 'false,false': 'teamplaysagainstteam(I, A)', 'false,false,true': 'recursion_teamplayssport(I, B)', 'false,false,false': 'teamalsoknownas(J, A)'}, {'true,true': [1.229, 2, 5], 'true,false,true': [0.0, 0, 0], 'true,false,false': [0.0, 1, 0], 'false,true,true': [0.0, 0, 11], 'false,true,false': [0.115, 10, 0], 'false,false,true,true': [0.0, 0, 12], 'false,false,true,false': [1.301, 11, 2], 'false,false,false,true': [1.466, 8, 3], 'false,false,false,false': [3.121, 20, 19]}], ['teamplayssport(A, B)', {'': 'teamplaysagainstteam(A, C), recursion_teamplayssport(C, B)', 'false': 'teamplaysagainstteam(A, D)', 'false,true': 'teamalsoknownas(E, A), recursion_teamplayssport(E, B)', 'false,true,false': 'teamalsoknownas(F, D), teamalsoknownas(F, A)', 'false,false': 'teamplaysagainstteam(G, A), teamplaysinleague(G, H)', 'false,false,true': 'recursion_teamplayssport(G, B)', 'false,false,false': 'athleteledsportsteam(I, A)'}, {'true': [1.323, 2, 27], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [0.0, 1, 0], 'false,true,false,false': [1.35, 21, 2], 'false,false,true,true': [0.0, 0, 1], 'false,false,true,false': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [3.476, 28, 22]}], ['teamplayssport(A, B)', {'': 'teamplaysagainstteam(A, C), teamplaysagainstteam(C, D)', 'true': 'recursion_teamplayssport(D, B)', 'true,true': 'teamplaysinleague(C, E)', 'true,false': 'athleteledsportsteam(F, A), teamplaysinleague(A, G)', 'true,false,true': 'teamalsoknownas(H, A), recursion_teamplayssport(H, B)', 'true,false,false': 'teamplaysagainstteam(D, I), recursion_teamplayssport(I, B)'}, {'true,true,true': [1.95, 8, 29], 'true,true,false': [0.0, 0, 0], 'true,false,true,true': [0.0, 0, 0], 'true,false,true,false': [0.0, 6, 0], 'true,false,false,true': [0.0, 1, 0], 'true,false,false,false': [0.023, 9, 0], 'false': [3.481, 28, 23]}], ['teamplayssport(A, B)', {'': 'teamplaysagainstteam(C, A), recursion_teamplayssport(C, B)', 'false': 'teamplaysagainstteam(D, A), teamplaysinleague(D, E)', 'false,true': 'teamplaysagainstteam(F, D), teamalsoknownas(G, F)', 'false,true,true': 'teamplaysagainstteam(A, H)', 'false,false': 'teamplaysagainstteam(A, I), recursion_teamplayssport(I, B)', 'false,false,false': 'teamalsoknownas(J, A), recursion_teamplayssport(J, B)'}, {'true': [1.423, 3, 27], 'false,true,true,true': [1.438, 21, 3], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.707, 1, 1], 'false,false,false,false': [3.395, 27, 21]}], ['teamplayssport(A, B)', {'': 'teamalsoknownas(C, A), recursion_teamplayssport(C, B)', 'true': 'teamplaysagainstteam(A, D), athleteplaysforteam(E, D)', 'false': 'teamplaysagainstteam(A, F), teamplaysagainstteam(F, G)', 'false,true': 'recursion_teamplayssport(G, B)', 'false,true,false': 'athleteplaysforteam(H, A), teamalsoknownas(I, A)', 'false,false': 'athleteledsportsteam(J, A), athleteplaysforteam(K, A)', 'false,false,false': 'athleteledsportsteam(L, A), teamplaysagainstteam(M, A)'}, {'true,true': [0.866, 1, 3], 'true,false': [0.707, 1, 1], 'false,true,true': [1.688, 7, 26], 'false,true,false,true': [0.0, 1, 0], 'false,true,false,false': [0.028, 15, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [3.399, 27, 22]}], ['teamplayssport(A, B)', {'': 'teamplaysagainstteam(A, C), teamplaysinleague(C, D)', 'true': 'recursion_teamplayssport(C, B)', 'true,false': 'teamplaysagainstteam(C, E)', 'false': 'teamalsoknownas(F, A), athleteledsportsteam(G, F)', 'false,true': 'teamplaysagainstteam(F, H), recursion_teamplayssport(H, B)', 'false,false': 'teamalsoknownas(I, A), teamplaysagainstteam(I, J)', 'false,false,false': 'teamalsoknownas(K, A)'}, {'true,true': [1.344, 2, 27], 'true,false,true': [1.295, 22, 2], 'true,false,false': [0.0, 0, 0], 'false,true,true': [0.0, 0, 1], 'false,true,false': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [1.282, 8, 2], 'false,false,false,false': [3.126, 20, 20]}], ['teamplayssport(A, B)', {'': 'teamplaysagainstteam(C, A), recursion_teamplayssport(C, B)', 'false': 'teamplaysagainstteam(D, A), teamplaysinleague(D, E)', 'false,true': 'teamalsoknownas(F, D), teamplaysagainstteam(G, F)', 'false,true,true': 'recursion_teamplayssport(G, B)', 'false,true,false': 'athleteplaysforteam(H, D)', 'false,false': 'athleteledsportsteam(I, A), teamplaysagainstteam(J, A)', 'false,false,false': 'teamplaysinleague(A, K)'}, {'true': [1.413, 3, 27], 'false,true,true,true': [0.87, 2, 2], 'false,true,true,false': [0.106, 9, 0], 'false,true,false,true': [0.866, 9, 1], 'false,true,false,false': [0.0, 1, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [2.445, 16, 11], 'false,false,false,false': [2.395, 12, 11]}], ['teamplayssport(A, B)', {'': 'athleteledsportsteam(C, A)', 'true': 'athleteledsportsteam(C, D), recursion_teamplayssport(D, B)', 'true,true': 'teamplaysagainstteam(D, E), teamplaysagainstteam(F, D)', 'false': 'teamplaysagainstteam(A, G), recursion_teamplayssport(G, B)', 'false,false': 'teamplaysagainstteam(H, A), athleteledsportsteam(I, H)', 'false,false,true': 'teamplaysagainstteam(J, H), recursion_teamplayssport(J, B)', 'false,false,false': 'teamplaysagainstteam(A, K)'}, {'true,true,true': [0.257, 0, 13], 'true,true,false': [0.0, 0, 0], 'true,false': [0.67, 11, 0], 'false,true': [0.919, 1, 14], 'false,false,true,true': [1.001, 2, 3], 'false,false,true,false': [0.02, 6, 0], 'false,false,false,true': [0.006, 4, 0], 'false,false,false,false': [3.425, 28, 22]}], ['teamplayssport(A, B)', {'': 'athleteledsportsteam(C, A)', 'true': 'athleteledsportsteam(C, D), recursion_teamplayssport(D, B)', 'true,true': 'teamplaysagainstteam(E, D), teamplaysinleague(D, F)', 'false': 'teamalsoknownas(G, A), athleteledsportsteam(H, G)', 'false,true': 'recursion_teamplayssport(G, B)', 'false,true,false': 'teamplaysagainstteam(I, G)', 'false,false': 'teamplaysagainstteam(A, J), recursion_teamplayssport(J, B)', 'false,false,false': 'teamalsoknownas(K, A), recursion_teamplayssport(K, B)'}, {'true,true,true': [0.235, 0, 13], 'true,true,false': [0.0, 0, 0], 'true,false': [0.64, 11, 0], 'false,true,true': [0.0, 0, 1], 'false,true,false,true': [0.372, 1, 1], 'false,true,false,false': [0.0, 0, 0], 'false,false,true': [0.914, 1, 13], 'false,false,false,true': [0.0, 1, 0], 'false,false,false,false': [3.563, 38, 24]}]]
[{'': [0.2469135802469151, 0.246400000000001], 'true': [0.09000000000000104, 0.10937499999999985], 'false': [0.1983471074380164, 0.24983563445101864], 'false,false': [0.2493074792243767, 0.25], 'false,false,false': [nan, 0.25], 'false,true': [0.25, 0.17283950617283952], 'false,true,false': [nan, 0.17283950617283952]}, {'': [0.22955801571364345, 0.22415866085425798], 'true': [0.21574982719175884, 0.0], 'false': [0.19869959467789028, 0.23117558183740414], 'false,false': [0.19895093018023316, 0.24362965371712406], 'false,false,false': [0.1953261025701537, 0.24978661748245548], 'false,false,true': [0.0, 0.13017751479289935], 'false,true': [-8.074349270001139e-17, 0.0013172726903468435], 'true,false': [nan, 0.0]}, {'': [0.06031464526035804, 0.20373980375743053], 'false': [0.07618929124331365, 0.23937176513281222], 'false,false': [0.0, 0.24161552646320797], 'false,false,false': [nan, 0.24161552646320797], 'false,true': [nan, 0.07618929124331365], 'false,true,false': [0.0, 0.07928136863335032], 'false,false,true': [0.0, nan]}, {'': [0.11685679855553602, 0.2376570782504369], 'true': [0.1027489642788185, 9.231568819125305e-05], 'true,true': [0.1027489642788185, nan], 'true,false': [-2.3129646346357427e-18, 5.361878945337739e-05], 'true,false,false': [0.0, 5.8840921210843535e-05], 'true,false,true': [nan, -2.3129646346357427e-18]}, {'': [0.06749968594780369, 0.19587451893657465], 'false': [0.08615527480441308, 0.24072877320212477], 'false,false': [nan, 0.24072877320212477], 'false,false,false': [0.24999999999999997, 0.24007447261385595], 'false,true': [0.08615527480441308, nan], 'false,true,true': [0.08615527480441308, nan]}, {'': [0.20920601930524754, 0.15945662253031118], 'true': [0.18750000000000003, 0.25], 'false': [0.08307394021594461, 0.23583256320499382], 'false,false': [nan, 0.23583256320499382], 'false,false,false': [nan, 0.23583256320499382], 'false,true': [0.08633608730432502, 6.420664537403094e-05], 'false,true,false': [0.0, 5.288546336627194e-05]}, {'': [0.08391568337583545, 0.23628436516706064], 'false': [0.0, 0.23495848616088275], 'false,false': [nan, 0.23495848616088275], 'false,false,false': [0.16439778047720077, 0.24436132672313365], 'true': [0.06232350467849648, 0.06983220810644582], 'true,false': [0.06983220810644582, nan], 'false,true': [0.0, nan]}, {'': [0.06656397865977833, 0.18513875571105323], 'false': [0.07736226051274048, 0.23492873008073464], 'false,false': [nan, 0.23492873008073464], 'false,false,false': [0.22149179014710801, 0.2494519733163073], 'false,true': [0.08452200534930698, 0.06868820584075197], 'false,true,true': [0.18914858880028554, 0.0012395030724206186], 'false,true,false': [0.07491900984488364, 0.0]}, {'': [0.06544858390009749, 0.1769147480400147], 'false': [0.05624781791352819, 0.20288948254825084], 'false,false': [0.12410977408035259, 0.21870965291719507], 'false,false,false': [1.0027253484408069e-05, 0.23462317867042745], 'false,false,true': [0.20053513021063338, 6.533647080191861e-05], 'true': [0.005077371405768241, 0.04081951224024483], 'true,true': [0.005077371405768241, nan]}, {'': [0.052186610927339235, 0.17499600794208045], 'false': [0.046415388129629816, 0.17899249957452726], 'false,false': [0.05972479613529581, 0.20416431633670717], 'false,false,false': [0.0, 0.20475770301017396], 'true': [0.004262567794496621, 0.03723223566038694], 'false,true': [0.0, 0.06907611372511996], 'false,true,false': [0.06907611372511996, nan], 'true,true': [0.004262567794496621, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
1;;teamplayssport(A, B) :- teamalsoknownas(C, A), teamplaysagainstteam(A, D).;true;true
1;true;recursion_teamplayssport(D, B).;true;true
1;false;teamplaysagainstteam(A, F), athleteledsportsteam(G, A).;true;true
1;false,true;athleteledsportsteam(G, H), recursion_teamplayssport(H, B).;true;true
1;false,false;teamplaysagainstteam(I, A).;true;true
1;false,false,true;recursion_teamplayssport(I, B).;true;true
2;;teamplayssport(A, B) :- teamplaysagainstteam(A, C), recursion_teamplayssport(C, B).;true;true
2;false;teamplaysagainstteam(A, D).;true;true
2;false,true;teamalsoknownas(F, D), teamalsoknownas(F, A).;true;true
2;false,false;teamplaysagainstteam(G, A), teamplaysinleague(G, H).;true;true
3;;teamplayssport(A, B) :- teamplaysagainstteam(A, C), teamplaysagainstteam(C, D).;true;true
3;true;recursion_teamplayssport(D, B).;true;true
3;true,false;athleteledsportsteam(F, A), teamplaysinleague(A, G).;true;true
3;true,false,false;teamplaysagainstteam(D, I), recursion_teamplayssport(I, B).;true;true
5;;teamplayssport(A, B) :- teamalsoknownas(C, A), recursion_teamplayssport(C, B).;true;true
5;false;teamplaysagainstteam(A, F), teamplaysagainstteam(F, G).;true;true
5;false,true;recursion_teamplayssport(G, B).;true;true
5;false,true,false;athleteplaysforteam(H, A), teamalsoknownas(I, A).;true;true
6;;teamplayssport(A, B) :- teamplaysagainstteam(A, C), teamplaysinleague(C, D).;true;true
6;false;teamalsoknownas(F, A), athleteledsportsteam(G, F).;true;true
7;;teamplayssport(A, B) :- teamplaysagainstteam(C, A), recursion_teamplayssport(C, B).;true;true
7;false;teamplaysagainstteam(D, A), teamplaysinleague(D, E).;true;true
7;false,true;teamalsoknownas(F, D), teamplaysagainstteam(G, F).;true;true
7;false,true,true;recursion_teamplayssport(G, B).;true;true
7;false,true,false;athleteplaysforteam(H, D).;true;true
8;;teamplayssport(A, B) :- athleteledsportsteam(C, A).;true;true
8;false;teamplaysagainstteam(A, G), recursion_teamplayssport(G, B).;true;true
8;false,false;teamplaysagainstteam(H, A), athleteledsportsteam(I, H).;true;true
8;false,false,true;teamplaysagainstteam(J, H), recursion_teamplayssport(J, B).;true;true
8;false,false,false;teamplaysagainstteam(A, K).;true;true
9;;teamplayssport(A, B) :- athleteledsportsteam(C, A).;true;true
9;false;teamalsoknownas(G, A), athleteledsportsteam(H, G).;true;true
9;false,true;recursion_teamplayssport(G, B).;true;true
9;false,false;teamplaysagainstteam(A, J), recursion_teamplayssport(J, B).;true;true
9;false,false,false;teamalsoknownas(K, A), recursion_teamplayssport(K, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR teamplayssport(A, B):
%   if ( athleteplayssport(C, B), athleteledsportsteam(C, D) )
%   then if ( teamplaysinleague(A, E), athleteplaysinleague(C, E) )
%   | then return 0.822434649385226;  // std dev = 0.186, 28.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=27 */
%   | else if ( teamplaysinleague(A, F), athleteplaysinleague(G, F) )
%   | | then if ( athleteplayssport(G, H), recursion_teamplayssport(A, H) )
%   | | | then return -0.1418510649004878;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | | else return 0.5248156017661789;  // std dev = 1.155, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | | else if ( athleteplaysforteam(C, D), teamalsoknownas(D, I) )
%   | | | then return 0.39148226843284567;  // std dev = 1.932, 15.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=8 */
%   | | | else return 0.7581489350995123;  // std dev = 0.949, 10.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   else if ( teamalsoknownas(A, J), recursion_teamplayssport(J, B) )
%   | then return 0.19148226843284552;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | else if ( teamplaysinleague(A, K) )
%   | | then return -0.1033895264389493;  // std dev = 0.192, 26.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=1 */
%   | | else if ( athleteplayssport(L, B) )
%   | | | then return 0.0010060779566550668;  // std dev = 0.926, 7.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=1 */
%   | | | else return 0.19148226843284552;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #2
% FOR teamplayssport(A, B):
%   if ( teamalsoknownas(C, A), teamplaysagainstteam(A, D) )
%   then if ( recursion_teamplayssport(D, B) )
%   | then if ( teamalsoknownas(A, E) )
%   | | then return 0.12112079953794791;  // std dev = 0.839, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | else return 0.7266248616643611;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else return -0.12972532762163938;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   else if ( teamplaysagainstteam(A, F), athleteledsportsteam(G, A) )
%   | then if ( athleteledsportsteam(G, H), recursion_teamplayssport(H, B) )
%   | | then return 0.731625232383537;  // std dev = 0.052, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | else return -0.12801305198434015;  // std dev = 0.007, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | else if ( teamplaysagainstteam(I, A) )
%   | | then if ( recursion_teamplayssport(I, B) )
%   | | | then return 0.7495882843875701;  // std dev = 0.152, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return 0.0017764576098225177;  // std dev = 1.159, 13.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=2 */
%   | | else if ( athleteplayssport(J, B), athleteledsportsteam(J, K) )
%   | | | then return 0.4485434312839035;  // std dev = 2.398, 28.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=19 */
%   | | | else return -0.005683675806558785;  // std dev = 1.580, 22.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=3 */
WILL Produced-Tree #3
% FOR teamplayssport(A, B):
%   if ( teamplaysagainstteam(A, C), recursion_teamplayssport(C, B) )
%   then if ( teamalsoknownas(A, D), recursion_teamplayssport(D, B) )
%   | then return 0.15998961962155805;  // std dev = 0.806, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | else if ( athleteledsportsteam(E, A), athleteplayssport(E, B) )
%   | | then return 0.5613308495544177;  // std dev = 0.001, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return 0.5938064582867338;  // std dev = 0.071, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   else if ( teamplaysagainstteam(A, F) )
%   | then if ( teamalsoknownas(G, F), teamalsoknownas(G, A) )
%   | | then return -0.11576968179300708;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( athleteplayssport(H, B), athleteledsportsteam(H, I) )
%   | | | then return 0.06792525643814398;  // std dev = 1.103, 9.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | | | else return -0.12393418517089642;  // std dev = 0.026, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | else if ( teamplaysagainstteam(J, A), teamplaysinleague(J, K) )
%   | | then return 0.6284553910642259;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else if ( athleteplayssport(L, B), athleteledsportsteam(L, M) )
%   | | | then return 0.36047623338610635;  // std dev = 2.383, 28.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=19 */
%   | | | else return -0.004993591414467893;  // std dev = 1.580, 22.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=3 */
WILL Produced-Tree #4
% FOR teamplayssport(A, B):
%   if ( teamplaysagainstteam(A, C), teamplaysagainstteam(C, D) )
%   then if ( recursion_teamplayssport(D, B) )
%   | then if ( teamplaysagainstteam(A, E), recursion_teamplayssport(E, B) )
%   | | then return 0.3975342245541352;  // std dev = 0.194, 29.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=27 */
%   | | else return 0.09243462819641104;  // std dev = 0.375, 8.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | else return -0.11671966663831808;  // std dev = 0.024, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   else if ( athleteplayssport(F, B), athleteledsportsteam(F, G) )
%   | then if ( athleteplaysforteam(F, H), teamalsoknownas(G, H) )
%   | | then return -0.1544585365516138;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else if ( teamalsoknownas(A, I) )
%   | | | then return 0.20145645017573044;  // std dev = 1.312, 8.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=5 */
%   | | | else return 0.46440295304124507;  // std dev = 1.272, 16.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=14 */
%   | else if ( teamalsoknownas(A, J), teamalsoknownas(J, A) )
%   | | then return 0.19254492144727756;  // std dev = 0.786, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | else if ( teamplaysinleague(A, K) )
%   | | | then return -0.12852465801974491;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | | else return 0.03218102093256935;  // std dev = 1.275, 11.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=2 */
WILL Produced-Tree #5
% FOR teamplayssport(A, B):
%   if ( athleteplayssport(C, B), athleteledsportsteam(C, D) )
%   then if ( teamalsoknownas(E, A), teamalsoknownas(A, F) )
%   | then if ( athleteplaysforteam(C, D), teamalsoknownas(D, G) )
%   | | then return 0.004826222096425414;  // std dev = 1.064, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | else return -0.13950682461161043;  // std dev = 0.794, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | else if ( teamplaysinleague(A, H), teamplaysinleague(D, H) )
%   | | then return 0.34666471936389043;  // std dev = 0.141, 36.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=34 */
%   | | else if ( teamplaysinleague(A, I) )
%   | | | then return 6.713005917500237E-4;  // std dev = 1.234, 10.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=3 */
%   | | | else return 0.28787592720026134;  // std dev = 1.278, 11.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=8 */
%   else if ( athleteplaysforteam(J, A) )
%   | then return -0.11495507402948046;  // std dev = 0.053, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | else if ( teamalsoknownas(K, A), teamalsoknownas(A, K) )
%   | | then return 0.16767611361267845;  // std dev = 0.782, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | else if ( teamplaysagainstteam(A, L), teamalsoknownas(L, M) )
%   | | | then return 0.1101379717168484;  // std dev = 0.527, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | else return -0.04152326634400624;  // std dev = 1.316, 22.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=2 */
WILL Produced-Tree #6
% FOR teamplayssport(A, B):
%   if ( teamalsoknownas(C, A), recursion_teamplayssport(C, B) )
%   then return 0.19029420350062812;  // std dev = 0.819, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   else if ( teamplaysagainstteam(A, D), teamplaysagainstteam(D, E) )
%   | then if ( recursion_teamplayssport(E, B) )
%   | | then if ( teamplaysagainstteam(A, F), recursion_teamplayssport(F, B) )
%   | | | then return 0.2609691352755581;  // std dev = 0.810, 25.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=24 */
%   | | | else return 0.05875529346629573;  // std dev = 1.027, 8.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | | else if ( athleteplaysforteam(G, A), teamalsoknownas(H, A) )
%   | | | then return -0.08466721247181158;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | | else return -0.10408074376350852;  // std dev = 0.143, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | else if ( athleteplayssport(I, B), athleteledsportsteam(I, J) )
%   | | then if ( athleteplaysforteam(I, K), teamalsoknownas(J, K) )
%   | | | then return -0.1464622371991906;  // std dev = 0.853, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else return 0.2369984702304603;  // std dev = 1.782, 24.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=19 */
%   | | else if ( teamplaysinleague(A, L) )
%   | | | then return -0.12342662375417648;  // std dev = 0.081, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | | | else return 0.05065628588538692;  // std dev = 1.262, 10.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
WILL Produced-Tree #7
% FOR teamplayssport(A, B):
%   if ( teamplaysagainstteam(A, C), teamplaysinleague(C, D) )
%   then if ( teamplaysagainstteam(A, E), recursion_teamplayssport(E, B) )
%   | then return 0.19458833876556883;  // std dev = 0.177, 29.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=27 */
%   | else if ( athleteplaysforteam(F, A), athleteplayssport(G, B) )
%   | | then if ( athleteplayssport(F, H), recursion_teamplayssport(A, H) )
%   | | | then return -0.11152928857408066;  // std dev = 0.099, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | | else return 0.1376903786563574;  // std dev = 0.935, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   | | else return -0.10434586391208243;  // std dev = 0.040, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else if ( teamalsoknownas(I, A), athleteledsportsteam(J, I) )
%   | then return 0.7443457616611473;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( teamalsoknownas(K, A) )
%   | | then if ( teamalsoknownas(A, K), athleteplayssport(L, B) )
%   | | | then return -0.06708505860821111;  // std dev = 1.042, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   | | | else return -0.21970779260881382;  // std dev = 0.280, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else if ( athleteplayssport(M, B), athleteledsportsteam(M, N) )
%   | | | then return 0.19465595461548735;  // std dev = 1.613, 23.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=18 */
%   | | | else return -0.014846524691013337;  // std dev = 1.295, 17.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=2 */
WILL Produced-Tree #8
% FOR teamplayssport(A, B):
%   if ( teamplaysagainstteam(C, A), recursion_teamplayssport(C, B) )
%   then return 0.15513283266422526;  // std dev = 0.187, 30.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=27 */
%   else if ( teamplaysagainstteam(D, A), teamplaysinleague(D, E) )
%   | then if ( teamalsoknownas(F, D), teamplaysagainstteam(G, F) )
%   | | then if ( recursion_teamplayssport(G, B) )
%   | | | then return 0.14896674460555612;  // std dev = 0.705, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return -0.08552985751947145;  // std dev = 0.062, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | else if ( athleteplaysforteam(H, D) )
%   | | | then return -0.045795475135962146;  // std dev = 0.667, 10.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=1 */
%   | | | else return -0.078301702172981;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( teamalsoknownas(I, A) )
%   | | then if ( teamalsoknownas(A, I), athleteplayssport(J, B) )
%   | | | then return 0.0381358489006483;  // std dev = 1.196, 7.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=3 */
%   | | | else return -0.18802112617769032;  // std dev = 0.254, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else if ( athleteplayssport(K, B), athleteplaysforteam(K, L) )
%   | | | then return 0.12935335952079885;  // std dev = 1.841, 27.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=18 */
%   | | | else return -0.04586382878680136;  // std dev = 0.922, 12.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=1 */
WILL Produced-Tree #9
% FOR teamplayssport(A, B):
%   if ( athleteledsportsteam(C, A) )
%   then if ( athleteplayssport(D, B), athleteplaysforteam(D, A) )
%   | then return 0.17120418184509303;  // std dev = 0.024, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | else if ( teamplaysagainstteam(A, E), teamalsoknownas(F, E) )
%   | | then if ( teamalsoknownas(E, F) )
%   | | | then return -0.16234440461142244;  // std dev = 0.533, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | else return -0.07006947656103234;  // std dev = 0.307, 8.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */
%   | | else return 0.003022095636201002;  // std dev = 0.191, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   else if ( teamplaysagainstteam(A, G), recursion_teamplayssport(G, B) )
%   | then return 0.1545789074272176;  // std dev = 0.163, 15.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=14 */
%   | else if ( teamplaysagainstteam(H, A), athleteledsportsteam(I, H) )
%   | | then if ( teamplaysagainstteam(J, H), recursion_teamplayssport(J, B) )
%   | | | then return 0.22855933553219954;  // std dev = 0.842, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return -0.09550478820309093;  // std dev = 0.110, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else if ( teamplaysagainstteam(A, K) )
%   | | | then return -0.08477543811246319;  // std dev = 0.017, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | | else return 0.03746297034191682;  // std dev = 2.466, 50.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=22 */
WILL Produced-Tree #10
% FOR teamplayssport(A, B):
%   if ( athleteledsportsteam(C, A) )
%   then if ( athleteplayssport(D, B), athleteledsportsteam(D, A) )
%   | then return 0.12094882780347338;  // std dev = 0.097, 11.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=10 */
%   | else if ( teamplaysagainstteam(A, E), recursion_teamplayssport(E, B) )
%   | | then return -0.004743924778864345;  // std dev = 0.619, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else return -0.0821318631219232;  // std dev = 0.026, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   else if ( teamalsoknownas(F, A), athleteledsportsteam(G, F) )
%   | then if ( recursion_teamplayssport(F, B) )
%   | | then return 0.1440983779364865;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else return 0.25110848987204304;  // std dev = 0.439, 2.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */
%   | else if ( teamplaysagainstteam(A, H), recursion_teamplayssport(H, B) )
%   | | then if ( teamalsoknownas(A, I) )
%   | | | then return 0.03442163425175663;  // std dev = 0.576, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.15703266837580332;  // std dev = 0.188, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | else if ( teamalsoknownas(J, A), recursion_teamplayssport(J, B) )
%   | | | then return -0.11930951283425208;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | | else return 0.019982015311417103;  // std dev = 2.588, 62.000 (wgt'ed) examples reached here.  /* #neg=38 #pos=24 */


Results
   AUC ROC   = 0.942705
   AUC PR    = 0.937624
   CLL	      = -0.344832
   Precision = 0.87218 at threshold = 0.5
   Recall    = 0.87218
   F1        = 0.87218


Total learning time: 138.567 seconds
Total inference time: 6.284 seconds
AUC ROC: 0.942705


Results scoring model
   AUC ROC   = 0.973003
   AUC PR    = 0.976247
   CLL	      = -0.29035
   Precision = 0.92 at threshold = 0.5
   Recall    = 0.884615
   F1        = 0.901961


Total scoring time: 4.929 seconds
Refined model CLL: -0.29035


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.942705
   AUC PR    = 0.937624
   CLL	      = -0.344832
   Precision = 0.87218 at threshold = 0.5
   Recall    = 0.87218
   F1        = 0.87218


Total learning time: 155.916 seconds
Total inference time: 6.284 seconds
AUC ROC: 0.942705
Total revision time: 155.916
Best scored revision CLL: -0.29035


Dataset: 10_nell_finances_nell_sports, Fold: 2, Type: Transfer (trRDN-B), Time: 20:34:27
{'AUC ROC': 0.942705, 'AUC PR': 0.937624, 'CLL': -0.344832, 'Precision': [0.87218, 0.5], 'Recall': 0.87218, 'F1': 0.87218, 'Learning time': 155.916, 'Inference time': 6.284, 'parameter_0.2': {'AUC ROC': 0.852903, 'AUC PR': 0.861757, 'CLL': -0.471489, 'Precision': [0.929577, 0.5], 'Recall': 0.496241, 'F1': 0.647059, 'Learning time': 8.478, 'Inference time': 5.27}}


Amount of data: 0.4
******************************************
Performing Parameter Learning
******************************************
Refine
0;;companyeconomicsector(A, B) :- acquired(C, A).;true;true
0;true;economicsectorcompany(B, C).;false;false
0;false;companyalsoknownas(A, D).;true;true
0;false,true;economicsectorcompany(B, D).;false;true
0;false,true,false;acquired(A, E), economicsectorcompany(B, E).;false;false
0;false,false;companyceo(A, F).;true;true
0;false,false,true;bankchiefexecutiveceo(G, F).;false;false
0;false,false,false;countryhascompanyoffice(H, A).;false;false
1;;companyeconomicsector(A, B) :- companyalsoknownas(A, C), acquired(A, D).;true;true
1;true;economicsectorcompany(B, D).;false;true
1;true,false;economicsectorcompany(B, C), countryhascompanyoffice(E, C).;false;false
1;false;acquired(A, F), cityhascompanyoffice(G, A).;true;true
1;false,true;cityhascompanyoffice(G, H), economicsectorcompany(B, H).;false;false
1;false,false;acquired(I, A).;true;true
1;false,false,true;economicsectorcompany(B, I).;false;false
1;false,false,false;companyalsoknownas(A, J).;false;false
2;;companyeconomicsector(A, B) :- acquired(A, C), economicsectorcompany(B, C).;false;true
2;false;acquired(A, D).;true;true
2;false,true;companyalsoknownas(A, E), economicsectorcompany(B, E).;true;true
2;false,true,true;countryhascompanyoffice(F, D).;false;false
2;false,true,false;companyalsoknownas(D, G), companyalsoknownas(A, G).;false;false
2;false,false;acquired(H, A), companyceo(H, I).;true;true
2;false,false,true;economicsectorcompany(B, H).;false;false
2;false,false,false;cityhascompanyoffice(J, A).;false;false
3;;companyeconomicsector(A, B) :- acquired(A, C), acquired(C, D).;true;false
3;true;economicsectorcompany(B, D).;true;true
3;true,true;companyceo(C, E).;false;false
3;true,false;cityhascompanyoffice(F, A), companyceo(A, G).;true;true
3;true,false,true;companyalsoknownas(A, H), economicsectorcompany(B, H).;false;false
3;true,false,false;acquired(D, I), economicsectorcompany(B, I).;false;false
4;;companyeconomicsector(A, B) :- acquired(C, A), economicsectorcompany(B, C).;false;true
4;false;acquired(D, A), companyceo(D, E).;true;true
4;false,true;acquired(F, D), companyalsoknownas(F, G).;true;true
4;false,true,true;acquired(A, H).;false;false
4;false,true,false;acquired(I, D), economicsectorcompany(B, I).;false;false
4;false,false;acquired(A, J), economicsectorcompany(B, J).;true;true
4;false,false,true;companyalsoknownas(A, K), acquired(J, L).;false;false
4;false,false,false;companyalsoknownas(A, M), economicsectorcompany(B, M).;false;false
5;;companyeconomicsector(A, B) :- companyalsoknownas(A, C), economicsectorcompany(B, C).;true;true
5;true;acquired(A, D), countryhascompanyoffice(E, D).;false;false
5;false;acquired(A, F), acquired(F, G).;true;true
5;false,true;economicsectorcompany(B, G).;false;true
5;false,true,false;countryhascompanyoffice(H, A), companyalsoknownas(A, I).;false;false
5;false,false;cityhascompanyoffice(J, A), countryhascompanyoffice(K, A).;true;true
5;false,false,true;countryhascompanyoffice(K, L), economicsectorcompany(B, L).;false;false
5;false,false,false;cityhascompanyoffice(M, A), acquired(N, A).;false;false
6;;companyeconomicsector(A, B) :- acquired(A, C), companyceo(C, D).;true;true
6;true;economicsectorcompany(B, C).;false;true
6;true,false;acquired(C, E).;false;false
6;false;companyalsoknownas(A, F), cityhascompanyoffice(G, F).;true;true
6;false,true;acquired(F, H), economicsectorcompany(B, H).;false;true
6;false,true,false;companyceo(A, I), acquired(F, J).;false;false
6;false,false;companyalsoknownas(A, K), acquired(K, L).;false;true
6;false,false,false;companyalsoknownas(A, M).;false;false
7;;companyeconomicsector(A, B) :- acquired(C, A), economicsectorcompany(B, C).;false;true
7;false;acquired(D, A), companyceo(D, E).;true;true
7;false,true;companyalsoknownas(D, F), acquired(G, F).;true;true
7;false,true,true;economicsectorcompany(B, G).;false;false
7;false,true,false;countryhascompanyoffice(H, D).;false;false
7;false,false;cityhascompanyoffice(I, A), acquired(J, A).;true;true
7;false,false,true;acquired(K, J).;false;false
7;false,false,false;companyceo(A, L).;false;false
8;;companyeconomicsector(A, B) :- cityhascompanyoffice(C, A).;true;true
8;true;cityhascompanyoffice(C, D), economicsectorcompany(B, D).;true;false
8;true,true;acquired(D, E), acquired(F, D).;false;true
8;true,true,false;companyalsoknownas(A, G), companyalsoknownas(D, G).;false;false
8;false;acquired(A, H), economicsectorcompany(B, H).;false;true
8;false,false;acquired(I, A), cityhascompanyoffice(J, I).;true;true
8;false,false,true;acquired(K, I), economicsectorcompany(B, K).;false;false
8;false,false,false;acquired(A, L).;false;false
9;;companyeconomicsector(A, B) :- cityhascompanyoffice(C, A).;true;true
9;true;cityhascompanyoffice(C, D), economicsectorcompany(B, D).;true;false
9;true,true;acquired(E, D), companyceo(D, F).;false;false
9;false;companyalsoknownas(A, G), cityhascompanyoffice(H, G).;true;true
9;false,true;economicsectorcompany(B, G).;false;true
9;false,true,false;acquired(I, G).;false;false
9;false,false;acquired(A, J), economicsectorcompany(B, J).;false;true
9;false,false,false;companyalsoknownas(A, K), economicsectorcompany(B, K).;false;false


WILL Produced-Tree #1
% FOR teamplayssport(A, B):
%   if ( teamalsoknownas(C, A) )
%   then if ( recursion_teamplayssport(C, B) )
%   | then return 0.6081489350995123;  // std dev = 1.225, 8.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=6 */
%   | else return 0.1795775065280838;  // std dev = 2.471, 28.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=9 */
%   else if ( teamplaysagainstteam(D, A) )
%   | then if ( recursion_teamplayssport(D, B) )
%   | | then return 0.8045775065280838;  // std dev = 1.685, 56.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=53 */
%   | | else if ( teamalsoknownas(A, E), recursion_teamplayssport(E, B) )
%   | | | then return 0.8581489350995122;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | | else return -0.08302753548872303;  // std dev = 1.680, 51.000 (wgt'ed) examples reached here.  /* #neg=48 #pos=3 */
%   | else if ( teamplaysinleague(A, F) )
%   | | then return 0.34386322081379805;  // std dev = 0.500, 35.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=17 */
%   | | else if ( athleteplaysforteam(G, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.37427796735757685;  // std dev = 2.782, 31.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=16 */
WILL Produced-Tree #2
% FOR teamplayssport(A, B):
%   if ( teamplaysagainstteam(C, A), teamalsoknownas(A, D) )
%   then if ( recursion_teamplayssport(D, B) )
%   | then return 0.35634280656259376;  // std dev = 1.015, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | else if ( recursion_teamplayssport(C, B), athleteplaysforteam(E, C) )
%   | | then return 0.4893129579016523;  // std dev = 1.099, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   | | else return 0.08282402189491081;  // std dev = 1.233, 9.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   else if ( teamalsoknownas(A, F), athleteledsportsteam(G, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( teamalsoknownas(H, A) )
%   | | then if ( recursion_teamplayssport(H, B) )
%   | | | then return 0.6242148193795789;  // std dev = 0.926, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | | else return 0.1530352067627997;  // std dev = 2.185, 22.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=7 */
%   | | else if ( teamplaysagainstteam(I, A) )
%   | | | then return 0.31593675788375847;  // std dev = 4.258, 94.000 (wgt'ed) examples reached here.  /* #neg=45 #pos=49 */
%   | | | else return 0.3087301315544866;  // std dev = 4.061, 66.000 (wgt'ed) examples reached here.  /* #neg=33 #pos=33 */
WILL Produced-Tree #3
% FOR teamplayssport(A, B):
%   if ( teamalsoknownas(A, C), recursion_teamplayssport(C, B) )
%   then return 0.2600455015426867;  // std dev = 1.185, 7.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=4 */
%   else if ( teamalsoknownas(A, D) )
%   | then if ( teamplaysagainstteam(E, A), recursion_teamplayssport(E, B) )
%   | | then if ( athleteplaysforteam(F, D) )
%   | | | then return 0.623894016889782;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | | else return 0.3031837678512681;  // std dev = 1.005, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | else if ( teamplaysagainstteam(G, D), teamplaysagainstteam(G, A) )
%   | | | then return -0.1418262931306282;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | | else return 0.20626934840116362;  // std dev = 2.637, 30.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=12 */
%   | else if ( teamalsoknownas(H, A), teamplaysinleague(H, I) )
%   | | then if ( recursion_teamplayssport(H, B) )
%   | | | then return 0.4715509057672486;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | | else return 0.09837422734343944;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=2 */
%   | | else if ( athleteledsportsteam(J, A) )
%   | | | then return 0.21904745440185683;  // std dev = 2.827, 44.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=21 */
%   | | | else return 0.2715461678412773;  // std dev = 4.837, 107.000 (wgt'ed) examples reached here.  /* #neg=51 #pos=56 */
WILL Produced-Tree #4
% FOR teamplayssport(A, B):
%   if ( teamalsoknownas(A, C), teamalsoknownas(C, D) )
%   then if ( recursion_teamplayssport(D, B) )
%   | then if ( teamplaysinleague(C, E) )
%   | | then return 0.2956057232267422;  // std dev = 2.638, 30.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=17 */
%   | | else return 0.5505580672229762;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( athleteledsportsteam(F, A), teamplaysinleague(A, G) )
%   | | then if ( teamplaysagainstteam(H, A), recursion_teamplayssport(H, B) )
%   | | | then return -0.2861164131700087;  // std dev = 0.025, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | | else return -0.12542503038290048;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( teamalsoknownas(D, I), recursion_teamplayssport(I, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.21368547594089657;  // std dev = 0.098, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   else return 0.20752578981236477;  // std dev = 5.817, 169.000 (wgt'ed) examples reached here.  /* #neg=82 #pos=87 */
WILL Produced-Tree #5
% FOR teamplayssport(A, B):
%   if ( teamalsoknownas(C, A), recursion_teamplayssport(C, B) )
%   then return 0.23818993751633818;  // std dev = 1.174, 8.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=6 */
%   else if ( teamalsoknownas(D, A), teamplaysinleague(D, E) )
%   | then if ( teamalsoknownas(F, D), teamplaysagainstteam(G, F) )
%   | | then if ( teamalsoknownas(A, H) )
%   | | | then return 0.10280825970591141;  // std dev = 2.041, 19.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=7 */
%   | | | else return 0.16160285442708452;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | else if ( teamalsoknownas(I, D), recursion_teamplayssport(I, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.23839714557291541;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else if ( teamalsoknownas(A, J), recursion_teamplayssport(J, B) )
%   | | then if ( teamplaysagainstteam(K, A), teamalsoknownas(J, L) )
%   | | | then return 0.5141543651158392;  // std dev = 0.009, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | | else return 0.08976749715398977;  // std dev = 0.641, 2.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */
%   | | else if ( teamplaysagainstteam(M, A), recursion_teamplayssport(M, B) )
%   | | | then return 0.4911925013683169;  // std dev = 1.680, 54.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=51 */
%   | | | else return 0.011144614344215606;  // std dev = 4.743, 118.000 (wgt'ed) examples reached here.  /* #neg=82 #pos=36 */
WILL Produced-Tree #6
% FOR teamplayssport(A, B):
%   if ( teamplaysagainstteam(C, A), recursion_teamplayssport(C, B) )
%   then if ( teamalsoknownas(A, D), athleteplaysforteam(E, D) )
%   | then return 0.19330786721672194;  // std dev = 0.498, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | else return 0.34500149589022655;  // std dev = 2.142, 62.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=56 */
%   else if ( teamalsoknownas(A, F), teamalsoknownas(F, G) )
%   | then if ( recursion_teamplayssport(G, B) )
%   | | then return 0.23002502744337838;  // std dev = 2.406, 25.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=14 */
%   | | else if ( athleteplaysforteam(H, A), teamplaysagainstteam(I, A) )
%   | | | then return -0.14896697861760858;  // std dev = 0.056, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return -0.19640948549150966;  // std dev = 0.075, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else if ( athleteledsportsteam(J, A), athleteplaysforteam(K, A) )
%   | | then if ( athleteplaysforteam(K, L), recursion_teamplayssport(L, B) )
%   | | | then return 0.7310358526576046;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | | else return -0.24230124125902827;  // std dev = 0.099, 22.000 (wgt'ed) examples reached here.  /* #neg=22 */
%   | | else if ( athleteledsportsteam(M, A), teamalsoknownas(N, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.029468049154380282;  // std dev = 4.301, 87.000 (wgt'ed) examples reached here.  /* #neg=57 #pos=30 */
WILL Produced-Tree #7
% FOR teamplayssport(A, B):
%   if ( teamalsoknownas(A, C), teamplaysinleague(C, D) )
%   then if ( recursion_teamplayssport(C, B) )
%   | then return 0.030667676198330496;  // std dev = 1.077, 7.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=4 */
%   | else if ( teamalsoknownas(C, E) )
%   | | then return 0.10844156077563231;  // std dev = 2.571, 31.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=14 */
%   | | else return 0.05115487722203975;  // std dev = 0.436, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   else if ( teamplaysagainstteam(F, A), athleteledsportsteam(G, F) )
%   | then if ( teamalsoknownas(F, H), recursion_teamplayssport(H, B) )
%   | | then return 0.3372433345980383;  // std dev = 0.645, 33.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=32 */
%   | | else if ( teamplaysinleague(A, I), teamalsoknownas(F, J) )
%   | | | then return -0.16378686836726147;  // std dev = 1.643, 37.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=5 */
%   | | | else return 0.09547381164897241;  // std dev = 1.734, 28.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=15 */
%   | else if ( teamplaysagainstteam(K, A), teamalsoknownas(K, L) )
%   | | then return 0.15353797826147714;  // std dev = 0.344, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( teamplaysagainstteam(M, A) )
%   | | | then return -4.1551199483156965E-5;  // std dev = 0.793, 7.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=3 */
%   | | | else return 0.11566873992850457;  // std dev = 3.872, 60.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=28 */
WILL Produced-Tree #8
% FOR teamplayssport(A, B):
%   if ( teamalsoknownas(C, A), recursion_teamplayssport(C, B) )
%   then return 0.06128332779995056;  // std dev = 1.089, 8.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=6 */
%   else if ( teamalsoknownas(D, A), teamplaysinleague(D, E) )
%   | then if ( teamplaysagainstteam(F, D), teamalsoknownas(G, F) )
%   | | then if ( recursion_teamplayssport(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.045327397594632626;  // std dev = 0.928, 8.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | | else if ( athleteplaysforteam(H, D) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.037863328360881195;  // std dev = 1.971, 18.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=7 */
%   | else if ( athleteledsportsteam(I, A), teamalsoknownas(J, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( teamplaysinleague(A, K) )
%   | | | then return 0.06813813450223714;  // std dev = 4.186, 134.000 (wgt'ed) examples reached here.  /* #neg=65 #pos=69 */
%   | | | else return 0.10990030070455802;  // std dev = 3.003, 42.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=21 */
WILL Produced-Tree #9
% FOR teamplayssport(A, B):
%   if ( athleteledsportsteam(C, A) )
%   then if ( athleteledsportsteam(C, D), recursion_teamplayssport(D, B) )
%   | then if ( teamalsoknownas(D, E), teamalsoknownas(F, D) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( teamplaysagainstteam(G, A), teamplaysagainstteam(G, D) )
%   | | | then return 0.3147546301633179;  // std dev = 0.386, 28.000 (wgt'ed) examples reached here.  /* #pos=28 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.24030599377081918;  // std dev = 0.675, 30.000 (wgt'ed) examples reached here.  /* #neg=30 */
%   else if ( teamalsoknownas(A, H), recursion_teamplayssport(H, B) )
%   | then return -0.10190905948427849;  // std dev = 0.874, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | else if ( teamalsoknownas(I, A), athleteledsportsteam(J, I) )
%   | | then if ( teamalsoknownas(K, I), recursion_teamplayssport(K, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.04008100204878701;  // std dev = 0.298, 2.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */
%   | | else if ( teamalsoknownas(A, L) )
%   | | | then return 0.09306819708366872;  // std dev = 2.505, 35.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=17 */
%   | | | else return 0.06243448212220283;  // std dev = 4.487, 111.000 (wgt'ed) examples reached here.  /* #neg=54 #pos=57 */
WILL Produced-Tree #10
% FOR teamplayssport(A, B):
%   if ( athleteledsportsteam(C, A) )
%   then if ( athleteledsportsteam(C, D), recursion_teamplayssport(D, B) )
%   | then if ( teamalsoknownas(E, D), teamplaysinleague(D, F) )
%   | | then return 0.2964068391247833;  // std dev = 0.277, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return 0.24299039991523824;  // std dev = 0.186, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | else return -0.2023873316225833;  // std dev = 0.630, 30.000 (wgt'ed) examples reached here.  /* #neg=30 */
%   else if ( teamplaysagainstteam(G, A), athleteledsportsteam(H, G) )
%   | then if ( recursion_teamplayssport(G, B) )
%   | | then return 0.1956917847262175;  // std dev = 1.195, 26.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=24 */
%   | | else if ( teamalsoknownas(I, G) )
%   | | | then return -0.12343753515329361;  // std dev = 1.448, 20.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=3 */
%   | | | else return 0.013821341019579695;  // std dev = 1.097, 9.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=4 */
%   | else if ( teamalsoknownas(A, J), recursion_teamplayssport(J, B) )
%   | | then return -0.029601725057653377;  // std dev = 0.594, 2.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */
%   | | else if ( teamplaysagainstteam(K, A), recursion_teamplayssport(K, B) )
%   | | | then return 0.2717954550503831;  // std dev = 0.127, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.03816373378839663;  // std dev = 4.552, 89.000 (wgt'ed) examples reached here.  /* #neg=50 #pos=39 */


Results
   AUC ROC   = 0.841116
   AUC PR    = 0.849452
   CLL	      = -0.512736
   Precision = 0.90411 at threshold = 0.5
   Recall    = 0.496241
   F1        = 0.640777


Total learning time: 7.553 seconds
Total inference time: 3.717 seconds
AUC ROC: 0.841116


Results scoring model
   AUC ROC   = 0.904444
   AUC PR    = 0.914465
   CLL	      = -0.447958
   Precision = 0.926471 at threshold = 0.5
   Recall    = 0.6
   F1        = 0.728324


Total scoring time: 3.311 seconds
Parameter learned model CLL: -0.447958


Structure after Parameter Learning
[['teamplayssport(A, B)', {'': 'teamalsoknownas(C, A)', 'true': 'recursion_teamplayssport(C, B)', 'false': 'teamplaysagainstteam(D, A)', 'false,true': 'recursion_teamplayssport(D, B)', 'false,true,false': 'teamalsoknownas(A, E), recursion_teamplayssport(E, B)', 'false,false': 'teamplaysinleague(A, F)', 'false,false,false': 'athleteplaysforteam(G, A)'}, {'true,true': [1.225, 2, 6], 'true,false': [2.471, 19, 9], 'false,true,true': [1.685, 3, 53], 'false,true,false,true': [0.0, 0, 1], 'false,true,false,false': [1.68, 48, 3], 'false,false,true': [0.5, 18, 17], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [2.782, 15, 16]}], ['teamplayssport(A, B)', {'': 'teamplaysagainstteam(C, A), teamalsoknownas(A, D)', 'true': 'recursion_teamplayssport(D, B)', 'true,false': 'recursion_teamplayssport(C, B), athleteplaysforteam(E, C)', 'false': 'teamalsoknownas(A, F), athleteledsportsteam(G, A)', 'false,false': 'teamalsoknownas(H, A)', 'false,false,true': 'recursion_teamplayssport(H, B)', 'false,false,false': 'teamplaysagainstteam(I, A)'}, {'true,true': [1.015, 2, 3], 'true,false,true': [1.099, 2, 5], 'true,false,false': [1.233, 7, 2], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.926, 1, 6], 'false,false,true,false': [2.185, 15, 7], 'false,false,false,true': [4.258, 45, 49], 'false,false,false,false': [4.061, 33, 33]}], ['teamplayssport(A, B)', {'': 'teamalsoknownas(A, C), recursion_teamplayssport(C, B)', 'false': 'teamalsoknownas(A, D)', 'false,true': 'teamplaysagainstteam(E, A), recursion_teamplayssport(E, B)', 'false,true,true': 'athleteplaysforteam(F, D)', 'false,true,false': 'teamplaysagainstteam(G, D), teamplaysagainstteam(G, A)', 'false,false': 'teamalsoknownas(H, A), teamplaysinleague(H, I)', 'false,false,true': 'recursion_teamplayssport(H, B)', 'false,false,false': 'athleteledsportsteam(J, A)'}, {'true': [1.185, 3, 4], 'false,true,true,true': [0.0, 0, 2], 'false,true,true,false': [1.005, 2, 3], 'false,true,false,true': [0.0, 2, 0], 'false,true,false,false': [2.637, 18, 12], 'false,false,true,true': [0.913, 1, 5], 'false,false,true,false': [1.195, 5, 2], 'false,false,false,true': [2.827, 23, 21], 'false,false,false,false': [4.837, 51, 56]}], ['teamplayssport(A, B)', {'': 'teamalsoknownas(A, C), teamalsoknownas(C, D)', 'true': 'recursion_teamplayssport(D, B)', 'true,true': 'teamplaysinleague(C, E)', 'true,false': 'athleteledsportsteam(F, A), teamplaysinleague(A, G)', 'true,false,true': 'teamplaysagainstteam(H, A), recursion_teamplayssport(H, B)', 'true,false,false': 'teamalsoknownas(D, I), recursion_teamplayssport(I, B)'}, {'true,true,true': [2.638, 13, 17], 'true,true,false': [0.0, 0, 1], 'true,false,true,true': [0.025, 2, 0], 'true,false,true,false': [0.0, 1, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [0.098, 7, 0], 'false': [5.817, 82, 87]}], ['teamplayssport(A, B)', {'': 'teamalsoknownas(C, A), recursion_teamplayssport(C, B)', 'false': 'teamalsoknownas(D, A), teamplaysinleague(D, E)', 'false,true': 'teamalsoknownas(F, D), teamplaysagainstteam(G, F)', 'false,true,true': 'teamalsoknownas(A, H)', 'false,true,false': 'teamalsoknownas(I, D), recursion_teamplayssport(I, B)', 'false,false': 'teamalsoknownas(A, J), recursion_teamplayssport(J, B)', 'false,false,true': 'teamplaysagainstteam(K, A), teamalsoknownas(J, L)', 'false,false,false': 'teamplaysagainstteam(M, A), recursion_teamplayssport(M, B)'}, {'true': [1.174, 2, 6], 'false,true,true,true': [2.041, 12, 7], 'false,true,true,false': [1.095, 3, 2], 'false,true,false,true': [0.0, 0, 0], 'false,true,false,false': [0.0, 2, 0], 'false,false,true,true': [0.009, 0, 2], 'false,false,true,false': [0.641, 1, 1], 'false,false,false,true': [1.68, 3, 51], 'false,false,false,false': [4.743, 82, 36]}], ['teamplayssport(A, B)', {'': 'teamplaysagainstteam(C, A), recursion_teamplayssport(C, B)', 'true': 'teamalsoknownas(A, D), athleteplaysforteam(E, D)', 'false': 'teamalsoknownas(A, F), teamalsoknownas(F, G)', 'false,true': 'recursion_teamplayssport(G, B)', 'false,true,false': 'athleteplaysforteam(H, A), teamplaysagainstteam(I, A)', 'false,false': 'athleteledsportsteam(J, A), athleteplaysforteam(K, A)', 'false,false,true': 'athleteplaysforteam(K, L), recursion_teamplayssport(L, B)', 'false,false,false': 'athleteledsportsteam(M, A), teamalsoknownas(N, A)'}, {'true,true': [0.498, 1, 3], 'true,false': [2.142, 6, 56], 'false,true,true': [2.406, 11, 14], 'false,true,false,true': [0.056, 3, 0], 'false,true,false,false': [0.075, 5, 0], 'false,false,true,true': [0.0, 0, 2], 'false,false,true,false': [0.099, 22, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [4.301, 57, 30]}], ['teamplayssport(A, B)', {'': 'teamalsoknownas(A, C), teamplaysinleague(C, D)', 'true': 'recursion_teamplayssport(C, B)', 'true,false': 'teamalsoknownas(C, E)', 'false': 'teamplaysagainstteam(F, A), athleteledsportsteam(G, F)', 'false,true': 'teamalsoknownas(F, H), recursion_teamplayssport(H, B)', 'false,true,false': 'teamplaysinleague(A, I), teamalsoknownas(F, J)', 'false,false': 'teamplaysagainstteam(K, A), teamalsoknownas(K, L)', 'false,false,false': 'teamplaysagainstteam(M, A)'}, {'true,true': [1.077, 3, 4], 'true,false,true': [2.571, 17, 14], 'true,false,false': [0.436, 2, 2], 'false,true,true': [0.645, 1, 32], 'false,true,false,true': [1.643, 32, 5], 'false,true,false,false': [1.734, 13, 15], 'false,false,true': [0.344, 1, 2], 'false,false,false,true': [0.793, 4, 3], 'false,false,false,false': [3.872, 32, 28]}], ['teamplayssport(A, B)', {'': 'teamalsoknownas(C, A), recursion_teamplayssport(C, B)', 'false': 'teamalsoknownas(D, A), teamplaysinleague(D, E)', 'false,true': 'teamplaysagainstteam(F, D), teamalsoknownas(G, F)', 'false,true,true': 'recursion_teamplayssport(G, B)', 'false,true,false': 'athleteplaysforteam(H, D)', 'false,false': 'athleteledsportsteam(I, A), teamalsoknownas(J, A)', 'false,false,false': 'teamplaysinleague(A, K)'}, {'true': [1.089, 2, 6], 'false,true,true,true': [0.0, 0, 0], 'false,true,true,false': [0.928, 6, 2], 'false,true,false,true': [0.0, 0, 0], 'false,true,false,false': [1.971, 11, 7], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [4.186, 65, 69], 'false,false,false,false': [3.003, 21, 21]}], ['teamplayssport(A, B)', {'': 'athleteledsportsteam(C, A)', 'true': 'athleteledsportsteam(C, D), recursion_teamplayssport(D, B)', 'true,true': 'teamalsoknownas(D, E), teamalsoknownas(F, D)', 'true,true,false': 'teamplaysagainstteam(G, A), teamplaysagainstteam(G, D)', 'false': 'teamalsoknownas(A, H), recursion_teamplayssport(H, B)', 'false,false': 'teamalsoknownas(I, A), athleteledsportsteam(J, I)', 'false,false,true': 'teamalsoknownas(K, I), recursion_teamplayssport(K, B)', 'false,false,false': 'teamalsoknownas(A, L)'}, {'true,true,true': [0.0, 0, 0], 'true,true,false,true': [0.386, 0, 28], 'true,true,false,false': [0.0, 0, 0], 'true,false': [0.675, 30, 0], 'false,true': [0.874, 2, 2], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [0.298, 1, 1], 'false,false,false,true': [2.505, 18, 17], 'false,false,false,false': [4.487, 54, 57]}], ['teamplayssport(A, B)', {'': 'athleteledsportsteam(C, A)', 'true': 'athleteledsportsteam(C, D), recursion_teamplayssport(D, B)', 'true,true': 'teamalsoknownas(E, D), teamplaysinleague(D, F)', 'false': 'teamplaysagainstteam(G, A), athleteledsportsteam(H, G)', 'false,true': 'recursion_teamplayssport(G, B)', 'false,true,false': 'teamalsoknownas(I, G)', 'false,false': 'teamalsoknownas(A, J), recursion_teamplayssport(J, B)', 'false,false,false': 'teamplaysagainstteam(K, A), recursion_teamplayssport(K, B)'}, {'true,true,true': [0.277, 0, 5], 'true,true,false': [0.186, 0, 23], 'true,false': [0.63, 30, 0], 'false,true,true': [1.195, 2, 24], 'false,true,false,true': [1.448, 17, 3], 'false,true,false,false': [1.097, 5, 4], 'false,false,true': [0.594, 1, 1], 'false,false,false,true': [0.127, 0, 6], 'false,false,false,false': [4.552, 50, 39]}]]
[{'': [0.24305555555555505, 0.24970273483947916], 'false': [0.2492283950617282, 0.2500000000000016], 'false,false': [0.24979591836734646, 0.24973985431841783], 'false,false,false': [nan, 0.24973985431841783], 'false,true': [0.050701530612244916, 0.07100591715976316], 'true': [0.1874999999999999, 0.21811224489795927], 'false,true,false': [0.0, 0.055363321799307946]}, {'': [0.21164501819916487, 0.21952757204803358], 'false': [nan, 0.21952757204803397], 'false,false': [0.2347869307698824, 0.2164343660461582], 'false,false,true': [0.12244897959183662, 0.21694214876033033], 'false,false,false': [0.1928917842433292, 0.2499341977414025], 'true': [0.2061060459111983, 0.21119627120307372], 'true,false': [0.17257963981764166, 0.1689418798428456]}, {'': [0.20060283577407884, 0.21088676276083965], 'false': [0.22023480834706638, 0.20842669547837098], 'false,true': [0.16520752642064324, 0.22433386692234958], 'false,true,false': [0.0, 0.2317162970721669], 'false,false': [0.20860187517264991, 0.208395265423126], 'false,false,true': [0.13888888888888884, 0.20408163265306123], 'false,false,false': [0.18157418489665833, 0.21862138846628987], 'false,true,true': [0.0, 0.2019033758922304]}, {'': [0.22236997368879355, 0.20024673273639357], 'true': [0.22643468691228824, 0.0028158425642500927], 'true,true': [0.2318857131090686, 0.0], 'true,false': [0.005953378924587777, 0.0013643933989871087], 'true,false,true': [0.00032282821953734386, 0.0], 'true,false,false': [nan, 0.0013643933989871087]}, {'': [0.1722215608370005, 0.19932941437868743], 'false': [0.21571994488960003, 0.1961415113323559], 'false,true': [0.2240866125429644, 0.0], 'false,true,true': [0.2191787114248835, 0.24000000000000005], 'false,false': [0.14765511349264254, 0.196822987866261], 'false,false,false': [0.052289067306663876, 0.19061631211106791], 'false,false,true': [4.476494690108801e-05, 0.20521335518914988], 'false,true,false': [nan, 0.0]}, {'': [0.07459985227863954, 0.1962588439038148], 'false': [0.2064482654389981, 0.18856197545057515], 'false,true': [0.23151057591262272, 0.0016212954835595692], 'false,false': [0.07277602555657965, 0.21264337647794518], 'false,false,false': [nan, 0.21264337647794518], 'true': [0.06206290210326175, 0.0740140843204836], 'false,false,true': [0.0, 0.0004432696803986805], 'false,true,false': [0.0010308382104664375, 0.001131523050485389]}, {'': [0.19051771075428028, 0.15698190327686587], 'true': [0.16568941947944255, 0.1946378253378893], 'true,false': [0.21325188109022314, 0.04747218790045461], 'false': [0.10725718245247526, 0.22618007365233112], 'false,false': [0.03948294552545407, 0.2344326820225853], 'false,false,false': [0.08991295337672224, 0.24989447971320267], 'false,true': [0.01260305070756063, 0.1042659386273576], 'false,true,false': [0.07295375236638557, 0.10738128376354902]}, {'': [0.14818045387317266, 0.15582326003494298], 'false': [0.1840685401510302, 0.15109273887365057], 'false,true': [0.10764233620623033, 0.21590629670888817], 'false,true,false': [nan, 0.21590629670888817], 'false,false': [nan, 0.15109273887365074], 'false,false,false': [0.13073833709926452, 0.21470509513762598], 'false,true,true': [nan, 0.10764233620623033]}, {'': [0.08734900497577829, 0.18025997929039694], 'false': [0.19103880667262613, 0.1791965841354514], 'false,false': [0.04449693587810109, 0.18102986692580048], 'false,false,false': [0.17922894130815378, 0.18137276157922722], 'true': [0.005322240959963666, 0.015173106078234567], 'false,false,true': [nan, 0.04449693587810109], 'true,true': [nan, 0.005322240959963634], 'true,true,false': [0.005322240959963666, nan]}, {'': [0.060635160898150436, 0.17965413420194848], 'false': [0.10715823116666236, 0.2207594148653804], 'false,false': [0.1762733907996754, 0.2215555557379644], 'false,false,false': [0.0027074514307755906, 0.2328619638166236], 'false,true': [0.05491785676721688, 0.11784506800092057], 'false,true,false': [0.10490214876659498, 0.13361400792439027], 'true': [0.004390623721267298, 0.01322368995694639], 'true,true': [0.015309076312386604, 0.0015075263606977548]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;teamplayssport(A, B) :- teamalsoknownas(C, A).;true;true
0;false;teamplaysagainstteam(D, A).;true;true
0;false,true;recursion_teamplayssport(D, B).;true;true
0;false,true,false;teamalsoknownas(A, E), recursion_teamplayssport(E, B).;true;true
2;;teamplayssport(A, B) :- teamalsoknownas(A, C), recursion_teamplayssport(C, B).;true;true
2;false;teamalsoknownas(A, D).;true;true
2;false,true;teamplaysagainstteam(E, A), recursion_teamplayssport(E, B).;true;true
2;false,true,true;athleteplaysforteam(F, D).;true;true
2;false,true,false;teamplaysagainstteam(G, D), teamplaysagainstteam(G, A).;true;true
3;;teamplayssport(A, B) :- teamalsoknownas(A, C), teamalsoknownas(C, D).;true;true
3;true;recursion_teamplayssport(D, B).;true;true
3;true,true;teamplaysinleague(C, E).;true;true
3;true,false;athleteledsportsteam(F, A), teamplaysinleague(A, G).;true;true
3;true,false,true;teamplaysagainstteam(H, A), recursion_teamplayssport(H, B).;true;true
4;;teamplayssport(A, B) :- teamalsoknownas(C, A), recursion_teamplayssport(C, B).;true;true
4;false;teamalsoknownas(D, A), teamplaysinleague(D, E).;true;true
4;false,true;teamalsoknownas(F, D), teamplaysagainstteam(G, F).;true;true
4;false,false;teamalsoknownas(A, J), recursion_teamplayssport(J, B).;true;true
4;false,false,true;teamplaysagainstteam(K, A), teamalsoknownas(J, L).;true;true
5;;teamplayssport(A, B) :- teamplaysagainstteam(C, A), recursion_teamplayssport(C, B).;true;true
5;false;teamalsoknownas(A, F), teamalsoknownas(F, G).;true;true
5;false,true;recursion_teamplayssport(G, B).;true;true
5;false,true,false;athleteplaysforteam(H, A), teamplaysagainstteam(I, A).;true;true
5;false,false;athleteledsportsteam(J, A), athleteplaysforteam(K, A).;true;true
5;false,false,true;athleteplaysforteam(K, L), recursion_teamplayssport(L, B).;true;true
9;;teamplayssport(A, B) :- athleteledsportsteam(C, A).;true;true
9;true;athleteledsportsteam(C, D), recursion_teamplayssport(D, B).;true;true
9;true,true;teamalsoknownas(E, D), teamplaysinleague(D, F).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR teamplayssport(A, B):
%   if ( teamalsoknownas(C, A) )
%   then if ( athleteplaysforteam(D, A), athleteplayssport(D, B) )
%   | then return 0.8581489350995122;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( athleteplayssport(E, B), athleteplaysinleague(E, F) )
%   | | then if ( athleteplaysforteam(G, A), teamalsoknownas(A, H) )
%   | | | then return 0.024815601766178873;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | | | else return 0.4206489350995123;  // std dev = 1.984, 16.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=9 */
%   | | else return -0.0418510649004878;  // std dev = 0.300, 10.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=1 */
%   else if ( teamplaysagainstteam(I, A) )
%   | then if ( recursion_teamplayssport(I, B) )
%   | | then return 0.8045775065280838;  // std dev = 0.225, 56.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=53 */
%   | | else return -0.06492798797741081;  // std dev = 0.266, 52.000 (wgt'ed) examples reached here.  /* #neg=48 #pos=4 */
%   | else if ( athleteplayssport(J, B), athleteledsportsteam(J, K) )
%   | | then if ( athleteplaysforteam(J, K), teamalsoknownas(K, L) )
%   | | | then return 0.4831489350995123;  // std dev = 1.936, 16.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=10 */
%   | | | else return 0.8126943896449667;  // std dev = 0.977, 22.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=21 */
%   | | else return -0.07042249347191636;  // std dev = 0.258, 28.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=2 */
WILL Produced-Tree #2
% FOR teamplayssport(A, B):
%   if ( athleteplayssport(C, B), athleteledsportsteam(C, D) )
%   then if ( teamplaysagainstteam(D, A), recursion_teamplayssport(D, B) )
%   | then return 0.7307915917845957;  // std dev = 0.072, 41.000 (wgt'ed) examples reached here.  /* #pos=41 */
%   | else if ( teamplaysagainstteam(A, E), athleteledsportsteam(F, E) )
%   | | then if ( recursion_teamplayssport(E, B) )
%   | | | then return 0.529454602219761;  // std dev = 1.187, 9.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=7 */
%   | | | else return 0.05888426311395037;  // std dev = 2.063, 27.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=6 */
%   | | else if ( athleteplaysforteam(C, G), teamalsoknownas(D, G) )
%   | | | then return 0.032623545668631584;  // std dev = 1.188, 8.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | | | else return 0.6357239964252488;  // std dev = 2.236, 49.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=43 */
%   else if ( teamalsoknownas(A, H), recursion_teamplayssport(H, B) )
%   | then return 0.34659136087178033;  // std dev = 0.973, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | else if ( athleteplaysforteam(I, A), athleteplayssport(I, J) )
%   | | then return -0.13453511255071599;  // std dev = 0.004, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
%   | | else if ( teamplaysagainstteam(A, K), teamalsoknownas(K, L) )
%   | | | then return 0.09856837356265297;  // std dev = 1.144, 8.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | | | else return -0.09017527314480925;  // std dev = 1.386, 44.000 (wgt'ed) examples reached here.  /* #neg=42 #pos=2 */
WILL Produced-Tree #3
% FOR teamplayssport(A, B):
%   if ( teamalsoknownas(A, C), recursion_teamplayssport(C, B) )
%   then if ( teamalsoknownas(D, A) )
%   | then return 0.10689745511437347;  // std dev = 0.773, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | else return 0.4432360015620548;  // std dev = 0.748, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   else if ( teamalsoknownas(A, E) )
%   | then if ( teamplaysagainstteam(F, A), recursion_teamplayssport(F, B) )
%   | | then if ( athleteplaysforteam(G, E) )
%   | | | then return 0.5773708870362984;  // std dev = 0.016, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | | else return 0.34417797248116716;  // std dev = 0.931, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | else if ( teamplaysagainstteam(H, E), teamplaysagainstteam(H, A) )
%   | | | then return -0.13018813102902116;  // std dev = 0.015, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | | else return 0.1542806242416342;  // std dev = 2.296, 30.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=12 */
%   | else if ( athleteplayssport(I, B), athleteledsportsteam(I, J) )
%   | | then if ( teamplaysagainstteam(A, K), athleteledsportsteam(L, K) )
%   | | | then return 0.39086462698391133;  // std dev = 2.785, 64.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=47 */
%   | | | else return 0.4784513616199813;  // std dev = 2.020, 39.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=33 */
%   | | else return -0.062465919263344806;  // std dev = 0.237, 61.000 (wgt'ed) examples reached here.  /* #neg=57 #pos=4 */
WILL Produced-Tree #4
% FOR teamplayssport(A, B):
%   if ( teamalsoknownas(A, C), teamalsoknownas(C, D) )
%   then if ( recursion_teamplayssport(D, B) )
%   | then if ( teamplaysinleague(C, E) )
%   | | then if ( athleteplayssport(F, B), athleteplaysinleague(F, G) )
%   | | | then return 0.3406052825832628;  // std dev = 2.155, 25.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=17 */
%   | | | else return -0.14331598503532325;  // std dev = 0.003, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.5038800532539247;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else return -0.18440495864551318;  // std dev = 0.067, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   else if ( teamplaysagainstteam(A, H), recursion_teamplayssport(H, B) )
%   | then return 0.45998016584361484;  // std dev = 0.163, 56.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=54 */
%   | else if ( athleteplayssport(I, B), athleteledsportsteam(I, J) )
%   | | then if ( teamplaysagainstteam(A, K), teamplaysagainstteam(K, A) )
%   | | | then return -0.10437021109937665;  // std dev = 1.386, 18.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=2 */
%   | | | else return 0.33264711873951897;  // std dev = 2.044, 35.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=28 */
%   | | else if ( teamplaysinleague(A, L) )
%   | | | then return -0.0947909859671925;  // std dev = 0.966, 43.000 (wgt'ed) examples reached here.  /* #neg=42 #pos=1 */
%   | | | else return -0.0025723242418382196;  // std dev = 1.335, 17.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=2 */
WILL Produced-Tree #5
% FOR teamplayssport(A, B):
%   if ( teamalsoknownas(C, A), recursion_teamplayssport(C, B) )
%   then if ( teamalsoknownas(D, A), athleteledsportsteam(E, D) )
%   | then return 0.4212393069927776;  // std dev = 0.257, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return -0.03490241418251248;  // std dev = 0.471, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   else if ( teamalsoknownas(F, A), teamplaysinleague(F, G) )
%   | then if ( teamalsoknownas(H, F), teamplaysagainstteam(I, H) )
%   | | then if ( teamalsoknownas(A, J), athleteledsportsteam(K, A) )
%   | | | then return -0.21573862463136564;  // std dev = 0.063, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.1525110623237234;  // std dev = 1.888, 21.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=9 */
%   | | else return -0.18409216840531376;  // std dev = 0.111, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else if ( teamalsoknownas(A, L), recursion_teamplayssport(L, B) )
%   | | then if ( teamplaysagainstteam(M, A), teamalsoknownas(L, N) )
%   | | | then return 0.5244139298148998;  // std dev = 0.214, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | | else return 0.011280024180127274;  // std dev = 0.473, 2.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */
%   | | else if ( athleteplayssport(P, B), athleteledsportsteam(P, Q) )
%   | | | then return 0.24076103830772072;  // std dev = 3.345, 111.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=84 */
%   | | | else return -0.06710130731765619;  // std dev = 1.550, 61.000 (wgt'ed) examples reached here.  /* #neg=58 #pos=3 */
WILL Produced-Tree #6
% FOR teamplayssport(A, B):
%   if ( teamplaysagainstteam(C, A), recursion_teamplayssport(C, B) )
%   then if ( teamplaysagainstteam(A, D), recursion_teamplayssport(D, B) )
%   | then return 0.27725807401209723;  // std dev = 0.193, 61.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=56 */
%   | else return 0.07397171418703571;  // std dev = 0.874, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   else if ( teamalsoknownas(A, E), teamalsoknownas(E, F) )
%   | then if ( recursion_teamplayssport(F, B) )
%   | | then if ( athleteplayssport(G, B), athleteplaysinleague(G, H) )
%   | | | then return 0.2286523185255382;  // std dev = 1.898, 20.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=14 */
%   | | | else return -0.13453058305177348;  // std dev = 0.031, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return -0.16080920390400438;  // std dev = 0.082, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else if ( athleteledsportsteam(I, A), athleteplaysforteam(J, A) )
%   | | then if ( athleteplaysforteam(J, K), recursion_teamplayssport(K, B) )
%   | | | then return 0.6567071176348387;  // std dev = 0.276, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | | else return -0.13575205170104365;  // std dev = 0.241, 22.000 (wgt'ed) examples reached here.  /* #neg=22 */
%   | | else if ( athleteplayssport(L, B), athleteledsportsteam(L, M) )
%   | | | then return 0.1350968178907554;  // std dev = 2.446, 43.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=28 */
%   | | | else return -0.06173216650758222;  // std dev = 1.380, 44.000 (wgt'ed) examples reached here.  /* #neg=42 #pos=2 */
WILL Produced-Tree #7
% FOR teamplayssport(A, B):
%   if ( athleteplayssport(C, B), athleteledsportsteam(C, D) )
%   then if ( teamplaysinleague(A, E), athleteplaysinleague(C, E) )
%   | then return 0.23379940264573662;  // std dev = 0.150, 55.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=51 */
%   | else if ( teamplaysinleague(A, F), athleteplaysinleague(G, F) )
%   | | then if ( athleteplayssport(G, H), recursion_teamplayssport(A, H) )
%   | | | then return -0.2435203709663322;  // std dev = 0.755, 16.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=1 */
%   | | | else return 0.19363406846353182;  // std dev = 1.346, 12.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=10 */
%   | | else if ( athleteplaysforteam(C, D), teamalsoknownas(D, I) )
%   | | | then return 0.032803141706843196;  // std dev = 2.182, 26.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=14 */
%   | | | else return 0.29334426818546555;  // std dev = 1.050, 25.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=23 */
%   else if ( athleteplayssport(J, B), athleteplaysforteam(K, A) )
%   | then return -0.10515132995784669;  // std dev = 0.052, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
%   | else if ( athleteplayssport(L, B), teamplaysagainstteam(A, M) )
%   | | then return 0.31682939363797713;  // std dev = 0.534, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( teamalsoknownas(N, A) )
%   | | | then return 0.035054382088534355;  // std dev = 0.951, 9.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | | | else return -0.0608932783524272;  // std dev = 1.412, 45.000 (wgt'ed) examples reached here.  /* #neg=43 #pos=2 */
WILL Produced-Tree #8
% FOR teamplayssport(A, B):
%   if ( athleteplayssport(C, B), athleteplaysforteam(C, D) )
%   then if ( teamplaysinleague(A, E), teamplaysinleague(D, E) )
%   | then return 0.15405862511747045;  // std dev = 0.204, 79.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=65 */
%   | else if ( teamplaysinleague(A, F) )
%   | | then if ( teamplaysagainstteam(G, A), athleteledsportsteam(C, D) )
%   | | | then return 0.0352723472326844;  // std dev = 1.512, 19.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=9 */
%   | | | else return -0.14960148871240836;  // std dev = 1.414, 24.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=4 */
%   | | else if ( athleteledsportsteam(H, D) )
%   | | | then return 0.18473898115463236;  // std dev = 1.925, 30.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=22 */
%   | | | else return -0.0969531757884099;  // std dev = 0.006, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else if ( athleteplaysforteam(I, A), athleteplayssport(J, B) )
%   | then return -0.10289770275473333;  // std dev = 0.063, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | else if ( teamalsoknownas(K, A) )
%   | | then return 0.10965319893606895;  // std dev = 0.885, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   | | else if ( teamplaysinleague(A, L) )
%   | | | then return -0.06784962438605534;  // std dev = 0.574, 25.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=1 */
%   | | | else return 0.01567901677755106;  // std dev = 1.092, 11.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=2 */
WILL Produced-Tree #9
% FOR teamplayssport(A, B):
%   if ( teamplaysagainstteam(A, C), recursion_teamplayssport(C, B) )
%   then if ( athleteplaysforteam(D, A), teamalsoknownas(A, E) )
%   | then return -0.026165574003700703;  // std dev = 0.311, 9.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=4 */
%   | else return 0.19036570838402156;  // std dev = 0.131, 54.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=53 */
%   else if ( teamplaysagainstteam(A, F), teamplaysinleague(A, G) )
%   | then if ( athleteledsportsteam(H, F), teamplaysinleague(F, G) )
%   | | then return -0.13886530913007294;  // std dev = 0.089, 42.000 (wgt'ed) examples reached here.  /* #neg=42 */
%   | | else if ( athleteledsportsteam(I, F), athleteplaysinleague(J, G) )
%   | | | then return 0.7049534854765539;  // std dev = 0.030, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return -0.10179834912709256;  // std dev = 0.075, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else if ( athleteplayssport(K, B), athleteledsportsteam(K, L) )
%   | | then if ( athleteplaysforteam(K, L), teamalsoknownas(L, M) )
%   | | | then return 0.004366084150363615;  // std dev = 2.014, 23.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=13 */
%   | | | else return 0.17244682119818858;  // std dev = 1.513, 31.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=28 */
%   | | else if ( teamplaysinleague(A, N) )
%   | | | then return -0.06363296287173456;  // std dev = 0.533, 18.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=1 */
%   | | | else return -0.00893295230991857;  // std dev = 1.458, 23.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=3 */
WILL Produced-Tree #10
% FOR teamplayssport(A, B):
%   if ( athleteledsportsteam(C, A) )
%   then if ( athleteledsportsteam(C, D), recursion_teamplayssport(D, B) )
%   | then return 0.1794385440008716;  // std dev = 0.077, 28.000 (wgt'ed) examples reached here.  /* #pos=28 */
%   | else return -0.13139457172387864;  // std dev = 0.090, 30.000 (wgt'ed) examples reached here.  /* #neg=30 */
%   else if ( teamplaysagainstteam(E, A), recursion_teamplayssport(E, B) )
%   | then if ( athleteledsportsteam(F, E), athleteplaysforteam(G, A) )
%   | | then if ( athleteplayssport(F, B) )
%   | | | then return 0.16585526809053566;  // std dev = 0.071, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | | else return -0.1339926604141255;  // std dev = 0.779, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else return 0.25488441257682143;  // std dev = 0.133, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else if ( athleteplayssport(H, B), athleteledsportsteam(H, I) )
%   | | then if ( teamplaysinleague(A, J), teamalsoknownas(K, A) )
%   | | | then return -0.14132001235628144;  // std dev = 1.104, 8.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=3 */
%   | | | else return 0.07580303496480223;  // std dev = 2.465, 53.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=37 */
%   | | else if ( teamplaysinleague(A, L) )
%   | | | then return -0.06779102470236387;  // std dev = 0.549, 33.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=1 */
%   | | | else return -0.007975283128691403;  // std dev = 1.458, 23.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=3 */


Results
   AUC ROC   = 0.951693
   AUC PR    = 0.951188
   CLL	      = -0.325445
   Precision = 0.84507 at threshold = 0.5
   Recall    = 0.902256
   F1        = 0.872727


Total learning time: 224.21699999999998 seconds
Total inference time: 5.708 seconds
AUC ROC: 0.951693


Results scoring model
   AUC ROC   = 0.981859
   AUC PR    = 0.983927
   CLL	      = -0.254469
   Precision = 0.934579 at threshold = 0.5
   Recall    = 0.952381
   F1        = 0.943396


Total scoring time: 5.959 seconds
Refined model CLL: -0.254469


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.951693
   AUC PR    = 0.951188
   CLL	      = -0.325445
   Precision = 0.84507 at threshold = 0.5
   Recall    = 0.902256
   F1        = 0.872727


Total learning time: 241.04 seconds
Total inference time: 5.708 seconds
AUC ROC: 0.951693
Total revision time: 241.04
Best scored revision CLL: -0.254469


Dataset: 10_nell_finances_nell_sports, Fold: 2, Type: Transfer (trRDN-B), Time: 20:38:39
{'AUC ROC': 0.951693, 'AUC PR': 0.951188, 'CLL': -0.325445, 'Precision': [0.84507, 0.5], 'Recall': 0.902256, 'F1': 0.872727, 'Learning time': 241.04, 'Inference time': 5.708, 'parameter_0.4': {'AUC ROC': 0.841116, 'AUC PR': 0.849452, 'CLL': -0.512736, 'Precision': [0.90411, 0.5], 'Recall': 0.496241, 'F1': 0.640777, 'Learning time': 7.553, 'Inference time': 3.717}}


Amount of data: 0.6
******************************************
Performing Parameter Learning
******************************************
Refine
0;;companyeconomicsector(A, B) :- acquired(C, A).;true;true
0;true;economicsectorcompany(B, C).;false;false
0;false;companyalsoknownas(A, D).;true;true
0;false,true;economicsectorcompany(B, D).;false;true
0;false,true,false;acquired(A, E), economicsectorcompany(B, E).;false;false
0;false,false;companyceo(A, F).;true;true
0;false,false,true;bankchiefexecutiveceo(G, F).;false;false
0;false,false,false;countryhascompanyoffice(H, A).;false;false
1;;companyeconomicsector(A, B) :- companyalsoknownas(A, C), acquired(A, D).;true;true
1;true;economicsectorcompany(B, D).;false;true
1;true,false;economicsectorcompany(B, C), countryhascompanyoffice(E, C).;false;false
1;false;acquired(A, F), cityhascompanyoffice(G, A).;true;true
1;false,true;cityhascompanyoffice(G, H), economicsectorcompany(B, H).;false;false
1;false,false;acquired(I, A).;true;true
1;false,false,true;economicsectorcompany(B, I).;false;false
1;false,false,false;companyalsoknownas(A, J).;false;false
2;;companyeconomicsector(A, B) :- acquired(A, C), economicsectorcompany(B, C).;false;true
2;false;acquired(A, D).;true;true
2;false,true;companyalsoknownas(A, E), economicsectorcompany(B, E).;true;true
2;false,true,true;countryhascompanyoffice(F, D).;false;false
2;false,true,false;companyalsoknownas(D, G), companyalsoknownas(A, G).;false;false
2;false,false;acquired(H, A), companyceo(H, I).;true;true
2;false,false,true;economicsectorcompany(B, H).;false;false
2;false,false,false;cityhascompanyoffice(J, A).;false;false
3;;companyeconomicsector(A, B) :- acquired(A, C), acquired(C, D).;true;false
3;true;economicsectorcompany(B, D).;true;true
3;true,true;companyceo(C, E).;false;false
3;true,false;cityhascompanyoffice(F, A), companyceo(A, G).;true;true
3;true,false,true;companyalsoknownas(A, H), economicsectorcompany(B, H).;false;false
3;true,false,false;acquired(D, I), economicsectorcompany(B, I).;false;false
4;;companyeconomicsector(A, B) :- acquired(C, A), economicsectorcompany(B, C).;false;true
4;false;acquired(D, A), companyceo(D, E).;true;true
4;false,true;acquired(F, D), companyalsoknownas(F, G).;true;true
4;false,true,true;acquired(A, H).;false;false
4;false,true,false;acquired(I, D), economicsectorcompany(B, I).;false;false
4;false,false;acquired(A, J), economicsectorcompany(B, J).;true;true
4;false,false,true;companyalsoknownas(A, K), acquired(J, L).;false;false
4;false,false,false;companyalsoknownas(A, M), economicsectorcompany(B, M).;false;false
5;;companyeconomicsector(A, B) :- companyalsoknownas(A, C), economicsectorcompany(B, C).;true;true
5;true;acquired(A, D), countryhascompanyoffice(E, D).;false;false
5;false;acquired(A, F), acquired(F, G).;true;true
5;false,true;economicsectorcompany(B, G).;false;true
5;false,true,false;countryhascompanyoffice(H, A), companyalsoknownas(A, I).;false;false
5;false,false;cityhascompanyoffice(J, A), countryhascompanyoffice(K, A).;true;true
5;false,false,true;countryhascompanyoffice(K, L), economicsectorcompany(B, L).;false;false
5;false,false,false;cityhascompanyoffice(M, A), acquired(N, A).;false;false
6;;companyeconomicsector(A, B) :- acquired(A, C), companyceo(C, D).;true;true
6;true;economicsectorcompany(B, C).;false;true
6;true,false;acquired(C, E).;false;false
6;false;companyalsoknownas(A, F), cityhascompanyoffice(G, F).;true;true
6;false,true;acquired(F, H), economicsectorcompany(B, H).;false;true
6;false,true,false;companyceo(A, I), acquired(F, J).;false;false
6;false,false;companyalsoknownas(A, K), acquired(K, L).;false;true
6;false,false,false;companyalsoknownas(A, M).;false;false
7;;companyeconomicsector(A, B) :- acquired(C, A), economicsectorcompany(B, C).;false;true
7;false;acquired(D, A), companyceo(D, E).;true;true
7;false,true;companyalsoknownas(D, F), acquired(G, F).;true;true
7;false,true,true;economicsectorcompany(B, G).;false;false
7;false,true,false;countryhascompanyoffice(H, D).;false;false
7;false,false;cityhascompanyoffice(I, A), acquired(J, A).;true;true
7;false,false,true;acquired(K, J).;false;false
7;false,false,false;companyceo(A, L).;false;false
8;;companyeconomicsector(A, B) :- cityhascompanyoffice(C, A).;true;true
8;true;cityhascompanyoffice(C, D), economicsectorcompany(B, D).;true;false
8;true,true;acquired(D, E), acquired(F, D).;false;true
8;true,true,false;companyalsoknownas(A, G), companyalsoknownas(D, G).;false;false
8;false;acquired(A, H), economicsectorcompany(B, H).;false;true
8;false,false;acquired(I, A), cityhascompanyoffice(J, I).;true;true
8;false,false,true;acquired(K, I), economicsectorcompany(B, K).;false;false
8;false,false,false;acquired(A, L).;false;false
9;;companyeconomicsector(A, B) :- cityhascompanyoffice(C, A).;true;true
9;true;cityhascompanyoffice(C, D), economicsectorcompany(B, D).;true;false
9;true,true;acquired(E, D), companyceo(D, F).;false;false
9;false;companyalsoknownas(A, G), cityhascompanyoffice(H, G).;true;true
9;false,true;economicsectorcompany(B, G).;false;true
9;false,true,false;acquired(I, G).;false;false
9;false,false;acquired(A, J), economicsectorcompany(B, J).;false;true
9;false,false,false;companyalsoknownas(A, K), economicsectorcompany(B, K).;false;false


WILL Produced-Tree #1
% FOR teamplayssport(A, B):
%   if ( teamalsoknownas(C, A) )
%   then if ( recursion_teamplayssport(C, B) )
%   | then return 0.6581489350995123;  // std dev = 1.265, 10.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   | else return 0.1914822684328457;  // std dev = 3.055, 42.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=14 */
%   else if ( teamplaysagainstteam(D, A) )
%   | then if ( recursion_teamplayssport(D, B) )
%   | | then return 0.7891834178581326;  // std dev = 2.364, 87.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=81 */
%   | | else if ( teamalsoknownas(A, E), recursion_teamplayssport(E, B) )
%   | | | then return 0.8581489350995122;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | | else return -0.08437980053267162;  // std dev = 2.171, 87.000 (wgt'ed) examples reached here.  /* #neg=82 #pos=5 */
%   | else if ( teamplaysinleague(A, F) )
%   | | then return 0.4091693432627766;  // std dev = 0.497, 49.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=27 */
%   | | else if ( athleteplaysforteam(G, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.40814893509951145;  // std dev = 3.146, 40.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=22 */
WILL Produced-Tree #2
% FOR teamplayssport(A, B):
%   if ( teamplaysagainstteam(C, A), teamalsoknownas(A, D) )
%   then if ( recursion_teamplayssport(D, B) )
%   | then return 0.418373002311234;  // std dev = 1.080, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | else if ( recursion_teamplayssport(C, B), athleteplaysforteam(E, C) )
%   | | then return 0.5631875950568419;  // std dev = 1.158, 10.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   | | else return 0.06113181015778526;  // std dev = 1.786, 20.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=4 */
%   else if ( teamalsoknownas(A, F), athleteledsportsteam(G, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( teamalsoknownas(H, A) )
%   | | then if ( recursion_teamplayssport(H, B) )
%   | | | then return 0.6469082235107435;  // std dev = 0.943, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | | else return 0.18614666770213692;  // std dev = 2.787, 34.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=12 */
%   | | else if ( teamplaysagainstteam(I, A) )
%   | | | then return 0.29115476302537213;  // std dev = 5.362, 148.000 (wgt'ed) examples reached here.  /* #neg=75 #pos=73 */
%   | | | else return 0.35135977293359877;  // std dev = 4.693, 89.000 (wgt'ed) examples reached here.  /* #neg=40 #pos=49 */
WILL Produced-Tree #3
% FOR teamplayssport(A, B):
%   if ( teamalsoknownas(A, C), recursion_teamplayssport(C, B) )
%   then return 0.29501148584020487;  // std dev = 1.248, 8.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=5 */
%   else if ( teamalsoknownas(A, D) )
%   | then if ( teamplaysagainstteam(E, A), recursion_teamplayssport(E, B) )
%   | | then if ( athleteplaysforteam(F, D) )
%   | | | then return 0.6100753567285349;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | | else return 0.4087510289909782;  // std dev = 1.099, 8.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=6 */
%   | | else if ( teamplaysagainstteam(G, D), teamplaysagainstteam(G, A) )
%   | | | then return -0.14814948284659532;  // std dev = 0.032, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | | else return 0.2173916169082017;  // std dev = 3.368, 49.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=20 */
%   | else if ( teamalsoknownas(H, A), teamplaysinleague(H, I) )
%   | | then if ( recursion_teamplayssport(H, B) )
%   | | | then return 0.4962701462318813;  // std dev = 0.935, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | | | else return 0.005709855331653718;  // std dev = 1.265, 10.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | | else if ( athleteledsportsteam(J, A) )
%   | | | then return 0.22431773328356083;  // std dev = 3.577, 69.000 (wgt'ed) examples reached here.  /* #neg=36 #pos=33 */
%   | | | else return 0.2701352896787265;  // std dev = 5.851, 158.000 (wgt'ed) examples reached here.  /* #neg=75 #pos=83 */
WILL Produced-Tree #4
% FOR teamplayssport(A, B):
%   if ( teamalsoknownas(A, C), teamalsoknownas(C, D) )
%   then if ( recursion_teamplayssport(D, B) )
%   | then if ( teamplaysinleague(C, E) )
%   | | then return 0.30079227749070664;  // std dev = 3.268, 47.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=27 */
%   | | else return 0.5097182654613699;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | else if ( athleteledsportsteam(F, A), teamplaysinleague(A, G) )
%   | | then if ( teamplaysagainstteam(H, A), recursion_teamplayssport(H, B) )
%   | | | then return -0.3180359444220086;  // std dev = 0.040, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | | else return -0.13317566471958522;  // std dev = 0.027, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else if ( teamalsoknownas(D, I), recursion_teamplayssport(I, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.20838572384001078;  // std dev = 0.133, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   else return 0.20385180098211603;  // std dev = 7.068, 252.000 (wgt'ed) examples reached here.  /* #neg=123 #pos=129 */
WILL Produced-Tree #5
% FOR teamplayssport(A, B):
%   if ( teamalsoknownas(C, A), recursion_teamplayssport(C, B) )
%   then return 0.25977567856178874;  // std dev = 1.218, 10.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   else if ( teamalsoknownas(D, A), teamplaysinleague(D, E) )
%   | then if ( teamalsoknownas(F, D), teamplaysagainstteam(G, F) )
%   | | then if ( teamalsoknownas(A, H) )
%   | | | then return 0.10472516547486065;  // std dev = 2.533, 29.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=11 */
%   | | | else return 0.05650994953556766;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=2 */
%   | | else if ( teamalsoknownas(I, D), recursion_teamplayssport(I, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.22920433617871805;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( teamalsoknownas(A, J), recursion_teamplayssport(J, B) )
%   | | then if ( teamplaysagainstteam(K, A), teamalsoknownas(J, L) )
%   | | | then return 0.49054320380707006;  // std dev = 0.012, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | | else return 0.21871047887726855;  // std dev = 0.746, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( teamplaysagainstteam(M, A), recursion_teamplayssport(M, B) )
%   | | | then return 0.4823121857895843;  // std dev = 2.356, 84.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=78 */
%   | | | else return 0.013223473489151163;  // std dev = 5.740, 178.000 (wgt'ed) examples reached here.  /* #neg=123 #pos=55 */
WILL Produced-Tree #6
% FOR teamplayssport(A, B):
%   if ( teamplaysagainstteam(C, A), recursion_teamplayssport(C, B) )
%   then if ( teamalsoknownas(A, D), athleteplaysforteam(E, D) )
%   | then return 0.2398040960505911;  // std dev = 0.563, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else return 0.34425133139392;  // std dev = 2.728, 94.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=85 */
%   else if ( teamalsoknownas(A, F), teamalsoknownas(F, G) )
%   | then if ( recursion_teamplayssport(G, B) )
%   | | then return 0.22644181962424265;  // std dev = 3.073, 40.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=22 */
%   | | else if ( athleteplaysforteam(H, A), teamplaysagainstteam(I, A) )
%   | | | then return -0.1412786473008548;  // std dev = 0.069, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | | else return -0.20380761789089707;  // std dev = 0.089, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else if ( athleteledsportsteam(J, A), athleteplaysforteam(K, A) )
%   | | then if ( athleteplaysforteam(K, L), recursion_teamplayssport(L, B) )
%   | | | then return 0.7606596569487372;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | | else return -0.23711331490005252;  // std dev = 0.091, 31.000 (wgt'ed) examples reached here.  /* #neg=31 */
%   | | else if ( athleteledsportsteam(M, A), teamalsoknownas(N, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.024314308808265957;  // std dev = 5.142, 131.000 (wgt'ed) examples reached here.  /* #neg=86 #pos=45 */
WILL Produced-Tree #7
% FOR teamplayssport(A, B):
%   if ( teamalsoknownas(A, C), teamplaysinleague(C, D) )
%   then if ( recursion_teamplayssport(C, B) )
%   | then return 0.04699903739247344;  // std dev = 1.160, 8.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=5 */
%   | else if ( teamalsoknownas(C, E) )
%   | | then return 0.10802264568608687;  // std dev = 3.267, 53.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=24 */
%   | | else return -0.0046603453553973;  // std dev = 0.473, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   else if ( teamplaysagainstteam(F, A), athleteledsportsteam(G, F) )
%   | then if ( teamalsoknownas(F, H), recursion_teamplayssport(H, B) )
%   | | then return 0.3274233020488814;  // std dev = 1.184, 52.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=50 */
%   | | else if ( teamplaysinleague(A, I), teamalsoknownas(F, J) )
%   | | | then return -0.16428070985424406;  // std dev = 1.883, 54.000 (wgt'ed) examples reached here.  /* #neg=47 #pos=7 */
%   | | | else return 0.03831498801816643;  // std dev = 2.229, 44.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=20 */
%   | else if ( teamplaysagainstteam(K, A), teamalsoknownas(K, L) )
%   | | then return 0.11203539040984942;  // std dev = 0.565, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | else if ( teamplaysagainstteam(M, A) )
%   | | | then return -0.04307986435324385;  // std dev = 0.992, 12.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=4 */
%   | | | else return 0.14970078127210767;  // std dev = 4.543, 83.000 (wgt'ed) examples reached here.  /* #neg=40 #pos=43 */
WILL Produced-Tree #8
% FOR teamplayssport(A, B):
%   if ( teamalsoknownas(C, A), recursion_teamplayssport(C, B) )
%   then return 0.0764713006870098;  // std dev = 1.139, 10.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   else if ( teamalsoknownas(D, A), teamplaysinleague(D, E) )
%   | then if ( teamplaysagainstteam(F, D), teamalsoknownas(G, F) )
%   | | then if ( recursion_teamplayssport(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.07676715739673504;  // std dev = 1.014, 11.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=2 */
%   | | else if ( athleteplaysforteam(H, D) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.03208561794833637;  // std dev = 2.463, 28.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=11 */
%   | else if ( athleteledsportsteam(I, A), teamalsoknownas(J, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( teamplaysinleague(A, K) )
%   | | | then return 0.07118350470900223;  // std dev = 5.267, 206.000 (wgt'ed) examples reached here.  /* #neg=100 #pos=106 */
%   | | | else return 0.10221857358220918;  // std dev = 3.474, 61.000 (wgt'ed) examples reached here.  /* #neg=30 #pos=31 */
WILL Produced-Tree #9
% FOR teamplayssport(A, B):
%   if ( athleteledsportsteam(C, A) )
%   then if ( athleteledsportsteam(C, D), recursion_teamplayssport(D, B) )
%   | then if ( teamalsoknownas(D, E), teamalsoknownas(F, D) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( teamplaysagainstteam(G, A), teamplaysagainstteam(G, D) )
%   | | | then return 0.3144307605840862;  // std dev = 0.481, 43.000 (wgt'ed) examples reached here.  /* #pos=43 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.24345336777094598;  // std dev = 0.949, 45.000 (wgt'ed) examples reached here.  /* #neg=45 */
%   else if ( teamalsoknownas(A, H), recursion_teamplayssport(H, B) )
%   | then return -0.14307285056155808;  // std dev = 0.901, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | else if ( teamalsoknownas(I, A), athleteledsportsteam(J, I) )
%   | | then if ( teamalsoknownas(K, I), recursion_teamplayssport(K, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.07827268119831486;  // std dev = 0.359, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | else if ( teamalsoknownas(A, L) )
%   | | | then return 0.09134621010011913;  // std dev = 3.193, 57.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=28 */
%   | | | else return 0.06276625765446876;  // std dev = 5.366, 163.000 (wgt'ed) examples reached here.  /* #neg=79 #pos=84 */
WILL Produced-Tree #10
% FOR teamplayssport(A, B):
%   if ( athleteledsportsteam(C, A) )
%   then if ( athleteledsportsteam(C, D), recursion_teamplayssport(D, B) )
%   | then if ( teamalsoknownas(E, D), teamplaysinleague(D, F) )
%   | | then return 0.2684849550011425;  // std dev = 0.380, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else return 0.24918828936391668;  // std dev = 0.215, 36.000 (wgt'ed) examples reached here.  /* #pos=36 */
%   | else return -0.20574146507683622;  // std dev = 0.893, 45.000 (wgt'ed) examples reached here.  /* #neg=45 */
%   else if ( teamplaysagainstteam(G, A), athleteledsportsteam(H, G) )
%   | then if ( recursion_teamplayssport(G, B) )
%   | | then return 0.20155529787147147;  // std dev = 1.545, 38.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=35 */
%   | | else if ( teamalsoknownas(I, G) )
%   | | | then return -0.1385859982097468;  // std dev = 1.531, 30.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=4 */
%   | | | else return -0.11825259460008375;  // std dev = 1.271, 17.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=4 */
%   | else if ( teamalsoknownas(A, J), recursion_teamplayssport(J, B) )
%   | | then return -0.06991646340458613;  // std dev = 0.611, 2.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */
%   | | else if ( teamplaysagainstteam(K, A), recursion_teamplayssport(K, B) )
%   | | | then return 0.2670244911181936;  // std dev = 0.191, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.05758167574943797;  // std dev = 5.514, 132.000 (wgt'ed) examples reached here.  /* #neg=70 #pos=62 */


Results
   AUC ROC   = 0.834615
   AUC PR    = 0.845379
   CLL	      = -0.509908
   Precision = 0.873418 at threshold = 0.5
   Recall    = 0.518797
   F1        = 0.650943


Total learning time: 8.45 seconds
Total inference time: 3.576 seconds
AUC ROC: 0.834615


Results scoring model
   AUC ROC   = 0.90943
   AUC PR    = 0.916046
   CLL	      = -0.439979
   Precision = 0.933962 at threshold = 0.5
   Recall    = 0.626582
   F1        = 0.75


Total scoring time: 4.012 seconds
Parameter learned model CLL: -0.439979


Structure after Parameter Learning
[['teamplayssport(A, B)', {'': 'teamalsoknownas(C, A)', 'true': 'recursion_teamplayssport(C, B)', 'false': 'teamplaysagainstteam(D, A)', 'false,true': 'recursion_teamplayssport(D, B)', 'false,true,false': 'teamalsoknownas(A, E), recursion_teamplayssport(E, B)', 'false,false': 'teamplaysinleague(A, F)', 'false,false,false': 'athleteplaysforteam(G, A)'}, {'true,true': [1.265, 2, 8], 'true,false': [3.055, 28, 14], 'false,true,true': [2.364, 6, 81], 'false,true,false,true': [0.0, 0, 1], 'false,true,false,false': [2.171, 82, 5], 'false,false,true': [0.497, 22, 27], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [3.146, 18, 22]}], ['teamplayssport(A, B)', {'': 'teamplaysagainstteam(C, A), teamalsoknownas(A, D)', 'true': 'recursion_teamplayssport(D, B)', 'true,false': 'recursion_teamplayssport(C, B), athleteplaysforteam(E, C)', 'false': 'teamalsoknownas(A, F), athleteledsportsteam(G, A)', 'false,false': 'teamalsoknownas(H, A)', 'false,false,true': 'recursion_teamplayssport(H, B)', 'false,false,false': 'teamplaysagainstteam(I, A)'}, {'true,true': [1.08, 2, 4], 'true,false,true': [1.158, 2, 8], 'true,false,false': [1.786, 16, 4], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.943, 1, 8], 'false,false,true,false': [2.787, 22, 12], 'false,false,false,true': [5.362, 75, 73], 'false,false,false,false': [4.693, 40, 49]}], ['teamplayssport(A, B)', {'': 'teamalsoknownas(A, C), recursion_teamplayssport(C, B)', 'false': 'teamalsoknownas(A, D)', 'false,true': 'teamplaysagainstteam(E, A), recursion_teamplayssport(E, B)', 'false,true,true': 'athleteplaysforteam(F, D)', 'false,true,false': 'teamplaysagainstteam(G, D), teamplaysagainstteam(G, A)', 'false,false': 'teamalsoknownas(H, A), teamplaysinleague(H, I)', 'false,false,true': 'recursion_teamplayssport(H, B)', 'false,false,false': 'athleteledsportsteam(J, A)'}, {'true': [1.248, 3, 5], 'false,true,true,true': [0.0, 0, 2], 'false,true,true,false': [1.099, 2, 6], 'false,true,false,true': [0.032, 4, 0], 'false,true,false,false': [3.368, 29, 20], 'false,false,true,true': [0.935, 1, 7], 'false,false,true,false': [1.265, 8, 2], 'false,false,false,true': [3.577, 36, 33], 'false,false,false,false': [5.851, 75, 83]}], ['teamplayssport(A, B)', {'': 'teamalsoknownas(A, C), teamalsoknownas(C, D)', 'true': 'recursion_teamplayssport(D, B)', 'true,true': 'teamplaysinleague(C, E)', 'true,false': 'athleteledsportsteam(F, A), teamplaysinleague(A, G)', 'true,false,true': 'teamplaysagainstteam(H, A), recursion_teamplayssport(H, B)', 'true,false,false': 'teamalsoknownas(D, I), recursion_teamplayssport(I, B)'}, {'true,true,true': [3.268, 20, 27], 'true,true,false': [0.0, 0, 2], 'true,false,true,true': [0.04, 2, 0], 'true,false,true,false': [0.027, 3, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [0.133, 10, 0], 'false': [7.068, 123, 129]}], ['teamplayssport(A, B)', {'': 'teamalsoknownas(C, A), recursion_teamplayssport(C, B)', 'false': 'teamalsoknownas(D, A), teamplaysinleague(D, E)', 'false,true': 'teamalsoknownas(F, D), teamplaysagainstteam(G, F)', 'false,true,true': 'teamalsoknownas(A, H)', 'false,true,false': 'teamalsoknownas(I, D), recursion_teamplayssport(I, B)', 'false,false': 'teamalsoknownas(A, J), recursion_teamplayssport(J, B)', 'false,false,true': 'teamplaysagainstteam(K, A), teamalsoknownas(J, L)', 'false,false,false': 'teamplaysagainstteam(M, A), recursion_teamplayssport(M, B)'}, {'true': [1.218, 2, 8], 'false,true,true,true': [2.533, 18, 11], 'false,true,true,false': [1.195, 5, 2], 'false,true,false,true': [0.0, 0, 0], 'false,true,false,false': [0.0, 3, 0], 'false,false,true,true': [0.012, 0, 2], 'false,false,true,false': [0.746, 1, 2], 'false,false,false,true': [2.356, 6, 78], 'false,false,false,false': [5.74, 123, 55]}], ['teamplayssport(A, B)', {'': 'teamplaysagainstteam(C, A), recursion_teamplayssport(C, B)', 'true': 'teamalsoknownas(A, D), athleteplaysforteam(E, D)', 'false': 'teamalsoknownas(A, F), teamalsoknownas(F, G)', 'false,true': 'recursion_teamplayssport(G, B)', 'false,true,false': 'athleteplaysforteam(H, A), teamplaysagainstteam(I, A)', 'false,false': 'athleteledsportsteam(J, A), athleteplaysforteam(K, A)', 'false,false,true': 'athleteplaysforteam(K, L), recursion_teamplayssport(L, B)', 'false,false,false': 'athleteledsportsteam(M, A), teamalsoknownas(N, A)'}, {'true,true': [0.563, 1, 4], 'true,false': [2.728, 9, 85], 'false,true,true': [3.073, 18, 22], 'false,true,false,true': [0.069, 7, 0], 'false,true,false,false': [0.089, 6, 0], 'false,false,true,true': [0.0, 0, 2], 'false,false,true,false': [0.091, 31, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [5.142, 86, 45]}], ['teamplayssport(A, B)', {'': 'teamalsoknownas(A, C), teamplaysinleague(C, D)', 'true': 'recursion_teamplayssport(C, B)', 'true,false': 'teamalsoknownas(C, E)', 'false': 'teamplaysagainstteam(F, A), athleteledsportsteam(G, F)', 'false,true': 'teamalsoknownas(F, H), recursion_teamplayssport(H, B)', 'false,true,false': 'teamplaysinleague(A, I), teamalsoknownas(F, J)', 'false,false': 'teamplaysagainstteam(K, A), teamalsoknownas(K, L)', 'false,false,false': 'teamplaysagainstteam(M, A)'}, {'true,true': [1.16, 3, 5], 'true,false,true': [3.267, 29, 24], 'true,false,false': [0.473, 3, 2], 'false,true,true': [1.184, 2, 50], 'false,true,false,true': [1.883, 47, 7], 'false,true,false,false': [2.229, 24, 20], 'false,false,true': [0.565, 2, 3], 'false,false,false,true': [0.992, 8, 4], 'false,false,false,false': [4.543, 40, 43]}], ['teamplayssport(A, B)', {'': 'teamalsoknownas(C, A), recursion_teamplayssport(C, B)', 'false': 'teamalsoknownas(D, A), teamplaysinleague(D, E)', 'false,true': 'teamplaysagainstteam(F, D), teamalsoknownas(G, F)', 'false,true,true': 'recursion_teamplayssport(G, B)', 'false,true,false': 'athleteplaysforteam(H, D)', 'false,false': 'athleteledsportsteam(I, A), teamalsoknownas(J, A)', 'false,false,false': 'teamplaysinleague(A, K)'}, {'true': [1.139, 2, 8], 'false,true,true,true': [0.0, 0, 0], 'false,true,true,false': [1.014, 9, 2], 'false,true,false,true': [0.0, 0, 0], 'false,true,false,false': [2.463, 17, 11], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [5.267, 100, 106], 'false,false,false,false': [3.474, 30, 31]}], ['teamplayssport(A, B)', {'': 'athleteledsportsteam(C, A)', 'true': 'athleteledsportsteam(C, D), recursion_teamplayssport(D, B)', 'true,true': 'teamalsoknownas(D, E), teamalsoknownas(F, D)', 'true,true,false': 'teamplaysagainstteam(G, A), teamplaysagainstteam(G, D)', 'false': 'teamalsoknownas(A, H), recursion_teamplayssport(H, B)', 'false,false': 'teamalsoknownas(I, A), athleteledsportsteam(J, I)', 'false,false,true': 'teamalsoknownas(K, I), recursion_teamplayssport(K, B)', 'false,false,false': 'teamalsoknownas(A, L)'}, {'true,true,true': [0.0, 0, 0], 'true,true,false,true': [0.481, 0, 43], 'true,true,false,false': [0.0, 0, 0], 'true,false': [0.949, 45, 0], 'false,true': [0.901, 2, 2], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [0.359, 3, 1], 'false,false,false,true': [3.193, 29, 28], 'false,false,false,false': [5.366, 79, 84]}], ['teamplayssport(A, B)', {'': 'athleteledsportsteam(C, A)', 'true': 'athleteledsportsteam(C, D), recursion_teamplayssport(D, B)', 'true,true': 'teamalsoknownas(E, D), teamplaysinleague(D, F)', 'false': 'teamplaysagainstteam(G, A), athleteledsportsteam(H, G)', 'false,true': 'recursion_teamplayssport(G, B)', 'false,true,false': 'teamalsoknownas(I, G)', 'false,false': 'teamalsoknownas(A, J), recursion_teamplayssport(J, B)', 'false,false,false': 'teamplaysagainstteam(K, A), recursion_teamplayssport(K, B)'}, {'true,true,true': [0.38, 0, 7], 'true,true,false': [0.215, 0, 36], 'true,false': [0.893, 45, 0], 'false,true,true': [1.545, 3, 35], 'false,true,false,true': [1.531, 26, 4], 'false,true,false,false': [1.271, 13, 4], 'false,false,true': [0.611, 1, 1], 'false,false,false,true': [0.191, 0, 9], 'false,false,false,false': [5.514, 70, 62]}]]
[{'': [0.24408284023668736, 0.24977043158861734], 'false': [0.24999183673469572, 0.2474435046080041], 'false,true': [0.06420927467300822, 0.06353305785123993], 'false,false': [0.2473969179508552, 0.2475000000000011], 'false,false,false': [nan, 0.2475000000000011], 'true': [0.15999999999999986, 0.22222222222222174], 'false,true,false': [0.0, 0.054168318139780604]}, {'': [0.2099451323291957, 0.21849429725630956], 'false': [nan, 0.2184942972563107], 'false,false': [0.2363811497158546, 0.21509971901287234], 'false,false,true': [0.09876543209876552, 0.22837370242214503], 'false,false,false': [0.19428863238602284, 0.24744342896665575], 'true': [0.1944099392532851, 0.20704251552322367], 'true,false': [0.1340939154378598, 0.1594968118490367]}, {'': [0.19465133247306554, 0.20908473370766817], 'false': [0.21705934585842174, 0.20692709434690665], 'false,true': [0.12719368417554203, 0.2233498915931421], 'false,true,false': [0.0002486968874630749, 0.23147768340602398], 'false,false': [0.19691960469336184, 0.2076431727531054], 'false,false,false': [0.18545028508283354, 0.2166969058907767], 'false,false,true': [0.10937500000000003, 0.1600000000000001], 'false,true,true': [0.0, 0.15088580823163183]}, {'': [0.2171573636776764, 0.19823019729928099], 'true': [0.21967604640029992, 0.004061942738382177], 'true,true': [0.2272423278214787, 0.0], 'true,false': [0.008658382310692731, 0.001763188744755856], 'true,false,true': [0.0007831211154993023, 0.00023922723615839997], 'true,false,false': [nan, 0.001763188744755856]}, {'': [0.14839565195609467, 0.19705855627365287], 'false': [0.20898923294104266, 0.19413388444949112], 'false,true': [0.21830227103474303, 0.0], 'false,true,true': [0.2212828125495182, 0.20408163265306128], 'false,false': [0.1291507958006555, 0.19487142217099507], 'false,false,false': [0.06606362859813233, 0.18510859395666995], 'false,false,true': [7.424839966171937e-05, 0.1856446152642136], 'false,true,false': [nan, 0.0]}, {'': [0.07889289854697598, 0.19003867262835586], 'false': [0.20779468863800238, 0.1791447806045118], 'false,true': [0.23611864616846664, 0.0019454161912200814], 'false,false': [0.05693114869456284, 0.20180546674607822], 'false,false,false': [nan, 0.20180546674607822], 'true': [0.06341585807378218, 0.07916517442253199], 'false,false,true': [0.0, 0.0002677076447282588], 'false,true,false': [0.0006704370355856415, 0.001327576092689543]}, {'': [0.1866986425337922, 0.15564668337302895], 'true': [0.16833981061056505, 0.18891178361593594], 'true,false': [0.20141115683792177, 0.04481557930921472], 'false': [0.10910971670589721, 0.22335793062005788], 'false,false': [0.06377151177753779, 0.23174835249090092], 'false,false,false': [0.08200633545914819, 0.24870335307400573], 'false,true': [0.026936027473134658, 0.09703925513239137], 'false,true,false': [0.06566711428415573, 0.1129247860833643]}, {'': [0.1297476408674422, 0.1543990135948667], 'false': [0.1843565692635603, 0.14926968440398064], 'false,true': [0.09350811572583151, 0.21670502818662404], 'false,true,false': [nan, 0.21670502818662404], 'false,false': [nan, 0.14926968440398103], 'false,false,false': [0.13466342796688424, 0.19785260656402548], 'false,true,true': [nan, 0.09350811572583151]}, {'': [0.09063562607002339, 0.176435425301798], 'false': [0.2028285092764786, 0.1751860593951435], 'false,false': [0.03215355182603903, 0.17739315856070068], 'false,false,false': [0.17888567660402577, 0.17665960607378292], 'true': [0.005375233147987728, 0.020026075822461426], 'false,false,true': [nan, 0.03215355182603903], 'true,true': [nan, 0.005375233147987728], 'true,true,false': [0.005375233147987728, nan]}, {'': [0.06369854317814505, 0.17560955116288132], 'false': [0.10209623871861694, 0.21831994050643846], 'false,false': [0.18639589870313694, 0.21849523283425432], 'false,false,false': [0.004055296045953301, 0.2303161614721095], 'false,true': [0.06282917160693574, 0.08433367386787043], 'false,true,false': [0.07809183583788198, 0.09508477962266833], 'true': [0.004495576918336564, 0.017740134616007954], 'true,true': [0.020680186608018323, 0.0012879525220946696]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;teamplayssport(A, B) :- teamalsoknownas(C, A).;true;true
0;false;teamplaysagainstteam(D, A).;true;true
0;false,true;recursion_teamplayssport(D, B).;true;true
0;false,true,false;teamalsoknownas(A, E), recursion_teamplayssport(E, B).;true;true
2;;teamplayssport(A, B) :- teamalsoknownas(A, C), recursion_teamplayssport(C, B).;true;true
2;false;teamalsoknownas(A, D).;true;true
2;false,true;teamplaysagainstteam(E, A), recursion_teamplayssport(E, B).;true;true
2;false,true,true;athleteplaysforteam(F, D).;true;true
2;false,true,false;teamplaysagainstteam(G, D), teamplaysagainstteam(G, A).;true;true
3;;teamplayssport(A, B) :- teamalsoknownas(A, C), teamalsoknownas(C, D).;true;true
3;true;recursion_teamplayssport(D, B).;true;true
3;true,true;teamplaysinleague(C, E).;true;true
3;true,false;athleteledsportsteam(F, A), teamplaysinleague(A, G).;true;true
3;true,false,true;teamplaysagainstteam(H, A), recursion_teamplayssport(H, B).;true;true
4;;teamplayssport(A, B) :- teamalsoknownas(C, A), recursion_teamplayssport(C, B).;true;true
4;false;teamalsoknownas(D, A), teamplaysinleague(D, E).;true;true
4;false,true;teamalsoknownas(F, D), teamplaysagainstteam(G, F).;true;true
4;false,false;teamalsoknownas(A, J), recursion_teamplayssport(J, B).;true;true
4;false,false,true;teamplaysagainstteam(K, A), teamalsoknownas(J, L).;true;true
5;;teamplayssport(A, B) :- teamplaysagainstteam(C, A), recursion_teamplayssport(C, B).;true;true
5;false;teamalsoknownas(A, F), teamalsoknownas(F, G).;true;true
5;false,true;recursion_teamplayssport(G, B).;true;true
5;false,true,false;athleteplaysforteam(H, A), teamplaysagainstteam(I, A).;true;true
5;false,false;athleteledsportsteam(J, A), athleteplaysforteam(K, A).;true;true
5;false,false,true;athleteplaysforteam(K, L), recursion_teamplayssport(L, B).;true;true
9;;teamplayssport(A, B) :- athleteledsportsteam(C, A).;true;true
9;true;athleteledsportsteam(C, D), recursion_teamplayssport(D, B).;true;true
9;true,true;teamalsoknownas(E, D), teamplaysinleague(D, F).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR teamplayssport(A, B):
%   if ( teamalsoknownas(C, A) )
%   then if ( athleteplayssport(D, B), athleteledsportsteam(D, E) )
%   | then if ( teamplaysinleague(A, F), teamplaysinleague(E, F) )
%   | | then if ( recursion_teamplayssport(E, B) )
%   | | | then return 0.8581489350995123;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return 0.5581489350995124;  // std dev = 1.449, 10.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=7 */
%   | | else if ( teamplaysinleague(A, G) )
%   | | | then return 0.0803711573217344;  // std dev = 1.247, 9.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | | | else return 0.5248156017661789;  // std dev = 1.155, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | else return -0.041851064900487796;  // std dev = 0.300, 20.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=2 */
%   else if ( teamplaysagainstteam(H, A) )
%   | then if ( recursion_teamplayssport(H, B) )
%   | | then return 0.7891834178581326;  // std dev = 0.253, 87.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=81 */
%   | | else return -0.07366924671866949;  // std dev = 0.252, 88.000 (wgt'ed) examples reached here.  /* #neg=82 #pos=6 */
%   | else if ( athleteplayssport(I, B), athleteledsportsteam(I, J) )
%   | | then return 0.6974346493852267;  // std dev = 0.367, 56.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=47 */
%   | | else return -0.08124500429442719;  // std dev = 0.239, 33.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=2 */
WILL Produced-Tree #2
% FOR teamplayssport(A, B):
%   if ( athleteplayssport(C, B), athleteledsportsteam(C, D) )
%   then if ( teamplaysagainstteam(D, A), recursion_teamplayssport(D, B) )
%   | then return 0.7316324157290197;  // std dev = 0.034, 62.000 (wgt'ed) examples reached here.  /* #pos=62 */
%   | else if ( teamplaysagainstteam(A, E), athleteledsportsteam(F, E) )
%   | | then if ( recursion_teamplayssport(E, B), athleteplaysforteam(C, E) )
%   | | | then return 0.7417211511235293;  // std dev = 0.038, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.06401493080517144;  // std dev = 2.710, 45.000 (wgt'ed) examples reached here.  /* #neg=34 #pos=11 */
%   | | else if ( teamplaysinleague(A, G), teamplaysinleague(D, G) )
%   | | | then return 0.7018598945684846;  // std dev = 1.292, 34.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=32 */
%   | | | else return 0.4449391076153284;  // std dev = 3.447, 58.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=39 */
%   else if ( athleteplayssport(H, B), athleteplaysinleague(H, I) )
%   | then if ( teamplaysagainstteam(A, J), recursion_teamplayssport(J, B) )
%   | | then return 0.5591774367261307;  // std dev = 0.778, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else if ( teamalsoknownas(A, K), recursion_teamplayssport(K, B) )
%   | | | then return 0.5326012722104898;  // std dev = 0.814, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return -0.13344626333381157;  // std dev = 0.005, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | else return -0.10088975586038713;  // std dev = 0.178, 92.000 (wgt'ed) examples reached here.  /* #neg=89 #pos=3 */
WILL Produced-Tree #3
% FOR teamplayssport(A, B):
%   if ( teamalsoknownas(A, C), recursion_teamplayssport(C, B) )
%   then if ( athleteplaysforteam(D, A), athleteplayssport(D, B) )
%   | then return 0.5693462001283176;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return 0.1842847936762499;  // std dev = 1.106, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   else if ( teamalsoknownas(A, E) )
%   | then if ( teamplaysagainstteam(F, A), recursion_teamplayssport(F, B) )
%   | | then if ( athleteplaysforteam(G, E) )
%   | | | then return 0.6035787904541157;  // std dev = 0.048, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | | else return 0.4549420943695932;  // std dev = 1.026, 8.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=6 */
%   | | else if ( teamplaysagainstteam(H, E), teamplaysagainstteam(H, A) )
%   | | | then return -0.13127022655346204;  // std dev = 0.019, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | | else return 0.1742998863079469;  // std dev = 2.954, 49.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=20 */
%   | else if ( athleteplayssport(I, B), athleteledsportsteam(I, J) )
%   | | then if ( teamplaysagainstteam(A, K), recursion_teamplayssport(K, B) )
%   | | | then return 0.5384706489204073;  // std dev = 1.726, 75.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=71 */
%   | | | else return 0.2852655706167892;  // std dev = 3.805, 81.000 (wgt'ed) examples reached here.  /* #neg=34 #pos=47 */
%   | | else return -0.05490207893107903;  // std dev = 0.231, 89.000 (wgt'ed) examples reached here.  /* #neg=82 #pos=7 */
WILL Produced-Tree #4
% FOR teamplayssport(A, B):
%   if ( teamalsoknownas(A, C), teamalsoknownas(C, D) )
%   then if ( recursion_teamplayssport(D, B) )
%   | then if ( teamplaysinleague(C, E) )
%   | | then if ( athleteplayssport(F, B), athleteplaysinleague(F, G) )
%   | | | then return 0.3525596241561145;  // std dev = 2.659, 39.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=27 */
%   | | | else return -0.14415258270100012;  // std dev = 0.006, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | else return 0.49193935888476265;  // std dev = 0.051, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | else return -0.16775813399795014;  // std dev = 0.063, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   else if ( athleteplayssport(H, B), athleteledsportsteam(H, I) )
%   | then if ( teamplaysagainstteam(I, A), recursion_teamplayssport(I, B) )
%   | | then return 0.4361995477141649;  // std dev = 0.119, 60.000 (wgt'ed) examples reached here.  /* #pos=60 */
%   | | else if ( teamplaysagainstteam(J, A) )
%   | | | then return 0.08069528768598308;  // std dev = 2.842, 53.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=21 */
%   | | | else return 0.4055471618855575;  // std dev = 2.523, 49.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=41 */
%   | else if ( athleteledsportsteam(K, A), teamalsoknownas(L, A) )
%   | | then return 0.2138827086812419;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | else return -0.058964715918250456;  // std dev = 0.212, 87.000 (wgt'ed) examples reached here.  /* #neg=81 #pos=6 */
WILL Produced-Tree #5
% FOR teamplayssport(A, B):
%   if ( teamalsoknownas(C, A), recursion_teamplayssport(C, B) )
%   then if ( teamalsoknownas(D, A), athleteledsportsteam(E, D) )
%   | then return 0.37001777206887804;  // std dev = 0.128, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else return -0.038068228596506555;  // std dev = 0.461, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   else if ( teamalsoknownas(F, A), teamplaysinleague(F, G) )
%   | then if ( teamalsoknownas(H, F), teamplaysagainstteam(I, H) )
%   | | then if ( athleteplayssport(J, B), athleteledsportsteam(J, K) )
%   | | | then return 0.18471193735164465;  // std dev = 1.999, 21.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=12 */
%   | | | else return -0.059106415072667944;  // std dev = 0.949, 15.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=1 */
%   | | else return -0.17808795610391262;  // std dev = 0.158, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( teamalsoknownas(A, L), recursion_teamplayssport(L, B) )
%   | | then if ( teamplaysagainstteam(M, A), teamalsoknownas(L, N) )
%   | | | then return 0.5177543897494311;  // std dev = 0.245, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | | else return 0.11482670527643267;  // std dev = 0.517, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( athleteplayssport(P, B), athleteplaysinleague(P, Q) )
%   | | | then return 0.22969645522788326;  // std dev = 4.602, 186.000 (wgt'ed) examples reached here.  /* #neg=55 #pos=131 */
%   | | | else return -0.08514082054716225;  // std dev = 1.399, 76.000 (wgt'ed) examples reached here.  /* #neg=74 #pos=2 */
WILL Produced-Tree #6
% FOR teamplayssport(A, B):
%   if ( teamplaysagainstteam(C, A), recursion_teamplayssport(C, B) )
%   then if ( teamplaysinleague(A, D), athleteplaysforteam(E, A) )
%   | then if ( teamalsoknownas(F, A), teamalsoknownas(G, F) )
%   | | then return -0.04300790748185631;  // std dev = 0.910, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   | | else return 0.2513770693268976;  // std dev = 0.232, 69.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=63 */
%   | else return 0.378187892841793;  // std dev = 0.110, 24.000 (wgt'ed) examples reached here.  /* #pos=24 */
%   else if ( teamalsoknownas(A, H), teamalsoknownas(H, I) )
%   | then if ( recursion_teamplayssport(I, B) )
%   | | then if ( athleteplayssport(J, B), athleteplaysinleague(J, K) )
%   | | | then return 0.22680934640550146;  // std dev = 2.429, 32.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=22 */
%   | | | else return -0.11983265489801201;  // std dev = 0.009, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | else return -0.13675276375256484;  // std dev = 0.067, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | else if ( athleteledsportsteam(L, A), athleteplaysforteam(M, A) )
%   | | then return -0.10332690708640446;  // std dev = 0.206, 33.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=2 */
%   | | else if ( teamplaysagainstteam(N, A) )
%   | | | then return -0.11305954484555486;  // std dev = 1.358, 49.000 (wgt'ed) examples reached here.  /* #neg=47 #pos=2 */
%   | | | else return 0.13056116508914284;  // std dev = 3.158, 82.000 (wgt'ed) examples reached here.  /* #neg=39 #pos=43 */
WILL Produced-Tree #7
% FOR teamplayssport(A, B):
%   if ( athleteplayssport(C, B), athleteplaysinleague(C, D) )
%   then if ( teamplaysagainstteam(A, E), recursion_teamplayssport(E, B) )
%   | then if ( teamalsoknownas(A, F), athleteplaysforteam(G, A) )
%   | | then if ( athleteplaysforteam(C, E) )
%   | | | then return 0.2326144930285503;  // std dev = 0.047, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return -0.13617530770483594;  // std dev = 0.878, 7.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=1 */
%   | | else if ( athleteplaysforteam(H, E), athleteplayssport(H, I) )
%   | | | then return 0.21574042388244985;  // std dev = 1.652, 73.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=69 */
%   | | | else return 0.433056247903156;  // std dev = 0.243, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( teamplaysagainstteam(A, J), athleteledsportsteam(K, J) )
%   | | then if ( athleteplaysinleague(K, L), teamplaysinleague(A, L) )
%   | | | then return -0.2108383245371264;  // std dev = 0.443, 26.000 (wgt'ed) examples reached here.  /* #neg=26 */
%   | | | else return 0.24780445859177655;  // std dev = 1.114, 6.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | else if ( teamalsoknownas(A, M), teamplaysagainstteam(A, N) )
%   | | | then return 0.5571397462709623;  // std dev = 0.068, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.14609716081208182;  // std dev = 3.677, 96.000 (wgt'ed) examples reached here.  /* #neg=30 #pos=66 */
%   else return -0.06985601881937843;  // std dev = 0.175, 92.000 (wgt'ed) examples reached here.  /* #neg=89 #pos=3 */
WILL Produced-Tree #8
% FOR teamplayssport(A, B):
%   if ( athleteplayssport(C, B), athleteledsportsteam(C, D) )
%   then if ( teamplaysinleague(A, E), teamplaysinleague(D, E) )
%   | then if ( teamplaysagainstteam(F, A), teamplaysinleague(F, E) )
%   | | then if ( teamalsoknownas(G, D), recursion_teamplayssport(G, B) )
%   | | | then return 0.1889823211654086;  // std dev = 1.281, 75.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=72 */
%   | | | else return -0.18885067805527722;  // std dev = 0.909, 18.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=2 */
%   | | else return 0.30701502879744474;  // std dev = 0.190, 31.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=30 */
%   | else if ( athleteplaysforteam(C, D), teamalsoknownas(D, H) )
%   | | then if ( teamplaysinleague(A, I) )
%   | | | then return -0.135274822113175;  // std dev = 2.123, 25.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=8 */
%   | | | else return 0.08699585641622826;  // std dev = 1.867, 22.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=14 */
%   | | else if ( teamplaysinleague(A, J) )
%   | | | then return -0.02655775156041352;  // std dev = 1.602, 17.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=7 */
%   | | | else return 0.3704345786676626;  // std dev = 0.215, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   else if ( teamalsoknownas(K, A), athleteplaysforteam(L, K) )
%   | then return 0.10447091336880923;  // std dev = 0.354, 8.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | else return -0.06246430978983013;  // std dev = 0.175, 104.000 (wgt'ed) examples reached here.  /* #neg=97 #pos=7 */
WILL Produced-Tree #9
% FOR teamplayssport(A, B):
%   if ( teamplaysagainstteam(C, A), recursion_teamplayssport(C, B) )
%   then if ( teamplaysinleague(A, D), teamplaysinleague(C, E) )
%   | then if ( teamplaysagainstteam(A, F), athleteplaysinleague(G, E) )
%   | | then if ( recursion_teamplayssport(F, B), athleteplaysinleague(H, D) )
%   | | | then return 0.14608447068393168;  // std dev = 1.663, 79.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=74 */
%   | | | else return -0.16833940060523592;  // std dev = 0.603, 7.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=2 */
%   | | else return 0.39060101925662855;  // std dev = 0.406, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return 0.3067465858951911;  // std dev = 0.085, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   else if ( teamplaysagainstteam(I, A), athleteplaysforteam(J, I) )
%   | then return -0.07128630763186693;  // std dev = 0.200, 94.000 (wgt'ed) examples reached here.  /* #neg=87 #pos=7 */
%   | else if ( athleteplayssport(K, B), athleteledsportsteam(K, L) )
%   | | then if ( athleteplaysforteam(K, L), teamalsoknownas(L, M) )
%   | | | then return 0.006230812912290093;  // std dev = 2.650, 35.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=21 */
%   | | | else return 0.21837967385807358;  // std dev = 1.492, 41.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=38 */
%   | | else if ( teamplaysinleague(A, N) )
%   | | | then return -0.08156372084354103;  // std dev = 0.583, 24.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=1 */
%   | | | else return -0.02950857259096082;  // std dev = 1.406, 23.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=2 */
WILL Produced-Tree #10
% FOR teamplayssport(A, B):
%   if ( athleteledsportsteam(C, A) )
%   then if ( athleteledsportsteam(C, D), recursion_teamplayssport(D, B) )
%   | then if ( teamalsoknownas(E, D), teamplaysinleague(D, F) )
%   | | then return 0.28661135283889955;  // std dev = 0.267, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else return 0.1766876724024302;  // std dev = 0.064, 36.000 (wgt'ed) examples reached here.  /* #pos=36 */
%   | else return -0.14976744689316632;  // std dev = 0.126, 45.000 (wgt'ed) examples reached here.  /* #neg=45 */
%   else if ( athleteplayssport(G, B), athleteledsportsteam(G, H) )
%   | then if ( teamplaysinleague(A, I), athleteplaysinleague(G, I) )
%   | | then return 0.1715630369435514;  // std dev = 0.121, 40.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=38 */
%   | | else if ( athleteplaysforteam(G, H), teamalsoknownas(H, J) )
%   | | | then return -0.01341286970863054;  // std dev = 2.997, 52.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=27 */
%   | | | else return 0.15768712359157577;  // std dev = 1.904, 51.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=44 */
%   | else if ( teamplaysinleague(A, K) )
%   | | then return -0.07305235612002503;  // std dev = 0.102, 52.000 (wgt'ed) examples reached here.  /* #neg=50 #pos=2 */
%   | | else if ( teamplaysagainstteam(A, L), teamalsoknownas(M, L) )
%   | | | then return 0.14610523645838697;  // std dev = 0.449, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return -0.04067053263108627;  // std dev = 1.413, 29.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=2 */


Results
   AUC ROC   = 0.944146
   AUC PR    = 0.933553
   CLL	      = -0.340654
   Precision = 0.826389 at threshold = 0.5
   Recall    = 0.894737
   F1        = 0.859206


Total learning time: 496.744 seconds
Total inference time: 7.643 seconds
AUC ROC: 0.944146


Results scoring model
   AUC ROC   = 0.980812
   AUC PR    = 0.982709
   CLL	      = -0.26066
   Precision = 0.902439 at threshold = 0.5
   Recall    = 0.936709
   F1        = 0.919255


Total scoring time: 9.231 seconds
Refined model CLL: -0.26066


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.944146
   AUC PR    = 0.933553
   CLL	      = -0.340654
   Precision = 0.826389 at threshold = 0.5
   Recall    = 0.894737
   F1        = 0.859206


Total learning time: 518.437 seconds
Total inference time: 7.643 seconds
AUC ROC: 0.944146
Total revision time: 518.437
Best scored revision CLL: -0.26066


Dataset: 10_nell_finances_nell_sports, Fold: 2, Type: Transfer (trRDN-B), Time: 20:47:30
{'AUC ROC': 0.944146, 'AUC PR': 0.933553, 'CLL': -0.340654, 'Precision': [0.826389, 0.5], 'Recall': 0.894737, 'F1': 0.859206, 'Learning time': 518.437, 'Inference time': 7.643, 'parameter_0.6': {'AUC ROC': 0.834615, 'AUC PR': 0.845379, 'CLL': -0.509908, 'Precision': [0.873418, 0.5], 'Recall': 0.518797, 'F1': 0.650943, 'Learning time': 8.45, 'Inference time': 3.576}}


Amount of data: 0.8
******************************************
Performing Parameter Learning
******************************************
Refine
0;;companyeconomicsector(A, B) :- acquired(C, A).;true;true
0;true;economicsectorcompany(B, C).;false;false
0;false;companyalsoknownas(A, D).;true;true
0;false,true;economicsectorcompany(B, D).;false;true
0;false,true,false;acquired(A, E), economicsectorcompany(B, E).;false;false
0;false,false;companyceo(A, F).;true;true
0;false,false,true;bankchiefexecutiveceo(G, F).;false;false
0;false,false,false;countryhascompanyoffice(H, A).;false;false
1;;companyeconomicsector(A, B) :- companyalsoknownas(A, C), acquired(A, D).;true;true
1;true;economicsectorcompany(B, D).;false;true
1;true,false;economicsectorcompany(B, C), countryhascompanyoffice(E, C).;false;false
1;false;acquired(A, F), cityhascompanyoffice(G, A).;true;true
1;false,true;cityhascompanyoffice(G, H), economicsectorcompany(B, H).;false;false
1;false,false;acquired(I, A).;true;true
1;false,false,true;economicsectorcompany(B, I).;false;false
1;false,false,false;companyalsoknownas(A, J).;false;false
2;;companyeconomicsector(A, B) :- acquired(A, C), economicsectorcompany(B, C).;false;true
2;false;acquired(A, D).;true;true
2;false,true;companyalsoknownas(A, E), economicsectorcompany(B, E).;true;true
2;false,true,true;countryhascompanyoffice(F, D).;false;false
2;false,true,false;companyalsoknownas(D, G), companyalsoknownas(A, G).;false;false
2;false,false;acquired(H, A), companyceo(H, I).;true;true
2;false,false,true;economicsectorcompany(B, H).;false;false
2;false,false,false;cityhascompanyoffice(J, A).;false;false
3;;companyeconomicsector(A, B) :- acquired(A, C), acquired(C, D).;true;false
3;true;economicsectorcompany(B, D).;true;true
3;true,true;companyceo(C, E).;false;false
3;true,false;cityhascompanyoffice(F, A), companyceo(A, G).;true;true
3;true,false,true;companyalsoknownas(A, H), economicsectorcompany(B, H).;false;false
3;true,false,false;acquired(D, I), economicsectorcompany(B, I).;false;false
4;;companyeconomicsector(A, B) :- acquired(C, A), economicsectorcompany(B, C).;false;true
4;false;acquired(D, A), companyceo(D, E).;true;true
4;false,true;acquired(F, D), companyalsoknownas(F, G).;true;true
4;false,true,true;acquired(A, H).;false;false
4;false,true,false;acquired(I, D), economicsectorcompany(B, I).;false;false
4;false,false;acquired(A, J), economicsectorcompany(B, J).;true;true
4;false,false,true;companyalsoknownas(A, K), acquired(J, L).;false;false
4;false,false,false;companyalsoknownas(A, M), economicsectorcompany(B, M).;false;false
5;;companyeconomicsector(A, B) :- companyalsoknownas(A, C), economicsectorcompany(B, C).;true;true
5;true;acquired(A, D), countryhascompanyoffice(E, D).;false;false
5;false;acquired(A, F), acquired(F, G).;true;true
5;false,true;economicsectorcompany(B, G).;false;true
5;false,true,false;countryhascompanyoffice(H, A), companyalsoknownas(A, I).;false;false
5;false,false;cityhascompanyoffice(J, A), countryhascompanyoffice(K, A).;true;true
5;false,false,true;countryhascompanyoffice(K, L), economicsectorcompany(B, L).;false;false
5;false,false,false;cityhascompanyoffice(M, A), acquired(N, A).;false;false
6;;companyeconomicsector(A, B) :- acquired(A, C), companyceo(C, D).;true;true
6;true;economicsectorcompany(B, C).;false;true
6;true,false;acquired(C, E).;false;false
6;false;companyalsoknownas(A, F), cityhascompanyoffice(G, F).;true;true
6;false,true;acquired(F, H), economicsectorcompany(B, H).;false;true
6;false,true,false;companyceo(A, I), acquired(F, J).;false;false
6;false,false;companyalsoknownas(A, K), acquired(K, L).;false;true
6;false,false,false;companyalsoknownas(A, M).;false;false
7;;companyeconomicsector(A, B) :- acquired(C, A), economicsectorcompany(B, C).;false;true
7;false;acquired(D, A), companyceo(D, E).;true;true
7;false,true;companyalsoknownas(D, F), acquired(G, F).;true;true
7;false,true,true;economicsectorcompany(B, G).;false;false
7;false,true,false;countryhascompanyoffice(H, D).;false;false
7;false,false;cityhascompanyoffice(I, A), acquired(J, A).;true;true
7;false,false,true;acquired(K, J).;false;false
7;false,false,false;companyceo(A, L).;false;false
8;;companyeconomicsector(A, B) :- cityhascompanyoffice(C, A).;true;true
8;true;cityhascompanyoffice(C, D), economicsectorcompany(B, D).;true;false
8;true,true;acquired(D, E), acquired(F, D).;false;true
8;true,true,false;companyalsoknownas(A, G), companyalsoknownas(D, G).;false;false
8;false;acquired(A, H), economicsectorcompany(B, H).;false;true
8;false,false;acquired(I, A), cityhascompanyoffice(J, I).;true;true
8;false,false,true;acquired(K, I), economicsectorcompany(B, K).;false;false
8;false,false,false;acquired(A, L).;false;false
9;;companyeconomicsector(A, B) :- cityhascompanyoffice(C, A).;true;true
9;true;cityhascompanyoffice(C, D), economicsectorcompany(B, D).;true;false
9;true,true;acquired(E, D), companyceo(D, F).;false;false
9;false;companyalsoknownas(A, G), cityhascompanyoffice(H, G).;true;true
9;false,true;economicsectorcompany(B, G).;false;true
9;false,true,false;acquired(I, G).;false;false
9;false,false;acquired(A, J), economicsectorcompany(B, J).;false;true
9;false,false,false;companyalsoknownas(A, K), economicsectorcompany(B, K).;false;false


WILL Produced-Tree #1
% FOR teamplayssport(A, B):
%   if ( teamalsoknownas(A, C) )
%   then if ( recursion_teamplayssport(C, B) )
%   | then return 0.5854216623722396;  // std dev = 1.477, 11.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=8 */
%   | else return 0.309368447294633;  // std dev = 4.506, 82.000 (wgt'ed) examples reached here.  /* #neg=45 #pos=37 */
%   else if ( teamplaysagainstteam(D, A) )
%   | then if ( recursion_teamplayssport(D, B) )
%   | | then return 0.7770678540184298;  // std dev = 2.876, 111.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=102 */
%   | | else if ( teamalsoknownas(E, A), recursion_teamplayssport(E, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.10224710450444809;  // std dev = 1.960, 101.000 (wgt'ed) examples reached here.  /* #neg=97 #pos=4 */
%   | else if ( teamplaysinleague(A, F) )
%   | | then return 0.3506862485323469;  // std dev = 0.500, 67.000 (wgt'ed) examples reached here.  /* #neg=34 #pos=33 */
%   | | else if ( athleteplaysforteam(G, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.39814893509951127;  // std dev = 3.524, 50.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=27 */
WILL Produced-Tree #2
% FOR teamplayssport(A, B):
%   if ( teamplaysagainstteam(C, A), teamalsoknownas(D, A) )
%   then if ( recursion_teamplayssport(D, B) )
%   | then return 0.6691954491953414;  // std dev = 0.933, 14.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=13 */
%   | else if ( recursion_teamplayssport(C, B), athleteplaysforteam(E, C) )
%   | | then return 0.2952239279727647;  // std dev = 1.213, 6.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | else return 0.08956546691195448;  // std dev = 1.726, 17.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=4 */
%   else if ( teamalsoknownas(F, A), athleteledsportsteam(G, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( teamalsoknownas(A, H) )
%   | | then if ( recursion_teamplayssport(H, B) )
%   | | | then return 0.6461080304712917;  // std dev = 0.935, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | | | else return 0.26822784078286865;  // std dev = 4.252, 73.000 (wgt'ed) examples reached here.  /* #neg=40 #pos=33 */
%   | | else if ( teamplaysagainstteam(I, A) )
%   | | | then return 0.2862364207552088;  // std dev = 6.037, 187.000 (wgt'ed) examples reached here.  /* #neg=96 #pos=91 */
%   | | | else return 0.31954436263023894;  // std dev = 5.405, 117.000 (wgt'ed) examples reached here.  /* #neg=57 #pos=60 */
WILL Produced-Tree #3
% FOR teamplayssport(A, B):
%   if ( teamalsoknownas(C, A), recursion_teamplayssport(C, B) )
%   then return 0.48135930771691965;  // std dev = 1.201, 16.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=14 */
%   else if ( teamalsoknownas(D, A) )
%   | then if ( teamplaysagainstteam(E, A), recursion_teamplayssport(E, B) )
%   | | then if ( athleteplaysforteam(F, D) )
%   | | | then return 0.19460634971066537;  // std dev = 0.678, 2.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */
%   | | | else return 0.2677068182197096;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else if ( teamplaysagainstteam(G, D), teamplaysagainstteam(G, A) )
%   | | | then return -0.06175872583683617;  // std dev = 0.964, 12.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=1 */
%   | | | else return 0.2619158259729411;  // std dev = 3.141, 39.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=19 */
%   | else if ( teamalsoknownas(A, H), teamplaysinleague(H, I) )
%   | | then if ( recursion_teamplayssport(H, B) )
%   | | | then return 0.4955529887812296;  // std dev = 0.926, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | | else return 0.19748628142200259;  // std dev = 3.126, 40.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=17 */
%   | | else if ( athleteledsportsteam(J, A) )
%   | | | then return 0.23491926908300284;  // std dev = 4.063, 88.000 (wgt'ed) examples reached here.  /* #neg=45 #pos=43 */
%   | | | else return 0.259037135984439;  // std dev = 6.859, 214.000 (wgt'ed) examples reached here.  /* #neg=106 #pos=108 */
WILL Produced-Tree #4
% FOR teamplayssport(A, B):
%   if ( teamalsoknownas(C, A), teamalsoknownas(D, C) )
%   then if ( recursion_teamplayssport(D, B) )
%   | then if ( teamplaysinleague(C, E) )
%   | | then return 0.3096092555139497;  // std dev = 2.910, 38.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=24 */
%   | | else return 0.3898861440520321;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else if ( athleteledsportsteam(F, A), teamplaysinleague(A, G) )
%   | | then if ( teamplaysagainstteam(H, A), recursion_teamplayssport(H, B) )
%   | | | then return -0.30486984482123786;  // std dev = 0.030, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | | else return 0.1388349712044967;  // std dev = 1.185, 7.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=2 */
%   | | else if ( teamalsoknownas(I, D), recursion_teamplayssport(I, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.2623099570759606;  // std dev = 0.145, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   else return 0.20429626114518676;  // std dev = 8.631, 363.000 (wgt'ed) examples reached here.  /* #neg=180 #pos=183 */
WILL Produced-Tree #5
% FOR teamplayssport(A, B):
%   if ( teamalsoknownas(A, C), recursion_teamplayssport(C, B) )
%   then return 0.21178938160261387;  // std dev = 1.369, 11.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=8 */
%   else if ( teamalsoknownas(A, D), teamplaysinleague(D, E) )
%   | then if ( teamalsoknownas(D, F), teamplaysagainstteam(G, F) )
%   | | then if ( teamalsoknownas(H, A) )
%   | | | then return 0.1548349569606406;  // std dev = 2.879, 36.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=17 */
%   | | | else return 0.11861060545217202;  // std dev = 2.839, 33.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=14 */
%   | | else if ( teamalsoknownas(D, I), recursion_teamplayssport(I, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.12293960978117631;  // std dev = 1.309, 7.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=3 */
%   | else if ( teamalsoknownas(J, A), recursion_teamplayssport(J, B) )
%   | | then if ( teamplaysagainstteam(K, A), teamalsoknownas(L, J) )
%   | | | then return 0.3924007573689535;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.3238349047938913;  // std dev = 0.797, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | else if ( teamplaysagainstteam(M, A), recursion_teamplayssport(M, B) )
%   | | | then return 0.48405204765645266;  // std dev = 2.872, 101.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=92 */
%   | | | else return 0.004411756837461383;  // std dev = 6.372, 221.000 (wgt'ed) examples reached here.  /* #neg=156 #pos=65 */
WILL Produced-Tree #6
% FOR teamplayssport(A, B):
%   if ( teamplaysagainstteam(C, A), recursion_teamplayssport(C, B) )
%   then if ( teamalsoknownas(D, A), athleteplaysforteam(E, D) )
%   | then return 0.2931060902369;  // std dev = 0.638, 14.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=13 */
%   | else return 0.35933646669062663;  // std dev = 3.364, 118.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=105 */
%   else if ( teamalsoknownas(F, A), teamalsoknownas(G, F) )
%   | then if ( recursion_teamplayssport(G, B) )
%   | | then return 0.2074827535771539;  // std dev = 2.793, 32.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=19 */
%   | | else if ( athleteplaysforteam(H, A), teamplaysagainstteam(I, A) )
%   | | | then return 0.11631310631548712;  // std dev = 1.191, 7.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=2 */
%   | | | else return -0.23104858339885295;  // std dev = 0.137, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | else if ( athleteledsportsteam(J, A), athleteplaysforteam(K, A) )
%   | | then if ( athleteplaysforteam(K, L), recursion_teamplayssport(L, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.24236832903068015;  // std dev = 0.217, 38.000 (wgt'ed) examples reached here.  /* #neg=38 */
%   | | else if ( athleteledsportsteam(M, A), teamalsoknownas(A, N) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.0399559626850427;  // std dev = 6.547, 204.000 (wgt'ed) examples reached here.  /* #neg=132 #pos=72 */
WILL Produced-Tree #7
% FOR teamplayssport(A, B):
%   if ( teamalsoknownas(C, A), teamplaysinleague(C, D) )
%   then if ( recursion_teamplayssport(C, B) )
%   | then return 0.1633118784681098;  // std dev = 1.202, 16.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=14 */
%   | else if ( teamalsoknownas(E, C) )
%   | | then return 0.0765792699138048;  // std dev = 3.141, 47.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=20 */
%   | | else return -0.060310925766920175;  // std dev = 0.495, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   else if ( teamplaysagainstteam(F, A), athleteledsportsteam(G, F) )
%   | then if ( teamalsoknownas(H, F), recursion_teamplayssport(H, B) )
%   | | then return 0.3295165530958615;  // std dev = 1.635, 66.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=63 */
%   | | else if ( teamplaysinleague(A, I), teamalsoknownas(J, F) )
%   | | | then return -0.2075601817372461;  // std dev = 1.753, 70.000 (wgt'ed) examples reached here.  /* #neg=65 #pos=5 */
%   | | | else return 0.0313523868090835;  // std dev = 2.676, 56.000 (wgt'ed) examples reached here.  /* #neg=30 #pos=26 */
%   | else if ( teamplaysagainstteam(K, A), teamalsoknownas(L, K) )
%   | | then return 0.11284164703135781;  // std dev = 1.060, 6.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | else if ( teamplaysagainstteam(M, A) )
%   | | | then return 0.0677532802780266;  // std dev = 1.756, 23.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=11 */
%   | | | else return 0.16060568664103037;  // std dev = 5.751, 132.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=68 */
WILL Produced-Tree #8
% FOR teamplayssport(A, B):
%   if ( teamalsoknownas(A, C), recursion_teamplayssport(C, B) )
%   then return 0.04941208517603329;  // std dev = 1.314, 11.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=8 */
%   else if ( teamalsoknownas(A, D), teamplaysinleague(D, E) )
%   | then if ( teamplaysagainstteam(F, D), teamalsoknownas(F, G) )
%   | | then if ( recursion_teamplayssport(G, B) )
%   | | | then return -0.27363401306934715;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | | else return -0.15297507269781113;  // std dev = 1.103, 11.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=2 */
%   | | else if ( athleteplaysforteam(H, D) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.10083855290382777;  // std dev = 3.844, 64.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=32 */
%   | else if ( athleteledsportsteam(I, A), teamalsoknownas(A, J) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( teamplaysinleague(A, K) )
%   | | | then return 0.06087818970019245;  // std dev = 5.985, 266.000 (wgt'ed) examples reached here.  /* #neg=133 #pos=133 */
%   | | | else return 0.11234080605080346;  // std dev = 3.782, 69.000 (wgt'ed) examples reached here.  /* #neg=33 #pos=36 */
WILL Produced-Tree #9
% FOR teamplayssport(A, B):
%   if ( athleteledsportsteam(C, A) )
%   then if ( athleteledsportsteam(C, D), recursion_teamplayssport(D, B) )
%   | then if ( teamalsoknownas(E, D), teamalsoknownas(D, F) )
%   | | then return 0.2631935614737768;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else if ( teamplaysagainstteam(G, A), teamplaysagainstteam(G, D) )
%   | | | then return 0.30400972899310613;  // std dev = 0.757, 57.000 (wgt'ed) examples reached here.  /* #pos=57 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.25150683577001487;  // std dev = 1.150, 60.000 (wgt'ed) examples reached here.  /* #neg=60 */
%   else if ( teamalsoknownas(H, A), recursion_teamplayssport(H, B) )
%   | then return 0.009855831935645154;  // std dev = 1.134, 8.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=6 */
%   | else if ( teamalsoknownas(A, I), athleteledsportsteam(J, I) )
%   | | then if ( teamalsoknownas(I, K), recursion_teamplayssport(K, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.13924326718449426;  // std dev = 0.868, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else if ( teamalsoknownas(L, A) )
%   | | | then return 0.05311533347197977;  // std dev = 2.937, 44.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=20 */
%   | | | else return 0.06948718719582832;  // std dev = 6.807, 248.000 (wgt'ed) examples reached here.  /* #neg=123 #pos=125 */
WILL Produced-Tree #10
% FOR teamplayssport(A, B):
%   if ( athleteledsportsteam(C, A) )
%   then if ( athleteledsportsteam(C, D), recursion_teamplayssport(D, B) )
%   | then if ( teamalsoknownas(D, E), teamplaysinleague(D, F) )
%   | | then return 0.20672243384541109;  // std dev = 0.024, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return 0.25055788337549567;  // std dev = 0.740, 52.000 (wgt'ed) examples reached here.  /* #pos=52 */
%   | else return -0.21206204113480193;  // std dev = 1.085, 60.000 (wgt'ed) examples reached here.  /* #neg=60 */
%   else if ( teamplaysagainstteam(G, A), athleteledsportsteam(H, G) )
%   | then if ( recursion_teamplayssport(G, B) )
%   | | then return 0.21896672782404347;  // std dev = 1.934, 48.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=44 */
%   | | else if ( teamalsoknownas(G, I) )
%   | | | then return -0.17214232092078066;  // std dev = 1.396, 31.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=3 */
%   | | | else return -0.10763151527874742;  // std dev = 1.675, 29.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=7 */
%   | else if ( teamalsoknownas(J, A), recursion_teamplayssport(J, B) )
%   | | then return -0.045162741428549445;  // std dev = 0.718, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( teamplaysagainstteam(K, A), recursion_teamplayssport(K, B) )
%   | | | then return 0.3833668148780459;  // std dev = 0.335, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | | else return 0.05232785433698102;  // std dev = 6.553, 182.000 (wgt'ed) examples reached here.  /* #neg=96 #pos=86 */


Results
   AUC ROC   = 0.867573
   AUC PR    = 0.876074
   CLL	      = -0.484682
   Precision = 0.894737 at threshold = 0.5
   Recall    = 0.511278
   F1        = 0.650718


Total learning time: 8.763 seconds
Total inference time: 3.72 seconds
AUC ROC: 0.867573


Results scoring model
   AUC ROC   = 0.89688
   AUC PR    = 0.900801
   CLL	      = -0.458445
   Precision = 0.923077 at threshold = 0.5
   Recall    = 0.56872
   F1        = 0.703812


Total scoring time: 3.972 seconds
Parameter learned model CLL: -0.458445


Structure after Parameter Learning
[['teamplayssport(A, B)', {'': 'teamalsoknownas(A, C)', 'true': 'recursion_teamplayssport(C, B)', 'false': 'teamplaysagainstteam(D, A)', 'false,true': 'recursion_teamplayssport(D, B)', 'false,true,false': 'teamalsoknownas(E, A), recursion_teamplayssport(E, B)', 'false,false': 'teamplaysinleague(A, F)', 'false,false,false': 'athleteplaysforteam(G, A)'}, {'true,true': [1.477, 3, 8], 'true,false': [4.506, 45, 37], 'false,true,true': [2.876, 9, 102], 'false,true,false,true': [0.0, 0, 0], 'false,true,false,false': [1.96, 97, 4], 'false,false,true': [0.5, 34, 33], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [3.524, 23, 27]}], ['teamplayssport(A, B)', {'': 'teamplaysagainstteam(C, A), teamalsoknownas(D, A)', 'true': 'recursion_teamplayssport(D, B)', 'true,false': 'recursion_teamplayssport(C, B), athleteplaysforteam(E, C)', 'false': 'teamalsoknownas(F, A), athleteledsportsteam(G, A)', 'false,false': 'teamalsoknownas(A, H)', 'false,false,true': 'recursion_teamplayssport(H, B)', 'false,false,false': 'teamplaysagainstteam(I, A)'}, {'true,true': [0.933, 1, 13], 'true,false,true': [1.213, 3, 3], 'true,false,false': [1.726, 13, 4], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.935, 1, 7], 'false,false,true,false': [4.252, 40, 33], 'false,false,false,true': [6.037, 96, 91], 'false,false,false,false': [5.405, 57, 60]}], ['teamplayssport(A, B)', {'': 'teamalsoknownas(C, A), recursion_teamplayssport(C, B)', 'false': 'teamalsoknownas(D, A)', 'false,true': 'teamplaysagainstteam(E, A), recursion_teamplayssport(E, B)', 'false,true,true': 'athleteplaysforteam(F, D)', 'false,true,false': 'teamplaysagainstteam(G, D), teamplaysagainstteam(G, A)', 'false,false': 'teamalsoknownas(A, H), teamplaysinleague(H, I)', 'false,false,true': 'recursion_teamplayssport(H, B)', 'false,false,false': 'athleteledsportsteam(J, A)'}, {'true': [1.201, 2, 14], 'false,true,true,true': [0.678, 1, 1], 'false,true,true,false': [1.0, 2, 2], 'false,true,false,true': [0.964, 11, 1], 'false,true,false,false': [3.141, 20, 19], 'false,false,true,true': [0.926, 1, 6], 'false,false,true,false': [3.126, 23, 17], 'false,false,false,true': [4.063, 45, 43], 'false,false,false,false': [6.859, 106, 108]}], ['teamplayssport(A, B)', {'': 'teamalsoknownas(C, A), teamalsoknownas(D, C)', 'true': 'recursion_teamplayssport(D, B)', 'true,true': 'teamplaysinleague(C, E)', 'true,false': 'athleteledsportsteam(F, A), teamplaysinleague(A, G)', 'true,false,true': 'teamplaysagainstteam(H, A), recursion_teamplayssport(H, B)', 'true,false,false': 'teamalsoknownas(I, D), recursion_teamplayssport(I, B)'}, {'true,true,true': [2.91, 14, 24], 'true,true,false': [0.816, 1, 2], 'true,false,true,true': [0.03, 2, 0], 'true,false,true,false': [1.185, 5, 2], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [0.145, 9, 0], 'false': [8.631, 180, 183]}], ['teamplayssport(A, B)', {'': 'teamalsoknownas(A, C), recursion_teamplayssport(C, B)', 'false': 'teamalsoknownas(A, D), teamplaysinleague(D, E)', 'false,true': 'teamalsoknownas(D, F), teamplaysagainstteam(G, F)', 'false,true,true': 'teamalsoknownas(H, A)', 'false,true,false': 'teamalsoknownas(D, I), recursion_teamplayssport(I, B)', 'false,false': 'teamalsoknownas(J, A), recursion_teamplayssport(J, B)', 'false,false,true': 'teamplaysagainstteam(K, A), teamalsoknownas(L, J)', 'false,false,false': 'teamplaysagainstteam(M, A), recursion_teamplayssport(M, B)'}, {'true': [1.369, 3, 8], 'false,true,true,true': [2.879, 19, 17], 'false,true,true,false': [2.839, 19, 14], 'false,true,false,true': [0.0, 0, 0], 'false,true,false,false': [1.309, 4, 3], 'false,false,true,true': [0.0, 0, 4], 'false,false,true,false': [0.797, 1, 8], 'false,false,false,true': [2.872, 9, 92], 'false,false,false,false': [6.372, 156, 65]}], ['teamplayssport(A, B)', {'': 'teamplaysagainstteam(C, A), recursion_teamplayssport(C, B)', 'true': 'teamalsoknownas(D, A), athleteplaysforteam(E, D)', 'false': 'teamalsoknownas(F, A), teamalsoknownas(G, F)', 'false,true': 'recursion_teamplayssport(G, B)', 'false,true,false': 'athleteplaysforteam(H, A), teamplaysagainstteam(I, A)', 'false,false': 'athleteledsportsteam(J, A), athleteplaysforteam(K, A)', 'false,false,true': 'athleteplaysforteam(K, L), recursion_teamplayssport(L, B)', 'false,false,false': 'athleteledsportsteam(M, A), teamalsoknownas(A, N)'}, {'true,true': [0.638, 1, 13], 'true,false': [3.364, 13, 105], 'false,true,true': [2.793, 13, 19], 'false,true,false,true': [1.191, 5, 2], 'false,true,false,false': [0.137, 9, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [0.217, 38, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [6.547, 132, 72]}], ['teamplayssport(A, B)', {'': 'teamalsoknownas(C, A), teamplaysinleague(C, D)', 'true': 'recursion_teamplayssport(C, B)', 'true,false': 'teamalsoknownas(E, C)', 'false': 'teamplaysagainstteam(F, A), athleteledsportsteam(G, F)', 'false,true': 'teamalsoknownas(H, F), recursion_teamplayssport(H, B)', 'false,true,false': 'teamplaysinleague(A, I), teamalsoknownas(J, F)', 'false,false': 'teamplaysagainstteam(K, A), teamalsoknownas(L, K)', 'false,false,false': 'teamplaysagainstteam(M, A)'}, {'true,true': [1.202, 2, 14], 'true,false,true': [3.141, 27, 20], 'true,false,false': [0.495, 5, 1], 'false,true,true': [1.635, 3, 63], 'false,true,false,true': [1.753, 65, 5], 'false,true,false,false': [2.676, 30, 26], 'false,false,true': [1.06, 3, 3], 'false,false,false,true': [1.756, 12, 11], 'false,false,false,false': [5.751, 64, 68]}], ['teamplayssport(A, B)', {'': 'teamalsoknownas(A, C), recursion_teamplayssport(C, B)', 'false': 'teamalsoknownas(A, D), teamplaysinleague(D, E)', 'false,true': 'teamplaysagainstteam(F, D), teamalsoknownas(F, G)', 'false,true,true': 'recursion_teamplayssport(G, B)', 'false,true,false': 'athleteplaysforteam(H, D)', 'false,false': 'athleteledsportsteam(I, A), teamalsoknownas(A, J)', 'false,false,false': 'teamplaysinleague(A, K)'}, {'true': [1.314, 3, 8], 'false,true,true,true': [0.0, 1, 0], 'false,true,true,false': [1.103, 9, 2], 'false,true,false,true': [0.0, 0, 0], 'false,true,false,false': [3.844, 32, 32], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [5.985, 133, 133], 'false,false,false,false': [3.782, 33, 36]}], ['teamplayssport(A, B)', {'': 'athleteledsportsteam(C, A)', 'true': 'athleteledsportsteam(C, D), recursion_teamplayssport(D, B)', 'true,true': 'teamalsoknownas(E, D), teamalsoknownas(D, F)', 'true,true,false': 'teamplaysagainstteam(G, A), teamplaysagainstteam(G, D)', 'false': 'teamalsoknownas(H, A), recursion_teamplayssport(H, B)', 'false,false': 'teamalsoknownas(A, I), athleteledsportsteam(J, I)', 'false,false,true': 'teamalsoknownas(I, K), recursion_teamplayssport(K, B)', 'false,false,false': 'teamalsoknownas(L, A)'}, {'true,true,true': [0.0, 0, 1], 'true,true,false,true': [0.757, 0, 57], 'true,true,false,false': [0.0, 0, 0], 'true,false': [1.15, 60, 0], 'false,true': [1.134, 2, 6], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [0.868, 2, 2], 'false,false,false,true': [2.937, 24, 20], 'false,false,false,false': [6.807, 123, 125]}], ['teamplayssport(A, B)', {'': 'athleteledsportsteam(C, A)', 'true': 'athleteledsportsteam(C, D), recursion_teamplayssport(D, B)', 'true,true': 'teamalsoknownas(D, E), teamplaysinleague(D, F)', 'false': 'teamplaysagainstteam(G, A), athleteledsportsteam(H, G)', 'false,true': 'recursion_teamplayssport(G, B)', 'false,true,false': 'teamalsoknownas(G, I)', 'false,false': 'teamalsoknownas(J, A), recursion_teamplayssport(J, B)', 'false,false,false': 'teamplaysagainstteam(K, A), recursion_teamplayssport(K, B)'}, {'true,true,true': [0.024, 0, 6], 'true,true,false': [0.74, 0, 52], 'true,false': [1.085, 60, 0], 'false,true,true': [1.934, 4, 44], 'false,true,false,true': [1.396, 28, 3], 'false,true,false,false': [1.675, 22, 7], 'false,false,true': [0.718, 1, 2], 'false,false,false,true': [0.335, 0, 11], 'false,false,false,false': [6.553, 96, 86]}]]
[{'': [0.24973985431841866, 0.24997921305235982], 'false': [0.250000000000003, 0.24983563445101878], 'false,true': [0.07450693937180657, 0.03803548671698859], 'false,false': [0.24994430830920183, 0.2484000000000014], 'true': [0.19834710743801634, 0.2476204640095198], 'false,false,false': [nan, 0.2484000000000014], 'false,true,false': [nan, 0.03803548671698846]}, {'': [0.2139332697153082, 0.2226550223715623], 'false': [nan, 0.2226550223715641], 'false,false': [0.24674956590425268, 0.21622622279186265], 'false,false,true': [0.10937499999999983, 0.24770125727153236], 'false,false,false': [0.19487025272804964, 0.2496768303059886], 'true': [0.0621265512053486, 0.20165712427126414], 'true,false': [0.24505568861603103, 0.1753064006257919]}, {'': [0.09012002837020183, 0.21716258790688], 'false': [0.23226923193044263, 0.21420946848288921], 'false,true': [0.24455683946242715, 0.2304746006305461], 'false,true,true': [0.23010806605645343, 0.2500000000000001], 'false,true,false': [0.07743626861988136, 0.2529126792336397], 'false,false': [0.2374771243348963, 0.21057452317197434], 'false,false,true': [0.12244897959183665, 0.2443749999999998], 'false,false,false': [0.1876101532194857, 0.2198483218056376]}, {'': [0.23005944656916888, 0.20522591656768768], 'true': [0.22327367561667105, 0.1190967083367817], 'true,true': [0.2228851451805445, 0.22222222222222218], 'true,false': [0.19007702674944837, 0.002349996901464424], 'true,false,true': [0.00046132343135994736, 0.2005031722577588], 'true,false,false': [nan, 0.002349996901464424]}, {'': [0.17041167148849026, 0.20443477575388624], 'false': [0.23796020028423387, 0.1967033726902332], 'false,true': [0.2372368153503957, 0.24489795918367346], 'false,true,false': [nan, 0.24489795918367346], 'false,true,true': [0.23017059652756533, 0.24426078971533505], 'false,false': [0.049875703536737356, 0.20122920859428628], 'false,false,false': [0.08164606672440607, 0.1837202790763787], 'false,false,true': [0.0, 0.07059613638198454]}, {'': [0.08923288693627408, 0.19516923457032165], 'false': [0.220598199795445, 0.18788525530619984], 'false,true': [0.24373958162147902, 0.11957078536399515], 'false,false': [0.0012338857320205513, 0.21013767157734142], 'false,false,false': [nan, 0.21013767157734142], 'false,true,false': [0.20273790205109735, 0.0020964373898899233], 'true': [0.029058038668020907, 0.09590704481452383], 'false,false,true': [nan, 0.0012338857320205513]}, {'': [0.17077819818027057, 0.1729001791435543], 'false': [0.11834628507005901, 0.2326469387921907], 'false,false': [0.18742229242953334, 0.2343545251403731], 'false,false,false': [0.13411849197366923, 0.25054056490771776], 'true': [0.09029376037141955, 0.19265199135003272], 'true,false': [0.20992114084967103, 0.04075944907478724], 'false,true': [0.04051161030146713, 0.09529307683338613], 'false,true,false': [0.04387619270638107, 0.1278535067646954]}, {'': [0.15702626761961203, 0.16298408811407528], 'false': [0.21981874344092223, 0.15006226711566253], 'false,true': [0.10248513684461018, 0.23082512020776413], 'false,true,false': [nan, 0.23082512020776413], 'false,false': [nan, 0.15006226711566267], 'false,false,false': [0.13466066076187783, 0.20733366631116054], 'false,true,true': [0.0, 0.11058875247588232]}, {'': [0.09301522264955689, 0.1876777853033941], 'false': [0.16072849366649591, 0.18831718926258362], 'false,false': [0.18849876824369619, 0.1882442130674166], 'false,false,true': [nan, 0.18849876824369619], 'false,false,false': [0.19603821278161526, 0.1868210174399638], 'true': [0.009913287727565069, 0.02204707167392348], 'true,true': [0.0, 0.010058481615929711], 'true,true,false': [0.010058481615929774, nan]}, {'': [0.06715188996926834, 0.18727350512874427], 'false': [0.11122698290431472, 0.22827397550725298], 'false,false': [0.17176445892222678, 0.22894512900395253], 'false,false,false': [0.010196727545964195, 0.23592030681857123], 'false,true': [0.07794496450088709, 0.0802753710499096], 'false,true,false': [0.06282149468409406, 0.09678278027079212], 'true': [0.009622694085100693, 0.019620732939649336], 'true,true': [9.346638680587012e-05, 0.010523439671549365]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
3;;teamplayssport(A, B) :- teamalsoknownas(C, A), teamalsoknownas(D, C).;true;true
3;true;recursion_teamplayssport(D, B).;true;true
3;true,false;athleteledsportsteam(F, A), teamplaysinleague(A, G).;true;true
3;true,false,true;teamplaysagainstteam(H, A), recursion_teamplayssport(H, B).;true;true
4;;teamplayssport(A, B) :- teamalsoknownas(A, C), recursion_teamplayssport(C, B).;true;true
4;false;teamalsoknownas(A, D), teamplaysinleague(D, E).;true;true
4;false,false;teamalsoknownas(J, A), recursion_teamplayssport(J, B).;true;true
4;false,false,true;teamplaysagainstteam(K, A), teamalsoknownas(L, J).;true;true
5;;teamplayssport(A, B) :- teamplaysagainstteam(C, A), recursion_teamplayssport(C, B).;true;true
5;false;teamalsoknownas(F, A), teamalsoknownas(G, F).;true;true
5;false,true;recursion_teamplayssport(G, B).;true;true
5;false,true,false;athleteplaysforteam(H, A), teamplaysagainstteam(I, A).;true;true
5;false,false;athleteledsportsteam(J, A), athleteplaysforteam(K, A).;true;true
7;;teamplayssport(A, B) :- teamalsoknownas(A, C), recursion_teamplayssport(C, B).;true;true
7;false;teamalsoknownas(A, D), teamplaysinleague(D, E).;true;true
7;false,true;teamplaysagainstteam(F, D), teamalsoknownas(F, G).;true;true
7;false,true,true;recursion_teamplayssport(G, B).;true;true
8;;teamplayssport(A, B) :- athleteledsportsteam(C, A).;true;true
8;true;athleteledsportsteam(C, D), recursion_teamplayssport(D, B).;true;true
8;true,true;teamalsoknownas(E, D), teamalsoknownas(D, F).;true;true
9;;teamplayssport(A, B) :- athleteledsportsteam(C, A).;true;true
9;true;athleteledsportsteam(C, D), recursion_teamplayssport(D, B).;true;true
9;true,true;teamalsoknownas(D, E), teamplaysinleague(D, F).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR teamplayssport(A, B):
%   if ( athleteplayssport(C, B), athleteledsportsteam(C, D) )
%   then if ( teamplaysagainstteam(D, A), recursion_teamplayssport(D, B) )
%   | then return 0.8346195233348062;  // std dev = 0.152, 85.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=83 */
%   | else if ( teamplaysagainstteam(A, E), athleteledsportsteam(F, E) )
%   | | then if ( recursion_teamplayssport(E, B) )
%   | | | then return 0.5803711573217345;  // std dev = 1.900, 18.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=13 */
%   | | | else return 0.04419544672741935;  // std dev = 2.552, 43.000 (wgt'ed) examples reached here.  /* #neg=35 #pos=8 */
%   | | else if ( athleteplaysforteam(C, G), teamalsoknownas(D, G) )
%   | | | then return 0.15226658215833588;  // std dev = 1.879, 17.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=5 */
%   | | | else return 0.707205538873096;  // std dev = 3.686, 106.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=90 */
%   else if ( athleteplayssport(H, B), athleteplaysinleague(H, I) )
%   | then if ( teamplaysagainstteam(J, A), recursion_teamplayssport(J, B) )
%   | | then if ( teamalsoknownas(J, K), teamalsoknownas(K, J) )
%   | | | then return 0.5248156017661788;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.8581489350995122;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return -0.030739953789376676;  // std dev = 0.314, 18.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=2 */
%   | else return -0.1106010649004877;  // std dev = 0.174, 128.000 (wgt'ed) examples reached here.  /* #neg=124 #pos=4 */
WILL Produced-Tree #2
% FOR teamplayssport(A, B):
%   if ( athleteplayssport(C, B), athleteledsportsteam(C, D) )
%   then if ( teamplaysagainstteam(E, A), recursion_teamplayssport(E, B) )
%   | then if ( athleteledsportsteam(F, A), teamalsoknownas(A, G) )
%   | | then if ( athleteplaysforteam(F, D) )
%   | | | then return 0.7241977718962942;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return -0.19960928496648928;  // std dev = 0.110, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return 0.6762574793617326;  // std dev = 0.242, 116.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=108 */
%   | else if ( teamplaysagainstteam(A, H), teamplaysagainstteam(I, A) )
%   | | then if ( teamalsoknownas(I, J), teamalsoknownas(J, H) )
%   | | | then return 0.2865963026398275;  // std dev = 1.457, 9.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=4 */
%   | | | else return -0.128289981878726;  // std dev = 0.908, 30.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=1 */
%   | | else if ( athleteplaysforteam(C, D), teamalsoknownas(D, K) )
%   | | | then return 0.362705998096507;  // std dev = 3.289, 49.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=29 */
%   | | | else return 0.6791372321326378;  // std dev = 1.930, 57.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=53 */
%   else if ( teamplaysagainstteam(L, A), recursion_teamplayssport(L, B) )
%   | then return 0.5117333908596395;  // std dev = 0.397, 8.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=6 */
%   | else return -0.08868066839899985;  // std dev = 0.199, 145.000 (wgt'ed) examples reached here.  /* #neg=139 #pos=6 */
WILL Produced-Tree #3
% FOR teamplayssport(A, B):
%   if ( athleteplayssport(C, B), athleteledsportsteam(C, D) )
%   then if ( teamplaysagainstteam(E, A), recursion_teamplayssport(E, B) )
%   | then if ( teamplaysinleague(A, F), teamplaysinleague(E, F) )
%   | | then return 0.5401667271709464;  // std dev = 0.203, 109.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=103 */
%   | | else if ( athleteplaysforteam(G, A), teamplaysinleague(A, H) )
%   | | | then return -0.2774219605882933;  // std dev = 0.239, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | | else return 0.6550188195215374;  // std dev = 0.221, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else if ( teamplaysagainstteam(I, A), athleteplaysforteam(J, I) )
%   | | then if ( teamalsoknownas(K, I), teamalsoknownas(L, K) )
%   | | | then return 0.23210173778124646;  // std dev = 1.501, 11.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=5 */
%   | | | else return -0.14573121723582058;  // std dev = 0.220, 28.000 (wgt'ed) examples reached here.  /* #neg=28 */
%   | | else if ( athleteplaysforteam(C, M), teamalsoknownas(D, M) )
%   | | | then return -0.04897565183749758;  // std dev = 1.299, 12.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=2 */
%   | | | else return 0.48591064495118624;  // std dev = 3.341, 94.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=80 */
%   else if ( teamplaysagainstteam(N, A), recursion_teamplayssport(N, B) )
%   | then return 0.40898984508521197;  // std dev = 0.387, 8.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=6 */
%   | else return -0.07897256971869192;  // std dev = 0.199, 145.000 (wgt'ed) examples reached here.  /* #neg=139 #pos=6 */
WILL Produced-Tree #4
% FOR teamplayssport(A, B):
%   if ( teamalsoknownas(C, A), teamalsoknownas(D, C) )
%   then if ( recursion_teamplayssport(D, B) )
%   | then if ( teamalsoknownas(E, A), teamplaysagainstteam(E, F) )
%   | | then return 0.559914614614232;  // std dev = 0.386, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else if ( athleteplayssport(G, B), athleteledsportsteam(G, H) )
%   | | | then return 0.24551571666101912;  // std dev = 2.143, 28.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=19 */
%   | | | else return -0.012544981047126726;  // std dev = 1.011, 7.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=1 */
%   | else if ( athleteledsportsteam(I, A), teamplaysinleague(A, J) )
%   | | then return 0.06696329861704339;  // std dev = 0.388, 9.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | | else return -0.14767604873597398;  // std dev = 0.103, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   else if ( athleteplayssport(K, B), athleteledsportsteam(K, L) )
%   | then if ( teamplaysinleague(A, M), athleteplaysinleague(K, M) )
%   | | then return 0.4047018136534644;  // std dev = 0.190, 103.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=95 */
%   | | else if ( teamplaysinleague(A, N), athleteplaysinleague(P, N) )
%   | | | then return 0.06359685458875713;  // std dev = 2.748, 54.000 (wgt'ed) examples reached here.  /* #neg=34 #pos=20 */
%   | | | else return 0.34996199111221554;  // std dev = 2.881, 76.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=60 */
%   | else return -0.06597372526712608;  // std dev = 0.191, 130.000 (wgt'ed) examples reached here.  /* #neg=122 #pos=8 */
WILL Produced-Tree #5
% FOR teamplayssport(A, B):
%   if ( teamalsoknownas(A, C), recursion_teamplayssport(C, B) )
%   then if ( athleteplaysforteam(D, A), teamalsoknownas(E, A) )
%   | then return -0.08929651384586616;  // std dev = 0.663, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | else if ( athleteplaysforteam(F, A) )
%   | | then return 0.33313562273052233;  // std dev = 0.010, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return 0.5276671705936423;  // std dev = 0.786, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   else if ( teamalsoknownas(A, G), teamplaysinleague(G, H) )
%   | then if ( athleteplayssport(I, B), athleteledsportsteam(I, J) )
%   | | then if ( athleteplaysforteam(I, J), teamalsoknownas(J, K) )
%   | | | then return 0.06748089428184152;  // std dev = 2.136, 27.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=12 */
%   | | | else return 0.2689411111470154;  // std dev = 1.777, 26.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=21 */
%   | | else return -0.061614489010440934;  // std dev = 0.203, 23.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=1 */
%   | else if ( teamalsoknownas(L, A), recursion_teamplayssport(L, B) )
%   | | then return 0.3060001440402161;  // std dev = 0.126, 13.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   | | else if ( athleteplayssport(M, B), athleteledsportsteam(M, N) )
%   | | | then return 0.23905474727046047;  // std dev = 4.258, 198.000 (wgt'ed) examples reached here.  /* #neg=49 #pos=149 */
%   | | | else return -0.05718969813677617;  // std dev = 2.189, 124.000 (wgt'ed) examples reached here.  /* #neg=116 #pos=8 */
WILL Produced-Tree #6
% FOR teamplayssport(A, B):
%   if ( teamplaysagainstteam(C, A), recursion_teamplayssport(C, B) )
%   then if ( teamplaysagainstteam(D, A), teamalsoknownas(D, E) )
%   | then return 0.2269215349016812;  // std dev = 0.255, 100.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=86 */
%   | else return 0.3453476574036511;  // std dev = 0.080, 32.000 (wgt'ed) examples reached here.  /* #pos=32 */
%   else if ( teamalsoknownas(F, A), teamalsoknownas(G, F) )
%   | then if ( recursion_teamplayssport(G, B) )
%   | | then if ( teamplaysinleague(A, H) )
%   | | | then return 0.06688973937168022;  // std dev = 1.835, 21.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=11 */
%   | | | else return 0.2585529639155382;  // std dev = 1.202, 11.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=8 */
%   | | else if ( athleteplaysforteam(I, A), teamplaysagainstteam(J, A) )
%   | | | then return 0.1309340283157926;  // std dev = 1.044, 7.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=2 */
%   | | | else return -0.13336278467687152;  // std dev = 0.348, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | else if ( athleteledsportsteam(K, A), athleteplaysforteam(L, A) )
%   | | then return -0.14264147204092767;  // std dev = 0.080, 38.000 (wgt'ed) examples reached here.  /* #neg=38 */
%   | | else if ( athleteplayssport(M, B), athleteledsportsteam(M, N) )
%   | | | then return 0.16399370301103916;  // std dev = 3.571, 103.000 (wgt'ed) examples reached here.  /* #neg=34 #pos=69 */
%   | | | else return -0.07214192394279798;  // std dev = 1.668, 101.000 (wgt'ed) examples reached here.  /* #neg=98 #pos=3 */
WILL Produced-Tree #7
% FOR teamplayssport(A, B):
%   if ( athleteplayssport(C, B), athleteplaysinleague(C, D) )
%   then if ( teamplaysagainstteam(A, E), recursion_teamplayssport(E, B) )
%   | then if ( teamalsoknownas(A, F), athleteledsportsteam(G, A) )
%   | | then if ( teamplaysagainstteam(F, E), recursion_teamplayssport(F, B) )
%   | | | then return 0.2553426837208571;  // std dev = 0.179, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return -0.26068379388502233;  // std dev = 0.132, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else if ( teamalsoknownas(H, E), teamalsoknownas(I, H) )
%   | | | then return 0.15338384644835543;  // std dev = 1.596, 28.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=23 */
%   | | | else return 0.2509782193458326;  // std dev = 1.470, 85.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=82 */
%   | else if ( teamplaysagainstteam(J, A), teamplaysagainstteam(A, J) )
%   | | then if ( teamalsoknownas(K, J), teamalsoknownas(J, K) )
%   | | | then return 0.007868099311622573;  // std dev = 1.427, 10.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=3 */
%   | | | else return -0.18609717336132606;  // std dev = 0.525, 32.000 (wgt'ed) examples reached here.  /* #neg=32 */
%   | | else if ( teamplaysinleague(A, L) )
%   | | | then return 0.11228844345599773;  // std dev = 3.180, 80.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=54 */
%   | | | else return 0.21904126238567417;  // std dev = 2.198, 50.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=40 */
%   else return -0.06423281675078743;  // std dev = 0.172, 128.000 (wgt'ed) examples reached here.  /* #neg=124 #pos=4 */
WILL Produced-Tree #8
% FOR teamplayssport(A, B):
%   if ( teamalsoknownas(A, C), recursion_teamplayssport(C, B) )
%   then if ( teamalsoknownas(D, A), athleteplaysforteam(E, A) )
%   | then return -0.1360608244424256;  // std dev = 0.617, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | else if ( athleteplaysforteam(F, A) )
%   | | then return 0.1808687626084681;  // std dev = 0.028, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return 0.4254281083394628;  // std dev = 0.770, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   else if ( teamalsoknownas(A, G), teamplaysinleague(G, H) )
%   | then if ( teamplaysagainstteam(I, G), teamalsoknownas(I, J) )
%   | | then return -0.07901256897466014;  // std dev = 0.158, 12.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=2 */
%   | | else if ( teamplaysagainstteam(K, A), teamplaysinleague(K, L) )
%   | | | then return 0.15366121306966463;  // std dev = 1.516, 19.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=10 */
%   | | | else return 0.014827003135022096;  // std dev = 2.356, 45.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=22 */
%   | else if ( teamplaysagainstteam(A, M), recursion_teamplayssport(M, B) )
%   | | then return 0.19043012590270594;  // std dev = 0.195, 104.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=99 */
%   | | else if ( teamplaysagainstteam(N, A), teamplaysagainstteam(A, N) )
%   | | | then return -0.09817206935106638;  // std dev = 1.638, 95.000 (wgt'ed) examples reached here.  /* #neg=92 #pos=3 */
%   | | | else return 0.06849769263747058;  // std dev = 3.336, 136.000 (wgt'ed) examples reached here.  /* #neg=69 #pos=67 */
WILL Produced-Tree #9
% FOR teamplayssport(A, B):
%   if ( athleteledsportsteam(C, A) )
%   then if ( athleteledsportsteam(C, D), recursion_teamplayssport(D, B) )
%   | then return 0.2091544431119964;  // std dev = 0.114, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | else return -0.15178163146288615;  // std dev = 0.147, 60.000 (wgt'ed) examples reached here.  /* #neg=60 */
%   else if ( athleteplayssport(E, B), athleteledsportsteam(E, F) )
%   | then if ( teamplaysagainstteam(G, A), recursion_teamplayssport(G, B) )
%   | | then if ( athleteledsportsteam(H, G), athleteplayssport(H, I) )
%   | | | then return 0.14396143423164295;  // std dev = 1.129, 40.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=38 */
%   | | | else return 0.2568207135561931;  // std dev = 0.323, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | else if ( teamplaysagainstteam(J, A), athleteplaysforteam(K, J) )
%   | | | then return -0.09289718256371904;  // std dev = 1.445, 22.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=4 */
%   | | | else return 0.12473376047926465;  // std dev = 3.605, 105.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=82 */
%   | else if ( teamplaysinleague(A, L) )
%   | | then return -0.08244309825519318;  // std dev = 0.103, 77.000 (wgt'ed) examples reached here.  /* #neg=75 #pos=2 */
%   | | else if ( teamalsoknownas(A, M), teamplaysagainstteam(A, N) )
%   | | | then return 0.3531416777717273;  // std dev = 0.882, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return -0.02015553322408197;  // std dev = 1.520, 35.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=4 */
WILL Produced-Tree #10
% FOR teamplayssport(A, B):
%   if ( athleteledsportsteam(C, A) )
%   then if ( athleteledsportsteam(C, D), recursion_teamplayssport(D, B) )
%   | then return 0.1791564181047592;  // std dev = 0.111, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | else return -0.13622088654888267;  // std dev = 0.140, 60.000 (wgt'ed) examples reached here.  /* #neg=60 */
%   else if ( athleteplayssport(E, B), athleteplaysinleague(E, F) )
%   | then if ( teamplaysagainstteam(G, A), recursion_teamplayssport(G, B) )
%   | | then if ( athleteplaysforteam(H, A), athleteledsportsteam(I, G) )
%   | | | then return 0.10423839987140221;  // std dev = 1.262, 36.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=33 */
%   | | | else return 0.21857593621336016;  // std dev = 0.435, 29.000 (wgt'ed) examples reached here.  /* #pos=29 */
%   | | else if ( teamplaysagainstteam(J, A), athleteplaysforteam(K, J) )
%   | | | then return -0.05456909333504246;  // std dev = 1.617, 27.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=5 */
%   | | | else return 0.0876451256478986;  // std dev = 3.712, 113.000 (wgt'ed) examples reached here.  /* #neg=30 #pos=83 */
%   | else if ( teamplaysinleague(A, L) )
%   | | then return -0.08377739012270566;  // std dev = 0.172, 67.000 (wgt'ed) examples reached here.  /* #neg=67 */
%   | | else if ( teamalsoknownas(M, A), teamplaysagainstteam(N, A) )
%   | | | then return 0.20265456598368622;  // std dev = 0.745, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | else return -0.02299087224606874;  // std dev = 1.366, 29.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=2 */


Results
   AUC ROC   = 0.95175
   AUC PR    = 0.951659
   CLL	      = -0.326075
   Precision = 0.846154 at threshold = 0.5
   Recall    = 0.909774
   F1        = 0.876812


Total learning time: 674.568 seconds
Total inference time: 9.176 seconds
AUC ROC: 0.95175


Results scoring model
   AUC ROC   = 0.981941
   AUC PR    = 0.983172
   CLL	      = -0.251404
   Precision = 0.917808 at threshold = 0.5
   Recall    = 0.952607
   F1        = 0.934884


Total scoring time: 13.389 seconds
Refined model CLL: -0.251404


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.95175
   AUC PR    = 0.951659
   CLL	      = -0.326075
   Precision = 0.846154 at threshold = 0.5
   Recall    = 0.909774
   F1        = 0.876812


Total learning time: 700.692 seconds
Total inference time: 9.176 seconds
AUC ROC: 0.95175
Total revision time: 700.692
Best scored revision CLL: -0.251404


Dataset: 10_nell_finances_nell_sports, Fold: 2, Type: Transfer (trRDN-B), Time: 20:59:24
{'AUC ROC': 0.95175, 'AUC PR': 0.951659, 'CLL': -0.326075, 'Precision': [0.846154, 0.5], 'Recall': 0.909774, 'F1': 0.876812, 'Learning time': 700.692, 'Inference time': 9.176, 'parameter_0.8': {'AUC ROC': 0.867573, 'AUC PR': 0.876074, 'CLL': -0.484682, 'Precision': [0.894737, 0.5], 'Recall': 0.511278, 'F1': 0.650718, 'Learning time': 8.763, 'Inference time': 3.72}}


Amount of data: 1.0
******************************************
Performing Parameter Learning
******************************************
Refine
0;;companyeconomicsector(A, B) :- acquired(C, A).;true;true
0;true;economicsectorcompany(B, C).;false;false
0;false;companyalsoknownas(A, D).;true;true
0;false,true;economicsectorcompany(B, D).;false;true
0;false,true,false;acquired(A, E), economicsectorcompany(B, E).;false;false
0;false,false;companyceo(A, F).;true;true
0;false,false,true;bankchiefexecutiveceo(G, F).;false;false
0;false,false,false;countryhascompanyoffice(H, A).;false;false
1;;companyeconomicsector(A, B) :- companyalsoknownas(A, C), acquired(A, D).;true;true
1;true;economicsectorcompany(B, D).;false;true
1;true,false;economicsectorcompany(B, C), countryhascompanyoffice(E, C).;false;false
1;false;acquired(A, F), cityhascompanyoffice(G, A).;true;true
1;false,true;cityhascompanyoffice(G, H), economicsectorcompany(B, H).;false;false
1;false,false;acquired(I, A).;true;true
1;false,false,true;economicsectorcompany(B, I).;false;false
1;false,false,false;companyalsoknownas(A, J).;false;false
2;;companyeconomicsector(A, B) :- acquired(A, C), economicsectorcompany(B, C).;false;true
2;false;acquired(A, D).;true;true
2;false,true;companyalsoknownas(A, E), economicsectorcompany(B, E).;true;true
2;false,true,true;countryhascompanyoffice(F, D).;false;false
2;false,true,false;companyalsoknownas(D, G), companyalsoknownas(A, G).;false;false
2;false,false;acquired(H, A), companyceo(H, I).;true;true
2;false,false,true;economicsectorcompany(B, H).;false;false
2;false,false,false;cityhascompanyoffice(J, A).;false;false
3;;companyeconomicsector(A, B) :- acquired(A, C), acquired(C, D).;true;false
3;true;economicsectorcompany(B, D).;true;true
3;true,true;companyceo(C, E).;false;false
3;true,false;cityhascompanyoffice(F, A), companyceo(A, G).;true;true
3;true,false,true;companyalsoknownas(A, H), economicsectorcompany(B, H).;false;false
3;true,false,false;acquired(D, I), economicsectorcompany(B, I).;false;false
4;;companyeconomicsector(A, B) :- acquired(C, A), economicsectorcompany(B, C).;false;true
4;false;acquired(D, A), companyceo(D, E).;true;true
4;false,true;acquired(F, D), companyalsoknownas(F, G).;true;true
4;false,true,true;acquired(A, H).;false;false
4;false,true,false;acquired(I, D), economicsectorcompany(B, I).;false;false
4;false,false;acquired(A, J), economicsectorcompany(B, J).;true;true
4;false,false,true;companyalsoknownas(A, K), acquired(J, L).;false;false
4;false,false,false;companyalsoknownas(A, M), economicsectorcompany(B, M).;false;false
5;;companyeconomicsector(A, B) :- companyalsoknownas(A, C), economicsectorcompany(B, C).;true;true
5;true;acquired(A, D), countryhascompanyoffice(E, D).;false;false
5;false;acquired(A, F), acquired(F, G).;true;true
5;false,true;economicsectorcompany(B, G).;false;true
5;false,true,false;countryhascompanyoffice(H, A), companyalsoknownas(A, I).;false;false
5;false,false;cityhascompanyoffice(J, A), countryhascompanyoffice(K, A).;true;true
5;false,false,true;countryhascompanyoffice(K, L), economicsectorcompany(B, L).;false;false
5;false,false,false;cityhascompanyoffice(M, A), acquired(N, A).;false;false
6;;companyeconomicsector(A, B) :- acquired(A, C), companyceo(C, D).;true;true
6;true;economicsectorcompany(B, C).;false;true
6;true,false;acquired(C, E).;false;false
6;false;companyalsoknownas(A, F), cityhascompanyoffice(G, F).;true;true
6;false,true;acquired(F, H), economicsectorcompany(B, H).;false;true
6;false,true,false;companyceo(A, I), acquired(F, J).;false;false
6;false,false;companyalsoknownas(A, K), acquired(K, L).;false;true
6;false,false,false;companyalsoknownas(A, M).;false;false
7;;companyeconomicsector(A, B) :- acquired(C, A), economicsectorcompany(B, C).;false;true
7;false;acquired(D, A), companyceo(D, E).;true;true
7;false,true;companyalsoknownas(D, F), acquired(G, F).;true;true
7;false,true,true;economicsectorcompany(B, G).;false;false
7;false,true,false;countryhascompanyoffice(H, D).;false;false
7;false,false;cityhascompanyoffice(I, A), acquired(J, A).;true;true
7;false,false,true;acquired(K, J).;false;false
7;false,false,false;companyceo(A, L).;false;false
8;;companyeconomicsector(A, B) :- cityhascompanyoffice(C, A).;true;true
8;true;cityhascompanyoffice(C, D), economicsectorcompany(B, D).;true;false
8;true,true;acquired(D, E), acquired(F, D).;false;true
8;true,true,false;companyalsoknownas(A, G), companyalsoknownas(D, G).;false;false
8;false;acquired(A, H), economicsectorcompany(B, H).;false;true
8;false,false;acquired(I, A), cityhascompanyoffice(J, I).;true;true
8;false,false,true;acquired(K, I), economicsectorcompany(B, K).;false;false
8;false,false,false;acquired(A, L).;false;false
9;;companyeconomicsector(A, B) :- cityhascompanyoffice(C, A).;true;true
9;true;cityhascompanyoffice(C, D), economicsectorcompany(B, D).;true;false
9;true,true;acquired(E, D), companyceo(D, F).;false;false
9;false;companyalsoknownas(A, G), cityhascompanyoffice(H, G).;true;true
9;false,true;economicsectorcompany(B, G).;false;true
9;false,true,false;acquired(I, G).;false;false
9;false,false;acquired(A, J), economicsectorcompany(B, J).;false;true
9;false,false,false;companyalsoknownas(A, K), economicsectorcompany(B, K).;false;false


WILL Produced-Tree #1
% FOR teamplayssport(A, B):
%   if ( teamalsoknownas(A, C) )
%   then if ( recursion_teamplayssport(C, B) )
%   | then return 0.6228548174524535;  // std dev = 1.749, 17.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=13 */
%   | else return 0.31529179224237036;  // std dev = 5.105, 105.000 (wgt'ed) examples reached here.  /* #neg=57 #pos=48 */
%   else if ( teamplaysagainstteam(A, D) )
%   | then if ( recursion_teamplayssport(D, B) )
%   | | then return 0.7878364350995104;  // std dev = 2.893, 128.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=119 */
%   | | else if ( teamalsoknownas(E, A), recursion_teamplayssport(E, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.08539945199726189;  // std dev = 2.570, 124.000 (wgt'ed) examples reached here.  /* #neg=117 #pos=7 */
%   | else if ( athleteplaysforteam(F, A) )
%   | | then if ( athleteledsportsteam(F, G) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.35814893509951223;  // std dev = 1.225, 6.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | else if ( teamplaysinleague(A, H) )
%   | | | then return 0.35814893509951184;  // std dev = 4.472, 80.000 (wgt'ed) examples reached here.  /* #neg=40 #pos=40 */
%   | | | else return 0.35814893509951107;  // std dev = 4.123, 68.000 (wgt'ed) examples reached here.  /* #neg=34 #pos=34 */
WILL Produced-Tree #2
% FOR teamplayssport(A, B):
%   if ( teamplaysagainstteam(A, C), teamalsoknownas(D, A) )
%   then if ( recursion_teamplayssport(D, B) )
%   | then return 0.68062796226967;  // std dev = 0.948, 16.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   | else if ( recursion_teamplayssport(C, B), teamplaysinleague(C, E) )
%   | | then return 0.41346677284751565;  // std dev = 1.351, 8.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=5 */
%   | | else return -0.012253179503430855;  // std dev = 1.579, 22.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=3 */
%   else if ( teamalsoknownas(F, A) )
%   | then if ( recursion_teamplayssport(G, B) )
%   | | then return 0.3119404243684739;  // std dev = 3.536, 50.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=25 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( teamalsoknownas(A, H) )
%   | | then if ( recursion_teamplayssport(H, B) )
%   | | | then return 0.6533230006810054;  // std dev = 0.943, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | | else return 0.2516463110210871;  // std dev = 3.678, 55.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=24 */
%   | | else if ( teamplaysagainstteam(A, I) )
%   | | | then return 0.29903153915298697;  // std dev = 6.629, 224.000 (wgt'ed) examples reached here.  /* #neg=112 #pos=112 */
%   | | | else return 0.3087411357856373;  // std dev = 6.000, 144.000 (wgt'ed) examples reached here.  /* #neg=72 #pos=72 */
WILL Produced-Tree #3
% FOR teamplayssport(A, B):
%   if ( teamalsoknownas(C, A), recursion_teamplayssport(C, B) )
%   then return 0.47154019396050695;  // std dev = 1.478, 20.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=17 */
%   else if ( teamalsoknownas(D, A) )
%   | then if ( teamplaysagainstteam(A, E), recursion_teamplayssport(E, B) )
%   | | then if ( teamplaysinleague(D, F) )
%   | | | then return 0.39046150106552285;  // std dev = 1.423, 9.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=6 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( teamplaysagainstteam(D, G), teamplaysagainstteam(A, G) )
%   | | | then return -0.0711559295593072;  // std dev = 0.973, 16.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=1 */
%   | | | else return 0.2382488476134955;  // std dev = 3.546, 51.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=24 */
%   | else if ( teamalsoknownas(A, H), athleteplaysforteam(I, H) )
%   | | then if ( recursion_teamplayssport(H, B) )
%   | | | then return 0.6280410850441901;  // std dev = 2.11e-08, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.024354028465789046;  // std dev = 1.500, 12.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=3 */
%   | | else return 0.25304781167451357;  // std dev = 0.465, 414.000 (wgt'ed) examples reached here.  /* #neg=207 #pos=207 */
WILL Produced-Tree #4
% FOR teamplayssport(A, B):
%   if ( teamalsoknownas(C, A), teamalsoknownas(D, C) )
%   then if ( recursion_teamplayssport(D, B) )
%   | then if ( athleteplaysforteam(E, C) )
%   | | then return 0.5233877707319705;  // std dev = 0.186, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else return 0.30277784326312374;  // std dev = 3.471, 50.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=30 */
%   | else if ( athleteplaysforteam(F, A) )
%   | | then if ( teamplaysagainstteam(A, G), recursion_teamplayssport(G, B) )
%   | | | then return -0.0639932211350247;  // std dev = 0.756, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | else return -8.950190196064522E-4;  // std dev = 0.953, 7.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=1 */
%   | | else if ( teamalsoknownas(H, D), recursion_teamplayssport(H, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.27334046879774765;  // std dev = 0.082, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return 0.20170346325242453;  // std dev = 9.624, 450.000 (wgt'ed) examples reached here.  /* #neg=225 #pos=225 */
WILL Produced-Tree #5
% FOR teamplayssport(A, B):
%   if ( teamalsoknownas(A, C), recursion_teamplayssport(C, B) )
%   then return 0.22018628985081073;  // std dev = 1.614, 17.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=13 */
%   else if ( teamalsoknownas(A, D), athleteplaysforteam(E, D) )
%   | then if ( teamalsoknownas(D, F), teamplaysagainstteam(F, G) )
%   | | then if ( teamalsoknownas(H, A) )
%   | | | then return -0.1723572366542149;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | | else return -0.26756650258632575;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else if ( teamalsoknownas(D, I), recursion_teamplayssport(I, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.036182145294333515;  // std dev = 1.442, 10.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=3 */
%   | else if ( teamalsoknownas(J, A), recursion_teamplayssport(J, B) )
%   | | then if ( teamplaysagainstteam(A, K), teamalsoknownas(L, J) )
%   | | | then return 0.3399779766860804;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.3444824674074646;  // std dev = 0.805, 10.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | | else if ( teamplaysagainstteam(A, M), recursion_teamplayssport(M, B) )
%   | | | then return 0.4697313992207489;  // std dev = 3.346, 128.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=115 */
%   | | | else return 0.04498516741486128;  // std dev = 8.529, 356.000 (wgt'ed) examples reached here.  /* #neg=235 #pos=121 */
WILL Produced-Tree #6
% FOR teamplayssport(A, B):
%   if ( teamplaysagainstteam(A, C), recursion_teamplayssport(C, B) )
%   then if ( teamalsoknownas(D, A), teamplaysinleague(D, E) )
%   | then return 0.22895128652636274;  // std dev = 1.650, 25.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=21 */
%   | else return 0.3658080538973534;  // std dev = 3.238, 131.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=119 */
%   else if ( teamalsoknownas(F, A), teamalsoknownas(G, F) )
%   | then if ( recursion_teamplayssport(G, B) )
%   | | then return 0.22319306939924868;  // std dev = 3.251, 44.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=26 */
%   | | else if ( teamplaysinleague(A, H), teamplaysagainstteam(A, I) )
%   | | | then return -0.024883389227748888;  // std dev = 0.964, 8.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */
%   | | | else return -0.23496655884018516;  // std dev = 0.055, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | else if ( teamplaysinleague(A, J) )
%   | | then if ( teamplaysinleague(K, J), recursion_teamplayssport(K, B) )
%   | | | then return 0.2995112285308803;  // std dev = 4.541, 93.000 (wgt'ed) examples reached here.  /* #neg=35 #pos=58 */
%   | | | else return -0.2690079328742902;  // std dev = 0.585, 132.000 (wgt'ed) examples reached here.  /* #neg=132 */
%   | | else if ( teamalsoknownas(A, L) )
%   | | | then return 0.11708561866137375;  // std dev = 1.935, 15.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=7 */
%   | | | else return 0.12389583590399984;  // std dev = 4.118, 70.000 (wgt'ed) examples reached here.  /* #neg=38 #pos=32 */
WILL Produced-Tree #7
% FOR teamplayssport(A, B):
%   if ( teamalsoknownas(C, A), athleteplaysforteam(D, C) )
%   then if ( recursion_teamplayssport(C, B) )
%   | then return 0.27979688177839457;  // std dev = 0.148, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | else if ( teamalsoknownas(E, C) )
%   | | then return -0.07937040536398152;  // std dev = 0.800, 10.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | | else return -0.005869786698199607;  // std dev = 1.023, 12.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=2 */
%   else if ( teamplaysagainstteam(A, F) )
%   | then if ( teamalsoknownas(G, F), recursion_teamplayssport(G, B) )
%   | | then return 0.2830354095695854;  // std dev = 2.635, 95.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=87 */
%   | | else if ( athleteplaysforteam(H, A), teamalsoknownas(I, F) )
%   | | | then return -0.16617976165169196;  // std dev = 2.435, 82.000 (wgt'ed) examples reached here.  /* #neg=72 #pos=10 */
%   | | | else return 0.035925019101886176;  // std dev = 3.326, 95.000 (wgt'ed) examples reached here.  /* #neg=56 #pos=39 */
%   | else if ( teamplaysagainstteam(A, J), teamalsoknownas(K, J) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( teamplaysagainstteam(A, L) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.12333870684648274;  // std dev = 7.127, 220.000 (wgt'ed) examples reached here.  /* #neg=110 #pos=110 */
WILL Produced-Tree #8
% FOR teamplayssport(A, B):
%   if ( teamalsoknownas(A, C), recursion_teamplayssport(C, B) )
%   then return 0.060475215692851886;  // std dev = 1.548, 17.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=13 */
%   else if ( teamalsoknownas(A, D), athleteplaysforteam(E, D) )
%   | then if ( teamplaysagainstteam(D, F), teamalsoknownas(F, G) )
%   | | then if ( recursion_teamplayssport(G, B) )
%   | | | then return -0.1363875832467042;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | | else return -0.01968045147152295;  // std dev = 1.236, 13.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=3 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( teamalsoknownas(A, H) )
%   | | then if ( teamalsoknownas(H, I) )
%   | | | then return 0.10286859142038747;  // std dev = 4.433, 90.000 (wgt'ed) examples reached here.  /* #neg=45 #pos=45 */
%   | | | else return -0.5842547087756287;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( athleteplaysforteam(J, A) )
%   | | | then return 0.046422019076885916;  // std dev = 4.417, 202.000 (wgt'ed) examples reached here.  /* #neg=101 #pos=101 */
%   | | | else return 0.08378252844136608;  // std dev = 6.240, 204.000 (wgt'ed) examples reached here.  /* #neg=102 #pos=102 */
WILL Produced-Tree #9
% FOR teamplayssport(A, B):
%   if ( recursion_teamplayssport(C, B) )
%   then if ( teamalsoknownas(D, C), teamalsoknownas(C, E) )
%   | then return 0.10605222841094757;  // std dev = 7.706, 362.000 (wgt'ed) examples reached here.  /* #neg=148 #pos=214 */
%   | else if ( teamplaysagainstteam(A, F), teamplaysagainstteam(C, F) )
%   | | then return 0.1925802437342877;  // std dev = 2.245, 42.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=33 */
%   | | else return -0.1491982974638505;  // std dev = 3.305, 124.000 (wgt'ed) examples reached here.  /* #neg=107 #pos=17 */
%   else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR teamplayssport(A, B):
%   if ( recursion_teamplayssport(C, B) )
%   then if ( teamalsoknownas(C, D), athleteplaysforteam(E, C) )
%   | then return 0.16816441697242185;  // std dev = 7.403, 366.000 (wgt'ed) examples reached here.  /* #neg=106 #pos=260 */
%   | else return -0.24775742906316525;  // std dev = 2.339, 162.000 (wgt'ed) examples reached here.  /* #neg=158 #pos=4 */
%   else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 0.910114
   AUC PR    = 0.903175
   CLL	      = -0.463185
   Precision = 0.837838 at threshold = 0.5
   Recall    = 0.699248
   F1        = 0.762295


Total learning time: 10.879 seconds
Total inference time: 4.087 seconds
AUC ROC: 0.910114


Results scoring model
   AUC ROC   = 0.918582
   AUC PR    = 0.900556
   CLL	      = -0.444523
   Precision = 0.843373 at threshold = 0.5
   Recall    = 0.795455
   F1        = 0.818713


Total scoring time: 4.751 seconds
Parameter learned model CLL: -0.444523


Structure after Parameter Learning
[['teamplayssport(A, B)', {'': 'teamalsoknownas(A, C)', 'true': 'recursion_teamplayssport(C, B)', 'false': 'teamplaysagainstteam(A, D)', 'false,true': 'recursion_teamplayssport(D, B)', 'false,true,false': 'teamalsoknownas(E, A), recursion_teamplayssport(E, B)', 'false,false': 'athleteplaysforteam(F, A)', 'false,false,true': 'athleteledsportsteam(F, G)', 'false,false,false': 'teamplaysinleague(A, H)'}, {'true,true': [1.749, 4, 13], 'true,false': [5.105, 57, 48], 'false,true,true': [2.893, 9, 119], 'false,true,false,true': [0.0, 0, 0], 'false,true,false,false': [2.57, 117, 7], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [1.225, 3, 3], 'false,false,false,true': [4.472, 40, 40], 'false,false,false,false': [4.123, 34, 34]}], ['teamplayssport(A, B)', {'': 'teamplaysagainstteam(A, C), teamalsoknownas(D, A)', 'true': 'recursion_teamplayssport(D, B)', 'true,false': 'recursion_teamplayssport(C, B), teamplaysinleague(C, E)', 'false': 'teamalsoknownas(F, A)', 'false,true': 'recursion_teamplayssport(G, B)', 'false,false': 'teamalsoknownas(A, H)', 'false,false,true': 'recursion_teamplayssport(H, B)', 'false,false,false': 'teamplaysagainstteam(A, I)'}, {'true,true': [0.948, 1, 15], 'true,false,true': [1.351, 3, 5], 'true,false,false': [1.579, 19, 3], 'false,true,true': [3.536, 25, 25], 'false,true,false': [0.0, 0, 0], 'false,false,true,true': [0.943, 1, 8], 'false,false,true,false': [3.678, 31, 24], 'false,false,false,true': [6.629, 112, 112], 'false,false,false,false': [6.0, 72, 72]}], ['teamplayssport(A, B)', {'': 'teamalsoknownas(C, A), recursion_teamplayssport(C, B)', 'false': 'teamalsoknownas(D, A)', 'false,true': 'teamplaysagainstteam(A, E), recursion_teamplayssport(E, B)', 'false,true,true': 'teamplaysinleague(D, F)', 'false,true,false': 'teamplaysagainstteam(D, G), teamplaysagainstteam(A, G)', 'false,false': 'teamalsoknownas(A, H), athleteplaysforteam(I, H)', 'false,false,true': 'recursion_teamplayssport(H, B)'}, {'true': [1.478, 3, 17], 'false,true,true,true': [1.423, 3, 6], 'false,true,true,false': [0.0, 0, 0], 'false,true,false,true': [0.973, 15, 1], 'false,true,false,false': [3.546, 27, 24], 'false,false,true,true': [2.11e-08, 0, 6], 'false,false,true,false': [1.5, 9, 3], 'false,false,false': [0.465, 207, 207]}], ['teamplayssport(A, B)', {'': 'teamalsoknownas(C, A), teamalsoknownas(D, C)', 'true': 'recursion_teamplayssport(D, B)', 'true,true': 'athleteplaysforteam(E, C)', 'true,false': 'athleteplaysforteam(F, A)', 'true,false,true': 'teamplaysagainstteam(A, G), recursion_teamplayssport(G, B)', 'true,false,false': 'teamalsoknownas(H, D), recursion_teamplayssport(H, B)'}, {'true,true,true': [0.186, 0, 7], 'true,true,false': [3.471, 20, 30], 'true,false,true,true': [0.756, 2, 1], 'true,false,true,false': [0.953, 6, 1], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [0.082, 11, 0], 'false': [9.624, 225, 225]}], ['teamplayssport(A, B)', {'': 'teamalsoknownas(A, C), recursion_teamplayssport(C, B)', 'false': 'teamalsoknownas(A, D), athleteplaysforteam(E, D)', 'false,true': 'teamalsoknownas(D, F), teamplaysagainstteam(F, G)', 'false,true,true': 'teamalsoknownas(H, A)', 'false,true,false': 'teamalsoknownas(D, I), recursion_teamplayssport(I, B)', 'false,false': 'teamalsoknownas(J, A), recursion_teamplayssport(J, B)', 'false,false,true': 'teamplaysagainstteam(A, K), teamalsoknownas(L, J)', 'false,false,false': 'teamplaysagainstteam(A, M), recursion_teamplayssport(M, B)'}, {'true': [1.614, 4, 13], 'false,true,true,true': [0.0, 1, 0], 'false,true,true,false': [0.0, 3, 0], 'false,true,false,true': [0.0, 0, 0], 'false,true,false,false': [1.442, 7, 3], 'false,false,true,true': [0.0, 0, 3], 'false,false,true,false': [0.805, 1, 9], 'false,false,false,true': [3.346, 13, 115], 'false,false,false,false': [8.529, 235, 121]}], ['teamplayssport(A, B)', {'': 'teamplaysagainstteam(A, C), recursion_teamplayssport(C, B)', 'true': 'teamalsoknownas(D, A), teamplaysinleague(D, E)', 'false': 'teamalsoknownas(F, A), teamalsoknownas(G, F)', 'false,true': 'recursion_teamplayssport(G, B)', 'false,true,false': 'teamplaysinleague(A, H), teamplaysagainstteam(A, I)', 'false,false': 'teamplaysinleague(A, J)', 'false,false,true': 'teamplaysinleague(K, J), recursion_teamplayssport(K, B)', 'false,false,false': 'teamalsoknownas(A, L)'}, {'true,true': [1.65, 4, 21], 'true,false': [3.238, 12, 119], 'false,true,true': [3.251, 18, 26], 'false,true,false,true': [0.964, 7, 1], 'false,true,false,false': [0.055, 10, 0], 'false,false,true,true': [4.541, 35, 58], 'false,false,true,false': [0.585, 132, 0], 'false,false,false,true': [1.935, 8, 7], 'false,false,false,false': [4.118, 38, 32]}], ['teamplayssport(A, B)', {'': 'teamalsoknownas(C, A), athleteplaysforteam(D, C)', 'true': 'recursion_teamplayssport(C, B)', 'true,false': 'teamalsoknownas(E, C)', 'false': 'teamplaysagainstteam(A, F)', 'false,true': 'teamalsoknownas(G, F), recursion_teamplayssport(G, B)', 'false,true,false': 'athleteplaysforteam(H, A), teamalsoknownas(I, F)', 'false,false': 'teamplaysagainstteam(A, J), teamalsoknownas(K, J)', 'false,false,false': 'teamplaysagainstteam(A, L)'}, {'true,true': [0.148, 0, 14], 'true,false,true': [0.8, 8, 2], 'true,false,false': [1.023, 10, 2], 'false,true,true': [2.635, 8, 87], 'false,true,false,true': [2.435, 72, 10], 'false,true,false,false': [3.326, 56, 39], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [7.127, 110, 110]}], ['teamplayssport(A, B)', {'': 'teamalsoknownas(A, C), recursion_teamplayssport(C, B)', 'false': 'teamalsoknownas(A, D), athleteplaysforteam(E, D)', 'false,true': 'teamplaysagainstteam(D, F), teamalsoknownas(F, G)', 'false,true,true': 'recursion_teamplayssport(G, B)', 'false,false': 'teamalsoknownas(A, H)', 'false,false,true': 'teamalsoknownas(H, I)', 'false,false,false': 'athleteplaysforteam(J, A)'}, {'true': [1.548, 4, 13], 'false,true,true,true': [0.0, 1, 0], 'false,true,true,false': [1.236, 10, 3], 'false,true,false': [0.0, 0, 0], 'false,false,true,true': [4.433, 45, 45], 'false,false,true,false': [0.0, 1, 0], 'false,false,false,true': [4.417, 101, 101], 'false,false,false,false': [6.24, 102, 102]}], ['teamplayssport(A, B)', {'': 'recursion_teamplayssport(C, B)', 'true': 'teamalsoknownas(D, C), teamalsoknownas(C, E)', 'true,false': 'teamplaysagainstteam(A, F), teamplaysagainstteam(C, F)'}, {'true,true': [7.706, 148, 214], 'true,false,true': [2.245, 9, 33], 'true,false,false': [3.305, 107, 17], 'false': [0.0, 0, 0]}], ['teamplayssport(A, B)', {'': 'recursion_teamplayssport(C, B)', 'true': 'teamalsoknownas(C, D), athleteplaysforteam(E, C)'}, {'true,true': [7.403, 106, 260], 'true,false': [2.339, 158, 4], 'false': [0.0, 0, 0]}]]
[{'': [0.24999999999999975, 0.2500000000000038], 'false': [0.2500000000000036, 0.25], 'false,true': [0.06536865234375377, 0.053264828303850424], 'false,false': [0.24999999999999992, 0.24999999999999947], 'false,false,true': [nan, 0.24999999999999992], 'true': [0.17993079584775054, 0.24816326530612265], 'false,false,false': [0.25000000000000117, 0.25000000000000167], 'false,true,false': [nan, 0.0532648283038504]}, {'': [0.2126853834334857, 0.2243243434412468], 'false': [0.2501008107629874, 0.22133376815519512], 'false,true': [0.2501008107629874, nan], 'false,false': [0.2447509043279637, 0.21725705944785514], 'false,false,true': [0.09876543209876543, 0.24595041322314073], 'false,false,false': [0.19617113552267545, 0.24999999999999747], 'true': [0.056136823131272884, 0.1794290211033157], 'true,false': [0.22825373762432485, 0.11334458464412166]}, {'': [0.10917415267237085, 0.2175007335422844], 'false': [0.22518078055610127, 0.21559716890632286], 'false,true': [0.22489946360959234, 0.21916472254487757], 'false,true,true': [0.22489946360959234, nan], 'false,true,false': [0.059165472007502294, 0.24649935602687567], 'false,false': [0.20598623606228736, 0.21598360583168266], 'false,false,true': [7.401486830834377e-17, 0.18749999999999997]}, {'': [0.22801162100287295, 0.2058234833670523], 'true': [0.2171996795162757, 0.08723853105481608], 'true,true': [0.004942950844781738, 0.2409387587112555], 'true,false': [0.1488554833002428, 0.0006181881362217201], 'true,false,true': [0.1905009478163312, 0.12981301214600263], 'true,false,false': [nan, 0.0006181881362217201]}, {'': [0.15320886874402312, 0.20529914580165898], 'false': [0.16496325477894438, 0.20527289805492036], 'false,false': [0.04987559322759535, 0.20854061899145837], 'false,false,false': [0.08746981380550209, 0.2043601283533285], 'false,true': [0.0016996508098746435, 0.20787728252000298], 'false,true,false': [nan, 0.20787728252000298], 'false,false,true': [0.0, 0.06483358878741415], 'false,true,true': [0.0, -9.25185853854297e-18]}, {'': [0.0871803822332554, 0.20113631552993283], 'false': [0.21613235428351435, 0.19618097410926585], 'false,true': [0.24025287894519048, 0.06273340641024866], 'false,false': [0.17153757571052222, 0.2435882066176423], 'false,false,false': [0.2494950657525185, 0.24231426654893587], 'false,false,true': [0.2217100126814393, 0.002593678053461136], 'true': [0.10893940460153717, 0.08002633057807824], 'false,true,false': [0.11625830630844365, 0.00029795842306706843]}, {'': [0.07247168886192375, 0.17108528368472298], 'false': [0.12098881700678488, 0.23089516792399123], 'false,false': [nan, 0.23089516792399123], 'false,false,false': [nan, 0.23089516792399123], 'false,true': [0.07310419774660787, 0.10613845686291659], 'false,true,false': [0.07230091748774423, 0.11642243183575958], 'true': [0.001570196009103797, 0.07799822968939836], 'true,false': [0.06401540053553184, 0.08719497779750555]}, {'': [0.14104379434857361, 0.15743572389412913], 'false': [0.11006863497483896, 0.1585029689261971], 'false,false': [0.22112653567365434, 0.14430050405281147], 'false,false,true': [0.2183951627891365, 0.0], 'false,false,false': [0.09656956170898874, 0.19086903010141434], 'false,true': [0.11006863497483896, nan], 'false,true,true': [0.0, 0.11756255629217019]}, {'': [0.15578048613617218, nan], 'true': [0.1640458352155614, 0.11822622853412888], 'true,false': [0.11999965225569632, 0.08807056485754033]}, {'': [0.15095417458895172, nan], 'true': [0.1497505716345174, 0.033759222269721986]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
2;;teamplayssport(A, B) :- teamalsoknownas(C, A), recursion_teamplayssport(C, B).;true;true
2;false;teamalsoknownas(D, A).;true;true
2;false,false;teamalsoknownas(A, H), athleteplaysforteam(I, H).;true;true
2;false,false,true;recursion_teamplayssport(H, B).;true;true
3;;teamplayssport(A, B) :- teamalsoknownas(C, A), teamalsoknownas(D, C).;true;true
3;true;recursion_teamplayssport(D, B).;true;true
3;true,false;athleteplaysforteam(F, A).;true;true
4;;teamplayssport(A, B) :- teamalsoknownas(A, C), recursion_teamplayssport(C, B).;true;true
4;false;teamalsoknownas(A, D), athleteplaysforteam(E, D).;true;true
4;false,true;teamalsoknownas(D, F), teamplaysagainstteam(F, G).;true;true
4;false,true,true;teamalsoknownas(H, A).;true;true
4;false,false;teamalsoknownas(J, A), recursion_teamplayssport(J, B).;true;true
4;false,false,true;teamplaysagainstteam(A, K), teamalsoknownas(L, J).;true;true
5;;teamplayssport(A, B) :- teamplaysagainstteam(A, C), recursion_teamplayssport(C, B).;true;true
5;false;teamalsoknownas(F, A), teamalsoknownas(G, F).;true;true
5;false,true;recursion_teamplayssport(G, B).;true;true
5;false,true,false;teamplaysinleague(A, H), teamplaysagainstteam(A, I).;true;true
6;;teamplayssport(A, B) :- teamalsoknownas(C, A), athleteplaysforteam(D, C).;true;true
6;true;recursion_teamplayssport(C, B).;true;true
7;;teamplayssport(A, B) :- teamalsoknownas(A, C), recursion_teamplayssport(C, B).;true;true
7;false;teamalsoknownas(A, D), athleteplaysforteam(E, D).;true;true
7;false,true;recursion_teamplayssport(G, B).;true;true
7;false,false;teamalsoknownas(A, H).;true;true
7;false,false,true;teamalsoknownas(H, I).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR teamplayssport(A, B):
%   if ( athleteplayssport(C, B), athleteledsportsteam(C, D) )
%   then if ( teamplaysagainstteam(E, A), recursion_teamplayssport(E, B) )
%   | then if ( teamplaysagainstteam(D, A), athleteplaysforteam(C, E) )
%   | | then return 0.8135060779566538;  // std dev = 0.207, 112.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=107 */
%   | | else if ( athleteledsportsteam(F, A) )
%   | | | then return 0.32873717039363;  // std dev = 2.058, 17.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=8 */
%   | | | else return 0.791482268432845;  // std dev = 1.366, 30.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=28 */
%   | else if ( teamplaysagainstteam(G, A), athleteplaysforteam(H, G) )
%   | | then if ( athleteplaysinleague(H, I), teamplaysagainstteam(A, G) )
%   | | | then return -0.08470820775763062;  // std dev = 1.373, 35.000 (wgt'ed) examples reached here.  /* #neg=33 #pos=2 */
%   | | | else return 0.21529179224236936;  // std dev = 1.793, 14.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=5 */
%   | | else if ( athleteplaysforteam(C, J), teamalsoknownas(D, J) )
%   | | | then return 0.011995088945666036;  // std dev = 1.301, 13.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=2 */
%   | | | else return 0.7165560147455285;  // std dev = 3.706, 113.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=97 */
%   else if ( teamplaysagainstteam(K, A), recursion_teamplayssport(K, B) )
%   | then return 0.6763307532813305;  // std dev = 0.386, 11.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=9 */
%   | else return -0.10906417965458605;  // std dev = 0.178, 183.000 (wgt'ed) examples reached here.  /* #neg=177 #pos=6 */
WILL Produced-Tree #2
% FOR teamplayssport(A, B):
%   if ( athleteplayssport(C, B), athleteledsportsteam(C, D) )
%   then if ( teamplaysagainstteam(E, A), recursion_teamplayssport(E, B) )
%   | then if ( athleteplaysforteam(C, E), teamplaysagainstteam(D, A) )
%   | | then return 0.6837519931972423;  // std dev = 0.207, 112.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=107 */
%   | | else if ( athleteledsportsteam(F, A) )
%   | | | then return 0.2838374893261067;  // std dev = 2.058, 17.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=8 */
%   | | | else return 0.6660633000779167;  // std dev = 1.366, 30.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=28 */
%   | else if ( athleteplaysforteam(C, G), teamalsoknownas(D, G) )
%   | | then if ( teamplaysagainstteam(A, H), teamplaysinleague(H, I) )
%   | | | then return 0.1909584356933033;  // std dev = 1.606, 12.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=4 */
%   | | | else return -0.08201327810744824;  // std dev = 0.973, 15.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=1 */
%   | | else if ( athleteplaysforteam(C, D), teamalsoknownas(D, J) )
%   | | | then return 0.35104741720440497;  // std dev = 3.880, 70.000 (wgt'ed) examples reached here.  /* #neg=30 #pos=40 */
%   | | | else return 0.5504246680693491;  // std dev = 3.358, 78.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=61 */
%   else if ( athleteplayssport(K, B), athleteplaysinleague(K, L) )
%   | then return 0.17833732454512552;  // std dev = 0.434, 32.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=11 */
%   | else return -0.10511222867340353;  // std dev = 0.156, 162.000 (wgt'ed) examples reached here.  /* #neg=158 #pos=4 */
WILL Produced-Tree #3
% FOR teamplayssport(A, B):
%   if ( teamalsoknownas(C, A), recursion_teamplayssport(C, B) )
%   then if ( teamalsoknownas(D, A), teamplaysagainstteam(D, E) )
%   | then return 0.6019332544287891;  // std dev = 0.073, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | else return 0.0348403954739176;  // std dev = 0.798, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   else if ( teamalsoknownas(F, A) )
%   | then if ( athleteplayssport(G, B), athleteledsportsteam(G, H) )
%   | | then if ( teamplaysinleague(A, I), teamplaysinleague(H, I) )
%   | | | then return 0.4892936269384649;  // std dev = 1.488, 16.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=13 */
%   | | | else return 0.2494887742029981;  // std dev = 2.344, 29.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=16 */
%   | | else return -0.054263542911736906;  // std dev = 0.246, 31.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=2 */
%   | else if ( teamalsoknownas(A, J), athleteplaysforteam(K, J) )
%   | | then if ( recursion_teamplayssport(J, B) )
%   | | | then return 0.5751126668998832;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.054706284147938565;  // std dev = 1.189, 12.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=3 */
%   | | else if ( athleteplayssport(L, B), athleteledsportsteam(L, M) )
%   | | | then return 0.40435768006195866;  // std dev = 6.097, 263.000 (wgt'ed) examples reached here.  /* #neg=66 #pos=197 */
%   | | | else return -0.06363830131943585;  // std dev = 2.727, 151.000 (wgt'ed) examples reached here.  /* #neg=141 #pos=10 */
WILL Produced-Tree #4
% FOR teamplayssport(A, B):
%   if ( teamalsoknownas(C, A), teamalsoknownas(D, C) )
%   then if ( recursion_teamplayssport(D, B) )
%   | then if ( athleteplayssport(E, B), athleteplaysinleague(E, F) )
%   | | then if ( teamplaysinleague(A, G) )
%   | | | then return 0.2810877801303069;  // std dev = 2.467, 40.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=27 */
%   | | | else return 0.4187530444707871;  // std dev = 1.098, 11.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=9 */
%   | | else return 0.05446432099451718;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | else if ( athleteplaysforteam(H, A) )
%   | | then return 0.03388705538674717;  // std dev = 0.405, 10.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | | else return -0.13668992584323278;  // std dev = 0.077, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else if ( athleteplayssport(I, B), athleteplaysinleague(I, J) )
%   | then if ( teamplaysagainstteam(A, K), recursion_teamplayssport(K, B) )
%   | | then return 0.41451781587101033;  // std dev = 0.267, 140.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=128 */
%   | | else if ( teamplaysagainstteam(A, L), teamplaysagainstteam(L, A) )
%   | | | then return -0.15807607379138;  // std dev = 1.907, 45.000 (wgt'ed) examples reached here.  /* #neg=41 #pos=4 */
%   | | | else return 0.3383029518022998;  // std dev = 4.166, 125.000 (wgt'ed) examples reached here.  /* #neg=34 #pos=91 */
%   | else return -0.09830853323517888;  // std dev = 0.119, 140.000 (wgt'ed) examples reached here.  /* #neg=138 #pos=2 */
WILL Produced-Tree #5
% FOR teamplayssport(A, B):
%   if ( teamalsoknownas(A, C), recursion_teamplayssport(C, B) )
%   then if ( athleteplaysforteam(D, A), teamalsoknownas(E, A) )
%   | then return 0.10917538584705397;  // std dev = 0.837, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | else if ( teamplaysagainstteam(A, F) )
%   | | then return 0.42726602354919624;  // std dev = 0.167, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else return 0.10517901438843792;  // std dev = 0.729, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   else if ( teamalsoknownas(A, G), athleteplaysforteam(H, G) )
%   | then if ( teamalsoknownas(G, I), teamplaysagainstteam(I, J) )
%   | | then return -0.14158864771934027;  // std dev = 0.032, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else if ( teamplaysagainstteam(K, A), recursion_teamplayssport(K, B) )
%   | | | then return 0.5330120249423419;  // std dev = 0.171, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return -0.13881396975483093;  // std dev = 0.136, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else if ( teamalsoknownas(L, A), recursion_teamplayssport(L, B) )
%   | | then return 0.2942662143000334;  // std dev = 0.148, 13.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   | | else if ( athleteplayssport(M, B), athleteplaysinleague(M, N) )
%   | | | then return 0.22289821692951642;  // std dev = 6.524, 329.000 (wgt'ed) examples reached here.  /* #neg=97 #pos=232 */
%   | | | else return -0.07777237152068399;  // std dev = 1.965, 155.000 (wgt'ed) examples reached here.  /* #neg=151 #pos=4 */
WILL Produced-Tree #6
% FOR teamplayssport(A, B):
%   if ( teamplaysagainstteam(A, C), recursion_teamplayssport(C, B) )
%   then if ( athleteplaysforteam(D, A), teamalsoknownas(A, E) )
%   | then if ( athleteledsportsteam(D, F), teamalsoknownas(G, F) )
%   | | then return -0.0018594873116281052;  // std dev = 0.418, 10.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
%   | | else return 0.22594070935895605;  // std dev = 0.264, 15.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=13 */
%   | else return 0.27999314504868494;  // std dev = 0.252, 131.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=122 */
%   else if ( teamalsoknownas(H, A), teamalsoknownas(I, H) )
%   | then if ( recursion_teamplayssport(I, B) )
%   | | then if ( teamplaysagainstteam(J, A), athleteledsportsteam(K, J) )
%   | | | then return -0.1631214584688086;  // std dev = 0.640, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | else return 0.1756622443144258;  // std dev = 2.424, 40.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=25 */
%   | | else return -0.06116443628235784;  // std dev = 0.242, 18.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=1 */
%   | else if ( teamplaysagainstteam(A, L), athleteplaysforteam(M, L) )
%   | | then return -0.11944605678242105;  // std dev = 0.188, 126.000 (wgt'ed) examples reached here.  /* #neg=120 #pos=6 */
%   | | else if ( athleteplayssport(N, B), athleteledsportsteam(N, P) )
%   | | | then return 0.2507082255427197;  // std dev = 3.596, 107.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=86 */
%   | | | else return -0.05996832749296776;  // std dev = 1.892, 77.000 (wgt'ed) examples reached here.  /* #neg=72 #pos=5 */
WILL Produced-Tree #7
% FOR teamplayssport(A, B):
%   if ( teamalsoknownas(C, A), athleteplaysforteam(D, C) )
%   then if ( recursion_teamplayssport(C, B) )
%   | then return 0.23641777171122128;  // std dev = 0.124, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | else if ( athleteplayssport(E, B), teamplaysagainstteam(F, A) )
%   | | then return -0.06791373346669291;  // std dev = 0.229, 16.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=2 */
%   | | else return 0.19650306267282855;  // std dev = 1.007, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   else if ( teamplaysagainstteam(G, A), recursion_teamplayssport(G, B) )
%   | then if ( teamplaysinleague(A, H), teamplaysinleague(G, H) )
%   | | then return 0.24178558875785872;  // std dev = 0.202, 127.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=119 */
%   | | else if ( athleteplaysforteam(I, A), teamplaysinleague(A, J) )
%   | | | then return -0.4425438359353149;  // std dev = 1.194, 10.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=1 */
%   | | | else return 0.3693218925135695;  // std dev = 0.482, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | else if ( teamplaysagainstteam(K, A) )
%   | | then return -0.09823704598886136;  // std dev = 0.234, 140.000 (wgt'ed) examples reached here.  /* #neg=130 #pos=10 */
%   | | else if ( athleteplayssport(L, B), athleteledsportsteam(L, M) )
%   | | | then return 0.19003229488818227;  // std dev = 3.866, 122.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=97 */
%   | | | else return -0.08541528332196328;  // std dev = 1.488, 76.000 (wgt'ed) examples reached here.  /* #neg=74 #pos=2 */
WILL Produced-Tree #8
% FOR teamplayssport(A, B):
%   if ( teamalsoknownas(A, C), recursion_teamplayssport(C, B) )
%   then if ( teamalsoknownas(D, A), athleteplaysforteam(E, A) )
%   | then return 0.0561421041409466;  // std dev = 0.730, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | else if ( teamplaysagainstteam(A, F), teamalsoknownas(F, G) )
%   | | then if ( athleteledsportsteam(H, G), athleteplaysforteam(H, G) )
%   | | | then return 0.17052926908851862;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.46705888744827134;  // std dev = 0.395, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.08776143907661288;  // std dev = 0.659, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   else if ( teamalsoknownas(A, I), athleteplaysforteam(J, I) )
%   | then return -0.018590496154365404;  // std dev = 0.179, 14.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=3 */
%   | else if ( teamalsoknownas(A, K) )
%   | | then if ( teamalsoknownas(K, L) )
%   | | | then return 0.048613035333476766;  // std dev = 3.310, 90.000 (wgt'ed) examples reached here.  /* #neg=45 #pos=45 */
%   | | | else return -0.573128877272534;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( teamplaysagainstteam(M, A), recursion_teamplayssport(M, B) )
%   | | | then return 0.172125295795563;  // std dev = 2.815, 139.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=126 */
%   | | | else return -0.004263725489015558;  // std dev = 4.463, 267.000 (wgt'ed) examples reached here.  /* #neg=190 #pos=77 */
WILL Produced-Tree #9
% FOR teamplayssport(A, B):
%   if ( athleteplayssport(C, B), athleteplaysinleague(C, D) )
%   then if ( athleteledsportsteam(C, E), teamplaysinleague(A, D) )
%   | then if ( recursion_teamplayssport(E, B), teamplaysinleague(E, D) )
%   | | then return 0.19678394269010094;  // std dev = 0.112, 121.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=120 */
%   | | else if ( teamplaysinleague(E, D) )
%   | | | then return -0.22603082791298457;  // std dev = 0.765, 9.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=1 */
%   | | | else return 0.041629738336440604;  // std dev = 0.787, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | else if ( teamplaysinleague(A, F), athleteplaysinleague(G, F) )
%   | | then if ( athleteplayssport(G, H), recursion_teamplayssport(A, H) )
%   | | | then return -0.2579237608695776;  // std dev = 1.121, 42.000 (wgt'ed) examples reached here.  /* #neg=41 #pos=1 */
%   | | | else return 0.1018879416242762;  // std dev = 2.832, 46.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=32 */
%   | | else if ( athleteledsportsteam(C, I), teamplaysagainstteam(A, J) )
%   | | | then return 0.026939950401060377;  // std dev = 1.494, 23.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=14 */
%   | | | else return 0.1428107089641251;  // std dev = 3.816, 122.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=91 */
%   else if ( teamalsoknownas(K, A), teamplaysagainstteam(A, L) )
%   | then return 0.023248227063241797;  // std dev = 0.312, 17.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=2 */
%   | else return -0.06961816170389745;  // std dev = 0.118, 145.000 (wgt'ed) examples reached here.  /* #neg=143 #pos=2 */
WILL Produced-Tree #10
% FOR teamplayssport(A, B):
%   if ( teamplaysagainstteam(C, A), recursion_teamplayssport(C, B) )
%   then if ( teamplaysagainstteam(A, D), teamplaysinleague(C, E) )
%   | then if ( teamplaysinleague(A, E), recursion_teamplayssport(D, B) )
%   | | then return 0.1451306488046783;  // std dev = 0.174, 133.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=127 */
%   | | else return -0.07936298240069134;  // std dev = 0.368, 24.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=12 */
%   | else return 0.29374624011207584;  // std dev = 0.123, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   else if ( teamplaysagainstteam(F, A) )
%   | then if ( athleteplaysforteam(G, F), athleteplaysinleague(G, H) )
%   | | then return -0.09078705043160565;  // std dev = 0.140, 126.000 (wgt'ed) examples reached here.  /* #neg=122 #pos=4 */
%   | | else if ( teamplaysagainstteam(A, I), teamplaysinleague(I, J) )
%   | | | then return 0.07881494746283169;  // std dev = 2.159, 23.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=7 */
%   | | | else return -0.19456771950901552;  // std dev = 0.844, 9.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=1 */
%   | else if ( athleteplayssport(K, B), athleteledsportsteam(K, L) )
%   | | then if ( teamplaysinleague(A, M), teamplaysinleague(L, M) )
%   | | | then return 0.21482873236267672;  // std dev = 1.477, 45.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=42 */
%   | | | else return 0.05662467413866866;  // std dev = 3.469, 77.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=55 */
%   | | else return -0.0678812313252286;  // std dev = 0.184, 78.000 (wgt'ed) examples reached here.  /* #neg=75 #pos=3 */


Results
   AUC ROC   = 0.943892
   AUC PR    = 0.941669
   CLL	      = -0.340685
   Precision = 0.840278 at threshold = 0.5
   Recall    = 0.909774
   F1        = 0.873646


Total learning time: 735.188 seconds
Total inference time: 6.489 seconds
AUC ROC: 0.943892


Results scoring model
   AUC ROC   = 0.972437
   AUC PR    = 0.97082
   CLL	      = -0.27362
   Precision = 0.912088 at threshold = 0.5
   Recall    = 0.943182
   F1        = 0.927374


Total scoring time: 11.99 seconds
Refined model CLL: -0.27362


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.943892
   AUC PR    = 0.941669
   CLL	      = -0.340685
   Precision = 0.840278 at threshold = 0.5
   Recall    = 0.909774
   F1        = 0.873646


Total learning time: 762.808 seconds
Total inference time: 6.489 seconds
AUC ROC: 0.943892
Total revision time: 762.808
Best scored revision CLL: -0.27362


Dataset: 10_nell_finances_nell_sports, Fold: 2, Type: Transfer (trRDN-B), Time: 21:12:19
{'AUC ROC': 0.943892, 'AUC PR': 0.941669, 'CLL': -0.340685, 'Precision': [0.840278, 0.5], 'Recall': 0.909774, 'F1': 0.873646, 'Learning time': 762.808, 'Inference time': 6.489, 'parameter_1.0': {'AUC ROC': 0.910114, 'AUC PR': 0.903175, 'CLL': -0.463185, 'Precision': [0.837838, 0.5], 'Recall': 0.699248, 'F1': 0.762295, 'Learning time': 10.879, 'Inference time': 4.087}}


Starting fold 3

Target train facts examples: 9691
Target train pos examples: 266
Target train neg examples: 266

Target test facts examples: 9691
Target test pos	 examples: 131
Target test neg examples: 131

Amount of data: 0.2
******************************************
Performing Parameter Learning
******************************************
Refine
0;;companyeconomicsector(A, B) :- acquired(C, A).;true;true
0;true;economicsectorcompany(B, C).;false;false
0;false;companyalsoknownas(A, D).;true;true
0;false,true;economicsectorcompany(B, D).;false;true
0;false,true,false;acquired(A, E), economicsectorcompany(B, E).;false;false
0;false,false;companyceo(A, F).;true;true
0;false,false,true;bankchiefexecutiveceo(G, F).;false;false
0;false,false,false;countryhascompanyoffice(H, A).;false;false
1;;companyeconomicsector(A, B) :- companyalsoknownas(A, C), acquired(A, D).;true;true
1;true;economicsectorcompany(B, D).;false;true
1;true,false;economicsectorcompany(B, C), countryhascompanyoffice(E, C).;false;false
1;false;acquired(A, F), cityhascompanyoffice(G, A).;true;true
1;false,true;cityhascompanyoffice(G, H), economicsectorcompany(B, H).;false;false
1;false,false;acquired(I, A).;true;true
1;false,false,true;economicsectorcompany(B, I).;false;false
1;false,false,false;companyalsoknownas(A, J).;false;false
2;;companyeconomicsector(A, B) :- acquired(A, C), economicsectorcompany(B, C).;false;true
2;false;acquired(A, D).;true;true
2;false,true;companyalsoknownas(A, E), economicsectorcompany(B, E).;true;true
2;false,true,true;countryhascompanyoffice(F, D).;false;false
2;false,true,false;companyalsoknownas(D, G), companyalsoknownas(A, G).;false;false
2;false,false;acquired(H, A), companyceo(H, I).;true;true
2;false,false,true;economicsectorcompany(B, H).;false;false
2;false,false,false;cityhascompanyoffice(J, A).;false;false
3;;companyeconomicsector(A, B) :- acquired(A, C), acquired(C, D).;true;false
3;true;economicsectorcompany(B, D).;true;true
3;true,true;companyceo(C, E).;false;false
3;true,false;cityhascompanyoffice(F, A), companyceo(A, G).;true;true
3;true,false,true;companyalsoknownas(A, H), economicsectorcompany(B, H).;false;false
3;true,false,false;acquired(D, I), economicsectorcompany(B, I).;false;false
4;;companyeconomicsector(A, B) :- acquired(C, A), economicsectorcompany(B, C).;false;true
4;false;acquired(D, A), companyceo(D, E).;true;true
4;false,true;acquired(F, D), companyalsoknownas(F, G).;true;true
4;false,true,true;acquired(A, H).;false;false
4;false,true,false;acquired(I, D), economicsectorcompany(B, I).;false;false
4;false,false;acquired(A, J), economicsectorcompany(B, J).;true;true
4;false,false,true;companyalsoknownas(A, K), acquired(J, L).;false;false
4;false,false,false;companyalsoknownas(A, M), economicsectorcompany(B, M).;false;false
5;;companyeconomicsector(A, B) :- companyalsoknownas(A, C), economicsectorcompany(B, C).;true;true
5;true;acquired(A, D), countryhascompanyoffice(E, D).;false;false
5;false;acquired(A, F), acquired(F, G).;true;true
5;false,true;economicsectorcompany(B, G).;false;true
5;false,true,false;countryhascompanyoffice(H, A), companyalsoknownas(A, I).;false;false
5;false,false;cityhascompanyoffice(J, A), countryhascompanyoffice(K, A).;true;true
5;false,false,true;countryhascompanyoffice(K, L), economicsectorcompany(B, L).;false;false
5;false,false,false;cityhascompanyoffice(M, A), acquired(N, A).;false;false
6;;companyeconomicsector(A, B) :- acquired(A, C), companyceo(C, D).;true;true
6;true;economicsectorcompany(B, C).;false;true
6;true,false;acquired(C, E).;false;false
6;false;companyalsoknownas(A, F), cityhascompanyoffice(G, F).;true;true
6;false,true;acquired(F, H), economicsectorcompany(B, H).;false;true
6;false,true,false;companyceo(A, I), acquired(F, J).;false;false
6;false,false;companyalsoknownas(A, K), acquired(K, L).;false;true
6;false,false,false;companyalsoknownas(A, M).;false;false
7;;companyeconomicsector(A, B) :- acquired(C, A), economicsectorcompany(B, C).;false;true
7;false;acquired(D, A), companyceo(D, E).;true;true
7;false,true;companyalsoknownas(D, F), acquired(G, F).;true;true
7;false,true,true;economicsectorcompany(B, G).;false;false
7;false,true,false;countryhascompanyoffice(H, D).;false;false
7;false,false;cityhascompanyoffice(I, A), acquired(J, A).;true;true
7;false,false,true;acquired(K, J).;false;false
7;false,false,false;companyceo(A, L).;false;false
8;;companyeconomicsector(A, B) :- cityhascompanyoffice(C, A).;true;true
8;true;cityhascompanyoffice(C, D), economicsectorcompany(B, D).;true;false
8;true,true;acquired(D, E), acquired(F, D).;false;true
8;true,true,false;companyalsoknownas(A, G), companyalsoknownas(D, G).;false;false
8;false;acquired(A, H), economicsectorcompany(B, H).;false;true
8;false,false;acquired(I, A), cityhascompanyoffice(J, I).;true;true
8;false,false,true;acquired(K, I), economicsectorcompany(B, K).;false;false
8;false,false,false;acquired(A, L).;false;false
9;;companyeconomicsector(A, B) :- cityhascompanyoffice(C, A).;true;true
9;true;cityhascompanyoffice(C, D), economicsectorcompany(B, D).;true;false
9;true,true;acquired(E, D), companyceo(D, F).;false;false
9;false;companyalsoknownas(A, G), cityhascompanyoffice(H, G).;true;true
9;false,true;economicsectorcompany(B, G).;false;true
9;false,true,false;acquired(I, G).;false;false
9;false,false;acquired(A, J), economicsectorcompany(B, J).;false;true
9;false,false,false;companyalsoknownas(A, K), economicsectorcompany(B, K).;false;false


WILL Produced-Tree #1
% FOR teamplayssport(A, B):
%   if ( teamalsoknownas(C, A) )
%   then if ( recursion_teamplayssport(C, B) )
%   | then return 0.5248156017661788;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else return 0.13592671287729013;  // std dev = 1.900, 18.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=5 */
%   else if ( teamplaysagainstteam(A, D) )
%   | then if ( recursion_teamplayssport(D, B) )
%   | | then return 0.7936328060672536;  // std dev = 1.368, 31.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=29 */
%   | | else if ( teamalsoknownas(A, E), recursion_teamplayssport(E, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.021851064900487806;  // std dev = 1.625, 25.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=3 */
%   | else if ( teamplaysinleague(A, F) )
%   | | then return 0.3875606998053947;  // std dev = 0.499, 17.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=9 */
%   | | else if ( athleteplaysforteam(G, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.274815601766179;  // std dev = 1.708, 12.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=5 */
WILL Produced-Tree #2
% FOR teamplayssport(A, B):
%   if ( teamplaysagainstteam(A, C), teamalsoknownas(A, D) )
%   then if ( recursion_teamplayssport(D, B) )
%   | then return 0.7323086016879354;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( recursion_teamplayssport(C, B), athleteplaysforteam(E, C) )
%   | | then return 0.10180041308889755;  // std dev = 0.776, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | else return 0.24407792784522614;  // std dev = 1.307, 7.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=3 */
%   else if ( teamalsoknownas(A, F), athleteledsportsteam(G, A) )
%   | then if ( athleteledsportsteam(G, H), recursion_teamplayssport(H, B) )
%   | | then return 0.8407840358908217;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else return -0.15921596410917827;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( teamalsoknownas(I, A) )
%   | | then if ( recursion_teamplayssport(I, B) )
%   | | | then return 0.448295606241962;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.09078403589082167;  // std dev = 1.500, 12.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=3 */
%   | | else if ( teamplaysagainstteam(A, J) )
%   | | | then return 0.34002660768059406;  // std dev = 2.984, 46.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=25 */
%   | | | else return 0.29400567241346126;  // std dev = 2.686, 29.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=14 */
WILL Produced-Tree #3
% FOR teamplayssport(A, B):
%   if ( teamalsoknownas(A, C), recursion_teamplayssport(C, B) )
%   then return 0.39361054459907174;  // std dev = 0.780, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   else if ( teamalsoknownas(A, D) )
%   | then if ( teamplaysagainstteam(A, E), recursion_teamplayssport(E, B) )
%   | | then if ( athleteplaysforteam(F, D) )
%   | | | then return 0.21188707264493079;  // std dev = 0.707, 2.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */
%   | | | else return 0.24892951153081774;  // std dev = 0.998, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else if ( teamplaysagainstteam(D, G), teamplaysagainstteam(A, G) )
%   | | | then return -0.1828867012351688;  // std dev = 0.017, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | | else return 0.4027887684489707;  // std dev = 2.009, 18.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=11 */
%   | else if ( teamalsoknownas(H, A), teamplaysinleague(H, I) )
%   | | then if ( recursion_teamplayssport(H, B) )
%   | | | then return 0.6956966796559563;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | | else return -0.17174798840273395;  // std dev = 5.27e-09, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else if ( athleteledsportsteam(J, A) )
%   | | | then return 0.27621269180293057;  // std dev = 1.975, 22.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=12 */
%   | | | else return 0.21935866456699027;  // std dev = 3.116, 45.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=21 */
WILL Produced-Tree #4
% FOR teamplayssport(A, B):
%   if ( teamalsoknownas(A, C), teamalsoknownas(C, D) )
%   then if ( recursion_teamplayssport(D, B) )
%   | then if ( teamplaysinleague(C, E) )
%   | | then return 0.28748166070816944;  // std dev = 2.148, 20.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=12 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( athleteledsportsteam(F, A), teamplaysinleague(A, G) )
%   | | then if ( teamplaysagainstteam(A, H), recursion_teamplayssport(H, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.1706454273229258;  // std dev = 0.034, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | else if ( teamalsoknownas(D, I), recursion_teamplayssport(I, B) )
%   | | | then return 0.6960143871908505;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | | else return 0.2030376928202562;  // std dev = 0.663, 2.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */
%   else return 0.1818192228707713;  // std dev = 3.903, 81.000 (wgt'ed) examples reached here.  /* #neg=42 #pos=39 */
WILL Produced-Tree #5
% FOR teamplayssport(A, B):
%   if ( teamalsoknownas(C, A), recursion_teamplayssport(C, B) )
%   then return 0.17035885606509601;  // std dev = 0.776, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   else if ( teamalsoknownas(D, A), teamplaysinleague(D, E) )
%   | then if ( teamalsoknownas(F, D), teamplaysagainstteam(F, G) )
%   | | then if ( teamalsoknownas(A, H) )
%   | | | then return 0.16758176365018637;  // std dev = 1.542, 11.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=5 */
%   | | | else return -0.17318536740469834;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else if ( teamalsoknownas(I, D), recursion_teamplayssport(I, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.17318536740469834;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else if ( teamalsoknownas(A, J), recursion_teamplayssport(J, B) )
%   | | then if ( teamplaysagainstteam(A, K), teamalsoknownas(J, L) )
%   | | | then return 0.39962361792385603;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | | else return 0.42522232227143597;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else if ( teamplaysagainstteam(A, M), recursion_teamplayssport(M, B) )
%   | | | then return 0.4902226614052353;  // std dev = 1.325, 27.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=25 */
%   | | | else return 0.009596549462182604;  // std dev = 3.256, 55.000 (wgt'ed) examples reached here.  /* #neg=38 #pos=17 */
WILL Produced-Tree #6
% FOR teamplayssport(A, B):
%   if ( teamplaysagainstteam(A, C), recursion_teamplayssport(C, B) )
%   then if ( teamalsoknownas(A, D), athleteplaysforteam(E, D) )
%   | then return 0.21323508502189925;  // std dev = 0.794, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | else return 0.3862824084375336;  // std dev = 1.236, 29.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=27 */
%   else if ( teamalsoknownas(A, F), teamalsoknownas(F, G) )
%   | then if ( recursion_teamplayssport(G, B) )
%   | | then return 0.22848075584460695;  // std dev = 1.911, 15.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=9 */
%   | | else if ( athleteplaysforteam(H, A), teamplaysagainstteam(A, I) )
%   | | | then return -0.2357150869001242;  // std dev = 0.153, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | | else return 0.31990646132272554;  // std dev = 0.633, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else if ( athleteledsportsteam(J, A), athleteplaysforteam(K, A) )
%   | | then if ( athleteplaysforteam(K, L), recursion_teamplayssport(L, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.23591112286453766;  // std dev = 0.175, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | | else if ( athleteledsportsteam(M, A), teamalsoknownas(N, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.019621351966092406;  // std dev = 2.639, 38.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=10 */
WILL Produced-Tree #7
% FOR teamplayssport(A, B):
%   if ( teamalsoknownas(A, C), teamplaysinleague(C, D) )
%   then if ( recursion_teamplayssport(C, B) )
%   | then return 0.062026592943204256;  // std dev = 0.722, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | else if ( teamalsoknownas(C, E) )
%   | | then return 0.1398010211745718;  // std dev = 2.223, 22.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=12 */
%   | | else return -0.09333834357344213;  // std dev = 0.716, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   else if ( teamplaysagainstteam(A, F), athleteledsportsteam(G, F) )
%   | then if ( teamalsoknownas(F, H), recursion_teamplayssport(H, B) )
%   | | then return 0.3460624943395009;  // std dev = 0.029, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else if ( teamplaysinleague(A, I), teamalsoknownas(F, J) )
%   | | | then return -0.16831036776981886;  // std dev = 0.560, 16.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=1 */
%   | | | else return 0.022272596771444175;  // std dev = 1.342, 12.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=4 */
%   | else if ( teamplaysagainstteam(A, K), teamalsoknownas(K, L) )
%   | | then return 0.36703346177253926;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else if ( teamplaysagainstteam(A, M) )
%   | | | then return 0.038327572315975444;  // std dev = 0.712, 6.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | | else return 0.05588387768002955;  // std dev = 2.231, 22.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=8 */
WILL Produced-Tree #8
% FOR teamplayssport(A, B):
%   if ( teamalsoknownas(C, A), recursion_teamplayssport(C, B) )
%   then return -0.0072304369757744125;  // std dev = 0.699, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   else if ( teamalsoknownas(D, A), teamplaysinleague(D, E) )
%   | then if ( teamplaysagainstteam(D, F), teamalsoknownas(G, F) )
%   | | then if ( recursion_teamplayssport(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.12346643576015735;  // std dev = 0.057, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else if ( athleteplaysforteam(H, D) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.06426247189763266;  // std dev = 1.472, 11.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=5 */
%   | else if ( athleteledsportsteam(I, A), teamalsoknownas(J, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( teamplaysinleague(A, K) )
%   | | | then return 0.09805831330246695;  // std dev = 3.048, 69.000 (wgt'ed) examples reached here.  /* #neg=30 #pos=39 */
%   | | | else return 0.026912030500945282;  // std dev = 1.737, 17.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=7 */
WILL Produced-Tree #9
% FOR teamplayssport(A, B):
%   if ( athleteledsportsteam(C, A) )
%   then if ( athleteledsportsteam(C, D), recursion_teamplayssport(D, B) )
%   | then if ( teamalsoknownas(D, E), teamalsoknownas(F, D) )
%   | | then return 0.45833701098922114;  // std dev = 0.103, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else if ( teamplaysagainstteam(A, G), teamplaysagainstteam(D, G) )
%   | | | then return 0.27657166718685516;  // std dev = 0.222, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.21196635080630896;  // std dev = 0.342, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
%   else if ( teamalsoknownas(A, H), recursion_teamplayssport(H, B) )
%   | then return -0.02445177575083272;  // std dev = 0.676, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else if ( teamalsoknownas(I, A), athleteledsportsteam(J, I) )
%   | | then if ( teamalsoknownas(K, I), recursion_teamplayssport(K, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.11427471201955737;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | else if ( teamalsoknownas(A, L) )
%   | | | then return 0.0864331115830434;  // std dev = 2.144, 19.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=11 */
%   | | | else return 0.04912057687457532;  // std dev = 2.731, 46.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=21 */
WILL Produced-Tree #10
% FOR teamplayssport(A, B):
%   if ( athleteledsportsteam(C, A) )
%   then if ( athleteledsportsteam(C, D), recursion_teamplayssport(D, B) )
%   | then if ( teamalsoknownas(E, D), teamplaysinleague(D, F) )
%   | | then return 0.28909289197858423;  // std dev = 0.155, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return 0.2251680537343616;  // std dev = 0.199, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else return -0.17993044381700754;  // std dev = 0.304, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
%   else if ( teamplaysagainstteam(A, G), athleteledsportsteam(H, G) )
%   | then if ( recursion_teamplayssport(G, B) )
%   | | then return 0.24929556848565496;  // std dev = 0.016, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else if ( teamalsoknownas(I, G) )
%   | | | then return -0.2557044925029845;  // std dev = 0.382, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | | else return -0.08774533267651896;  // std dev = 1.376, 8.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | else if ( teamalsoknownas(A, J), recursion_teamplayssport(J, B) )
%   | | then return -0.14880350173749768;  // std dev = 0.596, 2.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */
%   | | else if ( teamplaysagainstteam(A, K), recursion_teamplayssport(K, B) )
%   | | | then return 0.29059940748913066;  // std dev = 0.049, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.054943484279993945;  // std dev = 2.953, 40.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=18 */


Results
   AUC ROC   = 0.835324
   AUC PR    = 0.858098
   CLL	      = -0.504557
   Precision = 0.847059 at threshold = 0.5
   Recall    = 0.549618
   F1        = 0.666667


Total learning time: 6.277 seconds
Total inference time: 3.579 seconds
AUC ROC: 0.835324


Results scoring model
   AUC ROC   = 0.927198
   AUC PR    = 0.936031
   CLL	      = -0.413231
   Precision = 0.886364 at threshold = 0.5
   Recall    = 0.735849
   F1        = 0.804124


Total scoring time: 2.984 seconds
Parameter learned model CLL: -0.413231


Structure after Parameter Learning
[['teamplayssport(A, B)', {'': 'teamalsoknownas(C, A)', 'true': 'recursion_teamplayssport(C, B)', 'false': 'teamplaysagainstteam(A, D)', 'false,true': 'recursion_teamplayssport(D, B)', 'false,true,false': 'teamalsoknownas(A, E), recursion_teamplayssport(E, B)', 'false,false': 'teamplaysinleague(A, F)', 'false,false,false': 'athleteplaysforteam(G, A)'}, {'true,true': [0.816, 1, 2], 'true,false': [1.9, 13, 5], 'false,true,true': [1.368, 2, 29], 'false,true,false,true': [0.0, 0, 0], 'false,true,false,false': [1.625, 22, 3], 'false,false,true': [0.499, 8, 9], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.708, 7, 5]}], ['teamplayssport(A, B)', {'': 'teamplaysagainstteam(A, C), teamalsoknownas(A, D)', 'true': 'recursion_teamplayssport(D, B)', 'true,false': 'recursion_teamplayssport(C, B), athleteplaysforteam(E, C)', 'false': 'teamalsoknownas(A, F), athleteledsportsteam(G, A)', 'false,true': 'athleteledsportsteam(G, H), recursion_teamplayssport(H, B)', 'false,false': 'teamalsoknownas(I, A)', 'false,false,true': 'recursion_teamplayssport(I, B)', 'false,false,false': 'teamplaysagainstteam(A, J)'}, {'true,true': [0.0, 0, 4], 'true,false,true': [0.776, 2, 1], 'true,false,false': [1.307, 4, 3], 'false,true,true': [0.0, 0, 1], 'false,true,false': [0.0, 1, 0], 'false,false,true,true': [0.816, 1, 2], 'false,false,true,false': [1.5, 9, 3], 'false,false,false,true': [2.984, 21, 25], 'false,false,false,false': [2.686, 15, 14]}], ['teamplayssport(A, B)', {'': 'teamalsoknownas(A, C), recursion_teamplayssport(C, B)', 'false': 'teamalsoknownas(A, D)', 'false,true': 'teamplaysagainstteam(A, E), recursion_teamplayssport(E, B)', 'false,true,true': 'athleteplaysforteam(F, D)', 'false,true,false': 'teamplaysagainstteam(D, G), teamplaysagainstteam(A, G)', 'false,false': 'teamalsoknownas(H, A), teamplaysinleague(H, I)', 'false,false,true': 'recursion_teamplayssport(H, B)', 'false,false,false': 'athleteledsportsteam(J, A)'}, {'true': [0.78, 1, 4], 'false,true,true,true': [0.707, 1, 1], 'false,true,true,false': [0.998, 2, 2], 'false,true,false,true': [0.017, 2, 0], 'false,true,false,false': [2.009, 7, 11], 'false,false,true,true': [0.0, 0, 2], 'false,false,true,false': [5.27e-09, 6, 0], 'false,false,false,true': [1.975, 10, 12], 'false,false,false,false': [3.116, 24, 21]}], ['teamplayssport(A, B)', {'': 'teamalsoknownas(A, C), teamalsoknownas(C, D)', 'true': 'recursion_teamplayssport(D, B)', 'true,true': 'teamplaysinleague(C, E)', 'true,false': 'athleteledsportsteam(F, A), teamplaysinleague(A, G)', 'true,false,true': 'teamplaysagainstteam(A, H), recursion_teamplayssport(H, B)', 'true,false,false': 'teamalsoknownas(D, I), recursion_teamplayssport(I, B)'}, {'true,true,true': [2.148, 8, 12], 'true,true,false': [0.0, 0, 0], 'true,false,true,true': [0.0, 0, 0], 'true,false,true,false': [0.034, 2, 0], 'true,false,false,true': [0.0, 0, 1], 'true,false,false,false': [0.663, 1, 1], 'false': [3.903, 42, 39]}], ['teamplayssport(A, B)', {'': 'teamalsoknownas(C, A), recursion_teamplayssport(C, B)', 'false': 'teamalsoknownas(D, A), teamplaysinleague(D, E)', 'false,true': 'teamalsoknownas(F, D), teamplaysagainstteam(F, G)', 'false,true,true': 'teamalsoknownas(A, H)', 'false,true,false': 'teamalsoknownas(I, D), recursion_teamplayssport(I, B)', 'false,false': 'teamalsoknownas(A, J), recursion_teamplayssport(J, B)', 'false,false,true': 'teamplaysagainstteam(A, K), teamalsoknownas(J, L)', 'false,false,false': 'teamplaysagainstteam(A, M), recursion_teamplayssport(M, B)'}, {'true': [0.776, 1, 2], 'false,true,true,true': [1.542, 6, 5], 'false,true,true,false': [0.0, 4, 0], 'false,true,false,true': [0.0, 0, 0], 'false,true,false,false': [0.0, 2, 0], 'false,false,true,true': [0.0, 0, 2], 'false,false,true,false': [0.0, 0, 2], 'false,false,false,true': [1.325, 2, 25], 'false,false,false,false': [3.256, 38, 17]}], ['teamplayssport(A, B)', {'': 'teamplaysagainstteam(A, C), recursion_teamplayssport(C, B)', 'true': 'teamalsoknownas(A, D), athleteplaysforteam(E, D)', 'false': 'teamalsoknownas(A, F), teamalsoknownas(F, G)', 'false,true': 'recursion_teamplayssport(G, B)', 'false,true,false': 'athleteplaysforteam(H, A), teamplaysagainstteam(A, I)', 'false,false': 'athleteledsportsteam(J, A), athleteplaysforteam(K, A)', 'false,false,true': 'athleteplaysforteam(K, L), recursion_teamplayssport(L, B)', 'false,false,false': 'athleteledsportsteam(M, A), teamalsoknownas(N, A)'}, {'true,true': [0.794, 1, 5], 'true,false': [1.236, 2, 27], 'false,true,true': [1.911, 6, 9], 'false,true,false,true': [0.153, 2, 0], 'false,true,false,false': [0.633, 1, 2], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [0.175, 13, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [2.639, 28, 10]}], ['teamplayssport(A, B)', {'': 'teamalsoknownas(A, C), teamplaysinleague(C, D)', 'true': 'recursion_teamplayssport(C, B)', 'true,false': 'teamalsoknownas(C, E)', 'false': 'teamplaysagainstteam(A, F), athleteledsportsteam(G, F)', 'false,true': 'teamalsoknownas(F, H), recursion_teamplayssport(H, B)', 'false,true,false': 'teamplaysinleague(A, I), teamalsoknownas(F, J)', 'false,false': 'teamplaysagainstteam(A, K), teamalsoknownas(K, L)', 'false,false,false': 'teamplaysagainstteam(A, M)'}, {'true,true': [0.722, 1, 3], 'true,false,true': [2.223, 10, 12], 'true,false,false': [0.716, 2, 1], 'false,true,true': [0.029, 0, 20], 'false,true,false,true': [0.56, 15, 1], 'false,true,false,false': [1.342, 8, 4], 'false,false,true': [0.0, 0, 1], 'false,false,false,true': [0.712, 3, 3], 'false,false,false,false': [2.231, 14, 8]}], ['teamplayssport(A, B)', {'': 'teamalsoknownas(C, A), recursion_teamplayssport(C, B)', 'false': 'teamalsoknownas(D, A), teamplaysinleague(D, E)', 'false,true': 'teamplaysagainstteam(D, F), teamalsoknownas(G, F)', 'false,true,true': 'recursion_teamplayssport(G, B)', 'false,true,false': 'athleteplaysforteam(H, D)', 'false,false': 'athleteledsportsteam(I, A), teamalsoknownas(J, A)', 'false,false,false': 'teamplaysinleague(A, K)'}, {'true': [0.699, 1, 2], 'false,true,true,true': [0.0, 0, 0], 'false,true,true,false': [0.057, 6, 0], 'false,true,false,true': [0.0, 0, 0], 'false,true,false,false': [1.472, 6, 5], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [3.048, 30, 39], 'false,false,false,false': [1.737, 10, 7]}], ['teamplayssport(A, B)', {'': 'athleteledsportsteam(C, A)', 'true': 'athleteledsportsteam(C, D), recursion_teamplayssport(D, B)', 'true,true': 'teamalsoknownas(D, E), teamalsoknownas(F, D)', 'true,true,false': 'teamplaysagainstteam(A, G), teamplaysagainstteam(D, G)', 'false': 'teamalsoknownas(A, H), recursion_teamplayssport(H, B)', 'false,false': 'teamalsoknownas(I, A), athleteledsportsteam(J, I)', 'false,false,true': 'teamalsoknownas(K, I), recursion_teamplayssport(K, B)', 'false,false,false': 'teamalsoknownas(A, L)'}, {'true,true,true': [0.103, 0, 2], 'true,true,false,true': [0.222, 0, 17], 'true,true,false,false': [0.0, 0, 0], 'true,false': [0.342, 17, 0], 'false,true': [0.676, 1, 2], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [0.0, 2, 0], 'false,false,false,true': [2.144, 8, 11], 'false,false,false,false': [2.731, 25, 21]}], ['teamplayssport(A, B)', {'': 'athleteledsportsteam(C, A)', 'true': 'athleteledsportsteam(C, D), recursion_teamplayssport(D, B)', 'true,true': 'teamalsoknownas(E, D), teamplaysinleague(D, F)', 'false': 'teamplaysagainstteam(A, G), athleteledsportsteam(H, G)', 'false,true': 'recursion_teamplayssport(G, B)', 'false,true,false': 'teamalsoknownas(I, G)', 'false,false': 'teamalsoknownas(A, J), recursion_teamplayssport(J, B)', 'false,false,false': 'teamplaysagainstteam(A, K), recursion_teamplayssport(K, B)'}, {'true,true,true': [0.155, 0, 4], 'true,true,false': [0.199, 0, 15], 'true,false': [0.304, 17, 0], 'false,true,true': [0.016, 0, 10], 'false,true,false,true': [0.382, 7, 0], 'false,true,false,false': [1.376, 6, 2], 'false,false,true': [0.596, 1, 1], 'false,false,false,true': [0.049, 0, 3], 'false,false,false,false': [2.953, 22, 18]}]]
[{'': [0.22222222222222232, 0.2483044982698964], 'false': [0.24489795918367507, 0.2497027348394764], 'false,false': [0.24913494809688577, 0.24305555555555536], 'false,true': [0.06035379812695236, 0.10559999999999986], 'false,false,false': [nan, 0.24305555555555536], 'true': [0.22222222222222224, 0.20061728395061712], 'false,true,false': [nan, 0.10560000000000003]}, {'': [0.22563684087150843, 0.21962959087204434], 'true': [0.0, 0.23535740601135022], 'true,false': [0.20073144124947073, 0.24412423783344164], 'false': [0.25000000000000006, 0.21891025977116282], 'false,true': [0.0, 0.0], 'false,false': [0.2148947681140347, 0.21544959781638653], 'false,false,false': [0.19358270535545685, 0.24883601853457954], 'false,false,true': [0.2222222222222222, 0.18750000000000014]}, {'': [0.12177094071995931, 0.21248375854611273], 'false': [0.23867344171549137, 0.20072999401100233], 'false,true': [0.24978567279574726, 0.23266603505300978], 'false,true,true': [0.24999999999999997, 0.24922112843408264], 'false,true,false': [0.0001386649879593499, 0.22420083392570841], 'false,false': [0.14108629727689714, 0.20388194402437845], 'false,false,false': [0.17738115207551566, 0.2157765081118773], 'false,false,true': [0.0, 4.625929269271485e-18]}, {'': [0.22545812864886033, 0.18804458237863417], 'true': [0.23067539610763382, 0.18993945048253674], 'true,true': [0.23067539610763382, nan], 'true,false': [0.0005730138809334588, 0.20040240352477431], 'true,false,false': [0.0, 0.21959493155630866], 'true,false,true': [nan, 0.0005730138809334588]}, {'': [0.2009616038203954, 0.19269482909248392], 'false': [0.16646085419616952, 0.19500847252741282], 'false,false': [0.0001638234160686869, 0.20173098679056228], 'false,false,false': [0.06504414158435191, 0.19277034553923836], 'false,true': [0.18130881606259075, 0.0], 'false,true,true': [0.21627336460217172, 0.0], 'false,false,true': [0.0, 0.0], 'false,true,false': [nan, 0.0]}, {'': [0.06590163560311166, 0.18321502095619552], 'false': [0.22551165972352272, 0.14601233602296884], 'false,true': [0.2434439735918446, 0.15887874203505287], 'false,true,false': [0.01167349372472748, 0.1335294523021139], 'false,false': [0.0023604747906985036, 0.18323175763768312], 'false,false,false': [nan, 0.18323175763768312], 'true': [0.10503121443618275, 0.05267236761933454], 'false,false,true': [nan, 0.0023604747906985036]}, {'': [0.2112780819882763, 0.13180127156526822], 'true': [0.13023037465325116, 0.22390367221434299], 'true,false': [0.2246256595181, 0.1707776108657633], 'false': [0.0947773053082716, 0.1924956895843868], 'false,false': [0.0, 0.19595090298551568], 'false,false,false': [0.08455255688445101, 0.2262662221344087], 'false,true': [4.203495248364941e-05, 0.08443515307671999], 'false,true,false': [0.01961993283777078, 0.15010009451531722]}, {'': [0.1629587097567953, 0.14355513067430395], 'false': [0.1356531529903176, 0.14389675414544792], 'false,false': [nan, 0.14389675414544786], 'false,false,false': [0.1346180182164898, 0.17749629939899997], 'false,true': [0.0005390104779999424, 0.19691337284812968], 'false,true,false': [nan, 0.19691337284812968], 'false,true,true': [nan, 0.0005390104779999424]}, {'': [0.07078234967953576, 0.18010392286908994], 'false': [0.15248038814730946, 0.18107145362527235], 'false,false': [0.0, 0.18573598154682688], 'false,false,false': [0.2419127100387957, 0.16212559206424862], 'true': [0.006260937081738442, 0.006870318592966999], 'true,true': [0.005334235389573949, 0.0028922092094292046], 'true,true,false': [0.002892209209429165, nan], 'false,false,true': [nan, 0.0]}, {'': [0.0483565568934985, 0.1795125282615285], 'false': [0.12718358241935646, 0.20723090038990558], 'false,false': [0.1777237887516101, 0.20644853316331802], 'false,false,false': [0.0008080666049157248, 0.21799712298239235], 'false,true': [2.6989233483842857e-05, 0.1429245216812403], 'false,true,false': [0.0208574627865884, 0.23656840117490832], 'true': [0.004034185185495616, 0.005432239846646634], 'true,true': [0.006033559408078398, 0.0026407271588665257]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
1;;teamplayssport(A, B) :- teamplaysagainstteam(A, C), teamalsoknownas(A, D).;true;true
1;true;recursion_teamplayssport(D, B).;true;true
1;false;teamalsoknownas(A, F), athleteledsportsteam(G, A).;true;true
1;false,true;athleteledsportsteam(G, H), recursion_teamplayssport(H, B).;true;true
2;;teamplayssport(A, B) :- teamalsoknownas(A, C), recursion_teamplayssport(C, B).;true;true
2;false;teamalsoknownas(A, D).;true;true
2;false,true;teamplaysagainstteam(A, E), recursion_teamplayssport(E, B).;true;true
2;false,true,false;teamplaysagainstteam(D, G), teamplaysagainstteam(A, G).;true;true
2;false,false;teamalsoknownas(H, A), teamplaysinleague(H, I).;true;true
2;false,false,true;recursion_teamplayssport(H, B).;true;true
3;;teamplayssport(A, B) :- teamalsoknownas(A, C), teamalsoknownas(C, D).;true;true
3;true;recursion_teamplayssport(D, B).;true;true
3;true,false;athleteledsportsteam(F, A), teamplaysinleague(A, G).;true;true
3;true,false,false;teamalsoknownas(D, I), recursion_teamplayssport(I, B).;true;true
4;;teamplayssport(A, B) :- teamalsoknownas(C, A), recursion_teamplayssport(C, B).;true;true
4;false;teamalsoknownas(D, A), teamplaysinleague(D, E).;true;true
4;false,true;teamalsoknownas(F, D), teamplaysagainstteam(F, G).;true;true
4;false,true,true;teamalsoknownas(A, H).;true;true
4;false,false;teamalsoknownas(A, J), recursion_teamplayssport(J, B).;true;true
4;false,false,true;teamplaysagainstteam(A, K), teamalsoknownas(J, L).;true;true
5;;teamplayssport(A, B) :- teamplaysagainstteam(A, C), recursion_teamplayssport(C, B).;true;true
5;false;teamalsoknownas(A, F), teamalsoknownas(F, G).;true;true
5;false,false;athleteledsportsteam(J, A), athleteplaysforteam(K, A).;true;true
6;;teamplayssport(A, B) :- teamalsoknownas(A, C), teamplaysinleague(C, D).;true;true
6;false;teamplaysagainstteam(A, F), athleteledsportsteam(G, F).;true;true
6;false,true;teamalsoknownas(F, H), recursion_teamplayssport(H, B).;true;true
6;false,false;teamplaysagainstteam(A, K), teamalsoknownas(K, L).;true;true
7;;teamplayssport(A, B) :- teamalsoknownas(C, A), recursion_teamplayssport(C, B).;true;true
7;false;teamalsoknownas(D, A), teamplaysinleague(D, E).;true;true
7;false,true;teamplaysagainstteam(D, F), teamalsoknownas(G, F).;true;true
8;;teamplayssport(A, B) :- athleteledsportsteam(C, A).;true;true
8;false;teamalsoknownas(A, H), recursion_teamplayssport(H, B).;true;true
8;false,false;teamalsoknownas(I, A), athleteledsportsteam(J, I).;true;true
9;;teamplayssport(A, B) :- athleteledsportsteam(C, A).;true;true
9;false;teamplaysagainstteam(A, G), athleteledsportsteam(H, G).;true;true
9;false,true;recursion_teamplayssport(G, B).;true;true
9;false,false;teamalsoknownas(A, J), recursion_teamplayssport(J, B).;true;true
9;false,false,false;teamplaysagainstteam(A, K), recursion_teamplayssport(K, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR teamplayssport(A, B):
%   if ( teamplaysagainstteam(C, A), recursion_teamplayssport(C, B) )
%   then if ( teamalsoknownas(D, C), teamalsoknownas(A, D) )
%   | then return 0.5248156017661788;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else return 0.8581489350995122;  // std dev = 0.000, 31.000 (wgt'ed) examples reached here.  /* #pos=31 */
%   else if ( athleteplayssport(E, B), athleteledsportsteam(E, F) )
%   | then if ( teamplaysagainstteam(A, G), teamplaysagainstteam(F, G) )
%   | | then if ( teamalsoknownas(F, H), teamalsoknownas(H, F) )
%   | | | then return 0.19148226843284552;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | else return -0.1418510649004878;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else if ( teamplaysinleague(A, I), teamplaysinleague(F, I) )
%   | | | then return 0.7470378239884012;  // std dev = 0.943, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | | else return 0.43709630352056494;  // std dev = 2.152, 19.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=11 */
%   | else return -0.1418510649004878;  // std dev = 0.000, 34.000 (wgt'ed) examples reached here.  /* #neg=34 */
WILL Produced-Tree #2
% FOR teamplayssport(A, B):
%   if ( teamplaysagainstteam(A, C), teamalsoknownas(A, D) )
%   then if ( recursion_teamplayssport(D, B) )
%   | then return 0.7505511758931249;  // std dev = 0.062, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( athleteplayssport(E, B), athleteledsportsteam(E, F) )
%   | | then if ( athleteplaysforteam(E, F), teamalsoknownas(F, G) )
%   | | | then return 0.05221580112235172;  // std dev = 0.773, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | else return 0.7706452835382626;  // std dev = 0.063, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return -0.12544463852839138;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else if ( teamalsoknownas(A, H), athleteledsportsteam(I, A) )
%   | then if ( athleteledsportsteam(I, J), recursion_teamplayssport(J, B) )
%   | | then return 0.7413433124639606;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else return -0.20376878079808336;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( teamplaysagainstteam(K, A), recursion_teamplayssport(K, B) )
%   | | then return 0.7194734122109545;  // std dev = 0.000, 27.000 (wgt'ed) examples reached here.  /* #pos=27 */
%   | | else if ( athleteplayssport(L, B), athleteledsportsteam(L, M) )
%   | | | then return 0.3307559111948468;  // std dev = 2.688, 32.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=17 */
%   | | | else return -0.12544463852839138;  // std dev = 7.45e-09, 31.000 (wgt'ed) examples reached here.  /* #neg=31 */
WILL Produced-Tree #3
% FOR teamplayssport(A, B):
%   if ( teamalsoknownas(A, C), recursion_teamplayssport(C, B) )
%   then return 0.44790079798818283;  // std dev = 0.632, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   else if ( teamalsoknownas(A, D) )
%   | then if ( teamplaysagainstteam(A, E), recursion_teamplayssport(E, B) )
%   | | then return 0.22708613512982204;  // std dev = 1.001, 6.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | else if ( teamplaysagainstteam(D, F), teamplaysagainstteam(A, F) )
%   | | | then return -0.11231637819360639;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | | else return 0.34360134240896695;  // std dev = 1.812, 18.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=11 */
%   | else if ( teamalsoknownas(G, A), teamplaysinleague(G, H) )
%   | | then if ( recursion_teamplayssport(G, B) )
%   | | | then return 0.5553664367462845;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | | else return -0.12133641872811564;  // std dev = 0.049, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else if ( teamplaysagainstteam(I, A), recursion_teamplayssport(I, B) )
%   | | | then return 0.5553664367462846;  // std dev = 0.000, 24.000 (wgt'ed) examples reached here.  /* #pos=24 */
%   | | | else return 0.03285574971535231;  // std dev = 2.326, 43.000 (wgt'ed) examples reached here.  /* #neg=34 #pos=9 */
WILL Produced-Tree #4
% FOR teamplayssport(A, B):
%   if ( teamalsoknownas(A, C), teamalsoknownas(C, D) )
%   then if ( recursion_teamplayssport(D, B) )
%   | then if ( athleteplayssport(E, B), athleteledsportsteam(E, F) )
%   | | then if ( athleteplaysforteam(E, F), teamalsoknownas(F, G) )
%   | | | then return 0.2072540134605708;  // std dev = 1.309, 9.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=5 */
%   | | | else return 0.4409969797043093;  // std dev = 0.847, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | | else return -0.15602672460626568;  // std dev = 0.011, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( athleteledsportsteam(H, A), teamplaysinleague(A, I) )
%   | | then return -0.16449638449882997;  // std dev = 0.089, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | else if ( teamalsoknownas(D, J), recursion_teamplayssport(J, B) )
%   | | | then return 0.6656434977640726;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | | else return 0.2571237896852444;  // std dev = 0.578, 2.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */
%   else if ( athleteplayssport(K, B) )
%   | then if ( teamplaysagainstteam(A, L), recursion_teamplayssport(L, B) )
%   | | then return 0.4117024705974643;  // std dev = 0.127, 30.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=29 */
%   | | else return 0.061857879965232045;  // std dev = 0.376, 38.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=10 */
%   | else return -0.11341134306338294;  // std dev = 0.019, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
WILL Produced-Tree #5
% FOR teamplayssport(A, B):
%   if ( teamalsoknownas(C, A), recursion_teamplayssport(C, B) )
%   then return 0.16636296860446995;  // std dev = 0.381, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   else if ( teamalsoknownas(D, A), teamplaysinleague(D, E) )
%   | then if ( teamalsoknownas(F, D), teamplaysagainstteam(F, G) )
%   | | then if ( teamalsoknownas(A, H) )
%   | | | then return 0.10699134554816109;  // std dev = 1.228, 11.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=5 */
%   | | | else return -0.1155861987707653;  // std dev = 0.051, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return -0.10652161294708778;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else if ( teamalsoknownas(A, I), recursion_teamplayssport(I, B) )
%   | | then if ( teamplaysagainstteam(A, J), teamalsoknownas(I, K) )
%   | | | then return 0.46741584791703483;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | | else return 0.33887684652724326;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else if ( athleteplayssport(L, B), athleteledsportsteam(L, M) )
%   | | | then return 0.2559065107797198;  // std dev = 2.561, 55.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=40 */
%   | | | else return -0.08115531951012306;  // std dev = 0.595, 27.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=2 */
WILL Produced-Tree #6
% FOR teamplayssport(A, B):
%   if ( teamplaysagainstteam(A, C), recursion_teamplayssport(C, B) )
%   then if ( teamplaysagainstteam(D, A), recursion_teamplayssport(D, B) )
%   | then if ( athleteplaysforteam(E, D), athleteledsportsteam(E, F) )
%   | | then return 0.2916998502500056;  // std dev = 0.049, 29.000 (wgt'ed) examples reached here.  /* #pos=29 */
%   | | else return 0.06681998037605401;  // std dev = 0.493, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else return -0.04900027822198911;  // std dev = 0.586, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   else if ( teamalsoknownas(A, G), teamalsoknownas(G, H) )
%   | then if ( athleteplayssport(I, B), athleteledsportsteam(I, J) )
%   | | then if ( teamalsoknownas(K, A), teamplaysinleague(A, L) )
%   | | | then return 0.047024787893798194;  // std dev = 1.068, 6.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | | else return 0.3586887778971014;  // std dev = 0.884, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | else return -0.1441739693069055;  // std dev = 0.092, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else if ( athleteledsportsteam(M, A), athleteplaysforteam(N, A) )
%   | | then return -0.1201642824299212;  // std dev = 0.043, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | | else if ( athleteplayssport(P, B), athleteledsportsteam(P, Q) )
%   | | | then return 0.1620718395294669;  // std dev = 2.034, 20.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=10 */
%   | | | else return -0.10450869551576655;  // std dev = 0.041, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
WILL Produced-Tree #7
% FOR teamplayssport(A, B):
%   if ( teamalsoknownas(A, C), teamplaysinleague(C, D) )
%   then if ( athleteplayssport(E, B), athleteledsportsteam(E, F) )
%   | then if ( teamalsoknownas(G, A), teamplaysinleague(A, H) )
%   | | then if ( athleteplaysforteam(E, F), teamalsoknownas(F, I) )
%   | | | then return -0.10358214136133026;  // std dev = 0.803, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | else return 0.14260507451633983;  // std dev = 0.766, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else if ( teamplaysagainstteam(J, A) )
%   | | | then return 0.14906899982770658;  // std dev = 1.098, 11.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=8 */
%   | | | else return 0.3733509726955073;  // std dev = 0.057, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else return -0.12134383859731117;  // std dev = 0.090, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   else if ( teamplaysagainstteam(A, K), athleteledsportsteam(L, K) )
%   | then return 0.07463055785241023;  // std dev = 0.214, 48.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=25 */
%   | else if ( teamplaysagainstteam(A, M), teamalsoknownas(M, N) )
%   | | then return 0.43697785923004384;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else if ( athleteplayssport(P, B), athleteledsportsteam(P, Q) )
%   | | | then return 0.1606720740782498;  // std dev = 1.741, 16.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=10 */
%   | | | else return -0.06748123432577338;  // std dev = 0.338, 12.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=1 */
WILL Produced-Tree #8
% FOR teamplayssport(A, B):
%   if ( teamalsoknownas(C, A), recursion_teamplayssport(C, B) )
%   then return 0.10099280588801357;  // std dev = 0.287, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   else if ( teamalsoknownas(D, A), teamplaysinleague(D, E) )
%   | then if ( teamplaysagainstteam(D, F), teamalsoknownas(G, F) )
%   | | then return -0.10460386827173397;  // std dev = 0.078, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else if ( teamplaysagainstteam(A, H) )
%   | | | then return -0.07691538241402741;  // std dev = 0.430, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | else return 0.12669623155046167;  // std dev = 0.971, 8.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=4 */
%   | else if ( teamplaysagainstteam(I, A), recursion_teamplayssport(I, B) )
%   | | then if ( athleteplayssport(J, B), athleteledsportsteam(J, K) )
%   | | | then return 0.2172084378241881;  // std dev = 0.209, 27.000 (wgt'ed) examples reached here.  /* #pos=27 */
%   | | | else return 0.264627226712484;  // std dev = 0.004, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( teamplaysagainstteam(L, A) )
%   | | | then return -0.10308028992608137;  // std dev = 1.350, 30.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=4 */
%   | | | else return 0.0979277099335511;  // std dev = 1.900, 26.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=12 */
WILL Produced-Tree #9
% FOR teamplayssport(A, B):
%   if ( athleteledsportsteam(C, A) )
%   then if ( teamplaysagainstteam(D, A), teamalsoknownas(D, E) )
%   | then if ( recursion_teamplayssport(D, B), athleteledsportsteam(F, E) )
%   | | then if ( teamalsoknownas(G, D) )
%   | | | then return 0.21267569438043094;  // std dev = 0.148, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return 0.17242373721240203;  // std dev = 0.032, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else if ( teamplaysagainstteam(D, E) )
%   | | | then return -0.09400641681930083;  // std dev = 0.113, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | | else return 0.045269376920500815;  // std dev = 0.443, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else return -0.07026262254096004;  // std dev = 0.416, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   else if ( teamalsoknownas(A, H), recursion_teamplayssport(H, B) )
%   | then return 0.09854727491874904;  // std dev = 0.298, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else if ( teamalsoknownas(I, A), athleteledsportsteam(J, I) )
%   | | then return -0.12275825347889951;  // std dev = 0.053, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | else if ( athleteplayssport(K, B), athleteledsportsteam(K, L) )
%   | | | then return 0.11638822156031414;  // std dev = 2.471, 45.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=31 */
%   | | | else return -0.08414173142371754;  // std dev = 0.317, 20.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=1 */
WILL Produced-Tree #10
% FOR teamplayssport(A, B):
%   if ( athleteledsportsteam(C, A) )
%   then if ( teamplaysagainstteam(A, D), recursion_teamplayssport(D, B) )
%   | then if ( teamalsoknownas(E, A), teamalsoknownas(E, D) )
%   | | then return 0.00779830905444695;  // std dev = 0.402, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return 0.16804763423742108;  // std dev = 0.045, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | else return -0.07744776421695407;  // std dev = 0.106, 17.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=1 */
%   else if ( teamplaysagainstteam(A, F), athleteledsportsteam(G, F) )
%   | then if ( recursion_teamplayssport(F, B) )
%   | | then return 0.1701643892346713;  // std dev = 0.026, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else if ( teamplaysagainstteam(H, A), teamalsoknownas(H, I) )
%   | | | then return -0.17702403977891584;  // std dev = 0.318, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | | | else return 0.15896215686052514;  // std dev = 0.838, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | else if ( teamalsoknownas(A, J), recursion_teamplayssport(J, B) )
%   | | then return 0.022457761382469202;  // std dev = 0.255, 2.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */
%   | | else if ( teamplaysagainstteam(A, K), recursion_teamplayssport(K, B) )
%   | | | then return 0.2059919707829989;  // std dev = 0.153, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.03185634171470168;  // std dev = 2.250, 40.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=18 */


Results
   AUC ROC   = 0.927568
   AUC PR    = 0.874125
   CLL	      = -0.355394
   Precision = 0.889831 at threshold = 0.5
   Recall    = 0.801527
   F1        = 0.843373


Total learning time: 94.42699999999999 seconds
Total inference time: 7.512 seconds
AUC ROC: 0.927568


Results scoring model
   AUC ROC   = 0.984514
   AUC PR    = 0.984749
   CLL	      = -0.264489
   Precision = 0.959184 at threshold = 0.5
   Recall    = 0.886792
   F1        = 0.921569


Total scoring time: 5.089 seconds
Refined model CLL: -0.264489


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.927568
   AUC PR    = 0.874125
   CLL	      = -0.355394
   Precision = 0.889831 at threshold = 0.5
   Recall    = 0.801527
   F1        = 0.843373


Total learning time: 108.77699999999999 seconds
Total inference time: 7.512 seconds
AUC ROC: 0.927568
Total revision time: 108.77699999999999
Best scored revision CLL: -0.264489


Dataset: 10_nell_finances_nell_sports, Fold: 3, Type: Transfer (trRDN-B), Time: 21:14:21
{'AUC ROC': 0.927568, 'AUC PR': 0.874125, 'CLL': -0.355394, 'Precision': [0.889831, 0.5], 'Recall': 0.801527, 'F1': 0.843373, 'Learning time': 108.77699999999999, 'Inference time': 7.512, 'parameter_0.2': {'AUC ROC': 0.835324, 'AUC PR': 0.858098, 'CLL': -0.504557, 'Precision': [0.847059, 0.5], 'Recall': 0.549618, 'F1': 0.666667, 'Learning time': 6.277, 'Inference time': 3.579}}


Amount of data: 0.4
******************************************
Performing Parameter Learning
******************************************
Refine
0;;companyeconomicsector(A, B) :- acquired(C, A).;true;true
0;true;economicsectorcompany(B, C).;false;false
0;false;companyalsoknownas(A, D).;true;true
0;false,true;economicsectorcompany(B, D).;false;true
0;false,true,false;acquired(A, E), economicsectorcompany(B, E).;false;false
0;false,false;companyceo(A, F).;true;true
0;false,false,true;bankchiefexecutiveceo(G, F).;false;false
0;false,false,false;countryhascompanyoffice(H, A).;false;false
1;;companyeconomicsector(A, B) :- companyalsoknownas(A, C), acquired(A, D).;true;true
1;true;economicsectorcompany(B, D).;false;true
1;true,false;economicsectorcompany(B, C), countryhascompanyoffice(E, C).;false;false
1;false;acquired(A, F), cityhascompanyoffice(G, A).;true;true
1;false,true;cityhascompanyoffice(G, H), economicsectorcompany(B, H).;false;false
1;false,false;acquired(I, A).;true;true
1;false,false,true;economicsectorcompany(B, I).;false;false
1;false,false,false;companyalsoknownas(A, J).;false;false
2;;companyeconomicsector(A, B) :- acquired(A, C), economicsectorcompany(B, C).;false;true
2;false;acquired(A, D).;true;true
2;false,true;companyalsoknownas(A, E), economicsectorcompany(B, E).;true;true
2;false,true,true;countryhascompanyoffice(F, D).;false;false
2;false,true,false;companyalsoknownas(D, G), companyalsoknownas(A, G).;false;false
2;false,false;acquired(H, A), companyceo(H, I).;true;true
2;false,false,true;economicsectorcompany(B, H).;false;false
2;false,false,false;cityhascompanyoffice(J, A).;false;false
3;;companyeconomicsector(A, B) :- acquired(A, C), acquired(C, D).;true;false
3;true;economicsectorcompany(B, D).;true;true
3;true,true;companyceo(C, E).;false;false
3;true,false;cityhascompanyoffice(F, A), companyceo(A, G).;true;true
3;true,false,true;companyalsoknownas(A, H), economicsectorcompany(B, H).;false;false
3;true,false,false;acquired(D, I), economicsectorcompany(B, I).;false;false
4;;companyeconomicsector(A, B) :- acquired(C, A), economicsectorcompany(B, C).;false;true
4;false;acquired(D, A), companyceo(D, E).;true;true
4;false,true;acquired(F, D), companyalsoknownas(F, G).;true;true
4;false,true,true;acquired(A, H).;false;false
4;false,true,false;acquired(I, D), economicsectorcompany(B, I).;false;false
4;false,false;acquired(A, J), economicsectorcompany(B, J).;true;true
4;false,false,true;companyalsoknownas(A, K), acquired(J, L).;false;false
4;false,false,false;companyalsoknownas(A, M), economicsectorcompany(B, M).;false;false
5;;companyeconomicsector(A, B) :- companyalsoknownas(A, C), economicsectorcompany(B, C).;true;true
5;true;acquired(A, D), countryhascompanyoffice(E, D).;false;false
5;false;acquired(A, F), acquired(F, G).;true;true
5;false,true;economicsectorcompany(B, G).;false;true
5;false,true,false;countryhascompanyoffice(H, A), companyalsoknownas(A, I).;false;false
5;false,false;cityhascompanyoffice(J, A), countryhascompanyoffice(K, A).;true;true
5;false,false,true;countryhascompanyoffice(K, L), economicsectorcompany(B, L).;false;false
5;false,false,false;cityhascompanyoffice(M, A), acquired(N, A).;false;false
6;;companyeconomicsector(A, B) :- acquired(A, C), companyceo(C, D).;true;true
6;true;economicsectorcompany(B, C).;false;true
6;true,false;acquired(C, E).;false;false
6;false;companyalsoknownas(A, F), cityhascompanyoffice(G, F).;true;true
6;false,true;acquired(F, H), economicsectorcompany(B, H).;false;true
6;false,true,false;companyceo(A, I), acquired(F, J).;false;false
6;false,false;companyalsoknownas(A, K), acquired(K, L).;false;true
6;false,false,false;companyalsoknownas(A, M).;false;false
7;;companyeconomicsector(A, B) :- acquired(C, A), economicsectorcompany(B, C).;false;true
7;false;acquired(D, A), companyceo(D, E).;true;true
7;false,true;companyalsoknownas(D, F), acquired(G, F).;true;true
7;false,true,true;economicsectorcompany(B, G).;false;false
7;false,true,false;countryhascompanyoffice(H, D).;false;false
7;false,false;cityhascompanyoffice(I, A), acquired(J, A).;true;true
7;false,false,true;acquired(K, J).;false;false
7;false,false,false;companyceo(A, L).;false;false
8;;companyeconomicsector(A, B) :- cityhascompanyoffice(C, A).;true;true
8;true;cityhascompanyoffice(C, D), economicsectorcompany(B, D).;true;false
8;true,true;acquired(D, E), acquired(F, D).;false;true
8;true,true,false;companyalsoknownas(A, G), companyalsoknownas(D, G).;false;false
8;false;acquired(A, H), economicsectorcompany(B, H).;false;true
8;false,false;acquired(I, A), cityhascompanyoffice(J, I).;true;true
8;false,false,true;acquired(K, I), economicsectorcompany(B, K).;false;false
8;false,false,false;acquired(A, L).;false;false
9;;companyeconomicsector(A, B) :- cityhascompanyoffice(C, A).;true;true
9;true;cityhascompanyoffice(C, D), economicsectorcompany(B, D).;true;false
9;true,true;acquired(E, D), companyceo(D, F).;false;false
9;false;companyalsoknownas(A, G), cityhascompanyoffice(H, G).;true;true
9;false,true;economicsectorcompany(B, G).;false;true
9;false,true,false;acquired(I, G).;false;false
9;false,false;acquired(A, J), economicsectorcompany(B, J).;false;true
9;false,false,false;companyalsoknownas(A, K), economicsectorcompany(B, K).;false;false


WILL Produced-Tree #1
% FOR teamplayssport(A, B):
%   if ( teamalsoknownas(C, A) )
%   then if ( recursion_teamplayssport(C, B) )
%   | then return 0.6359267128772901;  // std dev = 1.247, 9.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=7 */
%   | else return 0.1914822684328457;  // std dev = 2.708, 33.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=11 */
%   else if ( teamplaysagainstteam(D, A) )
%   | then if ( recursion_teamplayssport(D, B) )
%   | | then return 0.7925751646077093;  // std dev = 1.933, 61.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=57 */
%   | | else if ( teamalsoknownas(A, E), recursion_teamplayssport(E, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.03073995378937664;  // std dev = 2.309, 54.000 (wgt'ed) examples reached here.  /* #neg=48 #pos=6 */
%   | else if ( teamplaysinleague(A, F) )
%   | | then return 0.2719420385477882;  // std dev = 0.493, 29.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=12 */
%   | | else if ( athleteplaysforteam(G, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.35814893509951234;  // std dev = 2.550, 26.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=13 */
WILL Produced-Tree #2
% FOR teamplayssport(A, B):
%   if ( teamplaysagainstteam(C, A), teamalsoknownas(A, D) )
%   then if ( recursion_teamplayssport(D, B) )
%   | then return 0.7399049283728881;  // std dev = 0.036, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( recursion_teamplayssport(C, B), athleteplaysforteam(E, C) )
%   | | then return 0.6328114294221231;  // std dev = 0.871, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | else return 0.06574738052895933;  // std dev = 1.794, 18.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=4 */
%   else if ( teamalsoknownas(A, F), athleteledsportsteam(G, A) )
%   | then if ( athleteledsportsteam(G, H), recursion_teamplayssport(H, B) )
%   | | then return 0.8332054912315484;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else return -0.16679450876845162;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( teamalsoknownas(I, A) )
%   | | then if ( recursion_teamplayssport(I, B) )
%   | | | then return 0.47635777858210415;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   | | | else return 0.16653882456488167;  // std dev = 2.160, 21.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=7 */
%   | | else if ( teamplaysagainstteam(J, A) )
%   | | | then return 0.32497008165668473;  // std dev = 4.303, 94.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=50 */
%   | | | else return 0.2701310423633563;  // std dev = 3.689, 55.000 (wgt'ed) examples reached here.  /* #neg=30 #pos=25 */
WILL Produced-Tree #3
% FOR teamplayssport(A, B):
%   if ( teamalsoknownas(A, C), recursion_teamplayssport(C, B) )
%   then return 0.47481363845794433;  // std dev = 0.860, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   else if ( teamalsoknownas(A, D) )
%   | then if ( teamplaysagainstteam(E, A), recursion_teamplayssport(E, B) )
%   | | then if ( athleteplaysforteam(F, D) )
%   | | | then return 0.5925732678253199;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | | else return 0.3822749202944612;  // std dev = 1.113, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   | | else if ( teamplaysagainstteam(G, D), teamplaysagainstteam(G, A) )
%   | | | then return -0.15815285759354117;  // std dev = 0.033, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | | else return 0.25886807813058454;  // std dev = 2.830, 33.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=15 */
%   | else if ( teamalsoknownas(H, A), teamplaysinleague(H, I) )
%   | | then if ( recursion_teamplayssport(H, B) )
%   | | | then return 0.6654585377170685;  // std dev = 2.11e-08, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.05876090948223143;  // std dev = 1.500, 12.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=3 */
%   | | else if ( athleteledsportsteam(J, A) )
%   | | | then return 0.28917661490778374;  // std dev = 2.719, 41.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=23 */
%   | | | else return 0.22058605136963622;  // std dev = 4.633, 99.000 (wgt'ed) examples reached here.  /* #neg=53 #pos=46 */
WILL Produced-Tree #4
% FOR teamplayssport(A, B):
%   if ( teamalsoknownas(A, C), teamalsoknownas(C, D) )
%   then if ( recursion_teamplayssport(D, B) )
%   | then if ( teamplaysinleague(C, E) )
%   | | then return 0.27338462138762104;  // std dev = 2.732, 34.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=20 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( athleteledsportsteam(F, A), teamplaysinleague(A, G) )
%   | | then if ( teamplaysagainstteam(H, A), recursion_teamplayssport(H, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.1537484759218923;  // std dev = 0.037, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | else if ( teamalsoknownas(D, I), recursion_teamplayssport(I, B) )
%   | | | then return 0.21358340409660181;  // std dev = 0.707, 2.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */
%   | | | else return -0.04978903290452512;  // std dev = 0.943, 7.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=1 */
%   else return 0.19952451438034885;  // std dev = 5.699, 167.000 (wgt'ed) examples reached here.  /* #neg=83 #pos=84 */
WILL Produced-Tree #5
% FOR teamplayssport(A, B):
%   if ( teamalsoknownas(C, A), recursion_teamplayssport(C, B) )
%   then return 0.24001568784614177;  // std dev = 1.169, 9.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=7 */
%   else if ( teamalsoknownas(D, A), teamplaysinleague(D, E) )
%   | then if ( teamalsoknownas(F, D), teamplaysagainstteam(G, F) )
%   | | then if ( teamalsoknownas(A, H) )
%   | | | then return 0.08960455962926474;  // std dev = 1.911, 19.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=7 */
%   | | | else return 0.065611251870246;  // std dev = 1.449, 10.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=3 */
%   | | else if ( teamalsoknownas(I, D), recursion_teamplayssport(I, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.234388748129754;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else if ( teamalsoknownas(A, J), recursion_teamplayssport(J, B) )
%   | | then if ( teamplaysagainstteam(K, A), teamalsoknownas(J, L) )
%   | | | then return 0.3820919548887197;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | | else return 0.3996752909365783;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( teamplaysagainstteam(M, A), recursion_teamplayssport(M, B) )
%   | | | then return 0.4747846227775395;  // std dev = 1.914, 55.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=51 */
%   | | | else return 0.0083246133050828;  // std dev = 4.661, 111.000 (wgt'ed) examples reached here.  /* #neg=79 #pos=32 */
WILL Produced-Tree #6
% FOR teamplayssport(A, B):
%   if ( teamplaysagainstteam(C, A), recursion_teamplayssport(C, B) )
%   then if ( teamalsoknownas(A, D), athleteplaysforteam(E, D) )
%   | then return 0.30267376780581534;  // std dev = 0.019, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else return 0.3556422509176875;  // std dev = 2.093, 64.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=59 */
%   else if ( teamalsoknownas(A, F), teamalsoknownas(F, G) )
%   | then if ( recursion_teamplayssport(G, B) )
%   | | then return 0.17655618486830515;  // std dev = 2.500, 24.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=12 */
%   | | else if ( athleteplaysforteam(H, A), teamplaysagainstteam(I, A) )
%   | | | then return -0.18126695445812885;  // std dev = 0.117, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | | else return 0.09747959140377921;  // std dev = 1.136, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   | else if ( athleteledsportsteam(J, A), athleteplaysforteam(K, A) )
%   | | then if ( athleteplaysforteam(K, L), recursion_teamplayssport(L, B) )
%   | | | then return 0.7536328167945794;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | | else return -0.24997641544530624;  // std dev = 0.153, 24.000 (wgt'ed) examples reached here.  /* #neg=24 */
%   | | else if ( athleteledsportsteam(M, A), teamalsoknownas(N, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.022405496611654176;  // std dev = 4.098, 81.000 (wgt'ed) examples reached here.  /* #neg=56 #pos=25 */
WILL Produced-Tree #7
% FOR teamplayssport(A, B):
%   if ( teamalsoknownas(A, C), teamplaysinleague(C, D) )
%   then if ( recursion_teamplayssport(C, B) )
%   | then return 0.12677240187389588;  // std dev = 0.804, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | else if ( teamalsoknownas(C, E) )
%   | | then return 0.1011199920866251;  // std dev = 2.945, 41.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=19 */
%   | | else return -0.06707500166537411;  // std dev = 0.352, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   else if ( teamplaysagainstteam(F, A), athleteledsportsteam(G, F) )
%   | then if ( teamalsoknownas(F, H), recursion_teamplayssport(H, B) )
%   | | then return 0.3198777195015002;  // std dev = 0.992, 38.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=37 */
%   | | else if ( teamplaysinleague(A, I), teamalsoknownas(F, J) )
%   | | | then return -0.19421868571787504;  // std dev = 0.815, 32.000 (wgt'ed) examples reached here.  /* #neg=30 #pos=2 */
%   | | | else return -0.02998433457689372;  // std dev = 1.973, 26.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=9 */
%   | else if ( teamplaysagainstteam(K, A), teamalsoknownas(K, L) )
%   | | then return 0.31170623466249475;  // std dev = 0.742, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else if ( teamplaysagainstteam(M, A) )
%   | | | then return 0.2168166856894248;  // std dev = 1.039, 11.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=8 */
%   | | | else return 0.11483656644170603;  // std dev = 3.472, 49.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=21 */
WILL Produced-Tree #8
% FOR teamplayssport(A, B):
%   if ( teamalsoknownas(C, A), recursion_teamplayssport(C, B) )
%   then return 0.05743112854826972;  // std dev = 1.084, 9.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=7 */
%   else if ( teamalsoknownas(D, A), teamplaysinleague(D, E) )
%   | then if ( teamplaysagainstteam(F, D), teamalsoknownas(G, F) )
%   | | then if ( recursion_teamplayssport(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.04398270731951708;  // std dev = 1.025, 12.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=2 */
%   | | else if ( athleteplaysforteam(H, D) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.07071990786708775;  // std dev = 1.991, 19.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=8 */
%   | else if ( athleteledsportsteam(I, A), teamalsoknownas(J, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( teamplaysinleague(A, K) )
%   | | | then return 0.06279448415077452;  // std dev = 4.171, 132.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=68 */
%   | | | else return 0.1300507350052738;  // std dev = 2.883, 40.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=21 */
WILL Produced-Tree #9
% FOR teamplayssport(A, B):
%   if ( athleteledsportsteam(C, A) )
%   then if ( athleteledsportsteam(C, D), recursion_teamplayssport(D, B) )
%   | then if ( teamalsoknownas(D, E), teamalsoknownas(F, D) )
%   | | then return 0.33852403705360906;  // std dev = 0.202, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( teamplaysagainstteam(G, A), teamplaysagainstteam(G, D) )
%   | | | then return 0.27632314271518565;  // std dev = 0.403, 34.000 (wgt'ed) examples reached here.  /* #pos=34 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.22167872994635834;  // std dev = 0.672, 29.000 (wgt'ed) examples reached here.  /* #neg=29 */
%   else if ( teamalsoknownas(A, H), recursion_teamplayssport(H, B) )
%   | then return -0.08847201916101137;  // std dev = 0.700, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else if ( teamalsoknownas(I, A), athleteledsportsteam(J, I) )
%   | | then if ( teamalsoknownas(K, I), recursion_teamplayssport(K, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.19949887995447746;  // std dev = 0.022, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else if ( teamalsoknownas(A, L) )
%   | | | then return 0.0912298438873457;  // std dev = 2.874, 37.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=18 */
%   | | | else return 0.04792048936537654;  // std dev = 4.259, 102.000 (wgt'ed) examples reached here.  /* #neg=54 #pos=48 */
WILL Produced-Tree #10
% FOR teamplayssport(A, B):
%   if ( athleteledsportsteam(C, A) )
%   then if ( athleteledsportsteam(C, D), recursion_teamplayssport(D, B) )
%   | then if ( teamalsoknownas(E, D), teamplaysinleague(D, F) )
%   | | then return 0.2589152148569004;  // std dev = 0.364, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else return 0.22023370339577739;  // std dev = 0.187, 28.000 (wgt'ed) examples reached here.  /* #pos=28 */
%   | else return -0.1888847986177868;  // std dev = 0.642, 29.000 (wgt'ed) examples reached here.  /* #neg=29 */
%   else if ( teamplaysagainstteam(G, A), athleteledsportsteam(H, G) )
%   | then if ( recursion_teamplayssport(G, B) )
%   | | then return 0.1661293257197448;  // std dev = 1.242, 18.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=16 */
%   | | else if ( teamalsoknownas(I, G) )
%   | | | then return -0.15759397026813685;  // std dev = 1.361, 23.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=3 */
%   | | | else return -0.07172459758638242;  // std dev = 1.346, 13.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=3 */
%   | else if ( teamalsoknownas(A, J), recursion_teamplayssport(J, B) )
%   | | then return -0.21819594955122656;  // std dev = 0.596, 2.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */
%   | | else if ( teamplaysagainstteam(K, A), recursion_teamplayssport(K, B) )
%   | | | then return 0.26372049655008434;  // std dev = 0.111, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | | else return 0.06480922812602291;  // std dev = 4.413, 79.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=35 */


Results
   AUC ROC   = 0.87929
   AUC PR    = 0.892019
   CLL	      = -0.476442
   Precision = 0.882353 at threshold = 0.5
   Recall    = 0.572519
   F1        = 0.694444


Total learning time: 7.477 seconds
Total inference time: 3.477 seconds
AUC ROC: 0.87929


Results scoring model
   AUC ROC   = 0.903524
   AUC PR    = 0.916642
   CLL	      = -0.438588
   Precision = 0.918919 at threshold = 0.5
   Recall    = 0.641509
   F1        = 0.755556


Total scoring time: 3.556 seconds
Parameter learned model CLL: -0.438588


Structure after Parameter Learning
[['teamplayssport(A, B)', {'': 'teamalsoknownas(C, A)', 'true': 'recursion_teamplayssport(C, B)', 'false': 'teamplaysagainstteam(D, A)', 'false,true': 'recursion_teamplayssport(D, B)', 'false,true,false': 'teamalsoknownas(A, E), recursion_teamplayssport(E, B)', 'false,false': 'teamplaysinleague(A, F)', 'false,false,false': 'athleteplaysforteam(G, A)'}, {'true,true': [1.247, 2, 7], 'true,false': [2.708, 22, 11], 'false,true,true': [1.933, 4, 57], 'false,true,false,true': [0.0, 0, 0], 'false,true,false,false': [2.309, 48, 6], 'false,false,true': [0.493, 17, 12], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [2.55, 13, 13]}], ['teamplayssport(A, B)', {'': 'teamplaysagainstteam(C, A), teamalsoknownas(A, D)', 'true': 'recursion_teamplayssport(D, B)', 'true,false': 'recursion_teamplayssport(C, B), athleteplaysforteam(E, C)', 'false': 'teamalsoknownas(A, F), athleteledsportsteam(G, A)', 'false,true': 'athleteledsportsteam(G, H), recursion_teamplayssport(H, B)', 'false,false': 'teamalsoknownas(I, A)', 'false,false,true': 'recursion_teamplayssport(I, B)', 'false,false,false': 'teamplaysagainstteam(J, A)'}, {'true,true': [0.036, 0, 8], 'true,false,true': [0.871, 1, 6], 'true,false,false': [1.794, 14, 4], 'false,true,true': [0.0, 0, 1], 'false,true,false': [0.0, 1, 0], 'false,false,true,true': [1.195, 2, 5], 'false,false,true,false': [2.16, 14, 7], 'false,false,false,true': [4.303, 44, 50], 'false,false,false,false': [3.689, 30, 25]}], ['teamplayssport(A, B)', {'': 'teamalsoknownas(A, C), recursion_teamplayssport(C, B)', 'false': 'teamalsoknownas(A, D)', 'false,true': 'teamplaysagainstteam(E, A), recursion_teamplayssport(E, B)', 'false,true,true': 'athleteplaysforteam(F, D)', 'false,true,false': 'teamplaysagainstteam(G, D), teamplaysagainstteam(G, A)', 'false,false': 'teamalsoknownas(H, A), teamplaysinleague(H, I)', 'false,false,true': 'recursion_teamplayssport(H, B)', 'false,false,false': 'athleteledsportsteam(J, A)'}, {'true': [0.86, 1, 8], 'false,true,true,true': [0.0, 0, 1], 'false,true,true,false': [1.113, 2, 5], 'false,true,false,true': [0.033, 5, 0], 'false,true,false,false': [2.83, 18, 15], 'false,false,true,true': [2.11e-08, 0, 5], 'false,false,true,false': [1.5, 9, 3], 'false,false,false,true': [2.719, 18, 23], 'false,false,false,false': [4.633, 53, 46]}], ['teamplayssport(A, B)', {'': 'teamalsoknownas(A, C), teamalsoknownas(C, D)', 'true': 'recursion_teamplayssport(D, B)', 'true,true': 'teamplaysinleague(C, E)', 'true,false': 'athleteledsportsteam(F, A), teamplaysinleague(A, G)', 'true,false,true': 'teamplaysagainstteam(H, A), recursion_teamplayssport(H, B)', 'true,false,false': 'teamalsoknownas(D, I), recursion_teamplayssport(I, B)'}, {'true,true,true': [2.732, 14, 20], 'true,true,false': [0.0, 0, 0], 'true,false,true,true': [0.0, 0, 0], 'true,false,true,false': [0.037, 2, 0], 'true,false,false,true': [0.707, 1, 1], 'true,false,false,false': [0.943, 6, 1], 'false': [5.699, 83, 84]}], ['teamplayssport(A, B)', {'': 'teamalsoknownas(C, A), recursion_teamplayssport(C, B)', 'false': 'teamalsoknownas(D, A), teamplaysinleague(D, E)', 'false,true': 'teamalsoknownas(F, D), teamplaysagainstteam(G, F)', 'false,true,true': 'teamalsoknownas(A, H)', 'false,true,false': 'teamalsoknownas(I, D), recursion_teamplayssport(I, B)', 'false,false': 'teamalsoknownas(A, J), recursion_teamplayssport(J, B)', 'false,false,true': 'teamplaysagainstteam(K, A), teamalsoknownas(J, L)', 'false,false,false': 'teamplaysagainstteam(M, A), recursion_teamplayssport(M, B)'}, {'true': [1.169, 2, 7], 'false,true,true,true': [1.911, 12, 7], 'false,true,true,false': [1.449, 7, 3], 'false,true,false,true': [0.0, 0, 0], 'false,true,false,false': [0.0, 2, 0], 'false,false,true,true': [0.0, 0, 2], 'false,false,true,false': [0.0, 0, 4], 'false,false,false,true': [1.914, 4, 51], 'false,false,false,false': [4.661, 79, 32]}], ['teamplayssport(A, B)', {'': 'teamplaysagainstteam(C, A), recursion_teamplayssport(C, B)', 'true': 'teamalsoknownas(A, D), athleteplaysforteam(E, D)', 'false': 'teamalsoknownas(A, F), teamalsoknownas(F, G)', 'false,true': 'recursion_teamplayssport(G, B)', 'false,true,false': 'athleteplaysforteam(H, A), teamplaysagainstteam(I, A)', 'false,false': 'athleteledsportsteam(J, A), athleteplaysforteam(K, A)', 'false,false,true': 'athleteplaysforteam(K, L), recursion_teamplayssport(L, B)', 'false,false,false': 'athleteledsportsteam(M, A), teamalsoknownas(N, A)'}, {'true,true': [0.019, 0, 7], 'true,false': [2.093, 5, 59], 'false,true,true': [2.5, 12, 12], 'false,true,false,true': [0.117, 5, 0], 'false,true,false,false': [1.136, 4, 2], 'false,false,true,true': [0.0, 0, 1], 'false,false,true,false': [0.153, 24, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [4.098, 56, 25]}], ['teamplayssport(A, B)', {'': 'teamalsoknownas(A, C), teamplaysinleague(C, D)', 'true': 'recursion_teamplayssport(C, B)', 'true,false': 'teamalsoknownas(C, E)', 'false': 'teamplaysagainstteam(F, A), athleteledsportsteam(G, F)', 'false,true': 'teamalsoknownas(F, H), recursion_teamplayssport(H, B)', 'false,true,false': 'teamplaysinleague(A, I), teamalsoknownas(F, J)', 'false,false': 'teamplaysagainstteam(K, A), teamalsoknownas(K, L)', 'false,false,false': 'teamplaysagainstteam(M, A)'}, {'true,true': [0.804, 1, 6], 'true,false,true': [2.945, 22, 19], 'true,false,false': [0.352, 3, 1], 'false,true,true': [0.992, 1, 37], 'false,true,false,true': [0.815, 30, 2], 'false,true,false,false': [1.973, 17, 9], 'false,false,true': [0.742, 1, 3], 'false,false,false,true': [1.039, 3, 8], 'false,false,false,false': [3.472, 28, 21]}], ['teamplayssport(A, B)', {'': 'teamalsoknownas(C, A), recursion_teamplayssport(C, B)', 'false': 'teamalsoknownas(D, A), teamplaysinleague(D, E)', 'false,true': 'teamplaysagainstteam(F, D), teamalsoknownas(G, F)', 'false,true,true': 'recursion_teamplayssport(G, B)', 'false,true,false': 'athleteplaysforteam(H, D)', 'false,false': 'athleteledsportsteam(I, A), teamalsoknownas(J, A)', 'false,false,false': 'teamplaysinleague(A, K)'}, {'true': [1.084, 2, 7], 'false,true,true,true': [0.0, 0, 0], 'false,true,true,false': [1.025, 10, 2], 'false,true,false,true': [0.0, 0, 0], 'false,true,false,false': [1.991, 11, 8], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [4.171, 64, 68], 'false,false,false,false': [2.883, 19, 21]}], ['teamplayssport(A, B)', {'': 'athleteledsportsteam(C, A)', 'true': 'athleteledsportsteam(C, D), recursion_teamplayssport(D, B)', 'true,true': 'teamalsoknownas(D, E), teamalsoknownas(F, D)', 'true,true,false': 'teamplaysagainstteam(G, A), teamplaysagainstteam(G, D)', 'false': 'teamalsoknownas(A, H), recursion_teamplayssport(H, B)', 'false,false': 'teamalsoknownas(I, A), athleteledsportsteam(J, I)', 'false,false,true': 'teamalsoknownas(K, I), recursion_teamplayssport(K, B)', 'false,false,false': 'teamalsoknownas(A, L)'}, {'true,true,true': [0.202, 0, 4], 'true,true,false,true': [0.403, 0, 34], 'true,true,false,false': [0.0, 0, 0], 'true,false': [0.672, 29, 0], 'false,true': [0.7, 1, 2], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [0.022, 3, 0], 'false,false,false,true': [2.874, 19, 18], 'false,false,false,false': [4.259, 54, 48]}], ['teamplayssport(A, B)', {'': 'athleteledsportsteam(C, A)', 'true': 'athleteledsportsteam(C, D), recursion_teamplayssport(D, B)', 'true,true': 'teamalsoknownas(E, D), teamplaysinleague(D, F)', 'false': 'teamplaysagainstteam(G, A), athleteledsportsteam(H, G)', 'false,true': 'recursion_teamplayssport(G, B)', 'false,true,false': 'teamalsoknownas(I, G)', 'false,false': 'teamalsoknownas(A, J), recursion_teamplayssport(J, B)', 'false,false,false': 'teamplaysagainstteam(K, A), recursion_teamplayssport(K, B)'}, {'true,true,true': [0.364, 0, 10], 'true,true,false': [0.187, 0, 28], 'true,false': [0.642, 29, 0], 'false,true,true': [1.242, 2, 16], 'false,true,false,true': [1.361, 20, 3], 'false,true,false,false': [1.346, 10, 3], 'false,false,true': [0.596, 1, 1], 'false,false,false,true': [0.111, 0, 10], 'false,false,false,false': [4.413, 44, 35]}]]
[{'': [0.244897959183673, 0.2496885813148811], 'false': [0.2477126654064268, 0.24793388429752197], 'false,false': [0.24256837098691986, 0.24999999999999956], 'false,false,false': [nan, 0.24999999999999956], 'false,true': [0.06127385111529118, 0.09876543209876568], 'true': [0.17283950617283939, 0.22222222222222174], 'false,true,false': [nan, 0.09876543209876527]}, {'': [0.21842640509170477, 0.22021867622843627], 'false': [0.25, 0.21986595721833768], 'false,true': [0.0, 0.0], 'false,false': [0.23568478438024282, 0.21630978293327688], 'false,false,true': [0.20408163265306126, 0.2222222222222221], 'true': [0.00016379397168364562, 0.22387864751426614], 'true,false': [0.10849273267307583, 0.17871368977709445], 'false,false,false': [0.1969980645937992, 0.2474180296044706]}, {'': [0.08212258000901433, 0.21117212036496277], 'false': [0.22435537540860975, 0.20730939187034234], 'false,true': [0.15971655625039785, 0.23068581453928966], 'false,true,false': [0.0002155214771847491, 0.24272312685546416], 'false,false': [0.2087713519942789, 0.2071305629215196], 'false,false,true': [8.881784197001253e-17, 0.18749999999999992], 'false,false,false': [0.18034002837819518, 0.21684783791385429], 'false,true,true': [0.0, 0.17700503277153554]}, {'': [0.21607519735432978, 0.19451412103310073], 'true': [0.21949536354583182, 0.14011237066557622], 'true,true': [0.21949536354583182, nan], 'true,false': [0.0006883935818808272, 0.16629512907851385], 'true,false,false': [0.24999999999999994, 0.1269649982119499], 'true,false,true': [nan, 0.0006883935818808272]}, {'': [0.15179469262523032, 0.1968603385689378], 'false': [0.19169076013080324, 0.19594533445462092], 'false,false': [6.870526812713385e-05, 0.20116475628599703], 'false,false,false': [0.0665879777296434, 0.19575554793102834], 'false,true': [0.19847991173675966, 0.0], 'false,true,true': [0.19221819745071392, 0.21000000000000005], 'false,false,true': [0.0, 0.0], 'false,true,false': [nan, 0.0]}, {'': [0.06198105214292224, 0.1946534689167532], 'false': [0.23107032534607547, 0.17746390506862417], 'false,true': [0.26047505896142276, 0.13787781311234906], 'false,false': [0.03960930728258482, 0.2072912722576517], 'false,false,false': [nan, 0.2072912722576517], 'false,true,false': [0.002715703056079938, 0.21519488808502266], 'true': [5.0998673632880145e-05, 0.06847803735489752], 'false,false,true': [0.0, 0.000970435444540535]}, {'': [0.1838216806410397, 0.15373531918624986], 'true': [0.0924322696614431, 0.19781588299927025], 'true,false': [0.21157136312049243, 0.031047283026684178], 'false': [0.1081309986022632, 0.2171829349552381], 'false,false': [0.13770396880140445, 0.22049742460667465], 'false,false,false': [0.09814169884718052, 0.24605837997954105], 'false,true': [0.025892149677635586, 0.08521305317598081], 'false,true,false': [0.020744744125433617, 0.149677052124937]}, {'': [0.1305750059960495, 0.15285943707458474], 'false': [0.16490745594191447, 0.15027321217744882], 'false,true': [0.08752803495517214, 0.20868575696548103], 'false,true,false': [nan, 0.20868575696548103], 'false,false': [nan, 0.15027321217744896], 'false,false,false': [0.13179657015210477, 0.2077746818330118], 'false,true,true': [nan, 0.08752803495517214]}, {'': [0.07247659377866578, 0.1875562695709393], 'false': [0.1631035573381829, 0.18765304062753535], 'false,false': [0.00016271073377114217, 0.1902829619387664], 'false,false,false': [0.223253082001125, 0.17782392540368303], 'true': [0.005716900136409838, 0.015571809994790254], 'true,true': [0.010202719897958262, 0.004781898608051227], 'true,true,false': [0.004781898608051214, nan], 'false,false,true': [nan, 0.00016271073377114217]}, {'': [0.05197336557805729, 0.18670752887387976], 'false': [0.11657444492936962, 0.22386275491925867], 'false,false': [0.17741774860908327, 0.22285719856409844], 'false,false,false': [0.0012410224992395412, 0.24646429562851724], 'false,true': [0.08571389381211769, 0.1034440473677278], 'false,true,false': [0.08051467205359136, 0.13930052505969856], 'true': [0.004690919639324144, 0.014216151433755143], 'true,true': [0.01323636523141295, 0.0012452223300285345]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
1;;teamplayssport(A, B) :- teamplaysagainstteam(C, A), teamalsoknownas(A, D).;true;true
1;true;recursion_teamplayssport(D, B).;true;true
1;false;teamalsoknownas(A, F), athleteledsportsteam(G, A).;true;true
1;false,true;athleteledsportsteam(G, H), recursion_teamplayssport(H, B).;true;true
2;;teamplayssport(A, B) :- teamalsoknownas(A, C), recursion_teamplayssport(C, B).;true;true
2;false;teamalsoknownas(A, D).;true;true
2;false,true;teamplaysagainstteam(E, A), recursion_teamplayssport(E, B).;true;true
2;false,true,true;athleteplaysforteam(F, D).;true;true
2;false,true,false;teamplaysagainstteam(G, D), teamplaysagainstteam(G, A).;true;true
2;false,false;teamalsoknownas(H, A), teamplaysinleague(H, I).;true;true
2;false,false,true;recursion_teamplayssport(H, B).;true;true
3;;teamplayssport(A, B) :- teamalsoknownas(A, C), teamalsoknownas(C, D).;true;true
3;true;recursion_teamplayssport(D, B).;true;true
3;true,false;athleteledsportsteam(F, A), teamplaysinleague(A, G).;true;true
4;;teamplayssport(A, B) :- teamalsoknownas(C, A), recursion_teamplayssport(C, B).;true;true
4;false;teamalsoknownas(D, A), teamplaysinleague(D, E).;true;true
4;false,true;teamalsoknownas(F, D), teamplaysagainstteam(G, F).;true;true
4;false,false;teamalsoknownas(A, J), recursion_teamplayssport(J, B).;true;true
4;false,false,true;teamplaysagainstteam(K, A), teamalsoknownas(J, L).;true;true
5;;teamplayssport(A, B) :- teamplaysagainstteam(C, A), recursion_teamplayssport(C, B).;true;true
5;true;teamalsoknownas(A, D), athleteplaysforteam(E, D).;true;true
5;false;teamalsoknownas(A, F), teamalsoknownas(F, G).;true;true
5;false,false;athleteledsportsteam(J, A), athleteplaysforteam(K, A).;true;true
5;false,false,true;athleteplaysforteam(K, L), recursion_teamplayssport(L, B).;true;true
8;;teamplayssport(A, B) :- athleteledsportsteam(C, A).;true;true
8;false;teamalsoknownas(A, H), recursion_teamplayssport(H, B).;true;true
8;false,false;teamalsoknownas(I, A), athleteledsportsteam(J, I).;true;true
9;;teamplayssport(A, B) :- athleteledsportsteam(C, A).;true;true
9;true;athleteledsportsteam(C, D), recursion_teamplayssport(D, B).;true;true
9;true,true;teamalsoknownas(E, D), teamplaysinleague(D, F).;true;true
9;false;teamplaysagainstteam(G, A), athleteledsportsteam(H, G).;true;true
9;false,false;teamalsoknownas(A, J), recursion_teamplayssport(J, B).;true;true
9;false,false,false;teamplaysagainstteam(K, A), recursion_teamplayssport(K, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR teamplayssport(A, B):
%   if ( teamplaysagainstteam(C, A), recursion_teamplayssport(C, B) )
%   then if ( teamplaysagainstteam(A, C) )
%   | then return 0.8268989350995126;  // std dev = 0.174, 64.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=62 */
%   | else if ( athleteledsportsteam(D, C) )
%   | | then return 0.19148226843284552;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | else return 0.6081489350995122;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   else if ( athleteplayssport(E, B), athleteledsportsteam(E, F) )
%   | then if ( teamplaysagainstteam(A, G), athleteledsportsteam(H, G) )
%   | | then if ( athleteplayssport(H, I), recursion_teamplayssport(G, I) )
%   | | | then return -0.1418510649004878;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | | | else return 0.1438632208137979;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=2 */
%   | | else if ( teamplaysinleague(A, J), teamplaysinleague(F, J) )
%   | | | then return 0.7812258581764353;  // std dev = 0.961, 13.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   | | | else return 0.43709630352056494;  // std dev = 3.044, 38.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=22 */
%   | else if ( teamalsoknownas(K, A), athleteplaysforteam(L, K) )
%   | | then return 0.058148935099512175;  // std dev = 0.400, 10.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | | else return -0.10851773156715439;  // std dev = 0.180, 60.000 (wgt'ed) examples reached here.  /* #neg=58 #pos=2 */
WILL Produced-Tree #2
% FOR teamplayssport(A, B):
%   if ( teamplaysagainstteam(C, A), teamalsoknownas(A, D) )
%   then if ( recursion_teamplayssport(D, B) )
%   | then return 0.7257371741022817;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( athleteplayssport(E, B), athleteledsportsteam(E, F) )
%   | | then if ( athleteplaysforteam(G, A) )
%   | | | then return 0.20139737113041467;  // std dev = 1.584, 12.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=5 */
%   | | | else return 0.6198448002135183;  // std dev = 0.903, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | else return -0.13484189705703192;  // std dev = 0.024, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   else if ( teamalsoknownas(A, H), athleteledsportsteam(I, A) )
%   | then if ( athleteledsportsteam(I, J), recursion_teamplayssport(J, B) )
%   | | then return 0.7347337483847239;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else return -0.20376878079808336;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( teamplaysagainstteam(A, K), recursion_teamplayssport(K, B) )
%   | | then return 0.7061293309650272;  // std dev = 0.139, 51.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=50 */
%   | | else if ( athleteplayssport(L, B), athleteledsportsteam(L, M) )
%   | | | then return 0.3267518069312644;  // std dev = 3.773, 63.000 (wgt'ed) examples reached here.  /* #neg=30 #pos=33 */
%   | | | else return -0.06818626235843199;  // std dev = 1.921, 63.000 (wgt'ed) examples reached here.  /* #neg=59 #pos=4 */
WILL Produced-Tree #3
% FOR teamplayssport(A, B):
%   if ( teamalsoknownas(A, C), recursion_teamplayssport(C, B) )
%   then return 0.48561664842263763;  // std dev = 0.215, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   else if ( teamalsoknownas(A, D) )
%   | then if ( teamplaysagainstteam(E, A), recursion_teamplayssport(E, B) )
%   | | then if ( athleteplaysforteam(F, D) )
%   | | | then return 0.6838893216285804;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | | else return 0.3918838250109808;  // std dev = 1.148, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   | | else if ( teamplaysagainstteam(G, D), teamplaysagainstteam(G, A) )
%   | | | then return -0.12884876888692723;  // std dev = 0.029, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | | else return 0.22179938458711462;  // std dev = 2.563, 33.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=15 */
%   | else if ( teamalsoknownas(H, A), teamplaysinleague(H, I) )
%   | | then if ( recursion_teamplayssport(H, B) )
%   | | | then return 0.5663493195516657;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.07693954837550561;  // std dev = 1.364, 12.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=3 */
%   | | else if ( teamplaysagainstteam(A, J), recursion_teamplayssport(J, B) )
%   | | | then return 0.5446101891168831;  // std dev = 0.989, 46.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=45 */
%   | | | else return 0.07320300243546798;  // std dev = 3.804, 94.000 (wgt'ed) examples reached here.  /* #neg=70 #pos=24 */
WILL Produced-Tree #4
% FOR teamplayssport(A, B):
%   if ( teamalsoknownas(A, C), teamalsoknownas(C, D) )
%   then if ( recursion_teamplayssport(D, B) )
%   | then if ( athleteplayssport(E, B) )
%   | | then if ( teamalsoknownas(F, A), athleteplaysinleague(E, G) )
%   | | | then return 0.1731026293930356;  // std dev = 1.733, 15.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=8 */
%   | | | else return 0.38953427987765443;  // std dev = 1.589, 16.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=12 */
%   | | else return -0.1447020209172303;  // std dev = 0.007, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( athleteledsportsteam(H, A), teamplaysinleague(A, I) )
%   | | then return -0.15449195783703865;  // std dev = 0.074, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | else return 0.033395774264226505;  // std dev = 0.337, 9.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   else if ( athleteplayssport(J, B), athleteledsportsteam(J, K) )
%   | then if ( teamplaysinleague(A, L), athleteplaysinleague(J, L) )
%   | | then return 0.42659881443234204;  // std dev = 0.149, 50.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=48 */
%   | | else if ( teamplaysagainstteam(M, A) )
%   | | | then return 0.010660281078062054;  // std dev = 1.959, 29.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=9 */
%   | | | else return 0.43666279338143715;  // std dev = 2.213, 26.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=19 */
%   | else return -0.03808811646212427;  // std dev = 0.255, 62.000 (wgt'ed) examples reached here.  /* #neg=54 #pos=8 */
WILL Produced-Tree #5
% FOR teamplayssport(A, B):
%   if ( teamalsoknownas(C, A), recursion_teamplayssport(C, B) )
%   then if ( athleteledsportsteam(D, A), athleteplaysforteam(D, A) )
%   | then return 0.3404251636790557;  // std dev = 0.065, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else return -0.07667984619820996;  // std dev = 0.502, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   else if ( teamalsoknownas(E, A), teamplaysinleague(E, F) )
%   | then if ( teamalsoknownas(G, E), teamplaysagainstteam(H, G) )
%   | | then if ( athleteplayssport(I, B), athleteplaysforteam(I, J) )
%   | | | then return 0.11489196524116088;  // std dev = 1.937, 21.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=9 */
%   | | | else return -0.010690092478657917;  // std dev = 0.926, 8.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */
%   | | else return -0.14539491326050355;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else if ( teamalsoknownas(A, K), recursion_teamplayssport(K, B) )
%   | | then if ( teamplaysagainstteam(L, A), teamalsoknownas(K, M) )
%   | | | then return 0.3480124895154214;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | | else return 0.3672692754610255;  // std dev = 0.096, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( teamplaysinleague(A, N), athleteplaysinleague(P, N) )
%   | | | then return 0.11106721049264835;  // std dev = 3.230, 107.000 (wgt'ed) examples reached here.  /* #neg=54 #pos=53 */
%   | | | else return 0.20238061418570003;  // std dev = 3.120, 59.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=30 */
WILL Produced-Tree #6
% FOR teamplayssport(A, B):
%   if ( teamplaysagainstteam(C, A), recursion_teamplayssport(C, B) )
%   then if ( teamalsoknownas(A, D), athleteplaysforteam(E, D) )
%   | then return 0.2980995274329607;  // std dev = 0.050, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else if ( teamplaysagainstteam(F, A), teamalsoknownas(G, F) )
%   | | then return 0.24552866546908853;  // std dev = 0.242, 47.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=42 */
%   | | else return 0.38243284058517485;  // std dev = 0.099, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   else if ( teamalsoknownas(A, H), teamalsoknownas(H, I) )
%   | then if ( athleteplayssport(J, B), athleteplaysforteam(J, K) )
%   | | then if ( teamplaysinleague(A, L), teamplaysinleague(K, L) )
%   | | | then return 0.3621582964166457;  // std dev = 0.758, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | | else return 0.09537529147134824;  // std dev = 2.038, 21.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=9 */
%   | | else return -0.1520744872843012;  // std dev = 0.024, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else if ( athleteledsportsteam(M, A), athleteplaysforteam(N, A) )
%   | | then return -0.11948592612104335;  // std dev = 0.203, 25.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=1 */
%   | | else if ( teamplaysagainstteam(P, A), athleteledsportsteam(Q, P) )
%   | | | then return -0.09896312244215906;  // std dev = 1.151, 26.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=2 */
%   | | | else return 0.11881865470790713;  // std dev = 3.093, 55.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=23 */
WILL Produced-Tree #7
% FOR teamplayssport(A, B):
%   if ( athleteplayssport(C, B), athleteplaysinleague(C, D) )
%   then if ( teamplaysinleague(A, E) )
%   | then if ( athleteplaysforteam(C, F), teamplaysinleague(F, E) )
%   | | then if ( teamplaysagainstteam(G, A), athleteplaysinleague(H, E) )
%   | | | then return 0.16529805796509675;  // std dev = 1.820, 61.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=50 */
%   | | | else return 0.44556858457340137;  // std dev = 0.135, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | else if ( athleteplaysinleague(I, E), teamalsoknownas(A, J) )
%   | | | then return 0.2780227246709572;  // std dev = 1.109, 8.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=6 */
%   | | | else return -0.04465715930054266;  // std dev = 2.144, 37.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=12 */
%   | else if ( teamplaysagainstteam(K, A), teamalsoknownas(L, K) )
%   | | then if ( teamalsoknownas(M, L), teamplaysinleague(M, D) )
%   | | | then return -0.30943007162351793;  // std dev = 0.284, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.15621526168654734;  // std dev = 0.582, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else if ( teamplaysagainstteam(N, A), athleteplaysforteam(P, N) )
%   | | | then return 0.35490588076474533;  // std dev = 0.861, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | | else return 0.28226924889624555;  // std dev = 1.781, 18.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=13 */
%   else return -0.07806800836187784;  // std dev = 0.237, 62.000 (wgt'ed) examples reached here.  /* #neg=58 #pos=4 */
WILL Produced-Tree #8
% FOR teamplayssport(A, B):
%   if ( teamplaysagainstteam(A, C), recursion_teamplayssport(C, B) )
%   then if ( teamalsoknownas(A, D), teamalsoknownas(C, E) )
%   | then if ( teamplaysagainstteam(C, A), teamalsoknownas(E, D) )
%   | | then return 0.26934419986554003;  // std dev = 0.244, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return -0.08416847618383337;  // std dev = 0.804, 6.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | else return 0.2284512406679987;  // std dev = 0.136, 55.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=54 */
%   else if ( teamplaysagainstteam(F, A), teamalsoknownas(G, F) )
%   | then if ( athleteplaysforteam(H, A) )
%   | | then return -0.1657462549778267;  // std dev = 0.101, 40.000 (wgt'ed) examples reached here.  /* #neg=40 */
%   | | else return -0.002010023106782351;  // std dev = 0.289, 10.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=3 */
%   | else if ( athleteplayssport(I, B), athleteledsportsteam(I, J) )
%   | | then if ( athleteplaysforteam(I, K), teamalsoknownas(J, K) )
%   | | | then return -0.2781202209907909;  // std dev = 0.852, 7.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=1 */
%   | | | else return 0.21978669517775382;  // std dev = 2.690, 49.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=35 */
%   | | else if ( teamalsoknownas(L, A), teamplaysinleague(A, M) )
%   | | | then return 0.33429313390633125;  // std dev = 0.959, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return -0.09122144770916324;  // std dev = 1.371, 35.000 (wgt'ed) examples reached here.  /* #neg=33 #pos=2 */
WILL Produced-Tree #9
% FOR teamplayssport(A, B):
%   if ( athleteledsportsteam(C, A) )
%   then if ( teamplaysagainstteam(A, D), recursion_teamplayssport(D, B) )
%   | then if ( athleteledsportsteam(E, D), athleteplaysforteam(F, A) )
%   | | then return 0.19418794063196773;  // std dev = 0.037, 33.000 (wgt'ed) examples reached here.  /* #pos=33 */
%   | | else return 0.039094937198692975;  // std dev = 0.638, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | else if ( teamplaysagainstteam(A, G), teamalsoknownas(H, G) )
%   | | then if ( athleteplayssport(I, B), athleteplaysinleague(I, J) )
%   | | | then return -0.1865301132312147;  // std dev = 0.269, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | | else return -0.10119966638379821;  // std dev = 0.040, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | | else return 0.1602248204313943;  // std dev = 0.860, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   else if ( teamalsoknownas(A, K), recursion_teamplayssport(K, B) )
%   | then return 0.05151518475136713;  // std dev = 0.338, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else if ( teamalsoknownas(L, A), athleteledsportsteam(M, L) )
%   | | then return -0.11891775719981403;  // std dev = 0.040, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else if ( athleteplayssport(N, B), athleteledsportsteam(N, P) )
%   | | | then return 0.10767007676677237;  // std dev = 3.436, 89.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=60 */
%   | | | else return -0.05110989734145619;  // std dev = 1.664, 50.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=6 */
WILL Produced-Tree #10
% FOR teamplayssport(A, B):
%   if ( athleteledsportsteam(C, A) )
%   then if ( athleteledsportsteam(C, D), recursion_teamplayssport(D, B) )
%   | then return 0.1875202675126329;  // std dev = 0.110, 38.000 (wgt'ed) examples reached here.  /* #pos=38 */
%   | else return -0.13831219939237294;  // std dev = 0.096, 29.000 (wgt'ed) examples reached here.  /* #neg=29 */
%   else if ( teamplaysagainstteam(E, A), athleteledsportsteam(F, E) )
%   | then if ( teamplaysagainstteam(G, A), recursion_teamplayssport(G, B) )
%   | | then if ( teamplaysagainstteam(A, G) )
%   | | | then return 0.15379132335539247;  // std dev = 0.941, 19.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=18 */
%   | | | else return -0.14618265914591252;  // std dev = 0.748, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | else if ( teamplaysagainstteam(A, H), athleteledsportsteam(I, H) )
%   | | | then return -0.13186143471111647;  // std dev = 0.847, 26.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=1 */
%   | | | else return 0.10013545507488253;  // std dev = 0.708, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   | else if ( teamalsoknownas(A, J), recursion_teamplayssport(J, B) )
%   | | then return -0.00830307454981169;  // std dev = 0.314, 2.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */
%   | | else if ( teamplaysagainstteam(K, A), recursion_teamplayssport(K, B) )
%   | | | then return 0.2203762004322957;  // std dev = 0.196, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | | else return 0.04176272762355409;  // std dev = 3.323, 79.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=35 */


Results
   AUC ROC   = 0.950527
   AUC PR    = 0.948125
   CLL	      = -0.332628
   Precision = 0.881481 at threshold = 0.5
   Recall    = 0.908397
   F1        = 0.894737


Total learning time: 199.492 seconds
Total inference time: 7.968 seconds
AUC ROC: 0.950527


Results scoring model
   AUC ROC   = 0.973656
   AUC PR    = 0.975925
   CLL	      = -0.297091
   Precision = 0.897196 at threshold = 0.5
   Recall    = 0.90566
   F1        = 0.901408


Total scoring time: 7.265 seconds
Refined model CLL: -0.297091


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.950527
   AUC PR    = 0.948125
   CLL	      = -0.332628
   Precision = 0.881481 at threshold = 0.5
   Recall    = 0.908397
   F1        = 0.894737


Total learning time: 217.78999999999996 seconds
Total inference time: 7.968 seconds
AUC ROC: 0.950527
Total revision time: 217.78999999999996
Best scored revision CLL: -0.297091


Dataset: 10_nell_finances_nell_sports, Fold: 3, Type: Transfer (trRDN-B), Time: 21:18:11
{'AUC ROC': 0.950527, 'AUC PR': 0.948125, 'CLL': -0.332628, 'Precision': [0.881481, 0.5], 'Recall': 0.908397, 'F1': 0.894737, 'Learning time': 217.78999999999996, 'Inference time': 7.968, 'parameter_0.4': {'AUC ROC': 0.87929, 'AUC PR': 0.892019, 'CLL': -0.476442, 'Precision': [0.882353, 0.5], 'Recall': 0.572519, 'F1': 0.694444, 'Learning time': 7.477, 'Inference time': 3.477}}


Amount of data: 0.6
******************************************
Performing Parameter Learning
******************************************
Refine
0;;companyeconomicsector(A, B) :- acquired(C, A).;true;true
0;true;economicsectorcompany(B, C).;false;false
0;false;companyalsoknownas(A, D).;true;true
0;false,true;economicsectorcompany(B, D).;false;true
0;false,true,false;acquired(A, E), economicsectorcompany(B, E).;false;false
0;false,false;companyceo(A, F).;true;true
0;false,false,true;bankchiefexecutiveceo(G, F).;false;false
0;false,false,false;countryhascompanyoffice(H, A).;false;false
1;;companyeconomicsector(A, B) :- companyalsoknownas(A, C), acquired(A, D).;true;true
1;true;economicsectorcompany(B, D).;false;true
1;true,false;economicsectorcompany(B, C), countryhascompanyoffice(E, C).;false;false
1;false;acquired(A, F), cityhascompanyoffice(G, A).;true;true
1;false,true;cityhascompanyoffice(G, H), economicsectorcompany(B, H).;false;false
1;false,false;acquired(I, A).;true;true
1;false,false,true;economicsectorcompany(B, I).;false;false
1;false,false,false;companyalsoknownas(A, J).;false;false
2;;companyeconomicsector(A, B) :- acquired(A, C), economicsectorcompany(B, C).;false;true
2;false;acquired(A, D).;true;true
2;false,true;companyalsoknownas(A, E), economicsectorcompany(B, E).;true;true
2;false,true,true;countryhascompanyoffice(F, D).;false;false
2;false,true,false;companyalsoknownas(D, G), companyalsoknownas(A, G).;false;false
2;false,false;acquired(H, A), companyceo(H, I).;true;true
2;false,false,true;economicsectorcompany(B, H).;false;false
2;false,false,false;cityhascompanyoffice(J, A).;false;false
3;;companyeconomicsector(A, B) :- acquired(A, C), acquired(C, D).;true;false
3;true;economicsectorcompany(B, D).;true;true
3;true,true;companyceo(C, E).;false;false
3;true,false;cityhascompanyoffice(F, A), companyceo(A, G).;true;true
3;true,false,true;companyalsoknownas(A, H), economicsectorcompany(B, H).;false;false
3;true,false,false;acquired(D, I), economicsectorcompany(B, I).;false;false
4;;companyeconomicsector(A, B) :- acquired(C, A), economicsectorcompany(B, C).;false;true
4;false;acquired(D, A), companyceo(D, E).;true;true
4;false,true;acquired(F, D), companyalsoknownas(F, G).;true;true
4;false,true,true;acquired(A, H).;false;false
4;false,true,false;acquired(I, D), economicsectorcompany(B, I).;false;false
4;false,false;acquired(A, J), economicsectorcompany(B, J).;true;true
4;false,false,true;companyalsoknownas(A, K), acquired(J, L).;false;false
4;false,false,false;companyalsoknownas(A, M), economicsectorcompany(B, M).;false;false
5;;companyeconomicsector(A, B) :- companyalsoknownas(A, C), economicsectorcompany(B, C).;true;true
5;true;acquired(A, D), countryhascompanyoffice(E, D).;false;false
5;false;acquired(A, F), acquired(F, G).;true;true
5;false,true;economicsectorcompany(B, G).;false;true
5;false,true,false;countryhascompanyoffice(H, A), companyalsoknownas(A, I).;false;false
5;false,false;cityhascompanyoffice(J, A), countryhascompanyoffice(K, A).;true;true
5;false,false,true;countryhascompanyoffice(K, L), economicsectorcompany(B, L).;false;false
5;false,false,false;cityhascompanyoffice(M, A), acquired(N, A).;false;false
6;;companyeconomicsector(A, B) :- acquired(A, C), companyceo(C, D).;true;true
6;true;economicsectorcompany(B, C).;false;true
6;true,false;acquired(C, E).;false;false
6;false;companyalsoknownas(A, F), cityhascompanyoffice(G, F).;true;true
6;false,true;acquired(F, H), economicsectorcompany(B, H).;false;true
6;false,true,false;companyceo(A, I), acquired(F, J).;false;false
6;false,false;companyalsoknownas(A, K), acquired(K, L).;false;true
6;false,false,false;companyalsoknownas(A, M).;false;false
7;;companyeconomicsector(A, B) :- acquired(C, A), economicsectorcompany(B, C).;false;true
7;false;acquired(D, A), companyceo(D, E).;true;true
7;false,true;companyalsoknownas(D, F), acquired(G, F).;true;true
7;false,true,true;economicsectorcompany(B, G).;false;false
7;false,true,false;countryhascompanyoffice(H, D).;false;false
7;false,false;cityhascompanyoffice(I, A), acquired(J, A).;true;true
7;false,false,true;acquired(K, J).;false;false
7;false,false,false;companyceo(A, L).;false;false
8;;companyeconomicsector(A, B) :- cityhascompanyoffice(C, A).;true;true
8;true;cityhascompanyoffice(C, D), economicsectorcompany(B, D).;true;false
8;true,true;acquired(D, E), acquired(F, D).;false;true
8;true,true,false;companyalsoknownas(A, G), companyalsoknownas(D, G).;false;false
8;false;acquired(A, H), economicsectorcompany(B, H).;false;true
8;false,false;acquired(I, A), cityhascompanyoffice(J, I).;true;true
8;false,false,true;acquired(K, I), economicsectorcompany(B, K).;false;false
8;false,false,false;acquired(A, L).;false;false
9;;companyeconomicsector(A, B) :- cityhascompanyoffice(C, A).;true;true
9;true;cityhascompanyoffice(C, D), economicsectorcompany(B, D).;true;false
9;true,true;acquired(E, D), companyceo(D, F).;false;false
9;false;companyalsoknownas(A, G), cityhascompanyoffice(H, G).;true;true
9;false,true;economicsectorcompany(B, G).;false;true
9;false,true,false;acquired(I, G).;false;false
9;false,false;acquired(A, J), economicsectorcompany(B, J).;false;true
9;false,false,false;companyalsoknownas(A, K), economicsectorcompany(B, K).;false;false


WILL Produced-Tree #1
% FOR teamplayssport(A, B):
%   if ( teamalsoknownas(A, C) )
%   then if ( recursion_teamplayssport(C, B) )
%   | then return 0.724815601766179;  // std dev = 1.317, 15.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=13 */
%   | else return 0.3142892859767042;  // std dev = 3.760, 57.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=26 */
%   else if ( teamplaysagainstteam(A, D) )
%   | then if ( recursion_teamplayssport(D, B) )
%   | | then return 0.8196873966379742;  // std dev = 1.698, 78.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=75 */
%   | | else if ( teamalsoknownas(E, A), recursion_teamplayssport(E, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.05751371550289735;  // std dev = 2.532, 83.000 (wgt'ed) examples reached here.  /* #neg=76 #pos=7 */
%   | else if ( athleteplaysforteam(F, A) )
%   | | then if ( athleteledsportsteam(F, G) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.2581489350995122;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | else if ( teamplaysinleague(A, H) )
%   | | | then return 0.3055173561521439;  // std dev = 3.065, 38.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=17 */
%   | | | else return 0.3105298874804647;  // std dev = 3.226, 42.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=19 */
WILL Produced-Tree #2
% FOR teamplayssport(A, B):
%   if ( teamplaysagainstteam(A, C), teamalsoknownas(D, A) )
%   then if ( recursion_teamplayssport(D, B) )
%   | then return 0.5871948651472888;  // std dev = 1.242, 13.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=11 */
%   | else if ( recursion_teamplayssport(C, B), teamplaysinleague(C, E) )
%   | | then return 0.5213019202445065;  // std dev = 0.818, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else return -0.037758582995318944;  // std dev = 1.326, 17.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=2 */
%   else if ( teamalsoknownas(F, A) )
%   | then if ( recursion_teamplayssport(G, B) )
%   | | then return 0.30863656684953933;  // std dev = 2.238, 20.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=10 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( teamalsoknownas(A, H) )
%   | | then if ( recursion_teamplayssport(H, B) )
%   | | | then return 0.7455815941524467;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.3305851163632769;  // std dev = 2.871, 33.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=17 */
%   | | else if ( teamplaysagainstteam(A, I) )
%   | | | then return 0.3050721784400715;  // std dev = 5.255, 142.000 (wgt'ed) examples reached here.  /* #neg=70 #pos=72 */
%   | | | else return 0.26125459688395464;  // std dev = 4.472, 81.000 (wgt'ed) examples reached here.  /* #neg=45 #pos=36 */
WILL Produced-Tree #3
% FOR teamplayssport(A, B):
%   if ( teamalsoknownas(C, A), recursion_teamplayssport(C, B) )
%   then return 0.38237547403323374;  // std dev = 1.594, 16.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=12 */
%   else if ( teamalsoknownas(D, A) )
%   | then if ( teamplaysagainstteam(A, E), recursion_teamplayssport(E, B) )
%   | | then if ( teamplaysinleague(D, F) )
%   | | | then return 0.4989229995014404;  // std dev = 0.884, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( teamplaysagainstteam(D, G), teamplaysagainstteam(A, G) )
%   | | | then return -0.055362280298483814;  // std dev = 0.968, 12.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=1 */
%   | | | else return 0.2039934388066532;  // std dev = 2.227, 21.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=9 */
%   | else if ( teamalsoknownas(A, H), athleteplaysforteam(I, H) )
%   | | then if ( recursion_teamplayssport(H, B) )
%   | | | then return 0.5816627298190181;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return -0.1145541173955671;  // std dev = 0.935, 8.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */
%   | | else return 0.25689910056935616;  // std dev = 0.461, 248.000 (wgt'ed) examples reached here.  /* #neg=124 #pos=124 */
WILL Produced-Tree #4
% FOR teamplayssport(A, B):
%   if ( teamalsoknownas(C, A), teamalsoknownas(D, C) )
%   then if ( recursion_teamplayssport(D, B) )
%   | then if ( athleteplaysforteam(E, C) )
%   | | then return 0.5121629238587516;  // std dev = 0.026, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return 0.18393545389084473;  // std dev = 2.578, 27.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=13 */
%   | else if ( athleteplaysforteam(F, A) )
%   | | then if ( teamplaysagainstteam(A, G), recursion_teamplayssport(G, B) )
%   | | | then return 0.4900232452772272;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | | else return -0.04641613054824939;  // std dev = 0.978, 10.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=1 */
%   | | else if ( teamalsoknownas(H, D), recursion_teamplayssport(H, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.2226139502796904;  // std dev = 0.073, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   else return 0.2076210103869024;  // std dev = 7.408, 273.000 (wgt'ed) examples reached here.  /* #neg=134 #pos=139 */
WILL Produced-Tree #5
% FOR teamplayssport(A, B):
%   if ( teamalsoknownas(A, C), recursion_teamplayssport(C, B) )
%   then return 0.2954091281151723;  // std dev = 1.200, 15.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=13 */
%   else if ( teamalsoknownas(A, D), athleteplaysforteam(E, D) )
%   | then if ( teamalsoknownas(D, F), teamplaysagainstteam(F, G) )
%   | | then if ( teamalsoknownas(H, A) )
%   | | | then return -0.14167519286183478;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | | else return -0.25691623016534837;  // std dev = 5.27e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else if ( teamalsoknownas(D, I), recursion_teamplayssport(I, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.07484392815155305;  // std dev = 0.900, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | else if ( teamalsoknownas(J, A), recursion_teamplayssport(J, B) )
%   | | then if ( teamplaysagainstteam(A, K), teamalsoknownas(L, J) )
%   | | | then return 0.37720686662893516;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.17139890565157598;  // std dev = 0.970, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | | else if ( teamplaysagainstteam(A, M), recursion_teamplayssport(M, B) )
%   | | | then return 0.4927352587454895;  // std dev = 2.140, 78.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=73 */
%   | | | else return 0.031764943608396226;  // std dev = 6.442, 206.000 (wgt'ed) examples reached here.  /* #neg=141 #pos=65 */
WILL Produced-Tree #6
% FOR teamplayssport(A, B):
%   if ( teamplaysagainstteam(A, C), recursion_teamplayssport(C, B) )
%   then if ( teamalsoknownas(D, A), teamplaysinleague(D, E) )
%   | then return 0.21116518898146427;  // std dev = 1.463, 17.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=14 */
%   | else return 0.37315882296496256;  // std dev = 2.051, 84.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=79 */
%   else if ( teamalsoknownas(F, A), teamalsoknownas(G, F) )
%   | then if ( recursion_teamplayssport(G, B) )
%   | | then return 0.12775127550838764;  // std dev = 2.308, 22.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=10 */
%   | | else if ( teamplaysinleague(A, H), teamplaysagainstteam(A, I) )
%   | | | then return -0.05063516041808563;  // std dev = 0.979, 11.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=1 */
%   | | | else return -0.23795396891974957;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( teamplaysinleague(A, J) )
%   | | then if ( teamplaysinleague(K, J), recursion_teamplayssport(K, B) )
%   | | | then return 0.3309557010094325;  // std dev = 3.295, 50.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=32 */
%   | | | else return -0.2707722147059236;  // std dev = 0.327, 76.000 (wgt'ed) examples reached here.  /* #neg=76 */
%   | | else if ( teamalsoknownas(A, L) )
%   | | | then return 0.058527539568542404;  // std dev = 1.320, 8.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=3 */
%   | | | else return 0.09564792797495512;  // std dev = 3.413, 49.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=20 */
WILL Produced-Tree #7
% FOR teamplayssport(A, B):
%   if ( teamalsoknownas(C, A), athleteplaysforteam(D, C) )
%   then if ( recursion_teamplayssport(C, B) )
%   | then return 0.165094162643979;  // std dev = 1.006, 11.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=9 */
%   | else if ( teamalsoknownas(E, C) )
%   | | then return -0.009514815409237345;  // std dev = 0.771, 10.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | | else return 0.15037357544281746;  // std dev = 0.895, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   else if ( teamplaysagainstteam(A, F) )
%   | then if ( teamalsoknownas(G, F), recursion_teamplayssport(G, B) )
%   | | then return 0.2924908609748373;  // std dev = 1.573, 60.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=57 */
%   | | else if ( athleteplaysforteam(H, A), teamalsoknownas(I, F) )
%   | | | then return -0.12564969534473208;  // std dev = 2.288, 58.000 (wgt'ed) examples reached here.  /* #neg=48 #pos=10 */
%   | | | else return 0.01535723000048155;  // std dev = 2.579, 57.000 (wgt'ed) examples reached here.  /* #neg=34 #pos=23 */
%   | else if ( teamplaysagainstteam(A, J), teamalsoknownas(K, J) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( teamplaysagainstteam(A, L) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.1265230902625924;  // std dev = 5.165, 117.000 (wgt'ed) examples reached here.  /* #neg=61 #pos=56 */
WILL Produced-Tree #8
% FOR teamplayssport(A, B):
%   if ( teamalsoknownas(A, C), recursion_teamplayssport(C, B) )
%   then return 0.11961395076635704;  // std dev = 1.190, 15.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=13 */
%   else if ( teamalsoknownas(A, D), athleteplaysforteam(E, D) )
%   | then if ( teamplaysagainstteam(D, F), teamalsoknownas(F, G) )
%   | | then if ( recursion_teamplayssport(G, B) )
%   | | | then return 0.6156802696818827;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | | else return -0.18946935851080854;  // std dev = 0.175, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( teamalsoknownas(A, H) )
%   | | then if ( teamalsoknownas(H, I) )
%   | | | then return 0.13114410312380276;  // std dev = 3.138, 44.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=23 */
%   | | | else return 0.10441111388110806;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( athleteplaysforteam(J, A) )
%   | | | then return 0.060326683827997406;  // std dev = 3.325, 127.000 (wgt'ed) examples reached here.  /* #neg=62 #pos=65 */
%   | | | else return 0.06383186104266339;  // std dev = 4.792, 119.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=55 */
WILL Produced-Tree #9
% FOR teamplayssport(A, B):
%   if ( recursion_teamplayssport(C, B) )
%   then if ( teamalsoknownas(D, C), teamalsoknownas(C, E) )
%   | then return 0.11678997497028121;  // std dev = 5.690, 212.000 (wgt'ed) examples reached here.  /* #neg=83 #pos=129 */
%   | else if ( teamplaysagainstteam(A, F), teamplaysagainstteam(C, F) )
%   | | then return 0.09347580709976197;  // std dev = 1.722, 28.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=18 */
%   | | else return -0.12940064485219785;  // std dev = 2.777, 78.000 (wgt'ed) examples reached here.  /* #neg=66 #pos=12 */
%   else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR teamplayssport(A, B):
%   if ( recursion_teamplayssport(C, B) )
%   then if ( teamalsoknownas(C, D), athleteplaysforteam(E, C) )
%   | then return 0.14027950674279152;  // std dev = 5.767, 229.000 (wgt'ed) examples reached here.  /* #neg=74 #pos=155 */
%   | else return -0.2101818290172687;  // std dev = 2.039, 89.000 (wgt'ed) examples reached here.  /* #neg=85 #pos=4 */
%   else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 0.911806
   AUC PR    = 0.875456
   CLL	      = -0.466172
   Precision = 0.857143 at threshold = 0.5
   Recall    = 0.687023
   F1        = 0.762712


Total learning time: 9.795 seconds
Total inference time: 3.962 seconds
AUC ROC: 0.911806


Results scoring model
   AUC ROC   = 0.931589
   AUC PR    = 0.928092
   CLL	      = -0.436308
   Precision = 0.892308 at threshold = 0.5
   Recall    = 0.72956
   F1        = 0.802768


Total scoring time: 4.232 seconds
Parameter learned model CLL: -0.436308


Structure after Parameter Learning
[['teamplayssport(A, B)', {'': 'teamalsoknownas(A, C)', 'true': 'recursion_teamplayssport(C, B)', 'false': 'teamplaysagainstteam(A, D)', 'false,true': 'recursion_teamplayssport(D, B)', 'false,true,false': 'teamalsoknownas(E, A), recursion_teamplayssport(E, B)', 'false,false': 'athleteplaysforteam(F, A)', 'false,false,true': 'athleteledsportsteam(F, G)', 'false,false,false': 'teamplaysinleague(A, H)'}, {'true,true': [1.317, 2, 13], 'true,false': [3.76, 31, 26], 'false,true,true': [1.698, 3, 75], 'false,true,false,true': [0.0, 0, 0], 'false,true,false,false': [2.532, 76, 7], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [1.095, 3, 2], 'false,false,false,true': [3.065, 21, 17], 'false,false,false,false': [3.226, 23, 19]}], ['teamplayssport(A, B)', {'': 'teamplaysagainstteam(A, C), teamalsoknownas(D, A)', 'true': 'recursion_teamplayssport(D, B)', 'true,false': 'recursion_teamplayssport(C, B), teamplaysinleague(C, E)', 'false': 'teamalsoknownas(F, A)', 'false,true': 'recursion_teamplayssport(G, B)', 'false,false': 'teamalsoknownas(A, H)', 'false,false,true': 'recursion_teamplayssport(H, B)', 'false,false,false': 'teamplaysagainstteam(A, I)'}, {'true,true': [1.242, 2, 11], 'true,false,true': [0.818, 1, 3], 'true,false,false': [1.326, 15, 2], 'false,true,true': [2.238, 10, 10], 'false,true,false': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 8], 'false,false,true,false': [2.871, 16, 17], 'false,false,false,true': [5.255, 70, 72], 'false,false,false,false': [4.472, 45, 36]}], ['teamplayssport(A, B)', {'': 'teamalsoknownas(C, A), recursion_teamplayssport(C, B)', 'false': 'teamalsoknownas(D, A)', 'false,true': 'teamplaysagainstteam(A, E), recursion_teamplayssport(E, B)', 'false,true,true': 'teamplaysinleague(D, F)', 'false,true,false': 'teamplaysagainstteam(D, G), teamplaysagainstteam(A, G)', 'false,false': 'teamalsoknownas(A, H), athleteplaysforteam(I, H)', 'false,false,true': 'recursion_teamplayssport(H, B)'}, {'true': [1.594, 4, 12], 'false,true,true,true': [0.884, 1, 4], 'false,true,true,false': [0.0, 0, 0], 'false,true,false,true': [0.968, 11, 1], 'false,true,false,false': [2.227, 12, 9], 'false,false,true,true': [0.0, 0, 8], 'false,false,true,false': [0.935, 7, 1], 'false,false,false': [0.461, 124, 124]}], ['teamplayssport(A, B)', {'': 'teamalsoknownas(C, A), teamalsoknownas(D, C)', 'true': 'recursion_teamplayssport(D, B)', 'true,true': 'athleteplaysforteam(E, C)', 'true,false': 'athleteplaysforteam(F, A)', 'true,false,true': 'teamplaysagainstteam(A, G), recursion_teamplayssport(G, B)', 'true,false,false': 'teamalsoknownas(H, D), recursion_teamplayssport(H, B)'}, {'true,true,true': [0.026, 0, 5], 'true,true,false': [2.578, 14, 13], 'true,false,true,true': [0.0, 0, 1], 'true,false,true,false': [0.978, 9, 1], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [0.073, 2, 0], 'false': [7.408, 134, 139]}], ['teamplayssport(A, B)', {'': 'teamalsoknownas(A, C), recursion_teamplayssport(C, B)', 'false': 'teamalsoknownas(A, D), athleteplaysforteam(E, D)', 'false,true': 'teamalsoknownas(D, F), teamplaysagainstteam(F, G)', 'false,true,true': 'teamalsoknownas(H, A)', 'false,true,false': 'teamalsoknownas(D, I), recursion_teamplayssport(I, B)', 'false,false': 'teamalsoknownas(J, A), recursion_teamplayssport(J, B)', 'false,false,true': 'teamplaysagainstteam(A, K), teamalsoknownas(L, J)', 'false,false,false': 'teamplaysagainstteam(A, M), recursion_teamplayssport(M, B)'}, {'true': [1.2, 2, 13], 'false,true,true,true': [0.0, 1, 0], 'false,true,true,false': [5.27e-09, 3, 0], 'false,true,false,true': [0.0, 0, 0], 'false,true,false,false': [0.9, 5, 1], 'false,false,true,true': [0.0, 0, 3], 'false,false,true,false': [0.97, 2, 4], 'false,false,false,true': [2.14, 5, 73], 'false,false,false,false': [6.442, 141, 65]}], ['teamplayssport(A, B)', {'': 'teamplaysagainstteam(A, C), recursion_teamplayssport(C, B)', 'true': 'teamalsoknownas(D, A), teamplaysinleague(D, E)', 'false': 'teamalsoknownas(F, A), teamalsoknownas(G, F)', 'false,true': 'recursion_teamplayssport(G, B)', 'false,true,false': 'teamplaysinleague(A, H), teamplaysagainstteam(A, I)', 'false,false': 'teamplaysinleague(A, J)', 'false,false,true': 'teamplaysinleague(K, J), recursion_teamplayssport(K, B)', 'false,false,false': 'teamalsoknownas(A, L)'}, {'true,true': [1.463, 3, 14], 'true,false': [2.051, 5, 79], 'false,true,true': [2.308, 12, 10], 'false,true,false,true': [0.979, 10, 1], 'false,true,false,false': [0.0, 1, 0], 'false,false,true,true': [3.295, 18, 32], 'false,false,true,false': [0.327, 76, 0], 'false,false,false,true': [1.32, 5, 3], 'false,false,false,false': [3.413, 29, 20]}], ['teamplayssport(A, B)', {'': 'teamalsoknownas(C, A), athleteplaysforteam(D, C)', 'true': 'recursion_teamplayssport(C, B)', 'true,false': 'teamalsoknownas(E, C)', 'false': 'teamplaysagainstteam(A, F)', 'false,true': 'teamalsoknownas(G, F), recursion_teamplayssport(G, B)', 'false,true,false': 'athleteplaysforteam(H, A), teamalsoknownas(I, F)', 'false,false': 'teamplaysagainstteam(A, J), teamalsoknownas(K, J)', 'false,false,false': 'teamplaysagainstteam(A, L)'}, {'true,true': [1.006, 2, 9], 'true,false,true': [0.771, 8, 2], 'true,false,false': [0.895, 3, 2], 'false,true,true': [1.573, 3, 57], 'false,true,false,true': [2.288, 48, 10], 'false,true,false,false': [2.579, 34, 23], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [5.165, 61, 56]}], ['teamplayssport(A, B)', {'': 'teamalsoknownas(A, C), recursion_teamplayssport(C, B)', 'false': 'teamalsoknownas(A, D), athleteplaysforteam(E, D)', 'false,true': 'teamplaysagainstteam(D, F), teamalsoknownas(F, G)', 'false,true,true': 'recursion_teamplayssport(G, B)', 'false,false': 'teamalsoknownas(A, H)', 'false,false,true': 'teamalsoknownas(H, I)', 'false,false,false': 'athleteplaysforteam(J, A)'}, {'true': [1.19, 2, 13], 'false,true,true,true': [0.0, 0, 1], 'false,true,true,false': [0.175, 9, 0], 'false,true,false': [0.0, 0, 0], 'false,false,true,true': [3.138, 21, 23], 'false,false,true,false': [0.816, 1, 2], 'false,false,false,true': [3.325, 62, 65], 'false,false,false,false': [4.792, 64, 55]}], ['teamplayssport(A, B)', {'': 'recursion_teamplayssport(C, B)', 'true': 'teamalsoknownas(D, C), teamalsoknownas(C, E)', 'true,false': 'teamplaysagainstteam(A, F), teamplaysagainstteam(C, F)'}, {'true,true': [5.69, 83, 129], 'true,false,true': [1.722, 10, 18], 'true,false,false': [2.777, 66, 12], 'false': [0.0, 0, 0]}], ['teamplayssport(A, B)', {'': 'recursion_teamplayssport(C, B)', 'true': 'teamalsoknownas(C, D), athleteplaysforteam(E, C)'}, {'true,true': [5.767, 74, 155], 'true,false': [2.039, 85, 4], 'false': [0.0, 0, 0]}]]
[{'': [0.24826388888889017, 0.2498512790005983], 'false': [0.24991319779329602, 0.24719723183391157], 'false,true': [0.03698224852070899, 0.07722456089417938], 'true': [0.11555555555555533, 0.24807633117882563], 'false,false': [0.24000000000000005, 0.2475000000000016], 'false,false,false': [0.24722991689750642, 0.24773242630385445], 'false,false,true': [nan, 0.24000000000000005], 'false,true,false': [nan, 0.07722456089417935]}, {'': [0.20996186036478223, 0.22039466667457183], 'false': [0.25044193587689695, 0.2181183428101123], 'false,true': [0.25044193587689695, nan], 'false,false': [0.22808210717182137, 0.21395958793321482], 'false,false,true': [-1.1102230246251565e-16, 0.24977043158861312], 'false,false,false': [0.19448683133835196, 0.24687442462466525], 'true': [0.11857119289735184, 0.16375799678513095], 'true,false': [0.16738176478136796, 0.10337227000946697]}, {'': [0.15889107678841666, 0.2109394386294238], 'false': [0.20654420536853194, 0.21044636323089602], 'false,false': [0.17586697458635434, 0.21264426247456725], 'false,true': [0.15617058080164353, 0.19424126392633545], 'false,true,false': [0.07805484499470505, 0.23617336184945928], 'false,false,true': [-1.1102230246251565e-16, 0.10937500000000003], 'false,true,true': [0.15617058080164353, nan]}, {'': [0.20153660369657797, 0.20099539828833007], 'true': [0.22184401495324274, 0.10067232589868567], 'true,true': [0.00013473120094507074, 0.2460679659656971], 'true,false': [0.11070524859169882, 0.0026680249148356497], 'true,false,true': [0.0, 0.09561511854759354], 'true,false,false': [nan, 0.0026680249148356497]}, {'': [0.09600218538033929, 0.20104937220872618], 'false': [0.08759766521109244, 0.20200975250207331], 'false,false': [0.11388736981019182, 0.20459767316391725], 'false,false,false': [0.05870669421797454, 0.20147701980126442], 'false,false,true': [-3.700743415417188e-17, 0.1567120824480683], 'false,true': [0.0024900931272731006, 0.13494034510875616], 'false,true,false': [nan, 0.13494034510875616], 'false,true,true': [0.0, 9.25185853854297e-18]}, {'': [0.0664976604340196, 0.1961366832088769], 'false': [0.19444870476794152, 0.1960078562070068], 'false,false': [0.17367712344228348, 0.2350502718090048], 'false,false,false': [0.2177840762679689, 0.23767584977478307], 'false,true': [0.2422117438201913, 0.08253134700123425], 'false,false,true': [0.21713575483200465, 0.0014047739174714025], 'false,true,false': [0.08711016872707891, 0.0], 'true': [0.12591427741662722, 0.050055909132814644]}, {'': [0.09948139961180542, 0.1598101797056766], 'false': [0.11265120644672684, 0.22797730071983924], 'false,false': [nan, 0.22797730071983924], 'false,false,false': [nan, 0.22797730071983924], 'false,true': [0.041226245622802686, 0.10833531346251106], 'false,true,false': [0.09025958379449185, 0.11670023707550761], 'true': [0.09206078234574654, 0.09869684416950765], 'true,false': [0.05947357236127933, 0.1601005227664581]}, {'': [0.09445088840073734, 0.15064127158971752], 'false': [0.06139052270729969, 0.15259668313400046], 'false,false': [0.22377764222708993, 0.13826803245345706], 'false,false,true': [0.223843731396291, 0.22213929782896188], 'false,false,false': [0.08703598603740052, 0.19293790714679032], 'false,true': [0.06139052270729969, nan], 'false,true,true': [0.0, 0.003385099519116783]}, {'': [0.1464132376100257, nan], 'true': [0.15274056658096044, 0.11036665879240547], 'true,false': [0.10592612563058697, 0.0988392854002072]}, {'': [0.14241948556187556, nan], 'true': [0.1452479783506249, 0.04669356236024617]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
1;;teamplayssport(A, B) :- teamplaysagainstteam(A, C), teamalsoknownas(D, A).;true;true
1;false;teamalsoknownas(F, A).;true;true
1;false,false;teamalsoknownas(A, H).;true;true
1;false,false,true;recursion_teamplayssport(H, B).;true;true
2;;teamplayssport(A, B) :- teamalsoknownas(C, A), recursion_teamplayssport(C, B).;true;true
2;false;teamalsoknownas(D, A).;true;true
2;false,false;teamalsoknownas(A, H), athleteplaysforteam(I, H).;true;true
2;false,false,true;recursion_teamplayssport(H, B).;true;true
3;;teamplayssport(A, B) :- teamalsoknownas(C, A), teamalsoknownas(D, C).;true;true
3;true;recursion_teamplayssport(D, B).;true;true
3;true,true;athleteplaysforteam(E, C).;true;true
3;true,false;athleteplaysforteam(F, A).;true;true
3;true,false,true;teamplaysagainstteam(A, G), recursion_teamplayssport(G, B).;true;true
4;;teamplayssport(A, B) :- teamalsoknownas(A, C), recursion_teamplayssport(C, B).;true;true
4;false;teamalsoknownas(A, D), athleteplaysforteam(E, D).;true;true
4;false,true;teamalsoknownas(D, F), teamplaysagainstteam(F, G).;true;true
4;false,true,true;teamalsoknownas(H, A).;true;true
4;false,false;teamalsoknownas(J, A), recursion_teamplayssport(J, B).;true;true
4;false,false,true;teamplaysagainstteam(A, K), teamalsoknownas(L, J).;true;true
5;;teamplayssport(A, B) :- teamplaysagainstteam(A, C), recursion_teamplayssport(C, B).;true;true
5;false;teamalsoknownas(F, A), teamalsoknownas(G, F).;true;true
5;false,true;recursion_teamplayssport(G, B).;true;true
5;false,true,false;teamplaysinleague(A, H), teamplaysagainstteam(A, I).;true;true
5;false,false;teamplaysinleague(A, J).;true;true
5;false,false,true;teamplaysinleague(K, J), recursion_teamplayssport(K, B).;true;true
7;;teamplayssport(A, B) :- teamalsoknownas(A, C), recursion_teamplayssport(C, B).;true;true
7;false;teamalsoknownas(A, D), athleteplaysforteam(E, D).;true;true
7;false,true;recursion_teamplayssport(G, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR teamplayssport(A, B):
%   if ( athleteplayssport(C, B), athleteplaysinleague(C, D) )
%   then if ( teamplaysagainstteam(A, E), recursion_teamplayssport(E, B) )
%   | then if ( teamplaysinleague(E, D), teamplaysinleague(A, D) )
%   | | then return 0.8581489350995127;  // std dev = 0.000, 70.000 (wgt'ed) examples reached here.  /* #pos=70 */
%   | | else if ( athleteledsportsteam(C, F), teamalsoknownas(E, G) )
%   | | | then return 0.31968739663797385;  // std dev = 1.797, 13.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=6 */
%   | | | else return 0.8025933795439567;  // std dev = 0.972, 18.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=17 */
%   | else if ( teamplaysagainstteam(A, H), teamplaysagainstteam(H, A) )
%   | | then if ( athleteledsportsteam(I, A) )
%   | | | then return -0.1418510649004878;  // std dev = 0.000, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | | | else return 0.10814893509951236;  // std dev = 2.121, 24.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=6 */
%   | | else if ( athleteledsportsteam(C, J) )
%   | | | then return 0.5543514667450825;  // std dev = 4.088, 79.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=55 */
%   | | | else return -0.04185106490048778;  // std dev = 0.949, 10.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=1 */
%   else if ( teamalsoknownas(K, A), athleteplaysforteam(L, K) )
%   | then return 0.039967116917694;  // std dev = 0.386, 11.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=2 */
%   | else return -0.11621003925946208;  // std dev = 0.158, 78.000 (wgt'ed) examples reached here.  /* #neg=76 #pos=2 */
WILL Produced-Tree #2
% FOR teamplayssport(A, B):
%   if ( teamplaysagainstteam(A, C), teamalsoknownas(D, A) )
%   then if ( teamplaysagainstteam(A, E), recursion_teamplayssport(E, B) )
%   | then return 0.5770267667148493;  // std dev = 0.355, 18.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=15 */
%   | else return -0.08227963280675438;  // std dev = 0.242, 16.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=1 */
%   else if ( teamalsoknownas(F, A) )
%   | then if ( athleteplayssport(G, B), athleteplaysinleague(G, H) )
%   | | then if ( teamplaysinleague(A, I), teamalsoknownas(A, J) )
%   | | | then return 0.28520787160933747;  // std dev = 1.556, 10.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
%   | | | else return 0.5938700506038471;  // std dev = 0.917, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else return 0.06801492165191184;  // std dev = 0.878, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else if ( teamalsoknownas(A, K) )
%   | | then if ( recursion_teamplayssport(K, B) )
%   | | | then return 0.720857783663327;  // std dev = 0.010, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.32631747724976307;  // std dev = 2.653, 33.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=17 */
%   | | else if ( teamplaysagainstteam(A, L), recursion_teamplayssport(L, B) )
%   | | | then return 0.6860343248525718;  // std dev = 1.552, 69.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=66 */
%   | | | else return 0.10872285455399636;  // std dev = 5.187, 154.000 (wgt'ed) examples reached here.  /* #neg=112 #pos=42 */
WILL Produced-Tree #3
% FOR teamplayssport(A, B):
%   if ( teamalsoknownas(C, A), recursion_teamplayssport(C, B) )
%   then if ( teamplaysagainstteam(A, D), teamalsoknownas(D, A) )
%   | then return 0.5304521061452522;  // std dev = 0.249, 12.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=11 */
%   | else return -0.017598629775883085;  // std dev = 0.931, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   else if ( teamalsoknownas(E, A) )
%   | then if ( athleteplayssport(F, B), athleteledsportsteam(F, G) )
%   | | then if ( teamplaysinleague(A, H), teamplaysinleague(G, H) )
%   | | | then return 0.658718693746301;  // std dev = 0.158, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return 0.10426795331896847;  // std dev = 1.665, 14.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=5 */
%   | | else return -0.01802081578790057;  // std dev = 0.318, 17.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=2 */
%   | else if ( teamalsoknownas(A, I), athleteplaysforteam(J, I) )
%   | | then if ( recursion_teamplayssport(I, B) )
%   | | | then return 0.5567339816409301;  // std dev = 0.013, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return -0.07921763136975259;  // std dev = 0.782, 8.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */
%   | | else if ( athleteplayssport(K, B), athleteledsportsteam(K, L) )
%   | | | then return 0.4148924217562103;  // std dev = 5.083, 164.000 (wgt'ed) examples reached here.  /* #neg=46 #pos=118 */
%   | | | else return -0.08612444601573117;  // std dev = 1.954, 84.000 (wgt'ed) examples reached here.  /* #neg=78 #pos=6 */
WILL Produced-Tree #4
% FOR teamplayssport(A, B):
%   if ( teamalsoknownas(C, A), teamalsoknownas(D, C) )
%   then if ( recursion_teamplayssport(D, B) )
%   | then if ( athleteplaysforteam(E, C) )
%   | | then return 0.4881431117659627;  // std dev = 0.117, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else if ( athleteplaysforteam(F, A) )
%   | | | then return 0.0732473383074025;  // std dev = 1.255, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | | else return 0.2432999544148668;  // std dev = 1.867, 17.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=9 */
%   | else if ( athleteplaysforteam(G, A) )
%   | | then return 0.008272565632373753;  // std dev = 0.315, 11.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=2 */
%   | | else return -0.1343221911053165;  // std dev = 0.000484, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   else if ( athleteplayssport(H, B), athleteledsportsteam(H, I) )
%   | then if ( teamplaysinleague(A, J), athleteplaysinleague(H, J) )
%   | | then return 0.45291908927169533;  // std dev = 0.167, 79.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=75 */
%   | | else if ( teamplaysagainstteam(A, K), athleteledsportsteam(L, K) )
%   | | | then return -0.0011927455641801438;  // std dev = 2.250, 33.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=10 */
%   | | | else return 0.3212357230952024;  // std dev = 3.844, 70.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=46 */
%   | else return -0.0677860598464435;  // std dev = 0.221, 91.000 (wgt'ed) examples reached here.  /* #neg=83 #pos=8 */
WILL Produced-Tree #5
% FOR teamplayssport(A, B):
%   if ( teamalsoknownas(A, C), recursion_teamplayssport(C, B) )
%   then if ( teamalsoknownas(A, D), teamplaysagainstteam(E, D) )
%   | then return 0.3446330777287396;  // std dev = 0.173, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | else return 0.03886601072697828;  // std dev = 0.865, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   else if ( teamalsoknownas(A, F), athleteplaysforteam(G, F) )
%   | then if ( teamalsoknownas(F, H), teamplaysagainstteam(H, I) )
%   | | then if ( teamalsoknownas(J, A) )
%   | | | then return -0.11976520083701793;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | | else return -0.1745108108794516;  // std dev = 0.061, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else return -0.05849007263314173;  // std dev = 0.685, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | else if ( teamalsoknownas(K, A), recursion_teamplayssport(K, B) )
%   | | then if ( teamplaysagainstteam(A, L), teamalsoknownas(M, K) )
%   | | | then return 0.3851616998714273;  // std dev = 0.105, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.134673672697849;  // std dev = 0.877, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | | else if ( athleteplayssport(N, B), athleteledsportsteam(N, P) )
%   | | | then return 0.2453371684108794;  // std dev = 5.172, 185.000 (wgt'ed) examples reached here.  /* #neg=55 #pos=130 */
%   | | | else return -0.05811804839191483;  // std dev = 2.370, 99.000 (wgt'ed) examples reached here.  /* #neg=91 #pos=8 */
WILL Produced-Tree #6
% FOR teamplayssport(A, B):
%   if ( teamplaysagainstteam(A, C), recursion_teamplayssport(C, B) )
%   then return 0.27958940786434844;  // std dev = 0.223, 101.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=93 */
%   else if ( teamalsoknownas(D, A), teamalsoknownas(E, D) )
%   | then if ( recursion_teamplayssport(E, B) )
%   | | then if ( athleteplaysforteam(F, A) )
%   | | | then return -0.09041806572738156;  // std dev = 0.674, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else return 0.1589012566061582;  // std dev = 1.837, 17.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=9 */
%   | | else if ( teamplaysinleague(A, G), teamplaysagainstteam(A, H) )
%   | | | then return -0.039132411648801886;  // std dev = 0.957, 11.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=1 */
%   | | | else return -0.11318064095422858;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( teamplaysinleague(A, I) )
%   | | then if ( teamplaysinleague(J, I), recursion_teamplayssport(J, B) )
%   | | | then return 0.26179403941438656;  // std dev = 2.596, 50.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=32 */
%   | | | else return -0.1796220548713668;  // std dev = 0.982, 76.000 (wgt'ed) examples reached here.  /* #neg=76 */
%   | | else if ( athleteplayssport(K, B), athleteplaysforteam(K, L) )
%   | | | then return 0.13061312660666533;  // std dev = 2.994, 42.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=22 */
%   | | | else return -0.058185101171186096;  // std dev = 0.975, 15.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=1 */
WILL Produced-Tree #7
% FOR teamplayssport(A, B):
%   if ( athleteplayssport(C, B), athleteplaysinleague(C, D) )
%   then if ( teamplaysagainstteam(E, A), teamalsoknownas(F, E) )
%   | then if ( recursion_teamplayssport(F, B) )
%   | | then return 0.22756972498049757;  // std dev = 0.193, 68.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=64 */
%   | | else if ( teamalsoknownas(G, F), teamplaysagainstteam(G, E) )
%   | | | then return 0.031435166369207256;  // std dev = 1.917, 22.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=11 */
%   | | | else return -0.21157182201733266;  // std dev = 0.648, 18.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=1 */
%   | else if ( athleteledsportsteam(C, H) )
%   | | then if ( teamplaysagainstteam(I, A), recursion_teamplayssport(I, B) )
%   | | | then return 0.2908163853702507;  // std dev = 0.758, 24.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=23 */
%   | | | else return 0.14143440866441193;  // std dev = 4.013, 85.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=53 */
%   | | else if ( teamplaysinleague(A, J) )
%   | | | then return -0.16281503318116;  // std dev = 0.099, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | | else return 0.21174413803598083;  // std dev = 0.852, 6.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   else if ( teamplaysagainstteam(A, K), teamalsoknownas(L, K) )
%   | then return -0.1086421621090441;  // std dev = 0.092, 40.000 (wgt'ed) examples reached here.  /* #neg=40 */
%   | else return -0.03754930919477041;  // std dev = 0.268, 49.000 (wgt'ed) examples reached here.  /* #neg=45 #pos=4 */
WILL Produced-Tree #8
% FOR teamplayssport(A, B):
%   if ( teamalsoknownas(A, C), recursion_teamplayssport(C, B) )
%   then if ( teamalsoknownas(D, A), teamplaysinleague(A, E) )
%   | then return 0.010090420873289077;  // std dev = 0.718, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | else return 0.22687847905303224;  // std dev = 0.152, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   else if ( teamalsoknownas(A, F), athleteplaysforteam(G, F) )
%   | then if ( recursion_teamplayssport(H, B) )
%   | | then if ( athleteplayssport(I, B), athleteledsportsteam(J, A) )
%   | | | then return 0.01773905700066116;  // std dev = 0.501, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | else return -0.14765941365639124;  // std dev = 0.135, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( athleteplayssport(K, B), athleteplaysinleague(K, L) )
%   | | then if ( teamplaysinleague(A, L), athleteledsportsteam(K, M) )
%   | | | then return 0.20965767090538587;  // std dev = 1.129, 72.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=69 */
%   | | | else return 0.058522047762507606;  // std dev = 4.795, 137.000 (wgt'ed) examples reached here.  /* #neg=65 #pos=72 */
%   | | else if ( teamalsoknownas(N, A), athleteplaysforteam(P, N) )
%   | | | then return 0.10326448604888681;  // std dev = 1.185, 9.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | | | else return -0.07980206731799354;  // std dev = 1.393, 75.000 (wgt'ed) examples reached here.  /* #neg=73 #pos=2 */
WILL Produced-Tree #9
% FOR teamplayssport(A, B):
%   if ( teamplaysagainstteam(A, C), recursion_teamplayssport(C, B) )
%   then if ( teamplaysinleague(A, D), teamplaysinleague(C, D) )
%   | then return 0.18395522903802344;  // std dev = 0.139, 85.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=83 */
%   | else return 0.02316119537827105;  // std dev = 0.416, 16.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=10 */
%   else if ( teamplaysagainstteam(E, A) )
%   | then if ( teamalsoknownas(F, E), athleteledsportsteam(G, F) )
%   | | then return -0.14463251603056243;  // std dev = 0.090, 55.000 (wgt'ed) examples reached here.  /* #neg=55 */
%   | | else if ( teamplaysagainstteam(A, H) )
%   | | | then return -0.042412506101908304;  // std dev = 1.976, 39.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=7 */
%   | | | else return 0.08469304209080929;  // std dev = 1.297, 13.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=8 */
%   | else if ( athleteplayssport(I, B), athleteplaysforteam(I, J) )
%   | | then if ( teamalsoknownas(J, K), teamalsoknownas(K, L) )
%   | | | then return -0.0542543346373016;  // std dev = 2.880, 37.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=18 */
%   | | | else return 0.27953135401407797;  // std dev = 1.991, 42.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=31 */
%   | | else if ( teamplaysinleague(A, M) )
%   | | | then return -0.11843319518168105;  // std dev = 0.144, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | | | else return 0.006258765480014025;  // std dev = 1.155, 14.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=2 */
WILL Produced-Tree #10
% FOR teamplayssport(A, B):
%   if ( teamplaysagainstteam(A, C), recursion_teamplayssport(C, B) )
%   then if ( teamalsoknownas(C, D), athleteplaysforteam(E, C) )
%   | then if ( athleteplayssport(E, B) )
%   | | then return 0.14051737405981296;  // std dev = 0.115, 53.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=52 */
%   | | else if ( athleteledsportsteam(F, A), athleteledsportsteam(E, G) )
%   | | | then return 0.12411517179090166;  // std dev = 0.872, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.20284531654617655;  // std dev = 1.096, 8.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=3 */
%   | else return 0.20482375465804945;  // std dev = 0.160, 35.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=34 */
%   else if ( athleteplayssport(H, B), athleteledsportsteam(H, I) )
%   | then if ( teamplaysagainstteam(J, A), teamplaysagainstteam(A, J) )
%   | | then if ( teamalsoknownas(J, K), teamalsoknownas(K, J) )
%   | | | then return 0.05383653644855688;  // std dev = 1.129, 8.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=3 */
%   | | | else return -0.1740995079927264;  // std dev = 1.380, 28.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=3 */
%   | | else if ( athleteplaysforteam(H, I), teamalsoknownas(I, L) )
%   | | | then return -0.012486619429291525;  // std dev = 3.104, 45.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=24 */
%   | | | else return 0.2730736870673538;  // std dev = 1.503, 34.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=31 */
%   | else return -0.05707412535861581;  // std dev = 0.196, 102.000 (wgt'ed) examples reached here.  /* #neg=97 #pos=5 */


Results
   AUC ROC   = 0.952479
   AUC PR    = 0.94799
   CLL	      = -0.331533
   Precision = 0.882353 at threshold = 0.5
   Recall    = 0.916031
   F1        = 0.898876


Total learning time: 393.517 seconds
Total inference time: 7.658 seconds
AUC ROC: 0.952479


Results scoring model
   AUC ROC   = 0.971164
   AUC PR    = 0.974927
   CLL	      = -0.30524
   Precision = 0.874251 at threshold = 0.5
   Recall    = 0.918239
   F1        = 0.895706


Total scoring time: 7.186 seconds
Refined model CLL: -0.30524


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.952479
   AUC PR    = 0.94799
   CLL	      = -0.331533
   Precision = 0.882353 at threshold = 0.5
   Recall    = 0.916031
   F1        = 0.898876


Total learning time: 414.72999999999996 seconds
Total inference time: 7.658 seconds
AUC ROC: 0.952479
Total revision time: 414.72999999999996
Best scored revision CLL: -0.30524


Dataset: 10_nell_finances_nell_sports, Fold: 3, Type: Transfer (trRDN-B), Time: 21:25:19
{'AUC ROC': 0.952479, 'AUC PR': 0.94799, 'CLL': -0.331533, 'Precision': [0.882353, 0.5], 'Recall': 0.916031, 'F1': 0.898876, 'Learning time': 414.72999999999996, 'Inference time': 7.658, 'parameter_0.6': {'AUC ROC': 0.911806, 'AUC PR': 0.875456, 'CLL': -0.466172, 'Precision': [0.857143, 0.5], 'Recall': 0.687023, 'F1': 0.762712, 'Learning time': 9.795, 'Inference time': 3.962}}


Amount of data: 0.8
******************************************
Performing Parameter Learning
******************************************
Refine
0;;companyeconomicsector(A, B) :- acquired(C, A).;true;true
0;true;economicsectorcompany(B, C).;false;false
0;false;companyalsoknownas(A, D).;true;true
0;false,true;economicsectorcompany(B, D).;false;true
0;false,true,false;acquired(A, E), economicsectorcompany(B, E).;false;false
0;false,false;companyceo(A, F).;true;true
0;false,false,true;bankchiefexecutiveceo(G, F).;false;false
0;false,false,false;countryhascompanyoffice(H, A).;false;false
1;;companyeconomicsector(A, B) :- companyalsoknownas(A, C), acquired(A, D).;true;true
1;true;economicsectorcompany(B, D).;false;true
1;true,false;economicsectorcompany(B, C), countryhascompanyoffice(E, C).;false;false
1;false;acquired(A, F), cityhascompanyoffice(G, A).;true;true
1;false,true;cityhascompanyoffice(G, H), economicsectorcompany(B, H).;false;false
1;false,false;acquired(I, A).;true;true
1;false,false,true;economicsectorcompany(B, I).;false;false
1;false,false,false;companyalsoknownas(A, J).;false;false
2;;companyeconomicsector(A, B) :- acquired(A, C), economicsectorcompany(B, C).;false;true
2;false;acquired(A, D).;true;true
2;false,true;companyalsoknownas(A, E), economicsectorcompany(B, E).;true;true
2;false,true,true;countryhascompanyoffice(F, D).;false;false
2;false,true,false;companyalsoknownas(D, G), companyalsoknownas(A, G).;false;false
2;false,false;acquired(H, A), companyceo(H, I).;true;true
2;false,false,true;economicsectorcompany(B, H).;false;false
2;false,false,false;cityhascompanyoffice(J, A).;false;false
3;;companyeconomicsector(A, B) :- acquired(A, C), acquired(C, D).;true;false
3;true;economicsectorcompany(B, D).;true;true
3;true,true;companyceo(C, E).;false;false
3;true,false;cityhascompanyoffice(F, A), companyceo(A, G).;true;true
3;true,false,true;companyalsoknownas(A, H), economicsectorcompany(B, H).;false;false
3;true,false,false;acquired(D, I), economicsectorcompany(B, I).;false;false
4;;companyeconomicsector(A, B) :- acquired(C, A), economicsectorcompany(B, C).;false;true
4;false;acquired(D, A), companyceo(D, E).;true;true
4;false,true;acquired(F, D), companyalsoknownas(F, G).;true;true
4;false,true,true;acquired(A, H).;false;false
4;false,true,false;acquired(I, D), economicsectorcompany(B, I).;false;false
4;false,false;acquired(A, J), economicsectorcompany(B, J).;true;true
4;false,false,true;companyalsoknownas(A, K), acquired(J, L).;false;false
4;false,false,false;companyalsoknownas(A, M), economicsectorcompany(B, M).;false;false
5;;companyeconomicsector(A, B) :- companyalsoknownas(A, C), economicsectorcompany(B, C).;true;true
5;true;acquired(A, D), countryhascompanyoffice(E, D).;false;false
5;false;acquired(A, F), acquired(F, G).;true;true
5;false,true;economicsectorcompany(B, G).;false;true
5;false,true,false;countryhascompanyoffice(H, A), companyalsoknownas(A, I).;false;false
5;false,false;cityhascompanyoffice(J, A), countryhascompanyoffice(K, A).;true;true
5;false,false,true;countryhascompanyoffice(K, L), economicsectorcompany(B, L).;false;false
5;false,false,false;cityhascompanyoffice(M, A), acquired(N, A).;false;false
6;;companyeconomicsector(A, B) :- acquired(A, C), companyceo(C, D).;true;true
6;true;economicsectorcompany(B, C).;false;true
6;true,false;acquired(C, E).;false;false
6;false;companyalsoknownas(A, F), cityhascompanyoffice(G, F).;true;true
6;false,true;acquired(F, H), economicsectorcompany(B, H).;false;true
6;false,true,false;companyceo(A, I), acquired(F, J).;false;false
6;false,false;companyalsoknownas(A, K), acquired(K, L).;false;true
6;false,false,false;companyalsoknownas(A, M).;false;false
7;;companyeconomicsector(A, B) :- acquired(C, A), economicsectorcompany(B, C).;false;true
7;false;acquired(D, A), companyceo(D, E).;true;true
7;false,true;companyalsoknownas(D, F), acquired(G, F).;true;true
7;false,true,true;economicsectorcompany(B, G).;false;false
7;false,true,false;countryhascompanyoffice(H, D).;false;false
7;false,false;cityhascompanyoffice(I, A), acquired(J, A).;true;true
7;false,false,true;acquired(K, J).;false;false
7;false,false,false;companyceo(A, L).;false;false
8;;companyeconomicsector(A, B) :- cityhascompanyoffice(C, A).;true;true
8;true;cityhascompanyoffice(C, D), economicsectorcompany(B, D).;true;false
8;true,true;acquired(D, E), acquired(F, D).;false;true
8;true,true,false;companyalsoknownas(A, G), companyalsoknownas(D, G).;false;false
8;false;acquired(A, H), economicsectorcompany(B, H).;false;true
8;false,false;acquired(I, A), cityhascompanyoffice(J, I).;true;true
8;false,false,true;acquired(K, I), economicsectorcompany(B, K).;false;false
8;false,false,false;acquired(A, L).;false;false
9;;companyeconomicsector(A, B) :- cityhascompanyoffice(C, A).;true;true
9;true;cityhascompanyoffice(C, D), economicsectorcompany(B, D).;true;false
9;true,true;acquired(E, D), companyceo(D, F).;false;false
9;false;companyalsoknownas(A, G), cityhascompanyoffice(H, G).;true;true
9;false,true;economicsectorcompany(B, G).;false;true
9;false,true,false;acquired(I, G).;false;false
9;false,false;acquired(A, J), economicsectorcompany(B, J).;false;true
9;false,false,false;companyalsoknownas(A, K), economicsectorcompany(B, K).;false;false


WILL Produced-Tree #1
% FOR teamplayssport(A, B):
%   if ( teamalsoknownas(A, C) )
%   then if ( recursion_teamplayssport(C, B) )
%   | then return 0.7331489350995123;  // std dev = 1.323, 16.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=14 */
%   | else return 0.3215635692458527;  // std dev = 4.516, 82.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=38 */
%   else if ( teamplaysagainstteam(D, A) )
%   | then if ( recursion_teamplayssport(D, B) )
%   | | then return 0.7797175625504916;  // std dev = 2.715, 102.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=94 */
%   | | else if ( teamalsoknownas(E, A), recursion_teamplayssport(E, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.06418116198786633;  // std dev = 2.716, 103.000 (wgt'ed) examples reached here.  /* #neg=95 #pos=8 */
%   | else if ( athleteplaysforteam(F, A) )
%   | | then if ( athleteledsportsteam(F, G) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.3581489350995122;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else if ( teamplaysinleague(A, H) )
%   | | | then return 0.3335587711650849;  // std dev = 3.900, 61.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=29 */
%   | | | else return 0.34029179224236833;  // std dev = 3.739, 56.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=27 */
WILL Produced-Tree #2
% FOR teamplayssport(A, B):
%   if ( teamplaysagainstteam(C, A), teamalsoknownas(D, A) )
%   then if ( recursion_teamplayssport(D, B) )
%   | then return 0.6016796615111742;  // std dev = 1.257, 14.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=12 */
%   | else if ( recursion_teamplayssport(C, B), teamplaysinleague(C, E) )
%   | | then return 0.6374897171692516;  // std dev = 0.894, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | else return -0.0085083898762638;  // std dev = 1.607, 21.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=3 */
%   else if ( teamalsoknownas(F, A) )
%   | then if ( recursion_teamplayssport(G, B) )
%   | | then return 0.30947032033672645;  // std dev = 2.830, 32.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=16 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( teamalsoknownas(A, H) )
%   | | then if ( recursion_teamplayssport(H, B) )
%   | | | then return 0.7439976143448207;  // std dev = 2.98e-08, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.2925971662064484;  // std dev = 3.388, 46.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=22 */
%   | | else if ( teamplaysagainstteam(I, A) )
%   | | | then return 0.2965595381799094;  // std dev = 6.002, 181.000 (wgt'ed) examples reached here.  /* #neg=91 #pos=90 */
%   | | | else return 0.29018068616939097;  // std dev = 5.357, 115.000 (wgt'ed) examples reached here.  /* #neg=60 #pos=55 */
WILL Produced-Tree #3
% FOR teamplayssport(A, B):
%   if ( teamalsoknownas(C, A), recursion_teamplayssport(C, B) )
%   then return 0.39636240705354725;  // std dev = 1.618, 17.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=13 */
%   else if ( teamalsoknownas(D, A) )
%   | then if ( teamplaysagainstteam(E, A), recursion_teamplayssport(E, B) )
%   | | then if ( teamplaysinleague(D, F) )
%   | | | then return 0.5111853939737507;  // std dev = 0.887, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( teamplaysagainstteam(G, D), teamplaysagainstteam(G, A) )
%   | | | then return -0.06910938421884573;  // std dev = 0.973, 14.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=1 */
%   | | | else return 0.24776255078928827;  // std dev = 2.978, 36.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=17 */
%   | else if ( teamalsoknownas(A, H), athleteplaysforteam(I, H) )
%   | | then if ( recursion_teamplayssport(H, B) )
%   | | | then return 0.5800195020751665;  // std dev = 2.98e-08, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.01599609428014322;  // std dev = 1.500, 12.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=3 */
%   | | else return 0.2528854626143322;  // std dev = 0.466, 330.000 (wgt'ed) examples reached here.  /* #neg=166 #pos=164 */
WILL Produced-Tree #4
% FOR teamplayssport(A, B):
%   if ( teamalsoknownas(C, A), teamalsoknownas(D, C) )
%   then if ( recursion_teamplayssport(D, B) )
%   | then if ( athleteplaysforteam(E, C) )
%   | | then return 0.5113776640425507;  // std dev = 0.014, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return 0.22991474627998626;  // std dev = 3.087, 39.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=21 */
%   | else if ( athleteplaysforteam(F, A) )
%   | | then if ( teamplaysagainstteam(G, A), recursion_teamplayssport(G, B) )
%   | | | then return 0.4679458530094641;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | | else return 0.03035915604439241;  // std dev = 1.296, 11.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=2 */
%   | | else if ( teamalsoknownas(H, D), recursion_teamplayssport(H, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.258045275335203;  // std dev = 0.097, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   else return 0.2018089437826702;  // std dev = 8.671, 362.000 (wgt'ed) examples reached here.  /* #neg=181 #pos=181 */
WILL Produced-Tree #5
% FOR teamplayssport(A, B):
%   if ( teamalsoknownas(A, C), recursion_teamplayssport(C, B) )
%   then return 0.2951935770703489;  // std dev = 1.220, 16.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=14 */
%   else if ( teamalsoknownas(A, D), athleteplaysforteam(E, D) )
%   | then if ( teamalsoknownas(D, F), teamplaysagainstteam(G, F) )
%   | | then if ( teamalsoknownas(H, A) )
%   | | | then return -0.1401433960080623;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | | else return -0.07527249591345637;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else if ( teamalsoknownas(D, I), recursion_teamplayssport(I, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.013191487035483188;  // std dev = 1.208, 8.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | else if ( teamalsoknownas(J, A), recursion_teamplayssport(J, B) )
%   | | then if ( teamplaysagainstteam(K, A), teamalsoknownas(L, J) )
%   | | | then return 0.3800968199189024;  // std dev = 7.45e-09, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.17042491502666932;  // std dev = 0.988, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | | else if ( teamplaysagainstteam(M, A), recursion_teamplayssport(M, B) )
%   | | | then return 0.4707548680672948;  // std dev = 3.014, 105.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=95 */
%   | | | else return 0.041068215847830006;  // std dev = 7.595, 280.000 (wgt'ed) examples reached here.  /* #neg=187 #pos=93 */
WILL Produced-Tree #6
% FOR teamplayssport(A, B):
%   if ( teamplaysagainstteam(C, A), recursion_teamplayssport(C, B) )
%   then if ( teamalsoknownas(D, A), teamplaysinleague(D, E) )
%   | then return 0.21245967665932586;  // std dev = 1.472, 20.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=17 */
%   | else return 0.3721021817374962;  // std dev = 2.926, 110.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=101 */
%   else if ( teamalsoknownas(F, A), teamalsoknownas(G, F) )
%   | then if ( recursion_teamplayssport(G, B) )
%   | | then return 0.16801972345459606;  // std dev = 2.867, 33.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=17 */
%   | | else if ( teamplaysinleague(A, H), teamplaysagainstteam(I, A) )
%   | | | then return 0.00963472845721379;  // std dev = 1.303, 12.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=2 */
%   | | | else return -0.24380732959291476;  // std dev = 0.003, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( teamplaysinleague(A, J) )
%   | | then if ( teamplaysinleague(K, J), recursion_teamplayssport(K, B) )
%   | | | then return 0.29611227544666896;  // std dev = 4.072, 73.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=45 */
%   | | | else return -0.27055373606678573;  // std dev = 0.437, 103.000 (wgt'ed) examples reached here.  /* #neg=103 */
%   | | else if ( teamalsoknownas(A, L) )
%   | | | then return 0.012954505104627182;  // std dev = 1.387, 9.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=3 */
%   | | | else return 0.11715618696817456;  // std dev = 3.844, 61.000 (wgt'ed) examples reached here.  /* #neg=34 #pos=27 */
WILL Produced-Tree #7
% FOR teamplayssport(A, B):
%   if ( teamalsoknownas(C, A), athleteplaysforteam(D, C) )
%   then if ( recursion_teamplayssport(C, B) )
%   | then return 0.17124579687713337;  // std dev = 1.033, 12.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=10 */
%   | else if ( teamalsoknownas(E, C) )
%   | | then return 0.0673295059362593;  // std dev = 1.152, 12.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=4 */
%   | | else return 0.030515359255313096;  // std dev = 0.934, 8.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   else if ( teamplaysagainstteam(F, A) )
%   | then if ( teamalsoknownas(G, F), recursion_teamplayssport(G, B) )
%   | | then return 0.3354750170448912;  // std dev = 1.728, 74.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=71 */
%   | | else if ( athleteplaysforteam(H, A), teamalsoknownas(I, F) )
%   | | | then return -0.16899339413303152;  // std dev = 2.275, 71.000 (wgt'ed) examples reached here.  /* #neg=62 #pos=9 */
%   | | | else return 0.019173985608835136;  // std dev = 3.418, 87.000 (wgt'ed) examples reached here.  /* #neg=50 #pos=37 */
%   | else if ( teamplaysagainstteam(J, A), teamalsoknownas(K, J) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( teamplaysagainstteam(L, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.1269309996386619;  // std dev = 6.081, 160.000 (wgt'ed) examples reached here.  /* #neg=81 #pos=79 */
WILL Produced-Tree #8
% FOR teamplayssport(A, B):
%   if ( teamalsoknownas(A, C), recursion_teamplayssport(C, B) )
%   then return 0.1163095912636877;  // std dev = 1.215, 16.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=14 */
%   else if ( teamalsoknownas(A, D), athleteplaysforteam(E, D) )
%   | then if ( teamplaysagainstteam(F, D), teamalsoknownas(F, G) )
%   | | then if ( recursion_teamplayssport(G, B) )
%   | | | then return 0.5679883898158591;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | | else return -0.08088271173636788;  // std dev = 1.018, 13.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=2 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( teamalsoknownas(A, H) )
%   | | then if ( teamalsoknownas(H, I) )
%   | | | then return 0.1051178718085617;  // std dev = 3.751, 64.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=33 */
%   | | | else return 0.05362053906935985;  // std dev = 0.964, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else if ( athleteplaysforteam(J, A) )
%   | | | then return 0.052352432657400305;  // std dev = 3.811, 161.000 (wgt'ed) examples reached here.  /* #neg=81 #pos=80 */
%   | | | else return 0.07462193456670264;  // std dev = 5.791, 165.000 (wgt'ed) examples reached here.  /* #neg=85 #pos=80 */
WILL Produced-Tree #9
% FOR teamplayssport(A, B):
%   if ( recursion_teamplayssport(C, B) )
%   then if ( teamalsoknownas(D, C), teamalsoknownas(C, E) )
%   | then return 0.11241540955541564;  // std dev = 6.910, 291.000 (wgt'ed) examples reached here.  /* #neg=119 #pos=172 */
%   | else if ( teamplaysagainstteam(F, A), teamplaysagainstteam(F, C) )
%   | | then return 0.13906197164164866;  // std dev = 2.255, 42.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=30 */
%   | | else return -0.1734200716348523;  // std dev = 2.649, 91.000 (wgt'ed) examples reached here.  /* #neg=81 #pos=10 */
%   else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR teamplayssport(A, B):
%   if ( recursion_teamplayssport(C, B) )
%   then if ( teamalsoknownas(C, D), athleteplaysforteam(E, C) )
%   | then return 0.15226311531903627;  // std dev = 6.794, 301.000 (wgt'ed) examples reached here.  /* #neg=93 #pos=208 */
%   | else return -0.230676619187285;  // std dev = 2.159, 123.000 (wgt'ed) examples reached here.  /* #neg=119 #pos=4 */
%   else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 0.920314
   AUC PR    = 0.879273
   CLL	      = -0.446062
   Precision = 0.861789 at threshold = 0.5
   Recall    = 0.80916
   F1        = 0.834646


Total learning time: 10.036 seconds
Total inference time: 3.904 seconds
AUC ROC: 0.920314


Results scoring model
   AUC ROC   = 0.919633
   AUC PR    = 0.909797
   CLL	      = -0.448234
   Precision = 0.85567 at threshold = 0.5
   Recall    = 0.783019
   F1        = 0.817734


Total scoring time: 4.265 seconds
Parameter learned model CLL: -0.448234


Structure after Parameter Learning
[['teamplayssport(A, B)', {'': 'teamalsoknownas(A, C)', 'true': 'recursion_teamplayssport(C, B)', 'false': 'teamplaysagainstteam(D, A)', 'false,true': 'recursion_teamplayssport(D, B)', 'false,true,false': 'teamalsoknownas(E, A), recursion_teamplayssport(E, B)', 'false,false': 'athleteplaysforteam(F, A)', 'false,false,true': 'athleteledsportsteam(F, G)', 'false,false,false': 'teamplaysinleague(A, H)'}, {'true,true': [1.323, 2, 14], 'true,false': [4.516, 44, 38], 'false,true,true': [2.715, 8, 94], 'false,true,false,true': [0.0, 0, 0], 'false,true,false,false': [2.716, 95, 8], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [1.0, 2, 2], 'false,false,false,true': [3.9, 32, 29], 'false,false,false,false': [3.739, 29, 27]}], ['teamplayssport(A, B)', {'': 'teamplaysagainstteam(C, A), teamalsoknownas(D, A)', 'true': 'recursion_teamplayssport(D, B)', 'true,false': 'recursion_teamplayssport(C, B), teamplaysinleague(C, E)', 'false': 'teamalsoknownas(F, A)', 'false,true': 'recursion_teamplayssport(G, B)', 'false,false': 'teamalsoknownas(A, H)', 'false,false,true': 'recursion_teamplayssport(H, B)', 'false,false,false': 'teamplaysagainstteam(I, A)'}, {'true,true': [1.257, 2, 12], 'true,false,true': [0.894, 1, 6], 'true,false,false': [1.607, 18, 3], 'false,true,true': [2.83, 16, 16], 'false,true,false': [0.0, 0, 0], 'false,false,true,true': [2.98e-08, 0, 8], 'false,false,true,false': [3.388, 24, 22], 'false,false,false,true': [6.002, 91, 90], 'false,false,false,false': [5.357, 60, 55]}], ['teamplayssport(A, B)', {'': 'teamalsoknownas(C, A), recursion_teamplayssport(C, B)', 'false': 'teamalsoknownas(D, A)', 'false,true': 'teamplaysagainstteam(E, A), recursion_teamplayssport(E, B)', 'false,true,true': 'teamplaysinleague(D, F)', 'false,true,false': 'teamplaysagainstteam(G, D), teamplaysagainstteam(G, A)', 'false,false': 'teamalsoknownas(A, H), athleteplaysforteam(I, H)', 'false,false,true': 'recursion_teamplayssport(H, B)'}, {'true': [1.618, 4, 13], 'false,true,true,true': [0.887, 1, 6], 'false,true,true,false': [0.0, 0, 0], 'false,true,false,true': [0.973, 13, 1], 'false,true,false,false': [2.978, 19, 17], 'false,false,true,true': [2.98e-08, 0, 8], 'false,false,true,false': [1.5, 9, 3], 'false,false,false': [0.466, 166, 164]}], ['teamplayssport(A, B)', {'': 'teamalsoknownas(C, A), teamalsoknownas(D, C)', 'true': 'recursion_teamplayssport(D, B)', 'true,true': 'athleteplaysforteam(E, C)', 'true,false': 'athleteplaysforteam(F, A)', 'true,false,true': 'teamplaysagainstteam(G, A), recursion_teamplayssport(G, B)', 'true,false,false': 'teamalsoknownas(H, D), recursion_teamplayssport(H, B)'}, {'true,true,true': [0.014, 0, 6], 'true,true,false': [3.087, 18, 21], 'true,false,true,true': [0.0, 0, 2], 'true,false,true,false': [1.296, 9, 2], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [0.097, 4, 0], 'false': [8.671, 181, 181]}], ['teamplayssport(A, B)', {'': 'teamalsoknownas(A, C), recursion_teamplayssport(C, B)', 'false': 'teamalsoknownas(A, D), athleteplaysforteam(E, D)', 'false,true': 'teamalsoknownas(D, F), teamplaysagainstteam(G, F)', 'false,true,true': 'teamalsoknownas(H, A)', 'false,true,false': 'teamalsoknownas(D, I), recursion_teamplayssport(I, B)', 'false,false': 'teamalsoknownas(J, A), recursion_teamplayssport(J, B)', 'false,false,true': 'teamplaysagainstteam(K, A), teamalsoknownas(L, J)', 'false,false,false': 'teamplaysagainstteam(M, A), recursion_teamplayssport(M, B)'}, {'true': [1.22, 2, 14], 'false,true,true,true': [0.0, 1, 0], 'false,true,true,false': [0.894, 4, 1], 'false,true,false,true': [0.0, 0, 0], 'false,true,false,false': [1.208, 6, 2], 'false,false,true,true': [7.45e-09, 0, 3], 'false,false,true,false': [0.988, 2, 4], 'false,false,false,true': [3.014, 10, 95], 'false,false,false,false': [7.595, 187, 93]}], ['teamplayssport(A, B)', {'': 'teamplaysagainstteam(C, A), recursion_teamplayssport(C, B)', 'true': 'teamalsoknownas(D, A), teamplaysinleague(D, E)', 'false': 'teamalsoknownas(F, A), teamalsoknownas(G, F)', 'false,true': 'recursion_teamplayssport(G, B)', 'false,true,false': 'teamplaysinleague(A, H), teamplaysagainstteam(I, A)', 'false,false': 'teamplaysinleague(A, J)', 'false,false,true': 'teamplaysinleague(K, J), recursion_teamplayssport(K, B)', 'false,false,false': 'teamalsoknownas(A, L)'}, {'true,true': [1.472, 3, 17], 'true,false': [2.926, 9, 101], 'false,true,true': [2.867, 16, 17], 'false,true,false,true': [1.303, 10, 2], 'false,true,false,false': [0.003, 3, 0], 'false,false,true,true': [4.072, 28, 45], 'false,false,true,false': [0.437, 103, 0], 'false,false,false,true': [1.387, 6, 3], 'false,false,false,false': [3.844, 34, 27]}], ['teamplayssport(A, B)', {'': 'teamalsoknownas(C, A), athleteplaysforteam(D, C)', 'true': 'recursion_teamplayssport(C, B)', 'true,false': 'teamalsoknownas(E, C)', 'false': 'teamplaysagainstteam(F, A)', 'false,true': 'teamalsoknownas(G, F), recursion_teamplayssport(G, B)', 'false,true,false': 'athleteplaysforteam(H, A), teamalsoknownas(I, F)', 'false,false': 'teamplaysagainstteam(J, A), teamalsoknownas(K, J)', 'false,false,false': 'teamplaysagainstteam(L, A)'}, {'true,true': [1.033, 2, 10], 'true,false,true': [1.152, 8, 4], 'true,false,false': [0.934, 6, 2], 'false,true,true': [1.728, 3, 71], 'false,true,false,true': [2.275, 62, 9], 'false,true,false,false': [3.418, 50, 37], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [6.081, 81, 79]}], ['teamplayssport(A, B)', {'': 'teamalsoknownas(A, C), recursion_teamplayssport(C, B)', 'false': 'teamalsoknownas(A, D), athleteplaysforteam(E, D)', 'false,true': 'teamplaysagainstteam(F, D), teamalsoknownas(F, G)', 'false,true,true': 'recursion_teamplayssport(G, B)', 'false,false': 'teamalsoknownas(A, H)', 'false,false,true': 'teamalsoknownas(H, I)', 'false,false,false': 'athleteplaysforteam(J, A)'}, {'true': [1.215, 2, 14], 'false,true,true,true': [0.0, 0, 1], 'false,true,true,false': [1.018, 11, 2], 'false,true,false': [0.0, 0, 0], 'false,false,true,true': [3.751, 31, 33], 'false,false,true,false': [0.964, 2, 2], 'false,false,false,true': [3.811, 81, 80], 'false,false,false,false': [5.791, 85, 80]}], ['teamplayssport(A, B)', {'': 'recursion_teamplayssport(C, B)', 'true': 'teamalsoknownas(D, C), teamalsoknownas(C, E)', 'true,false': 'teamplaysagainstteam(F, A), teamplaysagainstteam(F, C)'}, {'true,true': [6.91, 119, 172], 'true,false,true': [2.255, 12, 30], 'true,false,false': [2.649, 81, 10], 'false': [0.0, 0, 0]}], ['teamplayssport(A, B)', {'': 'recursion_teamplayssport(C, B)', 'true': 'teamalsoknownas(C, D), athleteplaysforteam(E, C)'}, {'true,true': [6.794, 93, 208], 'true,false': [2.159, 119, 4], 'false': [0.0, 0, 0]}]]
[{'': [0.24906289046230737, 0.24991531484060797], 'false': [0.24999405116002665, 0.2495731165903967], 'false,true': [0.07227989234909792, 0.07163728909416558], 'false,false': [0.25, 0.24954342903060842], 'false,false,true': [nan, 0.25], 'false,false,false': [0.2493953238376795, 0.249681122448981], 'true': [0.10937499999999967, 0.24866151100535547], 'false,true,false': [nan, 0.07163728909416557]}, {'': [0.21511653879450954, 0.22457574262098104], 'false': [0.2502867641058261, 0.22222266729811152], 'false,true': [0.2502867641058261, nan], 'false,false': [0.23827525278525016, 0.21863445140460078], 'false,false,true': [1.1102230246251565e-16, 0.2495274102079393], 'false,false,false': [0.19899523553468448, 0.24951998819186882], 'true': [0.11294798546755924, 0.19909368474761532], 'true,false': [0.11427808772278938, 0.12303716184596009]}, {'': [0.15405501994904439, 0.21644054083128314], 'false': [0.21713847458342544, 0.2159773653789968], 'false,true': [0.11235466215769464, 0.21657921721343565], 'false,true,false': [0.06769077123364041, 0.2463660890440877], 'false,false': [0.18884937708977056, 0.2176142151089357], 'false,false,true': [1.1102230246251565e-16, 0.18750000000000003], 'false,true,true': [0.11235466215769464, nan]}, {'': [0.2118252362567637, 0.2077173417488453], 'true': [0.22092506104190418, 0.14110910233859186], 'true,true': [3.384680840864037e-05, 0.24434547489341205], 'true,false': [0.15403148056184793, 0.002345028809801225], 'true,false,true': [0.0, 0.15257841701408856], 'true,false,false': [nan, 0.002345028809801225]}, {'': [0.09297264921158539, 0.20793843199253226], 'false': [0.1629695226698727, 0.2081004440956856], 'false,false': [0.11814204314611294, 0.2100495487467956], 'false,false,false': [0.08654018780849262, 0.20601175389077822], 'false,true': [0.13391781023320615, 0.18248115098958112], 'false,true,false': [nan, 0.18248115098958112], 'false,true,true': [0.0, 0.15999999999999998], 'false,false,true': [1.850371707708594e-17, 0.16255896215212348]}, {'': [0.08584101508877305, 0.201212658793089], 'false': [0.21914517333104255, 0.19612736016268204], 'false,true': [0.24899577554486152, 0.12342206203222218], 'false,false': [0.1732549094685076, 0.23975734027284876], 'false,false,false': [0.21378166425265172, 0.24219378971230354], 'false,false,true': [0.22717526146257186, 0.0018516910242507415], 'false,true,false': [0.14143033774148545, 2.6577642214161332e-06], 'true': [0.10837243624281863, 0.07782351161035965]}, {'': [0.10557226795312746, 0.17014623071704282], 'false': [0.12638907332470187, 0.23113546148602074], 'false,false': [nan, 0.23113546148602074], 'false,false,false': [nan, 0.23113546148602074], 'false,true': [0.04033564954454005, 0.11543910957843483], 'false,true,false': [0.07286971252220834, 0.13426892821424302], 'true': [0.08887120550266864, 0.1103144383453902], 'true,false': [0.11063145195818709, 0.10902574908868697]}, {'': [0.0922254464065213, 0.15873869444380886], 'false': [0.10198571452720938, 0.16037844906035872], 'false,false': [0.22071359475023752, 0.14753785158012273], 'false,false,true': [0.21983104310609972, 0.23233844432302908], 'false,false,false': [0.0901939714758479, 0.20324665417728366], 'false,true': [0.10198571452720938, nan], 'false,true,true': [0.0, 0.07975693331729795]}, {'': [0.15529882012393648, nan], 'true': [0.16407173101970798, 0.11206370326361441], 'true,false': [0.12102940669305351, 0.07709041449504735]}, {'': [0.15004708997199795, nan], 'true': [0.15333282792437838, 0.037903799292441524]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
1;;teamplayssport(A, B) :- teamplaysagainstteam(C, A), teamalsoknownas(D, A).;true;true
1;false;teamalsoknownas(F, A).;true;true
1;false,false;teamalsoknownas(A, H).;true;true
1;false,false,true;recursion_teamplayssport(H, B).;true;true
2;;teamplayssport(A, B) :- teamalsoknownas(C, A), recursion_teamplayssport(C, B).;true;true
2;false;teamalsoknownas(D, A).;true;true
2;false,false;teamalsoknownas(A, H), athleteplaysforteam(I, H).;true;true
2;false,false,true;recursion_teamplayssport(H, B).;true;true
3;;teamplayssport(A, B) :- teamalsoknownas(C, A), teamalsoknownas(D, C).;true;true
3;true;recursion_teamplayssport(D, B).;true;true
3;true,true;athleteplaysforteam(E, C).;true;true
3;true,false;athleteplaysforteam(F, A).;true;true
3;true,false,true;teamplaysagainstteam(G, A), recursion_teamplayssport(G, B).;true;true
4;;teamplayssport(A, B) :- teamalsoknownas(A, C), recursion_teamplayssport(C, B).;true;true
4;false;teamalsoknownas(A, D), athleteplaysforteam(E, D).;true;true
4;false,true;teamalsoknownas(D, F), teamplaysagainstteam(G, F).;true;true
4;false,true,true;teamalsoknownas(H, A).;true;true
4;false,false;teamalsoknownas(J, A), recursion_teamplayssport(J, B).;true;true
4;false,false,true;teamplaysagainstteam(K, A), teamalsoknownas(L, J).;true;true
5;;teamplayssport(A, B) :- teamplaysagainstteam(C, A), recursion_teamplayssport(C, B).;true;true
5;false;teamalsoknownas(F, A), teamalsoknownas(G, F).;true;true
5;false,true;recursion_teamplayssport(G, B).;true;true
5;false,true,false;teamplaysinleague(A, H), teamplaysagainstteam(I, A).;true;true
5;false,false;teamplaysinleague(A, J).;true;true
5;false,false,true;teamplaysinleague(K, J), recursion_teamplayssport(K, B).;true;true
7;;teamplayssport(A, B) :- teamalsoknownas(A, C), recursion_teamplayssport(C, B).;true;true
7;false;teamalsoknownas(A, D), athleteplaysforteam(E, D).;true;true
7;false,true;recursion_teamplayssport(G, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR teamplayssport(A, B):
%   if ( athleteplayssport(C, B), athleteledsportsteam(C, D) )
%   then if ( teamplaysinleague(A, E), athleteplaysinleague(C, E) )
%   | then return 0.809129327256374;  // std dev = 0.216, 102.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=97 */
%   | else if ( teamplaysinleague(A, F), athleteplaysinleague(G, F) )
%   | | then if ( athleteplayssport(G, H), recursion_teamplayssport(A, H) )
%   | | | then return -0.1418510649004877;  // std dev = 2.36e-08, 27.000 (wgt'ed) examples reached here.  /* #neg=27 */
%   | | | else return 0.550456627407204;  // std dev = 2.882, 39.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=27 */
%   | | else if ( teamplaysinleague(A, I), teamplaysinleague(D, I) )
%   | | | then return 0.8081489350995122;  // std dev = 0.975, 20.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=19 */
%   | | | else return 0.5018270960190523;  // std dev = 4.467, 87.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=56 */
%   else if ( teamplaysinleague(A, J), athleteplaysinleague(K, J) )
%   | then return -0.11859525094699931;  // std dev = 0.151, 86.000 (wgt'ed) examples reached here.  /* #neg=84 #pos=2 */
%   | else if ( teamplaysagainstteam(A, L), recursion_teamplayssport(L, B) )
%   | | then if ( teamalsoknownas(A, M), teamalsoknownas(M, A) )
%   | | | then return 0.5248156017661788;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.8581489350995122;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return -0.06912379217321503;  // std dev = 0.260, 55.000 (wgt'ed) examples reached here.  /* #neg=51 #pos=4 */
WILL Produced-Tree #2
% FOR teamplayssport(A, B):
%   if ( teamplaysagainstteam(C, A), teamalsoknownas(D, A) )
%   then if ( teamplaysagainstteam(A, E), recursion_teamplayssport(E, B) )
%   | then return 0.6164450069081158;  // std dev = 0.320, 22.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=19 */
%   | else return -0.051025026899764646;  // std dev = 0.296, 20.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=2 */
%   else if ( teamalsoknownas(F, A) )
%   | then if ( athleteplayssport(G, B), athleteplaysinleague(G, H) )
%   | | then if ( teamalsoknownas(A, I), teamplaysinleague(A, J) )
%   | | | then return 0.33802237184806916;  // std dev = 1.945, 16.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=9 */
%   | | | else return 0.6462066962199529;  // std dev = 0.935, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | else return -0.022532028525134522;  // std dev = 0.314, 9.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=1 */
%   | else if ( teamalsoknownas(A, K) )
%   | | then if ( recursion_teamplayssport(K, B) )
%   | | | then return 0.7280365559622302;  // std dev = 0.009, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.2840908013174717;  // std dev = 3.142, 46.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=22 */
%   | | else if ( athleteplayssport(L, B), athleteledsportsteam(L, M) )
%   | | | then return 0.49287766401779387;  // std dev = 5.785, 192.000 (wgt'ed) examples reached here.  /* #neg=53 #pos=139 */
%   | | | else return -0.07667232720616243;  // std dev = 2.204, 104.000 (wgt'ed) examples reached here.  /* #neg=98 #pos=6 */
WILL Produced-Tree #3
% FOR teamplayssport(A, B):
%   if ( teamalsoknownas(C, A), recursion_teamplayssport(C, B) )
%   then if ( teamplaysagainstteam(A, D), teamalsoknownas(D, A) )
%   | then return 0.540127951339896;  // std dev = 0.218, 13.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   | else return -0.00578174970015552;  // std dev = 0.906, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   else if ( teamalsoknownas(E, A) )
%   | then if ( athleteplayssport(F, B), athleteledsportsteam(F, G) )
%   | | then if ( teamplaysinleague(A, H), teamplaysinleague(G, H) )
%   | | | then return 0.5300711627002087;  // std dev = 0.928, 10.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | | | else return 0.27809336924076344;  // std dev = 2.289, 23.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=13 */
%   | | else return -0.04278241112659123;  // std dev = 0.276, 24.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=2 */
%   | else if ( teamalsoknownas(A, I), athleteplaysforteam(J, I) )
%   | | then if ( recursion_teamplayssport(I, B) )
%   | | | then return 0.5638226096846526;  // std dev = 0.011, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.027002632670226828;  // std dev = 1.334, 12.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=3 */
%   | | else if ( athleteplayssport(K, B), athleteledsportsteam(K, L) )
%   | | | then return 0.4057867581365763;  // std dev = 6.057, 217.000 (wgt'ed) examples reached here.  /* #neg=59 #pos=158 */
%   | | | else return -0.07593111182910174;  // std dev = 2.230, 113.000 (wgt'ed) examples reached here.  /* #neg=107 #pos=6 */
WILL Produced-Tree #4
% FOR teamplayssport(A, B):
%   if ( teamalsoknownas(C, A), teamalsoknownas(D, C) )
%   then if ( recursion_teamplayssport(D, B) )
%   | then if ( athleteplaysforteam(E, C) )
%   | | then return 0.47053439212838805;  // std dev = 0.065, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else if ( teamplaysinleague(A, F) )
%   | | | then return 0.16155579641856838;  // std dev = 2.473, 30.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=15 */
%   | | | else return 0.35864996461419085;  // std dev = 1.264, 9.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=6 */
%   | else if ( athleteplaysforteam(G, A) )
%   | | then return 0.09233049607245802;  // std dev = 0.354, 13.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=4 */
%   | | else return -0.12548265398234504;  // std dev = 0.003, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   else if ( teamplaysagainstteam(H, A), recursion_teamplayssport(H, B) )
%   | then return 0.468710703018772;  // std dev = 0.247, 116.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=106 */
%   | else if ( teamplaysagainstteam(I, A) )
%   | | then return -0.10668219885531303;  // std dev = 0.247, 116.000 (wgt'ed) examples reached here.  /* #neg=105 #pos=11 */
%   | | else if ( athleteplayssport(J, B), athleteledsportsteam(J, K) )
%   | | | then return 0.3260564804970827;  // std dev = 3.903, 84.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=62 */
%   | | | else return -0.07665318451619224;  // std dev = 1.391, 46.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=2 */
WILL Produced-Tree #5
% FOR teamplayssport(A, B):
%   if ( teamalsoknownas(A, C), recursion_teamplayssport(C, B) )
%   then return 0.2868052547235965;  // std dev = 0.241, 16.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=14 */
%   else if ( teamalsoknownas(A, D), athleteplaysforteam(E, D) )
%   | then if ( teamalsoknownas(D, F), teamplaysagainstteam(G, F) )
%   | | then if ( teamalsoknownas(H, A) )
%   | | | then return -0.11022804099845408;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | | else return -0.03109456349443209;  // std dev = 0.736, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else if ( teamplaysagainstteam(A, I), recursion_teamplayssport(I, B) )
%   | | | then return 0.318501601813806;  // std dev = 0.573, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return -0.16803094969874124;  // std dev = 0.096, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else if ( teamalsoknownas(J, A), recursion_teamplayssport(J, B) )
%   | | then if ( teamplaysagainstteam(K, A), teamalsoknownas(L, J) )
%   | | | then return 0.3461717082890167;  // std dev = 0.000181, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.10740411753332862;  // std dev = 0.823, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | | else if ( teamplaysagainstteam(A, M), recursion_teamplayssport(M, B) )
%   | | | then return 0.3814323423124695;  // std dev = 2.260, 98.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=91 */
%   | | | else return 0.04803745201424287;  // std dev = 6.232, 287.000 (wgt'ed) examples reached here.  /* #neg=190 #pos=97 */
WILL Produced-Tree #6
% FOR teamplayssport(A, B):
%   if ( teamplaysagainstteam(C, A), recursion_teamplayssport(C, B) )
%   then return 0.2767481260106681;  // std dev = 0.247, 130.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=118 */
%   else if ( teamalsoknownas(D, A), teamalsoknownas(E, D) )
%   | then if ( recursion_teamplayssport(E, B) )
%   | | then if ( athleteplaysforteam(F, A) )
%   | | | then return -0.16341123501646598;  // std dev = 0.721, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else return 0.1968739581413983;  // std dev = 2.356, 28.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=16 */
%   | | else if ( teamplaysinleague(A, G), teamplaysagainstteam(H, A) )
%   | | | then return -0.018127786208157252;  // std dev = 1.047, 12.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=2 */
%   | | | else return -0.11796087281004071;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( teamplaysinleague(A, I) )
%   | | then if ( teamplaysinleague(J, I), recursion_teamplayssport(J, B) )
%   | | | then return 0.20338634865193655;  // std dev = 3.203, 73.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=45 */
%   | | | else return -0.15843997498574;  // std dev = 1.065, 103.000 (wgt'ed) examples reached here.  /* #neg=103 */
%   | | else if ( teamplaysagainstteam(K, A), teamalsoknownas(K, L) )
%   | | | then return -0.3129855382128058;  // std dev = 0.206, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | | else return 0.11172842213952212;  // std dev = 3.435, 66.000 (wgt'ed) examples reached here.  /* #neg=36 #pos=30 */
WILL Produced-Tree #7
% FOR teamplayssport(A, B):
%   if ( athleteplayssport(C, B), athleteplaysinleague(C, D) )
%   then if ( teamplaysinleague(A, D), athleteledsportsteam(C, E) )
%   | then return 0.24289205692292282;  // std dev = 0.173, 102.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=97 */
%   | else if ( teamplaysagainstteam(A, F), athleteledsportsteam(G, F) )
%   | | then if ( recursion_teamplayssport(F, B) )
%   | | | then return 0.1601813787903634;  // std dev = 1.873, 22.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=17 */
%   | | | else return -0.18167883230364237;  // std dev = 1.775, 38.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=6 */
%   | | else if ( teamplaysinleague(A, H), athleteplaysinleague(I, H) )
%   | | | then return 0.06949269625816572;  // std dev = 2.445, 35.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=17 */
%   | | | else return 0.18953038286896357;  // std dev = 4.172, 104.000 (wgt'ed) examples reached here.  /* #neg=33 #pos=71 */
%   else if ( teamplaysagainstteam(J, A), teamalsoknownas(K, J) )
%   | then return -0.10465077900619378;  // std dev = 0.173, 56.000 (wgt'ed) examples reached here.  /* #neg=56 */
%   | else if ( teamalsoknownas(L, A) )
%   | | then if ( teamplaysinleague(A, M) )
%   | | | then return 0.17073085823980616;  // std dev = 1.169, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   | | | else return -0.14734360775359293;  // std dev = 0.113, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return -0.07866738138446379;  // std dev = 0.185, 56.000 (wgt'ed) examples reached here.  /* #neg=54 #pos=2 */
WILL Produced-Tree #8
% FOR teamplayssport(A, B):
%   if ( teamalsoknownas(A, C), recursion_teamplayssport(C, B) )
%   then if ( teamalsoknownas(A, D), teamplaysagainstteam(E, D) )
%   | then return 0.19358112326232432;  // std dev = 0.151, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else return -0.11242019436891372;  // std dev = 0.825, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   else if ( teamalsoknownas(A, F), athleteplaysforteam(G, F) )
%   | then if ( recursion_teamplayssport(H, B) )
%   | | then if ( teamplaysagainstteam(I, A), recursion_teamplayssport(I, B) )
%   | | | then return 0.40410622073774155;  // std dev = 0.137, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return -0.14449085368091125;  // std dev = 0.251, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( athleteplayssport(J, B), athleteledsportsteam(J, K) )
%   | | then if ( teamplaysinleague(A, L), athleteplaysinleague(J, L) )
%   | | | then return 0.2015491458919532;  // std dev = 1.658, 89.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=85 */
%   | | | else return 0.07939302977688666;  // std dev = 5.448, 169.000 (wgt'ed) examples reached here.  /* #neg=68 #pos=101 */
%   | | else if ( teamplaysagainstteam(M, A), recursion_teamplayssport(M, B) )
%   | | | then return 0.3414786673440942;  // std dev = 0.679, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | | else return -0.076978032495135;  // std dev = 1.919, 130.000 (wgt'ed) examples reached here.  /* #neg=126 #pos=4 */
WILL Produced-Tree #9
% FOR teamplayssport(A, B):
%   if ( teamplaysagainstteam(A, C), recursion_teamplayssport(C, B) )
%   then if ( teamplaysinleague(A, D), teamplaysinleague(C, D) )
%   | then return 0.19232976648740893;  // std dev = 0.126, 104.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=102 */
%   | else return -0.022834322913776555;  // std dev = 0.410, 20.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=12 */
%   else if ( teamplaysagainstteam(E, A), teamplaysagainstteam(A, F) )
%   | then if ( teamalsoknownas(E, G), athleteplaysforteam(H, G) )
%   | | then return -0.14917565038111366;  // std dev = 0.159, 72.000 (wgt'ed) examples reached here.  /* #neg=71 #pos=1 */
%   | | else if ( athleteplaysforteam(I, A), athleteplayssport(J, B) )
%   | | | then return -0.141397519175183;  // std dev = 0.699, 17.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=1 */
%   | | | else return 0.02122743768427494;  // std dev = 1.708, 30.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=7 */
%   | else if ( athleteplayssport(K, B), athleteledsportsteam(K, L) )
%   | | then if ( athleteplaysforteam(K, L), teamalsoknownas(L, M) )
%   | | | then return 0.037667157661826794;  // std dev = 3.849, 69.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=41 */
%   | | | else return 0.2662125692637596;  // std dev = 2.084, 50.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=44 */
%   | | else if ( teamalsoknownas(N, A), teamalsoknownas(A, N) )
%   | | | then return 0.04308077123152883;  // std dev = 1.088, 8.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | | | else return -0.07678365720743574;  // std dev = 1.407, 54.000 (wgt'ed) examples reached here.  /* #neg=52 #pos=2 */
WILL Produced-Tree #10
% FOR teamplayssport(A, B):
%   if ( athleteplayssport(C, B), athleteplaysinleague(C, D) )
%   then if ( teamplaysagainstteam(A, E), recursion_teamplayssport(E, B) )
%   | then if ( teamalsoknownas(E, F), teamalsoknownas(G, E) )
%   | | then if ( teamplaysinleague(G, D), teamplaysinleague(A, D) )
%   | | | then return 0.15263937076976258;  // std dev = 0.118, 36.000 (wgt'ed) examples reached here.  /* #pos=36 */
%   | | | else return -0.07534081219872726;  // std dev = 1.618, 15.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=9 */
%   | | else if ( teamplaysinleague(E, H), teamplaysagainstteam(E, I) )
%   | | | then return 0.14861353950354297;  // std dev = 1.337, 66.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=62 */
%   | | | else return 0.34388381167645793;  // std dev = 0.374, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else if ( teamplaysagainstteam(A, J), teamplaysagainstteam(K, A) )
%   | | then if ( teamalsoknownas(K, J), athleteledsportsteam(C, L) )
%   | | | then return -0.3149009797773797;  // std dev = 0.563, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | | | else return -0.053888068204383625;  // std dev = 1.891, 32.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=8 */
%   | | else if ( athleteledsportsteam(C, M) )
%   | | | then return 0.10341068904290596;  // std dev = 4.484, 119.000 (wgt'ed) examples reached here.  /* #neg=34 #pos=85 */
%   | | | else return -0.08225017657882171;  // std dev = 0.704, 12.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=1 */
%   else return -0.06009909986675493;  // std dev = 0.172, 123.000 (wgt'ed) examples reached here.  /* #neg=119 #pos=4 */


Results
   AUC ROC   = 0.957258
   AUC PR    = 0.945614
   CLL	      = -0.314874
   Precision = 0.876812 at threshold = 0.5
   Recall    = 0.923664
   F1        = 0.899628


Total learning time: 580.137 seconds
Total inference time: 8.547 seconds
AUC ROC: 0.957258


Results scoring model
   AUC ROC   = 0.964367
   AUC PR    = 0.966227
   CLL	      = -0.310371
   Precision = 0.854077 at threshold = 0.5
   Recall    = 0.938679
   F1        = 0.894382


Total scoring time: 9.316 seconds
Refined model CLL: -0.310371


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.957258
   AUC PR    = 0.945614
   CLL	      = -0.314874
   Precision = 0.876812 at threshold = 0.5
   Recall    = 0.923664
   F1        = 0.899628


Total learning time: 603.754 seconds
Total inference time: 8.547 seconds
AUC ROC: 0.957258
Total revision time: 603.754
Best scored revision CLL: -0.310371


Dataset: 10_nell_finances_nell_sports, Fold: 3, Type: Transfer (trRDN-B), Time: 21:35:36
{'AUC ROC': 0.957258, 'AUC PR': 0.945614, 'CLL': -0.314874, 'Precision': [0.876812, 0.5], 'Recall': 0.923664, 'F1': 0.899628, 'Learning time': 603.754, 'Inference time': 8.547, 'parameter_0.8': {'AUC ROC': 0.920314, 'AUC PR': 0.879273, 'CLL': -0.446062, 'Precision': [0.861789, 0.5], 'Recall': 0.80916, 'F1': 0.834646, 'Learning time': 10.036, 'Inference time': 3.904}}


Amount of data: 1.0
******************************************
Performing Parameter Learning
******************************************
Refine
0;;companyeconomicsector(A, B) :- acquired(C, A).;true;true
0;true;economicsectorcompany(B, C).;false;false
0;false;companyalsoknownas(A, D).;true;true
0;false,true;economicsectorcompany(B, D).;false;true
0;false,true,false;acquired(A, E), economicsectorcompany(B, E).;false;false
0;false,false;companyceo(A, F).;true;true
0;false,false,true;bankchiefexecutiveceo(G, F).;false;false
0;false,false,false;countryhascompanyoffice(H, A).;false;false
1;;companyeconomicsector(A, B) :- companyalsoknownas(A, C), acquired(A, D).;true;true
1;true;economicsectorcompany(B, D).;false;true
1;true,false;economicsectorcompany(B, C), countryhascompanyoffice(E, C).;false;false
1;false;acquired(A, F), cityhascompanyoffice(G, A).;true;true
1;false,true;cityhascompanyoffice(G, H), economicsectorcompany(B, H).;false;false
1;false,false;acquired(I, A).;true;true
1;false,false,true;economicsectorcompany(B, I).;false;false
1;false,false,false;companyalsoknownas(A, J).;false;false
2;;companyeconomicsector(A, B) :- acquired(A, C), economicsectorcompany(B, C).;false;true
2;false;acquired(A, D).;true;true
2;false,true;companyalsoknownas(A, E), economicsectorcompany(B, E).;true;true
2;false,true,true;countryhascompanyoffice(F, D).;false;false
2;false,true,false;companyalsoknownas(D, G), companyalsoknownas(A, G).;false;false
2;false,false;acquired(H, A), companyceo(H, I).;true;true
2;false,false,true;economicsectorcompany(B, H).;false;false
2;false,false,false;cityhascompanyoffice(J, A).;false;false
3;;companyeconomicsector(A, B) :- acquired(A, C), acquired(C, D).;true;false
3;true;economicsectorcompany(B, D).;true;true
3;true,true;companyceo(C, E).;false;false
3;true,false;cityhascompanyoffice(F, A), companyceo(A, G).;true;true
3;true,false,true;companyalsoknownas(A, H), economicsectorcompany(B, H).;false;false
3;true,false,false;acquired(D, I), economicsectorcompany(B, I).;false;false
4;;companyeconomicsector(A, B) :- acquired(C, A), economicsectorcompany(B, C).;false;true
4;false;acquired(D, A), companyceo(D, E).;true;true
4;false,true;acquired(F, D), companyalsoknownas(F, G).;true;true
4;false,true,true;acquired(A, H).;false;false
4;false,true,false;acquired(I, D), economicsectorcompany(B, I).;false;false
4;false,false;acquired(A, J), economicsectorcompany(B, J).;true;true
4;false,false,true;companyalsoknownas(A, K), acquired(J, L).;false;false
4;false,false,false;companyalsoknownas(A, M), economicsectorcompany(B, M).;false;false
5;;companyeconomicsector(A, B) :- companyalsoknownas(A, C), economicsectorcompany(B, C).;true;true
5;true;acquired(A, D), countryhascompanyoffice(E, D).;false;false
5;false;acquired(A, F), acquired(F, G).;true;true
5;false,true;economicsectorcompany(B, G).;false;true
5;false,true,false;countryhascompanyoffice(H, A), companyalsoknownas(A, I).;false;false
5;false,false;cityhascompanyoffice(J, A), countryhascompanyoffice(K, A).;true;true
5;false,false,true;countryhascompanyoffice(K, L), economicsectorcompany(B, L).;false;false
5;false,false,false;cityhascompanyoffice(M, A), acquired(N, A).;false;false
6;;companyeconomicsector(A, B) :- acquired(A, C), companyceo(C, D).;true;true
6;true;economicsectorcompany(B, C).;false;true
6;true,false;acquired(C, E).;false;false
6;false;companyalsoknownas(A, F), cityhascompanyoffice(G, F).;true;true
6;false,true;acquired(F, H), economicsectorcompany(B, H).;false;true
6;false,true,false;companyceo(A, I), acquired(F, J).;false;false
6;false,false;companyalsoknownas(A, K), acquired(K, L).;false;true
6;false,false,false;companyalsoknownas(A, M).;false;false
7;;companyeconomicsector(A, B) :- acquired(C, A), economicsectorcompany(B, C).;false;true
7;false;acquired(D, A), companyceo(D, E).;true;true
7;false,true;companyalsoknownas(D, F), acquired(G, F).;true;true
7;false,true,true;economicsectorcompany(B, G).;false;false
7;false,true,false;countryhascompanyoffice(H, D).;false;false
7;false,false;cityhascompanyoffice(I, A), acquired(J, A).;true;true
7;false,false,true;acquired(K, J).;false;false
7;false,false,false;companyceo(A, L).;false;false
8;;companyeconomicsector(A, B) :- cityhascompanyoffice(C, A).;true;true
8;true;cityhascompanyoffice(C, D), economicsectorcompany(B, D).;true;false
8;true,true;acquired(D, E), acquired(F, D).;false;true
8;true,true,false;companyalsoknownas(A, G), companyalsoknownas(D, G).;false;false
8;false;acquired(A, H), economicsectorcompany(B, H).;false;true
8;false,false;acquired(I, A), cityhascompanyoffice(J, I).;true;true
8;false,false,true;acquired(K, I), economicsectorcompany(B, K).;false;false
8;false,false,false;acquired(A, L).;false;false
9;;companyeconomicsector(A, B) :- cityhascompanyoffice(C, A).;true;true
9;true;cityhascompanyoffice(C, D), economicsectorcompany(B, D).;true;false
9;true,true;acquired(E, D), companyceo(D, F).;false;false
9;false;companyalsoknownas(A, G), cityhascompanyoffice(H, G).;true;true
9;false,true;economicsectorcompany(B, G).;false;true
9;false,true,false;acquired(I, G).;false;false
9;false,false;acquired(A, J), economicsectorcompany(B, J).;false;true
9;false,false,false;companyalsoknownas(A, K), economicsectorcompany(B, K).;false;false


WILL Produced-Tree #1
% FOR teamplayssport(A, B):
%   if ( teamalsoknownas(A, C) )
%   then if ( recursion_teamplayssport(C, B) )
%   | then return 0.6581489350995123;  // std dev = 1.789, 20.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=16 */
%   | else return 0.30154516151460753;  // std dev = 5.115, 106.000 (wgt'ed) examples reached here.  /* #neg=59 #pos=47 */
%   else if ( teamplaysagainstteam(D, A) )
%   | then if ( recursion_teamplayssport(D, B) )
%   | | then return 0.7787838557344311;  // std dev = 3.034, 126.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=116 */
%   | | else if ( teamalsoknownas(E, A), recursion_teamplayssport(E, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.06927041973919737;  // std dev = 2.889, 124.000 (wgt'ed) examples reached here.  /* #neg=115 #pos=9 */
%   | else if ( athleteplaysforteam(F, A) )
%   | | then if ( athleteledsportsteam(F, G) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.3581489350995122;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else if ( teamplaysinleague(A, H) )
%   | | | then return 0.3581489350995121;  // std dev = 4.528, 82.000 (wgt'ed) examples reached here.  /* #neg=41 #pos=41 */
%   | | | else return 0.35814893509951107;  // std dev = 4.183, 70.000 (wgt'ed) examples reached here.  /* #neg=35 #pos=35 */
WILL Produced-Tree #2
% FOR teamplayssport(A, B):
%   if ( teamplaysagainstteam(C, A), teamalsoknownas(D, A) )
%   then if ( recursion_teamplayssport(D, B) )
%   | then return 0.591241726523477;  // std dev = 1.537, 19.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=16 */
%   | else if ( recursion_teamplayssport(C, B), teamplaysinleague(C, E) )
%   | | then return 0.592703561995546;  // std dev = 1.231, 10.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   | | else return -0.0036372483010911555;  // std dev = 1.836, 27.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=4 */
%   else if ( teamalsoknownas(F, A) )
%   | then if ( recursion_teamplayssport(G, B) )
%   | | then return 0.3124706490316031;  // std dev = 3.241, 42.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=21 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( teamalsoknownas(A, H) )
%   | | then if ( recursion_teamplayssport(H, B) )
%   | | | then return 0.6580193346218546;  // std dev = 0.949, 10.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | | | else return 0.2483783904995299;  // std dev = 3.771, 58.000 (wgt'ed) examples reached here.  /* #neg=33 #pos=25 */
%   | | else if ( teamplaysagainstteam(I, A) )
%   | | | then return 0.29900302349987407;  // std dev = 6.614, 220.000 (wgt'ed) examples reached here.  /* #neg=110 #pos=110 */
%   | | | else return 0.3087411357856373;  // std dev = 6.042, 146.000 (wgt'ed) examples reached here.  /* #neg=73 #pos=73 */
WILL Produced-Tree #3
% FOR teamplayssport(A, B):
%   if ( teamalsoknownas(C, A), recursion_teamplayssport(C, B) )
%   then return 0.4092632102070382;  // std dev = 1.839, 22.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=17 */
%   else if ( teamalsoknownas(D, A) )
%   | then if ( teamplaysagainstteam(E, A), recursion_teamplayssport(E, B) )
%   | | then if ( teamplaysinleague(D, F) )
%   | | | then return 0.48014649868846854;  // std dev = 1.223, 10.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( teamplaysagainstteam(G, D), teamplaysagainstteam(G, A) )
%   | | | then return -0.09087049510724135;  // std dev = 0.988, 19.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=1 */
%   | | | else return 0.26410195600186953;  // std dev = 3.418, 47.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=23 */
%   | else if ( teamalsoknownas(A, H), athleteplaysforteam(I, H) )
%   | | then if ( recursion_teamplayssport(H, B) )
%   | | | then return 0.6186522729256615;  // std dev = 2.11e-08, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.027313094406462006;  // std dev = 1.732, 16.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=4 */
%   | | else return 0.25355421131428324;  // std dev = 0.467, 410.000 (wgt'ed) examples reached here.  /* #neg=205 #pos=205 */
WILL Produced-Tree #4
% FOR teamplayssport(A, B):
%   if ( teamalsoknownas(C, A), teamalsoknownas(D, C) )
%   then if ( recursion_teamplayssport(D, B) )
%   | then if ( athleteplaysforteam(E, C) )
%   | | then return 0.5223777316383712;  // std dev = 0.039, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else return 0.2606280946247797;  // std dev = 3.535, 51.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=29 */
%   | else if ( athleteplaysforteam(F, A) )
%   | | then if ( teamplaysagainstteam(G, A), recursion_teamplayssport(G, B) )
%   | | | then return 0.19300413969651742;  // std dev = 0.720, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.001181520758862127;  // std dev = 1.319, 13.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=2 */
%   | | else if ( teamalsoknownas(H, D), recursion_teamplayssport(H, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.26919441591407944;  // std dev = 0.111, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   else return 0.20165265484945225;  // std dev = 9.705, 452.000 (wgt'ed) examples reached here.  /* #neg=226 #pos=226 */
WILL Produced-Tree #5
% FOR teamplayssport(A, B):
%   if ( teamalsoknownas(A, C), recursion_teamplayssport(C, B) )
%   then return 0.24731518471882263;  // std dev = 1.687, 20.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=16 */
%   else if ( teamalsoknownas(A, D), athleteplaysforteam(E, D) )
%   | then if ( teamalsoknownas(D, F), teamplaysagainstteam(G, F) )
%   | | then if ( teamalsoknownas(H, A) )
%   | | | then return -0.15757291921284167;  // std dev = 0.028, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return -0.0648111063568378;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else if ( teamalsoknownas(D, I), recursion_teamplayssport(I, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.00683796929774393;  // std dev = 1.487, 12.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=3 */
%   | else if ( teamalsoknownas(J, A), recursion_teamplayssport(J, B) )
%   | | then if ( teamplaysagainstteam(K, A), teamalsoknownas(L, J) )
%   | | | then return 0.3771491094480066;  // std dev = 7.45e-09, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.2648871512969377;  // std dev = 1.067, 9.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=7 */
%   | | else if ( teamplaysagainstteam(M, A), recursion_teamplayssport(M, B) )
%   | | | then return 0.4670680908817813;  // std dev = 3.420, 129.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=116 */
%   | | | else return 0.046724815224343;  // std dev = 8.535, 351.000 (wgt'ed) examples reached here.  /* #neg=231 #pos=120 */
WILL Produced-Tree #6
% FOR teamplayssport(A, B):
%   if ( teamplaysagainstteam(C, A), recursion_teamplayssport(C, B) )
%   then if ( teamalsoknownas(D, A), teamplaysinleague(D, E) )
%   | then return 0.23488484954270647;  // std dev = 1.725, 27.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=23 */
%   | else return 0.37602954905028213;  // std dev = 3.243, 133.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=122 */
%   else if ( teamalsoknownas(F, A), teamalsoknownas(G, F) )
%   | then if ( recursion_teamplayssport(G, B) )
%   | | then return 0.17544034573377545;  // std dev = 3.323, 43.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=23 */
%   | | else if ( teamplaysinleague(A, H), teamplaysagainstteam(I, A) )
%   | | | then return -0.008560206569032641;  // std dev = 1.317, 14.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=2 */
%   | | | else return -0.24573038131629485;  // std dev = 0.012, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else if ( teamplaysinleague(A, J) )
%   | | then if ( teamplaysinleague(K, J), recursion_teamplayssport(K, B) )
%   | | | then return 0.28799078961188984;  // std dev = 4.668, 94.000 (wgt'ed) examples reached here.  /* #neg=36 #pos=58 */
%   | | | else return -0.2712789722704295;  // std dev = 0.528, 128.000 (wgt'ed) examples reached here.  /* #neg=128 */
%   | | else if ( teamalsoknownas(A, L) )
%   | | | then return 0.052909535218291094;  // std dev = 1.571, 11.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=4 */
%   | | | else return 0.11110805075749547;  // std dev = 4.281, 77.000 (wgt'ed) examples reached here.  /* #neg=43 #pos=34 */
WILL Produced-Tree #7
% FOR teamplayssport(A, B):
%   if ( teamalsoknownas(C, A), athleteplaysforteam(D, C) )
%   then if ( recursion_teamplayssport(C, B) )
%   | then return 0.2050411850634043;  // std dev = 1.100, 16.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=14 */
%   | else if ( teamalsoknownas(E, C) )
%   | | then return 0.049875576585587875;  // std dev = 1.198, 14.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=4 */
%   | | else return 0.0016381084559954073;  // std dev = 0.961, 10.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   else if ( teamplaysagainstteam(F, A) )
%   | then if ( teamalsoknownas(G, F), recursion_teamplayssport(G, B) )
%   | | then return 0.34280163425622767;  // std dev = 1.721, 86.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=83 */
%   | | else if ( athleteplaysforteam(H, A), teamalsoknownas(I, F) )
%   | | | then return -0.1841044976716799;  // std dev = 2.480, 89.000 (wgt'ed) examples reached here.  /* #neg=79 #pos=10 */
%   | | | else return 0.04193460266531735;  // std dev = 3.937, 111.000 (wgt'ed) examples reached here.  /* #neg=61 #pos=50 */
%   | else if ( teamplaysagainstteam(J, A), teamalsoknownas(K, J) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( teamplaysagainstteam(L, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.12408890152311455;  // std dev = 6.926, 206.000 (wgt'ed) examples reached here.  /* #neg=103 #pos=103 */
WILL Produced-Tree #8
% FOR teamplayssport(A, B):
%   if ( teamalsoknownas(A, C), recursion_teamplayssport(C, B) )
%   then return 0.07371083525019965;  // std dev = 1.641, 20.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=16 */
%   else if ( teamalsoknownas(A, D), athleteplaysforteam(E, D) )
%   | then if ( teamplaysagainstteam(F, D), teamalsoknownas(F, G) )
%   | | then if ( recursion_teamplayssport(G, B) )
%   | | | then return 0.19587259377427557;  // std dev = 0.539, 2.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */
%   | | | else return -0.05453287730121763;  // std dev = 1.263, 18.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=3 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( teamalsoknownas(A, H) )
%   | | then if ( teamalsoknownas(H, I) )
%   | | | then return 0.0962606324753788;  // std dev = 4.255, 81.000 (wgt'ed) examples reached here.  /* #neg=40 #pos=41 */
%   | | | else return -6.486767316379871E-4;  // std dev = 1.030, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | else if ( athleteplaysforteam(J, A) )
%   | | | then return 0.05246254189137813;  // std dev = 4.189, 196.000 (wgt'ed) examples reached here.  /* #neg=98 #pos=98 */
%   | | | else return 0.0815090481371529;  // std dev = 6.516, 210.000 (wgt'ed) examples reached here.  /* #neg=105 #pos=105 */
WILL Produced-Tree #9
% FOR teamplayssport(A, B):
%   if ( recursion_teamplayssport(C, B) )
%   then if ( teamalsoknownas(D, C), teamalsoknownas(C, E) )
%   | then return 0.11043513222728367;  // std dev = 7.832, 366.000 (wgt'ed) examples reached here.  /* #neg=150 #pos=216 */
%   | else if ( teamplaysagainstteam(F, A), teamplaysagainstteam(F, C) )
%   | | then return 0.16901847156192645;  // std dev = 2.532, 52.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=39 */
%   | | else return -0.18418815648253653;  // std dev = 2.785, 114.000 (wgt'ed) examples reached here.  /* #neg=103 #pos=11 */
%   else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR teamplayssport(A, B):
%   if ( recursion_teamplayssport(C, B) )
%   then if ( teamalsoknownas(C, D), athleteplaysforteam(E, C) )
%   | then return 0.1570877874700024;  // std dev = 7.647, 374.000 (wgt'ed) examples reached here.  /* #neg=112 #pos=262 */
%   | else return -0.23585376381365694;  // std dev = 2.266, 158.000 (wgt'ed) examples reached here.  /* #neg=154 #pos=4 */
%   else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 0.924043
   AUC PR    = 0.895412
   CLL	      = -0.440879
   Precision = 0.862903 at threshold = 0.5
   Recall    = 0.816794
   F1        = 0.839216


Total learning time: 13.156 seconds
Total inference time: 4.144 seconds
AUC ROC: 0.924043


Results scoring model
   AUC ROC   = 0.91511
   AUC PR    = 0.906226
   CLL	      = -0.449782
   Precision = 0.836 at threshold = 0.5
   Recall    = 0.785714
   F1        = 0.810078


Total scoring time: 5.105 seconds
Parameter learned model CLL: -0.449782


Structure after Parameter Learning
[['teamplayssport(A, B)', {'': 'teamalsoknownas(A, C)', 'true': 'recursion_teamplayssport(C, B)', 'false': 'teamplaysagainstteam(D, A)', 'false,true': 'recursion_teamplayssport(D, B)', 'false,true,false': 'teamalsoknownas(E, A), recursion_teamplayssport(E, B)', 'false,false': 'athleteplaysforteam(F, A)', 'false,false,true': 'athleteledsportsteam(F, G)', 'false,false,false': 'teamplaysinleague(A, H)'}, {'true,true': [1.789, 4, 16], 'true,false': [5.115, 59, 47], 'false,true,true': [3.034, 10, 116], 'false,true,false,true': [0.0, 0, 0], 'false,true,false,false': [2.889, 115, 9], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [1.0, 2, 2], 'false,false,false,true': [4.528, 41, 41], 'false,false,false,false': [4.183, 35, 35]}], ['teamplayssport(A, B)', {'': 'teamplaysagainstteam(C, A), teamalsoknownas(D, A)', 'true': 'recursion_teamplayssport(D, B)', 'true,false': 'recursion_teamplayssport(C, B), teamplaysinleague(C, E)', 'false': 'teamalsoknownas(F, A)', 'false,true': 'recursion_teamplayssport(G, B)', 'false,false': 'teamalsoknownas(A, H)', 'false,false,true': 'recursion_teamplayssport(H, B)', 'false,false,false': 'teamplaysagainstteam(I, A)'}, {'true,true': [1.537, 3, 16], 'true,false,true': [1.231, 2, 8], 'true,false,false': [1.836, 23, 4], 'false,true,true': [3.241, 21, 21], 'false,true,false': [0.0, 0, 0], 'false,false,true,true': [0.949, 1, 9], 'false,false,true,false': [3.771, 33, 25], 'false,false,false,true': [6.614, 110, 110], 'false,false,false,false': [6.042, 73, 73]}], ['teamplayssport(A, B)', {'': 'teamalsoknownas(C, A), recursion_teamplayssport(C, B)', 'false': 'teamalsoknownas(D, A)', 'false,true': 'teamplaysagainstteam(E, A), recursion_teamplayssport(E, B)', 'false,true,true': 'teamplaysinleague(D, F)', 'false,true,false': 'teamplaysagainstteam(G, D), teamplaysagainstteam(G, A)', 'false,false': 'teamalsoknownas(A, H), athleteplaysforteam(I, H)', 'false,false,true': 'recursion_teamplayssport(H, B)'}, {'true': [1.839, 5, 17], 'false,true,true,true': [1.223, 2, 8], 'false,true,true,false': [0.0, 0, 0], 'false,true,false,true': [0.988, 18, 1], 'false,true,false,false': [3.418, 24, 23], 'false,false,true,true': [2.11e-08, 0, 8], 'false,false,true,false': [1.732, 12, 4], 'false,false,false': [0.467, 205, 205]}], ['teamplayssport(A, B)', {'': 'teamalsoknownas(C, A), teamalsoknownas(D, C)', 'true': 'recursion_teamplayssport(D, B)', 'true,true': 'athleteplaysforteam(E, C)', 'true,false': 'athleteplaysforteam(F, A)', 'true,false,true': 'teamplaysagainstteam(G, A), recursion_teamplayssport(G, B)', 'true,false,false': 'teamalsoknownas(H, D), recursion_teamplayssport(H, B)'}, {'true,true,true': [0.039, 0, 7], 'true,true,false': [3.535, 22, 29], 'true,false,true,true': [0.72, 1, 2], 'true,false,true,false': [1.319, 11, 2], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [0.111, 6, 0], 'false': [9.705, 226, 226]}], ['teamplayssport(A, B)', {'': 'teamalsoknownas(A, C), recursion_teamplayssport(C, B)', 'false': 'teamalsoknownas(A, D), athleteplaysforteam(E, D)', 'false,true': 'teamalsoknownas(D, F), teamplaysagainstteam(G, F)', 'false,true,true': 'teamalsoknownas(H, A)', 'false,true,false': 'teamalsoknownas(D, I), recursion_teamplayssport(I, B)', 'false,false': 'teamalsoknownas(J, A), recursion_teamplayssport(J, B)', 'false,false,true': 'teamplaysagainstteam(K, A), teamalsoknownas(L, J)', 'false,false,false': 'teamplaysagainstteam(M, A), recursion_teamplayssport(M, B)'}, {'true': [1.687, 4, 16], 'false,true,true,true': [0.028, 3, 0], 'false,true,true,false': [0.894, 4, 1], 'false,true,false,true': [0.0, 0, 0], 'false,true,false,false': [1.487, 9, 3], 'false,false,true,true': [7.45e-09, 0, 3], 'false,false,true,false': [1.067, 2, 7], 'false,false,false,true': [3.42, 13, 116], 'false,false,false,false': [8.535, 231, 120]}], ['teamplayssport(A, B)', {'': 'teamplaysagainstteam(C, A), recursion_teamplayssport(C, B)', 'true': 'teamalsoknownas(D, A), teamplaysinleague(D, E)', 'false': 'teamalsoknownas(F, A), teamalsoknownas(G, F)', 'false,true': 'recursion_teamplayssport(G, B)', 'false,true,false': 'teamplaysinleague(A, H), teamplaysagainstteam(I, A)', 'false,false': 'teamplaysinleague(A, J)', 'false,false,true': 'teamplaysinleague(K, J), recursion_teamplayssport(K, B)', 'false,false,false': 'teamalsoknownas(A, L)'}, {'true,true': [1.725, 4, 23], 'true,false': [3.243, 11, 122], 'false,true,true': [3.323, 20, 23], 'false,true,false,true': [1.317, 12, 2], 'false,true,false,false': [0.012, 5, 0], 'false,false,true,true': [4.668, 36, 58], 'false,false,true,false': [0.528, 128, 0], 'false,false,false,true': [1.571, 7, 4], 'false,false,false,false': [4.281, 43, 34]}], ['teamplayssport(A, B)', {'': 'teamalsoknownas(C, A), athleteplaysforteam(D, C)', 'true': 'recursion_teamplayssport(C, B)', 'true,false': 'teamalsoknownas(E, C)', 'false': 'teamplaysagainstteam(F, A)', 'false,true': 'teamalsoknownas(G, F), recursion_teamplayssport(G, B)', 'false,true,false': 'athleteplaysforteam(H, A), teamalsoknownas(I, F)', 'false,false': 'teamplaysagainstteam(J, A), teamalsoknownas(K, J)', 'false,false,false': 'teamplaysagainstteam(L, A)'}, {'true,true': [1.1, 2, 14], 'true,false,true': [1.198, 10, 4], 'true,false,false': [0.961, 8, 2], 'false,true,true': [1.721, 3, 83], 'false,true,false,true': [2.48, 79, 10], 'false,true,false,false': [3.937, 61, 50], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [6.926, 103, 103]}], ['teamplayssport(A, B)', {'': 'teamalsoknownas(A, C), recursion_teamplayssport(C, B)', 'false': 'teamalsoknownas(A, D), athleteplaysforteam(E, D)', 'false,true': 'teamplaysagainstteam(F, D), teamalsoknownas(F, G)', 'false,true,true': 'recursion_teamplayssport(G, B)', 'false,false': 'teamalsoknownas(A, H)', 'false,false,true': 'teamalsoknownas(H, I)', 'false,false,false': 'athleteplaysforteam(J, A)'}, {'true': [1.641, 4, 16], 'false,true,true,true': [0.539, 1, 1], 'false,true,true,false': [1.263, 15, 3], 'false,true,false': [0.0, 0, 0], 'false,false,true,true': [4.255, 40, 41], 'false,false,true,false': [1.03, 3, 2], 'false,false,false,true': [4.189, 98, 98], 'false,false,false,false': [6.516, 105, 105]}], ['teamplayssport(A, B)', {'': 'recursion_teamplayssport(C, B)', 'true': 'teamalsoknownas(D, C), teamalsoknownas(C, E)', 'true,false': 'teamplaysagainstteam(F, A), teamplaysagainstteam(F, C)'}, {'true,true': [7.832, 150, 216], 'true,false,true': [2.532, 13, 39], 'true,false,false': [2.785, 103, 11], 'false': [0.0, 0, 0]}], ['teamplayssport(A, B)', {'': 'recursion_teamplayssport(C, B)', 'true': 'teamalsoknownas(C, D), athleteplaysforteam(E, C)'}, {'true,true': [7.647, 112, 262], 'true,false': [2.266, 154, 4], 'false': [0.0, 0, 0]}]]
[{'': [0.2499999999999997, 0.2500000000000038], 'false': [0.2500000000000036, 0.25000000000000017], 'false,true': [0.0730662635424576, 0.06731269510926112], 'false,false': [0.25, 0.24999999999999978], 'false,false,true': [nan, 0.25], 'false,false,false': [0.25000000000000094, 0.2500000000000016], 'true': [0.1599999999999997, 0.24679601281594904], 'false,true,false': [nan, 0.06731269510926141]}, {'': [0.21795201959896943, 0.2254674991619148], 'false': [0.25016146294013913, 0.22307110535073024], 'false,true': [0.25016146294013913, nan], 'false,false': [0.24346208631253738, 0.21927746902352516], 'false,false,true': [0.09000000000000004, 0.2452437574316286], 'false,false,false': [0.19885105159248814, 0.24999999999999742], 'true': [0.1242943441691381, 0.2022266191565502], 'true,false': [0.15156053719157372, 0.12487768280041793]}, {'': [0.15371068291248224, 0.21817053707994807], 'false': [0.22025555815351078, 0.21745981745695472], 'false,true': [0.149593480598002, 0.2176365897927018], 'false,true,false': [0.05134289318474579, 0.2485874075528348], 'false,false': [0.20270711645594708, 0.21827647165130767], 'false,false,true': [5.551115123125783e-17, 0.18749999999999986], 'false,true,true': [0.149593480598002, nan]}, {'': [0.21902740849597185, 0.20837592512016256], 'true': [0.22279487093556086, 0.12596479697680477], 'true,true': [0.00022188296270868918, 0.24507530962480303], 'true,false': [0.14684366691744116, 0.0020362932357439745], 'true,false,true': [0.17297814833056588, 0.13391339828216278], 'true,false,false': [nan, 0.0020362932357439745]}, {'': [0.14227049087026367, 0.20794997717415759], 'false': [0.15343942398736968, 0.20849394250722328], 'false,false': [0.09724171990711289, 0.21084211686269733], 'false,false,false': [0.0906482134101778, 0.20753091847862204], 'false,true': [0.10211697380705671, 0.18421271153064708], 'false,true,false': [nan, 0.18421271153064708], 'false,true,true': [0.0002672922827768459, 0.16], 'false,false,true': [1.850371707708594e-17, 0.1265049397308391]}, {'': [0.08711278646775189, 0.2024493887294047], 'false': [0.22238443109787184, 0.19695387419688595], 'false,true': [0.25685981518322987, 0.10224911621856757], 'false,false': [0.17577845204907586, 0.2366755178771986], 'false,false,false': [0.2242654459738673, 0.23802500189058937], 'false,false,true': [0.2318228584662881, 0.0021813336258270644], 'false,true,false': [0.12395462065155909, 2.6562487504033782e-05], 'true': [0.11017564377850161, 0.07906904485763211]}, {'': [0.09693701851310912, 0.173287448157577], 'false': [0.1287712151653035, 0.23285524245458905], 'false,false': [nan, 0.23285524245458905], 'false,false,false': [nan, 0.23285524245458905], 'false,true': [0.03442507062661492, 0.12087765594906387], 'false,true,false': [0.06911764069082633, 0.13964224412229168], 'true': [0.07564227850186181, 0.09884644636405841], 'true,false': [0.1024770984855814, 0.09240620228385335]}, {'': [0.13472582728615365, 0.15922206331267127], 'false': [0.09987959602720202, 0.16123569526330367], 'false,false': [0.2233359776816087, 0.1479878534843991], 'false,false,true': [0.22348713786231197, 0.21204178099736087], 'false,false,false': [0.08951337167534745, 0.20215673328717434], 'false,true': [0.09987959602720202, nan], 'false,true,true': [0.14500653858999096, 0.08859520130354927]}, {'': [0.15757094416656803, nan], 'true': [0.16760393663241477, 0.11216309944793833], 'true,false': [0.12326672531184715, 0.06801843253641374]}, {'': [0.1517972918271209, nan], 'true': [0.156338626713054, 0.032501035734249825]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
2;;teamplayssport(A, B) :- teamalsoknownas(C, A), recursion_teamplayssport(C, B).;true;true
2;false;teamalsoknownas(D, A).;true;true
2;false,false;teamalsoknownas(A, H), athleteplaysforteam(I, H).;true;true
2;false,false,true;recursion_teamplayssport(H, B).;true;true
3;;teamplayssport(A, B) :- teamalsoknownas(C, A), teamalsoknownas(D, C).;true;true
3;true;recursion_teamplayssport(D, B).;true;true
3;true,true;athleteplaysforteam(E, C).;true;true
3;true,false;athleteplaysforteam(F, A).;true;true
4;;teamplayssport(A, B) :- teamalsoknownas(A, C), recursion_teamplayssport(C, B).;true;true
4;false;teamalsoknownas(A, D), athleteplaysforteam(E, D).;true;true
4;false,true;teamalsoknownas(D, F), teamplaysagainstteam(G, F).;true;true
4;false,true,true;teamalsoknownas(H, A).;true;true
4;false,false;teamalsoknownas(J, A), recursion_teamplayssport(J, B).;true;true
4;false,false,true;teamplaysagainstteam(K, A), teamalsoknownas(L, J).;true;true
5;;teamplayssport(A, B) :- teamplaysagainstteam(C, A), recursion_teamplayssport(C, B).;true;true
5;false;teamalsoknownas(F, A), teamalsoknownas(G, F).;true;true
5;false,true;recursion_teamplayssport(G, B).;true;true
5;false,true,false;teamplaysinleague(A, H), teamplaysagainstteam(I, A).;true;true
5;false,false;teamplaysinleague(A, J).;true;true
5;false,false,true;teamplaysinleague(K, J), recursion_teamplayssport(K, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR teamplayssport(A, B):
%   if ( athleteplayssport(C, B), athleteledsportsteam(C, D) )
%   then if ( teamplaysagainstteam(A, E), recursion_teamplayssport(E, B) )
%   | then if ( teamplaysagainstteam(E, D) )
%   | | then return 0.8256286098962585;  // std dev = 0.177, 123.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=119 */
%   | | else if ( teamplaysinleague(A, F), teamplaysinleague(E, F) )
%   | | | then return 0.7470378239884012;  // std dev = 0.943, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | | else return 0.19148226843284552;  // std dev = 1.414, 9.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=3 */
%   | else if ( athleteplaysforteam(C, G), teamalsoknownas(D, G) )
%   | | then if ( teamplaysagainstteam(A, H), teamplaysinleague(H, I) )
%   | | | then return 0.1438632208137979;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=2 */
%   | | | else return -0.024204006076958388;  // std dev = 1.328, 17.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=2 */
%   | | else if ( teamplaysagainstteam(A, J), athleteledsportsteam(K, J) )
%   | | | then return 0.014398935099512298;  // std dev = 2.054, 32.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=5 */
%   | | | else return 0.6321215378392364;  // std dev = 5.054, 146.000 (wgt'ed) examples reached here.  /* #neg=33 #pos=113 */
%   else if ( teamplaysagainstteam(L, A), recursion_teamplayssport(L, B) )
%   | then return 0.6763307532813305;  // std dev = 0.386, 11.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=9 */
%   | else return -0.11376117726003822;  // std dev = 0.165, 178.000 (wgt'ed) examples reached here.  /* #neg=173 #pos=5 */
WILL Produced-Tree #2
% FOR teamplayssport(A, B):
%   if ( athleteplayssport(C, B), athleteledsportsteam(C, D) )
%   then if ( teamplaysinleague(A, E), athleteplaysinleague(C, E) )
%   | then return 0.6903400924189723;  // std dev = 0.192, 127.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=121 */
%   | else if ( teamplaysinleague(A, F), athleteplaysinleague(G, F) )
%   | | then if ( athleteplayssport(G, H), recursion_teamplayssport(A, H) )
%   | | | then return -0.1740457792765179;  // std dev = 0.262, 30.000 (wgt'ed) examples reached here.  /* #neg=30 */
%   | | | else return 0.47523253976076935;  // std dev = 3.030, 47.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=33 */
%   | | else if ( teamplaysinleague(A, I), teamplaysinleague(D, I) )
%   | | | then return 0.6925353520987131;  // std dev = 1.367, 28.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=26 */
%   | | | else return 0.42858310033348596;  // std dev = 4.816, 111.000 (wgt'ed) examples reached here.  /* #neg=39 #pos=72 */
%   else if ( teamalsoknownas(A, J), athleteplayssport(K, B) )
%   | then if ( teamplaysagainstteam(A, J), recursion_teamplayssport(J, B) )
%   | | then return 0.7546686895771394;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( teamplaysagainstteam(L, A), athleteplaysforteam(M, L) )
%   | | | then return -0.13828992760015754;  // std dev = 0.112, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | | else return 0.11171007239984244;  // std dev = 1.445, 12.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=3 */
%   | else return -0.08350108110518356;  // std dev = 0.202, 162.000 (wgt'ed) examples reached here.  /* #neg=154 #pos=8 */
WILL Produced-Tree #3
% FOR teamplayssport(A, B):
%   if ( teamalsoknownas(C, A), recursion_teamplayssport(C, B) )
%   then if ( teamplaysagainstteam(D, A), teamalsoknownas(D, A) )
%   | then return 0.5369330615354668;  // std dev = 0.200, 17.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=16 */
%   | else return 0.011831301320762233;  // std dev = 0.960, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   else if ( teamalsoknownas(E, A) )
%   | then if ( athleteplayssport(F, B), athleteledsportsteam(F, G) )
%   | | then if ( athleteledsportsteam(H, A), teamalsoknownas(A, I) )
%   | | | then return 0.08477240891164398;  // std dev = 1.066, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | | else return 0.3947731435333316;  // std dev = 2.599, 39.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=28 */
%   | | else return -0.0599162416252256;  // std dev = 0.240, 32.000 (wgt'ed) examples reached here.  /* #neg=30 #pos=2 */
%   | else if ( teamalsoknownas(A, J), athleteplaysforteam(K, J) )
%   | | then if ( recursion_teamplayssport(J, B) )
%   | | | then return 0.5731196699032892;  // std dev = 0.019, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.03256588732191856;  // std dev = 1.331, 16.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=4 */
%   | | else if ( athleteplayssport(L, B), athleteledsportsteam(L, M) )
%   | | | then return 0.4020773771682915;  // std dev = 6.209, 268.000 (wgt'ed) examples reached here.  /* #neg=70 #pos=198 */
%   | | | else return -0.07563271396784223;  // std dev = 2.373, 142.000 (wgt'ed) examples reached here.  /* #neg=135 #pos=7 */
WILL Produced-Tree #4
% FOR teamplayssport(A, B):
%   if ( teamalsoknownas(C, A), teamalsoknownas(D, C) )
%   then if ( recursion_teamplayssport(D, B) )
%   | then if ( athleteplaysforteam(E, C) )
%   | | then return 0.4400330909792953;  // std dev = 0.020, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else if ( athleteplayssport(F, B), athleteplaysinleague(F, G) )
%   | | | then return 0.25725178287188777;  // std dev = 2.919, 44.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=28 */
%   | | | else return 0.017445321621604264;  // std dev = 0.916, 7.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=1 */
%   | else if ( athleteplaysforteam(H, A) )
%   | | then return 0.04530261179847247;  // std dev = 0.331, 16.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=4 */
%   | | else return -0.11685318519176564;  // std dev = 0.019, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   else if ( athleteplayssport(I, B), athleteplaysinleague(I, J) )
%   | then if ( teamplaysagainstteam(K, A), recursion_teamplayssport(K, B) )
%   | | then return 0.43992243781403806;  // std dev = 0.226, 141.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=130 */
%   | | else if ( teamplaysagainstteam(L, A) )
%   | | | then return -0.037417137688144655;  // std dev = 2.718, 56.000 (wgt'ed) examples reached here.  /* #neg=43 #pos=13 */
%   | | | else return 0.2835976669093016;  // std dev = 4.454, 120.000 (wgt'ed) examples reached here.  /* #neg=39 #pos=81 */
%   | else return -0.09857295673913927;  // std dev = 0.121, 135.000 (wgt'ed) examples reached here.  /* #neg=133 #pos=2 */
WILL Produced-Tree #5
% FOR teamplayssport(A, B):
%   if ( teamalsoknownas(A, C), recursion_teamplayssport(C, B) )
%   then if ( teamplaysinleague(A, D), athleteplaysinleague(E, D) )
%   | then return 0.35565955029427837;  // std dev = 0.091, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | else if ( teamalsoknownas(A, F), teamplaysagainstteam(A, F) )
%   | | then return 0.364044596670674;  // std dev = 0.039, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.012357826187437793;  // std dev = 0.911, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   else if ( teamalsoknownas(A, G), athleteplaysforteam(H, G) )
%   | then if ( teamalsoknownas(G, I), teamplaysagainstteam(J, I) )
%   | | then return -0.04899801029787663;  // std dev = 0.215, 8.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */
%   | | else return 0.004411864607840433;  // std dev = 0.279, 12.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=3 */
%   | else if ( teamalsoknownas(K, A), recursion_teamplayssport(K, B) )
%   | | then if ( teamplaysagainstteam(L, A), teamalsoknownas(M, K) )
%   | | | then return 0.33321795468941523;  // std dev = 0.000398, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.1906639682182898;  // std dev = 1.004, 9.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=7 */
%   | | else if ( athleteplayssport(N, B), athleteledsportsteam(N, P) )
%   | | | then return 0.23703972271192725;  // std dev = 6.468, 312.000 (wgt'ed) examples reached here.  /* #neg=84 #pos=228 */
%   | | | else return -0.06485976443290403;  // std dev = 2.504, 168.000 (wgt'ed) examples reached here.  /* #neg=160 #pos=8 */
WILL Produced-Tree #6
% FOR teamplayssport(A, B):
%   if ( teamplaysagainstteam(C, A), recursion_teamplayssport(C, B) )
%   then return 0.2758942911412732;  // std dev = 0.238, 160.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=145 */
%   else if ( teamalsoknownas(D, A), teamalsoknownas(E, D) )
%   | then if ( recursion_teamplayssport(E, B) )
%   | | then if ( teamplaysinleague(A, F) )
%   | | | then return 0.04343638498656171;  // std dev = 2.486, 31.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=15 */
%   | | | else return 0.27498764395253833;  // std dev = 1.206, 12.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=8 */
%   | | else if ( teamplaysinleague(A, G), teamplaysagainstteam(H, A) )
%   | | | then return -0.017879947314048995;  // std dev = 1.092, 14.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=2 */
%   | | | else return -0.09998808813087909;  // std dev = 0.016, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else if ( teamplaysinleague(A, I) )
%   | | then if ( teamplaysinleague(J, I), recursion_teamplayssport(J, B) )
%   | | | then return 0.16790672884818145;  // std dev = 3.492, 94.000 (wgt'ed) examples reached here.  /* #neg=36 #pos=58 */
%   | | | else return -0.13842589559691482;  // std dev = 1.119, 128.000 (wgt'ed) examples reached here.  /* #neg=128 */
%   | | else if ( athleteplayssport(K, B), athleteledsportsteam(K, L) )
%   | | | then return 0.1498260712301369;  // std dev = 3.283, 55.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=36 */
%   | | | else return -0.039411584105873185;  // std dev = 1.377, 33.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=2 */
WILL Produced-Tree #7
% FOR teamplayssport(A, B):
%   if ( teamplaysagainstteam(A, C), recursion_teamplayssport(C, B) )
%   then if ( teamplaysinleague(C, D), teamplaysinleague(A, D) )
%   | then return 0.24761391355056853;  // std dev = 0.151, 125.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=122 */
%   | else if ( teamplaysinleague(A, E), teamalsoknownas(C, F) )
%   | | then return -0.38066186024832754;  // std dev = 0.244, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( teamplaysinleague(C, G) )
%   | | | then return 0.11764907864215972;  // std dev = 1.352, 13.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=9 */
%   | | | else return 0.48104316594999225;  // std dev = 0.421, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   else if ( teamplaysagainstteam(A, H), teamplaysagainstteam(I, A) )
%   | then return -0.09006258688232595;  // std dev = 0.221, 150.000 (wgt'ed) examples reached here.  /* #neg=137 #pos=13 */
%   | else if ( athleteplayssport(J, B), athleteledsportsteam(J, K) )
%   | | then if ( athleteplaysforteam(J, K), teamalsoknownas(K, L) )
%   | | | then return 0.041094776021811344;  // std dev = 3.926, 80.000 (wgt'ed) examples reached here.  /* #neg=34 #pos=46 */
%   | | | else return 0.2700973242837317;  // std dev = 2.732, 73.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=64 */
%   | | else if ( athleteplayssport(M, B), teamalsoknownas(N, A) )
%   | | | then return 0.038509565656366124;  // std dev = 1.229, 11.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=2 */
%   | | | else return -0.0648005692109293;  // std dev = 1.533, 68.000 (wgt'ed) examples reached here.  /* #neg=65 #pos=3 */
WILL Produced-Tree #8
% FOR teamplayssport(A, B):
%   if ( teamplaysagainstteam(C, A), recursion_teamplayssport(C, B) )
%   then if ( teamplaysinleague(C, D) )
%   | then return 0.1712807342373316;  // std dev = 0.224, 155.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=140 */
%   | else return 0.42886107681000274;  // std dev = 0.376, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( teamplaysagainstteam(E, A) )
%   | then if ( teamalsoknownas(E, F), teamplaysagainstteam(G, F) )
%   | | then return -0.11090971385003565;  // std dev = 0.124, 95.000 (wgt'ed) examples reached here.  /* #neg=93 #pos=2 */
%   | | else if ( teamalsoknownas(H, E), recursion_teamplayssport(H, B) )
%   | | | then return 0.26046618720726195;  // std dev = 0.687, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | else return -0.03606072593417452;  // std dev = 2.430, 65.000 (wgt'ed) examples reached here.  /* #neg=53 #pos=12 */
%   | else if ( athleteplayssport(I, B), athleteledsportsteam(I, J) )
%   | | then if ( athleteplaysforteam(I, J), teamalsoknownas(J, K) )
%   | | | then return 0.01138989218800066;  // std dev = 3.722, 68.000 (wgt'ed) examples reached here.  /* #neg=30 #pos=38 */
%   | | | else return 0.22638730349333927;  // std dev = 2.484, 69.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=62 */
%   | | else if ( teamalsoknownas(L, A), teamalsoknownas(A, L) )
%   | | | then return 0.07994048555771682;  // std dev = 1.186, 9.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | | | else return -0.06681403921893674;  // std dev = 1.421, 62.000 (wgt'ed) examples reached here.  /* #neg=60 #pos=2 */
WILL Produced-Tree #9
% FOR teamplayssport(A, B):
%   if ( teamplaysagainstteam(A, C), recursion_teamplayssport(C, B) )
%   then if ( teamplaysinleague(C, D), teamplaysinleague(A, D) )
%   | then return 0.17443188519127736;  // std dev = 0.150, 125.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=122 */
%   | else return 0.057999085585407374;  // std dev = 0.359, 25.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=16 */
%   else if ( teamplaysagainstteam(A, E), athleteplaysforteam(F, E) )
%   | then if ( athleteplayssport(F, G), recursion_teamplayssport(A, G) )
%   | | then return -0.10682843529474934;  // std dev = 0.124, 110.000 (wgt'ed) examples reached here.  /* #neg=108 #pos=2 */
%   | | else if ( teamplaysinleague(E, H) )
%   | | | then return 0.03381776215185223;  // std dev = 2.252, 38.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=11 */
%   | | | else return -0.23579140806806775;  // std dev = 0.193, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( athleteplayssport(I, B), athleteledsportsteam(I, J) )
%   | | then if ( athleteplaysforteam(I, J), teamalsoknownas(J, K) )
%   | | | then return 0.028424598953076512;  // std dev = 3.886, 79.000 (wgt'ed) examples reached here.  /* #neg=33 #pos=46 */
%   | | | else return 0.16046420992339774;  // std dev = 2.715, 73.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=64 */
%   | | else if ( athleteplayssport(L, B) )
%   | | | then return -0.02090386789913009;  // std dev = 1.943, 52.000 (wgt'ed) examples reached here.  /* #neg=47 #pos=5 */
%   | | | else return -0.0839548800573887;  // std dev = 0.057, 27.000 (wgt'ed) examples reached here.  /* #neg=27 */
WILL Produced-Tree #10
% FOR teamplayssport(A, B):
%   if ( teamplaysagainstteam(A, C), recursion_teamplayssport(C, B) )
%   then if ( teamalsoknownas(A, D), teamalsoknownas(D, C) )
%   | then return -0.02046218586074956;  // std dev = 0.295, 10.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=7 */
%   | else return 0.14237676929343696;  // std dev = 0.191, 140.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=131 */
%   else if ( teamplaysagainstteam(A, E), athleteplaysforteam(F, E) )
%   | then if ( athleteplayssport(F, G), recursion_teamplayssport(A, G) )
%   | | then return -0.09672252219765487;  // std dev = 0.121, 110.000 (wgt'ed) examples reached here.  /* #neg=108 #pos=2 */
%   | | else if ( athleteledsportsteam(H, A), athleteplayssport(I, B) )
%   | | | then return -0.348362170793487;  // std dev = 0.094, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.0402502267491401;  // std dev = 2.190, 38.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=11 */
%   | else if ( athleteplayssport(J, B), athleteledsportsteam(J, K) )
%   | | then if ( teamplaysinleague(A, L), teamplaysinleague(K, L) )
%   | | | then return 0.15565514219437934;  // std dev = 1.998, 50.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=44 */
%   | | | else return 0.03301580841958583;  // std dev = 4.294, 102.000 (wgt'ed) examples reached here.  /* #neg=36 #pos=66 */
%   | | else if ( teamalsoknownas(A, M), athleteplayssport(N, B) )
%   | | | then return 0.04109710213052336;  // std dev = 1.320, 14.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=3 */
%   | | | else return -0.056224865930105415;  // std dev = 1.411, 65.000 (wgt'ed) examples reached here.  /* #neg=63 #pos=2 */


Results
   AUC ROC   = 0.964775
   AUC PR    = 0.961129
   CLL	      = -0.293687
   Precision = 0.896296 at threshold = 0.5
   Recall    = 0.923664
   F1        = 0.909774


Total learning time: 356.707 seconds
Total inference time: 7.953 seconds
AUC ROC: 0.964775


Results scoring model
   AUC ROC   = 0.967381
   AUC PR    = 0.965408
   CLL	      = -0.291693
   Precision = 0.887719 at threshold = 0.5
   Recall    = 0.951128
   F1        = 0.91833


Total scoring time: 8.294 seconds
Refined model CLL: -0.291693


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.964775
   AUC PR    = 0.961129
   CLL	      = -0.293687
   Precision = 0.896296 at threshold = 0.5
   Recall    = 0.923664
   F1        = 0.909774


Total learning time: 383.262 seconds
Total inference time: 7.953 seconds
AUC ROC: 0.964775
Total revision time: 383.262
Best scored revision CLL: -0.291693


Dataset: 10_nell_finances_nell_sports, Fold: 3, Type: Transfer (trRDN-B), Time: 21:42:13
{'AUC ROC': 0.964775, 'AUC PR': 0.961129, 'CLL': -0.293687, 'Precision': [0.896296, 0.5], 'Recall': 0.923664, 'F1': 0.909774, 'Learning time': 383.262, 'Inference time': 7.953, 'parameter_1.0': {'AUC ROC': 0.924043, 'AUC PR': 0.895412, 'CLL': -0.440879, 'Precision': [0.862903, 0.5], 'Recall': 0.816794, 'F1': 0.839216, 'Learning time': 13.156, 'Inference time': 4.144}}


