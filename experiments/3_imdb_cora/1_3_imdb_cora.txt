Starting experiment #1 for 3_imdb_cora

Start learning from source dataset

Source train facts examples: 1078
Source train pos examples: 382
Source train neg examples: 14236

WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.8581489350995083;  // std dev = 1.43e-06, 382.000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.14185106490048766;  // std dev = 6.83e-08, 69.000 (wgt'ed) examples reached here.  /* #neg=69 */
%   else return -0.14185106490048902;  // std dev = 0.000, 697.000 (wgt'ed) examples reached here.  /* #neg=697 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.7194734122109581;  // std dev = 0.000, 382.000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.1254446385283916;  // std dev = 0.000, 60.000 (wgt'ed) examples reached here.  /* #neg=60 */
%   else return -0.12544463852839235;  // std dev = 0.000, 690.000 (wgt'ed) examples reached here.  /* #neg=690 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.555366436746283;  // std dev = 0.000, 382.000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.1123163781936063;  // std dev = 3.49e-08, 53.000 (wgt'ed) examples reached here.  /* #neg=53 */
%   else return -0.11231637819360621;  // std dev = 0.000, 660.000 (wgt'ed) examples reached here.  /* #neg=660 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.417513584158312;  // std dev = 0.000, 382.000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.1015963294878362;  // std dev = 4.08e-08, 61.000 (wgt'ed) examples reached here.  /* #neg=61 */
%   else return -0.10159632948783522;  // std dev = 4.34e-07, 683.000 (wgt'ed) examples reached here.  /* #neg=683 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.32071184716015166;  // std dev = 0.000, 382.000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.09269127618926107;  // std dev = 0.000, 66.000 (wgt'ed) examples reached here.  /* #neg=66 */
%   else return -0.0926912761892618;  // std dev = 0.000, 747.000 (wgt'ed) examples reached here.  /* #neg=747 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.25517224256948734;  // std dev = 4.42e-07, 382.000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.08518475138839679;  // std dev = 1.83e-08, 53.000 (wgt'ed) examples reached here.  /* #neg=53 */
%   else return -0.08518475138839675;  // std dev = 1.69e-07, 693.000 (wgt'ed) examples reached here.  /* #neg=693 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.20975771563253462;  // std dev = 2.53e-07, 382.000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.07877675473109179;  // std dev = 0.000, 49.000 (wgt'ed) examples reached here.  /* #neg=49 */
%   else return -0.07877675473109279;  // std dev = 0.000, 693.000 (wgt'ed) examples reached here.  /* #neg=693 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.17709649774527667;  // std dev = 2.60e-07, 382.000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.07324622576333704;  // std dev = 0.000, 59.000 (wgt'ed) examples reached here.  /* #neg=59 */
%   else return -0.07324622576333663;  // std dev = 2.12e-07, 687.000 (wgt'ed) examples reached here.  /* #neg=687 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.15274385809367164;  // std dev = 0.000, 382.000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.06842697784420268;  // std dev = 1.83e-08, 57.000 (wgt'ed) examples reached here.  /* #neg=57 */
%   else return -0.06842697784420251;  // std dev = 1.87e-07, 694.000 (wgt'ed) examples reached here.  /* #neg=694 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.13400703000801212;  // std dev = 0.000, 382.000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.06419184008202625;  // std dev = 0.000, 49.000 (wgt'ed) examples reached here.  /* #neg=49 */
%   else return -0.06419184008202541;  // std dev = 2.43e-07, 654.000 (wgt'ed) examples reached here.  /* #neg=654 */


Starting fold 1

Target train facts examples: 7463
Target train pos examples: 368
Target train neg examples: 368

Target test facts examples: 35095
Target test pos	 examples: 2649
Target test neg examples: 2372

Amount of data: 0.2
******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- actor(A), director(B).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.8581489350995122;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   else return 0.27878385573443404;  // std dev = 5.541, 126.000 (wgt'ed) examples reached here.  /* #neg=73 #pos=53 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.7194734122109543;  // std dev = 7.30e-08, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   else return 0.24135241484636416;  // std dev = 5.541, 126.000 (wgt'ed) examples reached here.  /* #neg=73 #pos=53 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.5553664367462846;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   else return 0.20306149989754532;  // std dev = 5.541, 126.000 (wgt'ed) examples reached here.  /* #neg=73 #pos=53 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.41751358415830986;  // std dev = 5.16e-08, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   else return 0.1665232787404738;  // std dev = 5.541, 126.000 (wgt'ed) examples reached here.  /* #neg=73 #pos=53 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.3207118471601496;  // std dev = 2.11e-08, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   else return 0.1336921619533845;  // std dev = 5.541, 126.000 (wgt'ed) examples reached here.  /* #neg=73 #pos=53 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.25517224256948945;  // std dev = 1.49e-08, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   else return 0.10557894362473141;  // std dev = 5.541, 126.000 (wgt'ed) examples reached here.  /* #neg=73 #pos=53 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.2097577156325356;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   else return 0.08236371649363478;  // std dev = 5.541, 126.000 (wgt'ed) examples reached here.  /* #neg=73 #pos=53 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.17709649774527744;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   else return 0.06368890605826044;  // std dev = 5.541, 126.000 (wgt'ed) examples reached here.  /* #neg=73 #pos=53 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.1527438580936708;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   else return 0.04894065179402556;  // std dev = 5.541, 126.000 (wgt'ed) examples reached here.  /* #neg=73 #pos=53 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.13400703000801117;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   else return 0.03744125375149106;  // std dev = 5.541, 126.000 (wgt'ed) examples reached here.  /* #neg=73 #pos=53 */


Results
   AUC ROC   = 0.575311
   AUC PR    = 0.659395
   CLL	      = -0.664781
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.150623
   F1        = 0.261811


Total learning time: 1.239 seconds
Total inference time: 2.025 seconds
AUC ROC: 0.575311


Results scoring model
   AUC ROC   = 0.636986
   AUC PR    = 0.712167
   CLL	      = -0.606129
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.273973
   F1        = 0.430108


Total scoring time: 0.769 seconds
Parameter learned model CLL: -0.606129


Structure after Parameter Learning
[['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 20], 'false': [5.541, 73, 53]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [7.3e-08, 0, 20], 'false': [5.541, 73, 53]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 20], 'false': [5.541, 73, 53]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [5.16e-08, 0, 20], 'false': [5.541, 73, 53]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [2.11e-08, 0, 20], 'false': [5.541, 73, 53]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [1.49e-08, 0, 20], 'false': [5.541, 73, 53]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 20], 'false': [5.541, 73, 53]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 20], 'false': [5.541, 73, 53]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 20], 'false': [5.541, 73, 53]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 20], 'false': [5.541, 73, 53]}]]
[{'': [-8.881784197001253e-17, 0.2437011841773748]}, {'': [2.6645352591003756e-16, 0.2437011841773742]}, {'': [-2.6645352591003756e-16, 0.24370118417737482]}, {'': [1.3322676295501878e-16, 0.2437011841773738]}, {'': [2.2204460492503132e-17, 0.2437011841773754]}, {'': [1.1102230246251566e-17, 0.2437011841773757]}, {'': [-2.7755575615628914e-17, 0.24370118417737388]}, {'': [-2.2204460492503132e-17, 0.24370118417737408]}, {'': [-3.3306690738754695e-17, 0.2437011841773742]}, {'': [0.0, 0.24370118417737482]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
1;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
2;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
3;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
4;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
5;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
6;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
7;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
8;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
9;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.8581489350995122;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.33339645985198846;  // std dev = 0.499, 101.000 (wgt'ed) examples reached here.  /* #neg=53 #pos=48 */
%   | | else return 0.19148226843284552;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | then return 0.024815601766178853;  // std dev = 0.373, 12.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=2 */
%   | | else return 0.058148935099512175;  // std dev = 0.400, 10.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.7194734122109543;  // std dev = 7.30e-08, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.28778811661748244;  // std dev = 0.499, 101.000 (wgt'ed) examples reached here.  /* #neg=53 #pos=48 */
%   | | else return 0.16653882456488175;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | then return 0.021767884192405756;  // std dev = 0.373, 12.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=2 */
%   | | else return 0.05092203251355425;  // std dev = 0.400, 10.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.5553664367462846;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.23998227167136285;  // std dev = 0.499, 101.000 (wgt'ed) examples reached here.  /* #neg=53 #pos=48 */
%   | | else return 0.1420942428155648;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | then return 0.019049872944810385;  // std dev = 0.373, 12.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=2 */
%   | | else return 0.0443462976046685;  // std dev = 0.400, 10.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.41751358415830986;  // std dev = 5.16e-08, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.1941114240355442;  // std dev = 0.499, 101.000 (wgt'ed) examples reached here.  /* #neg=53 #pos=48 */
%   | | else return 0.11914890490746428;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | then return 0.01663677639228946;  // std dev = 0.373, 12.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=2 */
%   | | else return 0.038428662236904595;  // std dev = 0.400, 10.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.3207118471601496;  // std dev = 2.11e-08, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.1532750287702699;  // std dev = 0.499, 101.000 (wgt'ed) examples reached here.  /* #neg=53 #pos=48 */
%   | | else return 0.09841340278401862;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | then return 0.014502864105143029;  // std dev = 0.373, 12.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=2 */
%   | | else return 0.03315494592188567;  // std dev = 0.400, 10.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.25517224256948945;  // std dev = 1.49e-08, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   else if ( haswordvenue(A, D), haswordtitle(E, D) )
%   | then if ( title(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.4967829088054828;  // std dev = 2.546, 53.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=44 */
%   | | | else return -0.2508800562659468;  // std dev = 2.186, 58.000 (wgt'ed) examples reached here.  /* #neg=53 #pos=5 */
%   | | else return 0.3777832544792086;  // std dev = 0.651, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else return -0.018431875710367526;  // std dev = 0.380, 12.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=2 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.2097577156325356;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.08973820210965769;  // std dev = 0.431, 101.000 (wgt'ed) examples reached here.  /* #neg=53 #pos=48 */
%   | | else return 0.09739088555741758;  // std dev = 0.850, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | then return -0.01770250792866712;  // std dev = 0.355, 12.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=2 */
%   | | else return 0.031098273630651707;  // std dev = 0.400, 10.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.17709649774527744;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   else if ( haswordvenue(A, D), haswordtitle(E, D) )
%   | then if ( title(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.36216283485409284;  // std dev = 2.499, 53.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=44 */
%   | | | else return -0.2153367364764261;  // std dev = 2.181, 58.000 (wgt'ed) examples reached here.  /* #neg=53 #pos=5 */
%   | | else return 0.2849634364667282;  // std dev = 0.603, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else return -0.022473585588063633;  // std dev = 0.381, 12.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=2 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.1527438580936708;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.04901875984638794;  // std dev = 0.382, 101.000 (wgt'ed) examples reached here.  /* #neg=53 #pos=48 */
%   | | else return 0.09413036509745491;  // std dev = 0.877, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | then return -0.04531339152311507;  // std dev = 0.346, 12.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=2 */
%   | | else return 0.029884132649227103;  // std dev = 0.400, 10.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.13400703000801117;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.03818847971794362;  // std dev = 0.382, 101.000 (wgt'ed) examples reached here.  /* #neg=53 #pos=48 */
%   | | else return 0.07670578865119775;  // std dev = 0.880, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | then return -0.03823091570700071;  // std dev = 0.346, 12.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=2 */
%   | | else return 0.025623511209698115;  // std dev = 0.400, 10.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */


Results
   AUC ROC   = 0.861743
   AUC PR    = 0.868504
   CLL	      = -0.485321
   Precision = 0.832346 at threshold = 0.5
   Recall    = 0.901472
   F1        = 0.865531


Total learning time: 18.688 seconds
Total inference time: 19.473 seconds
AUC ROC: 0.861743


Results scoring model
   AUC ROC   = 0.89848
   AUC PR    = 0.920126
   CLL	      = -0.429016
   Precision = 0.927536 at threshold = 0.5
   Recall    = 0.876712
   F1        = 0.901408


Total scoring time: 1.192 seconds
Refined model CLL: -0.429016


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.861743
   AUC PR    = 0.868504
   CLL	      = -0.485321
   Precision = 0.832346 at threshold = 0.5
   Recall    = 0.901472
   F1        = 0.865531


Total learning time: 21.887999999999998 seconds
Total inference time: 19.473 seconds
AUC ROC: 0.861743
Total revision time: 21.887999999999998
Best scored revision CLL: -0.429016


Dataset: 3_imdb_cora, Fold: 1, Type: Transfer (trRDN-B), Time: 00:06:24
{'AUC ROC': 0.861743, 'AUC PR': 0.868504, 'CLL': -0.485321, 'Precision': [0.832346, 0.5], 'Recall': 0.901472, 'F1': 0.865531, 'Learning time': 21.887999999999998, 'Inference time': 19.473, 'parameter_0.2': {'AUC ROC': 0.575311, 'AUC PR': 0.659395, 'CLL': -0.664781, 'Precision': [1.0, 0.5], 'Recall': 0.150623, 'F1': 0.261811, 'Learning time': 1.239, 'Inference time': 2.025}}


Amount of data: 0.4
******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- actor(A), director(B).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.8581489350995115;  // std dev = 2.60e-07, 38.000 (wgt'ed) examples reached here.  /* #pos=38 */
%   else return 0.28393018509950874;  // std dev = 7.911, 256.000 (wgt'ed) examples reached here.  /* #neg=147 #pos=109 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.719473412210955;  // std dev = 0.000, 38.000 (wgt'ed) examples reached here.  /* #pos=38 */
%   else return 0.24574026160678578;  // std dev = 7.911, 256.000 (wgt'ed) examples reached here.  /* #neg=147 #pos=109 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.5553664367462843;  // std dev = 1.26e-07, 38.000 (wgt'ed) examples reached here.  /* #pos=38 */
%   else return 0.20658040678206663;  // std dev = 7.911, 256.000 (wgt'ed) examples reached here.  /* #neg=147 #pos=109 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.4175135841583102;  // std dev = 0.000, 38.000 (wgt'ed) examples reached here.  /* #pos=38 */
%   else return 0.16918760992642903;  // std dev = 7.911, 256.000 (wgt'ed) examples reached here.  /* #neg=147 #pos=109 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.3207118471601495;  // std dev = 2.11e-08, 38.000 (wgt'ed) examples reached here.  /* #pos=38 */
%   else return 0.1356118658465994;  // std dev = 7.911, 256.000 (wgt'ed) examples reached here.  /* #neg=147 #pos=109 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.2551722425694896;  // std dev = 0.000, 38.000 (wgt'ed) examples reached here.  /* #pos=38 */
%   else return 0.10690690251419792;  // std dev = 7.911, 256.000 (wgt'ed) examples reached here.  /* #neg=147 #pos=109 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.20975771563253542;  // std dev = 5.96e-08, 38.000 (wgt'ed) examples reached here.  /* #pos=38 */
%   else return 0.08325189806630834;  // std dev = 7.911, 256.000 (wgt'ed) examples reached here.  /* #neg=147 #pos=109 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.1770964977452775;  // std dev = 0.000, 38.000 (wgt'ed) examples reached here.  /* #pos=38 */
%   else return 0.06426537796271242;  // std dev = 7.911, 256.000 (wgt'ed) examples reached here.  /* #neg=147 #pos=109 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.1527438580936709;  // std dev = 3.80e-08, 38.000 (wgt'ed) examples reached here.  /* #pos=38 */
%   else return 0.049303497796842295;  // std dev = 7.911, 256.000 (wgt'ed) examples reached here.  /* #neg=147 #pos=109 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.1340070300080111;  // std dev = 1.05e-08, 38.000 (wgt'ed) examples reached here.  /* #pos=38 */
%   else return 0.03766134017237761;  // std dev = 7.911, 256.000 (wgt'ed) examples reached here.  /* #neg=147 #pos=109 */


Results
   AUC ROC   = 0.575311
   AUC PR    = 0.659395
   CLL	      = -0.662998
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.150623
   F1        = 0.261811


Total learning time: 1.468 seconds
Total inference time: 2.052 seconds
AUC ROC: 0.575311


Results scoring model
   AUC ROC   = 0.629252
   AUC PR    = 0.703549
   CLL	      = -0.611819
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.258503
   F1        = 0.410811


Total scoring time: 0.764 seconds
Parameter learned model CLL: -0.611819


Structure after Parameter Learning
[['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [2.6e-07, 0, 38], 'false': [7.911, 147, 109]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 38], 'false': [7.911, 147, 109]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [1.26e-07, 0, 38], 'false': [7.911, 147, 109]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 38], 'false': [7.911, 147, 109]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [2.11e-08, 0, 38], 'false': [7.911, 147, 109]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 38], 'false': [7.911, 147, 109]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [5.96e-08, 0, 38], 'false': [7.911, 147, 109]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 38], 'false': [7.911, 147, 109]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [3.8e-08, 0, 38], 'false': [7.911, 147, 109]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [1.05e-08, 0, 38], 'false': [7.911, 147, 109]}]]
[{'': [1.7763568394002505e-15, 0.24449157714844036]}, {'': [-7.47939721852737e-16, 0.24449157714843497]}, {'': [4.2071609354216456e-16, 0.24449157714843808]}, {'': [-3.505967446184705e-16, 0.24449157714843908]}, {'': [1.1686558153949016e-17, 0.24449157714843878]}, {'': [-1.1686558153949016e-17, 0.24449157714843822]}, {'': [9.349246523159212e-17, 0.2444915771484366]}, {'': [-6.427606984671959e-17, 0.24449157714843633]}, {'': [3.7981314000334304e-17, 0.24449157714843953]}, {'': [2.921639538487254e-18, 0.2444915771484363]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
1;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
2;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
3;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
4;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
5;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
6;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
7;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
8;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
9;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.8581489350995115;  // std dev = 2.60e-07, 38.000 (wgt'ed) examples reached here.  /* #pos=38 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then return 0.31786457490993564;  // std dev = 0.498, 211.000 (wgt'ed) examples reached here.  /* #neg=114 #pos=97 */
%   | | else return 0.1438632208137979;  // std dev = 0.452, 7.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=2 */
%   | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | then if ( haswordtitle(H, I), haswordvenue(A, I) )
%   | | | then return -0.14185106490048777;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.088918165868743;  // std dev = 1.519, 13.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=3 */
%   | | else return 0.17633075328133055;  // std dev = 0.466, 22.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=7 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.719473412210955;  // std dev = 0.000, 38.000 (wgt'ed) examples reached here.  /* #pos=38 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then return 0.2746105472158575;  // std dev = 0.498, 211.000 (wgt'ed) examples reached here.  /* #neg=114 #pos=97 */
%   | | else return 0.12543301544918353;  // std dev = 0.452, 7.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=2 */
%   | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | then return 0.03964757751263501;  // std dev = 0.388, 16.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=3 */
%   | | else return 0.1534823605167704;  // std dev = 0.466, 22.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=7 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.5553664367462843;  // std dev = 1.26e-07, 38.000 (wgt'ed) examples reached here.  /* #pos=38 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then return 0.22957635154779701;  // std dev = 0.498, 211.000 (wgt'ed) examples reached here.  /* #neg=114 #pos=97 */
%   | | else return 0.10782354562777509;  // std dev = 0.452, 7.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=2 */
%   | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | then return 0.034587031609140784;  // std dev = 0.388, 16.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=3 */
%   | | else return 0.13126760833378437;  // std dev = 0.466, 22.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=7 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.4175135841583102;  // std dev = 0.000, 38.000 (wgt'ed) examples reached here.  /* #pos=38 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then return 0.1864166093373373;  // std dev = 0.498, 211.000 (wgt'ed) examples reached here.  /* #neg=114 #pos=97 */
%   | | else return 0.09150383240113759;  // std dev = 0.452, 7.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=2 */
%   | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | then if ( haswordtitle(H, I), haswordvenue(A, I) )
%   | | | then return -0.13381775943575794;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.0678747129137248;  // std dev = 1.519, 13.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=3 */
%   | | else return 0.11049397908378188;  // std dev = 0.466, 22.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=7 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.3207118471601495;  // std dev = 2.11e-08, 38.000 (wgt'ed) examples reached here.  /* #pos=38 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.14270562272693732;  // std dev = 0.498, 209.000 (wgt'ed) examples reached here.  /* #neg=114 #pos=95 */
%   | | else return 0.21264420380526727;  // std dev = 0.473, 9.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=4 */
%   | else if ( haswordvenue(B, F), haswordtitle(G, F) )
%   | | then if ( haswordtitle(G, H), haswordvenue(A, H) )
%   | | | then return -0.11905242084576755;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.05840631317503286;  // std dev = 1.519, 13.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=3 */
%   | | else return 0.09172466407655461;  // std dev = 0.466, 22.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=7 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.2551722425694896;  // std dev = 0.000, 38.000 (wgt'ed) examples reached here.  /* #pos=38 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then return 0.11631052400936315;  // std dev = 0.498, 211.000 (wgt'ed) examples reached here.  /* #neg=114 #pos=97 */
%   | | else return 0.03946775920484651;  // std dev = 0.452, 7.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=2 */
%   | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | then if ( haswordtitle(H, I), haswordvenue(A, I) )
%   | | | then return -0.10712151655226008;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.04991433310858755;  // std dev = 1.519, 13.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=3 */
%   | | else return 0.07525517484793537;  // std dev = 0.466, 22.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=7 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.20975771563253542;  // std dev = 5.96e-08, 38.000 (wgt'ed) examples reached here.  /* #pos=38 */
%   else if ( haswordvenue(A, D), haswordtitle(E, D) )
%   | then if ( title(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.4740400968032032;  // std dev = 3.801, 110.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=91 */
%   | | | else return -0.27939389031889916;  // std dev = 3.013, 119.000 (wgt'ed) examples reached here.  /* #neg=109 #pos=10 */
%   | | else return 0.22094694992974184;  // std dev = 1.027, 6.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | then return 0.06959534254377125;  // std dev = 0.438, 15.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=4 */
%   | | else return -0.08754325628870156;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.1770964977452775;  // std dev = 0.000, 38.000 (wgt'ed) examples reached here.  /* #pos=38 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.0648429085530814;  // std dev = 0.431, 209.000 (wgt'ed) examples reached here.  /* #neg=114 #pos=95 */
%   | | else return 0.16147881296999833;  // std dev = 0.458, 9.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=4 */
%   | else if ( haswordvenue(B, F), haswordtitle(G, F) )
%   | | then return 0.0015801749746253493;  // std dev = 0.385, 16.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=3 */
%   | | else return 0.013931638282307729;  // std dev = 0.434, 22.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=7 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.1527438580936709;  // std dev = 3.80e-08, 38.000 (wgt'ed) examples reached here.  /* #pos=38 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.04982634535552461;  // std dev = 0.430, 209.000 (wgt'ed) examples reached here.  /* #neg=114 #pos=95 */
%   | | else return 0.12877249481898487;  // std dev = 0.456, 9.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=4 */
%   | else if ( haswordvenue(B, F), haswordtitle(G, F) )
%   | | then if ( haswordtitle(G, H), haswordvenue(A, H) )
%   | | | then return -0.1283791998777066;  // std dev = 0.024, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.03127786274975514;  // std dev = 1.519, 13.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=3 */
%   | | else return 0.011044196533931554;  // std dev = 0.434, 22.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=7 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.1340070300080111;  // std dev = 1.05e-08, 38.000 (wgt'ed) examples reached here.  /* #pos=38 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.0381672794070698;  // std dev = 0.430, 209.000 (wgt'ed) examples reached here.  /* #neg=114 #pos=95 */
%   | | else return 0.10129829562589432;  // std dev = 0.455, 9.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=4 */
%   | else if ( haswordvenue(B, F), haswordtitle(G, F) )
%   | | then if ( haswordtitle(G, H), haswordvenue(A, H) )
%   | | | then return -0.1147068704843497;  // std dev = 0.022, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.026235979175517718;  // std dev = 1.519, 13.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=3 */
%   | | else return 0.008744730065135249;  // std dev = 0.434, 22.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=7 */


Results
   AUC ROC   = 0.868579
   AUC PR    = 0.8721
   CLL	      = -0.553475
   Precision = 0.840433 at threshold = 0.5
   Recall    = 0.878822
   F1        = 0.859199


Total learning time: 27.138 seconds
Total inference time: 11.908 seconds
AUC ROC: 0.868579


Results scoring model
   AUC ROC   = 0.916192
   AUC PR    = 0.926304
   CLL	      = -0.499838
   Precision = 0.917293 at threshold = 0.5
   Recall    = 0.829932
   F1        = 0.871429


Total scoring time: 1.304 seconds
Refined model CLL: -0.499838


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.868579
   AUC PR    = 0.8721
   CLL	      = -0.553475
   Precision = 0.840433 at threshold = 0.5
   Recall    = 0.878822
   F1        = 0.859199


Total learning time: 30.674 seconds
Total inference time: 11.908 seconds
AUC ROC: 0.868579
Total revision time: 30.674
Best scored revision CLL: -0.499838


Dataset: 3_imdb_cora, Fold: 1, Type: Transfer (trRDN-B), Time: 00:07:09
{'AUC ROC': 0.868579, 'AUC PR': 0.8721, 'CLL': -0.553475, 'Precision': [0.840433, 0.5], 'Recall': 0.878822, 'F1': 0.859199, 'Learning time': 30.674, 'Inference time': 11.908, 'parameter_0.4': {'AUC ROC': 0.575311, 'AUC PR': 0.659395, 'CLL': -0.662998, 'Precision': [1.0, 0.5], 'Recall': 0.150623, 'F1': 0.261811, 'Learning time': 1.468, 'Inference time': 2.052}}


Amount of data: 0.6
******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- actor(A), director(B).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.8581489350995125;  // std dev = 0.000, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   else return 0.28223270473301604;  // std dev = 9.659, 382.000 (wgt'ed) examples reached here.  /* #neg=220 #pos=162 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.7194734122109544;  // std dev = 0.000, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   else return 0.24429323777968223;  // std dev = 9.659, 382.000 (wgt'ed) examples reached here.  /* #neg=220 #pos=162 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.5553664367462838;  // std dev = 1.19e-07, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   else return 0.20542063884468195;  // std dev = 9.659, 382.000 (wgt'ed) examples reached here.  /* #neg=220 #pos=162 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.4175135841583103;  // std dev = 0.000, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   else return 0.1683103232894015;  // std dev = 9.659, 382.000 (wgt'ed) examples reached here.  /* #neg=220 #pos=162 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.3207118471601497;  // std dev = 0.000, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   else return 0.13498047541366537;  // std dev = 9.659, 382.000 (wgt'ed) examples reached here.  /* #neg=220 #pos=162 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.25517224256948967;  // std dev = 0.000, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   else return 0.10647062547851802;  // std dev = 9.659, 382.000 (wgt'ed) examples reached here.  /* #neg=220 #pos=162 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.20975771563253562;  // std dev = 0.000, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   else return 0.08296037403014657;  // std dev = 9.659, 382.000 (wgt'ed) examples reached here.  /* #neg=220 #pos=162 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.17709649774527733;  // std dev = 0.000, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   else return 0.06407627596088203;  // std dev = 9.659, 382.000 (wgt'ed) examples reached here.  /* #neg=220 #pos=162 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.15274385809367078;  // std dev = 0.000, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   else return 0.04918448001229619;  // std dev = 9.659, 382.000 (wgt'ed) examples reached here.  /* #neg=220 #pos=162 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.13400703000801098;  // std dev = 3.94e-08, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   else return 0.03758909726077704;  // std dev = 9.659, 382.000 (wgt'ed) examples reached here.  /* #neg=220 #pos=162 */


Results
   AUC ROC   = 0.575311
   AUC PR    = 0.659395
   CLL	      = -0.663574
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.150623
   F1        = 0.261811


Total learning time: 1.638 seconds
Total inference time: 2.051 seconds
AUC ROC: 0.575311


Results scoring model
   AUC ROC   = 0.631818
   AUC PR    = 0.7064
   CLL	      = -0.609941
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.263636
   F1        = 0.417266


Total scoring time: 0.879 seconds
Parameter learned model CLL: -0.609941


Structure after Parameter Learning
[['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 58], 'false': [9.659, 220, 162]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 58], 'false': [9.659, 220, 162]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [1.19e-07, 0, 58], 'false': [9.659, 220, 162]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 58], 'false': [9.659, 220, 162]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 58], 'false': [9.659, 220, 162]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 58], 'false': [9.659, 220, 162]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 58], 'false': [9.659, 220, 162]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 58], 'false': [9.659, 220, 162]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 58], 'false': [9.659, 220, 162]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [3.94e-08, 0, 58], 'false': [9.659, 220, 162]}]]
[{'': [-3.675221047035001e-16, 0.2442367259669455]}, {'': [-1.2250736823450003e-16, 0.24423672596694146]}, {'': [2.4501473646900006e-16, 0.24423672596694365]}, {'': [-3.3689526264487507e-16, 0.24423672596694723]}, {'': [-1.5313421029312505e-16, 0.244236725966943]}, {'': [-3.062684205862501e-17, 0.2442367259669399]}, {'': [-2.2970131543968756e-17, 0.24423672596693974]}, {'': [-3.062684205862501e-17, 0.2442367259669439]}, {'': [0.0, 0.24423672596694246]}, {'': [2.6798486801296883e-17, 0.24423672596694423]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
1;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
2;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
3;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
4;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
5;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
6;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
7;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
8;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
9;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.8581489350995125;  // std dev = 0.000, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then return 0.3098623307381377;  // std dev = 0.498, 321.000 (wgt'ed) examples reached here.  /* #neg=176 #pos=145 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.5248156017661788;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.024815601766178873;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | then if ( haswordtitle(J, K), haswordvenue(A, K) )
%   | | | then return -0.14185106490048777;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | | else return 0.14386322081379807;  // std dev = 2.070, 21.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=6 */
%   | | else if ( haswordvenue(B, L), haswordauthor(M, L) )
%   | | | then return 0.10814893509951219;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | else return 0.16249676118646889;  // std dev = 2.207, 23.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=7 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.7194734122109544;  // std dev = 0.000, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then return 0.26781233072252947;  // std dev = 0.498, 321.000 (wgt'ed) examples reached here.  /* #neg=176 #pos=145 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.448295606241962;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.02176788419240575;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | then if ( haswordtitle(J, K), haswordvenue(A, K) )
%   | | | then return -0.12544463852839138;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | | else return 0.12543301544918353;  // std dev = 2.070, 21.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=6 */
%   | | else if ( haswordvenue(B, L), haswordauthor(M, L) )
%   | | | then return 0.09446743783575562;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | else return 0.14154274242296555;  // std dev = 2.207, 23.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=7 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.5553664367462838;  // std dev = 1.19e-07, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then return 0.22418590254826537;  // std dev = 0.498, 321.000 (wgt'ed) examples reached here.  /* #neg=176 #pos=145 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.36236334632262296;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.01904987294481035;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | else if ( haswordvenue(A, I), haswordauthor(J, I) )
%   | | then return -0.17789074008651062;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | | then return 0.09502370070672939;  // std dev = 2.394, 30.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=8 */
%   | | | else return 0.1376283107341689;  // std dev = 2.027, 19.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=6 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.4175135841583103;  // std dev = 0.000, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then return 0.18240600795884065;  // std dev = 0.498, 321.000 (wgt'ed) examples reached here.  /* #neg=176 #pos=145 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.2807538536965855;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.01663677639228948;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | else if ( haswordvenue(A, I), haswordauthor(J, I) )
%   | | then return -0.15334610395316126;  // std dev = 3.73e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | | then return 0.08114798484794632;  // std dev = 2.392, 30.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=8 */
%   | | | else return 0.11657780640704005;  // std dev = 2.027, 19.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=6 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.3207118471601497;  // std dev = 0.000, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then return 0.14504331113990654;  // std dev = 0.498, 321.000 (wgt'ed) examples reached here.  /* #neg=176 #pos=145 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.21248070121827137;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.014502864105143046;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | else if ( haswordvenue(A, I), haswordauthor(J, I) )
%   | | then return -0.13447701862513042;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | | then return 0.06862908020799245;  // std dev = 2.391, 30.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=8 */
%   | | | else return 0.09732754723558502;  // std dev = 2.027, 19.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=6 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.25517224256948967;  // std dev = 0.000, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return -0.1742702535742694;  // std dev = 0.189, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else if ( haswordvenue(A, F), haswordvenue(B, F) )
%   | | then if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | | then return 0.11478267069312767;  // std dev = 8.905, 320.000 (wgt'ed) examples reached here.  /* #neg=175 #pos=145 */
%   | | | else return 0.06157822517048696;  // std dev = 1.242, 9.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=3 */
%   | | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | | then return 0.05755597834829;  // std dev = 2.390, 30.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=8 */
%   | | | else return 0.08025607527858084;  // std dev = 2.027, 19.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=6 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.20975771563253562;  // std dev = 0.000, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then return 0.08741785901724455;  // std dev = 0.497, 321.000 (wgt'ed) examples reached here.  /* #neg=176 #pos=145 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.1441101540013822;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.004425828396329591;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | else if ( haswordvenue(A, I), haswordauthor(J, I) )
%   | | then return -0.10241378264381024;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | | then return 0.04165122210048231;  // std dev = 2.043, 22.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=6 */
%   | | | else return 0.06540531408050795;  // std dev = 2.375, 27.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=8 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.17709649774527733;  // std dev = 0.000, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.06491863286099779;  // std dev = 0.497, 318.000 (wgt'ed) examples reached here.  /* #neg=175 #pos=143 */
%   | | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | | then return 0.28169286635435203;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.03866029273850935;  // std dev = 1.234, 9.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=3 */
%   | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(A, J) )
%   | | | then return -0.15144816687114776;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | | else return 0.05137534136058809;  // std dev = 2.018, 21.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=6 */
%   | | else if ( haswordvenue(B, K), haswordauthor(L, K) )
%   | | | then return 0.023752333108166407;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | else return 0.058780600402896815;  // std dev = 2.210, 23.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=7 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.15274385809367078;  // std dev = 0.000, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.04944155939897805;  // std dev = 0.497, 318.000 (wgt'ed) examples reached here.  /* #neg=175 #pos=143 */
%   | | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | | then return 0.21323052941808132;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.03193045650421148;  // std dev = 1.233, 9.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=3 */
%   | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(A, J) )
%   | | | then return -0.13299468938056647;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | | else return 0.04221013330874185;  // std dev = 2.017, 21.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=6 */
%   | | else if ( haswordvenue(B, K), haswordauthor(L, K) )
%   | | | then return 0.019567241968623;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | else return 0.04773011963613736;  // std dev = 2.210, 23.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=7 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.13400703000801098;  // std dev = 3.94e-08, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.03751749856063905;  // std dev = 0.497, 318.000 (wgt'ed) examples reached here.  /* #neg=175 #pos=143 */
%   | | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | | then return 0.16005859929474833;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.026314821607382844;  // std dev = 1.232, 9.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=3 */
%   | else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | | then return -0.10160508247065854;  // std dev = 2.63e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | | | then return 0.025578942587178688;  // std dev = 2.371, 30.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=8 */
%   | | | else return 0.03888366215148575;  // std dev = 2.028, 19.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=6 */


Results
   AUC ROC   = 0.619347
   AUC PR    = 0.687767
   CLL	      = -0.659116
   Precision = 0.928709 at threshold = 0.5
   Recall    = 0.181955
   F1        = 0.304293


Total learning time: 24.967 seconds
Total inference time: 4.324 seconds
AUC ROC: 0.619347


Results scoring model
   AUC ROC   = 0.676973
   AUC PR    = 0.731629
   CLL	      = -0.595672
   Precision = 0.96875 at threshold = 0.5
   Recall    = 0.281818
   F1        = 0.43662


Total scoring time: 1.211 seconds
Refined model CLL: -0.595672


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.619347
   AUC PR    = 0.687767
   CLL	      = -0.659116
   Precision = 0.928709 at threshold = 0.5
   Recall    = 0.181955
   F1        = 0.304293


Total learning time: 28.694999999999997 seconds
Total inference time: 4.324 seconds
AUC ROC: 0.619347
Total revision time: 28.694999999999997
Best scored revision CLL: -0.595672


Dataset: 3_imdb_cora, Fold: 1, Type: Transfer (trRDN-B), Time: 00:07:45
{'AUC ROC': 0.619347, 'AUC PR': 0.687767, 'CLL': -0.659116, 'Precision': [0.928709, 0.5], 'Recall': 0.181955, 'F1': 0.304293, 'Learning time': 28.694999999999997, 'Inference time': 4.324, 'parameter_0.6': {'AUC ROC': 0.575311, 'AUC PR': 0.659395, 'CLL': -0.663574, 'Precision': [1.0, 0.5], 'Recall': 0.150623, 'F1': 0.261811, 'Learning time': 1.638, 'Inference time': 2.051}}


Amount of data: 0.8
******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- actor(A), director(B).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.8581489350995126;  // std dev = 0.000, 77.000 (wgt'ed) examples reached here.  /* #pos=77 */
%   else return 0.2828064693460832;  // std dev = 11.174, 511.000 (wgt'ed) examples reached here.  /* #neg=294 #pos=217 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.7194734122109538;  // std dev = 2.23e-07, 77.000 (wgt'ed) examples reached here.  /* #pos=77 */
%   else return 0.24478237613406753;  // std dev = 11.174, 511.000 (wgt'ed) examples reached here.  /* #neg=294 #pos=217 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.5553664367462836;  // std dev = 3.26e-07, 77.000 (wgt'ed) examples reached here.  /* #pos=77 */
%   else return 0.20581275264440427;  // std dev = 11.174, 511.000 (wgt'ed) examples reached here.  /* #neg=294 #pos=217 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.4175135841583105;  // std dev = 0.000, 77.000 (wgt'ed) examples reached here.  /* #pos=77 */
%   else return 0.16860702212014556;  // std dev = 11.174, 511.000 (wgt'ed) examples reached here.  /* #neg=294 #pos=217 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.32071184716015005;  // std dev = 0.000, 77.000 (wgt'ed) examples reached here.  /* #pos=77 */
%   else return 0.13519408995999213;  // std dev = 11.174, 511.000 (wgt'ed) examples reached here.  /* #neg=294 #pos=217 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.2551722425694895;  // std dev = 0.000, 77.000 (wgt'ed) examples reached here.  /* #pos=77 */
%   else return 0.10661828159274686;  // std dev = 11.174, 511.000 (wgt'ed) examples reached here.  /* #neg=294 #pos=217 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.20975771563253576;  // std dev = 0.000, 77.000 (wgt'ed) examples reached here.  /* #pos=77 */
%   else return 0.08305906829690615;  // std dev = 11.174, 511.000 (wgt'ed) examples reached here.  /* #neg=294 #pos=217 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.17709649774527716;  // std dev = 2.98e-08, 77.000 (wgt'ed) examples reached here.  /* #pos=77 */
%   else return 0.06414030712522469;  // std dev = 11.174, 511.000 (wgt'ed) examples reached here.  /* #neg=294 #pos=217 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.15274385809367058;  // std dev = 7.88e-08, 77.000 (wgt'ed) examples reached here.  /* #pos=77 */
%   else return 0.04922478037475538;  // std dev = 11.174, 511.000 (wgt'ed) examples reached here.  /* #neg=294 #pos=217 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.13400703000801092;  // std dev = 5.37e-08, 77.000 (wgt'ed) examples reached here.  /* #pos=77 */
%   else return 0.0376135529514499;  // std dev = 11.174, 511.000 (wgt'ed) examples reached here.  /* #neg=294 #pos=217 */


Results
   AUC ROC   = 0.575311
   AUC PR    = 0.659395
   CLL	      = -0.663378
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.150623
   F1        = 0.261811


Total learning time: 1.878 seconds
Total inference time: 2.147 seconds
AUC ROC: 0.575311


Results scoring model
   AUC ROC   = 0.630952
   AUC PR    = 0.705433
   CLL	      = -0.610576
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.261905
   F1        = 0.415094


Total scoring time: 0.865 seconds
Parameter learned model CLL: -0.610576


Structure after Parameter Learning
[['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 77], 'false': [11.174, 294, 217]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [2.23e-07, 0, 77], 'false': [11.174, 294, 217]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [3.26e-07, 0, 77], 'false': [11.174, 294, 217]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 77], 'false': [11.174, 294, 217]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 77], 'false': [11.174, 294, 217]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 77], 'false': [11.174, 294, 217]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 77], 'false': [11.174, 294, 217]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [2.98e-08, 0, 77], 'false': [11.174, 294, 217]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [7.88e-08, 0, 77], 'false': [11.174, 294, 217]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [5.37e-08, 0, 77], 'false': [11.174, 294, 217]}]]
[{'': [-1.107339328457299e-15, 0.2443235128541971]}, {'': [6.459479416000911e-16, 0.2443235128541934]}, {'': [1.3841741605716238e-15, 0.24432351285419257]}, {'': [-6.920870802858119e-17, 0.24432351285419587]}, {'': [-3.921826788286267e-16, 0.24432351285419518]}, {'': [-1.1534784671430199e-17, 0.24432351285419596]}, {'': [-1.0381306204287178e-16, 0.2443235128541962]}, {'': [1.1534784671430199e-17, 0.24432351285419082]}, {'': [8.074349270001139e-17, 0.2443235128541913]}, {'': [3.7488050182148143e-17, 0.2443235128541948]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
1;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
2;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
3;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
4;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
5;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
6;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
7;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
8;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
9;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.8581489350995126;  // std dev = 0.000, 77.000 (wgt'ed) examples reached here.  /* #pos=77 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then return 0.31786457490993464;  // std dev = 0.498, 422.000 (wgt'ed) examples reached here.  /* #neg=228 #pos=194 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.5248156017661788;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.058148935099512175;  // std dev = 1.265, 10.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | then if ( haswordtitle(J, K), haswordvenue(A, K) )
%   | | | then return -0.1418510649004878;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | | else return 0.1308762078267851;  // std dev = 2.558, 33.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=9 */
%   | | else if ( haswordvenue(B, L), haswordauthor(M, L) )
%   | | | then return 0.10814893509951219;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | else return 0.1308762078267851;  // std dev = 2.558, 33.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=9 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.7194734122109538;  // std dev = 2.23e-07, 77.000 (wgt'ed) examples reached here.  /* #pos=77 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then return 0.27461054721585776;  // std dev = 0.498, 422.000 (wgt'ed) examples reached here.  /* #neg=228 #pos=194 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.448295606241962;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.05092203251355425;  // std dev = 1.265, 10.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | then if ( haswordtitle(J, K), haswordvenue(A, K) )
%   | | | then return -0.12544463852839138;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | | else return 0.1141862376674665;  // std dev = 2.558, 33.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=9 */
%   | | else if ( haswordvenue(B, L), haswordauthor(M, L) )
%   | | | then return 0.09446743783575562;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | else return 0.1141862376674665;  // std dev = 2.558, 33.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=9 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.5553664367462836;  // std dev = 3.26e-07, 77.000 (wgt'ed) examples reached here.  /* #pos=77 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then return 0.2295763515477974;  // std dev = 0.498, 422.000 (wgt'ed) examples reached here.  /* #neg=228 #pos=194 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.36236334632262296;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.0443462976046685;  // std dev = 1.265, 10.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | then if ( haswordtitle(J, K), haswordvenue(A, K) )
%   | | | then return -0.11231637819360639;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | | else return 0.09835299714676571;  // std dev = 2.558, 33.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=9 */
%   | | else if ( haswordvenue(B, L), haswordauthor(M, L) )
%   | | | then return 0.08165239320886175;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | else return 0.09835299714676571;  // std dev = 2.558, 33.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=9 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.4175135841583105;  // std dev = 0.000, 77.000 (wgt'ed) examples reached here.  /* #pos=77 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then return 0.18641660933734178;  // std dev = 0.498, 422.000 (wgt'ed) examples reached here.  /* #neg=228 #pos=194 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.2807538536965855;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.038428662236904595;  // std dev = 1.265, 10.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | then if ( haswordtitle(J, K), haswordvenue(A, K) )
%   | | | then return -0.10159632948783627;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | | else return 0.083737008556944;  // std dev = 2.558, 33.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=9 */
%   | | else if ( haswordvenue(B, L), haswordauthor(M, L) )
%   | | | then return 0.06990902274840138;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | else return 0.083737008556944;  // std dev = 2.558, 33.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=9 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.32071184716015005;  // std dev = 0.000, 77.000 (wgt'ed) examples reached here.  /* #pos=77 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then return 0.14787580799190847;  // std dev = 0.498, 422.000 (wgt'ed) examples reached here.  /* #neg=228 #pos=194 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.21248070121827137;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.03315494592188567;  // std dev = 1.265, 10.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | else if ( haswordvenue(A, I), haswordauthor(J, I) )
%   | | then return -0.0021601716481691293;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | | then return 0.05245198637399122;  // std dev = 2.422, 34.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=8 */
%   | | | else return 0.06935494262357339;  // std dev = 2.701, 37.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=10 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.2551722425694895;  // std dev = 0.000, 77.000 (wgt'ed) examples reached here.  /* #pos=77 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then return 0.11529510058407613;  // std dev = 0.498, 422.000 (wgt'ed) examples reached here.  /* #neg=228 #pos=194 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.1594898822817116;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.028495105925721142;  // std dev = 1.265, 10.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | else if ( haswordvenue(A, I), haswordauthor(J, I) )
%   | | then return -0.0018119786172564266;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | | then return 0.04458070661515713;  // std dev = 2.421, 34.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=8 */
%   | | | else return 0.05798985370775575;  // std dev = 2.701, 37.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=10 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.20975771563253576;  // std dev = 0.000, 77.000 (wgt'ed) examples reached here.  /* #pos=77 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.0860385611865565;  // std dev = 0.498, 418.000 (wgt'ed) examples reached here.  /* #neg=227 #pos=191 */
%   | | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | | then return 0.3791007621434943;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | else return 0.04641139996134179;  // std dev = 1.512, 13.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=4 */
%   | else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | | then return -0.0015202557285025065;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | | | then return 0.037692340912376325;  // std dev = 2.420, 34.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=8 */
%   | | | else return 0.048132058176634095;  // std dev = 2.701, 37.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=10 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.17709649774527716;  // std dev = 2.98e-08, 77.000 (wgt'ed) examples reached here.  /* #pos=77 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.06575008312263506;  // std dev = 0.498, 418.000 (wgt'ed) examples reached here.  /* #neg=227 #pos=191 */
%   | | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | | then return 0.2872459382173901;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | else return 0.03851752127823357;  // std dev = 1.512, 13.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=4 */
%   | else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | | then return -0.0012757426177515963;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | | | then return 0.03182936143537127;  // std dev = 2.696, 41.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=10 */
%   | | | else return 0.04142501992281868;  // std dev = 2.424, 30.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=8 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.15274385809367058;  // std dev = 7.88e-08, 77.000 (wgt'ed) examples reached here.  /* #pos=77 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.049983932598896386;  // std dev = 0.498, 418.000 (wgt'ed) examples reached here.  /* #neg=227 #pos=191 */
%   | | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | | then return 0.21555820747034327;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | else return 0.031857901202870645;  // std dev = 1.511, 13.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=4 */
%   | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | then if ( title(J, I), venue(J, B) )
%   | | | then return 0.044516990981272445;  // std dev = 2.549, 34.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=9 */
%   | | | else return -0.13255717971293213;  // std dev = 0.111, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( haswordvenue(B, K), haswordauthor(L, K) )
%   | | | then return 0.0253055961181844;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | else return 0.03495978758235549;  // std dev = 2.559, 33.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=9 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.13400703000801092;  // std dev = 5.37e-08, 77.000 (wgt'ed) examples reached here.  /* #pos=77 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.03786685792387773;  // std dev = 0.498, 418.000 (wgt'ed) examples reached here.  /* #neg=227 #pos=191 */
%   | | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | | then return 0.1625232993241473;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | else return 0.026276140331324048;  // std dev = 1.511, 13.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=4 */
%   | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | then if ( title(J, I), venue(J, B) )
%   | | | then return 0.03682027099738978;  // std dev = 2.548, 34.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=9 */
%   | | | else return -0.11832876994485264;  // std dev = 0.102, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( haswordvenue(B, K), haswordauthor(L, K) )
%   | | | then return 0.02086649917901328;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | else return 0.028565922658373977;  // std dev = 2.559, 33.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=9 */


Results
   AUC ROC   = 0.618112
   AUC PR    = 0.686901
   CLL	      = -0.655966
   Precision = 0.927619 at threshold = 0.5
   Recall    = 0.183843
   F1        = 0.306868


Total learning time: 31.907 seconds
Total inference time: 5.336 seconds
AUC ROC: 0.618112


Results scoring model
   AUC ROC   = 0.682314
   AUC PR    = 0.734277
   CLL	      = -0.594456
   Precision = 0.97619 at threshold = 0.5
   Recall    = 0.278912
   F1        = 0.433862


Total scoring time: 1.398 seconds
Refined model CLL: -0.594456


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.618112
   AUC PR    = 0.686901
   CLL	      = -0.655966
   Precision = 0.927619 at threshold = 0.5
   Recall    = 0.183843
   F1        = 0.306868


Total learning time: 36.048 seconds
Total inference time: 5.336 seconds
AUC ROC: 0.618112
Total revision time: 36.048
Best scored revision CLL: -0.594456


Dataset: 3_imdb_cora, Fold: 1, Type: Transfer (trRDN-B), Time: 00:08:29
{'AUC ROC': 0.618112, 'AUC PR': 0.686901, 'CLL': -0.655966, 'Precision': [0.927619, 0.5], 'Recall': 0.183843, 'F1': 0.306868, 'Learning time': 36.048, 'Inference time': 5.336, 'parameter_0.8': {'AUC ROC': 0.575311, 'AUC PR': 0.659395, 'CLL': -0.663378, 'Precision': [1.0, 0.5], 'Recall': 0.150623, 'F1': 0.261811, 'Learning time': 1.878, 'Inference time': 2.147}}


Amount of data: 1.0
******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- actor(A), director(B).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.8581489350995115;  // std dev = 3.37e-07, 96.000 (wgt'ed) examples reached here.  /* #pos=96 */
%   else return 0.2831489350995077;  // std dev = 12.506, 640.000 (wgt'ed) examples reached here.  /* #neg=368 #pos=272 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.7194734122109541;  // std dev = 1.88e-07, 96.000 (wgt'ed) examples reached here.  /* #pos=96 */
%   else return 0.2450743157714526;  // std dev = 12.506, 640.000 (wgt'ed) examples reached here.  /* #neg=368 #pos=272 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.5553664367462835;  // std dev = 4.09e-07, 96.000 (wgt'ed) examples reached here.  /* #pos=96 */
%   else return 0.20604674634627437;  // std dev = 12.506, 640.000 (wgt'ed) examples reached here.  /* #neg=368 #pos=272 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.4175135841583099;  // std dev = 2.23e-07, 96.000 (wgt'ed) examples reached here.  /* #pos=96 */
%   else return 0.16878403266447983;  // std dev = 12.506, 640.000 (wgt'ed) examples reached here.  /* #neg=368 #pos=272 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.3207118471601504;  // std dev = 4.21e-08, 96.000 (wgt'ed) examples reached here.  /* #pos=96 */
%   else return 0.13532149444198566;  // std dev = 12.506, 640.000 (wgt'ed) examples reached here.  /* #neg=368 #pos=272 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.2551722425694897;  // std dev = 0.000, 96.000 (wgt'ed) examples reached here.  /* #pos=96 */
%   else return 0.10670632108902298;  // std dev = 12.506, 640.000 (wgt'ed) examples reached here.  /* #neg=368 #pos=272 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.20975771563253567;  // std dev = 1.26e-07, 96.000 (wgt'ed) examples reached here.  /* #pos=96 */
%   else return 0.08311790017244995;  // std dev = 12.506, 640.000 (wgt'ed) examples reached here.  /* #neg=368 #pos=272 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.17709649774527722;  // std dev = 7.60e-08, 96.000 (wgt'ed) examples reached here.  /* #pos=96 */
%   else return 0.06417847060322221;  // std dev = 12.506, 640.000 (wgt'ed) examples reached here.  /* #neg=368 #pos=272 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.1527438580936713;  // std dev = 0.000, 96.000 (wgt'ed) examples reached here.  /* #pos=96 */
%   else return 0.04924879981260934;  // std dev = 12.506, 640.000 (wgt'ed) examples reached here.  /* #neg=368 #pos=272 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.13400703000801115;  // std dev = 3.65e-08, 96.000 (wgt'ed) examples reached here.  /* #pos=96 */
%   else return 0.03762813182029733;  // std dev = 12.506, 640.000 (wgt'ed) examples reached here.  /* #neg=368 #pos=272 */


Results
   AUC ROC   = 0.575311
   AUC PR    = 0.659395
   CLL	      = -0.663262
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.150623
   F1        = 0.261811


Total learning time: 1.834 seconds
Total inference time: 2.138 seconds
AUC ROC: 0.575311


Results scoring model
   AUC ROC   = 0.630435
   AUC PR    = 0.704854
   CLL	      = -0.610954
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.26087
   F1        = 0.413793


Total scoring time: 1.028 seconds
Parameter learned model CLL: -0.610954


Structure after Parameter Learning
[['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [3.37e-07, 0, 96], 'false': [12.506, 368, 272]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [1.88e-07, 0, 96], 'false': [12.506, 368, 272]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [4.09e-07, 0, 96], 'false': [12.506, 368, 272]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [2.23e-07, 0, 96], 'false': [12.506, 368, 272]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [4.21e-08, 0, 96], 'false': [12.506, 368, 272]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 96], 'false': [12.506, 368, 272]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [1.26e-07, 0, 96], 'false': [12.506, 368, 272]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [7.6e-08, 0, 96], 'false': [12.506, 368, 272]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 96], 'false': [12.506, 368, 272]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [3.65e-08, 0, 96], 'false': [12.506, 368, 272]}]]
[{'': [1.1842378929335002e-15, 0.24437500000000237]}, {'': [3.7007434154171886e-16, 0.24437500000000592]}, {'': [1.7393494052460785e-15, 0.24437500000000023]}, {'': [5.181040781584064e-16, 0.24437499999999607]}, {'': [1.850371707708594e-17, 0.24437499999999507]}, {'': [-4.625929269271486e-17, 0.24437499999999565]}, {'': [1.6653345369377348e-16, 0.24437500000000348]}, {'': [6.013708050052931e-17, 0.24437500000000106]}, {'': [-6.013708050052931e-17, 0.24437500000000273]}, {'': [1.3877787807814457e-17, 0.24437500000000126]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
1;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
2;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
3;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
4;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
5;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
6;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
7;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
8;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
9;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.8581489350995115;  // std dev = 3.37e-07, 96.000 (wgt'ed) examples reached here.  /* #pos=96 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then return 0.3204130860429041;  // std dev = 0.499, 530.000 (wgt'ed) examples reached here.  /* #neg=285 #pos=245 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.6081489350995122;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | else return 0.058148935099512175;  // std dev = 1.265, 10.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | then if ( haswordtitle(J, K), haswordvenue(B, K) )
%   | | | then return -0.1418510649004878;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | | else return 0.10259337954395681;  // std dev = 2.883, 45.000 (wgt'ed) examples reached here.  /* #neg=34 #pos=11 */
%   | | else if ( haswordvenue(A, L), haswordauthor(M, L) )
%   | | | then return 0.024815601766178873;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | | | else return 0.12130682983635446;  // std dev = 2.714, 38.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=10 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.7194734122109541;  // std dev = 1.88e-07, 96.000 (wgt'ed) examples reached here.  /* #pos=96 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then return 0.2767743293363575;  // std dev = 0.499, 530.000 (wgt'ed) examples reached here.  /* #neg=285 #pos=245 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.5170719622367217;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | else return 0.05092203251355425;  // std dev = 1.265, 10.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | then if ( haswordtitle(J, K), haswordvenue(B, K) )
%   | | | then return -0.12544463852839138;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | | else return 0.08964016548715838;  // std dev = 2.883, 45.000 (wgt'ed) examples reached here.  /* #neg=34 #pos=11 */
%   | | else if ( haswordvenue(A, L), haswordauthor(M, L) )
%   | | | then return 0.02176788419240575;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | | | else return 0.1058893024861437;  // std dev = 2.714, 38.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=10 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.5553664367462835;  // std dev = 4.09e-07, 96.000 (wgt'ed) examples reached here.  /* #pos=96 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then return 0.23128889968261324;  // std dev = 0.499, 530.000 (wgt'ed) examples reached here.  /* #neg=285 #pos=245 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.41257245288266;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | else return 0.0443462976046685;  // std dev = 1.265, 10.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | then if ( haswordtitle(J, K), haswordvenue(B, K) )
%   | | | then return -0.11231637819360639;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | | else return 0.07754550154840685;  // std dev = 2.883, 45.000 (wgt'ed) examples reached here.  /* #neg=34 #pos=11 */
%   | | else if ( haswordvenue(A, L), haswordauthor(M, L) )
%   | | | then return 0.01904987294481035;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | | | else return 0.09134084922268788;  // std dev = 2.714, 38.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=10 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.4175135841583099;  // std dev = 2.23e-07, 96.000 (wgt'ed) examples reached here.  /* #pos=96 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then return 0.18768724726492417;  // std dev = 0.499, 530.000 (wgt'ed) examples reached here.  /* #neg=285 #pos=245 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.3151786576185065;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | else return 0.038428662236904595;  // std dev = 1.265, 10.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | then if ( haswordtitle(J, K), haswordvenue(B, K) )
%   | | | then return -0.10159632948783627;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | | else return 0.06648308448032317;  // std dev = 2.883, 45.000 (wgt'ed) examples reached here.  /* #neg=34 #pos=11 */
%   | | else return 0.06959027527314567;  // std dev = 0.432, 44.000 (wgt'ed) examples reached here.  /* #neg=33 #pos=11 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.3207118471601504;  // std dev = 4.21e-08, 96.000 (wgt'ed) examples reached here.  /* #pos=96 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then return 0.009830655210952902;  // std dev = 0.958, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | else if ( haswordtitle(G, D) )
%   | | | then return 0.1483384255687215;  // std dev = 11.412, 524.000 (wgt'ed) examples reached here.  /* #neg=282 #pos=242 */
%   | | | else return 0.14739408755203337;  // std dev = 1.740, 16.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=7 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( title(J, I), venue(J, A) )
%   | | | then return 0.04436534054879673;  // std dev = 2.897, 49.000 (wgt'ed) examples reached here.  /* #neg=38 #pos=11 */
%   | | | else return -0.09269127618926094;  // std dev = 2.63e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else return 0.05908165302618027;  // std dev = 0.432, 44.000 (wgt'ed) examples reached here.  /* #neg=33 #pos=11 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.2551722425694897;  // std dev = 0.000, 96.000 (wgt'ed) examples reached here.  /* #pos=96 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then return 0.11611650318451372;  // std dev = 0.498, 530.000 (wgt'ed) examples reached here.  /* #neg=285 #pos=245 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.20007538966559957;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | else return 0.015675893817113505;  // std dev = 1.275, 10.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | then if ( haswordtitle(J, K), haswordvenue(B, K) )
%   | | | then return -0.09164512915886784;  // std dev = 0.015, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | | else return 0.04968447425366398;  // std dev = 2.883, 45.000 (wgt'ed) examples reached here.  /* #neg=34 #pos=11 */
%   | | else if ( haswordvenue(A, L), haswordauthor(M, L) )
%   | | | then return -5.205377228578353E-4;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | | | else return 0.05774345742654266;  // std dev = 2.714, 38.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=10 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.20975771563253567;  // std dev = 1.26e-07, 96.000 (wgt'ed) examples reached here.  /* #pos=96 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.08720002440472178;  // std dev = 0.498, 526.000 (wgt'ed) examples reached here.  /* #neg=284 #pos=242 */
%   | | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | | then return 0.37722395706779477;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | else return 0.0527077945381945;  // std dev = 1.559, 14.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=5 */
%   | else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | | then return -4.4807287383308303E-4;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | | else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | | | then return 0.024802837151969983;  // std dev = 2.900, 52.000 (wgt'ed) examples reached here.  /* #neg=41 #pos=11 */
%   | | | else return 0.04815822267900873;  // std dev = 2.714, 38.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=10 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.17709649774527722;  // std dev = 7.60e-08, 96.000 (wgt'ed) examples reached here.  /* #pos=96 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then return -0.019540151214699777;  // std dev = 0.983, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | else if ( haswordtitle(G, D) )
%   | | | then return 0.06822652736867442;  // std dev = 11.412, 524.000 (wgt'ed) examples reached here.  /* #neg=282 #pos=242 */
%   | | | else return 0.0690673681982124;  // std dev = 1.657, 16.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=7 */
%   | else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | | then return -3.8571607599144353E-4;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | | else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | | | then return 0.021048461919270685;  // std dev = 2.899, 52.000 (wgt'ed) examples reached here.  /* #neg=41 #pos=11 */
%   | | | else return 0.03991883347909349;  // std dev = 2.714, 38.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=10 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.1527438580936713;  // std dev = 0.000, 96.000 (wgt'ed) examples reached here.  /* #pos=96 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.05027664402890039;  // std dev = 0.498, 526.000 (wgt'ed) examples reached here.  /* #neg=284 #pos=242 */
%   | | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | | then return 0.2685001810615957;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | else return 0.0326333573733694;  // std dev = 1.562, 14.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=5 */
%   | else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | | then return -3.320521639210705E-4;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | | else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | | | then return 0.017817989928453678;  // std dev = 2.899, 52.000 (wgt'ed) examples reached here.  /* #neg=41 #pos=11 */
%   | | | else return 0.03292038334189456;  // std dev = 2.714, 38.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=10 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.13400703000801115;  // std dev = 3.65e-08, 96.000 (wgt'ed) examples reached here.  /* #pos=96 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.03806428028338849;  // std dev = 0.498, 526.000 (wgt'ed) examples reached here.  /* #neg=284 #pos=242 */
%   | | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | | then return 0.20153621811304956;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | else return 0.02665707329916282;  // std dev = 1.562, 14.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=5 */
%   | else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | | then return -2.858654461379284E-4;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | | else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | | | then return 0.015051417030690769;  // std dev = 2.898, 52.000 (wgt'ed) examples reached here.  /* #neg=41 #pos=11 */
%   | | | else return 0.027034221506208857;  // std dev = 2.714, 38.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=10 */


Results
   AUC ROC   = 0.619066
   AUC PR    = 0.687695
   CLL	      = -0.656513
   Precision = 0.927619 at threshold = 0.5
   Recall    = 0.183843
   F1        = 0.306868


Total learning time: 42.482 seconds
Total inference time: 4.706 seconds
AUC ROC: 0.619066


Results scoring model
   AUC ROC   = 0.687194
   AUC PR    = 0.736743
   CLL	      = -0.592669
   Precision = 0.980769 at threshold = 0.5
   Recall    = 0.277174
   F1        = 0.432203


Total scoring time: 1.644 seconds
Refined model CLL: -0.592669


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.619066
   AUC PR    = 0.687695
   CLL	      = -0.656513
   Precision = 0.927619 at threshold = 0.5
   Recall    = 0.183843
   F1        = 0.306868


Total learning time: 46.988 seconds
Total inference time: 4.706 seconds
AUC ROC: 0.619066
Total revision time: 46.988
Best scored revision CLL: -0.592669


Dataset: 3_imdb_cora, Fold: 1, Type: Transfer (trRDN-B), Time: 00:09:24
{'AUC ROC': 0.619066, 'AUC PR': 0.687695, 'CLL': -0.656513, 'Precision': [0.927619, 0.5], 'Recall': 0.183843, 'F1': 0.306868, 'Learning time': 46.988, 'Inference time': 4.706, 'parameter_1.0': {'AUC ROC': 0.575311, 'AUC PR': 0.659395, 'CLL': -0.663262, 'Precision': [1.0, 0.5], 'Recall': 0.150623, 'F1': 0.261811, 'Learning time': 1.834, 'Inference time': 2.138}}


Starting fold 2

Target train facts examples: 9016
Target train pos examples: 771
Target train neg examples: 544

Target test facts examples: 33542
Target test pos	 examples: 2246
Target test neg examples: 2196

Amount of data: 0.2
******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- actor(A), director(B).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.8581489350995123;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   else return 0.41912454485560635;  // std dev = 7.784, 246.000 (wgt'ed) examples reached here.  /* #neg=108 #pos=138 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.7194734122109542;  // std dev = 5.96e-08, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   else return 0.36010717513545193;  // std dev = 7.784, 246.000 (wgt'ed) examples reached here.  /* #neg=108 #pos=138 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.5553664367462846;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   else return 0.2960978338365801;  // std dev = 7.784, 246.000 (wgt'ed) examples reached here.  /* #neg=108 #pos=138 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.4175135841583098;  // std dev = 5.16e-08, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   else return 0.234610260615723;  // std dev = 7.784, 246.000 (wgt'ed) examples reached here.  /* #neg=108 #pos=138 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.32071184716014967;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   else return 0.18109622017579122;  // std dev = 7.784, 246.000 (wgt'ed) examples reached here.  /* #neg=108 #pos=138 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.2551722425694894;  // std dev = 2.11e-08, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   else return 0.13760796646706172;  // std dev = 7.784, 246.000 (wgt'ed) examples reached here.  /* #neg=108 #pos=138 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.20975771563253562;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   else return 0.10371009333513106;  // std dev = 7.784, 246.000 (wgt'ed) examples reached here.  /* #neg=108 #pos=138 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.17709649774527741;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   else return 0.07788064023504458;  // std dev = 7.784, 246.000 (wgt'ed) examples reached here.  /* #neg=108 #pos=138 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.1527438580936708;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   else return 0.05841694842689927;  // std dev = 7.784, 246.000 (wgt'ed) examples reached here.  /* #neg=108 #pos=138 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.13400703000801117;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   else return 0.04381942662358927;  // std dev = 7.784, 246.000 (wgt'ed) examples reached here.  /* #neg=108 #pos=138 */


Results
   AUC ROC   = 0.587266
   AUC PR    = 0.657582
   CLL	      = -0.64895
   Precision = 0.505628 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.671651


Total learning time: 1.272 seconds
Total inference time: 2.351 seconds
AUC ROC: 0.587266


Results scoring model
   AUC ROC   = 0.551948
   AUC PR    = 0.678152
   CLL	      = -0.653614
   Precision = 0.587786 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.740385


Total scoring time: 0.956 seconds
Parameter learned model CLL: -0.653614


Structure after Parameter Learning
[['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 16], 'false': [7.784, 108, 138]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [5.96e-08, 0, 16], 'false': [7.784, 108, 138]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 16], 'false': [7.784, 108, 138]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [5.16e-08, 0, 16], 'false': [7.784, 108, 138]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 16], 'false': [7.784, 108, 138]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [2.11e-08, 0, 16], 'false': [7.784, 108, 138]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 16], 'false': [7.784, 108, 138]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 16], 'false': [7.784, 108, 138]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 16], 'false': [7.784, 108, 138]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 16], 'false': [7.784, 108, 138]}]]
[{'': [-2.220446049250313e-16, 0.2462819750148763]}, {'': [2.220446049250313e-16, 0.24628197501487023]}, {'': [-2.220446049250313e-16, 0.24628197501486837]}, {'': [1.6653345369377348e-16, 0.24628197501487156]}, {'': [0.0, 0.2462819750148742]}, {'': [2.7755575615628914e-17, 0.2462819750148735]}, {'': [-3.469446951953614e-17, 0.24628197501487062]}, {'': [-1.3877787807814457e-17, 0.24628197501487217]}, {'': [-2.42861286636753e-17, 0.24628197501487084]}, {'': [0.0, 0.24628197501487323]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
1;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
2;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
3;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
4;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
5;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
6;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
7;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
8;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
9;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.8581489350995123;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   else if ( haswordvenue(A, D), haswordtitle(E, D) )
%   | then if ( haswordvenue(B, D) )
%   | | then return 0.4079324848830587;  // std dev = 0.498, 231.000 (wgt'ed) examples reached here.  /* #neg=104 #pos=127 */
%   | | else return 0.8581489350995123;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else if ( haswordvenue(A, F), haswordvenue(B, F) )
%   | | then return 0.8581489350995121;  // std dev = 2.11e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.0581489350995122;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.7194734122109542;  // std dev = 5.96e-08, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordtitle(F, D) )
%   | | then return 0.4675887717087798;  // std dev = 1.155, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | | else return 9.221050421131416E-4;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | then if ( haswordvenue(B, G) )
%   | | | then return 0.3554675595875711;  // std dev = 7.372, 220.000 (wgt'ed) examples reached here.  /* #neg=98 #pos=122 */
%   | | | else return 0.7194734122109543;  // std dev = 2.11e-08, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else if ( haswordvenue(A, I), haswordvenue(B, I) )
%   | | | then return 0.7194734122109545;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.050922032513554226;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.5553664367462846;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   else if ( haswordvenue(A, D), haswordtitle(E, D) )
%   | then if ( haswordvenue(B, D) )
%   | | then return 0.28875390986215127;  // std dev = 0.497, 231.000 (wgt'ed) examples reached here.  /* #neg=104 #pos=127 */
%   | | else return 0.5553664367462846;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else if ( haswordvenue(A, F), haswordvenue(B, F) )
%   | | then return 0.5553664367462845;  // std dev = 1.05e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.04434629760466851;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.4175135841583098;  // std dev = 5.16e-08, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordtitle(F, D) )
%   | | then return 0.32045308173300063;  // std dev = 1.155, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | | else return -0.04929206753461353;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | then if ( haswordvenue(B, G) )
%   | | | then return 0.23325463682983733;  // std dev = 7.372, 220.000 (wgt'ed) examples reached here.  /* #neg=98 #pos=122 */
%   | | | else return 0.41751358415830986;  // std dev = 2.58e-08, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else if ( haswordvenue(A, I), haswordvenue(B, I) )
%   | | | then return 0.41751358415830997;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.038428662236904595;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.32071184716014967;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   else if ( haswordvenue(A, D), haswordtitle(E, D) )
%   | then if ( haswordvenue(B, D) )
%   | | then return 0.17732555082226353;  // std dev = 0.496, 231.000 (wgt'ed) examples reached here.  /* #neg=104 #pos=127 */
%   | | else return 0.3207118471601497;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else if ( haswordvenue(A, F), haswordvenue(B, F) )
%   | | then return 0.32071184716014967;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.03315494592188569;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.2551722425694894;  // std dev = 2.11e-08, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordtitle(F, D) )
%   | | then return 0.20109863328933364;  // std dev = 1.155, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | | else return -0.07401270973859089;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | then if ( haswordvenue(B, G) )
%   | | | then return 0.13807166920123132;  // std dev = 7.372, 220.000 (wgt'ed) examples reached here.  /* #neg=98 #pos=122 */
%   | | | else return 0.2551722425694894;  // std dev = 1.29e-08, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else if ( haswordvenue(A, I), haswordvenue(B, I) )
%   | | | then return 0.25517224256948945;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.02849510592572117;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.20975771563253562;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return -0.053423004449887145;  // std dev = 1.062, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | then if ( haswordvenue(B, F) )
%   | | | then return 0.10598999421010244;  // std dev = 7.440, 225.000 (wgt'ed) examples reached here.  /* #neg=100 #pos=125 */
%   | | | else return 0.2097577156325356;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else if ( haswordvenue(A, H), haswordvenue(B, H) )
%   | | | then return 0.20975771563253554;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.024408230135271946;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.17709649774527741;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.07869904016001762;  // std dev = 0.490, 236.000 (wgt'ed) examples reached here.  /* #neg=104 #pos=132 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then return 0.17709649774527736;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return 0.020846889108740264;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.1527438580936708;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.059313131676726014;  // std dev = 0.490, 236.000 (wgt'ed) examples reached here.  /* #neg=104 #pos=132 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then return 0.15274385809367097;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return 0.017760671541598484;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.13400703000801117;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return -0.07296060966635508;  // std dev = 1.060, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   | else if ( haswordvenue(A, F), haswordvenue(B, F) )
%   | | then if ( haswordvenue(A, G), haswordauthor(H, G) )
%   | | | then return 0.06839789672539093;  // std dev = 1.417, 9.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=5 */
%   | | | else return 0.04692365640811125;  // std dev = 7.307, 221.000 (wgt'ed) examples reached here.  /* #neg=96 #pos=125 */
%   | | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | | then return 0.13400703000801117;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.015098879183171288;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */


Results
   AUC ROC   = 0.592302
   AUC PR    = 0.647524
   CLL	      = -0.700927
   Precision = 0.523335 at threshold = 0.5
   Recall    = 0.958593
   F1        = 0.677044


Total learning time: 12.263 seconds
Total inference time: 4.02 seconds
AUC ROC: 0.592302


Results scoring model
   AUC ROC   = 0.614658
   AUC PR    = 0.732731
   CLL	      = -0.626087
   Precision = 0.604839 at threshold = 0.5
   Recall    = 0.974026
   F1        = 0.746269


Total scoring time: 0.994 seconds
Refined model CLL: -0.626087


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.592302
   AUC PR    = 0.647524
   CLL	      = -0.700927
   Precision = 0.523335 at threshold = 0.5
   Recall    = 0.958593
   F1        = 0.677044


Total learning time: 15.485 seconds
Total inference time: 4.02 seconds
AUC ROC: 0.592302
Total revision time: 15.485
Best scored revision CLL: -0.626087


Dataset: 3_imdb_cora, Fold: 2, Type: Transfer (trRDN-B), Time: 00:09:46
{'AUC ROC': 0.592302, 'AUC PR': 0.647524, 'CLL': -0.700927, 'Precision': [0.523335, 0.5], 'Recall': 0.958593, 'F1': 0.677044, 'Learning time': 15.485, 'Inference time': 4.02, 'parameter_0.2': {'AUC ROC': 0.587266, 'AUC PR': 0.657582, 'CLL': -0.64895, 'Precision': [0.505628, 0.5], 'Recall': 1.0, 'F1': 0.671651, 'Learning time': 1.272, 'Inference time': 2.351}}


Amount of data: 0.4
******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- actor(A), director(B).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.8581489350995115;  // std dev = 2.53e-07, 36.000 (wgt'ed) examples reached here.  /* #pos=36 */
%   else return 0.4143861539134139;  // std dev = 10.987, 489.000 (wgt'ed) examples reached here.  /* #neg=217 #pos=272 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.7194734122109548;  // std dev = 0.000, 36.000 (wgt'ed) examples reached here.  /* #pos=36 */
%   else return 0.3561283141794027;  // std dev = 10.987, 489.000 (wgt'ed) examples reached here.  /* #neg=217 #pos=272 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.5553664367462843;  // std dev = 1.03e-07, 36.000 (wgt'ed) examples reached here.  /* #pos=36 */
%   else return 0.2930533621204033;  // std dev = 10.987, 489.000 (wgt'ed) examples reached here.  /* #neg=217 #pos=272 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.4175135841583102;  // std dev = 0.000, 36.000 (wgt'ed) examples reached here.  /* #pos=36 */
%   else return 0.23245239665494333;  // std dev = 10.987, 489.000 (wgt'ed) examples reached here.  /* #neg=217 #pos=272 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.3207118471601495;  // std dev = 2.11e-08, 36.000 (wgt'ed) examples reached here.  /* #pos=36 */
%   else return 0.1796313546549089;  // std dev = 10.987, 489.000 (wgt'ed) examples reached here.  /* #neg=217 #pos=272 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.25517224256948956;  // std dev = 0.000, 36.000 (wgt'ed) examples reached here.  /* #pos=36 */
%   else return 0.1366208467823774;  // std dev = 10.987, 489.000 (wgt'ed) examples reached here.  /* #neg=217 #pos=272 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.20975771563253542;  // std dev = 5.37e-08, 36.000 (wgt'ed) examples reached here.  /* #pos=36 */
%   else return 0.10303176600198943;  // std dev = 10.987, 489.000 (wgt'ed) examples reached here.  /* #neg=217 #pos=272 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.1770964977452775;  // std dev = 0.000, 36.000 (wgt'ed) examples reached here.  /* #pos=36 */
%   else return 0.07739852191099812;  // std dev = 10.987, 489.000 (wgt'ed) examples reached here.  /* #neg=217 #pos=272 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.1527438580936709;  // std dev = 3.65e-08, 36.000 (wgt'ed) examples reached here.  /* #pos=36 */
%   else return 0.058061531663864165;  // std dev = 10.987, 489.000 (wgt'ed) examples reached here.  /* #neg=217 #pos=272 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.13400703000801112;  // std dev = 1.05e-08, 36.000 (wgt'ed) examples reached here.  /* #pos=36 */
%   else return 0.043548881556106034;  // std dev = 10.987, 489.000 (wgt'ed) examples reached here.  /* #neg=217 #pos=272 */


Results
   AUC ROC   = 0.587266
   AUC PR    = 0.657582
   CLL	      = -0.647823
   Precision = 0.505628 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.671651


Total learning time: 1.713 seconds
Total inference time: 2.128 seconds
AUC ROC: 0.587266


Results scoring model
   AUC ROC   = 0.558442
   AUC PR    = 0.685429
   CLL	      = -0.650416
   Precision = 0.586667 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.739496


Total scoring time: 0.938 seconds
Parameter learned model CLL: -0.650416


Structure after Parameter Learning
[['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [2.53e-07, 0, 36], 'false': [10.987, 217, 272]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 36], 'false': [10.987, 217, 272]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [1.03e-07, 0, 36], 'false': [10.987, 217, 272]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 36], 'false': [10.987, 217, 272]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [2.11e-08, 0, 36], 'false': [10.987, 217, 272]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 36], 'false': [10.987, 217, 272]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [5.37e-08, 0, 36], 'false': [10.987, 217, 272]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 36], 'false': [10.987, 217, 272]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [3.65e-08, 0, 36], 'false': [10.987, 217, 272]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [1.05e-08, 0, 36], 'false': [10.987, 217, 272]}]]
[{'': [1.7763568394002505e-15, 0.24683737522007987]}, {'': [-6.908054375445419e-16, 0.2468373752200849]}, {'': [2.9605947323337506e-16, 0.2468373752200805]}, {'': [-3.20731096002823e-16, 0.24683737522007182]}, {'': [1.2335811384723961e-17, 0.24683737522007787]}, {'': [-1.2335811384723961e-17, 0.24683737522007798]}, {'': [8.018277400070575e-17, 0.2468373752200774]}, {'': [-6.167905692361981e-17, 0.24683737522007643]}, {'': [3.700743415417188e-17, 0.24683737522007904]}, {'': [3.0839528461809902e-18, 0.2468373752200756]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
1;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
2;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
3;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
4;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
5;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
6;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
7;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
8;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
9;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.8581489350995115;  // std dev = 2.53e-07, 36.000 (wgt'ed) examples reached here.  /* #pos=36 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.40540168235225527;  // std dev = 0.498, 455.000 (wgt'ed) examples reached here.  /* #neg=206 #pos=249 */
%   | | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | | then return 0.6581489350995122;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return 0.5724346493852266;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return 0.8581489350995123;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return 0.3581489350995123;  // std dev = 1.414, 8.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=4 */
%   | | else return 0.28672036367094084;  // std dev = 0.495, 7.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=3 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.7194734122109548;  // std dev = 0.000, 36.000 (wgt'ed) examples reached here.  /* #pos=36 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.3485780710521237;  // std dev = 0.498, 455.000 (wgt'ed) examples reached here.  /* #neg=206 #pos=249 */
%   | | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | | then return 0.5580193346218546;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return 0.48767788391726297;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return 0.7194734122109543;  // std dev = 2.11e-08, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return 0.30874113578563506;  // std dev = 1.414, 8.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=4 */
%   | | else return 0.24811816884741303;  // std dev = 0.495, 7.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=3 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.5553664367462843;  // std dev = 1.03e-07, 36.000 (wgt'ed) examples reached here.  /* #pos=36 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.2872626925572207;  // std dev = 0.498, 455.000 (wgt'ed) examples reached here.  /* #neg=206 #pos=249 */
%   | | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | | then return 0.4419486100244409;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return 0.3912569620992536;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return 0.5553664367462846;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return 0.2564123687585864;  // std dev = 1.414, 8.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=4 */
%   | | else return 0.20848477447886868;  // std dev = 0.495, 7.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=3 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.4175135841583102;  // std dev = 0.000, 36.000 (wgt'ed) examples reached here.  /* #pos=36 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.2283366718169167;  // std dev = 0.498, 455.000 (wgt'ed) examples reached here.  /* #neg=206 #pos=249 */
%   | | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | | then return 0.33541139495094313;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return 0.3005711547884894;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return 0.41751358415830986;  // std dev = 2.58e-08, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return 0.20613740734453972;  // std dev = 1.414, 8.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=4 */
%   | | else return 0.17062637354018514;  // std dev = 0.495, 7.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=3 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.3207118471601495;  // std dev = 2.11e-08, 36.000 (wgt'ed) examples reached here.  /* #pos=36 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.17683401796543846;  // std dev = 0.498, 455.000 (wgt'ed) examples reached here.  /* #neg=206 #pos=249 */
%   | | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | | then return 0.25176837314502193;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return 0.22629823971521876;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return 0.3207118471601497;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return 0.1616285754841467;  // std dev = 1.414, 8.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=4 */
%   | | else return 0.13664585375352217;  // std dev = 0.495, 7.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=3 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.25517224256948956;  // std dev = 0.000, 36.000 (wgt'ed) examples reached here.  /* #pos=36 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.1347398603245607;  // std dev = 0.498, 455.000 (wgt'ed) examples reached here.  /* #neg=206 #pos=249 */
%   | | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | | then return 0.19047961032437172;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return 0.16984358676510128;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return 0.2551722425694894;  // std dev = 1.29e-08, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return 0.12455597792081965;  // std dev = 1.414, 8.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=4 */
%   | | else return 0.10762034996184422;  // std dev = 0.495, 7.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=3 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.20975771563253542;  // std dev = 5.37e-08, 36.000 (wgt'ed) examples reached here.  /* #pos=36 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.10174717525568533;  // std dev = 0.498, 455.000 (wgt'ed) examples reached here.  /* #neg=206 #pos=249 */
%   | | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | | then return 0.14620194507639933;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return 0.12813320688246752;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return 0.2097577156325356;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return 0.09492800936730683;  // std dev = 1.414, 8.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=4 */
%   | | else return 0.08372807955323866;  // std dev = 0.495, 7.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=3 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.1770964977452775;  // std dev = 0.000, 36.000 (wgt'ed) examples reached here.  /* #pos=36 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.0764942978092671;  // std dev = 0.498, 455.000 (wgt'ed) examples reached here.  /* #neg=206 #pos=249 */
%   | | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | | then return 0.11389369465607464;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return 0.09743184803714998;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return 0.17709649774527736;  // std dev = 5.27e-09, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return 0.07186088850055856;  // std dev = 1.414, 8.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=4 */
%   | | else return 0.06457405393631663;  // std dev = 0.495, 7.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=3 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.1527438580936709;  // std dev = 3.65e-08, 36.000 (wgt'ed) examples reached here.  /* #pos=36 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordtitle(F, D) )
%   | | then return 0.2601499881388572;  // std dev = 0.433, 8.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=6 */
%   | | else return -0.34699286900399995;  // std dev = 0.350, 7.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=1 */
%   | else if ( haswordvenue(A, G), haswordvenue(B, G) )
%   | | then if ( haswordtitle(H, G) )
%   | | | then return 0.06014998813886018;  // std dev = 10.436, 440.000 (wgt'ed) examples reached here.  /* #neg=198 #pos=242 */
%   | | | else return 0.08102225231681746;  // std dev = 1.493, 12.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=9 */
%   | | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | | then return 0.10017810644880613;  // std dev = 1.427, 15.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=11 */
%   | | | else return 0.04949778322519479;  // std dev = 1.309, 7.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=3 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.13400703000801112;  // std dev = 1.05e-08, 36.000 (wgt'ed) examples reached here.  /* #pos=36 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.043039066881194306;  // std dev = 0.496, 455.000 (wgt'ed) examples reached here.  /* #neg=206 #pos=249 */
%   | | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | | then return 0.07350848664835959;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return 0.05622369939524209;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(A, J) )
%   | | | then return 0.14022544293847294;  // std dev = 5.27e-09, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return 0.03777940363354092;  // std dev = 1.309, 7.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=3 */
%   | | else return 0.029318477498382567;  // std dev = 0.500, 8.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=4 */


Results
   AUC ROC   = 0.622434
   AUC PR    = 0.646694
   CLL	      = -0.663555
   Precision = 0.534757 at threshold = 0.5
   Recall    = 0.959038
   F1        = 0.686643


Total learning time: 27.137 seconds
Total inference time: 6.226 seconds
AUC ROC: 0.622434


Results scoring model
   AUC ROC   = 0.597836
   AUC PR    = 0.720383
   CLL	      = -0.639272
   Precision = 0.596421 at threshold = 0.5
   Recall    = 0.974026
   F1        = 0.739827


Total scoring time: 1.142 seconds
Refined model CLL: -0.639272


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.622434
   AUC PR    = 0.646694
   CLL	      = -0.663555
   Precision = 0.534757 at threshold = 0.5
   Recall    = 0.959038
   F1        = 0.686643


Total learning time: 30.93 seconds
Total inference time: 6.226 seconds
AUC ROC: 0.622434
Total revision time: 30.93
Best scored revision CLL: -0.639272


Dataset: 3_imdb_cora, Fold: 2, Type: Transfer (trRDN-B), Time: 00:10:26
{'AUC ROC': 0.622434, 'AUC PR': 0.646694, 'CLL': -0.663555, 'Precision': [0.534757, 0.5], 'Recall': 0.959038, 'F1': 0.686643, 'Learning time': 30.93, 'Inference time': 6.226, 'parameter_0.4': {'AUC ROC': 0.587266, 'AUC PR': 0.657582, 'CLL': -0.647823, 'Precision': [0.505628, 0.5], 'Recall': 1.0, 'F1': 0.671651, 'Learning time': 1.713, 'Inference time': 2.128}}


Amount of data: 0.6
******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- actor(A), director(B).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.8581489350995125;  // std dev = 0.000, 59.000 (wgt'ed) examples reached here.  /* #pos=59 */
%   else return 0.41096100643009753;  // std dev = 13.424, 729.000 (wgt'ed) examples reached here.  /* #neg=326 #pos=403 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.7194734122109543;  // std dev = 0.000, 59.000 (wgt'ed) examples reached here.  /* #pos=59 */
%   else return 0.3532508509605151;  // std dev = 13.424, 729.000 (wgt'ed) examples reached here.  /* #neg=326 #pos=403 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.5553664367462838;  // std dev = 1.19e-07, 59.000 (wgt'ed) examples reached here.  /* #pos=59 */
%   else return 0.29084857951197374;  // std dev = 13.424, 729.000 (wgt'ed) examples reached here.  /* #neg=326 #pos=403 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.41751358415831036;  // std dev = 0.000, 59.000 (wgt'ed) examples reached here.  /* #pos=59 */
%   else return 0.2308871282966019;  // std dev = 13.424, 729.000 (wgt'ed) examples reached here.  /* #neg=326 #pos=403 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.3207118471601497;  // std dev = 0.000, 59.000 (wgt'ed) examples reached here.  /* #pos=59 */
%   else return 0.17856804958604522;  // std dev = 13.424, 729.000 (wgt'ed) examples reached here.  /* #neg=326 #pos=403 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.25517224256948967;  // std dev = 0.000, 59.000 (wgt'ed) examples reached here.  /* #pos=59 */
%   else return 0.13590528214394376;  // std dev = 13.424, 729.000 (wgt'ed) examples reached here.  /* #neg=326 #pos=403 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.20975771563253565;  // std dev = 0.000, 59.000 (wgt'ed) examples reached here.  /* #pos=59 */
%   else return 0.10254188749403788;  // std dev = 13.424, 729.000 (wgt'ed) examples reached here.  /* #neg=326 #pos=403 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.17709649774527733;  // std dev = 0.000, 59.000 (wgt'ed) examples reached here.  /* #pos=59 */
%   else return 0.07705235721804796;  // std dev = 13.424, 729.000 (wgt'ed) examples reached here.  /* #neg=326 #pos=403 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.15274385809367075;  // std dev = 2.11e-08, 59.000 (wgt'ed) examples reached here.  /* #pos=59 */
%   else return 0.05780811963849978;  // std dev = 13.424, 729.000 (wgt'ed) examples reached here.  /* #neg=326 #pos=403 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.13400703000801098;  // std dev = 4.21e-08, 59.000 (wgt'ed) examples reached here.  /* #pos=59 */
%   else return 0.04335738313947518;  // std dev = 13.424, 729.000 (wgt'ed) examples reached here.  /* #neg=326 #pos=403 */


Results
   AUC ROC   = 0.587266
   AUC PR    = 0.657582
   CLL	      = -0.647055
   Precision = 0.505628 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.671651


Total learning time: 1.824 seconds
Total inference time: 2.073 seconds
AUC ROC: 0.587266


Results scoring model
   AUC ROC   = 0.563853
   AUC PR    = 0.691752
   CLL	      = -0.647548
   Precision = 0.586294 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.7392


Total scoring time: 1.032 seconds
Parameter learned model CLL: -0.647548


Structure after Parameter Learning
[['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 59], 'false': [13.424, 326, 403]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 59], 'false': [13.424, 326, 403]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [1.19e-07, 0, 59], 'false': [13.424, 326, 403]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 59], 'false': [13.424, 326, 403]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 59], 'false': [13.424, 326, 403]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 59], 'false': [13.424, 326, 403]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 59], 'false': [13.424, 326, 403]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 59], 'false': [13.424, 326, 403]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [2.11e-08, 0, 59], 'false': [13.424, 326, 403]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [4.21e-08, 0, 59], 'false': [13.424, 326, 403]}]]
[{'': [-4.817238886509154e-16, 0.24721088512176403]}, {'': [-6.021548608136442e-17, 0.24721088512177392]}, {'': [2.408619443254577e-16, 0.24721088512176845]}, {'': [-3.3118517344750433e-16, 0.24721088512177117]}, {'': [-1.6559258672375216e-16, 0.24721088512177092]}, {'': [-3.010774304068221e-17, 0.2472108851217692]}, {'': [-3.010774304068221e-17, 0.24721088512176997]}, {'': [-3.010774304068221e-17, 0.24721088512177594]}, {'': [7.526935760170553e-18, 0.24721088512177036]}, {'': [3.010774304068221e-17, 0.2472108851217718]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
1;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
2;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
3;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
4;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
5;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
6;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
7;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
8;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
9;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.8581489350995125;  // std dev = 0.000, 59.000 (wgt'ed) examples reached here.  /* #pos=59 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.4023967227101272;  // std dev = 0.498, 678.000 (wgt'ed) examples reached here.  /* #neg=309 #pos=369 */
%   | | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | | then return 0.6581489350995123;  // std dev = 1.265, 10.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   | | | else return 0.41370449065506787;  // std dev = 1.491, 9.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=5 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return 0.8581489350995123;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return 0.3581489350995123;  // std dev = 1.414, 8.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=4 */
%   | | else return 0.274815601766179;  // std dev = 0.493, 12.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=5 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.7194734122109543;  // std dev = 0.000, 59.000 (wgt'ed) examples reached here.  /* #pos=59 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.34605107700449206;  // std dev = 0.498, 678.000 (wgt'ed) examples reached here.  /* #neg=309 #pos=369 */
%   | | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | | then return 0.5580193346218546;  // std dev = 1.265, 10.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   | | | else return 0.35555573927149886;  // std dev = 1.491, 9.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=5 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return 0.7194734122109542;  // std dev = 4.21e-08, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return 0.30874113578563506;  // std dev = 1.414, 8.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=4 */
%   | | else return 0.23796730798362134;  // std dev = 0.493, 12.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=5 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.5553664367462838;  // std dev = 1.19e-07, 59.000 (wgt'ed) examples reached here.  /* #pos=59 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.28532064043794453;  // std dev = 0.498, 678.000 (wgt'ed) examples reached here.  /* #neg=309 #pos=369 */
%   | | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | | then return 0.44194861002444086;  // std dev = 1.265, 10.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   | | | else return 0.2926148461096881;  // std dev = 1.491, 9.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=5 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return 0.5553664367462846;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return 0.2564123687585864;  // std dev = 1.414, 8.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=4 */
%   | | else return 0.2003424470315364;  // std dev = 0.493, 12.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=5 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.41751358415831036;  // std dev = 0.000, 59.000 (wgt'ed) examples reached here.  /* #pos=59 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.22695292886693724;  // std dev = 0.498, 678.000 (wgt'ed) examples reached here.  /* #neg=309 #pos=369 */
%   | | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | | then return 0.335411394950943;  // std dev = 1.265, 10.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   | | | else return 0.23214124828648122;  // std dev = 1.491, 9.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=5 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return 0.4175135841583098;  // std dev = 4.21e-08, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return 0.20613740734453972;  // std dev = 1.414, 8.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=4 */
%   | | else return 0.16445940647707039;  // std dev = 0.493, 12.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=5 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.3207118471601497;  // std dev = 0.000, 59.000 (wgt'ed) examples reached here.  /* #pos=59 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.17589238057717616;  // std dev = 0.498, 678.000 (wgt'ed) examples reached here.  /* #neg=309 #pos=369 */
%   | | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | | then return 0.25176837314502193;  // std dev = 1.265, 10.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   | | | else return 0.17942003892665268;  // std dev = 1.491, 9.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=5 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return 0.3207118471601497;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return 0.1616285754841467;  // std dev = 1.414, 8.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=4 */
%   | | else return 0.13220063779845395;  // std dev = 0.493, 12.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=5 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.25517224256948967;  // std dev = 0.000, 59.000 (wgt'ed) examples reached here.  /* #pos=59 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.13410768953996458;  // std dev = 0.498, 678.000 (wgt'ed) examples reached here.  /* #neg=309 #pos=369 */
%   | | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | | then return 0.19047961032437172;  // std dev = 1.265, 10.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   | | | else return 0.13647857812921954;  // std dev = 1.491, 9.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=5 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return 0.2551722425694894;  // std dev = 2.11e-08, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return 0.12455597792081965;  // std dev = 1.414, 8.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=4 */
%   | | else return 0.10454407394648617;  // std dev = 0.493, 12.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=5 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.20975771563253565;  // std dev = 0.000, 59.000 (wgt'ed) examples reached here.  /* #pos=59 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.10131763946571044;  // std dev = 0.498, 678.000 (wgt'ed) examples reached here.  /* #neg=309 #pos=369 */
%   | | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | | then return 0.14620194507639933;  // std dev = 1.265, 10.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   | | | else return 0.10293424750437877;  // std dev = 1.491, 9.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=5 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return 0.20975771563253562;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return 0.09492800936730683;  // std dev = 1.414, 8.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=4 */
%   | | else return 0.08166978911079613;  // std dev = 0.493, 12.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=5 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.17709649774527733;  // std dev = 0.000, 59.000 (wgt'ed) examples reached here.  /* #pos=59 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.07619443865299454;  // std dev = 0.498, 678.000 (wgt'ed) examples reached here.  /* #neg=309 #pos=369 */
%   | | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | | then return 0.11389369465607464;  // std dev = 1.265, 10.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   | | | else return 0.07732947852152008;  // std dev = 1.491, 9.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=5 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return 0.17709649774527736;  // std dev = 1.05e-08, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return 0.07186088850055856;  // std dev = 1.414, 8.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=4 */
%   | | else return 0.06323774392650187;  // std dev = 0.493, 12.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=5 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.15274385809367075;  // std dev = 2.11e-08, 59.000 (wgt'ed) examples reached here.  /* #pos=59 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.057186519025168;  // std dev = 0.498, 678.000 (wgt'ed) examples reached here.  /* #neg=309 #pos=369 */
%   | | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | | then return 0.08989956180301868;  // std dev = 1.265, 10.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   | | | else return 0.05801086896812466;  // std dev = 1.491, 9.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=5 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return 0.15274385809367094;  // std dev = 1.05e-08, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return 0.05418307375954945;  // std dev = 1.414, 8.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=4 */
%   | | else return 0.04865655792108845;  // std dev = 0.493, 12.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=5 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.13400703000801098;  // std dev = 4.21e-08, 59.000 (wgt'ed) examples reached here.  /* #pos=59 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.04289278185763041;  // std dev = 0.498, 678.000 (wgt'ed) examples reached here.  /* #neg=309 #pos=369 */
%   | | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | | then return 0.07174810215160456;  // std dev = 1.265, 10.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   | | | else return 0.0435105023222711;  // std dev = 1.491, 9.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=5 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return 0.13400703000801117;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return 0.040760253233056216;  // std dev = 1.414, 8.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=4 */
%   | | else return 0.03726919534510018;  // std dev = 0.493, 12.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=5 */


Results
   AUC ROC   = 0.621855
   AUC PR    = 0.671099
   CLL	      = -0.664198
   Precision = 0.533399 at threshold = 0.5
   Recall    = 0.959929
   F1        = 0.685751


Total learning time: 39.245 seconds
Total inference time: 6.908 seconds
AUC ROC: 0.621855


Results scoring model
   AUC ROC   = 0.587463
   AUC PR    = 0.715691
   CLL	      = -0.637999
   Precision = 0.589844 at threshold = 0.5
   Recall    = 0.980519
   F1        = 0.736585


Total scoring time: 1.55 seconds
Refined model CLL: -0.637999


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.621855
   AUC PR    = 0.671099
   CLL	      = -0.664198
   Precision = 0.533399 at threshold = 0.5
   Recall    = 0.959929
   F1        = 0.685751


Total learning time: 43.650999999999996 seconds
Total inference time: 6.908 seconds
AUC ROC: 0.621855
Total revision time: 43.650999999999996
Best scored revision CLL: -0.637999


Dataset: 3_imdb_cora, Fold: 2, Type: Transfer (trRDN-B), Time: 00:11:19
{'AUC ROC': 0.621855, 'AUC PR': 0.671099, 'CLL': -0.664198, 'Precision': [0.533399, 0.5], 'Recall': 0.959929, 'F1': 0.685751, 'Learning time': 43.650999999999996, 'Inference time': 6.908, 'parameter_0.6': {'AUC ROC': 0.587266, 'AUC PR': 0.657582, 'CLL': -0.647055, 'Precision': [0.505628, 0.5], 'Recall': 1.0, 'F1': 0.671651, 'Learning time': 1.824, 'Inference time': 2.073}}


Amount of data: 0.8
******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- actor(A), director(B).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.8581489350995123;  // std dev = 0.000, 81.000 (wgt'ed) examples reached here.  /* #pos=81 */
%   else return 0.4096953268520849;  // std dev = 15.489, 970.000 (wgt'ed) examples reached here.  /* #neg=435 #pos=535 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.7194734122109537;  // std dev = 2.53e-07, 81.000 (wgt'ed) examples reached here.  /* #pos=81 */
%   else return 0.3521872697818778;  // std dev = 15.489, 970.000 (wgt'ed) examples reached here.  /* #neg=435 #pos=535 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.5553664367462836;  // std dev = 3.42e-07, 81.000 (wgt'ed) examples reached here.  /* #pos=81 */
%   else return 0.2900329862426267;  // std dev = 15.489, 970.000 (wgt'ed) examples reached here.  /* #neg=435 #pos=535 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.4175135841583104;  // std dev = 8.43e-08, 81.000 (wgt'ed) examples reached here.  /* #pos=81 */
%   else return 0.23030755182406318;  // std dev = 15.489, 970.000 (wgt'ed) examples reached here.  /* #neg=435 #pos=535 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.3207118471601501;  // std dev = 0.000, 81.000 (wgt'ed) examples reached here.  /* #pos=81 */
%   else return 0.17817416804920708;  // std dev = 15.489, 970.000 (wgt'ed) examples reached here.  /* #neg=435 #pos=535 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.25517224256948967;  // std dev = 0.000, 81.000 (wgt'ed) examples reached here.  /* #pos=81 */
%   else return 0.13564040187295368;  // std dev = 15.489, 970.000 (wgt'ed) examples reached here.  /* #neg=435 #pos=535 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.20975771563253567;  // std dev = 0.000, 81.000 (wgt'ed) examples reached here.  /* #pos=81 */
%   else return 0.10236092793975739;  // std dev = 15.489, 970.000 (wgt'ed) examples reached here.  /* #neg=435 #pos=535 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.17709649774527716;  // std dev = 3.65e-08, 81.000 (wgt'ed) examples reached here.  /* #pos=81 */
%   else return 0.07692490584321718;  // std dev = 15.489, 970.000 (wgt'ed) examples reached here.  /* #neg=435 #pos=535 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.15274385809367116;  // std dev = 0.000, 81.000 (wgt'ed) examples reached here.  /* #pos=81 */
%   else return 0.05771519412472201;  // std dev = 15.489, 970.000 (wgt'ed) examples reached here.  /* #neg=435 #pos=535 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.1340070300080109;  // std dev = 5.58e-08, 81.000 (wgt'ed) examples reached here.  /* #pos=81 */
%   else return 0.04328745986477394;  // std dev = 15.489, 970.000 (wgt'ed) examples reached here.  /* #neg=435 #pos=535 */


Results
   AUC ROC   = 0.587266
   AUC PR    = 0.657582
   CLL	      = -0.646781
   Precision = 0.505628 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.671651


Total learning time: 2.129 seconds
Total inference time: 2.136 seconds
AUC ROC: 0.587266


Results scoring model
   AUC ROC   = 0.565747
   AUC PR    = 0.693877
   CLL	      = -0.64655
   Precision = 0.586108 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.739052


Total scoring time: 1.141 seconds
Parameter learned model CLL: -0.64655


Structure after Parameter Learning
[['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 81], 'false': [15.489, 435, 535]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [2.53e-07, 0, 81], 'false': [15.489, 435, 535]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [3.42e-07, 0, 81], 'false': [15.489, 435, 535]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [8.43e-08, 0, 81], 'false': [15.489, 435, 535]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 81], 'false': [15.489, 435, 535]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 81], 'false': [15.489, 435, 535]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 81], 'false': [15.489, 435, 535]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [3.65e-08, 0, 81], 'false': [15.489, 435, 535]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 81], 'false': [15.489, 435, 535]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [5.58e-08, 0, 81], 'false': [15.489, 435, 535]}]]
[{'': [-7.894919286223335e-16, 0.2473429694972839]}, {'': [7.894919286223335e-16, 0.2473429694973007]}, {'': [1.4474018691409447e-15, 0.2473429694973024]}, {'': [8.77213254024815e-17, 0.24734296949729867]}, {'': [-2.8509430755806487e-16, 0.24734296949729762]}, {'': [-4.386066270124075e-17, 0.24734296949728912]}, {'': [-8.22387425648264e-17, 0.24734296949728699]}, {'': [1.644774851296528e-17, 0.24734296949729143]}, {'': [-4.9343245538895844e-17, 0.24734296949729448]}, {'': [3.8378079863585656e-17, 0.24734296949728846]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
1;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
2;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
3;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
4;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
5;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
6;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
7;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
8;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
9;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.8581489350995123;  // std dev = 0.000, 81.000 (wgt'ed) examples reached here.  /* #pos=81 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.39763725545545864;  // std dev = 0.498, 899.000 (wgt'ed) examples reached here.  /* #neg=414 #pos=485 */
%   | | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | | then return 0.6081489350995123;  // std dev = 1.732, 16.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=12 */
%   | | | else return 0.524815601766179;  // std dev = 1.633, 12.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=8 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return 0.8581489350995123;  // std dev = 0.000, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | | else return 0.3581489350995123;  // std dev = 1.581, 10.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
%   | | else return 0.2867203636709409;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.7194734122109537;  // std dev = 2.53e-07, 81.000 (wgt'ed) examples reached here.  /* #pos=81 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.3420468731120854;  // std dev = 0.498, 899.000 (wgt'ed) examples reached here.  /* #neg=414 #pos=485 */
%   | | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | | then return 0.5170719622367218;  // std dev = 1.732, 16.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=12 */
%   | | | else return 0.448295606241962;  // std dev = 1.633, 12.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=8 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return 0.7194734122109542;  // std dev = 7.30e-08, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | | else return 0.30874113578563506;  // std dev = 1.581, 10.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
%   | | else return 0.24811816884741297;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.5553664367462836;  // std dev = 3.42e-07, 81.000 (wgt'ed) examples reached here.  /* #pos=81 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.2822392244722321;  // std dev = 0.498, 899.000 (wgt'ed) examples reached here.  /* #neg=414 #pos=485 */
%   | | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | | then return 0.41257245288266015;  // std dev = 1.732, 16.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=12 */
%   | | | else return 0.36236334632262296;  // std dev = 1.633, 12.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=8 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return 0.5553664367462846;  // std dev = 0.000, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | | else return 0.2564123687585864;  // std dev = 1.581, 10.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
%   | | else return 0.20848477447886868;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.4175135841583104;  // std dev = 8.43e-08, 81.000 (wgt'ed) examples reached here.  /* #pos=81 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.2247537597141697;  // std dev = 0.498, 899.000 (wgt'ed) examples reached here.  /* #neg=414 #pos=485 */
%   | | else if ( haswordvenue(B, F), haswordtitle(G, F) )
%   | | | then return 0.3213859685425739;  // std dev = 1.675, 14.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=10 */
%   | | | else return 0.2794643719042209;  // std dev = 1.690, 14.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=10 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return 0.4175135841583098;  // std dev = 5.58e-08, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | | else return 0.20613740734453975;  // std dev = 1.581, 10.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
%   | | else return 0.17062637354018512;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.3207118471601501;  // std dev = 0.000, 81.000 (wgt'ed) examples reached here.  /* #pos=81 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.17439450243048177;  // std dev = 0.498, 899.000 (wgt'ed) examples reached here.  /* #neg=414 #pos=485 */
%   | | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | | then return 0.2443761528103126;  // std dev = 1.729, 16.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=12 */
%   | | | else return 0.20239056146178455;  // std dev = 1.633, 12.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=8 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return 0.3207118471601496;  // std dev = 2.58e-08, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | | else return 0.16162857548414675;  // std dev = 1.581, 10.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
%   | | else return 0.13664585375352212;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.25517224256948967;  // std dev = 0.000, 81.000 (wgt'ed) examples reached here.  /* #pos=81 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.13310293675992946;  // std dev = 0.498, 899.000 (wgt'ed) examples reached here.  /* #neg=414 #pos=485 */
%   | | else if ( haswordvenue(B, F), haswordtitle(G, F) )
%   | | | then return 0.19083398791673017;  // std dev = 1.672, 14.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=10 */
%   | | | else return 0.14924782233545025;  // std dev = 1.690, 14.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=10 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return 0.25517224256948945;  // std dev = 1.49e-08, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | | else return 0.1245559779208197;  // std dev = 1.581, 10.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
%   | | else return 0.10762034996184425;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.20975771563253567;  // std dev = 0.000, 81.000 (wgt'ed) examples reached here.  /* #pos=81 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then if ( haswordtitle(G, E) )
%   | | | then return 0.3846781478637661;  // std dev = 1.572, 17.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=14 */
%   | | | else return -0.3138512639009396;  // std dev = 0.935, 8.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */
%   | | else if ( haswordtitle(H, D) )
%   | | | then return 0.09890617316999652;  // std dev = 14.740, 874.000 (wgt'ed) examples reached here.  /* #neg=404 #pos=470 */
%   | | | else return 0.12832717919671083;  // std dev = 2.379, 28.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=20 */
%   | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | then if ( haswordtitle(J, K), haswordvenue(B, K) )
%   | | | then return 0.20975771563253562;  // std dev = 0.000, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | | else return 0.09492800936730683;  // std dev = 1.581, 10.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
%   | | else return 0.08372807955323866;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.17709649774527716;  // std dev = 3.65e-08, 81.000 (wgt'ed) examples reached here.  /* #pos=81 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.07569086339315455;  // std dev = 0.497, 899.000 (wgt'ed) examples reached here.  /* #neg=414 #pos=485 */
%   | | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | | then return 0.11597066317503996;  // std dev = 1.727, 16.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=12 */
%   | | | else return 0.07317656638186469;  // std dev = 1.633, 12.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=8 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return 0.17709649774527744;  // std dev = 0.000, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | | else return 0.07186088850055855;  // std dev = 1.581, 10.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
%   | | else return 0.06457405393631672;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.15274385809367116;  // std dev = 0.000, 81.000 (wgt'ed) examples reached here.  /* #pos=81 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then if ( haswordtitle(G, E) )
%   | | | then return 0.27009831198687584;  // std dev = 1.572, 17.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=14 */
%   | | | else return -0.2563113679010775;  // std dev = 0.935, 8.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */
%   | | else if ( haswordtitle(H, D) )
%   | | | then return 0.055557015086935564;  // std dev = 14.740, 874.000 (wgt'ed) examples reached here.  /* #neg=404 #pos=470 */
%   | | | else return 0.07499662565220049;  // std dev = 2.378, 28.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=20 */
%   | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | then if ( haswordtitle(J, K), haswordvenue(B, K) )
%   | | | then return 0.1527438580936708;  // std dev = 0.000, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | | else return 0.05418307375954949;  // std dev = 1.581, 10.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
%   | | else return 0.04949778322519479;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.1340070300080109;  // std dev = 5.58e-08, 81.000 (wgt'ed) examples reached here.  /* #pos=81 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.04262544967084004;  // std dev = 0.496, 899.000 (wgt'ed) examples reached here.  /* #neg=414 #pos=485 */
%   | | else if ( haswordvenue(B, F), haswordtitle(G, F) )
%   | | | then return 0.07642683040691492;  // std dev = 1.671, 14.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=10 */
%   | | | else return 0.039441784633021636;  // std dev = 1.690, 14.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=10 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return 0.13400703000801117;  // std dev = 0.000, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | | else return 0.04076025323305626;  // std dev = 1.581, 10.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
%   | | else return 0.03777940363354101;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */


Results
   AUC ROC   = 0.617493
   AUC PR    = 0.603175
   CLL	      = -0.662946
   Precision = 0.535474 at threshold = 0.5
   Recall    = 0.957703
   F1        = 0.686891


Total learning time: 48.473 seconds
Total inference time: 6.066 seconds
AUC ROC: 0.617493


Results scoring model
   AUC ROC   = 0.606755
   AUC PR    = 0.73221
   CLL	      = -0.632131
   Precision = 0.592738 at threshold = 0.5
   Recall    = 0.980519
   F1        = 0.738838


Total scoring time: 1.556 seconds
Refined model CLL: -0.632131


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.617493
   AUC PR    = 0.603175
   CLL	      = -0.662946
   Precision = 0.535474 at threshold = 0.5
   Recall    = 0.957703
   F1        = 0.686891


Total learning time: 53.299 seconds
Total inference time: 6.066 seconds
AUC ROC: 0.617493
Total revision time: 53.299
Best scored revision CLL: -0.632131


Dataset: 3_imdb_cora, Fold: 2, Type: Transfer (trRDN-B), Time: 00:12:22
{'AUC ROC': 0.617493, 'AUC PR': 0.603175, 'CLL': -0.662946, 'Precision': [0.535474, 0.5], 'Recall': 0.957703, 'F1': 0.686891, 'Learning time': 53.299, 'Inference time': 6.066, 'parameter_0.8': {'AUC ROC': 0.587266, 'AUC PR': 0.657582, 'CLL': -0.646781, 'Precision': [0.505628, 0.5], 'Recall': 1.0, 'F1': 0.671651, 'Learning time': 2.129, 'Inference time': 2.136}}


Amount of data: 1.0
******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- actor(A), director(B).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.8581489350995112;  // std dev = 4.46e-07, 103.000 (wgt'ed) examples reached here.  /* #pos=103 */
%   else return 0.4093040506110586;  // std dev = 17.316, 1,212.000 (wgt'ed) examples reached here.  /* #neg=544 #pos=668 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.7194734122109546;  // std dev = 0.000, 103.000 (wgt'ed) examples reached here.  /* #pos=103 */
%   else return 0.3518584397759264;  // std dev = 17.316, 1,212.000 (wgt'ed) examples reached here.  /* #neg=544 #pos=668 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.5553664367462834;  // std dev = 4.30e-07, 103.000 (wgt'ed) examples reached here.  /* #pos=103 */
%   else return 0.28978075601916603;  // std dev = 17.316, 1,212.000 (wgt'ed) examples reached here.  /* #neg=544 #pos=668 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.4175135841583097;  // std dev = 2.60e-07, 103.000 (wgt'ed) examples reached here.  /* #pos=103 */
%   else return 0.2301282512902187;  // std dev = 17.316, 1,212.000 (wgt'ed) examples reached here.  /* #neg=544 #pos=668 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.32071184716015033;  // std dev = 0.000, 103.000 (wgt'ed) examples reached here.  /* #pos=103 */
%   else return 0.17805229571102874;  // std dev = 17.316, 1,212.000 (wgt'ed) examples reached here.  /* #neg=544 #pos=668 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.2551722425694897;  // std dev = 0.000, 103.000 (wgt'ed) examples reached here.  /* #pos=103 */
%   else return 0.13555846379071965;  // std dev = 17.316, 1,212.000 (wgt'ed) examples reached here.  /* #neg=544 #pos=668 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.2097577156325356;  // std dev = 1.46e-07, 103.000 (wgt'ed) examples reached here.  /* #pos=103 */
%   else return 0.10230499048265658;  // std dev = 17.316, 1,212.000 (wgt'ed) examples reached here.  /* #neg=544 #pos=668 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.1770964977452773;  // std dev = 5.16e-08, 103.000 (wgt'ed) examples reached here.  /* #pos=103 */
%   else return 0.0768855541294751;  // std dev = 17.316, 1,212.000 (wgt'ed) examples reached here.  /* #neg=544 #pos=668 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.1527438580936713;  // std dev = 0.000, 103.000 (wgt'ed) examples reached here.  /* #pos=103 */
%   else return 0.057686543517231556;  // std dev = 17.316, 1,212.000 (wgt'ed) examples reached here.  /* #neg=544 #pos=668 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.13400703000801087;  // std dev = 6.83e-08, 103.000 (wgt'ed) examples reached here.  /* #pos=103 */
%   else return 0.043265933965801626;  // std dev = 17.316, 1,212.000 (wgt'ed) examples reached here.  /* #neg=544 #pos=668 */


Results
   AUC ROC   = 0.587266
   AUC PR    = 0.657582
   CLL	      = -0.646698
   Precision = 0.505628 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.671651


Total learning time: 2.217 seconds
Total inference time: 2.023 seconds
AUC ROC: 0.587266


Results scoring model
   AUC ROC   = 0.566796
   AUC PR    = 0.695289
   CLL	      = -0.645914
   Precision = 0.586312 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.739214


Total scoring time: 1.219 seconds
Parameter learned model CLL: -0.645914


Structure after Parameter Learning
[['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [4.46e-07, 0, 103], 'false': [17.316, 544, 668]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 103], 'false': [17.316, 544, 668]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [4.3e-07, 0, 103], 'false': [17.316, 544, 668]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [2.6e-07, 0, 103], 'false': [17.316, 544, 668]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 103], 'false': [17.316, 544, 668]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 103], 'false': [17.316, 544, 668]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [1.46e-07, 0, 103], 'false': [17.316, 544, 668]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [5.16e-08, 0, 103], 'false': [17.316, 544, 668]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 103], 'false': [17.316, 544, 668]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [6.83e-08, 0, 103], 'false': [17.316, 544, 668]}]]
[{'': [1.9315724855614373e-15, 0.2473831541569956]}, {'': [-3.4492365813597096e-16, 0.24738315415699694]}, {'': [1.793603022307049e-15, 0.24738315415698806]}, {'': [6.553549504583448e-16, 0.2473831541570005]}, {'': [-2.4144656069517967e-16, 0.24738315415699036]}, {'': [-5.1738548720395646e-17, 0.24738315415699547]}, {'': [2.0695419488158259e-16, 0.2473831541570034]}, {'': [2.5869274360197823e-17, 0.24738315415699816]}, {'': [-1.2503482607428947e-16, 0.24738315415699647]}, {'': [4.527123013034619e-17, 0.24738315415700443]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
1;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
2;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
3;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
4;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
5;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
6;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
7;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
8;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
9;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.8581489350995112;  // std dev = 4.46e-07, 103.000 (wgt'ed) examples reached here.  /* #pos=103 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.3989290769434791;  // std dev = 0.498, 1,128.000 (wgt'ed) examples reached here.  /* #neg=518 #pos=610 */
%   | | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | | then return 0.5949910403626703;  // std dev = 1.919, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | | else return 0.5640312880406888;  // std dev = 1.879, 17.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=12 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return 0.8581489350995122;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | | else return 0.2867203636709409;  // std dev = 1.852, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | | else return 0.2867203636709409;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.7194734122109546;  // std dev = 0.000, 103.000 (wgt'ed) examples reached here.  /* #pos=103 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.3431339147245365;  // std dev = 0.498, 1,128.000 (wgt'ed) examples reached here.  /* #neg=518 #pos=610 */
%   | | else if ( haswordvenue(B, F), haswordtitle(G, F) )
%   | | | then return 0.5111302802881205;  // std dev = 1.918, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | | else return 0.4752970037545024;  // std dev = 1.879, 17.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=12 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return 0.7194734122109543;  // std dev = 7.30e-08, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | | else return 0.24811816884741297;  // std dev = 1.852, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | | else return 0.24811816884741297;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.5553664367462834;  // std dev = 4.30e-07, 103.000 (wgt'ed) examples reached here.  /* #pos=103 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.2830762494159436;  // std dev = 0.498, 1,128.000 (wgt'ed) examples reached here.  /* #neg=518 #pos=610 */
%   | | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | | then return 0.4107512329462532;  // std dev = 1.917, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | | else return 0.3795539345047662;  // std dev = 1.879, 17.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=12 */
%   | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(A, J) )
%   | | | then return 0.5553664367462846;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | | else return 0.20848477447886868;  // std dev = 1.852, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | | else return 0.20848477447886868;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.4175135841583097;  // std dev = 2.60e-07, 103.000 (wgt'ed) examples reached here.  /* #pos=103 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.2253515761414555;  // std dev = 0.498, 1,128.000 (wgt'ed) examples reached here.  /* #neg=518 #pos=610 */
%   | | else if ( haswordvenue(B, F), haswordtitle(G, F) )
%   | | | then return 0.3207198455952967;  // std dev = 1.915, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | | else return 0.28495330444629263;  // std dev = 1.879, 17.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=12 */
%   | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(A, J) )
%   | | | then return 0.41751358415830986;  // std dev = 5.16e-08, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | | else return 0.17062637354018512;  // std dev = 1.852, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | | else return 0.17062637354018512;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.32071184716015033;  // std dev = 0.000, 103.000 (wgt'ed) examples reached here.  /* #pos=103 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then if ( haswordtitle(G, E) )
%   | | | then return 0.4761269733257933;  // std dev = 1.589, 19.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=16 */
%   | | | else return -0.16597828983210133;  // std dev = 1.265, 10.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | | else if ( haswordtitle(H, D) )
%   | | | then return 0.17269322973112616;  // std dev = 16.526, 1,099.000 (wgt'ed) examples reached here.  /* #neg=507 #pos=592 */
%   | | | else return 0.22861439261905941;  // std dev = 2.684, 36.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=26 */
%   | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | then if ( haswordtitle(J, K), haswordvenue(B, K) )
%   | | | then return 0.3207118471601496;  // std dev = 2.11e-08, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | | else return 0.13664585375352212;  // std dev = 1.852, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | | else return 0.13664585375352212;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.2551722425694897;  // std dev = 0.000, 103.000 (wgt'ed) examples reached here.  /* #pos=103 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordtitle(F, D) )
%   | | then return 0.4352101837244704;  // std dev = 0.365, 19.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=16 */
%   | | else if ( author(G, E), venue(G, B) )
%   | | | then return -0.13540907922746437;  // std dev = 0.844, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | else return -0.2416071839159133;  // std dev = 0.906, 7.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=1 */
%   | else if ( haswordvenue(A, H), haswordvenue(B, H) )
%   | | then if ( haswordtitle(I, H) )
%   | | | then return 0.13105530887005848;  // std dev = 16.494, 1,099.000 (wgt'ed) examples reached here.  /* #neg=507 #pos=592 */
%   | | | else return 0.1716384156618265;  // std dev = 2.684, 36.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=26 */
%   | | else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | | | then return 0.21003275240803626;  // std dev = 1.826, 33.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=26 */
%   | | | else return 0.10762034996184425;  // std dev = 1.852, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.2097577156325356;  // std dev = 1.46e-07, 103.000 (wgt'ed) examples reached here.  /* #pos=103 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.10078920877354104;  // std dev = 0.496, 1,128.000 (wgt'ed) examples reached here.  /* #neg=518 #pos=610 */
%   | | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | | then return 0.14448078407599016;  // std dev = 1.915, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | | else return 0.11304963367912875;  // std dev = 1.879, 17.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=12 */
%   | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(A, J) )
%   | | | then return 0.21733803683340533;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | | else return 0.08372807955323866;  // std dev = 1.852, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | | else return 0.06567714026203385;  // std dev = 0.491, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.1770964977452773;  // std dev = 5.16e-08, 103.000 (wgt'ed) examples reached here.  /* #pos=103 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordtitle(F, D) )
%   | | then return 0.3023932243961216;  // std dev = 0.365, 19.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=16 */
%   | | else if ( author(G, E), venue(G, B) )
%   | | | then return -0.1254126677143345;  // std dev = 0.843, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | else return -0.2090359964655113;  // std dev = 0.907, 7.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=1 */
%   | else if ( haswordvenue(A, H), haswordvenue(B, H) )
%   | | then if ( haswordtitle(I, H) )
%   | | | then return 0.07414210980696952;  // std dev = 16.493, 1,099.000 (wgt'ed) examples reached here.  /* #neg=507 #pos=592 */
%   | | | else return 0.09876215660567834;  // std dev = 2.684, 36.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=26 */
%   | | else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | | | then return 0.14133591231865825;  // std dev = 1.821, 33.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=26 */
%   | | | else return 0.06457405393631672;  // std dev = 1.852, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.1527438580936713;  // std dev = 0.000, 103.000 (wgt'ed) examples reached here.  /* #pos=103 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.05698476010377579;  // std dev = 0.496, 1,128.000 (wgt'ed) examples reached here.  /* #neg=518 #pos=610 */
%   | | else if ( haswordvenue(B, F), haswordtitle(G, F) )
%   | | | then return 0.0918202452519058;  // std dev = 1.914, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | | else return 0.05805827843045886;  // std dev = 1.879, 17.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=12 */
%   | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(A, J) )
%   | | | then return 0.1624758237136823;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | | else return 0.04949778322519479;  // std dev = 1.852, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | | else return 0.02073919783332797;  // std dev = 0.488, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.13400703000801087;  // std dev = 6.83e-08, 103.000 (wgt'ed) examples reached here.  /* #pos=103 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.04278225326349192;  // std dev = 0.496, 1,128.000 (wgt'ed) examples reached here.  /* #neg=518 #pos=610 */
%   | | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | | then return 0.07344682252074729;  // std dev = 1.913, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | | else return 0.042295398468693186;  // std dev = 1.879, 17.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=12 */
%   | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(A, J) )
%   | | | then return 0.14155956160553412;  // std dev = 2.11e-08, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | | else return 0.03777940363354101;  // std dev = 1.852, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | | else return 0.015747451005640175;  // std dev = 0.488, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */


Results
   AUC ROC   = 0.625292
   AUC PR    = 0.64843
   CLL	      = -0.660623
   Precision = 0.536445 at threshold = 0.5
   Recall    = 0.956812
   F1        = 0.68746


Total learning time: 52.538 seconds
Total inference time: 5.536 seconds
AUC ROC: 0.625292


Results scoring model
   AUC ROC   = 0.615997
   AUC PR    = 0.739299
   CLL	      = -0.631198
   Precision = 0.594957 at threshold = 0.5
   Recall    = 0.979248
   F1        = 0.740196


Total scoring time: 1.746 seconds
Refined model CLL: -0.631198


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.625292
   AUC PR    = 0.64843
   CLL	      = -0.660623
   Precision = 0.536445 at threshold = 0.5
   Recall    = 0.956812
   F1        = 0.68746


Total learning time: 57.72 seconds
Total inference time: 5.536 seconds
AUC ROC: 0.625292
Total revision time: 57.72
Best scored revision CLL: -0.631198


Dataset: 3_imdb_cora, Fold: 2, Type: Transfer (trRDN-B), Time: 00:13:28
{'AUC ROC': 0.625292, 'AUC PR': 0.64843, 'CLL': -0.660623, 'Precision': [0.536445, 0.5], 'Recall': 0.956812, 'F1': 0.68746, 'Learning time': 57.72, 'Inference time': 5.536, 'parameter_1.0': {'AUC ROC': 0.587266, 'AUC PR': 0.657582, 'CLL': -0.646698, 'Precision': [0.505628, 0.5], 'Recall': 1.0, 'F1': 0.671651, 'Learning time': 2.217, 'Inference time': 2.023}}


Starting fold 3

Target train facts examples: 9306
Target train pos examples: 581
Target train neg examples: 581

Target test facts examples: 33252
Target test pos	 examples: 2436
Target test neg examples: 2159

Amount of data: 0.2
******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- actor(A), director(B).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.8581489350995123;  // std dev = 0.000, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   else return 0.31354799613237294;  // std dev = 7.268, 213.000 (wgt'ed) examples reached here.  /* #neg=116 #pos=97 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.7194734122109542;  // std dev = 7.30e-08, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   else return 0.27094420149822485;  // std dev = 7.268, 213.000 (wgt'ed) examples reached here.  /* #neg=116 #pos=97 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.5553664367462846;  // std dev = 0.000, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   else return 0.2266711010963055;  // std dev = 7.268, 213.000 (wgt'ed) examples reached here.  /* #neg=116 #pos=97 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.4175135841583098;  // std dev = 5.58e-08, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   else return 0.1842571488777485;  // std dev = 7.268, 213.000 (wgt'ed) examples reached here.  /* #neg=116 #pos=97 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.3207118471601496;  // std dev = 2.58e-08, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   else return 0.14635229959589777;  // std dev = 7.268, 213.000 (wgt'ed) examples reached here.  /* #neg=116 #pos=97 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.25517224256948945;  // std dev = 1.49e-08, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   else return 0.1142611140589194;  // std dev = 7.268, 213.000 (wgt'ed) examples reached here.  /* #neg=116 #pos=97 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.20975771563253562;  // std dev = 0.000, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   else return 0.088133620431273;  // std dev = 7.268, 213.000 (wgt'ed) examples reached here.  /* #neg=116 #pos=97 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.17709649774527744;  // std dev = 0.000, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   else return 0.06742413025339249;  // std dev = 7.268, 213.000 (wgt'ed) examples reached here.  /* #neg=116 #pos=97 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.1527438580936708;  // std dev = 0.000, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   else return 0.05129855351291451;  // std dev = 7.268, 213.000 (wgt'ed) examples reached here.  /* #neg=116 #pos=97 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.13400703000801117;  // std dev = 0.000, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   else return 0.038887357844337854;  // std dev = 7.268, 213.000 (wgt'ed) examples reached here.  /* #neg=116 #pos=97 */


Results
   AUC ROC   = 0.581281
   AUC PR    = 0.668957
   CLL	      = -0.65061
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.162562
   F1        = 0.279661


Total learning time: 1.349 seconds
Total inference time: 2.223 seconds
AUC ROC: 0.581281


Results scoring model
   AUC ROC   = 0.581897
   AUC PR    = 0.646295
   CLL	      = -0.644733
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.163793
   F1        = 0.281481


Total scoring time: 0.837 seconds
Parameter learned model CLL: -0.644733


Structure after Parameter Learning
[['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 19], 'false': [7.268, 116, 97]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [7.3e-08, 0, 19], 'false': [7.268, 116, 97]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 19], 'false': [7.268, 116, 97]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [5.58e-08, 0, 19], 'false': [7.268, 116, 97]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [2.58e-08, 0, 19], 'false': [7.268, 116, 97]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [1.49e-08, 0, 19], 'false': [7.268, 116, 97]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 19], 'false': [7.268, 116, 97]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 19], 'false': [7.268, 116, 97]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 19], 'false': [7.268, 116, 97]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 19], 'false': [7.268, 116, 97]}]]
[{'': [-2.8047739569477637e-16, 0.24801075624325242]}, {'': [2.8047739569477637e-16, 0.24801075624324886]}, {'': [-2.8047739569477637e-16, 0.24801075624324984]}, {'': [1.6361181415528622e-16, 0.24801075624325006]}, {'': [3.5059674461847047e-17, 0.24801075624325064]}, {'': [1.1686558153949016e-17, 0.24801075624324848]}, {'': [-3.5059674461847047e-17, 0.24801075624324878]}, {'': [-2.337311630789803e-17, 0.2480107562432508]}, {'': [-2.921639538487254e-17, 0.24801075624325017]}, {'': [0.0, 0.24801075624325122]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
1;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
2;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
3;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
4;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
5;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
6;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
7;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
8;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
9;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.8581489350995123;  // std dev = 0.000, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.3421914882909987;  // std dev = 0.500, 188.000 (wgt'ed) examples reached here.  /* #neg=97 #pos=91 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( title(G, F), venue(G, B) )
%   | | | then return 0.058148935099512175;  // std dev = 1.265, 10.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | | | else return 0.19148226843284552;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | | | then return 0.3581489350995122;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return -0.016851064900487787;  // std dev = 0.935, 8.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.7194734122109542;  // std dev = 7.30e-08, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.29523981669996024;  // std dev = 0.500, 188.000 (wgt'ed) examples reached here.  /* #neg=97 #pos=91 */
%   | else if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then return 0.308741135785635;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | | then return 0.07760283067924519;  // std dev = 1.516, 13.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=3 */
%   | | | else return -0.014812149378556561;  // std dev = 0.935, 8.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.5553664367462846;  // std dev = 0.000, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.24584169994121252;  // std dev = 0.500, 188.000 (wgt'ed) examples reached here.  /* #neg=97 #pos=91 */
%   | else if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then return 0.2564123687585864;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | | then return 0.0672688420880349;  // std dev = 1.516, 13.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=3 */
%   | | | else return -0.013040256218347378;  // std dev = 0.935, 8.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.4175135841583098;  // std dev = 5.58e-08, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.19841729245812695;  // std dev = 0.500, 188.000 (wgt'ed) examples reached here.  /* #neg=97 #pos=91 */
%   | else if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then return 0.20613740734453975;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | | then return 0.05786361463251225;  // std dev = 1.515, 13.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=3 */
%   | | | else return -0.011495970442168556;  // std dev = 0.935, 8.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.3207118471601496;  // std dev = 2.58e-08, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.1562772467106111;  // std dev = 0.500, 188.000 (wgt'ed) examples reached here.  /* #neg=97 #pos=91 */
%   | else if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then return 0.16162857548414666;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | | then return 0.04943546932919841;  // std dev = 1.515, 13.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=3 */
%   | | | else return -0.010146653378486747;  // std dev = 0.935, 8.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.25517224256948945;  // std dev = 1.49e-08, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.25573932936599464;  // std dev = 0.486, 8.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=5 */
%   | else if ( haswordvenue(A, F), haswordvenue(B, F) )
%   | | then if ( haswordvenue(B, G), haswordauthor(H, G) )
%   | | | then return -0.06307731918883035;  // std dev = 1.449, 10.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=3 */
%   | | | else return 0.1254284279376058;  // std dev = 6.594, 174.000 (wgt'ed) examples reached here.  /* #neg=89 #pos=85 */
%   | | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | | then return 0.04198452839664023;  // std dev = 1.515, 13.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=3 */
%   | | | else return -0.008965076262161687;  // std dev = 0.935, 8.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.20975771563253562;  // std dev = 0.000, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then return -0.04862020673628315;  // std dev = 0.458, 10.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=3 */
%   | | else return 0.10112438798093352;  // std dev = 0.500, 178.000 (wgt'ed) examples reached here.  /* #neg=90 #pos=88 */
%   | else if ( haswordvenue(A, G), haswordauthor(H, G) )
%   | | then return 0.06296206537076143;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | | then return 0.0354740227278602;  // std dev = 1.515, 13.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=3 */
%   | | | else return -0.007928371071891604;  // std dev = 0.935, 8.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.17709649774527744;  // std dev = 0.000, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.07066940758431733;  // std dev = 0.498, 188.000 (wgt'ed) examples reached here.  /* #neg=97 #pos=91 */
%   | else if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then return 0.04741464697780516;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | | then return 0.029841759384657437;  // std dev = 1.515, 13.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=3 */
%   | | | else return -0.007017216044217012;  // std dev = 0.935, 8.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.1527438580936708;  // std dev = 0.000, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return -0.07235668185957152;  // std dev = 0.421, 12.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=3 */
%   | else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | | then return 0.15960877829426462;  // std dev = 0.484, 8.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=5 */
%   | | else if ( haswordvenue(A, H), haswordvenue(B, H) )
%   | | | then return 0.05432413078797444;  // std dev = 6.594, 174.000 (wgt'ed) examples reached here.  /* #neg=89 #pos=85 */
%   | | | else return 0.031960773186896364;  // std dev = 1.761, 19.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=4 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.13400703000801117;  // std dev = 0.000, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then return -0.037284889832634505;  // std dev = 0.458, 10.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=3 */
%   | | else return 0.045490907866055114;  // std dev = 0.499, 178.000 (wgt'ed) examples reached here.  /* #neg=90 #pos=88 */
%   | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | then if ( title(I, H), venue(I, B) )
%   | | | then return -0.004149023626234133;  // std dev = 1.262, 10.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | | | else return 0.10488364718882533;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | else if ( haswordvenue(A, J), haswordauthor(K, J) )
%   | | | then return -0.004198211958248543;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return -0.008437129887848328;  // std dev = 0.934, 8.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */


Results
   AUC ROC   = 0.610058
   AUC PR    = 0.680856
   CLL	      = -0.644775
   Precision = 0.867961 at threshold = 0.5
   Recall    = 0.183498
   F1        = 0.302948


Total learning time: 5.397 seconds
Total inference time: 3.181 seconds
AUC ROC: 0.610058


Results scoring model
   AUC ROC   = 0.64696
   AUC PR    = 0.686127
   CLL	      = -0.624305
   Precision = 0.888889 at threshold = 0.5
   Recall    = 0.206897
   F1        = 0.335664


Total scoring time: 1.001 seconds
Refined model CLL: -0.624305


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.610058
   AUC PR    = 0.680856
   CLL	      = -0.644775
   Precision = 0.867961 at threshold = 0.5
   Recall    = 0.183498
   F1        = 0.302948


Total learning time: 8.584 seconds
Total inference time: 3.181 seconds
AUC ROC: 0.610058
Total revision time: 8.584
Best scored revision CLL: -0.624305


Dataset: 3_imdb_cora, Fold: 3, Type: Transfer (trRDN-B), Time: 00:13:42
{'AUC ROC': 0.610058, 'AUC PR': 0.680856, 'CLL': -0.644775, 'Precision': [0.867961, 0.5], 'Recall': 0.183498, 'F1': 0.302948, 'Learning time': 8.584, 'Inference time': 3.181, 'parameter_0.2': {'AUC ROC': 0.581281, 'AUC PR': 0.668957, 'CLL': -0.65061, 'Precision': [1.0, 0.5], 'Recall': 0.162562, 'F1': 0.279661, 'Learning time': 1.349, 'Inference time': 2.223}}


Amount of data: 0.4
******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- actor(A), director(B).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.8581489350995115;  // std dev = 2.60e-07, 38.000 (wgt'ed) examples reached here.  /* #pos=38 */
%   else return 0.31354799613237194;  // std dev = 10.279, 426.000 (wgt'ed) examples reached here.  /* #neg=232 #pos=194 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.719473412210955;  // std dev = 0.000, 38.000 (wgt'ed) examples reached here.  /* #pos=38 */
%   else return 0.2709442014982246;  // std dev = 10.279, 426.000 (wgt'ed) examples reached here.  /* #neg=232 #pos=194 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.5553664367462843;  // std dev = 1.26e-07, 38.000 (wgt'ed) examples reached here.  /* #pos=38 */
%   else return 0.226671101096306;  // std dev = 10.279, 426.000 (wgt'ed) examples reached here.  /* #neg=232 #pos=194 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.4175135841583102;  // std dev = 0.000, 38.000 (wgt'ed) examples reached here.  /* #pos=38 */
%   else return 0.18425714887774822;  // std dev = 10.279, 426.000 (wgt'ed) examples reached here.  /* #neg=232 #pos=194 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.3207118471601495;  // std dev = 2.11e-08, 38.000 (wgt'ed) examples reached here.  /* #pos=38 */
%   else return 0.14635229959590149;  // std dev = 10.279, 426.000 (wgt'ed) examples reached here.  /* #neg=232 #pos=194 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.2551722425694896;  // std dev = 0.000, 38.000 (wgt'ed) examples reached here.  /* #pos=38 */
%   else return 0.11426111405891935;  // std dev = 10.279, 426.000 (wgt'ed) examples reached here.  /* #neg=232 #pos=194 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.20975771563253542;  // std dev = 5.96e-08, 38.000 (wgt'ed) examples reached here.  /* #pos=38 */
%   else return 0.0881336204312761;  // std dev = 10.279, 426.000 (wgt'ed) examples reached here.  /* #neg=232 #pos=194 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.1770964977452775;  // std dev = 0.000, 38.000 (wgt'ed) examples reached here.  /* #pos=38 */
%   else return 0.06742413025338842;  // std dev = 10.279, 426.000 (wgt'ed) examples reached here.  /* #neg=232 #pos=194 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.1527438580936709;  // std dev = 3.80e-08, 38.000 (wgt'ed) examples reached here.  /* #pos=38 */
%   else return 0.05129855351291096;  // std dev = 10.279, 426.000 (wgt'ed) examples reached here.  /* #neg=232 #pos=194 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.1340070300080111;  // std dev = 1.05e-08, 38.000 (wgt'ed) examples reached here.  /* #pos=38 */
%   else return 0.038887357844334516;  // std dev = 10.279, 426.000 (wgt'ed) examples reached here.  /* #neg=232 #pos=194 */


Results
   AUC ROC   = 0.581281
   AUC PR    = 0.668957
   CLL	      = -0.65061
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.162562
   F1        = 0.279661


Total learning time: 1.561 seconds
Total inference time: 1.988 seconds
AUC ROC: 0.581281


Results scoring model
   AUC ROC   = 0.581897
   AUC PR    = 0.646262
   CLL	      = -0.644733
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.163793
   F1        = 0.281481


Total scoring time: 1.04 seconds
Parameter learned model CLL: -0.644733


Structure after Parameter Learning
[['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [2.6e-07, 0, 38], 'false': [10.279, 232, 194]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 38], 'false': [10.279, 232, 194]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [1.26e-07, 0, 38], 'false': [10.279, 232, 194]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 38], 'false': [10.279, 232, 194]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [2.11e-08, 0, 38], 'false': [10.279, 232, 194]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 38], 'false': [10.279, 232, 194]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [5.96e-08, 0, 38], 'false': [10.279, 232, 194]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 38], 'false': [10.279, 232, 194]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [3.8e-08, 0, 38], 'false': [10.279, 232, 194]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [1.05e-08, 0, 38], 'false': [10.279, 232, 194]}]]
[{'': [1.7763568394002505e-15, 0.24801075624325347]}, {'': [-7.47939721852737e-16, 0.24801075624325714]}, {'': [4.2071609354216456e-16, 0.24801075624325017]}, {'': [-3.505967446184705e-16, 0.24801075624324703]}, {'': [1.1686558153949016e-17, 0.24801075624324903]}, {'': [-1.1686558153949016e-17, 0.24801075624325147]}, {'': [9.349246523159212e-17, 0.24801075624325197]}, {'': [-6.427606984671959e-17, 0.24801075624324642]}, {'': [3.7981314000334304e-17, 0.24801075624325064]}, {'': [2.921639538487254e-18, 0.24801075624325244]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
1;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
2;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
3;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
4;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
5;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
6;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
7;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
8;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
9;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.8581489350995115;  // std dev = 2.60e-07, 38.000 (wgt'ed) examples reached here.  /* #pos=38 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.34332413725584243;  // std dev = 0.500, 371.000 (wgt'ed) examples reached here.  /* #neg=191 #pos=180 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( title(G, F), venue(G, B) )
%   | | | then return 0.1914822684328457;  // std dev = 2.309, 24.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=8 */
%   | | | else return 0.024815601766178873;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | | else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | | | then return 0.2581489350995122;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | | else return 0.00814893509951222;  // std dev = 1.597, 20.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=3 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.719473412210955;  // std dev = 0.000, 38.000 (wgt'ed) examples reached here.  /* #pos=38 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then return 0.11871603776978533;  // std dev = 0.462, 13.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=4 */
%   | | else return 0.3026438418093193;  // std dev = 0.500, 358.000 (wgt'ed) examples reached here.  /* #neg=182 #pos=176 */
%   | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | then if ( title(I, H), venue(I, B) )
%   | | | then return 0.16653882456488167;  // std dev = 2.309, 24.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=8 */
%   | | | else return 0.02176788419240575;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | | else if ( haswordvenue(A, J), haswordauthor(K, J) )
%   | | | then return 0.22373365448410584;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | | else return 0.007154072572586269;  // std dev = 1.597, 20.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=3 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.5553664367462843;  // std dev = 1.26e-07, 38.000 (wgt'ed) examples reached here.  /* #pos=38 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.24653987030676305;  // std dev = 0.499, 371.000 (wgt'ed) examples reached here.  /* #neg=191 #pos=180 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( title(G, F), venue(G, B) )
%   | | | then return 0.1420942428155646;  // std dev = 2.309, 24.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=8 */
%   | | | else return 0.01904987294481035;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | | else return 0.04279436912829322;  // std dev = 0.394, 25.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=5 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.4175135841583102;  // std dev = 0.000, 38.000 (wgt'ed) examples reached here.  /* #pos=38 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.19892905024852217;  // std dev = 0.499, 371.000 (wgt'ed) examples reached here.  /* #neg=191 #pos=180 */
%   | else if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then return -0.025813428031370416;  // std dev = 0.892, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | | then return 0.10831277268601366;  // std dev = 2.334, 26.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=8 */
%   | | | else return 0.05325988367129086;  // std dev = 1.951, 23.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=5 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.3207118471601495;  // std dev = 2.11e-08, 38.000 (wgt'ed) examples reached here.  /* #pos=38 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then return 0.01709624789730981;  // std dev = 0.462, 13.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=4 */
%   | | else return 0.16170369154621833;  // std dev = 0.500, 358.000 (wgt'ed) examples reached here.  /* #neg=182 #pos=176 */
%   | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | then if ( title(I, H), venue(I, B) )
%   | | | then return 0.10420642465299368;  // std dev = 2.306, 24.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=8 */
%   | | | else return 0.00229500761277171;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | | else if ( haswordvenue(A, J), haswordauthor(K, J) )
%   | | | then return 0.17242642303104358;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | | else return -0.0049416338604330754;  // std dev = 1.595, 20.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=3 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.2551722425694896;  // std dev = 0.000, 38.000 (wgt'ed) examples reached here.  /* #pos=38 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then return 0.013559280295356349;  // std dev = 0.462, 13.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=4 */
%   | | else if ( haswordvenue(A, G), haswordauthor(H, G) )
%   | | | then return 0.18896219893043673;  // std dev = 1.491, 9.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=5 */
%   | | | else return 0.12337799007975371;  // std dev = 9.339, 349.000 (wgt'ed) examples reached here.  /* #neg=178 #pos=171 */
%   | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | then if ( title(K, J), venue(K, B) )
%   | | | then return 0.08529207251077923;  // std dev = 2.306, 24.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=8 */
%   | | | else return 0.001979537157846526;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | | else if ( haswordvenue(A, L), haswordauthor(M, L) )
%   | | | then return 0.14070513615066757;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | | else return -0.004295750500456582;  // std dev = 1.595, 20.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=3 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.20975771563253542;  // std dev = 5.96e-08, 38.000 (wgt'ed) examples reached here.  /* #pos=38 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return -0.006413842494471712;  // std dev = 0.433, 19.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=5 */
%   | else if ( haswordvenue(A, F), haswordvenue(B, F) )
%   | | then return 0.09553931136606124;  // std dev = 0.500, 358.000 (wgt'ed) examples reached here.  /* #neg=182 #pos=176 */
%   | | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | | then return 0.06306011506705164;  // std dev = 2.327, 26.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=8 */
%   | | | else return 0.033849799051671195;  // std dev = 1.934, 23.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=5 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.1770964977452775;  // std dev = 0.000, 38.000 (wgt'ed) examples reached here.  /* #pos=38 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.0703588729183727;  // std dev = 0.499, 371.000 (wgt'ed) examples reached here.  /* #neg=191 #pos=180 */
%   | else if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then return -0.04252318302610303;  // std dev = 0.884, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | | then return 0.051347037400877045;  // std dev = 2.326, 26.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=8 */
%   | | | else return 0.02882692130099639;  // std dev = 1.933, 23.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=5 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.1527438580936709;  // std dev = 3.80e-08, 38.000 (wgt'ed) examples reached here.  /* #pos=38 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return -0.013167226695097182;  // std dev = 0.433, 19.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=5 */
%   | else if ( haswordvenue(A, F), haswordvenue(B, F) )
%   | | then if ( haswordvenue(A, G), haswordauthor(H, G) )
%   | | | then return 0.10340839975304147;  // std dev = 1.491, 9.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=5 */
%   | | | else return 0.054013451480385215;  // std dev = 9.339, 349.000 (wgt'ed) examples reached here.  /* #neg=178 #pos=171 */
%   | | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | | then return 0.04154597153014578;  // std dev = 2.326, 26.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=8 */
%   | | | else return 0.024468102559361212;  // std dev = 1.933, 23.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=5 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.1340070300080111;  // std dev = 1.05e-08, 38.000 (wgt'ed) examples reached here.  /* #pos=38 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.040161538486577955;  // std dev = 0.499, 371.000 (wgt'ed) examples reached here.  /* #neg=191 #pos=180 */
%   | else if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then return -0.03357231880601575;  // std dev = 0.884, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | | then return 0.033445612167914016;  // std dev = 2.325, 26.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=8 */
%   | | | else return 0.020709544573053133;  // std dev = 1.933, 23.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=5 */


Results
   AUC ROC   = 0.615954
   AUC PR    = 0.685921
   CLL	      = -0.643415
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.162562
   F1        = 0.279661


Total learning time: 9.591 seconds
Total inference time: 3.391 seconds
AUC ROC: 0.615954


Results scoring model
   AUC ROC   = 0.637039
   AUC PR    = 0.676217
   CLL	      = -0.628174
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.163793
   F1        = 0.281481


Total scoring time: 1.272 seconds
Refined model CLL: -0.628174


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.615954
   AUC PR    = 0.685921
   CLL	      = -0.643415
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.162562
   F1        = 0.279661


Total learning time: 13.464 seconds
Total inference time: 3.391 seconds
AUC ROC: 0.615954
Total revision time: 13.464
Best scored revision CLL: -0.628174


Dataset: 3_imdb_cora, Fold: 3, Type: Transfer (trRDN-B), Time: 00:14:02
{'AUC ROC': 0.615954, 'AUC PR': 0.685921, 'CLL': -0.643415, 'Precision': [1.0, 0.5], 'Recall': 0.162562, 'F1': 0.279661, 'Learning time': 13.464, 'Inference time': 3.391, 'parameter_0.4': {'AUC ROC': 0.581281, 'AUC PR': 0.668957, 'CLL': -0.65061, 'Precision': [1.0, 0.5], 'Recall': 0.162562, 'F1': 0.279661, 'Learning time': 1.561, 'Inference time': 1.988}}


Amount of data: 0.6
******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- actor(A), director(B).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.8581489350995125;  // std dev = 0.000, 59.000 (wgt'ed) examples reached here.  /* #pos=59 */
%   else return 0.31183810307439;  // std dev = 12.565, 637.000 (wgt'ed) examples reached here.  /* #neg=348 #pos=289 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.7194734122109543;  // std dev = 0.000, 59.000 (wgt'ed) examples reached here.  /* #pos=59 */
%   else return 0.26949139104367925;  // std dev = 12.565, 637.000 (wgt'ed) examples reached here.  /* #neg=348 #pos=289 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.5553664367462838;  // std dev = 1.19e-07, 59.000 (wgt'ed) examples reached here.  /* #pos=59 */
%   else return 0.22551866650879998;  // std dev = 12.565, 637.000 (wgt'ed) examples reached here.  /* #neg=348 #pos=289 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.41751358415831036;  // std dev = 0.000, 59.000 (wgt'ed) examples reached here.  /* #pos=59 */
%   else return 0.183399187915367;  // std dev = 12.565, 637.000 (wgt'ed) examples reached here.  /* #neg=348 #pos=289 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.3207118471601497;  // std dev = 0.000, 59.000 (wgt'ed) examples reached here.  /* #pos=59 */
%   else return 0.14574596129721235;  // std dev = 12.565, 637.000 (wgt'ed) examples reached here.  /* #neg=348 #pos=289 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.25517224256948967;  // std dev = 0.000, 59.000 (wgt'ed) examples reached here.  /* #pos=59 */
%   else return 0.11384902862986161;  // std dev = 12.565, 637.000 (wgt'ed) examples reached here.  /* #neg=348 #pos=289 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.20975771563253565;  // std dev = 0.000, 59.000 (wgt'ed) examples reached here.  /* #pos=59 */
%   else return 0.08786133689221477;  // std dev = 12.565, 637.000 (wgt'ed) examples reached here.  /* #neg=348 #pos=289 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.17709649774527733;  // std dev = 0.000, 59.000 (wgt'ed) examples reached here.  /* #pos=59 */
%   else return 0.06724795457196453;  // std dev = 12.565, 637.000 (wgt'ed) examples reached here.  /* #neg=348 #pos=289 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.15274385809367075;  // std dev = 2.11e-08, 59.000 (wgt'ed) examples reached here.  /* #pos=59 */
%   else return 0.05118656657997995;  // std dev = 12.565, 637.000 (wgt'ed) examples reached here.  /* #neg=348 #pos=289 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.13400703000801098;  // std dev = 4.21e-08, 59.000 (wgt'ed) examples reached here.  /* #pos=59 */
%   else return 0.03881746308755008;  // std dev = 12.565, 637.000 (wgt'ed) examples reached here.  /* #neg=348 #pos=289 */


Results
   AUC ROC   = 0.581281
   AUC PR    = 0.668957
   CLL	      = -0.650988
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.162562
   F1        = 0.279661


Total learning time: 1.896 seconds
Total inference time: 1.946 seconds
AUC ROC: 0.581281


Results scoring model
   AUC ROC   = 0.58477
   AUC PR    = 0.650017
   CLL	      = -0.642824
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.16954
   F1        = 0.289926


Total scoring time: 1.071 seconds
Parameter learned model CLL: -0.642824


Structure after Parameter Learning
[['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 59], 'false': [12.565, 348, 289]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 59], 'false': [12.565, 348, 289]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [1.19e-07, 0, 59], 'false': [12.565, 348, 289]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 59], 'false': [12.565, 348, 289]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 59], 'false': [12.565, 348, 289]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 59], 'false': [12.565, 348, 289]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 59], 'false': [12.565, 348, 289]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 59], 'false': [12.565, 348, 289]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [2.11e-08, 0, 59], 'false': [12.565, 348, 289]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [4.21e-08, 0, 59], 'false': [12.565, 348, 289]}]]
[{'': [-4.817238886509154e-16, 0.24785530683714369]}, {'': [-6.021548608136442e-17, 0.24785530683713075]}, {'': [2.408619443254577e-16, 0.24785530683714024]}, {'': [-3.3118517344750433e-16, 0.24785530683713997]}, {'': [-1.6559258672375216e-16, 0.24785530683713244]}, {'': [-3.010774304068221e-17, 0.2478553068371447]}, {'': [-3.010774304068221e-17, 0.24785530683714382]}, {'': [-3.010774304068221e-17, 0.2478553068371371]}, {'': [7.526935760170553e-18, 0.2478553068371454]}, {'': [3.010774304068221e-17, 0.24785530683714452]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
1;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
2;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
3;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
4;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
5;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
6;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
7;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
8;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
9;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.8581489350995125;  // std dev = 0.000, 59.000 (wgt'ed) examples reached here.  /* #pos=59 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.3446354215859943;  // std dev = 0.500, 555.000 (wgt'ed) examples reached here.  /* #neg=285 #pos=270 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( title(G, F), venue(G, A) )
%   | | | then return 0.13314893509951237;  // std dev = 2.824, 40.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=11 */
%   | | | else return 0.0010060779566550668;  // std dev = 0.926, 7.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=1 */
%   | | else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | | | then return 0.19148226843284552;  // std dev = 1.155, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   | | | else return 0.030562728202960583;  // std dev = 2.034, 29.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=5 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.7194734122109543;  // std dev = 0.000, 59.000 (wgt'ed) examples reached here.  /* #pos=59 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then return 0.31082267511251604;  // std dev = 0.500, 14.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=7 */
%   | | else return 0.29695945884634467;  // std dev = 0.500, 541.000 (wgt'ed) examples reached here.  /* #neg=278 #pos=263 */
%   | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | then if ( title(I, H), venue(I, A) )
%   | | | then return 0.11615553465204305;  // std dev = 2.824, 40.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=11 */
%   | | | else return 8.835646163369372E-4;  // std dev = 0.926, 7.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=1 */
%   | | else if ( haswordvenue(A, J), haswordauthor(K, J) )
%   | | | then return 0.16653882456488173;  // std dev = 1.155, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   | | | else return 0.026801469463012095;  // std dev = 2.034, 29.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=5 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.5553664367462838;  // std dev = 1.19e-07, 59.000 (wgt'ed) examples reached here.  /* #pos=59 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.2474654567365774;  // std dev = 0.500, 555.000 (wgt'ed) examples reached here.  /* #neg=285 #pos=270 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( title(G, F), venue(G, A) )
%   | | | then return 0.1000141653110379;  // std dev = 2.824, 40.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=11 */
%   | | | else return 7.758973011973702E-4;  // std dev = 0.926, 7.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=1 */
%   | | else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | | | then return 0.1420942428155648;  // std dev = 1.155, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   | | | else return 0.0234353450742992;  // std dev = 2.034, 29.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=5 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.41751358415831036;  // std dev = 0.000, 59.000 (wgt'ed) examples reached here.  /* #pos=59 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then return 0.08819240834013985;  // std dev = 0.484, 16.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=6 */
%   | | else return 0.20291445483304948;  // std dev = 0.500, 539.000 (wgt'ed) examples reached here.  /* #neg=275 #pos=264 */
%   | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | then if ( title(I, H), venue(I, A) )
%   | | | then return 0.08510327456141058;  // std dev = 2.824, 40.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=11 */
%   | | | else return 6.8129367991872E-4;  // std dev = 0.926, 7.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=1 */
%   | | else if ( haswordvenue(A, J), haswordauthor(K, J) )
%   | | | then return 0.11914890490746428;  // std dev = 1.155, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   | | | else return 0.02043961462602645;  // std dev = 2.034, 29.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=5 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.3207118471601497;  // std dev = 0.000, 59.000 (wgt'ed) examples reached here.  /* #pos=59 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then return 0.06981919459670986;  // std dev = 0.484, 16.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=6 */
%   | | else return 0.15968076902678668;  // std dev = 0.500, 539.000 (wgt'ed) examples reached here.  /* #neg=275 #pos=264 */
%   | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | then if ( title(I, H), venue(I, A) )
%   | | | then return 0.07166478801314606;  // std dev = 2.824, 40.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=11 */
%   | | | else return 5.981815657342761E-4;  // std dev = 0.926, 7.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=1 */
%   | | else if ( haswordvenue(A, J), haswordauthor(K, J) )
%   | | | then return 0.09841340278401867;  // std dev = 1.155, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   | | | else return 0.01778661764172128;  // std dev = 2.034, 29.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=5 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.25517224256948967;  // std dev = 0.000, 59.000 (wgt'ed) examples reached here.  /* #pos=59 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.1214845694297498;  // std dev = 0.500, 555.000 (wgt'ed) examples reached here.  /* #neg=285 #pos=270 */
%   | else if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then return 0.0871587258881528;  // std dev = 0.442, 7.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=2 */
%   | | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | | then return 0.03504725983586147;  // std dev = 2.748, 42.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=10 */
%   | | | else return 0.03768192625263577;  // std dev = 2.328, 33.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=7 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.20975771563253565;  // std dev = 0.000, 59.000 (wgt'ed) examples reached here.  /* #pos=59 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.09290132681056043;  // std dev = 0.500, 555.000 (wgt'ed) examples reached here.  /* #neg=285 #pos=270 */
%   | else if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then return 0.07298935792838222;  // std dev = 0.441, 7.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=2 */
%   | | else if ( haswordvenue(A, G), haswordauthor(H, G) )
%   | | | then return -4.839991196789496E-4;  // std dev = 1.210, 8.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | | | else return 0.03433274600701072;  // std dev = 3.391, 67.000 (wgt'ed) examples reached here.  /* #neg=52 #pos=15 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.17709649774527733;  // std dev = 0.000, 59.000 (wgt'ed) examples reached here.  /* #pos=59 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.07052902970540291;  // std dev = 0.500, 555.000 (wgt'ed) examples reached here.  /* #neg=285 #pos=270 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( title(G, F), venue(G, A) )
%   | | | then return 0.04612212754648136;  // std dev = 2.819, 40.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=11 */
%   | | | else return -0.008156237818730951;  // std dev = 0.926, 7.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=1 */
%   | | else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | | | then return 0.07317089062583022;  // std dev = 1.155, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   | | | else return 0.004811243751870469;  // std dev = 2.036, 29.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=5 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.15274385809367075;  // std dev = 2.11e-08, 59.000 (wgt'ed) examples reached here.  /* #pos=59 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.05330476881517436;  // std dev = 0.500, 555.000 (wgt'ed) examples reached here.  /* #neg=285 #pos=270 */
%   | else if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then return -0.013151070626569228;  // std dev = 0.427, 8.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | | then return 0.04274977447964107;  // std dev = 2.946, 45.000 (wgt'ed) examples reached here.  /* #neg=33 #pos=12 */
%   | | | else return 0.004138993283239395;  // std dev = 2.036, 29.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=5 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.13400703000801098;  // std dev = 4.21e-08, 59.000 (wgt'ed) examples reached here.  /* #pos=59 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then return 0.04890849217557314;  // std dev = 0.500, 14.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=7 */
%   | | else if ( haswordvenue(B, G), haswordauthor(H, G) )
%   | | | then return -0.022783682692758822;  // std dev = 1.936, 16.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=6 */
%   | | | else return 0.041862563634614415;  // std dev = 11.454, 525.000 (wgt'ed) examples reached here.  /* #neg=268 #pos=257 */
%   | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | then if ( title(K, J), venue(K, A) )
%   | | | then return 0.030561137822643702;  // std dev = 2.817, 40.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=11 */
%   | | | else return -0.012645163427377685;  // std dev = 0.926, 7.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=1 */
%   | | else return 0.013483688438755777;  // std dev = 0.396, 35.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=7 */


Results
   AUC ROC   = 0.615508
   AUC PR    = 0.685808
   CLL	      = -0.643701
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.162562
   F1        = 0.279661


Total learning time: 13.534 seconds
Total inference time: 3.413 seconds
AUC ROC: 0.615508


Results scoring model
   AUC ROC   = 0.638059
   AUC PR    = 0.677471
   CLL	      = -0.626803
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.16954
   F1        = 0.289926


Total scoring time: 1.233 seconds
Refined model CLL: -0.626803


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.615508
   AUC PR    = 0.685808
   CLL	      = -0.643701
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.162562
   F1        = 0.279661


Total learning time: 17.734 seconds
Total inference time: 3.413 seconds
AUC ROC: 0.615508
Total revision time: 17.734
Best scored revision CLL: -0.626803


Dataset: 3_imdb_cora, Fold: 3, Type: Transfer (trRDN-B), Time: 00:14:26
{'AUC ROC': 0.615508, 'AUC PR': 0.685808, 'CLL': -0.643701, 'Precision': [1.0, 0.5], 'Recall': 0.162562, 'F1': 0.279661, 'Learning time': 17.734, 'Inference time': 3.413, 'parameter_0.6': {'AUC ROC': 0.581281, 'AUC PR': 0.668957, 'CLL': -0.650988, 'Precision': [1.0, 0.5], 'Recall': 0.162562, 'F1': 0.279661, 'Learning time': 1.896, 'Inference time': 1.946}}


Amount of data: 0.8
******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- actor(A), director(B).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.8581489350995122;  // std dev = 0.000, 84.000 (wgt'ed) examples reached here.  /* #pos=84 */
%   else return 0.30838590192415216;  // std dev = 14.454, 844.000 (wgt'ed) examples reached here.  /* #neg=464 #pos=380 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.7194734122109537;  // std dev = 2.67e-07, 84.000 (wgt'ed) examples reached here.  /* #pos=84 */
%   else return 0.26655738310034516;  // std dev = 14.454, 844.000 (wgt'ed) examples reached here.  /* #neg=464 #pos=380 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.5553664367462835;  // std dev = 3.53e-07, 84.000 (wgt'ed) examples reached here.  /* #pos=84 */
%   else return 0.22318917968859572;  // std dev = 14.454, 844.000 (wgt'ed) examples reached here.  /* #neg=464 #pos=380 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.4175135841583103;  // std dev = 1.26e-07, 84.000 (wgt'ed) examples reached here.  /* #pos=84 */
%   else return 0.18166256669778985;  // std dev = 14.454, 844.000 (wgt'ed) examples reached here.  /* #neg=464 #pos=380 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.3207118471601503;  // std dev = 0.000, 84.000 (wgt'ed) examples reached here.  /* #pos=84 */
%   else return 0.14451681434279068;  // std dev = 14.454, 844.000 (wgt'ed) examples reached here.  /* #neg=464 #pos=380 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.2551722425694897;  // std dev = 0.000, 84.000 (wgt'ed) examples reached here.  /* #pos=84 */
%   else return 0.11301262650395238;  // std dev = 14.454, 844.000 (wgt'ed) examples reached here.  /* #neg=464 #pos=380 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.20975771563253584;  // std dev = 0.000, 84.000 (wgt'ed) examples reached here.  /* #pos=84 */
%   else return 0.08730834630292145;  // std dev = 14.454, 844.000 (wgt'ed) examples reached here.  /* #neg=464 #pos=380 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.17709649774527714;  // std dev = 4.21e-08, 84.000 (wgt'ed) examples reached here.  /* #pos=84 */
%   else return 0.0668902738200189;  // std dev = 14.454, 844.000 (wgt'ed) examples reached here.  /* #neg=464 #pos=380 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.1527438580936712;  // std dev = 0.000, 84.000 (wgt'ed) examples reached here.  /* #pos=84 */
%   else return 0.05095958052435346;  // std dev = 14.454, 844.000 (wgt'ed) examples reached here.  /* #neg=464 #pos=380 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.1340070300080109;  // std dev = 5.77e-08, 84.000 (wgt'ed) examples reached here.  /* #pos=84 */
%   else return 0.038676283208393;  // std dev = 14.454, 844.000 (wgt'ed) examples reached here.  /* #neg=464 #pos=380 */


Results
   AUC ROC   = 0.581281
   AUC PR    = 0.668957
   CLL	      = -0.651785
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.162562
   F1        = 0.279661


Total learning time: 2.004 seconds
Total inference time: 2.17 seconds
AUC ROC: 0.581281


Results scoring model
   AUC ROC   = 0.590517
   AUC PR    = 0.65741
   CLL	      = -0.638973
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.181034
   F1        = 0.306569


Total scoring time: 1.113 seconds
Parameter learned model CLL: -0.638973


Structure after Parameter Learning
[['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 84], 'false': [14.454, 464, 380]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [2.67e-07, 0, 84], 'false': [14.454, 464, 380]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [3.53e-07, 0, 84], 'false': [14.454, 464, 380]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [1.26e-07, 0, 84], 'false': [14.454, 464, 380]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 84], 'false': [14.454, 464, 380]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 84], 'false': [14.454, 464, 380]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 84], 'false': [14.454, 464, 380]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [4.21e-08, 0, 84], 'false': [14.454, 464, 380]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 84], 'false': [14.454, 464, 380]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [5.77e-08, 0, 84], 'false': [14.454, 464, 380]}]]
[{'': [-4.2294210461910723e-16, 0.24752364052917564]}, {'': [8.458842092382145e-16, 0.24752364052917816]}, {'': [1.4802973661668755e-15, 0.24752364052918108]}, {'': [1.9032394707859825e-16, 0.24752364052918158]}, {'': [-3.383536836952858e-16, 0.24752364052919448]}, {'': [-5.2867763077388404e-17, 0.2475236405291828]}, {'': [-1.2688263138573217e-16, 0.24752364052918802]}, {'': [2.114710523095536e-17, 0.24752364052918488]}, {'': [-5.551115123125783e-17, 0.24752364052919568]}, {'': [3.9650822308041306e-17, 0.247523640529183]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
1;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
2;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
3;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
4;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
5;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
6;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
7;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
8;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
9;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.8581489350995122;  // std dev = 0.000, 84.000 (wgt'ed) examples reached here.  /* #pos=84 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.3397815881607322;  // std dev = 0.500, 735.000 (wgt'ed) examples reached here.  /* #neg=381 #pos=354 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( title(G, F), venue(G, A) )
%   | | | then return 0.13592671287729013;  // std dev = 3.291, 54.000 (wgt'ed) examples reached here.  /* #neg=39 #pos=15 */
%   | | | else return 0.0803711573217344;  // std dev = 1.247, 9.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | | else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | | | then return 0.19148226843284552;  // std dev = 1.155, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   | | | else return 0.03314893509951235;  // std dev = 2.403, 40.000 (wgt'ed) examples reached here.  /* #neg=33 #pos=7 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.7194734122109537;  // std dev = 2.67e-07, 84.000 (wgt'ed) examples reached here.  /* #pos=84 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.29319873109574685;  // std dev = 0.500, 735.000 (wgt'ed) examples reached here.  /* #neg=381 #pos=354 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( title(G, F), venue(G, A) )
%   | | | then return 0.11856181366859982;  // std dev = 3.291, 54.000 (wgt'ed) examples reached here.  /* #neg=39 #pos=15 */
%   | | | else return 0.07030324498182235;  // std dev = 1.247, 9.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | | else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | | | then return 0.16653882456488173;  // std dev = 1.155, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   | | | else return 0.02906563299670779;  // std dev = 2.403, 40.000 (wgt'ed) examples reached here.  /* #neg=33 #pos=7 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.5553664367462835;  // std dev = 3.53e-07, 84.000 (wgt'ed) examples reached here.  /* #pos=84 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then return 0.19738849529103575;  // std dev = 0.496, 23.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=10 */
%   | | else return 0.2457519540111222;  // std dev = 0.500, 712.000 (wgt'ed) examples reached here.  /* #neg=368 #pos=344 */
%   | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | then if ( title(I, H), venue(I, A) )
%   | | | then return 0.102042281201789;  // std dev = 3.291, 54.000 (wgt'ed) examples reached here.  /* #neg=39 #pos=15 */
%   | | | else return 0.061022104415313035;  // std dev = 1.247, 9.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | | else return 0.040625819200617516;  // std dev = 0.395, 46.000 (wgt'ed) examples reached here.  /* #neg=37 #pos=9 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.4175135841583103;  // std dev = 1.26e-07, 84.000 (wgt'ed) examples reached here.  /* #pos=84 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.1972379618620795;  // std dev = 0.500, 735.000 (wgt'ed) examples reached here.  /* #neg=381 #pos=354 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( title(G, F), venue(G, A) )
%   | | | then return 0.08676907870746631;  // std dev = 3.291, 54.000 (wgt'ed) examples reached here.  /* #neg=39 #pos=15 */
%   | | | else return 0.05259950478597565;  // std dev = 1.247, 9.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | | else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | | | then return 0.13573184870138152;  // std dev = 1.155, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   | | | else return 0.02016339981378884;  // std dev = 2.403, 40.000 (wgt'ed) examples reached here.  /* #neg=33 #pos=7 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.3207118471601503;  // std dev = 0.000, 84.000 (wgt'ed) examples reached here.  /* #pos=84 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then return 0.1188209772289426;  // std dev = 0.496, 23.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=10 */
%   | | else return 0.15663984817908155;  // std dev = 0.500, 712.000 (wgt'ed) examples reached here.  /* #neg=368 #pos=344 */
%   | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | then if ( title(I, H), venue(I, A) )
%   | | | then return 0.07300063402786498;  // std dev = 3.291, 54.000 (wgt'ed) examples reached here.  /* #neg=39 #pos=15 */
%   | | | else return 0.04506156572157876;  // std dev = 1.247, 9.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | | else if ( haswordvenue(A, J), haswordauthor(K, J) )
%   | | | then return 0.11332558820141488;  // std dev = 1.155, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   | | | else return 0.01750637038001222;  // std dev = 2.403, 40.000 (wgt'ed) examples reached here.  /* #neg=33 #pos=7 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.2551722425694897;  // std dev = 0.000, 84.000 (wgt'ed) examples reached here.  /* #pos=84 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then return 0.09259761681367873;  // std dev = 0.496, 23.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=10 */
%   | | else return 0.1213067615959169;  // std dev = 0.500, 712.000 (wgt'ed) examples reached here.  /* #neg=368 #pos=344 */
%   | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | then if ( title(I, H), venue(I, A) )
%   | | | then return 0.06085662941226849;  // std dev = 3.291, 54.000 (wgt'ed) examples reached here.  /* #neg=39 #pos=15 */
%   | | | else return 0.03839689936532517;  // std dev = 1.247, 9.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | | else if ( haswordvenue(A, J), haswordauthor(K, J) )
%   | | | then return 0.09326331045686582;  // std dev = 1.155, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   | | | else return 0.015169508595997704;  // std dev = 2.403, 40.000 (wgt'ed) examples reached here.  /* #neg=33 #pos=7 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.20975771563253584;  // std dev = 0.000, 84.000 (wgt'ed) examples reached here.  /* #pos=84 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then return 0.07146062944371989;  // std dev = 0.496, 23.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=10 */
%   | | else return 0.09285363384100825;  // std dev = 0.500, 712.000 (wgt'ed) examples reached here.  /* #neg=368 #pos=344 */
%   | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | then if ( title(I, H), venue(I, A) )
%   | | | then return 0.05034122903856471;  // std dev = 3.291, 54.000 (wgt'ed) examples reached here.  /* #neg=39 #pos=15 */
%   | | | else return 0.03256600389501996;  // std dev = 1.247, 9.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | | else return 0.02130242275960711;  // std dev = 0.394, 46.000 (wgt'ed) examples reached here.  /* #neg=37 #pos=9 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.17709649774527714;  // std dev = 4.21e-08, 84.000 (wgt'ed) examples reached here.  /* #pos=84 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then return 0.05477454520196657;  // std dev = 0.496, 23.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=10 */
%   | | else if ( haswordvenue(B, G), haswordauthor(H, G) )
%   | | | then return -0.05259949028363962;  // std dev = 2.400, 25.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=9 */
%   | | | else return 0.07502787507298338;  // std dev = 13.101, 687.000 (wgt'ed) examples reached here.  /* #neg=352 #pos=335 */
%   | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | then if ( title(K, J), venue(K, B) )
%   | | | then return 0.03708219365237358;  // std dev = 3.300, 55.000 (wgt'ed) examples reached here.  /* #neg=40 #pos=15 */
%   | | | else return 0.055288170262379685;  // std dev = 1.225, 8.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | | else if ( haswordvenue(A, L), haswordauthor(M, L) )
%   | | | then return 0.07174508806731489;  // std dev = 1.155, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   | | | else return 0.010210916220886934;  // std dev = 2.403, 40.000 (wgt'ed) examples reached here.  /* #neg=33 #pos=7 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.1527438580936712;  // std dev = 0.000, 84.000 (wgt'ed) examples reached here.  /* #pos=84 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then return 0.041787445476498826;  // std dev = 0.496, 23.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=10 */
%   | | else return 0.053339198987093675;  // std dev = 0.499, 712.000 (wgt'ed) examples reached here.  /* #neg=368 #pos=344 */
%   | else if ( haswordvenue(B, G), haswordauthor(H, G) )
%   | | then return -0.0277697343647035;  // std dev = 0.393, 10.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | | else if ( haswordvenue(A, I), haswordauthor(J, I) )
%   | | | then return -0.017551738351349846;  // std dev = 1.212, 8.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | | | else return 0.034686507079133774;  // std dev = 4.056, 91.000 (wgt'ed) examples reached here.  /* #neg=69 #pos=22 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.1340070300080109;  // std dev = 5.77e-08, 84.000 (wgt'ed) examples reached here.  /* #pos=84 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.03995862179852802;  // std dev = 0.499, 735.000 (wgt'ed) examples reached here.  /* #neg=381 #pos=354 */
%   | else if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then return -0.022947945153952272;  // std dev = 0.394, 10.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | | then return 0.030140266351986023;  // std dev = 3.297, 55.000 (wgt'ed) examples reached here.  /* #neg=40 #pos=15 */
%   | | | else return 0.01969333436449268;  // std dev = 2.656, 44.000 (wgt'ed) examples reached here.  /* #neg=35 #pos=9 */


Results
   AUC ROC   = 0.616252
   AUC PR    = 0.686173
   CLL	      = -0.642606
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.162562
   F1        = 0.279661


Total learning time: 19.814 seconds
Total inference time: 3.612 seconds
AUC ROC: 0.616252


Results scoring model
   AUC ROC   = 0.643565
   AUC PR    = 0.684603
   CLL	      = -0.624594
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.181034
   F1        = 0.306569


Total scoring time: 1.307 seconds
Refined model CLL: -0.624594


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.616252
   AUC PR    = 0.686173
   CLL	      = -0.642606
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.162562
   F1        = 0.279661


Total learning time: 24.238 seconds
Total inference time: 3.612 seconds
AUC ROC: 0.616252
Total revision time: 24.238
Best scored revision CLL: -0.624594


Dataset: 3_imdb_cora, Fold: 3, Type: Transfer (trRDN-B), Time: 00:14:57
{'AUC ROC': 0.616252, 'AUC PR': 0.686173, 'CLL': -0.642606, 'Precision': [1.0, 0.5], 'Recall': 0.162562, 'F1': 0.279661, 'Learning time': 24.238, 'Inference time': 3.612, 'parameter_0.8': {'AUC ROC': 0.581281, 'AUC PR': 0.668957, 'CLL': -0.651785, 'Precision': [1.0, 0.5], 'Recall': 0.162562, 'F1': 0.279661, 'Learning time': 2.004, 'Inference time': 2.17}}


Amount of data: 1.0
******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- actor(A), director(B).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.8581489350995114;  // std dev = 3.77e-07, 99.000 (wgt'ed) examples reached here.  /* #pos=99 */
%   else return 0.31158261336855736;  // std dev = 16.231, 1,063.000 (wgt'ed) examples reached here.  /* #neg=581 #pos=482 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.7194734122109542;  // std dev = 1.19e-07, 99.000 (wgt'ed) examples reached here.  /* #pos=99 */
%   else return 0.269274290411593;  // std dev = 16.231, 1,063.000 (wgt'ed) examples reached here.  /* #neg=581 #pos=482 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.5553664367462835;  // std dev = 4.21e-07, 99.000 (wgt'ed) examples reached here.  /* #pos=99 */
%   else return 0.22534639339232987;  // std dev = 16.231, 1,063.000 (wgt'ed) examples reached here.  /* #neg=581 #pos=482 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.4175135841583098;  // std dev = 2.46e-07, 99.000 (wgt'ed) examples reached here.  /* #pos=99 */
%   else return 0.1832708679187909;  // std dev = 16.231, 1,063.000 (wgt'ed) examples reached here.  /* #neg=581 #pos=482 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.32071184716015044;  // std dev = 0.000, 99.000 (wgt'ed) examples reached here.  /* #pos=99 */
%   else return 0.14565522348175267;  // std dev = 16.231, 1,063.000 (wgt'ed) examples reached here.  /* #neg=581 #pos=482 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.2551722425694897;  // std dev = 0.000, 99.000 (wgt'ed) examples reached here.  /* #pos=99 */
%   else return 0.11378733181358892;  // std dev = 16.231, 1,063.000 (wgt'ed) examples reached here.  /* #neg=581 #pos=482 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.20975771563253565;  // std dev = 1.37e-07, 99.000 (wgt'ed) examples reached here.  /* #pos=99 */
%   else return 0.08782056189091127;  // std dev = 16.231, 1,063.000 (wgt'ed) examples reached here.  /* #neg=581 #pos=482 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.17709649774527725;  // std dev = 6.99e-08, 99.000 (wgt'ed) examples reached here.  /* #pos=99 */
%   else return 0.0672215757593893;  // std dev = 16.231, 1,063.000 (wgt'ed) examples reached here.  /* #neg=581 #pos=482 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.15274385809367128;  // std dev = 0.000, 99.000 (wgt'ed) examples reached here.  /* #pos=99 */
%   else return 0.05116980968684946;  // std dev = 16.231, 1,063.000 (wgt'ed) examples reached here.  /* #neg=581 #pos=482 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.13400703000801087;  // std dev = 6.50e-08, 99.000 (wgt'ed) examples reached here.  /* #pos=99 */
%   else return 0.03880701861916272;  // std dev = 16.231, 1,063.000 (wgt'ed) examples reached here.  /* #neg=581 #pos=482 */


Results
   AUC ROC   = 0.581281
   AUC PR    = 0.668957
   CLL	      = -0.651046
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.162562
   F1        = 0.279661


Total learning time: 2.147 seconds
Total inference time: 2.16 seconds
AUC ROC: 0.581281


Results scoring model
   AUC ROC   = 0.585198
   AUC PR    = 0.65057
   CLL	      = -0.642539
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.170396
   F1        = 0.291176


Total scoring time: 1.229 seconds
Parameter learned model CLL: -0.642539


Structure after Parameter Learning
[['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [3.77e-07, 0, 99], 'false': [16.231, 581, 482]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [1.19e-07, 0, 99], 'false': [16.231, 581, 482]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [4.21e-07, 0, 99], 'false': [16.231, 581, 482]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [2.46e-07, 0, 99], 'false': [16.231, 581, 482]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 99], 'false': [16.231, 581, 482]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 99], 'false': [16.231, 581, 482]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [1.37e-07, 0, 99], 'false': [16.231, 581, 482]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [6.99e-08, 0, 99], 'false': [16.231, 581, 482]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 99], 'false': [16.231, 581, 482]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [6.5e-08, 0, 99], 'false': [16.231, 581, 482]}]]
[{'': [1.4354398702224246e-15, 0.24783157768043898]}, {'': [1.4354398702224247e-16, 0.24783157768043584]}, {'': [1.794299837778031e-15, 0.24783157768045483]}, {'': [6.100619448445304e-16, 0.24783157768043027]}, {'': [0.0, 0.2478315776804467]}, {'': [-4.485749594445077e-17, 0.24783157768044284]}, {'': [1.8840148296669324e-16, 0.24783157768044498]}, {'': [4.9343245538895844e-17, 0.24783157768044983]}, {'': [-1.1214373986112693e-16, 0.24783157768044695]}, {'': [4.261462114722823e-17, 0.24783157768045172]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
1;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
2;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
3;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
4;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
5;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
6;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
7;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
8;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
9;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.8581489350995114;  // std dev = 3.77e-07, 99.000 (wgt'ed) examples reached here.  /* #pos=99 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.34135586901066683;  // std dev = 0.500, 923.000 (wgt'ed) examples reached here.  /* #neg=477 #pos=446 */
%   | else if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then return 0.058148935099512175;  // std dev = 0.400, 10.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | | else if ( haswordvenue(A, G), haswordauthor(H, G) )
%   | | | then return 0.039967116917694;  // std dev = 1.279, 11.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=2 */
%   | | | else return 0.12705649812472108;  // std dev = 4.837, 119.000 (wgt'ed) examples reached here.  /* #neg=87 #pos=32 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.7194734122109542;  // std dev = 1.19e-07, 99.000 (wgt'ed) examples reached here.  /* #pos=99 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then return 0.2052646044951771;  // std dev = 0.489, 33.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=13 */
%   | | else return 0.2978420644883572;  // std dev = 0.500, 890.000 (wgt'ed) examples reached here.  /* #neg=457 #pos=433 */
%   | else if ( haswordvenue(A, G), haswordauthor(H, G) )
%   | | then return 0.03503196034273708;  // std dev = 0.386, 11.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=2 */
%   | | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | | then return 0.09649791816750546;  // std dev = 3.666, 71.000 (wgt'ed) examples reached here.  /* #neg=53 #pos=18 */
%   | | | else return 0.11813870502589963;  // std dev = 3.402, 58.000 (wgt'ed) examples reached here.  /* #neg=42 #pos=16 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.5553664367462835;  // std dev = 4.21e-07, 99.000 (wgt'ed) examples reached here.  /* #pos=99 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then return 0.17182371904588709;  // std dev = 0.489, 33.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=13 */
%   | | else return 0.2479952778898582;  // std dev = 0.500, 890.000 (wgt'ed) examples reached here.  /* #neg=457 #pos=433 */
%   | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | then if ( title(I, H), venue(I, A) )
%   | | | then return 0.08083656640807277;  // std dev = 3.460, 64.000 (wgt'ed) examples reached here.  /* #neg=48 #pos=16 */
%   | | | else return 0.028700536762097863;  // std dev = 1.265, 10.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | | else if ( haswordvenue(A, J), haswordauthor(K, J) )
%   | | | then return 0.09877186593214066;  // std dev = 1.225, 8.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | | | else return 0.10180315774442066;  // std dev = 3.402, 58.000 (wgt'ed) examples reached here.  /* #neg=42 #pos=16 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.4175135841583098;  // std dev = 2.46e-07, 99.000 (wgt'ed) examples reached here.  /* #pos=99 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.19796861254243775;  // std dev = 0.500, 923.000 (wgt'ed) examples reached here.  /* #neg=477 #pos=446 */
%   | else if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then return 0.018138325091808502;  // std dev = 0.385, 11.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=2 */
%   | | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | | then return 0.07265593259312227;  // std dev = 3.665, 71.000 (wgt'ed) examples reached here.  /* #neg=53 #pos=18 */
%   | | | else return 0.08667925208122972;  // std dev = 3.402, 58.000 (wgt'ed) examples reached here.  /* #neg=42 #pos=16 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.32071184716015044;  // std dev = 0.000, 99.000 (wgt'ed) examples reached here.  /* #pos=99 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.15596679940213684;  // std dev = 0.500, 923.000 (wgt'ed) examples reached here.  /* #neg=477 #pos=446 */
%   | else if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then return 0.015640243551405926;  // std dev = 0.385, 11.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=2 */
%   | | else if ( haswordvenue(B, G), haswordauthor(H, G) )
%   | | | then return 0.014628884082834063;  // std dev = 1.268, 10.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | | | else return 0.07114055082457335;  // std dev = 4.834, 119.000 (wgt'ed) examples reached here.  /* #neg=87 #pos=32 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.2551722425694897;  // std dev = 0.000, 99.000 (wgt'ed) examples reached here.  /* #pos=99 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.12076017728274373;  // std dev = 0.500, 923.000 (wgt'ed) examples reached here.  /* #neg=477 #pos=446 */
%   | else if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then return 0.013461776886095561;  // std dev = 0.385, 11.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=2 */
%   | | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | | then return 0.0513506643536583;  // std dev = 3.665, 71.000 (wgt'ed) examples reached here.  /* #neg=53 #pos=18 */
%   | | | else return 0.06158882724331861;  // std dev = 3.401, 58.000 (wgt'ed) examples reached here.  /* #neg=42 #pos=16 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.20975771563253565;  // std dev = 1.37e-07, 99.000 (wgt'ed) examples reached here.  /* #pos=99 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.09242502619656678;  // std dev = 0.500, 923.000 (wgt'ed) examples reached here.  /* #neg=477 #pos=446 */
%   | else if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then return 0.004126808306475732;  // std dev = 0.401, 10.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | | then return 0.031722389898866235;  // std dev = 3.472, 66.000 (wgt'ed) examples reached here.  /* #neg=50 #pos=16 */
%   | | | else return 0.06252361999043814;  // std dev = 3.596, 64.000 (wgt'ed) examples reached here.  /* #neg=46 #pos=18 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.17709649774527725;  // std dev = 6.99e-08, 99.000 (wgt'ed) examples reached here.  /* #pos=99 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.07021796547664816;  // std dev = 0.500, 923.000 (wgt'ed) examples reached here.  /* #neg=477 #pos=446 */
%   | else if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then return 0.0034760669963623202;  // std dev = 0.401, 10.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | | then return 0.026401424355194845;  // std dev = 3.472, 66.000 (wgt'ed) examples reached here.  /* #neg=50 #pos=16 */
%   | | | else return 0.05167314578380219;  // std dev = 3.596, 64.000 (wgt'ed) examples reached here.  /* #neg=46 #pos=18 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.15274385809367128;  // std dev = 0.000, 99.000 (wgt'ed) examples reached here.  /* #pos=99 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.003138619118511543;  // std dev = 0.470, 43.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=15 */
%   | else if ( haswordvenue(A, F), haswordvenue(B, F) )
%   | | then return 0.054951700246418024;  // std dev = 0.500, 890.000 (wgt'ed) examples reached here.  /* #neg=457 #pos=433 */
%   | | else if ( haswordvenue(A, G), haswordauthor(H, G) )
%   | | | then return -0.002910300372989934;  // std dev = 1.275, 11.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=2 */
%   | | | else return 0.03523175791102818;  // std dev = 4.833, 119.000 (wgt'ed) examples reached here.  /* #neg=87 #pos=32 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.13400703000801087;  // std dev = 6.50e-08, 99.000 (wgt'ed) examples reached here.  /* #pos=99 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.002449408072270136;  // std dev = 0.470, 43.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=15 */
%   | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | then if ( title(H, G), venue(H, A) )
%   | | | then return 0.005608282247308565;  // std dev = 13.742, 777.000 (wgt'ed) examples reached here.  /* #neg=439 #pos=338 */
%   | | | else return 0.18057090339018286;  // std dev = 6.299, 173.000 (wgt'ed) examples reached here.  /* #neg=67 #pos=106 */
%   | | else if ( haswordvenue(A, I), haswordvenue(B, I) )
%   | | | then return 0.38824014177689486;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | | else return 0.03670959212252589;  // std dev = 3.596, 64.000 (wgt'ed) examples reached here.  /* #neg=46 #pos=18 */


Results
   AUC ROC   = 0.619012
   AUC PR    = 0.690036
   CLL	      = -0.642839
   Precision = 0.959551 at threshold = 0.5
   Recall    = 0.175287
   F1        = 0.296425


Total learning time: 17.746 seconds
Total inference time: 4.883 seconds
AUC ROC: 0.619012


Results scoring model
   AUC ROC   = 0.668491
   AUC PR    = 0.714347
   CLL	      = -0.626638
   Precision = 0.990476 at threshold = 0.5
   Recall    = 0.179002
   F1        = 0.303207


Total scoring time: 1.51 seconds
Refined model CLL: -0.626638


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.619012
   AUC PR    = 0.690036
   CLL	      = -0.642839
   Precision = 0.959551 at threshold = 0.5
   Recall    = 0.175287
   F1        = 0.296425


Total learning time: 22.632 seconds
Total inference time: 4.883 seconds
AUC ROC: 0.619012
Total revision time: 22.632
Best scored revision CLL: -0.626638


Dataset: 3_imdb_cora, Fold: 3, Type: Transfer (trRDN-B), Time: 00:15:27
{'AUC ROC': 0.619012, 'AUC PR': 0.690036, 'CLL': -0.642839, 'Precision': [0.959551, 0.5], 'Recall': 0.175287, 'F1': 0.296425, 'Learning time': 22.632, 'Inference time': 4.883, 'parameter_1.0': {'AUC ROC': 0.581281, 'AUC PR': 0.668957, 'CLL': -0.651046, 'Precision': [1.0, 0.5], 'Recall': 0.162562, 'F1': 0.279661, 'Learning time': 2.147, 'Inference time': 2.16}}


Starting fold 4

Target train facts examples: 8129
Target train pos examples: 747
Target train neg examples: 747

Target test facts examples: 34429
Target test pos	 examples: 2270
Target test neg examples: 1993

Amount of data: 0.2
******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- actor(A), director(B).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.8581489350995122;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   else return 0.3221777120779259;  // std dev = 8.315, 278.000 (wgt'ed) examples reached here.  /* #neg=149 #pos=129 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.7194734122109543;  // std dev = 7.30e-08, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   else return 0.2782722017854757;  // std dev = 8.315, 278.000 (wgt'ed) examples reached here.  /* #neg=149 #pos=129 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.5553664367462846;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   else return 0.23247351363301777;  // std dev = 8.315, 278.000 (wgt'ed) examples reached here.  /* #neg=149 #pos=129 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.41751358415830986;  // std dev = 5.16e-08, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   else return 0.18856519033273164;  // std dev = 8.315, 278.000 (wgt'ed) examples reached here.  /* #neg=149 #pos=129 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.3207118471601496;  // std dev = 2.11e-08, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   else return 0.149387971047009;  // std dev = 8.315, 278.000 (wgt'ed) examples reached here.  /* #neg=149 #pos=129 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.25517224256948945;  // std dev = 1.49e-08, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   else return 0.11631944874518578;  // std dev = 8.315, 278.000 (wgt'ed) examples reached here.  /* #neg=149 #pos=129 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.2097577156325356;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   else return 0.08949233530515129;  // std dev = 8.315, 278.000 (wgt'ed) examples reached here.  /* #neg=149 #pos=129 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.17709649774527744;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   else return 0.06830419791644535;  // std dev = 8.315, 278.000 (wgt'ed) examples reached here.  /* #neg=149 #pos=129 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.1527438580936708;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   else return 0.051860115440294514;  // std dev = 8.315, 278.000 (wgt'ed) examples reached here.  /* #neg=149 #pos=129 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.13400703000801117;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   else return 0.03924049993233524;  // std dev = 8.315, 278.000 (wgt'ed) examples reached here.  /* #neg=149 #pos=129 */


Results
   AUC ROC   = 0.5837
   AUC PR    = 0.673762
   CLL	      = -0.647394
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.167401
   F1        = 0.286792


Total learning time: 1.445 seconds
Total inference time: 2.066 seconds
AUC ROC: 0.5837


Results scoring model
   AUC ROC   = 0.567114
   AUC PR    = 0.626184
   CLL	      = -0.654388
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.134228
   F1        = 0.236686


Total scoring time: 0.907 seconds
Parameter learned model CLL: -0.654388


Structure after Parameter Learning
[['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 20], 'false': [8.315, 149, 129]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [7.3e-08, 0, 20], 'false': [8.315, 149, 129]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 20], 'false': [8.315, 149, 129]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [5.16e-08, 0, 20], 'false': [8.315, 149, 129]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [2.11e-08, 0, 20], 'false': [8.315, 149, 129]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [1.49e-08, 0, 20], 'false': [8.315, 149, 129]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 20], 'false': [8.315, 149, 129]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 20], 'false': [8.315, 149, 129]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 20], 'false': [8.315, 149, 129]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 20], 'false': [8.315, 149, 129]}]]
[{'': [-8.881784197001253e-17, 0.24870607111433507]}, {'': [2.6645352591003756e-16, 0.24870607111433046]}, {'': [-2.6645352591003756e-16, 0.24870607111433254]}, {'': [1.3322676295501878e-16, 0.24870607111433118]}, {'': [2.2204460492503132e-17, 0.24870607111432821]}, {'': [1.1102230246251566e-17, 0.24870607111433082]}, {'': [-2.7755575615628914e-17, 0.24870607111433302]}, {'': [-2.2204460492503132e-17, 0.2487060711143323]}, {'': [-3.3306690738754695e-17, 0.24870607111433138]}, {'': [0.0, 0.24870607111433132]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
1;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
2;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
3;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
4;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
5;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
6;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
7;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
8;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
9;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.8581489350995122;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.3318331456258246;  // std dev = 0.499, 247.000 (wgt'ed) examples reached here.  /* #neg=130 #pos=117 */
%   | | else if ( haswordvenue(B, F), haswordtitle(G, F) )
%   | | | then return 0.7152917922423694;  // std dev = 0.926, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | | else return 0.10814893509951219;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then return 0.23314893509951226;  // std dev = 0.484, 8.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=3 */
%   | | else return 0.024815601766178853;  // std dev = 0.373, 12.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=2 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.7194734122109543;  // std dev = 7.30e-08, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.2864628075416535;  // std dev = 0.499, 247.000 (wgt'ed) examples reached here.  /* #neg=130 #pos=117 */
%   | | else if ( haswordvenue(B, F), haswordtitle(G, F) )
%   | | | then return 0.6045267906174348;  // std dev = 0.926, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | | else return 0.09446743783575562;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then return 0.202334239218108;  // std dev = 0.484, 8.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=3 */
%   | | else return 0.021767884192405756;  // std dev = 0.373, 12.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=2 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.5553664367462846;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.238938268102872;  // std dev = 0.499, 247.000 (wgt'ed) examples reached here.  /* #neg=130 #pos=117 */
%   | | else if ( haswordvenue(B, F), haswordtitle(G, F) )
%   | | | then return 0.4749335700127619;  // std dev = 0.926, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | | else return 0.08165239320886175;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then return 0.17149281961528945;  // std dev = 0.484, 8.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=3 */
%   | | else return 0.019049872944810385;  // std dev = 0.373, 12.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=2 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.41751358415830986;  // std dev = 5.16e-08, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then return 0.46965799313472595;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else if ( haswordtitle(G, D) )
%   | | | then return 0.18879379560386306;  // std dev = 7.779, 243.000 (wgt'ed) examples reached here.  /* #neg=129 #pos=114 */
%   | | | else return 0.2535290729445531;  // std dev = 1.349, 11.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=7 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then return 0.14228146899184052;  // std dev = 0.484, 8.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=3 */
%   | | else return 0.01663677639228946;  // std dev = 0.373, 12.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=2 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.3207118471601496;  // std dev = 2.11e-08, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.3661190632982102;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | else if ( haswordvenue(A, F), haswordvenue(B, F) )
%   | | then if ( haswordtitle(G, F) )
%   | | | then return 0.14917936023056338;  // std dev = 7.779, 243.000 (wgt'ed) examples reached here.  /* #neg=129 #pos=114 */
%   | | | else return 0.1986678191100071;  // std dev = 1.337, 11.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=7 */
%   | | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | | then return 0.11591746118730598;  // std dev = 1.369, 8.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=3 */
%   | | | else return 0.014502864105143029;  // std dev = 1.291, 12.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=2 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.25517224256948945;  // std dev = 1.49e-08, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.11849241550932711;  // std dev = 0.498, 247.000 (wgt'ed) examples reached here.  /* #neg=130 #pos=117 */
%   | | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | | then return 0.06672589270124671;  // std dev = 1.242, 8.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=4 */
%   | | | else return 0.3900864023351655;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then return 0.09305316265470472;  // std dev = 0.484, 8.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=3 */
%   | | else return 0.01262239661487463;  // std dev = 0.373, 12.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=2 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.2097577156325356;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   else if ( haswordvenue(B, D), haswordtitle(E, D) )
%   | then if ( haswordtitle(E, F), haswordvenue(A, F) )
%   | | then if ( title(G, E), venue(G, A) )
%   | | | then return 0.0866285858304989;  // std dev = 7.798, 245.000 (wgt'ed) examples reached here.  /* #neg=130 #pos=115 */
%   | | | else return 0.2666843999886624;  // std dev = 1.260, 8.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=6 */
%   | | else return 0.06920816107739308;  // std dev = 0.353, 15.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=5 */
%   | else if ( haswordvenue(A, H), haswordvenue(B, H) )
%   | | then return -0.019569380908914802;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | else return 0.03217160345564124;  // std dev = 1.155, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.17709649774527744;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.22548659897294243;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | else if ( haswordvenue(A, F), haswordvenue(B, F) )
%   | | then if ( haswordtitle(G, F) )
%   | | | then return 0.06738304568840936;  // std dev = 7.774, 243.000 (wgt'ed) examples reached here.  /* #neg=129 #pos=114 */
%   | | | else return 0.09612208527275264;  // std dev = 1.290, 11.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=7 */
%   | | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | | then return 0.05400231004864753;  // std dev = 1.361, 8.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=3 */
%   | | | else return 0.0016542929912290265;  // std dev = 1.291, 12.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=2 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.1527438580936708;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   else if ( haswordvenue(B, D), haswordtitle(E, D) )
%   | then if ( haswordvenue(A, D) )
%   | | then return 0.05300943489829645;  // std dev = 0.498, 247.000 (wgt'ed) examples reached here.  /* #neg=130 #pos=117 */
%   | | else if ( title(F, E), venue(F, A) )
%   | | | then return 0.07618082610903597;  // std dev = 1.548, 18.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=7 */
%   | | | else return -0.03942588856263104;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else if ( haswordvenue(A, G), haswordvenue(B, G) )
%   | | then return -0.03490578741216162;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | else return 0.01373058318465753;  // std dev = 1.155, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.13400703000801117;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.04006226233053046;  // std dev = 0.498, 247.000 (wgt'ed) examples reached here.  /* #neg=130 #pos=117 */
%   | | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | | then return 0.009177958029811362;  // std dev = 1.225, 8.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=4 */
%   | | | else return 0.2537811728441014;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | then return 0.007616866725204964;  // std dev = 0.396, 14.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=3 */
%   | | else return 0.010737407109551678;  // std dev = 1.155, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */


Results
   AUC ROC   = 0.627594
   AUC PR    = 0.698474
   CLL	      = -0.641892
   Precision = 0.871698 at threshold = 0.5
   Recall    = 0.203524
   F1        = 0.33


Total learning time: 18.353 seconds
Total inference time: 12.171 seconds
AUC ROC: 0.627594


Results scoring model
   AUC ROC   = 0.626931
   AUC PR    = 0.679423
   CLL	      = -0.634325
   Precision = 0.935484 at threshold = 0.5
   Recall    = 0.194631
   F1        = 0.322222


Total scoring time: 1.293 seconds
Refined model CLL: -0.634325


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.627594
   AUC PR    = 0.698474
   CLL	      = -0.641892
   Precision = 0.871698 at threshold = 0.5
   Recall    = 0.203524
   F1        = 0.33


Total learning time: 21.998 seconds
Total inference time: 12.171 seconds
AUC ROC: 0.627594
Total revision time: 21.998
Best scored revision CLL: -0.634325


Dataset: 3_imdb_cora, Fold: 4, Type: Transfer (trRDN-B), Time: 00:16:04
{'AUC ROC': 0.627594, 'AUC PR': 0.698474, 'CLL': -0.641892, 'Precision': [0.871698, 0.5], 'Recall': 0.203524, 'F1': 0.33, 'Learning time': 21.998, 'Inference time': 12.171, 'parameter_0.2': {'AUC ROC': 0.5837, 'AUC PR': 0.673762, 'CLL': -0.647394, 'Precision': [1.0, 0.5], 'Recall': 0.167401, 'F1': 0.286792, 'Learning time': 1.445, 'Inference time': 2.066}}


Amount of data: 0.4
******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- actor(A), director(B).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.8581489350995116;  // std dev = 2.46e-07, 39.000 (wgt'ed) examples reached here.  /* #pos=39 */
%   else return 0.3231399584388256;  // std dev = 11.771, 557.000 (wgt'ed) examples reached here.  /* #neg=298 #pos=259 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.719473412210955;  // std dev = 0.000, 39.000 (wgt'ed) examples reached here.  /* #pos=39 */
%   else return 0.27908886334407995;  // std dev = 11.771, 557.000 (wgt'ed) examples reached here.  /* #neg=298 #pos=259 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.5553664367462842;  // std dev = 1.33e-07, 39.000 (wgt'ed) examples reached here.  /* #pos=39 */
%   else return 0.23311907455636122;  // std dev = 11.771, 557.000 (wgt'ed) examples reached here.  /* #neg=298 #pos=259 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.4175135841583102;  // std dev = 0.000, 39.000 (wgt'ed) examples reached here.  /* #pos=39 */
%   else return 0.18904328963745615;  // std dev = 11.771, 557.000 (wgt'ed) examples reached here.  /* #neg=298 #pos=259 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.32071184716014944;  // std dev = 2.98e-08, 39.000 (wgt'ed) examples reached here.  /* #pos=39 */
%   else return 0.14972396540191432;  // std dev = 11.771, 557.000 (wgt'ed) examples reached here.  /* #neg=298 #pos=259 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.2551722425694896;  // std dev = 0.000, 39.000 (wgt'ed) examples reached here.  /* #pos=39 */
%   else return 0.11654680286654745;  // std dev = 11.771, 557.000 (wgt'ed) examples reached here.  /* #neg=298 #pos=259 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.2097577156325354;  // std dev = 6.14e-08, 39.000 (wgt'ed) examples reached here.  /* #pos=39 */
%   else return 0.08964230746449628;  // std dev = 11.771, 557.000 (wgt'ed) examples reached here.  /* #neg=298 #pos=259 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.17709649774527753;  // std dev = 0.000, 39.000 (wgt'ed) examples reached here.  /* #pos=39 */
%   else return 0.06840146375733161;  // std dev = 11.771, 557.000 (wgt'ed) examples reached here.  /* #neg=298 #pos=259 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.1527438580936709;  // std dev = 3.94e-08, 39.000 (wgt'ed) examples reached here.  /* #pos=39 */
%   else return 0.05192242523380395;  // std dev = 11.771, 557.000 (wgt'ed) examples reached here.  /* #neg=298 #pos=259 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.1340070300080111;  // std dev = 1.49e-08, 39.000 (wgt'ed) examples reached here.  /* #pos=39 */
%   else return 0.039279976315396425;  // std dev = 11.771, 557.000 (wgt'ed) examples reached here.  /* #neg=298 #pos=259 */


Results
   AUC ROC   = 0.5837
   AUC PR    = 0.673762
   CLL	      = -0.647214
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.167401
   F1        = 0.286792


Total learning time: 1.707 seconds
Total inference time: 1.961 seconds
AUC ROC: 0.5837


Results scoring model
   AUC ROC   = 0.565436
   AUC PR    = 0.623792
   CLL	      = -0.655467
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.130872
   F1        = 0.231454


Total scoring time: 1.01 seconds
Parameter learned model CLL: -0.655467


Structure after Parameter Learning
[['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [2.46e-07, 0, 39], 'false': [11.771, 298, 259]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 39], 'false': [11.771, 298, 259]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [1.33e-07, 0, 39], 'false': [11.771, 298, 259]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 39], 'false': [11.771, 298, 259]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [2.98e-08, 0, 39], 'false': [11.771, 298, 259]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 39], 'false': [11.771, 298, 259]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [6.14e-08, 0, 39], 'false': [11.771, 298, 259]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 39], 'false': [11.771, 298, 259]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [3.94e-08, 0, 39], 'false': [11.771, 298, 259]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [1.49e-08, 0, 39], 'false': [11.771, 298, 259]}]]
[{'': [1.548618783066885e-15, 0.24877437155317453]}, {'': [-9.109522253334617e-16, 0.2487743715531682]}, {'': [4.554761126667308e-16, 0.24877437155316606]}, {'': [-3.188332788667116e-16, 0.2487743715531704]}, {'': [2.2773805633336544e-17, 0.24877437155317111]}, {'': [-1.1386902816668272e-17, 0.24877437155317217]}, {'': [9.678867394168032e-17, 0.24877437155317314]}, {'': [-6.832141690000964e-17, 0.24877437155316814]}, {'': [3.985415985833895e-17, 0.24877437155317278]}, {'': [5.693451408334136e-18, 0.24877437155317428]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
1;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
2;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
3;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
4;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
5;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
6;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
7;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
8;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
9;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.8581489350995116;  // std dev = 2.46e-07, 39.000 (wgt'ed) examples reached here.  /* #pos=39 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.33463155268642003;  // std dev = 0.499, 489.000 (wgt'ed) examples reached here.  /* #neg=256 #pos=233 */
%   | | else if ( haswordvenue(B, F), haswordtitle(G, F) )
%   | | | then return 0.5640312880406888;  // std dev = 1.879, 17.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=12 */
%   | | | else return 0.10814893509951218;  // std dev = 1.225, 8.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return 0.4581489350995122;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.17064893509951234;  // std dev = 1.854, 16.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=5 */
%   | | else return 0.0399671169176941;  // std dev = 0.386, 22.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=4 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.719473412210955;  // std dev = 0.000, 39.000 (wgt'ed) examples reached here.  /* #pos=39 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.2888350094897712;  // std dev = 0.499, 489.000 (wgt'ed) examples reached here.  /* #neg=256 #pos=233 */
%   | | else if ( haswordvenue(B, F), haswordtitle(G, F) )
%   | | | then return 0.48074388375574334;  // std dev = 1.879, 17.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=12 */
%   | | | else return 0.09446743783575556;  // std dev = 1.225, 8.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return 0.3927941835770488;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.1485807217799291;  // std dev = 1.854, 16.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=5 */
%   | | else return 0.03503196034273708;  // std dev = 0.386, 22.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=4 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.5553664367462842;  // std dev = 1.33e-07, 39.000 (wgt'ed) examples reached here.  /* #pos=39 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.24080655187272437;  // std dev = 0.499, 489.000 (wgt'ed) examples reached here.  /* #neg=256 #pos=233 */
%   | | else if ( haswordvenue(B, F), haswordtitle(G, F) )
%   | | | then return 0.386198448632422;  // std dev = 1.879, 17.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=12 */
%   | | | else return 0.08165239320886175;  // std dev = 1.225, 8.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return 0.32092546969114216;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.12718890828850207;  // std dev = 1.854, 16.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=5 */
%   | | else return 0.030590047750322546;  // std dev = 0.386, 22.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=4 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.4175135841583102;  // std dev = 0.000, 39.000 (wgt'ed) examples reached here.  /* #pos=39 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.19471831832330655;  // std dev = 0.499, 489.000 (wgt'ed) examples reached here.  /* #neg=256 #pos=233 */
%   | | else if ( haswordvenue(B, F), haswordtitle(G, F) )
%   | | | then return 0.2971060494206917;  // std dev = 1.879, 17.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=12 */
%   | | | else return 0.06990902274840138;  // std dev = 1.225, 8.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return 0.25206564481433;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.10721453219719906;  // std dev = 1.854, 16.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=5 */
%   | | else return 0.026621534319001657;  // std dev = 0.386, 22.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=4 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.32071184716014944;  // std dev = 2.98e-08, 39.000 (wgt'ed) examples reached here.  /* #pos=39 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.1536989804147843;  // std dev = 0.499, 489.000 (wgt'ed) examples reached here.  /* #neg=256 #pos=233 */
%   | | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | | then return 0.10854151828507887;  // std dev = 1.957, 17.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=8 */
%   | | | else return 0.30439512370839905;  // std dev = 1.066, 8.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=6 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( title(J, I), venue(J, B) )
%   | | | then return 0.11880288245710242;  // std dev = 1.917, 17.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=6 */
%   | | | else return 0.09292386438161404;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else return 0.023099042092253906;  // std dev = 0.386, 22.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=4 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.2551722425694896;  // std dev = 0.000, 39.000 (wgt'ed) examples reached here.  /* #pos=39 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.11923021983759562;  // std dev = 0.499, 489.000 (wgt'ed) examples reached here.  /* #neg=256 #pos=233 */
%   | | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | | then return 0.08545611982115557;  // std dev = 1.957, 17.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=8 */
%   | | | else return 0.23161663363837653;  // std dev = 1.055, 8.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=6 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return 0.16904573332031797;  // std dev = 1.093, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.06788906752668211;  // std dev = 1.854, 16.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=5 */
%   | | else return 0.019990318999342168;  // std dev = 0.386, 22.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=4 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.2097577156325354;  // std dev = 6.14e-08, 39.000 (wgt'ed) examples reached here.  /* #pos=39 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.09141168537023384;  // std dev = 0.499, 489.000 (wgt'ed) examples reached here.  /* #neg=256 #pos=233 */
%   | | else if ( haswordvenue(B, F), haswordtitle(G, F) )
%   | | | then return 0.14101734718849382;  // std dev = 1.839, 17.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=12 */
%   | | | else return 0.01953377249655947;  // std dev = 1.239, 8.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return 0.12720251030083843;  // std dev = 1.093, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.05512842343200368;  // std dev = 1.854, 16.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=5 */
%   | | else return 0.017260476724991335;  // std dev = 0.386, 22.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=4 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.17709649774527753;  // std dev = 0.000, 39.000 (wgt'ed) examples reached here.  /* #pos=39 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.06955175519138902;  // std dev = 0.499, 489.000 (wgt'ed) examples reached here.  /* #neg=256 #pos=233 */
%   | | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | | then return 0.04503330156191247;  // std dev = 1.957, 17.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=8 */
%   | | | else return 0.14764719686593403;  // std dev = 1.038, 8.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=6 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( title(J, I), venue(J, B) )
%   | | | then return 0.07067526759751959;  // std dev = 1.904, 17.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=6 */
%   | | | else return -0.003276538393731321;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else return 0.014873773343812836;  // std dev = 0.386, 22.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=4 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.1527438580936709;  // std dev = 3.94e-08, 39.000 (wgt'ed) examples reached here.  /* #pos=39 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.052663753522767205;  // std dev = 0.499, 489.000 (wgt'ed) examples reached here.  /* #neg=256 #pos=233 */
%   | | else if ( haswordvenue(B, F), haswordtitle(G, F) )
%   | | | then return 0.08689794631019841;  // std dev = 1.832, 17.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=12 */
%   | | | else return 0.005165257943272938;  // std dev = 1.245, 8.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return 0.09255651199062265;  // std dev = 1.087, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.030360020112809;  // std dev = 1.854, 16.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=5 */
%   | | else return 0.012794958899231662;  // std dev = 0.386, 22.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=4 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.1340070300080111;  // std dev = 1.49e-08, 39.000 (wgt'ed) examples reached here.  /* #pos=39 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then return 0.06327202740109673;  // std dev = 1.225, 6.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | else if ( haswordtitle(G, D) )
%   | | | then return 0.039462503591573904;  // std dev = 10.976, 483.000 (wgt'ed) examples reached here.  /* #neg=253 #pos=230 */
%   | | | else return 0.04680165581716781;  // std dev = 2.220, 25.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=14 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( title(J, I), venue(J, B) )
%   | | | then return 0.049196808791693754;  // std dev = 1.899, 17.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=6 */
%   | | | else return -0.025574241457375968;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else return 0.010990232874512333;  // std dev = 0.386, 22.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=4 */


Results
   AUC ROC   = 0.608362
   AUC PR    = 0.681916
   CLL	      = -0.644416
   Precision = 0.832707 at threshold = 0.5
   Recall    = 0.195154
   F1        = 0.316203


Total learning time: 32.182 seconds
Total inference time: 6.207 seconds
AUC ROC: 0.608362


Results scoring model
   AUC ROC   = 0.611313
   AUC PR    = 0.658455
   CLL	      = -0.642003
   Precision = 0.885246 at threshold = 0.5
   Recall    = 0.181208
   F1        = 0.300836


Total scoring time: 1.221 seconds
Refined model CLL: -0.642003


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.608362
   AUC PR    = 0.681916
   CLL	      = -0.644416
   Precision = 0.832707 at threshold = 0.5
   Recall    = 0.195154
   F1        = 0.316203


Total learning time: 36.120000000000005 seconds
Total inference time: 6.207 seconds
AUC ROC: 0.608362
Total revision time: 36.120000000000005
Best scored revision CLL: -0.642003


Dataset: 3_imdb_cora, Fold: 4, Type: Transfer (trRDN-B), Time: 00:16:49
{'AUC ROC': 0.608362, 'AUC PR': 0.681916, 'CLL': -0.644416, 'Precision': [0.832707, 0.5], 'Recall': 0.195154, 'F1': 0.316203, 'Learning time': 36.120000000000005, 'Inference time': 6.207, 'parameter_0.4': {'AUC ROC': 0.5837, 'AUC PR': 0.673762, 'CLL': -0.647214, 'Precision': [1.0, 0.5], 'Recall': 0.167401, 'F1': 0.286792, 'Learning time': 1.707, 'Inference time': 1.961}}


Amount of data: 0.6
******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- actor(A), director(B).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.8581489350995127;  // std dev = 0.000, 69.000 (wgt'ed) examples reached here.  /* #pos=69 */
%   else return 0.31643188552272405;  // std dev = 14.329, 827.000 (wgt'ed) examples reached here.  /* #neg=448 #pos=379 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.7194734122109541;  // std dev = 1.69e-07, 69.000 (wgt'ed) examples reached here.  /* #pos=69 */
%   else return 0.2733938689215362;  // std dev = 14.329, 827.000 (wgt'ed) examples reached here.  /* #neg=448 #pos=379 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.5553664367462836;  // std dev = 2.06e-07, 69.000 (wgt'ed) examples reached here.  /* #pos=69 */
%   else return 0.2286127287611878;  // std dev = 14.329, 827.000 (wgt'ed) examples reached here.  /* #neg=448 #pos=379 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.4175135841583105;  // std dev = 0.000, 69.000 (wgt'ed) examples reached here.  /* #pos=69 */
%   else return 0.18570089592492744;  // std dev = 14.329, 827.000 (wgt'ed) examples reached here.  /* #neg=448 #pos=379 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.32071184716014994;  // std dev = 0.000, 69.000 (wgt'ed) examples reached here.  /* #pos=69 */
%   else return 0.14737128263598848;  // std dev = 14.329, 827.000 (wgt'ed) examples reached here.  /* #neg=448 #pos=379 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.25517224256948967;  // std dev = 0.000, 69.000 (wgt'ed) examples reached here.  /* #pos=69 */
%   else return 0.11495290822061208;  // std dev = 14.329, 827.000 (wgt'ed) examples reached here.  /* #neg=448 #pos=379 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.2097577156325357;  // std dev = 0.000, 69.000 (wgt'ed) examples reached here.  /* #pos=69 */
%   else return 0.0885905001699253;  // std dev = 14.329, 827.000 (wgt'ed) examples reached here.  /* #neg=448 #pos=379 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.17709649774527722;  // std dev = 0.000, 69.000 (wgt'ed) examples reached here.  /* #pos=69 */
%   else return 0.0677198641563565;  // std dev = 14.329, 827.000 (wgt'ed) examples reached here.  /* #neg=448 #pos=379 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.15274385809367064;  // std dev = 5.96e-08, 69.000 (wgt'ed) examples reached here.  /* #pos=69 */
%   else return 0.05148684029802516;  // std dev = 14.329, 827.000 (wgt'ed) examples reached here.  /* #neg=448 #pos=379 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.13400703000801092;  // std dev = 4.94e-08, 69.000 (wgt'ed) examples reached here.  /* #pos=69 */
%   else return 0.03900525546427442;  // std dev = 14.329, 827.000 (wgt'ed) examples reached here.  /* #neg=448 #pos=379 */


Results
   AUC ROC   = 0.5837
   AUC PR    = 0.673762
   CLL	      = -0.64854
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.167401
   F1        = 0.286792


Total learning time: 2.117 seconds
Total inference time: 2.054 seconds
AUC ROC: 0.5837


Results scoring model
   AUC ROC   = 0.577009
   AUC PR    = 0.639752
   CLL	      = -0.647956
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.154018
   F1        = 0.266925


Total scoring time: 1.113 seconds
Parameter learned model CLL: -0.647956


Structure after Parameter Learning
[['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 69], 'false': [14.329, 448, 379]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [1.69e-07, 0, 69], 'false': [14.329, 448, 379]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [2.06e-07, 0, 69], 'false': [14.329, 448, 379]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 69], 'false': [14.329, 448, 379]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 69], 'false': [14.329, 448, 379]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 69], 'false': [14.329, 448, 379]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 69], 'false': [14.329, 448, 379]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 69], 'false': [14.329, 448, 379]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [5.96e-08, 0, 69], 'false': [14.329, 448, 379]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [4.94e-08, 0, 69], 'false': [14.329, 448, 379]}]]
[{'': [-1.1327492888929132e-15, 0.24825968777459562]}, {'': [4.1190883232469576e-16, 0.24825968777461635]}, {'': [6.178632484870436e-16, 0.24825968777461271]}, {'': [-1.0297720808117394e-16, 0.24825968777460153]}, {'': [-3.2180377525366856e-16, 0.24825968777459953]}, {'': [-2.5744302020293485e-17, 0.24825968777461405]}, {'': [-7.723290606088045e-17, 0.24825968777460847]}, {'': [0.0, 0.24825968777461122]}, {'': [5.148860404058697e-17, 0.24825968777460944]}, {'': [3.539841527790354e-17, 0.24825968777460156]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
1;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
2;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
3;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
4;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
5;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
6;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
7;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
8;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
9;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.8581489350995127;  // std dev = 0.000, 69.000 (wgt'ed) examples reached here.  /* #pos=69 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.3244487975479258;  // std dev = 0.499, 727.000 (wgt'ed) examples reached here.  /* #neg=388 #pos=339 */
%   | | else if ( haswordvenue(B, F), haswordtitle(G, F) )
%   | | | then return 0.5119950889456661;  // std dev = 2.426, 26.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=17 */
%   | | | else return 0.274815601766179;  // std dev = 1.708, 12.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=5 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return 0.2581489350995123;  // std dev = 1.549, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | | else return 0.14981560176617903;  // std dev = 2.227, 24.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=7 */
%   | | else return 0.10814893509951237;  // std dev = 0.433, 28.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=7 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.7194734122109541;  // std dev = 1.69e-07, 69.000 (wgt'ed) examples reached here.  /* #pos=69 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.2801995379710868;  // std dev = 0.499, 727.000 (wgt'ed) examples reached here.  /* #neg=388 #pos=339 */
%   | | else if ( haswordvenue(B, F), haswordtitle(G, F) )
%   | | | then return 0.43765546208851;  // std dev = 2.426, 26.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=17 */
%   | | | else return 0.23796730798362134;  // std dev = 1.708, 12.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=5 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return 0.22373365448410584;  // std dev = 1.549, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | | else return 0.13058263748064444;  // std dev = 2.227, 24.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=7 */
%   | | else return 0.09446743783575565;  // std dev = 0.433, 28.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=7 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.5553664367462836;  // std dev = 2.06e-07, 69.000 (wgt'ed) examples reached here.  /* #pos=69 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.233996700955751;  // std dev = 0.499, 727.000 (wgt'ed) examples reached here.  /* #neg=388 #pos=339 */
%   | | else if ( haswordvenue(B, F), haswordtitle(G, F) )
%   | | | then return 0.35448659607743116;  // std dev = 2.426, 26.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=17 */
%   | | | else return 0.2003424470315364;  // std dev = 1.708, 12.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=5 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return 0.18886832215749735;  // std dev = 1.549, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | | else return 0.11214649702022383;  // std dev = 2.227, 24.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=7 */
%   | | else return 0.08165239320886174;  // std dev = 0.433, 28.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=7 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.4175135841583105;  // std dev = 0.000, 69.000 (wgt'ed) examples reached here.  /* #pos=69 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.18969287181188096;  // std dev = 0.499, 727.000 (wgt'ed) examples reached here.  /* #neg=388 #pos=339 */
%   | | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | | then return 0.19706129862726787;  // std dev = 2.481, 25.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=13 */
%   | | | else return 0.32351014445358633;  // std dev = 1.615, 13.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=9 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return 0.1557002943717436;  // std dev = 1.549, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | | else return 0.09503092830334782;  // std dev = 2.227, 24.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=7 */
%   | | else return 0.06990902274840138;  // std dev = 0.433, 28.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=7 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.32071184716014994;  // std dev = 0.000, 69.000 (wgt'ed) examples reached here.  /* #pos=69 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.15018019027932375;  // std dev = 0.499, 727.000 (wgt'ed) examples reached here.  /* #neg=388 #pos=339 */
%   | | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | | then return 0.15341845843735602;  // std dev = 2.481, 25.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=13 */
%   | | | else return 0.24598967068312586;  // std dev = 1.611, 13.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=9 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return 0.12582628229372092;  // std dev = 1.549, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | | else return 0.07958521881531402;  // std dev = 2.227, 24.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=7 */
%   | | else return 0.05935463536544732;  // std dev = 0.433, 28.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=7 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.25517224256948967;  // std dev = 0.000, 69.000 (wgt'ed) examples reached here.  /* #pos=69 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then return 0.02555550884697312;  // std dev = 0.484, 8.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=3 */
%   | | else if ( haswordtitle(G, D) )
%   | | | then return 0.11787122511956985;  // std dev = 13.378, 719.000 (wgt'ed) examples reached here.  /* #neg=383 #pos=336 */
%   | | | else return 0.14084069020475107;  // std dev = 2.964, 38.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=22 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return 0.10008916917880555;  // std dev = 1.549, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | | else return 0.06598176641212349;  // std dev = 2.227, 24.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=7 */
%   | | else return 0.05002771289938778;  // std dev = 0.433, 28.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=7 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.2097577156325357;  // std dev = 0.000, 69.000 (wgt'ed) examples reached here.  /* #pos=69 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.08984300771806107;  // std dev = 0.499, 727.000 (wgt'ed) examples reached here.  /* #neg=388 #pos=339 */
%   | | else if ( haswordvenue(B, F), haswordtitle(G, F) )
%   | | | then return 0.12980464115076049;  // std dev = 2.404, 26.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=17 */
%   | | | else return 0.057005051337461976;  // std dev = 1.721, 12.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=5 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return 0.07866279780602584;  // std dev = 1.549, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | | else return 0.05424316398865751;  // std dev = 2.227, 24.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=7 */
%   | | else return 0.04190386852605742;  // std dev = 0.433, 28.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=7 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.17709649774527722;  // std dev = 0.000, 69.000 (wgt'ed) examples reached here.  /* #pos=69 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.06853176912491651;  // std dev = 0.499, 727.000 (wgt'ed) examples reached here.  /* #neg=388 #pos=339 */
%   | | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | | then return 0.06033511408408726;  // std dev = 2.484, 25.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=13 */
%   | | | else return 0.1197265447254806;  // std dev = 1.602, 13.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=9 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return 0.06127260860742234;  // std dev = 1.549, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | | else return 0.04428282192995895;  // std dev = 2.227, 24.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=7 */
%   | | else return 0.03491396367325354;  // std dev = 0.433, 28.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=7 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.15274385809367064;  // std dev = 5.96e-08, 69.000 (wgt'ed) examples reached here.  /* #pos=69 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.05200612650618304;  // std dev = 0.499, 727.000 (wgt'ed) examples reached here.  /* #neg=388 #pos=339 */
%   | | else if ( haswordvenue(B, F), haswordtitle(G, F) )
%   | | | then return 0.07633425081038994;  // std dev = 2.400, 26.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=17 */
%   | | | else return 0.028364311088915958;  // std dev = 1.725, 12.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=5 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return 0.04741549148811429;  // std dev = 1.549, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | | else return 0.035946124626112956;  // std dev = 2.227, 24.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=7 */
%   | | else return 0.028961035597951046;  // std dev = 0.433, 28.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=7 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.13400703000801092;  // std dev = 4.94e-08, 69.000 (wgt'ed) examples reached here.  /* #pos=69 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, B) )
%   | | then if ( samebib(F, G), venue(G, A) )
%   | | | then return 0.5727866503211537;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return -0.3942950671625207;  // std dev = 0.147, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.23945331698782038;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else if ( haswordvenue(A, H), haswordvenue(B, H) )
%   | | then if ( haswordtitle(I, H) )
%   | | | then return 0.0381209883977701;  // std dev = 13.345, 716.000 (wgt'ed) examples reached here.  /* #neg=383 #pos=333 */
%   | | | else return 0.04645083793707873;  // std dev = 2.958, 38.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=22 */
%   | | else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | | | then return 0.040147707469477545;  // std dev = 2.696, 33.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=11 */
%   | | | else return 0.02393424292260471;  // std dev = 2.291, 28.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=7 */


Results
   AUC ROC   = 0.634931
   AUC PR    = 0.7036
   CLL	      = -0.637907
   Precision = 0.975664 at threshold = 0.5
   Recall    = 0.194273
   F1        = 0.324026


Total learning time: 40.493 seconds
Total inference time: 6.406 seconds
AUC ROC: 0.634931


Results scoring model
   AUC ROC   = 0.617001
   AUC PR    = 0.670054
   CLL	      = -0.638701
   Precision = 0.909091 at threshold = 0.5
   Recall    = 0.200893
   F1        = 0.329068


Total scoring time: 1.484 seconds
Refined model CLL: -0.638701


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.634931
   AUC PR    = 0.7036
   CLL	      = -0.637907
   Precision = 0.975664 at threshold = 0.5
   Recall    = 0.194273
   F1        = 0.324026


Total learning time: 45.207 seconds
Total inference time: 6.406 seconds
AUC ROC: 0.634931
Total revision time: 45.207
Best scored revision CLL: -0.638701


Dataset: 3_imdb_cora, Fold: 4, Type: Transfer (trRDN-B), Time: 00:17:43
{'AUC ROC': 0.634931, 'AUC PR': 0.7036, 'CLL': -0.637907, 'Precision': [0.975664, 0.5], 'Recall': 0.194273, 'F1': 0.324026, 'Learning time': 45.207, 'Inference time': 6.406, 'parameter_0.6': {'AUC ROC': 0.5837, 'AUC PR': 0.673762, 'CLL': -0.64854, 'Precision': [1.0, 0.5], 'Recall': 0.167401, 'F1': 0.286792, 'Learning time': 2.117, 'Inference time': 2.054}}


Amount of data: 0.8
******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- actor(A), director(B).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.8581489350995117;  // std dev = 1.69e-07, 91.000 (wgt'ed) examples reached here.  /* #pos=91 */
%   else return 0.31689780182661537;  // std dev = 16.549, 1,103.000 (wgt'ed) examples reached here.  /* #neg=597 #pos=506 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.7194734122109537;  // std dev = 2.80e-07, 91.000 (wgt'ed) examples reached here.  /* #pos=91 */
%   else return 0.27378955894904194;  // std dev = 16.549, 1,103.000 (wgt'ed) examples reached here.  /* #neg=597 #pos=506 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.5553664367462835;  // std dev = 3.95e-07, 91.000 (wgt'ed) examples reached here.  /* #pos=91 */
%   else return 0.22892617260847145;  // std dev = 16.549, 1,103.000 (wgt'ed) examples reached here.  /* #neg=597 #pos=506 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.41751358415831;  // std dev = 1.93e-07, 91.000 (wgt'ed) examples reached here.  /* #pos=91 */
%   else return 0.18593375976139856;  // std dev = 16.549, 1,103.000 (wgt'ed) examples reached here.  /* #neg=597 #pos=506 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.3207118471601504;  // std dev = 0.000, 91.000 (wgt'ed) examples reached here.  /* #pos=91 */
%   else return 0.14753547927924607;  // std dev = 16.549, 1,103.000 (wgt'ed) examples reached here.  /* #neg=597 #pos=506 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.2551722425694897;  // std dev = 0.000, 91.000 (wgt'ed) examples reached here.  /* #pos=91 */
%   else return 0.11506429781604399;  // std dev = 16.549, 1,103.000 (wgt'ed) examples reached here.  /* #neg=597 #pos=506 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.20975771563253576;  // std dev = 1.07e-07, 91.000 (wgt'ed) examples reached here.  /* #pos=91 */
%   else return 0.08866404135775025;  // std dev = 16.549, 1,103.000 (wgt'ed) examples reached here.  /* #neg=597 #pos=506 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.17709649774527714;  // std dev = 9.42e-08, 91.000 (wgt'ed) examples reached here.  /* #pos=91 */
%   else return 0.06776748287305834;  // std dev = 16.549, 1,103.000 (wgt'ed) examples reached here.  /* #neg=597 #pos=506 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.15274385809367125;  // std dev = 0.000, 91.000 (wgt'ed) examples reached here.  /* #pos=91 */
%   else return 0.051517195438347735;  // std dev = 16.549, 1,103.000 (wgt'ed) examples reached here.  /* #neg=597 #pos=506 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.1340070300080109;  // std dev = 6.14e-08, 91.000 (wgt'ed) examples reached here.  /* #pos=91 */
%   else return 0.039024309002410794;  // std dev = 16.549, 1,103.000 (wgt'ed) examples reached here.  /* #neg=597 #pos=506 */


Results
   AUC ROC   = 0.5837
   AUC PR    = 0.673762
   CLL	      = -0.648443
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.167401
   F1        = 0.286792


Total learning time: 2.229 seconds
Total inference time: 1.967 seconds
AUC ROC: 0.5837


Results scoring model
   AUC ROC   = 0.576214
   AUC PR    = 0.638681
   CLL	      = -0.648477
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.152429
   F1        = 0.264535


Total scoring time: 1.102 seconds
Parameter learned model CLL: -0.648477


Structure after Parameter Learning
[['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [1.69e-07, 0, 91], 'false': [16.549, 597, 506]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [2.8e-07, 0, 91], 'false': [16.549, 597, 506]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [3.95e-07, 0, 91], 'false': [16.549, 597, 506]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [1.93e-07, 0, 91], 'false': [16.549, 597, 506]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 91], 'false': [16.549, 597, 506]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 91], 'false': [16.549, 597, 506]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [1.07e-07, 0, 91], 'false': [16.549, 597, 506]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [9.42e-08, 0, 91], 'false': [16.549, 597, 506]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 91], 'false': [16.549, 597, 506]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [6.14e-08, 0, 91], 'false': [16.549, 597, 506]}]]
[{'': [3.123264772571869e-16, 0.24829834400369205]}, {'': [8.58897812457264e-16, 0.2482983440036902]}, {'': [1.717795624914528e-15, 0.2482983440037105]}, {'': [4.099285014000578e-16, 0.2482983440037039]}, {'': [-3.5136728691433524e-16, 0.2482983440036962]}, {'': [-3.9040809657148365e-17, 0.24829834400369438]}, {'': [1.2688263138573217e-16, 0.24829834400370823]}, {'': [9.76020241428709e-17, 0.24829834400370127]}, {'': [-8.296172052144027e-17, 0.24829834400369663]}, {'': [4.1480860260720135e-17, 0.24829834400370324]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
1;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
2;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
3;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
4;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
5;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
6;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
7;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
8;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
9;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.8581489350995117;  // std dev = 1.69e-07, 91.000 (wgt'ed) examples reached here.  /* #pos=91 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.3246782862838536;  // std dev = 0.499, 971.000 (wgt'ed) examples reached here.  /* #neg=518 #pos=453 */
%   | | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | | then return 0.34201990284144784;  // std dev = 2.782, 31.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=15 */
%   | | | else return 0.6081489350995123;  // std dev = 1.732, 16.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=12 */
%   | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(A, J) )
%   | | | then return 0.31968739663797385;  // std dev = 1.797, 13.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=6 */
%   | | | else return 0.1402002171507944;  // std dev = 2.810, 39.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=11 */
%   | | else return 0.1308762078267851;  // std dev = 0.445, 33.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=9 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.7194734122109537;  // std dev = 2.80e-07, 91.000 (wgt'ed) examples reached here.  /* #pos=91 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.2803942642340676;  // std dev = 0.499, 971.000 (wgt'ed) examples reached here.  /* #neg=518 #pos=453 */
%   | | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | | then return 0.29509450923344677;  // std dev = 2.782, 31.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=15 */
%   | | | else return 0.5170719622367218;  // std dev = 1.732, 16.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=12 */
%   | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | then if ( title(J, I), venue(J, A) )
%   | | | then return 0.1479100580329572;  // std dev = 3.097, 45.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=14 */
%   | | | else return 0.24319122152618405;  // std dev = 1.309, 7.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=3 */
%   | | else return 0.1141862376674665;  // std dev = 0.445, 33.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=9 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.5553664367462835;  // std dev = 3.95e-07, 91.000 (wgt'ed) examples reached here.  /* #pos=91 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.23415052727521649;  // std dev = 0.499, 971.000 (wgt'ed) examples reached here.  /* #neg=518 #pos=453 */
%   | | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | | then return 0.24572761349189018;  // std dev = 2.782, 31.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=15 */
%   | | | else return 0.41257245288266015;  // std dev = 1.732, 16.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=12 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return 0.24406649687120582;  // std dev = 1.800, 13.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=6 */
%   | | | else return 0.09835299714676571;  // std dev = 2.558, 33.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=9 */
%   | | else return 0.10139237717686476;  // std dev = 0.450, 39.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=11 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.41751358415831;  // std dev = 1.93e-07, 91.000 (wgt'ed) examples reached here.  /* #pos=91 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.18980668211018464;  // std dev = 0.499, 971.000 (wgt'ed) examples reached here.  /* #neg=518 #pos=453 */
%   | | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | | then return 0.19833363740893878;  // std dev = 2.782, 31.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=15 */
%   | | | else return 0.31517865761850666;  // std dev = 1.732, 16.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=12 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return 0.19971121794951555;  // std dev = 1.800, 13.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=6 */
%   | | | else return 0.083737008556944;  // std dev = 2.558, 33.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=9 */
%   | | else return 0.08589565861329963;  // std dev = 0.450, 39.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=11 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.3207118471601504;  // std dev = 0.000, 91.000 (wgt'ed) examples reached here.  /* #pos=91 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.15026008995617646;  // std dev = 0.499, 971.000 (wgt'ed) examples reached here.  /* #neg=518 #pos=453 */
%   | | else if ( haswordvenue(B, F), haswordtitle(G, F) )
%   | | | then return 0.21035370913413626;  // std dev = 2.608, 32.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=20 */
%   | | | else return 0.1266422101030395;  // std dev = 1.985, 15.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=7 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( title(J, I), venue(J, B) )
%   | | | then return 0.07871390354200253;  // std dev = 2.876, 40.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=12 */
%   | | | else return 0.20860630435818653;  // std dev = 1.225, 6.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | else return 0.07199757091278901;  // std dev = 0.450, 39.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=11 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.2551722425694897;  // std dev = 0.000, 91.000 (wgt'ed) examples reached here.  /* #pos=91 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.11690939508578724;  // std dev = 0.499, 971.000 (wgt'ed) examples reached here.  /* #neg=518 #pos=453 */
%   | | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | | then return 0.1170881753812512;  // std dev = 2.785, 31.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=15 */
%   | | | else return 0.18583825150778827;  // std dev = 1.723, 16.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=12 */
%   | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(A, J) )
%   | | | then return 0.12941696259071303;  // std dev = 1.797, 13.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=6 */
%   | | | else return 0.059801602995988766;  // std dev = 2.810, 39.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=11 */
%   | | else return 0.05757330242331917;  // std dev = 0.445, 33.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=9 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.20975771563253576;  // std dev = 1.07e-07, 91.000 (wgt'ed) examples reached here.  /* #pos=91 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then return 0.2066854394761688;  // std dev = 0.493, 12.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=7 */
%   | | else if ( haswordtitle(G, D) )
%   | | | then return 0.08841988507923093;  // std dev = 15.446, 959.000 (wgt'ed) examples reached here.  /* #neg=513 #pos=446 */
%   | | | else return 0.10697315751136274;  // std dev = 3.279, 47.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=27 */
%   | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(A, J) )
%   | | | then return 0.10011636893022033;  // std dev = 1.796, 13.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=6 */
%   | | | else return 0.04929319914128898;  // std dev = 2.810, 39.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=11 */
%   | | else return 0.047691997438151314;  // std dev = 0.445, 33.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=9 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.17709649774527714;  // std dev = 9.42e-08, 91.000 (wgt'ed) examples reached here.  /* #pos=91 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.06855281000320688;  // std dev = 0.499, 971.000 (wgt'ed) examples reached here.  /* #neg=518 #pos=453 */
%   | | else if ( haswordvenue(B, F), haswordtitle(G, F) )
%   | | | then return 0.09897759271497986;  // std dev = 2.599, 32.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=20 */
%   | | | else return 0.04387398296592402;  // std dev = 1.992, 15.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=7 */
%   | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(A, J) )
%   | | | then return 0.07670628561682258;  // std dev = 1.796, 13.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=6 */
%   | | | else return 0.04037465291811959;  // std dev = 2.810, 39.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=11 */
%   | | else return 0.039265880338710056;  // std dev = 0.445, 33.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=9 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.15274385809367125;  // std dev = 0.000, 91.000 (wgt'ed) examples reached here.  /* #pos=91 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.052019694660562735;  // std dev = 0.499, 971.000 (wgt'ed) examples reached here.  /* #neg=518 #pos=453 */
%   | | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | | then return 0.045511569071817685;  // std dev = 2.787, 31.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=15 */
%   | | | else return 0.09383037705245056;  // std dev = 1.718, 16.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=12 */
%   | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(A, J) )
%   | | | then return 0.058395638525591896;  // std dev = 1.796, 13.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=6 */
%   | | | else return 0.03289826820870361;  // std dev = 2.810, 39.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=11 */
%   | | else return 0.03216557080529566;  // std dev = 0.445, 33.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=9 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.1340070300080109;  // std dev = 6.14e-08, 91.000 (wgt'ed) examples reached here.  /* #pos=91 */
%   else if ( haswordvenue(B, D), haswordtitle(E, D) )
%   | then if ( haswordtitle(E, F), haswordvenue(A, F) )
%   | | then if ( title(G, E), venue(G, A) )
%   | | | then return 0.03761407336345555;  // std dev = 15.499, 966.000 (wgt'ed) examples reached here.  /* #neg=517 #pos=449 */
%   | | | else return 0.07243036375512098;  // std dev = 2.967, 35.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=18 */
%   | | else return 0.05290372092319187;  // std dev = 0.439, 54.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=23 */
%   | else if ( haswordvenue(A, H), haswordvenue(B, H) )
%   | | then return 0.021422352580113276;  // std dev = 0.515, 15.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=7 */
%   | | else return 0.026240249932854755;  // std dev = 0.445, 33.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=9 */


Results
   AUC ROC   = 0.622284
   AUC PR    = 0.693637
   CLL	      = -0.640937
   Precision = 0.964623 at threshold = 0.5
   Recall    = 0.180176
   F1        = 0.303638


Total learning time: 65.543 seconds
Total inference time: 14.798 seconds
AUC ROC: 0.622284


Results scoring model
   AUC ROC   = 0.607161
   AUC PR    = 0.662639
   CLL	      = -0.641692
   Precision = 0.962617 at threshold = 0.5
   Recall    = 0.172529
   F1        = 0.292614


Total scoring time: 1.991 seconds
Refined model CLL: -0.641692


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.622284
   AUC PR    = 0.693637
   CLL	      = -0.640937
   Precision = 0.964623 at threshold = 0.5
   Recall    = 0.180176
   F1        = 0.303638


Total learning time: 70.86500000000001 seconds
Total inference time: 14.798 seconds
AUC ROC: 0.622284
Total revision time: 70.86500000000001
Best scored revision CLL: -0.641692


Dataset: 3_imdb_cora, Fold: 4, Type: Transfer (trRDN-B), Time: 00:19:12
{'AUC ROC': 0.622284, 'AUC PR': 0.693637, 'CLL': -0.640937, 'Precision': [0.964623, 0.5], 'Recall': 0.180176, 'F1': 0.303638, 'Learning time': 70.86500000000001, 'Inference time': 14.798, 'parameter_0.8': {'AUC ROC': 0.5837, 'AUC PR': 0.673762, 'CLL': -0.648443, 'Precision': [1.0, 0.5], 'Recall': 0.167401, 'F1': 0.286792, 'Learning time': 2.229, 'Inference time': 1.967}}


Amount of data: 1.0
******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- actor(A), director(B).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.8581489350995107;  // std dev = 6.19e-07, 115.000 (wgt'ed) examples reached here.  /* #pos=115 */
%   else return 0.31645205330110276;  // std dev = 18.503, 1,379.000 (wgt'ed) examples reached here.  /* #neg=747 #pos=632 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.7194734122109551;  // std dev = 0.000, 115.000 (wgt'ed) examples reached here.  /* #pos=115 */
%   else return 0.2734109972933741;  // std dev = 18.503, 1,379.000 (wgt'ed) examples reached here.  /* #neg=747 #pos=632 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.5553664367462834;  // std dev = 4.62e-07, 115.000 (wgt'ed) examples reached here.  /* #pos=115 */
%   else return 0.22862629797058168;  // std dev = 18.503, 1,379.000 (wgt'ed) examples reached here.  /* #neg=747 #pos=632 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.4175135841583094;  // std dev = 3.26e-07, 115.000 (wgt'ed) examples reached here.  /* #pos=115 */
%   else return 0.18571097794827904;  // std dev = 18.503, 1,379.000 (wgt'ed) examples reached here.  /* #neg=747 #pos=632 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.32071184716015005;  // std dev = 1.84e-07, 115.000 (wgt'ed) examples reached here.  /* #pos=115 */
%   else return 0.1473783925550978;  // std dev = 18.503, 1,379.000 (wgt'ed) examples reached here.  /* #neg=747 #pos=632 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.2551722425694897;  // std dev = 0.000, 115.000 (wgt'ed) examples reached here.  /* #pos=115 */
%   else return 0.11495773200872791;  // std dev = 18.503, 1,379.000 (wgt'ed) examples reached here.  /* #neg=747 #pos=632 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.20975771563253545;  // std dev = 1.76e-07, 115.000 (wgt'ed) examples reached here.  /* #pos=115 */
%   else return 0.08859368503958145;  // std dev = 18.503, 1,379.000 (wgt'ed) examples reached here.  /* #neg=747 #pos=632 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.17709649774527741;  // std dev = 0.000, 115.000 (wgt'ed) examples reached here.  /* #pos=115 */
%   else return 0.06772192629332731;  // std dev = 18.503, 1,379.000 (wgt'ed) examples reached here.  /* #neg=747 #pos=632 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.15274385809367136;  // std dev = 0.000, 115.000 (wgt'ed) examples reached here.  /* #pos=115 */
%   else return 0.051488154610965155;  // std dev = 18.503, 1,379.000 (wgt'ed) examples reached here.  /* #neg=747 #pos=632 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.13400703000801084;  // std dev = 7.60e-08, 115.000 (wgt'ed) examples reached here.  /* #pos=115 */
%   else return 0.03900608017011788;  // std dev = 18.503, 1,379.000 (wgt'ed) examples reached here.  /* #neg=747 #pos=632 */


Results
   AUC ROC   = 0.5837
   AUC PR    = 0.673762
   CLL	      = -0.648536
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.167401
   F1        = 0.286792


Total learning time: 2.504 seconds
Total inference time: 2.035 seconds
AUC ROC: 0.5837


Results scoring model
   AUC ROC   = 0.576975
   AUC PR    = 0.639704
   CLL	      = -0.647979
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.153949
   F1        = 0.266821


Total scoring time: 1.224 seconds
Parameter learned model CLL: -0.647979


Structure after Parameter Learning
[['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [6.19e-07, 0, 115], 'false': [18.503, 747, 632]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 115], 'false': [18.503, 747, 632]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [4.62e-07, 0, 115], 'false': [18.503, 747, 632]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [3.26e-07, 0, 115], 'false': [18.503, 747, 632]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [1.84e-07, 0, 115], 'false': [18.503, 747, 632]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 115], 'false': [18.503, 747, 632]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [1.76e-07, 0, 115], 'false': [18.503, 747, 632]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 115], 'false': [18.503, 747, 632]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 115], 'false': [18.503, 747, 632]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [7.6e-08, 0, 115], 'false': [18.503, 747, 632]}]]
[{'': [3.3364615418300357e-15, 0.24826137004828128]}, {'': [-1.0503675224279742e-15, 0.24826137004828985]}, {'': [1.853589745461131e-15, 0.24826137004829174]}, {'': [9.267948727305654e-16, 0.24826137004829818]}, {'': [2.934850430313457e-16, 0.24826137004827872]}, {'': [-4.633974363652827e-17, 0.24826137004828877]}, {'': [2.703151712130816e-16, 0.24826137004828322]}, {'': [-2.703151712130816e-17, 0.2482613700482947]}, {'': [-1.5832745742480493e-16, 0.24826137004828977]}, {'': [5.0201388939572296e-17, 0.24826137004829374]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
1;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
2;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
3;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
4;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
5;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
6;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
7;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
8;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
9;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.8581489350995107;  // std dev = 6.19e-07, 115.000 (wgt'ed) examples reached here.  /* #pos=115 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.3232269959047663;  // std dev = 0.499, 1,217.000 (wgt'ed) examples reached here.  /* #neg=651 #pos=566 */
%   | | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | | then return 0.4263307532813295;  // std dev = 3.286, 44.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=25 */
%   | | | else return 0.5423594614153018;  // std dev = 2.026, 19.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=13 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return 0.31968739663797385;  // std dev = 1.797, 13.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=6 */
%   | | | else return 0.12644161802634163;  // std dev = 2.837, 41.000 (wgt'ed) examples reached here.  /* #neg=30 #pos=11 */
%   | | else return 0.10259337954395681;  // std dev = 0.430, 45.000 (wgt'ed) examples reached here.  /* #neg=34 #pos=11 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.7194734122109551;  // std dev = 0.000, 115.000 (wgt'ed) examples reached here.  /* #pos=115 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.2791627279781452;  // std dev = 0.499, 1,217.000 (wgt'ed) examples reached here.  /* #neg=651 #pos=566 */
%   | | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | | then return 0.36615414693625503;  // std dev = 3.286, 44.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=25 */
%   | | | else return 0.4628301985635589;  // std dev = 2.026, 19.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=13 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return 0.27615825449321707;  // std dev = 1.797, 13.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=6 */
%   | | | else return 0.11034235232659871;  // std dev = 2.837, 41.000 (wgt'ed) examples reached here.  /* #neg=30 #pos=11 */
%   | | else return 0.08964016548715838;  // std dev = 0.430, 45.000 (wgt'ed) examples reached here.  /* #neg=34 #pos=11 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.5553664367462834;  // std dev = 4.62e-07, 115.000 (wgt'ed) examples reached here.  /* #pos=115 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then if ( author(G, F), venue(G, A) )
%   | | | then return 0.35143272546766674;  // std dev = 1.708, 12.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=7 */
%   | | | else return 0.7680993921343336;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( haswordtitle(H, D) )
%   | | | then return 0.2306617881409872;  // std dev = 17.286, 1,202.000 (wgt'ed) examples reached here.  /* #neg=646 #pos=556 */
%   | | | else return 0.3225377642235015;  // std dev = 3.869, 63.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=38 */
%   | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | then if ( haswordtitle(J, K), haswordvenue(B, K) )
%   | | | then return 0.2308014560359859;  // std dev = 1.797, 13.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=6 */
%   | | | else return 0.09510703098232902;  // std dev = 2.837, 41.000 (wgt'ed) examples reached here.  /* #neg=30 #pos=11 */
%   | | else return 0.07754550154840685;  // std dev = 0.430, 45.000 (wgt'ed) examples reached here.  /* #neg=34 #pos=11 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.4175135841583094;  // std dev = 3.26e-07, 115.000 (wgt'ed) examples reached here.  /* #pos=115 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.1890521671090252;  // std dev = 0.498, 1,217.000 (wgt'ed) examples reached here.  /* #neg=651 #pos=566 */
%   | | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | | then return 0.2330304984045559;  // std dev = 3.286, 44.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=25 */
%   | | | else return 0.30013202968166314;  // std dev = 2.026, 19.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=13 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return 0.18732575730991188;  // std dev = 1.797, 13.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=6 */
%   | | | else return 0.08106247590562135;  // std dev = 2.837, 41.000 (wgt'ed) examples reached here.  /* #neg=30 #pos=11 */
%   | | else return 0.06648308448032317;  // std dev = 0.430, 45.000 (wgt'ed) examples reached here.  /* #neg=34 #pos=11 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.32071184716015005;  // std dev = 1.84e-07, 115.000 (wgt'ed) examples reached here.  /* #pos=115 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then if ( author(G, F), venue(G, A) )
%   | | | then return 0.24194768375238632;  // std dev = 1.708, 12.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=7 */
%   | | | else return 0.5598266897313882;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( haswordtitle(H, D) )
%   | | | then return 0.14778894192586087;  // std dev = 17.286, 1,202.000 (wgt'ed) examples reached here.  /* #neg=646 #pos=556 */
%   | | | else return 0.19371655512317454;  // std dev = 3.864, 63.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=38 */
%   | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | then if ( title(K, J), venue(K, B) )
%   | | | then return 0.0752870119231006;  // std dev = 3.127, 48.000 (wgt'ed) examples reached here.  /* #neg=34 #pos=14 */
%   | | | else return 0.1869776436181776;  // std dev = 1.225, 6.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | else return 0.056548150925513005;  // std dev = 0.430, 45.000 (wgt'ed) examples reached here.  /* #neg=34 #pos=11 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.2551722425694897;  // std dev = 0.000, 115.000 (wgt'ed) examples reached here.  /* #pos=115 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then if ( author(G, F), venue(G, A) )
%   | | | then return 0.1856620752179069;  // std dev = 1.708, 12.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=7 */
%   | | | else return 0.42082978542663496;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | | | then return 0.24074910376060857;  // std dev = 2.029, 17.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=10 */
%   | | | else return 0.11494490018889764;  // std dev = 17.590, 1,248.000 (wgt'ed) examples reached here.  /* #neg=664 #pos=584 */
%   | else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | | then if ( haswordtitle(K, L), haswordvenue(B, L) )
%   | | | then return 0.12050658809400125;  // std dev = 1.795, 13.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=6 */
%   | | | else return 0.056100119687926706;  // std dev = 2.837, 41.000 (wgt'ed) examples reached here.  /* #neg=30 #pos=11 */
%   | | else return 0.047766754411616555;  // std dev = 0.430, 45.000 (wgt'ed) examples reached here.  /* #neg=34 #pos=11 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.20975771563253545;  // std dev = 1.76e-07, 115.000 (wgt'ed) examples reached here.  /* #pos=115 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.08925015742231208;  // std dev = 0.498, 1,217.000 (wgt'ed) examples reached here.  /* #neg=651 #pos=566 */
%   | | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | | then return 0.10394200276351408;  // std dev = 3.286, 44.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=25 */
%   | | | else return 0.1501332102170297;  // std dev = 2.026, 19.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=13 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( title(J, I), venue(J, B) )
%   | | | then return 0.050277681983695865;  // std dev = 3.125, 48.000 (wgt'ed) examples reached here.  /* #neg=34 #pos=14 */
%   | | | else return 0.11740374374073924;  // std dev = 1.225, 6.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | else return 0.040110342621182196;  // std dev = 0.430, 45.000 (wgt'ed) examples reached here.  /* #neg=34 #pos=11 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.17709649774527741;  // std dev = 0.000, 115.000 (wgt'ed) examples reached here.  /* #pos=115 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.06811872217955725;  // std dev = 0.498, 1,217.000 (wgt'ed) examples reached here.  /* #neg=651 #pos=566 */
%   | | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | | then return 0.07801639440464866;  // std dev = 3.286, 44.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=25 */
%   | | | else return 0.1130337169520357;  // std dev = 2.026, 19.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=13 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return 0.07373169416225284;  // std dev = 1.794, 13.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=6 */
%   | | | else return 0.03777345873422759;  // std dev = 2.837, 41.000 (wgt'ed) examples reached here.  /* #neg=30 #pos=11 */
%   | | else return 0.03351176627816061;  // std dev = 0.430, 45.000 (wgt'ed) examples reached here.  /* #neg=34 #pos=11 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.15274385809367136;  // std dev = 0.000, 115.000 (wgt'ed) examples reached here.  /* #pos=115 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.5180288666699012;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return -0.43773667906572045;  // std dev = 0.242, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else return 0.28955081060944343;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( haswordvenue(A, H), haswordvenue(B, H) )
%   | | then if ( haswordtitle(I, H) )
%   | | | then return 0.050633468898916144;  // std dev = 17.283, 1,202.000 (wgt'ed) examples reached here.  /* #neg=646 #pos=556 */
%   | | | else return 0.06668268821295649;  // std dev = 3.861, 63.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=38 */
%   | | else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | | | then return 0.038609854667662195;  // std dev = 3.387, 57.000 (wgt'ed) examples reached here.  /* #neg=40 #pos=17 */
%   | | | else return 0.03100510661879462;  // std dev = 2.837, 41.000 (wgt'ed) examples reached here.  /* #neg=30 #pos=11 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.13400703000801084;  // std dev = 7.60e-08, 115.000 (wgt'ed) examples reached here.  /* #pos=115 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then if ( author(G, F), venue(G, A) )
%   | | | then return 0.07135647028733039;  // std dev = 1.307, 12.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=7 */
%   | | | else return 0.23377487416051745;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( haswordtitle(H, D) )
%   | | | then return 0.038316218299106336;  // std dev = 17.283, 1,202.000 (wgt'ed) examples reached here.  /* #neg=646 #pos=556 */
%   | | | else return 0.05025707005794324;  // std dev = 3.861, 63.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=38 */
%   | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | then if ( title(K, J), venue(K, B) )
%   | | | then return 0.02659165373961705;  // std dev = 3.125, 48.000 (wgt'ed) examples reached here.  /* #neg=34 #pos=14 */
%   | | | else return 0.06188052994005445;  // std dev = 1.225, 6.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | else return 0.022852580011845054;  // std dev = 0.429, 45.000 (wgt'ed) examples reached here.  /* #neg=34 #pos=11 */


Results
   AUC ROC   = 0.630272
   AUC PR    = 0.696688
   CLL	      = -0.644763
   Precision = 0.876344 at threshold = 0.5
   Recall    = 0.215419
   F1        = 0.345827


Total learning time: 54.455 seconds
Total inference time: 5.872 seconds
AUC ROC: 0.630272


Results scoring model
   AUC ROC   = 0.619899
   AUC PR    = 0.675212
   CLL	      = -0.637613
   Precision = 0.867021 at threshold = 0.5
   Recall    = 0.218206
   F1        = 0.348663


Total scoring time: 2.012 seconds
Refined model CLL: -0.637613


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.630272
   AUC PR    = 0.696688
   CLL	      = -0.644763
   Precision = 0.876344 at threshold = 0.5
   Recall    = 0.215419
   F1        = 0.345827


Total learning time: 60.195 seconds
Total inference time: 5.872 seconds
AUC ROC: 0.630272
Total revision time: 60.195
Best scored revision CLL: -0.637613


Dataset: 3_imdb_cora, Fold: 4, Type: Transfer (trRDN-B), Time: 00:20:21
{'AUC ROC': 0.630272, 'AUC PR': 0.696688, 'CLL': -0.644763, 'Precision': [0.876344, 0.5], 'Recall': 0.215419, 'F1': 0.345827, 'Learning time': 60.195, 'Inference time': 5.872, 'parameter_1.0': {'AUC ROC': 0.5837, 'AUC PR': 0.673762, 'CLL': -0.648536, 'Precision': [1.0, 0.5], 'Recall': 0.167401, 'F1': 0.286792, 'Learning time': 2.504, 'Inference time': 2.035}}


Starting fold 5

Target train facts examples: 8644
Target train pos examples: 550
Target train neg examples: 500

Target test facts examples: 33914
Target test pos	 examples: 2467
Target test neg examples: 2240

Amount of data: 0.2
******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- actor(A), director(B).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.4679050326604853;  // std dev = 6.247, 164.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=100 */
%   else return 0.07554023944733845;  // std dev = 2.798, 46.000 (wgt'ed) examples reached here.  /* #neg=36 #pos=10 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.40094305336906216;  // std dev = 6.247, 164.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=100 */
%   else return 0.06609369457227725;  // std dev = 2.798, 46.000 (wgt'ed) examples reached here.  /* #neg=36 #pos=10 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.32706502297757384;  // std dev = 6.247, 164.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=100 */
%   else return 0.05740984924998567;  // std dev = 2.798, 46.000 (wgt'ed) examples reached here.  /* #neg=36 #pos=10 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.25634686247182403;  // std dev = 6.247, 164.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=100 */
%   else return 0.04954329153153734;  // std dev = 2.798, 46.000 (wgt'ed) examples reached here.  /* #neg=36 #pos=10 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.19582553221411483;  // std dev = 6.247, 164.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=100 */
%   else return 0.0425090128023821;  // std dev = 2.798, 46.000 (wgt'ed) examples reached here.  /* #neg=36 #pos=10 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.1476618505363467;  // std dev = 6.247, 164.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=100 */
%   else return 0.03629001425971619;  // std dev = 2.798, 46.000 (wgt'ed) examples reached here.  /* #neg=36 #pos=10 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.11081925740135333;  // std dev = 6.247, 164.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=100 */
%   else return 0.030845664947662478;  // std dev = 2.798, 46.000 (wgt'ed) examples reached here.  /* #neg=36 #pos=10 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.08313962892039259;  // std dev = 6.247, 164.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=100 */
%   else return 0.026119627486883856;  // std dev = 2.798, 46.000 (wgt'ed) examples reached here.  /* #neg=36 #pos=10 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.06247126146485957;  // std dev = 6.247, 164.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=100 */
%   else return 0.022046652931680656;  // std dev = 2.798, 46.000 (wgt'ed) examples reached here.  /* #neg=36 #pos=10 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.047043711978687744;  // std dev = 6.247, 164.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=100 */
%   else return 0.018557956195655402;  // std dev = 2.798, 46.000 (wgt'ed) examples reached here.  /* #neg=36 #pos=10 */


Results
   AUC ROC   = 0.535236
   AUC PR    = 0.542776
   CLL	      = -0.687914
   Precision = 0.543247 at threshold = 0.5
   Recall    = 0.952169
   F1        = 0.691798


Total learning time: 1.25 seconds
Total inference time: 1.831 seconds
AUC ROC: 0.535236


Results scoring model
   AUC ROC   = 0.634545
   AUC PR    = 0.605531
   CLL	      = -0.639228
   Precision = 0.609756 at threshold = 0.5
   Recall    = 0.909091
   F1        = 0.729927


Total scoring time: 0.757 seconds
Parameter learned model CLL: -0.639228


Structure after Parameter Learning
[['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [6.247, 64, 100], 'false': [2.798, 36, 10]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [6.247, 64, 100], 'false': [2.798, 36, 10]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [6.247, 64, 100], 'false': [2.798, 36, 10]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [6.247, 64, 100], 'false': [2.798, 36, 10]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [6.247, 64, 100], 'false': [2.798, 36, 10]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [6.247, 64, 100], 'false': [2.798, 36, 10]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [6.247, 64, 100], 'false': [2.798, 36, 10]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [6.247, 64, 100], 'false': [2.798, 36, 10]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [6.247, 64, 100], 'false': [2.798, 36, 10]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [6.247, 64, 100], 'false': [2.798, 36, 10]}]]
[{'': [0.2379535990481885, 0.170132325141777]}, {'': [0.23795359904818564, 0.17013232514177715]}, {'': [0.23795359904818625, 0.17013232514177712]}, {'': [0.23795359904818633, 0.17013232514177667]}, {'': [0.23795359904818494, 0.17013232514177662]}, {'': [0.23795359904818542, 0.1701323251417771]}, {'': [0.2379535990481857, 0.170132325141777]}, {'': [0.2379535990481858, 0.17013232514177723]}, {'': [0.23795359904818586, 0.17013232514177723]}, {'': [0.2379535990481857, 0.1701323251417767]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Pruning resulted in null theory

Candidate for revision
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, B) )
%   | | then if ( author(G, E), venue(G, A) )
%   | | | then return 0.19148226843284552;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | else return -0.14185106490048777;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return 0.5248156017661788;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else return 0.4880190649696397;  // std dev = 0.483, 154.000 (wgt'ed) examples reached here.  /* #neg=57 #pos=97 */
%   else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | then return 0.16249676118646889;  // std dev = 0.460, 23.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=7 */
%   | else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | | then return 0.01604367194161748;  // std dev = 0.365, 19.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=3 */
%   | | else return -0.14185106490048777;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, B) )
%   | | then if ( author(G, E), venue(G, A) )
%   | | | then return 0.16653882456488175;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | else return -0.12544463852839138;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return 0.448295606241962;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else return 0.4177145790639453;  // std dev = 0.483, 154.000 (wgt'ed) examples reached here.  /* #neg=57 #pos=97 */
%   else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | then return 0.14154274242296555;  // std dev = 0.460, 23.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=7 */
%   | else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | | then return 0.014079441960181528;  // std dev = 0.365, 19.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=3 */
%   | | else return -0.12544463852839138;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.32541864950200794;  // std dev = 0.482, 164.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=100 */
%   else if ( haswordvenue(B, D), haswordtitle(E, D) )
%   | then return 0.12131905159335929;  // std dev = 0.460, 23.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=7 */
%   | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | then return 0.012337096821794572;  // std dev = 0.365, 19.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=3 */
%   | | else return -0.11231637819360639;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordtitle(F, D) )
%   | | then return 0.47183058027099184;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | else return 0.33821737569491095;  // std dev = 0.862, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else return 0.24525875082118384;  // std dev = 0.483, 155.000 (wgt'ed) examples reached here.  /* #neg=62 #pos=93 */
%   else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | then return 0.10247683991352247;  // std dev = 0.460, 23.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=7 */
%   | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | then return 0.01079600519889324;  // std dev = 0.365, 19.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=3 */
%   | | else return -0.10159632948783628;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordtitle(F, D) )
%   | | then return 0.3575686086768564;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | else return 0.26114967047026116;  // std dev = 0.868, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else return 0.18770918320680718;  // std dev = 0.482, 155.000 (wgt'ed) examples reached here.  /* #neg=62 #pos=93 */
%   else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | then return 0.08546089347306957;  // std dev = 0.460, 23.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=7 */
%   | else if ( haswordvenue(A, I), haswordauthor(J, I) )
%   | | then return -0.11128030841957896;  // std dev = 0.046, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else if ( haswordvenue(B, K), haswordauthor(L, K) )
%   | | | then return 0.010332226174343333;  // std dev = 0.911, 7.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=1 */
%   | | | else return 0.005387780965938927;  // std dev = 1.301, 13.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=2 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, B) )
%   | | then if ( author(G, E), venue(G, A) )
%   | | | then return -0.014809599812090549;  // std dev = 0.785, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | else return -0.21266944509046234;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return 0.16992767282292762;  // std dev = 0.800, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | | then return 0.1576770908255622;  // std dev = 0.439, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   | | else return 0.1597681130933265;  // std dev = 0.484, 147.000 (wgt'ed) examples reached here.  /* #neg=55 #pos=92 */
%   else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | then return -0.013824198680664772;  // std dev = 0.354, 21.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=3 */
%   | else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | | then return 0.09948434069286353;  // std dev = 0.471, 21.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=7 */
%   | | else return -0.08865557110395751;  // std dev = 0.010, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.11029482203336789;  // std dev = 0.478, 164.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=100 */
%   else if ( haswordvenue(A, D), haswordtitle(E, D) )
%   | then return -0.012014911497088741;  // std dev = 0.354, 21.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=3 */
%   | else if ( haswordvenue(B, F), haswordtitle(G, F) )
%   | | then return 0.08119108276811794;  // std dev = 0.471, 21.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=7 */
%   | | else return -0.08175088302744421;  // std dev = 0.009, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.0831340831108071;  // std dev = 0.478, 164.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=100 */
%   else if ( haswordvenue(A, D), haswordtitle(E, D) )
%   | then return -0.01045625912839165;  // std dev = 0.354, 21.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=3 */
%   | else if ( haswordvenue(B, F), haswordtitle(G, F) )
%   | | then return 0.06557549313136442;  // std dev = 0.471, 21.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=7 */
%   | | else return -0.07582165645769769;  // std dev = 0.009, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, A) )
%   | | then return -0.1903102173428985;  // std dev = 0.903, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else return 0.03702151325201599;  // std dev = 0.676, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | else return 0.07182270551315773;  // std dev = 0.482, 154.000 (wgt'ed) examples reached here.  /* #neg=57 #pos=97 */
%   else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | then return -0.009110240016260662;  // std dev = 0.354, 21.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=3 */
%   | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | then return 0.05252444411864359;  // std dev = 0.471, 21.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=7 */
%   | | else return -0.0706778133940199;  // std dev = 0.008, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.04728916011973156;  // std dev = 0.477, 164.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=100 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return -0.02953260292319454;  // std dev = 0.380, 10.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | then return -0.001856611719939133;  // std dev = 0.361, 20.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=3 */
%   | | else return 0.048663551144607686;  // std dev = 0.450, 16.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=5 */


Results
   AUC ROC   = 0.533187
   AUC PR    = 0.544395
   CLL	      = -0.693242
   Precision = 0.541385 at threshold = 0.5
   Recall    = 0.941224
   F1        = 0.687389


Total learning time: 9.237 seconds
Total inference time: 3.923 seconds
AUC ROC: 0.533187


Results scoring model
   AUC ROC   = 0.681455
   AUC PR    = 0.657812
   CLL	      = -0.613362
   Precision = 0.630573 at threshold = 0.5
   Recall    = 0.9
   F1        = 0.741573


Total scoring time: 0.932 seconds
Refined model CLL: -0.613362


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.533187
   AUC PR    = 0.544395
   CLL	      = -0.693242
   Precision = 0.541385 at threshold = 0.5
   Recall    = 0.941224
   F1        = 0.687389


Total learning time: 12.176 seconds
Total inference time: 3.923 seconds
AUC ROC: 0.533187
Total revision time: 12.176
Best scored revision CLL: -0.613362


Dataset: 3_imdb_cora, Fold: 5, Type: Transfer (trRDN-B), Time: 00:20:39
{'AUC ROC': 0.533187, 'AUC PR': 0.544395, 'CLL': -0.693242, 'Precision': [0.541385, 0.5], 'Recall': 0.941224, 'F1': 0.687389, 'Learning time': 12.176, 'Inference time': 3.923, 'parameter_0.2': {'AUC ROC': 0.535236, 'AUC PR': 0.542776, 'CLL': -0.687914, 'Precision': [0.543247, 0.5], 'Recall': 0.952169, 'F1': 0.691798, 'Learning time': 1.25, 'Inference time': 1.831}}


Amount of data: 0.4
******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- actor(A), director(B).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.462939354261185;  // std dev = 8.935, 334.000 (wgt'ed) examples reached here.  /* #neg=132 #pos=202 */
%   else return 0.06745126068090773;  // std dev = 3.773, 86.000 (wgt'ed) examples reached here.  /* #neg=68 #pos=18 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.39679656928680235;  // std dev = 8.935, 334.000 (wgt'ed) examples reached here.  /* #neg=132 #pos=202 */
%   else return 0.05904046727890804;  // std dev = 3.773, 86.000 (wgt'ed) examples reached here.  /* #neg=68 #pos=18 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.3239434157043418;  // std dev = 8.935, 334.000 (wgt'ed) examples reached here.  /* #neg=132 #pos=202 */
%   else return 0.05134533014437296;  // std dev = 3.773, 86.000 (wgt'ed) examples reached here.  /* #neg=68 #pos=18 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.25417169764682607;  // std dev = 8.935, 334.000 (wgt'ed) examples reached here.  /* #neg=132 #pos=202 */
%   else return 0.0443955355429569;  // std dev = 3.773, 86.000 (wgt'ed) examples reached here.  /* #neg=68 #pos=18 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.19435095686948603;  // std dev = 8.935, 334.000 (wgt'ed) examples reached here.  /* #neg=132 #pos=202 */
%   else return 0.03819042142354154;  // std dev = 3.773, 86.000 (wgt'ed) examples reached here.  /* #neg=68 #pos=18 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.14664176895680048;  // std dev = 8.935, 334.000 (wgt'ed) examples reached here.  /* #neg=132 #pos=202 */
%   else return 0.032705548445205325;  // std dev = 3.773, 86.000 (wgt'ed) examples reached here.  /* #neg=68 #pos=18 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.1100792812132373;  // std dev = 8.935, 334.000 (wgt'ed) examples reached here.  /* #neg=132 #pos=202 */
%   else return 0.027899416580861196;  // std dev = 3.773, 86.000 (wgt'ed) examples reached here.  /* #neg=68 #pos=18 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.08257429539205682;  // std dev = 8.935, 334.000 (wgt'ed) examples reached here.  /* #neg=132 #pos=202 */
%   else return 0.023719585755653288;  // std dev = 3.773, 86.000 (wgt'ed) examples reached here.  /* #neg=68 #pos=18 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.06202085881130124;  // std dev = 8.935, 334.000 (wgt'ed) examples reached here.  /* #neg=132 #pos=202 */
%   else return 0.02010779836774994;  // std dev = 3.773, 86.000 (wgt'ed) examples reached here.  /* #neg=68 #pos=18 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.046674720964615335;  // std dev = 8.935, 334.000 (wgt'ed) examples reached here.  /* #neg=132 #pos=202 */
%   else return 0.017003969789632475;  // std dev = 3.773, 86.000 (wgt'ed) examples reached here.  /* #neg=68 #pos=18 */


Results
   AUC ROC   = 0.535236
   AUC PR    = 0.542776
   CLL	      = -0.687798
   Precision = 0.543247 at threshold = 0.5
   Recall    = 0.952169
   F1        = 0.691798


Total learning time: 1.482 seconds
Total inference time: 1.929 seconds
AUC ROC: 0.535236


Results scoring model
   AUC ROC   = 0.629091
   AUC PR    = 0.601226
   CLL	      = -0.640827
   Precision = 0.60479 at threshold = 0.5
   Recall    = 0.918182
   F1        = 0.729242


Total scoring time: 0.978 seconds
Parameter learned model CLL: -0.640827


Structure after Parameter Learning
[['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [8.935, 132, 202], 'false': [3.773, 68, 18]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [8.935, 132, 202], 'false': [3.773, 68, 18]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [8.935, 132, 202], 'false': [3.773, 68, 18]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [8.935, 132, 202], 'false': [3.773, 68, 18]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [8.935, 132, 202], 'false': [3.773, 68, 18]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [8.935, 132, 202], 'false': [3.773, 68, 18]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [8.935, 132, 202], 'false': [3.773, 68, 18]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [8.935, 132, 202], 'false': [3.773, 68, 18]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [8.935, 132, 202], 'false': [3.773, 68, 18]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [8.935, 132, 202], 'false': [3.773, 68, 18]}]]
[{'': [0.2390189680519245, 0.1654948620876144]}, {'': [0.2390189680519114, 0.16549486208761457]}, {'': [0.23901896805191905, 0.165494862087615]}, {'': [0.23901896805191625, 0.1654948620876156]}, {'': [0.2390189680519212, 0.16549486208761552]}, {'': [0.23901896805191994, 0.16549486208761457]}, {'': [0.2390189680519203, 0.1654948620876153]}, {'': [0.2390189680519199, 0.1654948620876144]}, {'': [0.23901896805192058, 0.16549486208761438]}, {'': [0.23901896805192094, 0.16549486208761505]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Pruning resulted in null theory

Candidate for revision
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordtitle(E, D) )
%   | then return 0.4538279474451874;  // std dev = 0.491, 324.000 (wgt'ed) examples reached here.  /* #neg=131 #pos=193 */
%   | else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | | then return 0.6581489350995122;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else return 0.8581489350995122;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | then return 0.03763611458669184;  // std dev = 0.384, 39.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=7 */
%   | else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | | then return 0.12005369700427426;  // std dev = 0.440, 42.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=11 */
%   | | else return -0.14185106490048777;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.7935031009889633;  // std dev = 2.11e-08, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return -0.2064968990110367;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else if ( haswordauthor(E, H), haswordvenue(A, H) )
%   | | | then return 0.4365139234108908;  // std dev = 0.788, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return -0.09538578789992558;  // std dev = 0.943, 9.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=1 */
%   | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | then return 0.4093971407240638;  // std dev = 0.486, 302.000 (wgt'ed) examples reached here.  /* #neg=116 #pos=186 */
%   | | else return 0.608928133115042;  // std dev = 0.322, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   else if ( haswordvenue(B, K), haswordauthor(L, K) )
%   | then if ( haswordtitle(M, K) )
%   | | then return 0.17976677141752473;  // std dev = 0.812, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | else return 0.10547370580292582;  // std dev = 0.432, 16.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=4 */
%   | else return 0.04230301961137382;  // std dev = 0.394, 67.000 (wgt'ed) examples reached here.  /* #neg=54 #pos=13 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordauthor(E, F), haswordvenue(A, F) )
%   | | then return 0.46423588298350793;  // std dev = 0.841, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else return 0.04047755747528353;  // std dev = 0.378, 19.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=5 */
%   | else if ( haswordvenue(A, G), haswordauthor(H, G) )
%   | | then if ( haswordtitle(I, G) )
%   | | | then return 0.46844774454789834;  // std dev = 1.500, 12.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=9 */
%   | | | else return -0.032902209146960626;  // std dev = 1.411, 11.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=3 */
%   | | else return 0.34674082218201974;  // std dev = 0.481, 287.000 (wgt'ed) examples reached here.  /* #neg=106 #pos=181 */
%   else if ( haswordvenue(B, J), haswordauthor(K, J) )
%   | then if ( author(L, K), venue(L, A) )
%   | | then return 0.32871067800213893;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else return 0.041403523355128966;  // std dev = 0.399, 15.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=3 */
%   | else if ( haswordvenue(A, M), haswordtitle(N, M) )
%   | | then return -0.03186332392322529;  // std dev = 0.325, 25.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=3 */
%   | | else return 0.07763969592450495;  // std dev = 0.425, 42.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=10 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordtitle(E, D) )
%   | then return 0.24661728645124126;  // std dev = 0.481, 324.000 (wgt'ed) examples reached here.  /* #neg=131 #pos=193 */
%   | else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | | then return 0.4066735824241844;  // std dev = 0.863, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else return 0.4965455823645238;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | then if ( author(J, I), venue(J, A) )
%   | | then return 0.2769748794246974;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else return 0.035803617778122805;  // std dev = 0.399, 15.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=3 */
%   | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | then if ( haswordtitle(L, M), haswordvenue(B, M) )
%   | | | then return -0.14780466579601673;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | | else return -0.004947522938873893;  // std dev = 1.604, 21.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=3 */
%   | | else if ( haswordvenue(B, N), haswordtitle(P, N) )
%   | | | then return 0.08276412416777847;  // std dev = 2.727, 39.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=10 */
%   | | | else return -0.13920504369855205;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.04895285775749649;  // std dev = 0.387, 24.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=9 */
%   | else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | | then if ( haswordtitle(H, F) )
%   | | | then return 0.3052015347072604;  // std dev = 1.500, 12.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=9 */
%   | | | else return -0.09042218048248661;  // std dev = 1.380, 11.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=3 */
%   | | else return 0.21202528420626576;  // std dev = 0.481, 287.000 (wgt'ed) examples reached here.  /* #neg=106 #pos=181 */
%   else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | then if ( author(K, J), venue(K, A) )
%   | | then return 0.2254114261720361;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else return 0.030834036203929955;  // std dev = 0.399, 15.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=3 */
%   | else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | | then return -0.02445562426295407;  // std dev = 0.324, 25.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=3 */
%   | | else if ( haswordvenue(B, N), haswordtitle(P, N) )
%   | | | then return 0.07056551222287046;  // std dev = 2.727, 39.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=10 */
%   | | | else return -0.1233466034054548;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordtitle(E, D) )
%   | then return 0.1406872811227128;  // std dev = 0.478, 324.000 (wgt'ed) examples reached here.  /* #neg=131 #pos=193 */
%   | else if ( haswordvenue(B, F), haswordtitle(G, F) )
%   | | then return 0.3019128176560324;  // std dev = 0.317, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | else return 0.3667692673167464;  // std dev = 0.098, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | then if ( author(J, I), venue(J, A) )
%   | | then return 0.17838119255487295;  // std dev = 1.001, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else return 0.02645892879080052;  // std dev = 0.399, 15.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=3 */
%   | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | then if ( haswordtitle(L, M), haswordvenue(B, M) )
%   | | | then return -0.1273956686610838;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | | else return -0.0012821693844872434;  // std dev = 1.604, 21.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=3 */
%   | | else if ( haswordvenue(B, N), haswordtitle(P, N) )
%   | | | then return 0.05965106473305328;  // std dev = 2.727, 39.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=10 */
%   | | | else return -0.11061642772827089;  // std dev = 2.63e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordtitle(E, D) )
%   | then return 0.10607739930847011;  // std dev = 0.477, 324.000 (wgt'ed) examples reached here.  /* #neg=131 #pos=193 */
%   | else if ( haswordvenue(B, F), haswordtitle(G, F) )
%   | | then return 0.2324301763597678;  // std dev = 0.318, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | else return 0.28739617250696714;  // std dev = 0.087, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | then if ( author(J, I), venue(J, A) )
%   | | then return 0.1383493333261766;  // std dev = 1.001, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else return 0.02263380455688416;  // std dev = 0.399, 15.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=3 */
%   | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | then if ( haswordauthor(M, K) )
%   | | | then return -0.13395174575238156;  // std dev = 0.025, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return -0.003514612123797577;  // std dev = 1.603, 22.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=3 */
%   | | else if ( haswordvenue(B, N), haswordtitle(P, N) )
%   | | | then return 0.05005273674494223;  // std dev = 2.727, 39.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=10 */
%   | | | else return -0.10019349997516179;  // std dev = 1.86e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordtitle(E, D) )
%   | then return 0.07991368193141388;  // std dev = 0.477, 324.000 (wgt'ed) examples reached here.  /* #neg=131 #pos=193 */
%   | else if ( haswordvenue(B, F), haswordtitle(G, F) )
%   | | then return 0.18193339667015943;  // std dev = 0.319, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | else return 0.23288426384720073;  // std dev = 0.077, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | then if ( author(J, I), venue(J, A) )
%   | | then return 0.10588726924329361;  // std dev = 1.001, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else return 0.0193094868678231;  // std dev = 0.399, 15.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=3 */
%   | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | then if ( haswordtitle(L, M), haswordvenue(B, M) )
%   | | | then return -0.11041826518223403;  // std dev = 0.011, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | | else return 7.66000922535558E-4;  // std dev = 1.601, 21.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=3 */
%   | | else if ( haswordvenue(B, N), haswordtitle(P, N) )
%   | | | then return 0.041734878989746704;  // std dev = 2.727, 39.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=10 */
%   | | | else return -0.09151546221989931;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordtitle(E, D) )
%   | then return 0.06026077050084532;  // std dev = 0.477, 324.000 (wgt'ed) examples reached here.  /* #neg=131 #pos=193 */
%   | else if ( haswordvenue(B, F), haswordtitle(G, F) )
%   | | then return 0.14488706928075518;  // std dev = 0.320, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | else return 0.19425936856643836;  // std dev = 0.068, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | then if ( author(J, I), venue(J, A) )
%   | | then return 0.08037825516165518;  // std dev = 1.001, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else return 0.016435228134115396;  // std dev = 0.399, 15.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=3 */
%   | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | then if ( haswordauthor(M, K) )
%   | | | then return -0.11604043068107306;  // std dev = 0.030, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return -0.0017220052561550377;  // std dev = 1.601, 22.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=3 */
%   | | else if ( haswordvenue(B, N), haswordtitle(P, N) )
%   | | | then return 0.0346150521907927;  // std dev = 2.727, 39.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=10 */
%   | | | else return -0.08418594327501323;  // std dev = 1.86e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, A) )
%   | | then return 0.05993493084950665;  // std dev = 0.365, 12.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=6 */
%   | | else return -0.16993129786195996;  // std dev = 0.340, 12.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=3 */
%   | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | then return 0.054754489529793914;  // std dev = 0.482, 302.000 (wgt'ed) examples reached here.  /* #neg=116 #pos=186 */
%   | | else return 0.10609649513166758;  // std dev = 0.297, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | then if ( author(K, J), venue(K, B) )
%   | | then return -0.03930008091670928;  // std dev = 0.734, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | else return 0.03563624255714779;  // std dev = 0.422, 16.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=4 */
%   | else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | | then return -0.013897988935235923;  // std dev = 0.322, 25.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=3 */
%   | | else if ( haswordvenue(B, N), haswordtitle(P, N) )
%   | | | then return 0.0285829343390924;  // std dev = 2.727, 39.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=10 */
%   | | | else return -0.0779184192539314;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */


Results
   AUC ROC   = 0.542808
   AUC PR    = 0.563918
   CLL	      = -0.692567
   Precision = 0.545604 at threshold = 0.5
   Recall    = 0.940819
   F1        = 0.690671


Total learning time: 21.684 seconds
Total inference time: 5.461 seconds
AUC ROC: 0.542808


Results scoring model
   AUC ROC   = 0.692977
   AUC PR    = 0.684485
   CLL	      = -0.606909
   Precision = 0.643087 at threshold = 0.5
   Recall    = 0.909091
   F1        = 0.753296


Total scoring time: 1.233 seconds
Refined model CLL: -0.606909


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.542808
   AUC PR    = 0.563918
   CLL	      = -0.692567
   Precision = 0.545604 at threshold = 0.5
   Recall    = 0.940819
   F1        = 0.690671


Total learning time: 25.377000000000002 seconds
Total inference time: 5.461 seconds
AUC ROC: 0.542808
Total revision time: 25.377000000000002
Best scored revision CLL: -0.606909


Dataset: 3_imdb_cora, Fold: 5, Type: Transfer (trRDN-B), Time: 00:21:13
{'AUC ROC': 0.542808, 'AUC PR': 0.563918, 'CLL': -0.692567, 'Precision': [0.545604, 0.5], 'Recall': 0.940819, 'F1': 0.690671, 'Learning time': 25.377000000000002, 'Inference time': 5.461, 'parameter_0.4': {'AUC ROC': 0.535236, 'AUC PR': 0.542776, 'CLL': -0.687798, 'Precision': [0.543247, 0.5], 'Recall': 0.952169, 'F1': 0.691798, 'Learning time': 1.482, 'Inference time': 1.929}}


Amount of data: 0.6
******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- actor(A), director(B).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.4605830121786154;  // std dev = 10.866, 493.000 (wgt'ed) examples reached here.  /* #neg=196 #pos=297 */
%   else return 0.09902484750827022;  // std dev = 5.005, 137.000 (wgt'ed) examples reached here.  /* #neg=104 #pos=33 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.3948281260306162;  // std dev = 10.866, 493.000 (wgt'ed) examples reached here.  /* #neg=196 #pos=297 */
%   else return 0.08653796493517395;  // std dev = 5.005, 137.000 (wgt'ed) examples reached here.  /* #neg=104 #pos=33 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.32245973055559074;  // std dev = 10.866, 493.000 (wgt'ed) examples reached here.  /* #neg=196 #pos=297 */
%   else return 0.07490243292090605;  // std dev = 5.005, 137.000 (wgt'ed) examples reached here.  /* #neg=104 #pos=33 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.2531367083022193;  // std dev = 10.866, 493.000 (wgt'ed) examples reached here.  /* #neg=196 #pos=297 */
%   else return 0.06427299446669005;  // std dev = 5.005, 137.000 (wgt'ed) examples reached here.  /* #neg=104 #pos=33 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.19364956695274116;  // std dev = 10.866, 493.000 (wgt'ed) examples reached here.  /* #neg=196 #pos=297 */
%   else return 0.054731742995690176;  // std dev = 5.005, 137.000 (wgt'ed) examples reached here.  /* #neg=104 #pos=33 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.14615782412511333;  // std dev = 10.866, 493.000 (wgt'ed) examples reached here.  /* #neg=196 #pos=297 */
%   else return 0.04629740534208267;  // std dev = 5.005, 137.000 (wgt'ed) examples reached here.  /* #neg=104 #pos=33 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.10972981719490378;  // std dev = 10.866, 493.000 (wgt'ed) examples reached here.  /* #neg=196 #pos=297 */
%   else return 0.03893904741070188;  // std dev = 5.005, 137.000 (wgt'ed) examples reached here.  /* #neg=104 #pos=33 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.08230875975462064;  // std dev = 10.866, 493.000 (wgt'ed) examples reached here.  /* #neg=196 #pos=297 */
%   else return 0.03259081676604057;  // std dev = 5.005, 137.000 (wgt'ed) examples reached here.  /* #neg=104 #pos=33 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.06181043372009857;  // std dev = 10.866, 493.000 (wgt'ed) examples reached here.  /* #neg=196 #pos=297 */
%   else return 0.027165412046873897;  // std dev = 5.005, 137.000 (wgt'ed) examples reached here.  /* #neg=104 #pos=33 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.04650313910613395;  // std dev = 10.866, 493.000 (wgt'ed) examples reached here.  /* #neg=196 #pos=297 */
%   else return 0.022565087161398455;  // std dev = 5.005, 137.000 (wgt'ed) examples reached here.  /* #neg=104 #pos=33 */


Results
   AUC ROC   = 0.535236
   AUC PR    = 0.542776
   CLL	      = -0.686248
   Precision = 0.543247 at threshold = 0.5
   Recall    = 0.952169
   F1        = 0.691798


Total learning time: 1.864 seconds
Total inference time: 2.025 seconds
AUC ROC: 0.535236


Results scoring model
   AUC ROC   = 0.623333
   AUC PR    = 0.598182
   CLL	      = -0.648122
   Precision = 0.602434 at threshold = 0.5
   Recall    = 0.9
   F1        = 0.72175


Total scoring time: 0.9 seconds
Parameter learned model CLL: -0.648122


Structure after Parameter Learning
[['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [10.866, 196, 297], 'false': [5.005, 104, 33]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [10.866, 196, 297], 'false': [5.005, 104, 33]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [10.866, 196, 297], 'false': [5.005, 104, 33]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [10.866, 196, 297], 'false': [5.005, 104, 33]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [10.866, 196, 297], 'false': [5.005, 104, 33]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [10.866, 196, 297], 'false': [5.005, 104, 33]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [10.866, 196, 297], 'false': [5.005, 104, 33]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [10.866, 196, 297], 'false': [5.005, 104, 33]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [10.866, 196, 297], 'false': [5.005, 104, 33]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [10.866, 196, 297], 'false': [5.005, 104, 33]}]]
[{'': [0.23950725985295435, 0.18285470723000816]}, {'': [0.23950725985295243, 0.18285470723000594]}, {'': [0.2395072598529562, 0.18285470723000752]}, {'': [0.2395072598529456, 0.18285470723000743]}, {'': [0.23950725985295226, 0.18285470723000807]}, {'': [0.2395072598529491, 0.18285470723000677]}, {'': [0.23950725985295382, 0.182854707230008]}, {'': [0.2395072598529501, 0.18285470723000574]}, {'': [0.2395072598529531, 0.18285470723000707]}, {'': [0.2395072598529532, 0.18285470723000716]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Pruning resulted in null theory

Candidate for revision
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordtitle(F, D) )
%   | | then if ( author(G, E), venue(G, A) )
%   | | | then return -0.1418510649004878;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | | else return 0.6273797043302815;  // std dev = 1.519, 13.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=10 */
%   | | else if ( author(H, E), venue(H, B) )
%   | | | then return 0.034619523334806335;  // std dev = 1.572, 17.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=3 */
%   | | | else return 0.8581489350995121;  // std dev = 2.11e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( haswordvenue(A, I), haswordauthor(J, I) )
%   | | then if ( haswordtitle(K, I) )
%   | | | then return 0.4831489350995123;  // std dev = 1.936, 16.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=10 */
%   | | | else return 0.09344305274657114;  // std dev = 1.749, 17.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=4 */
%   | | else return 0.4923532106339499;  // std dev = 0.482, 421.000 (wgt'ed) examples reached here.  /* #neg=154 #pos=267 */
%   else if ( haswordvenue(B, L), haswordauthor(M, L) )
%   | then return 0.20189893509951234;  // std dev = 0.475, 32.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=11 */
%   | else return 0.06767274462332151;  // std dev = 0.407, 105.000 (wgt'ed) examples reached here.  /* #neg=83 #pos=22 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.3939818826619354;  // std dev = 0.484, 493.000 (wgt'ed) examples reached here.  /* #neg=196 #pos=297 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, A) )
%   | | then return 0.007398004230681811;  // std dev = 0.903, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | | else if ( author(G, E), venue(G, B) )
%   | | | then return 0.09970985972120983;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | else return 0.14467600458681043;  // std dev = 2.370, 27.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=8 */
%   | else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | then if ( author(J, I), venue(J, A) )
%   | | | then return 0.08175281540682044;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | else return 0.17957890236334192;  // std dev = 2.284, 23.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=8 */
%   | | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | | then return 0.016376526387876518;  // std dev = 2.236, 36.000 (wgt'ed) examples reached here.  /* #neg=30 #pos=6 */
%   | | | else return 0.06592607593742597;  // std dev = 2.504, 37.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=8 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordtitle(F, D) )
%   | | then if ( author(G, E), title(G, F) )
%   | | | then return 0.49116325763072055;  // std dev = 1.479, 13.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=10 */
%   | | | else return 0.03887976918489153;  // std dev = 1.120, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   | | else if ( author(H, E), venue(H, A) )
%   | | | then return -0.04000610672972858;  // std dev = 1.507, 16.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=3 */
%   | | | else return 0.5971703434483725;  // std dev = 0.898, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | else return 0.32984552670557027;  // std dev = 0.482, 452.000 (wgt'ed) examples reached here.  /* #neg=175 #pos=277 */
%   else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | then if ( haswordtitle(K, I) )
%   | | then return 0.012147697204901053;  // std dev = 0.893, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else return 0.1796262781930388;  // std dev = 0.483, 27.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=10 */
%   | else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | | then return -0.002739789002595871;  // std dev = 0.357, 40.000 (wgt'ed) examples reached here.  /* #neg=34 #pos=6 */
%   | | else return 0.08297678963124482;  // std dev = 0.430, 65.000 (wgt'ed) examples reached here.  /* #neg=49 #pos=16 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordtitle(F, D) )
%   | | then if ( author(G, E), venue(G, B) )
%   | | | then return -0.29235175715186074;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | | else return 0.42240857227091944;  // std dev = 1.520, 15.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=12 */
%   | | else if ( author(H, E), venue(H, A) )
%   | | | then return -0.03312623114935602;  // std dev = 1.508, 16.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=3 */
%   | | | else return 0.4764148766146505;  // std dev = 0.897, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | | then return 0.020522586498758155;  // std dev = 0.414, 31.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=10 */
%   | | else return 0.27615004683471334;  // std dev = 0.482, 421.000 (wgt'ed) examples reached here.  /* #neg=154 #pos=267 */
%   else if ( haswordvenue(B, K), haswordauthor(L, K) )
%   | then if ( author(M, L), venue(M, B) )
%   | | then return 3.633536855249697E-4;  // std dev = 0.905, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else return 0.15220482207637984;  // std dev = 0.482, 27.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=10 */
%   | else return 0.04324771124595867;  // std dev = 0.406, 105.000 (wgt'ed) examples reached here.  /* #neg=83 #pos=22 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.639859939432955;  // std dev = 0.218, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | | else return -0.27357402121194835;  // std dev = 0.201, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | else return -0.03815287977462425;  // std dev = 0.371, 17.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=5 */
%   | else return 0.20121329616910105;  // std dev = 0.477, 454.000 (wgt'ed) examples reached here.  /* #neg=173 #pos=281 */
%   else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | then if ( haswordtitle(J, H) )
%   | | then return 1.8598832049623315E-4;  // std dev = 0.905, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else return 0.12517832165541193;  // std dev = 0.481, 27.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=10 */
%   | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | then if ( haswordtitle(L, M), haswordvenue(A, M) )
%   | | | then return -0.15992478274760166;  // std dev = 0.017, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | | else return 0.08571725077279008;  // std dev = 3.421, 60.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=16 */
%   | | else return 0.0010649883594584248;  // std dev = 0.370, 37.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=6 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordauthor(E, F), haswordvenue(A, F) )
%   | | then if ( author(G, E), venue(G, B) )
%   | | | then return 0.2985657262394132;  // std dev = 0.833, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.3613269761481929;  // std dev = 0.699, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else return -0.01014716629936533;  // std dev = 0.337, 31.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=10 */
%   | else return 0.1520200185326403;  // std dev = 0.477, 454.000 (wgt'ed) examples reached here.  /* #neg=173 #pos=281 */
%   else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | then if ( author(J, I), venue(J, A) )
%   | | then return 0.18598650649599993;  // std dev = 1.079, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | else return 0.06688796290342315;  // std dev = 0.467, 27.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=9 */
%   | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | then return -0.004102486156494893;  // std dev = 0.356, 40.000 (wgt'ed) examples reached here.  /* #neg=34 #pos=6 */
%   | | else if ( haswordvenue(B, M), haswordtitle(N, M) )
%   | | | then return 0.07266720012587781;  // std dev = 3.421, 60.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=16 */
%   | | | else return -0.1837129789736181;  // std dev = 0.013, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordauthor(E, F), haswordvenue(A, F) )
%   | | then if ( author(G, E), venue(G, B) )
%   | | | then return 0.22747862470451966;  // std dev = 0.835, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.27701226240405347;  // std dev = 0.685, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else return -0.008100903929186313;  // std dev = 0.337, 31.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=10 */
%   | else return 0.11439441981182406;  // std dev = 0.477, 454.000 (wgt'ed) examples reached here.  /* #neg=173 #pos=281 */
%   else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | then if ( author(J, I), venue(J, B) )
%   | | then return -0.03148917557828958;  // std dev = 0.906, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else return 0.0878580640661651;  // std dev = 0.480, 27.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=10 */
%   | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | then return -0.0035687035843618062;  // std dev = 0.356, 40.000 (wgt'ed) examples reached here.  /* #neg=34 #pos=6 */
%   | | else if ( haswordvenue(B, M), haswordtitle(N, M) )
%   | | | then return 0.061054115884508584;  // std dev = 3.421, 60.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=16 */
%   | | | else return -0.15774989899123945;  // std dev = 0.011, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.08209117415710475;  // std dev = 0.468, 493.000 (wgt'ed) examples reached here.  /* #neg=196 #pos=297 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.056787603780766756;  // std dev = 0.437, 37.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=10 */
%   | else if ( haswordvenue(B, F), haswordtitle(G, F) )
%   | | then if ( title(H, G), venue(H, B) )
%   | | | then return -0.022095258820266493;  // std dev = 2.548, 43.000 (wgt'ed) examples reached here.  /* #neg=35 #pos=8 */
%   | | | else return -0.13669229773574287;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | | then return 0.09541586918472435;  // std dev = 3.106, 48.000 (wgt'ed) examples reached here.  /* #neg=33 #pos=15 */
%   | | | else return -0.23807710679010657;  // std dev = 0.193, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.018156587686528322;  // std dev = 0.355, 39.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=16 */
%   | else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | | then if ( haswordtitle(H, F) )
%   | | | then return 0.063997936297405;  // std dev = 1.604, 16.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=10 */
%   | | | else return -0.13171747427332414;  // std dev = 1.469, 17.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=4 */
%   | | else return 0.07398560258816798;  // std dev = 0.482, 421.000 (wgt'ed) examples reached here.  /* #neg=154 #pos=267 */
%   else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | then if ( author(K, J), venue(K, A) )
%   | | then return 0.1401707212819066;  // std dev = 1.067, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | else return 0.028458140413995865;  // std dev = 0.459, 27.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=9 */
%   | else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | | then return -0.01158452424005563;  // std dev = 0.354, 40.000 (wgt'ed) examples reached here.  /* #neg=34 #pos=6 */
%   | | else if ( haswordvenue(B, N), haswordtitle(P, N) )
%   | | | then return 0.04887245066306692;  // std dev = 3.416, 60.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=16 */
%   | | | else return -0.13212342042974853;  // std dev = 0.045, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordtitle(F, D) )
%   | | then if ( author(G, E), venue(G, B) )
%   | | | then return -0.3629404592095425;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | | else return 0.16788221928403554;  // std dev = 1.508, 15.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=12 */
%   | | else return -0.029271314585283148;  // std dev = 0.377, 22.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=8 */
%   | else return 0.050171648319014696;  // std dev = 0.473, 452.000 (wgt'ed) examples reached here.  /* #neg=175 #pos=277 */
%   else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | then if ( author(J, I), venue(J, A) )
%   | | then return -0.05934361779940448;  // std dev = 0.854, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | | else return 0.06083512085678984;  // std dev = 0.447, 31.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=9 */
%   | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | then return -0.03445574554177645;  // std dev = 0.373, 47.000 (wgt'ed) examples reached here.  /* #neg=39 #pos=8 */
%   | | else if ( haswordvenue(A, M), haswordtitle(N, M) )
%   | | | then return 0.07675127856406508;  // std dev = 3.098, 48.000 (wgt'ed) examples reached here.  /* #neg=33 #pos=15 */
%   | | | else return -0.19755226543040003;  // std dev = 0.187, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */


Results
   AUC ROC   = 0.53486
   AUC PR    = 0.546721
   CLL	      = -0.695235
   Precision = 0.54133 at threshold = 0.5
   Recall    = 0.923794
   F1        = 0.682642


Total learning time: 14.023 seconds
Total inference time: 6.278 seconds
AUC ROC: 0.53486


Results scoring model
   AUC ROC   = 0.689136
   AUC PR    = 0.665707
   CLL	      = -0.605119
   Precision = 0.649667 at threshold = 0.5
   Recall    = 0.887879
   F1        = 0.75032


Total scoring time: 1.436 seconds
Refined model CLL: -0.605119


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.53486
   AUC PR    = 0.546721
   CLL	      = -0.695235
   Precision = 0.54133 at threshold = 0.5
   Recall    = 0.923794
   F1        = 0.682642


Total learning time: 18.223 seconds
Total inference time: 6.278 seconds
AUC ROC: 0.53486
Total revision time: 18.223
Best scored revision CLL: -0.605119


Dataset: 3_imdb_cora, Fold: 5, Type: Transfer (trRDN-B), Time: 00:21:40
{'AUC ROC': 0.53486, 'AUC PR': 0.546721, 'CLL': -0.695235, 'Precision': [0.54133, 0.5], 'Recall': 0.923794, 'F1': 0.682642, 'Learning time': 18.223, 'Inference time': 6.278, 'parameter_0.6': {'AUC ROC': 0.535236, 'AUC PR': 0.542776, 'CLL': -0.686248, 'Precision': [0.543247, 0.5], 'Recall': 0.952169, 'F1': 0.691798, 'Learning time': 1.864, 'Inference time': 2.025}}


Amount of data: 0.8
******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- actor(A), director(B).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.45574653269710536;  // std dev = 12.655, 666.000 (wgt'ed) examples reached here.  /* #neg=268 #pos=398 */
%   else return 0.09952824544433907;  // std dev = 5.645, 174.000 (wgt'ed) examples reached here.  /* #neg=132 #pos=42 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.39078614998719235;  // std dev = 12.655, 666.000 (wgt'ed) examples reached here.  /* #neg=268 #pos=398 */
%   else return 0.08697564907438857;  // std dev = 5.645, 174.000 (wgt'ed) examples reached here.  /* #neg=132 #pos=42 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.3194095462460866;  // std dev = 12.655, 666.000 (wgt'ed) examples reached here.  /* #neg=268 #pos=398 */
%   else return 0.07527551940942266;  // std dev = 5.645, 174.000 (wgt'ed) examples reached here.  /* #neg=132 #pos=42 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.2510065768318585;  // std dev = 12.655, 666.000 (wgt'ed) examples reached here.  /* #neg=268 #pos=398 */
%   else return 0.0645852122413492;  // std dev = 5.645, 174.000 (wgt'ed) examples reached here.  /* #neg=132 #pos=42 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.19220640018744262;  // std dev = 12.655, 666.000 (wgt'ed) examples reached here.  /* #neg=268 #pos=398 */
%   else return 0.05498862653883204;  // std dev = 5.645, 174.000 (wgt'ed) examples reached here.  /* #neg=132 #pos=42 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.14516451121065627;  // std dev = 12.655, 666.000 (wgt'ed) examples reached here.  /* #neg=268 #pos=398 */
%   else return 0.046505491758603634;  // std dev = 5.645, 174.000 (wgt'ed) examples reached here.  /* #neg=132 #pos=42 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.10901568287786761;  // std dev = 12.655, 666.000 (wgt'ed) examples reached here.  /* #neg=268 #pos=398 */
%   else return 0.039105195676035626;  // std dev = 5.645, 174.000 (wgt'ed) examples reached here.  /* #neg=132 #pos=42 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.08176903842210183;  // std dev = 12.655, 666.000 (wgt'ed) examples reached here.  /* #neg=268 #pos=398 */
%   else return 0.03272170158921939;  // std dev = 5.645, 174.000 (wgt'ed) examples reached here.  /* #neg=132 #pos=42 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.06138500460809585;  // std dev = 12.655, 666.000 (wgt'ed) examples reached here.  /* #neg=268 #pos=398 */
%   else return 0.027267194615232956;  // std dev = 5.645, 174.000 (wgt'ed) examples reached here.  /* #neg=132 #pos=42 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.04615788049470948;  // std dev = 12.655, 666.000 (wgt'ed) examples reached here.  /* #neg=268 #pos=398 */
%   else return 0.02264323617013914;  // std dev = 5.645, 174.000 (wgt'ed) examples reached here.  /* #neg=132 #pos=42 */


Results
   AUC ROC   = 0.535236
   AUC PR    = 0.542776
   CLL	      = -0.685858
   Precision = 0.543247 at threshold = 0.5
   Recall    = 0.952169
   F1        = 0.691798


Total learning time: 2.08 seconds
Total inference time: 2.011 seconds
AUC ROC: 0.535236


Results scoring model
   AUC ROC   = 0.617273
   AUC PR    = 0.593804
   CLL	      = -0.651013
   Precision = 0.597598 at threshold = 0.5
   Recall    = 0.904545
   F1        = 0.719711


Total scoring time: 1.059 seconds
Parameter learned model CLL: -0.651013


Structure after Parameter Learning
[['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [12.655, 268, 398], 'false': [5.645, 132, 42]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [12.655, 268, 398], 'false': [5.645, 132, 42]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [12.655, 268, 398], 'false': [5.645, 132, 42]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [12.655, 268, 398], 'false': [5.645, 132, 42]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [12.655, 268, 398], 'false': [5.645, 132, 42]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [12.655, 268, 398], 'false': [5.645, 132, 42]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [12.655, 268, 398], 'false': [5.645, 132, 42]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [12.655, 268, 398], 'false': [5.645, 132, 42]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [12.655, 268, 398], 'false': [5.645, 132, 42]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [12.655, 268, 398], 'false': [5.645, 132, 42]}]]
[{'': [0.24047470894317016, 0.18311533888228418]}, {'': [0.24047470894316778, 0.1831153388822818]}, {'': [0.24047470894317238, 0.18311533888228265]}, {'': [0.24047470894317785, 0.18311533888228274]}, {'': [0.2404747089431712, 0.18311533888228232]}, {'': [0.240474708943174, 0.1831153388822827]}, {'': [0.24047470894317946, 0.18311533888228362]}, {'': [0.2404747089431809, 0.18311533888228276]}, {'': [0.24047470894317638, 0.18311533888228299]}, {'': [0.24047470894317877, 0.18311533888228293]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Pruning resulted in null theory

Candidate for revision
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordtitle(E, D) )
%   | then return 0.44702065071001784;  // std dev = 0.492, 647.000 (wgt'ed) examples reached here.  /* #neg=266 #pos=381 */
%   | else return 0.7528857772047755;  // std dev = 0.307, 19.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=17 */
%   else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | then if ( author(H, G), venue(H, B) )
%   | | then if ( samebib(H, I), venue(I, A) )
%   | | | then return 0.6081489350995122;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | else return -0.14185106490048777;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.15544623239680966;  // std dev = 0.457, 37.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=11 */
%   | else if ( haswordvenue(B, J), haswordauthor(K, J) )
%   | | then if ( haswordtitle(L, J) )
%   | | | then return 0.0581489350995122;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else return 0.18167834686421824;  // std dev = 2.728, 34.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=11 */
%   | | else if ( haswordvenue(B, M), haswordtitle(N, M) )
%   | | | then return 0.028361701056959166;  // std dev = 2.576, 47.000 (wgt'ed) examples reached here.  /* #neg=39 #pos=8 */
%   | | | else return 0.04862512557570285;  // std dev = 2.545, 42.000 (wgt'ed) examples reached here.  /* #neg=34 #pos=8 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordtitle(E, D) )
%   | then return 0.38264726343830685;  // std dev = 0.492, 647.000 (wgt'ed) examples reached here.  /* #neg=266 #pos=381 */
%   | else return 0.6635866409304738;  // std dev = 0.299, 19.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=17 */
%   else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | then if ( haswordtitle(H, F) )
%   | | then return 0.16599393770113327;  // std dev = 1.042, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   | | else if ( author(I, G), venue(I, B) )
%   | | | then return 0.07081366185416516;  // std dev = 0.809, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | else return 0.14370917287408616;  // std dev = 2.764, 36.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=11 */
%   | else if ( haswordvenue(B, J), haswordauthor(K, J) )
%   | | then if ( author(L, K), venue(L, B) )
%   | | | then return 0.0443786335827079;  // std dev = 0.902, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else return 0.15905521149979818;  // std dev = 2.724, 34.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=11 */
%   | | else if ( haswordvenue(B, M), haswordtitle(N, M) )
%   | | | then return 0.02487405719357258;  // std dev = 2.576, 47.000 (wgt'ed) examples reached here.  /* #neg=39 #pos=8 */
%   | | | else return 0.04260232039124624;  // std dev = 2.545, 42.000 (wgt'ed) examples reached here.  /* #neg=34 #pos=8 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordvenue(A, D) )
%   | | then return 0.6933433731519312;  // std dev = 0.129, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( haswordtitle(F, D) )
%   | | | then return 0.17518568459550451;  // std dev = 2.225, 20.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=9 */
%   | | | else return -0.06426329360289287;  // std dev = 1.854, 22.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=5 */
%   | else if ( haswordvenue(A, G), haswordauthor(H, G) )
%   | | then if ( haswordtitle(I, G) )
%   | | | then return 0.3442333036431239;  // std dev = 2.225, 21.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=13 */
%   | | | else return -0.044321932262079776;  // std dev = 1.822, 20.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=5 */
%   | | else return 0.3453523724005861;  // std dev = 0.484, 575.000 (wgt'ed) examples reached here.  /* #neg=217 #pos=358 */
%   else if ( haswordvenue(A, J), haswordauthor(K, J) )
%   | then if ( author(L, K), venue(L, B) )
%   | | then return 0.14214402515469454;  // std dev = 0.426, 9.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=3 */
%   | | else return 0.11490729023538802;  // std dev = 0.457, 37.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=11 */
%   | else return 0.05781226720522355;  // std dev = 0.411, 128.000 (wgt'ed) examples reached here.  /* #neg=100 #pos=28 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordtitle(E, D) )
%   | then return 0.24425307040514685;  // std dev = 0.487, 647.000 (wgt'ed) examples reached here.  /* #neg=266 #pos=381 */
%   | else return 0.465297851314376;  // std dev = 0.294, 19.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=17 */
%   else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | then if ( author(H, G), venue(H, A) )
%   | | then if ( samebib(H, I), venue(I, B) )
%   | | | then return 0.5605651601936571;  // std dev = 0.876, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | else return -0.1806663028296451;  // std dev = 0.036, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else if ( author(J, G), venue(J, B) )
%   | | | then return -0.18670704012853376;  // std dev = 0.016, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.10712948344217194;  // std dev = 2.735, 36.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=11 */
%   | else if ( haswordvenue(A, K), haswordauthor(L, K) )
%   | | then if ( author(M, L), venue(M, B) )
%   | | | then return 0.07618074264317472;  // std dev = 1.078, 7.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=2 */
%   | | | else return 0.12240769788604992;  // std dev = 2.603, 31.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=10 */
%   | | else return 0.02147110912199501;  // std dev = 0.384, 89.000 (wgt'ed) examples reached here.  /* #neg=73 #pos=16 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordauthor(E, F), haswordvenue(A, F) )
%   | | then return 0.2995470611602066;  // std dev = 0.325, 10.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   | | else if ( haswordtitle(G, D) )
%   | | | then return 0.10802703627628749;  // std dev = 2.176, 19.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=9 */
%   | | | else return -0.10531061323001695;  // std dev = 1.764, 21.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=5 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then return 0.19859406100463606;  // std dev = 0.487, 600.000 (wgt'ed) examples reached here.  /* #neg=238 #pos=362 */
%   | | else return 0.36933828581923595;  // std dev = 0.314, 16.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=14 */
%   else if ( haswordvenue(B, J), haswordauthor(K, J) )
%   | then if ( author(L, K), venue(L, B) )
%   | | then return 0.06377224101010524;  // std dev = 0.380, 8.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | | else if ( author(M, K), venue(M, A) )
%   | | | then return 0.07560315297647016;  // std dev = 0.769, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | else return 0.08957398619885246;  // std dev = 2.733, 36.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=11 */
%   | else return 0.04145143967334358;  // std dev = 0.409, 127.000 (wgt'ed) examples reached here.  /* #neg=99 #pos=28 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordtitle(E, D) )
%   | then if ( haswordauthor(F, D) )
%   | | then if ( author(G, F), venue(G, A) )
%   | | | then return -0.39105820096506005;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | | else return 0.3747267400563839;  // std dev = 1.530, 16.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=13 */
%   | | else return 0.141147902869588;  // std dev = 0.485, 623.000 (wgt'ed) examples reached here.  /* #neg=255 #pos=368 */
%   | else return 0.30788407592043116;  // std dev = 0.295, 19.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=17 */
%   else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | then if ( author(J, I), venue(J, A) )
%   | | then return 0.047845629126836875;  // std dev = 0.397, 7.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=2 */
%   | | else if ( author(K, I), venue(K, B) )
%   | | | then return 0.01825525004951526;  // std dev = 0.798, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | else return 0.08630657693909582;  // std dev = 2.717, 35.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=11 */
%   | else if ( haswordvenue(B, L), haswordauthor(M, L) )
%   | | then return 0.08181498019936666;  // std dev = 0.453, 39.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=12 */
%   | | else return 0.0129061553084735;  // std dev = 0.384, 89.000 (wgt'ed) examples reached here.  /* #neg=73 #pos=16 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordtitle(E, D) )
%   | then return 0.10525553650314091;  // std dev = 0.482, 647.000 (wgt'ed) examples reached here.  /* #neg=266 #pos=381 */
%   | else return 0.24814006181928472;  // std dev = 0.292, 19.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=17 */
%   else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | then if ( author(H, G), venue(H, B) )
%   | | then if ( samebib(H, I), venue(I, A) )
%   | | | then return 0.43124465139077583;  // std dev = 0.846, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | else return -0.18237720688466497;  // std dev = 0.026, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.05404406620339026;  // std dev = 0.452, 37.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=11 */
%   | else if ( haswordvenue(B, J), haswordauthor(K, J) )
%   | | then if ( haswordtitle(L, J) )
%   | | | then return -0.008885111590329037;  // std dev = 0.815, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else return 0.07848441715273556;  // std dev = 2.698, 34.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=11 */
%   | | else if ( haswordvenue(A, M), haswordtitle(N, M) )
%   | | | then return 0.003469919549015061;  // std dev = 2.568, 46.000 (wgt'ed) examples reached here.  /* #neg=38 #pos=8 */
%   | | | else return 0.019271230469825835;  // std dev = 2.554, 43.000 (wgt'ed) examples reached here.  /* #neg=35 #pos=8 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordtitle(E, D) )
%   | then return 0.07887005912430212;  // std dev = 0.482, 647.000 (wgt'ed) examples reached here.  /* #neg=266 #pos=381 */
%   | else return 0.2050423040781185;  // std dev = 0.293, 19.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=17 */
%   else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | then if ( author(H, G), venue(H, A) )
%   | | then if ( author(I, G), venue(I, B) )
%   | | | then return 0.19750741002923136;  // std dev = 0.728, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return -0.21970707857422292;  // std dev = 0.072, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else return 0.05227141588716991;  // std dev = 0.452, 39.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=12 */
%   | else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | | then if ( haswordtitle(K, L), haswordvenue(A, L) )
%   | | | then return -0.17666194911958913;  // std dev = 0.071, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | | else return 0.03765355234320035;  // std dev = 2.638, 43.000 (wgt'ed) examples reached here.  /* #neg=34 #pos=9 */
%   | | else if ( haswordvenue(A, M), haswordtitle(N, M) )
%   | | | then return 0.08025470786619855;  // std dev = 3.605, 65.000 (wgt'ed) examples reached here.  /* #neg=46 #pos=19 */
%   | | | else return -0.21248615669685245;  // std dev = 0.128, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordtitle(F, D) )
%   | | then if ( author(G, E), venue(G, B) )
%   | | | then return -0.5354459026827633;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | | else return 0.286392429208561;  // std dev = 1.523, 20.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=17 */
%   | | else return -0.17333159793101657;  // std dev = 0.387, 25.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=9 */
%   | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | then return 0.06807887035239636;  // std dev = 0.483, 599.000 (wgt'ed) examples reached here.  /* #neg=241 #pos=358 */
%   | | else return 0.16029318445813373;  // std dev = 0.318, 16.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=14 */
%   else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | then if ( title(L, K), venue(L, B) )
%   | | then if ( title(M, K), venue(M, A) )
%   | | | then return 0.6664631592059795;  // std dev = 1.459, 23.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=21 */
%   | | | else return -0.19641374309847662;  // std dev = 0.315, 58.000 (wgt'ed) examples reached here.  /* #neg=58 */
%   | | else return -0.16419319208738317;  // std dev = 0.113, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else return 0.013919855421432712;  // std dev = 0.411, 87.000 (wgt'ed) examples reached here.  /* #neg=66 #pos=21 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordtitle(F, D) )
%   | | then if ( author(G, E), title(G, F) )
%   | | | then return 0.21381662254997583;  // std dev = 1.524, 17.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=14 */
%   | | | else return -0.1860996173842105;  // std dev = 0.920, 9.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=3 */
%   | | else if ( author(H, E), venue(H, A) )
%   | | | then return -0.2697698645381191;  // std dev = 1.323, 18.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=3 */
%   | | | else return 0.2180380288465212;  // std dev = 0.874, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | then return 0.0512582776096453;  // std dev = 0.483, 599.000 (wgt'ed) examples reached here.  /* #neg=241 #pos=358 */
%   | | else return 0.13037167918693;  // std dev = 0.318, 16.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=14 */
%   else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | then if ( title(M, L), venue(M, A) )
%   | | then return 0.04339473831783872;  // std dev = 0.423, 78.000 (wgt'ed) examples reached here.  /* #neg=57 #pos=21 */
%   | | else return -0.13536751580889472;  // std dev = 0.050, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else return 1.5617438836894285E-4;  // std dev = 0.349, 90.000 (wgt'ed) examples reached here.  /* #neg=69 #pos=21 */


Results
   AUC ROC   = 0.544765
   AUC PR    = 0.565677
   CLL	      = -0.685782
   Precision = 0.541046 at threshold = 0.5
   Recall    = 0.927037
   F1        = 0.683298


Total learning time: 42.412 seconds
Total inference time: 14.203 seconds
AUC ROC: 0.544765


Results scoring model
   AUC ROC   = 0.695656
   AUC PR    = 0.686859
   CLL	      = -0.601477
   Precision = 0.639423 at threshold = 0.5
   Recall    = 0.906818
   F1        = 0.75


Total scoring time: 1.677 seconds
Refined model CLL: -0.601477


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.544765
   AUC PR    = 0.565677
   CLL	      = -0.685782
   Precision = 0.541046 at threshold = 0.5
   Recall    = 0.927037
   F1        = 0.683298


Total learning time: 47.228 seconds
Total inference time: 14.203 seconds
AUC ROC: 0.544765
Total revision time: 47.228
Best scored revision CLL: -0.601477


Dataset: 3_imdb_cora, Fold: 5, Type: Transfer (trRDN-B), Time: 00:22:44
{'AUC ROC': 0.544765, 'AUC PR': 0.565677, 'CLL': -0.685782, 'Precision': [0.541046, 0.5], 'Recall': 0.927037, 'F1': 0.683298, 'Learning time': 47.228, 'Inference time': 14.203, 'parameter_0.8': {'AUC ROC': 0.535236, 'AUC PR': 0.542776, 'CLL': -0.685858, 'Precision': [0.543247, 0.5], 'Recall': 0.952169, 'F1': 0.691798, 'Learning time': 2.08, 'Inference time': 2.011}}


Amount of data: 1.0
******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- actor(A), director(B).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.45384271500381385;  // std dev = 14.190, 836.000 (wgt'ed) examples reached here.  /* #neg=338 #pos=498 */
%   else return 0.10113958930511996;  // std dev = 6.274, 214.000 (wgt'ed) examples reached here.  /* #neg=162 #pos=52 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.3891944611307275;  // std dev = 14.190, 836.000 (wgt'ed) examples reached here.  /* #neg=338 #pos=498 */
%   else return 0.08837649359551082;  // std dev = 6.274, 214.000 (wgt'ed) examples reached here.  /* #neg=162 #pos=52 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.31820707987498087;  // std dev = 14.190, 836.000 (wgt'ed) examples reached here.  /* #neg=338 #pos=498 */
%   else return 0.0764692153151211;  // std dev = 6.274, 214.000 (wgt'ed) examples reached here.  /* #neg=162 #pos=52 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.25016592060681264;  // std dev = 14.190, 836.000 (wgt'ed) examples reached here.  /* #neg=338 #pos=498 */
%   else return 0.06558360802849682;  // std dev = 6.274, 214.000 (wgt'ed) examples reached here.  /* #neg=162 #pos=52 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.1916369618474441;  // std dev = 14.190, 836.000 (wgt'ed) examples reached here.  /* #neg=338 #pos=498 */
%   else return 0.055809457085346785;  // std dev = 6.274, 214.000 (wgt'ed) examples reached here.  /* #neg=162 #pos=52 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.14477344598529676;  // std dev = 14.190, 836.000 (wgt'ed) examples reached here.  /* #neg=338 #pos=498 */
%   else return 0.04716976949296712;  // std dev = 6.274, 214.000 (wgt'ed) examples reached here.  /* #neg=162 #pos=52 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.10873567483835977;  // std dev = 14.190, 836.000 (wgt'ed) examples reached here.  /* #neg=338 #pos=498 */
%   else return 0.03963499455671531;  // std dev = 6.274, 214.000 (wgt'ed) examples reached here.  /* #neg=162 #pos=52 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.08155848265741104;  // std dev = 14.190, 836.000 (wgt'ed) examples reached here.  /* #neg=338 #pos=498 */
%   else return 0.03313850883384021;  // std dev = 6.274, 214.000 (wgt'ed) examples reached here.  /* #neg=162 #pos=52 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.06121987810203538;  // std dev = 14.190, 836.000 (wgt'ed) examples reached here.  /* #neg=338 #pos=498 */
%   else return 0.027590839218657345;  // std dev = 6.274, 214.000 (wgt'ed) examples reached here.  /* #neg=162 #pos=52 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.04602448061244918;  // std dev = 14.190, 836.000 (wgt'ed) examples reached here.  /* #neg=338 #pos=498 */
%   else return 0.02289130765878614;  // std dev = 6.274, 214.000 (wgt'ed) examples reached here.  /* #neg=162 #pos=52 */


Results
   AUC ROC   = 0.535236
   AUC PR    = 0.542776
   CLL	      = -0.685676
   Precision = 0.543247 at threshold = 0.5
   Recall    = 0.952169
   F1        = 0.691798


Total learning time: 2.155 seconds
Total inference time: 1.955 seconds
AUC ROC: 0.535236


Results scoring model
   AUC ROC   = 0.614727
   AUC PR    = 0.592038
   CLL	      = -0.652379
   Precision = 0.595694 at threshold = 0.5
   Recall    = 0.905455
   F1        = 0.718615


Total scoring time: 1.2 seconds
Parameter learned model CLL: -0.652379


Structure after Parameter Learning
[['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [14.19, 338, 498], 'false': [6.274, 162, 52]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [14.19, 338, 498], 'false': [6.274, 162, 52]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [14.19, 338, 498], 'false': [6.274, 162, 52]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [14.19, 338, 498], 'false': [6.274, 162, 52]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [14.19, 338, 498], 'false': [6.274, 162, 52]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [14.19, 338, 498], 'false': [6.274, 162, 52]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [14.19, 338, 498], 'false': [6.274, 162, 52]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [14.19, 338, 498], 'false': [6.274, 162, 52]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [14.19, 338, 498], 'false': [6.274, 162, 52]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [14.19, 338, 498], 'false': [6.274, 162, 52]}]]
[{'': [0.24084270048762138, 0.18394619617433927]}, {'': [0.2408427004876197, 0.18394619617434038]}, {'': [0.24084270048763987, 0.18394619617433852]}, {'': [0.24084270048762046, 0.18394619617433824]}, {'': [0.24084270048762352, 0.1839461961743386]}, {'': [0.2408427004876279, 0.18394619617433638]}, {'': [0.24084270048762227, 0.18394619617433644]}, {'': [0.2408427004876221, 0.183946196174339]}, {'': [0.2408427004876295, 0.1839461961743406]}, {'': [0.24084270048762518, 0.1839461961743367]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Pruning resulted in null theory

Candidate for revision
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordtitle(E, D) )
%   | then return 0.44587899644920087;  // std dev = 0.492, 815.000 (wgt'ed) examples reached here.  /* #neg=336 #pos=479 */
%   | else return 0.762910839861417;  // std dev = 0.294, 21.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=19 */
%   else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | then if ( author(H, G), venue(H, B) )
%   | | then if ( samebib(H, I), venue(I, A) )
%   | | | then return 0.6581489350995122;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.14185106490048777;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.13087620782678508;  // std dev = 0.445, 44.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | else if ( haswordvenue(B, J), haswordauthor(K, J) )
%   | | then if ( haswordtitle(L, J) )
%   | | | then return 0.0581489350995122;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else return 0.17522210583121967;  // std dev = 2.980, 41.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=13 */
%   | | else if ( haswordvenue(A, M), haswordtitle(N, M) )
%   | | | then return 0.04458961306561406;  // std dev = 2.992, 59.000 (wgt'ed) examples reached here.  /* #neg=48 #pos=11 */
%   | | | else return 0.05814893509951237;  // std dev = 2.966, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordtitle(E, D) )
%   | then return 0.381839176189016;  // std dev = 0.492, 815.000 (wgt'ed) examples reached here.  /* #neg=336 #pos=479 */
%   | else return 0.6699615757960476;  // std dev = 0.285, 21.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=19 */
%   else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | then if ( author(H, G), venue(H, A) )
%   | | then if ( samebib(H, I), venue(I, B) )
%   | | | then return 0.6397480032138977;  // std dev = 0.899, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.15715819152444083;  // std dev = 0.016, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( author(J, G), venue(J, B) )
%   | | | then return -0.16254500754977086;  // std dev = 0.005, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.12839506992486718;  // std dev = 2.887, 41.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=12 */
%   | else if ( haswordvenue(A, K), haswordauthor(L, K) )
%   | | then if ( haswordtitle(M, K) )
%   | | | then return 0.038009597489091836;  // std dev = 0.806, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else return 0.15404125523550594;  // std dev = 2.947, 41.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=13 */
%   | | else return 0.044790460982400505;  // std dev = 0.395, 114.000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordtitle(E, D) )
%   | then return 0.3124773748687958;  // std dev = 0.492, 815.000 (wgt'ed) examples reached here.  /* #neg=336 #pos=479 */
%   | else return 0.5307179033413496;  // std dev = 0.283, 21.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=19 */
%   else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | then if ( author(H, G), venue(H, B) )
%   | | then if ( samebib(H, I), venue(I, A) )
%   | | | then return 0.5341280884158435;  // std dev = 0.901, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.13725049948595033;  // std dev = 0.014, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( author(J, G), venue(J, A) )
%   | | | then return -0.1789343100332693;  // std dev = 0.003, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.11350020908398904;  // std dev = 2.882, 41.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=12 */
%   | else if ( haswordvenue(B, K), haswordauthor(L, K) )
%   | | then if ( haswordtitle(M, K) )
%   | | | then return 0.03159879174578699;  // std dev = 0.805, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else return 0.13142811859141887;  // std dev = 2.936, 41.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=13 */
%   | | else return 0.03904700118037833;  // std dev = 0.395, 114.000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordtitle(F, D) )
%   | | then if ( author(G, E), venue(G, B) )
%   | | | then return -0.34078353995148214;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | | else return 0.45088312671518443;  // std dev = 1.990, 24.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=19 */
%   | | else if ( author(H, E), venue(H, A) )
%   | | | then return -0.15606597643689618;  // std dev = 1.748, 21.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=4 */
%   | | | else return 0.4127374349637537;  // std dev = 0.900, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | | then if ( haswordtitle(K, I) )
%   | | | then return 0.1976779985100565;  // std dev = 2.542, 26.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=14 */
%   | | | else return -0.1096421373554021;  // std dev = 1.935, 23.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=6 */
%   | | else return 0.27302282322523375;  // std dev = 0.485, 726.000 (wgt'ed) examples reached here.  /* #neg=278 #pos=448 */
%   else if ( haswordvenue(B, L), haswordauthor(M, L) )
%   | then return 0.0934036703797345;  // std dev = 0.438, 54.000 (wgt'ed) examples reached here.  /* #neg=38 #pos=16 */
%   | else return 0.052907178215069885;  // std dev = 0.410, 160.000 (wgt'ed) examples reached here.  /* #neg=124 #pos=36 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordtitle(E, D) )
%   | then return 0.18703430356346049;  // std dev = 0.486, 815.000 (wgt'ed) examples reached here.  /* #neg=336 #pos=479 */
%   | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | then return 0.31890429777197205;  // std dev = 0.404, 10.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   | | else return 0.3921534783929349;  // std dev = 0.110, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | then if ( author(J, I), venue(J, B) )
%   | | then if ( samebib(J, K), venue(K, A) )
%   | | | then return 0.4036646038576362;  // std dev = 0.900, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.12850027564368707;  // std dev = 0.015, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.06991904814767423;  // std dev = 0.439, 44.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | else if ( haswordvenue(B, L), haswordauthor(M, L) )
%   | | then return 0.08634561236803273;  // std dev = 0.449, 46.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=14 */
%   | | else if ( haswordvenue(B, N), haswordtitle(P, N) )
%   | | | then return 0.019490219532190708;  // std dev = 2.990, 59.000 (wgt'ed) examples reached here.  /* #neg=48 #pos=11 */
%   | | | else return 0.034405928415322105;  // std dev = 2.967, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordvenue(B, D) )
%   | | then return 0.4663702201845942;  // std dev = 0.108, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else if ( haswordtitle(F, D) )
%   | | | then return 0.0795144169237351;  // std dev = 2.320, 27.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=14 */
%   | | | else return -0.14950524376971433;  // std dev = 1.826, 24.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=6 */
%   | else return 0.1521160842957337;  // std dev = 0.485, 775.000 (wgt'ed) examples reached here.  /* #neg=307 #pos=468 */
%   else if ( haswordvenue(A, G), haswordauthor(H, G) )
%   | then if ( author(I, H), venue(I, B) )
%   | | then return 0.09477111571092194;  // std dev = 0.354, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | else return 0.05841168463249369;  // std dev = 0.438, 44.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | | then if ( haswordtitle(K, L), haswordvenue(B, L) )
%   | | | then return -0.17299436979264846;  // std dev = 0.038, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | | else return 0.09017558867715222;  // std dev = 4.062, 83.000 (wgt'ed) examples reached here.  /* #neg=59 #pos=24 */
%   | | else return 0.0075614538272597365;  // std dev = 0.387, 65.000 (wgt'ed) examples reached here.  /* #neg=53 #pos=12 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordtitle(E, D) )
%   | then return 0.10521695763647665;  // std dev = 0.484, 815.000 (wgt'ed) examples reached here.  /* #neg=336 #pos=479 */
%   | else if ( haswordvenue(B, F), haswordtitle(G, F) )
%   | | then return 0.23845322244722036;  // std dev = 0.395, 10.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   | | else return 0.2685851921562314;  // std dev = 0.143, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | then if ( haswordtitle(I, J), haswordvenue(A, J) )
%   | | then return -0.1579943317645691;  // std dev = 0.084, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | | else return 0.08237589127055295;  // std dev = 0.438, 91.000 (wgt'ed) examples reached here.  /* #neg=65 #pos=26 */
%   | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | then if ( haswordauthor(M, K) )
%   | | | then return 0.12230498958519469;  // std dev = 0.669, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | | else return 0.06660996020577487;  // std dev = 4.083, 86.000 (wgt'ed) examples reached here.  /* #neg=62 #pos=24 */
%   | | else return -0.21205212579826532;  // std dev = 0.117, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordauthor(E, F), haswordvenue(A, F) )
%   | | then return 0.20073440198099693;  // std dev = 0.304, 12.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=10 */
%   | | else if ( haswordtitle(G, D) )
%   | | | then return 0.042901198900095326;  // std dev = 2.542, 26.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=14 */
%   | | | else return -0.19846046056550976;  // std dev = 1.881, 23.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=6 */
%   | else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | | then if ( author(J, I), venue(J, B) )
%   | | | then return 0.044607598800546086;  // std dev = 2.458, 30.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=15 */
%   | | | else return -0.1590763082388099;  // std dev = 1.461, 19.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=5 */
%   | | else return 0.09834363763075948;  // std dev = 0.484, 726.000 (wgt'ed) examples reached here.  /* #neg=278 #pos=448 */
%   else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | then if ( haswordtitle(L, M), haswordvenue(A, M) )
%   | | then return -0.1381600848073335;  // std dev = 0.075, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | | else return 0.06910493328266287;  // std dev = 0.437, 91.000 (wgt'ed) examples reached here.  /* #neg=65 #pos=26 */
%   | else return 0.018820276975918294;  // std dev = 0.406, 109.000 (wgt'ed) examples reached here.  /* #neg=83 #pos=26 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordtitle(E, D) )
%   | then return 0.058261845498646395;  // std dev = 0.482, 815.000 (wgt'ed) examples reached here.  /* #neg=336 #pos=479 */
%   | else return 0.19721346807315715;  // std dev = 0.276, 21.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=19 */
%   else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | then if ( author(H, G), venue(H, A) )
%   | | then if ( samebib(H, I), venue(I, B) )
%   | | | then return 0.43475073503699074;  // std dev = 0.910, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.19878737363318377;  // std dev = 0.038, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( author(J, G), venue(J, B) )
%   | | | then return -0.2097659837040169;  // std dev = 0.004, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.04080779565234631;  // std dev = 2.774, 41.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=12 */
%   | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | then if ( haswordtitle(L, M), haswordvenue(A, M) )
%   | | | then return -0.12075888837044023;  // std dev = 0.066, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | | else return 0.061664331253303374;  // std dev = 4.034, 83.000 (wgt'ed) examples reached here.  /* #neg=59 #pos=24 */
%   | | else return -0.010307269015191476;  // std dev = 0.377, 65.000 (wgt'ed) examples reached here.  /* #neg=53 #pos=12 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordtitle(F, D) )
%   | | then if ( author(G, E), venue(G, A) )
%   | | | then return -0.5208389053833226;  // std dev = 2.98e-08, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | | else return 0.24032578304806576;  // std dev = 1.883, 24.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=19 */
%   | | else return -0.1120695003921237;  // std dev = 0.394, 29.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=11 */
%   | else return 0.05264185468834791;  // std dev = 0.481, 775.000 (wgt'ed) examples reached here.  /* #neg=307 #pos=468 */
%   else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | then if ( title(J, I), venue(J, A) )
%   | | then if ( title(K, I), venue(K, B) )
%   | | | then return 0.6200508855959803;  // std dev = 1.727, 29.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=26 */
%   | | | else return -0.20619192093931654;  // std dev = 0.396, 69.000 (wgt'ed) examples reached here.  /* #neg=69 */
%   | | else return -0.11143502512885547;  // std dev = 0.045, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | | then return 0.047490047787838906;  // std dev = 0.433, 91.000 (wgt'ed) examples reached here.  /* #neg=65 #pos=26 */
%   | | else return -0.18338340317349663;  // std dev = 0.115, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */


Results
   AUC ROC   = 0.541297
   AUC PR    = 0.56219
   CLL	      = -0.688118
   Precision = 0.540898 at threshold = 0.5
   Recall    = 0.927442
   F1        = 0.683291


Total learning time: 50.233 seconds
Total inference time: 6.106 seconds
AUC ROC: 0.541297


Results scoring model
   AUC ROC   = 0.692544
   AUC PR    = 0.685185
   CLL	      = -0.605283
   Precision = 0.632111 at threshold = 0.5
   Recall    = 0.909091
   F1        = 0.745712


Total scoring time: 1.896 seconds
Refined model CLL: -0.605283


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.541297
   AUC PR    = 0.56219
   CLL	      = -0.688118
   Precision = 0.540898 at threshold = 0.5
   Recall    = 0.927442
   F1        = 0.683291


Total learning time: 55.483999999999995 seconds
Total inference time: 6.106 seconds
AUC ROC: 0.541297
Total revision time: 55.483999999999995
Best scored revision CLL: -0.605283


Dataset: 3_imdb_cora, Fold: 5, Type: Transfer (trRDN-B), Time: 00:23:48
{'AUC ROC': 0.541297, 'AUC PR': 0.56219, 'CLL': -0.688118, 'Precision': [0.540898, 0.5], 'Recall': 0.927442, 'F1': 0.683291, 'Learning time': 55.483999999999995, 'Inference time': 6.106, 'parameter_1.0': {'AUC ROC': 0.535236, 'AUC PR': 0.542776, 'CLL': -0.685676, 'Precision': [0.543247, 0.5], 'Recall': 0.952169, 'F1': 0.691798, 'Learning time': 2.155, 'Inference time': 1.955}}


