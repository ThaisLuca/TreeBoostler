Starting experiment #1 for 3_imdb_cora

Start learning from source dataset

Source train facts examples: 1078
Source train pos examples: 382
Source train neg examples: 382

WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.8581489350995083;  // std dev = 1.43e-06, 382.000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.14185106490048766;  // std dev = 5.77e-08, 55.000 (wgt'ed) examples reached here.  /* #neg=55 */
%   else return -0.14185106490048804;  // std dev = 0.000, 327.000 (wgt'ed) examples reached here.  /* #neg=327 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.7194734122109581;  // std dev = 0.000, 382.000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.12544463852839158;  // std dev = 0.000, 55.000 (wgt'ed) examples reached here.  /* #neg=55 */
%   else return -0.12544463852839202;  // std dev = 0.000, 327.000 (wgt'ed) examples reached here.  /* #neg=327 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.555366436746283;  // std dev = 0.000, 382.000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.11231637819360629;  // std dev = 3.80e-08, 55.000 (wgt'ed) examples reached here.  /* #neg=55 */
%   else return -0.11231637819360675;  // std dev = 0.000, 327.000 (wgt'ed) examples reached here.  /* #neg=327 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.417513584158312;  // std dev = 0.000, 382.000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.10159632948783623;  // std dev = 3.80e-08, 55.000 (wgt'ed) examples reached here.  /* #neg=55 */
%   else return -0.10159632948783649;  // std dev = 0.000, 327.000 (wgt'ed) examples reached here.  /* #neg=327 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.32071184716015166;  // std dev = 0.000, 382.000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.09269127618926107;  // std dev = 0.000, 55.000 (wgt'ed) examples reached here.  /* #neg=55 */
%   else return -0.09269127618926053;  // std dev = 1.13e-07, 327.000 (wgt'ed) examples reached here.  /* #neg=327 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.25517224256948734;  // std dev = 4.42e-07, 382.000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.08518475138839679;  // std dev = 1.83e-08, 55.000 (wgt'ed) examples reached here.  /* #neg=55 */
%   else return -0.08518475138839678;  // std dev = 9.19e-08, 327.000 (wgt'ed) examples reached here.  /* #neg=327 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.20975771563253462;  // std dev = 2.53e-07, 382.000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.07877675473109176;  // std dev = 1.49e-08, 55.000 (wgt'ed) examples reached here.  /* #neg=55 */
%   else return -0.07877675473109143;  // std dev = 2.98e-08, 327.000 (wgt'ed) examples reached here.  /* #neg=327 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.07324622576333703;  // std dev = 8.69e-08, 319.000 (wgt'ed) examples reached here.  /* #neg=319 */
%   else if ( movie(C, A), movie(C, B) )
%   | then return 0.17709649774527667;  // std dev = 2.60e-07, 382.000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.07324622576333704;  // std dev = 0.000, 63.000 (wgt'ed) examples reached here.  /* #neg=63 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.15274385809367164;  // std dev = 0.000, 382.000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.06842697784420268;  // std dev = 1.49e-08, 55.000 (wgt'ed) examples reached here.  /* #neg=55 */
%   else return -0.06842697784420307;  // std dev = 0.000, 327.000 (wgt'ed) examples reached here.  /* #neg=327 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.13400703000801212;  // std dev = 0.000, 382.000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.06419184008202625;  // std dev = 0.000, 55.000 (wgt'ed) examples reached here.  /* #neg=55 */
%   else return -0.06419184008202618;  // std dev = 4.71e-08, 327.000 (wgt'ed) examples reached here.  /* #neg=327 */


Starting fold 1

Target train facts examples: 35095
Target train pos examples: 2649
Target train neg examples: 2372

Target test facts examples: 7463
Target test pos	 examples: 368
Target test neg examples: 368

Amount of data: 0.2
******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- actor(A), director(B).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- actor(A), director(B).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- actor(A), director(B).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(B).;false;true
7;false;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.8581489350995118;  // std dev = 1.69e-07, 90.000 (wgt'ed) examples reached here.  /* #pos=90 */
%   else return 0.3389813556909643;  // std dev = 15.097, 913.000 (wgt'ed) examples reached here.  /* #neg=474 #pos=439 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.7194734122109537;  // std dev = 2.80e-07, 90.000 (wgt'ed) examples reached here.  /* #pos=90 */
%   else return 0.2925208449294558;  // std dev = 15.097, 913.000 (wgt'ed) examples reached here.  /* #neg=474 #pos=439 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.5553664367462835;  // std dev = 3.95e-07, 90.000 (wgt'ed) examples reached here.  /* #pos=90 */
%   else return 0.2437057991686254;  // std dev = 15.097, 913.000 (wgt'ed) examples reached here.  /* #neg=474 #pos=439 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.4175135841583101;  // std dev = 1.84e-07, 90.000 (wgt'ed) examples reached here.  /* #pos=90 */
%   else return 0.19684992237116936;  // std dev = 15.097, 913.000 (wgt'ed) examples reached here.  /* #neg=474 #pos=439 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.32071184716015033;  // std dev = 0.000, 90.000 (wgt'ed) examples reached here.  /* #pos=90 */
%   else return 0.15518593396659525;  // std dev = 15.097, 913.000 (wgt'ed) examples reached here.  /* #neg=474 #pos=439 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.2551722425694897;  // std dev = 0.000, 90.000 (wgt'ed) examples reached here.  /* #pos=90 */
%   else return 0.12023131802011297;  // std dev = 15.097, 913.000 (wgt'ed) examples reached here.  /* #neg=474 #pos=439 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.20975771563253578;  // std dev = 1.05e-07, 90.000 (wgt'ed) examples reached here.  /* #pos=90 */
%   else return 0.09207178654689836;  // std dev = 15.097, 913.000 (wgt'ed) examples reached here.  /* #neg=474 #pos=439 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.17709649774527714;  // std dev = 9.66e-08, 90.000 (wgt'ed) examples reached here.  /* #pos=90 */
%   else return 0.06998251826535634;  // std dev = 15.097, 913.000 (wgt'ed) examples reached here.  /* #neg=474 #pos=439 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.15274385809367125;  // std dev = 0.000, 90.000 (wgt'ed) examples reached here.  /* #pos=90 */
%   else return 0.05294374095992671;  // std dev = 15.097, 913.000 (wgt'ed) examples reached here.  /* #neg=474 #pos=439 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.1340070300080109;  // std dev = 6.14e-08, 90.000 (wgt'ed) examples reached here.  /* #pos=90 */
%   else return 0.03993649397389081;  // std dev = 15.097, 913.000 (wgt'ed) examples reached here.  /* #neg=474 #pos=439 */


Results
   AUC ROC   = 0.630435
   AUC PR    = 0.704854
   CLL	      = -0.610643
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.26087
   F1        = 0.413793


Total learning time: 8.483 seconds
Total inference time: 3.024 seconds
AUC ROC: 0.630435


Results scoring model
   AUC ROC   = 0.585066
   AUC PR    = 0.671556
   CLL	      = -0.643328
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.170132
   F1        = 0.290792


Total scoring time: 4.814 seconds
Parameter learned model CLL: -0.643328


Structure after Parameter Learning
[['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [1.69e-07, 0, 90], 'false': [15.097, 474, 439]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [2.8e-07, 0, 90], 'false': [15.097, 474, 439]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [3.95e-07, 0, 90], 'false': [15.097, 474, 439]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [1.84e-07, 0, 90], 'false': [15.097, 474, 439]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 90], 'false': [15.097, 474, 439]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 90], 'false': [15.097, 474, 439]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [1.05e-07, 0, 90], 'false': [15.097, 474, 439]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [9.66e-08, 0, 90], 'false': [15.097, 474, 439]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 90], 'false': [15.097, 474, 439]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [6.14e-08, 0, 90], 'false': [15.097, 474, 439]}]]
[{'': [3.1579677144893343e-16, 0.24963260389960681]}, {'': [8.684411214845669e-16, 0.24963260389959674]}, {'': [1.7368822429691337e-15, 0.24963260389962555]}, {'': [3.7500866609560843e-16, 0.24963260389961642]}, {'': [-3.3553406966449175e-16, 0.24963260389961384]}, {'': [-4.9343245538895844e-17, 0.24963260389962227]}, {'': [1.2335811384723962e-16, 0.24963260389961478]}, {'': [1.0362081563168128e-16, 0.24963260389962375]}, {'': [-7.894919286223336e-17, 0.24963260389961978]}, {'': [4.194175870806147e-17, 0.24963260389962288]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
1;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
2;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
3;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
4;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
5;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
6;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
7;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
8;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
9;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.8581489350995118;  // std dev = 1.69e-07, 90.000 (wgt'ed) examples reached here.  /* #pos=90 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.3551405115134667;  // std dev = 0.500, 831.000 (wgt'ed) examples reached here.  /* #neg=418 #pos=413 */
%   | else if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then return -0.1418510649004878;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.26199508894566564;  // std dev = 3.538, 52.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=21 */
%   | | | else return 0.07554023944733843;  // std dev = 1.978, 23.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=5 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.7194734122109537;  // std dev = 2.80e-07, 90.000 (wgt'ed) examples reached here.  /* #pos=90 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.3061976197159849;  // std dev = 0.500, 831.000 (wgt'ed) examples reached here.  /* #neg=418 #pos=413 */
%   | else if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.22702066465577223;  // std dev = 3.538, 52.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=21 */
%   | | | else return 0.06609369457227698;  // std dev = 1.978, 23.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=5 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.5553664367462835;  // std dev = 3.95e-07, 90.000 (wgt'ed) examples reached here.  /* #pos=90 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then if ( author(G, F), venue(G, A) )
%   | | | then return 0.28684563649911177;  // std dev = 2.058, 17.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=9 */
%   | | | else return -0.1425661282067706;  // std dev = 0.949, 10.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=1 */
%   | | else return 0.2586776528877641;  // std dev = 0.500, 804.000 (wgt'ed) examples reached here.  /* #neg=401 #pos=403 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return 0.3432333648631023;  // std dev = 2.108, 18.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=10 */
%   | | | else return 0.061554638546006055;  // std dev = 1.969, 23.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=5 */
%   | | else if ( haswordvenue(B, K), haswordauthor(L, K) )
%   | | | then return -0.16879460552289324;  // std dev = 0.111, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | | else return 0.12003126335156272;  // std dev = 2.697, 34.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=11 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.4175135841583101;  // std dev = 1.84e-07, 90.000 (wgt'ed) examples reached here.  /* #pos=90 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then if ( author(G, F), venue(G, A) )
%   | | | then return 0.23035976450560475;  // std dev = 2.058, 17.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=9 */
%   | | | else return -0.11734126382680994;  // std dev = 0.949, 10.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=1 */
%   | | else return 0.2080627313205293;  // std dev = 0.500, 804.000 (wgt'ed) examples reached here.  /* #neg=401 #pos=403 */
%   | else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | | then return -0.11498155606318695;  // std dev = 0.032, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | | | then return 0.15888366060312464;  // std dev = 3.494, 52.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=21 */
%   | | | else return 0.051559298248582235;  // std dev = 1.972, 23.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=5 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.32071184716015033;  // std dev = 0.000, 90.000 (wgt'ed) examples reached here.  /* #pos=90 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then if ( haswordtitle(G, E) )
%   | | | then return 0.3139789870141346;  // std dev = 1.751, 14.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=9 */
%   | | | else return -0.33806672186730274;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | else return 0.16326752870263933;  // std dev = 0.499, 808.000 (wgt'ed) examples reached here.  /* #neg=404 #pos=404 */
%   | else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | | then return -0.10380308615308735;  // std dev = 0.029, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | | | then return 0.14775360890262;  // std dev = 2.930, 39.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=15 */
%   | | | else return 0.05375335709243708;  // std dev = 2.726, 36.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=11 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.2551722425694897;  // std dev = 0.000, 90.000 (wgt'ed) examples reached here.  /* #pos=90 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordtitle(F, D) )
%   | | then if ( author(G, E), title(G, F) )
%   | | | then return 0.25544159716593223;  // std dev = 1.793, 14.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=9 */
%   | | | else return -0.11522466909930858;  // std dev = 0.947, 10.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=1 */
%   | | else if ( author(H, E), venue(H, A) )
%   | | | then return -0.3240328145364956;  // std dev = 0.263, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | | else return -0.11532389825999718;  // std dev = 0.123, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else if ( haswordvenue(A, I), haswordvenue(B, I) )
%   | | then return 0.1264129662626641;  // std dev = 0.499, 804.000 (wgt'ed) examples reached here.  /* #neg=401 #pos=403 */
%   | | else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | | | then return 0.11042193076042832;  // std dev = 3.477, 52.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=21 */
%   | | | else return 0.023228387340267113;  // std dev = 1.969, 23.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=5 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.20975771563253578;  // std dev = 1.05e-07, 90.000 (wgt'ed) examples reached here.  /* #pos=90 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordtitle(F, D) )
%   | | then if ( author(G, E), title(G, F) )
%   | | | then return 0.1933710593040075;  // std dev = 1.793, 14.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=9 */
%   | | | else return -0.09656666612390563;  // std dev = 0.946, 10.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=1 */
%   | | else if ( author(H, E), venue(H, A) )
%   | | | then return -0.26184350915285276;  // std dev = 0.220, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | | else return -0.10432712746754569;  // std dev = 0.114, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else if ( haswordvenue(A, I), haswordvenue(B, I) )
%   | | then if ( haswordvenue(B, J), haswordauthor(K, J) )
%   | | | then return 0.05045548823208158;  // std dev = 2.025, 21.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=9 */
%   | | | else return 0.0976063364898282;  // std dev = 13.991, 783.000 (wgt'ed) examples reached here.  /* #neg=389 #pos=394 */
%   | | else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | | | then return 0.10709696778285355;  // std dev = 2.913, 39.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=15 */
%   | | | else return 0.022401212687791796;  // std dev = 2.722, 36.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=11 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.17709649774527714;  // std dev = 9.66e-08, 90.000 (wgt'ed) examples reached here.  /* #pos=90 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordtitle(F, D) )
%   | | then if ( author(G, E), title(G, F) )
%   | | | then return 0.14520119633242295;  // std dev = 1.793, 14.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=9 */
%   | | | else return -0.08188143408584411;  // std dev = 0.946, 10.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=1 */
%   | | else if ( author(H, E), venue(H, A) )
%   | | | then return -0.21697889444689847;  // std dev = 0.187, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | | else return -0.09517269746242768;  // std dev = 0.105, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else if ( haswordvenue(A, I), haswordvenue(B, I) )
%   | | then if ( haswordvenue(B, J), haswordauthor(K, J) )
%   | | | then return 0.03880334998174491;  // std dev = 2.022, 21.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=9 */
%   | | | else return 0.0738749507624746;  // std dev = 13.991, 783.000 (wgt'ed) examples reached here.  /* #neg=389 #pos=394 */
%   | | else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | | | then return 0.08588466646270064;  // std dev = 2.909, 39.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=15 */
%   | | | else return 0.01785989683279198;  // std dev = 2.721, 36.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=11 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.15274385809367125;  // std dev = 0.000, 90.000 (wgt'ed) examples reached here.  /* #pos=90 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then if ( haswordtitle(G, E) )
%   | | | then return 0.03908278126909429;  // std dev = 2.070, 23.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=10 */
%   | | | else return -0.2161163537881819;  // std dev = 0.052, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return 0.05501129559652144;  // std dev = 0.499, 804.000 (wgt'ed) examples reached here.  /* #neg=401 #pos=403 */
%   | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(A, J) )
%   | | | then return 0.1440415437644771;  // std dev = 2.108, 18.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=10 */
%   | | | else return 0.012355802535804842;  // std dev = 2.716, 39.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=11 */
%   | | else if ( haswordvenue(B, K), haswordauthor(L, K) )
%   | | | then return -0.04320788965094204;  // std dev = 0.889, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | | | else return -0.005934027041959833;  // std dev = 1.751, 19.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=4 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.1340070300080109;  // std dev = 6.14e-08, 90.000 (wgt'ed) examples reached here.  /* #pos=90 */
%   else if ( haswordvenue(A, D), haswordtitle(E, D) )
%   | then if ( title(F, E), venue(F, B) )
%   | | then if ( samebib(F, G), venue(G, A) )
%   | | | then return 0.3635446973594336;  // std dev = 8.289, 469.000 (wgt'ed) examples reached here.  /* #neg=83 #pos=386 */
%   | | | else return -0.4086135513827381;  // std dev = 3.480, 363.000 (wgt'ed) examples reached here.  /* #neg=352 #pos=11 */
%   | | else if ( haswordvenue(B, D) )
%   | | | then return 0.3721919155405153;  // std dev = 1.826, 24.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=20 */
%   | | | else return 0.12862689851129708;  // std dev = 1.553, 11.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=6 */
%   | else if ( haswordvenue(A, H), haswordvenue(B, H) )
%   | | then return 0.5388585822071821;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return 0.001979286643953334;  // std dev = 0.426, 41.000 (wgt'ed) examples reached here.  /* #neg=30 #pos=11 */


Results
   AUC ROC   = 0.846718
   AUC PR    = 0.86051
   CLL	      = -0.516827
   Precision = 0.824934 at threshold = 0.5
   Recall    = 0.845109
   F1        = 0.834899


Total learning time: 453.409 seconds
Total inference time: 4.798 seconds
AUC ROC: 0.846718


Results scoring model
   AUC ROC   = 0.892904
   AUC PR    = 0.897302
   CLL	      = -0.515288
   Precision = 0.851979 at threshold = 0.5
   Recall    = 0.935728
   F1        = 0.891892


Total scoring time: 11.322 seconds
Refined model CLL: -0.515288


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.846718
   AUC PR    = 0.86051
   CLL	      = -0.516827
   Precision = 0.824934 at threshold = 0.5
   Recall    = 0.845109
   F1        = 0.834899


Total learning time: 478.028 seconds
Total inference time: 4.798 seconds
AUC ROC: 0.846718
Total revision time: 478.028
Best scored revision CLL: -0.515288


Dataset: 3_imdb_cora, Fold: 1, Type: Transfer (trRDN-B), Time: 00:31:19
{'AUC ROC': 0.846718, 'AUC PR': 0.86051, 'CLL': -0.516827, 'Precision': [0.824934, 0.5], 'Recall': 0.845109, 'F1': 0.834899, 'Learning time': 478.028, 'Inference time': 4.798, 'parameter_0.2': {'AUC ROC': 0.630435, 'AUC PR': 0.704854, 'CLL': -0.610643, 'Precision': [1.0, 0.5], 'Recall': 0.26087, 'F1': 0.413793, 'Learning time': 8.483, 'Inference time': 3.024}}


Amount of data: 0.4
******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- actor(A), director(B).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- actor(A), director(B).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- actor(A), director(B).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(B).;false;true
7;false;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.8581489350995095;  // std dev = 1.08e-06, 177.000 (wgt'ed) examples reached here.  /* #pos=177 */
%   else return 0.3401161482142614;  // std dev = 21.375, 1,830.000 (wgt'ed) examples reached here.  /* #neg=948 #pos=882 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.7194734122109566;  // std dev = 0.000, 177.000 (wgt'ed) examples reached here.  /* #pos=177 */
%   else return 0.29348212269163576;  // std dev = 21.375, 1,830.000 (wgt'ed) examples reached here.  /* #neg=948 #pos=882 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.5553664367462833;  // std dev = 5.84e-07, 177.000 (wgt'ed) examples reached here.  /* #pos=177 */
%   else return 0.2444612087338976;  // std dev = 21.375, 1,830.000 (wgt'ed) examples reached here.  /* #neg=948 #pos=882 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.4175135841583095;  // std dev = 3.82e-07, 177.000 (wgt'ed) examples reached here.  /* #pos=177 */
%   else return 0.19740454816402325;  // std dev = 21.375, 1,830.000 (wgt'ed) examples reached here.  /* #neg=948 #pos=882 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.32071184716014917;  // std dev = 3.53e-07, 177.000 (wgt'ed) examples reached here.  /* #pos=177 */
%   else return 0.15557229904489814;  // std dev = 21.375, 1,830.000 (wgt'ed) examples reached here.  /* #neg=948 #pos=882 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.2551722425694888;  // std dev = 3.58e-07, 177.000 (wgt'ed) examples reached here.  /* #pos=177 */
%   else return 0.12049122688064962;  // std dev = 21.375, 1,830.000 (wgt'ed) examples reached here.  /* #neg=948 #pos=882 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.20975771563253506;  // std dev = 3.00e-07, 177.000 (wgt'ed) examples reached here.  /* #pos=177 */
%   else return 0.09224319615661243;  // std dev = 21.375, 1,830.000 (wgt'ed) examples reached here.  /* #neg=948 #pos=882 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.17709649774527825;  // std dev = 0.000, 177.000 (wgt'ed) examples reached here.  /* #pos=177 */
%   else return 0.0700945494670855;  // std dev = 21.375, 1,830.000 (wgt'ed) examples reached here.  /* #neg=948 #pos=882 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.1527438580936715;  // std dev = 0.000, 177.000 (wgt'ed) examples reached here.  /* #pos=177 */
%   else return 0.05301679453337095;  // std dev = 21.375, 1,830.000 (wgt'ed) examples reached here.  /* #neg=948 #pos=882 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.13400703000801098;  // std dev = 7.88e-08, 177.000 (wgt'ed) examples reached here.  /* #pos=177 */
%   else return 0.0399841879694491;  // std dev = 21.375, 1,830.000 (wgt'ed) examples reached here.  /* #neg=948 #pos=882 */


Results
   AUC ROC   = 0.630435
   AUC PR    = 0.704854
   CLL	      = -0.610745
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.26087
   F1        = 0.413793


Total learning time: 10.943 seconds
Total inference time: 3.043 seconds
AUC ROC: 0.630435


Results scoring model
   AUC ROC   = 0.583569
   AUC PR    = 0.669883
   CLL	      = -0.644281
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.167139
   F1        = 0.286408


Total scoring time: 5.019 seconds
Parameter learned model CLL: -0.644281


Structure after Parameter Learning
[['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [1.08e-06, 0, 177], 'false': [21.375, 948, 882]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 177], 'false': [21.375, 948, 882]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [5.84e-07, 0, 177], 'false': [21.375, 948, 882]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [3.82e-07, 0, 177], 'false': [21.375, 948, 882]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [3.53e-07, 0, 177], 'false': [21.375, 948, 882]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [3.58e-07, 0, 177], 'false': [21.375, 948, 882]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [3e-07, 0, 177], 'false': [21.375, 948, 882]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 177], 'false': [21.375, 948, 882]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 177], 'false': [21.375, 948, 882]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [7.88e-08, 0, 177], 'false': [21.375, 948, 882]}]]
[{'': [6.58355981156251e-15, 0.2496748185971749]}, {'': [-3.2114925910061025e-15, 0.24967481859713186]}, {'': [1.9268955546036615e-15, 0.24967481859716795]}, {'': [8.229449764453138e-16, 0.24967481859715038]}, {'': [7.02514004282585e-16, 0.24967481859714052]}, {'': [7.225858329763731e-16, 0.2496748185971581]}, {'': [5.068136745181505e-16, 0.24967481859717028]}, {'': [-1.6559258672375216e-16, 0.2496748185971519]}, {'': [-4.516161456102332e-17, 0.2496748185971634]}, {'': [3.512570021412925e-17, 0.24967481859716453]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
1;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
2;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
3;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
4;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
5;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
6;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
7;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
8;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
9;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true


Refining candidate
***************************
Starting experiment #1 for 3_imdb_cora

Start learning from source dataset

Source train facts examples: 1078
Source train pos examples: 382
Source train neg examples: 382

WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.8581489350995083;  // std dev = 1.43e-06, 382.000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.14185106490048766;  // std dev = 5.77e-08, 55.000 (wgt'ed) examples reached here.  /* #neg=55 */
%   else return -0.14185106490048804;  // std dev = 0.000, 327.000 (wgt'ed) examples reached here.  /* #neg=327 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.7194734122109581;  // std dev = 0.000, 382.000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.12544463852839158;  // std dev = 0.000, 55.000 (wgt'ed) examples reached here.  /* #neg=55 */
%   else return -0.12544463852839202;  // std dev = 0.000, 327.000 (wgt'ed) examples reached here.  /* #neg=327 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.555366436746283;  // std dev = 0.000, 382.000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.11231637819360629;  // std dev = 3.80e-08, 55.000 (wgt'ed) examples reached here.  /* #neg=55 */
%   else return -0.11231637819360675;  // std dev = 0.000, 327.000 (wgt'ed) examples reached here.  /* #neg=327 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.417513584158312;  // std dev = 0.000, 382.000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.10159632948783623;  // std dev = 3.80e-08, 55.000 (wgt'ed) examples reached here.  /* #neg=55 */
%   else return -0.10159632948783649;  // std dev = 0.000, 327.000 (wgt'ed) examples reached here.  /* #neg=327 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.32071184716015166;  // std dev = 0.000, 382.000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.09269127618926107;  // std dev = 0.000, 55.000 (wgt'ed) examples reached here.  /* #neg=55 */
%   else return -0.09269127618926053;  // std dev = 1.13e-07, 327.000 (wgt'ed) examples reached here.  /* #neg=327 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.25517224256948734;  // std dev = 4.42e-07, 382.000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.08518475138839679;  // std dev = 1.83e-08, 55.000 (wgt'ed) examples reached here.  /* #neg=55 */
%   else return -0.08518475138839678;  // std dev = 9.19e-08, 327.000 (wgt'ed) examples reached here.  /* #neg=327 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.20975771563253462;  // std dev = 2.53e-07, 382.000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.07877675473109176;  // std dev = 1.49e-08, 55.000 (wgt'ed) examples reached here.  /* #neg=55 */
%   else return -0.07877675473109143;  // std dev = 2.98e-08, 327.000 (wgt'ed) examples reached here.  /* #neg=327 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.17709649774527667;  // std dev = 2.60e-07, 382.000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.07324622576333704;  // std dev = 1.05e-08, 55.000 (wgt'ed) examples reached here.  /* #neg=55 */
%   else return -0.07324622576333703;  // std dev = 8.56e-08, 327.000 (wgt'ed) examples reached here.  /* #neg=327 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.15274385809367164;  // std dev = 0.000, 382.000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.06842697784420268;  // std dev = 1.49e-08, 55.000 (wgt'ed) examples reached here.  /* #neg=55 */
%   else return -0.06842697784420307;  // std dev = 0.000, 327.000 (wgt'ed) examples reached here.  /* #neg=327 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.13400703000801212;  // std dev = 0.000, 382.000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.06419184008202625;  // std dev = 0.000, 55.000 (wgt'ed) examples reached here.  /* #neg=55 */
%   else return -0.06419184008202618;  // std dev = 4.71e-08, 327.000 (wgt'ed) examples reached here.  /* #neg=327 */


Starting fold 1

Target train facts examples: 35095
Target train pos examples: 2649
Target train neg examples: 2372

Target test facts examples: 7463
Target test pos	 examples: 368
Target test neg examples: 368

Amount of data: 0.2
******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- actor(A), director(B).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- actor(A), director(B).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- actor(A), director(B).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- director(B), actor(A).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.8581489350995122;  // std dev = 0.000, 83.000 (wgt'ed) examples reached here.  /* #pos=83 */
%   else return 0.3429315437951597;  // std dev = 15.159, 920.000 (wgt'ed) examples reached here.  /* #neg=474 #pos=446 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.7194734122109537;  // std dev = 2.67e-07, 83.000 (wgt'ed) examples reached here.  /* #pos=83 */
%   else return 0.2958665019641787;  // std dev = 15.159, 920.000 (wgt'ed) examples reached here.  /* #neg=474 #pos=446 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.5553664367462835;  // std dev = 3.53e-07, 83.000 (wgt'ed) examples reached here.  /* #pos=83 */
%   else return 0.24633365628207435;  // std dev = 15.159, 920.000 (wgt'ed) examples reached here.  /* #neg=474 #pos=446 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.41751358415831036;  // std dev = 1.12e-07, 83.000 (wgt'ed) examples reached here.  /* #pos=83 */
%   else return 0.19877794188421846;  // std dev = 15.159, 920.000 (wgt'ed) examples reached here.  /* #neg=474 #pos=446 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.3207118471601503;  // std dev = 0.000, 83.000 (wgt'ed) examples reached here.  /* #pos=83 */
%   else return 0.15652811523888624;  // std dev = 15.159, 920.000 (wgt'ed) examples reached here.  /* #neg=474 #pos=446 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.2551722425694897;  // std dev = 0.000, 83.000 (wgt'ed) examples reached here.  /* #pos=83 */
%   else return 0.12113385390436328;  // std dev = 15.159, 920.000 (wgt'ed) examples reached here.  /* #neg=474 #pos=446 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.20975771563253587;  // std dev = 0.000, 83.000 (wgt'ed) examples reached here.  /* #pos=83 */
%   else return 0.09266709185906734;  // std dev = 15.159, 920.000 (wgt'ed) examples reached here.  /* #neg=474 #pos=446 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.17709649774527714;  // std dev = 4.21e-08, 83.000 (wgt'ed) examples reached here.  /* #pos=83 */
%   else return 0.07037193673063658;  // std dev = 15.159, 920.000 (wgt'ed) examples reached here.  /* #neg=474 #pos=446 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.1527438580936712;  // std dev = 0.000, 83.000 (wgt'ed) examples reached here.  /* #pos=83 */
%   else return 0.05319811184030046;  // std dev = 15.159, 920.000 (wgt'ed) examples reached here.  /* #neg=474 #pos=446 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.1340070300080109;  // std dev = 5.77e-08, 83.000 (wgt'ed) examples reached here.  /* #pos=83 */
%   else return 0.04010301483732163;  // std dev = 15.159, 920.000 (wgt'ed) examples reached here.  /* #neg=474 #pos=446 */


Results
   AUC ROC   = 0.630435
   AUC PR    = 0.704854
   CLL	      = -0.611016
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.26087
   F1        = 0.413793


Total learning time: 4.343 seconds
Total inference time: 1.443 seconds
AUC ROC: 0.630435


Results scoring model
   AUC ROC   = 0.57845
   AUC PR    = 0.663277
   CLL	      = -0.647546
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.1569
   F1        = 0.271242


Total scoring time: 2.14 seconds
Parameter learned model CLL: -0.647546


Structure after Parameter Learning
[['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 83], 'false': [15.159, 474, 446]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [2.67e-07, 0, 83], 'false': [15.159, 474, 446]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [3.53e-07, 0, 83], 'false': [15.159, 474, 446]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [1.12e-07, 0, 83], 'false': [15.159, 474, 446]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 83], 'false': [15.159, 474, 446]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 83], 'false': [15.159, 474, 446]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 83], 'false': [15.159, 474, 446]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [4.21e-08, 0, 83], 'false': [15.159, 474, 446]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 83], 'false': [15.159, 474, 446]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [5.77e-08, 0, 83], 'false': [15.159, 474, 446]}]]
[{'': [-5.136453511518796e-16, 0.24976843100188026]}, {'': [8.5607558525313275e-16, 0.24976843100188761]}, {'': [1.4981322741929824e-15, 0.24976843100190974]}, {'': [1.4981322741929822e-16, 0.24976843100189347]}, {'': [-3.424302341012531e-16, 0.24976843100189197]}, {'': [-5.3504724078320797e-17, 0.24976843100189497]}, {'': [-1.33761810195802e-16, 0.24976843100188476]}, {'': [2.140188963132832e-17, 0.24976843100188414]}, {'': [-5.3504724078320797e-17, 0.2497684310018891]}, {'': [4.01285430587406e-17, 0.2497684310018925]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
1;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
2;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
3;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
4;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
5;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
6;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
7;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
8;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
9;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.8581489350995122;  // std dev = 0.000, 83.000 (wgt'ed) examples reached here.  /* #pos=83 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then if ( title(F, E), venue(F, A) )
%   | | | then return 0.36409345293306117;  // std dev = 13.756, 757.000 (wgt'ed) examples reached here.  /* #neg=374 #pos=383 */
%   | | | else return 0.39148226843284567;  // std dev = 2.733, 30.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=16 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.6581489350995123;  // std dev = 1.549, 15.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=12 */
%   | | | else return 0.30259337954395676;  // std dev = 1.491, 9.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=4 */
%   | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | then if ( haswordauthor(K, I) )
%   | | | then return 0.4581489350995122;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.22021790061675325;  // std dev = 3.660, 58.000 (wgt'ed) examples reached here.  /* #neg=37 #pos=21 */
%   | | else if ( haswordvenue(A, L), haswordauthor(M, L) )
%   | | | then return -0.14185106490048777;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | | else return 0.028880642416585518;  // std dev = 2.409, 41.000 (wgt'ed) examples reached here.  /* #neg=34 #pos=7 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.7194734122109537;  // std dev = 2.67e-07, 83.000 (wgt'ed) examples reached here.  /* #pos=83 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then if ( title(F, E), venue(F, A) )
%   | | | then return 0.313764474129941;  // std dev = 13.756, 757.000 (wgt'ed) examples reached here.  /* #neg=374 #pos=383 */
%   | | | else return 0.336865379051268;  // std dev = 2.733, 30.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=16 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.5580193346218546;  // std dev = 1.549, 15.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=12 */
%   | | | else return 0.2616318086752123;  // std dev = 1.491, 9.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=4 */
%   | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | then if ( haswordauthor(K, I) )
%   | | | then return 0.3927941835770488;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.1912426212402062;  // std dev = 3.660, 58.000 (wgt'ed) examples reached here.  /* #neg=37 #pos=21 */
%   | | else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | | | then return 0.018779973013668027;  // std dev = 2.417, 43.000 (wgt'ed) examples reached here.  /* #neg=36 #pos=7 */
%   | | | else return -0.13209748605915345;  // std dev = 0.016, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.5553664367462835;  // std dev = 3.53e-07, 83.000 (wgt'ed) examples reached here.  /* #pos=83 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then if ( title(F, E), venue(F, A) )
%   | | | then return 0.2603303506094355;  // std dev = 13.756, 757.000 (wgt'ed) examples reached here.  /* #neg=374 #pos=383 */
%   | | | else return 0.27824435389960733;  // std dev = 2.733, 30.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=16 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.44194861002444086;  // std dev = 1.549, 15.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=12 */
%   | | | else return 0.2192721473492705;  // std dev = 1.491, 9.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=4 */
%   | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | then if ( haswordtitle(J, K), haswordauthor(L, K) )
%   | | | then return 0.1818929113173816;  // std dev = 3.563, 54.000 (wgt'ed) examples reached here.  /* #neg=33 #pos=21 */
%   | | | else return 0.13369231012278032;  // std dev = 1.414, 9.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=3 */
%   | | else if ( haswordvenue(A, M), haswordtitle(N, M) )
%   | | | then return 0.016449918173399403;  // std dev = 2.417, 43.000 (wgt'ed) examples reached here.  /* #neg=36 #pos=7 */
%   | | | else return -0.1176848005468682;  // std dev = 0.015, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.41751358415831036;  // std dev = 1.12e-07, 83.000 (wgt'ed) examples reached here.  /* #pos=83 */
%   else if ( haswordvenue(B, D), haswordtitle(E, D) )
%   | then if ( title(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.5163590444194869;  // std dev = 8.647, 493.000 (wgt'ed) examples reached here.  /* #neg=92 #pos=401 */
%   | | | else return -0.2658627668891774;  // std dev = 2.974, 327.000 (wgt'ed) examples reached here.  /* #neg=318 #pos=9 */
%   | | else if ( title(H, E), venue(H, B) )
%   | | | then return 0.34246668929139173;  // std dev = 1.608, 12.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=8 */
%   | | | else return 0.22074057953675136;  // std dev = 2.750, 33.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=17 */
%   | else if ( haswordvenue(A, I), haswordvenue(B, I) )
%   | | then return 0.17873524574687283;  // std dev = 0.497, 9.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=4 */
%   | | else if ( haswordvenue(A, J), haswordauthor(K, J) )
%   | | | then return -0.11781828784995559;  // std dev = 0.032, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | | else return 0.02169614981316501;  // std dev = 2.407, 41.000 (wgt'ed) examples reached here.  /* #neg=34 #pos=7 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.3207118471601503;  // std dev = 0.000, 83.000 (wgt'ed) examples reached here.  /* #pos=83 */
%   else if ( haswordvenue(B, D), haswordtitle(E, D) )
%   | then if ( title(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.39927228335504233;  // std dev = 8.648, 493.000 (wgt'ed) examples reached here.  /* #neg=92 #pos=401 */
%   | | | else return -0.21401184742557397;  // std dev = 2.970, 327.000 (wgt'ed) examples reached here.  /* #neg=318 #pos=9 */
%   | | else if ( haswordauthor(H, D) )
%   | | | then return 0.3038740934646163;  // std dev = 1.135, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   | | | else return 0.17857808625868474;  // std dev = 2.967, 38.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=20 */
%   | else if ( haswordvenue(A, I), haswordvenue(B, I) )
%   | | then return 0.1424392447767628;  // std dev = 0.497, 9.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=4 */
%   | | else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | | | then return 0.012678913406204894;  // std dev = 2.414, 43.000 (wgt'ed) examples reached here.  /* #neg=36 #pos=7 */
%   | | | else return -0.09999092146868528;  // std dev = 0.024, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.2551722425694897;  // std dev = 0.000, 83.000 (wgt'ed) examples reached here.  /* #pos=83 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then if ( title(F, E), venue(F, B) )
%   | | | then return 0.11267104521902123;  // std dev = 10.906, 759.000 (wgt'ed) examples reached here.  /* #neg=374 #pos=385 */
%   | | | else return 0.14695765772395225;  // std dev = 2.641, 28.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=14 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.18636772761571913;  // std dev = 1.293, 15.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=12 */
%   | | | else return 0.11159559999632969;  // std dev = 1.491, 9.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=4 */
%   | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | then if ( haswordtitle(J, K), haswordauthor(L, K) )
%   | | | then return 0.08230696636098284;  // std dev = 2.976, 54.000 (wgt'ed) examples reached here.  /* #neg=33 #pos=21 */
%   | | | else return 0.03505891784420786;  // std dev = 1.414, 9.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=3 */
%   | | else if ( haswordvenue(A, M), haswordauthor(N, M) )
%   | | | then return -0.1037663884100749;  // std dev = 0.039, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | | else return 0.017563948727130928;  // std dev = 2.407, 41.000 (wgt'ed) examples reached here.  /* #neg=34 #pos=7 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.20975771563253587;  // std dev = 0.000, 83.000 (wgt'ed) examples reached here.  /* #pos=83 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then if ( title(F, E), venue(F, B) )
%   | | | then return 0.08804391186566402;  // std dev = 10.833, 759.000 (wgt'ed) examples reached here.  /* #neg=374 #pos=385 */
%   | | | else return 0.11478085245591894;  // std dev = 2.643, 28.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=14 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.14546722594013667;  // std dev = 1.293, 15.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=12 */
%   | | | else return 0.08637026299843623;  // std dev = 1.491, 9.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=4 */
%   | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | then if ( haswordauthor(K, I) )
%   | | | then return 0.13997508055324695;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.05372147016493408;  // std dev = 3.088, 58.000 (wgt'ed) examples reached here.  /* #neg=37 #pos=21 */
%   | | else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | | | then return 0.009634573574499991;  // std dev = 2.412, 43.000 (wgt'ed) examples reached here.  /* #neg=36 #pos=7 */
%   | | | else return -0.08692320647989954;  // std dev = 0.029, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.17709649774527714;  // std dev = 4.21e-08, 83.000 (wgt'ed) examples reached here.  /* #pos=83 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then if ( title(F, E), venue(F, B) )
%   | | | then return 0.06857573660797216;  // std dev = 10.786, 759.000 (wgt'ed) examples reached here.  /* #neg=374 #pos=385 */
%   | | | else return 0.08897763170917664;  // std dev = 2.644, 28.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=14 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.11503824861493533;  // std dev = 1.296, 15.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=12 */
%   | | | else return 0.06628370899125427;  // std dev = 1.491, 9.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=4 */
%   | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | then if ( haswordauthor(K, I) )
%   | | | then return 0.10506663909214412;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.043013488941553796;  // std dev = 3.078, 58.000 (wgt'ed) examples reached here.  /* #neg=37 #pos=21 */
%   | | else if ( haswordvenue(A, L), haswordauthor(M, L) )
%   | | | then return -0.09276722568720948;  // std dev = 0.043, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | | else return 0.014229408170857263;  // std dev = 2.406, 41.000 (wgt'ed) examples reached here.  /* #neg=34 #pos=7 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.1527438580936712;  // std dev = 0.000, 83.000 (wgt'ed) examples reached here.  /* #pos=83 */
%   else if ( haswordvenue(B, D), haswordtitle(E, D) )
%   | then if ( haswordauthor(F, D) )
%   | | then if ( author(G, F), title(G, E) )
%   | | | then return 0.2512015072369394;  // std dev = 1.012, 12.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=9 */
%   | | | else return 0.13008250811276684;  // std dev = 1.512, 16.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=10 */
%   | | else if ( title(H, E), venue(H, B) )
%   | | | then return 0.04761342158379222;  // std dev = 11.084, 803.000 (wgt'ed) examples reached here.  /* #neg=403 #pos=400 */
%   | | | else return 0.08303519124353116;  // std dev = 2.868, 34.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=16 */
%   | else if ( haswordvenue(A, I), haswordauthor(J, I) )
%   | | then return -0.08528001377127618;  // std dev = 0.040, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( haswordvenue(B, K), haswordauthor(L, K) )
%   | | | then return 0.0069162773131428434;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | | | else return 0.020903179844019622;  // std dev = 2.681, 44.000 (wgt'ed) examples reached here.  /* #neg=34 #pos=10 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.1340070300080109;  // std dev = 5.77e-08, 83.000 (wgt'ed) examples reached here.  /* #pos=83 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then if ( haswordtitle(G, E), haswordtitle(G, D) )
%   | | | then return 0.16627944580980142;  // std dev = 1.614, 25.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=16 */
%   | | | else return -0.25167384265830023;  // std dev = 0.776, 8.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */
%   | | else if ( haswordtitle(H, D) )
%   | | | then return 0.04040408391556044;  // std dev = 10.861, 755.000 (wgt'ed) examples reached here.  /* #neg=373 #pos=382 */
%   | | | else return 0.09039552709211991;  // std dev = 1.899, 23.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=16 */
%   | else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | | then if ( haswordtitle(K, I) )
%   | | | then return 0.04648528415979016;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return -0.09166410714029832;  // std dev = 1.031, 9.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=1 */
%   | | else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | | | then return 0.00569421352390274;  // std dev = 3.086, 62.000 (wgt'ed) examples reached here.  /* #neg=47 #pos=15 */
%   | | | else return 0.054787188707793456;  // std dev = 2.118, 33.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=12 */


Results
   AUC ROC   = 0.873915
   AUC PR    = 0.884221
   CLL	      = -0.468974
   Precision = 0.843836 at threshold = 0.5
   Recall    = 0.836957
   F1        = 0.840382


Total learning time: 1027.822 seconds
Total inference time: 7.536 seconds
AUC ROC: 0.873915


Results scoring model
   AUC ROC   = 0.902379
   AUC PR    = 0.897965
   CLL	      = -0.461408
   Precision = 0.832765 at threshold = 0.5
   Recall    = 0.922495
   F1        = 0.875336


Total scoring time: 23.297 seconds
Refined model CLL: -0.461408


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.873915
   AUC PR    = 0.884221
   CLL	      = -0.468974
   Precision = 0.843836 at threshold = 0.5
   Recall    = 0.836957
   F1        = 0.840382


Total learning time: 1057.6019999999999 seconds
Total inference time: 7.536 seconds
AUC ROC: 0.873915
Total revision time: 1057.6019999999999
Best scored revision CLL: -0.461408


Dataset: 3_imdb_cora, Fold: 1, Type: Transfer (trRDN-B), Time: 00:17:54
{'AUC ROC': 0.873915, 'AUC PR': 0.884221, 'CLL': -0.468974, 'Precision': [0.843836, 0.5], 'Recall': 0.836957, 'F1': 0.840382, 'Learning time': 1057.6019999999999, 'Inference time': 7.536, 'parameter_0.2': {'AUC ROC': 0.630435, 'AUC PR': 0.704854, 'CLL': -0.611016, 'Precision': [1.0, 0.5], 'Recall': 0.26087, 'F1': 0.413793, 'Learning time': 4.343, 'Inference time': 1.443}}


Amount of data: 0.4
******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- actor(A), director(B).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- actor(A), director(B).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- actor(A), director(B).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- director(B), actor(A).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.8581489350995098;  // std dev = 9.46e-07, 153.000 (wgt'ed) examples reached here.  /* #pos=153 */
%   else return 0.34682207425808337;  // std dev = 21.524, 1,854.000 (wgt'ed) examples reached here.  /* #neg=948 #pos=906 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.7194734122109563;  // std dev = 0.000, 153.000 (wgt'ed) examples reached here.  /* #pos=153 */
%   else return 0.29916017723998056;  // std dev = 21.524, 1,854.000 (wgt'ed) examples reached here.  /* #neg=948 #pos=906 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.5553664367462833;  // std dev = 5.33e-07, 153.000 (wgt'ed) examples reached here.  /* #pos=153 */
%   else return 0.24891714893490424;  // std dev = 21.524, 1,854.000 (wgt'ed) examples reached here.  /* #neg=948 #pos=906 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.41751358415830886;  // std dev = 4.62e-07, 153.000 (wgt'ed) examples reached here.  /* #pos=153 */
%   else return 0.20066968770335983;  // std dev = 21.524, 1,854.000 (wgt'ed) examples reached here.  /* #neg=948 #pos=906 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.3207118471601497;  // std dev = 2.89e-07, 153.000 (wgt'ed) examples reached here.  /* #pos=153 */
%   else return 0.15784256836573016;  // std dev = 21.524, 1,854.000 (wgt'ed) examples reached here.  /* #neg=948 #pos=906 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.25517224256949045;  // std dev = 0.000, 153.000 (wgt'ed) examples reached here.  /* #pos=153 */
%   else return 0.12201683816370573;  // std dev = 21.524, 1,854.000 (wgt'ed) examples reached here.  /* #neg=948 #pos=906 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.2097577156325352;  // std dev = 2.49e-07, 153.000 (wgt'ed) examples reached here.  /* #pos=153 */
%   else return 0.09324979093375685;  // std dev = 21.524, 1,854.000 (wgt'ed) examples reached here.  /* #neg=948 #pos=906 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.1770964977452782;  // std dev = 0.000, 153.000 (wgt'ed) examples reached here.  /* #pos=153 */
%   else return 0.07075407467887407;  // std dev = 21.524, 1,854.000 (wgt'ed) examples reached here.  /* #neg=948 #pos=906 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.15274385809367147;  // std dev = 0.000, 153.000 (wgt'ed) examples reached here.  /* #pos=153 */
%   else return 0.053448964255021096;  // std dev = 21.524, 1,854.000 (wgt'ed) examples reached here.  /* #neg=948 #pos=906 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.134007030008011;  // std dev = 6.99e-08, 153.000 (wgt'ed) examples reached here.  /* #pos=153 */
%   else return 0.04026849434133455;  // std dev = 21.524, 1,854.000 (wgt'ed) examples reached here.  /* #neg=948 #pos=906 */


Results
   AUC ROC   = 0.630435
   AUC PR    = 0.704854
   CLL	      = -0.611434
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.26087
   F1        = 0.413793


Total learning time: 12.731 seconds
Total inference time: 3.19 seconds
AUC ROC: 0.630435


Results scoring model
   AUC ROC   = 0.572238
   AUC PR    = 0.655469
   CLL	      = -0.651448
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.144476
   F1        = 0.252475


Total scoring time: 5.165 seconds
Parameter learned model CLL: -0.651448


Structure after Parameter Learning
[['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [9.46e-07, 0, 153], 'false': [21.524, 948, 906]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 153], 'false': [21.524, 948, 906]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [5.33e-07, 0, 153], 'false': [21.524, 948, 906]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [4.62e-07, 0, 153], 'false': [21.524, 948, 906]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [2.89e-07, 0, 153], 'false': [21.524, 948, 906]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 153], 'false': [21.524, 948, 906]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [2.49e-07, 0, 153], 'false': [21.524, 948, 906]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 153], 'false': [21.524, 948, 906]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 153], 'false': [21.524, 948, 906]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [6.99e-08, 0, 153], 'false': [21.524, 948, 906]}]]
[{'': [5.851528412142001e-15, 0.2498717022235027]}, {'': [-2.507797890918001e-15, 0.2498717022234526]}, {'': [1.8576280673466673e-15, 0.24987170222348787]}, {'': [1.3932210505100003e-15, 0.24987170222348074]}, {'': [5.456782447830835e-16, 0.24987170222347857]}, {'': [-1.8576280673466672e-16, 0.24987170222347854]}, {'': [4.0635613973208343e-16, 0.24987170222348704]}, {'': [-3.0766964865429174e-16, 0.24987170222346927]}, {'': [-3.773307011797918e-17, 0.24987170222349409]}, {'': [3.192798240752084e-17, 0.2498717022234705]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
1;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
2;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
3;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
4;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
5;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
6;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
7;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
8;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
9;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.8581489350995098;  // std dev = 9.46e-07, 153.000 (wgt'ed) examples reached here.  /* #pos=153 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then if ( title(F, E), venue(F, B) )
%   | | | then return 0.36983724678781904;  // std dev = 19.616, 1,540.000 (wgt'ed) examples reached here.  /* #neg=752 #pos=788 */
%   | | | else return 0.48079044453347347;  // std dev = 3.529, 53.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=33 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.7202179006167531;  // std dev = 1.857, 29.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=25 */
%   | | | else return 0.3966104735610508;  // std dev = 1.797, 13.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=7 */
%   | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | then if ( haswordtitle(J, K), haswordvenue(A, K) )
%   | | | then return 0.19148226843284544;  // std dev = 3.651, 60.000 (wgt'ed) examples reached here.  /* #neg=40 #pos=20 */
%   | | | else return 0.11788919483977191;  // std dev = 3.848, 77.000 (wgt'ed) examples reached here.  /* #neg=57 #pos=20 */
%   | | else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | | | then return 0.029201566678459745;  // std dev = 3.283, 76.000 (wgt'ed) examples reached here.  /* #neg=63 #pos=13 */
%   | | | else return -0.1418510649004878;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.7194734122109563;  // std dev = 0.000, 153.000 (wgt'ed) examples reached here.  /* #pos=153 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then if ( title(F, E), venue(F, B) )
%   | | | then return 0.3186149850239592;  // std dev = 19.616, 1,540.000 (wgt'ed) examples reached here.  /* #neg=752 #pos=788 */
%   | | | else return 0.411691676523635;  // std dev = 3.529, 53.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=33 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.6085217109713611;  // std dev = 1.857, 29.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=25 */
%   | | | else return 0.3411827428099923;  // std dev = 1.797, 13.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=7 */
%   | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | then if ( haswordtitle(J, K), haswordvenue(A, K) )
%   | | | then return 0.1665388245648824;  // std dev = 3.651, 60.000 (wgt'ed) examples reached here.  /* #neg=40 #pos=20 */
%   | | | else return 0.10292409398484571;  // std dev = 3.848, 77.000 (wgt'ed) examples reached here.  /* #neg=57 #pos=20 */
%   | | else if ( haswordvenue(A, L), haswordauthor(M, L) )
%   | | | then return -0.1409989694970231;  // std dev = 0.025, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | | else return 0.03373493186002306;  // std dev = 3.265, 73.000 (wgt'ed) examples reached here.  /* #neg=60 #pos=13 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.5553664367462833;  // std dev = 5.33e-07, 153.000 (wgt'ed) examples reached here.  /* #pos=153 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then if ( title(F, E), venue(F, B) )
%   | | | then return 0.26410586234411615;  // std dev = 19.616, 1,540.000 (wgt'ed) examples reached here.  /* #neg=752 #pos=788 */
%   | | | else return 0.33513348503062806;  // std dev = 3.529, 53.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=33 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.4777509955252211;  // std dev = 1.857, 29.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=25 */
%   | | | else return 0.2815735770744797;  // std dev = 1.797, 13.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=7 */
%   | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | then if ( haswordtitle(J, K), haswordvenue(A, K) )
%   | | | then return 0.14209424281556463;  // std dev = 3.651, 60.000 (wgt'ed) examples reached here.  /* #neg=40 #pos=20 */
%   | | | else return 0.08882956534757269;  // std dev = 3.848, 77.000 (wgt'ed) examples reached here.  /* #neg=57 #pos=20 */
%   | | else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | | | then return 0.02329199076702637;  // std dev = 3.276, 76.000 (wgt'ed) examples reached here.  /* #neg=63 #pos=13 */
%   | | | else return -0.1230534004428494;  // std dev = 0.021, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.41751358415830886;  // std dev = 4.62e-07, 153.000 (wgt'ed) examples reached here.  /* #pos=153 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then if ( title(F, E), venue(F, A) )
%   | | | then return 0.2116431492920908;  // std dev = 19.624, 1,542.000 (wgt'ed) examples reached here.  /* #neg=752 #pos=790 */
%   | | | else return 0.2662048089503346;  // std dev = 3.480, 51.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=31 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.36044631943547073;  // std dev = 1.857, 29.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=25 */
%   | | | else return 0.2242781068616906;  // std dev = 1.797, 13.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=7 */
%   | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | then if ( haswordtitle(J, K), haswordauthor(L, K) )
%   | | | then return 0.08609949839506859;  // std dev = 4.937, 121.000 (wgt'ed) examples reached here.  /* #neg=87 #pos=34 */
%   | | | else return 0.16081557157413087;  // std dev = 1.936, 16.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=6 */
%   | | else if ( haswordvenue(A, M), haswordtitle(N, M) )
%   | | | then return 0.0203356345435627;  // std dev = 3.275, 76.000 (wgt'ed) examples reached here.  /* #neg=63 #pos=13 */
%   | | | else return -0.11038651493483294;  // std dev = 0.019, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.3207118471601497;  // std dev = 2.89e-07, 153.000 (wgt'ed) examples reached here.  /* #pos=153 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then if ( title(F, E), venue(F, A) )
%   | | | then return 0.16537091695785605;  // std dev = 19.624, 1,542.000 (wgt'ed) examples reached here.  /* #neg=752 #pos=790 */
%   | | | else return 0.20431310965181382;  // std dev = 3.480, 51.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=31 */
%   | | else if ( haswordvenue(B, G), haswordauthor(H, G) )
%   | | | then return 0.40928137493034694;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.2283135808625016;  // std dev = 2.583, 39.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=29 */
%   | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | then if ( haswordtitle(J, K), haswordauthor(L, K) )
%   | | | then return 0.07225378344895866;  // std dev = 4.937, 121.000 (wgt'ed) examples reached here.  /* #neg=87 #pos=34 */
%   | | | else return 0.13250868229084778;  // std dev = 1.936, 16.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=6 */
%   | | else if ( haswordvenue(A, M), haswordauthor(N, M) )
%   | | | then return -0.12398233743714566;  // std dev = 0.055, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | | else return 0.025508441415451628;  // std dev = 3.259, 73.000 (wgt'ed) examples reached here.  /* #neg=60 #pos=13 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.25517224256949045;  // std dev = 0.000, 153.000 (wgt'ed) examples reached here.  /* #pos=153 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then if ( title(F, E), venue(F, B) )
%   | | | then return 0.1269410773844472;  // std dev = 19.615, 1,540.000 (wgt'ed) examples reached here.  /* #neg=752 #pos=788 */
%   | | | else return 0.15598004438669283;  // std dev = 3.528, 53.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=33 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.21333151308906573;  // std dev = 1.849, 29.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=25 */
%   | | | else return 0.11974431050213284;  // std dev = 1.797, 13.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=7 */
%   | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | then if ( haswordtitle(J, K), haswordvenue(A, K) )
%   | | | then return 0.084463567694581;  // std dev = 3.648, 60.000 (wgt'ed) examples reached here.  /* #neg=40 #pos=20 */
%   | | | else return 0.050912163949383575;  // std dev = 3.848, 77.000 (wgt'ed) examples reached here.  /* #neg=57 #pos=20 */
%   | | else if ( haswordvenue(A, L), haswordauthor(M, L) )
%   | | | then return -0.11116791391849702;  // std dev = 0.050, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | | else return 0.022184442089166298;  // std dev = 3.259, 73.000 (wgt'ed) examples reached here.  /* #neg=60 #pos=13 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.2097577156325352;  // std dev = 2.49e-07, 153.000 (wgt'ed) examples reached here.  /* #pos=153 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then if ( title(F, E), venue(F, A) )
%   | | | then return 0.0964811945352506;  // std dev = 19.624, 1,542.000 (wgt'ed) examples reached here.  /* #neg=752 #pos=790 */
%   | | | else return 0.11806624491854005;  // std dev = 3.480, 51.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=31 */
%   | | else if ( haswordvenue(B, G), haswordauthor(H, G) )
%   | | | then return 0.2710010068726181;  // std dev = 5.27e-09, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.13301384856503606;  // std dev = 2.579, 39.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=29 */
%   | else if ( haswordvenue(A, I), haswordauthor(J, I) )
%   | | then if ( author(K, J), venue(K, B) )
%   | | | then return 0.17026383338690654;  // std dev = 1.065, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   | | | else return -0.08064562776213492;  // std dev = 1.563, 23.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=3 */
%   | | else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | | | then return 0.06231914739340902;  // std dev = 4.926, 117.000 (wgt'ed) examples reached here.  /* #neg=82 #pos=35 */
%   | | | else return 0.01924585446662583;  // std dev = 3.259, 73.000 (wgt'ed) examples reached here.  /* #neg=60 #pos=13 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.1770964977452782;  // std dev = 0.000, 153.000 (wgt'ed) examples reached here.  /* #pos=153 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then if ( title(F, E), venue(F, B) )
%   | | | then return 0.07283145796215776;  // std dev = 19.615, 1,540.000 (wgt'ed) examples reached here.  /* #neg=752 #pos=788 */
%   | | | else return 0.08943958978696417;  // std dev = 3.529, 53.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=33 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.13647130294339507;  // std dev = 1.846, 29.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=25 */
%   | | | else return 0.05727349437936549;  // std dev = 1.797, 13.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=7 */
%   | else if ( haswordvenue(A, I), haswordauthor(J, I) )
%   | | then if ( author(K, J), venue(K, B) )
%   | | | then return 0.14626869730010222;  // std dev = 1.055, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   | | | else return -0.06790366231565259;  // std dev = 1.564, 23.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=3 */
%   | | else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | | | then return 0.05091232360804069;  // std dev = 4.926, 117.000 (wgt'ed) examples reached here.  /* #neg=82 #pos=35 */
%   | | | else return 0.01666030209378871;  // std dev = 3.259, 73.000 (wgt'ed) examples reached here.  /* #neg=60 #pos=13 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.15274385809367147;  // std dev = 0.000, 153.000 (wgt'ed) examples reached here.  /* #pos=153 */
%   else if ( haswordvenue(B, D), haswordtitle(E, D) )
%   | then if ( title(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.35794767310171177;  // std dev = 12.358, 999.000 (wgt'ed) examples reached here.  /* #neg=189 #pos=810 */
%   | | | else return -0.39810208279799103;  // std dev = 5.333, 674.000 (wgt'ed) examples reached here.  /* #neg=645 #pos=29 */
%   | | else if ( haswordauthor(H, D) )
%   | | | then return 0.14508763287030216;  // std dev = 1.530, 13.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=7 */
%   | | | else return 0.0715635238736839;  // std dev = 3.864, 73.000 (wgt'ed) examples reached here.  /* #neg=33 #pos=40 */
%   | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | then if ( title(K, J), venue(K, B) )
%   | | | then return 0.007071935579708445;  // std dev = 3.636, 86.000 (wgt'ed) examples reached here.  /* #neg=67 #pos=19 */
%   | | | else return 0.21433734853461237;  // std dev = 0.758, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | else return -0.0964918824719644;  // std dev = 0.058, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.134007030008011;  // std dev = 6.99e-08, 153.000 (wgt'ed) examples reached here.  /* #pos=153 */
%   else if ( haswordvenue(B, D), haswordtitle(E, D) )
%   | then if ( title(F, E), venue(F, B) )
%   | | then if ( samebib(F, G), venue(G, A) )
%   | | | then return 0.2700486154388933;  // std dev = 12.356, 1,001.000 (wgt'ed) examples reached here.  /* #neg=189 #pos=812 */
%   | | | else return -0.31111295228596647;  // std dev = 4.939, 669.000 (wgt'ed) examples reached here.  /* #neg=643 #pos=26 */
%   | | else if ( title(H, E), venue(H, A) )
%   | | | then return 0.16906264334286558;  // std dev = 2.207, 21.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=12 */
%   | | | else return 0.057943267783044726;  // std dev = 3.635, 68.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=36 */
%   | else if ( haswordvenue(A, I), haswordauthor(J, I) )
%   | | then return -0.10780876915138461;  // std dev = 0.097, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | else if ( haswordvenue(B, K), haswordauthor(L, K) )
%   | | | then return -0.061227605126586426;  // std dev = 0.944, 10.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=1 */
%   | | | else return 0.0281201493135873;  // std dev = 3.583, 76.000 (wgt'ed) examples reached here.  /* #neg=57 #pos=19 */


Results
   AUC ROC   = 0.875668
   AUC PR    = 0.884726
   CLL	      = -0.468374
   Precision = 0.850543 at threshold = 0.5
   Recall    = 0.850543
   F1        = 0.850543


Total learning time: 2155.472 seconds
Total inference time: 6.558 seconds
AUC ROC: 0.875668


Results scoring model
   AUC ROC   = 0.894506
   AUC PR    = 0.885919
   CLL	      = -0.468321
   Precision = 0.834625 at threshold = 0.5
   Recall    = 0.915014
   F1        = 0.872973


Total scoring time: 38.28 seconds
Refined model CLL: -0.468321


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.875668
   AUC PR    = 0.884726
   CLL	      = -0.468374
   Precision = 0.850543 at threshold = 0.5
   Recall    = 0.850543
   F1        = 0.850543


Total learning time: 2211.6480000000006 seconds
Total inference time: 6.558 seconds
AUC ROC: 0.875668
Total revision time: 2211.6480000000006
Best scored revision CLL: -0.468321


Dataset: 3_imdb_cora, Fold: 1, Type: Transfer (trRDN-B), Time: 00:54:56
{'AUC ROC': 0.875668, 'AUC PR': 0.884726, 'CLL': -0.468374, 'Precision': [0.850543, 0.5], 'Recall': 0.850543, 'F1': 0.850543, 'Learning time': 2211.6480000000006, 'Inference time': 6.558, 'parameter_0.4': {'AUC ROC': 0.630435, 'AUC PR': 0.704854, 'CLL': -0.611434, 'Precision': [1.0, 0.5], 'Recall': 0.26087, 'F1': 0.413793, 'Learning time': 12.731, 'Inference time': 3.19}}


Amount of data: 0.6
******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- actor(A), director(B).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- actor(A), director(B).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- actor(A), director(B).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- director(B), actor(A).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.8581489350995088;  // std dev = 1.07e-06, 240.000 (wgt'ed) examples reached here.  /* #pos=240 */
%   else return 0.3448011717517439;  // std dev = 26.316, 2,772.000 (wgt'ed) examples reached here.  /* #neg=1,423 #pos=1,349 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.7194734122109574;  // std dev = 0.000, 240.000 (wgt'ed) examples reached here.  /* #pos=240 */
%   else return 0.2974494861588781;  // std dev = 26.316, 2,772.000 (wgt'ed) examples reached here.  /* #neg=1,423 #pos=1,349 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.5553664367462832;  // std dev = 5.06e-07, 240.000 (wgt'ed) examples reached here.  /* #pos=240 */
%   else return 0.24757575471728133;  // std dev = 26.316, 2,772.000 (wgt'ed) examples reached here.  /* #neg=1,423 #pos=1,349 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.41751358415831075;  // std dev = 0.000, 240.000 (wgt'ed) examples reached here.  /* #pos=240 */
%   else return 0.1996879194366162;  // std dev = 26.316, 2,772.000 (wgt'ed) examples reached here.  /* #neg=1,423 #pos=1,349 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.3207118471601499;  // std dev = 2.73e-07, 240.000 (wgt'ed) examples reached here.  /* #pos=240 */
%   else return 0.157160702438524;  // std dev = 26.316, 2,772.000 (wgt'ed) examples reached here.  /* #neg=1,423 #pos=1,349 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.25517224256948806;  // std dev = 3.01e-07, 240.000 (wgt'ed) examples reached here.  /* #pos=240 */
%   else return 0.121558900465843;  // std dev = 26.316, 2,772.000 (wgt'ed) examples reached here.  /* #neg=1,423 #pos=1,349 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.20975771563253487;  // std dev = 2.92e-07, 240.000 (wgt'ed) examples reached here.  /* #pos=240 */
%   else return 0.09294754615821799;  // std dev = 26.316, 2,772.000 (wgt'ed) examples reached here.  /* #neg=1,423 #pos=1,349 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.17709649774527744;  // std dev = 1.15e-07, 240.000 (wgt'ed) examples reached here.  /* #pos=240 */
%   else return 0.07055573517944913;  // std dev = 26.316, 2,772.000 (wgt'ed) examples reached here.  /* #neg=1,423 #pos=1,349 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.1527438580936717;  // std dev = 0.000, 240.000 (wgt'ed) examples reached here.  /* #pos=240 */
%   else return 0.05331860793978282;  // std dev = 26.316, 2,772.000 (wgt'ed) examples reached here.  /* #neg=1,423 #pos=1,349 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.13400703000801092;  // std dev = 9.42e-08, 240.000 (wgt'ed) examples reached here.  /* #pos=240 */
%   else return 0.04018234374582994;  // std dev = 26.316, 2,772.000 (wgt'ed) examples reached here.  /* #neg=1,423 #pos=1,349 */


Results
   AUC ROC   = 0.630435
   AUC PR    = 0.704854
   CLL	      = -0.611211
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.26087
   F1        = 0.413793


Total learning time: 12.945 seconds
Total inference time: 2.804 seconds
AUC ROC: 0.630435


Results scoring model
   AUC ROC   = 0.575519
   AUC PR    = 0.659641
   CLL	      = -0.649392
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.151038
   F1        = 0.262438


Total scoring time: 5.957 seconds
Parameter learned model CLL: -0.649392


Structure after Parameter Learning
[['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [1.07e-06, 0, 240], 'false': [26.316, 1, 1]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 240], 'false': [26.316, 1, 1]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [5.06e-07, 0, 240], 'false': [26.316, 1, 1]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 240], 'false': [26.316, 1, 1]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [2.73e-07, 0, 240], 'false': [26.316, 1, 1]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [3.01e-07, 0, 240], 'false': [26.316, 1, 1]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [2.92e-07, 0, 240], 'false': [26.316, 1, 1]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [1.15e-07, 0, 240], 'false': [26.316, 1, 1]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 240], 'false': [26.316, 1, 1]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [9.42e-08, 0, 240], 'false': [26.316, 1, 1]}]]
[{'': [4.736951571734001e-15, 0.24982183721363724]}, {'': [-4.263256414560601e-15, 0.24982183721363013]}, {'': [1.0658141036401502e-15, 0.24982183721360876]}, {'': [-1.7763568394002506e-16, 0.24982183721361795]}, {'': [3.108624468950438e-16, 0.24982183721363993]}, {'': [3.774758283725532e-16, 0.24982183721362658]}, {'': [3.552713678800501e-16, 0.24982183721360787]}, {'': [5.551115123125783e-17, 0.24982183721362258]}, {'': [-1.7023419710919068e-16, 0.24982183721360246]}, {'': [3.700743415417188e-17, 0.24982183721360968]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
1;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
2;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
3;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
4;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
5;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
6;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
7;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
8;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
9;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.8581489350995088;  // std dev = 1.07e-06, 240.000 (wgt'ed) examples reached here.  /* #pos=240 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then if ( title(F, E), venue(F, B) )
%   | | | then return 0.3639956219769434;  // std dev = 24.024, 2,309.000 (wgt'ed) examples reached here.  /* #neg=1,141 #pos=1,168 */
%   | | | else return 0.5119950889456667;  // std dev = 4.202, 78.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=51 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.6842358916212509;  // std dev = 2.571, 46.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=38 */
%   | | | else return 0.4233663264038601;  // std dev = 2.377, 23.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=13 */
%   | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | then if ( haswordtitle(J, K), haswordvenue(A, K) )
%   | | | then return 0.22596502705353397;  // std dev = 4.498, 87.000 (wgt'ed) examples reached here.  /* #neg=55 #pos=32 */
%   | | | else return 0.11286591623158689;  // std dev = 4.486, 106.000 (wgt'ed) examples reached here.  /* #neg=79 #pos=27 */
%   | | else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | | | then return 0.03514008554199012;  // std dev = 4.057, 113.000 (wgt'ed) examples reached here.  /* #neg=93 #pos=20 */
%   | | | else return -0.1418510649004878;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.7194734122109574;  // std dev = 0.000, 240.000 (wgt'ed) examples reached here.  /* #pos=240 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then if ( title(F, E), venue(F, B) )
%   | | | then return 0.3136818306666685;  // std dev = 24.024, 2,309.000 (wgt'ed) examples reached here.  /* #neg=1,141 #pos=1,168 */
%   | | | else return 0.43765546208850936;  // std dev = 4.202, 78.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=51 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.5792891135108366;  // std dev = 2.571, 46.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=38 */
%   | | | else return 0.36366720058454943;  // std dev = 2.377, 23.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=13 */
%   | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | then if ( haswordtitle(J, K), haswordauthor(L, K) )
%   | | | then return 0.12138105097516487;  // std dev = 5.797, 166.000 (wgt'ed) examples reached here.  /* #neg=119 #pos=47 */
%   | | | else return 0.27280250945047;  // std dev = 2.582, 27.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=12 */
%   | | else if ( haswordvenue(A, M), haswordauthor(N, M) )
%   | | | then return -0.14099819518722748;  // std dev = 0.031, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | | else return 0.035305272672582266;  // std dev = 4.043, 111.000 (wgt'ed) examples reached here.  /* #neg=91 #pos=20 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.5553664367462832;  // std dev = 5.06e-07, 240.000 (wgt'ed) examples reached here.  /* #pos=240 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then if ( title(F, E), venue(F, A) )
%   | | | then return 0.26001391599286827;  // std dev = 24.039, 2,313.000 (wgt'ed) examples reached here.  /* #neg=1,142 #pos=1,171 */
%   | | | else return 0.3674576140982262;  // std dev = 4.097, 74.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=48 */
%   | | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | | then return 0.33253023596439024;  // std dev = 2.952, 39.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=25 */
%   | | | else return 0.49765869803451057;  // std dev = 1.862, 30.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=26 */
%   | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | then if ( haswordtitle(J, K), haswordvenue(A, K) )
%   | | | then return 0.1706613253072625;  // std dev = 4.488, 87.000 (wgt'ed) examples reached here.  /* #neg=55 #pos=32 */
%   | | | else return 0.0818943075603845;  // std dev = 4.486, 106.000 (wgt'ed) examples reached here.  /* #neg=79 #pos=27 */
%   | | else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | | | then return 0.028034905423538654;  // std dev = 4.049, 113.000 (wgt'ed) examples reached here.  /* #neg=93 #pos=20 */
%   | | | else return -0.1237910860144144;  // std dev = 0.027, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.41751358415831075;  // std dev = 0.000, 240.000 (wgt'ed) examples reached here.  /* #pos=240 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then if ( title(F, E), venue(F, A) )
%   | | | then return 0.20866316620720382;  // std dev = 24.039, 2,313.000 (wgt'ed) examples reached here.  /* #neg=1,142 #pos=1,171 */
%   | | | else return 0.28796000381458364;  // std dev = 4.096, 74.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=48 */
%   | | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | | then return 0.2584921128309598;  // std dev = 2.950, 39.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=25 */
%   | | | else return 0.37636952262722456;  // std dev = 1.862, 30.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=26 */
%   | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | then if ( haswordtitle(J, K), haswordauthor(L, K) )
%   | | | then return 0.08658870807795228;  // std dev = 5.791, 166.000 (wgt'ed) examples reached here.  /* #neg=119 #pos=47 */
%   | | | else return 0.20038872966701657;  // std dev = 2.582, 27.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=12 */
%   | | else if ( haswordvenue(A, M), haswordauthor(N, M) )
%   | | | then return -0.12426827036912895;  // std dev = 0.050, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | | else return 0.028323096016203708;  // std dev = 4.039, 111.000 (wgt'ed) examples reached here.  /* #neg=91 #pos=20 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.3207118471601499;  // std dev = 2.73e-07, 240.000 (wgt'ed) examples reached here.  /* #pos=240 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then if ( haswordtitle(G, E), haswordtitle(G, D) )
%   | | | then return 0.19116482240331056;  // std dev = 3.864, 60.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=32 */
%   | | | else return -0.25399587128687046;  // std dev = 1.210, 18.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=2 */
%   | | else if ( haswordtitle(H, D) )
%   | | | then return 0.1674481171657867;  // std dev = 23.995, 2,311.000 (wgt'ed) examples reached here.  /* #neg=1,125 #pos=1,186 */
%   | | | else return 0.2427167931146762;  // std dev = 3.419, 67.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=50 */
%   | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | then if ( haswordtitle(J, K), haswordvenue(A, K) )
%   | | | then return 0.11982070077026812;  // std dev = 4.480, 87.000 (wgt'ed) examples reached here.  /* #neg=55 #pos=32 */
%   | | | else return 0.05646730524003655;  // std dev = 4.486, 106.000 (wgt'ed) examples reached here.  /* #neg=79 #pos=27 */
%   | | else if ( haswordvenue(A, L), haswordauthor(M, L) )
%   | | | then return -0.11138644621282823;  // std dev = 0.046, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | | else return 0.02464161948532066;  // std dev = 4.038, 111.000 (wgt'ed) examples reached here.  /* #neg=91 #pos=20 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.25517224256948806;  // std dev = 3.01e-07, 240.000 (wgt'ed) examples reached here.  /* #pos=240 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then if ( title(F, E), venue(F, B) )
%   | | | then return 0.12507160095596564;  // std dev = 23.996, 2,309.000 (wgt'ed) examples reached here.  /* #neg=1,141 #pos=1,168 */
%   | | | else return 0.1779983022009418;  // std dev = 4.196, 78.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=51 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.21368391500247605;  // std dev = 2.523, 46.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=38 */
%   | | | else return 0.10990466606222264;  // std dev = 2.377, 23.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=13 */
%   | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | then if ( haswordtitle(J, K), haswordauthor(L, K) )
%   | | | then return 0.05877925958030828;  // std dev = 5.787, 166.000 (wgt'ed) examples reached here.  /* #neg=119 #pos=47 */
%   | | | else return 0.13663102111911643;  // std dev = 2.582, 27.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=12 */
%   | | else if ( haswordvenue(A, M), haswordauthor(N, M) )
%   | | | then return -0.1008462491961518;  // std dev = 0.042, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | | else return 0.021379766655068085;  // std dev = 4.038, 111.000 (wgt'ed) examples reached here.  /* #neg=91 #pos=20 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.20975771563253487;  // std dev = 2.92e-07, 240.000 (wgt'ed) examples reached here.  /* #pos=240 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then if ( haswordtitle(G, E), haswordtitle(G, D) )
%   | | | then return 0.1168943445783197;  // std dev = 3.864, 60.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=32 */
%   | | | else return -0.22764376623080892;  // std dev = 1.204, 18.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=2 */
%   | | else if ( haswordtitle(H, D) )
%   | | | then return 0.0983177656026144;  // std dev = 23.993, 2,311.000 (wgt'ed) examples reached here.  /* #neg=1,125 #pos=1,186 */
%   | | | else return 0.1425567827668008;  // std dev = 3.410, 67.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=50 */
%   | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | then if ( haswordtitle(J, K), haswordvenue(A, K) )
%   | | | then return 0.07981725356973145;  // std dev = 4.475, 87.000 (wgt'ed) examples reached here.  /* #neg=55 #pos=32 */
%   | | | else return 0.03751099705051296;  // std dev = 4.486, 106.000 (wgt'ed) examples reached here.  /* #neg=79 #pos=27 */
%   | | else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | | | then return 0.018009879818364924;  // std dev = 4.036, 113.000 (wgt'ed) examples reached here.  /* #neg=93 #pos=20 */
%   | | | else return -0.10859757543850838;  // std dev = 0.074, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.17709649774527744;  // std dev = 1.15e-07, 240.000 (wgt'ed) examples reached here.  /* #pos=240 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then if ( title(F, E), venue(F, A) )
%   | | | then return 0.07147172899357176;  // std dev = 23.997, 2,313.000 (wgt'ed) examples reached here.  /* #neg=1,142 #pos=1,171 */
%   | | | else return 0.11408955919719116;  // std dev = 4.096, 74.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=48 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.13772447669289214;  // std dev = 2.512, 46.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=38 */
%   | | | else return 0.04691704023327515;  // std dev = 2.377, 23.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=13 */
%   | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | then if ( haswordauthor(K, I) )
%   | | | then return 0.09909224492617648;  // std dev = 2.092, 19.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=7 */
%   | | | else return 0.03973972300372058;  // std dev = 5.980, 174.000 (wgt'ed) examples reached here.  /* #neg=122 #pos=52 */
%   | | else if ( haswordvenue(A, L), haswordauthor(M, L) )
%   | | | then return -0.09153194549989964;  // std dev = 0.051, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | | else return 0.016888510470724486;  // std dev = 4.035, 111.000 (wgt'ed) examples reached here.  /* #neg=91 #pos=20 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.1527438580936717;  // std dev = 0.000, 240.000 (wgt'ed) examples reached here.  /* #pos=240 */
%   else if ( haswordvenue(B, D), haswordtitle(E, D) )
%   | then if ( title(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.364527715797209;  // std dev = 14.876, 1,471.000 (wgt'ed) examples reached here.  /* #neg=273 #pos=1,198 */
%   | | | else return -0.3955947977026359;  // std dev = 6.413, 1,021.000 (wgt'ed) examples reached here.  /* #neg=978 #pos=43 */
%   | | else if ( haswordtitle(E, H), haswordvenue(A, H) )
%   | | | then return 0.07019589628929226;  // std dev = 5.232, 127.000 (wgt'ed) examples reached here.  /* #neg=57 #pos=70 */
%   | | | else return 0.25998397048926375;  // std dev = 1.011, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | then if ( haswordauthor(K, I) )
%   | | | then return -0.09213454502164777;  // std dev = 3.73e-09, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | | else return 0.02269940016267093;  // std dev = 4.674, 130.000 (wgt'ed) examples reached here.  /* #neg=97 #pos=33 */
%   | | else return -0.09813973392872635;  // std dev = 0.078, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.13400703000801092;  // std dev = 9.42e-08, 240.000 (wgt'ed) examples reached here.  /* #pos=240 */
%   else if ( haswordvenue(B, D), haswordtitle(E, D) )
%   | then if ( title(F, E), venue(F, B) )
%   | | then if ( samebib(F, G), venue(G, A) )
%   | | | then return 0.2747847399103793;  // std dev = 14.873, 1,472.000 (wgt'ed) examples reached here.  /* #neg=273 #pos=1,199 */
%   | | | else return -0.308325034001733;  // std dev = 5.990, 1,015.000 (wgt'ed) examples reached here.  /* #neg=975 #pos=40 */
%   | | else if ( title(H, E), venue(H, A) )
%   | | | then return 0.17459352861081628;  // std dev = 2.693, 32.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=19 */
%   | | | else return 0.05508304683325304;  // std dev = 4.734, 107.000 (wgt'ed) examples reached here.  /* #neg=49 #pos=58 */
%   | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | then if ( title(K, J), venue(K, A) )
%   | | | then return 0.011263525813798575;  // std dev = 4.603, 132.000 (wgt'ed) examples reached here.  /* #neg=100 #pos=32 */
%   | | | else return 0.12150565406790614;  // std dev = 0.819, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | else return -0.08984244679569889;  // std dev = 0.072, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */


Results
   AUC ROC   = 0.877765
   AUC PR    = 0.888246
   CLL	      = -0.469427
   Precision = 0.836898 at threshold = 0.5
   Recall    = 0.850543
   F1        = 0.843666


Total learning time: 2631.032 seconds
Total inference time: 6.441 seconds
AUC ROC: 0.877765


Results scoring model
   AUC ROC   = 0.89641
   AUC PR    = 0.887978
   CLL	      = -0.465111
   Precision = 0.837947 at threshold = 0.5
   Recall    = 0.914412
   F1        = 0.874511


Total scoring time: 50.177 seconds
Refined model CLL: -0.465111


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.877765
   AUC PR    = 0.888246
   CLL	      = -0.469427
   Precision = 0.836898 at threshold = 0.5
   Recall    = 0.850543
   F1        = 0.843666


Total learning time: 2700.1110000000003 seconds
Total inference time: 6.441 seconds
AUC ROC: 0.877765
Total revision time: 2700.1110000000003
Best scored revision CLL: -0.465111


Dataset: 3_imdb_cora, Fold: 1, Type: Transfer (trRDN-B), Time: 01:40:07
{'AUC ROC': 0.877765, 'AUC PR': 0.888246, 'CLL': -0.469427, 'Precision': [0.836898, 0.5], 'Recall': 0.850543, 'F1': 0.843666, 'Learning time': 2700.1110000000003, 'Inference time': 6.441, 'parameter_0.6': {'AUC ROC': 0.630435, 'AUC PR': 0.704854, 'CLL': -0.611211, 'Precision': [1.0, 0.5], 'Recall': 0.26087, 'F1': 0.413793, 'Learning time': 12.945, 'Inference time': 2.804}}


Amount of data: 0.8
******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- actor(A), director(B).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- actor(A), director(B).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- actor(A), director(B).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- director(B), actor(A).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.8581489350995085;  // std dev = 1.04e-06, 327.000 (wgt'ed) examples reached here.  /* #pos=327 */
%   else return 0.3439174360482738;  // std dev = 30.356, 3,689.000 (wgt'ed) examples reached here.  /* #neg=1,897 #pos=1,792 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.719473412210958;  // std dev = 0.000, 327.000 (wgt'ed) examples reached here.  /* #pos=327 */
%   else return 0.29670128275804736;  // std dev = 30.356, 3,689.000 (wgt'ed) examples reached here.  /* #neg=1,897 #pos=1,792 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.5553664367462832;  // std dev = 0.000, 327.000 (wgt'ed) examples reached here.  /* #pos=327 */
%   else return 0.2469887731822711;  // std dev = 30.356, 3,689.000 (wgt'ed) examples reached here.  /* #neg=1,897 #pos=1,792 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.4175135841583117;  // std dev = 0.000, 327.000 (wgt'ed) examples reached here.  /* #pos=327 */
%   else return 0.1992579952430392;  // std dev = 30.356, 3,689.000 (wgt'ed) examples reached here.  /* #neg=1,897 #pos=1,792 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.32071184716015116;  // std dev = 0.000, 327.000 (wgt'ed) examples reached here.  /* #pos=327 */
%   else return 0.15686190318599993;  // std dev = 30.356, 3,689.000 (wgt'ed) examples reached here.  /* #neg=1,897 #pos=1,792 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.2551722425694875;  // std dev = 3.86e-07, 327.000 (wgt'ed) examples reached here.  /* #pos=327 */
%   else return 0.12135815713643054;  // std dev = 30.356, 3,689.000 (wgt'ed) examples reached here.  /* #neg=1,897 #pos=1,792 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.2097577156325347;  // std dev = 2.46e-07, 327.000 (wgt'ed) examples reached here.  /* #pos=327 */
%   else return 0.09281508260572927;  // std dev = 30.356, 3,689.000 (wgt'ed) examples reached here.  /* #neg=1,897 #pos=1,792 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.1770964977452765;  // std dev = 2.76e-07, 327.000 (wgt'ed) examples reached here.  /* #pos=327 */
%   else return 0.07046889561250894;  // std dev = 30.356, 3,689.000 (wgt'ed) examples reached here.  /* #neg=1,897 #pos=1,792 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.1527438580936716;  // std dev = 0.000, 327.000 (wgt'ed) examples reached here.  /* #pos=327 */
%   else return 0.05326164108838064;  // std dev = 30.356, 3,689.000 (wgt'ed) examples reached here.  /* #neg=1,897 #pos=1,792 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.13400703000801184;  // std dev = 0.000, 327.000 (wgt'ed) examples reached here.  /* #pos=327 */
%   else return 0.040144803174239976;  // std dev = 30.356, 3,689.000 (wgt'ed) examples reached here.  /* #neg=1,897 #pos=1,792 */


Results
   AUC ROC   = 0.630435
   AUC PR    = 0.704854
   CLL	      = -0.611117
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.26087
   F1        = 0.413793


Total learning time: 16.945 seconds
Total inference time: 2.985 seconds
AUC ROC: 0.630435


Results scoring model
   AUC ROC   = 0.577159
   AUC PR    = 0.661806
   CLL	      = -0.648356
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.154318
   F1        = 0.267375


Total scoring time: 6.748 seconds
Parameter learned model CLL: -0.648356


Structure after Parameter Learning
[['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [1.04e-06, 0, 327], 'false': [30.356, 1, 1]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 327], 'false': [30.356, 1, 1]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 327], 'false': [30.356, 1, 1]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 327], 'false': [30.356, 1, 1]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 327], 'false': [30.356, 1, 1]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [3.86e-07, 0, 327], 'false': [30.356, 1, 1]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [2.46e-07, 0, 327], 'false': [30.356, 1, 1]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [2.76e-07, 0, 327], 'false': [30.356, 1, 1]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 327], 'false': [30.356, 1, 1]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 327], 'false': [30.356, 1, 1]}]]
[{'': [3.3028286188237073e-15, 0.2497974644347098]}, {'': [-5.041159470836185e-15, 0.24979746443474768]}, {'': [-4.3458271300311937e-16, 0.24979746443477602]}, {'': [-9.560819686068626e-16, 0.24979746443471626]}, {'': [-6.301449338545231e-16, 0.249797464434752]}, {'': [4.563118486532754e-16, 0.24979746443472695]}, {'': [1.8469765302632573e-16, 0.24979746443476003]}, {'': [2.3358820823917666e-16, 0.2497974644347572]}, {'': [-2.281559243266377e-16, 0.24979746443477352]}, {'': [-2.091429306327512e-16, 0.24979746443473871]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
1;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
2;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
3;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
4;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
5;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
6;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
7;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
8;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
9;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.8581489350995085;  // std dev = 1.04e-06, 327.000 (wgt'ed) examples reached here.  /* #pos=327 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then if ( title(F, E), venue(F, A) )
%   | | | then return 0.3625506305673911;  // std dev = 27.689, 3,067.000 (wgt'ed) examples reached here.  /* #neg=1,520 #pos=1,547 */
%   | | | else return 0.4757959939230426;  // std dev = 4.908, 102.000 (wgt'ed) examples reached here.  /* #neg=39 #pos=63 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.6081489350995125;  // std dev = 3.354, 60.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=45 */
%   | | | else return 0.45814893509951143;  // std dev = 3.098, 40.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=24 */
%   | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | then if ( haswordtitle(J, K), haswordvenue(A, K) )
%   | | | then return 0.22105216090596405;  // std dev = 5.354, 124.000 (wgt'ed) examples reached here.  /* #neg=79 #pos=45 */
%   | | | else return 0.09928368687256069;  // std dev = 5.080, 141.000 (wgt'ed) examples reached here.  /* #neg=107 #pos=34 */
%   | | else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | | | then return 0.09591117286174881;  // std dev = 5.091, 143.000 (wgt'ed) examples reached here.  /* #neg=109 #pos=34 */
%   | | | else return -0.1418510649004878;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.719473412210958;  // std dev = 0.000, 327.000 (wgt'ed) examples reached here.  /* #pos=327 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then if ( title(F, E), venue(F, A) )
%   | | | then return 0.31246105637101623;  // std dev = 27.689, 3,067.000 (wgt'ed) examples reached here.  /* #neg=1,520 #pos=1,547 */
%   | | | else return 0.40752735208725743;  // std dev = 4.908, 102.000 (wgt'ed) examples reached here.  /* #neg=39 #pos=63 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.5170719622367207;  // std dev = 3.354, 60.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=45 */
%   | | | else return 0.39279418357704854;  // std dev = 3.098, 40.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=24 */
%   | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | then if ( haswordtitle(J, K), haswordvenue(A, K) )
%   | | | then return 0.19195868052428555;  // std dev = 5.354, 124.000 (wgt'ed) examples reached here.  /* #neg=79 #pos=45 */
%   | | | else return 0.08676301814651648;  // std dev = 5.080, 141.000 (wgt'ed) examples reached here.  /* #neg=107 #pos=34 */
%   | | else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | | | then return 0.0838302428373136;  // std dev = 5.091, 143.000 (wgt'ed) examples reached here.  /* #neg=109 #pos=34 */
%   | | | else return -0.12544463852839138;  // std dev = 5.27e-09, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.5553664367462832;  // std dev = 0.000, 327.000 (wgt'ed) examples reached here.  /* #pos=327 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then if ( title(F, E), venue(F, A) )
%   | | | then return 0.2593145200310344;  // std dev = 27.689, 3,067.000 (wgt'ed) examples reached here.  /* #neg=1,520 #pos=1,547 */
%   | | | else return 0.33201152621099134;  // std dev = 4.908, 102.000 (wgt'ed) examples reached here.  /* #neg=39 #pos=63 */
%   | | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | | then return 0.33875632250032894;  // std dev = 3.830, 64.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=41 */
%   | | | else return 0.4419711477940069;  // std dev = 2.477, 36.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=28 */
%   | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | then if ( haswordtitle(J, K), haswordvenue(A, K) )
%   | | | then return 0.16301437022709908;  // std dev = 5.354, 124.000 (wgt'ed) examples reached here.  /* #neg=79 #pos=45 */
%   | | | else return 0.07509427800711764;  // std dev = 5.080, 141.000 (wgt'ed) examples reached here.  /* #neg=107 #pos=34 */
%   | | else if ( haswordvenue(A, L), haswordauthor(M, L) )
%   | | | then return -0.15195600305537102;  // std dev = 0.079, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | | else return 0.07591942850591386;  // std dev = 5.071, 143.000 (wgt'ed) examples reached here.  /* #neg=109 #pos=34 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.4175135841583117;  // std dev = 0.000, 327.000 (wgt'ed) examples reached here.  /* #pos=327 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then if ( title(F, E), venue(F, B) )
%   | | | then return 0.20805555779471954;  // std dev = 27.674, 3,064.000 (wgt'ed) examples reached here.  /* #neg=1,517 #pos=1,547 */
%   | | | else return 0.2638836570758988;  // std dev = 4.990, 105.000 (wgt'ed) examples reached here.  /* #neg=42 #pos=63 */
%   | | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | | then return 0.2633276128249395;  // std dev = 3.830, 64.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=41 */
%   | | | else return 0.33755671021528155;  // std dev = 2.475, 36.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=28 */
%   | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | then if ( haswordtitle(J, K), haswordauthor(L, K) )
%   | | | then return 0.08335463497417471;  // std dev = 6.761, 229.000 (wgt'ed) examples reached here.  /* #neg=165 #pos=64 */
%   | | | else return 0.1894289484846878;  // std dev = 2.958, 36.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=15 */
%   | | else if ( haswordvenue(B, M), haswordauthor(N, M) )
%   | | | then return -0.07460271129078745;  // std dev = 1.336, 22.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=2 */
%   | | | else return 0.07058216813362682;  // std dev = 4.895, 133.000 (wgt'ed) examples reached here.  /* #neg=101 #pos=32 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.32071184716015116;  // std dev = 0.000, 327.000 (wgt'ed) examples reached here.  /* #pos=327 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then if ( haswordtitle(G, E) )
%   | | | then return 0.19485194077696333;  // std dev = 4.481, 81.000 (wgt'ed) examples reached here.  /* #neg=37 #pos=44 */
%   | | | else return -0.182311862481063;  // std dev = 1.749, 24.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=4 */
%   | | else if ( haswordtitle(H, D) )
%   | | | then return 0.1663796745197768;  // std dev = 27.671, 3,069.000 (wgt'ed) examples reached here.  /* #neg=1,503 #pos=1,566 */
%   | | | else return 0.21385204189701376;  // std dev = 4.470, 95.000 (wgt'ed) examples reached here.  /* #neg=30 #pos=65 */
%   | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | then if ( haswordtitle(J, K), haswordauthor(L, K) )
%   | | | then return 0.07033198282544269;  // std dev = 6.935, 243.000 (wgt'ed) examples reached here.  /* #neg=175 #pos=68 */
%   | | | else return 0.2161268150461181;  // std dev = 2.441, 24.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=11 */
%   | | else if ( haswordvenue(B, M), haswordtitle(N, M) )
%   | | | then return 0.05197887032291672;  // std dev = 5.080, 141.000 (wgt'ed) examples reached here.  /* #neg=107 #pos=34 */
%   | | | else return -0.11811235437749283;  // std dev = 0.035, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.2551722425694875;  // std dev = 3.86e-07, 327.000 (wgt'ed) examples reached here.  /* #pos=327 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then if ( title(F, E), venue(F, B) )
%   | | | then return 0.12495780431757751;  // std dev = 27.651, 3,064.000 (wgt'ed) examples reached here.  /* #neg=1,517 #pos=1,547 */
%   | | | else return 0.16264425012912792;  // std dev = 4.988, 105.000 (wgt'ed) examples reached here.  /* #neg=42 #pos=63 */
%   | | else if ( haswordvenue(B, G), haswordauthor(H, G) )
%   | | | then return 0.2999124808502705;  // std dev = 0.918, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | | else return 0.1591229693779653;  // std dev = 4.468, 94.000 (wgt'ed) examples reached here.  /* #neg=30 #pos=64 */
%   | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | then if ( haswordtitle(J, K), haswordauthor(L, K) )
%   | | | then return 0.05853726057374799;  // std dev = 6.934, 243.000 (wgt'ed) examples reached here.  /* #neg=175 #pos=68 */
%   | | | else return 0.17429010235037745;  // std dev = 2.441, 24.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=11 */
%   | | else if ( haswordvenue(A, M), haswordauthor(N, M) )
%   | | | then return -0.08175542624989476;  // std dev = 1.329, 20.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=2 */
%   | | | else return 0.04921403076165535;  // std dev = 4.898, 133.000 (wgt'ed) examples reached here.  /* #neg=101 #pos=32 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.2097577156325347;  // std dev = 2.46e-07, 327.000 (wgt'ed) examples reached here.  /* #pos=327 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then if ( haswordtitle(G, E) )
%   | | | then return 0.11898155795497747;  // std dev = 4.482, 81.000 (wgt'ed) examples reached here.  /* #neg=37 #pos=44 */
%   | | | else return -0.17128684316694276;  // std dev = 1.733, 24.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=4 */
%   | | else if ( haswordtitle(H, D) )
%   | | | then return 0.09775990707705601;  // std dev = 27.670, 3,069.000 (wgt'ed) examples reached here.  /* #neg=1,503 #pos=1,566 */
%   | | | else return 0.12009723827749684;  // std dev = 4.468, 95.000 (wgt'ed) examples reached here.  /* #neg=30 #pos=65 */
%   | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | then if ( haswordtitle(J, K), haswordauthor(L, K) )
%   | | | then return 0.046537996068089366;  // std dev = 6.728, 229.000 (wgt'ed) examples reached here.  /* #neg=165 #pos=64 */
%   | | | else return 0.1287813132488403;  // std dev = 2.958, 36.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=15 */
%   | | else if ( haswordvenue(A, M), haswordauthor(N, M) )
%   | | | then return -0.1473814563412438;  // std dev = 0.123, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | | else return 0.039508760813196556;  // std dev = 5.050, 143.000 (wgt'ed) examples reached here.  /* #neg=109 #pos=34 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.1770964977452765;  // std dev = 2.76e-07, 327.000 (wgt'ed) examples reached here.  /* #pos=327 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then if ( title(F, E), venue(F, A) )
%   | | | then return 0.07160986645620183;  // std dev = 27.653, 3,067.000 (wgt'ed) examples reached here.  /* #neg=1,520 #pos=1,547 */
%   | | | else return 0.09883461248043725;  // std dev = 4.901, 102.000 (wgt'ed) examples reached here.  /* #neg=39 #pos=63 */
%   | | else if ( haswordvenue(A, G), haswordauthor(H, G) )
%   | | | then return 0.2319063071113474;  // std dev = 0.932, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return 0.09111817525216163;  // std dev = 4.469, 95.000 (wgt'ed) examples reached here.  /* #neg=30 #pos=65 */
%   | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | then if ( haswordtitle(J, K), haswordauthor(L, K) )
%   | | | then return 0.03907678336326804;  // std dev = 6.918, 243.000 (wgt'ed) examples reached here.  /* #neg=175 #pos=68 */
%   | | | else return 0.12733323482679046;  // std dev = 2.441, 24.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=11 */
%   | | else if ( haswordvenue(B, M), haswordtitle(N, M) )
%   | | | then return 0.030821424027921908;  // std dev = 5.071, 141.000 (wgt'ed) examples reached here.  /* #neg=107 #pos=34 */
%   | | | else return -0.10868980966342512;  // std dev = 0.068, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.1527438580936716;  // std dev = 0.000, 327.000 (wgt'ed) examples reached here.  /* #pos=327 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then if ( title(F, E), venue(F, B) )
%   | | | then return 0.053887145581188386;  // std dev = 27.637, 3,064.000 (wgt'ed) examples reached here.  /* #neg=1,517 #pos=1,547 */
%   | | | else return 0.07593525406808391;  // std dev = 4.987, 105.000 (wgt'ed) examples reached here.  /* #neg=42 #pos=63 */
%   | | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | | then return 0.05197727010715272;  // std dev = 3.826, 64.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=41 */
%   | | | else return 0.11561399253199024;  // std dev = 2.483, 36.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=28 */
%   | else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | | then if ( haswordtitle(K, I) )
%   | | | then return 0.07808608468421017;  // std dev = 2.526, 29.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=10 */
%   | | | else return -0.10944006263659033;  // std dev = 1.360, 26.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=2 */
%   | | else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | | | then return 0.040063651301210784;  // std dev = 6.805, 226.000 (wgt'ed) examples reached here.  /* #neg=158 #pos=68 */
%   | | | else return 0.029410764212751423;  // std dev = 4.971, 139.000 (wgt'ed) examples reached here.  /* #neg=106 #pos=33 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.13400703000801184;  // std dev = 0.000, 327.000 (wgt'ed) examples reached here.  /* #pos=327 */
%   else if ( haswordvenue(B, D), haswordtitle(E, D) )
%   | then if ( haswordauthor(F, D) )
%   | | then if ( author(G, F), title(G, E) )
%   | | | then return 0.24608733820545423;  // std dev = 3.081, 48.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=33 */
%   | | | else return -0.05285041323306558;  // std dev = 3.724, 61.000 (wgt'ed) examples reached here.  /* #neg=39 #pos=22 */
%   | | else if ( haswordvenue(A, D) )
%   | | | then return 0.04007752237404311;  // std dev = 27.748, 3,094.000 (wgt'ed) examples reached here.  /* #neg=1,525 #pos=1,569 */
%   | | | else return 0.03639709476743438;  // std dev = 7.617, 291.000 (wgt'ed) examples reached here.  /* #neg=181 #pos=110 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( title(J, I), venue(J, A) )
%   | | | then return 0.016200049410898303;  // std dev = 5.758, 175.000 (wgt'ed) examples reached here.  /* #neg=121 #pos=54 */
%   | | | else return 0.26545334134308185;  // std dev = 1.067, 7.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=4 */
%   | | else if ( haswordvenue(A, K), haswordauthor(L, K) )
%   | | | then return -0.07075180482994503;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return -0.15964452756926822;  // std dev = 0.497, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */


Results
   AUC ROC   = 0.676808
   AUC PR    = 0.728576
   CLL	      = -0.597146
   Precision = 0.879032 at threshold = 0.5
   Recall    = 0.296196
   F1        = 0.443089


Total learning time: 1608.403 seconds
Total inference time: 6.759 seconds
AUC ROC: 0.676808


Results scoring model
   AUC ROC   = 0.642071
   AUC PR    = 0.705657
   CLL	      = -0.630415
   Precision = 0.837438 at threshold = 0.5
   Recall    = 0.24068
   F1        = 0.3739


Total scoring time: 43.027 seconds
Refined model CLL: -0.630415


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.676808
   AUC PR    = 0.728576
   CLL	      = -0.597146
   Precision = 0.879032 at threshold = 0.5
   Recall    = 0.296196
   F1        = 0.443089


Total learning time: 1675.123 seconds
Total inference time: 6.759 seconds
AUC ROC: 0.676808
Total revision time: 1675.123
Best scored revision CLL: -0.630415


Dataset: 3_imdb_cora, Fold: 1, Type: Transfer (trRDN-B), Time: 02:08:13
{'AUC ROC': 0.676808, 'AUC PR': 0.728576, 'CLL': -0.597146, 'Precision': [0.879032, 0.5], 'Recall': 0.296196, 'F1': 0.443089, 'Learning time': 1675.123, 'Inference time': 6.759, 'parameter_0.8': {'AUC ROC': 0.630435, 'AUC PR': 0.704854, 'CLL': -0.611117, 'Precision': [1.0, 0.5], 'Recall': 0.26087, 'F1': 0.413793, 'Learning time': 16.945, 'Inference time': 2.985}}


Amount of data: 1.0
******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- actor(A), director(B).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- actor(A), director(B).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- actor(A), director(B).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- director(B), actor(A).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.8581489350995082;  // std dev = 1.58e-06, 399.000 (wgt'ed) examples reached here.  /* #pos=399 */
%   else return 0.3449511852076855;  // std dev = 33.981, 4,622.000 (wgt'ed) examples reached here.  /* #neg=2,372 #pos=2,250 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.7194734122109581;  // std dev = 0.000, 399.000 (wgt'ed) examples reached here.  /* #pos=399 */
%   else return 0.2975764857171619;  // std dev = 33.981, 4,622.000 (wgt'ed) examples reached here.  /* #neg=2,372 #pos=2,250 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.555366436746283;  // std dev = 0.000, 399.000 (wgt'ed) examples reached here.  /* #pos=399 */
%   else return 0.24767537062302536;  // std dev = 33.981, 4,622.000 (wgt'ed) examples reached here.  /* #neg=2,372 #pos=2,250 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.41751358415831213;  // std dev = 0.000, 399.000 (wgt'ed) examples reached here.  /* #pos=399 */
%   else return 0.19976086248267197;  // std dev = 33.981, 4,622.000 (wgt'ed) examples reached here.  /* #neg=2,372 #pos=2,250 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.3207118471601518;  // std dev = 0.000, 399.000 (wgt'ed) examples reached here.  /* #pos=399 */
%   else return 0.15721138575777588;  // std dev = 33.981, 4,622.000 (wgt'ed) examples reached here.  /* #neg=2,372 #pos=2,250 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.2551722425694873;  // std dev = 4.58e-07, 399.000 (wgt'ed) examples reached here.  /* #pos=399 */
%   else return 0.12159294682666077;  // std dev = 33.981, 4,622.000 (wgt'ed) examples reached here.  /* #neg=2,372 #pos=2,250 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.2097577156325346;  // std dev = 2.46e-07, 399.000 (wgt'ed) examples reached here.  /* #pos=399 */
%   else return 0.09297001387203302;  // std dev = 33.981, 4,622.000 (wgt'ed) examples reached here.  /* #neg=2,372 #pos=2,250 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.1770964977452769;  // std dev = 1.93e-07, 399.000 (wgt'ed) examples reached here.  /* #pos=399 */
%   else return 0.0705704695226727;  // std dev = 33.981, 4,622.000 (wgt'ed) examples reached here.  /* #neg=2,372 #pos=2,250 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.15274385809367164;  // std dev = 0.000, 399.000 (wgt'ed) examples reached here.  /* #pos=399 */
%   else return 0.05332828012067959;  // std dev = 33.981, 4,622.000 (wgt'ed) examples reached here.  /* #neg=2,372 #pos=2,250 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.1340070300080122;  // std dev = 0.000, 399.000 (wgt'ed) examples reached here.  /* #pos=399 */
%   else return 0.04018872410978801;  // std dev = 33.981, 4,622.000 (wgt'ed) examples reached here.  /* #neg=2,372 #pos=2,250 */


Results
   AUC ROC   = 0.630435
   AUC PR    = 0.704854
   CLL	      = -0.611227
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.26087
   F1        = 0.413793


Total learning time: 18.514 seconds
Total inference time: 3.23 seconds
AUC ROC: 0.630435


Results scoring model
   AUC ROC   = 0.575311
   AUC PR    = 0.659395
   CLL	      = -0.649522
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.150623
   F1        = 0.261811


Total scoring time: 6.759 seconds
Parameter learned model CLL: -0.649522


Structure after Parameter Learning
[['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [1.58e-06, 0, 399], 'false': [33.981, 2, 2]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 399], 'false': [33.981, 2, 2]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 399], 'false': [33.981, 2, 2]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 399], 'false': [33.981, 2, 2]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 399], 'false': [33.981, 2, 2]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [4.58e-07, 0, 399], 'false': [33.981, 2, 2]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [2.46e-07, 0, 399], 'false': [33.981, 2, 2]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [1.93e-07, 0, 399], 'false': [33.981, 2, 2]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 399], 'false': [33.981, 2, 2]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 399], 'false': [33.981, 2, 2]}]]
[{'': [6.268447192670558e-15, 0.24982581939773973]}, {'': [-5.342426584662407e-15, 0.2498258193978195]}, {'': [-1.2109500258568123e-15, 0.24982581939776582]}, {'': [-1.887657393247384e-15, 0.24982581939776652]}, {'': [-1.6383441526298048e-15, 0.2498258193977573]}, {'': [5.2533861415847e-16, 0.24982581939782475]}, {'': [1.5136875323210153e-16, 0.24982581939778659]}, {'': [9.349246523159212e-17, 0.24982581939779933]}, {'': [-2.62669307079235e-16, 0.24982581939782314]}, {'': [-3.227716061566871e-16, 0.249825819397818]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
1;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
2;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
3;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
4;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
5;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
6;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
7;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
8;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
9;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.8581489350995082;  // std dev = 1.58e-06, 399.000 (wgt'ed) examples reached here.  /* #pos=399 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then if ( title(F, E), venue(F, A) )
%   | | | then return 0.3589253326150351;  // std dev = 31.081, 3,864.000 (wgt'ed) examples reached here.  /* #neg=1,929 #pos=1,935 */
%   | | | else return 0.46584124279181943;  // std dev = 5.567, 130.000 (wgt'ed) examples reached here.  /* #neg=51 #pos=79 */
%   | | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | | then return 0.5166855204653666;  // std dev = 4.294, 82.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=54 */
%   | | | else return 0.6137044906550669;  // std dev = 2.883, 45.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=34 */
%   | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | then if ( haswordtitle(J, K), haswordvenue(B, K) )
%   | | | then return 0.26604367194161876;  // std dev = 6.059, 152.000 (wgt'ed) examples reached here.  /* #neg=90 #pos=62 */
%   | | | else return 0.1203440570507312;  // std dev = 5.633, 164.000 (wgt'ed) examples reached here.  /* #neg=121 #pos=43 */
%   | | else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | | | then return 0.10670384839430931;  // std dev = 5.684, 173.000 (wgt'ed) examples reached here.  /* #neg=130 #pos=43 */
%   | | | else return -0.1418510649004878;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.7194734122109581;  // std dev = 0.000, 399.000 (wgt'ed) examples reached here.  /* #pos=399 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then if ( title(F, E), venue(F, A) )
%   | | | then return 0.30939741219123656;  // std dev = 31.081, 3,864.000 (wgt'ed) examples reached here.  /* #neg=1,929 #pos=1,935 */
%   | | | else return 0.3992200176514262;  // std dev = 5.567, 130.000 (wgt'ed) examples reached here.  /* #neg=51 #pos=79 */
%   | | else if ( haswordvenue(A, G), haswordauthor(H, G) )
%   | | | then return 0.6377369343150739;  // std dev = 0.923, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | | else return 0.4601370660713734;  // std dev = 5.087, 120.000 (wgt'ed) examples reached here.  /* #neg=38 #pos=82 */
%   | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | then if ( haswordtitle(J, K), haswordvenue(B, K) )
%   | | | then return 0.23047917180575014;  // std dev = 6.059, 152.000 (wgt'ed) examples reached here.  /* #neg=90 #pos=62 */
%   | | | else return 0.10505408886615844;  // std dev = 5.633, 164.000 (wgt'ed) examples reached here.  /* #neg=121 #pos=43 */
%   | | else if ( haswordvenue(A, L), haswordauthor(M, L) )
%   | | | then return -0.06827224529545226;  // std dev = 1.349, 24.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=2 */
%   | | | else return 0.10098685822220359;  // std dev = 5.516, 161.000 (wgt'ed) examples reached here.  /* #neg=120 #pos=41 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.555366436746283;  // std dev = 0.000, 399.000 (wgt'ed) examples reached here.  /* #pos=399 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then if ( title(F, E), venue(F, A) )
%   | | | then return 0.2569246952772525;  // std dev = 31.081, 3,864.000 (wgt'ed) examples reached here.  /* #neg=1,929 #pos=1,935 */
%   | | | else return 0.3257684813067505;  // std dev = 5.567, 130.000 (wgt'ed) examples reached here.  /* #neg=51 #pos=79 */
%   | | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | | then return 0.3506008476465812;  // std dev = 4.286, 82.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=54 */
%   | | | else return 0.42862480175800965;  // std dev = 2.880, 45.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=34 */
%   | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | then if ( haswordtitle(J, K), haswordauthor(L, K) )
%   | | | then return 0.12172392609919751;  // std dev = 7.752, 283.000 (wgt'ed) examples reached here.  /* #neg=195 #pos=88 */
%   | | | else return 0.3015711162606637;  // std dev = 2.871, 33.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=17 */
%   | | else if ( haswordvenue(B, M), haswordtitle(N, M) )
%   | | | then return 0.08222266244457536;  // std dev = 5.672, 173.000 (wgt'ed) examples reached here.  /* #neg=130 #pos=43 */
%   | | | else return -0.13224786982275405;  // std dev = 0.028, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.41751358415831213;  // std dev = 0.000, 399.000 (wgt'ed) examples reached here.  /* #pos=399 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then if ( title(F, E), venue(F, A) )
%   | | | then return 0.2065100411788641;  // std dev = 31.081, 3,864.000 (wgt'ed) examples reached here.  /* #neg=1,929 #pos=1,935 */
%   | | | else return 0.2554438112364007;  // std dev = 5.567, 130.000 (wgt'ed) examples reached here.  /* #neg=51 #pos=79 */
%   | | else if ( haswordvenue(B, G), haswordauthor(H, G) )
%   | | | then return 0.4487106806560362;  // std dev = 0.903, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | | else return 0.2824391163315681;  // std dev = 5.074, 120.000 (wgt'ed) examples reached here.  /* #neg=38 #pos=82 */
%   | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | then if ( haswordtitle(J, K), haswordvenue(B, K) )
%   | | | then return 0.1658130173893211;  // std dev = 6.042, 152.000 (wgt'ed) examples reached here.  /* #neg=90 #pos=62 */
%   | | | else return 0.07263607674511657;  // std dev = 5.633, 164.000 (wgt'ed) examples reached here.  /* #neg=121 #pos=43 */
%   | | else if ( haswordvenue(A, L), haswordauthor(M, L) )
%   | | | then return -0.06733180784507745;  // std dev = 1.347, 24.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=2 */
%   | | | else return 0.07702335256731005;  // std dev = 5.506, 161.000 (wgt'ed) examples reached here.  /* #neg=120 #pos=41 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.3207118471601518;  // std dev = 0.000, 399.000 (wgt'ed) examples reached here.  /* #pos=399 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then if ( title(F, E), venue(F, B) )
%   | | | then return 0.1618445339647713;  // std dev = 31.052, 3,858.000 (wgt'ed) examples reached here.  /* #neg=1,923 #pos=1,935 */
%   | | | else return 0.19491682475148941;  // std dev = 5.725, 136.000 (wgt'ed) examples reached here.  /* #neg=57 #pos=79 */
%   | | else if ( haswordvenue(A, G), haswordauthor(H, G) )
%   | | | then return 0.34226457748417466;  // std dev = 0.910, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | | else return 0.21300504800127476;  // std dev = 5.072, 120.000 (wgt'ed) examples reached here.  /* #neg=38 #pos=82 */
%   | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | then if ( haswordtitle(J, K), haswordauthor(L, K) )
%   | | | then return 0.08271533023121151;  // std dev = 7.739, 283.000 (wgt'ed) examples reached here.  /* #neg=195 #pos=88 */
%   | | | else return 0.21279323906966416;  // std dev = 2.871, 33.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=17 */
%   | | else if ( haswordvenue(B, M), haswordauthor(N, M) )
%   | | | then return -0.10765381761643009;  // std dev = 0.952, 15.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=1 */
%   | | | else return 0.06321689612735754;  // std dev = 5.580, 170.000 (wgt'ed) examples reached here.  /* #neg=128 #pos=42 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.2551722425694873;  // std dev = 4.58e-07, 399.000 (wgt'ed) examples reached here.  /* #pos=399 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then if ( title(F, E), venue(F, A) )
%   | | | then return 0.12463929651094699;  // std dev = 31.080, 3,864.000 (wgt'ed) examples reached here.  /* #neg=1,929 #pos=1,935 */
%   | | | else return 0.15002532986353392;  // std dev = 5.566, 130.000 (wgt'ed) examples reached here.  /* #neg=51 #pos=79 */
%   | | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | | then return 0.14475415334927422;  // std dev = 4.274, 82.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=54 */
%   | | | else return 0.20283534280755816;  // std dev = 2.872, 45.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=34 */
%   | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | then if ( haswordtitle(J, K), haswordvenue(A, K) )
%   | | | then return 0.11112978304832773;  // std dev = 6.029, 152.000 (wgt'ed) examples reached here.  /* #neg=90 #pos=62 */
%   | | | else return 0.053256063128608984;  // std dev = 5.654, 173.000 (wgt'ed) examples reached here.  /* #neg=130 #pos=43 */
%   | | else if ( haswordvenue(B, L), haswordauthor(M, L) )
%   | | | then return -0.11927687853549436;  // std dev = 1.345, 24.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=2 */
%   | | | else return 0.06035179539341804;  // std dev = 5.439, 152.000 (wgt'ed) examples reached here.  /* #neg=111 #pos=41 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.2097577156325346;  // std dev = 2.46e-07, 399.000 (wgt'ed) examples reached here.  /* #pos=399 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then if ( title(F, E), venue(F, B) )
%   | | | then return 0.09491802421333234;  // std dev = 31.052, 3,858.000 (wgt'ed) examples reached here.  /* #neg=1,923 #pos=1,935 */
%   | | | else return 0.11338020595441806;  // std dev = 5.723, 136.000 (wgt'ed) examples reached here.  /* #neg=57 #pos=79 */
%   | | else if ( haswordvenue(B, G), haswordauthor(H, G) )
%   | | | then return 0.23866063894040776;  // std dev = 0.894, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | | else return 0.11796966252670586;  // std dev = 5.068, 120.000 (wgt'ed) examples reached here.  /* #neg=38 #pos=82 */
%   | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | then if ( haswordauthor(K, I) )
%   | | | then return 0.14481099212543813;  // std dev = 2.950, 38.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=16 */
%   | | | else return 0.054160478221613684;  // std dev = 7.711, 287.000 (wgt'ed) examples reached here.  /* #neg=198 #pos=89 */
%   | | else if ( haswordvenue(B, L), haswordauthor(M, L) )
%   | | | then return -0.10079440387294196;  // std dev = 1.345, 24.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=2 */
%   | | | else return 0.05021410532271467;  // std dev = 5.438, 152.000 (wgt'ed) examples reached here.  /* #neg=111 #pos=41 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.1770964977452769;  // std dev = 1.93e-07, 399.000 (wgt'ed) examples reached here.  /* #pos=399 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then if ( haswordtitle(G, E) )
%   | | | then return 0.13920192947143695;  // std dev = 4.920, 100.000 (wgt'ed) examples reached here.  /* #neg=42 #pos=58 */
%   | | | else return -0.2288321098105863;  // std dev = 2.168, 32.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=7 */
%   | | else if ( haswordtitle(H, D) )
%   | | | then return 0.07325781341135108;  // std dev = 31.074, 3,869.000 (wgt'ed) examples reached here.  /* #neg=1,914 #pos=1,955 */
%   | | | else return 0.08933282600542357;  // std dev = 5.068, 120.000 (wgt'ed) examples reached here.  /* #neg=38 #pos=82 */
%   | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | then if ( haswordtitle(J, K), haswordauthor(L, K) )
%   | | | then return 0.044231384629424185;  // std dev = 7.697, 283.000 (wgt'ed) examples reached here.  /* #neg=195 #pos=88 */
%   | | | else return 0.12703517020723237;  // std dev = 2.875, 33.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=17 */
%   | | else if ( haswordvenue(B, M), haswordtitle(N, M) )
%   | | | then return 0.03512997271623024;  // std dev = 5.654, 173.000 (wgt'ed) examples reached here.  /* #neg=130 #pos=43 */
%   | | | else return -0.12906596869171807;  // std dev = 0.081, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.15274385809367164;  // std dev = 0.000, 399.000 (wgt'ed) examples reached here.  /* #pos=399 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then if ( title(F, E), venue(F, A) )
%   | | | then return 0.05397665965311713;  // std dev = 31.056, 3,864.000 (wgt'ed) examples reached here.  /* #neg=1,929 #pos=1,935 */
%   | | | else return 0.06745703228272422;  // std dev = 5.567, 130.000 (wgt'ed) examples reached here.  /* #neg=51 #pos=79 */
%   | | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | | then return 0.05693098463350271;  // std dev = 4.276, 82.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=54 */
%   | | | else return 0.10511157073322962;  // std dev = 2.873, 45.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=34 */
%   | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | then if ( haswordauthor(K, I) )
%   | | | then return 0.10601207891293682;  // std dev = 2.946, 38.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=16 */
%   | | | else return 0.03405714384487878;  // std dev = 7.702, 287.000 (wgt'ed) examples reached here.  /* #neg=198 #pos=89 */
%   | | else if ( haswordvenue(A, L), haswordauthor(M, L) )
%   | | | then return -0.13999176565222998;  // std dev = 0.953, 15.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=1 */
%   | | | else return 0.032428629580504485;  // std dev = 5.505, 161.000 (wgt'ed) examples reached here.  /* #neg=119 #pos=42 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.1340070300080122;  // std dev = 0.000, 399.000 (wgt'ed) examples reached here.  /* #pos=399 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then if ( haswordtitle(G, E) )
%   | | | then return 0.09148539202323697;  // std dev = 4.920, 100.000 (wgt'ed) examples reached here.  /* #neg=42 #pos=58 */
%   | | | else return -0.1873816084165599;  // std dev = 2.163, 32.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=7 */
%   | | else if ( haswordtitle(H, D) )
%   | | | then return 0.04173245318600501;  // std dev = 31.074, 3,869.000 (wgt'ed) examples reached here.  /* #neg=1,914 #pos=1,955 */
%   | | | else return 0.050869785962289554;  // std dev = 5.066, 120.000 (wgt'ed) examples reached here.  /* #neg=38 #pos=82 */
%   | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | then if ( haswordtitle(J, K), haswordauthor(L, K) )
%   | | | then return 0.028632229552204062;  // std dev = 7.679, 283.000 (wgt'ed) examples reached here.  /* #neg=195 #pos=88 */
%   | | | else return 0.08762324011843235;  // std dev = 2.878, 33.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=17 */
%   | | else if ( haswordvenue(B, M), haswordauthor(N, M) )
%   | | | then return -0.12385726098738707;  // std dev = 0.946, 15.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=1 */
%   | | | else return 0.025901876804280653;  // std dev = 5.568, 170.000 (wgt'ed) examples reached here.  /* #neg=128 #pos=42 */


Results
   AUC ROC   = 0.675866
   AUC PR    = 0.72785
   CLL	      = -0.600077
   Precision = 0.887097 at threshold = 0.5
   Recall    = 0.298913
   F1        = 0.447154


Total learning time: 1962.216 seconds
Total inference time: 5.806 seconds
AUC ROC: 0.675866


Results scoring model
   AUC ROC   = 0.628709
   AUC PR    = 0.695836
   CLL	      = -0.635148
   Precision = 0.862805 at threshold = 0.5
   Recall    = 0.213666
   F1        = 0.342511


Total scoring time: 54.932 seconds
Refined model CLL: -0.635148


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.675866
   AUC PR    = 0.72785
   CLL	      = -0.600077
   Precision = 0.887097 at threshold = 0.5
   Recall    = 0.298913
   F1        = 0.447154


Total learning time: 2042.4209999999998 seconds
Total inference time: 5.806 seconds
AUC ROC: 0.675866
Total revision time: 2042.4209999999998
Best scored revision CLL: -0.635148


Dataset: 3_imdb_cora, Fold: 1, Type: Transfer (trRDN-B), Time: 02:42:26
{'AUC ROC': 0.675866, 'AUC PR': 0.72785, 'CLL': -0.600077, 'Precision': [0.887097, 0.5], 'Recall': 0.298913, 'F1': 0.447154, 'Learning time': 2042.4209999999998, 'Inference time': 5.806, 'parameter_1.0': {'AUC ROC': 0.630435, 'AUC PR': 0.704854, 'CLL': -0.611227, 'Precision': [1.0, 0.5], 'Recall': 0.26087, 'F1': 0.413793, 'Learning time': 18.514, 'Inference time': 3.23}}


Starting fold 2

Target train facts examples: 33542
Target train pos examples: 2246
Target train neg examples: 2196

Target test facts examples: 9016
Target test pos	 examples: 771
Target test neg examples: 544

Amount of data: 0.2
******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- actor(A), director(B).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- actor(A), director(B).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- actor(A), director(B).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- director(B), actor(A).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.8581489350995125;  // std dev = 0.000, 79.000 (wgt'ed) examples reached here.  /* #pos=79 */
%   else return 0.3155036940611887;  // std dev = 14.170, 809.000 (wgt'ed) examples reached here.  /* #neg=439 #pos=370 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.7194734122109538;  // std dev = 2.23e-07, 79.000 (wgt'ed) examples reached here.  /* #pos=79 */
%   else return 0.27260551974387015;  // std dev = 14.170, 809.000 (wgt'ed) examples reached here.  /* #neg=439 #pos=370 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.5553664367462836;  // std dev = 3.37e-07, 79.000 (wgt'ed) examples reached here.  /* #pos=79 */
%   else return 0.22798808984545527;  // std dev = 14.170, 809.000 (wgt'ed) examples reached here.  /* #neg=439 #pos=370 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.4175135841583104;  // std dev = 0.000, 79.000 (wgt'ed) examples reached here.  /* #pos=79 */
%   else return 0.1852366688307526;  // std dev = 14.170, 809.000 (wgt'ed) examples reached here.  /* #neg=439 #pos=370 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.32071184716015005;  // std dev = 0.000, 79.000 (wgt'ed) examples reached here.  /* #pos=79 */
%   else return 0.14704381815115405;  // std dev = 14.170, 809.000 (wgt'ed) examples reached here.  /* #neg=439 #pos=370 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.2551722425694895;  // std dev = 0.000, 79.000 (wgt'ed) examples reached here.  /* #pos=79 */
%   else return 0.11473068964252815;  // std dev = 14.170, 809.000 (wgt'ed) examples reached here.  /* #neg=439 #pos=370 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.2097577156325357;  // std dev = 0.000, 79.000 (wgt'ed) examples reached here.  /* #pos=79 */
%   else return 0.08844376913762156;  // std dev = 14.170, 809.000 (wgt'ed) examples reached here.  /* #neg=439 #pos=370 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.17709649774527716;  // std dev = 2.98e-08, 79.000 (wgt'ed) examples reached here.  /* #pos=79 */
%   else return 0.06762486838583814;  // std dev = 14.170, 809.000 (wgt'ed) examples reached here.  /* #neg=439 #pos=370 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.15274385809367055;  // std dev = 8.30e-08, 79.000 (wgt'ed) examples reached here.  /* #pos=79 */
%   else return 0.051426315735989464;  // std dev = 14.170, 809.000 (wgt'ed) examples reached here.  /* #neg=439 #pos=370 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.1340070300080109;  // std dev = 5.37e-08, 79.000 (wgt'ed) examples reached here.  /* #pos=79 */
%   else return 0.03896730388943813;  // std dev = 14.170, 809.000 (wgt'ed) examples reached here.  /* #neg=439 #pos=370 */


Results
   AUC ROC   = 0.566796
   AUC PR    = 0.695289
   CLL	      = -0.672174
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.133593
   F1        = 0.235698


Total learning time: 8.173 seconds
Total inference time: 4.009 seconds
AUC ROC: 0.566796


Results scoring model
   AUC ROC   = 0.587973
   AUC PR    = 0.658487
   CLL	      = -0.641063
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.175947
   F1        = 0.299242


Total scoring time: 4.315 seconds
Parameter learned model CLL: -0.641063


Structure after Parameter Learning
[['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 79], 'false': [14.17, 439, 370]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [2.23e-07, 0, 79], 'false': [14.17, 439, 370]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [3.37e-07, 0, 79], 'false': [14.17, 439, 370]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 79], 'false': [14.17, 439, 370]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 79], 'false': [14.17, 439, 370]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 79], 'false': [14.17, 439, 370]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 79], 'false': [14.17, 439, 370]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [2.98e-08, 0, 79], 'false': [14.17, 439, 370]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [8.3e-08, 0, 79], 'false': [14.17, 439, 370]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [5.37e-08, 0, 79], 'false': [14.17, 439, 370]}]]
[{'': [-8.99421184506456e-16, 0.24818138341677082]}, {'': [6.295948291545192e-16, 0.24818138341677812]}, {'': [1.4390738952103295e-15, 0.24818138341677662]}, {'': [0.0, 0.24818138341678164]}, {'': [-3.822540034152438e-16, 0.2481813834167828]}, {'': [-2.2485529612661398e-17, 0.248181383416786]}, {'': [-8.994211845064559e-17, 0.24818138341678234]}, {'': [1.1242764806330699e-17, 0.2481813834167838]}, {'': [8.713142724906291e-17, 0.2481813834167873]}, {'': [3.653898562057477e-17, 0.24818138341678692]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
1;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
2;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
3;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
4;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
5;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
6;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
7;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
8;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
9;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.8581489350995125;  // std dev = 0.000, 79.000 (wgt'ed) examples reached here.  /* #pos=79 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then if ( haswordvenue(B, E) )
%   | | | then return 0.8581489350995122;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.2867203636709409;  // std dev = 2.619, 28.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=12 */
%   | | else return 0.3477322684328411;  // std dev = 0.500, 672.000 (wgt'ed) examples reached here.  /* #neg=343 #pos=329 */
%   | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | then if ( haswordtitle(H, I), haswordauthor(J, I) )
%   | | | then return 0.10430278125335853;  // std dev = 3.473, 65.000 (wgt'ed) examples reached here.  /* #neg=49 #pos=16 */
%   | | | else return 0.2581489350995122;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | else if ( haswordvenue(B, K), haswordauthor(L, K) )
%   | | | then return 0.0581489350995122;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else return 0.058148935099512356;  // std dev = 2.191, 30.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=6 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.7194734122109538;  // std dev = 2.23e-07, 79.000 (wgt'ed) examples reached here.  /* #pos=79 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then if ( haswordvenue(B, E) )
%   | | | then return 0.7194734122109545;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.24811816884741328;  // std dev = 2.619, 28.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=12 */
%   | | else return 0.2999305280820829;  // std dev = 0.500, 672.000 (wgt'ed) examples reached here.  /* #neg=343 #pos=329 */
%   | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | then if ( haswordtitle(H, I), haswordauthor(J, I) )
%   | | | then return 0.09112577722453409;  // std dev = 3.473, 65.000 (wgt'ed) examples reached here.  /* #neg=49 #pos=16 */
%   | | | else return 0.22373365448410584;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | else if ( haswordvenue(B, K), haswordauthor(L, K) )
%   | | | then return 0.050922032513554226;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else return 0.05092203251355422;  // std dev = 2.191, 30.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=6 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.5553664367462836;  // std dev = 3.37e-07, 79.000 (wgt'ed) examples reached here.  /* #pos=79 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then if ( haswordvenue(A, E) )
%   | | | then return 0.5553664367462845;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.17826887342629036;  // std dev = 2.408, 24.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=10 */
%   | | else return 0.2503508277050489;  // std dev = 0.500, 676.000 (wgt'ed) examples reached here.  /* #neg=345 #pos=331 */
%   | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | then if ( haswordtitle(H, I), haswordauthor(J, I) )
%   | | | then return 0.07881018389236034;  // std dev = 3.473, 65.000 (wgt'ed) examples reached here.  /* #neg=49 #pos=16 */
%   | | | else return 0.1888683221574974;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | else return 0.04434629760466868;  // std dev = 0.400, 35.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=7 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.4175135841583104;  // std dev = 0.000, 79.000 (wgt'ed) examples reached here.  /* #pos=79 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.20113845062417554;  // std dev = 0.499, 704.000 (wgt'ed) examples reached here.  /* #neg=359 #pos=345 */
%   | else if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then if ( haswordauthor(F, G), haswordvenue(A, G) )
%   | | | then return -0.17861471108722715;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.05870966326820808;  // std dev = 1.518, 13.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=3 */
%   | | else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | | | then return 0.1985157105782893;  // std dev = 1.365, 8.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=3 */
%   | | | else return 0.05800050932875617;  // std dev = 3.800, 81.000 (wgt'ed) examples reached here.  /* #neg=62 #pos=19 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.32071184716015005;  // std dev = 0.000, 79.000 (wgt'ed) examples reached here.  /* #pos=79 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then if ( haswordtitle(G, E) )
%   | | | then return 0.23065009756309549;  // std dev = 2.295, 23.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=13 */
%   | | | else return -0.043947597595781616;  // std dev = 1.137, 9.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=3 */
%   | | else return 0.15847563601963627;  // std dev = 0.500, 672.000 (wgt'ed) examples reached here.  /* #neg=343 #pos=329 */
%   | else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | then if ( author(J, I), venue(J, B) )
%   | | | then return -0.17622564793418236;  // std dev = 0.027, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.05534207801114692;  // std dev = 1.508, 13.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=3 */
%   | | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | | then return 0.03847637222313854;  // std dev = 2.896, 49.000 (wgt'ed) examples reached here.  /* #neg=38 #pos=11 */
%   | | | else return 0.08652478454342657;  // std dev = 2.821, 40.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=11 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.2551722425694895;  // std dev = 0.000, 79.000 (wgt'ed) examples reached here.  /* #pos=79 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then if ( haswordtitle(G, E) )
%   | | | then return 0.17950562997737188;  // std dev = 2.294, 23.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=13 */
%   | | | else return -0.03447822316333868;  // std dev = 1.138, 9.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=3 */
%   | | else return 0.12249062711458679;  // std dev = 0.500, 672.000 (wgt'ed) examples reached here.  /* #neg=343 #pos=329 */
%   | else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | then if ( author(J, I), venue(J, B) )
%   | | | then return -0.15211967584301775;  // std dev = 0.024, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.047201164684249286;  // std dev = 1.507, 13.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=3 */
%   | | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | | then return 0.032608129760169795;  // std dev = 2.896, 49.000 (wgt'ed) examples reached here.  /* #neg=38 #pos=11 */
%   | | | else return 0.07293494935342533;  // std dev = 2.821, 40.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=11 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.2097577156325357;  // std dev = 0.000, 79.000 (wgt'ed) examples reached here.  /* #pos=79 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.09349652579019425;  // std dev = 0.498, 704.000 (wgt'ed) examples reached here.  /* #neg=359 #pos=345 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordauthor(H, G) )
%   | | | then return 0.040064560249769;  // std dev = 3.443, 65.000 (wgt'ed) examples reached here.  /* #neg=49 #pos=16 */
%   | | | else return 0.13109083689269183;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | | | then return 0.01537627047533301;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else return 0.018961100509980403;  // std dev = 2.194, 30.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=6 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.17709649774527716;  // std dev = 2.98e-08, 79.000 (wgt'ed) examples reached here.  /* #pos=79 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then if ( author(G, F), venue(G, B) )
%   | | | then return 0.22289752776992564;  // std dev = 1.520, 11.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=7 */
%   | | | else return -0.04319540325602924;  // std dev = 1.812, 17.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=7 */
%   | | else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | | | then return 0.06445592377140023;  // std dev = 2.474, 26.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=12 */
%   | | | else return 0.07164879650248764;  // std dev = 12.745, 650.000 (wgt'ed) examples reached here.  /* #neg=331 #pos=319 */
%   | else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | | then if ( title(L, K), venue(L, B) )
%   | | | then return 0.05126722085491669;  // std dev = 3.061, 49.000 (wgt'ed) examples reached here.  /* #neg=36 #pos=13 */
%   | | | else return 0.00879919930776611;  // std dev = 1.917, 21.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=5 */
%   | | else return 0.01569317746060015;  // std dev = 0.401, 35.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=7 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.15274385809367055;  // std dev = 8.30e-08, 79.000 (wgt'ed) examples reached here.  /* #pos=79 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.05361937465585376;  // std dev = 0.498, 704.000 (wgt'ed) examples reached here.  /* #neg=359 #pos=345 */
%   | else if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then if ( author(G, F), venue(G, A) )
%   | | | then return 0.17707429371009734;  // std dev = 0.776, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | else return -0.04131315116977244;  // std dev = 1.277, 13.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=2 */
%   | | else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | | | then return 0.13603561637169664;  // std dev = 1.360, 8.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=3 */
%   | | | else return 0.02000843530675994;  // std dev = 3.791, 81.000 (wgt'ed) examples reached here.  /* #neg=62 #pos=19 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.1340070300080109;  // std dev = 5.37e-08, 79.000 (wgt'ed) examples reached here.  /* #pos=79 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.04041860206214277;  // std dev = 0.498, 704.000 (wgt'ed) examples reached here.  /* #neg=359 #pos=345 */
%   | else if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then if ( haswordauthor(F, G), haswordvenue(A, G) )
%   | | | then return -0.16127176128685394;  // std dev = 0.018, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.03747275941457759;  // std dev = 1.489, 13.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=3 */
%   | | else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | | | then return 0.11044189148739089;  // std dev = 1.360, 8.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=3 */
%   | | | else return 0.016633903405262204;  // std dev = 3.791, 81.000 (wgt'ed) examples reached here.  /* #neg=62 #pos=19 */


Results
   AUC ROC   = 0.579085
   AUC PR    = 0.709906
   CLL	      = -0.67019
   Precision = 0.980952 at threshold = 0.5
   Recall    = 0.133593
   F1        = 0.23516


Total learning time: 119.72200000000001 seconds
Total inference time: 5.535 seconds
AUC ROC: 0.579085


Results scoring model
   AUC ROC   = 0.65406
   AUC PR    = 0.699253
   CLL	      = -0.621987
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.184855
   F1        = 0.31203


Total scoring time: 6.303 seconds
Refined model CLL: -0.621987


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.579085
   AUC PR    = 0.709906
   CLL	      = -0.67019
   Precision = 0.980952 at threshold = 0.5
   Recall    = 0.133593
   F1        = 0.23516


Total learning time: 138.513 seconds
Total inference time: 5.535 seconds
AUC ROC: 0.579085
Total revision time: 138.513
Best scored revision CLL: -0.621987


Dataset: 3_imdb_cora, Fold: 2, Type: Transfer (trRDN-B), Time: 02:44:56
{'AUC ROC': 0.579085, 'AUC PR': 0.709906, 'CLL': -0.67019, 'Precision': [0.980952, 0.5], 'Recall': 0.133593, 'F1': 0.23516, 'Learning time': 138.513, 'Inference time': 5.535, 'parameter_0.2': {'AUC ROC': 0.566796, 'AUC PR': 0.695289, 'CLL': -0.672174, 'Precision': [1.0, 0.5], 'Recall': 0.133593, 'F1': 0.235698, 'Learning time': 8.173, 'Inference time': 4.009}}


Amount of data: 0.4
******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- actor(A), director(B).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- actor(A), director(B).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- actor(A), director(B).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- director(B), actor(A).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.8581489350995101;  // std dev = 8.84e-07, 144.000 (wgt'ed) examples reached here.  /* #pos=144 */
%   else return 0.320158739021076;  // std dev = 20.141, 1,632.000 (wgt'ed) examples reached here.  /* #neg=878 #pos=754 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.719473412210956;  // std dev = 0.000, 144.000 (wgt'ed) examples reached here.  /* #pos=144 */
%   else return 0.27655840684009947;  // std dev = 20.141, 1,632.000 (wgt'ed) examples reached here.  /* #neg=878 #pos=754 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.5553664367462834;  // std dev = 5.13e-07, 144.000 (wgt'ed) examples reached here.  /* #pos=144 */
%   else return 0.2311180740377032;  // std dev = 20.141, 1,632.000 (wgt'ed) examples reached here.  /* #neg=878 #pos=754 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.41751358415830897;  // std dev = 4.34e-07, 144.000 (wgt'ed) examples reached here.  /* #pos=144 */
%   else return 0.18756057796015613;  // std dev = 20.141, 1,632.000 (wgt'ed) examples reached here.  /* #neg=878 #pos=754 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.3207118471601499;  // std dev = 2.53e-07, 144.000 (wgt'ed) examples reached here.  /* #pos=144 */
%   else return 0.14868137947503726;  // std dev = 20.141, 1,632.000 (wgt'ed) examples reached here.  /* #neg=878 #pos=754 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.2551722425694903;  // std dev = 0.000, 144.000 (wgt'ed) examples reached here.  /* #pos=144 */
%   else return 0.11584103240878511;  // std dev = 20.141, 1,632.000 (wgt'ed) examples reached here.  /* #neg=878 #pos=754 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.20975771563253523;  // std dev = 2.37e-07, 144.000 (wgt'ed) examples reached here.  /* #pos=144 */
%   else return 0.08917669533351277;  // std dev = 20.141, 1,632.000 (wgt'ed) examples reached here.  /* #neg=878 #pos=754 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.17709649774527816;  // std dev = 0.000, 144.000 (wgt'ed) examples reached here.  /* #pos=144 */
%   else return 0.06809957994031676;  // std dev = 20.141, 1,632.000 (wgt'ed) examples reached here.  /* #neg=878 #pos=754 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.15274385809367144;  // std dev = 0.000, 144.000 (wgt'ed) examples reached here.  /* #pos=144 */
%   else return 0.05172920399130657;  // std dev = 20.141, 1,632.000 (wgt'ed) examples reached here.  /* #neg=878 #pos=754 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.13400703000801104;  // std dev = 6.32e-08, 144.000 (wgt'ed) examples reached here.  /* #pos=144 */
%   else return 0.03915775859385628;  // std dev = 20.141, 1,632.000 (wgt'ed) examples reached here.  /* #neg=878 #pos=754 */


Results
   AUC ROC   = 0.566796
   AUC PR    = 0.695289
   CLL	      = -0.67011
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.133593
   F1        = 0.235698


Total learning time: 11.6 seconds
Total inference time: 3.267 seconds
AUC ROC: 0.566796


Results scoring model
   AUC ROC   = 0.580178
   AUC PR    = 0.648415
   CLL	      = -0.646212
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.160356
   F1        = 0.276392


Total scoring time: 5.741 seconds
Parameter learned model CLL: -0.646212


Structure after Parameter Learning
[['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [8.84e-07, 0, 144], 'false': [20.141, 878, 754]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 144], 'false': [20.141, 878, 754]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [5.13e-07, 0, 144], 'false': [20.141, 878, 754]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [4.34e-07, 0, 144], 'false': [20.141, 878, 754]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [2.53e-07, 0, 144], 'false': [20.141, 878, 754]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 144], 'false': [20.141, 878, 754]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [2.37e-07, 0, 144], 'false': [20.141, 878, 754]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 144], 'false': [20.141, 878, 754]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 144], 'false': [20.141, 878, 754]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [6.32e-08, 0, 144], 'false': [20.141, 878, 754]}]]
[{'': [5.427757009278543e-15, 0.2485567450019454]}, {'': [-2.2697892947892088e-15, 0.2485567450019152]}, {'': [1.825700084939146e-15, 0.2485567450019218]}, {'': [1.30759600678074e-15, 0.24855674500191632]}, {'': [4.440892098500626e-16, 0.24855674500192265]}, {'': [-1.4802973661668753e-16, 0.2485567450019169]}, {'': [3.885780586188048e-16, 0.24855674500191222]}, {'': [-2.9605947323337506e-16, 0.24855674500192923]}, {'': [-4.0091387000352874e-17, 0.24855674500194003]}, {'': [2.7755575615628914e-17, 0.24855674500192287]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
1;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
2;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
3;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
4;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
5;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
6;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
7;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
8;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
9;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.8581489350995101;  // std dev = 8.84e-07, 144.000 (wgt'ed) examples reached here.  /* #pos=144 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then if ( haswordvenue(B, E) )
%   | | | then return 0.8581489350995122;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.3475106372271709;  // std dev = 3.427, 47.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=23 */
%   | | else return 0.3522317753361938;  // std dev = 0.500, 1,352.000 (wgt'ed) examples reached here.  /* #neg=684 #pos=668 */
%   | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | then if ( haswordauthor(I, G) )
%   | | | then return 0.32873717039363;  // std dev = 2.058, 17.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=8 */
%   | | | else return 0.13234248348660765;  // std dev = 4.968, 124.000 (wgt'ed) examples reached here.  /* #neg=90 #pos=34 */
%   | | else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | | | then return 0.06052988748046476;  // std dev = 3.682, 84.000 (wgt'ed) examples reached here.  /* #neg=67 #pos=17 */
%   | | | else return -0.14185106490048777;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.719473412210956;  // std dev = 0.000, 144.000 (wgt'ed) examples reached here.  /* #pos=144 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then if ( haswordauthor(G, D) )
%   | | | then return 0.7194734122109545;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.2997429558409488;  // std dev = 3.427, 47.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=23 */
%   | | else return 0.30373756417818765;  // std dev = 0.500, 1,352.000 (wgt'ed) examples reached here.  /* #neg=684 #pos=668 */
%   | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | then if ( haswordauthor(J, H) )
%   | | | then return 0.2838374893261067;  // std dev = 2.058, 17.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=8 */
%   | | | else return 0.11545680573570777;  // std dev = 4.968, 124.000 (wgt'ed) examples reached here.  /* #neg=90 #pos=34 */
%   | | else if ( haswordvenue(A, K), haswordauthor(L, K) )
%   | | | then return -0.13980600696840131;  // std dev = 0.026, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | | else return 0.05601578629809859;  // std dev = 3.674, 83.000 (wgt'ed) examples reached here.  /* #neg=66 #pos=17 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.5553664367462834;  // std dev = 5.13e-07, 144.000 (wgt'ed) examples reached here.  /* #pos=144 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.2532604403785448;  // std dev = 0.500, 1,403.000 (wgt'ed) examples reached here.  /* #neg=708 #pos=695 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordauthor(H, G) )
%   | | | then return 0.105517958492555;  // std dev = 5.172, 132.000 (wgt'ed) examples reached here.  /* #neg=94 #pos=38 */
%   | | | else return 0.26967580004363323;  // std dev = 1.491, 9.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=4 */
%   | | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | | then return 0.04660544298889154;  // std dev = 3.679, 84.000 (wgt'ed) examples reached here.  /* #neg=67 #pos=17 */
%   | | | else return -0.12130626988990797;  // std dev = 0.021, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.41751358415830897;  // std dev = 4.34e-07, 144.000 (wgt'ed) examples reached here.  /* #pos=144 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then if ( haswordtitle(G, E) )
%   | | | then return 0.25714807966744324;  // std dev = 3.211, 43.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=24 */
%   | | | else return -0.0055890832519980655;  // std dev = 1.222, 9.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=3 */
%   | | else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | | | then return 0.22195496825148836;  // std dev = 3.353, 45.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=23 */
%   | | | else return 0.2029235191088133;  // std dev = 18.068, 1,306.000 (wgt'ed) examples reached here.  /* #neg=661 #pos=645 */
%   | else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | | then if ( haswordtitle(K, L), haswordauthor(M, L) )
%   | | | then return 0.08929984773179529;  // std dev = 5.170, 132.000 (wgt'ed) examples reached here.  /* #neg=94 #pos=38 */
%   | | | else return 0.22732371001225524;  // std dev = 1.491, 9.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=4 */
%   | | else if ( haswordvenue(B, N), haswordauthor(P, N) )
%   | | | then return -0.05595299028046068;  // std dev = 0.942, 10.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=1 */
%   | | | else return 0.04506988866887893;  // std dev = 3.555, 78.000 (wgt'ed) examples reached here.  /* #neg=62 #pos=16 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.3207118471601499;  // std dev = 2.53e-07, 144.000 (wgt'ed) examples reached here.  /* #pos=144 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then if ( haswordtitle(G, E) )
%   | | | then return 0.21650539549692802;  // std dev = 3.039, 39.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=22 */
%   | | | else return 0.05094352889514272;  // std dev = 1.605, 12.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=5 */
%   | | else return 0.15940873551861914;  // std dev = 0.500, 1,352.000 (wgt'ed) examples reached here.  /* #neg=684 #pos=668 */
%   | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | then if ( haswordauthor(J, H) )
%   | | | then return 0.20019088667512003;  // std dev = 2.058, 17.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=8 */
%   | | | else return 0.06564003473120257;  // std dev = 4.954, 124.000 (wgt'ed) examples reached here.  /* #neg=90 #pos=34 */
%   | | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | | then return 0.035617126143776684;  // std dev = 3.676, 84.000 (wgt'ed) examples reached here.  /* #neg=67 #pos=17 */
%   | | | else return -0.11079269111372131;  // std dev = 0.016, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.2551722425694903;  // std dev = 0.000, 144.000 (wgt'ed) examples reached here.  /* #pos=144 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then if ( haswordtitle(G, E) )
%   | | | then return 0.16656069975342172;  // std dev = 3.038, 39.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=22 */
%   | | | else return 0.039251863284156675;  // std dev = 1.604, 12.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=5 */
%   | | else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | | then return 0.12419984977012;  // std dev = 3.358, 46.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=23 */
%   | | | else return 0.1229931443151898;  // std dev = 18.068, 1,306.000 (wgt'ed) examples reached here.  /* #neg=661 #pos=645 */
%   | else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | | then if ( haswordauthor(L, J) )
%   | | | then return 0.15893823124533657;  // std dev = 2.058, 17.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=8 */
%   | | | else return 0.05461166078827492;  // std dev = 4.953, 124.000 (wgt'ed) examples reached here.  /* #neg=90 #pos=34 */
%   | | else if ( haswordvenue(B, M), haswordauthor(N, M) )
%   | | | then return -0.05187625222080707;  // std dev = 0.942, 10.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=1 */
%   | | | else return 0.03447030243462054;  // std dev = 3.553, 78.000 (wgt'ed) examples reached here.  /* #neg=62 #pos=16 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.20975771563253523;  // std dev = 2.37e-07, 144.000 (wgt'ed) examples reached here.  /* #pos=144 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then if ( haswordtitle(G, D) )
%   | | | then return 0.08954374346071549;  // std dev = 3.332, 47.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=24 */
%   | | | else return 0.27212431801601905;  // std dev = 0.811, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | | then return 0.09470092988295527;  // std dev = 3.357, 46.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=23 */
%   | | | else return 0.09386955685104639;  // std dev = 18.068, 1,306.000 (wgt'ed) examples reached here.  /* #neg=661 #pos=645 */
%   | else if ( haswordvenue(A, J), haswordauthor(K, J) )
%   | | then if ( haswordtitle(L, J) )
%   | | | then return 0.2448200247293098;  // std dev = 1.864, 15.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=7 */
%   | | | else return -0.08466312287499111;  // std dev = 1.344, 14.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=2 */
%   | | else if ( haswordvenue(B, M), haswordauthor(N, M) )
%   | | | then return 0.08451870206777432;  // std dev = 2.118, 23.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=8 */
%   | | | else return 0.02893219570348962;  // std dev = 5.639, 177.000 (wgt'ed) examples reached here.  /* #neg=135 #pos=42 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.17709649774527816;  // std dev = 0.000, 144.000 (wgt'ed) examples reached here.  /* #pos=144 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then if ( author(G, F), venue(G, B) )
%   | | | then return 0.18579591214355987;  // std dev = 2.226, 23.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=14 */
%   | | | else return -0.010624755205918875;  // std dev = 2.567, 29.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=13 */
%   | | else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | | | then return 0.07431982811499581;  // std dev = 3.326, 45.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=23 */
%   | | | else return 0.07114414436662371;  // std dev = 18.068, 1,306.000 (wgt'ed) examples reached here.  /* #neg=661 #pos=645 */
%   | else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | | then if ( haswordtitle(K, L), haswordauthor(M, L) )
%   | | | then return 0.0383459705005883;  // std dev = 5.114, 132.000 (wgt'ed) examples reached here.  /* #neg=94 #pos=38 */
%   | | | else return 0.1566289346648779;  // std dev = 1.491, 9.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=4 */
%   | | else if ( haswordvenue(B, N), haswordauthor(P, N) )
%   | | | then return -0.058154084835866315;  // std dev = 0.944, 10.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=1 */
%   | | | else return 0.025364690113976535;  // std dev = 3.553, 78.000 (wgt'ed) examples reached here.  /* #neg=62 #pos=16 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.15274385809367144;  // std dev = 0.000, 144.000 (wgt'ed) examples reached here.  /* #pos=144 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then if ( haswordtitle(G, E), haswordtitle(G, D) )
%   | | | then return 0.08950076442774306;  // std dev = 2.961, 37.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=21 */
%   | | | else return -0.017935259424501786;  // std dev = 1.736, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | | else return 0.05368366047092993;  // std dev = 0.500, 1,352.000 (wgt'ed) examples reached here.  /* #neg=684 #pos=668 */
%   | else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | | then if ( haswordauthor(I, J), haswordvenue(B, J) )
%   | | | then return -0.290255445049442;  // std dev = 0.160, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | | else return 0.11981969996124806;  // std dev = 2.271, 25.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=9 */
%   | | else if ( haswordvenue(B, K), haswordauthor(L, K) )
%   | | | then return 0.06624189427587317;  // std dev = 2.105, 23.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=8 */
%   | | | else return 0.01721987753991613;  // std dev = 5.634, 177.000 (wgt'ed) examples reached here.  /* #neg=135 #pos=42 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.13400703000801104;  // std dev = 6.32e-08, 144.000 (wgt'ed) examples reached here.  /* #pos=144 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then if ( haswordtitle(G, D) )
%   | | | then return 0.03281478178756064;  // std dev = 3.332, 47.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=24 */
%   | | | else return 0.18969092524081263;  // std dev = 0.811, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else return 0.04041534145089256;  // std dev = 0.500, 1,352.000 (wgt'ed) examples reached here.  /* #neg=684 #pos=668 */
%   | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | then if ( haswordauthor(J, H) )
%   | | | then return 0.0972742235160217;  // std dev = 1.973, 17.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=8 */
%   | | | else return 0.02193411295798955;  // std dev = 4.917, 124.000 (wgt'ed) examples reached here.  /* #neg=90 #pos=34 */
%   | | else if ( haswordvenue(A, K), haswordauthor(L, K) )
%   | | | then return -0.1384659188767347;  // std dev = 0.093, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | | else return 0.019007876207736675;  // std dev = 3.666, 83.000 (wgt'ed) examples reached here.  /* #neg=66 #pos=17 */


Results
   AUC ROC   = 0.579221
   AUC PR    = 0.70994
   CLL	      = -0.666033
   Precision = 0.959677 at threshold = 0.5
   Recall    = 0.154345
   F1        = 0.265922


Total learning time: 265.99 seconds
Total inference time: 6.198 seconds
AUC ROC: 0.579221


Results scoring model
   AUC ROC   = 0.64463
   AUC PR    = 0.688835
   CLL	      = -0.628217
   Precision = 0.981707 at threshold = 0.5
   Recall    = 0.179287
   F1        = 0.303202


Total scoring time: 9.821 seconds
Refined model CLL: -0.628217


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.579221
   AUC PR    = 0.70994
   CLL	      = -0.666033
   Precision = 0.959677 at threshold = 0.5
   Recall    = 0.154345
   F1        = 0.265922


Total learning time: 293.15200000000004 seconds
Total inference time: 6.198 seconds
AUC ROC: 0.579221
Total revision time: 293.15200000000004
Best scored revision CLL: -0.628217


Dataset: 3_imdb_cora, Fold: 2, Type: Transfer (trRDN-B), Time: 02:50:00
{'AUC ROC': 0.579221, 'AUC PR': 0.70994, 'CLL': -0.666033, 'Precision': [0.959677, 0.5], 'Recall': 0.154345, 'F1': 0.265922, 'Learning time': 293.15200000000004, 'Inference time': 6.198, 'parameter_0.4': {'AUC ROC': 0.566796, 'AUC PR': 0.695289, 'CLL': -0.67011, 'Precision': [1.0, 0.5], 'Recall': 0.133593, 'F1': 0.235698, 'Learning time': 11.6, 'Inference time': 3.267}}


Amount of data: 0.6
******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- actor(A), director(B).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- actor(A), director(B).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- actor(A), director(B).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- director(B), actor(A).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.858148935099509;  // std dev = 1.08e-06, 230.000 (wgt'ed) examples reached here.  /* #pos=230 */
%   else return 0.31706430075275294;  // std dev = 24.584, 2,434.000 (wgt'ed) examples reached here.  /* #neg=1,317 #pos=1,117 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.7194734122109573;  // std dev = 0.000, 230.000 (wgt'ed) examples reached here.  /* #pos=230 */
%   else return 0.2739309569516793;  // std dev = 24.584, 2,434.000 (wgt'ed) examples reached here.  /* #neg=1,317 #pos=1,117 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.5553664367462832;  // std dev = 5.46e-07, 230.000 (wgt'ed) examples reached here.  /* #pos=230 */
%   else return 0.2290381679443322;  // std dev = 24.584, 2,434.000 (wgt'ed) examples reached here.  /* #neg=1,317 #pos=1,117 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.4175135841583106;  // std dev = 0.000, 230.000 (wgt'ed) examples reached here.  /* #pos=230 */
%   else return 0.18601694956470508;  // std dev = 24.584, 2,434.000 (wgt'ed) examples reached here.  /* #neg=1,317 #pos=1,117 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.32071184716014967;  // std dev = 3.15e-07, 230.000 (wgt'ed) examples reached here.  /* #pos=230 */
%   else return 0.147594127486149;  // std dev = 24.584, 2,434.000 (wgt'ed) examples reached here.  /* #neg=1,317 #pos=1,117 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.2551722425694882;  // std dev = 2.86e-07, 230.000 (wgt'ed) examples reached here.  /* #pos=230 */
%   else return 0.11510407865632002;  // std dev = 24.584, 2,434.000 (wgt'ed) examples reached here.  /* #neg=1,317 #pos=1,117 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.2097577156325349;  // std dev = 2.89e-07, 230.000 (wgt'ed) examples reached here.  /* #pos=230 */
%   else return 0.08869030382658703;  // std dev = 24.584, 2,434.000 (wgt'ed) examples reached here.  /* #neg=1,317 #pos=1,117 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.17709649774527755;  // std dev = 7.88e-08, 230.000 (wgt'ed) examples reached here.  /* #pos=230 */
%   else return 0.06778448930286822;  // std dev = 24.584, 2,434.000 (wgt'ed) examples reached here.  /* #neg=1,317 #pos=1,117 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.1527438580936717;  // std dev = 0.000, 230.000 (wgt'ed) examples reached here.  /* #pos=230 */
%   else return 0.051528039008706866;  // std dev = 24.584, 2,434.000 (wgt'ed) examples reached here.  /* #neg=1,317 #pos=1,117 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.13400703000801092;  // std dev = 9.88e-08, 230.000 (wgt'ed) examples reached here.  /* #pos=230 */
%   else return 0.03903111856821521;  // std dev = 24.584, 2,434.000 (wgt'ed) examples reached here.  /* #neg=1,317 #pos=1,117 */


Results
   AUC ROC   = 0.566796
   AUC PR    = 0.695289
   CLL	      = -0.671473
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.133593
   F1        = 0.235698


Total learning time: 12.278 seconds
Total inference time: 3.258 seconds
AUC ROC: 0.566796


Results scoring model
   AUC ROC   = 0.585375
   AUC PR    = 0.655163
   CLL	      = -0.642788
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.17075
   F1        = 0.291693


Total scoring time: 5.97 seconds
Parameter learned model CLL: -0.642788


Structure after Parameter Learning
[['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [1.08e-06, 0, 230], 'false': [24.584, 1, 1]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 230], 'false': [24.584, 1, 1]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [5.46e-07, 0, 230], 'false': [24.584, 1, 1]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 230], 'false': [24.584, 1, 1]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [3.15e-07, 0, 230], 'false': [24.584, 1, 1]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [2.86e-07, 0, 230], 'false': [24.584, 1, 1]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [2.89e-07, 0, 230], 'false': [24.584, 1, 1]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [7.88e-08, 0, 230], 'false': [24.584, 1, 1]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 230], 'false': [24.584, 1, 1]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [9.88e-08, 0, 230], 'false': [24.584, 1, 1]}]]
[{'': [5.066478637593758e-15, 0.24831205282061822]}, {'': [-4.139683764863192e-15, 0.2483120528205602]}, {'': [1.2975128218227916e-15, 0.24831205282060004]}, {'': [-9.267948727305654e-17, 0.24831205282061009]}, {'': [4.3250427394093057e-16, 0.24831205282058683]}, {'': [3.552713678800501e-16, 0.2483120528206072]}, {'': [3.6299465848613816e-16, 0.24831205282060523]}, {'': [2.703151712130816e-17, 0.2483120528205988]}, {'': [-1.5832745742480493e-16, 0.24831205282059915]}, {'': [4.247809833348425e-17, 0.24831205282059846]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
1;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
2;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
3;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
4;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
5;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
6;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
7;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
8;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
9;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.858148935099509;  // std dev = 1.08e-06, 230.000 (wgt'ed) examples reached here.  /* #pos=230 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then if ( title(F, E), venue(F, A) )
%   | | | then return 0.3411524865962095;  // std dev = 22.185, 1,971.000 (wgt'ed) examples reached here.  /* #neg=1,019 #pos=952 */
%   | | | else return 0.5060362590431747;  // std dev = 4.025, 71.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=46 */
%   | | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | | then return 0.45814893509951143;  // std dev = 3.098, 40.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=24 */
%   | | | else return 0.5423594614153018;  // std dev = 2.026, 19.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=13 */
%   | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | then if ( haswordauthor(K, I) )
%   | | | then return 0.26555634250691973;  // std dev = 2.553, 27.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=11 */
%   | | | else return 0.10814893509951151;  // std dev = 5.612, 168.000 (wgt'ed) examples reached here.  /* #neg=126 #pos=42 */
%   | | else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | | | then return 0.08471143509951139;  // std dev = 4.736, 128.000 (wgt'ed) examples reached here.  /* #neg=99 #pos=29 */
%   | | | else return -0.1418510649004878;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.7194734122109573;  // std dev = 0.000, 230.000 (wgt'ed) examples reached here.  /* #pos=230 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then if ( title(F, E), venue(F, A) )
%   | | | then return 0.2943598931724209;  // std dev = 22.185, 1,971.000 (wgt'ed) examples reached here.  /* #neg=1,019 #pos=952 */
%   | | | else return 0.43270466174511835;  // std dev = 4.025, 71.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=46 */
%   | | else if ( haswordvenue(A, G), haswordauthor(H, G) )
%   | | | then return 0.6479121105300091;  // std dev = 0.924, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | | else return 0.38404146811691336;  // std dev = 3.533, 52.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=31 */
%   | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | then if ( haswordtitle(J, K), haswordvenue(A, K) )
%   | | | then return 0.1715688015850043;  // std dev = 4.306, 84.000 (wgt'ed) examples reached here.  /* #neg=56 #pos=28 */
%   | | | else return 0.0740834778810146;  // std dev = 4.736, 128.000 (wgt'ed) examples reached here.  /* #neg=99 #pos=29 */
%   | | else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | | | then return 0.06910315242464864;  // std dev = 4.405, 111.000 (wgt'ed) examples reached here.  /* #neg=86 #pos=25 */
%   | | | else return -0.12544463852839138;  // std dev = 5.27e-09, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.5553664367462832;  // std dev = 5.46e-07, 230.000 (wgt'ed) examples reached here.  /* #pos=230 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then if ( title(F, E), venue(F, A) )
%   | | | then return 0.2451507337825268;  // std dev = 22.185, 1,971.000 (wgt'ed) examples reached here.  /* #neg=1,019 #pos=952 */
%   | | | else return 0.3508109688789448;  // std dev = 4.025, 71.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=46 */
%   | | else if ( haswordvenue(A, G), haswordauthor(H, G) )
%   | | | then return 0.5212763442035417;  // std dev = 0.923, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | | else return 0.31288684396016947;  // std dev = 3.533, 52.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=31 */
%   | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | then if ( haswordtitle(J, K), haswordvenue(A, K) )
%   | | | then return 0.14695523153724194;  // std dev = 4.305, 84.000 (wgt'ed) examples reached here.  /* #neg=56 #pos=28 */
%   | | | else return 0.06426134711853757;  // std dev = 4.736, 128.000 (wgt'ed) examples reached here.  /* #neg=99 #pos=29 */
%   | | else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | | | then return 0.059782068546471646;  // std dev = 4.405, 111.000 (wgt'ed) examples reached here.  /* #neg=86 #pos=25 */
%   | | | else return -0.11231637819360638;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.4175135841583106;  // std dev = 0.000, 230.000 (wgt'ed) examples reached here.  /* #pos=230 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then if ( title(F, E), venue(F, A) )
%   | | | then return 0.19791052397625647;  // std dev = 22.185, 1,971.000 (wgt'ed) examples reached here.  /* #neg=1,019 #pos=952 */
%   | | | else return 0.27279884005831906;  // std dev = 4.025, 71.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=46 */
%   | | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | | then return 0.23894440513721732;  // std dev = 3.058, 40.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=24 */
%   | | | else return 0.31480054579637;  // std dev = 2.011, 19.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=13 */
%   | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | then if ( haswordauthor(K, I) )
%   | | | then return 0.20549339946914344;  // std dev = 2.421, 25.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=10 */
%   | | | else return 0.06595018991175026;  // std dev = 5.907, 187.000 (wgt'ed) examples reached here.  /* #neg=140 #pos=47 */
%   | | else if ( haswordvenue(A, L), haswordauthor(M, L) )
%   | | | then return -0.15525482575859678;  // std dev = 0.120, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | | else return 0.05245441468984964;  // std dev = 4.391, 113.000 (wgt'ed) examples reached here.  /* #neg=88 #pos=25 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.32071184716014967;  // std dev = 3.15e-07, 230.000 (wgt'ed) examples reached here.  /* #pos=230 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then if ( title(F, E), venue(F, A) )
%   | | | then return 0.15592458594101974;  // std dev = 22.185, 1,971.000 (wgt'ed) examples reached here.  /* #neg=1,019 #pos=952 */
%   | | | else return 0.2070215917618992;  // std dev = 4.025, 71.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=46 */
%   | | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | | then return 0.1826200377692495;  // std dev = 3.057, 40.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=24 */
%   | | | else return 0.23919540741382592;  // std dev = 2.011, 19.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=13 */
%   | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | then if ( haswordauthor(K, I) )
%   | | | then return 0.17337541833482695;  // std dev = 2.517, 27.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=11 */
%   | | | else return 0.05556726791180795;  // std dev = 5.588, 168.000 (wgt'ed) examples reached here.  /* #neg=126 #pos=42 */
%   | | else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | | | then return 0.04458998085496712;  // std dev = 4.739, 128.000 (wgt'ed) examples reached here.  /* #neg=99 #pos=29 */
%   | | | else return -0.10102243982400945;  // std dev = 0.026, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.2551722425694882;  // std dev = 2.86e-07, 230.000 (wgt'ed) examples reached here.  /* #pos=230 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then if ( title(F, E), venue(F, A) )
%   | | | then return 0.12072813853267564;  // std dev = 22.185, 1,971.000 (wgt'ed) examples reached here.  /* #neg=1,019 #pos=952 */
%   | | | else return 0.15554364507715784;  // std dev = 4.025, 71.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=46 */
%   | | else if ( haswordvenue(A, G), haswordauthor(H, G) )
%   | | | then return 0.2877477677725128;  // std dev = 0.919, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | | else return 0.1330945172178304;  // std dev = 3.524, 52.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=31 */
%   | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | then if ( haswordauthor(K, I) )
%   | | | then return 0.1609385257922509;  // std dev = 2.410, 25.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=10 */
%   | | | else return 0.04523537818393575;  // std dev = 5.894, 187.000 (wgt'ed) examples reached here.  /* #neg=140 #pos=47 */
%   | | else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | | | then return 0.036235165936388744;  // std dev = 4.400, 111.000 (wgt'ed) examples reached here.  /* #neg=86 #pos=25 */
%   | | | else return -0.09221677903327896;  // std dev = 0.024, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.2097577156325349;  // std dev = 2.89e-07, 230.000 (wgt'ed) examples reached here.  /* #pos=230 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then if ( title(F, E), venue(F, A) )
%   | | | then return 0.09239945493825243;  // std dev = 22.185, 1,971.000 (wgt'ed) examples reached here.  /* #neg=1,019 #pos=952 */
%   | | | else return 0.11669887713295624;  // std dev = 4.025, 71.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=46 */
%   | | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | | then return 0.09951314045832653;  // std dev = 3.048, 40.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=24 */
%   | | | else return 0.144850426595487;  // std dev = 2.008, 19.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=13 */
%   | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | then if ( haswordauthor(K, I) )
%   | | | then return 0.13129327284754103;  // std dev = 2.507, 27.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=11 */
%   | | | else return 0.037952556754830724;  // std dev = 5.576, 168.000 (wgt'ed) examples reached here.  /* #neg=126 #pos=42 */
%   | | else if ( haswordvenue(A, L), haswordauthor(M, L) )
%   | | | then return -0.07471676617054994;  // std dev = 1.332, 19.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=2 */
%   | | | else return 0.03677899450565274;  // std dev = 4.543, 119.000 (wgt'ed) examples reached here.  /* #neg=92 #pos=27 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.17709649774527755;  // std dev = 7.88e-08, 230.000 (wgt'ed) examples reached here.  /* #pos=230 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then if ( title(F, E), venue(F, A) )
%   | | | then return 0.07019674497834594;  // std dev = 22.185, 1,971.000 (wgt'ed) examples reached here.  /* #neg=1,019 #pos=952 */
%   | | | else return 0.08777576028904162;  // std dev = 4.025, 71.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=46 */
%   | | else if ( haswordvenue(A, G), haswordauthor(H, G) )
%   | | | then return 0.1951598973877644;  // std dev = 0.919, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | | else return 0.07131307308875225;  // std dev = 3.522, 52.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=31 */
%   | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | then if ( haswordauthor(K, I) )
%   | | | then return 0.123816897002067;  // std dev = 2.396, 25.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=10 */
%   | | | else return 0.030369289603853433;  // std dev = 5.882, 187.000 (wgt'ed) examples reached here.  /* #neg=140 #pos=47 */
%   | | else if ( haswordvenue(A, L), haswordauthor(M, L) )
%   | | | then return -0.15374097813223334;  // std dev = 0.196, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | | else return 0.027066361979246466;  // std dev = 4.383, 113.000 (wgt'ed) examples reached here.  /* #neg=88 #pos=25 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.1527438580936717;  // std dev = 0.000, 230.000 (wgt'ed) examples reached here.  /* #pos=230 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then if ( title(F, E), venue(F, A) )
%   | | | then return 0.053083522353672;  // std dev = 22.185, 1,971.000 (wgt'ed) examples reached here.  /* #neg=1,019 #pos=952 */
%   | | | else return 0.06627622992263164;  // std dev = 4.025, 71.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=46 */
%   | | else if ( haswordvenue(A, G), haswordauthor(H, G) )
%   | | | then return 0.1530271250144603;  // std dev = 0.919, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | | else return 0.053635557009753615;  // std dev = 3.522, 52.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=31 */
%   | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | then if ( title(K, J), venue(K, B) )
%   | | | then return 0.021299797159279644;  // std dev = 5.236, 151.000 (wgt'ed) examples reached here.  /* #neg=114 #pos=37 */
%   | | | else return 0.08414373975787683;  // std dev = 3.121, 44.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=16 */
%   | | else if ( haswordvenue(A, L), haswordauthor(M, L) )
%   | | | then return -0.06837399970874848;  // std dev = 1.336, 19.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=2 */
%   | | | else return 0.02553890217175458;  // std dev = 4.543, 119.000 (wgt'ed) examples reached here.  /* #neg=92 #pos=27 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.13400703000801092;  // std dev = 9.88e-08, 230.000 (wgt'ed) examples reached here.  /* #pos=230 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then if ( haswordtitle(G, E) )
%   | | | then return 0.08100525413750827;  // std dev = 3.706, 55.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=29 */
%   | | | else return -0.18287438513294627;  // std dev = 1.441, 13.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=4 */
%   | | else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | | | then return 0.050169876731715385;  // std dev = 3.879, 62.000 (wgt'ed) examples reached here.  /* #neg=30 #pos=32 */
%   | | | else return 0.04070535212961608;  // std dev = 22.138, 1,971.000 (wgt'ed) examples reached here.  /* #neg=1,001 #pos=970 */
%   | else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | | then if ( haswordauthor(L, J) )
%   | | | then return 0.09345815291547066;  // std dev = 2.390, 25.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=10 */
%   | | | else return 0.0194689365092496;  // std dev = 5.874, 187.000 (wgt'ed) examples reached here.  /* #neg=140 #pos=47 */
%   | | else if ( haswordvenue(B, M), haswordauthor(N, M) )
%   | | | then return -0.10579726209980868;  // std dev = 0.949, 13.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=1 */
%   | | | else return 0.022566008860388037;  // std dev = 4.281, 108.000 (wgt'ed) examples reached here.  /* #neg=84 #pos=24 */


Results
   AUC ROC   = 0.585219
   AUC PR    = 0.715695
   CLL	      = -0.669243
   Precision = 0.90604 at threshold = 0.5
   Recall    = 0.175097
   F1        = 0.293478


Total learning time: 1103.947 seconds
Total inference time: 8.469 seconds
AUC ROC: 0.585219


Results scoring model
   AUC ROC   = 0.649829
   AUC PR    = 0.697645
   CLL	      = -0.623742
   Precision = 0.869444 at threshold = 0.5
   Recall    = 0.232368
   F1        = 0.366725


Total scoring time: 31.102 seconds
Refined model CLL: -0.623742


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.585219
   AUC PR    = 0.715695
   CLL	      = -0.669243
   Precision = 0.90604 at threshold = 0.5
   Recall    = 0.175097
   F1        = 0.293478


Total learning time: 1153.297 seconds
Total inference time: 8.469 seconds
AUC ROC: 0.585219
Total revision time: 1153.297
Best scored revision CLL: -0.623742


Dataset: 3_imdb_cora, Fold: 2, Type: Transfer (trRDN-B), Time: 03:09:27
{'AUC ROC': 0.585219, 'AUC PR': 0.715695, 'CLL': -0.669243, 'Precision': [0.90604, 0.5], 'Recall': 0.175097, 'F1': 0.293478, 'Learning time': 1153.297, 'Inference time': 8.469, 'parameter_0.6': {'AUC ROC': 0.566796, 'AUC PR': 0.695289, 'CLL': -0.671473, 'Precision': [1.0, 0.5], 'Recall': 0.133593, 'F1': 0.235698, 'Learning time': 12.278, 'Inference time': 3.258}}


Amount of data: 0.8
******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- actor(A), director(B).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- actor(A), director(B).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- actor(A), director(B).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- director(B), actor(A).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.8581489350995086;  // std dev = 1.05e-06, 303.000 (wgt'ed) examples reached here.  /* #pos=303 */
%   else return 0.31767494310196953;  // std dev = 28.406, 3,249.000 (wgt'ed) examples reached here.  /* #neg=1,756 #pos=1,493 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.7194734122109578;  // std dev = 0.000, 303.000 (wgt'ed) examples reached here.  /* #pos=303 */
%   else return 0.2744495179887912;  // std dev = 28.406, 3,249.000 (wgt'ed) examples reached here.  /* #neg=1,756 #pos=1,493 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.5553664367462832;  // std dev = 0.000, 303.000 (wgt'ed) examples reached here.  /* #pos=303 */
%   else return 0.22944884229827386;  // std dev = 28.406, 3,249.000 (wgt'ed) examples reached here.  /* #neg=1,756 #pos=1,493 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.41751358415831147;  // std dev = 0.000, 303.000 (wgt'ed) examples reached here.  /* #pos=303 */
%   else return 0.1863219350421308;  // std dev = 28.406, 3,249.000 (wgt'ed) examples reached here.  /* #neg=1,756 #pos=1,493 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.3207118471601509;  // std dev = 0.000, 303.000 (wgt'ed) examples reached here.  /* #pos=303 */
%   else return 0.1478090929446757;  // std dev = 28.406, 3,249.000 (wgt'ed) examples reached here.  /* #neg=1,756 #pos=1,493 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.2551722425694876;  // std dev = 3.58e-07, 303.000 (wgt'ed) examples reached here.  /* #pos=303 */
%   else return 0.11524986378962877;  // std dev = 28.406, 3,249.000 (wgt'ed) examples reached here.  /* #neg=1,756 #pos=1,493 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.20975771563253473;  // std dev = 2.49e-07, 303.000 (wgt'ed) examples reached here.  /* #pos=303 */
%   else return 0.088786541613418;  // std dev = 28.406, 3,249.000 (wgt'ed) examples reached here.  /* #neg=1,756 #pos=1,493 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.17709649774527664;  // std dev = 2.46e-07, 303.000 (wgt'ed) examples reached here.  /* #pos=303 */
%   else return 0.06784681425046506;  // std dev = 28.406, 3,249.000 (wgt'ed) examples reached here.  /* #neg=1,756 #pos=1,493 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.1527438580936716;  // std dev = 0.000, 303.000 (wgt'ed) examples reached here.  /* #pos=303 */
%   else return 0.051567790285536506;  // std dev = 28.406, 3,249.000 (wgt'ed) examples reached here.  /* #neg=1,756 #pos=1,493 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.13400703000801165;  // std dev = 0.000, 303.000 (wgt'ed) examples reached here.  /* #pos=303 */
%   else return 0.039056096141773244;  // std dev = 28.406, 3,249.000 (wgt'ed) examples reached here.  /* #neg=1,756 #pos=1,493 */


Results
   AUC ROC   = 0.566796
   AUC PR    = 0.695289
   CLL	      = -0.671201
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.133593
   F1        = 0.235698


Total learning time: 14.252 seconds
Total inference time: 3.492 seconds
AUC ROC: 0.566796


Results scoring model
   AUC ROC   = 0.584354
   AUC PR    = 0.653849
   CLL	      = -0.643463
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.168708
   F1        = 0.288709


Total scoring time: 6.499 seconds
Parameter learned model CLL: -0.643463


Structure after Parameter Learning
[['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [1.05e-06, 0, 303], 'false': [28.406, 1, 1]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 303], 'false': [28.406, 1, 1]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 303], 'false': [28.406, 1, 1]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 303], 'false': [28.406, 1, 1]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 303], 'false': [28.406, 1, 1]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [3.58e-07, 0, 303], 'false': [28.406, 1, 1]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [2.49e-07, 0, 303], 'false': [28.406, 1, 1]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [2.46e-07, 0, 303], 'false': [28.406, 1, 1]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 303], 'false': [28.406, 1, 1]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 303], 'false': [28.406, 1, 1]}]]
[{'': [3.6582398276757634e-15, 0.2483618559717438]}, {'': [-4.877653103567684e-15, 0.24836185597177207]}, {'': [-1.407015318336832e-16, 0.24836185597176805]}, {'': [-7.738584250852576e-16, 0.24836185597179794]}, {'': [-3.0485331897298027e-16, 0.24836185597174643]}, {'': [4.221045955010496e-16, 0.24836185597176336]}, {'': [2.0518973392412133e-16, 0.24836185597180305]}, {'': [1.9932717009771787e-16, 0.2483618559717889]}, {'': [-2.110522977505248e-16, 0.24836185597175622]}, {'': [-1.5242665948649013e-16, 0.24836185597176175]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
1;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
2;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
3;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
4;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
5;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
6;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
7;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
8;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
9;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.8581489350995086;  // std dev = 1.05e-06, 303.000 (wgt'ed) examples reached here.  /* #pos=303 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then if ( title(F, E), venue(F, A) )
%   | | | then return 0.3400812287472821;  // std dev = 25.620, 2,629.000 (wgt'ed) examples reached here.  /* #neg=1,362 #pos=1,267 */
%   | | | else return 0.4935656017661798;  // std dev = 4.716, 96.000 (wgt'ed) examples reached here.  /* #neg=35 #pos=61 */
%   | | else if ( haswordvenue(A, G), haswordauthor(H, G) )
%   | | | then return 0.7331489350995123;  // std dev = 0.935, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | | | else return 0.4714822684328462;  // std dev = 4.217, 75.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=46 */
%   | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | then if ( title(K, J), venue(K, B) )
%   | | | then return 0.1130508958838263;  // std dev = 6.225, 204.000 (wgt'ed) examples reached here.  /* #neg=152 #pos=52 */
%   | | | else return 0.21298764477693108;  // std dev = 3.767, 62.000 (wgt'ed) examples reached here.  /* #neg=40 #pos=22 */
%   | | else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | | | then return 0.09271683633407891;  // std dev = 5.393, 162.000 (wgt'ed) examples reached here.  /* #neg=124 #pos=38 */
%   | | | else return -0.1418510649004878;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.7194734122109578;  // std dev = 0.000, 303.000 (wgt'ed) examples reached here.  /* #pos=303 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then if ( title(F, E), venue(F, A) )
%   | | | then return 0.2934525443944289;  // std dev = 25.620, 2,629.000 (wgt'ed) examples reached here.  /* #neg=1,362 #pos=1,267 */
%   | | | else return 0.42233255668789965;  // std dev = 4.716, 96.000 (wgt'ed) examples reached here.  /* #neg=35 #pos=61 */
%   | | else if ( haswordvenue(A, G), haswordauthor(H, G) )
%   | | | then return 0.6189976143448207;  // std dev = 0.935, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | | | else return 0.4039286778409644;  // std dev = 4.217, 75.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=46 */
%   | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | then if ( haswordauthor(K, I) )
%   | | | then return 0.26188155710133326;  // std dev = 2.917, 35.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=15 */
%   | | | else return 0.09716904876170662;  // std dev = 6.630, 231.000 (wgt'ed) examples reached here.  /* #neg=172 #pos=59 */
%   | | else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | | | then return 0.08105146717282471;  // std dev = 5.393, 162.000 (wgt'ed) examples reached here.  /* #neg=124 #pos=38 */
%   | | | else return -0.12544463852839138;  // std dev = 7.45e-09, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.5553664367462832;  // std dev = 0.000, 303.000 (wgt'ed) examples reached here.  /* #pos=303 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then if ( title(F, E), venue(F, A) )
%   | | | then return 0.24443796941452126;  // std dev = 25.620, 2,629.000 (wgt'ed) examples reached here.  /* #neg=1,362 #pos=1,267 */
%   | | | else return 0.34308816842642326;  // std dev = 4.716, 96.000 (wgt'ed) examples reached here.  /* #neg=35 #pos=61 */
%   | | else if ( haswordvenue(B, G), haswordauthor(H, G) )
%   | | | then return 0.5428769529811527;  // std dev = 0.901, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | | else return 0.3260409060281219;  // std dev = 4.210, 76.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=47 */
%   | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | then if ( haswordauthor(K, I) )
%   | | | then return 0.22228493914173753;  // std dev = 2.915, 35.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=15 */
%   | | | else return 0.08379483525784528;  // std dev = 6.631, 231.000 (wgt'ed) examples reached here.  /* #neg=172 #pos=59 */
%   | | else if ( haswordvenue(A, L), haswordauthor(M, L) )
%   | | | then return -0.07060407992210939;  // std dev = 1.344, 23.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=2 */
%   | | | else return 0.07591795277833738;  // std dev = 5.220, 152.000 (wgt'ed) examples reached here.  /* #neg=116 #pos=36 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.41751358415831147;  // std dev = 0.000, 303.000 (wgt'ed) examples reached here.  /* #pos=303 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then if ( title(F, E), venue(F, B) )
%   | | | then return 0.19696390739600297;  // std dev = 25.585, 2,623.000 (wgt'ed) examples reached here.  /* #neg=1,357 #pos=1,266 */
%   | | | else return 0.2742353903074703;  // std dev = 4.888, 102.000 (wgt'ed) examples reached here.  /* #neg=40 #pos=62 */
%   | | else if ( haswordvenue(B, G), haswordauthor(H, G) )
%   | | | then return 0.4177076912577876;  // std dev = 0.900, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | | else return 0.254673400950764;  // std dev = 4.208, 76.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=47 */
%   | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | then if ( haswordauthor(K, I) )
%   | | | then return 0.2113387059770467;  // std dev = 2.987, 38.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=15 */
%   | | | else return 0.0679297299879707;  // std dev = 6.691, 241.000 (wgt'ed) examples reached here.  /* #neg=180 #pos=61 */
%   | | else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | | | then return 0.057700875420790526;  // std dev = 5.237, 149.000 (wgt'ed) examples reached here.  /* #neg=113 #pos=36 */
%   | | | else return -0.11673183834572537;  // std dev = 0.022, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.3207118471601509;  // std dev = 0.000, 303.000 (wgt'ed) examples reached here.  /* #pos=303 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then if ( title(F, E), venue(F, B) )
%   | | | then return 0.15515940613602874;  // std dev = 25.585, 2,623.000 (wgt'ed) examples reached here.  /* #neg=1,357 #pos=1,266 */
%   | | | else return 0.21129069634528827;  // std dev = 4.887, 102.000 (wgt'ed) examples reached here.  /* #neg=40 #pos=62 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.22774776471687286;  // std dev = 3.231, 48.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
%   | | | else return 0.17235504558295178;  // std dev = 2.848, 35.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=21 */
%   | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | then if ( haswordauthor(K, I) )
%   | | | then return 0.1776149368319689;  // std dev = 2.984, 38.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=15 */
%   | | | else return 0.05750335531008763;  // std dev = 6.689, 241.000 (wgt'ed) examples reached here.  /* #neg=180 #pos=61 */
%   | | else if ( haswordvenue(A, L), haswordauthor(M, L) )
%   | | | then return -0.183300865634934;  // std dev = 0.199, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | | else return 0.04945106475799742;  // std dev = 5.217, 153.000 (wgt'ed) examples reached here.  /* #neg=117 #pos=36 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.2551722425694876;  // std dev = 3.58e-07, 303.000 (wgt'ed) examples reached here.  /* #pos=303 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then if ( haswordtitle(G, E) )
%   | | | then return 0.14512140723473993;  // std dev = 4.283, 75.000 (wgt'ed) examples reached here.  /* #neg=36 #pos=39 */
%   | | | else return -0.1922315593840494;  // std dev = 1.543, 20.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=4 */
%   | | else if ( haswordtitle(H, D) )
%   | | | then return 0.12372138762835101;  // std dev = 25.629, 2,637.000 (wgt'ed) examples reached here.  /* #neg=1,346 #pos=1,291 */
%   | | | else return 0.14424455973937106;  // std dev = 4.205, 76.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=47 */
%   | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | then if ( title(K, J), venue(K, B) )
%   | | | then return 0.04898499623779041;  // std dev = 6.183, 204.000 (wgt'ed) examples reached here.  /* #neg=152 #pos=52 */
%   | | | else return 0.11100784682099309;  // std dev = 3.707, 62.000 (wgt'ed) examples reached here.  /* #neg=40 #pos=22 */
%   | | else if ( haswordvenue(A, L), haswordauthor(M, L) )
%   | | | then return -0.07665029537540723;  // std dev = 1.349, 23.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=2 */
%   | | | else return 0.04649738318515391;  // std dev = 5.216, 152.000 (wgt'ed) examples reached here.  /* #neg=116 #pos=36 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.20975771563253473;  // std dev = 2.49e-07, 303.000 (wgt'ed) examples reached here.  /* #pos=303 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then if ( title(F, E), venue(F, B) )
%   | | | then return 0.09146086699503542;  // std dev = 25.568, 2,623.000 (wgt'ed) examples reached here.  /* #neg=1,357 #pos=1,266 */
%   | | | else return 0.12975071158466212;  // std dev = 4.885, 102.000 (wgt'ed) examples reached here.  /* #neg=40 #pos=62 */
%   | | else if ( haswordvenue(A, G), haswordauthor(H, G) )
%   | | | then return 0.253759233695965;  // std dev = 0.938, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | | | else return 0.10596013358912777;  // std dev = 4.197, 75.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=46 */
%   | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | then if ( haswordauthor(K, I) )
%   | | | then return 0.1365418756849534;  // std dev = 2.979, 38.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=15 */
%   | | | else return 0.03945336852540439;  // std dev = 6.673, 241.000 (wgt'ed) examples reached here.  /* #neg=180 #pos=61 */
%   | | else if ( haswordvenue(A, L), haswordauthor(M, L) )
%   | | | then return -0.1627585306925882;  // std dev = 0.198, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | | else return 0.03351631183720153;  // std dev = 5.216, 153.000 (wgt'ed) examples reached here.  /* #neg=117 #pos=36 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.17709649774527664;  // std dev = 2.46e-07, 303.000 (wgt'ed) examples reached here.  /* #pos=303 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then if ( title(F, E), venue(F, A) )
%   | | | then return 0.06938915548571901;  // std dev = 25.601, 2,629.000 (wgt'ed) examples reached here.  /* #neg=1,362 #pos=1,267 */
%   | | | else return 0.10211751794098499;  // std dev = 4.703, 96.000 (wgt'ed) examples reached here.  /* #neg=35 #pos=61 */
%   | | else if ( haswordvenue(B, G), haswordauthor(H, G) )
%   | | | then return 0.21449595777931244;  // std dev = 0.910, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | | else return 0.07943419797413698;  // std dev = 4.201, 76.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=47 */
%   | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | then if ( haswordauthor(K, I) )
%   | | | then return 0.1366774472157205;  // std dev = 2.829, 35.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=15 */
%   | | | else return 0.030482214021290154;  // std dev = 6.590, 231.000 (wgt'ed) examples reached here.  /* #neg=172 #pos=59 */
%   | | else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | | | then return 0.028809558746859414;  // std dev = 5.388, 162.000 (wgt'ed) examples reached here.  /* #neg=124 #pos=38 */
%   | | | else return -0.10827729710029152;  // std dev = 0.087, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.1527438580936716;  // std dev = 0.000, 303.000 (wgt'ed) examples reached here.  /* #pos=303 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then if ( title(F, E), venue(F, A) )
%   | | | then return 0.0524814456696885;  // std dev = 25.601, 2,629.000 (wgt'ed) examples reached here.  /* #neg=1,362 #pos=1,267 */
%   | | | else return 0.07685263689305293;  // std dev = 4.703, 96.000 (wgt'ed) examples reached here.  /* #neg=35 #pos=61 */
%   | | else if ( haswordvenue(A, G), haswordauthor(H, G) )
%   | | | then return 0.1722058790659677;  // std dev = 0.931, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | | | else return 0.057916024438172245;  // std dev = 4.195, 75.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=46 */
%   | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | then if ( haswordauthor(K, I) )
%   | | | then return 0.10787424139145586;  // std dev = 2.824, 35.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=15 */
%   | | | else return 0.02514490567926652;  // std dev = 6.589, 231.000 (wgt'ed) examples reached here.  /* #neg=172 #pos=59 */
%   | | else if ( haswordvenue(B, L), haswordauthor(M, L) )
%   | | | then return -0.13947082827705232;  // std dev = 0.928, 12.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=1 */
%   | | | else return 0.026350925510281308;  // std dev = 5.296, 163.000 (wgt'ed) examples reached here.  /* #neg=126 #pos=37 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.13400703000801165;  // std dev = 0.000, 303.000 (wgt'ed) examples reached here.  /* #pos=303 */
%   else if ( haswordvenue(B, D), haswordtitle(E, D) )
%   | then if ( haswordtitle(E, F), haswordvenue(A, F) )
%   | | then if ( haswordvenue(A, D) )
%   | | | then return 0.04023100521087313;  // std dev = 26.030, 2,725.000 (wgt'ed) examples reached here.  /* #neg=1,397 #pos=1,328 */
%   | | | else return 0.01972139619484316;  // std dev = 5.471, 140.000 (wgt'ed) examples reached here.  /* #neg=90 #pos=50 */
%   | | else if ( haswordauthor(G, D) )
%   | | | then return -0.029425447293450625;  // std dev = 1.071, 10.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=3 */
%   | | | else return 0.05160619825064203;  // std dev = 5.695, 177.000 (wgt'ed) examples reached here.  /* #neg=122 #pos=55 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( title(J, I), venue(J, A) )
%   | | | then return 0.043282765007977675;  // std dev = 5.616, 166.000 (wgt'ed) examples reached here.  /* #neg=113 #pos=53 */
%   | | | else return -0.03473111580960377;  // std dev = 1.431, 13.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=4 */
%   | | else if ( haswordvenue(A, K), haswordvenue(B, K) )
%   | | | then return -0.5537997246843653;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | | else return -0.09706400216022101;  // std dev = 0.077, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */


Results
   AUC ROC   = 0.580704
   AUC PR    = 0.711403
   CLL	      = -0.669945
   Precision = 0.90604 at threshold = 0.5
   Recall    = 0.175097
   F1        = 0.293478


Total learning time: 1514.919 seconds
Total inference time: 8.626 seconds
AUC ROC: 0.580704


Results scoring model
   AUC ROC   = 0.649815
   AUC PR    = 0.69788
   CLL	      = -0.624567
   Precision = 0.874214 at threshold = 0.5
   Recall    = 0.232183
   F1        = 0.366916


Total scoring time: 40.461 seconds
Refined model CLL: -0.624567


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.580704
   AUC PR    = 0.711403
   CLL	      = -0.669945
   Precision = 0.90604 at threshold = 0.5
   Recall    = 0.175097
   F1        = 0.293478


Total learning time: 1576.131 seconds
Total inference time: 8.626 seconds
AUC ROC: 0.580704
Total revision time: 1576.131
Best scored revision CLL: -0.624567


Dataset: 3_imdb_cora, Fold: 2, Type: Transfer (trRDN-B), Time: 03:35:56
{'AUC ROC': 0.580704, 'AUC PR': 0.711403, 'CLL': -0.669945, 'Precision': [0.90604, 0.5], 'Recall': 0.175097, 'F1': 0.293478, 'Learning time': 1576.131, 'Inference time': 8.626, 'parameter_0.8': {'AUC ROC': 0.566796, 'AUC PR': 0.695289, 'CLL': -0.671201, 'Precision': [1.0, 0.5], 'Recall': 0.133593, 'F1': 0.235698, 'Learning time': 14.252, 'Inference time': 3.492}}


Amount of data: 1.0
******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- actor(A), director(B).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- actor(A), director(B).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- actor(A), director(B).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- director(B), actor(A).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.8581489350995082;  // std dev = 1.53e-06, 392.000 (wgt'ed) examples reached here.  /* #pos=392 */
%   else return 0.31592671287728497;  // std dev = 31.706, 4,050.000 (wgt'ed) examples reached here.  /* #neg=2,196 #pos=1,854 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.7194734122109581;  // std dev = 0.000, 392.000 (wgt'ed) examples reached here.  /* #pos=392 */
%   else return 0.27296481625592045;  // std dev = 31.706, 4,050.000 (wgt'ed) examples reached here.  /* #neg=2,196 #pos=1,854 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.555366436746283;  // std dev = 0.000, 392.000 (wgt'ed) examples reached here.  /* #pos=392 */
%   else return 0.22827279920567362;  // std dev = 31.706, 4,050.000 (wgt'ed) examples reached here.  /* #neg=2,196 #pos=1,854 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.4175135841583121;  // std dev = 0.000, 392.000 (wgt'ed) examples reached here.  /* #pos=392 */
%   else return 0.18544829086049558;  // std dev = 31.706, 4,050.000 (wgt'ed) examples reached here.  /* #neg=2,196 #pos=1,854 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.3207118471601517;  // std dev = 0.000, 392.000 (wgt'ed) examples reached here.  /* #pos=392 */
%   else return 0.14719311712395683;  // std dev = 31.706, 4,050.000 (wgt'ed) examples reached here.  /* #neg=2,196 #pos=1,854 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.25517224256948734;  // std dev = 4.46e-07, 392.000 (wgt'ed) examples reached here.  /* #pos=392 */
%   else return 0.11483201599150747;  // std dev = 31.706, 4,050.000 (wgt'ed) examples reached here.  /* #neg=2,196 #pos=1,854 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.2097577156325346;  // std dev = 2.46e-07, 392.000 (wgt'ed) examples reached here.  /* #pos=392 */
%   else return 0.08851067813677867;  // std dev = 31.706, 4,050.000 (wgt'ed) examples reached here.  /* #neg=2,196 #pos=1,854 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.1770964977452768;  // std dev = 2.19e-07, 392.000 (wgt'ed) examples reached here.  /* #pos=392 */
%   else return 0.06766818394942176;  // std dev = 31.706, 4,050.000 (wgt'ed) examples reached here.  /* #neg=2,196 #pos=1,854 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.15274385809367164;  // std dev = 0.000, 392.000 (wgt'ed) examples reached here.  /* #pos=392 */
%   else return 0.05145390815938232;  // std dev = 31.706, 4,050.000 (wgt'ed) examples reached here.  /* #neg=2,196 #pos=1,854 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.13400703000801217;  // std dev = 0.000, 392.000 (wgt'ed) examples reached here.  /* #pos=392 */
%   else return 0.03898459916775178;  // std dev = 31.706, 4,050.000 (wgt'ed) examples reached here.  /* #neg=2,196 #pos=1,854 */


Results
   AUC ROC   = 0.566796
   AUC PR    = 0.695289
   CLL	      = -0.671983
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.133593
   F1        = 0.235698


Total learning time: 15.996 seconds
Total inference time: 3.492 seconds
AUC ROC: 0.566796


Results scoring model
   AUC ROC   = 0.587266
   AUC PR    = 0.657582
   CLL	      = -0.641533
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.174533
   F1        = 0.297195


Total scoring time: 6.26 seconds
Parameter learned model CLL: -0.641533


Structure after Parameter Learning
[['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [1.53e-06, 0, 392], 'false': [31.706, 2, 1]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 392], 'false': [31.706, 2, 1]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 392], 'false': [31.706, 2, 1]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 392], 'false': [31.706, 2, 1]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 392], 'false': [31.706, 2, 1]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [4.46e-07, 0, 392], 'false': [31.706, 2, 1]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [2.46e-07, 0, 392], 'false': [31.706, 2, 1]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [2.19e-07, 0, 392], 'false': [31.706, 2, 1]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 392], 'false': [31.706, 2, 1]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 392], 'false': [31.706, 2, 1]}]]
[{'': [5.945357584931451e-15, 0.24821728395056872]}, {'': [-5.3653226985966745e-15, 0.2482172839505584]}, {'': [-1.1600697726695512e-15, 0.24821728395063447]}, {'': [-1.740104659004327e-15, 0.24821728395063047]}, {'': [-1.5407176668267478e-15, 0.24821728395063528]}, {'': [5.075305255429287e-16, 0.24821728395062254]}, {'': [1.5407176668267478e-16, 0.24821728395063788]}, {'': [1.2235110883624173e-16, 0.2482172839506237]}, {'': [-2.628283078704452e-16, 0.24821728395060227]}, {'': [-3.149408171895852e-16, 0.2482172839506093]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
1;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
2;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
3;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
4;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
5;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
6;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
7;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
8;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
9;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.8581489350995082;  // std dev = 1.53e-06, 392.000 (wgt'ed) examples reached here.  /* #pos=392 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then if ( title(F, E), venue(F, A) )
%   | | | then return 0.33931279421129895;  // std dev = 28.550, 3,265.000 (wgt'ed) examples reached here.  /* #neg=1,694 #pos=1,571 */
%   | | | else return 0.46444814769793763;  // std dev = 5.506, 127.000 (wgt'ed) examples reached here.  /* #neg=50 #pos=77 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.5406886176391952;  // std dev = 3.695, 63.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=43 */
%   | | | else return 0.40162719596907653;  // std dev = 3.378, 46.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=25 */
%   | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | then if ( haswordtitle(J, K), haswordvenue(B, K) )
%   | | | then return 0.18029658610622404;  // std dev = 5.704, 149.000 (wgt'ed) examples reached here.  /* #neg=101 #pos=48 */
%   | | | else return 0.09252393509951179;  // std dev = 5.870, 192.000 (wgt'ed) examples reached here.  /* #neg=147 #pos=45 */
%   | | else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | | | then return 0.08891816586874254;  // std dev = 5.883, 195.000 (wgt'ed) examples reached here.  /* #neg=150 #pos=45 */
%   | | | else return -0.1418510649004878;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.7194734122109581;  // std dev = 0.000, 392.000 (wgt'ed) examples reached here.  /* #pos=392 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then if ( title(F, E), venue(F, A) )
%   | | | then return 0.2928016177302545;  // std dev = 28.550, 3,265.000 (wgt'ed) examples reached here.  /* #neg=1,694 #pos=1,571 */
%   | | | else return 0.3980567060418605;  // std dev = 5.506, 127.000 (wgt'ed) examples reached here.  /* #neg=50 #pos=77 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.46144722585113285;  // std dev = 3.695, 63.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=43 */
%   | | | else return 0.3454038110313955;  // std dev = 3.378, 46.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=25 */
%   | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | then if ( haswordauthor(K, I) )
%   | | | then return 0.21488288241953368;  // std dev = 3.244, 45.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=17 */
%   | | | else return 0.09877806342102352;  // std dev = 7.512, 296.000 (wgt'ed) examples reached here.  /* #neg=220 #pos=76 */
%   | | else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | | | then return 0.07774578121441045;  // std dev = 5.883, 195.000 (wgt'ed) examples reached here.  /* #neg=150 #pos=45 */
%   | | | else return -0.12544463852839138;  // std dev = 7.45e-09, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.555366436746283;  // std dev = 0.000, 392.000 (wgt'ed) examples reached here.  /* #pos=392 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then if ( title(F, E), venue(F, A) )
%   | | | then return 0.24392647231585463;  // std dev = 28.550, 3,265.000 (wgt'ed) examples reached here.  /* #neg=1,694 #pos=1,571 */
%   | | | else return 0.32489262366200605;  // std dev = 5.506, 127.000 (wgt'ed) examples reached here.  /* #neg=50 #pos=77 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.3720571007523071;  // std dev = 3.695, 63.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=43 */
%   | | | else return 0.28482288051202653;  // std dev = 3.378, 46.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=25 */
%   | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | then if ( haswordtitle(J, K), haswordvenue(A, K) )
%   | | | then return 0.13853932434862473;  // std dev = 5.691, 149.000 (wgt'ed) examples reached here.  /* #neg=101 #pos=48 */
%   | | | else return 0.06739536297660906;  // std dev = 5.883, 195.000 (wgt'ed) examples reached here.  /* #neg=150 #pos=45 */
%   | | else if ( haswordvenue(B, L), haswordauthor(M, L) )
%   | | | then return -0.07802643639409063;  // std dev = 1.349, 24.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=2 */
%   | | | else return 0.07315975377414183;  // std dev = 5.708, 181.000 (wgt'ed) examples reached here.  /* #neg=138 #pos=43 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.4175135841583121;  // std dev = 0.000, 392.000 (wgt'ed) examples reached here.  /* #pos=392 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then if ( title(F, E), venue(F, B) )
%   | | | then return 0.19665264235420143;  // std dev = 28.526, 3,261.000 (wgt'ed) examples reached here.  /* #neg=1,690 #pos=1,571 */
%   | | | else return 0.2620128208340096;  // std dev = 5.618, 131.000 (wgt'ed) examples reached here.  /* #neg=54 #pos=77 */
%   | | else if ( haswordvenue(B, G), haswordauthor(H, G) )
%   | | | then return 0.39134395946265055;  // std dev = 1.263, 9.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=7 */
%   | | | else return 0.2500834697933854;  // std dev = 4.838, 100.000 (wgt'ed) examples reached here.  /* #neg=39 #pos=61 */
%   | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | then if ( haswordtitle(J, K), haswordauthor(L, K) )
%   | | | then return 0.07552686934715293;  // std dev = 7.833, 319.000 (wgt'ed) examples reached here.  /* #neg=235 #pos=84 */
%   | | | else return 0.20846484222480918;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=9 */
%   | | else if ( haswordvenue(A, M), haswordauthor(N, M) )
%   | | | then return -0.0828405325015631;  // std dev = 1.347, 24.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=2 */
%   | | | else return 0.06402432034264938;  // std dev = 5.720, 184.000 (wgt'ed) examples reached here.  /* #neg=141 #pos=43 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.3207118471601517;  // std dev = 0.000, 392.000 (wgt'ed) examples reached here.  /* #pos=392 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then if ( title(F, E), venue(F, B) )
%   | | | then return 0.15495657098674953;  // std dev = 28.525, 3,261.000 (wgt'ed) examples reached here.  /* #neg=1,690 #pos=1,571 */
%   | | | else return 0.20238533925384247;  // std dev = 5.618, 131.000 (wgt'ed) examples reached here.  /* #neg=54 #pos=77 */
%   | | else if ( haswordvenue(A, G), haswordauthor(H, G) )
%   | | | then return 0.3507859133020727;  // std dev = 1.234, 9.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=7 */
%   | | | else return 0.18616207363007958;  // std dev = 4.830, 100.000 (wgt'ed) examples reached here.  /* #neg=39 #pos=61 */
%   | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | then if ( haswordauthor(K, I) )
%   | | | then return 0.18829485054161524;  // std dev = 3.173, 43.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=17 */
%   | | | else return 0.05598791391738396;  // std dev = 7.502, 301.000 (wgt'ed) examples reached here.  /* #neg=225 #pos=76 */
%   | | else if ( haswordvenue(B, L), haswordauthor(M, L) )
%   | | | then return -0.07754694593637133;  // std dev = 1.349, 24.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=2 */
%   | | | else return 0.05205709145073722;  // std dev = 5.704, 181.000 (wgt'ed) examples reached here.  /* #neg=138 #pos=43 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.25517224256948734;  // std dev = 4.46e-07, 392.000 (wgt'ed) examples reached here.  /* #pos=392 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then if ( title(F, E), venue(F, B) )
%   | | | then return 0.1200094455725494;  // std dev = 28.525, 3,261.000 (wgt'ed) examples reached here.  /* #neg=1,690 #pos=1,571 */
%   | | | else return 0.15374929797965092;  // std dev = 5.617, 131.000 (wgt'ed) examples reached here.  /* #neg=54 #pos=77 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.1722047742560783;  // std dev = 3.685, 63.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=43 */
%   | | | else return 0.12141266748088701;  // std dev = 3.365, 46.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=25 */
%   | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | then if ( haswordauthor(K, I) )
%   | | | then return 0.1557381969936187;  // std dev = 3.170, 43.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=17 */
%   | | | else return 0.04702746827254502;  // std dev = 7.501, 301.000 (wgt'ed) examples reached here.  /* #neg=225 #pos=76 */
%   | | else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | | | then return 0.04140273678294177;  // std dev = 5.856, 192.000 (wgt'ed) examples reached here.  /* #neg=147 #pos=45 */
%   | | | else return -0.12220339025394808;  // std dev = 0.044, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.2097577156325346;  // std dev = 2.46e-07, 392.000 (wgt'ed) examples reached here.  /* #pos=392 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then if ( title(F, E), venue(F, A) )
%   | | | then return 0.09181832684189609;  // std dev = 28.547, 3,265.000 (wgt'ed) examples reached here.  /* #neg=1,694 #pos=1,571 */
%   | | | else return 0.11816023311814398;  // std dev = 5.504, 127.000 (wgt'ed) examples reached here.  /* #neg=50 #pos=77 */
%   | | else if ( haswordvenue(A, G), haswordauthor(H, G) )
%   | | | then return 0.22744251836078522;  // std dev = 1.235, 9.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=7 */
%   | | | else return 0.10317822056577411;  // std dev = 4.826, 100.000 (wgt'ed) examples reached here.  /* #neg=39 #pos=61 */
%   | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | then if ( haswordtitle(J, K), haswordauthor(L, K) )
%   | | | then return 0.04424458043820167;  // std dev = 7.788, 319.000 (wgt'ed) examples reached here.  /* #neg=235 #pos=84 */
%   | | | else return 0.15165832429003023;  // std dev = 2.315, 22.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=9 */
%   | | else if ( haswordvenue(B, M), haswordauthor(N, M) )
%   | | | then return -0.1267281531140341;  // std dev = 0.945, 14.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=1 */
%   | | | else return 0.035284794247329616;  // std dev = 5.798, 194.000 (wgt'ed) examples reached here.  /* #neg=150 #pos=44 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.1770964977452768;  // std dev = 2.19e-07, 392.000 (wgt'ed) examples reached here.  /* #pos=392 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then if ( haswordtitle(G, E) )
%   | | | then return 0.12517353741169748;  // std dev = 4.577, 85.000 (wgt'ed) examples reached here.  /* #neg=38 #pos=47 */
%   | | | else return -0.22803592296654276;  // std dev = 1.844, 25.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=5 */
%   | | else if ( haswordtitle(H, D) )
%   | | | then return 0.0716228837724754;  // std dev = 28.637, 3,291.000 (wgt'ed) examples reached here.  /* #neg=1,688 #pos=1,603 */
%   | | | else return 0.07769819387459143;  // std dev = 4.826, 100.000 (wgt'ed) examples reached here.  /* #neg=39 #pos=61 */
%   | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | then if ( haswordauthor(K, I) )
%   | | | then return 0.12322309186397801;  // std dev = 3.149, 43.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=17 */
%   | | | else return 0.03134728251464116;  // std dev = 7.491, 301.000 (wgt'ed) examples reached here.  /* #neg=225 #pos=76 */
%   | | else if ( haswordvenue(A, L), haswordauthor(M, L) )
%   | | | then return -0.12329195334798328;  // std dev = 0.943, 14.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=1 */
%   | | | else return 0.029413012733769655;  // std dev = 5.772, 191.000 (wgt'ed) examples reached here.  /* #neg=147 #pos=44 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.15274385809367164;  // std dev = 0.000, 392.000 (wgt'ed) examples reached here.  /* #pos=392 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then if ( haswordtitle(G, E) )
%   | | | then return 0.09507192986089538;  // std dev = 4.632, 87.000 (wgt'ed) examples reached here.  /* #neg=40 #pos=47 */
%   | | | else return -0.22392187112727935;  // std dev = 1.874, 23.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=5 */
%   | | else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | | | then return 0.034521810023436864;  // std dev = 4.891, 102.000 (wgt'ed) examples reached here.  /* #neg=54 #pos=48 */
%   | | | else return 0.055081234040201724;  // std dev = 28.606, 3,289.000 (wgt'ed) examples reached here.  /* #neg=1,673 #pos=1,616 */
%   | else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | | then if ( title(L, K), venue(L, B) )
%   | | | then return 0.023782006021523146;  // std dev = 6.997, 265.000 (wgt'ed) examples reached here.  /* #neg=198 #pos=67 */
%   | | | else return 0.07676267462815449;  // std dev = 4.091, 76.000 (wgt'ed) examples reached here.  /* #neg=50 #pos=26 */
%   | | else if ( haswordvenue(A, M), haswordauthor(N, M) )
%   | | | then return -0.09337857404870963;  // std dev = 1.350, 24.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=2 */
%   | | | else return 0.029226390613619646;  // std dev = 5.711, 184.000 (wgt'ed) examples reached here.  /* #neg=141 #pos=43 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.13400703000801217;  // std dev = 0.000, 392.000 (wgt'ed) examples reached here.  /* #pos=392 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then if ( title(F, E), venue(F, B) )
%   | | | then return 0.0392930479495477;  // std dev = 28.488, 3,261.000 (wgt'ed) examples reached here.  /* #neg=1,690 #pos=1,571 */
%   | | | else return 0.05742819858375089;  // std dev = 5.620, 131.000 (wgt'ed) examples reached here.  /* #neg=54 #pos=77 */
%   | | else if ( haswordvenue(A, G), haswordauthor(H, G) )
%   | | | then return 0.16778090950494295;  // std dev = 1.295, 9.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=7 */
%   | | | else return 0.04452655851187089;  // std dev = 4.826, 100.000 (wgt'ed) examples reached here.  /* #neg=39 #pos=61 */
%   | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | then if ( haswordauthor(K, I) )
%   | | | then return 0.09295205850792311;  // std dev = 3.145, 43.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=17 */
%   | | | else return 0.02020399586040151;  // std dev = 7.478, 301.000 (wgt'ed) examples reached here.  /* #neg=225 #pos=76 */
%   | | else if ( haswordvenue(B, L), haswordauthor(M, L) )
%   | | | then return -0.0806527632991489;  // std dev = 1.345, 24.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=2 */
%   | | | else return 0.023764958484937263;  // std dev = 5.691, 181.000 (wgt'ed) examples reached here.  /* #neg=138 #pos=43 */


Results
   AUC ROC   = 0.591166
   AUC PR    = 0.719998
   CLL	      = -0.667431
   Precision = 0.90604 at threshold = 0.5
   Recall    = 0.175097
   F1        = 0.293478


Total learning time: 1662.401 seconds
Total inference time: 9.825 seconds
AUC ROC: 0.591166


Results scoring model
   AUC ROC   = 0.654165
   AUC PR    = 0.701371
   CLL	      = -0.623682
   Precision = 0.855096 at threshold = 0.5
   Recall    = 0.239092
   F1        = 0.373695


Total scoring time: 43.076 seconds
Refined model CLL: -0.623682


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.591166
   AUC PR    = 0.719998
   CLL	      = -0.667431
   Precision = 0.90604 at threshold = 0.5
   Recall    = 0.175097
   F1        = 0.293478


Total learning time: 1727.7330000000002 seconds
Total inference time: 9.825 seconds
AUC ROC: 0.591166
Total revision time: 1727.7330000000002
Best scored revision CLL: -0.623682


Dataset: 3_imdb_cora, Fold: 2, Type: Transfer (trRDN-B), Time: 04:04:59
{'AUC ROC': 0.591166, 'AUC PR': 0.719998, 'CLL': -0.667431, 'Precision': [0.90604, 0.5], 'Recall': 0.175097, 'F1': 0.293478, 'Learning time': 1727.7330000000002, 'Inference time': 9.825, 'parameter_1.0': {'AUC ROC': 0.566796, 'AUC PR': 0.695289, 'CLL': -0.671983, 'Precision': [1.0, 0.5], 'Recall': 0.133593, 'F1': 0.235698, 'Learning time': 15.996, 'Inference time': 3.492}}


Starting fold 3

Target train facts examples: 33252
Target train pos examples: 2436
Target train neg examples: 2159

Target test facts examples: 9306
Target test pos	 examples: 581
Target test neg examples: 581

Amount of data: 0.2
******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- actor(A), director(B).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- actor(A), director(B).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- actor(A), director(B).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- director(B), actor(A).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.8581489350995125;  // std dev = 0.000, 60.000 (wgt'ed) examples reached here.  /* #pos=60 */
%   else return 0.35581793276850526;  // std dev = 14.646, 858.000 (wgt'ed) examples reached here.  /* #neg=431 #pos=427 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.7194734122109543;  // std dev = 0.000, 60.000 (wgt'ed) examples reached here.  /* #pos=60 */
%   else return 0.3067704308962248;  // std dev = 14.646, 858.000 (wgt'ed) examples reached here.  /* #neg=431 #pos=427 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.5553664367462837;  // std dev = 1.33e-07, 60.000 (wgt'ed) examples reached here.  /* #pos=60 */
%   else return 0.25487309308124545;  // std dev = 14.646, 858.000 (wgt'ed) examples reached here.  /* #neg=431 #pos=427 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.41751358415831036;  // std dev = 0.000, 60.000 (wgt'ed) examples reached here.  /* #pos=60 */
%   else return 0.2050169909668959;  // std dev = 14.646, 858.000 (wgt'ed) examples reached here.  /* #neg=431 #pos=427 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.3207118471601497;  // std dev = 0.000, 60.000 (wgt'ed) examples reached here.  /* #pos=60 */
%   else return 0.16085430693161828;  // std dev = 14.646, 858.000 (wgt'ed) examples reached here.  /* #neg=431 #pos=427 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.25517224256948967;  // std dev = 0.000, 60.000 (wgt'ed) examples reached here.  /* #pos=60 */
%   else return 0.12403712482833838;  // std dev = 14.646, 858.000 (wgt'ed) examples reached here.  /* #neg=431 #pos=427 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.20975771563253565;  // std dev = 0.000, 60.000 (wgt'ed) examples reached here.  /* #pos=60 */
%   else return 0.09458468427872167;  // std dev = 14.646, 858.000 (wgt'ed) examples reached here.  /* #neg=431 #pos=427 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.1770964977452773;  // std dev = 0.000, 60.000 (wgt'ed) examples reached here.  /* #pos=60 */
%   else return 0.07163363574537436;  // std dev = 14.646, 858.000 (wgt'ed) examples reached here.  /* #neg=431 #pos=427 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.15274385809367075;  // std dev = 2.98e-08, 60.000 (wgt'ed) examples reached here.  /* #pos=60 */
%   else return 0.05403138111948021;  // std dev = 14.646, 858.000 (wgt'ed) examples reached here.  /* #neg=431 #pos=427 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.13400703000801098;  // std dev = 4.21e-08, 60.000 (wgt'ed) examples reached here.  /* #pos=60 */
%   else return 0.040657704380216986;  // std dev = 14.646, 858.000 (wgt'ed) examples reached here.  /* #neg=431 #pos=427 */


Results
   AUC ROC   = 0.585198
   AUC PR    = 0.65057
   CLL	      = -0.641278
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.170396
   F1        = 0.291176


Total learning time: 8.662 seconds
Total inference time: 3.313 seconds
AUC ROC: 0.585198


Results scoring model
   AUC ROC   = 0.561602
   AUC PR    = 0.643579
   CLL	      = -0.657878
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.123203
   F1        = 0.219378


Total scoring time: 4.301 seconds
Parameter learned model CLL: -0.657878


Structure after Parameter Learning
[['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 60], 'false': [14.646, 431, 427]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 60], 'false': [14.646, 431, 427]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [1.33e-07, 0, 60], 'false': [14.646, 431, 427]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 60], 'false': [14.646, 431, 427]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 60], 'false': [14.646, 431, 427]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 60], 'false': [14.646, 431, 427]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 60], 'false': [14.646, 431, 427]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 60], 'false': [14.646, 431, 427]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [2.98e-08, 0, 60], 'false': [14.646, 431, 427]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [4.21e-08, 0, 60], 'false': [14.646, 431, 427]}]]
[{'': [-4.736951571734001e-16, 0.24999456642812284]}, {'': [-5.921189464667501e-17, 0.24999456642813592]}, {'': [2.9605947323337506e-16, 0.24999456642812856]}, {'': [-3.2566542055671256e-16, 0.2499945664281223]}, {'': [-1.7763568394002506e-16, 0.24999456642813117]}, {'': [-3.700743415417188e-17, 0.24999456642812823]}, {'': [-3.700743415417188e-17, 0.24999456642812676]}, {'': [-2.590520390792032e-17, 0.24999456642814108]}, {'': [1.4802973661668754e-17, 0.2499945664281336]}, {'': [2.960594732333751e-17, 0.24999456642813844]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
1;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
2;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
3;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
4;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
5;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
6;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
7;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
8;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
9;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.8581489350995125;  // std dev = 0.000, 60.000 (wgt'ed) examples reached here.  /* #pos=60 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.3826054568386381;  // std dev = 0.499, 736.000 (wgt'ed) examples reached here.  /* #neg=350 #pos=386 */
%   | | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | | then return 0.40360348055405776;  // std dev = 2.335, 22.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=12 */
%   | | | else return 0.5248156017661789;  // std dev = 1.155, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return 0.24945328292559932;  // std dev = 2.341, 23.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=9 */
%   | | | else return 0.08672036367094095;  // std dev = 2.484, 35.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=8 */
%   | | else if ( haswordvenue(A, K), haswordauthor(L, K) )
%   | | | then return -0.14185106490048777;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.1005731775237548;  // std dev = 2.462, 33.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=8 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.7194734122109543;  // std dev = 0.000, 60.000 (wgt'ed) examples reached here.  /* #pos=60 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.32938615974280044;  // std dev = 0.499, 736.000 (wgt'ed) examples reached here.  /* #neg=350 #pos=386 */
%   | | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | | then return 0.34706599335169397;  // std dev = 2.335, 22.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=12 */
%   | | | else return 0.448295606241962;  // std dev = 1.155, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | then if ( haswordauthor(J, H) )
%   | | | then return 0.33317955236836266;  // std dev = 1.568, 10.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
%   | | | else return 0.09002953607700241;  // std dev = 2.989, 48.000 (wgt'ed) examples reached here.  /* #neg=36 #pos=12 */
%   | | else if ( haswordvenue(A, K), haswordauthor(L, K) )
%   | | | then return -0.1527388155768104;  // std dev = 3.73e-09, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | | else return 0.10526759330665617;  // std dev = 2.436, 31.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=8 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.5553664367462837;  // std dev = 1.33e-07, 60.000 (wgt'ed) examples reached here.  /* #pos=60 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.27246302346765583;  // std dev = 0.499, 736.000 (wgt'ed) examples reached here.  /* #neg=350 #pos=386 */
%   | | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | | then return 0.28610086655010397;  // std dev = 2.335, 22.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=12 */
%   | | | else return 0.36236334632262296;  // std dev = 1.155, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return 0.1924782306416656;  // std dev = 2.314, 23.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=9 */
%   | | | else return 0.06640115961304068;  // std dev = 2.470, 35.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=8 */
%   | | else if ( haswordvenue(B, K), haswordauthor(L, K) )
%   | | | then return 0.0036586281464251968;  // std dev = 0.887, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else return 0.06213541385860021;  // std dev = 2.319, 31.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=7 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.41751358415831036;  // std dev = 0.000, 60.000 (wgt'ed) examples reached here.  /* #pos=60 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then if ( haswordtitle(G, E) )
%   | | | then return 0.24634872421675105;  // std dev = 1.492, 9.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=5 */
%   | | | else return -0.056710073654501245;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | | | then return 0.17393915526554599;  // std dev = 2.596, 27.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=13 */
%   | | | else return 0.22135974152737373;  // std dev = 13.427, 724.000 (wgt'ed) examples reached here.  /* #neg=341 #pos=383 */
%   | else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | | then if ( haswordtitle(K, L), haswordvenue(B, L) )
%   | | | then return 0.16010693666136314;  // std dev = 2.311, 23.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=9 */
%   | | | else return 0.05718500164148935;  // std dev = 2.469, 35.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=8 */
%   | | else if ( haswordvenue(B, M), haswordauthor(N, M) )
%   | | | then return 0.0030813827014679273;  // std dev = 0.887, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else return 0.05345702665966688;  // std dev = 2.319, 31.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=7 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.3207118471601497;  // std dev = 0.000, 60.000 (wgt'ed) examples reached here.  /* #pos=60 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.16942428738178042;  // std dev = 0.499, 736.000 (wgt'ed) examples reached here.  /* #neg=350 #pos=386 */
%   | | else if ( haswordvenue(B, F), haswordtitle(G, F) )
%   | | | then return 0.16445451059900063;  // std dev = 2.090, 18.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=10 */
%   | | | else return 0.2322473010084681;  // std dev = 1.549, 10.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=6 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return 0.1305039149845622;  // std dev = 2.309, 23.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=9 */
%   | | | else return 0.0489195241375265;  // std dev = 2.469, 35.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=8 */
%   | | else if ( haswordvenue(B, K), haswordauthor(L, K) )
%   | | | then return 0.0025942212702679103;  // std dev = 0.887, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else return 0.04570274827197765;  // std dev = 2.319, 31.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=7 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.25517224256948967;  // std dev = 0.000, 60.000 (wgt'ed) examples reached here.  /* #pos=60 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.12975355268976144;  // std dev = 0.499, 736.000 (wgt'ed) examples reached here.  /* #neg=350 #pos=386 */
%   | | else if ( haswordvenue(B, F), haswordtitle(G, F) )
%   | | | then return 0.12487188787321984;  // std dev = 2.090, 18.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=10 */
%   | | | else return 0.17679314355285572;  // std dev = 1.549, 10.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=6 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( title(J, I), venue(J, A) )
%   | | | then return 0.08604975891593257;  // std dev = 3.033, 46.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=14 */
%   | | | else return -0.007958927776068292;  // std dev = 1.478, 12.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=3 */
%   | | else if ( haswordvenue(B, K), haswordauthor(L, K) )
%   | | | then return 0.0021833759797295128;  // std dev = 0.887, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else return 0.03885977243026909;  // std dev = 2.319, 31.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=7 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.20975771563253565;  // std dev = 0.000, 60.000 (wgt'ed) examples reached here.  /* #pos=60 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then if ( haswordtitle(G, E) )
%   | | | then return 0.24931495647939686;  // std dev = 1.999, 18.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=12 */
%   | | | else return -0.2152197191297831;  // std dev = 1.265, 10.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | | else if ( haswordtitle(H, D) )
%   | | | then return 0.09889528176359108;  // std dev = 13.301, 710.000 (wgt'ed) examples reached here.  /* #neg=337 #pos=373 */
%   | | | else return 0.11069484500711955;  // std dev = 2.505, 26.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=15 */
%   | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | then if ( haswordtitle(J, K), haswordvenue(A, K) )
%   | | | then return 0.09510951881644722;  // std dev = 2.299, 23.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=9 */
%   | | | else return 0.03425871935040434;  // std dev = 2.475, 35.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=8 */
%   | | else if ( haswordvenue(A, L), haswordauthor(M, L) )
%   | | | then return -0.16187394419318768;  // std dev = 0.014, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | | else return 0.05325166280165751;  // std dev = 2.433, 31.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=8 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.1770964977452773;  // std dev = 0.000, 60.000 (wgt'ed) examples reached here.  /* #pos=60 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then if ( haswordtitle(G, E) )
%   | | | then return 0.09106665948780254;  // std dev = 1.481, 9.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=5 */
%   | | | else return -0.13362682540937;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | | | then return 0.04567867247938865;  // std dev = 2.488, 27.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=13 */
%   | | | else return 0.07640037047639937;  // std dev = 13.426, 724.000 (wgt'ed) examples reached here.  /* #neg=341 #pos=383 */
%   | else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | | then if ( haswordtitle(K, L), haswordvenue(A, L) )
%   | | | then return 0.07498219164080917;  // std dev = 2.298, 23.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=9 */
%   | | | else return 0.028843086188385252;  // std dev = 2.475, 35.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=8 */
%   | | else if ( haswordvenue(B, M), haswordauthor(N, M) )
%   | | | then return -0.1883291475615719;  // std dev = 0.058, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | | else return 0.044549990517886204;  // std dev = 2.423, 32.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=8 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.15274385809367075;  // std dev = 2.98e-08, 60.000 (wgt'ed) examples reached here.  /* #pos=60 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.055770879502562654;  // std dev = 0.498, 736.000 (wgt'ed) examples reached here.  /* #neg=350 #pos=386 */
%   | | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | | then return 0.045936357503999777;  // std dev = 2.330, 22.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=12 */
%   | | | else return 0.10861565567568855;  // std dev = 1.155, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | | then if ( haswordtitle(J, H) )
%   | | | then return 0.0605288180262603;  // std dev = 1.328, 10.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=3 */
%   | | | else return -0.16500334046736942;  // std dev = 0.016, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else if ( haswordvenue(B, K), haswordauthor(L, K) )
%   | | | then return 0.10321807396801728;  // std dev = 1.584, 13.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=5 */
%   | | | else return 0.02168938045686011;  // std dev = 3.596, 67.000 (wgt'ed) examples reached here.  /* #neg=50 #pos=17 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.13400703000801098;  // std dev = 4.21e-08, 60.000 (wgt'ed) examples reached here.  /* #pos=60 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.041873825541492174;  // std dev = 0.498, 736.000 (wgt'ed) examples reached here.  /* #neg=350 #pos=386 */
%   | | else if ( haswordvenue(B, F), haswordtitle(G, F) )
%   | | | then return 0.027811155327710738;  // std dev = 2.088, 18.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=10 */
%   | | | else return 0.0749704139946247;  // std dev = 1.549, 10.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=6 */
%   | else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | | then if ( haswordtitle(J, H) )
%   | | | then return 0.04976593214807934;  // std dev = 1.325, 10.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=3 */
%   | | | else return -0.14351538595400493;  // std dev = 0.014, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else if ( haswordvenue(B, K), haswordauthor(L, K) )
%   | | | then return 0.0828177329244435;  // std dev = 1.578, 13.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=5 */
%   | | | else return 0.01783807304141723;  // std dev = 3.596, 67.000 (wgt'ed) examples reached here.  /* #neg=50 #pos=17 */


Results
   AUC ROC   = 0.636242
   AUC PR    = 0.679584
   CLL	      = -0.629189
   Precision = 0.963964 at threshold = 0.5
   Recall    = 0.184165
   F1        = 0.309249


Total learning time: 336.81 seconds
Total inference time: 5.471 seconds
AUC ROC: 0.636242


Results scoring model
   AUC ROC   = 0.621653
   AUC PR    = 0.679274
   CLL	      = -0.639844
   Precision = 0.818182 at threshold = 0.5
   Recall    = 0.184805
   F1        = 0.301508


Total scoring time: 9.094 seconds
Refined model CLL: -0.639844


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.636242
   AUC PR    = 0.679584
   CLL	      = -0.629189
   Precision = 0.963964 at threshold = 0.5
   Recall    = 0.184165
   F1        = 0.309249


Total learning time: 358.867 seconds
Total inference time: 5.471 seconds
AUC ROC: 0.636242
Total revision time: 358.867
Best scored revision CLL: -0.639844


Dataset: 3_imdb_cora, Fold: 3, Type: Transfer (trRDN-B), Time: 04:11:08
{'AUC ROC': 0.636242, 'AUC PR': 0.679584, 'CLL': -0.629189, 'Precision': [0.963964, 0.5], 'Recall': 0.184165, 'F1': 0.309249, 'Learning time': 358.867, 'Inference time': 5.471, 'parameter_0.2': {'AUC ROC': 0.585198, 'AUC PR': 0.65057, 'CLL': -0.641278, 'Precision': [1.0, 0.5], 'Recall': 0.170396, 'F1': 0.291176, 'Learning time': 8.662, 'Inference time': 3.313}}


Amount of data: 0.4
******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- actor(A), director(B).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- actor(A), director(B).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- actor(A), director(B).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- director(B), actor(A).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.85814893509951;  // std dev = 8.92e-07, 146.000 (wgt'ed) examples reached here.  /* #pos=146 */
%   else return 0.34780002912671015;  // std dev = 20.556, 1,691.000 (wgt'ed) examples reached here.  /* #neg=863 #pos=828 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.7194734122109561;  // std dev = 0.000, 146.000 (wgt'ed) examples reached here.  /* #pos=146 */
%   else return 0.2999878747805501;  // std dev = 20.556, 1,691.000 (wgt'ed) examples reached here.  /* #neg=863 #pos=828 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.5553664367462834;  // std dev = 5.20e-07, 146.000 (wgt'ed) examples reached here.  /* #pos=146 */
%   else return 0.24956582738106822;  // std dev = 20.556, 1,691.000 (wgt'ed) examples reached here.  /* #neg=863 #pos=828 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.4175135841583089;  // std dev = 4.42e-07, 146.000 (wgt'ed) examples reached here.  /* #pos=146 */
%   else return 0.2011441019681332;  // std dev = 20.556, 1,691.000 (wgt'ed) examples reached here.  /* #neg=863 #pos=828 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.32071184716014983;  // std dev = 2.60e-07, 146.000 (wgt'ed) examples reached here.  /* #pos=146 */
%   else return 0.15817183171518578;  // std dev = 20.556, 1,691.000 (wgt'ed) examples reached here.  /* #neg=863 #pos=828 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.25517224256949034;  // std dev = 0.000, 146.000 (wgt'ed) examples reached here.  /* #pos=146 */
%   else return 0.12223789191684516;  // std dev = 20.556, 1,691.000 (wgt'ed) examples reached here.  /* #neg=863 #pos=828 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.2097577156325352;  // std dev = 2.40e-07, 146.000 (wgt'ed) examples reached here.  /* #pos=146 */
%   else return 0.09339572635840421;  // std dev = 20.556, 1,691.000 (wgt'ed) examples reached here.  /* #neg=863 #pos=828 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.17709649774527816;  // std dev = 0.000, 146.000 (wgt'ed) examples reached here.  /* #pos=146 */
%   else return 0.07084994126628215;  // std dev = 20.556, 1,691.000 (wgt'ed) examples reached here.  /* #neg=863 #pos=828 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.15274385809367144;  // std dev = 0.000, 146.000 (wgt'ed) examples reached here.  /* #pos=146 */
%   else return 0.05351209603010941;  // std dev = 20.556, 1,691.000 (wgt'ed) examples reached here.  /* #neg=863 #pos=828 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.13400703000801104;  // std dev = 6.32e-08, 146.000 (wgt'ed) examples reached here.  /* #pos=146 */
%   else return 0.040310341864687516;  // std dev = 20.556, 1,691.000 (wgt'ed) examples reached here.  /* #neg=863 #pos=828 */


Results
   AUC ROC   = 0.585198
   AUC PR    = 0.65057
   CLL	      = -0.640998
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.170396
   F1        = 0.291176


Total learning time: 11.557 seconds
Total inference time: 3.292 seconds
AUC ROC: 0.585198


Results scoring model
   AUC ROC   = 0.574949
   AUC PR    = 0.661007
   CLL	      = -0.649647
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.149897
   F1        = 0.260714


Total scoring time: 5.288 seconds
Parameter learned model CLL: -0.649647


Structure after Parameter Learning
[['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [8.92e-07, 0, 146], 'false': [20.556, 863, 828]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 146], 'false': [20.556, 863, 828]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [5.2e-07, 0, 146], 'false': [20.556, 863, 828]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [4.42e-07, 0, 146], 'false': [20.556, 863, 828]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [2.6e-07, 0, 146], 'false': [20.556, 863, 828]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 146], 'false': [20.556, 863, 828]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [2.4e-07, 0, 146], 'false': [20.556, 863, 828]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 146], 'false': [20.556, 863, 828]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 146], 'false': [20.556, 863, 828]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [6.32e-08, 0, 146], 'false': [20.556, 863, 828]}]]
[{'': [5.450738794872001e-15, 0.24989290014518942]}, {'': [-2.2386962907510005e-15, 0.2498929001451964]}, {'': [1.8493578054030004e-15, 0.24989290014516524]}, {'': [1.3383510433837504e-15, 0.24989290014516993]}, {'': [4.623394513507501e-16, 0.2498929001451678]}, {'': [-1.5816875967262503e-16, 0.24989290014516746]}, {'': [3.954218991815626e-16, 0.24989290014516388]}, {'': [-2.980872778445626e-16, 0.24989290014517734]}, {'': [-3.650048300137501e-17, 0.24989290014516413]}, {'': [2.7375362251031256e-17, 0.24989290014516138]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
1;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
2;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
3;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
4;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
5;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
6;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
7;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
8;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
9;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.85814893509951;  // std dev = 8.92e-07, 146.000 (wgt'ed) examples reached here.  /* #pos=146 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.36510303802023064;  // std dev = 0.500, 1,438.000 (wgt'ed) examples reached here.  /* #neg=709 #pos=729 */
%   | | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | | then return 0.4370963035205641;  // std dev = 3.044, 38.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=22 */
%   | | | else return 0.5854216623722396;  // std dev = 2.089, 22.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=16 */
%   | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(A, J) )
%   | | | then return 0.38645082189196406;  // std dev = 3.634, 53.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=28 */
%   | | | else return 0.15392358298683592;  // std dev = 3.846, 71.000 (wgt'ed) examples reached here.  /* #neg=50 #pos=21 */
%   | | else if ( haswordvenue(A, K), haswordauthor(L, K) )
%   | | | then return -0.1418510649004878;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | | | else return 0.06153876560798695;  // std dev = 3.092, 59.000 (wgt'ed) examples reached here.  /* #neg=47 #pos=12 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.7194734122109561;  // std dev = 0.000, 146.000 (wgt'ed) examples reached here.  /* #pos=146 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.31461727557739366;  // std dev = 0.500, 1,438.000 (wgt'ed) examples reached here.  /* #neg=709 #pos=729 */
%   | | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | | then return 0.37517858762297;  // std dev = 3.044, 38.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=22 */
%   | | | else return 0.49838075774401863;  // std dev = 2.089, 22.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=16 */
%   | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(A, J) )
%   | | | then return 0.3326270255194192;  // std dev = 3.634, 53.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=28 */
%   | | | else return 0.13413470950735717;  // std dev = 3.846, 71.000 (wgt'ed) examples reached here.  /* #neg=50 #pos=21 */
%   | | else if ( haswordvenue(B, K), haswordauthor(L, K) )
%   | | | then return -0.14416096888625252;  // std dev = 0.030, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | | else return 0.053700021929992084;  // std dev = 3.087, 60.000 (wgt'ed) examples reached here.  /* #neg=48 #pos=12 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.5553664367462834;  // std dev = 5.20e-07, 146.000 (wgt'ed) examples reached here.  /* #pos=146 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.26099469464005454;  // std dev = 0.500, 1,438.000 (wgt'ed) examples reached here.  /* #neg=709 #pos=729 */
%   | | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | | then return 0.30758572307646687;  // std dev = 3.044, 38.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=22 */
%   | | | else return 0.39904187660376833;  // std dev = 2.089, 22.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=16 */
%   | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(A, J) )
%   | | | then return 0.2749703392763268;  // std dev = 3.634, 53.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=28 */
%   | | | else return 0.11512343742864108;  // std dev = 3.846, 71.000 (wgt'ed) examples reached here.  /* #neg=50 #pos=21 */
%   | | else if ( haswordvenue(A, K), haswordauthor(L, K) )
%   | | | then return -0.12725711006216178;  // std dev = 0.027, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | | | else return 0.049816108313453865;  // std dev = 3.081, 59.000 (wgt'ed) examples reached here.  /* #neg=47 #pos=12 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.4175135841583089;  // std dev = 4.42e-07, 146.000 (wgt'ed) examples reached here.  /* #pos=146 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordauthor(E, D) )
%   | | then return 0.6483039908079476;  // std dev = 0.090, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( haswordtitle(F, D) )
%   | | | then return 0.20912224211772407;  // std dev = 18.952, 1,437.000 (wgt'ed) examples reached here.  /* #neg=709 #pos=728 */
%   | | | else return 0.25363331263158717;  // std dev = 3.663, 58.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=36 */
%   | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | then if ( haswordtitle(H, I), haswordvenue(A, I) )
%   | | | then return 0.21954807683343558;  // std dev = 3.634, 53.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=28 */
%   | | | else return 0.09745315848108903;  // std dev = 3.846, 71.000 (wgt'ed) examples reached here.  /* #neg=50 #pos=21 */
%   | | else if ( haswordvenue(B, J), haswordauthor(K, J) )
%   | | | then return -0.1291623047012671;  // std dev = 0.049, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | | else return 0.042920532689366596;  // std dev = 3.077, 60.000 (wgt'ed) examples reached here.  /* #neg=48 #pos=12 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.32071184716014983;  // std dev = 2.60e-07, 146.000 (wgt'ed) examples reached here.  /* #pos=146 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.16392857185500367;  // std dev = 0.500, 1,438.000 (wgt'ed) examples reached here.  /* #neg=709 #pos=729 */
%   | | else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | | then return 0.33037455519572323;  // std dev = 0.822, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return 0.19079766735022177;  // std dev = 3.576, 55.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=34 */
%   | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(A, J) )
%   | | | then return 0.1708414578835782;  // std dev = 3.634, 53.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=28 */
%   | | | else return 0.08150276086067591;  // std dev = 3.846, 71.000 (wgt'ed) examples reached here.  /* #neg=50 #pos=21 */
%   | | else if ( haswordvenue(A, K), haswordauthor(L, K) )
%   | | | then return -0.11523140310769564;  // std dev = 0.044, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | | | else return 0.039729830976245994;  // std dev = 3.073, 59.000 (wgt'ed) examples reached here.  /* #neg=47 #pos=12 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.25517224256949034;  // std dev = 0.000, 146.000 (wgt'ed) examples reached here.  /* #pos=146 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.12609827603225937;  // std dev = 0.500, 1,438.000 (wgt'ed) examples reached here.  /* #neg=709 #pos=729 */
%   | | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | | then return 0.13228673287338796;  // std dev = 3.030, 38.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=22 */
%   | | | else return 0.18811631535386455;  // std dev = 2.072, 22.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=16 */
%   | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordauthor(K, J) )
%   | | | then return 0.08503407050556777;  // std dev = 5.059, 114.000 (wgt'ed) examples reached here.  /* #neg=71 #pos=43 */
%   | | | else return 0.2024208559696325;  // std dev = 1.549, 10.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=6 */
%   | | else if ( haswordvenue(B, L), haswordauthor(M, L) )
%   | | | then return -0.11678277533999916;  // std dev = 0.061, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | | else return 0.0338394330495833;  // std dev = 3.070, 60.000 (wgt'ed) examples reached here.  /* #neg=48 #pos=12 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.2097577156325352;  // std dev = 2.40e-07, 146.000 (wgt'ed) examples reached here.  /* #pos=146 */
%   else if ( haswordvenue(B, D), haswordtitle(E, D) )
%   | then if ( title(F, E), venue(F, B) )
%   | | then if ( samebib(F, G), venue(G, A) )
%   | | | then return 0.38579623443582756;  // std dev = 12.488, 952.000 (wgt'ed) examples reached here.  /* #neg=194 #pos=758 */
%   | | | else return -0.35981459981010105;  // std dev = 4.842, 603.000 (wgt'ed) examples reached here.  /* #neg=579 #pos=24 */
%   | | else if ( haswordauthor(H, D) )
%   | | | then return 0.23179734070737001;  // std dev = 1.564, 12.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=8 */
%   | | | else return -0.019732023886929004;  // std dev = 2.917, 36.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=15 */
%   | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | then if ( title(K, J), venue(K, A) )
%   | | | then return 0.04918339599273754;  // std dev = 3.646, 78.000 (wgt'ed) examples reached here.  /* #neg=56 #pos=22 */
%   | | | else return -0.049291678851798214;  // std dev = 0.721, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else return -0.20717109958823138;  // std dev = 0.415, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.17709649774527816;  // std dev = 0.000, 146.000 (wgt'ed) examples reached here.  /* #pos=146 */
%   else if ( haswordvenue(B, D), haswordtitle(E, D) )
%   | then if ( title(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.29011893401188327;  // std dev = 12.515, 953.000 (wgt'ed) examples reached here.  /* #neg=195 #pos=758 */
%   | | | else return -0.27659973474594746;  // std dev = 4.891, 604.000 (wgt'ed) examples reached here.  /* #neg=579 #pos=25 */
%   | | else if ( haswordtitle(E, H), haswordvenue(A, H) )
%   | | | then return 0.06483589411413922;  // std dev = 3.143, 41.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=21 */
%   | | | else return -0.24598962649669334;  // std dev = 0.701, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | then if ( title(K, J), venue(K, A) )
%   | | | then return 0.04113465024147978;  // std dev = 3.643, 78.000 (wgt'ed) examples reached here.  /* #neg=56 #pos=22 */
%   | | | else return -0.041799116662010874;  // std dev = 0.723, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else return -0.18143731437382296;  // std dev = 0.386, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.15274385809367144;  // std dev = 0.000, 146.000 (wgt'ed) examples reached here.  /* #pos=146 */
%   else if ( haswordvenue(B, D), haswordtitle(E, D) )
%   | then if ( haswordvenue(A, D) )
%   | | then return 0.04601904209920284;  // std dev = 0.405, 1,438.000 (wgt'ed) examples reached here.  /* #neg=709 #pos=729 */
%   | | else if ( haswordauthor(F, D) )
%   | | | then return 0.11942701383830971;  // std dev = 1.717, 17.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=9 */
%   | | | else return 0.055232599696216245;  // std dev = 4.857, 148.000 (wgt'ed) examples reached here.  /* #neg=81 #pos=67 */
%   | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | then if ( title(I, H), venue(I, A) )
%   | | | then return 0.034265502305325664;  // std dev = 3.641, 78.000 (wgt'ed) examples reached here.  /* #neg=56 #pos=22 */
%   | | | else return -0.03553828605527345;  // std dev = 0.724, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else return -0.16077260711679534;  // std dev = 0.359, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.13400703000801104;  // std dev = 6.32e-08, 146.000 (wgt'ed) examples reached here.  /* #pos=146 */
%   else if ( haswordvenue(B, D), haswordtitle(E, D) )
%   | then if ( title(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.2073243149311891;  // std dev = 12.515, 953.000 (wgt'ed) examples reached here.  /* #neg=195 #pos=758 */
%   | | | else return -0.22933649473057857;  // std dev = 4.878, 604.000 (wgt'ed) examples reached here.  /* #neg=579 #pos=25 */
%   | | else if ( haswordauthor(H, D) )
%   | | | then return 0.14854459128292866;  // std dev = 1.514, 12.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=8 */
%   | | | else return -0.044925850055408445;  // std dev = 2.817, 34.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=14 */
%   | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | then if ( title(K, J), venue(K, A) )
%   | | | then return 0.02844844390974802;  // std dev = 3.639, 78.000 (wgt'ed) examples reached here.  /* #neg=56 #pos=22 */
%   | | | else return -0.030283652355406438;  // std dev = 0.726, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else return -0.14388059054678995;  // std dev = 0.333, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */


Results
   AUC ROC   = 0.925969
   AUC PR    = 0.933797
   CLL	      = -0.433267
   Precision = 0.942222 at threshold = 0.5
   Recall    = 0.729776
   F1        = 0.822502


Total learning time: 2674.213 seconds
Total inference time: 7.0 seconds
AUC ROC: 0.925969


Results scoring model
   AUC ROC   = 0.879384
   AUC PR    = 0.87221
   CLL	      = -0.445417
   Precision = 0.817604 at threshold = 0.5
   Recall    = 0.925051
   F1        = 0.868015


Total scoring time: 28.069 seconds
Refined model CLL: -0.445417


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.925969
   AUC PR    = 0.933797
   CLL	      = -0.433267
   Precision = 0.942222 at threshold = 0.5
   Recall    = 0.729776
   F1        = 0.822502


Total learning time: 2719.127 seconds
Total inference time: 7.0 seconds
AUC ROC: 0.925969
Total revision time: 2719.127
Best scored revision CLL: -0.445417


Dataset: 3_imdb_cora, Fold: 3, Type: Transfer (trRDN-B), Time: 04:56:39
{'AUC ROC': 0.925969, 'AUC PR': 0.933797, 'CLL': -0.433267, 'Precision': [0.942222, 0.5], 'Recall': 0.729776, 'F1': 0.822502, 'Learning time': 2719.127, 'Inference time': 7.0, 'parameter_0.4': {'AUC ROC': 0.585198, 'AUC PR': 0.65057, 'CLL': -0.640998, 'Precision': [1.0, 0.5], 'Recall': 0.170396, 'F1': 0.291176, 'Learning time': 11.557, 'Inference time': 3.292}}


Amount of data: 0.6
******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- actor(A), director(B).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- actor(A), director(B).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- actor(A), director(B).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- director(B), actor(A).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.8581489350995091;  // std dev = 1.08e-06, 218.000 (wgt'ed) examples reached here.  /* #pos=218 */
%   else return 0.3479046482594757;  // std dev = 25.184, 2,538.000 (wgt'ed) examples reached here.  /* #neg=1,295 #pos=1,243 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.7194734122109572;  // std dev = 0.000, 218.000 (wgt'ed) examples reached here.  /* #pos=218 */
%   else return 0.30007641436349475;  // std dev = 25.184, 2,538.000 (wgt'ed) examples reached here.  /* #neg=1,295 #pos=1,243 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.5553664367462832;  // std dev = 6.08e-07, 218.000 (wgt'ed) examples reached here.  /* #pos=218 */
%   else return 0.24963520403183873;  // std dev = 25.184, 2,538.000 (wgt'ed) examples reached here.  /* #neg=1,295 #pos=1,243 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.4175135841583104;  // std dev = 1.46e-07, 218.000 (wgt'ed) examples reached here.  /* #pos=218 */
%   else return 0.20119482728830873;  // std dev = 25.184, 2,538.000 (wgt'ed) examples reached here.  /* #neg=1,295 #pos=1,243 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.3207118471601494;  // std dev = 3.63e-07, 218.000 (wgt'ed) examples reached here.  /* #pos=218 */
%   else return 0.158207028377101;  // std dev = 25.184, 2,538.000 (wgt'ed) examples reached here.  /* #neg=1,295 #pos=1,243 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.25517224256948823;  // std dev = 2.73e-07, 218.000 (wgt'ed) examples reached here.  /* #pos=218 */
%   else return 0.12226151859330928;  // std dev = 25.184, 2,538.000 (wgt'ed) examples reached here.  /* #neg=1,295 #pos=1,243 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.20975771563253492;  // std dev = 3.01e-07, 218.000 (wgt'ed) examples reached here.  /* #pos=218 */
%   else return 0.09341132577093177;  // std dev = 25.184, 2,538.000 (wgt'ed) examples reached here.  /* #neg=1,295 #pos=1,243 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.1770964977452777;  // std dev = 0.000, 218.000 (wgt'ed) examples reached here.  /* #pos=218 */
%   else return 0.07086019266511026;  // std dev = 25.184, 2,538.000 (wgt'ed) examples reached here.  /* #neg=1,295 #pos=1,243 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.1527438580936717;  // std dev = 0.000, 218.000 (wgt'ed) examples reached here.  /* #pos=218 */
%   else return 0.05351885183691256;  // std dev = 25.184, 2,538.000 (wgt'ed) examples reached here.  /* #neg=1,295 #pos=1,243 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.13400703000801098;  // std dev = 1.43e-07, 218.000 (wgt'ed) examples reached here.  /* #pos=218 */
%   else return 0.04031482486674235;  // std dev = 25.184, 2,538.000 (wgt'ed) examples reached here.  /* #neg=1,295 #pos=1,243 */


Results
   AUC ROC   = 0.585198
   AUC PR    = 0.65057
   CLL	      = -0.641
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.170396
   F1        = 0.291176


Total learning time: 12.104 seconds
Total inference time: 3.257 seconds
AUC ROC: 0.585198


Results scoring model
   AUC ROC   = 0.574606
   AUC PR    = 0.660491
   CLL	      = -0.649866
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.149213
   F1        = 0.259678


Total scoring time: 5.787 seconds
Parameter learned model CLL: -0.649866


Structure after Parameter Learning
[['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [1.08e-06, 0, 218], 'false': [25.184, 1, 1]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 218], 'false': [25.184, 1, 1]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [6.08e-07, 0, 218], 'false': [25.184, 1, 1]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [1.46e-07, 0, 218], 'false': [25.184, 1, 1]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [3.63e-07, 0, 218], 'false': [25.184, 1, 1]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [2.73e-07, 0, 218], 'false': [25.184, 1, 1]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [3.01e-07, 0, 218], 'false': [25.184, 1, 1]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 218], 'false': [25.184, 1, 1]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 218], 'false': [25.184, 1, 1]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [1.43e-07, 0, 218], 'false': [25.184, 1, 1]}]]
[{'': [5.345367369938369e-15, 0.249895054587164]}, {'': [-4.0416192309290105e-15, 0.2498950545871402]}, {'': [1.6948725807121657e-15, 0.2498950545871293]}, {'': [9.778111042570187e-17, 0.24989505458716896]}, {'': [6.029835142918282e-16, 0.24989505458714506]}, {'': [3.4223388648995653e-16, 0.24989505458713887]}, {'': [4.1556971930923293e-16, 0.24989505458711558]}, {'': [-1.6296851737616978e-17, 0.24989505458713726]}, {'': [-1.4259745270414855e-16, 0.24989505458714648]}, {'': [9.370689749129762e-17, 0.24989505458713196]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
1;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
2;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
3;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
4;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
5;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
6;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
7;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
8;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
9;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.8581489350995091;  // std dev = 1.08e-06, 218.000 (wgt'ed) examples reached here.  /* #pos=218 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.37038911985701306;  // std dev = 0.500, 2,165.000 (wgt'ed) examples reached here.  /* #neg=1,056 #pos=1,109 */
%   | | else if ( haswordvenue(B, F), haswordtitle(G, F) )
%   | | | then return 0.5312258581764343;  // std dev = 3.383, 52.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=35 */
%   | | | else return 0.4098730730305468;  // std dev = 2.678, 29.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=16 */
%   | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(A, J) )
%   | | | then return 0.33314893509951127;  // std dev = 4.467, 80.000 (wgt'ed) examples reached here.  /* #neg=42 #pos=38 */
%   | | | else return 0.11305089588382522;  // std dev = 4.401, 102.000 (wgt'ed) examples reached here.  /* #neg=76 #pos=26 */
%   | | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | | then return 0.04814893509951235;  // std dev = 3.923, 100.000 (wgt'ed) examples reached here.  /* #neg=81 #pos=19 */
%   | | | else return -0.1418510649004878;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.7194734122109572;  // std dev = 0.000, 218.000 (wgt'ed) examples reached here.  /* #pos=218 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.3190808639030858;  // std dev = 0.500, 2,165.000 (wgt'ed) examples reached here.  /* #neg=1,056 #pos=1,109 */
%   | | else if ( haswordvenue(B, F), haswordtitle(G, F) )
%   | | | then return 0.45360975206678983;  // std dev = 3.383, 52.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=35 */
%   | | | else return 0.3523366434768775;  // std dev = 2.678, 29.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=16 */
%   | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(A, J) )
%   | | | then return 0.2875782915172306;  // std dev = 4.467, 80.000 (wgt'ed) examples reached here.  /* #neg=42 #pos=38 */
%   | | | else return 0.09872447668168599;  // std dev = 4.401, 102.000 (wgt'ed) examples reached here.  /* #neg=76 #pos=26 */
%   | | else if ( haswordvenue(B, K), haswordauthor(L, K) )
%   | | | then return -0.14361964456114842;  // std dev = 0.035, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | | | else return 0.055979577185522315;  // std dev = 3.886, 94.000 (wgt'ed) examples reached here.  /* #neg=75 #pos=19 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.5553664367462832;  // std dev = 6.08e-07, 218.000 (wgt'ed) examples reached here.  /* #pos=218 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.2644680944026635;  // std dev = 0.500, 2,165.000 (wgt'ed) examples reached here.  /* #neg=1,056 #pos=1,109 */
%   | | else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | | then return 0.5340779951843011;  // std dev = 0.922, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | | else return 0.32342232591965714;  // std dev = 4.198, 75.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=46 */
%   | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(A, J) )
%   | | | then return 0.23981702128969773;  // std dev = 4.467, 80.000 (wgt'ed) examples reached here.  /* #neg=42 #pos=38 */
%   | | | else return 0.085268134737005;  // std dev = 4.401, 102.000 (wgt'ed) examples reached here.  /* #neg=76 #pos=26 */
%   | | else if ( haswordvenue(B, K), haswordauthor(L, K) )
%   | | | then return -0.1268522861118677;  // std dev = 0.031, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | | | else return 0.0488567289784669;  // std dev = 3.886, 94.000 (wgt'ed) examples reached here.  /* #neg=75 #pos=19 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.4175135841583104;  // std dev = 1.46e-07, 218.000 (wgt'ed) examples reached here.  /* #pos=218 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.2119805735223772;  // std dev = 0.500, 2,165.000 (wgt'ed) examples reached here.  /* #neg=1,056 #pos=1,109 */
%   | | else if ( haswordvenue(B, F), haswordtitle(G, F) )
%   | | | then return 0.28871825286071534;  // std dev = 3.375, 52.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=35 */
%   | | | else return 0.2214333833874946;  // std dev = 2.671, 29.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=16 */
%   | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(A, J) )
%   | | | then return 0.19398970876735278;  // std dev = 4.467, 80.000 (wgt'ed) examples reached here.  /* #neg=42 #pos=38 */
%   | | | else return 0.07291697343087913;  // std dev = 4.401, 102.000 (wgt'ed) examples reached here.  /* #neg=76 #pos=26 */
%   | | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | | then return 0.03428957485551195;  // std dev = 3.898, 100.000 (wgt'ed) examples reached here.  /* #neg=81 #pos=19 */
%   | | | else return -0.1257781117082471;  // std dev = 0.056, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.3207118471601494;  // std dev = 3.63e-07, 218.000 (wgt'ed) examples reached here.  /* #pos=218 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.16565450340943677;  // std dev = 0.500, 2,165.000 (wgt'ed) examples reached here.  /* #neg=1,056 #pos=1,109 */
%   | | else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | | then return 0.3434275104181861;  // std dev = 0.928, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | | else return 0.1901293247232135;  // std dev = 4.191, 75.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=46 */
%   | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(A, J) )
%   | | | then return 0.1531899711767785;  // std dev = 4.467, 80.000 (wgt'ed) examples reached here.  /* #neg=42 #pos=38 */
%   | | | else return 0.061809434035880184;  // std dev = 4.401, 102.000 (wgt'ed) examples reached here.  /* #neg=76 #pos=26 */
%   | | else if ( haswordvenue(B, K), haswordauthor(L, K) )
%   | | | then return -0.11438091233461091;  // std dev = 0.051, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | | | else return 0.039122573354620396;  // std dev = 3.879, 94.000 (wgt'ed) examples reached here.  /* #neg=75 #pos=19 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.25517224256948823;  // std dev = 2.73e-07, 218.000 (wgt'ed) examples reached here.  /* #pos=218 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.12725152891357944;  // std dev = 0.500, 2,165.000 (wgt'ed) examples reached here.  /* #neg=1,056 #pos=1,109 */
%   | | else if ( haswordvenue(B, F), haswordtitle(G, F) )
%   | | | then return 0.16763722820894114;  // std dev = 3.371, 52.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=35 */
%   | | | else return 0.12373467319745579;  // std dev = 2.664, 29.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=16 */
%   | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(A, J) )
%   | | | then return 0.11888721175443932;  // std dev = 4.467, 80.000 (wgt'ed) examples reached here.  /* #neg=42 #pos=38 */
%   | | | else return 0.05199600748104839;  // std dev = 4.401, 102.000 (wgt'ed) examples reached here.  /* #neg=76 #pos=26 */
%   | | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | | then return 0.026465917148648512;  // std dev = 3.889, 100.000 (wgt'ed) examples reached here.  /* #neg=81 #pos=19 */
%   | | | else return -0.11299415745113477;  // std dev = 0.070, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.20975771563253492;  // std dev = 3.01e-07, 218.000 (wgt'ed) examples reached here.  /* #pos=218 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.09671617771896347;  // std dev = 0.500, 2,165.000 (wgt'ed) examples reached here.  /* #neg=1,056 #pos=1,109 */
%   | | else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | | then return 0.21994928469295272;  // std dev = 0.930, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | | else return 0.10580729934257234;  // std dev = 4.189, 75.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=46 */
%   | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordauthor(K, J) )
%   | | | then return 0.056794109737960716;  // std dev = 5.964, 167.000 (wgt'ed) examples reached here.  /* #neg=111 #pos=56 */
%   | | | else return 0.149518873250914;  // std dev = 1.932, 15.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=8 */
%   | | else if ( haswordvenue(B, L), haswordauthor(M, L) )
%   | | | then return -0.10394477833441414;  // std dev = 0.063, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | | | else return 0.031102495737230982;  // std dev = 3.875, 94.000 (wgt'ed) examples reached here.  /* #neg=75 #pos=19 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.1770964977452777;  // std dev = 0.000, 218.000 (wgt'ed) examples reached here.  /* #pos=218 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then if ( haswordtitle(G, E) )
%   | | | then return 0.21537136026540232;  // std dev = 3.193, 45.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=30 */
%   | | | else return -0.22373285037179302;  // std dev = 2.020, 26.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=6 */
%   | | else if ( haswordtitle(H, D) )
%   | | | then return 0.07390124468936338;  // std dev = 22.910, 2,101.000 (wgt'ed) examples reached here.  /* #neg=1,023 #pos=1,078 */
%   | | | else return 0.0811126062309878;  // std dev = 4.126, 74.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=46 */
%   | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | then if ( haswordtitle(J, K), haswordvenue(A, K) )
%   | | | then return 0.07346792775803086;  // std dev = 4.463, 80.000 (wgt'ed) examples reached here.  /* #neg=42 #pos=38 */
%   | | | else return 0.03383164711142391;  // std dev = 4.401, 102.000 (wgt'ed) examples reached here.  /* #neg=76 #pos=26 */
%   | | else if ( haswordvenue(B, L), haswordauthor(M, L) )
%   | | | then return -0.09467655722741349;  // std dev = 0.057, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | | | else return 0.026655694050166125;  // std dev = 3.874, 94.000 (wgt'ed) examples reached here.  /* #neg=75 #pos=19 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.1527438580936717;  // std dev = 0.000, 218.000 (wgt'ed) examples reached here.  /* #pos=218 */
%   else if ( haswordvenue(B, D), haswordtitle(E, D) )
%   | then if ( title(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.3450800109454415;  // std dev = 15.144, 1,427.000 (wgt'ed) examples reached here.  /* #neg=287 #pos=1,140 */
%   | | | else return -0.39757471154904606;  // std dev = 6.260, 906.000 (wgt'ed) examples reached here.  /* #neg=867 #pos=39 */
%   | | else if ( haswordauthor(H, D) )
%   | | | then return 0.12493189303547725;  // std dev = 2.041, 19.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=11 */
%   | | | else return -0.09323244788478487;  // std dev = 3.287, 47.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=18 */
%   | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | then if ( title(K, J), venue(K, A) )
%   | | | then return 0.05370647500124273;  // std dev = 4.479, 118.000 (wgt'ed) examples reached here.  /* #neg=84 #pos=34 */
%   | | | else return -0.11378764313600227;  // std dev = 0.707, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | | else if ( haswordvenue(A, L), haswordvenue(B, L) )
%   | | | then return -0.5019623222519999;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | | else return -0.10279345404403924;  // std dev = 0.090, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.13400703000801098;  // std dev = 1.43e-07, 218.000 (wgt'ed) examples reached here.  /* #pos=218 */
%   else if ( haswordvenue(B, D), haswordtitle(E, D) )
%   | then if ( title(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.25965591665742543;  // std dev = 15.152, 1,427.000 (wgt'ed) examples reached here.  /* #neg=287 #pos=1,140 */
%   | | | else return -0.3042949425209746;  // std dev = 6.206, 906.000 (wgt'ed) examples reached here.  /* #neg=867 #pos=39 */
%   | | else if ( haswordauthor(H, D) )
%   | | | then return 0.09615382119672176;  // std dev = 2.038, 19.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=11 */
%   | | | else return -0.07058378856184956;  // std dev = 3.288, 47.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=18 */
%   | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | then if ( title(K, J), venue(K, A) )
%   | | | then return 0.044894983201647795;  // std dev = 4.474, 118.000 (wgt'ed) examples reached here.  /* #neg=84 #pos=34 */
%   | | | else return -0.09455055411250317;  // std dev = 0.711, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | | else if ( haswordvenue(A, L), haswordvenue(B, L) )
%   | | | then return -0.3789251313971467;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | | else return -0.09376621610623423;  // std dev = 0.083, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */


Results
   AUC ROC   = 0.921008
   AUC PR    = 0.929554
   CLL	      = -0.47469
   Precision = 0.943946 at threshold = 0.5
   Recall    = 0.724613
   F1        = 0.819864


Total learning time: 2736.192 seconds
Total inference time: 7.186 seconds
AUC ROC: 0.921008


Results scoring model
   AUC ROC   = 0.883899
   AUC PR    = 0.87892
   CLL	      = -0.477346
   Precision = 0.822317 at threshold = 0.5
   Recall    = 0.928131
   F1        = 0.872026


Total scoring time: 30.415 seconds
Refined model CLL: -0.477346


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.921008
   AUC PR    = 0.929554
   CLL	      = -0.47469
   Precision = 0.943946 at threshold = 0.5
   Recall    = 0.724613
   F1        = 0.819864


Total learning time: 2784.498 seconds
Total inference time: 7.186 seconds
AUC ROC: 0.921008
Total revision time: 2784.498
Best scored revision CLL: -0.477346


Dataset: 3_imdb_cora, Fold: 3, Type: Transfer (trRDN-B), Time: 05:43:16
{'AUC ROC': 0.921008, 'AUC PR': 0.929554, 'CLL': -0.47469, 'Precision': [0.943946, 0.5], 'Recall': 0.724613, 'F1': 0.819864, 'Learning time': 2784.498, 'Inference time': 7.186, 'parameter_0.6': {'AUC ROC': 0.585198, 'AUC PR': 0.65057, 'CLL': -0.641, 'Precision': [1.0, 0.5], 'Recall': 0.170396, 'F1': 0.291176, 'Learning time': 12.104, 'Inference time': 3.257}}


Amount of data: 0.8
******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- actor(A), director(B).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- actor(A), director(B).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- actor(A), director(B).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- director(B), actor(A).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.8581489350995086;  // std dev = 1.05e-06, 301.000 (wgt'ed) examples reached here.  /* #pos=301 */
%   else return 0.34629357054704724;  // std dev = 29.035, 3,374.000 (wgt'ed) examples reached here.  /* #neg=1,727 #pos=1,647 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.7194734122109578;  // std dev = 0.000, 301.000 (wgt'ed) examples reached here.  /* #pos=301 */
%   else return 0.29871283721544145;  // std dev = 29.035, 3,374.000 (wgt'ed) examples reached here.  /* #neg=1,727 #pos=1,647 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.5553664367462832;  // std dev = 0.000, 301.000 (wgt'ed) examples reached here.  /* #pos=301 */
%   else return 0.24856647006902047;  // std dev = 29.035, 3,374.000 (wgt'ed) examples reached here.  /* #neg=1,727 #pos=1,647 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.41751358415831147;  // std dev = 0.000, 301.000 (wgt'ed) examples reached here.  /* #pos=301 */
%   else return 0.20041312083863794;  // std dev = 29.035, 3,374.000 (wgt'ed) examples reached here.  /* #neg=1,727 #pos=1,647 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.32071184716015083;  // std dev = 0.000, 301.000 (wgt'ed) examples reached here.  /* #pos=301 */
%   else return 0.15766443779188963;  // std dev = 29.035, 3,374.000 (wgt'ed) examples reached here.  /* #neg=1,727 #pos=1,647 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.2551722425694877;  // std dev = 3.63e-07, 301.000 (wgt'ed) examples reached here.  /* #pos=301 */
%   else return 0.12189722788234267;  // std dev = 29.035, 3,374.000 (wgt'ed) examples reached here.  /* #neg=1,727 #pos=1,647 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.20975771563253476;  // std dev = 2.83e-07, 301.000 (wgt'ed) examples reached here.  /* #pos=301 */
%   else return 0.0931708369684897;  // std dev = 29.035, 3,374.000 (wgt'ed) examples reached here.  /* #neg=1,727 #pos=1,647 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.1770964977452769;  // std dev = 1.84e-07, 301.000 (wgt'ed) examples reached here.  /* #pos=301 */
%   else return 0.07070223659461616;  // std dev = 29.035, 3,374.000 (wgt'ed) examples reached here.  /* #neg=1,727 #pos=1,647 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.1527438580936716;  // std dev = 0.000, 301.000 (wgt'ed) examples reached here.  /* #pos=301 */
%   else return 0.053414860965991226;  // std dev = 29.035, 3,374.000 (wgt'ed) examples reached here.  /* #neg=1,727 #pos=1,647 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.13400703000801162;  // std dev = 0.000, 301.000 (wgt'ed) examples reached here.  /* #pos=301 */
%   else return 0.040245922581011534;  // std dev = 29.035, 3,374.000 (wgt'ed) examples reached here.  /* #neg=1,727 #pos=1,647 */


Results
   AUC ROC   = 0.585198
   AUC PR    = 0.65057
   CLL	      = -0.64097
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.170396
   F1        = 0.291176


Total learning time: 15.711 seconds
Total inference time: 3.447 seconds
AUC ROC: 0.585198


Results scoring model
   AUC ROC   = 0.577259
   AUC PR    = 0.663839
   CLL	      = -0.648203
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.154517
   F1        = 0.267675


Total scoring time: 5.794 seconds
Parameter learned model CLL: -0.648203


Structure after Parameter Learning
[['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [1.05e-06, 0, 301], 'false': [29.035, 1, 1]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 301], 'false': [29.035, 1, 1]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 301], 'false': [29.035, 1, 1]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 301], 'false': [29.035, 1, 1]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 301], 'false': [29.035, 1, 1]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [3.63e-07, 0, 301], 'false': [29.035, 1, 1]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [2.83e-07, 0, 301], 'false': [29.035, 1, 1]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [1.84e-07, 0, 301], 'false': [29.035, 1, 1]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 301], 'false': [29.035, 1, 1]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 301], 'false': [29.035, 1, 1]}]]
[{'': [3.6825470690556684e-15, 0.24985945033128706]}, {'': [-4.8156384749189514e-15, 0.24985945033132123]}, {'': [-9.442428382194023e-17, 0.24985945033135726]}, {'': [-7.790003415310068e-16, 0.24985945033130116]}, {'': [-2.950758869435632e-16, 0.249859450331312]}, {'': [4.3671231267647354e-16, 0.24985945033130605]}, {'': [2.655682982492069e-16, 0.2498594503313117]}, {'': [1.12128837038554e-16, 0.2498594503313519]}, {'': [-2.0655312086049424e-16, 0.2498594503313515]}, {'': [-1.5048870234121723e-16, 0.24985945033131243]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
1;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
2;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
3;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
4;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
5;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
6;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
7;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
8;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
9;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.8581489350995086;  // std dev = 1.05e-06, 301.000 (wgt'ed) examples reached here.  /* #pos=301 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.3664476902862292;  // std dev = 0.500, 2,892.000 (wgt'ed) examples reached here.  /* #neg=1,422 #pos=1,470 */
%   | | else if ( haswordvenue(B, F), haswordtitle(G, F) )
%   | | | then return 0.5387044906550683;  // std dev = 3.956, 72.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=49 */
%   | | | else return 0.3966104735610501;  // std dev = 3.113, 39.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=21 */
%   | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(A, J) )
%   | | | then return 0.3530984300490081;  // std dev = 4.975, 99.000 (wgt'ed) examples reached here.  /* #neg=50 #pos=49 */
%   | | | else return 0.0854216623722386;  // std dev = 4.815, 132.000 (wgt'ed) examples reached here.  /* #neg=102 #pos=30 */
%   | | else if ( haswordvenue(B, K), haswordauthor(L, K) )
%   | | | then return -0.0918510649004878;  // std dev = 0.975, 20.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=1 */
%   | | | else return 0.08314893509951153;  // std dev = 4.574, 120.000 (wgt'ed) examples reached here.  /* #neg=93 #pos=27 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.7194734122109578;  // std dev = 0.000, 301.000 (wgt'ed) examples reached here.  /* #pos=301 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.3157529586068753;  // std dev = 0.500, 2,892.000 (wgt'ed) examples reached here.  /* #neg=1,422 #pos=1,470 */
%   | | else if ( haswordvenue(B, F), haswordtitle(G, F) )
%   | | | then return 0.45980459743702834;  // std dev = 3.956, 72.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=49 */
%   | | | else return 0.3411827428099929;  // std dev = 3.113, 39.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=21 */
%   | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(A, J) )
%   | | | then return 0.30447061946336096;  // std dev = 4.975, 99.000 (wgt'ed) examples reached here.  /* #neg=50 #pos=49 */
%   | | | else return 0.07470190041754056;  // std dev = 4.815, 132.000 (wgt'ed) examples reached here.  /* #neg=102 #pos=30 */
%   | | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | | then return 0.06929421175503221;  // std dev = 4.665, 128.000 (wgt'ed) examples reached here.  /* #neg=100 #pos=28 */
%   | | | else return -0.14696629743257342;  // std dev = 0.032, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.5553664367462832;  // std dev = 0.000, 301.000 (wgt'ed) examples reached here.  /* #pos=301 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.2618790457416897;  // std dev = 0.500, 2,892.000 (wgt'ed) examples reached here.  /* #neg=1,422 #pos=1,470 */
%   | | else if ( haswordvenue(B, F), haswordtitle(G, F) )
%   | | | then return 0.3708488668339409;  // std dev = 3.956, 72.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=49 */
%   | | | else return 0.2815735770744804;  // std dev = 3.113, 39.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=21 */
%   | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(A, J) )
%   | | | then return 0.2530751797630946;  // std dev = 4.975, 99.000 (wgt'ed) examples reached here.  /* #neg=50 #pos=49 */
%   | | | else return 0.06479085078147913;  // std dev = 4.815, 132.000 (wgt'ed) examples reached here.  /* #neg=102 #pos=30 */
%   | | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | | then return 0.060273900185146986;  // std dev = 4.665, 128.000 (wgt'ed) examples reached here.  /* #neg=100 #pos=28 */
%   | | | else return -0.1294908482249865;  // std dev = 0.029, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.41751358415831147;  // std dev = 0.000, 301.000 (wgt'ed) examples reached here.  /* #pos=301 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.2101063402725396;  // std dev = 0.500, 2,892.000 (wgt'ed) examples reached here.  /* #neg=1,422 #pos=1,470 */
%   | | else if ( haswordvenue(B, F), haswordtitle(G, F) )
%   | | | then return 0.2865825279963394;  // std dev = 3.956, 72.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=49 */
%   | | | else return 0.22427810686169095;  // std dev = 3.113, 39.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=21 */
%   | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordauthor(K, J) )
%   | | | then return 0.09244482410100242;  // std dev = 6.516, 208.000 (wgt'ed) examples reached here.  /* #neg=144 #pos=64 */
%   | | | else return 0.3609311214134788;  // std dev = 2.284, 23.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=15 */
%   | | else if ( haswordvenue(B, L), haswordauthor(M, L) )
%   | | | then return -0.08992386077445795;  // std dev = 0.970, 20.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=1 */
%   | | | else return 0.0589729301660234;  // std dev = 4.555, 120.000 (wgt'ed) examples reached here.  /* #neg=93 #pos=27 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.32071184716015083;  // std dev = 0.000, 301.000 (wgt'ed) examples reached here.  /* #pos=301 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.1643652854381691;  // std dev = 0.500, 2,892.000 (wgt'ed) examples reached here.  /* #neg=1,422 #pos=1,470 */
%   | | else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | | then return 0.3248033940786745;  // std dev = 1.268, 9.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=7 */
%   | | | else return 0.1907265414940391;  // std dev = 4.861, 102.000 (wgt'ed) examples reached here.  /* #neg=39 #pos=63 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordauthor(K, J) )
%   | | | then return 0.07533807541702127;  // std dev = 6.423, 208.000 (wgt'ed) examples reached here.  /* #neg=144 #pos=64 */
%   | | | else return 0.37352384149936757;  // std dev = 2.026, 19.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=13 */
%   | | else if ( haswordvenue(A, L), haswordauthor(M, L) )
%   | | | then return -0.12621231347970366;  // std dev = 0.970, 19.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=1 */
%   | | | else return 0.052430825054487054;  // std dev = 4.690, 125.000 (wgt'ed) examples reached here.  /* #neg=96 #pos=29 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.2551722425694877;  // std dev = 3.63e-07, 301.000 (wgt'ed) examples reached here.  /* #pos=301 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.12638865615838007;  // std dev = 0.500, 2,892.000 (wgt'ed) examples reached here.  /* #neg=1,422 #pos=1,470 */
%   | | else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | | | then return 0.2555807964125595;  // std dev = 1.258, 8.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=6 */
%   | | | else return 0.144089577887566;  // std dev = 4.863, 103.000 (wgt'ed) examples reached here.  /* #neg=39 #pos=64 */
%   | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordauthor(K, J) )
%   | | | then return 0.06155101543099866;  // std dev = 6.441, 208.000 (wgt'ed) examples reached here.  /* #neg=144 #pos=64 */
%   | | | else return 0.26354675648418163;  // std dev = 2.284, 23.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=15 */
%   | | else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | | | then return 0.03516262183922718;  // std dev = 4.654, 128.000 (wgt'ed) examples reached here.  /* #neg=100 #pos=28 */
%   | | | else return -0.12073883686790539;  // std dev = 0.049, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.20975771563253476;  // std dev = 2.83e-07, 301.000 (wgt'ed) examples reached here.  /* #pos=301 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.09614283644369719;  // std dev = 0.500, 2,892.000 (wgt'ed) examples reached here.  /* #neg=1,422 #pos=1,470 */
%   | | else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | | then return 0.20256642791462942;  // std dev = 1.258, 9.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=7 */
%   | | | else return 0.10674765645683683;  // std dev = 4.860, 102.000 (wgt'ed) examples reached here.  /* #neg=39 #pos=63 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordauthor(K, J) )
%   | | | then return 0.048002427551670286;  // std dev = 6.382, 208.000 (wgt'ed) examples reached here.  /* #neg=144 #pos=64 */
%   | | | else return 0.27369535313652554;  // std dev = 2.026, 19.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=13 */
%   | | else if ( haswordvenue(A, L), haswordauthor(M, L) )
%   | | | then return -0.11505178451519828;  // std dev = 0.970, 19.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=1 */
%   | | | else return 0.036595718990876006;  // std dev = 4.682, 125.000 (wgt'ed) examples reached here.  /* #neg=96 #pos=29 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.1770964977452769;  // std dev = 1.84e-07, 301.000 (wgt'ed) examples reached here.  /* #pos=301 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.07266884897821989;  // std dev = 0.500, 2,892.000 (wgt'ed) examples reached here.  /* #neg=1,422 #pos=1,470 */
%   | | else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | | then return 0.15410602415936261;  // std dev = 1.258, 9.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=7 */
%   | | | else return 0.08040333084625964;  // std dev = 4.860, 102.000 (wgt'ed) examples reached here.  /* #neg=39 #pos=63 */
%   | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordauthor(K, J) )
%   | | | then return 0.03919510979714659;  // std dev = 6.394, 208.000 (wgt'ed) examples reached here.  /* #neg=144 #pos=64 */
%   | | | else return 0.1874993078778643;  // std dev = 2.284, 23.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=15 */
%   | | else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | | | then return 0.022389173315619015;  // std dev = 4.653, 128.000 (wgt'ed) examples reached here.  /* #neg=100 #pos=28 */
%   | | | else return -0.10986910875105133;  // std dev = 0.053, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.1527438580936716;  // std dev = 0.000, 301.000 (wgt'ed) examples reached here.  /* #pos=301 */
%   else if ( haswordvenue(B, D), haswordtitle(E, D) )
%   | then if ( title(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.3423539209337439;  // std dev = 17.631, 1,897.000 (wgt'ed) examples reached here.  /* #neg=393 #pos=1,504 */
%   | | | else return -0.39381410658609384;  // std dev = 7.263, 1,210.000 (wgt'ed) examples reached here.  /* #neg=1,158 #pos=52 */
%   | | else if ( haswordauthor(H, D) )
%   | | | then return 0.13429704617665023;  // std dev = 2.465, 27.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=15 */
%   | | | else return -0.04730797451556881;  // std dev = 3.735, 61.000 (wgt'ed) examples reached here.  /* #neg=34 #pos=27 */
%   | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | then if ( title(K, J), venue(K, A) )
%   | | | then return 0.05065954241157855;  // std dev = 5.374, 155.000 (wgt'ed) examples reached here.  /* #neg=107 #pos=48 */
%   | | | else return -0.1312996164284397;  // std dev = 0.722, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | | else if ( haswordvenue(A, L), haswordvenue(B, L) )
%   | | | then return -0.4914038488347476;  // std dev = 2.11e-08, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | | else return -0.09959833201635497;  // std dev = 0.049, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.13400703000801162;  // std dev = 0.000, 301.000 (wgt'ed) examples reached here.  /* #pos=301 */
%   else if ( haswordvenue(B, D), haswordtitle(E, D) )
%   | then if ( title(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.2576768205027299;  // std dev = 17.638, 1,897.000 (wgt'ed) examples reached here.  /* #neg=393 #pos=1,504 */
%   | | | else return -0.30183441415540574;  // std dev = 7.187, 1,210.000 (wgt'ed) examples reached here.  /* #neg=1,158 #pos=52 */
%   | | else if ( haswordauthor(H, D) )
%   | | | then return 0.10441027098444852;  // std dev = 2.461, 27.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=15 */
%   | | | else return -0.03580039550685917;  // std dev = 3.736, 61.000 (wgt'ed) examples reached here.  /* #neg=34 #pos=27 */
%   | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | then if ( title(K, J), venue(K, A) )
%   | | | then return 0.04155570337649005;  // std dev = 5.371, 155.000 (wgt'ed) examples reached here.  /* #neg=107 #pos=48 */
%   | | | else return -0.10725394491471614;  // std dev = 0.727, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | | else if ( haswordvenue(A, L), haswordvenue(B, L) )
%   | | | then return -0.3714989077518865;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | | else return -0.09103324401616282;  // std dev = 0.045, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */


Results
   AUC ROC   = 0.918606
   AUC PR    = 0.928888
   CLL	      = -0.473307
   Precision = 0.941834 at threshold = 0.5
   Recall    = 0.724613
   F1        = 0.819066


Total learning time: 3689.415 seconds
Total inference time: 6.826 seconds
AUC ROC: 0.918606


Results scoring model
   AUC ROC   = 0.879485
   AUC PR    = 0.874037
   CLL	      = -0.480028
   Precision = 0.81913 at threshold = 0.5
   Recall    = 0.927618
   F1        = 0.870005


Total scoring time: 35.735 seconds
Refined model CLL: -0.480028


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.918606
   AUC PR    = 0.928888
   CLL	      = -0.473307
   Precision = 0.941834 at threshold = 0.5
   Recall    = 0.724613
   F1        = 0.819066


Total learning time: 3746.655 seconds
Total inference time: 6.826 seconds
AUC ROC: 0.918606
Total revision time: 3746.655
Best scored revision CLL: -0.480028


Dataset: 3_imdb_cora, Fold: 3, Type: Transfer (trRDN-B), Time: 06:45:54
{'AUC ROC': 0.918606, 'AUC PR': 0.928888, 'CLL': -0.473307, 'Precision': [0.941834, 0.5], 'Recall': 0.724613, 'F1': 0.819066, 'Learning time': 3746.655, 'Inference time': 6.826, 'parameter_0.8': {'AUC ROC': 0.585198, 'AUC PR': 0.65057, 'CLL': -0.64097, 'Precision': [1.0, 0.5], 'Recall': 0.170396, 'F1': 0.291176, 'Learning time': 15.711, 'Inference time': 3.447}}


Amount of data: 1.0
******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- actor(A), director(B).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- actor(A), director(B).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- actor(A), director(B).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- director(B), actor(A).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.8581489350995082;  // std dev = 1.56e-06, 396.000 (wgt'ed) examples reached here.  /* #pos=396 */
%   else return 0.3439788946136772;  // std dev = 32.387, 4,199.000 (wgt'ed) examples reached here.  /* #neg=2,159 #pos=2,040 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.7194734122109581;  // std dev = 0.000, 396.000 (wgt'ed) examples reached here.  /* #pos=396 */
%   else return 0.2967533182666591;  // std dev = 32.387, 4,199.000 (wgt'ed) examples reached here.  /* #neg=2,159 #pos=2,040 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.555366436746283;  // std dev = 0.000, 396.000 (wgt'ed) examples reached here.  /* #pos=396 */
%   else return 0.24702960200266294;  // std dev = 32.387, 4,199.000 (wgt'ed) examples reached here.  /* #neg=2,159 #pos=2,040 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.41751358415831213;  // std dev = 0.000, 396.000 (wgt'ed) examples reached here.  /* #pos=396 */
%   else return 0.19928790573797048;  // std dev = 32.387, 4,199.000 (wgt'ed) examples reached here.  /* #neg=2,159 #pos=2,040 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.3207118471601518;  // std dev = 0.000, 396.000 (wgt'ed) examples reached here.  /* #pos=396 */
%   else return 0.15688269517752454;  // std dev = 32.387, 4,199.000 (wgt'ed) examples reached here.  /* #neg=2,159 #pos=2,040 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.2551722425694873;  // std dev = 4.50e-07, 396.000 (wgt'ed) examples reached here.  /* #pos=396 */
%   else return 0.12137212733699534;  // std dev = 32.387, 4,199.000 (wgt'ed) examples reached here.  /* #neg=2,159 #pos=2,040 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.2097577156325346;  // std dev = 2.46e-07, 396.000 (wgt'ed) examples reached here.  /* #pos=396 */
%   else return 0.09282430051530978;  // std dev = 32.387, 4,199.000 (wgt'ed) examples reached here.  /* #neg=2,159 #pos=2,040 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.17709649774527686;  // std dev = 2.06e-07, 396.000 (wgt'ed) examples reached here.  /* #pos=396 */
%   else return 0.07047493697361466;  // std dev = 32.387, 4,199.000 (wgt'ed) examples reached here.  /* #neg=2,159 #pos=2,040 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.15274385809367164;  // std dev = 0.000, 396.000 (wgt'ed) examples reached here.  /* #pos=396 */
%   else return 0.05326560213870825;  // std dev = 32.387, 4,199.000 (wgt'ed) examples reached here.  /* #neg=2,159 #pos=2,040 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.13400703000801217;  // std dev = 0.000, 396.000 (wgt'ed) examples reached here.  /* #pos=396 */
%   else return 0.04014741135453366;  // std dev = 32.387, 4,199.000 (wgt'ed) examples reached here.  /* #neg=2,159 #pos=2,040 */


Results
   AUC ROC   = 0.585198
   AUC PR    = 0.65057
   CLL	      = -0.640942
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.170396
   F1        = 0.291176


Total learning time: 16.509 seconds
Total inference time: 3.304 seconds
AUC ROC: 0.585198


Results scoring model
   AUC ROC   = 0.581281
   AUC PR    = 0.668957
   CLL	      = -0.645659
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.162562
   F1        = 0.279661


Total scoring time: 6.485 seconds
Parameter learned model CLL: -0.645659


Structure after Parameter Learning
[['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [1.56e-06, 0, 396], 'false': [32.387, 2, 2]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 396], 'false': [32.387, 2, 2]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 396], 'false': [32.387, 2, 2]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 396], 'false': [32.387, 2, 2]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 396], 'false': [32.387, 2, 2]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [4.5e-07, 0, 396], 'false': [32.387, 2, 2]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [2.46e-07, 0, 396], 'false': [32.387, 2, 2]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [2.06e-07, 0, 396], 'false': [32.387, 2, 2]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 396], 'false': [32.387, 2, 2]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 396], 'false': [32.387, 2, 2]}]]
[{'': [6.172391441956426e-15, 0.24979920995258]}, {'': [-5.311127519822971e-15, 0.24979920995264981]}, {'': [-1.2201238896890609e-15, 0.24979920995263957]}, {'': [-1.8301858345335913e-15, 0.24979920995267327]}, {'': [-1.5969268556224474e-15, 0.24979920995262295]}, {'': [5.113754537667388e-16, 0.24979920995263177]}, {'': [1.525154862111326e-16, 0.24979920995261828]}, {'': [1.0765799026668185e-16, 0.24979920995260016]}, {'': [-2.6017347647781446e-16, 0.2497992099526346]}, {'': [-3.1848822120560044e-16, 0.24979920995263546]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
1;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
2;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
3;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
4;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
5;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
6;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
7;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
8;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
9;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.8581489350995082;  // std dev = 1.56e-06, 396.000 (wgt'ed) examples reached here.  /* #pos=396 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.36216889628608884;  // std dev = 0.500, 3,607.000 (wgt'ed) examples reached here.  /* #neg=1,789 #pos=1,818 */
%   | | else if ( haswordvenue(B, F), haswordtitle(G, F) )
%   | | | then return 0.5416932388969813;  // std dev = 4.134, 79.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=54 */
%   | | | else return 0.46529179224236833;  // std dev = 3.655, 56.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=34 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return 0.3541489350995134;  // std dev = 5.590, 125.000 (wgt'ed) examples reached here.  /* #neg=63 #pos=62 */
%   | | | else return 0.08599703636533382;  // std dev = 5.272, 158.000 (wgt'ed) examples reached here.  /* #neg=122 #pos=36 */
%   | | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | | then return 0.08175141957156075;  // std dev = 5.287, 161.000 (wgt'ed) examples reached here.  /* #neg=125 #pos=36 */
%   | | | else return -0.1418510649004878;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.7194734122109581;  // std dev = 0.000, 396.000 (wgt'ed) examples reached here.  /* #pos=396 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.31213852189677865;  // std dev = 0.500, 3,607.000 (wgt'ed) examples reached here.  /* #neg=1,789 #pos=1,818 */
%   | | else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | | | then return 0.5608068904435165;  // std dev = 1.254, 9.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=7 */
%   | | | else return 0.42701103806215807;  // std dev = 5.372, 126.000 (wgt'ed) examples reached here.  /* #neg=45 #pos=81 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return 0.3053590874575927;  // std dev = 5.590, 125.000 (wgt'ed) examples reached here.  /* #neg=63 #pos=62 */
%   | | | else return 0.07520286772643882;  // std dev = 5.272, 158.000 (wgt'ed) examples reached here.  /* #neg=122 #pos=36 */
%   | | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | | then return 0.07150558934211004;  // std dev = 5.287, 161.000 (wgt'ed) examples reached here.  /* #neg=125 #pos=36 */
%   | | | else return -0.12544463852839138;  // std dev = 7.45e-09, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.555366436746283;  // std dev = 0.000, 396.000 (wgt'ed) examples reached here.  /* #pos=396 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.259063065774677;  // std dev = 0.500, 3,607.000 (wgt'ed) examples reached here.  /* #neg=1,789 #pos=1,818 */
%   | | else if ( haswordvenue(B, F), haswordtitle(G, F) )
%   | | | then return 0.3779709398328566;  // std dev = 4.135, 79.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=54 */
%   | | | else return 0.3181627471532186;  // std dev = 3.646, 56.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=34 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordauthor(K, J) )
%   | | | then return 0.11659576876706629;  // std dev = 7.315, 258.000 (wgt'ed) examples reached here.  /* #neg=178 #pos=80 */
%   | | | else return 0.47776995520294724;  // std dev = 2.245, 25.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=18 */
%   | | else if ( haswordvenue(A, L), haswordauthor(M, L) )
%   | | | then return -0.07206213988767934;  // std dev = 1.347, 24.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=2 */
%   | | | else return 0.06839925377715958;  // std dev = 5.108, 150.000 (wgt'ed) examples reached here.  /* #neg=116 #pos=34 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.41751358415831213;  // std dev = 0.000, 396.000 (wgt'ed) examples reached here.  /* #pos=396 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.20806384793204624;  // std dev = 0.500, 3,607.000 (wgt'ed) examples reached here.  /* #neg=1,789 #pos=1,818 */
%   | | else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | | then return 0.3856909202709658;  // std dev = 1.242, 9.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=7 */
%   | | | else return 0.26640544737601485;  // std dev = 5.365, 126.000 (wgt'ed) examples reached here.  /* #neg=45 #pos=81 */
%   | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(A, J) )
%   | | | then return 0.2165589883749674;  // std dev = 5.524, 125.000 (wgt'ed) examples reached here.  /* #neg=63 #pos=62 */
%   | | | else return 0.055051225971619905;  // std dev = 5.278, 161.000 (wgt'ed) examples reached here.  /* #neg=125 #pos=36 */
%   | | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | | then return 0.04871095091210571;  // std dev = 5.272, 158.000 (wgt'ed) examples reached here.  /* #neg=122 #pos=36 */
%   | | | else return -0.11609061759410766;  // std dev = 0.021, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.3207118471601518;  // std dev = 0.000, 396.000 (wgt'ed) examples reached here.  /* #pos=396 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.1629580733119996;  // std dev = 0.500, 3,607.000 (wgt'ed) examples reached here.  /* #neg=1,789 #pos=1,818 */
%   | | else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | | | then return 0.295749312203493;  // std dev = 1.256, 9.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=7 */
%   | | | else return 0.2018898843121914;  // std dev = 5.361, 126.000 (wgt'ed) examples reached here.  /* #neg=45 #pos=81 */
%   | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordauthor(K, J) )
%   | | | then return 0.07910097555290141;  // std dev = 7.140, 256.000 (wgt'ed) examples reached here.  /* #neg=176 #pos=80 */
%   | | | else return 0.2915417920136179;  // std dev = 2.683, 30.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=18 */
%   | | else if ( haswordvenue(B, L), haswordauthor(M, L) )
%   | | | then return -0.09323344151977431;  // std dev = 1.345, 24.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=2 */
%   | | | else return 0.05049893735959501;  // std dev = 5.081, 147.000 (wgt'ed) examples reached here.  /* #neg=113 #pos=34 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.2551722425694873;  // std dev = 4.50e-07, 396.000 (wgt'ed) examples reached here.  /* #pos=396 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.12544650699507062;  // std dev = 0.500, 3,607.000 (wgt'ed) examples reached here.  /* #neg=1,789 #pos=1,818 */
%   | | else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | | then return 0.2355237897416318;  // std dev = 1.234, 9.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=7 */
%   | | | else return 0.1508133534983815;  // std dev = 5.364, 126.000 (wgt'ed) examples reached here.  /* #neg=45 #pos=81 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordauthor(K, J) )
%   | | | then return 0.061098654085974875;  // std dev = 7.222, 258.000 (wgt'ed) examples reached here.  /* #neg=178 #pos=80 */
%   | | | else return 0.31074887784899713;  // std dev = 2.245, 25.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=18 */
%   | | else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | | | then return 0.035413151675857985;  // std dev = 5.277, 161.000 (wgt'ed) examples reached here.  /* #neg=125 #pos=36 */
%   | | | else return -0.10639546489087429;  // std dev = 0.024, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.2097577156325346;  // std dev = 2.46e-07, 396.000 (wgt'ed) examples reached here.  /* #pos=396 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.09551786353831725;  // std dev = 0.500, 3,607.000 (wgt'ed) examples reached here.  /* #neg=1,789 #pos=1,818 */
%   | | else if ( haswordvenue(B, F), haswordtitle(G, F) )
%   | | | then return 0.13291585067452455;  // std dev = 4.133, 79.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=54 */
%   | | | else return 0.09583847268631149;  // std dev = 3.633, 56.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=34 */
%   | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordauthor(K, J) )
%   | | | then return 0.05052081135263268;  // std dev = 7.082, 256.000 (wgt'ed) examples reached here.  /* #neg=176 #pos=80 */
%   | | | else return 0.2117553520585003;  // std dev = 2.683, 30.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=18 */
%   | | else if ( haswordvenue(B, L), haswordauthor(M, L) )
%   | | | then return -0.08679577992559628;  // std dev = 1.345, 24.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=2 */
%   | | | else return 0.03451655044994592;  // std dev = 5.075, 147.000 (wgt'ed) examples reached here.  /* #neg=113 #pos=34 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.17709649774527686;  // std dev = 2.06e-07, 396.000 (wgt'ed) examples reached here.  /* #pos=396 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.0722524138920794;  // std dev = 0.500, 3,607.000 (wgt'ed) examples reached here.  /* #neg=1,789 #pos=1,818 */
%   | | else if ( haswordvenue(B, F), haswordtitle(G, F) )
%   | | | then return 0.10035545522116752;  // std dev = 4.133, 79.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=54 */
%   | | | else return 0.07196357490733447;  // std dev = 3.634, 56.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=34 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordauthor(K, J) )
%   | | | then return 0.03879994585356624;  // std dev = 7.187, 258.000 (wgt'ed) examples reached here.  /* #neg=178 #pos=80 */
%   | | | else return 0.22144808822881504;  // std dev = 2.245, 25.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=18 */
%   | | else if ( haswordvenue(A, L), haswordauthor(M, L) )
%   | | | then return -0.08808878291589728;  // std dev = 1.345, 24.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=2 */
%   | | | else return 0.029188072627410182;  // std dev = 5.091, 150.000 (wgt'ed) examples reached here.  /* #neg=116 #pos=34 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.15274385809367164;  // std dev = 0.000, 396.000 (wgt'ed) examples reached here.  /* #pos=396 */
%   else if ( haswordvenue(B, D), haswordtitle(E, D) )
%   | then if ( haswordtitle(E, F), haswordvenue(A, F) )
%   | | then if ( venue(G, A), title(G, E) )
%   | | | then return 0.05427564531412546;  // std dev = 29.899, 3,577.000 (wgt'ed) examples reached here.  /* #neg=1,775 #pos=1,802 */
%   | | | else return 0.06528718229449748;  // std dev = 6.670, 187.000 (wgt'ed) examples reached here.  /* #neg=89 #pos=98 */
%   | | else if ( title(H, E), venue(H, A) )
%   | | | then return 0.05373876502810417;  // std dev = 5.980, 199.000 (wgt'ed) examples reached here.  /* #neg=131 #pos=68 */
%   | | | else return -0.2207821599114335;  // std dev = 1.083, 9.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | then if ( title(K, J), venue(K, A) )
%   | | | then return 0.050933231596866683;  // std dev = 6.132, 200.000 (wgt'ed) examples reached here.  /* #neg=132 #pos=68 */
%   | | | else return -0.08305733986204449;  // std dev = 0.858, 7.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=2 */
%   | | else if ( haswordvenue(A, L), haswordvenue(B, L) )
%   | | | then return -0.5491845060670036;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | | else return -0.09787811862611254;  // std dev = 0.041, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.13400703000801217;  // std dev = 0.000, 396.000 (wgt'ed) examples reached here.  /* #pos=396 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.040954628725169855;  // std dev = 0.500, 3,607.000 (wgt'ed) examples reached here.  /* #neg=1,789 #pos=1,818 */
%   | | else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | | then return 0.1334158829249793;  // std dev = 1.226, 9.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=7 */
%   | | | else return 0.059695177474749;  // std dev = 5.239, 126.000 (wgt'ed) examples reached here.  /* #neg=45 #pos=81 */
%   | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordauthor(K, J) )
%   | | | then return 0.021135455411518456;  // std dev = 7.039, 256.000 (wgt'ed) examples reached here.  /* #neg=176 #pos=80 */
%   | | | else return 0.13484047850757194;  // std dev = 2.684, 30.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=18 */
%   | | else if ( haswordvenue(B, L), haswordauthor(M, L) )
%   | | | then return -0.08488961896440023;  // std dev = 1.344, 24.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=2 */
%   | | | else return 0.01587051834779343;  // std dev = 5.065, 147.000 (wgt'ed) examples reached here.  /* #neg=113 #pos=34 */


Results
   AUC ROC   = 0.663052
   AUC PR    = 0.709009
   CLL	      = -0.630932
   Precision = 0.954545 at threshold = 0.5
   Recall    = 0.180723
   F1        = 0.303907


Total learning time: 2017.993 seconds
Total inference time: 6.199 seconds
AUC ROC: 0.663052


Results scoring model
   AUC ROC   = 0.633134
   AUC PR    = 0.702446
   CLL	      = -0.629932
   Precision = 0.91439 at threshold = 0.5
   Recall    = 0.206076
   F1        = 0.336348


Total scoring time: 24.764 seconds
Refined model CLL: -0.629932


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.663052
   AUC PR    = 0.709009
   CLL	      = -0.630932
   Precision = 0.954545 at threshold = 0.5
   Recall    = 0.180723
   F1        = 0.303907


Total learning time: 2065.7509999999997 seconds
Total inference time: 6.199 seconds
AUC ROC: 0.663052
Total revision time: 2065.7509999999997
Best scored revision CLL: -0.629932


Dataset: 3_imdb_cora, Fold: 3, Type: Transfer (trRDN-B), Time: 07:20:31
{'AUC ROC': 0.663052, 'AUC PR': 0.709009, 'CLL': -0.630932, 'Precision': [0.954545, 0.5], 'Recall': 0.180723, 'F1': 0.303907, 'Learning time': 2065.7509999999997, 'Inference time': 6.199, 'parameter_1.0': {'AUC ROC': 0.585198, 'AUC PR': 0.65057, 'CLL': -0.640942, 'Precision': [1.0, 0.5], 'Recall': 0.170396, 'F1': 0.291176, 'Learning time': 16.509, 'Inference time': 3.304}}


Starting fold 4

Target train facts examples: 34429
Target train pos examples: 2270
Target train neg examples: 1993

Target test facts examples: 8129
Target test pos	 examples: 747
Target test neg examples: 747

Amount of data: 0.2
******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- actor(A), director(B).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- actor(A), director(B).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- actor(A), director(B).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- director(B), actor(A).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.8581489350995126;  // std dev = 0.000, 63.000 (wgt'ed) examples reached here.  /* #pos=63 */
%   else return 0.3537129401692161;  // std dev = 14.044, 789.000 (wgt'ed) examples reached here.  /* #neg=398 #pos=391 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.7194734122109542;  // std dev = 8.43e-08, 63.000 (wgt'ed) examples reached here.  /* #pos=63 */
%   else return 0.30499035614391656;  // std dev = 14.044, 789.000 (wgt'ed) examples reached here.  /* #neg=398 #pos=391 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.5553664367462837;  // std dev = 1.58e-07, 63.000 (wgt'ed) examples reached here.  /* #pos=63 */
%   else return 0.2534816408748883;  // std dev = 14.044, 789.000 (wgt'ed) examples reached here.  /* #neg=398 #pos=391 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.41751358415831036;  // std dev = 0.000, 63.000 (wgt'ed) examples reached here.  /* #pos=63 */
%   else return 0.20400307759270384;  // std dev = 14.044, 789.000 (wgt'ed) examples reached here.  /* #neg=398 #pos=391 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.32071184716014983;  // std dev = 0.000, 63.000 (wgt'ed) examples reached here.  /* #pos=63 */
%   else return 0.16015296634053292;  // std dev = 14.044, 789.000 (wgt'ed) examples reached here.  /* #neg=398 #pos=391 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.25517224256948967;  // std dev = 0.000, 63.000 (wgt'ed) examples reached here.  /* #pos=63 */
%   else return 0.12356697354949929;  // std dev = 14.044, 789.000 (wgt'ed) examples reached here.  /* #neg=398 #pos=391 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.20975771563253567;  // std dev = 0.000, 63.000 (wgt'ed) examples reached here.  /* #pos=63 */
%   else return 0.09427377986070383;  // std dev = 14.044, 789.000 (wgt'ed) examples reached here.  /* #neg=398 #pos=391 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.17709649774527728;  // std dev = 0.000, 63.000 (wgt'ed) examples reached here.  /* #pos=63 */
%   else return 0.07142822544689152;  // std dev = 14.044, 789.000 (wgt'ed) examples reached here.  /* #neg=398 #pos=391 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.1527438580936707;  // std dev = 4.21e-08, 63.000 (wgt'ed) examples reached here.  /* #pos=63 */
%   else return 0.053894708240517245;  // std dev = 14.044, 789.000 (wgt'ed) examples reached here.  /* #neg=398 #pos=391 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.13400703000801095;  // std dev = 4.47e-08, 63.000 (wgt'ed) examples reached here.  /* #pos=63 */
%   else return 0.04056573000034324;  // std dev = 14.044, 789.000 (wgt'ed) examples reached here.  /* #neg=398 #pos=391 */


Results
   AUC ROC   = 0.576975
   AUC PR    = 0.639704
   CLL	      = -0.646435
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.153949
   F1        = 0.266821


Total learning time: 7.296 seconds
Total inference time: 3.512 seconds
AUC ROC: 0.576975


Results scoring model
   AUC ROC   = 0.569383
   AUC PR    = 0.655911
   CLL	      = -0.652969
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.138767
   F1        = 0.243714


Total scoring time: 4.295 seconds
Parameter learned model CLL: -0.652969


Structure after Parameter Learning
[['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 63], 'false': [14.044, 398, 391]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [8.43e-08, 0, 63], 'false': [14.044, 398, 391]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [1.58e-07, 0, 63], 'false': [14.044, 398, 391]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 63], 'false': [14.044, 398, 391]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 63], 'false': [14.044, 398, 391]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 63], 'false': [14.044, 398, 391]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 63], 'false': [14.044, 398, 391]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 63], 'false': [14.044, 398, 391]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [4.21e-08, 0, 63], 'false': [14.044, 398, 391]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [4.47e-08, 0, 63], 'false': [14.044, 398, 391]}]]
[{'': [-7.894919286223335e-16, 0.24998032194896747]}, {'': [1.1278456123176193e-16, 0.249980321949001]}, {'': [3.9474596431116675e-16, 0.2499803219489752]}, {'': [-3.101575433873453e-16, 0.24998032194897246]}, {'': [-2.2556912246352386e-16, 0.249980321948979]}, {'': [-4.229421046191072e-17, 0.24998032194897105]}, {'': [-4.9343245538895844e-17, 0.24998032194898467]}, {'': [-2.114710523095536e-17, 0.24998032194898018]}, {'': [2.819614030794048e-17, 0.2499803219489757]}, {'': [3.172065784643304e-17, 0.24998032194897507]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
1;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
2;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
3;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
4;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
5;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
6;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
7;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
8;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
9;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.8581489350995126;  // std dev = 0.000, 63.000 (wgt'ed) examples reached here.  /* #pos=63 */
%   else if ( haswordvenue(B, D), haswordtitle(E, D) )
%   | then if ( title(F, E), venue(F, B) )
%   | | then if ( samebib(F, G), venue(G, A) )
%   | | | then return 0.6808090336216757;  // std dev = 7.696, 406.000 (wgt'ed) examples reached here.  /* #neg=72 #pos=334 */
%   | | | else return -0.06057898009483416;  // std dev = 4.597, 283.000 (wgt'ed) examples reached here.  /* #neg=260 #pos=23 */
%   | | else if ( haswordvenue(A, D) )
%   | | | then return 0.35814893509951234;  // std dev = 2.646, 28.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=14 */
%   | | | else return 0.10814893509951232;  // std dev = 1.732, 16.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=4 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( title(J, I), venue(J, B) )
%   | | | then return 0.14981560176617903;  // std dev = 3.149, 48.000 (wgt'ed) examples reached here.  /* #neg=34 #pos=14 */
%   | | | else return 0.3581489350995122;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else return -0.14185106490048777;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.7194734122109542;  // std dev = 8.43e-08, 63.000 (wgt'ed) examples reached here.  /* #pos=63 */
%   else if ( haswordvenue(B, D), haswordtitle(E, D) )
%   | then if ( title(F, E), venue(F, B) )
%   | | then if ( samebib(F, G), venue(G, A) )
%   | | | then return 0.576498716706708;  // std dev = 7.696, 406.000 (wgt'ed) examples reached here.  /* #neg=72 #pos=334 */
%   | | | else return -0.05336349657545781;  // std dev = 4.597, 283.000 (wgt'ed) examples reached here.  /* #neg=260 #pos=23 */
%   | | else if ( haswordvenue(A, D) )
%   | | | then return 0.3087411357856347;  // std dev = 2.646, 28.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=14 */
%   | | | else return 0.09446743783575551;  // std dev = 1.732, 16.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=4 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( title(J, I), venue(J, B) )
%   | | | then return 0.13058263748064494;  // std dev = 3.149, 48.000 (wgt'ed) examples reached here.  /* #neg=34 #pos=14 */
%   | | | else return 0.308741135785635;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else return -0.12544463852839138;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.5553664367462837;  // std dev = 1.58e-07, 63.000 (wgt'ed) examples reached here.  /* #pos=63 */
%   else if ( haswordvenue(B, D), haswordtitle(E, D) )
%   | then if ( haswordtitle(E, F), haswordvenue(A, F) )
%   | | then if ( haswordauthor(G, F), haswordvenue(A, D) )
%   | | | then return 0.46937196736200926;  // std dev = 1.168, 14.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=11 */
%   | | | else return 0.24477819540600312;  // std dev = 11.149, 684.000 (wgt'ed) examples reached here.  /* #neg=335 #pos=349 */
%   | | else return 0.1680027361704489;  // std dev = 0.425, 35.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=15 */
%   | else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | | then return -0.1571189058288309;  // std dev = 0.055, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | | | then return 0.1353544334259595;  // std dev = 3.287, 50.000 (wgt'ed) examples reached here.  /* #neg=34 #pos=16 */
%   | | | else return -0.11231637819360639;  // std dev = 2.63e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.41751358415831036;  // std dev = 0.000, 63.000 (wgt'ed) examples reached here.  /* #pos=63 */
%   else if ( haswordvenue(B, D), haswordtitle(E, D) )
%   | then if ( title(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.3944814769191085;  // std dev = 7.704, 407.000 (wgt'ed) examples reached here.  /* #neg=73 #pos=334 */
%   | | | else return -0.0961337352588098;  // std dev = 4.117, 282.000 (wgt'ed) examples reached here.  /* #neg=263 #pos=19 */
%   | | else if ( title(H, E), venue(H, B) )
%   | | | then return 0.48432150920124384;  // std dev = 1.793, 14.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=9 */
%   | | | else return 0.17628290514182066;  // std dev = 2.654, 30.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=13 */
%   | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | then if ( title(K, J), venue(K, B) )
%   | | | then return 0.09312217058956042;  // std dev = 3.142, 48.000 (wgt'ed) examples reached here.  /* #neg=34 #pos=14 */
%   | | | else return 0.2306170535033707;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else return -0.10059209037224431;  // std dev = 0.003, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.32071184716014983;  // std dev = 0.000, 63.000 (wgt'ed) examples reached here.  /* #pos=63 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then if ( title(F, E), venue(F, A) )
%   | | | then return 0.14220919680301833;  // std dev = 9.603, 640.000 (wgt'ed) examples reached here.  /* #neg=311 #pos=329 */
%   | | | else return 0.2635554742429117;  // std dev = 3.044, 35.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=20 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.2230757670901545;  // std dev = 1.301, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | | | else return 0.12124601343360723;  // std dev = 1.577, 12.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=4 */
%   | else if ( haswordvenue(A, I), haswordauthor(J, I) )
%   | | then if ( haswordauthor(J, K), haswordtitle(L, K) )
%   | | | then return -0.011938647697750708;  // std dev = 0.590, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | else return -0.13205522856470028;  // std dev = 0.058, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else if ( haswordvenue(A, M), haswordtitle(N, M) )
%   | | | then return 0.1153098176734568;  // std dev = 3.510, 62.000 (wgt'ed) examples reached here.  /* #neg=39 #pos=23 */
%   | | | else return 0.05484192215439559;  // std dev = 1.847, 27.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=10 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.25517224256948967;  // std dev = 0.000, 63.000 (wgt'ed) examples reached here.  /* #pos=63 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then if ( title(F, E), venue(F, A) )
%   | | | then return 0.11359939573732744;  // std dev = 9.501, 640.000 (wgt'ed) examples reached here.  /* #neg=311 #pos=329 */
%   | | | else return 0.20663163593216016;  // std dev = 3.053, 35.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=20 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.17209261345907909;  // std dev = 1.314, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | | | else return 0.1008466390084138;  // std dev = 1.573, 12.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=4 */
%   | else if ( haswordvenue(A, I), haswordauthor(J, I) )
%   | | then if ( haswordauthor(J, K), haswordtitle(L, K) )
%   | | | then return -0.00988554679791464;  // std dev = 0.591, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | else return -0.11776720282504326;  // std dev = 0.052, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else if ( haswordvenue(A, M), haswordtitle(N, M) )
%   | | | then return 0.09394841678979365;  // std dev = 3.504, 62.000 (wgt'ed) examples reached here.  /* #neg=39 #pos=23 */
%   | | | else return 0.04477179273674135;  // std dev = 1.837, 27.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=10 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.20975771563253567;  // std dev = 0.000, 63.000 (wgt'ed) examples reached here.  /* #pos=63 */
%   else if ( haswordvenue(B, D), haswordtitle(E, D) )
%   | then if ( title(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.23434497366477616;  // std dev = 7.719, 407.000 (wgt'ed) examples reached here.  /* #neg=73 #pos=334 */
%   | | | else return -0.11770469791294845;  // std dev = 4.104, 282.000 (wgt'ed) examples reached here.  /* #neg=263 #pos=19 */
%   | | else if ( title(H, E), venue(H, B) )
%   | | | then return 0.3142862164226075;  // std dev = 1.793, 14.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=9 */
%   | | | else return 0.06070571753836198;  // std dev = 2.610, 30.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=13 */
%   | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | then if ( title(K, J), venue(K, B) )
%   | | | then return 0.04230077543588142;  // std dev = 3.133, 48.000 (wgt'ed) examples reached here.  /* #neg=34 #pos=14 */
%   | | | else return 0.13447366695330765;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else return -0.0996884378975747;  // std dev = 0.035, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.17709649774527728;  // std dev = 0.000, 63.000 (wgt'ed) examples reached here.  /* #pos=63 */
%   else if ( haswordvenue(B, D), haswordtitle(E, D) )
%   | then if ( title(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.17896781024439265;  // std dev = 7.719, 407.000 (wgt'ed) examples reached here.  /* #neg=73 #pos=334 */
%   | | | else return -0.10069175401715826;  // std dev = 4.109, 282.000 (wgt'ed) examples reached here.  /* #neg=263 #pos=19 */
%   | | else if ( title(H, E), venue(H, B) )
%   | | | then return 0.24163356297544109;  // std dev = 1.793, 14.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=9 */
%   | | | else return 0.04683293962429137;  // std dev = 2.609, 30.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=13 */
%   | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | then if ( title(K, J), venue(K, B) )
%   | | | then return 0.03431746927736063;  // std dev = 3.133, 48.000 (wgt'ed) examples reached here.  /* #neg=34 #pos=14 */
%   | | | else return 0.10276158616485784;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else return -0.09111813255945068;  // std dev = 0.032, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.1527438580936707;  // std dev = 4.21e-08, 63.000 (wgt'ed) examples reached here.  /* #pos=63 */
%   else if ( haswordvenue(A, D), haswordtitle(E, D) )
%   | then if ( title(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.15779230688226895;  // std dev = 7.909, 410.000 (wgt'ed) examples reached here.  /* #neg=78 #pos=332 */
%   | | | else return -0.1103380913719371;  // std dev = 4.019, 294.000 (wgt'ed) examples reached here.  /* #neg=277 #pos=17 */
%   | | else if ( title(H, E), venue(H, B) )
%   | | | then return 0.17289070186412667;  // std dev = 1.860, 17.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=11 */
%   | | | else return 0.04812224112595873;  // std dev = 2.541, 29.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=16 */
%   | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | then return 0.019602868179652257;  // std dev = 0.374, 35.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=15 */
%   | | else return -0.0838688237058877;  // std dev = 0.030, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.13400703000801095;  // std dev = 4.47e-08, 63.000 (wgt'ed) examples reached here.  /* #pos=63 */
%   else if ( haswordvenue(A, D), haswordtitle(E, D) )
%   | then if ( title(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.1247369652370862;  // std dev = 7.910, 410.000 (wgt'ed) examples reached here.  /* #neg=78 #pos=332 */
%   | | | else return -0.09565863538307934;  // std dev = 4.014, 294.000 (wgt'ed) examples reached here.  /* #neg=277 #pos=17 */
%   | | else if ( title(H, E), venue(H, B) )
%   | | | then return 0.13093980452336704;  // std dev = 1.859, 17.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=11 */
%   | | | else return 0.0370723213090317;  // std dev = 2.540, 29.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=16 */
%   | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | then return 0.016184363986457524;  // std dev = 0.374, 35.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=15 */
%   | | else return -0.0776621737317502;  // std dev = 0.028, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */


Results
   AUC ROC   = 0.919226
   AUC PR    = 0.900805
   CLL	      = -0.34397
   Precision = 0.856089 at threshold = 0.5
   Recall    = 0.931727
   F1        = 0.892308


Total learning time: 2549.519 seconds
Total inference time: 14.12 seconds
AUC ROC: 0.919226


Results scoring model
   AUC ROC   = 0.892995
   AUC PR    = 0.884508
   CLL	      = -0.393744
   Precision = 0.840909 at threshold = 0.5
   Recall    = 0.896476
   F1        = 0.867804


Total scoring time: 32.277 seconds
Refined model CLL: -0.393744


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.919226
   AUC PR    = 0.900805
   CLL	      = -0.34397
   Precision = 0.856089 at threshold = 0.5
   Recall    = 0.931727
   F1        = 0.892308


Total learning time: 2593.3869999999997 seconds
Total inference time: 14.12 seconds
AUC ROC: 0.919226
Total revision time: 2593.3869999999997
Best scored revision CLL: -0.393744


Dataset: 3_imdb_cora, Fold: 4, Type: Transfer (trRDN-B), Time: 08:04:04
{'AUC ROC': 0.919226, 'AUC PR': 0.900805, 'CLL': -0.34397, 'Precision': [0.856089, 0.5], 'Recall': 0.931727, 'F1': 0.892308, 'Learning time': 2593.3869999999997, 'Inference time': 14.12, 'parameter_0.2': {'AUC ROC': 0.576975, 'AUC PR': 0.639704, 'CLL': -0.646435, 'Precision': [1.0, 0.5], 'Recall': 0.153949, 'F1': 0.266821, 'Learning time': 7.296, 'Inference time': 3.512}}


Amount of data: 0.4
******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- actor(A), director(B).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- actor(A), director(B).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- actor(A), director(B).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- director(B), actor(A).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.8581489350995102;  // std dev = 8.00e-07, 135.000 (wgt'ed) examples reached here.  /* #pos=135 */
%   else return 0.3505056229975965;  // std dev = 19.809, 1,570.000 (wgt'ed) examples reached here.  /* #neg=797 #pos=773 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.7194734122109557;  // std dev = 0.000, 135.000 (wgt'ed) examples reached here.  /* #pos=135 */
%   else return 0.3022772938152086;  // std dev = 19.809, 1,570.000 (wgt'ed) examples reached here.  /* #neg=797 #pos=773 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.5553664367462834;  // std dev = 4.92e-07, 135.000 (wgt'ed) examples reached here.  /* #pos=135 */
%   else return 0.25135892668824805;  // std dev = 19.809, 1,570.000 (wgt'ed) examples reached here.  /* #neg=797 #pos=773 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.4175135841583091;  // std dev = 4.00e-07, 135.000 (wgt'ed) examples reached here.  /* #pos=135 */
%   else return 0.20245429731253106;  // std dev = 19.809, 1,570.000 (wgt'ed) examples reached here.  /* #neg=797 #pos=773 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.32071184716015005;  // std dev = 2.15e-07, 135.000 (wgt'ed) examples reached here.  /* #pos=135 */
%   else return 0.15908039181918093;  // std dev = 19.809, 1,570.000 (wgt'ed) examples reached here.  /* #neg=797 #pos=773 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.2551722425694896;  // std dev = 1.33e-07, 135.000 (wgt'ed) examples reached here.  /* #pos=135 */
%   else return 0.12284761422782096;  // std dev = 19.809, 1,570.000 (wgt'ed) examples reached here.  /* #neg=797 #pos=773 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.20975771563253529;  // std dev = 2.21e-07, 135.000 (wgt'ed) examples reached here.  /* #pos=135 */
%   else return 0.09379839579110227;  // std dev = 19.809, 1,570.000 (wgt'ed) examples reached here.  /* #neg=797 #pos=773 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.17709649774527816;  // std dev = 0.000, 135.000 (wgt'ed) examples reached here.  /* #pos=135 */
%   else return 0.0711148145598831;  // std dev = 19.809, 1,570.000 (wgt'ed) examples reached here.  /* #neg=797 #pos=773 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.15274385809367144;  // std dev = 0.000, 135.000 (wgt'ed) examples reached here.  /* #pos=135 */
%   else return 0.05368695799392741;  // std dev = 19.809, 1,570.000 (wgt'ed) examples reached here.  /* #neg=797 #pos=773 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.13400703000801104;  // std dev = 5.58e-08, 135.000 (wgt'ed) examples reached here.  /* #pos=135 */
%   else return 0.04042668030897637;  // std dev = 19.809, 1,570.000 (wgt'ed) examples reached here.  /* #neg=797 #pos=773 */


Results
   AUC ROC   = 0.576975
   AUC PR    = 0.639704
   CLL	      = -0.646374
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.153949
   F1        = 0.266821


Total learning time: 10.252 seconds
Total inference time: 3.507 seconds
AUC ROC: 0.576975


Results scoring model
   AUC ROC   = 0.574339
   AUC PR    = 0.662075
   CLL	      = -0.649914
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.148678
   F1        = 0.258869


Total scoring time: 4.923 seconds
Parameter learned model CLL: -0.649914


Structure after Parameter Learning
[['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [8e-07, 0, 135], 'false': [19.809, 797, 773]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 135], 'false': [19.809, 797, 773]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [4.92e-07, 0, 135], 'false': [19.809, 797, 773]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [4e-07, 0, 135], 'false': [19.809, 797, 773]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [2.15e-07, 0, 135], 'false': [19.809, 797, 773]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [1.33e-07, 0, 135], 'false': [19.809, 797, 773]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [2.21e-07, 0, 135], 'false': [19.809, 797, 773]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 135], 'false': [19.809, 797, 773]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 135], 'false': [19.809, 797, 773]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [5.58e-08, 0, 135], 'false': [19.809, 797, 773]}]]
[{'': [4.736951571734001e-15, 0.24994157978013565]}, {'': [-2.0000462191765784e-15, 0.24994157978013243]}, {'': [1.7895150382106225e-15, 0.24994157978011367]}, {'': [1.1842378929335002e-15, 0.24994157978010348]}, {'': [3.4211316906967787e-16, 0.24994157978011214]}, {'': [1.3158198810372225e-16, 0.24994157978010592]}, {'': [3.618504672852362e-16, 0.24994157978012393]}, {'': [-2.8290127442300287e-16, 0.2499415797801054]}, {'': [-4.2764146133709734e-17, 0.2499415797801208]}, {'': [2.3026847918151394e-17, 0.24994157978011858]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
1;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
2;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
3;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
4;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
5;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
6;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
7;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
8;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
9;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.8581489350995102;  // std dev = 8.00e-07, 135.000 (wgt'ed) examples reached here.  /* #pos=135 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then if ( title(F, E), venue(F, A) )
%   | | | then return 0.36830518509950744;  // std dev = 17.885, 1,280.000 (wgt'ed) examples reached here.  /* #neg=627 #pos=653 */
%   | | | else return 0.4831489350995122;  // std dev = 3.873, 64.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=40 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.5248156017661789;  // std dev = 1.826, 15.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=10 */
%   | | | else return 0.40814893509951233;  // std dev = 2.225, 20.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=11 */
%   | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | then if ( haswordtitle(J, K), haswordauthor(L, K) )
%   | | | then return 0.136995088945665;  // std dev = 4.573, 104.000 (wgt'ed) examples reached here.  /* #neg=75 #pos=29 */
%   | | | else return 0.4692600462106234;  // std dev = 2.068, 18.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=11 */
%   | | else if ( haswordvenue(B, M), haswordtitle(N, M) )
%   | | | then return 0.16962434493557788;  // std dev = 3.617, 61.000 (wgt'ed) examples reached here.  /* #neg=42 #pos=19 */
%   | | | else return -0.1418510649004878;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.7194734122109557;  // std dev = 0.000, 135.000 (wgt'ed) examples reached here.  /* #pos=135 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then if ( title(F, E), venue(F, A) )
%   | | | then return 0.31732150021198985;  // std dev = 17.885, 1,280.000 (wgt'ed) examples reached here.  /* #neg=627 #pos=653 */
%   | | | else return 0.4136573287083115;  // std dev = 3.873, 64.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=40 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.448295606241962;  // std dev = 1.826, 15.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=10 */
%   | | | else return 0.3508875906974797;  // std dev = 2.225, 20.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=11 */
%   | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | then if ( haswordtitle(J, K), haswordauthor(L, K) )
%   | | | then return 0.11948711817217852;  // std dev = 4.573, 104.000 (wgt'ed) examples reached here.  /* #neg=75 #pos=29 */
%   | | | else return 0.40207411659007225;  // std dev = 2.068, 18.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=11 */
%   | | else if ( haswordvenue(B, M), haswordtitle(N, M) )
%   | | | then return 0.14769650309172838;  // std dev = 3.617, 61.000 (wgt'ed) examples reached here.  /* #neg=42 #pos=19 */
%   | | | else return -0.12544463852839138;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.5553664367462834;  // std dev = 4.92e-07, 135.000 (wgt'ed) examples reached here.  /* #pos=135 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then if ( title(F, E), venue(F, A) )
%   | | | then return 0.26309978316979243;  // std dev = 17.885, 1,280.000 (wgt'ed) examples reached here.  /* #neg=627 #pos=653 */
%   | | | else return 0.33660537396486784;  // std dev = 3.873, 64.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=40 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.36236334632262296;  // std dev = 1.826, 15.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=10 */
%   | | | else return 0.28903586629606187;  // std dev = 2.225, 20.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=11 */
%   | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | then if ( haswordtitle(J, K), haswordauthor(L, K) )
%   | | | then return 0.10282168086997931;  // std dev = 4.573, 104.000 (wgt'ed) examples reached here.  /* #neg=75 #pos=29 */
%   | | | else return 0.32791564552282043;  // std dev = 2.068, 18.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=11 */
%   | | else if ( haswordvenue(B, M), haswordtitle(N, M) )
%   | | | then return 0.1264523196132629;  // std dev = 3.617, 61.000 (wgt'ed) examples reached here.  /* #neg=42 #pos=19 */
%   | | | else return -0.11231637819360639;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.4175135841583091;  // std dev = 4.00e-07, 135.000 (wgt'ed) examples reached here.  /* #pos=135 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then if ( title(F, E), venue(F, A) )
%   | | | then return 0.21099047651674713;  // std dev = 17.885, 1,280.000 (wgt'ed) examples reached here.  /* #neg=627 #pos=653 */
%   | | | else return 0.26297558544868954;  // std dev = 3.873, 64.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=40 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.2807538536965852;  // std dev = 1.826, 15.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=10 */
%   | | | else return 0.2295985701405742;  // std dev = 2.225, 20.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=11 */
%   | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | then if ( haswordtitle(J, K), haswordauthor(L, K) )
%   | | | then return 0.08740857907167471;  // std dev = 4.573, 104.000 (wgt'ed) examples reached here.  /* #neg=75 #pos=29 */
%   | | | else return 0.2569390306095517;  // std dev = 2.068, 18.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=11 */
%   | | else if ( haswordvenue(B, M), haswordtitle(N, M) )
%   | | | then return 0.10662118456927451;  // std dev = 3.617, 61.000 (wgt'ed) examples reached here.  /* #neg=42 #pos=19 */
%   | | | else return -0.10159632948783627;  // std dev = 3.73e-09, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.32071184716015005;  // std dev = 2.15e-07, 135.000 (wgt'ed) examples reached here.  /* #pos=135 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then if ( title(F, E), venue(F, A) )
%   | | | then return 0.16497369277320734;  // std dev = 17.885, 1,280.000 (wgt'ed) examples reached here.  /* #neg=627 #pos=653 */
%   | | | else return 0.20032545170291177;  // std dev = 3.873, 64.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=40 */
%   | | else if ( haswordvenue(B, G), haswordauthor(H, G) )
%   | | | then return 0.2943588784317214;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.18306181619625;  // std dev = 2.756, 32.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=19 */
%   | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | then if ( title(K, J), venue(K, A) )
%   | | | then return 0.11540676975709215;  // std dev = 4.313, 86.000 (wgt'ed) examples reached here.  /* #neg=54 #pos=32 */
%   | | | else return -0.07270753701607853;  // std dev = 1.901, 27.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=4 */
%   | | else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | | | then return 0.12323800847793517;  // std dev = 3.930, 70.000 (wgt'ed) examples reached here.  /* #neg=47 #pos=23 */
%   | | | else return -0.09269127618926097;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.2551722425694896;  // std dev = 1.33e-07, 135.000 (wgt'ed) examples reached here.  /* #pos=135 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then if ( title(F, E), venue(F, B) )
%   | | | then return 0.12968876645149105;  // std dev = 17.879, 1,282.000 (wgt'ed) examples reached here.  /* #neg=622 #pos=660 */
%   | | | else return 0.09175594801408016;  // std dev = 3.892, 62.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=33 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.16684411060331747;  // std dev = 1.826, 15.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=10 */
%   | | | else return 0.12992268294663326;  // std dev = 2.221, 20.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=11 */
%   | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | then if ( title(K, J), venue(K, A) )
%   | | | then return 0.0934861720212491;  // std dev = 4.308, 86.000 (wgt'ed) examples reached here.  /* #neg=54 #pos=32 */
%   | | | else return -0.06065877164322722;  // std dev = 1.899, 27.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=4 */
%   | | else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | | | then return 0.10239867066258519;  // std dev = 3.930, 70.000 (wgt'ed) examples reached here.  /* #neg=47 #pos=23 */
%   | | | else return -0.08518475138839687;  // std dev = 3.73e-09, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.20975771563253529;  // std dev = 2.21e-07, 135.000 (wgt'ed) examples reached here.  /* #pos=135 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordauthor(E, D) )
%   | | then return 0.25222185016416493;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( haswordtitle(F, D) )
%   | | | then return 0.09687726850293654;  // std dev = 18.279, 1,341.000 (wgt'ed) examples reached here.  /* #neg=650 #pos=691 */
%   | | | else return 0.10966803258845645;  // std dev = 2.876, 35.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=21 */
%   | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | then if ( haswordtitle(H, I), haswordauthor(J, I) )
%   | | | then return 0.04898188043213879;  // std dev = 4.541, 104.000 (wgt'ed) examples reached here.  /* #neg=75 #pos=29 */
%   | | | else return 0.15405655764084558;  // std dev = 2.021, 18.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=11 */
%   | | else if ( haswordvenue(B, K), haswordauthor(L, K) )
%   | | | then return 0.2118817979747633;  // std dev = 0.974, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | | else return 0.02169710091837663;  // std dev = 3.476, 64.000 (wgt'ed) examples reached here.  /* #neg=47 #pos=17 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.17709649774527816;  // std dev = 0.000, 135.000 (wgt'ed) examples reached here.  /* #pos=135 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then if ( haswordtitle(G, E) )
%   | | | then return 0.2896722098847619;  // std dev = 2.253, 26.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=19 */
%   | | | else return -0.10491248951560261;  // std dev = 2.411, 26.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=9 */
%   | | else return 0.07292429170948594;  // std dev = 0.499, 1,327.000 (wgt'ed) examples reached here.  /* #neg=641 #pos=686 */
%   | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | then if ( haswordauthor(J, H) )
%   | | | then return 0.38053831629384954;  // std dev = 0.773, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.023586878375315947;  // std dev = 4.616, 110.000 (wgt'ed) examples reached here.  /* #neg=76 #pos=34 */
%   | | else if ( haswordvenue(B, K), haswordauthor(L, K) )
%   | | | then return -0.037941288618218404;  // std dev = 1.766, 20.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=4 */
%   | | | else return 0.09176534614506175;  // std dev = 3.501, 58.000 (wgt'ed) examples reached here.  /* #neg=39 #pos=19 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.15274385809367144;  // std dev = 0.000, 135.000 (wgt'ed) examples reached here.  /* #pos=135 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then if ( title(F, E), venue(F, B) )
%   | | | then return 0.056450684981551764;  // std dev = 17.853, 1,282.000 (wgt'ed) examples reached here.  /* #neg=622 #pos=660 */
%   | | | else return 0.0271692524225228;  // std dev = 3.892, 62.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=33 */
%   | | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | | then return 0.08618065535061664;  // std dev = 2.015, 17.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=10 */
%   | | | else return 0.051237694735026915;  // std dev = 2.054, 18.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=11 */
%   | else if ( haswordvenue(A, I), haswordauthor(J, I) )
%   | | then if ( haswordauthor(J, K), haswordtitle(L, K) )
%   | | | then return 0.36432636604999685;  // std dev = 1.550, 11.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=7 */
%   | | | else return -0.234716493385213;  // std dev = 0.231, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | else if ( haswordvenue(A, M), haswordtitle(N, M) )
%   | | | then return 0.04608704493451423;  // std dev = 4.886, 117.000 (wgt'ed) examples reached here.  /* #neg=78 #pos=39 */
%   | | | else return -0.002039633279886485;  // std dev = 3.040, 52.000 (wgt'ed) examples reached here.  /* #neg=39 #pos=13 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.13400703000801104;  // std dev = 5.58e-08, 135.000 (wgt'ed) examples reached here.  /* #pos=135 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordtitle(F, D) )
%   | | then if ( author(G, E), venue(G, A) )
%   | | | then return -0.47019329643957775;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | | else return 0.27122158216170916;  // std dev = 2.230, 27.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=20 */
%   | | else if ( haswordauthor(E, H), haswordtitle(I, H) )
%   | | | then return 0.06472237321514362;  // std dev = 2.314, 23.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=10 */
%   | | | else return -0.26970228311937894;  // std dev = 1.303, 21.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=2 */
%   | else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | | then if ( title(L, K), venue(L, A) )
%   | | | then return 0.04042618481284832;  // std dev = 18.066, 1,324.000 (wgt'ed) examples reached here.  /* #neg=664 #pos=660 */
%   | | | else return 0.08428657651449614;  // std dev = 4.490, 89.000 (wgt'ed) examples reached here.  /* #neg=35 #pos=54 */
%   | | else if ( haswordvenue(B, M), haswordtitle(N, M) )
%   | | | then return 0.02549984280758424;  // std dev = 3.826, 72.000 (wgt'ed) examples reached here.  /* #neg=46 #pos=26 */
%   | | | else return -0.10709063064528605;  // std dev = 0.860, 9.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=1 */


Results
   AUC ROC   = 0.6131
   AUC PR    = 0.668331
   CLL	      = -0.640701
   Precision = 0.830097 at threshold = 0.5
   Recall    = 0.228916
   F1        = 0.358867


Total learning time: 707.228 seconds
Total inference time: 9.101 seconds
AUC ROC: 0.6131


Results scoring model
   AUC ROC   = 0.650686
   AUC PR    = 0.713671
   CLL	      = -0.630383
   Precision = 0.820339 at threshold = 0.5
   Recall    = 0.26652
   F1        = 0.402328


Total scoring time: 24.521 seconds
Refined model CLL: -0.630383


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.6131
   AUC PR    = 0.668331
   CLL	      = -0.640701
   Precision = 0.830097 at threshold = 0.5
   Recall    = 0.228916
   F1        = 0.358867


Total learning time: 746.9239999999999 seconds
Total inference time: 9.101 seconds
AUC ROC: 0.6131
Total revision time: 746.9239999999999
Best scored revision CLL: -0.630383


Dataset: 3_imdb_cora, Fold: 4, Type: Transfer (trRDN-B), Time: 08:16:45
{'AUC ROC': 0.6131, 'AUC PR': 0.668331, 'CLL': -0.640701, 'Precision': [0.830097, 0.5], 'Recall': 0.228916, 'F1': 0.358867, 'Learning time': 746.9239999999999, 'Inference time': 9.101, 'parameter_0.4': {'AUC ROC': 0.576975, 'AUC PR': 0.639704, 'CLL': -0.646374, 'Precision': [1.0, 0.5], 'Recall': 0.153949, 'F1': 0.266821, 'Learning time': 10.252, 'Inference time': 3.507}}


Amount of data: 0.6
******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- actor(A), director(B).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- actor(A), director(B).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- actor(A), director(B).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- director(B), actor(A).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.8581489350995091;  // std dev = 1.08e-06, 216.000 (wgt'ed) examples reached here.  /* #pos=216 */
%   else return 0.3476833221136038;  // std dev = 24.187, 2,341.000 (wgt'ed) examples reached here.  /* #neg=1,195 #pos=1,146 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.7194734122109572;  // std dev = 0.000, 216.000 (wgt'ed) examples reached here.  /* #pos=216 */
%   else return 0.2998891039449742;  // std dev = 24.187, 2,341.000 (wgt'ed) examples reached here.  /* #neg=1,195 #pos=1,146 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.5553664367462832;  // std dev = 6.08e-07, 216.000 (wgt'ed) examples reached here.  /* #pos=216 */
%   else return 0.2494884308782226;  // std dev = 24.187, 2,341.000 (wgt'ed) examples reached here.  /* #neg=1,195 #pos=1,146 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.41751358415831036;  // std dev = 1.46e-07, 216.000 (wgt'ed) examples reached here.  /* #pos=216 */
%   else return 0.2010875097564119;  // std dev = 24.187, 2,341.000 (wgt'ed) examples reached here.  /* #neg=1,195 #pos=1,146 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.3207118471601494;  // std dev = 3.63e-07, 216.000 (wgt'ed) examples reached here.  /* #pos=216 */
%   else return 0.15813256219718771;  // std dev = 24.187, 2,341.000 (wgt'ed) examples reached here.  /* #neg=1,195 #pos=1,146 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.2551722425694883;  // std dev = 2.70e-07, 216.000 (wgt'ed) examples reached here.  /* #pos=216 */
%   else return 0.12221153057413775;  // std dev = 24.187, 2,341.000 (wgt'ed) examples reached here.  /* #neg=1,195 #pos=1,146 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.20975771563253495;  // std dev = 3.01e-07, 216.000 (wgt'ed) examples reached here.  /* #pos=216 */
%   else return 0.09337832175120554;  // std dev = 24.187, 2,341.000 (wgt'ed) examples reached here.  /* #neg=1,195 #pos=1,146 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.17709649774527772;  // std dev = 0.000, 216.000 (wgt'ed) examples reached here.  /* #pos=216 */
%   else return 0.07083850446715623;  // std dev = 24.187, 2,341.000 (wgt'ed) examples reached here.  /* #neg=1,195 #pos=1,146 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.1527438580936717;  // std dev = 0.000, 216.000 (wgt'ed) examples reached here.  /* #pos=216 */
%   else return 0.053504560144148484;  // std dev = 24.187, 2,341.000 (wgt'ed) examples reached here.  /* #neg=1,195 #pos=1,146 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.13400703000801098;  // std dev = 1.43e-07, 216.000 (wgt'ed) examples reached here.  /* #pos=216 */
%   else return 0.04030534232748301;  // std dev = 24.187, 2,341.000 (wgt'ed) examples reached here.  /* #neg=1,195 #pos=1,146 */


Results
   AUC ROC   = 0.576975
   AUC PR    = 0.639704
   CLL	      = -0.646351
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.153949
   F1        = 0.266821


Total learning time: 11.504 seconds
Total inference time: 3.643 seconds
AUC ROC: 0.576975


Results scoring model
   AUC ROC   = 0.579295
   AUC PR    = 0.668428
   CLL	      = -0.646805
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.15859
   F1        = 0.273764


Total scoring time: 5.969 seconds
Parameter learned model CLL: -0.646805


Structure after Parameter Learning
[['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [1.08e-06, 0, 216], 'false': [24.187, 1, 1]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 216], 'false': [24.187, 1, 1]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [6.08e-07, 0, 216], 'false': [24.187, 1, 1]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [1.46e-07, 0, 216], 'false': [24.187, 1, 1]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [3.63e-07, 0, 216], 'false': [24.187, 1, 1]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [2.7e-07, 0, 216], 'false': [24.187, 1, 1]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [3.01e-07, 0, 216], 'false': [24.187, 1, 1]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 216], 'false': [24.187, 1, 1]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 216], 'false': [24.187, 1, 1]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [1.43e-07, 0, 216], 'false': [24.187, 1, 1]}]]
[{'': [5.394861512252613e-15, 0.24989047094485384]}, {'': [-3.947459643111668e-15, 0.2498904709448316]}, {'': [1.7105658453483892e-15, 0.2498904709447948]}, {'': [9.868649107779169e-17, 0.24989047094482073]}, {'': [6.085666949797155e-16, 0.2498904709448053]}, {'': [3.371788445157883e-16, 0.24989047094483297]}, {'': [4.194175870806147e-16, 0.24989047094483544]}, {'': [-2.4671622769447922e-17, 0.2498904709448249]}, {'': [-1.398058623602049e-16, 0.2498904709448381]}, {'': [9.457455394955037e-17, 0.2498904709448178]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
1;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
2;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
3;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
4;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
5;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
6;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
7;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
8;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
9;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.8581489350995091;  // std dev = 1.08e-06, 216.000 (wgt'ed) examples reached here.  /* #pos=216 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.37597990725387953;  // std dev = 0.500, 2,047.000 (wgt'ed) examples reached here.  /* #neg=987 #pos=1,060 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then if ( title(G, F), venue(G, A) )
%   | | | then return 0.20889520375622908;  // std dev = 5.524, 134.000 (wgt'ed) examples reached here.  /* #neg=87 #pos=47 */
%   | | | else return 0.09070707463439608;  // std dev = 2.770, 43.000 (wgt'ed) examples reached here.  /* #neg=33 #pos=10 */
%   | | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | | then return 0.136995088945665;  // std dev = 4.573, 104.000 (wgt'ed) examples reached here.  /* #neg=75 #pos=29 */
%   | | | else return -0.1418510649004878;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.7194734122109572;  // std dev = 0.000, 216.000 (wgt'ed) examples reached here.  /* #pos=216 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.3237988387865443;  // std dev = 0.500, 2,047.000 (wgt'ed) examples reached here.  /* #neg=987 #pos=1,060 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then if ( title(G, F), venue(G, A) )
%   | | | then return 0.1815177520416666;  // std dev = 5.524, 134.000 (wgt'ed) examples reached here.  /* #neg=87 #pos=47 */
%   | | | else return 0.07930269045009507;  // std dev = 2.770, 43.000 (wgt'ed) examples reached here.  /* #neg=33 #pos=10 */
%   | | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | | then return 0.11948711817217852;  // std dev = 4.573, 104.000 (wgt'ed) examples reached here.  /* #neg=75 #pos=29 */
%   | | | else return -0.12544463852839138;  // std dev = 7.45e-09, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.5553664367462832;  // std dev = 6.08e-07, 216.000 (wgt'ed) examples reached here.  /* #pos=216 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.2681325317817312;  // std dev = 0.500, 2,047.000 (wgt'ed) examples reached here.  /* #neg=987 #pos=1,060 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then if ( title(G, F), venue(G, A) )
%   | | | then return 0.1544470701502763;  // std dev = 5.524, 134.000 (wgt'ed) examples reached here.  /* #neg=87 #pos=47 */
%   | | | else return 0.06872644058846303;  // std dev = 2.770, 43.000 (wgt'ed) examples reached here.  /* #neg=33 #pos=10 */
%   | | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | | then return 0.10282168086997931;  // std dev = 4.573, 104.000 (wgt'ed) examples reached here.  /* #neg=75 #pos=29 */
%   | | | else return -0.11231637819360636;  // std dev = 1.05e-08, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.41751358415831036;  // std dev = 1.46e-07, 216.000 (wgt'ed) examples reached here.  /* #pos=216 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.21462737007903626;  // std dev = 0.500, 2,047.000 (wgt'ed) examples reached here.  /* #neg=987 #pos=1,060 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordauthor(H, G) )
%   | | | then return 0.06724447028834515;  // std dev = 5.458, 156.000 (wgt'ed) examples reached here.  /* #neg=116 #pos=40 */
%   | | | else return 0.43456628413365433;  // std dev = 2.257, 23.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=15 */
%   | | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | | then return 0.08258389870076191;  // std dev = 4.653, 102.000 (wgt'ed) examples reached here.  /* #neg=71 #pos=31 */
%   | | | else return -0.1015963294878363;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.3207118471601494;  // std dev = 3.63e-07, 216.000 (wgt'ed) examples reached here.  /* #pos=216 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.1674719249402013;  // std dev = 0.500, 2,047.000 (wgt'ed) examples reached here.  /* #neg=987 #pos=1,060 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordauthor(H, G) )
%   | | | then return 0.056724862482003896;  // std dev = 5.458, 156.000 (wgt'ed) examples reached here.  /* #neg=116 #pos=40 */
%   | | | else return 0.35182513250419484;  // std dev = 2.251, 23.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=15 */
%   | | else if ( haswordvenue(A, I), haswordauthor(J, I) )
%   | | | then return 0.13698763029733085;  // std dev = 2.600, 31.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=11 */
%   | | | else return 0.017702969729418126;  // std dev = 3.856, 84.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=20 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.2551722425694883;  // std dev = 2.70e-07, 216.000 (wgt'ed) examples reached here.  /* #pos=216 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then if ( haswordtitle(G, E) )
%   | | | then return 0.34234403723167955;  // std dev = 2.837, 41.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=30 */
%   | | | else return -0.038011928490140096;  // std dev = 2.904, 37.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=13 */
%   | | else return 0.12714256068667487;  // std dev = 0.500, 1,969.000 (wgt'ed) examples reached here.  /* #neg=952 #pos=1,017 */
%   | else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | then if ( haswordauthor(I, J), haswordtitle(K, J) )
%   | | | then return 0.12688271828969733;  // std dev = 2.268, 24.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=8 */
%   | | | else return -0.1371308595390375;  // std dev = 0.974, 17.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=1 */
%   | | else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | | | then return 0.08595311267819711;  // std dev = 5.517, 150.000 (wgt'ed) examples reached here.  /* #neg=102 #pos=48 */
%   | | | else return 0.046902645294679114;  // std dev = 4.512, 103.000 (wgt'ed) examples reached here.  /* #neg=74 #pos=29 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.20975771563253495;  // std dev = 3.01e-07, 216.000 (wgt'ed) examples reached here.  /* #pos=216 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then if ( haswordtitle(G, E) )
%   | | | then return 0.2072962742452542;  // std dev = 3.143, 43.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=27 */
%   | | | else return -0.09495229972258186;  // std dev = 2.859, 37.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=12 */
%   | | else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | | | then return 0.1333748737133144;  // std dev = 4.049, 71.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=40 */
%   | | | else return 0.09742296150321576;  // std dev = 21.758, 1,896.000 (wgt'ed) examples reached here.  /* #neg=915 #pos=981 */
%   | else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | | then if ( haswordtitle(K, L), haswordauthor(M, L) )
%   | | | then return 0.03499076269525809;  // std dev = 5.444, 156.000 (wgt'ed) examples reached here.  /* #neg=116 #pos=40 */
%   | | | else return 0.2529105716637739;  // std dev = 2.245, 23.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=15 */
%   | | else if ( haswordvenue(B, N), haswordtitle(P, N) )
%   | | | then return 0.05016507218173372;  // std dev = 4.634, 102.000 (wgt'ed) examples reached here.  /* #neg=71 #pos=31 */
%   | | | else return -0.09981235474055353;  // std dev = 0.034, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.17709649774527772;  // std dev = 0.000, 216.000 (wgt'ed) examples reached here.  /* #pos=216 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.07357167755981452;  // std dev = 0.499, 2,047.000 (wgt'ed) examples reached here.  /* #neg=987 #pos=1,060 */
%   | else if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then if ( haswordauthor(F, G), haswordtitle(H, G) )
%   | | | then return 0.10056074605931382;  // std dev = 2.260, 24.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=8 */
%   | | | else return -0.12023566329400864;  // std dev = 0.974, 17.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=1 */
%   | | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | | then return 0.05591821720852312;  // std dev = 5.474, 150.000 (wgt'ed) examples reached here.  /* #neg=102 #pos=48 */
%   | | | else return 0.030093203458001445;  // std dev = 4.507, 103.000 (wgt'ed) examples reached here.  /* #neg=74 #pos=29 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.1527438580936717;  // std dev = 0.000, 216.000 (wgt'ed) examples reached here.  /* #pos=216 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.05535216697675732;  // std dev = 0.499, 2,047.000 (wgt'ed) examples reached here.  /* #neg=987 #pos=1,060 */
%   | else if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then if ( haswordauthor(F, G), haswordtitle(H, G) )
%   | | | then return 0.25688777714494365;  // std dev = 2.199, 21.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=11 */
%   | | | else return -0.1885041370294191;  // std dev = 0.972, 16.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=1 */
%   | | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | | then return 0.04437500604802244;  // std dev = 5.845, 173.000 (wgt'ed) examples reached here.  /* #neg=119 #pos=54 */
%   | | | else return -0.006178035257987623;  // std dev = 3.843, 84.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=20 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.13400703000801098;  // std dev = 1.43e-07, 216.000 (wgt'ed) examples reached here.  /* #pos=216 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordtitle(F, D) )
%   | | then if ( author(G, E), title(G, F) )
%   | | | then return 0.177024671945861;  // std dev = 2.871, 38.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=25 */
%   | | | else return -0.1133520435818427;  // std dev = 1.482, 11.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=4 */
%   | | else if ( haswordauthor(E, H), haswordtitle(I, H) )
%   | | | then return 0.06869509435271147;  // std dev = 2.813, 35.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=14 */
%   | | | else return -0.17413556935746144;  // std dev = 2.086, 37.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=5 */
%   | else if ( haswordvenue(A, J), haswordvenue(B, J) )
%   | | then return 0.04249794739621416;  // std dev = 0.499, 1,967.000 (wgt'ed) examples reached here.  /* #neg=946 #pos=1,021 */
%   | | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | | then return 0.03619161532332505;  // std dev = 5.475, 150.000 (wgt'ed) examples reached here.  /* #neg=102 #pos=48 */
%   | | | else return 0.02169426022119599;  // std dev = 4.436, 103.000 (wgt'ed) examples reached here.  /* #neg=74 #pos=29 */


Results
   AUC ROC   = 0.597584
   AUC PR    = 0.65194
   CLL	      = -0.641778
   Precision = 0.933824 at threshold = 0.5
   Recall    = 0.170013
   F1        = 0.287656


Total learning time: 265.024 seconds
Total inference time: 4.982 seconds
AUC ROC: 0.597584


Results scoring model
   AUC ROC   = 0.645276
   AUC PR    = 0.710235
   CLL	      = -0.628931
   Precision = 0.913183 at threshold = 0.5
   Recall    = 0.208517
   F1        = 0.33951


Total scoring time: 9.084 seconds
Refined model CLL: -0.628931


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.597584
   AUC PR    = 0.65194
   CLL	      = -0.641778
   Precision = 0.933824 at threshold = 0.5
   Recall    = 0.170013
   F1        = 0.287656


Total learning time: 291.581 seconds
Total inference time: 4.982 seconds
AUC ROC: 0.597584
Total revision time: 291.581
Best scored revision CLL: -0.628931


Dataset: 3_imdb_cora, Fold: 4, Type: Transfer (trRDN-B), Time: 08:21:47
{'AUC ROC': 0.597584, 'AUC PR': 0.65194, 'CLL': -0.641778, 'Precision': [0.933824, 0.5], 'Recall': 0.170013, 'F1': 0.287656, 'Learning time': 291.581, 'Inference time': 4.982, 'parameter_0.6': {'AUC ROC': 0.576975, 'AUC PR': 0.639704, 'CLL': -0.646351, 'Precision': [1.0, 0.5], 'Recall': 0.153949, 'F1': 0.266821, 'Learning time': 11.504, 'Inference time': 3.643}}


Amount of data: 0.8
******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- actor(A), director(B).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- actor(A), director(B).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- actor(A), director(B).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- director(B), actor(A).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.8581489350995085;  // std dev = 1.07e-06, 295.000 (wgt'ed) examples reached here.  /* #pos=295 */
%   else return 0.3464314391123483;  // std dev = 27.898, 3,115.000 (wgt'ed) examples reached here.  /* #neg=1,594 #pos=1,521 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.7194734122109577;  // std dev = 0.000, 295.000 (wgt'ed) examples reached here.  /* #pos=295 */
%   else return 0.29882953551572483;  // std dev = 27.898, 3,115.000 (wgt'ed) examples reached here.  /* #neg=1,594 #pos=1,521 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.5553664367462832;  // std dev = 0.000, 295.000 (wgt'ed) examples reached here.  /* #pos=295 */
%   else return 0.2486579584491273;  // std dev = 27.898, 3,115.000 (wgt'ed) examples reached here.  /* #neg=1,594 #pos=1,521 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.4175135841583114;  // std dev = 0.000, 295.000 (wgt'ed) examples reached here.  /* #pos=295 */
%   else return 0.2004800629093091;  // std dev = 27.898, 3,115.000 (wgt'ed) examples reached here.  /* #neg=1,594 #pos=1,521 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.3207118471601508;  // std dev = 0.000, 295.000 (wgt'ed) examples reached here.  /* #pos=295 */
%   else return 0.15771091892004271;  // std dev = 27.898, 3,115.000 (wgt'ed) examples reached here.  /* #neg=1,594 #pos=1,521 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.2551722425694877;  // std dev = 3.53e-07, 295.000 (wgt'ed) examples reached here.  /* #pos=295 */
%   else return 0.12192844024090875;  // std dev = 27.898, 3,115.000 (wgt'ed) examples reached here.  /* #neg=1,594 #pos=1,521 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.20975771563253476;  // std dev = 2.83e-07, 295.000 (wgt'ed) examples reached here.  /* #pos=295 */
%   else return 0.09319143935838398;  // std dev = 27.898, 3,115.000 (wgt'ed) examples reached here.  /* #neg=1,594 #pos=1,521 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.17709649774527694;  // std dev = 1.69e-07, 295.000 (wgt'ed) examples reached here.  /* #pos=295 */
%   else return 0.07071576146613413;  // std dev = 27.898, 3,115.000 (wgt'ed) examples reached here.  /* #neg=1,594 #pos=1,521 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.1527438580936716;  // std dev = 0.000, 295.000 (wgt'ed) examples reached here.  /* #pos=295 */
%   else return 0.0534237564313058;  // std dev = 27.898, 3,115.000 (wgt'ed) examples reached here.  /* #neg=1,594 #pos=1,521 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.13400703000801156;  // std dev = 0.000, 295.000 (wgt'ed) examples reached here.  /* #pos=295 */
%   else return 0.04025180788581259;  // std dev = 27.898, 3,115.000 (wgt'ed) examples reached here.  /* #neg=1,594 #pos=1,521 */


Results
   AUC ROC   = 0.576975
   AUC PR    = 0.639704
   CLL	      = -0.64635
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.153949
   F1        = 0.266821


Total learning time: 14.371 seconds
Total inference time: 3.494 seconds
AUC ROC: 0.576975


Results scoring model
   AUC ROC   = 0.581222
   AUC PR    = 0.67075
   CLL	      = -0.645595
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.162445
   F1        = 0.279488


Total scoring time: 6.416 seconds
Parameter learned model CLL: -0.645595


Structure after Parameter Learning
[['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [1.07e-06, 0, 295], 'false': [27.898, 1, 1]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 295], 'false': [27.898, 1, 1]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 295], 'false': [27.898, 1, 1]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 295], 'false': [27.898, 1, 1]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 295], 'false': [27.898, 1, 1]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [3.53e-07, 0, 295], 'false': [27.898, 1, 1]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [2.83e-07, 0, 295], 'false': [27.898, 1, 1]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [1.69e-07, 0, 295], 'false': [27.898, 1, 1]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 295], 'false': [27.898, 1, 1]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 295], 'false': [27.898, 1, 1]}]]
[{'': [3.853791109207323e-15, 0.24986270028775343]}, {'': [-4.8172388865091536e-15, 0.24986270028775945]}, {'': [0.0, 0.24986270028778]}, {'': [-7.225858329763731e-16, 0.2498627002877531]}, {'': [-2.529050415417306e-16, 0.24986270028776564]}, {'': [4.2150840256955097e-16, 0.24986270028781138]}, {'': [2.709696873661399e-16, 0.24986270028776264]}, {'': [9.634477773018307e-17, 0.24986270028776422]}, {'': [-2.0172187837257082e-16, 0.24986270028776447]}, {'': [-1.3548484368306996e-16, 0.24986270028777827]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
1;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
2;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
3;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
4;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
5;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
6;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
7;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
8;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
9;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.8581489350995085;  // std dev = 1.07e-06, 295.000 (wgt'ed) examples reached here.  /* #pos=295 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.3773654909014289;  // std dev = 0.500, 2,706.000 (wgt'ed) examples reached here.  /* #neg=1,301 #pos=1,405 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordauthor(H, G) )
%   | | | then return 0.127016859627815;  // std dev = 6.456, 212.000 (wgt'ed) examples reached here.  /* #neg=155 #pos=57 */
%   | | | else return 0.424815601766179;  // std dev = 2.714, 30.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=17 */
%   | | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | | then return 0.13814893509951162;  // std dev = 5.499, 150.000 (wgt'ed) examples reached here.  /* #neg=108 #pos=42 */
%   | | | else return -0.1418510649004878;  // std dev = 0.000, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.7194734122109577;  // std dev = 0.000, 295.000 (wgt'ed) examples reached here.  /* #pos=295 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.3249676479201206;  // std dev = 0.500, 2,706.000 (wgt'ed) examples reached here.  /* #neg=1,301 #pos=1,405 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordauthor(H, G) )
%   | | | then return 0.11084107057626433;  // std dev = 6.456, 212.000 (wgt'ed) examples reached here.  /* #neg=155 #pos=57 */
%   | | | else return 0.36488314649717124;  // std dev = 2.714, 30.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=17 */
%   | | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | | then return 0.12048633002602756;  // std dev = 5.499, 150.000 (wgt'ed) examples reached here.  /* #neg=108 #pos=42 */
%   | | | else return -0.12544463852839138;  // std dev = 0.000, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.5553664367462832;  // std dev = 0.000, 295.000 (wgt'ed) examples reached here.  /* #pos=295 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then if ( haswordtitle(G, E) )
%   | | | then return 0.4232920782056669;  // std dev = 3.283, 49.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=33 */
%   | | | else return 0.08315602378389884;  // std dev = 3.162, 45.000 (wgt'ed) examples reached here.  /* #neg=30 #pos=15 */
%   | | else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | | then return 0.21721399479839065;  // std dev = 4.786, 92.000 (wgt'ed) examples reached here.  /* #neg=49 #pos=43 */
%   | | | else return 0.2712512618791011;  // std dev = 25.077, 2,520.000 (wgt'ed) examples reached here.  /* #neg=1,206 #pos=1,314 */
%   | else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | | then if ( haswordtitle(K, L), haswordauthor(M, L) )
%   | | | then return 0.09552843573493308;  // std dev = 6.456, 212.000 (wgt'ed) examples reached here.  /* #neg=155 #pos=57 */
%   | | | else return 0.2997457672167224;  // std dev = 2.714, 30.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=17 */
%   | | else if ( haswordvenue(B, N), haswordtitle(P, N) )
%   | | | then return 0.10366302993845555;  // std dev = 5.499, 150.000 (wgt'ed) examples reached here.  /* #neg=108 #pos=42 */
%   | | | else return -0.11231637819360635;  // std dev = 1.49e-08, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.4175135841583114;  // std dev = 0.000, 295.000 (wgt'ed) examples reached here.  /* #pos=295 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then if ( haswordtitle(G, E) )
%   | | | then return 0.3388569527466164;  // std dev = 3.356, 49.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=31 */
%   | | | else return 0.021357700884710847;  // std dev = 3.327, 51.000 (wgt'ed) examples reached here.  /* #neg=35 #pos=16 */
%   | | else return 0.21670507278562062;  // std dev = 0.499, 2,606.000 (wgt'ed) examples reached here.  /* #neg=1,248 #pos=1,358 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordauthor(K, J) )
%   | | | then return 0.0814100538769159;  // std dev = 6.456, 212.000 (wgt'ed) examples reached here.  /* #neg=155 #pos=57 */
%   | | | else return 0.23719055662835217;  // std dev = 2.714, 30.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=17 */
%   | | else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | | | then return 0.08809849495361205;  // std dev = 5.499, 150.000 (wgt'ed) examples reached here.  /* #neg=108 #pos=42 */
%   | | | else return -0.10159632948783631;  // std dev = 0.000, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.3207118471601508;  // std dev = 0.000, 295.000 (wgt'ed) examples reached here.  /* #pos=295 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.1678495230399523;  // std dev = 0.499, 2,706.000 (wgt'ed) examples reached here.  /* #neg=1,301 #pos=1,405 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordauthor(H, G) )
%   | | | then return 0.06869334246664557;  // std dev = 6.456, 212.000 (wgt'ed) examples reached here.  /* #neg=155 #pos=57 */
%   | | | else return 0.18284654650942608;  // std dev = 2.714, 30.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=17 */
%   | | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | | then return 0.07406475031626651;  // std dev = 5.499, 150.000 (wgt'ed) examples reached here.  /* #neg=108 #pos=42 */
%   | | | else return -0.09269127618926094;  // std dev = 9.13e-09, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.2551722425694877;  // std dev = 3.53e-07, 295.000 (wgt'ed) examples reached here.  /* #pos=295 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.1287310031140622;  // std dev = 0.499, 2,706.000 (wgt'ed) examples reached here.  /* #neg=1,301 #pos=1,405 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordauthor(H, G) )
%   | | | then return 0.03486368908984615;  // std dev = 6.309, 209.000 (wgt'ed) examples reached here.  /* #neg=150 #pos=59 */
%   | | | else return 0.13070577824311952;  // std dev = 2.924, 38.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=13 */
%   | | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | | then return 0.09204879094729346;  // std dev = 5.536, 145.000 (wgt'ed) examples reached here.  /* #neg=101 #pos=44 */
%   | | | else return -0.08518475138839685;  // std dev = 1.18e-08, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.20975771563253476;  // std dev = 2.83e-07, 295.000 (wgt'ed) examples reached here.  /* #pos=295 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.09771420308111303;  // std dev = 0.499, 2,706.000 (wgt'ed) examples reached here.  /* #neg=1,301 #pos=1,405 */
%   | else if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then if ( haswordauthor(F, G), haswordtitle(H, G) )
%   | | | then return 0.20784991401683903;  // std dev = 2.911, 35.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=15 */
%   | | | else return -0.11242003037101725;  // std dev = 1.340, 23.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=2 */
%   | | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | | then return 0.02432853863163797;  // std dev = 6.192, 203.000 (wgt'ed) examples reached here.  /* #neg=146 #pos=57 */
%   | | | else return 0.06866195917848461;  // std dev = 5.414, 148.000 (wgt'ed) examples reached here.  /* #neg=106 #pos=42 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.17709649774527694;  // std dev = 1.69e-07, 295.000 (wgt'ed) examples reached here.  /* #pos=295 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.07373598650623127;  // std dev = 0.499, 2,706.000 (wgt'ed) examples reached here.  /* #neg=1,301 #pos=1,405 */
%   | else if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then if ( haswordauthor(F, G), haswordtitle(H, G) )
%   | | | then return 0.1701912141690769;  // std dev = 2.909, 35.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=15 */
%   | | | else return -0.09538643808260033;  // std dev = 1.339, 23.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=2 */
%   | | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | | then return 0.0198011078244298;  // std dev = 6.191, 203.000 (wgt'ed) examples reached here.  /* #neg=146 #pos=57 */
%   | | | else return 0.05696257564400506;  // std dev = 5.412, 148.000 (wgt'ed) examples reached here.  /* #neg=106 #pos=42 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.1527438580936716;  // std dev = 0.000, 295.000 (wgt'ed) examples reached here.  /* #pos=295 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then if ( haswordtitle(G, E) )
%   | | | then return 0.17062867355848454;  // std dev = 3.267, 49.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=33 */
%   | | | else return -0.08318532739797657;  // std dev = 3.185, 45.000 (wgt'ed) examples reached here.  /* #neg=30 #pos=15 */
%   | | else return 0.055694424352629786;  // std dev = 0.499, 2,612.000 (wgt'ed) examples reached here.  /* #neg=1,255 #pos=1,357 */
%   | else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | | then if ( haswordauthor(I, J), haswordtitle(K, J) )
%   | | | then return 0.13642112361640088;  // std dev = 2.907, 35.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=15 */
%   | | | else return -0.0818185008204248;  // std dev = 1.339, 23.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=2 */
%   | | else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | | | then return 0.04041332358464088;  // std dev = 6.871, 231.000 (wgt'ed) examples reached here.  /* #neg=159 #pos=72 */
%   | | | else return 0.0072797013682881495;  // std dev = 4.514, 120.000 (wgt'ed) examples reached here.  /* #neg=93 #pos=27 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.13400703000801156;  // std dev = 0.000, 295.000 (wgt'ed) examples reached here.  /* #pos=295 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then if ( haswordtitle(G, E) )
%   | | | then return 0.13663282301175733;  // std dev = 3.335, 49.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=31 */
%   | | | else return -0.10097396704954699;  // std dev = 3.344, 51.000 (wgt'ed) examples reached here.  /* #neg=35 #pos=16 */
%   | | else return 0.042645289472510145;  // std dev = 0.499, 2,606.000 (wgt'ed) examples reached here.  /* #neg=1,248 #pos=1,358 */
%   | else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | | then if ( haswordauthor(I, J), haswordtitle(K, J) )
%   | | | then return 0.10757980909045523;  // std dev = 2.906, 35.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=15 */
%   | | | else return -0.07081902596757893;  // std dev = 1.338, 23.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=2 */
%   | | else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | | | then return 0.011560006105302197;  // std dev = 6.189, 203.000 (wgt'ed) examples reached here.  /* #neg=146 #pos=57 */
%   | | | else return 0.03984590638016266;  // std dev = 5.408, 148.000 (wgt'ed) examples reached here.  /* #neg=106 #pos=42 */


Results
   AUC ROC   = 0.602865
   AUC PR    = 0.656547
   CLL	      = -0.641695
   Precision = 0.923611 at threshold = 0.5
   Recall    = 0.178046
   F1        = 0.298541


Total learning time: 359.735 seconds
Total inference time: 5.063 seconds
AUC ROC: 0.602865


Results scoring model
   AUC ROC   = 0.643357
   AUC PR    = 0.706715
   CLL	      = -0.627592
   Precision = 0.920103 at threshold = 0.5
   Recall    = 0.196586
   F1        = 0.323956


Total scoring time: 8.759 seconds
Refined model CLL: -0.627592


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.602865
   AUC PR    = 0.656547
   CLL	      = -0.641695
   Precision = 0.923611 at threshold = 0.5
   Recall    = 0.178046
   F1        = 0.298541


Total learning time: 389.281 seconds
Total inference time: 5.063 seconds
AUC ROC: 0.602865
Total revision time: 389.281
Best scored revision CLL: -0.627592


Dataset: 3_imdb_cora, Fold: 4, Type: Transfer (trRDN-B), Time: 08:28:26
{'AUC ROC': 0.602865, 'AUC PR': 0.656547, 'CLL': -0.641695, 'Precision': [0.923611, 0.5], 'Recall': 0.178046, 'F1': 0.298541, 'Learning time': 389.281, 'Inference time': 5.063, 'parameter_0.8': {'AUC ROC': 0.576975, 'AUC PR': 0.639704, 'CLL': -0.64635, 'Precision': [1.0, 0.5], 'Recall': 0.153949, 'F1': 0.266821, 'Learning time': 14.371, 'Inference time': 3.494}}


Amount of data: 1.0
******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- actor(A), director(B).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- actor(A), director(B).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- actor(A), director(B).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- director(B), actor(A).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.8581489350995083;  // std dev = 1.41e-06, 380.000 (wgt'ed) examples reached here.  /* #pos=380 */
%   else return 0.3448859940745265;  // std dev = 31.146, 3,883.000 (wgt'ed) examples reached here.  /* #neg=1,993 #pos=1,890 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.7194734122109581;  // std dev = 0.000, 380.000 (wgt'ed) examples reached here.  /* #pos=380 */
%   else return 0.2975212959643121;  // std dev = 31.146, 3,883.000 (wgt'ed) examples reached here.  /* #neg=1,993 #pos=1,890 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.555366436746283;  // std dev = 0.000, 380.000 (wgt'ed) examples reached here.  /* #pos=380 */
%   else return 0.24763208152829513;  // std dev = 31.146, 3,883.000 (wgt'ed) examples reached here.  /* #neg=1,993 #pos=1,890 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.417513584158312;  // std dev = 0.000, 380.000 (wgt'ed) examples reached here.  /* #pos=380 */
%   else return 0.1997291650193488;  // std dev = 31.146, 3,883.000 (wgt'ed) examples reached here.  /* #neg=1,993 #pos=1,890 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.3207118471601516;  // std dev = 0.000, 380.000 (wgt'ed) examples reached here.  /* #pos=380 */
%   else return 0.1571893617197154;  // std dev = 31.146, 3,883.000 (wgt'ed) examples reached here.  /* #neg=1,993 #pos=1,890 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.25517224256948734;  // std dev = 4.34e-07, 380.000 (wgt'ed) examples reached here.  /* #pos=380 */
%   else return 0.12157815240300254;  // std dev = 31.146, 3,883.000 (wgt'ed) examples reached here.  /* #neg=1,993 #pos=1,890 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.20975771563253462;  // std dev = 2.53e-07, 380.000 (wgt'ed) examples reached here.  /* #pos=380 */
%   else return 0.09296025074347232;  // std dev = 31.146, 3,883.000 (wgt'ed) examples reached here.  /* #neg=1,993 #pos=1,890 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.17709649774527664;  // std dev = 2.63e-07, 380.000 (wgt'ed) examples reached here.  /* #pos=380 */
%   else return 0.07056406667222873;  // std dev = 31.146, 3,883.000 (wgt'ed) examples reached here.  /* #neg=1,993 #pos=1,890 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.15274385809367164;  // std dev = 0.000, 380.000 (wgt'ed) examples reached here.  /* #pos=380 */
%   else return 0.053324076816723125;  // std dev = 31.146, 3,883.000 (wgt'ed) examples reached here.  /* #neg=1,993 #pos=1,890 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.1340070300080121;  // std dev = 0.000, 380.000 (wgt'ed) examples reached here.  /* #pos=380 */
%   else return 0.040185951120406925;  // std dev = 31.146, 3,883.000 (wgt'ed) examples reached here.  /* #neg=1,993 #pos=1,890 */


Results
   AUC ROC   = 0.576975
   AUC PR    = 0.639704
   CLL	      = -0.646355
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.153949
   F1        = 0.266821


Total learning time: 16.703 seconds
Total inference time: 3.364 seconds
AUC ROC: 0.576975


Results scoring model
   AUC ROC   = 0.5837
   AUC PR    = 0.673762
   CLL	      = -0.644028
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.167401
   F1        = 0.286792


Total scoring time: 6.42 seconds
Parameter learned model CLL: -0.644028


Structure after Parameter Learning
[['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [1.41e-06, 0, 380], 'false': [31.146, 1, 1]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 380], 'false': [31.146, 1, 1]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 380], 'false': [31.146, 1, 1]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 380], 'false': [31.146, 1, 1]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 380], 'false': [31.146, 1, 1]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [4.34e-07, 0, 380], 'false': [31.146, 1, 1]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [2.53e-07, 0, 380], 'false': [31.146, 1, 1]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [2.63e-07, 0, 380], 'false': [31.146, 1, 1]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 380], 'false': [31.146, 1, 1]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 380], 'false': [31.146, 1, 1]}]]
[{'': [5.235578052969159e-15, 0.24982409439532088]}, {'': [-5.310372025154433e-15, 0.24982409439531222]}, {'': [-1.009718624501195e-15, 0.24982409439537687]}, {'': [-1.495879443705474e-15, 0.2498240943953373]}, {'': [-1.402386978473882e-15, 0.2498240943953515]}, {'': [4.9551006572743825e-16, 0.24982409439538358]}, {'': [1.6828643741686584e-16, 0.24982409439536332]}, {'': [1.8231030720160465e-16, 0.24982409439533876]}, {'': [-2.5710427938687837e-16, 0.24982409439534373]}, {'': [-2.945012654795152e-16, 0.2498240943953494]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
1;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
2;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
3;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
4;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
5;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
6;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
7;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
8;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
9;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.8581489350995083;  // std dev = 1.41e-06, 380.000 (wgt'ed) examples reached here.  /* #pos=380 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then if ( haswordtitle(G, E) )
%   | | | then return 0.5194392576801578;  // std dev = 3.727, 62.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=41 */
%   | | | else return 0.16460054800273813;  // std dev = 3.630, 62.000 (wgt'ed) examples reached here.  /* #neg=43 #pos=19 */
%   | | else return 0.37578156312771943;  // std dev = 0.500, 3,261.000 (wgt'ed) examples reached here.  /* #neg=1,573 #pos=1,688 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordauthor(K, J) )
%   | | | then return 0.13122585817643687;  // std dev = 7.184, 260.000 (wgt'ed) examples reached here.  /* #neg=189 #pos=71 */
%   | | | else return 0.37243464938522663;  // std dev = 2.957, 35.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=18 */
%   | | else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | | | then return 0.1461924133603825;  // std dev = 6.143, 184.000 (wgt'ed) examples reached here.  /* #neg=131 #pos=53 */
%   | | | else return -0.14185106490048777;  // std dev = 0.000, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.7194734122109581;  // std dev = 0.000, 380.000 (wgt'ed) examples reached here.  /* #pos=380 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.32253130076014197;  // std dev = 0.499, 3,385.000 (wgt'ed) examples reached here.  /* #neg=1,637 #pos=1,748 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordauthor(H, G) )
%   | | | then return 0.1144892370719102;  // std dev = 7.184, 260.000 (wgt'ed) examples reached here.  /* #neg=189 #pos=71 */
%   | | | else return 0.32080740000829727;  // std dev = 2.957, 35.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=18 */
%   | | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | | then return 0.12744847110274762;  // std dev = 6.143, 184.000 (wgt'ed) examples reached here.  /* #neg=131 #pos=53 */
%   | | | else return -0.12544463852839138;  // std dev = 0.000, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.555366436746283;  // std dev = 0.000, 380.000 (wgt'ed) examples reached here.  /* #pos=380 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.2671471961432036;  // std dev = 0.499, 3,385.000 (wgt'ed) examples reached here.  /* #neg=1,637 #pos=1,748 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordauthor(H, G) )
%   | | | then return 0.0986086669206063;  // std dev = 7.184, 260.000 (wgt'ed) examples reached here.  /* #neg=189 #pos=71 */
%   | | | else return 0.265809913568365;  // std dev = 2.957, 35.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=18 */
%   | | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | | then return 0.10951646294891464;  // std dev = 6.143, 184.000 (wgt'ed) examples reached here.  /* #neg=131 #pos=53 */
%   | | | else return -0.11231637819360635;  // std dev = 1.67e-08, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.417513584158312;  // std dev = 0.000, 380.000 (wgt'ed) examples reached here.  /* #pos=380 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then if ( haswordtitle(G, E) )
%   | | | then return 0.32745348047267375;  // std dev = 3.727, 62.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=41 */
%   | | | else return 0.046403971815364216;  // std dev = 3.630, 62.000 (wgt'ed) examples reached here.  /* #neg=43 #pos=19 */
%   | | else return 0.21494664766739252;  // std dev = 0.500, 3,261.000 (wgt'ed) examples reached here.  /* #neg=1,573 #pos=1,688 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordauthor(K, J) )
%   | | | then return 0.08394739876736725;  // std dev = 7.184, 260.000 (wgt'ed) examples reached here.  /* #neg=189 #pos=71 */
%   | | | else return 0.21295056027011944;  // std dev = 2.957, 35.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=18 */
%   | | else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | | | then return 0.09288644497339014;  // std dev = 6.143, 184.000 (wgt'ed) examples reached here.  /* #neg=131 #pos=53 */
%   | | | else return -0.10159632948783635;  // std dev = 0.000, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.3207118471601516;  // std dev = 0.000, 380.000 (wgt'ed) examples reached here.  /* #pos=380 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.1668981637930905;  // std dev = 0.499, 3,385.000 (wgt'ed) examples reached here.  /* #neg=1,637 #pos=1,748 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordauthor(H, G) )
%   | | | then return 0.07073625300527862;  // std dev = 7.184, 260.000 (wgt'ed) examples reached here.  /* #neg=189 #pos=71 */
%   | | | else return 0.16632097186960948;  // std dev = 2.957, 35.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=18 */
%   | | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | | then return 0.07788264160438463;  // std dev = 6.143, 184.000 (wgt'ed) examples reached here.  /* #neg=131 #pos=53 */
%   | | | else return -0.09269127618926093;  // std dev = 1.18e-08, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.25517224256948734;  // std dev = 4.34e-07, 380.000 (wgt'ed) examples reached here.  /* #pos=380 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.12810212540242474;  // std dev = 0.499, 3,385.000 (wgt'ed) examples reached here.  /* #neg=1,637 #pos=1,748 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordauthor(H, G) )
%   | | | then return 0.05907890933255584;  // std dev = 7.184, 260.000 (wgt'ed) examples reached here.  /* #neg=189 #pos=71 */
%   | | | else return 0.12769752855389896;  // std dev = 2.957, 35.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=18 */
%   | | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | | then return 0.06466291494436655;  // std dev = 6.143, 184.000 (wgt'ed) examples reached here.  /* #neg=131 #pos=53 */
%   | | | else return -0.08518475138839683;  // std dev = 1.29e-08, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.20975771563253462;  // std dev = 2.53e-07, 380.000 (wgt'ed) examples reached here.  /* #pos=380 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then if ( haswordtitle(G, E) )
%   | | | then return 0.25195164270937;  // std dev = 3.641, 61.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=41 */
%   | | | else return -0.10288763922980192;  // std dev = 3.645, 61.000 (wgt'ed) examples reached here.  /* #neg=42 #pos=19 */
%   | | else return 0.09815492225104419;  // std dev = 0.499, 3,263.000 (wgt'ed) examples reached here.  /* #neg=1,575 #pos=1,688 */
%   | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordauthor(K, J) )
%   | | | then return 0.02105863462465442;  // std dev = 6.998, 254.000 (wgt'ed) examples reached here.  /* #neg=183 #pos=71 */
%   | | | else return 0.16720128956020822;  // std dev = 3.310, 46.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=18 */
%   | | else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | | | then return 0.07198632720898063;  // std dev = 6.108, 179.000 (wgt'ed) examples reached here.  /* #neg=126 #pos=53 */
%   | | | else return -0.07877675473109179;  // std dev = 0.000, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.17709649774527664;  // std dev = 2.63e-07, 380.000 (wgt'ed) examples reached here.  /* #pos=380 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then if ( haswordtitle(G, E) )
%   | | | then return 0.18971366069826912;  // std dev = 3.640, 61.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=41 */
%   | | | else return -0.0782344348237236;  // std dev = 3.644, 61.000 (wgt'ed) examples reached here.  /* #neg=42 #pos=19 */
%   | | else return 0.07410671046685485;  // std dev = 0.499, 3,263.000 (wgt'ed) examples reached here.  /* #neg=1,575 #pos=1,688 */
%   | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordauthor(K, J) )
%   | | | then return 0.017088206657167;  // std dev = 6.997, 254.000 (wgt'ed) examples reached here.  /* #neg=183 #pos=71 */
%   | | | else return 0.13679639597150076;  // std dev = 3.310, 46.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=18 */
%   | | else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | | | then return 0.05922126903433177;  // std dev = 6.108, 179.000 (wgt'ed) examples reached here.  /* #neg=126 #pos=53 */
%   | | | else return -0.07324622576333704;  // std dev = 0.000, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.15274385809367164;  // std dev = 0.000, 380.000 (wgt'ed) examples reached here.  /* #pos=380 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.05524357815843756;  // std dev = 0.498, 3,385.000 (wgt'ed) examples reached here.  /* #neg=1,637 #pos=1,748 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordauthor(H, G) )
%   | | | then return 0.01383793185057887;  // std dev = 6.997, 254.000 (wgt'ed) examples reached here.  /* #neg=183 #pos=71 */
%   | | | else return 0.1099828530268755;  // std dev = 3.310, 46.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=18 */
%   | | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | | then return 0.04835010870669263;  // std dev = 6.108, 179.000 (wgt'ed) examples reached here.  /* #neg=126 #pos=53 */
%   | | | else return -0.06842697784420274;  // std dev = 0.000, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.1340070300080121;  // std dev = 0.000, 380.000 (wgt'ed) examples reached here.  /* #pos=380 */
%   else if ( haswordvenue(A, D), haswordtitle(E, D) )
%   | then if ( haswordtitle(E, F), haswordvenue(B, F) )
%   | | then if ( haswordvenue(A, F) )
%   | | | then return 0.03671136767783816;  // std dev = 28.622, 3,304.000 (wgt'ed) examples reached here.  /* #neg=1,612 #pos=1,692 */
%   | | | else return -0.0012928769508231876;  // std dev = 4.770, 118.000 (wgt'ed) examples reached here.  /* #neg=80 #pos=38 */
%   | | else if ( title(G, E), venue(G, B) )
%   | | | then return 0.07047189032756515;  // std dev = 6.631, 207.000 (wgt'ed) examples reached here.  /* #neg=133 #pos=74 */
%   | | | else return 0.20273927471517222;  // std dev = 1.344, 7.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=4 */
%   | else if ( haswordvenue(A, H), haswordvenue(B, H) )
%   | | then if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | | then return 0.28239345190836307;  // std dev = 2.533, 34.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=25 */
%   | | | else return -0.03989905940477524;  // std dev = 1.688, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | | then return 0.04377640960005899;  // std dev = 6.143, 184.000 (wgt'ed) examples reached here.  /* #neg=131 #pos=53 */
%   | | | else return -0.0641918400820262;  // std dev = 6.45e-09, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */


Results
   AUC ROC   = 0.609668
   AUC PR    = 0.665631
   CLL	      = -0.640467
   Precision = 0.901235 at threshold = 0.5
   Recall    = 0.195448
   F1        = 0.321232


Total learning time: 724.466 seconds
Total inference time: 5.359 seconds
AUC ROC: 0.609668


Results scoring model
   AUC ROC   = 0.649508
   AUC PR    = 0.715064
   CLL	      = -0.627091
   Precision = 0.914773 at threshold = 0.5
   Recall    = 0.212775
   F1        = 0.345247


Total scoring time: 12.64 seconds
Refined model CLL: -0.627091


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.609668
   AUC PR    = 0.665631
   CLL	      = -0.640467
   Precision = 0.901235 at threshold = 0.5
   Recall    = 0.195448
   F1        = 0.321232


Total learning time: 760.229 seconds
Total inference time: 5.359 seconds
AUC ROC: 0.609668
Total revision time: 760.229
Best scored revision CLL: -0.627091


Dataset: 3_imdb_cora, Fold: 4, Type: Transfer (trRDN-B), Time: 08:41:16
{'AUC ROC': 0.609668, 'AUC PR': 0.665631, 'CLL': -0.640467, 'Precision': [0.901235, 0.5], 'Recall': 0.195448, 'F1': 0.321232, 'Learning time': 760.229, 'Inference time': 5.359, 'parameter_1.0': {'AUC ROC': 0.576975, 'AUC PR': 0.639704, 'CLL': -0.646355, 'Precision': [1.0, 0.5], 'Recall': 0.153949, 'F1': 0.266821, 'Learning time': 16.703, 'Inference time': 3.364}}


Starting fold 5

Target train facts examples: 33914
Target train pos examples: 2467
Target train neg examples: 2240

Target test facts examples: 8644
Target test pos	 examples: 550
Target test neg examples: 500

Amount of data: 0.2
******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- actor(A), director(B).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- actor(A), director(B).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- actor(A), director(B).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- director(B), actor(A).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.8581489350995116;  // std dev = 2.38e-07, 93.000 (wgt'ed) examples reached here.  /* #pos=93 */
%   else return 0.3298470483070548;  // std dev = 14.537, 848.000 (wgt'ed) examples reached here.  /* #neg=448 #pos=400 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.7194734122109538;  // std dev = 2.38e-07, 93.000 (wgt'ed) examples reached here.  /* #pos=93 */
%   else return 0.2847787460300652;  // std dev = 14.537, 848.000 (wgt'ed) examples reached here.  /* #neg=448 #pos=400 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.5553664367462835;  // std dev = 4.00e-07, 93.000 (wgt'ed) examples reached here.  /* #pos=93 */
%   else return 0.23761083719490278;  // std dev = 14.537, 848.000 (wgt'ed) examples reached here.  /* #neg=448 #pos=400 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.41751358415830997;  // std dev = 1.98e-07, 93.000 (wgt'ed) examples reached here.  /* #pos=93 */
%   else return 0.19236326418701527;  // std dev = 14.537, 848.000 (wgt'ed) examples reached here.  /* #neg=448 #pos=400 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.3207118471601504;  // std dev = 0.000, 93.000 (wgt'ed) examples reached here.  /* #pos=93 */
%   else return 0.1520523278054279;  // std dev = 14.537, 848.000 (wgt'ed) examples reached here.  /* #neg=448 #pos=400 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.2551722425694897;  // std dev = 0.000, 93.000 (wgt'ed) examples reached here.  /* #pos=93 */
%   else return 0.11811996391808473;  // std dev = 14.537, 848.000 (wgt'ed) examples reached here.  /* #neg=448 #pos=400 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.20975771563253573;  // std dev = 1.15e-07, 93.000 (wgt'ed) examples reached here.  /* #pos=93 */
%   else return 0.09067969754802079;  // std dev = 14.537, 848.000 (wgt'ed) examples reached here.  /* #neg=448 #pos=400 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.17709649774527716;  // std dev = 8.69e-08, 93.000 (wgt'ed) examples reached here.  /* #pos=93 */
%   else return 0.06907519747859231;  // std dev = 14.537, 848.000 (wgt'ed) examples reached here.  /* #neg=448 #pos=400 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.15274385809367125;  // std dev = 0.000, 93.000 (wgt'ed) examples reached here.  /* #pos=93 */
%   else return 0.05235557517669203;  // std dev = 14.537, 848.000 (wgt'ed) examples reached here.  /* #neg=448 #pos=400 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.1340070300080109;  // std dev = 6.14e-08, 93.000 (wgt'ed) examples reached here.  /* #pos=93 */
%   else return 0.03955616052583649;  // std dev = 14.537, 848.000 (wgt'ed) examples reached here.  /* #neg=448 #pos=400 */


Results
   AUC ROC   = 0.574545
   AUC PR    = 0.655418
   CLL	      = -0.651641
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.149091
   F1        = 0.259494


Total learning time: 8.078 seconds
Total inference time: 3.461 seconds
AUC ROC: 0.574545


Results scoring model
   AUC ROC   = 0.59432
   AUC PR    = 0.680155
   CLL	      = -0.637361
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.188641
   F1        = 0.317406


Total scoring time: 4.523 seconds
Parameter learned model CLL: -0.637361


Structure after Parameter Learning
[['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [2.38e-07, 0, 93], 'false': [14.537, 448, 400]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [2.38e-07, 0, 93], 'false': [14.537, 448, 400]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [4e-07, 0, 93], 'false': [14.537, 448, 400]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [1.98e-07, 0, 93], 'false': [14.537, 448, 400]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 93], 'false': [14.537, 448, 400]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 93], 'false': [14.537, 448, 400]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [1.15e-07, 0, 93], 'false': [14.537, 448, 400]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [8.69e-08, 0, 93], 'false': [14.537, 448, 400]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 93], 'false': [14.537, 448, 400]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [6.14e-08, 0, 93], 'false': [14.537, 448, 400]}]]
[{'': [6.11219557643097e-16, 0.2491990032039756]}, {'': [6.11219557643097e-16, 0.24919900320398708]}, {'': [1.7190550058712102e-15, 0.2491990032039843]}, {'': [4.2021344587962916e-16, 0.24919900320398888]}, {'': [-3.2471038999789525e-16, 0.2491990032039792]}, {'': [-3.820122235269356e-17, 0.24919900320399108]}, {'': [1.4325458382260084e-16, 0.2491990032039857]}, {'': [8.117759749947381e-17, 0.24919900320399252]}, {'': [-9.072790308764721e-17, 0.24919900320399335]}, {'': [4.0588798749736907e-17, 0.24919900320398783]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
1;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
2;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
3;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
4;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
5;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
6;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
7;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
8;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
9;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.8581489350995116;  // std dev = 2.38e-07, 93.000 (wgt'ed) examples reached here.  /* #pos=93 */
%   else if ( haswordvenue(A, D), haswordtitle(E, D) )
%   | then if ( haswordvenue(B, D) )
%   | | then if ( title(F, E), venue(F, B) )
%   | | | then return 0.3379257830771925;  // std dev = 13.377, 717.000 (wgt'ed) examples reached here.  /* #neg=373 #pos=344 */
%   | | | else return 0.42064893509951234;  // std dev = 2.806, 32.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=18 */
%   | | else if ( title(G, E), venue(G, A) )
%   | | | then return 0.35814893509951135;  // std dev = 3.391, 46.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=23 */
%   | | | else return 0.20814893509951235;  // std dev = 2.133, 20.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=7 */
%   | else if ( haswordvenue(A, H), haswordvenue(B, H) )
%   | | then return 0.3581489350995123;  // std dev = 0.500, 10.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
%   | | else return -0.011416282291792127;  // std dev = 0.337, 23.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=3 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.7194734122109538;  // std dev = 2.38e-07, 93.000 (wgt'ed) examples reached here.  /* #pos=93 */
%   else if ( haswordvenue(A, D), haswordtitle(E, D) )
%   | then if ( haswordvenue(B, D) )
%   | | then if ( title(F, E), venue(F, B) )
%   | | | then return 0.29162656385247904;  // std dev = 13.377, 717.000 (wgt'ed) examples reached here.  /* #neg=373 #pos=344 */
%   | | | else return 0.361386758207022;  // std dev = 2.806, 32.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=18 */
%   | | else if ( title(G, E), venue(G, A) )
%   | | | then return 0.3087411357856347;  // std dev = 3.391, 46.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=23 */
%   | | | else return 0.18087637556697492;  // std dev = 2.133, 20.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=7 */
%   | else if ( haswordvenue(A, H), haswordvenue(B, H) )
%   | | then return 0.30874113578563506;  // std dev = 0.500, 10.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
%   | | else return -0.010032259705424174;  // std dev = 0.337, 23.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=3 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.5553664367462835;  // std dev = 4.00e-07, 93.000 (wgt'ed) examples reached here.  /* #pos=93 */
%   else if ( haswordvenue(A, D), haswordtitle(E, D) )
%   | then if ( haswordvenue(B, D) )
%   | | then if ( title(F, E), venue(F, A) )
%   | | | then return 0.24335023205736564;  // std dev = 13.461, 726.000 (wgt'ed) examples reached here.  /* #neg=377 #pos=349 */
%   | | | else return 0.3072671962785421;  // std dev = 2.373, 23.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=13 */
%   | | else if ( title(G, E), venue(G, A) )
%   | | | then return 0.25641236875858686;  // std dev = 3.391, 46.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=23 */
%   | | | else return 0.15391963221327512;  // std dev = 2.133, 20.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=7 */
%   | else if ( haswordvenue(A, H), haswordvenue(B, H) )
%   | | then return 0.2564123687585864;  // std dev = 0.500, 10.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
%   | | else return -0.008825367568025785;  // std dev = 0.337, 23.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=3 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.41751358415830997;  // std dev = 1.98e-07, 93.000 (wgt'ed) examples reached here.  /* #pos=93 */
%   else if ( haswordvenue(A, D), haswordtitle(E, D) )
%   | then if ( title(F, E), venue(F, B) )
%   | | then if ( samebib(F, G), venue(G, A) )
%   | | | then return 0.5130039692027025;  // std dev = 8.470, 444.000 (wgt'ed) examples reached here.  /* #neg=90 #pos=354 */
%   | | | else return -0.2410518004482134;  // std dev = 3.654, 323.000 (wgt'ed) examples reached here.  /* #neg=309 #pos=14 */
%   | | else if ( haswordauthor(H, D) )
%   | | | then return 0.0488096559584496;  // std dev = 1.225, 7.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=2 */
%   | | | else return 0.2464813009347433;  // std dev = 3.140, 41.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=22 */
%   | else if ( haswordvenue(A, I), haswordvenue(B, I) )
%   | | then return 0.20613740734453975;  // std dev = 0.500, 10.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
%   | | else return -0.007770863374260509;  // std dev = 0.337, 23.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=3 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.3207118471601504;  // std dev = 0.000, 93.000 (wgt'ed) examples reached here.  /* #pos=93 */
%   else if ( haswordvenue(A, D), haswordtitle(E, D) )
%   | then if ( haswordauthor(F, D) )
%   | | then if ( author(G, F), title(G, E) )
%   | | | then return 0.49716166837556097;  // std dev = 0.785, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | | | else return 0.14116580653246055;  // std dev = 1.689, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | | else if ( title(H, E), venue(H, A) )
%   | | | then return 0.14405781694666522;  // std dev = 12.250, 760.000 (wgt'ed) examples reached here.  /* #neg=398 #pos=362 */
%   | | | else return 0.20716686215277771;  // std dev = 2.782, 33.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=17 */
%   | else if ( haswordvenue(A, I), haswordvenue(B, I) )
%   | | then return 0.16162857548414675;  // std dev = 0.500, 10.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
%   | | else return -0.006847915364213055;  // std dev = 0.337, 23.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=3 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.2551722425694897;  // std dev = 0.000, 93.000 (wgt'ed) examples reached here.  /* #pos=93 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then if ( haswordtitle(G, E), haswordtitle(G, D) )
%   | | | then return 0.2577495524129675;  // std dev = 1.515, 16.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=11 */
%   | | | else return -0.09631016821995726;  // std dev = 0.742, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | | then return 0.2869862976628657;  // std dev = 1.535, 15.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=10 */
%   | | | else return 0.11373342087916465;  // std dev = 12.122, 743.000 (wgt'ed) examples reached here.  /* #neg=388 #pos=355 */
%   | else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | | then if ( haswordtitle(K, L), haswordauthor(M, L) )
%   | | | then return 0.06791001639361291;  // std dev = 2.715, 38.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=16 */
%   | | | else return 0.1907027767221825;  // std dev = 1.414, 8.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=4 */
%   | | else return -0.006038887244629088;  // std dev = 0.337, 23.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=3 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.20975771563253573;  // std dev = 1.15e-07, 93.000 (wgt'ed) examples reached here.  /* #pos=93 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then if ( title(F, E), venue(F, A) )
%   | | | then return 0.08929115449859265;  // std dev = 11.822, 726.000 (wgt'ed) examples reached here.  /* #neg=377 #pos=349 */
%   | | | else return 0.15075681921549272;  // std dev = 2.297, 23.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=13 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.07092006455250244;  // std dev = 1.867, 16.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=7 */
%   | | | else return 0.1332056692131052;  // std dev = 1.708, 14.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=8 */
%   | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | then if ( haswordtitle(J, K), haswordauthor(L, K) )
%   | | | then return 0.052794379943046296;  // std dev = 2.709, 38.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=16 */
%   | | | else return 0.14855740075077728;  // std dev = 1.414, 8.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=4 */
%   | | else return -0.005328773859332364;  // std dev = 0.337, 23.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=3 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.17709649774527716;  // std dev = 8.69e-08, 93.000 (wgt'ed) examples reached here.  /* #pos=93 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then if ( author(G, F), venue(G, A) )
%   | | | then return 0.3373066959359869;  // std dev = 0.746, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | | else return 0.019236360912337158;  // std dev = 1.384, 11.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=5 */
%   | | else if ( haswordtitle(H, D) )
%   | | | then return 0.0678909775244498;  // std dev = 11.901, 733.000 (wgt'ed) examples reached here.  /* #neg=381 #pos=352 */
%   | | | else return 0.09218792453126372;  // std dev = 2.485, 29.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=15 */
%   | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | then if ( haswordtitle(J, K), haswordauthor(L, K) )
%   | | | then return 0.04086705272584958;  // std dev = 2.706, 38.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=16 */
%   | | | else return 0.11399743037041007;  // std dev = 1.414, 8.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=4 */
%   | | else return -0.004704751822265032;  // std dev = 0.337, 23.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=3 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.15274385809367125;  // std dev = 0.000, 93.000 (wgt'ed) examples reached here.  /* #pos=93 */
%   else if ( haswordvenue(A, D), haswordtitle(E, D) )
%   | then if ( haswordvenue(B, D) )
%   | | then if ( title(F, E), venue(F, A) )
%   | | | then return 0.0521461979165456;  // std dev = 11.764, 726.000 (wgt'ed) examples reached here.  /* #neg=377 #pos=349 */
%   | | | else return 0.0985986376780225;  // std dev = 2.293, 23.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=13 */
%   | | else if ( title(G, E), venue(G, A) )
%   | | | then return 0.06671289504025;  // std dev = 2.952, 46.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=23 */
%   | | | else return -0.004342586448736888;  // std dev = 2.093, 20.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=7 */
%   | else if ( haswordvenue(A, H), haswordvenue(B, H) )
%   | | then return 0.054680674051940235;  // std dev = 0.503, 10.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
%   | | else return -0.004155818592378645;  // std dev = 0.337, 23.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=3 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.1340070300080109;  // std dev = 6.14e-08, 93.000 (wgt'ed) examples reached here.  /* #pos=93 */
%   else if ( haswordvenue(A, D), haswordtitle(E, D) )
%   | then if ( title(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.27985395991893797;  // std dev = 8.440, 444.000 (wgt'ed) examples reached here.  /* #neg=90 #pos=354 */
%   | | | else return -0.28233032392743307;  // std dev = 4.019, 331.000 (wgt'ed) examples reached here.  /* #neg=312 #pos=19 */
%   | | else if ( haswordvenue(B, D) )
%   | | | then return 0.10607407069848869;  // std dev = 2.159, 20.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=12 */
%   | | | else return -0.003365247784338765;  // std dev = 2.093, 20.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=7 */
%   | else if ( haswordvenue(A, H), haswordvenue(B, H) )
%   | | then return 0.04113897257116889;  // std dev = 0.503, 10.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
%   | | else return -0.003672500236277068;  // std dev = 0.337, 23.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=3 */


Results
   AUC ROC   = 0.906638
   AUC PR    = 0.91578
   CLL	      = -0.467948
   Precision = 0.886562 at threshold = 0.5
   Recall    = 0.923636
   F1        = 0.90472


Total learning time: 1077.228 seconds
Total inference time: 9.058 seconds
AUC ROC: 0.906638


Results scoring model
   AUC ROC   = 0.898001
   AUC PR    = 0.894451
   CLL	      = -0.471358
   Precision = 0.827586 at threshold = 0.5
   Recall    = 0.924949
   F1        = 0.873563


Total scoring time: 22.238 seconds
Refined model CLL: -0.471358


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.906638
   AUC PR    = 0.91578
   CLL	      = -0.467948
   Precision = 0.886562 at threshold = 0.5
   Recall    = 0.923636
   F1        = 0.90472


Total learning time: 1112.0670000000002 seconds
Total inference time: 9.058 seconds
AUC ROC: 0.906638
Total revision time: 1112.0670000000002
Best scored revision CLL: -0.471358


Dataset: 3_imdb_cora, Fold: 5, Type: Transfer (trRDN-B), Time: 09:00:03
{'AUC ROC': 0.906638, 'AUC PR': 0.91578, 'CLL': -0.467948, 'Precision': [0.886562, 0.5], 'Recall': 0.923636, 'F1': 0.90472, 'Learning time': 1112.0670000000002, 'Inference time': 9.058, 'parameter_0.2': {'AUC ROC': 0.574545, 'AUC PR': 0.655418, 'CLL': -0.651641, 'Precision': [1.0, 0.5], 'Recall': 0.149091, 'F1': 0.259494, 'Learning time': 8.078, 'Inference time': 3.461}}


Amount of data: 0.4
******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- actor(A), director(B).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- actor(A), director(B).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- actor(A), director(B).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- director(B), actor(A).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.8581489350995094;  // std dev = 1.09e-06, 180.000 (wgt'ed) examples reached here.  /* #pos=180 */
%   else return 0.33170945213828523;  // std dev = 20.599, 1,702.000 (wgt'ed) examples reached here.  /* #neg=896 #pos=806 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.7194734122109567;  // std dev = 0.000, 180.000 (wgt'ed) examples reached here.  /* #pos=180 */
%   else return 0.2863579357081327;  // std dev = 20.599, 1,702.000 (wgt'ed) examples reached here.  /* #neg=896 #pos=806 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.5553664367462833;  // std dev = 5.84e-07, 180.000 (wgt'ed) examples reached here.  /* #pos=180 */
%   else return 0.23885563166535653;  // std dev = 20.599, 1,702.000 (wgt'ed) examples reached here.  /* #neg=896 #pos=806 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.41751358415830964;  // std dev = 3.72e-07, 180.000 (wgt'ed) examples reached here.  /* #pos=180 */
%   else return 0.1932812909501529;  // std dev = 20.599, 1,702.000 (wgt'ed) examples reached here.  /* #neg=896 #pos=806 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.3207118471601491;  // std dev = 3.63e-07, 180.000 (wgt'ed) examples reached here.  /* #pos=180 */
%   else return 0.15269469635769176;  // std dev = 20.599, 1,702.000 (wgt'ed) examples reached here.  /* #neg=896 #pos=806 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.2551722425694888;  // std dev = 3.70e-07, 180.000 (wgt'ed) examples reached here.  /* #pos=180 */
%   else return 0.11855329647607256;  // std dev = 20.599, 1,702.000 (wgt'ed) examples reached here.  /* #neg=896 #pos=806 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.20975771563253506;  // std dev = 3.04e-07, 180.000 (wgt'ed) examples reached here.  /* #pos=180 */
%   else return 0.09096539293875684;  // std dev = 20.599, 1,702.000 (wgt'ed) examples reached here.  /* #neg=896 #pos=806 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.17709649774527825;  // std dev = 0.000, 180.000 (wgt'ed) examples reached here.  /* #pos=180 */
%   else return 0.06926106995722352;  // std dev = 20.599, 1,702.000 (wgt'ed) examples reached here.  /* #neg=896 #pos=806 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.1527438580936715;  // std dev = 0.000, 180.000 (wgt'ed) examples reached here.  /* #pos=180 */
%   else return 0.05247558660873924;  // std dev = 20.599, 1,702.000 (wgt'ed) examples reached here.  /* #neg=896 #pos=806 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.13400703000801098;  // std dev = 8.16e-08, 180.000 (wgt'ed) examples reached here.  /* #pos=180 */
%   else return 0.03963325156592913;  // std dev = 20.599, 1,702.000 (wgt'ed) examples reached here.  /* #neg=896 #pos=806 */


Results
   AUC ROC   = 0.574545
   AUC PR    = 0.655418
   CLL	      = -0.651366
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.149091
   F1        = 0.259494


Total learning time: 11.702 seconds
Total inference time: 3.329 seconds
AUC ROC: 0.574545


Results scoring model
   AUC ROC   = 0.591278
   AUC PR    = 0.676487
   CLL	      = -0.639356
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.182556
   F1        = 0.308748


Total scoring time: 5.49 seconds
Parameter learned model CLL: -0.639356


Structure after Parameter Learning
[['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [1.09e-06, 0, 180], 'false': [20.599, 896, 806]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 180], 'false': [20.599, 896, 806]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [5.84e-07, 0, 180], 'false': [20.599, 896, 806]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [3.72e-07, 0, 180], 'false': [20.599, 896, 806]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [3.63e-07, 0, 180], 'false': [20.599, 896, 806]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [3.7e-07, 0, 180], 'false': [20.599, 896, 806]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [3.04e-07, 0, 180], 'false': [20.599, 896, 806]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 180], 'false': [20.599, 896, 806]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 180], 'false': [20.599, 896, 806]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [8.16e-08, 0, 180], 'false': [20.599, 896, 806]}]]
[{'': [6.631732200427602e-15, 0.24930095374076655]}, {'': [-3.2369169073515675e-15, 0.24930095374077157]}, {'': [1.8947806286936005e-15, 0.2493009537407573]}, {'': [7.697546304067752e-16, 0.24930095374074257]}, {'': [7.302800339756585e-16, 0.2493009537407509]}, {'': [7.59885981298996e-16, 0.24930095374072775]}, {'': [5.131697536045168e-16, 0.24930095374074218]}, {'': [-1.7270135938613546e-16, 0.24930095374074102]}, {'': [-4.9343245538895844e-17, 0.2493009537407472]}, {'': [3.700743415417188e-17, 0.24930095374074976]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
1;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
2;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
3;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
4;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
5;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
6;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
7;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
8;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
9;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.8581489350995094;  // std dev = 1.09e-06, 180.000 (wgt'ed) examples reached here.  /* #pos=180 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then if ( title(F, E), venue(F, A) )
%   | | | then return 0.3404618602695754;  // std dev = 19.158, 1,470.000 (wgt'ed) examples reached here.  /* #neg=761 #pos=709 */
%   | | | else return 0.4735335504841268;  // std dev = 3.038, 39.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=24 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.37539031440985715;  // std dev = 2.691, 29.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=15 */
%   | | | else return 0.44148226843284566;  // std dev = 2.415, 24.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=14 */
%   | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | then if ( haswordtitle(J, K), haswordauthor(L, K) )
%   | | | then return 0.18314893509951125;  // std dev = 4.189, 80.000 (wgt'ed) examples reached here.  /* #neg=54 #pos=26 */
%   | | | else return 0.31968739663797385;  // std dev = 1.797, 13.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=6 */
%   | | else return 0.11346808403568258;  // std dev = 0.436, 47.000 (wgt'ed) examples reached here.  /* #neg=35 #pos=12 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.7194734122109567;  // std dev = 0.000, 180.000 (wgt'ed) examples reached here.  /* #pos=180 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then if ( title(F, E), venue(F, A) )
%   | | | then return 0.29377494946802557;  // std dev = 19.158, 1,470.000 (wgt'ed) examples reached here.  /* #neg=761 #pos=709 */
%   | | | else return 0.40564015880039006;  // std dev = 3.038, 39.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=24 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.3233014319993875;  // std dev = 2.691, 29.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=15 */
%   | | | else return 0.37885201797682083;  // std dev = 2.415, 24.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=14 */
%   | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | then if ( haswordtitle(J, K), haswordauthor(L, K) )
%   | | | then return 0.15936039521694467;  // std dev = 4.189, 80.000 (wgt'ed) examples reached here.  /* #neg=54 #pos=26 */
%   | | | else return 0.27615825449321707;  // std dev = 1.797, 13.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=6 */
%   | | else return 0.09908667735687045;  // std dev = 0.436, 47.000 (wgt'ed) examples reached here.  /* #neg=35 #pos=12 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.5553664367462833;  // std dev = 5.84e-07, 180.000 (wgt'ed) examples reached here.  /* #pos=180 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then if ( author(G, F), venue(G, B) )
%   | | | then return 0.5623783388331612;  // std dev = 1.549, 15.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=12 */
%   | | | else return 0.18813828708039168;  // std dev = 2.279, 21.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=9 */
%   | | else if ( haswordtitle(H, D) )
%   | | | then return 0.2442016901061046;  // std dev = 19.174, 1,474.000 (wgt'ed) examples reached here.  /* #neg=762 #pos=712 */
%   | | | else return 0.29736825830698776;  // std dev = 3.578, 52.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=29 */
%   | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | then if ( haswordauthor(K, I) )
%   | | | then return 0.03337080141875753;  // std dev = 1.247, 9.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | | | else return 0.16180914346930647;  // std dev = 4.381, 84.000 (wgt'ed) examples reached here.  /* #neg=54 #pos=30 */
%   | | else return 0.08557551131938379;  // std dev = 0.436, 47.000 (wgt'ed) examples reached here.  /* #neg=35 #pos=12 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.41751358415830964;  // std dev = 3.72e-07, 180.000 (wgt'ed) examples reached here.  /* #pos=180 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then if ( title(F, E), venue(F, A) )
%   | | | then return 0.1971154757183631;  // std dev = 19.143, 1,470.000 (wgt'ed) examples reached here.  /* #neg=761 #pos=709 */
%   | | | else return 0.2786877461148514;  // std dev = 3.036, 39.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=24 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.20884533372605227;  // std dev = 2.687, 29.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=15 */
%   | | | else return 0.24758460590574674;  // std dev = 2.415, 24.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=14 */
%   | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | then if ( haswordauthor(K, I) )
%   | | | then return 0.02820569163931931;  // std dev = 1.247, 9.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | | | else return 0.13516127695581484;  // std dev = 4.380, 84.000 (wgt'ed) examples reached here.  /* #neg=54 #pos=30 */
%   | | else return 0.07317232275555122;  // std dev = 0.436, 47.000 (wgt'ed) examples reached here.  /* #neg=35 #pos=12 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.3207118471601491;  // std dev = 3.63e-07, 180.000 (wgt'ed) examples reached here.  /* #pos=180 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then if ( title(F, E), venue(F, A) )
%   | | | then return 0.1553070800987356;  // std dev = 19.142, 1,470.000 (wgt'ed) examples reached here.  /* #neg=761 #pos=709 */
%   | | | else return 0.21392002140021796;  // std dev = 3.036, 39.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=24 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.16262333360230063;  // std dev = 2.686, 29.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=15 */
%   | | | else return 0.19033182334917617;  // std dev = 2.415, 24.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=14 */
%   | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | then if ( haswordtitle(J, K), haswordauthor(L, K) )
%   | | | then return 0.09093932723677489;  // std dev = 4.182, 80.000 (wgt'ed) examples reached here.  /* #neg=54 #pos=26 */
%   | | | else return 0.17396202346956033;  // std dev = 1.797, 13.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=6 */
%   | | else return 0.06201742410148328;  // std dev = 0.436, 47.000 (wgt'ed) examples reached here.  /* #neg=35 #pos=12 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.2551722425694888;  // std dev = 3.70e-07, 180.000 (wgt'ed) examples reached here.  /* #pos=180 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then if ( title(F, E), venue(F, B) )
%   | | | then return 0.11993704866525105;  // std dev = 19.079, 1,460.000 (wgt'ed) examples reached here.  /* #neg=755 #pos=705 */
%   | | | else return 0.1629852355815074;  // std dev = 3.404, 49.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=28 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.124592763040779;  // std dev = 2.686, 29.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=15 */
%   | | | else return 0.14412633350372786;  // std dev = 2.415, 24.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=14 */
%   | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | then if ( title(K, J), venue(K, B) )
%   | | | then return 0.10127647531613411;  // std dev = 3.995, 70.000 (wgt'ed) examples reached here.  /* #neg=45 #pos=25 */
%   | | | else return 0.027524470860182688;  // std dev = 2.170, 23.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=7 */
%   | | else return 0.05216237377562464;  // std dev = 0.436, 47.000 (wgt'ed) examples reached here.  /* #neg=35 #pos=12 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.20975771563253506;  // std dev = 3.04e-07, 180.000 (wgt'ed) examples reached here.  /* #pos=180 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then if ( title(F, E), venue(F, B) )
%   | | | then return 0.09179431922818687;  // std dev = 19.079, 1,460.000 (wgt'ed) examples reached here.  /* #neg=755 #pos=705 */
%   | | | else return 0.12345745326090293;  // std dev = 3.403, 49.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=28 */
%   | | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | | then return 0.10761519099514198;  // std dev = 2.773, 32.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=18 */
%   | | | else return 0.09040075721740978;  // std dev = 2.315, 21.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=11 */
%   | else if ( haswordvenue(A, I), haswordauthor(J, I) )
%   | | then return 0.0028117494974232685;  // std dev = 0.417, 9.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | | then return 0.0736809896563505;  // std dev = 4.373, 84.000 (wgt'ed) examples reached here.  /* #neg=54 #pos=30 */
%   | | | else return 0.04358728197535372;  // std dev = 2.989, 47.000 (wgt'ed) examples reached here.  /* #neg=35 #pos=12 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.17709649774527825;  // std dev = 0.000, 180.000 (wgt'ed) examples reached here.  /* #pos=180 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then if ( title(F, E), venue(F, A) )
%   | | | then return 0.06980090469675157;  // std dev = 19.142, 1,470.000 (wgt'ed) examples reached here.  /* #neg=761 #pos=709 */
%   | | | else return 0.0968563686977345;  // std dev = 3.026, 39.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=24 */
%   | | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | | then return 0.08090157206079734;  // std dev = 2.772, 32.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=18 */
%   | | | else return 0.06811946389855772;  // std dev = 2.315, 21.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=11 */
%   | else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | | then return 0.007731992471672762;  // std dev = 0.446, 7.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=2 */
%   | | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | | then return 0.056684910131717954;  // std dev = 4.257, 87.000 (wgt'ed) examples reached here.  /* #neg=60 #pos=27 */
%   | | | else return 0.035930326029487425;  // std dev = 3.179, 46.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=15 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.1527438580936715;  // std dev = 0.000, 180.000 (wgt'ed) examples reached here.  /* #pos=180 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then if ( haswordtitle(G, E), haswordtitle(G, D) )
%   | | | then return 0.1808567595475268;  // std dev = 2.738, 31.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=19 */
%   | | | else return -0.28972323527835353;  // std dev = 0.931, 7.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=1 */
%   | | else if ( haswordtitle(H, D) )
%   | | | then return 0.05189805764893905;  // std dev = 19.135, 1,472.000 (wgt'ed) examples reached here.  /* #neg=759 #pos=713 */
%   | | | else return 0.06710141386897185;  // std dev = 3.573, 52.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=29 */
%   | else if ( haswordvenue(A, I), haswordauthor(J, I) )
%   | | then return -0.007547091627272968;  // std dev = 0.417, 9.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | | then return 0.04953992471618677;  // std dev = 4.371, 84.000 (wgt'ed) examples reached here.  /* #neg=54 #pos=30 */
%   | | | else return 0.02673126100911639;  // std dev = 2.988, 47.000 (wgt'ed) examples reached here.  /* #neg=35 #pos=12 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.13400703000801098;  // std dev = 8.16e-08, 180.000 (wgt'ed) examples reached here.  /* #pos=180 */
%   else if ( haswordvenue(A, D), haswordtitle(E, D) )
%   | then if ( haswordtitle(E, F), haswordvenue(B, F) )
%   | | then if ( title(G, E), venue(G, A) )
%   | | | then return 0.039476900473245174;  // std dev = 19.131, 1,471.000 (wgt'ed) examples reached here.  /* #neg=762 #pos=709 */
%   | | | else return 0.05401958143993847;  // std dev = 4.704, 95.000 (wgt'ed) examples reached here.  /* #neg=49 #pos=46 */
%   | | else if ( title(H, E), venue(H, B) )
%   | | | then return 0.05526522472475734;  // std dev = 3.799, 65.000 (wgt'ed) examples reached here.  /* #neg=37 #pos=28 */
%   | | | else return -0.4658697953159976;  // std dev = 0.099, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | then if ( title(K, J), venue(K, A) )
%   | | | then return 0.0384820373261648;  // std dev = 3.470, 60.000 (wgt'ed) examples reached here.  /* #neg=40 #pos=20 */
%   | | | else return 0.14342441148844554;  // std dev = 1.030, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else return -0.281300750530212;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */


Results
   AUC ROC   = 0.663769
   AUC PR    = 0.691794
   CLL	      = -0.632561
   Precision = 0.744681 at threshold = 0.5
   Recall    = 0.190909
   F1        = 0.303907


Total learning time: 815.7090000000001 seconds
Total inference time: 7.801 seconds
AUC ROC: 0.663769


Results scoring model
   AUC ROC   = 0.631874
   AUC PR    = 0.706181
   CLL	      = -0.631482
   Precision = 0.886792 at threshold = 0.5
   Recall    = 0.238337
   F1        = 0.375699


Total scoring time: 32.759 seconds
Refined model CLL: -0.631482


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.663769
   AUC PR    = 0.691794
   CLL	      = -0.632561
   Precision = 0.744681 at threshold = 0.5
   Recall    = 0.190909
   F1        = 0.303907


Total learning time: 865.6600000000001 seconds
Total inference time: 7.801 seconds
AUC ROC: 0.663769
Total revision time: 865.6600000000001
Best scored revision CLL: -0.631482


Dataset: 3_imdb_cora, Fold: 5, Type: Transfer (trRDN-B), Time: 09:14:41
{'AUC ROC': 0.663769, 'AUC PR': 0.691794, 'CLL': -0.632561, 'Precision': [0.744681, 0.5], 'Recall': 0.190909, 'F1': 0.303907, 'Learning time': 865.6600000000001, 'Inference time': 7.801, 'parameter_0.4': {'AUC ROC': 0.574545, 'AUC PR': 0.655418, 'CLL': -0.651366, 'Precision': [1.0, 0.5], 'Recall': 0.149091, 'F1': 0.259494, 'Learning time': 11.702, 'Inference time': 3.329}}


Amount of data: 0.6
******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- actor(A), director(B).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- actor(A), director(B).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- actor(A), director(B).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- director(B), actor(A).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.8581489350995087;  // std dev = 1.07e-06, 260.000 (wgt'ed) examples reached here.  /* #pos=260 */
%   else return 0.3339679678608177;  // std dev = 25.288, 2,564.000 (wgt'ed) examples reached here.  /* #neg=1,344 #pos=1,220 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.7194734122109575;  // std dev = 0.000, 260.000 (wgt'ed) examples reached here.  /* #pos=260 */
%   else return 0.2882725579036811;  // std dev = 25.288, 2,564.000 (wgt'ed) examples reached here.  /* #neg=1,344 #pos=1,220 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.5553664367462832;  // std dev = 3.95e-07, 260.000 (wgt'ed) examples reached here.  /* #pos=260 */
%   else return 0.24036374491440696;  // std dev = 25.288, 2,564.000 (wgt'ed) examples reached here.  /* #neg=1,344 #pos=1,220 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.417513584158311;  // std dev = 0.000, 260.000 (wgt'ed) examples reached here.  /* #pos=260 */
%   else return 0.19439233960071362;  // std dev = 25.288, 2,564.000 (wgt'ed) examples reached here.  /* #neg=1,344 #pos=1,220 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.3207118471601502;  // std dev = 1.33e-07, 260.000 (wgt'ed) examples reached here.  /* #pos=260 */
%   else return 0.15347129820662375;  // std dev = 25.288, 2,564.000 (wgt'ed) examples reached here.  /* #neg=1,344 #pos=1,220 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.25517224256948795;  // std dev = 3.26e-07, 260.000 (wgt'ed) examples reached here.  /* #pos=260 */
%   else return 0.11907681132123474;  // std dev = 25.288, 2,564.000 (wgt'ed) examples reached here.  /* #neg=1,344 #pos=1,220 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.20975771563253484;  // std dev = 2.86e-07, 260.000 (wgt'ed) examples reached here.  /* #pos=260 */
%   else return 0.09131054220583992;  // std dev = 25.288, 2,564.000 (wgt'ed) examples reached here.  /* #neg=1,344 #pos=1,220 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.17709649774527722;  // std dev = 4.21e-08, 260.000 (wgt'ed) examples reached here.  /* #pos=260 */
%   else return 0.06948584034730564;  // std dev = 25.288, 2,564.000 (wgt'ed) examples reached here.  /* #neg=1,344 #pos=1,220 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.15274385809367158;  // std dev = 0.000, 260.000 (wgt'ed) examples reached here.  /* #pos=260 */
%   else return 0.052621032493613405;  // std dev = 25.288, 2,564.000 (wgt'ed) examples reached here.  /* #neg=1,344 #pos=1,220 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.1340070300080112;  // std dev = 0.000, 260.000 (wgt'ed) examples reached here.  /* #pos=260 */
%   else return 0.03972702729821331;  // std dev = 25.288, 2,564.000 (wgt'ed) examples reached here.  /* #neg=1,344 #pos=1,220 */


Results
   AUC ROC   = 0.574545
   AUC PR    = 0.655418
   CLL	      = -0.651048
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.149091
   F1        = 0.259494


Total learning time: 12.439 seconds
Total inference time: 3.305 seconds
AUC ROC: 0.574545


Results scoring model
   AUC ROC   = 0.587838
   AUC PR    = 0.672417
   CLL	      = -0.641595
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.175676
   F1        = 0.298851


Total scoring time: 5.737 seconds
Parameter learned model CLL: -0.641595


Structure after Parameter Learning
[['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [1.07e-06, 0, 260], 'false': [25.288, 1, 1]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 260], 'false': [25.288, 1, 1]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [3.95e-07, 0, 260], 'false': [25.288, 1, 1]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 260], 'false': [25.288, 1, 1]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [1.33e-07, 0, 260], 'false': [25.288, 1, 1]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [3.26e-07, 0, 260], 'false': [25.288, 1, 1]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [2.86e-07, 0, 260], 'false': [25.288, 1, 1]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [4.21e-08, 0, 260], 'false': [25.288, 1, 1]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 260], 'false': [25.288, 1, 1]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 260], 'false': [25.288, 1, 1]}]]
[{'': [4.372570681600617e-15, 0.24941528082342632]}, {'': [-4.481884948640632e-15, 0.24941528082342157]}, {'': [6.012284687200848e-16, 0.24941528082341383]}, {'': [-4.099285014000578e-16, 0.24941528082340272]}, {'': [6.832141690000964e-17, 0.2494152808233981]}, {'': [4.099285014000578e-16, 0.24941528082341607]}, {'': [3.1427851774004433e-16, 0.24941528082340525]}, {'': [6.832141690000964e-18, 0.24941528082338157]}, {'': [-1.708035422500241e-16, 0.24941528082341524]}, {'': [-3.416070845000482e-17, 0.24941528082339018]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
1;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
2;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
3;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
4;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
5;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
6;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
7;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
8;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
9;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.8581489350995087;  // std dev = 1.07e-06, 260.000 (wgt'ed) examples reached here.  /* #pos=260 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then if ( title(F, E), venue(F, B) )
%   | | | then return 0.3434565567707653;  // std dev = 23.324, 2,178.000 (wgt'ed) examples reached here.  /* #neg=1,121 #pos=1,057 */
%   | | | else return 0.46790503266048855;  // std dev = 4.417, 82.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=50 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.4478925248431012;  // std dev = 3.072, 39.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=23 */
%   | | | else return 0.45814893509951143;  // std dev = 3.098, 40.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=24 */
%   | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | then if ( haswordtitle(J, K), haswordauthor(L, K) )
%   | | | then return 0.13845196540254118;  // std dev = 5.160, 132.000 (wgt'ed) examples reached here.  /* #neg=95 #pos=37 */
%   | | | else return 0.28672036367094095;  // std dev = 2.268, 21.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=9 */
%   | | else return 0.13592671287728994;  // std dev = 0.448, 72.000 (wgt'ed) examples reached here.  /* #neg=52 #pos=20 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.7194734122109575;  // std dev = 0.000, 260.000 (wgt'ed) examples reached here.  /* #pos=260 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then if ( title(F, E), venue(F, A) )
%   | | | then return 0.29626046234121095;  // std dev = 23.360, 2,185.000 (wgt'ed) examples reached here.  /* #neg=1,124 #pos=1,061 */
%   | | | else return 0.4121826607342386;  // std dev = 4.215, 75.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=46 */
%   | | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | | then return 0.3851451358573997;  // std dev = 3.439, 49.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=29 */
%   | | | else return 0.39413800553636763;  // std dev = 2.685, 30.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=18 */
%   | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | then if ( haswordtitle(J, K), haswordauthor(L, K) )
%   | | | then return 0.12074872914954243;  // std dev = 5.160, 132.000 (wgt'ed) examples reached here.  /* #neg=95 #pos=37 */
%   | | | else return 0.24811816884741297;  // std dev = 2.268, 21.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=9 */
%   | | else return 0.11856181366859968;  // std dev = 0.448, 72.000 (wgt'ed) examples reached here.  /* #neg=52 #pos=20 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.5553664367462832;  // std dev = 3.95e-07, 260.000 (wgt'ed) examples reached here.  /* #pos=260 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then if ( title(F, E), venue(F, B) )
%   | | | then return 0.24640290242746257;  // std dev = 23.322, 2,178.000 (wgt'ed) examples reached here.  /* #neg=1,121 #pos=1,057 */
%   | | | else return 0.33488721822707107;  // std dev = 4.414, 82.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=50 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.31315041039343006;  // std dev = 3.070, 39.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=23 */
%   | | | else return 0.3221907773243978;  // std dev = 3.100, 40.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=24 */
%   | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | then if ( haswordtitle(J, K), haswordauthor(L, K) )
%   | | | then return 0.10388392097328403;  // std dev = 5.160, 132.000 (wgt'ed) examples reached here.  /* #neg=95 #pos=37 */
%   | | | else return 0.20848477447886868;  // std dev = 2.268, 21.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=9 */
%   | | else return 0.10204228120178899;  // std dev = 0.448, 72.000 (wgt'ed) examples reached here.  /* #neg=52 #pos=20 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.417513584158311;  // std dev = 0.000, 260.000 (wgt'ed) examples reached here.  /* #pos=260 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then if ( title(F, E), venue(F, A) )
%   | | | then return 0.1986290754678494;  // std dev = 23.357, 2,185.000 (wgt'ed) examples reached here.  /* #neg=1,124 #pos=1,061 */
%   | | | else return 0.2738511792251869;  // std dev = 4.213, 75.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=46 */
%   | | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | | then return 0.24668288083225742;  // std dev = 3.437, 49.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=29 */
%   | | | else return 0.25496829354215683;  // std dev = 2.688, 30.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=18 */
%   | else if ( haswordvenue(A, I), haswordauthor(J, I) )
%   | | then return -0.0381773196376599;  // std dev = 0.361, 13.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=2 */
%   | | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | | then return 0.11237400356978546;  // std dev = 5.471, 140.000 (wgt'ed) examples reached here.  /* #neg=96 #pos=44 */
%   | | | else return 0.08676907870746657;  // std dev = 3.801, 72.000 (wgt'ed) examples reached here.  /* #neg=52 #pos=20 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.3207118471601502;  // std dev = 1.33e-07, 260.000 (wgt'ed) examples reached here.  /* #pos=260 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then if ( title(F, E), venue(F, A) )
%   | | | then return 0.15634390913164922;  // std dev = 23.357, 2,185.000 (wgt'ed) examples reached here.  /* #neg=1,124 #pos=1,061 */
%   | | | else return 0.21020027268560182;  // std dev = 4.213, 75.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=46 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.1875874808643197;  // std dev = 3.068, 39.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=23 */
%   | | | else return 0.1951355660437101;  // std dev = 3.102, 40.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=24 */
%   | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | then if ( haswordauthor(K, I) )
%   | | | then return -0.019503115171069615;  // std dev = 1.291, 12.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=2 */
%   | | | else return 0.09174166606114276;  // std dev = 5.477, 141.000 (wgt'ed) examples reached here.  /* #neg=97 #pos=44 */
%   | | else return 0.07300063402786477;  // std dev = 0.448, 72.000 (wgt'ed) examples reached here.  /* #neg=52 #pos=20 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.25517224256948795;  // std dev = 3.26e-07, 260.000 (wgt'ed) examples reached here.  /* #pos=260 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then if ( title(F, E), venue(F, B) )
%   | | | then return 0.12073017020825343;  // std dev = 23.319, 2,178.000 (wgt'ed) examples reached here.  /* #neg=1,121 #pos=1,057 */
%   | | | else return 0.16150351086097042;  // std dev = 4.413, 82.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=50 */
%   | | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | | then return 0.14189515217674614;  // std dev = 3.435, 49.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=29 */
%   | | | else return 0.14906380634597258;  // std dev = 2.690, 30.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=18 */
%   | else if ( haswordvenue(A, I), haswordauthor(J, I) )
%   | | then return -0.030712800798207835;  // std dev = 0.361, 13.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=2 */
%   | | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | | then return 0.0776133112445796;  // std dev = 5.470, 140.000 (wgt'ed) examples reached here.  /* #neg=96 #pos=44 */
%   | | | else return 0.06085662941226845;  // std dev = 3.801, 72.000 (wgt'ed) examples reached here.  /* #neg=52 #pos=20 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.20975771563253484;  // std dev = 2.86e-07, 260.000 (wgt'ed) examples reached here.  /* #pos=260 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then if ( title(F, E), venue(F, B) )
%   | | | then return 0.09233752554011014;  // std dev = 23.319, 2,178.000 (wgt'ed) examples reached here.  /* #neg=1,121 #pos=1,057 */
%   | | | else return 0.12145931591153479;  // std dev = 4.413, 82.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=50 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.10538844781093828;  // std dev = 3.066, 39.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=23 */
%   | | | else return 0.11178124973179351;  // std dev = 3.104, 40.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=24 */
%   | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | then if ( haswordtitle(J, K), haswordauthor(L, K) )
%   | | | then return 0.04662583902487649;  // std dev = 5.146, 132.000 (wgt'ed) examples reached here.  /* #neg=95 #pos=37 */
%   | | | else return 0.11316163866886972;  // std dev = 2.268, 21.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=9 */
%   | | else return 0.05034122903856467;  // std dev = 0.448, 72.000 (wgt'ed) examples reached here.  /* #neg=52 #pos=20 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.17709649774527722;  // std dev = 4.21e-08, 260.000 (wgt'ed) examples reached here.  /* #pos=260 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then if ( title(F, E), venue(F, A) )
%   | | | then return 0.0700407838471974;  // std dev = 23.355, 2,185.000 (wgt'ed) examples reached here.  /* #neg=1,124 #pos=1,061 */
%   | | | else return 0.09524458046784277;  // std dev = 4.215, 75.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=46 */
%   | | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | | then return 0.07913892207479127;  // std dev = 3.434, 49.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=29 */
%   | | | else return 0.0852958385987249;  // std dev = 2.691, 30.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=18 */
%   | else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | | then return 0.018340050623427036;  // std dev = 0.450, 11.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=3 */
%   | | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | | then return 0.043188967599751715;  // std dev = 5.439, 144.000 (wgt'ed) examples reached here.  /* #neg=101 #pos=43 */
%   | | | else return 0.049311183503511435;  // std dev = 3.780, 70.000 (wgt'ed) examples reached here.  /* #neg=50 #pos=20 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.15274385809367158;  // std dev = 0.000, 260.000 (wgt'ed) examples reached here.  /* #pos=260 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then if ( author(G, F), venue(G, B) )
%   | | | then return 0.31851589871678615;  // std dev = 1.936, 20.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=15 */
%   | | | else return -0.06374022565300128;  // std dev = 2.629, 29.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=11 */
%   | | else if ( haswordtitle(H, D) )
%   | | | then return 0.052628636586003225;  // std dev = 23.480, 2,213.000 (wgt'ed) examples reached here.  /* #neg=1,131 #pos=1,082 */
%   | | | else return 0.0635383195558844;  // std dev = 4.304, 77.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=46 */
%   | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | then if ( title(K, J), venue(K, B) )
%   | | | then return 0.04980128628395194;  // std dev = 4.980, 118.000 (wgt'ed) examples reached here.  /* #neg=82 #pos=36 */
%   | | | else return -0.005721192541292404;  // std dev = 2.603, 35.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=10 */
%   | | else return 0.032515868900657795;  // std dev = 0.448, 72.000 (wgt'ed) examples reached here.  /* #neg=52 #pos=20 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.1340070300080112;  // std dev = 0.000, 260.000 (wgt'ed) examples reached here.  /* #pos=260 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then if ( title(F, E), venue(F, A) )
%   | | | then return 0.03971751950175406;  // std dev = 23.340, 2,185.000 (wgt'ed) examples reached here.  /* #neg=1,124 #pos=1,061 */
%   | | | else return 0.05904301128074626;  // std dev = 4.210, 75.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=46 */
%   | | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | | then return 0.04426659121800957;  // std dev = 3.428, 49.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=29 */
%   | | | else return 0.04932576790633189;  // std dev = 2.696, 30.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=18 */
%   | else if ( haswordvenue(A, I), haswordauthor(J, I) )
%   | | then return -0.04094324062177312;  // std dev = 0.362, 13.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=2 */
%   | | else if ( haswordvenue(B, K), haswordauthor(L, K) )
%   | | | then return 0.006987052467632002;  // std dev = 1.489, 11.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=3 */
%   | | | else return 0.03455949532713667;  // std dev = 6.486, 201.000 (wgt'ed) examples reached here.  /* #neg=140 #pos=61 */


Results
   AUC ROC   = 0.656775
   AUC PR    = 0.692071
   CLL	      = -0.633042
   Precision = 0.725 at threshold = 0.5
   Recall    = 0.210909
   F1        = 0.326761


Total learning time: 1203.983 seconds
Total inference time: 7.822 seconds
AUC ROC: 0.656775


Results scoring model
   AUC ROC   = 0.630872
   AUC PR    = 0.702298
   CLL	      = -0.632827
   Precision = 0.82766 at threshold = 0.5
   Recall    = 0.262838
   F1        = 0.398974


Total scoring time: 37.491 seconds
Refined model CLL: -0.632827


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.656775
   AUC PR    = 0.692071
   CLL	      = -0.633042
   Precision = 0.725 at threshold = 0.5
   Recall    = 0.210909
   F1        = 0.326761


Total learning time: 1259.6499999999999 seconds
Total inference time: 7.822 seconds
AUC ROC: 0.656775
Total revision time: 1259.6499999999999
Best scored revision CLL: -0.632827


Dataset: 3_imdb_cora, Fold: 5, Type: Transfer (trRDN-B), Time: 09:35:53
{'AUC ROC': 0.656775, 'AUC PR': 0.692071, 'CLL': -0.633042, 'Precision': [0.725, 0.5], 'Recall': 0.210909, 'F1': 0.326761, 'Learning time': 1259.6499999999999, 'Inference time': 7.822, 'parameter_0.6': {'AUC ROC': 0.574545, 'AUC PR': 0.655418, 'CLL': -0.651048, 'Precision': [1.0, 0.5], 'Recall': 0.149091, 'F1': 0.259494, 'Learning time': 12.439, 'Inference time': 3.305}}


Amount of data: 0.8
******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- actor(A), director(B).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- actor(A), director(B).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- actor(A), director(B).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- director(B), actor(A).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.8581489350995084;  // std dev = 1.04e-06, 329.000 (wgt'ed) examples reached here.  /* #pos=329 */
%   else return 0.3366122645523594;  // std dev = 29.282, 3,436.000 (wgt'ed) examples reached here.  /* #neg=1,792 #pos=1,644 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.719473412210958;  // std dev = 0.000, 329.000 (wgt'ed) examples reached here.  /* #pos=329 */
%   else return 0.2905136027789279;  // std dev = 29.282, 3,436.000 (wgt'ed) examples reached here.  /* #neg=1,792 #pos=1,644 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.5553664367462832;  // std dev = 0.000, 329.000 (wgt'ed) examples reached here.  /* #pos=329 */
%   else return 0.24212746519506173;  // std dev = 29.282, 3,436.000 (wgt'ed) examples reached here.  /* #neg=1,792 #pos=1,644 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.4175135841583117;  // std dev = 0.000, 329.000 (wgt'ed) examples reached here.  /* #pos=329 */
%   else return 0.19569007303296554;  // std dev = 29.282, 3,436.000 (wgt'ed) examples reached here.  /* #neg=1,792 #pos=1,644 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.32071184716015116;  // std dev = 0.000, 329.000 (wgt'ed) examples reached here.  /* #pos=329 */
%   else return 0.15437725455726012;  // std dev = 29.282, 3,436.000 (wgt'ed) examples reached here.  /* #neg=1,792 #pos=1,644 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.2551722425694875;  // std dev = 3.91e-07, 329.000 (wgt'ed) examples reached here.  /* #pos=329 */
%   else return 0.11968703690112938;  // std dev = 29.282, 3,436.000 (wgt'ed) examples reached here.  /* #neg=1,792 #pos=1,644 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.2097577156325347;  // std dev = 2.49e-07, 329.000 (wgt'ed) examples reached here.  /* #pos=329 */
%   else return 0.09171288102627774;  // std dev = 29.282, 3,436.000 (wgt'ed) examples reached here.  /* #neg=1,792 #pos=1,644 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.1770964977452765;  // std dev = 2.83e-07, 329.000 (wgt'ed) examples reached here.  /* #pos=329 */
%   else return 0.06974817935791071;  // std dev = 29.282, 3,436.000 (wgt'ed) examples reached here.  /* #neg=1,792 #pos=1,644 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.1527438580936716;  // std dev = 0.000, 329.000 (wgt'ed) examples reached here.  /* #pos=329 */
%   else return 0.05279125062468694;  // std dev = 29.282, 3,436.000 (wgt'ed) examples reached here.  /* #neg=1,792 #pos=1,644 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.13400703000801184;  // std dev = 0.000, 329.000 (wgt'ed) examples reached here.  /* #pos=329 */
%   else return 0.039837269288276286;  // std dev = 29.282, 3,436.000 (wgt'ed) examples reached here.  /* #neg=1,792 #pos=1,644 */


Results
   AUC ROC   = 0.574545
   AUC PR    = 0.655418
   CLL	      = -0.6507
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.149091
   F1        = 0.259494


Total learning time: 15.688 seconds
Total inference time: 3.242 seconds
AUC ROC: 0.574545


Results scoring model
   AUC ROC   = 0.583376
   AUC PR    = 0.666853
   CLL	      = -0.644477
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.166751
   F1        = 0.285838


Total scoring time: 6.324 seconds
Parameter learned model CLL: -0.644477


Structure after Parameter Learning
[['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [1.04e-06, 0, 329], 'false': [29.282, 1, 1]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 329], 'false': [29.282, 1, 1]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 329], 'false': [29.282, 1, 1]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 329], 'false': [29.282, 1, 1]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 329], 'false': [29.282, 1, 1]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [3.91e-07, 0, 329], 'false': [29.282, 1, 1]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [2.49e-07, 0, 329], 'false': [29.282, 1, 1]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [2.83e-07, 0, 329], 'false': [29.282, 1, 1]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 329], 'false': [29.282, 1, 1]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 329], 'false': [29.282, 1, 1]}]]
[{'': [3.282750633298943e-15, 0.24953617182170165]}, {'': [-5.0969022990694116e-15, 0.24953617182172205]}, {'': [-5.18329047362991e-16, 0.24953617182173599]}, {'': [-9.71866963805608e-16, 0.2495361718217807]}, {'': [-6.695083528438634e-16, 0.24953617182172838]}, {'': [4.643364382626794e-16, 0.24953617182175822]}, {'': [1.8897413185109048e-16, 0.2495361718217782]}, {'': [2.42966740951402e-16, 0.2495361718217565]}, {'': [-2.2676895822130855e-16, 0.24953617182172316]}, {'': [-2.1327080594623068e-16, 0.249536171821747]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
1;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
2;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
3;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
4;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
5;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
6;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
7;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
8;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
9;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.8581489350995084;  // std dev = 1.04e-06, 329.000 (wgt'ed) examples reached here.  /* #pos=329 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then if ( title(F, E), venue(F, A) )
%   | | | then return 0.3477073055205959;  // std dev = 27.017, 2,921.000 (wgt'ed) examples reached here.  /* #neg=1,491 #pos=1,430 */
%   | | | else return 0.4601897514260438;  // std dev = 4.846, 98.000 (wgt'ed) examples reached here.  /* #neg=39 #pos=59 */
%   | | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | | then return 0.478838590271925;  // std dev = 3.695, 58.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=36 */
%   | | | else return 0.443514788758048;  // std dev = 3.155, 41.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=24 */
%   | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | then if ( haswordtitle(J, K), haswordvenue(A, K) )
%   | | | then return 0.20128619000147172;  // std dev = 4.795, 102.000 (wgt'ed) examples reached here.  /* #neg=67 #pos=35 */
%   | | | else return 0.14386322081379663;  // std dev = 4.781, 112.000 (wgt'ed) examples reached here.  /* #neg=80 #pos=32 */
%   | | else return 0.1273797043302805;  // std dev = 0.444, 104.000 (wgt'ed) examples reached here.  /* #neg=76 #pos=28 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.719473412210958;  // std dev = 0.000, 329.000 (wgt'ed) examples reached here.  /* #pos=329 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then if ( title(F, E), venue(F, A) )
%   | | | then return 0.2999094015557531;  // std dev = 27.017, 2,921.000 (wgt'ed) examples reached here.  /* #neg=1,491 #pos=1,430 */
%   | | | else return 0.3944995514824346;  // std dev = 4.846, 98.000 (wgt'ed) examples reached here.  /* #neg=39 #pos=59 */
%   | | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | | then return 0.4100645251105146;  // std dev = 3.695, 58.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=36 */
%   | | | else return 0.3805537122526917;  // std dev = 3.155, 41.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=24 */
%   | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | then if ( haswordtitle(J, K), haswordvenue(A, K) )
%   | | | then return 0.17497580047046615;  // std dev = 4.795, 102.000 (wgt'ed) examples reached here.  /* #neg=67 #pos=35 */
%   | | | else return 0.12543301544918356;  // std dev = 4.781, 112.000 (wgt'ed) examples reached here.  /* #neg=80 #pos=32 */
%   | | else return 0.11115563121567716;  // std dev = 0.444, 104.000 (wgt'ed) examples reached here.  /* #neg=76 #pos=28 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.5553664367462832;  // std dev = 0.000, 329.000 (wgt'ed) examples reached here.  /* #pos=329 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then if ( title(F, E), venue(F, A) )
%   | | | then return 0.24950433627650118;  // std dev = 27.017, 2,921.000 (wgt'ed) examples reached here.  /* #neg=1,491 #pos=1,430 */
%   | | | else return 0.3222119605379441;  // std dev = 4.846, 98.000 (wgt'ed) examples reached here.  /* #neg=39 #pos=59 */
%   | | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | | then return 0.33391422199331877;  // std dev = 3.695, 58.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=36 */
%   | | | else return 0.3116660449770904;  // std dev = 3.155, 41.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=24 */
%   | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | then if ( title(K, J), venue(K, A) )
%   | | | then return 0.14210468039811555;  // std dev = 5.856, 157.000 (wgt'ed) examples reached here.  /* #neg=106 #pos=51 */
%   | | | else return 0.08719341664538365;  // std dev = 3.395, 57.000 (wgt'ed) examples reached here.  /* #neg=41 #pos=16 */
%   | | else return 0.09579419157416352;  // std dev = 0.444, 104.000 (wgt'ed) examples reached here.  /* #neg=76 #pos=28 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.4175135841583117;  // std dev = 0.000, 329.000 (wgt'ed) examples reached here.  /* #pos=329 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then if ( title(F, E), venue(F, A) )
%   | | | then return 0.20109914002848425;  // std dev = 27.017, 2,921.000 (wgt'ed) examples reached here.  /* #neg=1,491 #pos=1,430 */
%   | | | else return 0.25296379568341093;  // std dev = 4.846, 98.000 (wgt'ed) examples reached here.  /* #neg=39 #pos=59 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.26399604795054016;  // std dev = 3.595, 54.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=33 */
%   | | | else return 0.2434987291288229;  // std dev = 3.267, 45.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=27 */
%   | else if ( haswordvenue(A, I), haswordauthor(J, I) )
%   | | then return -0.04628741198021275;  // std dev = 0.371, 18.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=3 */
%   | | else if ( haswordvenue(B, K), haswordauthor(L, K) )
%   | | | then return 0.0073603175409332495;  // std dev = 1.533, 14.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=3 */
%   | | | else return 0.11266419077071564;  // std dev = 7.812, 286.000 (wgt'ed) examples reached here.  /* #neg=197 #pos=89 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.32071184716015116;  // std dev = 0.000, 329.000 (wgt'ed) examples reached here.  /* #pos=329 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then if ( title(F, E), venue(F, A) )
%   | | | then return 0.15814063265356518;  // std dev = 27.017, 2,921.000 (wgt'ed) examples reached here.  /* #neg=1,491 #pos=1,430 */
%   | | | else return 0.19353240082846096;  // std dev = 4.846, 98.000 (wgt'ed) examples reached here.  /* #neg=39 #pos=59 */
%   | | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | | then return 0.20162354050852851;  // std dev = 3.699, 58.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=36 */
%   | | | else return 0.18495726995012415;  // std dev = 3.150, 41.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=24 */
%   | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | then if ( haswordtitle(J, K), haswordvenue(A, K) )
%   | | | then return 0.11761875972951052;  // std dev = 4.771, 102.000 (wgt'ed) examples reached here.  /* #neg=67 #pos=35 */
%   | | | else return 0.06810295455873627;  // std dev = 4.779, 112.000 (wgt'ed) examples reached here.  /* #neg=80 #pos=32 */
%   | | else return 0.06432703972407786;  // std dev = 0.443, 104.000 (wgt'ed) examples reached here.  /* #neg=76 #pos=28 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.2551722425694875;  // std dev = 3.91e-07, 329.000 (wgt'ed) examples reached here.  /* #pos=329 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then if ( title(F, E), venue(F, B) )
%   | | | then return 0.12204621203592898;  // std dev = 26.989, 2,917.000 (wgt'ed) examples reached here.  /* #neg=1,486 #pos=1,431 */
%   | | | else return 0.15002408980516083;  // std dev = 4.996, 102.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=58 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.15519172077812668;  // std dev = 3.599, 54.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=33 */
%   | | | else return 0.13696707750433892;  // std dev = 3.262, 45.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=27 */
%   | else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | | then return -0.012100370451529131;  // std dev = 0.409, 14.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=3 */
%   | | else if ( haswordvenue(A, K), haswordauthor(L, K) )
%   | | | then return -0.05755306422753608;  // std dev = 1.572, 18.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=3 */
%   | | | else return 0.08015651090292189;  // std dev = 7.805, 286.000 (wgt'ed) examples reached here.  /* #neg=197 #pos=89 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.2097577156325347;  // std dev = 2.49e-07, 329.000 (wgt'ed) examples reached here.  /* #pos=329 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then if ( title(F, E), venue(F, B) )
%   | | | then return 0.09323052878665249;  // std dev = 26.989, 2,917.000 (wgt'ed) examples reached here.  /* #neg=1,486 #pos=1,431 */
%   | | | else return 0.11342718888948493;  // std dev = 4.996, 102.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=58 */
%   | | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | | then return 0.11612548195131217;  // std dev = 3.702, 58.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=36 */
%   | | | else return 0.1020415398471693;  // std dev = 3.145, 41.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=24 */
%   | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | then if ( haswordtitle(J, K), haswordauthor(L, K) )
%   | | | then return 0.0346238609141393;  // std dev = 5.842, 173.000 (wgt'ed) examples reached here.  /* #neg=126 #pos=47 */
%   | | | else return 0.22754397635235382;  // std dev = 2.816, 32.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=16 */
%   | | else if ( haswordvenue(B, M), haswordauthor(N, M) )
%   | | | then return -0.20994844840983387;  // std dev = 5.27e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.04663359467714532;  // std dev = 4.764, 110.000 (wgt'ed) examples reached here.  /* #neg=78 #pos=32 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.1770964977452765;  // std dev = 2.83e-07, 329.000 (wgt'ed) examples reached here.  /* #pos=329 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then if ( title(F, E), venue(F, B) )
%   | | | then return 0.07071634843599112;  // std dev = 26.989, 2,917.000 (wgt'ed) examples reached here.  /* #neg=1,486 #pos=1,431 */
%   | | | else return 0.0854142568491885;  // std dev = 4.996, 102.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=58 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.08975271222158293;  // std dev = 3.602, 54.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=33 */
%   | | | else return 0.07435549868036215;  // std dev = 3.258, 45.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=27 */
%   | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | then if ( haswordtitle(J, K), haswordauthor(L, K) )
%   | | | then return 0.028315670732349186;  // std dev = 5.842, 173.000 (wgt'ed) examples reached here.  /* #neg=126 #pos=47 */
%   | | | else return 0.18020503634854415;  // std dev = 2.815, 32.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=16 */
%   | | else return 0.032210486567304124;  // std dev = 0.449, 113.000 (wgt'ed) examples reached here.  /* #neg=81 #pos=32 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.1527438580936716;  // std dev = 0.000, 329.000 (wgt'ed) examples reached here.  /* #pos=329 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then if ( title(F, E), venue(F, A) )
%   | | | then return 0.05338749937155548;  // std dev = 27.016, 2,921.000 (wgt'ed) examples reached here.  /* #neg=1,491 #pos=1,430 */
%   | | | else return 0.06530499946640099;  // std dev = 4.848, 98.000 (wgt'ed) examples reached here.  /* #neg=39 #pos=59 */
%   | | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | | then return 0.06738961440170291;  // std dev = 3.704, 58.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=36 */
%   | | | else return 0.054798390616861786;  // std dev = 3.141, 41.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=24 */
%   | else if ( haswordvenue(A, I), haswordauthor(J, I) )
%   | | then return -0.05849058285389001;  // std dev = 0.370, 18.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=3 */
%   | | else if ( haswordvenue(B, K), haswordauthor(L, K) )
%   | | | then return -0.01783773820263892;  // std dev = 1.528, 14.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=3 */
%   | | | else return 0.044471727992084965;  // std dev = 7.761, 286.000 (wgt'ed) examples reached here.  /* #neg=197 #pos=89 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.13400703000801184;  // std dev = 0.000, 329.000 (wgt'ed) examples reached here.  /* #pos=329 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then if ( title(F, E), venue(F, B) )
%   | | | then return 0.040197550534948966;  // std dev = 26.989, 2,917.000 (wgt'ed) examples reached here.  /* #neg=1,486 #pos=1,431 */
%   | | | else return 0.049310142086687346;  // std dev = 4.997, 102.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=58 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.05274460748234513;  // std dev = 3.604, 54.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=33 */
%   | | | else return 0.039702267193854675;  // std dev = 3.256, 45.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=27 */
%   | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | then if ( haswordtitle(J, K), haswordauthor(L, K) )
%   | | | then return 0.017206757940274563;  // std dev = 5.838, 173.000 (wgt'ed) examples reached here.  /* #neg=126 #pos=47 */
%   | | | else return 0.12993190794349121;  // std dev = 2.812, 32.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=16 */
%   | | else return 0.017782701714801626;  // std dev = 0.449, 113.000 (wgt'ed) examples reached here.  /* #neg=81 #pos=32 */


Results
   AUC ROC   = 0.657796
   AUC PR    = 0.697424
   CLL	      = -0.631974
   Precision = 0.854701 at threshold = 0.5
   Recall    = 0.181818
   F1        = 0.29985


Total learning time: 1632.464 seconds
Total inference time: 8.521 seconds
AUC ROC: 0.657796


Results scoring model
   AUC ROC   = 0.621762
   AUC PR    = 0.692372
   CLL	      = -0.635945
   Precision = 0.851711 at threshold = 0.5
   Recall    = 0.227065
   F1        = 0.358543


Total scoring time: 51.535 seconds
Refined model CLL: -0.635945


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.657796
   AUC PR    = 0.697424
   CLL	      = -0.631974
   Precision = 0.854701 at threshold = 0.5
   Recall    = 0.181818
   F1        = 0.29985


Total learning time: 1706.011 seconds
Total inference time: 8.521 seconds
AUC ROC: 0.657796
Total revision time: 1706.011
Best scored revision CLL: -0.635945


Dataset: 3_imdb_cora, Fold: 5, Type: Transfer (trRDN-B), Time: 10:04:33
{'AUC ROC': 0.657796, 'AUC PR': 0.697424, 'CLL': -0.631974, 'Precision': [0.854701, 0.5], 'Recall': 0.181818, 'F1': 0.29985, 'Learning time': 1706.011, 'Inference time': 8.521, 'parameter_0.8': {'AUC ROC': 0.574545, 'AUC PR': 0.655418, 'CLL': -0.6507, 'Precision': [1.0, 0.5], 'Recall': 0.149091, 'F1': 0.259494, 'Learning time': 15.688, 'Inference time': 3.242}}


Amount of data: 1.0
******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- actor(A), director(B).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- actor(A), director(B).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- actor(A), director(B).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- director(B), actor(A).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.8581489350995082;  // std dev = 1.72e-06, 413.000 (wgt'ed) examples reached here.  /* #pos=413 */
%   else return 0.3364908074795724;  // std dev = 32.734, 4,294.000 (wgt'ed) examples reached here.  /* #neg=2,240 #pos=2,054 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.7194734122109582;  // std dev = 0.000, 413.000 (wgt'ed) examples reached here.  /* #pos=413 */
%   else return 0.29041068234393913;  // std dev = 32.734, 4,294.000 (wgt'ed) examples reached here.  /* #neg=2,240 #pos=2,054 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.555366436746283;  // std dev = 0.000, 413.000 (wgt'ed) examples reached here.  /* #pos=413 */
%   else return 0.24204650165369784;  // std dev = 32.734, 4,294.000 (wgt'ed) examples reached here.  /* #neg=2,240 #pos=2,054 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.4175135841583122;  // std dev = 0.000, 413.000 (wgt'ed) examples reached here.  /* #pos=413 */
%   else return 0.19563053884674722;  // std dev = 32.734, 4,294.000 (wgt'ed) examples reached here.  /* #neg=2,240 #pos=2,054 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.3207118471601514;  // std dev = 0.000, 413.000 (wgt'ed) examples reached here.  /* #pos=413 */
%   else return 0.1543357198396218;  // std dev = 32.734, 4,294.000 (wgt'ed) examples reached here.  /* #neg=2,240 #pos=2,054 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.2551722425694871;  // std dev = 4.42e-07, 413.000 (wgt'ed) examples reached here.  /* #pos=413 */
%   else return 0.11965907145420338;  // std dev = 32.734, 4,294.000 (wgt'ed) examples reached here.  /* #neg=2,240 #pos=2,054 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.2097577156325346;  // std dev = 2.46e-07, 413.000 (wgt'ed) examples reached here.  /* #pos=413 */
%   else return 0.0916944416694111;  // std dev = 32.734, 4,294.000 (wgt'ed) examples reached here.  /* #neg=2,240 #pos=2,054 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.17709649774527705;  // std dev = 7.30e-08, 413.000 (wgt'ed) examples reached here.  /* #pos=413 */
%   else return 0.06973614817845837;  // std dev = 32.734, 4,294.000 (wgt'ed) examples reached here.  /* #neg=2,240 #pos=2,054 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.15274385809367164;  // std dev = 0.000, 413.000 (wgt'ed) examples reached here.  /* #pos=413 */
%   else return 0.0527834330011422;  // std dev = 32.734, 4,294.000 (wgt'ed) examples reached here.  /* #neg=2,240 #pos=2,054 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.13400703000801226;  // std dev = 0.000, 413.000 (wgt'ed) examples reached here.  /* #pos=413 */
%   else return 0.03983219431668196;  // std dev = 32.734, 4,294.000 (wgt'ed) examples reached here.  /* #neg=2,240 #pos=2,054 */


Results
   AUC ROC   = 0.574545
   AUC PR    = 0.655418
   CLL	      = -0.650715
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.149091
   F1        = 0.259494


Total learning time: 17.134 seconds
Total inference time: 3.259 seconds
AUC ROC: 0.574545


Results scoring model
   AUC ROC   = 0.583705
   AUC PR    = 0.667324
   CLL	      = -0.644264
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.16741
   F1        = 0.286806


Total scoring time: 6.932 seconds
Parameter learned model CLL: -0.644264


Structure after Parameter Learning
[['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [1.72e-06, 0, 413], 'false': [32.734, 2, 2]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 413], 'false': [32.734, 2, 2]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 413], 'false': [32.734, 2, 2]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 413], 'false': [32.734, 2, 2]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 413], 'false': [32.734, 2, 2]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [4.42e-07, 0, 413], 'false': [32.734, 2, 2]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [2.46e-07, 0, 413], 'false': [32.734, 2, 2]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [7.3e-08, 0, 413], 'false': [32.734, 2, 2]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 413], 'false': [32.734, 2, 2]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 413], 'false': [32.734, 2, 2]}]]
[{'': [7.157040631385029e-15, 0.24953092550794792]}, {'': [-5.4365981719174735e-15, 0.24953092550801761]}, {'': [-1.3419451183846928e-15, 0.249530925507971]}, {'': [-2.1677574989291194e-15, 0.24953092550799633]}, {'': [-1.4623760905474218e-15, 0.2495309255079934]}, {'': [4.731216763535776e-16, 0.24953092550797923]}, {'': [1.4623760905474217e-16, 0.24953092550796857]}, {'': [1.2903318446006663e-17, 0.24953092550801978]}, {'': [-3.5699181033951763e-16, 0.24953092550798553]}, {'': [-3.4193793881917656e-16, 0.24953092550798012]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
1;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
2;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
3;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
4;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
5;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
6;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
7;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
8;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
9;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.8581489350995082;  // std dev = 1.72e-06, 413.000 (wgt'ed) examples reached here.  /* #pos=413 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then if ( title(F, E), venue(F, A) )
%   | | | then return 0.3447828685419513;  // std dev = 30.263, 3,666.000 (wgt'ed) examples reached here.  /* #neg=1,882 #pos=1,784 */
%   | | | else return 0.47481560176618004;  // std dev = 5.326, 120.000 (wgt'ed) examples reached here.  /* #neg=46 #pos=74 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.5199136409818657;  // std dev = 3.901, 68.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=45 */
%   | | | else return 0.43709630352056383;  // std dev = 3.728, 57.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=33 */
%   | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | then if ( haswordtitle(J, K), haswordauthor(L, K) )
%   | | | then return 0.15060176528819294;  // std dev = 6.623, 212.000 (wgt'ed) examples reached here.  /* #neg=150 #pos=62 */
%   | | | else return 0.35814893509951196;  // std dev = 3.162, 40.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=20 */
%   | | else return 0.13295809540485437;  // std dev = 0.446, 131.000 (wgt'ed) examples reached here.  /* #neg=95 #pos=36 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.7194734122109582;  // std dev = 0.000, 413.000 (wgt'ed) examples reached here.  /* #pos=413 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then if ( title(F, E), venue(F, A) )
%   | | | then return 0.2974339907383061;  // std dev = 30.263, 3,666.000 (wgt'ed) examples reached here.  /* #neg=1,882 #pos=1,784 */
%   | | | else return 0.4067096288007753;  // std dev = 5.326, 120.000 (wgt'ed) examples reached here.  /* #neg=46 #pos=74 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.44422918216237206;  // std dev = 3.901, 68.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=45 */
%   | | | else return 0.3751785876229701;  // std dev = 3.728, 57.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=33 */
%   | else if ( haswordvenue(A, I), haswordauthor(J, I) )
%   | | then return -0.003295559618635389;  // std dev = 0.365, 19.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=3 */
%   | | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | | then return 0.17270351165022702;  // std dev = 7.201, 233.000 (wgt'ed) examples reached here.  /* #neg=154 #pos=79 */
%   | | | else return 0.11599019194256355;  // std dev = 5.109, 131.000 (wgt'ed) examples reached here.  /* #neg=95 #pos=36 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.555366436746283;  // std dev = 0.000, 413.000 (wgt'ed) examples reached here.  /* #pos=413 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then if ( title(F, E), venue(F, B) )
%   | | | then return 0.24748959969715603;  // std dev = 30.242, 3,662.000 (wgt'ed) examples reached here.  /* #neg=1,878 #pos=1,784 */
%   | | | else return 0.3308789600669292;  // std dev = 5.443, 124.000 (wgt'ed) examples reached here.  /* #neg=50 #pos=74 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.3593566787107365;  // std dev = 3.901, 68.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=45 */
%   | | | else return 0.30758572307646587;  // std dev = 3.728, 57.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=33 */
%   | else if ( haswordvenue(A, I), haswordauthor(J, I) )
%   | | then return -0.0028504710181840747;  // std dev = 0.365, 19.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=3 */
%   | | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | | then return 0.14738165489370633;  // std dev = 7.199, 233.000 (wgt'ed) examples reached here.  /* #neg=154 #pos=79 */
%   | | | else return 0.09987474021885358;  // std dev = 5.109, 131.000 (wgt'ed) examples reached here.  /* #neg=95 #pos=36 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.4175135841583122;  // std dev = 0.000, 413.000 (wgt'ed) examples reached here.  /* #pos=413 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then if ( title(F, E), venue(F, A) )
%   | | | then return 0.1994479147760223;  // std dev = 30.262, 3,666.000 (wgt'ed) examples reached here.  /* #neg=1,882 #pos=1,784 */
%   | | | else return 0.26704414837131646;  // std dev = 5.321, 120.000 (wgt'ed) examples reached here.  /* #neg=46 #pos=74 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.2786858844444831;  // std dev = 3.901, 68.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=45 */
%   | | | else return 0.2427171745772809;  // std dev = 3.728, 57.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=33 */
%   | else if ( haswordvenue(A, I), haswordauthor(J, I) )
%   | | then return -0.0024662966153717004;  // std dev = 0.365, 19.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=3 */
%   | | else if ( haswordvenue(B, K), haswordauthor(L, K) )
%   | | | then return -0.03151144397619278;  // std dev = 1.570, 17.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=3 */
%   | | | else return 0.1165768384418492;  // std dev = 8.672, 347.000 (wgt'ed) examples reached here.  /* #neg=235 #pos=112 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.3207118471601514;  // std dev = 0.000, 413.000 (wgt'ed) examples reached here.  /* #pos=413 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then if ( title(F, E), venue(F, B) )
%   | | | then return 0.15682343499678109;  // std dev = 30.240, 3,662.000 (wgt'ed) examples reached here.  /* #neg=1,878 #pos=1,784 */
%   | | | else return 0.2066167205161726;  // std dev = 5.437, 124.000 (wgt'ed) examples reached here.  /* #neg=50 #pos=74 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.21105772516719998;  // std dev = 3.901, 68.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=45 */
%   | | | else return 0.18659199257712214;  // std dev = 3.728, 57.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=33 */
%   | else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | | then return -0.026372843754018754;  // std dev = 0.381, 17.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=3 */
%   | | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | | then return 0.11204555090505619;  // std dev = 7.200, 238.000 (wgt'ed) examples reached here.  /* #neg=159 #pos=79 */
%   | | | else return 0.0539796077683237;  // std dev = 5.074, 128.000 (wgt'ed) examples reached here.  /* #neg=92 #pos=36 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.2551722425694871;  // std dev = 4.42e-07, 413.000 (wgt'ed) examples reached here.  /* #pos=413 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then if ( title(F, E), venue(F, A) )
%   | | | then return 0.12125703404256828;  // std dev = 30.261, 3,666.000 (wgt'ed) examples reached here.  /* #neg=1,882 #pos=1,784 */
%   | | | else return 0.15832520968297772;  // std dev = 5.319, 120.000 (wgt'ed) examples reached here.  /* #neg=46 #pos=74 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.1584539764018592;  // std dev = 3.901, 68.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=45 */
%   | | | else return 0.14132820384722986;  // std dev = 3.728, 57.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=33 */
%   | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | then if ( haswordtitle(J, K), haswordvenue(A, K) )
%   | | | then return 0.11746227541922888;  // std dev = 5.321, 126.000 (wgt'ed) examples reached here.  /* #neg=80 #pos=46 */
%   | | | else return 0.05266184839988455;  // std dev = 5.087, 129.000 (wgt'ed) examples reached here.  /* #neg=93 #pos=36 */
%   | | else if ( haswordvenue(A, L), haswordauthor(M, L) )
%   | | | then return -0.16741898717767958;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.049449891917710966;  // std dev = 5.060, 125.000 (wgt'ed) examples reached here.  /* #neg=89 #pos=36 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.2097577156325346;  // std dev = 2.46e-07, 413.000 (wgt'ed) examples reached here.  /* #pos=413 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then if ( author(G, F), venue(G, A) )
%   | | | then return 0.34182788641754464;  // std dev = 2.572, 34.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=25 */
%   | | | else return 0.01961040874749544;  // std dev = 3.515, 50.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=21 */
%   | | else if ( haswordtitle(H, D) )
%   | | | then return 0.0922047839726081;  // std dev = 30.387, 3,704.000 (wgt'ed) examples reached here.  /* #neg=1,891 #pos=1,813 */
%   | | | else return 0.11514322260404422;  // std dev = 5.340, 123.000 (wgt'ed) examples reached here.  /* #neg=46 #pos=77 */
%   | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | then if ( haswordtitle(J, K), haswordvenue(A, K) )
%   | | | then return 0.09512468747879073;  // std dev = 5.317, 126.000 (wgt'ed) examples reached here.  /* #neg=80 #pos=46 */
%   | | | else return 0.043308317863403535;  // std dev = 5.087, 129.000 (wgt'ed) examples reached here.  /* #neg=93 #pos=36 */
%   | | else if ( haswordvenue(A, L), haswordauthor(M, L) )
%   | | | then return -0.1453621072318244;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.040352218780151224;  // std dev = 5.060, 125.000 (wgt'ed) examples reached here.  /* #neg=89 #pos=36 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.17709649774527705;  // std dev = 7.30e-08, 413.000 (wgt'ed) examples reached here.  /* #pos=413 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then if ( haswordvenue(B, E) )
%   | | | then return -0.42761561263332004;  // std dev = 0.102, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | | else return 0.14035438269247874;  // std dev = 4.351, 80.000 (wgt'ed) examples reached here.  /* #neg=34 #pos=46 */
%   | | else if ( haswordtitle(G, D) )
%   | | | then return 0.069965052267577;  // std dev = 30.386, 3,704.000 (wgt'ed) examples reached here.  /* #neg=1,891 #pos=1,813 */
%   | | | else return 0.08657822448643444;  // std dev = 5.340, 123.000 (wgt'ed) examples reached here.  /* #neg=46 #pos=77 */
%   | else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | | then return -0.03801425185464363;  // std dev = 0.360, 19.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=3 */
%   | | else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | | | then return 0.062198614027815985;  // std dev = 7.160, 233.000 (wgt'ed) examples reached here.  /* #neg=154 #pos=79 */
%   | | | else return 0.03131865460145282;  // std dev = 5.101, 131.000 (wgt'ed) examples reached here.  /* #neg=95 #pos=36 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.15274385809367164;  // std dev = 0.000, 413.000 (wgt'ed) examples reached here.  /* #pos=413 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, B) )
%   | | then if ( samebib(F, G), venue(G, A) )
%   | | | then return 0.528777511091809;  // std dev = 0.981, 26.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=25 */
%   | | | else return -0.40375639277603226;  // std dev = 0.217, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | else if ( haswordauthor(E, H), haswordtitle(I, H) )
%   | | | then return -0.06584050289826729;  // std dev = 3.604, 63.000 (wgt'ed) examples reached here.  /* #neg=43 #pos=20 */
%   | | | else return 0.5672390495533477;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | | then if ( haswordvenue(A, J) )
%   | | | then return 0.052139106738542454;  // std dev = 30.368, 3,704.000 (wgt'ed) examples reached here.  /* #neg=1,891 #pos=1,813 */
%   | | | else return 0.0595022115725451;  // std dev = 8.132, 304.000 (wgt'ed) examples reached here.  /* #neg=181 #pos=123 */
%   | | else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | | | then return 0.04951621472546721;  // std dev = 6.072, 174.000 (wgt'ed) examples reached here.  /* #neg=107 #pos=67 */
%   | | | else return -0.2895330166014575;  // std dev = 1.250, 11.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=2 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.13400703000801226;  // std dev = 0.000, 413.000 (wgt'ed) examples reached here.  /* #pos=413 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then if ( title(F, E), venue(F, B) )
%   | | | then return 0.039383565603730276;  // std dev = 30.150, 3,662.000 (wgt'ed) examples reached here.  /* #neg=1,878 #pos=1,784 */
%   | | | else return 0.06973513771563199;  // std dev = 5.418, 124.000 (wgt'ed) examples reached here.  /* #neg=50 #pos=74 */
%   | | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | | then return 0.04840346148591836;  // std dev = 4.235, 74.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=45 */
%   | | | else return 0.06856509656983564;  // std dev = 3.264, 51.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=33 */
%   | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | then if ( haswordauthor(K, I) )
%   | | | then return -0.041781036596928674;  // std dev = 1.553, 16.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=3 */
%   | | | else return 0.04240389152767204;  // std dev = 7.176, 239.000 (wgt'ed) examples reached here.  /* #neg=160 #pos=79 */
%   | | else return 0.00864949926120853;  // std dev = 0.447, 128.000 (wgt'ed) examples reached here.  /* #neg=92 #pos=36 */


Results
   AUC ROC   = 0.688975
   AUC PR    = 0.720313
   CLL	      = -0.624096
   Precision = 0.775148 at threshold = 0.5
   Recall    = 0.238182
   F1        = 0.364395


Total learning time: 1492.271 seconds
Total inference time: 7.664 seconds
AUC ROC: 0.688975


Results scoring model
   AUC ROC   = 0.632966
   AUC PR    = 0.704435
   CLL	      = -0.633351
   Precision = 0.866573 at threshold = 0.5
   Recall    = 0.250101
   F1        = 0.388172


Total scoring time: 51.838 seconds
Refined model CLL: -0.633351


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.688975
   AUC PR    = 0.720313
   CLL	      = -0.624096
   Precision = 0.775148 at threshold = 0.5
   Recall    = 0.238182
   F1        = 0.364395


Total learning time: 1568.175 seconds
Total inference time: 7.664 seconds
AUC ROC: 0.688975
Total revision time: 1568.175
Best scored revision CLL: -0.633351


Dataset: 3_imdb_cora, Fold: 5, Type: Transfer (trRDN-B), Time: 10:30:53
{'AUC ROC': 0.688975, 'AUC PR': 0.720313, 'CLL': -0.624096, 'Precision': [0.775148, 0.5], 'Recall': 0.238182, 'F1': 0.364395, 'Learning time': 1568.175, 'Inference time': 7.664, 'parameter_1.0': {'AUC ROC': 0.574545, 'AUC PR': 0.655418, 'CLL': -0.650715, 'Precision': [1.0, 0.5], 'Recall': 0.149091, 'F1': 0.259494, 'Learning time': 17.134, 'Inference time': 3.259}}


