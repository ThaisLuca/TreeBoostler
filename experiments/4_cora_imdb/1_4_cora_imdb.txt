Starting experiment #1 for 4_cora_imdb

Start learning from source dataset

Source train facts examples: 42558
Source train pos examples: 3017
Source train neg examples: 2740

WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then return 0.3992107351824603;  // std dev = 0.498, 4,822.000 (wgt'ed) examples reached here.  /* #neg=2,213 #pos=2,609 */
%   | | else if ( title(F, D), venue(F, B) )
%   | | | then return 0.4451054568386418;  // std dev = 3.339, 46.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=27 */
%   | | | else return 0.5869624944215446;  // std dev = 4.829, 118.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=86 */
%   | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | then return 0.5058762078267858;  // std dev = 0.478, 88.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=57 */
%   | | else return 0.6488466095181177;  // std dev = 0.407, 86.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=68 */
%   else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordauthor(L, K) )
%   | | then if ( haswordauthor(L, I) )
%   | | | then return 0.23592671287729014;  // std dev = 3.252, 45.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=17 */
%   | | | else return 0.13667242503239835;  // std dev = 7.738, 298.000 (wgt'ed) examples reached here.  /* #neg=215 #pos=83 */
%   | | else return 0.3703440570507312;  // std dev = 0.500, 41.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=21 */
%   | else return 0.08819588345631965;  // std dev = 0.421, 213.000 (wgt'ed) examples reached here.  /* #neg=164 #pos=49 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then return 0.3433709031776967;  // std dev = 0.498, 4,822.000 (wgt'ed) examples reached here.  /* #neg=2,213 #pos=2,609 */
%   | | else if ( title(F, D), venue(F, B) )
%   | | | then return 0.3818851959188521;  // std dev = 3.339, 46.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=27 */
%   | | | else return 0.4996495186661365;  // std dev = 4.829, 118.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=86 */
%   | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | then return 0.4325716385994188;  // std dev = 0.478, 88.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=57 */
%   | | else return 0.5504191997875431;  // std dev = 0.407, 86.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=68 */
%   else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordauthor(L, K) )
%   | | then if ( haswordvenue(B, K) )
%   | | | then return 0.3246995109933286;  // std dev = 2.866, 33.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=16 */
%   | | | else return 0.10974506841009905;  // std dev = 7.820, 310.000 (wgt'ed) examples reached here.  /* #neg=226 #pos=84 */
%   | | else return 0.31904282398387;  // std dev = 0.500, 41.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=21 */
%   | else return 0.07711708839708546;  // std dev = 0.421, 213.000 (wgt'ed) examples reached here.  /* #neg=164 #pos=49 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then return 0.2832586819155288;  // std dev = 0.498, 4,822.000 (wgt'ed) examples reached here.  /* #neg=2,213 #pos=2,609 */
%   | | else if ( title(F, D), venue(F, B) )
%   | | | then return 0.31267543973057743;  // std dev = 3.339, 46.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=27 */
%   | | | else return 0.39996290773217363;  // std dev = 4.829, 118.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=86 */
%   | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | then return 0.3507121143954203;  // std dev = 0.478, 88.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=57 */
%   | | else return 0.4365219339363693;  // std dev = 0.407, 86.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=68 */
%   else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(A, K) )
%   | | then if ( haswordauthor(L, K) )
%   | | | then return 0.2791807947849363;  // std dev = 2.898, 34.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=16 */
%   | | | else return 0.15417509230618662;  // std dev = 5.931, 158.000 (wgt'ed) examples reached here.  /* #neg=102 #pos=56 */
%   | | else return 0.08181070338199956;  // std dev = 0.430, 200.000 (wgt'ed) examples reached here.  /* #neg=151 #pos=49 */
%   | else return 0.06452831031940476;  // std dev = 0.426, 205.000 (wgt'ed) examples reached here.  /* #neg=156 #pos=49 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then return 0.22548182839144074;  // std dev = 0.498, 4,822.000 (wgt'ed) examples reached here.  /* #neg=2,213 #pos=2,609 */
%   | | else if ( title(F, D), venue(F, B) )
%   | | | then return 0.246291913892067;  // std dev = 3.339, 46.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=27 */
%   | | | else return 0.30653462251437047;  // std dev = 4.829, 118.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=86 */
%   | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | then return 0.2727306513334619;  // std dev = 0.478, 88.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=57 */
%   | | else return 0.3316587347623583;  // std dev = 0.407, 86.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=68 */
%   else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordauthor(L, K) )
%   | | then if ( haswordauthor(L, I) )
%   | | | then return 0.14829908236136632;  // std dev = 3.207, 45.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=17 */
%   | | | else return 0.08533576088484347;  // std dev = 7.712, 298.000 (wgt'ed) examples reached here.  /* #neg=215 #pos=83 */
%   | | else return 0.23460319418264713;  // std dev = 0.500, 41.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=21 */
%   | else return 0.05552692911289848;  // std dev = 0.421, 213.000 (wgt'ed) examples reached here.  /* #neg=164 #pos=49 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then return 0.17489058813150501;  // std dev = 0.498, 4,822.000 (wgt'ed) examples reached here.  /* #neg=2,213 #pos=2,609 */
%   | | else if ( haswordtitle(D, F), haswordauthor(G, F) )
%   | | | then return 0.23019549656375946;  // std dev = 5.270, 134.000 (wgt'ed) examples reached here.  /* #neg=41 #pos=93 */
%   | | | else return 0.16838927401756335;  // std dev = 2.582, 30.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=20 */
%   | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | then return 0.19524079696519064;  // std dev = 0.453, 82.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=57 */
%   | | else return 0.2566558682168486;  // std dev = 0.435, 92.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=68 */
%   else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordauthor(M, L) )
%   | | then if ( haswordvenue(A, L) )
%   | | | then return 0.20431669038036726;  // std dev = 2.895, 34.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=16 */
%   | | | else return 0.06325422160781347;  // std dev = 7.656, 305.000 (wgt'ed) examples reached here.  /* #neg=221 #pos=84 */
%   | | else return 0.18335051243190928;  // std dev = 0.490, 53.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=21 */
%   | else return 0.041690944421102986;  // std dev = 0.426, 205.000 (wgt'ed) examples reached here.  /* #neg=156 #pos=49 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then return 0.13343559685864415;  // std dev = 0.498, 4,822.000 (wgt'ed) examples reached here.  /* #neg=2,213 #pos=2,609 */
%   | | else if ( haswordtitle(D, F), haswordauthor(G, F) )
%   | | | then return 0.1732530001315272;  // std dev = 5.269, 134.000 (wgt'ed) examples reached here.  /* #neg=41 #pos=93 */
%   | | | else return 0.12637948802820867;  // std dev = 2.582, 30.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=20 */
%   | else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | then return 0.2675404184652276;  // std dev = 0.381, 10.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   | | else return 0.16563258672926764;  // std dev = 0.447, 164.000 (wgt'ed) examples reached here.  /* #neg=47 #pos=117 */
%   else if ( haswordvenue(A, J), haswordauthor(K, J) )
%   | then return 0.005736003766662695;  // std dev = 0.418, 73.000 (wgt'ed) examples reached here.  /* #neg=54 #pos=19 */
%   | else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | | then if ( haswordtitle(M, N), haswordauthor(P, N) )
%   | | | then return 0.06488728292142165;  // std dev = 7.493, 283.000 (wgt'ed) examples reached here.  /* #neg=201 #pos=82 */
%   | | | else return 0.1677366644274439;  // std dev = 3.515, 51.000 (wgt'ed) examples reached here.  /* #neg=30 #pos=21 */
%   | | else return 0.049637175675508835;  // std dev = 0.434, 190.000 (wgt'ed) examples reached here.  /* #neg=142 #pos=48 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, B) )
%   | | then return 0.10076565043954133;  // std dev = 0.498, 4,818.000 (wgt'ed) examples reached here.  /* #neg=2,209 #pos=2,609 */
%   | | else if ( title(F, D), venue(F, A) )
%   | | | then return 0.099800310088487;  // std dev = 3.524, 50.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=27 */
%   | | | else return 0.13766088902264345;  // std dev = 4.821, 118.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=86 */
%   | else if ( haswordvenue(A, G), haswordauthor(H, G) )
%   | | then return 0.2364996119794939;  // std dev = 0.386, 10.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   | | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | | then return 0.09553759984074042;  // std dev = 4.296, 80.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=51 */
%   | | | else return 0.1498042327814509;  // std dev = 3.755, 84.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=66 */
%   else if ( haswordvenue(A, K), haswordauthor(L, K) )
%   | then return 0.004662616801193486;  // std dev = 0.418, 73.000 (wgt'ed) examples reached here.  /* #neg=54 #pos=19 */
%   | else if ( haswordvenue(B, M), haswordtitle(N, M) )
%   | | then return 0.06607282665578972;  // std dev = 0.454, 334.000 (wgt'ed) examples reached here.  /* #neg=231 #pos=103 */
%   | | else return 0.04148881131889105;  // std dev = 0.434, 190.000 (wgt'ed) examples reached here.  /* #neg=142 #pos=48 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, B) )
%   | | then return 0.07580323341915446;  // std dev = 0.498, 4,818.000 (wgt'ed) examples reached here.  /* #neg=2,209 #pos=2,609 */
%   | | else if ( haswordtitle(D, F), haswordauthor(G, F) )
%   | | | then return 0.10342715309828036;  // std dev = 5.384, 138.000 (wgt'ed) examples reached here.  /* #neg=45 #pos=93 */
%   | | | else return 0.0618586989658982;  // std dev = 2.582, 30.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=20 */
%   | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | then return 0.07230910982079256;  // std dev = 0.453, 82.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=57 */
%   | | else return 0.12347636425355185;  // std dev = 0.433, 92.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=68 */
%   else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordauthor(M, L) )
%   | | then if ( haswordvenue(B, L) )
%   | | | then return 0.19347687287125387;  // std dev = 2.844, 33.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=16 */
%   | | | else return 0.02760868679224488;  // std dev = 7.759, 310.000 (wgt'ed) examples reached here.  /* #neg=226 #pos=84 */
%   | | else return 0.14112308283963818;  // std dev = 0.500, 41.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=21 */
%   | else return 0.01930362317662814;  // std dev = 0.420, 213.000 (wgt'ed) examples reached here.  /* #neg=164 #pos=49 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, B) )
%   | | then return 0.056903845109038294;  // std dev = 0.498, 4,818.000 (wgt'ed) examples reached here.  /* #neg=2,209 #pos=2,609 */
%   | | else if ( title(F, D), venue(F, A) )
%   | | | then return 0.049279985002196935;  // std dev = 3.524, 50.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=27 */
%   | | | else return 0.08342152822294299;  // std dev = 4.819, 118.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=86 */
%   | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | then if ( haswordtitle(H, I), haswordauthor(J, I) )
%   | | | then return 0.06117687506898712;  // std dev = 4.118, 76.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=50 */
%   | | | else return 0.00912576271044154;  // std dev = 1.716, 12.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=7 */
%   | | else return 0.09940538951173233;  // std dev = 0.406, 86.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=68 */
%   else if ( haswordvenue(B, K), haswordauthor(L, K) )
%   | then return -0.008525359431943536;  // std dev = 0.420, 71.000 (wgt'ed) examples reached here.  /* #neg=52 #pos=19 */
%   | else if ( haswordvenue(A, M), haswordtitle(N, M) )
%   | | then return 0.045251750942000374;  // std dev = 0.455, 328.000 (wgt'ed) examples reached here.  /* #neg=225 #pos=103 */
%   | | else return 0.028277145765584658;  // std dev = 0.428, 198.000 (wgt'ed) examples reached here.  /* #neg=150 #pos=48 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, B) )
%   | | then return 0.04268451360747836;  // std dev = 0.498, 4,818.000 (wgt'ed) examples reached here.  /* #neg=2,209 #pos=2,609 */
%   | | else if ( haswordtitle(D, F), haswordauthor(G, F) )
%   | | | then return 0.06259385900226067;  // std dev = 5.383, 138.000 (wgt'ed) examples reached here.  /* #neg=45 #pos=93 */
%   | | | else return 0.02771443576923412;  // std dev = 2.582, 30.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=20 */
%   | else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | | then return 0.1434441682336663;  // std dev = 0.385, 10.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   | | else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | | | then return 0.03360573486866606;  // std dev = 4.292, 80.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=51 */
%   | | | else return 0.07451950524974771;  // std dev = 3.754, 84.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=66 */
%   else if ( haswordvenue(A, L), haswordauthor(M, L) )
%   | then return -0.009237237146798829;  // std dev = 0.416, 73.000 (wgt'ed) examples reached here.  /* #neg=54 #pos=19 */
%   | else if ( haswordvenue(B, N), haswordauthor(P, N) )
%   | | then return -0.0033626052495384358;  // std dev = 0.426, 63.000 (wgt'ed) examples reached here.  /* #neg=46 #pos=17 */
%   | | else return 0.0368745741454861;  // std dev = 0.448, 461.000 (wgt'ed) examples reached here.  /* #neg=327 #pos=134 */


Starting fold 1

Target train facts examples: 863
Target train pos examples: 326
Target train neg examples: 326

Target test facts examples: 215
Target test pos	 examples: 56
Target test neg examples: 56

Amount of data: 0.2
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;false;false
0;false;haswordvenue(A, I), haswordtitle(J, I).;true;false
0;false,true;haswordtitle(J, K), haswordauthor(L, K).;true;false
0;false,true,true;haswordauthor(L, I).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, A).;false;true
1;true,true,false;title(F, D), venue(F, B).;false;false
1;true,false;haswordvenue(A, G), haswordtitle(H, G).;false;false
1;false;haswordvenue(A, I), haswordtitle(J, I).;true;false
1;false,true;haswordtitle(J, K), haswordauthor(L, K).;true;false
1;false,true,true;haswordvenue(B, K).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;title(F, D), venue(F, B).;false;false
2;true,false;haswordvenue(A, G), haswordtitle(H, G).;false;false
2;false;haswordvenue(B, I), haswordtitle(J, I).;true;false
2;false,true;haswordtitle(J, K), haswordvenue(A, K).;true;false
2;false,true,true;haswordauthor(L, K).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;title(E, D), venue(E, A).;false;true
3;true,true,false;title(F, D), venue(F, B).;false;false
3;true,false;haswordvenue(A, G), haswordtitle(H, G).;false;false
3;false;haswordvenue(A, I), haswordtitle(J, I).;true;false
3;false,true;haswordtitle(J, K), haswordauthor(L, K).;true;false
3;false,true,true;haswordauthor(L, I).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, A).;false;true
4;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
4;true,false;haswordvenue(B, H), haswordtitle(I, H).;false;false
4;false;haswordvenue(B, J), haswordtitle(K, J).;true;false
4;false,true;haswordtitle(K, L), haswordauthor(M, L).;true;false
4;false,true,true;haswordvenue(A, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, A).;false;true
5;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
5;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;false
5;false;haswordvenue(A, J), haswordauthor(K, J).;false;true
5;false,false;haswordvenue(B, L), haswordtitle(M, L).;true;false
5;false,false,true;haswordtitle(M, N), haswordauthor(P, N).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;title(E, D), venue(E, B).;false;true
6;true,true,false;title(F, D), venue(F, A).;false;false
6;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
6;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
6;false;haswordvenue(A, K), haswordauthor(L, K).;false;true
6;false,false;haswordvenue(B, M), haswordtitle(N, M).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
7;true,false;haswordvenue(B, H), haswordtitle(I, H).;false;false
7;false;haswordvenue(A, J), haswordtitle(K, J).;true;false
7;false,true;haswordtitle(K, L), haswordauthor(M, L).;true;false
7;false,true,true;haswordvenue(B, L).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;title(E, D), venue(E, B).;false;true
8;true,true,false;title(F, D), venue(F, A).;false;false
8;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;false
8;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
8;false;haswordvenue(B, K), haswordauthor(L, K).;false;true
8;false,false;haswordvenue(A, M), haswordtitle(N, M).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, B).;false;true
9;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
9;true,false;haswordvenue(A, H), haswordauthor(I, H).;false;true
9;true,false,false;haswordvenue(A, J), haswordtitle(K, J).;false;false
9;false;haswordvenue(A, L), haswordauthor(M, L).;false;true
9;false,false;haswordvenue(B, N), haswordauthor(P, N).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14185106490048777;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995123;  // std dev = 0.000, 54.000 (wgt'ed) examples reached here.  /* #pos=54 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.31648226843284566;  // std dev = 2.441, 24.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=11 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.14185106490048768;  // std dev = 7.45e-09, 51.000 (wgt'ed) examples reached here.  /* #neg=51 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.12544463852839138;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( genre(B, E) )
%   | | then return 0.7194734122109545;  // std dev = 0.000, 54.000 (wgt'ed) examples reached here.  /* #pos=54 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.2734366587491455;  // std dev = 2.441, 24.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=11 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then if ( movie(H, B) )
%   | | then return -0.12544463852839158;  // std dev = 0.000, 51.000 (wgt'ed) examples reached here.  /* #neg=51 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.11231637819360639;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( genre(B, E) )
%   | | then return 0.5553664367462838;  // std dev = 8.43e-08, 54.000 (wgt'ed) examples reached here.  /* #pos=54 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.22864662696661894;  // std dev = 2.441, 24.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=11 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then if ( movie(H, A) )
%   | | then return -0.11231637819360632;  // std dev = 4.37e-09, 51.000 (wgt'ed) examples reached here.  /* #neg=51 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.10159632948783628;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( genre(B, E) )
%   | | then return 0.4175135841583103;  // std dev = 0.000, 54.000 (wgt'ed) examples reached here.  /* #pos=54 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.18572608234333768;  // std dev = 2.441, 24.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=11 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.10159632948783626;  // std dev = 3.73e-09, 51.000 (wgt'ed) examples reached here.  /* #neg=51 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.09269127618926096;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( movie(E, B) )
%   | | then return 0.267381753922197;  // std dev = 2.541, 78.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=65 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, B) )
%   | then if ( movie(G, A) )
%   | | then return -0.09269127618926103;  // std dev = 0.000, 51.000 (wgt'ed) examples reached here.  /* #neg=51 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.08518475138839687;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( movie(E, B) )
%   | | then return 0.21066631161325397;  // std dev = 2.547, 78.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=65 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.0851847513883968;  // std dev = 1.83e-08, 51.000 (wgt'ed) examples reached here.  /* #neg=51 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.2264352344240579;  // std dev = 6.99e-08, 54.000 (wgt'ed) examples reached here.  /* #pos=54 */
%   | else if ( genre(A, E) )
%   | | then return -0.07877675473109173;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.03708727658244045;  // std dev = 2.441, 24.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=11 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.07877675473109179;  // std dev = 0.000, 51.000 (wgt'ed) examples reached here.  /* #neg=51 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.1892354524956932;  // std dev = 4.21e-08, 54.000 (wgt'ed) examples reached here.  /* #pos=54 */
%   | else if ( movie(E, B) )
%   | | then return 0.023969385047992554;  // std dev = 2.443, 25.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=11 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then if ( movie(G, B) )
%   | | then return -0.07324622576333704;  // std dev = 1.05e-08, 51.000 (wgt'ed) examples reached here.  /* #neg=51 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.16189151202281574;  // std dev = 0.000, 54.000 (wgt'ed) examples reached here.  /* #pos=54 */
%   | else if ( genre(A, E) )
%   | | then return -0.07489003261279092;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.02213454119869625;  // std dev = 2.441, 24.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=11 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.0684269778442027;  // std dev = 1.39e-08, 51.000 (wgt'ed) examples reached here.  /* #neg=51 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.14110860588282836;  // std dev = 2.58e-08, 54.000 (wgt'ed) examples reached here.  /* #pos=54 */
%   | else if ( movie(E, A) )
%   | | then return 0.013221633925026132;  // std dev = 2.442, 25.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=11 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.06419184008202625;  // std dev = 0.000, 51.000 (wgt'ed) examples reached here.  /* #neg=51 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.182536
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 4.003 seconds
Total inference time: 1.968 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 0.983077
   AUC PR    = 0.984191
   CLL	      = -0.207813
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.830769
   F1        = 0.907563


Total scoring time: 2.016 seconds
Parameter learned model CLL: -0.207813


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 1, 0], 'true,false,true': [0.0, 0, 54], 'true,false,false,true': [2.441, 13, 11], 'true,false,false,false': [0.0, 0, 0], 'false,true': [7.45e-09, 51, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)', 'false,true': 'movie(H, B)'}, {'true,true': [0.0, 1, 0], 'true,false,true': [0.0, 0, 54], 'true,false,false,true': [2.441, 13, 11], 'true,false,false,false': [0.0, 0, 0], 'false,true,true': [0.0, 51, 0], 'false,true,false': [0.0, 0, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)', 'false,true': 'movie(H, A)'}, {'true,true': [0.0, 1, 0], 'true,false,true': [8.43e-08, 0, 54], 'true,false,false,true': [2.441, 13, 11], 'true,false,false,false': [0.0, 0, 0], 'false,true,true': [4.37e-09, 51, 0], 'false,true,false': [0.0, 0, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 1, 0], 'true,false,true': [0.0, 0, 54], 'true,false,false,true': [2.441, 13, 11], 'true,false,false,false': [0.0, 0, 0], 'false,true': [3.73e-09, 51, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, B)', 'false,true': 'movie(G, A)'}, {'true,true': [0.0, 1, 0], 'true,false,true': [2.541, 13, 65], 'true,false,false': [0.0, 0, 0], 'false,true,true': [0.0, 51, 0], 'false,true,false': [0.0, 0, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, A)'}, {'true,true': [0.0, 1, 0], 'true,false,true': [2.547, 13, 65], 'true,false,false': [0.0, 0, 0], 'false,true': [1.83e-08, 51, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [6.99e-08, 0, 54], 'true,false,true': [0.0, 1, 0], 'true,false,false,true': [2.441, 13, 11], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 51, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, A)', 'false,true': 'movie(G, B)'}, {'true,true': [4.21e-08, 0, 54], 'true,false,true': [2.443, 14, 11], 'true,false,false': [0.0, 0, 0], 'false,true,true': [1.05e-08, 51, 0], 'false,true,false': [0.0, 0, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 54], 'true,false,true': [0.0, 1, 0], 'true,false,false,true': [2.441, 13, 11], 'true,false,false,false': [0.0, 0, 0], 'false,true': [1.39e-08, 51, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [2.58e-08, 0, 54], 'true,false,true': [2.442, 14, 11], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 51, 0], 'false,false': [0.0, 0, 0]}]]
[{'': [0.14580996635154533, 5.659960517696876e-17], 'true': [0.0, 0.138888888888888], 'true,false': [0.0, 0.24826388888888848], 'true,false,false': [0.24826388888888848, nan], 'false': [5.659960517696876e-17, nan]}, {'': [0.12352417591390875, -3.2653618371328135e-17], 'true': [0.0, 0.11876851182258773], 'true,false': [-3.289549702593056e-16, 0.2482638888888891], 'true,false,false': [0.2482638888888891, nan], 'false': [-3.2653618371328135e-17, nan], 'false,true': [-3.2653618371328135e-17, nan]}, {'': [0.10189301254049031, 1.959217102279688e-17], 'true': [0.0, 0.09912764644917661], 'true,false': [1.3158198810372225e-16, 0.2482638888888887], 'true,false,false': [0.2482638888888887, nan], 'false': [1.959217102279688e-17, nan], 'false,true': [1.959217102279688e-17, nan]}, {'': [0.0892276024544938, 1.3061447348531253e-17], 'true': [0.0, 0.08783336259252507], 'true,false': [-3.618504672852362e-16, 0.24826388888888895], 'true,false,false': [0.24826388888888895, nan], 'false': [1.3061447348531253e-17, nan]}, {'': [0.08336055817235927, -2.0680624968507818e-17], 'true': [0.0, 0.0827881112896186], 'true,false': [0.0827881112896186, nan], 'false': [-2.0680624968507818e-17, nan], 'false,true': [-2.0680624968507818e-17, nan]}, {'': [0.08318070919821403, 6.530723674265627e-18], 'true': [0.0, 0.08313918105983054], 'true,false': [0.08313918105983054, nan], 'false': [6.530723674265627e-18, nan]}, {'': [0.08372470587033437, 0.0], 'true': [9.046261682130905e-17, 0.23884883312541852], 'true,false': [0.0, 0.24826388888888873], 'true,false,false': [0.24826388888888873, nan], 'false': [0.0, nan]}, {'': [0.08145464512166949, 2.1769078914218755e-18], 'true': [3.289549702593056e-17, 0.23872711979105923], 'true,false': [0.23872711979105923, nan], 'false': [2.1769078914218755e-18, nan], 'false,true': [2.1769078914218755e-18, nan]}, {'': [0.07999924481261843, 3.8095888099882826e-18], 'true': [-1.2335811384723961e-17, 0.23869482202158818], 'true,false': [0.0, 0.24826388888888898], 'true,false,false': [0.24826388888888898, nan], 'false': [3.8095888099882826e-18, nan]}, {'': [0.07905075539570043, -2.7211348642773444e-18], 'true': [1.2335811384723961e-17, 0.23862096692113555], 'true,false': [0.23862096692113555, nan], 'false': [-2.7211348642773444e-18, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(A, D).;true;true
0;true,false;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;true;genre(A, D).;true;true
1;true,false;genre(B, E).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;true;genre(A, D).;true;true
2;true,false;genre(B, E).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;true;genre(A, D).;true;true
3;true,false;genre(B, E).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;true;genre(A, D).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;true;genre(A, D).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(B, D).;true;true
6;true,false;genre(A, E).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;true;genre(B, D).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;true;genre(B, D).;true;true
8;true,false;genre(A, E).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;true;genre(B, D).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14185106490048777;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995123;  // std dev = 0.000, 54.000 (wgt'ed) examples reached here.  /* #pos=54 */
%   | | else if ( actor(B) )
%   | | | then return -0.1418510649004878;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | | | else return 0.8581489350995123;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   else return -0.14185106490048768;  // std dev = 5.37e-08, 51.000 (wgt'ed) examples reached here.  /* #neg=51 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.12544463852839138;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( genre(B, E) )
%   | | then return 0.7194734122109545;  // std dev = 0.000, 54.000 (wgt'ed) examples reached here.  /* #pos=54 */
%   | | else if ( actor(B) )
%   | | | then return -0.12544463852839138;  // std dev = 7.45e-09, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | | | else return 0.7194734122109542;  // std dev = 4.21e-08, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   else return -0.12544463852839158;  // std dev = 0.000, 51.000 (wgt'ed) examples reached here.  /* #neg=51 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.11231637819360639;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( genre(B, E) )
%   | | then return 0.5553664367462838;  // std dev = 8.43e-08, 54.000 (wgt'ed) examples reached here.  /* #pos=54 */
%   | | else if ( actor(B) )
%   | | | then return -0.11231637819360636;  // std dev = 1.05e-08, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | | | else return 0.5553664367462846;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   else return -0.11231637819360632;  // std dev = 3.16e-08, 51.000 (wgt'ed) examples reached here.  /* #neg=51 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.10159632948783628;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( genre(B, E) )
%   | | then return 0.4175135841583103;  // std dev = 0.000, 54.000 (wgt'ed) examples reached here.  /* #pos=54 */
%   | | else if ( actor(B) )
%   | | | then return -0.1015963294878363;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | | | else return 0.4175135841583098;  // std dev = 4.21e-08, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   else return -0.10159632948783626;  // std dev = 2.58e-08, 51.000 (wgt'ed) examples reached here.  /* #neg=51 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.09269127618926096;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( actor(B) )
%   | | then return -0.09269127618926096;  // std dev = 5.27e-09, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | | else return 0.32071184716014983;  // std dev = 0.000, 65.000 (wgt'ed) examples reached here.  /* #pos=65 */
%   else return -0.09269127618926103;  // std dev = 0.000, 51.000 (wgt'ed) examples reached here.  /* #neg=51 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.08518475138839687;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( director(B) )
%   | | then return 0.25517224256948967;  // std dev = 0.000, 65.000 (wgt'ed) examples reached here.  /* #pos=65 */
%   | | else return -0.08518475138839686;  // std dev = 7.45e-09, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   else return -0.0851847513883968;  // std dev = 1.83e-08, 51.000 (wgt'ed) examples reached here.  /* #neg=51 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.2097577156325356;  // std dev = 0.000, 54.000 (wgt'ed) examples reached here.  /* #pos=54 */
%   | else if ( genre(A, E) )
%   | | then return -0.07877675473109173;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( actor(B) )
%   | | | then return -0.07877675473109172;  // std dev = 3.73e-09, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | | | else return 0.20975771563253562;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   else return -0.07877675473109179;  // std dev = 0.000, 51.000 (wgt'ed) examples reached here.  /* #neg=51 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.1770964977452774;  // std dev = 0.000, 54.000 (wgt'ed) examples reached here.  /* #pos=54 */
%   | else if ( actor(B) )
%   | | then return -0.07324622576333704;  // std dev = 3.73e-09, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | | else return 0.17709649774527736;  // std dev = 7.45e-09, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   else return -0.07324622576333704;  // std dev = 1.05e-08, 51.000 (wgt'ed) examples reached here.  /* #neg=51 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.15274385809367083;  // std dev = 0.000, 54.000 (wgt'ed) examples reached here.  /* #pos=54 */
%   | else if ( genre(A, E) )
%   | | then return -0.06842697784420272;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( actor(B) )
%   | | | then return -0.06842697784420272;  // std dev = 2.63e-09, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | | | else return 0.15274385809367078;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   else return -0.0684269778442027;  // std dev = 1.39e-08, 51.000 (wgt'ed) examples reached here.  /* #neg=51 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.13400703000801079;  // std dev = 5.05e-08, 54.000 (wgt'ed) examples reached here.  /* #pos=54 */
%   | else if ( actor(B) )
%   | | then return -0.06419184008202619;  // std dev = 6.97e-09, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | | else return 0.13400703000801095;  // std dev = 7.45e-09, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   else return -0.06419184008202625;  // std dev = 0.000, 51.000 (wgt'ed) examples reached here.  /* #neg=51 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.094637
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 4.773 seconds
Total inference time: 1.836 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.094637
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 2.057 seconds
Refined model CLL: -0.094637


******************************************
Best model found
******************************************
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.094637
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 12.849 seconds
Total inference time: 1.836 seconds
AUC ROC: 1.0
Total revision time: 12.849
Best scored revision CLL: -0.094637


Dataset: 4_cora_imdb, Fold: 1, Type: Transfer (trRDN-B), Time: 17:55:19
{'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.094637, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 12.849, 'Inference time': 1.836, 'parameter_0.2': {'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.182536, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 4.003, 'Inference time': 1.968}}


Amount of data: 0.4
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;false;false
0;false;haswordvenue(A, I), haswordtitle(J, I).;true;false
0;false,true;haswordtitle(J, K), haswordauthor(L, K).;true;false
0;false,true,true;haswordauthor(L, I).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, A).;false;true
1;true,true,false;title(F, D), venue(F, B).;false;false
1;true,false;haswordvenue(A, G), haswordtitle(H, G).;false;false
1;false;haswordvenue(A, I), haswordtitle(J, I).;true;false
1;false,true;haswordtitle(J, K), haswordauthor(L, K).;true;false
1;false,true,true;haswordvenue(B, K).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;title(F, D), venue(F, B).;false;false
2;true,false;haswordvenue(A, G), haswordtitle(H, G).;false;false
2;false;haswordvenue(B, I), haswordtitle(J, I).;true;false
2;false,true;haswordtitle(J, K), haswordvenue(A, K).;true;false
2;false,true,true;haswordauthor(L, K).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;title(E, D), venue(E, A).;false;true
3;true,true,false;title(F, D), venue(F, B).;false;false
3;true,false;haswordvenue(A, G), haswordtitle(H, G).;false;false
3;false;haswordvenue(A, I), haswordtitle(J, I).;true;false
3;false,true;haswordtitle(J, K), haswordauthor(L, K).;true;false
3;false,true,true;haswordauthor(L, I).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, A).;false;true
4;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
4;true,false;haswordvenue(B, H), haswordtitle(I, H).;false;false
4;false;haswordvenue(B, J), haswordtitle(K, J).;true;false
4;false,true;haswordtitle(K, L), haswordauthor(M, L).;true;false
4;false,true,true;haswordvenue(A, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, A).;false;true
5;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
5;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;false
5;false;haswordvenue(A, J), haswordauthor(K, J).;false;true
5;false,false;haswordvenue(B, L), haswordtitle(M, L).;true;false
5;false,false,true;haswordtitle(M, N), haswordauthor(P, N).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;title(E, D), venue(E, B).;false;true
6;true,true,false;title(F, D), venue(F, A).;false;false
6;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
6;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
6;false;haswordvenue(A, K), haswordauthor(L, K).;false;true
6;false,false;haswordvenue(B, M), haswordtitle(N, M).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
7;true,false;haswordvenue(B, H), haswordtitle(I, H).;false;false
7;false;haswordvenue(A, J), haswordtitle(K, J).;true;false
7;false,true;haswordtitle(K, L), haswordauthor(M, L).;true;false
7;false,true,true;haswordvenue(B, L).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;title(E, D), venue(E, B).;false;true
8;true,true,false;title(F, D), venue(F, A).;false;false
8;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;false
8;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
8;false;haswordvenue(B, K), haswordauthor(L, K).;false;true
8;false,false;haswordvenue(A, M), haswordtitle(N, M).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, B).;false;true
9;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
9;true,false;haswordvenue(A, H), haswordauthor(I, H).;false;true
9;true,false,false;haswordvenue(A, J), haswordtitle(K, J).;false;false
9;false;haswordvenue(A, L), haswordauthor(M, L).;false;true
9;false,false;haswordvenue(B, N), haswordauthor(P, N).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14185106490048777;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995112;  // std dev = 4.77e-07, 105.000 (wgt'ed) examples reached here.  /* #pos=105 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.3581489350995113;  // std dev = 3.536, 50.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=25 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.14185106490048763;  // std dev = 8.93e-09, 101.000 (wgt'ed) examples reached here.  /* #neg=101 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.12544463852839138;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else if ( genre(B, E) )
%   | | then return 0.7194734122109546;  // std dev = 0.000, 105.000 (wgt'ed) examples reached here.  /* #pos=105 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.3087411357856347;  // std dev = 3.536, 50.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=25 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then if ( movie(H, B) )
%   | | then return -0.12544463852839136;  // std dev = 0.000, 101.000 (wgt'ed) examples reached here.  /* #neg=101 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.11231637819360639;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else if ( genre(B, E) )
%   | | then return 0.5553664367462834;  // std dev = 4.38e-07, 105.000 (wgt'ed) examples reached here.  /* #pos=105 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.2564123687585866;  // std dev = 3.536, 50.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=25 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then if ( movie(H, A) )
%   | | then return -0.1123163781936062;  // std dev = 8.01e-09, 101.000 (wgt'ed) examples reached here.  /* #neg=101 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.10159632948783628;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else if ( genre(B, E) )
%   | | then return 0.41751358415830964;  // std dev = 2.73e-07, 105.000 (wgt'ed) examples reached here.  /* #pos=105 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.20613740734453997;  // std dev = 3.536, 50.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=25 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.10159632948783628;  // std dev = 3.48e-09, 101.000 (wgt'ed) examples reached here.  /* #neg=101 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.09269127618926096;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else if ( movie(E, B) )
%   | | then return 0.26939466274853513;  // std dev = 3.655, 155.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=130 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, B) )
%   | then if ( movie(G, A) )
%   | | then return -0.09269127618926096;  // std dev = 4.94e-08, 101.000 (wgt'ed) examples reached here.  /* #neg=101 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.08518475138839687;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else if ( movie(E, B) )
%   | | then return 0.21147332629929083;  // std dev = 3.665, 155.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=130 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.08518475138839682;  // std dev = 5.58e-08, 101.000 (wgt'ed) examples reached here.  /* #neg=101 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.22594167115954994;  // std dev = 1.23e-07, 105.000 (wgt'ed) examples reached here.  /* #pos=105 */
%   | else if ( genre(A, E) )
%   | | then return -0.07877675473109173;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.04728134842019937;  // std dev = 3.536, 50.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=25 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.07877675473109158;  // std dev = 5.87e-08, 101.000 (wgt'ed) examples reached here.  /* #neg=101 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.1888787877651165;  // std dev = 1.63e-07, 105.000 (wgt'ed) examples reached here.  /* #pos=105 */
%   | else if ( movie(E, B) )
%   | | then return 0.0274842190222333;  // std dev = 3.542, 54.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=25 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then if ( movie(G, B) )
%   | | then return -0.07324622576333707;  // std dev = 0.000, 101.000 (wgt'ed) examples reached here.  /* #neg=101 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.16162443646549496;  // std dev = 9.88e-08, 105.000 (wgt'ed) examples reached here.  /* #pos=105 */
%   | else if ( genre(A, E) )
%   | | then return -0.07513390978570078;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.028700066582338604;  // std dev = 3.536, 50.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=25 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.06842697784420265;  // std dev = 4.83e-08, 101.000 (wgt'ed) examples reached here.  /* #neg=101 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.14090237957290877;  // std dev = 4.21e-08, 105.000 (wgt'ed) examples reached here.  /* #pos=105 */
%   | else if ( movie(E, A) )
%   | | then return 0.01475661640858877;  // std dev = 3.540, 54.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=25 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.06419184008202626;  // std dev = 0.000, 101.000 (wgt'ed) examples reached here.  /* #neg=101 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.193603
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 4.726 seconds
Total inference time: 1.947 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 0.981509
   AUC PR    = 0.982491
   CLL	      = -0.212558
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.807692
   F1        = 0.893617


Total scoring time: 2.238 seconds
Parameter learned model CLL: -0.212558


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 4, 0], 'true,false,true': [4.77e-07, 0, 105], 'true,false,false,true': [3.536, 25, 25], 'true,false,false,false': [0.0, 0, 0], 'false,true': [8.93e-09, 101, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)', 'false,true': 'movie(H, B)'}, {'true,true': [0.0, 4, 0], 'true,false,true': [0.0, 0, 105], 'true,false,false,true': [3.536, 25, 25], 'true,false,false,false': [0.0, 0, 0], 'false,true,true': [0.0, 101, 0], 'false,true,false': [0.0, 0, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)', 'false,true': 'movie(H, A)'}, {'true,true': [0.0, 4, 0], 'true,false,true': [4.38e-07, 0, 105], 'true,false,false,true': [3.536, 25, 25], 'true,false,false,false': [0.0, 0, 0], 'false,true,true': [8.01e-09, 101, 0], 'false,true,false': [0.0, 0, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 4, 0], 'true,false,true': [2.73e-07, 0, 105], 'true,false,false,true': [3.536, 25, 25], 'true,false,false,false': [0.0, 0, 0], 'false,true': [3.48e-09, 101, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, B)', 'false,true': 'movie(G, A)'}, {'true,true': [0.0, 4, 0], 'true,false,true': [3.655, 25, 130], 'true,false,false': [0.0, 0, 0], 'false,true,true': [4.94e-08, 101, 0], 'false,true,false': [0.0, 0, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, A)'}, {'true,true': [0.0, 4, 0], 'true,false,true': [3.665, 25, 130], 'true,false,false': [0.0, 0, 0], 'false,true': [5.58e-08, 101, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [1.23e-07, 0, 105], 'true,false,true': [0.0, 4, 0], 'true,false,false,true': [3.536, 25, 25], 'true,false,false,false': [0.0, 0, 0], 'false,true': [5.87e-08, 101, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, A)', 'false,true': 'movie(G, B)'}, {'true,true': [1.63e-07, 0, 105], 'true,false,true': [3.542, 29, 25], 'true,false,false': [0.0, 0, 0], 'false,true,true': [0.0, 101, 0], 'false,true,false': [0.0, 0, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [9.88e-08, 0, 105], 'true,false,true': [0.0, 4, 0], 'true,false,false,true': [3.536, 25, 25], 'true,false,false,false': [0.0, 0, 0], 'false,true': [4.83e-08, 101, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [4.21e-08, 0, 105], 'true,false,true': [3.54, 29, 25], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 101, 0], 'false,false': [0.0, 0, 0]}]]
[{'': [0.14912384794905728, 7.91446116564468e-17], 'true': [0.0, 0.1352757544224812], 'true,false': [2.1654635756498293e-15, 0.25000000000000133], 'true,false,false': [0.25000000000000133, nan], 'false': [7.91446116564468e-17, nan]}, {'': [0.12700114939166496, -1.0992307174506501e-17], 'true': [0.0, 0.11751010469144545], 'true,false': [-5.413658939124573e-16, 0.25000000000000133], 'true,false,false': [0.25000000000000133, nan], 'false': [-1.0992307174506501e-17, nan], 'false,true': [-1.0992307174506501e-17, nan]}, {'': [0.1056579794574233, 6.5953843047039e-17], 'true': [0.0, 0.10017527814874436], 'true,false': [1.827109891954543e-15, 0.25000000000000006], 'true,false,false': [0.25000000000000006, nan], 'false': [6.5953843047039e-17, nan], 'false,true': [6.5953843047039e-17, nan]}, {'': [0.09312087995875588, 1.0992307174506501e-17], 'true': [0.0, 0.09040871644758154], 'true,false': [7.105427357601002e-16, 0.24999999999999978], 'true,false,false': [0.24999999999999978, nan], 'false': [1.0992307174506501e-17, nan]}, {'': [0.08722277305741323, 2.41830757839143e-17], 'true': [0.0, 0.08617541346378799], 'true,false': [0.08617541346378799, nan], 'false': [2.41830757839143e-17, nan], 'false,true': [2.41830757839143e-17, nan]}, {'': [0.08665040360752248, 3.0778460088618204e-17], 'true': [0.0, 0.08667255525527355], 'true,false': [0.08667255525527355, nan], 'false': [3.0778460088618204e-17, nan]}, {'': [0.08691325325040351, 3.407615224097015e-17], 'true': [1.4380031557049647e-16, 0.23257137485391668], 'true,false': [0.0, 0.2500000000000002], 'true,false,false': [0.2500000000000002, nan], 'false': [3.407615224097015e-17, nan]}, {'': [0.08473410247755685, -5.4961535872532505e-18], 'true': [2.5376526277146434e-16, 0.2322932112820174], 'true,false': [0.2322932112820174, nan], 'false': [-5.4961535872532505e-18, nan], 'false,true': [-5.4961535872532505e-18, nan]}, {'': [0.08330211849212026, 2.308384506646365e-17], 'true': [9.30472630162036e-17, 0.23222095299371748], 'true,false': [0.0, 0.25000000000000017], 'true,false,false': [0.25000000000000017, nan], 'false': [2.308384506646365e-17, nan]}, {'': [0.08238078330827758, -1.5389230044309102e-17], 'true': [1.6917684184764292e-17, 0.23205721757593015], 'true,false': [0.23205721757593015, nan], 'false': [-1.5389230044309102e-17, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(A, D).;true;true
0;true,false;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;true;genre(A, D).;true;true
1;true,false;genre(B, E).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;true;genre(A, D).;true;true
2;true,false;genre(B, E).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;true;genre(A, D).;true;true
3;true,false;genre(B, E).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;true;genre(A, D).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;true;genre(A, D).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(B, D).;true;true
6;true,false;genre(A, E).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;true;genre(B, D).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;true;genre(B, D).;true;true
8;true,false;genre(A, E).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;true;genre(B, D).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14185106490048777;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995112;  // std dev = 4.77e-07, 105.000 (wgt'ed) examples reached here.  /* #pos=105 */
%   | | else if ( actor(B) )
%   | | | then return -0.1418510649004877;  // std dev = 1.83e-08, 25.000 (wgt'ed) examples reached here.  /* #neg=25 */
%   | | | else return 0.858148935099512;  // std dev = 1.33e-07, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   else return -0.14185106490048763;  // std dev = 8.94e-08, 101.000 (wgt'ed) examples reached here.  /* #neg=101 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.12544463852839138;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else if ( genre(B, E) )
%   | | then return 0.7194734122109546;  // std dev = 0.000, 105.000 (wgt'ed) examples reached here.  /* #pos=105 */
%   | | else if ( actor(B) )
%   | | | then return -0.12544463852839138;  // std dev = 0.000, 25.000 (wgt'ed) examples reached here.  /* #neg=25 */
%   | | | else return 0.7194734122109544;  // std dev = 0.000, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   else return -0.12544463852839136;  // std dev = 0.000, 101.000 (wgt'ed) examples reached here.  /* #neg=101 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.11231637819360639;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else if ( genre(B, E) )
%   | | then return 0.5553664367462834;  // std dev = 4.38e-07, 105.000 (wgt'ed) examples reached here.  /* #pos=105 */
%   | | else if ( actor(B) )
%   | | | then return -0.11231637819360639;  // std dev = 0.000, 25.000 (wgt'ed) examples reached here.  /* #neg=25 */
%   | | | else return 0.5553664367462846;  // std dev = 0.000, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   else return -0.1123163781936062;  // std dev = 8.16e-08, 101.000 (wgt'ed) examples reached here.  /* #neg=101 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.10159632948783628;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else if ( genre(B, E) )
%   | | then return 0.41751358415830964;  // std dev = 2.73e-07, 105.000 (wgt'ed) examples reached here.  /* #pos=105 */
%   | | else if ( actor(B) )
%   | | | then return -0.10159632948783635;  // std dev = 0.000, 25.000 (wgt'ed) examples reached here.  /* #neg=25 */
%   | | | else return 0.41751358415830997;  // std dev = 0.000, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   else return -0.10159632948783628;  // std dev = 3.33e-08, 101.000 (wgt'ed) examples reached here.  /* #neg=101 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.09269127618926096;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else if ( director(B) )
%   | | then return 0.3207118471601497;  // std dev = 1.63e-07, 130.000 (wgt'ed) examples reached here.  /* #pos=130 */
%   | | else return -0.09269127618926096;  // std dev = 9.13e-09, 25.000 (wgt'ed) examples reached here.  /* #neg=25 */
%   else return -0.09269127618926096;  // std dev = 4.94e-08, 101.000 (wgt'ed) examples reached here.  /* #neg=101 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.08518475138839687;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else if ( actor(B) )
%   | | then return -0.08518475138839682;  // std dev = 1.75e-08, 25.000 (wgt'ed) examples reached here.  /* #neg=25 */
%   | | else return 0.2551722425694896;  // std dev = 0.000, 130.000 (wgt'ed) examples reached here.  /* #pos=130 */
%   else return -0.08518475138839682;  // std dev = 5.58e-08, 101.000 (wgt'ed) examples reached here.  /* #neg=101 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.20975771563253556;  // std dev = 1.52e-07, 105.000 (wgt'ed) examples reached here.  /* #pos=105 */
%   | else if ( genre(A, E) )
%   | | then return -0.07877675473109173;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else if ( actor(B) )
%   | | | then return -0.07877675473109176;  // std dev = 0.000, 25.000 (wgt'ed) examples reached here.  /* #neg=25 */
%   | | | else return 0.20975771563253554;  // std dev = 1.49e-08, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   else return -0.07877675473109158;  // std dev = 5.87e-08, 101.000 (wgt'ed) examples reached here.  /* #neg=101 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.17709649774527733;  // std dev = 4.21e-08, 105.000 (wgt'ed) examples reached here.  /* #pos=105 */
%   | else if ( actor(B) )
%   | | then return -0.07324622576333704;  // std dev = 7.45e-09, 29.000 (wgt'ed) examples reached here.  /* #neg=29 */
%   | | else return 0.17709649774527747;  // std dev = 0.000, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   else return -0.07324622576333707;  // std dev = 0.000, 101.000 (wgt'ed) examples reached here.  /* #neg=101 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.15274385809367133;  // std dev = 0.000, 105.000 (wgt'ed) examples reached here.  /* #pos=105 */
%   | else if ( genre(A, E) )
%   | | then return -0.06842697784420272;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else if ( actor(B) )
%   | | | then return -0.06842697784420276;  // std dev = 0.000, 25.000 (wgt'ed) examples reached here.  /* #neg=25 */
%   | | | else return 0.15274385809367083;  // std dev = 0.000, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   else return -0.06842697784420265;  // std dev = 4.83e-08, 101.000 (wgt'ed) examples reached here.  /* #neg=101 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.13400703000801112;  // std dev = 4.21e-08, 105.000 (wgt'ed) examples reached here.  /* #pos=105 */
%   | else if ( director(B) )
%   | | then return 0.13400703000801087;  // std dev = 2.58e-08, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | | else return -0.06419184008202622;  // std dev = 0.000, 29.000 (wgt'ed) examples reached here.  /* #neg=29 */
%   else return -0.06419184008202626;  // std dev = 0.000, 101.000 (wgt'ed) examples reached here.  /* #neg=101 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.094637
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 6.024 seconds
Total inference time: 1.8 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.094637
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 2.176 seconds
Refined model CLL: -0.094637


******************************************
Best model found
******************************************
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.094637
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 15.164 seconds
Total inference time: 1.8 seconds
AUC ROC: 1.0
Total revision time: 15.164
Best scored revision CLL: -0.094637


Dataset: 4_cora_imdb, Fold: 1, Type: Transfer (trRDN-B), Time: 17:55:39
{'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.094637, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 15.164, 'Inference time': 1.8, 'parameter_0.4': {'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.193603, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 4.726, 'Inference time': 1.947}}


Amount of data: 0.6
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;false;false
0;false;haswordvenue(A, I), haswordtitle(J, I).;true;false
0;false,true;haswordtitle(J, K), haswordauthor(L, K).;true;false
0;false,true,true;haswordauthor(L, I).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, A).;false;true
1;true,true,false;title(F, D), venue(F, B).;false;false
1;true,false;haswordvenue(A, G), haswordtitle(H, G).;false;false
1;false;haswordvenue(A, I), haswordtitle(J, I).;true;false
1;false,true;haswordtitle(J, K), haswordauthor(L, K).;true;false
1;false,true,true;haswordvenue(B, K).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;title(F, D), venue(F, B).;false;false
2;true,false;haswordvenue(A, G), haswordtitle(H, G).;false;false
2;false;haswordvenue(B, I), haswordtitle(J, I).;true;false
2;false,true;haswordtitle(J, K), haswordvenue(A, K).;true;false
2;false,true,true;haswordauthor(L, K).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;title(E, D), venue(E, A).;false;true
3;true,true,false;title(F, D), venue(F, B).;false;false
3;true,false;haswordvenue(A, G), haswordtitle(H, G).;false;false
3;false;haswordvenue(A, I), haswordtitle(J, I).;true;false
3;false,true;haswordtitle(J, K), haswordauthor(L, K).;true;false
3;false,true,true;haswordauthor(L, I).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, A).;false;true
4;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
4;true,false;haswordvenue(B, H), haswordtitle(I, H).;false;false
4;false;haswordvenue(B, J), haswordtitle(K, J).;true;false
4;false,true;haswordtitle(K, L), haswordauthor(M, L).;true;false
4;false,true,true;haswordvenue(A, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, A).;false;true
5;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
5;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;false
5;false;haswordvenue(A, J), haswordauthor(K, J).;false;true
5;false,false;haswordvenue(B, L), haswordtitle(M, L).;true;false
5;false,false,true;haswordtitle(M, N), haswordauthor(P, N).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;title(E, D), venue(E, B).;false;true
6;true,true,false;title(F, D), venue(F, A).;false;false
6;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
6;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
6;false;haswordvenue(A, K), haswordauthor(L, K).;false;true
6;false,false;haswordvenue(B, M), haswordtitle(N, M).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
7;true,false;haswordvenue(B, H), haswordtitle(I, H).;false;false
7;false;haswordvenue(A, J), haswordtitle(K, J).;true;false
7;false,true;haswordtitle(K, L), haswordauthor(M, L).;true;false
7;false,true,true;haswordvenue(B, L).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;title(E, D), venue(E, B).;false;true
8;true,true,false;title(F, D), venue(F, A).;false;false
8;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;false
8;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
8;false;haswordvenue(B, K), haswordauthor(L, K).;false;true
8;false,false;haswordvenue(A, M), haswordtitle(N, M).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, B).;false;true
9;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
9;true,false;haswordvenue(A, H), haswordauthor(I, H).;false;true
9;true,false,false;haswordvenue(A, J), haswordtitle(K, J).;false;false
9;false;haswordvenue(A, L), haswordauthor(M, L).;false;true
9;false,false;haswordvenue(B, N), haswordauthor(P, N).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1418510649004878;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995097;  // std dev = 9.83e-07, 157.000 (wgt'ed) examples reached here.  /* #pos=157 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.3581489350995113;  // std dev = 4.359, 76.000 (wgt'ed) examples reached here.  /* #neg=38 #pos=38 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.14185106490048807;  // std dev = 0.000, 151.000 (wgt'ed) examples reached here.  /* #neg=151 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.12544463852839138;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else if ( genre(B, E) )
%   | | then return 0.7194734122109563;  // std dev = 0.000, 157.000 (wgt'ed) examples reached here.  /* #pos=157 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.3087411357856347;  // std dev = 4.359, 76.000 (wgt'ed) examples reached here.  /* #neg=38 #pos=38 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then if ( movie(H, B) )
%   | | then return -0.1254446385283913;  // std dev = 4.71e-08, 151.000 (wgt'ed) examples reached here.  /* #neg=151 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.11231637819360639;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else if ( genre(B, E) )
%   | | then return 0.5553664367462833;  // std dev = 5.40e-07, 157.000 (wgt'ed) examples reached here.  /* #pos=157 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.2564123687585859;  // std dev = 4.359, 76.000 (wgt'ed) examples reached here.  /* #neg=38 #pos=38 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then if ( movie(H, A) )
%   | | then return -0.11231637819360625;  // std dev = 7.57e-09, 151.000 (wgt'ed) examples reached here.  /* #neg=151 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.10159632948783627;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else if ( genre(B, E) )
%   | | then return 0.4175135841583089;  // std dev = 4.58e-07, 157.000 (wgt'ed) examples reached here.  /* #pos=157 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.20613740734453911;  // std dev = 4.359, 76.000 (wgt'ed) examples reached here.  /* #neg=38 #pos=38 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.10159632948783646;  // std dev = 0.000, 151.000 (wgt'ed) examples reached here.  /* #neg=151 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.09269127618926097;  // std dev = 2.63e-09, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else if ( movie(E, B) )
%   | | then return 0.2688220246392213;  // std dev = 4.505, 233.000 (wgt'ed) examples reached here.  /* #neg=38 #pos=195 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, B) )
%   | then if ( movie(G, A) )
%   | | then return -0.0926912761892607;  // std dev = 7.74e-08, 151.000 (wgt'ed) examples reached here.  /* #neg=151 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.08518475138839687;  // std dev = 2.63e-09, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else if ( movie(E, B) )
%   | | then return 0.2109955407690122;  // std dev = 4.518, 233.000 (wgt'ed) examples reached here.  /* #neg=38 #pos=195 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.08518475138839678;  // std dev = 6.66e-08, 151.000 (wgt'ed) examples reached here.  /* #neg=151 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.22612543476923655;  // std dev = 0.000, 157.000 (wgt'ed) examples reached here.  /* #pos=157 */
%   | else if ( genre(A, E) )
%   | | then return -0.07877675473109173;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.04754159313173775;  // std dev = 4.359, 76.000 (wgt'ed) examples reached here.  /* #neg=38 #pos=38 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.07877675473109151;  // std dev = 8.23e-08, 151.000 (wgt'ed) examples reached here.  /* #neg=151 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.18901159899655104;  // std dev = 1.74e-07, 157.000 (wgt'ed) examples reached here.  /* #pos=157 */
%   | else if ( movie(E, B) )
%   | | then return 0.027764652563711693;  // std dev = 4.366, 82.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=38 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then if ( movie(G, B) )
%   | | then return -0.07324622576333731;  // std dev = 0.000, 151.000 (wgt'ed) examples reached here.  /* #neg=151 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.16172389912299792;  // std dev = 1.49e-07, 157.000 (wgt'ed) examples reached here.  /* #pos=157 */
%   | else if ( genre(A, E) )
%   | | then return -0.07515339909944806;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.02882708119391819;  // std dev = 4.359, 76.000 (wgt'ed) examples reached here.  /* #neg=38 #pos=38 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.06842697784420264;  // std dev = 6.66e-08, 151.000 (wgt'ed) examples reached here.  /* #neg=151 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.14097918881188803;  // std dev = 1.38e-07, 157.000 (wgt'ed) examples reached here.  /* #pos=157 */
%   | else if ( movie(E, A) )
%   | | then return 0.014926652446617611;  // std dev = 4.364, 82.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=38 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.06419184008202626;  // std dev = 0.000, 151.000 (wgt'ed) examples reached here.  /* #neg=151 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.193621
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 5.617 seconds
Total inference time: 1.735 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 0.981012
   AUC PR    = 0.98203
   CLL	      = -0.214115
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.805128
   F1        = 0.892045


Total scoring time: 2.456 seconds
Parameter learned model CLL: -0.214115


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 6, 0], 'true,false,true': [9.83e-07, 0, 157], 'true,false,false,true': [4.359, 38, 38], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 151, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)', 'false,true': 'movie(H, B)'}, {'true,true': [0.0, 6, 0], 'true,false,true': [0.0, 0, 157], 'true,false,false,true': [4.359, 38, 38], 'true,false,false,false': [0.0, 0, 0], 'false,true,true': [4.71e-08, 151, 0], 'false,true,false': [0.0, 0, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)', 'false,true': 'movie(H, A)'}, {'true,true': [0.0, 6, 0], 'true,false,true': [5.4e-07, 0, 157], 'true,false,false,true': [4.359, 38, 38], 'true,false,false,false': [0.0, 0, 0], 'false,true,true': [7.57e-09, 151, 0], 'false,true,false': [0.0, 0, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 6, 0], 'true,false,true': [4.58e-07, 0, 157], 'true,false,false,true': [4.359, 38, 38], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 151, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, B)', 'false,true': 'movie(G, A)'}, {'true,true': [2.63e-09, 6, 0], 'true,false,true': [4.505, 38, 195], 'true,false,false': [0.0, 0, 0], 'false,true,true': [7.74e-08, 151, 0], 'false,true,false': [0.0, 0, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, A)'}, {'true,true': [2.63e-09, 6, 0], 'true,false,true': [4.518, 38, 195], 'true,false,false': [0.0, 0, 0], 'false,true': [6.66e-08, 151, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 0, 157], 'true,false,true': [0.0, 6, 0], 'true,false,false,true': [4.359, 38, 38], 'true,false,false,false': [0.0, 0, 0], 'false,true': [8.23e-08, 151, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, A)', 'false,true': 'movie(G, B)'}, {'true,true': [1.74e-07, 0, 157], 'true,false,true': [4.366, 44, 38], 'true,false,false': [0.0, 0, 0], 'false,true,true': [0.0, 151, 0], 'false,true,false': [0.0, 0, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [1.49e-07, 0, 157], 'true,false,true': [0.0, 6, 0], 'true,false,false,true': [4.359, 38, 38], 'true,false,false,false': [0.0, 0, 0], 'false,true': [6.66e-08, 151, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [1.38e-07, 0, 157], 'true,false,true': [4.364, 44, 38], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 151, 0], 'false,false': [0.0, 0, 0]}]]
[{'': [0.15020745435129484, -1.1763952578809607e-16], 'true': [-6.938893903907228e-18, 0.13649173865792888], 'true,false': [6.155019876648002e-15, 0.2500000000000016], 'true,false,false': [0.2500000000000016, nan], 'false': [-1.1763952578809607e-16, nan]}, {'': [0.12801570952911706, 1.4704940723512008e-17], 'true': [-2.3129646346357427e-18, 0.11862330060552417], 'true,false': [-2.715449945580001e-15, 0.2500000000000014], 'true,false,false': [0.2500000000000014, nan], 'false': [1.4704940723512008e-17, nan], 'false,true': [1.4704940723512008e-17, nan]}, {'': [0.10660435047890235, 5.734926882169682e-17], 'true': [0.0, 0.10118817839401285], 'true,false': [1.8555574628130005e-15, 0.24999999999999953], 'true,false,false': [0.24999999999999953, nan], 'false': [5.734926882169682e-17, nan], 'false,true': [5.734926882169682e-17, nan]}, {'': [0.09403107781156027, -6.029025696639923e-17], 'true': [0.0, 0.09136510941627954], 'true,false': [1.3350962232435004e-15, 0.2500000000000011], 'true,false,false': [0.2500000000000011, nan], 'false': [-6.029025696639923e-17, nan]}, {'': [0.0881191189330576, 3.970333995348242e-17], 'true': [1.1564823173178713e-18, 0.08710731342974601], 'true,false': [0.08710731342974601, nan], 'false': [3.970333995348242e-17, nan], 'false,true': [3.970333995348242e-17, nan]}, {'': [0.0875530941484299, 2.9409881447024017e-17], 'true': [1.1564823173178713e-18, 0.08760543510578703], 'true,false': [0.08760543510578703, nan], 'false': [2.9409881447024017e-17, nan]}, {'': [0.08782036435735105, 4.485006920671162e-17], 'true': [-3.1680249365100006e-16, 0.23278942358761134], 'true,false': [-1.1564823173178713e-18, 0.25], 'true,false,false': [0.25, nan], 'false': [4.485006920671162e-17, nan]}, {'': [0.08563431894369902, -2.7939387374672815e-17], 'true': [1.9234437114525006e-16, 0.232512832668466], 'true,false': [0.232512832668466, nan], 'false': [-2.7939387374672815e-17, nan], 'false,true': [-2.7939387374672815e-17, nan]}, {'': [0.08419888401546285, 2.9409881447024017e-17], 'true': [1.4142968466562503e-16, 0.23244054800246988], 'true,false': [-2.3129646346357427e-18, 0.24999999999999964], 'true,false,false': [0.24999999999999964, nan], 'false': [2.9409881447024017e-17, nan]}, {'': [0.08327483879969642, -1.0293458506458405e-17], 'true': [1.2162952881243753e-16, 0.23227798584275783], 'true,false': [0.23227798584275783, nan], 'false': [-1.0293458506458405e-17, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(A, D).;true;true
0;true,false;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;true;genre(A, D).;true;true
1;true,false;genre(B, E).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;true;genre(A, D).;true;true
2;true,false;genre(B, E).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;true;genre(A, D).;true;true
3;true,false;genre(B, E).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;true;genre(A, D).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;true;genre(A, D).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(B, D).;true;true
6;true,false;genre(A, E).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;true;genre(B, D).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;true;genre(B, D).;true;true
8;true,false;genre(A, E).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;true;genre(B, D).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1418510649004878;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995097;  // std dev = 9.83e-07, 157.000 (wgt'ed) examples reached here.  /* #pos=157 */
%   | | else if ( actor(B) )
%   | | | then return -0.14185106490048768;  // std dev = 3.94e-08, 38.000 (wgt'ed) examples reached here.  /* #neg=38 */
%   | | | else return 0.8581489350995115;  // std dev = 2.60e-07, 38.000 (wgt'ed) examples reached here.  /* #pos=38 */
%   else return -0.14185106490048807;  // std dev = 0.000, 151.000 (wgt'ed) examples reached here.  /* #neg=151 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.12544463852839138;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else if ( genre(B, E) )
%   | | then return 0.7194734122109563;  // std dev = 0.000, 157.000 (wgt'ed) examples reached here.  /* #pos=157 */
%   | | else if ( actor(B) )
%   | | | then return -0.12544463852839147;  // std dev = 0.000, 38.000 (wgt'ed) examples reached here.  /* #neg=38 */
%   | | | else return 0.719473412210955;  // std dev = 0.000, 38.000 (wgt'ed) examples reached here.  /* #pos=38 */
%   else return -0.1254446385283913;  // std dev = 4.71e-08, 151.000 (wgt'ed) examples reached here.  /* #neg=151 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.11231637819360639;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else if ( genre(B, E) )
%   | | then return 0.5553664367462833;  // std dev = 5.40e-07, 157.000 (wgt'ed) examples reached here.  /* #pos=157 */
%   | | else if ( actor(B) )
%   | | | then return -0.1123163781936064;  // std dev = 0.000, 38.000 (wgt'ed) examples reached here.  /* #neg=38 */
%   | | | else return 0.5553664367462843;  // std dev = 1.26e-07, 38.000 (wgt'ed) examples reached here.  /* #pos=38 */
%   else return -0.11231637819360625;  // std dev = 9.31e-08, 151.000 (wgt'ed) examples reached here.  /* #neg=151 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.10159632948783627;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else if ( genre(B, E) )
%   | | then return 0.4175135841583089;  // std dev = 4.58e-07, 157.000 (wgt'ed) examples reached here.  /* #pos=157 */
%   | | else if ( actor(B) )
%   | | | then return -0.10159632948783634;  // std dev = 0.000, 38.000 (wgt'ed) examples reached here.  /* #neg=38 */
%   | | | else return 0.4175135841583102;  // std dev = 0.000, 38.000 (wgt'ed) examples reached here.  /* #pos=38 */
%   else return -0.10159632948783646;  // std dev = 0.000, 151.000 (wgt'ed) examples reached here.  /* #neg=151 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.09269127618926097;  // std dev = 2.63e-09, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else if ( actor(B) )
%   | | then return -0.092691276189261;  // std dev = 0.000, 38.000 (wgt'ed) examples reached here.  /* #neg=38 */
%   | | else return 0.32071184716014917;  // std dev = 4.13e-07, 195.000 (wgt'ed) examples reached here.  /* #pos=195 */
%   else return -0.0926912761892607;  // std dev = 7.74e-08, 151.000 (wgt'ed) examples reached here.  /* #neg=151 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.08518475138839687;  // std dev = 2.63e-09, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else if ( director(B) )
%   | | then return 0.25517224256949056;  // std dev = 0.000, 195.000 (wgt'ed) examples reached here.  /* #pos=195 */
%   | | else return -0.0851847513883968;  // std dev = 2.24e-08, 38.000 (wgt'ed) examples reached here.  /* #neg=38 */
%   else return -0.08518475138839678;  // std dev = 6.66e-08, 151.000 (wgt'ed) examples reached here.  /* #neg=151 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.20975771563253517;  // std dev = 2.56e-07, 157.000 (wgt'ed) examples reached here.  /* #pos=157 */
%   | else if ( genre(A, E) )
%   | | then return -0.07877675473109173;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else if ( actor(B) )
%   | | | then return -0.07877675473109179;  // std dev = 0.000, 38.000 (wgt'ed) examples reached here.  /* #neg=38 */
%   | | | else return 0.20975771563253542;  // std dev = 5.96e-08, 38.000 (wgt'ed) examples reached here.  /* #pos=38 */
%   else return -0.07877675473109151;  // std dev = 8.23e-08, 151.000 (wgt'ed) examples reached here.  /* #neg=151 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.1770964977452782;  // std dev = 0.000, 157.000 (wgt'ed) examples reached here.  /* #pos=157 */
%   | else if ( actor(B) )
%   | | then return -0.07324622576333704;  // std dev = 1.18e-08, 44.000 (wgt'ed) examples reached here.  /* #neg=44 */
%   | | else return 0.1770964977452775;  // std dev = 0.000, 38.000 (wgt'ed) examples reached here.  /* #pos=38 */
%   else return -0.07324622576333731;  // std dev = 0.000, 151.000 (wgt'ed) examples reached here.  /* #neg=151 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.15274385809367147;  // std dev = 0.000, 157.000 (wgt'ed) examples reached here.  /* #pos=157 */
%   | else if ( genre(A, E) )
%   | | then return -0.06842697784420272;  // std dev = 1.86e-09, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else if ( actor(B) )
%   | | | then return -0.06842697784420272;  // std dev = 0.000, 38.000 (wgt'ed) examples reached here.  /* #neg=38 */
%   | | | else return 0.15274385809367083;  // std dev = 0.000, 38.000 (wgt'ed) examples reached here.  /* #pos=38 */
%   else return -0.06842697784420264;  // std dev = 6.66e-08, 151.000 (wgt'ed) examples reached here.  /* #neg=151 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.134007030008011;  // std dev = 6.99e-08, 157.000 (wgt'ed) examples reached here.  /* #pos=157 */
%   | else if ( actor(B) )
%   | | then return -0.06419184008202625;  // std dev = 0.000, 44.000 (wgt'ed) examples reached here.  /* #neg=44 */
%   | | else return 0.1340070300080108;  // std dev = 3.80e-08, 38.000 (wgt'ed) examples reached here.  /* #pos=38 */
%   else return -0.06419184008202626;  // std dev = 0.000, 151.000 (wgt'ed) examples reached here.  /* #neg=151 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.094637
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 7.051 seconds
Total inference time: 1.782 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.094637
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 2.339 seconds
Refined model CLL: -0.094637


******************************************
Best model found
******************************************
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.094637
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 17.463 seconds
Total inference time: 1.782 seconds
AUC ROC: 1.0
Total revision time: 17.463
Best scored revision CLL: -0.094637


Dataset: 4_cora_imdb, Fold: 1, Type: Transfer (trRDN-B), Time: 17:56:02
{'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.094637, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 17.463, 'Inference time': 1.782, 'parameter_0.6': {'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.193621, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 5.617, 'Inference time': 1.735}}


Amount of data: 0.8
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;false;false
0;false;haswordvenue(A, I), haswordtitle(J, I).;true;false
0;false,true;haswordtitle(J, K), haswordauthor(L, K).;true;false
0;false,true,true;haswordauthor(L, I).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, A).;false;true
1;true,true,false;title(F, D), venue(F, B).;false;false
1;true,false;haswordvenue(A, G), haswordtitle(H, G).;false;false
1;false;haswordvenue(A, I), haswordtitle(J, I).;true;false
1;false,true;haswordtitle(J, K), haswordauthor(L, K).;true;false
1;false,true,true;haswordvenue(B, K).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;title(F, D), venue(F, B).;false;false
2;true,false;haswordvenue(A, G), haswordtitle(H, G).;false;false
2;false;haswordvenue(B, I), haswordtitle(J, I).;true;false
2;false,true;haswordtitle(J, K), haswordvenue(A, K).;true;false
2;false,true,true;haswordauthor(L, K).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;title(E, D), venue(E, A).;false;true
3;true,true,false;title(F, D), venue(F, B).;false;false
3;true,false;haswordvenue(A, G), haswordtitle(H, G).;false;false
3;false;haswordvenue(A, I), haswordtitle(J, I).;true;false
3;false,true;haswordtitle(J, K), haswordauthor(L, K).;true;false
3;false,true,true;haswordauthor(L, I).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, A).;false;true
4;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
4;true,false;haswordvenue(B, H), haswordtitle(I, H).;false;false
4;false;haswordvenue(B, J), haswordtitle(K, J).;true;false
4;false,true;haswordtitle(K, L), haswordauthor(M, L).;true;false
4;false,true,true;haswordvenue(A, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, A).;false;true
5;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
5;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;false
5;false;haswordvenue(A, J), haswordauthor(K, J).;false;true
5;false,false;haswordvenue(B, L), haswordtitle(M, L).;true;false
5;false,false,true;haswordtitle(M, N), haswordauthor(P, N).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;title(E, D), venue(E, B).;false;true
6;true,true,false;title(F, D), venue(F, A).;false;false
6;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
6;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
6;false;haswordvenue(A, K), haswordauthor(L, K).;false;true
6;false,false;haswordvenue(B, M), haswordtitle(N, M).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
7;true,false;haswordvenue(B, H), haswordtitle(I, H).;false;false
7;false;haswordvenue(A, J), haswordtitle(K, J).;true;false
7;false,true;haswordtitle(K, L), haswordauthor(M, L).;true;false
7;false,true,true;haswordvenue(B, L).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;title(E, D), venue(E, B).;false;true
8;true,true,false;title(F, D), venue(F, A).;false;false
8;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;false
8;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
8;false;haswordvenue(B, K), haswordauthor(L, K).;false;true
8;false,false;haswordvenue(A, M), haswordtitle(N, M).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, B).;false;true
9;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
9;true,false;haswordvenue(A, H), haswordauthor(I, H).;false;true
9;true,false,false;haswordvenue(A, J), haswordtitle(K, J).;false;false
9;false;haswordvenue(A, L), haswordauthor(M, L).;false;true
9;false,false;haswordvenue(B, N), haswordauthor(P, N).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1418510649004878;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995091;  // std dev = 1.08e-06, 210.000 (wgt'ed) examples reached here.  /* #pos=210 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.3531984400500082;  // std dev = 5.025, 101.000 (wgt'ed) examples reached here.  /* #neg=51 #pos=50 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.1418510649004884;  // std dev = 0.000, 200.000 (wgt'ed) examples reached here.  /* #neg=200 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.12544463852839138;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | else if ( genre(B, E) )
%   | | then return 0.7194734122109571;  // std dev = 0.000, 210.000 (wgt'ed) examples reached here.  /* #pos=210 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.3045552077775256;  // std dev = 5.025, 101.000 (wgt'ed) examples reached here.  /* #neg=51 #pos=50 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then if ( movie(H, B) )
%   | | then return -0.12544463852839166;  // std dev = 0.000, 200.000 (wgt'ed) examples reached here.  /* #neg=200 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.11231637819360639;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | else if ( genre(B, E) )
%   | | then return 0.5553664367462832;  // std dev = 6.31e-07, 210.000 (wgt'ed) examples reached here.  /* #pos=210 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.25314133814937523;  // std dev = 5.025, 101.000 (wgt'ed) examples reached here.  /* #neg=51 #pos=50 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then if ( movie(H, A) )
%   | | then return -0.1123163781936066;  // std dev = 0.000, 200.000 (wgt'ed) examples reached here.  /* #neg=200 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.10159632948783627;  // std dev = 5.27e-09, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | else if ( genre(B, E) )
%   | | then return 0.41751358415831025;  // std dev = 2.06e-07, 210.000 (wgt'ed) examples reached here.  /* #pos=210 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.203754949305436;  // std dev = 5.025, 101.000 (wgt'ed) examples reached here.  /* #neg=51 #pos=50 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.10159632948783653;  // std dev = 0.000, 200.000 (wgt'ed) examples reached here.  /* #neg=200 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.09269127618926097;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | else if ( movie(E, B) )
%   | | then return 0.2685131590939316;  // std dev = 5.197, 311.000 (wgt'ed) examples reached here.  /* #neg=51 #pos=260 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, B) )
%   | then if ( movie(G, A) )
%   | | then return -0.09269127618926053;  // std dev = 5.96e-08, 200.000 (wgt'ed) examples reached here.  /* #neg=200 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.08518475138839687;  // std dev = 3.73e-09, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | else if ( movie(E, B) )
%   | | then return 0.21084041809272097;  // std dev = 5.211, 311.000 (wgt'ed) examples reached here.  /* #neg=51 #pos=260 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.08518475138839678;  // std dev = 7.60e-08, 200.000 (wgt'ed) examples reached here.  /* #neg=200 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.22620663964896498;  // std dev = 2.67e-07, 210.000 (wgt'ed) examples reached here.  /* #pos=210 */
%   | else if ( genre(A, E) )
%   | | then return -0.07877675473109173;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.04636728446175592;  // std dev = 5.025, 101.000 (wgt'ed) examples reached here.  /* #neg=51 #pos=50 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.07877675473109147;  // std dev = 7.30e-08, 200.000 (wgt'ed) examples reached here.  /* #neg=200 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.1890702813908803;  // std dev = 0.000, 210.000 (wgt'ed) examples reached here.  /* #pos=210 */
%   | else if ( movie(E, B) )
%   | | then return 0.026026220129132267;  // std dev = 5.034, 110.000 (wgt'ed) examples reached here.  /* #neg=60 #pos=50 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then if ( movie(G, B) )
%   | | then return -0.07324622576333666;  // std dev = 1.19e-07, 200.000 (wgt'ed) examples reached here.  /* #neg=200 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.1617678420722907;  // std dev = 0.000, 210.000 (wgt'ed) examples reached here.  /* #pos=210 */
%   | else if ( genre(A, E) )
%   | | then return -0.07503265792320202;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.028400656275403134;  // std dev = 5.025, 101.000 (wgt'ed) examples reached here.  /* #neg=51 #pos=50 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.06842697784420262;  // std dev = 8.16e-08, 200.000 (wgt'ed) examples reached here.  /* #neg=200 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.14101312049482573;  // std dev = 1.12e-07, 210.000 (wgt'ed) examples reached here.  /* #pos=210 */
%   | else if ( movie(E, A) )
%   | | then return 0.013854690573374195;  // std dev = 5.032, 110.000 (wgt'ed) examples reached here.  /* #neg=60 #pos=50 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.06419184008202626;  // std dev = 0.000, 200.000 (wgt'ed) examples reached here.  /* #neg=200 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.192119
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 5.97 seconds
Total inference time: 1.803 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 0.981139
   AUC PR    = 0.982179
   CLL	      = -0.213822
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.807692
   F1        = 0.893617


Total scoring time: 2.509 seconds
Parameter learned model CLL: -0.213822


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 9, 0], 'true,false,true': [1.08e-06, 0, 210], 'true,false,false,true': [5.025, 51, 50], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 200, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)', 'false,true': 'movie(H, B)'}, {'true,true': [0.0, 9, 0], 'true,false,true': [0.0, 0, 210], 'true,false,false,true': [5.025, 51, 50], 'true,false,false,false': [0.0, 0, 0], 'false,true,true': [0.0, 200, 0], 'false,true,false': [0.0, 0, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)', 'false,true': 'movie(H, A)'}, {'true,true': [0.0, 9, 0], 'true,false,true': [6.31e-07, 0, 210], 'true,false,false,true': [5.025, 51, 50], 'true,false,false,false': [0.0, 0, 0], 'false,true,true': [0.0, 200, 0], 'false,true,false': [0.0, 0, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [5.27e-09, 9, 0], 'true,false,true': [2.06e-07, 0, 210], 'true,false,false,true': [5.025, 51, 50], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 200, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, B)', 'false,true': 'movie(G, A)'}, {'true,true': [0.0, 9, 0], 'true,false,true': [5.197, 51, 260], 'true,false,false': [0.0, 0, 0], 'false,true,true': [5.96e-08, 200, 0], 'false,true,false': [0.0, 0, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, A)'}, {'true,true': [3.73e-09, 9, 0], 'true,false,true': [5.211, 51, 260], 'true,false,false': [0.0, 0, 0], 'false,true': [7.6e-08, 200, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [2.67e-07, 0, 210], 'true,false,true': [0.0, 9, 0], 'true,false,false,true': [5.025, 51, 50], 'true,false,false,false': [0.0, 0, 0], 'false,true': [7.3e-08, 200, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, A)', 'false,true': 'movie(G, B)'}, {'true,true': [0.0, 0, 210], 'true,false,true': [5.034, 60, 50], 'true,false,false': [0.0, 0, 0], 'false,true,true': [1.19e-07, 200, 0], 'false,true,false': [0.0, 0, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 210], 'true,false,true': [0.0, 9, 0], 'true,false,false,true': [5.025, 51, 50], 'true,false,false,false': [0.0, 0, 0], 'false,true': [8.16e-08, 200, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [1.12e-07, 0, 210], 'true,false,true': [5.032, 60, 50], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 200, 0], 'false,false': [0.0, 0, 0]}]]
[{'': [0.15234375000000408, -2.3980817331903383e-16], 'true': [-9.25185853854297e-18, 0.13709535674776313], 'true,false': [5.549000412602687e-15, 0.24997549259876492], 'true,false,false': [0.24997549259876492, nan], 'false': [-2.3980817331903383e-16, nan]}, {'': [0.1293748031974145, -5.329070518200751e-17], 'true': [0.0, 0.11893417806094375], 'true,false': [-3.857231994126258e-15, 0.24997549259876276], 'true,false,false': [0.24997549259876276, nan], 'false': [-5.329070518200751e-17, nan], 'false,true': [-5.329070518200751e-17, nan]}, {'': [0.10723142211966682, -4.218847493575595e-17], 'true': [-1.5419764230904951e-18, 0.10121175147927221], 'true,false': [1.8947806286936005e-15, 0.24997549259876412], 'true,false,false': [0.24997549259876412, nan], 'false': [-4.218847493575595e-17, nan], 'false,true': [-4.218847493575595e-17, nan]}, {'': [0.09416419720656344, -9.103828801926283e-17], 'true': [3.0839528461809902e-18, 0.09120174015789415], 'true,false': [2.0301221021717148e-16, 0.24997549259876553], 'true,false,false': [0.24997549259876553, nan], 'false': [-9.103828801926283e-17, nan]}, {'': [0.08797063243502082, 1.7763568394002505e-17], 'true': [0.0, 0.086846975749589], 'true,false': [0.086846975749589, nan], 'false': [1.7763568394002505e-17, nan], 'false,true': [1.7763568394002505e-17, nan]}, {'': [0.08726922245410884, 2.886579864025407e-17], 'true': [1.5419764230904951e-18, 0.08733007925538588], 'true,false': [0.08733007925538588, nan], 'false': [2.886579864025407e-17, nan]}, {'': [0.087453318664928, 2.6645352591003756e-17], 'true': [3.383536836952858e-16, 0.2306994710362102], 'true,false': [0.0, 0.24997549259876528], 'true,false,false': [0.24997549259876528, nan], 'false': [2.6645352591003756e-17, nan]}, {'': [0.0851972192988127, 7.105427357601002e-17], 'true': [-4.229421046191073e-18, 0.23040112226177625], 'true,false': [0.23040112226177625, nan], 'false': [7.105427357601002e-17, nan], 'false,true': [7.105427357601002e-17, nan]}, {'': [0.0837126145892513, 3.3306690738754695e-17], 'true': [-6.344131569286608e-17, 0.23032666233588045], 'true,false': [-1.5419764230904951e-18, 0.24997549259876517], 'true,false,false': [0.24997549259876517, nan], 'false': [3.3306690738754695e-17, nan]}, {'': [0.08276140087510686, -1.6653345369377347e-18], 'true': [5.921189464667501e-17, 0.23014935789996765], 'true,false': [0.23014935789996765, nan], 'false': [-1.6653345369377347e-18, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(A, D).;true;true
0;true,false;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;true;genre(A, D).;true;true
1;true,false;genre(B, E).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;true;genre(A, D).;true;true
2;true,false;genre(B, E).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;true;genre(A, D).;true;true
3;true,false;genre(B, E).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;true;genre(A, D).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;true;genre(A, D).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(B, D).;true;true
6;true,false;genre(A, E).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;true;genre(B, D).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;true;genre(B, D).;true;true
8;true,false;genre(A, E).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;true;genre(B, D).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1418510649004878;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995091;  // std dev = 1.08e-06, 210.000 (wgt'ed) examples reached here.  /* #pos=210 */
%   | | else if ( actor(B) )
%   | | | then return -0.14185106490048768;  // std dev = 5.37e-08, 51.000 (wgt'ed) examples reached here.  /* #neg=51 */
%   | | | else return 0.8581489350995122;  // std dev = 1.46e-07, 50.000 (wgt'ed) examples reached here.  /* #pos=50 */
%   else return -0.1418510649004884;  // std dev = 0.000, 200.000 (wgt'ed) examples reached here.  /* #neg=200 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.12544463852839138;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | else if ( genre(B, E) )
%   | | then return 0.7194734122109571;  // std dev = 0.000, 210.000 (wgt'ed) examples reached here.  /* #pos=210 */
%   | | else if ( actor(B) )
%   | | | then return -0.12544463852839158;  // std dev = 0.000, 51.000 (wgt'ed) examples reached here.  /* #neg=51 */
%   | | | else return 0.7194734122109547;  // std dev = 0.000, 50.000 (wgt'ed) examples reached here.  /* #pos=50 */
%   else return -0.12544463852839166;  // std dev = 0.000, 200.000 (wgt'ed) examples reached here.  /* #neg=200 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.11231637819360639;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | else if ( genre(B, E) )
%   | | then return 0.5553664367462832;  // std dev = 6.31e-07, 210.000 (wgt'ed) examples reached here.  /* #pos=210 */
%   | | else if ( actor(B) )
%   | | | then return -0.11231637819360632;  // std dev = 3.16e-08, 51.000 (wgt'ed) examples reached here.  /* #neg=51 */
%   | | | else return 0.5553664367462838;  // std dev = 4.21e-08, 50.000 (wgt'ed) examples reached here.  /* #pos=50 */
%   else return -0.1123163781936066;  // std dev = 0.000, 200.000 (wgt'ed) examples reached here.  /* #neg=200 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.10159632948783627;  // std dev = 5.27e-09, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | else if ( genre(B, E) )
%   | | then return 0.41751358415831025;  // std dev = 2.06e-07, 210.000 (wgt'ed) examples reached here.  /* #pos=210 */
%   | | else if ( actor(B) )
%   | | | then return -0.10159632948783626;  // std dev = 2.58e-08, 51.000 (wgt'ed) examples reached here.  /* #neg=51 */
%   | | | else return 0.4175135841583103;  // std dev = 0.000, 50.000 (wgt'ed) examples reached here.  /* #pos=50 */
%   else return -0.10159632948783653;  // std dev = 0.000, 200.000 (wgt'ed) examples reached here.  /* #neg=200 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.09269127618926097;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | else if ( director(B) )
%   | | then return 0.3207118471601503;  // std dev = 1.33e-07, 260.000 (wgt'ed) examples reached here.  /* #pos=260 */
%   | | else return -0.09269127618926103;  // std dev = 0.000, 51.000 (wgt'ed) examples reached here.  /* #neg=51 */
%   else return -0.09269127618926053;  // std dev = 5.96e-08, 200.000 (wgt'ed) examples reached here.  /* #neg=200 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.08518475138839687;  // std dev = 3.73e-09, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | else if ( actor(B) )
%   | | then return -0.0851847513883968;  // std dev = 1.83e-08, 51.000 (wgt'ed) examples reached here.  /* #neg=51 */
%   | | else return 0.25517224256948795;  // std dev = 3.26e-07, 260.000 (wgt'ed) examples reached here.  /* #pos=260 */
%   else return -0.08518475138839678;  // std dev = 7.60e-08, 200.000 (wgt'ed) examples reached here.  /* #neg=200 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.20975771563253495;  // std dev = 2.95e-07, 210.000 (wgt'ed) examples reached here.  /* #pos=210 */
%   | else if ( genre(A, E) )
%   | | then return -0.07877675473109173;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | else if ( actor(B) )
%   | | | then return -0.07877675473109179;  // std dev = 0.000, 51.000 (wgt'ed) examples reached here.  /* #neg=51 */
%   | | | else return 0.209757715632536;  // std dev = 0.000, 50.000 (wgt'ed) examples reached here.  /* #pos=50 */
%   else return -0.07877675473109147;  // std dev = 7.30e-08, 200.000 (wgt'ed) examples reached here.  /* #neg=200 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.1770964977452778;  // std dev = 0.000, 210.000 (wgt'ed) examples reached here.  /* #pos=210 */
%   | else if ( actor(B) )
%   | | then return -0.07324622576333704;  // std dev = 0.000, 60.000 (wgt'ed) examples reached here.  /* #neg=60 */
%   | | else return 0.17709649774527744;  // std dev = 0.000, 50.000 (wgt'ed) examples reached here.  /* #pos=50 */
%   else return -0.07324622576333666;  // std dev = 1.19e-07, 200.000 (wgt'ed) examples reached here.  /* #neg=200 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.1527438580936717;  // std dev = 0.000, 210.000 (wgt'ed) examples reached here.  /* #pos=210 */
%   | else if ( genre(A, E) )
%   | | then return -0.06842697784420272;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | else if ( actor(B) )
%   | | | then return -0.0684269778442027;  // std dev = 1.39e-08, 51.000 (wgt'ed) examples reached here.  /* #neg=51 */
%   | | | else return 0.1527438580936709;  // std dev = 4.47e-08, 50.000 (wgt'ed) examples reached here.  /* #pos=50 */
%   else return -0.06842697784420262;  // std dev = 8.16e-08, 200.000 (wgt'ed) examples reached here.  /* #neg=200 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.13400703000801092;  // std dev = 8.94e-08, 210.000 (wgt'ed) examples reached here.  /* #pos=210 */
%   | else if ( actor(B) )
%   | | then return -0.06419184008202625;  // std dev = 0.000, 60.000 (wgt'ed) examples reached here.  /* #neg=60 */
%   | | else return 0.134007030008011;  // std dev = 3.16e-08, 50.000 (wgt'ed) examples reached here.  /* #pos=50 */
%   else return -0.06419184008202626;  // std dev = 0.000, 200.000 (wgt'ed) examples reached here.  /* #neg=200 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.094637
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 9.221 seconds
Total inference time: 1.799 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.094637
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 2.289 seconds
Refined model CLL: -0.094637


******************************************
Best model found
******************************************
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.094637
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 19.989 seconds
Total inference time: 1.799 seconds
AUC ROC: 1.0
Total revision time: 19.989
Best scored revision CLL: -0.094637


Dataset: 4_cora_imdb, Fold: 1, Type: Transfer (trRDN-B), Time: 17:56:27
{'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.094637, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 19.989, 'Inference time': 1.799, 'parameter_0.8': {'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.192119, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 5.97, 'Inference time': 1.803}}


Amount of data: 1.0
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;false;false
0;false;haswordvenue(A, I), haswordtitle(J, I).;true;false
0;false,true;haswordtitle(J, K), haswordauthor(L, K).;true;false
0;false,true,true;haswordauthor(L, I).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, A).;false;true
1;true,true,false;title(F, D), venue(F, B).;false;false
1;true,false;haswordvenue(A, G), haswordtitle(H, G).;false;false
1;false;haswordvenue(A, I), haswordtitle(J, I).;true;false
1;false,true;haswordtitle(J, K), haswordauthor(L, K).;true;false
1;false,true,true;haswordvenue(B, K).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;title(F, D), venue(F, B).;false;false
2;true,false;haswordvenue(A, G), haswordtitle(H, G).;false;false
2;false;haswordvenue(B, I), haswordtitle(J, I).;true;false
2;false,true;haswordtitle(J, K), haswordvenue(A, K).;true;false
2;false,true,true;haswordauthor(L, K).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;title(E, D), venue(E, A).;false;true
3;true,true,false;title(F, D), venue(F, B).;false;false
3;true,false;haswordvenue(A, G), haswordtitle(H, G).;false;false
3;false;haswordvenue(A, I), haswordtitle(J, I).;true;false
3;false,true;haswordtitle(J, K), haswordauthor(L, K).;true;false
3;false,true,true;haswordauthor(L, I).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, A).;false;true
4;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
4;true,false;haswordvenue(B, H), haswordtitle(I, H).;false;false
4;false;haswordvenue(B, J), haswordtitle(K, J).;true;false
4;false,true;haswordtitle(K, L), haswordauthor(M, L).;true;false
4;false,true,true;haswordvenue(A, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, A).;false;true
5;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
5;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;false
5;false;haswordvenue(A, J), haswordauthor(K, J).;false;true
5;false,false;haswordvenue(B, L), haswordtitle(M, L).;true;false
5;false,false,true;haswordtitle(M, N), haswordauthor(P, N).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;title(E, D), venue(E, B).;false;true
6;true,true,false;title(F, D), venue(F, A).;false;false
6;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
6;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
6;false;haswordvenue(A, K), haswordauthor(L, K).;false;true
6;false,false;haswordvenue(B, M), haswordtitle(N, M).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
7;true,false;haswordvenue(B, H), haswordtitle(I, H).;false;false
7;false;haswordvenue(A, J), haswordtitle(K, J).;true;false
7;false,true;haswordtitle(K, L), haswordauthor(M, L).;true;false
7;false,true,true;haswordvenue(B, L).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;title(E, D), venue(E, B).;false;true
8;true,true,false;title(F, D), venue(F, A).;false;false
8;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;false
8;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
8;false;haswordvenue(B, K), haswordauthor(L, K).;false;true
8;false,false;haswordvenue(A, M), haswordtitle(N, M).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, B).;false;true
9;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
9;true,false;haswordvenue(A, H), haswordauthor(I, H).;false;true
9;true,false,false;haswordvenue(A, J), haswordtitle(K, J).;false;false
9;false;haswordvenue(A, L), haswordauthor(M, L).;false;true
9;false,false;haswordvenue(B, N), haswordauthor(P, N).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1418510649004878;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995086;  // std dev = 1.08e-06, 267.000 (wgt'ed) examples reached here.  /* #pos=267 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.34981560176618004;  // std dev = 5.476, 120.000 (wgt'ed) examples reached here.  /* #neg=61 #pos=59 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.14185106490048818;  // std dev = 0.000, 255.000 (wgt'ed) examples reached here.  /* #neg=255 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.12544463852839138;  // std dev = 5.27e-09, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | else if ( genre(B, E) )
%   | | then return 0.7194734122109576;  // std dev = 0.000, 267.000 (wgt'ed) examples reached here.  /* #pos=267 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.3016934780963524;  // std dev = 5.476, 120.000 (wgt'ed) examples reached here.  /* #neg=61 #pos=59 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then if ( movie(H, B) )
%   | | then return -0.12544463852839188;  // std dev = 0.000, 255.000 (wgt'ed) examples reached here.  /* #neg=255 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.11231637819360638;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | else if ( genre(B, E) )
%   | | then return 0.5553664367462832;  // std dev = 3.77e-07, 267.000 (wgt'ed) examples reached here.  /* #pos=267 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.25090183607916494;  // std dev = 5.476, 120.000 (wgt'ed) examples reached here.  /* #neg=61 #pos=59 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then if ( movie(H, A) )
%   | | then return -0.11231637819360688;  // std dev = 0.000, 255.000 (wgt'ed) examples reached here.  /* #neg=255 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.10159632948783628;  // std dev = 3.73e-09, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | else if ( genre(B, E) )
%   | | then return 0.4175135841583111;  // std dev = 0.000, 267.000 (wgt'ed) examples reached here.  /* #pos=267 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.20212047346304007;  // std dev = 5.476, 120.000 (wgt'ed) examples reached here.  /* #neg=61 #pos=59 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.10159632948783659;  // std dev = 0.000, 255.000 (wgt'ed) examples reached here.  /* #neg=255 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.09269127618926097;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | else if ( movie(E, B) )
%   | | then return 0.27052181918064383;  // std dev = 5.671, 387.000 (wgt'ed) examples reached here.  /* #neg=61 #pos=326 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, B) )
%   | then if ( movie(G, A) )
%   | | then return -0.09269127618926046;  // std dev = 1.07e-07, 255.000 (wgt'ed) examples reached here.  /* #neg=255 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.08518475138839687;  // std dev = 3.73e-09, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | else if ( movie(E, B) )
%   | | then return 0.21258146335308298;  // std dev = 5.687, 387.000 (wgt'ed) examples reached here.  /* #neg=61 #pos=326 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.08518475138839678;  // std dev = 9.31e-08, 255.000 (wgt'ed) examples reached here.  /* #neg=255 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.22555097564186755;  // std dev = 3.48e-07, 267.000 (wgt'ed) examples reached here.  /* #pos=267 */
%   | else if ( genre(A, E) )
%   | | then return -0.07877675473109172;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.04455936381539775;  // std dev = 5.476, 120.000 (wgt'ed) examples reached here.  /* #neg=61 #pos=59 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.07877675473109143;  // std dev = 5.96e-08, 255.000 (wgt'ed) examples reached here.  /* #neg=255 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.18859635090066665;  // std dev = 0.000, 267.000 (wgt'ed) examples reached here.  /* #pos=267 */
%   | else if ( movie(E, B) )
%   | | then return 0.0253072060422807;  // std dev = 5.486, 130.000 (wgt'ed) examples reached here.  /* #neg=71 #pos=59 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then if ( movie(G, B) )
%   | | then return -0.07324622576333681;  // std dev = 1.17e-07, 255.000 (wgt'ed) examples reached here.  /* #neg=255 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.16141287242114993;  // std dev = 0.000, 267.000 (wgt'ed) examples reached here.  /* #pos=267 */
%   | else if ( genre(A, E) )
%   | | then return -0.07498277160770007;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.02723119577216649;  // std dev = 5.476, 120.000 (wgt'ed) examples reached here.  /* #neg=61 #pos=59 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.06842697784420276;  // std dev = 0.000, 255.000 (wgt'ed) examples reached here.  /* #neg=255 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.14073897056345436;  // std dev = 2.23e-07, 267.000 (wgt'ed) examples reached here.  /* #pos=267 */
%   | else if ( movie(E, A) )
%   | | then return 0.013498112548075434;  // std dev = 5.483, 130.000 (wgt'ed) examples reached here.  /* #neg=71 #pos=59 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.0641918400820262;  // std dev = 4.71e-08, 255.000 (wgt'ed) examples reached here.  /* #neg=255 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.191197
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 6.982 seconds
Total inference time: 1.507 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 0.983068
   AUC PR    = 0.98398
   CLL	      = -0.207644
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.819018
   F1        = 0.900506


Total scoring time: 2.719 seconds
Parameter learned model CLL: -0.207644


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 10, 0], 'true,false,true': [1.08e-06, 0, 267], 'true,false,false,true': [5.476, 61, 59], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 255, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)', 'false,true': 'movie(H, B)'}, {'true,true': [5.27e-09, 10, 0], 'true,false,true': [0.0, 0, 267], 'true,false,false,true': [5.476, 61, 59], 'true,false,false,false': [0.0, 0, 0], 'false,true,true': [0.0, 255, 0], 'false,true,false': [0.0, 0, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)', 'false,true': 'movie(H, A)'}, {'true,true': [0.0, 10, 0], 'true,false,true': [3.77e-07, 0, 267], 'true,false,false,true': [5.476, 61, 59], 'true,false,false,false': [0.0, 0, 0], 'false,true,true': [0.0, 255, 0], 'false,true,false': [0.0, 0, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [3.73e-09, 10, 0], 'true,false,true': [0.0, 0, 267], 'true,false,false,true': [5.476, 61, 59], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 255, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, B)', 'false,true': 'movie(G, A)'}, {'true,true': [0.0, 10, 0], 'true,false,true': [5.671, 61, 326], 'true,false,false': [0.0, 0, 0], 'false,true,true': [1.07e-07, 255, 0], 'false,true,false': [0.0, 0, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, A)'}, {'true,true': [3.73e-09, 10, 0], 'true,false,true': [5.687, 61, 326], 'true,false,false': [0.0, 0, 0], 'false,true': [9.31e-08, 255, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [3.48e-07, 0, 267], 'true,false,true': [0.0, 10, 0], 'true,false,false,true': [5.476, 61, 59], 'true,false,false,false': [0.0, 0, 0], 'false,true': [5.96e-08, 255, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, A)', 'false,true': 'movie(G, B)'}, {'true,true': [0.0, 0, 267], 'true,false,true': [5.486, 71, 59], 'true,false,false': [0.0, 0, 0], 'false,true,true': [1.17e-07, 255, 0], 'false,true,false': [0.0, 0, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 267], 'true,false,true': [0.0, 10, 0], 'true,false,false,true': [5.476, 61, 59], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 255, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [2.23e-07, 0, 267], 'true,false,true': [5.483, 71, 59], 'true,false,false': [0.0, 0, 0], 'false,true': [4.71e-08, 255, 0], 'false,false': [0.0, 0, 0]}]]
[{'': [0.14685709572423197, -1.0797463141452503e-16], 'true': [-1.1102230246251566e-17, 0.13277781116252677], 'true,false': [4.364382346990877e-15, 0.24993055555555538], 'true,false,false': [0.24993055555555538, nan], 'false': [-1.0797463141452503e-16, nan]}, {'': [0.12451045923679754, -6.617799989922502e-17], 'true': [2.7755575615628915e-18, 0.11483710881487638], 'true,false': [-4.577279046844091e-15, 0.24993055555555396], 'true,false,false': [0.24993055555555396, nan], 'false': [-6.617799989922502e-17, nan], 'false,true': [-6.617799989922502e-17, nan]}, {'': [0.1029468981412994, -9.578394722256253e-17], 'true': [0.0, 0.09732882723142053], 'true,false': [5.322417496330339e-16, 0.2499305555555534], 'true,false,false': [0.2499305555555534, nan], 'false': [-9.578394722256253e-17, nan], 'false,true': [-9.578394722256253e-17, nan]}, {'': [0.09024454683346148, -6.791952621236252e-17], 'true': [1.3877787807814458e-18, 0.08742293075339136], 'true,false': [-4.790175746697304e-16, 0.24993055555555557], 'true,false,false': [0.24993055555555557, nan], 'false': [-6.791952621236252e-17, nan]}, {'': [0.08424875429965104, 4.527968414157501e-17], 'true': [0.0, 0.0831027082554899], 'true,false': [0.0831027082554899, nan], 'false': [4.527968414157501e-17, nan], 'false,true': [4.527968414157501e-17, nan]}, {'': [0.08364345728567375, 3.395976310618126e-17], 'true': [1.3877787807814458e-18, 0.08357141870355358], 'true,false': [0.08357141870355358, nan], 'false': [3.395976310618126e-17, nan]}, {'': [0.08388984136552707, 1.3932210505100003e-17], 'true': [4.524054871880788e-16, 0.23178525588357382], 'true,false': [0.0, 0.24993055555555516], 'true,false,false': [0.24993055555555516, nan], 'false': [1.3932210505100003e-17, nan]}, {'': [0.08168283162134118, 5.3987315707262513e-17], 'true': [-1.663255467603231e-16, 0.23151452644851697], 'true,false': [0.23151452644851697, nan], 'false': [5.3987315707262513e-17, nan], 'false,true': [5.3987315707262513e-17, nan]}, {'': [0.08023214124344068, -1.3061447348531253e-17], 'true': [-1.29733926473052e-16, 0.23144697637986394], 'true,false': [0.0, 0.24993055555555524], 'true,false,false': [0.24993055555555524, nan], 'false': [-1.3061447348531253e-17, nan]}, {'': [0.07930131078516658, 8.707631565687502e-18], 'true': [1.8628461237156186e-16, 0.2312853555854926], 'true,false': [0.2312853555854926, nan], 'false': [8.707631565687502e-18, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(A, D).;true;true
0;true,false;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;true;genre(A, D).;true;true
1;true,false;genre(B, E).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;true;genre(A, D).;true;true
2;true,false;genre(B, E).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;true;genre(A, D).;true;true
3;true,false;genre(B, E).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;true;genre(A, D).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;true;genre(A, D).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(B, D).;true;true
6;true,false;genre(A, E).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;true;genre(B, D).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;true;genre(B, D).;true;true
8;true,false;genre(A, E).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;true;genre(B, D).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1418510649004878;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995086;  // std dev = 1.08e-06, 267.000 (wgt'ed) examples reached here.  /* #pos=267 */
%   | | else if ( actor(B) )
%   | | | then return -0.14185106490048766;  // std dev = 6.14e-08, 61.000 (wgt'ed) examples reached here.  /* #neg=61 */
%   | | | else return 0.8581489350995125;  // std dev = 0.000, 59.000 (wgt'ed) examples reached here.  /* #pos=59 */
%   else return -0.14185106490048818;  // std dev = 0.000, 255.000 (wgt'ed) examples reached here.  /* #neg=255 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.12544463852839138;  // std dev = 5.27e-09, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | else if ( genre(B, E) )
%   | | then return 0.7194734122109576;  // std dev = 0.000, 267.000 (wgt'ed) examples reached here.  /* #pos=267 */
%   | | else if ( actor(B) )
%   | | | then return -0.1254446385283916;  // std dev = 0.000, 61.000 (wgt'ed) examples reached here.  /* #neg=61 */
%   | | | else return 0.7194734122109543;  // std dev = 0.000, 59.000 (wgt'ed) examples reached here.  /* #pos=59 */
%   else return -0.12544463852839188;  // std dev = 0.000, 255.000 (wgt'ed) examples reached here.  /* #neg=255 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.11231637819360638;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | else if ( genre(B, E) )
%   | | then return 0.5553664367462832;  // std dev = 3.77e-07, 267.000 (wgt'ed) examples reached here.  /* #pos=267 */
%   | | else if ( actor(B) )
%   | | | then return -0.11231637819360628;  // std dev = 4.59e-08, 61.000 (wgt'ed) examples reached here.  /* #neg=61 */
%   | | | else return 0.5553664367462838;  // std dev = 1.19e-07, 59.000 (wgt'ed) examples reached here.  /* #pos=59 */
%   else return -0.11231637819360688;  // std dev = 0.000, 255.000 (wgt'ed) examples reached here.  /* #neg=255 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.10159632948783628;  // std dev = 3.73e-09, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | else if ( genre(B, E) )
%   | | then return 0.4175135841583111;  // std dev = 0.000, 267.000 (wgt'ed) examples reached here.  /* #pos=267 */
%   | | else if ( actor(B) )
%   | | | then return -0.1015963294878362;  // std dev = 4.08e-08, 61.000 (wgt'ed) examples reached here.  /* #neg=61 */
%   | | | else return 0.41751358415831036;  // std dev = 0.000, 59.000 (wgt'ed) examples reached here.  /* #pos=59 */
%   else return -0.10159632948783659;  // std dev = 0.000, 255.000 (wgt'ed) examples reached here.  /* #neg=255 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.09269127618926097;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | else if ( actor(B) )
%   | | then return -0.09269127618926107;  // std dev = 0.000, 61.000 (wgt'ed) examples reached here.  /* #neg=61 */
%   | | else return 0.3207118471601511;  // std dev = 0.000, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   else return -0.09269127618926046;  // std dev = 1.07e-07, 255.000 (wgt'ed) examples reached here.  /* #neg=255 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.08518475138839687;  // std dev = 3.73e-09, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | else if ( director(B) )
%   | | then return 0.25517224256948756;  // std dev = 3.91e-07, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | | else return -0.08518475138839679;  // std dev = 1.67e-08, 61.000 (wgt'ed) examples reached here.  /* #neg=61 */
%   else return -0.08518475138839678;  // std dev = 9.31e-08, 255.000 (wgt'ed) examples reached here.  /* #neg=255 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.2097577156325348;  // std dev = 2.86e-07, 267.000 (wgt'ed) examples reached here.  /* #pos=267 */
%   | else if ( genre(A, E) )
%   | | then return -0.07877675473109172;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | | else if ( actor(B) )
%   | | | then return -0.07877675473109172;  // std dev = 2.58e-08, 61.000 (wgt'ed) examples reached here.  /* #neg=61 */
%   | | | else return 0.20975771563253595;  // std dev = 0.000, 59.000 (wgt'ed) examples reached here.  /* #pos=59 */
%   else return -0.07877675473109143;  // std dev = 5.96e-08, 255.000 (wgt'ed) examples reached here.  /* #neg=255 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.17709649774527716;  // std dev = 8.43e-08, 267.000 (wgt'ed) examples reached here.  /* #pos=267 */
%   | else if ( actor(B) )
%   | | then return -0.07324622576333704;  // std dev = 0.000, 71.000 (wgt'ed) examples reached here.  /* #neg=71 */
%   | | else return 0.17709649774527733;  // std dev = 0.000, 59.000 (wgt'ed) examples reached here.  /* #pos=59 */
%   else return -0.07324622576333681;  // std dev = 1.17e-07, 255.000 (wgt'ed) examples reached here.  /* #neg=255 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.15274385809367158;  // std dev = 0.000, 267.000 (wgt'ed) examples reached here.  /* #pos=267 */
%   | else if ( genre(A, E) )
%   | | then return -0.06842697784420272;  // std dev = 2.63e-09, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | | else if ( actor(B) )
%   | | | then return -0.06842697784420268;  // std dev = 2.11e-08, 61.000 (wgt'ed) examples reached here.  /* #neg=61 */
%   | | | else return 0.15274385809367097;  // std dev = 2.58e-08, 59.000 (wgt'ed) examples reached here.  /* #pos=59 */
%   else return -0.06842697784420276;  // std dev = 0.000, 255.000 (wgt'ed) examples reached here.  /* #neg=255 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.13400703000801129;  // std dev = 0.000, 267.000 (wgt'ed) examples reached here.  /* #pos=267 */
%   | else if ( actor(B) )
%   | | then return -0.06419184008202625;  // std dev = 0.000, 71.000 (wgt'ed) examples reached here.  /* #neg=71 */
%   | | else return 0.13400703000801098;  // std dev = 4.21e-08, 59.000 (wgt'ed) examples reached here.  /* #pos=59 */
%   else return -0.0641918400820262;  // std dev = 4.71e-08, 255.000 (wgt'ed) examples reached here.  /* #neg=255 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.094637
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 8.211 seconds
Total inference time: 1.604 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.094637
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 2.989 seconds
Refined model CLL: -0.094637


******************************************
Best model found
******************************************
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.094637
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 20.901 seconds
Total inference time: 1.604 seconds
AUC ROC: 1.0
Total revision time: 20.901
Best scored revision CLL: -0.094637


Dataset: 4_cora_imdb, Fold: 1, Type: Transfer (trRDN-B), Time: 17:56:52
{'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.094637, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 20.901, 'Inference time': 1.604, 'parameter_1.0': {'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.191197, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 6.982, 'Inference time': 1.507}}


Starting fold 2

Target train facts examples: 870
Target train pos examples: 324
Target train neg examples: 324

Target test facts examples: 208
Target test pos	 examples: 58
Target test neg examples: 58

Amount of data: 0.2
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;false;false
0;false;haswordvenue(A, I), haswordtitle(J, I).;true;false
0;false,true;haswordtitle(J, K), haswordauthor(L, K).;true;false
0;false,true,true;haswordauthor(L, I).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, A).;false;true
1;true,true,false;title(F, D), venue(F, B).;false;false
1;true,false;haswordvenue(A, G), haswordtitle(H, G).;false;false
1;false;haswordvenue(A, I), haswordtitle(J, I).;true;false
1;false,true;haswordtitle(J, K), haswordauthor(L, K).;true;false
1;false,true,true;haswordvenue(B, K).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;title(F, D), venue(F, B).;false;false
2;true,false;haswordvenue(A, G), haswordtitle(H, G).;false;false
2;false;haswordvenue(B, I), haswordtitle(J, I).;true;false
2;false,true;haswordtitle(J, K), haswordvenue(A, K).;true;false
2;false,true,true;haswordauthor(L, K).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;title(E, D), venue(E, A).;false;true
3;true,true,false;title(F, D), venue(F, B).;false;false
3;true,false;haswordvenue(A, G), haswordtitle(H, G).;false;false
3;false;haswordvenue(A, I), haswordtitle(J, I).;true;false
3;false,true;haswordtitle(J, K), haswordauthor(L, K).;true;false
3;false,true,true;haswordauthor(L, I).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, A).;false;true
4;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
4;true,false;haswordvenue(B, H), haswordtitle(I, H).;false;false
4;false;haswordvenue(B, J), haswordtitle(K, J).;true;false
4;false,true;haswordtitle(K, L), haswordauthor(M, L).;true;false
4;false,true,true;haswordvenue(A, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, A).;false;true
5;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
5;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;false
5;false;haswordvenue(A, J), haswordauthor(K, J).;false;true
5;false,false;haswordvenue(B, L), haswordtitle(M, L).;true;false
5;false,false,true;haswordtitle(M, N), haswordauthor(P, N).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;title(E, D), venue(E, B).;false;true
6;true,true,false;title(F, D), venue(F, A).;false;false
6;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
6;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
6;false;haswordvenue(A, K), haswordauthor(L, K).;false;true
6;false,false;haswordvenue(B, M), haswordtitle(N, M).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
7;true,false;haswordvenue(B, H), haswordtitle(I, H).;false;false
7;false;haswordvenue(A, J), haswordtitle(K, J).;true;false
7;false,true;haswordtitle(K, L), haswordauthor(M, L).;true;false
7;false,true,true;haswordvenue(B, L).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;title(E, D), venue(E, B).;false;true
8;true,true,false;title(F, D), venue(F, A).;false;false
8;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;false
8;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
8;false;haswordvenue(B, K), haswordauthor(L, K).;false;true
8;false,false;haswordvenue(A, M), haswordtitle(N, M).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, B).;false;true
9;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
9;true,false;haswordvenue(A, H), haswordauthor(I, H).;false;true
9;true,false,false;haswordvenue(A, J), haswordtitle(K, J).;false;false
9;false;haswordvenue(A, L), haswordauthor(M, L).;false;true
9;false,false;haswordvenue(B, N), haswordauthor(P, N).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14185106490048777;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995123;  // std dev = 0.000, 54.000 (wgt'ed) examples reached here.  /* #pos=54 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.3844647245731965;  // std dev = 2.176, 19.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=10 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.14185106490048766;  // std dev = 7.90e-09, 52.000 (wgt'ed) examples reached here.  /* #neg=52 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.12544463852839138;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( genre(B, E) )
%   | | then return 0.7194734122109545;  // std dev = 0.000, 54.000 (wgt'ed) examples reached here.  /* #pos=54 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.33095332360970464;  // std dev = 2.176, 19.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=10 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then if ( movie(H, B) )
%   | | then return -0.12544463852839158;  // std dev = 0.000, 52.000 (wgt'ed) examples reached here.  /* #neg=52 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.11231637819360639;  // std dev = 2.63e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( genre(B, E) )
%   | | then return 0.5553664367462838;  // std dev = 8.43e-08, 54.000 (wgt'ed) examples reached here.  /* #pos=54 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.27367588493199535;  // std dev = 2.176, 19.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=10 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then if ( movie(H, A) )
%   | | then return -0.1123163781936063;  // std dev = 4.56e-09, 52.000 (wgt'ed) examples reached here.  /* #neg=52 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1015963294878363;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( genre(B, E) )
%   | | then return 0.4175135841583103;  // std dev = 0.000, 54.000 (wgt'ed) examples reached here.  /* #pos=54 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.21861833752124882;  // std dev = 2.176, 19.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=10 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.10159632948783624;  // std dev = 4.75e-09, 52.000 (wgt'ed) examples reached here.  /* #neg=52 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.09269127618926094;  // std dev = 2.63e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( movie(E, B) )
%   | | then return 0.28153900761782974;  // std dev = 2.248, 73.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=64 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, B) )
%   | then if ( movie(G, A) )
%   | | then return -0.09269127618926107;  // std dev = 0.000, 52.000 (wgt'ed) examples reached here.  /* #neg=52 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.08518475138839687;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( movie(E, B) )
%   | | then return 0.2212256553777636;  // std dev = 2.257, 73.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=64 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.08518475138839679;  // std dev = 1.97e-08, 52.000 (wgt'ed) examples reached here.  /* #neg=52 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.22213511247015916;  // std dev = 2.11e-08, 54.000 (wgt'ed) examples reached here.  /* #pos=54 */
%   | else if ( genre(A, E) )
%   | | then return -0.07877675473109173;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.04868162070581605;  // std dev = 2.176, 19.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=10 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.07877675473109179;  // std dev = 7.45e-09, 52.000 (wgt'ed) examples reached here.  /* #neg=52 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.1861229030176965;  // std dev = 0.000, 54.000 (wgt'ed) examples reached here.  /* #pos=54 */
%   | else if ( movie(E, B) )
%   | | then return 0.0215559649162021;  // std dev = 2.184, 22.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=10 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then if ( movie(G, B) )
%   | | then return -0.07324622576333704;  // std dev = 7.45e-09, 52.000 (wgt'ed) examples reached here.  /* #neg=52 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.1595573837796023;  // std dev = 0.000, 54.000 (wgt'ed) examples reached here.  /* #pos=54 */
%   | else if ( genre(A, E) )
%   | | then return -0.07472299866093751;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.031137010231544915;  // std dev = 2.176, 19.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=10 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.0684269778442027;  // std dev = 1.49e-08, 52.000 (wgt'ed) examples reached here.  /* #neg=52 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.13930404057474877;  // std dev = 0.000, 54.000 (wgt'ed) examples reached here.  /* #pos=54 */
%   | else if ( movie(E, A) )
%   | | then return 0.010661440834619779;  // std dev = 2.182, 22.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=10 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.06419184008202625;  // std dev = 0.000, 52.000 (wgt'ed) examples reached here.  /* #neg=52 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.169277
   Precision = 0.816901 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.899225


Total learning time: 3.97 seconds
Total inference time: 1.566 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 0.989014
   AUC PR    = 0.989413
   CLL	      = -0.185425
   Precision = 0.876712 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.934307


Total scoring time: 2.019 seconds
Parameter learned model CLL: -0.185425


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 3, 0], 'true,false,true': [0.0, 0, 54], 'true,false,false,true': [2.176, 9, 10], 'true,false,false,false': [0.0, 0, 0], 'false,true': [7.9e-09, 52, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)', 'false,true': 'movie(H, B)'}, {'true,true': [0.0, 3, 0], 'true,false,true': [0.0, 0, 54], 'true,false,false,true': [2.176, 9, 10], 'true,false,false,false': [0.0, 0, 0], 'false,true,true': [0.0, 52, 0], 'false,true,false': [0.0, 0, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)', 'false,true': 'movie(H, A)'}, {'true,true': [2.63e-09, 3, 0], 'true,false,true': [8.43e-08, 0, 54], 'true,false,false,true': [2.176, 9, 10], 'true,false,false,false': [0.0, 0, 0], 'false,true,true': [4.56e-09, 52, 0], 'false,true,false': [0.0, 0, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 3, 0], 'true,false,true': [0.0, 0, 54], 'true,false,false,true': [2.176, 9, 10], 'true,false,false,false': [0.0, 0, 0], 'false,true': [4.75e-09, 52, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, B)', 'false,true': 'movie(G, A)'}, {'true,true': [2.63e-09, 3, 0], 'true,false,true': [2.248, 9, 64], 'true,false,false': [0.0, 0, 0], 'false,true,true': [0.0, 52, 0], 'false,true,false': [0.0, 0, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, A)'}, {'true,true': [0.0, 3, 0], 'true,false,true': [2.257, 9, 64], 'true,false,false': [0.0, 0, 0], 'false,true': [1.97e-08, 52, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [2.11e-08, 0, 54], 'true,false,true': [0.0, 3, 0], 'true,false,false,true': [2.176, 9, 10], 'true,false,false,false': [0.0, 0, 0], 'false,true': [7.45e-09, 52, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, A)', 'false,true': 'movie(G, B)'}, {'true,true': [0.0, 0, 54], 'true,false,true': [2.184, 12, 10], 'true,false,false': [0.0, 0, 0], 'false,true,true': [7.45e-09, 52, 0], 'false,true,false': [0.0, 0, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 54], 'true,false,true': [0.0, 3, 0], 'true,false,false,true': [2.176, 9, 10], 'true,false,false,false': [0.0, 0, 0], 'false,true': [1.49e-08, 52, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.0, 0, 54], 'true,false,true': [2.182, 12, 10], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 52, 0], 'false,false': [0.0, 0, 0]}]]
[{'': [0.13296398891966668, 5.551115123125783e-17], 'true': [0.0, 0.10808782135484998], 'true,false': [0.0, 0.2493074792243767], 'true,false,false': [0.2493074792243767, nan], 'false': [5.551115123125783e-17, nan]}, {'': [0.11121799987839225, -3.416070845000482e-17], 'true': [0.0, 0.0939504554834581], 'true,false': [-3.289549702593056e-16, 0.2493074792243769], 'true,false,false': [0.2493074792243769, nan], 'false': [-3.416070845000482e-17, nan], 'false,true': [-3.416070845000482e-17, nan]}, {'': [0.09039555792490434, 2.1350442781253012e-17], 'true': [2.3129646346357427e-18, 0.08016553376002378], 'true,false': [1.3158198810372225e-16, 0.2493074792243767], 'true,false,false': [0.2493074792243767, nan], 'false': [2.1350442781253012e-17, nan], 'false,true': [2.1350442781253012e-17, nan]}, {'': [0.07792372952002913, 2.1350442781253012e-17], 'true': [-1.1564823173178713e-18, 0.0725046603709012], 'true,false': [-3.618504672852362e-16, 0.24930747922437693], 'true,false,false': [0.24930747922437693, nan], 'false': [2.1350442781253012e-17, nan]}, {'': [0.0718259615572433, -2.135044278125301e-18], 'true': [2.3129646346357427e-18, 0.06924949082370623], 'true,false': [0.06924949082370623, nan], 'false': [-2.135044278125301e-18, nan], 'false,true': [-2.135044278125301e-18, nan]}, {'': [0.07057984800049519, 7.472654973438553e-18], 'true': [0.0, 0.06977431059225342], 'true,false': [0.06977431059225342, nan], 'false': [7.472654973438553e-18, nan]}, {'': [0.07037103917852576, 1.0675221390626506e-18], 'true': [8.22387425648264e-18, 0.21722423068496574], 'true,false': [0.0, 0.2493074792243768], 'true,false,false': [0.2493074792243768, nan], 'false': [1.0675221390626506e-18, nan]}, {'': [0.06830790052429792, 1.0675221390626506e-18], 'true': [-3.289549702593056e-17, 0.21673007668326366], 'true,false': [0.21673007668326366, nan], 'false': [1.0675221390626506e-18, nan], 'false,true': [1.0675221390626506e-18, nan]}, {'': [0.06690635086881336, 4.270088556250602e-18], 'true': [0.0, 0.2166307598766619], 'true,false': [-1.1564823173178713e-18, 0.2493074792243768], 'true,false,false': [0.2493074792243768, nan], 'false': [4.270088556250602e-18, nan]}, {'': [0.06602593204568614, -2.6688053476566264e-18], 'true': [-4.5231308410654523e-17, 0.21633114136125522], 'true,false': [0.21633114136125522, nan], 'false': [-2.6688053476566264e-18, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(A, D).;true;true
0;true,false;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;true;genre(A, D).;true;true
1;true,false;genre(B, E).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;true;genre(A, D).;true;true
2;true,false;genre(B, E).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;true;genre(A, D).;true;true
3;true,false;genre(B, E).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;true;genre(A, D).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;true;genre(A, D).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(B, D).;true;true
6;true,false;genre(A, E).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;true;genre(B, D).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;true;genre(B, D).;true;true
8;true,false;genre(A, E).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;true;genre(B, D).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14185106490048777;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995123;  // std dev = 0.000, 54.000 (wgt'ed) examples reached here.  /* #pos=54 */
%   | | else if ( actor(B) )
%   | | | then return -0.1418510649004878;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | | else return 0.8581489350995122;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else return -0.14185106490048766;  // std dev = 5.37e-08, 52.000 (wgt'ed) examples reached here.  /* #neg=52 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.12544463852839138;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( genre(B, E) )
%   | | then return 0.7194734122109545;  // std dev = 0.000, 54.000 (wgt'ed) examples reached here.  /* #pos=54 */
%   | | else if ( actor(B) )
%   | | | then return -0.12544463852839138;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | | else return 0.7194734122109544;  // std dev = 2.98e-08, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else return -0.12544463852839158;  // std dev = 0.000, 52.000 (wgt'ed) examples reached here.  /* #neg=52 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.11231637819360639;  // std dev = 2.63e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( genre(B, E) )
%   | | then return 0.5553664367462838;  // std dev = 8.43e-08, 54.000 (wgt'ed) examples reached here.  /* #pos=54 */
%   | | else if ( actor(B) )
%   | | | then return -0.11231637819360639;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | | else return 0.5553664367462846;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else return -0.1123163781936063;  // std dev = 3.33e-08, 52.000 (wgt'ed) examples reached here.  /* #neg=52 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1015963294878363;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( genre(B, E) )
%   | | then return 0.4175135841583103;  // std dev = 0.000, 54.000 (wgt'ed) examples reached here.  /* #pos=54 */
%   | | else if ( actor(B) )
%   | | | then return -0.10159632948783627;  // std dev = 5.27e-09, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | | else return 0.41751358415830986;  // std dev = 3.65e-08, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else return -0.10159632948783624;  // std dev = 3.33e-08, 52.000 (wgt'ed) examples reached here.  /* #neg=52 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.09269127618926094;  // std dev = 2.63e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( director(B) )
%   | | then return 0.32071184716014983;  // std dev = 0.000, 64.000 (wgt'ed) examples reached here.  /* #pos=64 */
%   | | else return -0.09269127618926097;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   else return -0.09269127618926107;  // std dev = 0.000, 52.000 (wgt'ed) examples reached here.  /* #neg=52 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.08518475138839687;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( director(B) )
%   | | then return 0.25517224256948967;  // std dev = 0.000, 64.000 (wgt'ed) examples reached here.  /* #pos=64 */
%   | | else return -0.08518475138839687;  // std dev = 3.73e-09, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   else return -0.08518475138839679;  // std dev = 1.97e-08, 52.000 (wgt'ed) examples reached here.  /* #neg=52 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.2097577156325356;  // std dev = 0.000, 54.000 (wgt'ed) examples reached here.  /* #pos=54 */
%   | else if ( genre(A, E) )
%   | | then return -0.07877675473109173;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else if ( actor(B) )
%   | | | then return -0.07877675473109173;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | | else return 0.2097577156325356;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else return -0.07877675473109179;  // std dev = 7.45e-09, 52.000 (wgt'ed) examples reached here.  /* #neg=52 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.1770964977452774;  // std dev = 0.000, 54.000 (wgt'ed) examples reached here.  /* #pos=54 */
%   | else if ( actor(B) )
%   | | then return -0.07324622576333704;  // std dev = 3.73e-09, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else return 0.17709649774527736;  // std dev = 7.45e-09, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else return -0.07324622576333704;  // std dev = 7.45e-09, 52.000 (wgt'ed) examples reached here.  /* #neg=52 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.15274385809367083;  // std dev = 0.000, 54.000 (wgt'ed) examples reached here.  /* #pos=54 */
%   | else if ( genre(A, E) )
%   | | then return -0.06842697784420272;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else if ( actor(B) )
%   | | | then return -0.06842697784420272;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | | else return 0.15274385809367078;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else return -0.0684269778442027;  // std dev = 1.49e-08, 52.000 (wgt'ed) examples reached here.  /* #neg=52 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.13400703000801079;  // std dev = 5.05e-08, 54.000 (wgt'ed) examples reached here.  /* #pos=54 */
%   | else if ( actor(B) )
%   | | then return -0.06419184008202619;  // std dev = 5.89e-09, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else return 0.13400703000801095;  // std dev = 5.27e-09, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else return -0.06419184008202625;  // std dev = 0.000, 52.000 (wgt'ed) examples reached here.  /* #neg=52 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.094637
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 4.762 seconds
Total inference time: 1.939 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.094637
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 1.99 seconds
Refined model CLL: -0.094637


******************************************
Best model found
******************************************
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.094637
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 12.741000000000001 seconds
Total inference time: 1.939 seconds
AUC ROC: 1.0
Total revision time: 12.741000000000001
Best scored revision CLL: -0.094637


Dataset: 4_cora_imdb, Fold: 2, Type: Transfer (trRDN-B), Time: 17:57:09
{'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.094637, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 12.741000000000001, 'Inference time': 1.939, 'parameter_0.2': {'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.169277, 'Precision': [0.816901, 0.5], 'Recall': 1.0, 'F1': 0.899225, 'Learning time': 3.97, 'Inference time': 1.566}}


Amount of data: 0.4
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;false;false
0;false;haswordvenue(A, I), haswordtitle(J, I).;true;false
0;false,true;haswordtitle(J, K), haswordauthor(L, K).;true;false
0;false,true,true;haswordauthor(L, I).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, A).;false;true
1;true,true,false;title(F, D), venue(F, B).;false;false
1;true,false;haswordvenue(A, G), haswordtitle(H, G).;false;false
1;false;haswordvenue(A, I), haswordtitle(J, I).;true;false
1;false,true;haswordtitle(J, K), haswordauthor(L, K).;true;false
1;false,true,true;haswordvenue(B, K).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;title(F, D), venue(F, B).;false;false
2;true,false;haswordvenue(A, G), haswordtitle(H, G).;false;false
2;false;haswordvenue(B, I), haswordtitle(J, I).;true;false
2;false,true;haswordtitle(J, K), haswordvenue(A, K).;true;false
2;false,true,true;haswordauthor(L, K).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;title(E, D), venue(E, A).;false;true
3;true,true,false;title(F, D), venue(F, B).;false;false
3;true,false;haswordvenue(A, G), haswordtitle(H, G).;false;false
3;false;haswordvenue(A, I), haswordtitle(J, I).;true;false
3;false,true;haswordtitle(J, K), haswordauthor(L, K).;true;false
3;false,true,true;haswordauthor(L, I).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, A).;false;true
4;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
4;true,false;haswordvenue(B, H), haswordtitle(I, H).;false;false
4;false;haswordvenue(B, J), haswordtitle(K, J).;true;false
4;false,true;haswordtitle(K, L), haswordauthor(M, L).;true;false
4;false,true,true;haswordvenue(A, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, A).;false;true
5;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
5;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;false
5;false;haswordvenue(A, J), haswordauthor(K, J).;false;true
5;false,false;haswordvenue(B, L), haswordtitle(M, L).;true;false
5;false,false,true;haswordtitle(M, N), haswordauthor(P, N).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;title(E, D), venue(E, B).;false;true
6;true,true,false;title(F, D), venue(F, A).;false;false
6;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
6;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
6;false;haswordvenue(A, K), haswordauthor(L, K).;false;true
6;false,false;haswordvenue(B, M), haswordtitle(N, M).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
7;true,false;haswordvenue(B, H), haswordtitle(I, H).;false;false
7;false;haswordvenue(A, J), haswordtitle(K, J).;true;false
7;false,true;haswordtitle(K, L), haswordauthor(M, L).;true;false
7;false,true,true;haswordvenue(B, L).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;title(E, D), venue(E, B).;false;true
8;true,true,false;title(F, D), venue(F, A).;false;false
8;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;false
8;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
8;false;haswordvenue(B, K), haswordauthor(L, K).;false;true
8;false,false;haswordvenue(A, M), haswordtitle(N, M).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, B).;false;true
9;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
9;true,false;haswordvenue(A, H), haswordauthor(I, H).;false;true
9;true,false,false;haswordvenue(A, J), haswordtitle(K, J).;false;false
9;false;haswordvenue(A, L), haswordauthor(M, L).;false;true
9;false,false;haswordvenue(B, N), haswordauthor(P, N).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14185106490048777;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995112;  // std dev = 4.46e-07, 103.000 (wgt'ed) examples reached here.  /* #pos=103 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.41134042446121344;  // std dev = 3.408, 47.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=26 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.14185106490048763;  // std dev = 8.54e-09, 103.000 (wgt'ed) examples reached here.  /* #neg=103 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.12544463852839138;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else if ( genre(B, E) )
%   | | then return 0.7194734122109546;  // std dev = 0.000, 103.000 (wgt'ed) examples reached here.  /* #pos=103 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.3535696551594697;  // std dev = 3.408, 47.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=26 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then if ( movie(H, B) )
%   | | then return -0.12544463852839136;  // std dev = 0.000, 103.000 (wgt'ed) examples reached here.  /* #neg=103 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.11231637819360638;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else if ( genre(B, E) )
%   | | then return 0.5553664367462834;  // std dev = 4.30e-07, 103.000 (wgt'ed) examples reached here.  /* #pos=103 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.291092981785684;  // std dev = 3.408, 47.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=26 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then if ( movie(H, A) )
%   | | then return -0.1123163781936062;  // std dev = 8.01e-09, 103.000 (wgt'ed) examples reached here.  /* #neg=103 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.10159632948783633;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else if ( genre(B, E) )
%   | | then return 0.4175135841583097;  // std dev = 2.60e-07, 103.000 (wgt'ed) examples reached here.  /* #pos=103 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.23106074697924575;  // std dev = 3.408, 47.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=26 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.1015963294878363;  // std dev = 2.28e-09, 103.000 (wgt'ed) examples reached here.  /* #neg=103 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.09269127618926098;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else if ( movie(E, B) )
%   | | then return 0.27621042227206183;  // std dev = 3.503, 150.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=129 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, B) )
%   | then if ( movie(G, A) )
%   | | then return -0.09269127618926093;  // std dev = 5.48e-08, 103.000 (wgt'ed) examples reached here.  /* #neg=103 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.08518475138839687;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else if ( movie(E, B) )
%   | | then return 0.21621310515803255;  // std dev = 3.516, 150.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=129 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.08518475138839682;  // std dev = 5.77e-08, 103.000 (wgt'ed) examples reached here.  /* #neg=103 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.2239271019059475;  // std dev = 1.30e-07, 103.000 (wgt'ed) examples reached here.  /* #pos=103 */
%   | else if ( genre(A, E) )
%   | | then return -0.07877675473109177;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.05831947560073201;  // std dev = 3.408, 47.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=26 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.07877675473109158;  // std dev = 5.96e-08, 103.000 (wgt'ed) examples reached here.  /* #neg=103 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.187421414150285;  // std dev = 6.32e-08, 103.000 (wgt'ed) examples reached here.  /* #pos=103 */
%   | else if ( movie(E, B) )
%   | | then return 0.03249214890409007;  // std dev = 3.417, 52.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=26 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then if ( movie(G, B) )
%   | | then return -0.07324622576333707;  // std dev = 0.000, 103.000 (wgt'ed) examples reached here.  /* #neg=103 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.16053208712576608;  // std dev = 0.000, 103.000 (wgt'ed) examples reached here.  /* #pos=103 */
%   | else if ( genre(A, E) )
%   | | then return -0.07548264612797997;  // std dev = 1.86e-09, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.03562398348800042;  // std dev = 3.408, 47.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=26 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.06842697784420265;  // std dev = 4.94e-08, 103.000 (wgt'ed) examples reached here.  /* #neg=103 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.14005821965636056;  // std dev = 6.66e-08, 103.000 (wgt'ed) examples reached here.  /* #pos=103 */
%   | else if ( movie(E, A) )
%   | | then return 0.017397362217762117;  // std dev = 3.415, 52.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=26 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.06419184008202626;  // std dev = 0.000, 103.000 (wgt'ed) examples reached here.  /* #neg=103 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.175504
   Precision = 0.816901 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.899225


Total learning time: 4.684 seconds
Total inference time: 1.845 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 0.983595
   AUC PR    = 0.984135
   CLL	      = -0.204614
   Precision = 0.86 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.924731


Total scoring time: 2.23 seconds
Parameter learned model CLL: -0.204614


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 5, 0], 'true,false,true': [4.46e-07, 0, 103], 'true,false,false,true': [3.408, 21, 26], 'true,false,false,false': [0.0, 0, 0], 'false,true': [8.54e-09, 103, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)', 'false,true': 'movie(H, B)'}, {'true,true': [0.0, 5, 0], 'true,false,true': [0.0, 0, 103], 'true,false,false,true': [3.408, 21, 26], 'true,false,false,false': [0.0, 0, 0], 'false,true,true': [0.0, 103, 0], 'false,true,false': [0.0, 0, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)', 'false,true': 'movie(H, A)'}, {'true,true': [0.0, 5, 0], 'true,false,true': [4.3e-07, 0, 103], 'true,false,false,true': [3.408, 21, 26], 'true,false,false,false': [0.0, 0, 0], 'false,true,true': [8.01e-09, 103, 0], 'false,true,false': [0.0, 0, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 5, 0], 'true,false,true': [2.6e-07, 0, 103], 'true,false,false,true': [3.408, 21, 26], 'true,false,false,false': [0.0, 0, 0], 'false,true': [2.28e-09, 103, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, B)', 'false,true': 'movie(G, A)'}, {'true,true': [0.0, 5, 0], 'true,false,true': [3.503, 21, 129], 'true,false,false': [0.0, 0, 0], 'false,true,true': [5.48e-08, 103, 0], 'false,true,false': [0.0, 0, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, A)'}, {'true,true': [0.0, 5, 0], 'true,false,true': [3.516, 21, 129], 'true,false,false': [0.0, 0, 0], 'false,true': [5.77e-08, 103, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [1.3e-07, 0, 103], 'true,false,true': [0.0, 5, 0], 'true,false,false,true': [3.408, 21, 26], 'true,false,false,false': [0.0, 0, 0], 'false,true': [5.96e-08, 103, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, A)', 'false,true': 'movie(G, B)'}, {'true,true': [6.32e-08, 0, 103], 'true,false,true': [3.417, 26, 26], 'true,false,false': [0.0, 0, 0], 'false,true,true': [0.0, 103, 0], 'false,true,false': [0.0, 0, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 103], 'true,false,true': [1.86e-09, 5, 0], 'true,false,false,true': [3.408, 21, 26], 'true,false,false,false': [0.0, 0, 0], 'false,true': [4.94e-08, 103, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [6.66e-08, 0, 103], 'true,false,true': [3.415, 26, 26], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 103, 0], 'false,false': [0.0, 0, 0]}]]
[{'': [0.13960457856400044, 7.329627735389383e-17], 'true': [-2.7755575615628915e-18, 0.12040000000000456], 'true,false': [1.9315724855614373e-15, 0.2471706654594853], 'true,false,false': [0.2471706654594853, nan], 'false': [7.329627735389383e-17, nan]}, {'': [0.11947353581483049, -1.0778864316749092e-17], 'true': [0.0, 0.10625303042945779], 'true,false': [-3.4492365813597096e-16, 0.2471706654594849], 'true,false,false': [0.2471706654594849, nan], 'false': [-1.0778864316749092e-17, nan], 'false,true': [-1.0778864316749092e-17, nan]}, {'': [0.10016927479431402, 6.467318590049455e-17], 'true': [0.0, 0.0924733712663533], 'true,false': [1.793603022307049e-15, 0.24717066545948427], 'true,false,false': [0.24717066545948427, nan], 'false': [6.467318590049455e-17, nan], 'false,true': [6.467318590049455e-17, nan]}, {'': [0.08881244406856648, 6.467318590049456e-18], 'true': [0.0, 0.08492661835252181], 'true,false': [6.553549504583448e-16, 0.24717066545948416], 'true,false,false': [0.24717066545948416, nan], 'false': [6.467318590049456e-18, nan]}, {'': [0.08339683902665981, 2.910293365522255e-17], 'true': [0.0, 0.08178678323740923], 'true,false': [0.08178678323740923, nan], 'false': [2.910293365522255e-17, nan], 'false,true': [2.910293365522255e-17, nan]}, {'': [0.08257115857769162, 3.2336592950247276e-17], 'true': [0.0, 0.08239318640348192], 'true,false': [0.08239318640348192, nan], 'false': [3.2336592950247276e-17, nan]}, {'': [0.08262281713627653, 3.4492365813597093e-17], 'true': [1.638387376145862e-16, 0.22503772922714887], 'true,false': [-1.3877787807814458e-18, 0.24717066545948424], 'true,false,false': [0.24717066545948424, nan], 'false': [3.4492365813597093e-17, nan]}, {'': [0.08069867024460217, -4.311545726699637e-18], 'true': [3.8803911540296735e-17, 0.22459368126354334], 'true,false': [0.22459368126354334, nan], 'false': [-4.311545726699637e-18, nan], 'false,true': [-4.311545726699637e-18, nan]}, {'': [0.07940710793723203, 2.3713501496848002e-17], 'true': [-2.5869274360197823e-17, 0.224477110548064], 'true,false': [6.938893903907229e-19, 0.24717066545948385], 'true,false,false': [0.24717066545948385, nan], 'false': [2.3713501496848002e-17, nan]}, {'': [0.07857771706484717, -1.6168296475123638e-17], 'true': [4.311545726699637e-17, 0.22422394026647072], 'true,false': [0.22422394026647072, nan], 'false': [-1.6168296475123638e-17, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(A, D).;true;true
0;true,false;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;true;genre(A, D).;true;true
1;true,false;genre(B, E).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;true;genre(A, D).;true;true
2;true,false;genre(B, E).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;true;genre(A, D).;true;true
3;true,false;genre(B, E).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;true;genre(A, D).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;true;genre(A, D).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(B, D).;true;true
6;true,false;genre(A, E).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;true;genre(B, D).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;true;genre(B, D).;true;true
8;true,false;genre(A, E).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;true;genre(B, D).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14185106490048777;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995112;  // std dev = 4.46e-07, 103.000 (wgt'ed) examples reached here.  /* #pos=103 */
%   | | else if ( actor(B) )
%   | | | then return -0.14185106490048774;  // std dev = 1.05e-08, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */
%   | | | else return 0.8581489350995118;  // std dev = 1.46e-07, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   else return -0.14185106490048763;  // std dev = 8.69e-08, 103.000 (wgt'ed) examples reached here.  /* #neg=103 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.12544463852839138;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else if ( genre(B, E) )
%   | | then return 0.7194734122109546;  // std dev = 0.000, 103.000 (wgt'ed) examples reached here.  /* #pos=103 */
%   | | else if ( actor(B) )
%   | | | then return -0.12544463852839138;  // std dev = 0.000, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */
%   | | | else return 0.7194734122109545;  // std dev = 0.000, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   else return -0.12544463852839136;  // std dev = 0.000, 103.000 (wgt'ed) examples reached here.  /* #neg=103 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.11231637819360638;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else if ( genre(B, E) )
%   | | then return 0.5553664367462834;  // std dev = 4.30e-07, 103.000 (wgt'ed) examples reached here.  /* #pos=103 */
%   | | else if ( actor(B) )
%   | | | then return -0.11231637819360636;  // std dev = 1.29e-08, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */
%   | | | else return 0.5553664367462846;  // std dev = 0.000, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   else return -0.1123163781936062;  // std dev = 8.16e-08, 103.000 (wgt'ed) examples reached here.  /* #neg=103 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.10159632948783633;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else if ( genre(B, E) )
%   | | then return 0.4175135841583097;  // std dev = 2.60e-07, 103.000 (wgt'ed) examples reached here.  /* #pos=103 */
%   | | else if ( director(B) )
%   | | | then return 0.41751358415831;  // std dev = 0.000, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | | | else return -0.10159632948783634;  // std dev = 0.000, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */
%   else return -0.1015963294878363;  // std dev = 2.58e-08, 103.000 (wgt'ed) examples reached here.  /* #neg=103 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.09269127618926098;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else if ( director(B) )
%   | | then return 0.3207118471601498;  // std dev = 1.63e-07, 129.000 (wgt'ed) examples reached here.  /* #pos=129 */
%   | | else return -0.09269127618926103;  // std dev = 0.000, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */
%   else return -0.09269127618926093;  // std dev = 5.48e-08, 103.000 (wgt'ed) examples reached here.  /* #neg=103 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.08518475138839687;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else if ( actor(B) )
%   | | then return -0.08518475138839683;  // std dev = 1.49e-08, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */
%   | | else return 0.25517224256948967;  // std dev = 0.000, 129.000 (wgt'ed) examples reached here.  /* #pos=129 */
%   else return -0.08518475138839682;  // std dev = 5.77e-08, 103.000 (wgt'ed) examples reached here.  /* #neg=103 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.2097577156325356;  // std dev = 1.46e-07, 103.000 (wgt'ed) examples reached here.  /* #pos=103 */
%   | else if ( genre(A, E) )
%   | | then return -0.07877675473109177;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( actor(B) )
%   | | | then return -0.07877675473109179;  // std dev = 0.000, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */
%   | | | else return 0.2097577156325355;  // std dev = 2.11e-08, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   else return -0.07877675473109158;  // std dev = 5.96e-08, 103.000 (wgt'ed) examples reached here.  /* #neg=103 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.1770964977452773;  // std dev = 5.16e-08, 103.000 (wgt'ed) examples reached here.  /* #pos=103 */
%   | else if ( actor(B) )
%   | | then return -0.07324622576333704;  // std dev = 0.000, 26.000 (wgt'ed) examples reached here.  /* #neg=26 */
%   | | else return 0.1770964977452771;  // std dev = 0.000, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   else return -0.07324622576333707;  // std dev = 0.000, 103.000 (wgt'ed) examples reached here.  /* #neg=103 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.15274385809367133;  // std dev = 0.000, 103.000 (wgt'ed) examples reached here.  /* #pos=103 */
%   | else if ( genre(A, E) )
%   | | then return -0.06842697784420272;  // std dev = 1.86e-09, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( actor(B) )
%   | | | then return -0.06842697784420275;  // std dev = 0.000, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */
%   | | | else return 0.15274385809367083;  // std dev = 0.000, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   else return -0.06842697784420265;  // std dev = 4.94e-08, 103.000 (wgt'ed) examples reached here.  /* #neg=103 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.13400703000801112;  // std dev = 4.21e-08, 103.000 (wgt'ed) examples reached here.  /* #pos=103 */
%   | else if ( actor(B) )
%   | | then return -0.06419184008202622;  // std dev = 0.000, 26.000 (wgt'ed) examples reached here.  /* #neg=26 */
%   | | else return 0.13400703000801087;  // std dev = 2.69e-08, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   else return -0.06419184008202626;  // std dev = 0.000, 103.000 (wgt'ed) examples reached here.  /* #neg=103 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.094637
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 5.78 seconds
Total inference time: 1.783 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.094637
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 2.044 seconds
Refined model CLL: -0.094637


******************************************
Best model found
******************************************
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.094637
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 14.738 seconds
Total inference time: 1.783 seconds
AUC ROC: 1.0
Total revision time: 14.738
Best scored revision CLL: -0.094637


Dataset: 4_cora_imdb, Fold: 2, Type: Transfer (trRDN-B), Time: 17:57:29
{'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.094637, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 14.738, 'Inference time': 1.783, 'parameter_0.4': {'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.175504, 'Precision': [0.816901, 0.5], 'Recall': 1.0, 'F1': 0.899225, 'Learning time': 4.684, 'Inference time': 1.845}}


Amount of data: 0.6
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;false;false
0;false;haswordvenue(A, I), haswordtitle(J, I).;true;false
0;false,true;haswordtitle(J, K), haswordauthor(L, K).;true;false
0;false,true,true;haswordauthor(L, I).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, A).;false;true
1;true,true,false;title(F, D), venue(F, B).;false;false
1;true,false;haswordvenue(A, G), haswordtitle(H, G).;false;false
1;false;haswordvenue(A, I), haswordtitle(J, I).;true;false
1;false,true;haswordtitle(J, K), haswordauthor(L, K).;true;false
1;false,true,true;haswordvenue(B, K).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;title(F, D), venue(F, B).;false;false
2;true,false;haswordvenue(A, G), haswordtitle(H, G).;false;false
2;false;haswordvenue(B, I), haswordtitle(J, I).;true;false
2;false,true;haswordtitle(J, K), haswordvenue(A, K).;true;false
2;false,true,true;haswordauthor(L, K).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;title(E, D), venue(E, A).;false;true
3;true,true,false;title(F, D), venue(F, B).;false;false
3;true,false;haswordvenue(A, G), haswordtitle(H, G).;false;false
3;false;haswordvenue(A, I), haswordtitle(J, I).;true;false
3;false,true;haswordtitle(J, K), haswordauthor(L, K).;true;false
3;false,true,true;haswordauthor(L, I).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, A).;false;true
4;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
4;true,false;haswordvenue(B, H), haswordtitle(I, H).;false;false
4;false;haswordvenue(B, J), haswordtitle(K, J).;true;false
4;false,true;haswordtitle(K, L), haswordauthor(M, L).;true;false
4;false,true,true;haswordvenue(A, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, A).;false;true
5;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
5;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;false
5;false;haswordvenue(A, J), haswordauthor(K, J).;false;true
5;false,false;haswordvenue(B, L), haswordtitle(M, L).;true;false
5;false,false,true;haswordtitle(M, N), haswordauthor(P, N).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;title(E, D), venue(E, B).;false;true
6;true,true,false;title(F, D), venue(F, A).;false;false
6;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
6;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
6;false;haswordvenue(A, K), haswordauthor(L, K).;false;true
6;false,false;haswordvenue(B, M), haswordtitle(N, M).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
7;true,false;haswordvenue(B, H), haswordtitle(I, H).;false;false
7;false;haswordvenue(A, J), haswordtitle(K, J).;true;false
7;false,true;haswordtitle(K, L), haswordauthor(M, L).;true;false
7;false,true,true;haswordvenue(B, L).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;title(E, D), venue(E, B).;false;true
8;true,true,false;title(F, D), venue(F, A).;false;false
8;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;false
8;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
8;false;haswordvenue(B, K), haswordauthor(L, K).;false;true
8;false,false;haswordvenue(A, M), haswordtitle(N, M).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, B).;false;true
9;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
9;true,false;haswordvenue(A, H), haswordauthor(I, H).;false;true
9;true,false,false;haswordvenue(A, J), haswordtitle(K, J).;false;false
9;false;haswordvenue(A, L), haswordauthor(M, L).;false;true
9;false,false;haswordvenue(B, N), haswordauthor(P, N).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1418510649004878;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995097;  // std dev = 9.83e-07, 157.000 (wgt'ed) examples reached here.  /* #pos=157 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.35814893509951107;  // std dev = 4.301, 74.000 (wgt'ed) examples reached here.  /* #neg=37 #pos=37 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.14185106490048807;  // std dev = 0.000, 151.000 (wgt'ed) examples reached here.  /* #neg=151 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.12544463852839138;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else if ( genre(B, E) )
%   | | then return 0.7194734122109563;  // std dev = 0.000, 157.000 (wgt'ed) examples reached here.  /* #pos=157 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.3087411357856348;  // std dev = 4.301, 74.000 (wgt'ed) examples reached here.  /* #neg=37 #pos=37 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then if ( movie(H, B) )
%   | | then return -0.1254446385283913;  // std dev = 4.71e-08, 151.000 (wgt'ed) examples reached here.  /* #neg=151 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.11231637819360639;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else if ( genre(B, E) )
%   | | then return 0.5553664367462833;  // std dev = 5.40e-07, 157.000 (wgt'ed) examples reached here.  /* #pos=157 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.2564123687585859;  // std dev = 4.301, 74.000 (wgt'ed) examples reached here.  /* #neg=37 #pos=37 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then if ( movie(H, A) )
%   | | then return -0.11231637819360625;  // std dev = 7.57e-09, 151.000 (wgt'ed) examples reached here.  /* #neg=151 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.10159632948783627;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else if ( genre(B, E) )
%   | | then return 0.4175135841583089;  // std dev = 4.58e-07, 157.000 (wgt'ed) examples reached here.  /* #pos=157 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.20613740734453917;  // std dev = 4.301, 74.000 (wgt'ed) examples reached here.  /* #neg=37 #pos=37 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.10159632948783646;  // std dev = 0.000, 151.000 (wgt'ed) examples reached here.  /* #neg=151 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.09269127618926097;  // std dev = 2.63e-09, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else if ( movie(E, B) )
%   | | then return 0.26975010645008773;  // std dev = 4.447, 231.000 (wgt'ed) examples reached here.  /* #neg=37 #pos=194 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, B) )
%   | then if ( movie(G, A) )
%   | | then return -0.0926912761892607;  // std dev = 7.74e-08, 151.000 (wgt'ed) examples reached here.  /* #neg=151 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.08518475138839687;  // std dev = 2.63e-09, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else if ( movie(E, B) )
%   | | then return 0.2117699956337952;  // std dev = 4.460, 231.000 (wgt'ed) examples reached here.  /* #neg=37 #pos=194 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.08518475138839678;  // std dev = 6.66e-08, 151.000 (wgt'ed) examples reached here.  /* #neg=151 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.22582764216828446;  // std dev = 2.19e-07, 157.000 (wgt'ed) examples reached here.  /* #pos=157 */
%   | else if ( genre(A, E) )
%   | | then return -0.07877675473109173;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.047119773000679266;  // std dev = 4.301, 74.000 (wgt'ed) examples reached here.  /* #neg=37 #pos=37 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.07877675473109151;  // std dev = 8.23e-08, 151.000 (wgt'ed) examples reached here.  /* #neg=151 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.18879636515734052;  // std dev = 0.000, 157.000 (wgt'ed) examples reached here.  /* #pos=157 */
%   | else if ( movie(E, B) )
%   | | then return 0.027270622998092152;  // std dev = 4.309, 80.000 (wgt'ed) examples reached here.  /* #neg=43 #pos=37 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then if ( movie(G, B) )
%   | | then return -0.07324622576333731;  // std dev = 0.000, 151.000 (wgt'ed) examples reached here.  /* #neg=151 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.16156270295891056;  // std dev = 0.000, 157.000 (wgt'ed) examples reached here.  /* #pos=157 */
%   | else if ( genre(A, E) )
%   | | then return -0.07511906860003768;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.028631058751269405;  // std dev = 4.301, 74.000 (wgt'ed) examples reached here.  /* #neg=37 #pos=37 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.06842697784420264;  // std dev = 6.66e-08, 151.000 (wgt'ed) examples reached here.  /* #neg=151 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.14085470177569417;  // std dev = 0.000, 157.000 (wgt'ed) examples reached here.  /* #pos=157 */
%   | else if ( movie(E, A) )
%   | | then return 0.014624758726763614;  // std dev = 4.307, 80.000 (wgt'ed) examples reached here.  /* #neg=43 #pos=37 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.06419184008202626;  // std dev = 0.000, 151.000 (wgt'ed) examples reached here.  /* #neg=151 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.164799
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 5.501 seconds
Total inference time: 1.804 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 0.981813
   AUC PR    = 0.982771
   CLL	      = -0.211595
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.809278
   F1        = 0.894587


Total scoring time: 2.482 seconds
Parameter learned model CLL: -0.211595


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 6, 0], 'true,false,true': [9.83e-07, 0, 157], 'true,false,false,true': [4.301, 37, 37], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 151, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)', 'false,true': 'movie(H, B)'}, {'true,true': [0.0, 6, 0], 'true,false,true': [0.0, 0, 157], 'true,false,false,true': [4.301, 37, 37], 'true,false,false,false': [0.0, 0, 0], 'false,true,true': [4.71e-08, 151, 0], 'false,true,false': [0.0, 0, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)', 'false,true': 'movie(H, A)'}, {'true,true': [0.0, 6, 0], 'true,false,true': [5.4e-07, 0, 157], 'true,false,false,true': [4.301, 37, 37], 'true,false,false,false': [0.0, 0, 0], 'false,true,true': [7.57e-09, 151, 0], 'false,true,false': [0.0, 0, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 6, 0], 'true,false,true': [4.58e-07, 0, 157], 'true,false,false,true': [4.301, 37, 37], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 151, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, B)', 'false,true': 'movie(G, A)'}, {'true,true': [2.63e-09, 6, 0], 'true,false,true': [4.447, 37, 194], 'true,false,false': [0.0, 0, 0], 'false,true,true': [7.74e-08, 151, 0], 'false,true,false': [0.0, 0, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, A)'}, {'true,true': [2.63e-09, 6, 0], 'true,false,true': [4.46, 37, 194], 'true,false,false': [0.0, 0, 0], 'false,true': [6.66e-08, 151, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [2.19e-07, 0, 157], 'true,false,true': [0.0, 6, 0], 'true,false,false,true': [4.301, 37, 37], 'true,false,false,false': [0.0, 0, 0], 'false,true': [8.23e-08, 151, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, A)', 'false,true': 'movie(G, B)'}, {'true,true': [0.0, 0, 157], 'true,false,true': [4.309, 43, 37], 'true,false,false': [0.0, 0, 0], 'false,true,true': [0.0, 151, 0], 'false,true,false': [0.0, 0, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 157], 'true,false,true': [0.0, 6, 0], 'true,false,false,true': [4.301, 37, 37], 'true,false,false,false': [0.0, 0, 0], 'false,true': [6.66e-08, 151, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.0, 0, 157], 'true,false,true': [4.307, 43, 37], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 151, 0], 'false,false': [0.0, 0, 0]}]]
[{'': [0.14851608538518246, -1.1763952578809607e-16], 'true': [-6.938893903907228e-18, 0.13451771893330894], 'true,false': [6.155019876648002e-15, 0.2500000000000017], 'true,false,false': [0.2500000000000017, nan], 'false': [-1.1763952578809607e-16, nan]}, {'': [0.12641583474271317, 1.4704940723512008e-17], 'true': [-2.3129646346357427e-18, 0.11681693093576699], 'true,false': [-2.715449945580001e-15, 0.2499999999999996], 'true,false,false': [0.2499999999999996, nan], 'false': [1.4704940723512008e-17, nan], 'false,true': [1.4704940723512008e-17, nan]}, {'': [0.10509626810380798, 5.734926882169682e-17], 'true': [0.0, 0.0995453932069474], 'true,false': [1.8555574628130005e-15, 0.24999999999999953], 'true,false,false': [0.24999999999999953, nan], 'false': [5.734926882169682e-17, nan], 'false,true': [5.734926882169682e-17, nan]}, {'': [0.09256855757036184, -6.029025696639923e-17], 'true': [0.0, 0.08981448886320231], 'true,false': [1.3350962232435004e-15, 0.2500000000000011], 'true,false,false': [0.2500000000000011, nan], 'false': [-6.029025696639923e-17, nan]}, {'': [0.08667110859212375, 3.970333995348242e-17], 'true': [1.1564823173178713e-18, 0.08559664151284195], 'true,false': [0.08559664151284195, nan], 'false': [3.970333995348242e-17, nan], 'false,true': [3.970333995348242e-17, nan]}, {'': [0.08608950395280489, 2.9409881447024017e-17], 'true': [1.1564823173178713e-18, 0.08609313618535051], 'true,false': [0.08609313618535051, nan], 'false': [2.9409881447024017e-17, nan]}, {'': [0.08634617019161404, 4.485006920671162e-17], 'true': [3.0548811887775006e-16, 0.23234958928883484], 'true,false': [-1.1564823173178713e-18, 0.24999999999999994], 'true,false,false': [0.24999999999999994, nan], 'false': [4.485006920671162e-17, nan]}, {'': [0.0841697341033319, -2.7939387374672815e-17], 'true': [-2.4891624501150006e-16, 0.23206921380148046], 'true,false': [0.23206921380148046, nan], 'false': [-2.7939387374672815e-17, nan], 'false,true': [-2.7939387374672815e-17, nan]}, {'': [0.08273866488096068, 2.9409881447024017e-17], 'true': [-2.2628749546500007e-17, 0.23199675866920072], 'true,false': [-1.1564823173178713e-18, 0.25000000000000017], 'true,false,false': [0.25000000000000017, nan], 'false': [2.9409881447024017e-17, nan]}, {'': [0.0818183829651437, -1.0293458506458405e-17], 'true': [-9.617218557262503e-17, 0.23183152591408923], 'true,false': [0.23183152591408923, nan], 'false': [-1.0293458506458405e-17, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(A, D).;true;true
0;true,false;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;true;genre(A, D).;true;true
1;true,false;genre(B, E).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;true;genre(A, D).;true;true
2;true,false;genre(B, E).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;true;genre(A, D).;true;true
3;true,false;genre(B, E).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;true;genre(A, D).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;true;genre(A, D).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(B, D).;true;true
6;true,false;genre(A, E).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;true;genre(B, D).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;true;genre(B, D).;true;true
8;true,false;genre(A, E).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;true;genre(B, D).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1418510649004878;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995097;  // std dev = 9.83e-07, 157.000 (wgt'ed) examples reached here.  /* #pos=157 */
%   | | else if ( actor(B) )
%   | | | then return -0.14185106490048768;  // std dev = 3.80e-08, 37.000 (wgt'ed) examples reached here.  /* #neg=37 */
%   | | | else return 0.8581489350995115;  // std dev = 2.60e-07, 37.000 (wgt'ed) examples reached here.  /* #pos=37 */
%   else return -0.14185106490048807;  // std dev = 0.000, 151.000 (wgt'ed) examples reached here.  /* #neg=151 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.12544463852839138;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else if ( genre(B, E) )
%   | | then return 0.7194734122109563;  // std dev = 0.000, 157.000 (wgt'ed) examples reached here.  /* #pos=157 */
%   | | else if ( actor(B) )
%   | | | then return -0.12544463852839147;  // std dev = 0.000, 37.000 (wgt'ed) examples reached here.  /* #neg=37 */
%   | | | else return 0.7194734122109548;  // std dev = 0.000, 37.000 (wgt'ed) examples reached here.  /* #pos=37 */
%   else return -0.1254446385283913;  // std dev = 4.71e-08, 151.000 (wgt'ed) examples reached here.  /* #neg=151 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.11231637819360639;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else if ( genre(B, E) )
%   | | then return 0.5553664367462833;  // std dev = 5.40e-07, 157.000 (wgt'ed) examples reached here.  /* #pos=157 */
%   | | else if ( actor(B) )
%   | | | then return -0.1123163781936064;  // std dev = 0.000, 37.000 (wgt'ed) examples reached here.  /* #neg=37 */
%   | | | else return 0.5553664367462843;  // std dev = 1.12e-07, 37.000 (wgt'ed) examples reached here.  /* #pos=37 */
%   else return -0.11231637819360625;  // std dev = 9.31e-08, 151.000 (wgt'ed) examples reached here.  /* #neg=151 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.10159632948783627;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else if ( genre(B, E) )
%   | | then return 0.4175135841583089;  // std dev = 4.58e-07, 157.000 (wgt'ed) examples reached here.  /* #pos=157 */
%   | | else if ( actor(B) )
%   | | | then return -0.10159632948783634;  // std dev = 0.000, 37.000 (wgt'ed) examples reached here.  /* #neg=37 */
%   | | | else return 0.4175135841583102;  // std dev = 0.000, 37.000 (wgt'ed) examples reached here.  /* #pos=37 */
%   else return -0.10159632948783646;  // std dev = 0.000, 151.000 (wgt'ed) examples reached here.  /* #neg=151 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.09269127618926097;  // std dev = 2.63e-09, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else if ( director(B) )
%   | | then return 0.32071184716014917;  // std dev = 4.09e-07, 194.000 (wgt'ed) examples reached here.  /* #pos=194 */
%   | | else return -0.092691276189261;  // std dev = 0.000, 37.000 (wgt'ed) examples reached here.  /* #neg=37 */
%   else return -0.0926912761892607;  // std dev = 7.74e-08, 151.000 (wgt'ed) examples reached here.  /* #neg=151 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.08518475138839687;  // std dev = 2.63e-09, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else if ( actor(B) )
%   | | then return -0.0851847513883968;  // std dev = 2.24e-08, 37.000 (wgt'ed) examples reached here.  /* #neg=37 */
%   | | else return 0.2551722425694906;  // std dev = 0.000, 194.000 (wgt'ed) examples reached here.  /* #pos=194 */
%   else return -0.08518475138839678;  // std dev = 6.66e-08, 151.000 (wgt'ed) examples reached here.  /* #neg=151 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.20975771563253517;  // std dev = 2.56e-07, 157.000 (wgt'ed) examples reached here.  /* #pos=157 */
%   | else if ( genre(A, E) )
%   | | then return -0.07877675473109173;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else if ( actor(B) )
%   | | | then return -0.07877675473109179;  // std dev = 5.27e-09, 37.000 (wgt'ed) examples reached here.  /* #neg=37 */
%   | | | else return 0.20975771563253542;  // std dev = 5.58e-08, 37.000 (wgt'ed) examples reached here.  /* #pos=37 */
%   else return -0.07877675473109151;  // std dev = 8.23e-08, 151.000 (wgt'ed) examples reached here.  /* #neg=151 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.1770964977452782;  // std dev = 0.000, 157.000 (wgt'ed) examples reached here.  /* #pos=157 */
%   | else if ( actor(B) )
%   | | then return -0.07324622576333704;  // std dev = 1.18e-08, 43.000 (wgt'ed) examples reached here.  /* #neg=43 */
%   | | else return 0.1770964977452775;  // std dev = 0.000, 37.000 (wgt'ed) examples reached here.  /* #pos=37 */
%   else return -0.07324622576333731;  // std dev = 0.000, 151.000 (wgt'ed) examples reached here.  /* #neg=151 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.15274385809367147;  // std dev = 0.000, 157.000 (wgt'ed) examples reached here.  /* #pos=157 */
%   | else if ( genre(A, E) )
%   | | then return -0.06842697784420272;  // std dev = 1.86e-09, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else if ( actor(B) )
%   | | | then return -0.06842697784420274;  // std dev = 0.000, 37.000 (wgt'ed) examples reached here.  /* #neg=37 */
%   | | | else return 0.15274385809367083;  // std dev = 0.000, 37.000 (wgt'ed) examples reached here.  /* #pos=37 */
%   else return -0.06842697784420264;  // std dev = 6.66e-08, 151.000 (wgt'ed) examples reached here.  /* #neg=151 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.134007030008011;  // std dev = 6.99e-08, 157.000 (wgt'ed) examples reached here.  /* #pos=157 */
%   | else if ( actor(B) )
%   | | then return -0.06419184008202625;  // std dev = 0.000, 43.000 (wgt'ed) examples reached here.  /* #neg=43 */
%   | | else return 0.1340070300080108;  // std dev = 3.80e-08, 37.000 (wgt'ed) examples reached here.  /* #pos=37 */
%   else return -0.06419184008202626;  // std dev = 0.000, 151.000 (wgt'ed) examples reached here.  /* #neg=151 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.094637
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 6.724 seconds
Total inference time: 1.611 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.094637
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 2.246 seconds
Refined model CLL: -0.094637


******************************************
Best model found
******************************************
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.094637
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 16.953 seconds
Total inference time: 1.611 seconds
AUC ROC: 1.0
Total revision time: 16.953
Best scored revision CLL: -0.094637


Dataset: 4_cora_imdb, Fold: 2, Type: Transfer (trRDN-B), Time: 17:57:51
{'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.094637, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 16.953, 'Inference time': 1.611, 'parameter_0.6': {'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.164799, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 5.501, 'Inference time': 1.804}}


Amount of data: 0.8
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;false;false
0;false;haswordvenue(A, I), haswordtitle(J, I).;true;false
0;false,true;haswordtitle(J, K), haswordauthor(L, K).;true;false
0;false,true,true;haswordauthor(L, I).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, A).;false;true
1;true,true,false;title(F, D), venue(F, B).;false;false
1;true,false;haswordvenue(A, G), haswordtitle(H, G).;false;false
1;false;haswordvenue(A, I), haswordtitle(J, I).;true;false
1;false,true;haswordtitle(J, K), haswordauthor(L, K).;true;false
1;false,true,true;haswordvenue(B, K).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;title(F, D), venue(F, B).;false;false
2;true,false;haswordvenue(A, G), haswordtitle(H, G).;false;false
2;false;haswordvenue(B, I), haswordtitle(J, I).;true;false
2;false,true;haswordtitle(J, K), haswordvenue(A, K).;true;false
2;false,true,true;haswordauthor(L, K).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;title(E, D), venue(E, A).;false;true
3;true,true,false;title(F, D), venue(F, B).;false;false
3;true,false;haswordvenue(A, G), haswordtitle(H, G).;false;false
3;false;haswordvenue(A, I), haswordtitle(J, I).;true;false
3;false,true;haswordtitle(J, K), haswordauthor(L, K).;true;false
3;false,true,true;haswordauthor(L, I).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, A).;false;true
4;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
4;true,false;haswordvenue(B, H), haswordtitle(I, H).;false;false
4;false;haswordvenue(B, J), haswordtitle(K, J).;true;false
4;false,true;haswordtitle(K, L), haswordauthor(M, L).;true;false
4;false,true,true;haswordvenue(A, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, A).;false;true
5;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
5;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;false
5;false;haswordvenue(A, J), haswordauthor(K, J).;false;true
5;false,false;haswordvenue(B, L), haswordtitle(M, L).;true;false
5;false,false,true;haswordtitle(M, N), haswordauthor(P, N).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;title(E, D), venue(E, B).;false;true
6;true,true,false;title(F, D), venue(F, A).;false;false
6;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
6;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
6;false;haswordvenue(A, K), haswordauthor(L, K).;false;true
6;false,false;haswordvenue(B, M), haswordtitle(N, M).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
7;true,false;haswordvenue(B, H), haswordtitle(I, H).;false;false
7;false;haswordvenue(A, J), haswordtitle(K, J).;true;false
7;false,true;haswordtitle(K, L), haswordauthor(M, L).;true;false
7;false,true,true;haswordvenue(B, L).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;title(E, D), venue(E, B).;false;true
8;true,true,false;title(F, D), venue(F, A).;false;false
8;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;false
8;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
8;false;haswordvenue(B, K), haswordauthor(L, K).;false;true
8;false,false;haswordvenue(A, M), haswordtitle(N, M).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, B).;false;true
9;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
9;true,false;haswordvenue(A, H), haswordauthor(I, H).;false;true
9;true,false,false;haswordvenue(A, J), haswordtitle(K, J).;false;false
9;false;haswordvenue(A, L), haswordauthor(M, L).;false;true
9;false,false;haswordvenue(B, N), haswordauthor(P, N).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1418510649004878;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995091;  // std dev = 1.08e-06, 211.000 (wgt'ed) examples reached here.  /* #pos=211 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.34299741994799804;  // std dev = 4.973, 99.000 (wgt'ed) examples reached here.  /* #neg=51 #pos=48 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.1418510649004884;  // std dev = 0.000, 202.000 (wgt'ed) examples reached here.  /* #neg=202 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.12544463852839138;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else if ( genre(B, E) )
%   | | then return 0.7194734122109571;  // std dev = 0.000, 211.000 (wgt'ed) examples reached here.  /* #pos=211 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.29592228391732794;  // std dev = 4.973, 99.000 (wgt'ed) examples reached here.  /* #neg=51 #pos=48 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then if ( movie(H, B) )
%   | | then return -0.12544463852839166;  // std dev = 0.000, 202.000 (wgt'ed) examples reached here.  /* #neg=202 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.11231637819360639;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else if ( genre(B, E) )
%   | | then return 0.5553664367462832;  // std dev = 6.31e-07, 211.000 (wgt'ed) examples reached here.  /* #pos=211 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.24637743970880954;  // std dev = 4.973, 99.000 (wgt'ed) examples reached here.  /* #neg=51 #pos=48 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then if ( movie(H, A) )
%   | | then return -0.11231637819360661;  // std dev = 0.000, 202.000 (wgt'ed) examples reached here.  /* #neg=202 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.10159632948783627;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else if ( genre(B, E) )
%   | | then return 0.4175135841583103;  // std dev = 2.06e-07, 211.000 (wgt'ed) examples reached here.  /* #pos=211 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.1988100326878144;  // std dev = 4.973, 99.000 (wgt'ed) examples reached here.  /* #neg=51 #pos=48 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.10159632948783653;  // std dev = 0.000, 202.000 (wgt'ed) examples reached here.  /* #neg=202 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.09269127618926097;  // std dev = 2.63e-09, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else if ( movie(E, B) )
%   | | then return 0.26828610532930236;  // std dev = 5.152, 310.000 (wgt'ed) examples reached here.  /* #neg=51 #pos=259 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, B) )
%   | then if ( movie(G, A) )
%   | | then return -0.09269127618926053;  // std dev = 5.96e-08, 202.000 (wgt'ed) examples reached here.  /* #neg=202 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.08518475138839687;  // std dev = 2.63e-09, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else if ( movie(E, B) )
%   | | then return 0.2108629857859994;  // std dev = 5.166, 310.000 (wgt'ed) examples reached here.  /* #neg=51 #pos=259 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.08518475138839678;  // std dev = 7.74e-08, 202.000 (wgt'ed) examples reached here.  /* #neg=202 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.2262424343213904;  // std dev = 0.000, 211.000 (wgt'ed) examples reached here.  /* #pos=211 */
%   | else if ( genre(A, E) )
%   | | then return -0.07877675473109173;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.043759522855343146;  // std dev = 4.973, 99.000 (wgt'ed) examples reached here.  /* #neg=51 #pos=48 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.07877675473109147;  // std dev = 7.30e-08, 202.000 (wgt'ed) examples reached here.  /* #neg=202 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.18909614696994972;  // std dev = 1.81e-07, 211.000 (wgt'ed) examples reached here.  /* #pos=211 */
%   | else if ( movie(E, B) )
%   | | then return 0.026877267113666767;  // std dev = 4.979, 105.000 (wgt'ed) examples reached here.  /* #neg=57 #pos=48 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then if ( movie(G, B) )
%   | | then return -0.07324622576333664;  // std dev = 1.21e-07, 202.000 (wgt'ed) examples reached here.  /* #neg=202 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.16178721004728677;  // std dev = 1.58e-07, 211.000 (wgt'ed) examples reached here.  /* #pos=211 */
%   | else if ( genre(A, E) )
%   | | then return -0.07509174429729515;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.026280001094104707;  // std dev = 4.973, 99.000 (wgt'ed) examples reached here.  /* #neg=51 #pos=48 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.06842697784420262;  // std dev = 8.23e-08, 202.000 (wgt'ed) examples reached here.  /* #neg=202 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.1410280754113311;  // std dev = 1.49e-07, 211.000 (wgt'ed) examples reached here.  /* #pos=211 */
%   | else if ( movie(E, A) )
%   | | then return 0.014617614320608235;  // std dev = 4.977, 105.000 (wgt'ed) examples reached here.  /* #neg=57 #pos=48 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.06419184008202626;  // std dev = 0.000, 202.000 (wgt'ed) examples reached here.  /* #neg=202 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.162009
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 6.294 seconds
Total inference time: 1.703 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 0.981753
   AUC PR    = 0.982811
   CLL	      = -0.211947
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.814672
   F1        = 0.897872


Total scoring time: 2.559 seconds
Parameter learned model CLL: -0.211947


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 6, 0], 'true,false,true': [1.08e-06, 0, 211], 'true,false,false,true': [4.973, 51, 48], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 202, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)', 'false,true': 'movie(H, B)'}, {'true,true': [0.0, 6, 0], 'true,false,true': [0.0, 0, 211], 'true,false,false,true': [4.973, 51, 48], 'true,false,false,false': [0.0, 0, 0], 'false,true,true': [0.0, 202, 0], 'false,true,false': [0.0, 0, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)', 'false,true': 'movie(H, A)'}, {'true,true': [0.0, 6, 0], 'true,false,true': [6.31e-07, 0, 211], 'true,false,false,true': [4.973, 51, 48], 'true,false,false,false': [0.0, 0, 0], 'false,true,true': [0.0, 202, 0], 'false,true,false': [0.0, 0, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 6, 0], 'true,false,true': [2.06e-07, 0, 211], 'true,false,false,true': [4.973, 51, 48], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 202, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, B)', 'false,true': 'movie(G, A)'}, {'true,true': [2.63e-09, 6, 0], 'true,false,true': [5.152, 51, 259], 'true,false,false': [0.0, 0, 0], 'false,true,true': [5.96e-08, 202, 0], 'false,true,false': [0.0, 0, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, A)'}, {'true,true': [2.63e-09, 6, 0], 'true,false,true': [5.166, 51, 259], 'true,false,false': [0.0, 0, 0], 'false,true': [7.74e-08, 202, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 0, 211], 'true,false,true': [0.0, 6, 0], 'true,false,false,true': [4.973, 51, 48], 'true,false,false,false': [0.0, 0, 0], 'false,true': [7.3e-08, 202, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, A)', 'false,true': 'movie(G, B)'}, {'true,true': [1.81e-07, 0, 211], 'true,false,true': [4.979, 57, 48], 'true,false,false': [0.0, 0, 0], 'false,true,true': [1.21e-07, 202, 0], 'false,true,false': [0.0, 0, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [1.58e-07, 0, 211], 'true,false,true': [0.0, 6, 0], 'true,false,false,true': [4.973, 51, 48], 'true,false,false,false': [0.0, 0, 0], 'false,true': [8.23e-08, 202, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [1.49e-07, 0, 211], 'true,false,true': [4.977, 57, 48], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 202, 0], 'false,false': [0.0, 0, 0]}]]
[{'': [0.14784289376702867, -2.374338349693404e-16], 'true': [-6.938893903907228e-18, 0.13745057232050356], 'true,false': [5.522701832448172e-15, 0.2497704315886136], 'true,false,false': [0.2497704315886136, nan], 'false': [-2.374338349693404e-16, nan]}, {'': [0.12588584634857483, -5.49615358725325e-17], 'true': [-2.3129646346357427e-18, 0.1187601286403734], 'true,false': [-3.906301296121878e-15, 0.24977043158861303], 'true,false,false': [0.24977043158861303, nan], 'false': [-5.49615358725325e-17, nan], 'false,true': [-5.49615358725325e-17, nan]}, {'': [0.10464055008533184, -4.3969228698026004e-17], 'true': [0.0, 0.10051836748508843], 'true,false': [1.88580062571401e-15, 0.24977043158861292], 'true,false,false': [0.24977043158861292, nan], 'false': [-4.3969228698026004e-17, nan], 'false,true': [-4.3969228698026004e-17, nan]}, {'': [0.09221003676296656, -9.013691883095331e-17], 'true': [0.0, 0.09016234536291506], 'true,false': [2.0205006704078677e-16, 0.2497704315886143], 'true,false,false': [0.2497704315886143, nan], 'false': [-9.013691883095331e-17, nan]}, {'': [0.08642462599363905, 1.75876914792104e-17], 'true': [1.1564823173178713e-18, 0.08562322138710027], 'true,false': [0.08562322138710027, nan], 'false': [1.75876914792104e-17, nan], 'false,true': [1.75876914792104e-17, nan]}, {'': [0.08607106823622512, 2.967922937116755e-17], 'true': [1.1564823173178713e-18, 0.08607282830951803], 'true,false': [0.08607282830951803, nan], 'false': [2.967922937116755e-17, nan]}, {'': [0.08648579569640348, 2.63815372188156e-17], 'true': [-2.6940008938771573e-16, 0.2363068144328822], 'true,false': [-1.1564823173178713e-18, 0.2497704315886128], 'true,false,false': [0.2497704315886128, nan], 'false': [2.63815372188156e-17, nan]}, {'': [0.0842912295621374, 7.25492273517429e-17], 'true': [1.5574692667727315e-16, 0.23610539391152555], 'true,false': [0.23610539391152555, nan], 'false': [7.25492273517429e-17, nan], 'false,true': [7.25492273517429e-17, nan]}, {'': [0.0828646017316521, 3.3526536882244825e-17], 'true': [1.1786253910712563e-16, 0.2360514936451037], 'true,false': [0.0, 0.2497704315886128], 'true,false,false': [0.2497704315886128, nan], 'false': [3.3526536882244825e-17, nan]}, {'': [0.08194057760958966, -1.648846076175975e-18], 'true': [1.0523440991707645e-16, 0.23593219337700821], 'true,false': [0.23593219337700821, nan], 'false': [-1.648846076175975e-18, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(A, D).;true;true
0;true,false;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;true;genre(A, D).;true;true
1;true,false;genre(B, E).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;true;genre(A, D).;true;true
2;true,false;genre(B, E).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;true;genre(A, D).;true;true
3;true,false;genre(B, E).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;true;genre(A, D).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;true;genre(A, D).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(B, D).;true;true
6;true,false;genre(A, E).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;true;genre(B, D).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;true;genre(B, D).;true;true
8;true,false;genre(A, E).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;true;genre(B, D).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1418510649004878;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995091;  // std dev = 1.08e-06, 211.000 (wgt'ed) examples reached here.  /* #pos=211 */
%   | | else if ( actor(B) )
%   | | | then return -0.14185106490048768;  // std dev = 5.37e-08, 51.000 (wgt'ed) examples reached here.  /* #neg=51 */
%   | | | else return 0.8581489350995121;  // std dev = 1.69e-07, 48.000 (wgt'ed) examples reached here.  /* #pos=48 */
%   else return -0.1418510649004884;  // std dev = 0.000, 202.000 (wgt'ed) examples reached here.  /* #neg=202 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.12544463852839138;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else if ( genre(B, E) )
%   | | then return 0.7194734122109571;  // std dev = 0.000, 211.000 (wgt'ed) examples reached here.  /* #pos=211 */
%   | | else if ( actor(B) )
%   | | | then return -0.12544463852839158;  // std dev = 0.000, 51.000 (wgt'ed) examples reached here.  /* #neg=51 */
%   | | | else return 0.7194734122109548;  // std dev = 0.000, 48.000 (wgt'ed) examples reached here.  /* #pos=48 */
%   else return -0.12544463852839166;  // std dev = 0.000, 202.000 (wgt'ed) examples reached here.  /* #neg=202 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.11231637819360639;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else if ( genre(B, E) )
%   | | then return 0.5553664367462832;  // std dev = 6.31e-07, 211.000 (wgt'ed) examples reached here.  /* #pos=211 */
%   | | else if ( actor(B) )
%   | | | then return -0.11231637819360632;  // std dev = 3.16e-08, 51.000 (wgt'ed) examples reached here.  /* #neg=51 */
%   | | | else return 0.5553664367462839;  // std dev = 0.000, 48.000 (wgt'ed) examples reached here.  /* #pos=48 */
%   else return -0.11231637819360661;  // std dev = 0.000, 202.000 (wgt'ed) examples reached here.  /* #neg=202 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.10159632948783627;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else if ( genre(B, E) )
%   | | then return 0.4175135841583103;  // std dev = 2.06e-07, 211.000 (wgt'ed) examples reached here.  /* #pos=211 */
%   | | else if ( actor(B) )
%   | | | then return -0.10159632948783626;  // std dev = 2.58e-08, 51.000 (wgt'ed) examples reached here.  /* #neg=51 */
%   | | | else return 0.41751358415831025;  // std dev = 0.000, 48.000 (wgt'ed) examples reached here.  /* #pos=48 */
%   else return -0.10159632948783653;  // std dev = 0.000, 202.000 (wgt'ed) examples reached here.  /* #neg=202 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.09269127618926097;  // std dev = 2.63e-09, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else if ( director(B) )
%   | | then return 0.3207118471601503;  // std dev = 1.33e-07, 259.000 (wgt'ed) examples reached here.  /* #pos=259 */
%   | | else return -0.09269127618926103;  // std dev = 0.000, 51.000 (wgt'ed) examples reached here.  /* #neg=51 */
%   else return -0.09269127618926053;  // std dev = 5.96e-08, 202.000 (wgt'ed) examples reached here.  /* #neg=202 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.08518475138839687;  // std dev = 2.63e-09, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else if ( director(B) )
%   | | then return 0.25517224256948795;  // std dev = 3.26e-07, 259.000 (wgt'ed) examples reached here.  /* #pos=259 */
%   | | else return -0.0851847513883968;  // std dev = 1.83e-08, 51.000 (wgt'ed) examples reached here.  /* #neg=51 */
%   else return -0.08518475138839678;  // std dev = 7.74e-08, 202.000 (wgt'ed) examples reached here.  /* #neg=202 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.20975771563253495;  // std dev = 2.92e-07, 211.000 (wgt'ed) examples reached here.  /* #pos=211 */
%   | else if ( genre(A, E) )
%   | | then return -0.07877675473109173;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else if ( actor(B) )
%   | | | then return -0.07877675473109179;  // std dev = 0.000, 51.000 (wgt'ed) examples reached here.  /* #neg=51 */
%   | | | else return 0.209757715632536;  // std dev = 0.000, 48.000 (wgt'ed) examples reached here.  /* #pos=48 */
%   else return -0.07877675473109147;  // std dev = 7.30e-08, 202.000 (wgt'ed) examples reached here.  /* #neg=202 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.17709649774527778;  // std dev = 0.000, 211.000 (wgt'ed) examples reached here.  /* #pos=211 */
%   | else if ( actor(B) )
%   | | then return -0.07324622576333704;  // std dev = 0.000, 57.000 (wgt'ed) examples reached here.  /* #neg=57 */
%   | | else return 0.17709649774527747;  // std dev = 0.000, 48.000 (wgt'ed) examples reached here.  /* #pos=48 */
%   else return -0.07324622576333664;  // std dev = 1.21e-07, 202.000 (wgt'ed) examples reached here.  /* #neg=202 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.1527438580936717;  // std dev = 0.000, 211.000 (wgt'ed) examples reached here.  /* #pos=211 */
%   | else if ( genre(A, E) )
%   | | then return -0.06842697784420272;  // std dev = 1.86e-09, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else if ( actor(B) )
%   | | | then return -0.0684269778442027;  // std dev = 1.39e-08, 51.000 (wgt'ed) examples reached here.  /* #neg=51 */
%   | | | else return 0.1527438580936709;  // std dev = 4.21e-08, 48.000 (wgt'ed) examples reached here.  /* #pos=48 */
%   else return -0.06842697784420262;  // std dev = 8.23e-08, 202.000 (wgt'ed) examples reached here.  /* #neg=202 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.13400703000801092;  // std dev = 8.94e-08, 211.000 (wgt'ed) examples reached here.  /* #pos=211 */
%   | else if ( actor(B) )
%   | | then return -0.06419184008202625;  // std dev = 0.000, 57.000 (wgt'ed) examples reached here.  /* #neg=57 */
%   | | else return 0.13400703000801104;  // std dev = 2.98e-08, 48.000 (wgt'ed) examples reached here.  /* #pos=48 */
%   else return -0.06419184008202626;  // std dev = 0.000, 202.000 (wgt'ed) examples reached here.  /* #neg=202 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.094637
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 7.95 seconds
Total inference time: 1.927 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.094637
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 2.803 seconds
Refined model CLL: -0.094637


******************************************
Best model found
******************************************
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.094637
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 19.606 seconds
Total inference time: 1.927 seconds
AUC ROC: 1.0
Total revision time: 19.606
Best scored revision CLL: -0.094637


Dataset: 4_cora_imdb, Fold: 2, Type: Transfer (trRDN-B), Time: 17:58:15
{'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.094637, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 19.606, 'Inference time': 1.927, 'parameter_0.8': {'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.162009, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 6.294, 'Inference time': 1.703}}


Amount of data: 1.0
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;false;false
0;false;haswordvenue(A, I), haswordtitle(J, I).;true;false
0;false,true;haswordtitle(J, K), haswordauthor(L, K).;true;false
0;false,true,true;haswordauthor(L, I).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, A).;false;true
1;true,true,false;title(F, D), venue(F, B).;false;false
1;true,false;haswordvenue(A, G), haswordtitle(H, G).;false;false
1;false;haswordvenue(A, I), haswordtitle(J, I).;true;false
1;false,true;haswordtitle(J, K), haswordauthor(L, K).;true;false
1;false,true,true;haswordvenue(B, K).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;title(F, D), venue(F, B).;false;false
2;true,false;haswordvenue(A, G), haswordtitle(H, G).;false;false
2;false;haswordvenue(B, I), haswordtitle(J, I).;true;false
2;false,true;haswordtitle(J, K), haswordvenue(A, K).;true;false
2;false,true,true;haswordauthor(L, K).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;title(E, D), venue(E, A).;false;true
3;true,true,false;title(F, D), venue(F, B).;false;false
3;true,false;haswordvenue(A, G), haswordtitle(H, G).;false;false
3;false;haswordvenue(A, I), haswordtitle(J, I).;true;false
3;false,true;haswordtitle(J, K), haswordauthor(L, K).;true;false
3;false,true,true;haswordauthor(L, I).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, A).;false;true
4;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
4;true,false;haswordvenue(B, H), haswordtitle(I, H).;false;false
4;false;haswordvenue(B, J), haswordtitle(K, J).;true;false
4;false,true;haswordtitle(K, L), haswordauthor(M, L).;true;false
4;false,true,true;haswordvenue(A, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, A).;false;true
5;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
5;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;false
5;false;haswordvenue(A, J), haswordauthor(K, J).;false;true
5;false,false;haswordvenue(B, L), haswordtitle(M, L).;true;false
5;false,false,true;haswordtitle(M, N), haswordauthor(P, N).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;title(E, D), venue(E, B).;false;true
6;true,true,false;title(F, D), venue(F, A).;false;false
6;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
6;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
6;false;haswordvenue(A, K), haswordauthor(L, K).;false;true
6;false,false;haswordvenue(B, M), haswordtitle(N, M).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
7;true,false;haswordvenue(B, H), haswordtitle(I, H).;false;false
7;false;haswordvenue(A, J), haswordtitle(K, J).;true;false
7;false,true;haswordtitle(K, L), haswordauthor(M, L).;true;false
7;false,true,true;haswordvenue(B, L).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;title(E, D), venue(E, B).;false;true
8;true,true,false;title(F, D), venue(F, A).;false;false
8;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;false
8;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
8;false;haswordvenue(B, K), haswordauthor(L, K).;false;true
8;false,false;haswordvenue(A, M), haswordtitle(N, M).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, B).;false;true
9;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
9;true,false;haswordvenue(A, H), haswordauthor(I, H).;false;true
9;true,false,false;haswordvenue(A, J), haswordtitle(K, J).;false;false
9;false;haswordvenue(A, L), haswordauthor(M, L).;false;true
9;false,false;haswordvenue(B, N), haswordauthor(P, N).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1418510649004878;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995086;  // std dev = 1.08e-06, 265.000 (wgt'ed) examples reached here.  /* #pos=265 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.3301489350995134;  // std dev = 5.581, 125.000 (wgt'ed) examples reached here.  /* #neg=66 #pos=59 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.14185106490048824;  // std dev = 0.000, 250.000 (wgt'ed) examples reached here.  /* #neg=250 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.12544463852839138;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else if ( genre(B, E) )
%   | | then return 0.7194734122109576;  // std dev = 0.000, 265.000 (wgt'ed) examples reached here.  /* #pos=265 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.28503474757514385;  // std dev = 5.581, 125.000 (wgt'ed) examples reached here.  /* #neg=66 #pos=59 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then if ( movie(H, B) )
%   | | then return -0.12544463852839186;  // std dev = 0.000, 250.000 (wgt'ed) examples reached here.  /* #neg=250 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.11231637819360639;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else if ( genre(B, E) )
%   | | then return 0.5553664367462832;  // std dev = 3.77e-07, 265.000 (wgt'ed) examples reached here.  /* #pos=265 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.2378126851130761;  // std dev = 5.581, 125.000 (wgt'ed) examples reached here.  /* #neg=66 #pos=59 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then if ( movie(H, A) )
%   | | then return -0.11231637819360685;  // std dev = 0.000, 250.000 (wgt'ed) examples reached here.  /* #neg=250 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.10159632948783627;  // std dev = 3.73e-09, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else if ( genre(B, E) )
%   | | then return 0.4175135841583111;  // std dev = 0.000, 265.000 (wgt'ed) examples reached here.  /* #pos=265 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.19251218519878574;  // std dev = 5.581, 125.000 (wgt'ed) examples reached here.  /* #neg=66 #pos=59 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.10159632948783659;  // std dev = 0.000, 250.000 (wgt'ed) examples reached here.  /* #neg=250 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.09269127618926097;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else if ( movie(E, B) )
%   | | then return 0.2666877212704411;  // std dev = 5.794, 390.000 (wgt'ed) examples reached here.  /* #neg=66 #pos=324 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, B) )
%   | then if ( movie(G, A) )
%   | | then return -0.09269127618926046;  // std dev = 1.01e-07, 250.000 (wgt'ed) examples reached here.  /* #neg=250 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.08518475138839687;  // std dev = 3.73e-09, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else if ( movie(E, B) )
%   | | then return 0.20981029433837473;  // std dev = 5.807, 390.000 (wgt'ed) examples reached here.  /* #neg=66 #pos=324 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.08518475138839678;  // std dev = 9.06e-08, 250.000 (wgt'ed) examples reached here.  /* #neg=250 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.22670685988924644;  // std dev = 0.000, 265.000 (wgt'ed) examples reached here.  /* #pos=265 */
%   | else if ( genre(A, E) )
%   | | then return -0.07877675473109173;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.04105421842116943;  // std dev = 5.581, 125.000 (wgt'ed) examples reached here.  /* #neg=66 #pos=59 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.07877675473109143;  // std dev = 6.14e-08, 250.000 (wgt'ed) examples reached here.  /* #neg=250 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.1894316732045688;  // std dev = 2.98e-07, 265.000 (wgt'ed) examples reached here.  /* #pos=265 */
%   | else if ( movie(E, B) )
%   | | then return 0.024691231838765447;  // std dev = 5.589, 133.000 (wgt'ed) examples reached here.  /* #neg=74 #pos=59 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then if ( movie(G, B) )
%   | | then return -0.07324622576333678;  // std dev = 1.19e-07, 250.000 (wgt'ed) examples reached here.  /* #neg=250 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.16203840202924363;  // std dev = 0.000, 265.000 (wgt'ed) examples reached here.  /* #pos=265 */
%   | else if ( genre(A, E) )
%   | | then return -0.07494005860152299;  // std dev = 5.27e-09, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.02486368853363681;  // std dev = 5.581, 125.000 (wgt'ed) examples reached here.  /* #neg=66 #pos=59 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.06842697784420272;  // std dev = 0.000, 250.000 (wgt'ed) examples reached here.  /* #neg=250 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.14122200112807073;  // std dev = 0.000, 265.000 (wgt'ed) examples reached here.  /* #pos=265 */
%   | else if ( movie(E, A) )
%   | | then return 0.013379128975601423;  // std dev = 5.587, 133.000 (wgt'ed) examples reached here.  /* #neg=74 #pos=59 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.06419184008202625;  // std dev = 2.98e-08, 250.000 (wgt'ed) examples reached here.  /* #neg=250 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.159561
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 6.218 seconds
Total inference time: 1.775 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 0.981453
   AUC PR    = 0.982617
   CLL	      = -0.21304
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.817901
   F1        = 0.89983


Total scoring time: 2.892 seconds
Parameter learned model CLL: -0.21304


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 8, 0], 'true,false,true': [1.08e-06, 0, 265], 'true,false,false,true': [5.581, 66, 59], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 250, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)', 'false,true': 'movie(H, B)'}, {'true,true': [0.0, 8, 0], 'true,false,true': [0.0, 0, 265], 'true,false,false,true': [5.581, 66, 59], 'true,false,false,false': [0.0, 0, 0], 'false,true,true': [0.0, 250, 0], 'false,true,false': [0.0, 0, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)', 'false,true': 'movie(H, A)'}, {'true,true': [0.0, 8, 0], 'true,false,true': [3.77e-07, 0, 265], 'true,false,false,true': [5.581, 66, 59], 'true,false,false,false': [0.0, 0, 0], 'false,true,true': [0.0, 250, 0], 'false,true,false': [0.0, 0, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [3.73e-09, 8, 0], 'true,false,true': [0.0, 0, 265], 'true,false,false,true': [5.581, 66, 59], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 250, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, B)', 'false,true': 'movie(G, A)'}, {'true,true': [0.0, 8, 0], 'true,false,true': [5.794, 66, 324], 'true,false,false': [0.0, 0, 0], 'false,true,true': [1.01e-07, 250, 0], 'false,true,false': [0.0, 0, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, A)'}, {'true,true': [3.73e-09, 8, 0], 'true,false,true': [5.807, 66, 324], 'true,false,false': [0.0, 0, 0], 'false,true': [9.06e-08, 250, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 0, 265], 'true,false,true': [0.0, 8, 0], 'true,false,false,true': [5.581, 66, 59], 'true,false,false,false': [0.0, 0, 0], 'false,true': [6.14e-08, 250, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, A)', 'false,true': 'movie(G, B)'}, {'true,true': [2.98e-07, 0, 265], 'true,false,true': [5.589, 74, 59], 'true,false,false': [0.0, 0, 0], 'false,true,true': [1.19e-07, 250, 0], 'false,true,false': [0.0, 0, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 265], 'true,false,true': [5.27e-09, 8, 0], 'true,false,false,true': [5.581, 66, 59], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 250, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.0, 0, 265], 'true,false,true': [5.587, 74, 59], 'true,false,false': [0.0, 0, 0], 'false,true': [2.98e-08, 250, 0], 'false,false': [0.0, 0, 0]}]]
[{'': [0.15135981414611055, -1.2789769243681802e-16], 'true': [-6.938893903907228e-18, 0.14059171597633446], 'true,false': [4.397321081685148e-15, 0.24921599999999983], 'true,false,false': [0.24921599999999983, nan], 'false': [-1.2789769243681802e-16, nan]}, {'': [0.12835749294157262, -6.394884621840901e-17], 'true': [0.0, 0.12098087823191803], 'true,false': [-4.504572815384786e-15, 0.24921599999999836], 'true,false,false': [0.24921599999999836, nan], 'false': [-6.394884621840901e-17, nan], 'false,true': [-6.394884621840901e-17, nan]}, {'': [0.10609909373269502, -9.237055564881302e-17], 'true': [-1.734723475976807e-18, 0.10183838105828912], 'true,false': [5.362586684981888e-16, 0.2492159999999983], 'true,false,false': [0.2492159999999983, nan], 'false': [-9.237055564881302e-17, nan], 'false,true': [-9.237055564881302e-17, nan]}, {'': [0.09301063744539712, -7.105427357601002e-17], 'true': [1.734723475976807e-18, 0.09090239301975418], 'true,false': [-4.558198682234605e-16, 0.24921600000000127], 'true,false,false': [0.24921600000000127, nan], 'false': [-7.105427357601002e-17, nan]}, {'': [0.08687829481050695, 4.085620730620576e-17], 'true': [0.0, 0.08606436817459286], 'true,false': [0.08606436817459286, nan], 'false': [4.085620730620576e-17, nan], 'false,true': [4.085620730620576e-17, nan]}, {'': [0.08644546261979849, 3.286260152890463e-17], 'true': [1.734723475976807e-18, 0.08646951540121209], 'true,false': [0.08646951540121209, nan], 'false': [3.286260152890463e-17, nan]}, {'': [0.08681858122061764, 1.509903313490213e-17], 'true': [-7.373556691850096e-17, 0.2350373374485061], 'true,false': [0.0, 0.24921600000000035], 'true,false,false': [0.24921600000000035, nan], 'false': [1.509903313490213e-17, nan]}, {'': [0.08451503306410363, 5.684341886080802e-17], 'true': [3.3516166781136804e-16, 0.23483943562827517], 'true,false': [0.23483943562827517, nan], 'false': [5.684341886080802e-17, nan], 'false,true': [5.684341886080802e-17, nan]}, {'': [0.08302077790928977, -7.105427357601002e-18], 'true': [-1.876905339743661e-16, 0.23478867024377906], 'true,false': [3.469446951953614e-18, 0.2492159999999993], 'true,false,false': [0.2492159999999993, nan], 'false': [-7.105427357601002e-18, nan]}, {'': [0.08205621782482735, 3.552713678800501e-18], 'true': [-1.2065820041209248e-16, 0.23466951106523118], 'true,false': [0.23466951106523118, nan], 'false': [3.552713678800501e-18, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(A, D).;true;true
0;true,false;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;true;genre(A, D).;true;true
1;true,false;genre(B, E).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;true;genre(A, D).;true;true
2;true,false;genre(B, E).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;true;genre(A, D).;true;true
3;true,false;genre(B, E).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;true;genre(A, D).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;true;genre(A, D).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(B, D).;true;true
6;true,false;genre(A, E).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;true;genre(B, D).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;true;genre(B, D).;true;true
8;true,false;genre(A, E).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;true;genre(B, D).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1418510649004878;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995086;  // std dev = 1.08e-06, 265.000 (wgt'ed) examples reached here.  /* #pos=265 */
%   | | else if ( actor(B) )
%   | | | then return -0.14185106490048766;  // std dev = 6.66e-08, 66.000 (wgt'ed) examples reached here.  /* #neg=66 */
%   | | | else return 0.8581489350995125;  // std dev = 0.000, 59.000 (wgt'ed) examples reached here.  /* #pos=59 */
%   else return -0.14185106490048824;  // std dev = 0.000, 250.000 (wgt'ed) examples reached here.  /* #neg=250 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.12544463852839138;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else if ( genre(B, E) )
%   | | then return 0.7194734122109576;  // std dev = 0.000, 265.000 (wgt'ed) examples reached here.  /* #pos=265 */
%   | | else if ( actor(B) )
%   | | | then return -0.12544463852839158;  // std dev = 0.000, 66.000 (wgt'ed) examples reached here.  /* #neg=66 */
%   | | | else return 0.7194734122109543;  // std dev = 0.000, 59.000 (wgt'ed) examples reached here.  /* #pos=59 */
%   else return -0.12544463852839186;  // std dev = 0.000, 250.000 (wgt'ed) examples reached here.  /* #neg=250 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.11231637819360639;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else if ( genre(B, E) )
%   | | then return 0.5553664367462832;  // std dev = 3.77e-07, 265.000 (wgt'ed) examples reached here.  /* #pos=265 */
%   | | else if ( actor(B) )
%   | | | then return -0.11231637819360626;  // std dev = 5.16e-08, 66.000 (wgt'ed) examples reached here.  /* #neg=66 */
%   | | | else return 0.5553664367462838;  // std dev = 1.19e-07, 59.000 (wgt'ed) examples reached here.  /* #pos=59 */
%   else return -0.11231637819360685;  // std dev = 0.000, 250.000 (wgt'ed) examples reached here.  /* #neg=250 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.10159632948783627;  // std dev = 3.73e-09, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else if ( genre(B, E) )
%   | | then return 0.4175135841583111;  // std dev = 0.000, 265.000 (wgt'ed) examples reached here.  /* #pos=265 */
%   | | else if ( actor(B) )
%   | | | then return -0.10159632948783617;  // std dev = 4.83e-08, 66.000 (wgt'ed) examples reached here.  /* #neg=66 */
%   | | | else return 0.41751358415831036;  // std dev = 0.000, 59.000 (wgt'ed) examples reached here.  /* #pos=59 */
%   else return -0.10159632948783659;  // std dev = 0.000, 250.000 (wgt'ed) examples reached here.  /* #neg=250 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.09269127618926097;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else if ( actor(B) )
%   | | then return -0.09269127618926107;  // std dev = 0.000, 66.000 (wgt'ed) examples reached here.  /* #neg=66 */
%   | | else return 0.3207118471601511;  // std dev = 0.000, 324.000 (wgt'ed) examples reached here.  /* #pos=324 */
%   else return -0.09269127618926046;  // std dev = 1.01e-07, 250.000 (wgt'ed) examples reached here.  /* #neg=250 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.08518475138839687;  // std dev = 3.73e-09, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else if ( director(B) )
%   | | then return 0.25517224256948756;  // std dev = 3.91e-07, 324.000 (wgt'ed) examples reached here.  /* #pos=324 */
%   | | else return -0.08518475138839679;  // std dev = 1.67e-08, 66.000 (wgt'ed) examples reached here.  /* #neg=66 */
%   else return -0.08518475138839678;  // std dev = 9.06e-08, 250.000 (wgt'ed) examples reached here.  /* #neg=250 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.2097577156325348;  // std dev = 2.86e-07, 265.000 (wgt'ed) examples reached here.  /* #pos=265 */
%   | else if ( genre(A, E) )
%   | | then return -0.07877675473109173;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | else if ( actor(B) )
%   | | | then return -0.07877675473109169;  // std dev = 3.16e-08, 66.000 (wgt'ed) examples reached here.  /* #neg=66 */
%   | | | else return 0.20975771563253595;  // std dev = 0.000, 59.000 (wgt'ed) examples reached here.  /* #pos=59 */
%   else return -0.07877675473109143;  // std dev = 6.14e-08, 250.000 (wgt'ed) examples reached here.  /* #neg=250 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.17709649774527716;  // std dev = 7.30e-08, 265.000 (wgt'ed) examples reached here.  /* #pos=265 */
%   | else if ( actor(B) )
%   | | then return -0.07324622576333704;  // std dev = 0.000, 74.000 (wgt'ed) examples reached here.  /* #neg=74 */
%   | | else return 0.17709649774527733;  // std dev = 0.000, 59.000 (wgt'ed) examples reached here.  /* #pos=59 */
%   else return -0.07324622576333678;  // std dev = 1.19e-07, 250.000 (wgt'ed) examples reached here.  /* #neg=250 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.15274385809367158;  // std dev = 0.000, 265.000 (wgt'ed) examples reached here.  /* #pos=265 */
%   | else if ( genre(A, E) )
%   | | then return -0.06842697784420272;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | else if ( actor(B) )
%   | | | then return -0.06842697784420268;  // std dev = 2.58e-08, 66.000 (wgt'ed) examples reached here.  /* #neg=66 */
%   | | | else return 0.15274385809367097;  // std dev = 2.58e-08, 59.000 (wgt'ed) examples reached here.  /* #pos=59 */
%   else return -0.06842697784420272;  // std dev = 0.000, 250.000 (wgt'ed) examples reached here.  /* #neg=250 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.13400703000801126;  // std dev = 0.000, 265.000 (wgt'ed) examples reached here.  /* #pos=265 */
%   | else if ( director(B) )
%   | | then return 0.13400703000801098;  // std dev = 4.21e-08, 59.000 (wgt'ed) examples reached here.  /* #pos=59 */
%   | | else return -0.06419184008202625;  // std dev = 0.000, 74.000 (wgt'ed) examples reached here.  /* #neg=74 */
%   else return -0.06419184008202625;  // std dev = 2.98e-08, 250.000 (wgt'ed) examples reached here.  /* #neg=250 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.094637
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 8.299 seconds
Total inference time: 1.803 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.094637
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 2.812 seconds
Refined model CLL: -0.094637


******************************************
Best model found
******************************************
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.094637
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 20.221 seconds
Total inference time: 1.803 seconds
AUC ROC: 1.0
Total revision time: 20.221
Best scored revision CLL: -0.094637


Dataset: 4_cora_imdb, Fold: 2, Type: Transfer (trRDN-B), Time: 17:58:40
{'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.094637, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 20.221, 'Inference time': 1.803, 'parameter_1.0': {'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.159561, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 6.218, 'Inference time': 1.775}}


Starting fold 3

Target train facts examples: 737
Target train pos examples: 204
Target train neg examples: 204

Target test facts examples: 341
Target test pos	 examples: 178
Target test neg examples: 178

Amount of data: 0.2
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;false;false
0;false;haswordvenue(A, I), haswordtitle(J, I).;true;false
0;false,true;haswordtitle(J, K), haswordauthor(L, K).;true;false
0;false,true,true;haswordauthor(L, I).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, A).;false;true
1;true,true,false;title(F, D), venue(F, B).;false;false
1;true,false;haswordvenue(A, G), haswordtitle(H, G).;false;false
1;false;haswordvenue(A, I), haswordtitle(J, I).;true;false
1;false,true;haswordtitle(J, K), haswordauthor(L, K).;true;false
1;false,true,true;haswordvenue(B, K).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;title(F, D), venue(F, B).;false;false
2;true,false;haswordvenue(A, G), haswordtitle(H, G).;false;false
2;false;haswordvenue(B, I), haswordtitle(J, I).;true;false
2;false,true;haswordtitle(J, K), haswordvenue(A, K).;true;false
2;false,true,true;haswordauthor(L, K).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;title(E, D), venue(E, A).;false;true
3;true,true,false;title(F, D), venue(F, B).;false;false
3;true,false;haswordvenue(A, G), haswordtitle(H, G).;false;false
3;false;haswordvenue(A, I), haswordtitle(J, I).;true;false
3;false,true;haswordtitle(J, K), haswordauthor(L, K).;true;false
3;false,true,true;haswordauthor(L, I).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, A).;false;true
4;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
4;true,false;haswordvenue(B, H), haswordtitle(I, H).;false;false
4;false;haswordvenue(B, J), haswordtitle(K, J).;true;false
4;false,true;haswordtitle(K, L), haswordauthor(M, L).;true;false
4;false,true,true;haswordvenue(A, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, A).;false;true
5;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
5;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;false
5;false;haswordvenue(A, J), haswordauthor(K, J).;false;true
5;false,false;haswordvenue(B, L), haswordtitle(M, L).;true;false
5;false,false,true;haswordtitle(M, N), haswordauthor(P, N).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;title(E, D), venue(E, B).;false;true
6;true,true,false;title(F, D), venue(F, A).;false;false
6;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
6;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
6;false;haswordvenue(A, K), haswordauthor(L, K).;false;true
6;false,false;haswordvenue(B, M), haswordtitle(N, M).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
7;true,false;haswordvenue(B, H), haswordtitle(I, H).;false;false
7;false;haswordvenue(A, J), haswordtitle(K, J).;true;false
7;false,true;haswordtitle(K, L), haswordauthor(M, L).;true;false
7;false,true,true;haswordvenue(B, L).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;title(E, D), venue(E, B).;false;true
8;true,true,false;title(F, D), venue(F, A).;false;false
8;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;false
8;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
8;false;haswordvenue(B, K), haswordauthor(L, K).;false;true
8;false,false;haswordvenue(A, M), haswordtitle(N, M).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, B).;false;true
9;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
9;true,false;haswordvenue(A, H), haswordauthor(I, H).;false;true
9;true,false,false;haswordvenue(A, J), haswordtitle(K, J).;false;false
9;false;haswordvenue(A, L), haswordauthor(M, L).;false;true
9;false,false;haswordvenue(B, N), haswordauthor(P, N).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14185106490048777;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995116;  // std dev = 2.46e-07, 39.000 (wgt'ed) examples reached here.  /* #pos=39 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.06492798797741087;  // std dev = 0.961, 13.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=1 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.1418510649004877;  // std dev = 4.56e-09, 27.000 (wgt'ed) examples reached here.  /* #neg=27 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.12544463852839138;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( genre(B, E) )
%   | | then return 0.719473412210955;  // std dev = 0.000, 39.000 (wgt'ed) examples reached here.  /* #pos=39 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.05720661123539926;  // std dev = 0.961, 13.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=1 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then if ( movie(H, B) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 27.000 (wgt'ed) examples reached here.  /* #neg=27 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.11231637819360639;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( genre(B, E) )
%   | | then return 0.5553664367462842;  // std dev = 1.33e-07, 39.000 (wgt'ed) examples reached here.  /* #pos=39 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.050700642891078035;  // std dev = 0.961, 13.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=1 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then if ( movie(H, A) )
%   | | then return -0.1123163781936064;  // std dev = 0.000, 27.000 (wgt'ed) examples reached here.  /* #neg=27 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.10159632948783628;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( genre(B, E) )
%   | | then return 0.4175135841583102;  // std dev = 0.000, 39.000 (wgt'ed) examples reached here.  /* #pos=39 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.045161602872387976;  // std dev = 0.961, 13.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=1 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.10159632948783635;  // std dev = 0.000, 27.000 (wgt'ed) examples reached here.  /* #neg=27 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.09269127618926096;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( movie(E, B) )
%   | | then return 0.2304330845276012;  // std dev = 1.481, 52.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=40 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, B) )
%   | then if ( movie(G, A) )
%   | | then return -0.09269127618926097;  // std dev = 5.27e-09, 27.000 (wgt'ed) examples reached here.  /* #neg=27 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.08518475138839687;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( movie(E, B) )
%   | | then return 0.18791750750840175;  // std dev = 1.430, 52.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=40 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.08518475138839682;  // std dev = 1.83e-08, 27.000 (wgt'ed) examples reached here.  /* #neg=27 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.23706237967668392;  // std dev = 2.98e-08, 39.000 (wgt'ed) examples reached here.  /* #pos=39 */
%   | else if ( genre(A, E) )
%   | | then return -0.07877675473109173;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.09110798478049269;  // std dev = 0.961, 13.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=1 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.07877675473109175;  // std dev = 0.000, 27.000 (wgt'ed) examples reached here.  /* #neg=27 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.19687911396567875;  // std dev = 4.94e-08, 39.000 (wgt'ed) examples reached here.  /* #pos=39 */
%   | else if ( movie(E, B) )
%   | | then return -0.07836021552576675;  // std dev = 0.961, 14.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=1 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then if ( movie(G, B) )
%   | | then return -0.07324622576333704;  // std dev = 0.000, 27.000 (wgt'ed) examples reached here.  /* #neg=27 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.16759141368005986;  // std dev = 3.94e-08, 39.000 (wgt'ed) examples reached here.  /* #pos=39 */
%   | else if ( genre(A, E) )
%   | | then return -0.06810170656735907;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.06872941296620333;  // std dev = 0.961, 13.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=1 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.06842697784420276;  // std dev = 0.000, 27.000 (wgt'ed) examples reached here.  /* #neg=27 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.14549434910133288;  // std dev = 0.000, 39.000 (wgt'ed) examples reached here.  /* #pos=39 */
%   | else if ( movie(E, A) )
%   | | then return -0.06063494297801686;  // std dev = 0.961, 14.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=1 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.06419184008202622;  // std dev = 0.000, 27.000 (wgt'ed) examples reached here.  /* #neg=27 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 0.976029
   AUC PR    = 0.976327
   CLL	      = -0.368182
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.724719
   F1        = 0.840391


Total learning time: 3.55 seconds
Total inference time: 2.219 seconds
AUC ROC: 0.976029


Results scoring model
   AUC ROC   = 0.99625
   AUC PR    = 0.997115
   CLL	      = -0.135184
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.975
   F1        = 0.987342


Total scoring time: 1.744 seconds
Parameter learned model CLL: -0.135184


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 1, 0], 'true,false,true': [2.46e-07, 0, 39], 'true,false,false,true': [0.961, 12, 1], 'true,false,false,false': [0.0, 0, 0], 'false,true': [4.56e-09, 27, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)', 'false,true': 'movie(H, B)'}, {'true,true': [0.0, 1, 0], 'true,false,true': [0.0, 0, 39], 'true,false,false,true': [0.961, 12, 1], 'true,false,false,false': [0.0, 0, 0], 'false,true,true': [0.0, 27, 0], 'false,true,false': [0.0, 0, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)', 'false,true': 'movie(H, A)'}, {'true,true': [0.0, 1, 0], 'true,false,true': [1.33e-07, 0, 39], 'true,false,false,true': [0.961, 12, 1], 'true,false,false,false': [0.0, 0, 0], 'false,true,true': [0.0, 27, 0], 'false,true,false': [0.0, 0, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 1, 0], 'true,false,true': [0.0, 0, 39], 'true,false,false,true': [0.961, 12, 1], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 27, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, B)', 'false,true': 'movie(G, A)'}, {'true,true': [0.0, 1, 0], 'true,false,true': [1.481, 12, 40], 'true,false,false': [0.0, 0, 0], 'false,true,true': [5.27e-09, 27, 0], 'false,true,false': [0.0, 0, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, A)'}, {'true,true': [0.0, 1, 0], 'true,false,true': [1.43, 12, 40], 'true,false,false': [0.0, 0, 0], 'false,true': [1.83e-08, 27, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [2.98e-08, 0, 39], 'true,false,true': [0.0, 1, 0], 'true,false,false,true': [0.961, 12, 1], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 27, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, A)', 'false,true': 'movie(G, B)'}, {'true,true': [4.94e-08, 0, 39], 'true,false,true': [0.961, 13, 1], 'true,false,false': [0.0, 0, 0], 'false,true,true': [0.0, 27, 0], 'false,true,false': [0.0, 0, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [3.94e-08, 0, 39], 'true,false,true': [0.0, 1, 0], 'true,false,false,true': [0.961, 12, 1], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 27, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.0, 0, 39], 'true,false,true': [0.961, 13, 1], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 27, 0], 'false,false': [0.0, 0, 0]}]]
[{'': [0.18511925952296257, 2.05596856412066e-17], 'true': [0.0, 0.17751479289940902], 'true,false': [1.548618783066885e-15, 0.07100591715976336], 'true,false,false': [0.07100591715976336, nan], 'false': [2.05596856412066e-17, nan]}, {'': [0.13622774542544389, -4.11193712824132e-18], 'true': [0.0, 0.13085745281880845], 'true,false': [-9.109522253334617e-16, 0.07100591715976329], 'true,false,false': [0.07100591715976329, nan], 'false': [-4.11193712824132e-18, nan], 'false,true': [-4.11193712824132e-18, nan]}, {'': [0.08992115285384704, -4.11193712824132e-18], 'true': [0.0, 0.08662347398122179], 'true,false': [4.554761126667308e-16, 0.07100591715976336], 'true,false,false': [0.07100591715976336, nan], 'false': [-4.11193712824132e-18, nan], 'false,true': [-4.11193712824132e-18, nan]}, {'': [0.059810128866161445, -2.05596856412066e-18], 'true': [0.0, 0.057889290920045036], 'true,false': [-3.188332788667116e-16, 0.07100591715976327], 'true,false,false': [0.07100591715976327, nan], 'false': [-2.05596856412066e-18, nan]}, {'': [0.043338793680135435, 1.02798428206033e-18], 'true': [0.0, 0.04220224423733275], 'true,false': [0.04220224423733275, nan], 'false': [1.02798428206033e-18, nan], 'false,true': [1.02798428206033e-18, nan]}, {'': [0.03995769489791795, 1.2335811384723961e-17], 'true': [0.0, 0.03931885090344548], 'true,false': [0.03931885090344548, nan], 'false': [1.2335811384723961e-17, nan]}, {'': [0.03824038385830343, -3.0839528461809902e-18], 'true': [2.2773805633336544e-17, 0.06594415149553991], 'true,false': [0.0, 0.07100591715976326], 'true,false,false': [0.07100591715976326, nan], 'false': [-3.0839528461809902e-18, nan]}, {'': [0.03214230030973338, 0.0], 'true': [6.26279654916755e-17, 0.06593607769493444], 'true,false': [0.06593607769493444, nan], 'false': [0.0, nan], 'false,true': [0.0, nan]}, {'': [0.02826781059478705, -5.13992141030165e-18], 'true': [3.985415985833895e-17, 0.06593409206773528], 'true,false': [0.0, 0.07100591715976326], 'true,false,false': [0.07100591715976326, nan], 'false': [-5.13992141030165e-18, nan]}, {'': [0.025675627204477493, -2.569960705150825e-18], 'true': [-5.408778837917429e-17, 0.06593488838054737], 'true,false': [0.06593488838054737, nan], 'false': [-2.569960705150825e-18, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(A, D).;true;true
0;true,false;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;true;genre(A, D).;true;true
1;true,false;genre(B, E).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;true;genre(A, D).;true;true
2;true,false;genre(B, E).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;true;genre(A, D).;true;true
3;true,false;genre(B, E).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;true;genre(A, D).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;true;genre(A, D).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(B, D).;true;true
6;true,false;genre(A, E).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;true;genre(B, D).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;true;genre(B, D).;true;true
8;true,false;genre(A, E).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;true;genre(B, D).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14185106490048777;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995116;  // std dev = 2.46e-07, 39.000 (wgt'ed) examples reached here.  /* #pos=39 */
%   | | else if ( female(A), actor(B) )
%   | | | then return -0.1418510649004878;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | | else return 0.02481560176617888;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   else return -0.1418510649004877;  // std dev = 2.36e-08, 27.000 (wgt'ed) examples reached here.  /* #neg=27 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.12544463852839138;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( genre(B, E) )
%   | | then return 0.719473412210955;  // std dev = 0.000, 39.000 (wgt'ed) examples reached here.  /* #pos=39 */
%   | | else if ( female(A), actor(B) )
%   | | | then return -0.12544463852839138;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | | else return 0.021767884192405735;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   else return -0.12544463852839138;  // std dev = 0.000, 27.000 (wgt'ed) examples reached here.  /* #neg=27 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.11231637819360639;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( genre(B, E) )
%   | | then return 0.5553664367462842;  // std dev = 1.33e-07, 39.000 (wgt'ed) examples reached here.  /* #pos=39 */
%   | | else if ( female(A) )
%   | | | then return 0.008271069865362359;  // std dev = 0.902, 8.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */
%   | | | else return -0.1476167937218563;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else return -0.1123163781936064;  // std dev = 0.000, 27.000 (wgt'ed) examples reached here.  /* #neg=27 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.10159632948783628;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( genre(B, E) )
%   | | then return 0.4175135841583102;  // std dev = 0.000, 39.000 (wgt'ed) examples reached here.  /* #pos=39 */
%   | | else if ( female(A), actor(B) )
%   | | | then return -0.11314366353874507;  // std dev = 3.73e-09, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | | else return 0.03356360146331975;  // std dev = 0.896, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   else return -0.10159632948783635;  // std dev = 0.000, 27.000 (wgt'ed) examples reached here.  /* #neg=27 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.09269127618926096;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( actor(B) )
%   | | then return -0.11542652303313476;  // std dev = 0.054, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else if ( female(A) )
%   | | | then return 0.3516724057949446;  // std dev = 0.511, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | | else return 0.32071184716014955;  // std dev = 2.98e-08, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   else return -0.09269127618926097;  // std dev = 5.27e-09, 27.000 (wgt'ed) examples reached here.  /* #neg=27 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.08518475138839687;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( actor(B) )
%   | | then return -0.10417843519237856;  // std dev = 0.049, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else if ( female(A) )
%   | | | then return 0.2814745319830483;  // std dev = 0.530, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | | else return 0.2551722425694895;  // std dev = 0.000, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   else return -0.08518475138839682;  // std dev = 1.83e-08, 27.000 (wgt'ed) examples reached here.  /* #neg=27 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.20592831215787546;  // std dev = 0.029, 39.000 (wgt'ed) examples reached here.  /* #pos=39 */
%   | else if ( genre(A, E) )
%   | | then return -0.07877675473109173;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( female(A) )
%   | | | then return 0.019947801975635164;  // std dev = 0.776, 8.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */
%   | | | else return -0.11035945732122825;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else return -0.07877675473109175;  // std dev = 0.000, 27.000 (wgt'ed) examples reached here.  /* #neg=27 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.17428626347441753;  // std dev = 0.025, 39.000 (wgt'ed) examples reached here.  /* #pos=39 */
%   | else if ( female(A) )
%   | | then if ( female(B) )
%   | | | then return -0.08534653207542914;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | | else return 0.12159043158719136;  // std dev = 0.717, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | else return -0.09552532310615143;  // std dev = 0.024, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   else return -0.07324622576333704;  // std dev = 0.000, 27.000 (wgt'ed) examples reached here.  /* #neg=27 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.15061103726459862;  // std dev = 0.022, 39.000 (wgt'ed) examples reached here.  /* #pos=39 */
%   | else if ( genre(A, E) )
%   | | then return -0.0670203855228836;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( female(A), actor(B) )
%   | | | then return -0.0859500291057371;  // std dev = 0.021, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | | else return 0.04332228080659608;  // std dev = 0.740, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   else return -0.06842697784420276;  // std dev = 0.000, 27.000 (wgt'ed) examples reached here.  /* #neg=27 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.13234141109893607;  // std dev = 0.020, 39.000 (wgt'ed) examples reached here.  /* #pos=39 */
%   | else if ( female(A) )
%   | | then if ( female(B) )
%   | | | then return -0.07288991559295223;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | | else return 0.11127920707090302;  // std dev = 0.691, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | else return -0.08997553080245313;  // std dev = 0.030, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   else return -0.06419184008202622;  // std dev = 0.000, 27.000 (wgt'ed) examples reached here.  /* #neg=27 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.250038
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.724719
   F1        = 0.840391


Total learning time: 4.926 seconds
Total inference time: 2.279 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.110542
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.975
   F1        = 0.987342


Total scoring time: 1.772 seconds
Refined model CLL: -0.110542


******************************************
Best model found
******************************************
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.250038
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.724719
   F1        = 0.840391


Total learning time: 11.991999999999999 seconds
Total inference time: 2.279 seconds
AUC ROC: 1.0
Total revision time: 11.991999999999999
Best scored revision CLL: -0.110542


Dataset: 4_cora_imdb, Fold: 3, Type: Transfer (trRDN-B), Time: 17:58:58
{'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.250038, 'Precision': [1.0, 0.5], 'Recall': 0.724719, 'F1': 0.840391, 'Learning time': 11.991999999999999, 'Inference time': 2.279, 'parameter_0.2': {'AUC ROC': 0.976029, 'AUC PR': 0.976327, 'CLL': -0.368182, 'Precision': [1.0, 0.5], 'Recall': 0.724719, 'F1': 0.840391, 'Learning time': 3.55, 'Inference time': 2.219}}


Amount of data: 0.4
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;false;false
0;false;haswordvenue(A, I), haswordtitle(J, I).;true;false
0;false,true;haswordtitle(J, K), haswordauthor(L, K).;true;false
0;false,true,true;haswordauthor(L, I).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, A).;false;true
1;true,true,false;title(F, D), venue(F, B).;false;false
1;true,false;haswordvenue(A, G), haswordtitle(H, G).;false;false
1;false;haswordvenue(A, I), haswordtitle(J, I).;true;false
1;false,true;haswordtitle(J, K), haswordauthor(L, K).;true;false
1;false,true,true;haswordvenue(B, K).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;title(F, D), venue(F, B).;false;false
2;true,false;haswordvenue(A, G), haswordtitle(H, G).;false;false
2;false;haswordvenue(B, I), haswordtitle(J, I).;true;false
2;false,true;haswordtitle(J, K), haswordvenue(A, K).;true;false
2;false,true,true;haswordauthor(L, K).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;title(E, D), venue(E, A).;false;true
3;true,true,false;title(F, D), venue(F, B).;false;false
3;true,false;haswordvenue(A, G), haswordtitle(H, G).;false;false
3;false;haswordvenue(A, I), haswordtitle(J, I).;true;false
3;false,true;haswordtitle(J, K), haswordauthor(L, K).;true;false
3;false,true,true;haswordauthor(L, I).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, A).;false;true
4;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
4;true,false;haswordvenue(B, H), haswordtitle(I, H).;false;false
4;false;haswordvenue(B, J), haswordtitle(K, J).;true;false
4;false,true;haswordtitle(K, L), haswordauthor(M, L).;true;false
4;false,true,true;haswordvenue(A, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, A).;false;true
5;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
5;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;false
5;false;haswordvenue(A, J), haswordauthor(K, J).;false;true
5;false,false;haswordvenue(B, L), haswordtitle(M, L).;true;false
5;false,false,true;haswordtitle(M, N), haswordauthor(P, N).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;title(E, D), venue(E, B).;false;true
6;true,true,false;title(F, D), venue(F, A).;false;false
6;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
6;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
6;false;haswordvenue(A, K), haswordauthor(L, K).;false;true
6;false,false;haswordvenue(B, M), haswordtitle(N, M).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
7;true,false;haswordvenue(B, H), haswordtitle(I, H).;false;false
7;false;haswordvenue(A, J), haswordtitle(K, J).;true;false
7;false,true;haswordtitle(K, L), haswordauthor(M, L).;true;false
7;false,true,true;haswordvenue(B, L).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;title(E, D), venue(E, B).;false;true
8;true,true,false;title(F, D), venue(F, A).;false;false
8;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;false
8;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
8;false;haswordvenue(B, K), haswordauthor(L, K).;false;true
8;false,false;haswordvenue(A, M), haswordtitle(N, M).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, B).;false;true
9;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
9;true,false;haswordvenue(A, H), haswordauthor(I, H).;false;true
9;true,false,false;haswordvenue(A, J), haswordtitle(K, J).;false;false
9;false;haswordvenue(A, L), haswordauthor(M, L).;false;true
9;false,false;haswordvenue(B, N), haswordauthor(P, N).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14185106490048777;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995125;  // std dev = 0.000, 79.000 (wgt'ed) examples reached here.  /* #pos=79 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.06492798797741088;  // std dev = 1.359, 26.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=2 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.14185106490048766;  // std dev = 7.68e-09, 55.000 (wgt'ed) examples reached here.  /* #neg=55 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.12544463852839138;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else if ( genre(B, E) )
%   | | then return 0.7194734122109538;  // std dev = 2.23e-07, 79.000 (wgt'ed) examples reached here.  /* #pos=79 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.05720661123539924;  // std dev = 1.359, 26.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=2 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then if ( movie(H, B) )
%   | | then return -0.12544463852839158;  // std dev = 0.000, 55.000 (wgt'ed) examples reached here.  /* #neg=55 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.11231637819360639;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else if ( genre(B, E) )
%   | | then return 0.5553664367462836;  // std dev = 3.37e-07, 79.000 (wgt'ed) examples reached here.  /* #pos=79 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.05070064289107805;  // std dev = 1.359, 26.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=2 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then if ( movie(H, A) )
%   | | then return -0.11231637819360629;  // std dev = 5.10e-09, 55.000 (wgt'ed) examples reached here.  /* #neg=55 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.10159632948783628;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else if ( genre(B, E) )
%   | | then return 0.4175135841583104;  // std dev = 0.000, 79.000 (wgt'ed) examples reached here.  /* #pos=79 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.045161602872387976;  // std dev = 1.359, 26.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=2 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.10159632948783623;  // std dev = 5.10e-09, 55.000 (wgt'ed) examples reached here.  /* #neg=55 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.09269127618926096;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else if ( movie(E, B) )
%   | | then return 0.2312928822669593;  // std dev = 2.097, 105.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=81 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, B) )
%   | then if ( movie(G, A) )
%   | | then return -0.09269127618926107;  // std dev = 0.000, 55.000 (wgt'ed) examples reached here.  /* #neg=55 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.08518475138839687;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else if ( movie(E, B) )
%   | | then return 0.18857058450328218;  // std dev = 2.024, 105.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=81 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.08518475138839679;  // std dev = 1.83e-08, 55.000 (wgt'ed) examples reached here.  /* #neg=55 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.23678886424582873;  // std dev = 0.000, 79.000 (wgt'ed) examples reached here.  /* #pos=79 */
%   | else if ( genre(A, E) )
%   | | then return -0.07877675473109173;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.09131958579235465;  // std dev = 1.359, 26.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=2 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.07877675473109176;  // std dev = 1.49e-08, 55.000 (wgt'ed) examples reached here.  /* #neg=55 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.19668322290447893;  // std dev = 0.000, 79.000 (wgt'ed) examples reached here.  /* #pos=79 */
%   | else if ( movie(E, B) )
%   | | then return -0.07851911076509847;  // std dev = 1.359, 28.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=2 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then if ( movie(G, B) )
%   | | then return -0.07324622576333704;  // std dev = 1.05e-08, 55.000 (wgt'ed) examples reached here.  /* #neg=55 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.1674458956188262;  // std dev = 8.43e-08, 79.000 (wgt'ed) examples reached here.  /* #pos=79 */
%   | else if ( genre(A, E) )
%   | | then return -0.0680916231534907;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.0688716256315448;  // std dev = 1.359, 26.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=2 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.06842697784420268;  // std dev = 1.49e-08, 55.000 (wgt'ed) examples reached here.  /* #neg=55 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.14538274631131512;  // std dev = 5.77e-08, 79.000 (wgt'ed) examples reached here.  /* #pos=79 */
%   | else if ( movie(E, A) )
%   | | then return -0.06074435777054601;  // std dev = 1.359, 28.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=2 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.06419184008202625;  // std dev = 0.000, 55.000 (wgt'ed) examples reached here.  /* #neg=55 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 0.976029
   AUC PR    = 0.976327
   CLL	      = -0.368049
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.724719
   F1        = 0.840391


Total learning time: 4.247 seconds
Total inference time: 2.3 seconds
AUC ROC: 0.976029


Results scoring model
   AUC ROC   = 0.996342
   AUC PR    = 0.996979
   CLL	      = -0.134706
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.975309
   F1        = 0.9875


Total scoring time: 1.979 seconds
Parameter learned model CLL: -0.134706


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 2, 0], 'true,false,true': [0.0, 0, 79], 'true,false,false,true': [1.359, 24, 2], 'true,false,false,false': [0.0, 0, 0], 'false,true': [7.68e-09, 55, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)', 'false,true': 'movie(H, B)'}, {'true,true': [0.0, 2, 0], 'true,false,true': [2.23e-07, 0, 79], 'true,false,false,true': [1.359, 24, 2], 'true,false,false,false': [0.0, 0, 0], 'false,true,true': [0.0, 55, 0], 'false,true,false': [0.0, 0, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)', 'false,true': 'movie(H, A)'}, {'true,true': [0.0, 2, 0], 'true,false,true': [3.37e-07, 0, 79], 'true,false,false,true': [1.359, 24, 2], 'true,false,false,false': [0.0, 0, 0], 'false,true,true': [5.1e-09, 55, 0], 'false,true,false': [0.0, 0, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 2, 0], 'true,false,true': [0.0, 0, 79], 'true,false,false,true': [1.359, 24, 2], 'true,false,false,false': [0.0, 0, 0], 'false,true': [5.1e-09, 55, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, B)', 'false,true': 'movie(G, A)'}, {'true,true': [0.0, 2, 0], 'true,false,true': [2.097, 24, 81], 'true,false,false': [0.0, 0, 0], 'false,true,true': [0.0, 55, 0], 'false,true,false': [0.0, 0, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, A)'}, {'true,true': [0.0, 2, 0], 'true,false,true': [2.024, 24, 81], 'true,false,false': [0.0, 0, 0], 'false,true': [1.83e-08, 55, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 0, 79], 'true,false,true': [0.0, 2, 0], 'true,false,false,true': [1.359, 24, 2], 'true,false,false,false': [0.0, 0, 0], 'false,true': [1.49e-08, 55, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, A)', 'false,true': 'movie(G, B)'}, {'true,true': [0.0, 0, 79], 'true,false,true': [1.359, 26, 2], 'true,false,false': [0.0, 0, 0], 'false,true,true': [1.05e-08, 55, 0], 'false,true,false': [0.0, 0, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [8.43e-08, 0, 79], 'true,false,true': [0.0, 2, 0], 'true,false,false,true': [1.359, 24, 2], 'true,false,false,false': [0.0, 0, 0], 'false,true': [1.49e-08, 55, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [5.77e-08, 0, 79], 'true,false,true': [1.359, 26, 2], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 55, 0], 'false,false': [0.0, 0, 0]}]]
[{'': [0.18394619617433966, 6.055761952500853e-17], 'true': [0.0, 0.17632653061224618], 'true,false': [-8.99421184506456e-16, 0.07100591715976336], 'true,false,false': [0.07100591715976336, nan], 'false': [6.055761952500853e-17, nan]}, {'': [0.13534919231380185, -3.633457171500512e-17], 'true': [0.0, 0.12996683826428407], 'true,false': [6.295948291545192e-16, 0.07100591715976329], 'true,false,false': [0.07100591715976329, nan], 'false': [-3.633457171500512e-17, nan], 'false,true': [-3.633457171500512e-17, nan]}, {'': [0.08932151960216861, 2.62416351275037e-17], 'true': [0.0, 0.0860150474700741], 'true,false': [1.4390738952103295e-15, 0.07100591715976336], 'true,false,false': [0.07100591715976336, nan], 'false': [2.62416351275037e-17, nan], 'false,true': [2.62416351275037e-17, nan]}, {'': [0.05939186728424162, 2.62416351275037e-17], 'true': [0.0, 0.05746417242479893], 'true,false': [0.0, 0.07100591715976337], 'true,false,false': [0.07100591715976337, nan], 'false': [2.62416351275037e-17, nan]}, {'': [0.04301975281628521, -2.0185873175002845e-18], 'true': [0.0, 0.04187720032560985], 'true,false': [0.04187720032560985, nan], 'false': [-2.0185873175002845e-18, nan], 'false,true': [-2.0185873175002845e-18, nan]}, {'': [0.03964955985312829, 6.0557619525008536e-18], 'true': [0.0, 0.0390040048182769], 'true,false': [0.0390040048182769, nan], 'false': [6.0557619525008536e-18, nan]}, {'': [0.0379425480755968, 4.037174635000569e-18], 'true': [-7.86993536443149e-17, 0.0659445005970425], 'true,false': [0.0, 0.07100591715976332], 'true,false,false': [0.07100591715976332, nan], 'false': [4.037174635000569e-18, nan]}, {'': [0.031886943735940414, 2.0185873175002845e-18], 'true': [-1.0118488325697629e-16, 0.06593620465069987], 'true,false': [0.06593620465069987, nan], 'false': [2.0185873175002845e-18, nan], 'false,true': [2.0185873175002845e-18, nan]}, {'': [0.028038398907817796, 4.037174635000569e-18], 'true': [8.994211845064559e-17, 0.0659341062873835], 'true,false': [0.0, 0.07100591715976326], 'true,false,false': [0.07100591715976326, nan], 'false': [4.037174635000569e-18, nan]}, {'': [0.025462927222742283, -3.0278809762504268e-18], 'true': [4.2160368023740125e-17, 0.06593482993823331], 'true,false': [0.06593482993823331, nan], 'false': [-3.0278809762504268e-18, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(A, D).;true;true
0;true,false;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;true;genre(A, D).;true;true
1;true,false;genre(B, E).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;true;genre(A, D).;true;true
2;true,false;genre(B, E).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;true;genre(A, D).;true;true
3;true,false;genre(B, E).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;true;genre(A, D).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;true;genre(A, D).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(B, D).;true;true
6;true,false;genre(A, E).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;true;genre(B, D).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;true;genre(B, D).;true;true
8;true,false;genre(A, E).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;true;genre(B, D).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14185106490048777;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995125;  // std dev = 0.000, 79.000 (wgt'ed) examples reached here.  /* #pos=79 */
%   | | else if ( female(A), actor(B) )
%   | | | then return -0.1418510649004878;  // std dev = 0.000, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | | | else return 0.039967116917694015;  // std dev = 1.279, 11.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=2 */
%   else return -0.14185106490048766;  // std dev = 5.77e-08, 55.000 (wgt'ed) examples reached here.  /* #neg=55 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.12544463852839138;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else if ( genre(B, E) )
%   | | then return 0.7194734122109538;  // std dev = 2.23e-07, 79.000 (wgt'ed) examples reached here.  /* #pos=79 */
%   | | else if ( female(A), actor(B) )
%   | | | then return -0.12544463852839138;  // std dev = 7.45e-09, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | | | else return 0.0350319603427371;  // std dev = 1.279, 11.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=2 */
%   else return -0.12544463852839158;  // std dev = 0.000, 55.000 (wgt'ed) examples reached here.  /* #neg=55 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.11231637819360639;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else if ( genre(B, E) )
%   | | then return 0.5553664367462836;  // std dev = 3.37e-07, 79.000 (wgt'ed) examples reached here.  /* #pos=79 */
%   | | else if ( female(A) )
%   | | | then return 7.528269976580034E-4;  // std dev = 1.277, 17.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=2 */
%   | | | else return -0.15122813406785932;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   else return -0.11231637819360629;  // std dev = 3.80e-08, 55.000 (wgt'ed) examples reached here.  /* #neg=55 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.10159632948783628;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else if ( genre(B, E) )
%   | | then return 0.4175135841583104;  // std dev = 0.000, 79.000 (wgt'ed) examples reached here.  /* #pos=79 */
%   | | else if ( female(A), actor(B) )
%   | | | then return -0.11239145801544753;  // std dev = 1.05e-08, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | | | else return 0.045631536793522276;  // std dev = 1.256, 11.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=2 */
%   else return -0.10159632948783623;  // std dev = 3.80e-08, 55.000 (wgt'ed) examples reached here.  /* #neg=55 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.09269127618926096;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else if ( director(B) )
%   | | then if ( female(A) )
%   | | | then return 0.35333743507522297;  // std dev = 0.715, 32.000 (wgt'ed) examples reached here.  /* #pos=32 */
%   | | | else return 0.32071184716014944;  // std dev = 2.98e-08, 49.000 (wgt'ed) examples reached here.  /* #pos=49 */
%   | | else return -0.11534904462018512;  // std dev = 0.087, 24.000 (wgt'ed) examples reached here.  /* #neg=24 */
%   else return -0.09269127618926107;  // std dev = 0.000, 55.000 (wgt'ed) examples reached here.  /* #neg=55 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.08518475138839687;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else if ( director(B) )
%   | | then if ( female(A) )
%   | | | then return 0.2828359694999441;  // std dev = 0.741, 32.000 (wgt'ed) examples reached here.  /* #pos=32 */
%   | | | else return 0.2551722425694896;  // std dev = 0.000, 49.000 (wgt'ed) examples reached here.  /* #pos=49 */
%   | | else return -0.10412195454871863;  // std dev = 0.079, 24.000 (wgt'ed) examples reached here.  /* #neg=24 */
%   else return -0.08518475138839679;  // std dev = 1.83e-08, 55.000 (wgt'ed) examples reached here.  /* #neg=55 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.20602908227162847;  // std dev = 0.042, 79.000 (wgt'ed) examples reached here.  /* #pos=79 */
%   | else if ( genre(A, E) )
%   | | then return -0.07877675473109173;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | else if ( female(A), actor(B) )
%   | | | then return -0.08329437863394683;  // std dev = 0.000, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | | | else return 0.04111210514410288;  // std dev = 1.092, 11.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=2 */
%   else return -0.07877675473109176;  // std dev = 1.49e-08, 55.000 (wgt'ed) examples reached here.  /* #neg=55 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.17436071983125825;  // std dev = 0.037, 79.000 (wgt'ed) examples reached here.  /* #pos=79 */
%   | else if ( actor(A), actor(B) )
%   | | then return -0.09256909547648433;  // std dev = 0.098, 24.000 (wgt'ed) examples reached here.  /* #neg=24 */
%   | | else return 0.32903698626450084;  // std dev = 0.805, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   else return -0.07324622576333704;  // std dev = 1.05e-08, 55.000 (wgt'ed) examples reached here.  /* #neg=55 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.150667880251281;  // std dev = 0.033, 79.000 (wgt'ed) examples reached here.  /* #pos=79 */
%   | else if ( genre(A, E) )
%   | | then return -0.09896086639379559;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | else if ( female(A) )
%   | | | then return 0.015402333796543407;  // std dev = 0.974, 17.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=2 */
%   | | | else return -0.10894863814283481;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   else return -0.06842697784420268;  // std dev = 1.49e-08, 55.000 (wgt'ed) examples reached here.  /* #neg=55 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.13238603099332008;  // std dev = 0.030, 79.000 (wgt'ed) examples reached here.  /* #pos=79 */
%   | else if ( actor(A), actor(B) )
%   | | then return -0.0819508667199401;  // std dev = 0.064, 24.000 (wgt'ed) examples reached here.  /* #neg=24 */
%   | | else return 0.2840407798043912;  // std dev = 0.749, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   else return -0.06419184008202625;  // std dev = 0.000, 55.000 (wgt'ed) examples reached here.  /* #neg=55 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.207865
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.724719
   F1        = 0.840391


Total learning time: 5.455 seconds
Total inference time: 2.461 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.106678
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.975309
   F1        = 0.9875


Total scoring time: 1.932 seconds
Refined model CLL: -0.106678


******************************************
Best model found
******************************************
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.207865
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.724719
   F1        = 0.840391


Total learning time: 13.613000000000001 seconds
Total inference time: 2.461 seconds
AUC ROC: 1.0
Total revision time: 13.613000000000001
Best scored revision CLL: -0.106678


Dataset: 4_cora_imdb, Fold: 3, Type: Transfer (trRDN-B), Time: 17:59:18
{'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.207865, 'Precision': [1.0, 0.5], 'Recall': 0.724719, 'F1': 0.840391, 'Learning time': 13.613000000000001, 'Inference time': 2.461, 'parameter_0.4': {'AUC ROC': 0.976029, 'AUC PR': 0.976327, 'CLL': -0.368049, 'Precision': [1.0, 0.5], 'Recall': 0.724719, 'F1': 0.840391, 'Learning time': 4.247, 'Inference time': 2.3}}


Amount of data: 0.6
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;false;false
0;false;haswordvenue(A, I), haswordtitle(J, I).;true;false
0;false,true;haswordtitle(J, K), haswordauthor(L, K).;true;false
0;false,true,true;haswordauthor(L, I).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, A).;false;true
1;true,true,false;title(F, D), venue(F, B).;false;false
1;true,false;haswordvenue(A, G), haswordtitle(H, G).;false;false
1;false;haswordvenue(A, I), haswordtitle(J, I).;true;false
1;false,true;haswordtitle(J, K), haswordauthor(L, K).;true;false
1;false,true,true;haswordvenue(B, K).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;title(F, D), venue(F, B).;false;false
2;true,false;haswordvenue(A, G), haswordtitle(H, G).;false;false
2;false;haswordvenue(B, I), haswordtitle(J, I).;true;false
2;false,true;haswordtitle(J, K), haswordvenue(A, K).;true;false
2;false,true,true;haswordauthor(L, K).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;title(E, D), venue(E, A).;false;true
3;true,true,false;title(F, D), venue(F, B).;false;false
3;true,false;haswordvenue(A, G), haswordtitle(H, G).;false;false
3;false;haswordvenue(A, I), haswordtitle(J, I).;true;false
3;false,true;haswordtitle(J, K), haswordauthor(L, K).;true;false
3;false,true,true;haswordauthor(L, I).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, A).;false;true
4;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
4;true,false;haswordvenue(B, H), haswordtitle(I, H).;false;false
4;false;haswordvenue(B, J), haswordtitle(K, J).;true;false
4;false,true;haswordtitle(K, L), haswordauthor(M, L).;true;false
4;false,true,true;haswordvenue(A, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, A).;false;true
5;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
5;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;false
5;false;haswordvenue(A, J), haswordauthor(K, J).;false;true
5;false,false;haswordvenue(B, L), haswordtitle(M, L).;true;false
5;false,false,true;haswordtitle(M, N), haswordauthor(P, N).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;title(E, D), venue(E, B).;false;true
6;true,true,false;title(F, D), venue(F, A).;false;false
6;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
6;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
6;false;haswordvenue(A, K), haswordauthor(L, K).;false;true
6;false,false;haswordvenue(B, M), haswordtitle(N, M).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
7;true,false;haswordvenue(B, H), haswordtitle(I, H).;false;false
7;false;haswordvenue(A, J), haswordtitle(K, J).;true;false
7;false,true;haswordtitle(K, L), haswordauthor(M, L).;true;false
7;false,true,true;haswordvenue(B, L).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;title(E, D), venue(E, B).;false;true
8;true,true,false;title(F, D), venue(F, A).;false;false
8;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;false
8;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
8;false;haswordvenue(B, K), haswordauthor(L, K).;false;true
8;false,false;haswordvenue(A, M), haswordtitle(N, M).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, B).;false;true
9;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
9;true,false;haswordvenue(A, H), haswordauthor(I, H).;false;true
9;true,false,false;haswordvenue(A, J), haswordtitle(K, J).;false;false
9;false;haswordvenue(A, L), haswordauthor(M, L).;false;true
9;false,false;haswordvenue(B, N), haswordauthor(P, N).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14185106490048777;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995107;  // std dev = 6.42e-07, 118.000 (wgt'ed) examples reached here.  /* #pos=118 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.030739953789376637;  // std dev = 1.886, 36.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=4 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.14185106490048763;  // std dev = 8.74e-09, 87.000 (wgt'ed) examples reached here.  /* #neg=87 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.12544463852839138;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( genre(B, E) )
%   | | then return 0.7194734122109552;  // std dev = 0.000, 118.000 (wgt'ed) examples reached here.  /* #pos=118 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.0270390361053513;  // std dev = 1.886, 36.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=4 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then if ( movie(H, B) )
%   | | then return -0.12544463852839144;  // std dev = 0.000, 87.000 (wgt'ed) examples reached here.  /* #neg=87 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.11231637819360639;  // std dev = 2.63e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( genre(B, E) )
%   | | then return 0.5553664367462834;  // std dev = 4.54e-07, 118.000 (wgt'ed) examples reached here.  /* #pos=118 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.023851027745157686;  // std dev = 1.886, 36.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=4 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then if ( movie(H, A) )
%   | | then return -0.11231637819360621;  // std dev = 7.68e-09, 87.000 (wgt'ed) examples reached here.  /* #neg=87 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1015963294878363;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( genre(B, E) )
%   | | then return 0.41751358415830936;  // std dev = 3.37e-07, 118.000 (wgt'ed) examples reached here.  /* #pos=118 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.021090647410594115;  // std dev = 1.886, 36.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=4 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.1015963294878362;  // std dev = 5.89e-09, 87.000 (wgt'ed) examples reached here.  /* #neg=87 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.09269127618926094;  // std dev = 2.63e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( movie(E, B) )
%   | | then return 0.24137121465731096;  // std dev = 2.595, 154.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=122 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, B) )
%   | then if ( movie(G, A) )
%   | | then return -0.09269127618926107;  // std dev = 1.49e-08, 87.000 (wgt'ed) examples reached here.  /* #neg=87 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.08518475138839687;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( movie(E, B) )
%   | | then return 0.195967937364102;  // std dev = 2.522, 154.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=122 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.08518475138839682;  // std dev = 5.05e-08, 87.000 (wgt'ed) examples reached here.  /* #neg=87 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.23364520040432518;  // std dev = 0.000, 118.000 (wgt'ed) examples reached here.  /* #pos=118 */
%   | else if ( genre(A, E) )
%   | | then return -0.07877675473109173;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.07653450530897614;  // std dev = 1.886, 36.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=4 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.07877675473109162;  // std dev = 4.94e-08, 87.000 (wgt'ed) examples reached here.  /* #neg=87 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.19442861849705642;  // std dev = 0.000, 118.000 (wgt'ed) examples reached here.  /* #pos=118 */
%   | else if ( movie(E, B) )
%   | | then return -0.06576891298789068;  // std dev = 1.886, 39.000 (wgt'ed) examples reached here.  /* #neg=35 #pos=4 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then if ( movie(G, B) )
%   | | then return -0.07324622576333707;  // std dev = 0.000, 87.000 (wgt'ed) examples reached here.  /* #neg=87 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.1657689654722251;  // std dev = 1.30e-07, 118.000 (wgt'ed) examples reached here.  /* #pos=118 */
%   | else if ( genre(A, E) )
%   | | then return -0.06890515796479924;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.05579916744053892;  // std dev = 1.886, 36.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=4 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.06842697784420265;  // std dev = 4.15e-08, 87.000 (wgt'ed) examples reached here.  /* #neg=87 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.1440952811701005;  // std dev = 0.000, 118.000 (wgt'ed) examples reached here.  /* #pos=118 */
%   | else if ( movie(E, A) )
%   | | then return -0.04944757435236172;  // std dev = 1.886, 39.000 (wgt'ed) examples reached here.  /* #neg=35 #pos=4 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.06419184008202626;  // std dev = 0.000, 87.000 (wgt'ed) examples reached here.  /* #neg=87 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 0.976029
   AUC PR    = 0.976327
   CLL	      = -0.348099
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.724719
   F1        = 0.840391


Total learning time: 4.52 seconds
Total inference time: 2.262 seconds
AUC ROC: 0.976029


Results scoring model
   AUC ROC   = 0.9957
   AUC PR    = 0.996311
   CLL	      = -0.14136
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.967213
   F1        = 0.983333


Total scoring time: 2.089 seconds
Parameter learned model CLL: -0.14136


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 3, 0], 'true,false,true': [6.42e-07, 0, 118], 'true,false,false,true': [1.886, 32, 4], 'true,false,false,false': [0.0, 0, 0], 'false,true': [8.74e-09, 87, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)', 'false,true': 'movie(H, B)'}, {'true,true': [0.0, 3, 0], 'true,false,true': [0.0, 0, 118], 'true,false,false,true': [1.886, 32, 4], 'true,false,false,false': [0.0, 0, 0], 'false,true,true': [0.0, 87, 0], 'false,true,false': [0.0, 0, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)', 'false,true': 'movie(H, A)'}, {'true,true': [2.63e-09, 3, 0], 'true,false,true': [4.54e-07, 0, 118], 'true,false,false,true': [1.886, 32, 4], 'true,false,false,false': [0.0, 0, 0], 'false,true,true': [7.68e-09, 87, 0], 'false,true,false': [0.0, 0, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 3, 0], 'true,false,true': [3.37e-07, 0, 118], 'true,false,false,true': [1.886, 32, 4], 'true,false,false,false': [0.0, 0, 0], 'false,true': [5.89e-09, 87, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, B)', 'false,true': 'movie(G, A)'}, {'true,true': [2.63e-09, 3, 0], 'true,false,true': [2.595, 32, 122], 'true,false,false': [0.0, 0, 0], 'false,true,true': [1.49e-08, 87, 0], 'false,true,false': [0.0, 0, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, A)'}, {'true,true': [0.0, 3, 0], 'true,false,true': [2.522, 32, 122], 'true,false,false': [0.0, 0, 0], 'false,true': [5.05e-08, 87, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 0, 118], 'true,false,true': [0.0, 3, 0], 'true,false,false,true': [1.886, 32, 4], 'true,false,false,false': [0.0, 0, 0], 'false,true': [4.94e-08, 87, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, A)', 'false,true': 'movie(G, B)'}, {'true,true': [0.0, 0, 118], 'true,false,true': [1.886, 35, 4], 'true,false,false': [0.0, 0, 0], 'false,true,true': [0.0, 87, 0], 'false,true,false': [0.0, 0, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [1.3e-07, 0, 118], 'true,false,true': [0.0, 3, 0], 'true,false,false,true': [1.886, 32, 4], 'true,false,false,false': [0.0, 0, 0], 'false,true': [4.15e-08, 87, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.0, 0, 118], 'true,false,true': [1.886, 35, 4], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 87, 0], 'false,false': [0.0, 0, 0]}]]
[{'': [0.17323217980445868, 7.656710514656253e-17], 'true': [0.0, 0.16461460617305188], 'true,false': [3.4924981927191367e-15, 0.09876543209876527], 'true,false,false': [0.09876543209876527, nan], 'false': [7.656710514656253e-17, nan]}, {'': [0.1289834424261039, -1.7865657867531254e-17], 'true': [0.0, 0.12290793324009822], 'true,false': [-1.2043097216272884e-15, 0.09876543209876529], 'true,false,false': [0.09876543209876529, nan], 'false': [-1.7865657867531254e-17, nan], 'false,true': [-1.7865657867531254e-17, nan]}, {'': [0.08690228733712811, 5.870144727903127e-17], 'true': [2.3129646346357427e-18, 0.08318136584136367], 'true,false': [1.7462490963595683e-15, 0.0987654320987656], 'true,false,false': [0.0987654320987656, nan], 'false': [5.870144727903127e-17, nan], 'false,true': [5.870144727903127e-17, nan]}, {'': [0.0596989627463867, 3.317907889684376e-17], 'true': [-1.1564823173178713e-18, 0.05754591474109431], 'true,false': [9.634477773018308e-16, 0.0987654320987655], 'true,false,false': [0.0987654320987655, nan], 'false': [3.317907889684376e-17, nan]}, {'': [0.044977676840456296, 2.5522368382187506e-18], 'true': [2.3129646346357427e-18, 0.043721424309750276], 'true,false': [0.043721424309750276, nan], 'false': [2.5522368382187506e-18, nan], 'false,true': [2.5522368382187506e-18, nan]}, {'': [0.04200887543316414, 2.9350723639515634e-17], 'true': [0.0, 0.04131678108456481], 'true,false': [0.04131678108456481, nan], 'false': [2.9350723639515634e-17, nan]}, {'': [0.04062972336998798, 2.807460522040626e-17], 'true': [-2.9355049464665157e-16, 0.09116844816329629], 'true,false': [0.0, 0.09876543209876551], 'true,false,false': [0.09876543209876551, nan], 'false': [2.807460522040626e-17, nan]}, {'': [0.035288199550235044, -7.656710514656252e-18], 'true': [-1.5053871520341105e-16, 0.09117275035195307], 'true,false': [0.09117275035195307, nan], 'false': [-7.656710514656252e-18, nan], 'false,true': [-7.656710514656252e-18, nan]}, {'': [0.031899100000118655, 1.9779835496195318e-17], 'true': [1.430117794432405e-16, 0.09118028764058503], 'true,false': [0.0, 0.09876543209876544], 'true,false,false': [0.09876543209876544, nan], 'false': [1.9779835496195318e-17, nan]}, {'': [0.029645225001221406, -1.2761184191093753e-17], 'true': [-1.881733940042638e-17, 0.09118725845693762], 'true,false': [0.09118725845693762, nan], 'false': [-1.2761184191093753e-17, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(A, D).;true;true
0;true,false;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;true;genre(A, D).;true;true
1;true,false;genre(B, E).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;true;genre(A, D).;true;true
2;true,false;genre(B, E).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;true;genre(A, D).;true;true
3;true,false;genre(B, E).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;true;genre(A, D).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;true;genre(A, D).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(B, D).;true;true
6;true,false;genre(A, E).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;true;genre(B, D).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;true;genre(B, D).;true;true
8;true,false;genre(A, E).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;true;genre(B, D).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14185106490048777;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995107;  // std dev = 6.42e-07, 118.000 (wgt'ed) examples reached here.  /* #pos=118 */
%   | | else if ( actor(B) )
%   | | | then return -0.1418510649004877;  // std dev = 2.98e-08, 32.000 (wgt'ed) examples reached here.  /* #neg=32 */
%   | | | else return 0.8581489350995122;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else return -0.14185106490048763;  // std dev = 8.16e-08, 87.000 (wgt'ed) examples reached here.  /* #neg=87 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.12544463852839138;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( genre(B, E) )
%   | | then return 0.7194734122109552;  // std dev = 0.000, 118.000 (wgt'ed) examples reached here.  /* #pos=118 */
%   | | else if ( actor(B) )
%   | | | then return -0.12544463852839138;  // std dev = 0.000, 32.000 (wgt'ed) examples reached here.  /* #neg=32 */
%   | | | else return 0.7194734122109545;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else return -0.12544463852839144;  // std dev = 0.000, 87.000 (wgt'ed) examples reached here.  /* #neg=87 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.11231637819360639;  // std dev = 2.63e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( genre(B, E) )
%   | | then return 0.5553664367462834;  // std dev = 4.54e-07, 118.000 (wgt'ed) examples reached here.  /* #pos=118 */
%   | | else if ( actor(B) )
%   | | | then return -0.11231637819360642;  // std dev = 0.000, 32.000 (wgt'ed) examples reached here.  /* #neg=32 */
%   | | | else return 0.5553664367462845;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else return -0.11231637819360621;  // std dev = 7.15e-08, 87.000 (wgt'ed) examples reached here.  /* #neg=87 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1015963294878363;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( genre(B, E) )
%   | | then return 0.41751358415830936;  // std dev = 3.37e-07, 118.000 (wgt'ed) examples reached here.  /* #pos=118 */
%   | | else if ( actor(B) )
%   | | | then return -0.10159632948783635;  // std dev = 0.000, 32.000 (wgt'ed) examples reached here.  /* #neg=32 */
%   | | | else return 0.41751358415830997;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else return -0.1015963294878362;  // std dev = 5.37e-08, 87.000 (wgt'ed) examples reached here.  /* #neg=87 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.09269127618926094;  // std dev = 2.63e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( director(B) )
%   | | then return 0.3207118471601499;  // std dev = 2.19e-07, 122.000 (wgt'ed) examples reached here.  /* #pos=122 */
%   | | else return -0.09269127618926098;  // std dev = 0.000, 32.000 (wgt'ed) examples reached here.  /* #neg=32 */
%   else return -0.09269127618926107;  // std dev = 1.49e-08, 87.000 (wgt'ed) examples reached here.  /* #neg=87 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.08518475138839687;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( director(B) )
%   | | then return 0.2551722425694898;  // std dev = 0.000, 122.000 (wgt'ed) examples reached here.  /* #pos=122 */
%   | | else return -0.0851847513883968;  // std dev = 2.17e-08, 32.000 (wgt'ed) examples reached here.  /* #neg=32 */
%   else return -0.08518475138839682;  // std dev = 5.05e-08, 87.000 (wgt'ed) examples reached here.  /* #neg=87 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.20975771563253542;  // std dev = 1.86e-07, 118.000 (wgt'ed) examples reached here.  /* #pos=118 */
%   | else if ( genre(A, E) )
%   | | then return -0.07877675473109173;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else if ( actor(B) )
%   | | | then return -0.07877675473109179;  // std dev = 0.000, 32.000 (wgt'ed) examples reached here.  /* #neg=32 */
%   | | | else return 0.20975771563253554;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else return -0.07877675473109162;  // std dev = 4.94e-08, 87.000 (wgt'ed) examples reached here.  /* #neg=87 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.1770964977452781;  // std dev = 0.000, 118.000 (wgt'ed) examples reached here.  /* #pos=118 */
%   | else if ( actor(B) )
%   | | then return -0.07324622576333704;  // std dev = 1.05e-08, 35.000 (wgt'ed) examples reached here.  /* #neg=35 */
%   | | else return 0.17709649774527736;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else return -0.07324622576333707;  // std dev = 0.000, 87.000 (wgt'ed) examples reached here.  /* #neg=87 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.1527438580936714;  // std dev = 0.000, 118.000 (wgt'ed) examples reached here.  /* #pos=118 */
%   | else if ( genre(A, E) )
%   | | then return -0.06842697784420272;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else if ( actor(B) )
%   | | | then return -0.06842697784420275;  // std dev = 0.000, 32.000 (wgt'ed) examples reached here.  /* #neg=32 */
%   | | | else return 0.15274385809367075;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else return -0.06842697784420265;  // std dev = 4.15e-08, 87.000 (wgt'ed) examples reached here.  /* #neg=87 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.13400703000801106;  // std dev = 5.16e-08, 118.000 (wgt'ed) examples reached here.  /* #pos=118 */
%   | else if ( actor(B) )
%   | | then return -0.06419184008202623;  // std dev = 0.000, 35.000 (wgt'ed) examples reached here.  /* #neg=35 */
%   | | else return 0.13400703000801095;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else return -0.06419184008202626;  // std dev = 0.000, 87.000 (wgt'ed) examples reached here.  /* #neg=87 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.094637
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 6.213 seconds
Total inference time: 2.231 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.094637
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 2.228 seconds
Refined model CLL: -0.094637


******************************************
Best model found
******************************************
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.094637
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 15.049999999999999 seconds
Total inference time: 2.231 seconds
AUC ROC: 1.0
Total revision time: 15.049999999999999
Best scored revision CLL: -0.094637


Dataset: 4_cora_imdb, Fold: 3, Type: Transfer (trRDN-B), Time: 17:59:39
{'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.094637, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 15.049999999999999, 'Inference time': 2.231, 'parameter_0.6': {'AUC ROC': 0.976029, 'AUC PR': 0.976327, 'CLL': -0.348099, 'Precision': [1.0, 0.5], 'Recall': 0.724719, 'F1': 0.840391, 'Learning time': 4.52, 'Inference time': 2.262}}


Amount of data: 0.8
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;false;false
0;false;haswordvenue(A, I), haswordtitle(J, I).;true;false
0;false,true;haswordtitle(J, K), haswordauthor(L, K).;true;false
0;false,true,true;haswordauthor(L, I).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, A).;false;true
1;true,true,false;title(F, D), venue(F, B).;false;false
1;true,false;haswordvenue(A, G), haswordtitle(H, G).;false;false
1;false;haswordvenue(A, I), haswordtitle(J, I).;true;false
1;false,true;haswordtitle(J, K), haswordauthor(L, K).;true;false
1;false,true,true;haswordvenue(B, K).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;title(F, D), venue(F, B).;false;false
2;true,false;haswordvenue(A, G), haswordtitle(H, G).;false;false
2;false;haswordvenue(B, I), haswordtitle(J, I).;true;false
2;false,true;haswordtitle(J, K), haswordvenue(A, K).;true;false
2;false,true,true;haswordauthor(L, K).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;title(E, D), venue(E, A).;false;true
3;true,true,false;title(F, D), venue(F, B).;false;false
3;true,false;haswordvenue(A, G), haswordtitle(H, G).;false;false
3;false;haswordvenue(A, I), haswordtitle(J, I).;true;false
3;false,true;haswordtitle(J, K), haswordauthor(L, K).;true;false
3;false,true,true;haswordauthor(L, I).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, A).;false;true
4;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
4;true,false;haswordvenue(B, H), haswordtitle(I, H).;false;false
4;false;haswordvenue(B, J), haswordtitle(K, J).;true;false
4;false,true;haswordtitle(K, L), haswordauthor(M, L).;true;false
4;false,true,true;haswordvenue(A, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, A).;false;true
5;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
5;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;false
5;false;haswordvenue(A, J), haswordauthor(K, J).;false;true
5;false,false;haswordvenue(B, L), haswordtitle(M, L).;true;false
5;false,false,true;haswordtitle(M, N), haswordauthor(P, N).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;title(E, D), venue(E, B).;false;true
6;true,true,false;title(F, D), venue(F, A).;false;false
6;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
6;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
6;false;haswordvenue(A, K), haswordauthor(L, K).;false;true
6;false,false;haswordvenue(B, M), haswordtitle(N, M).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
7;true,false;haswordvenue(B, H), haswordtitle(I, H).;false;false
7;false;haswordvenue(A, J), haswordtitle(K, J).;true;false
7;false,true;haswordtitle(K, L), haswordauthor(M, L).;true;false
7;false,true,true;haswordvenue(B, L).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;title(E, D), venue(E, B).;false;true
8;true,true,false;title(F, D), venue(F, A).;false;false
8;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;false
8;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
8;false;haswordvenue(B, K), haswordauthor(L, K).;false;true
8;false,false;haswordvenue(A, M), haswordtitle(N, M).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, B).;false;true
9;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
9;true,false;haswordvenue(A, H), haswordauthor(I, H).;false;true
9;true,false,false;haswordvenue(A, J), haswordtitle(K, J).;false;false
9;false;haswordvenue(A, L), haswordauthor(M, L).;false;true
9;false,false;haswordvenue(B, N), haswordauthor(P, N).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14185106490048777;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995098;  // std dev = 9.68e-07, 156.000 (wgt'ed) examples reached here.  /* #pos=156 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.00100607795665518;  // std dev = 2.449, 49.000 (wgt'ed) examples reached here.  /* #neg=42 #pos=7 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.14185106490048768;  // std dev = 5.89e-09, 116.000 (wgt'ed) examples reached here.  /* #neg=116 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.12544463852839138;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else if ( genre(B, E) )
%   | | then return 0.7194734122109563;  // std dev = 0.000, 156.000 (wgt'ed) examples reached here.  /* #pos=156 */
%   | | else if ( movie(F, A) )
%   | | | then return 8.835646163369304E-4;  // std dev = 2.449, 49.000 (wgt'ed) examples reached here.  /* #neg=42 #pos=7 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then if ( movie(H, B) )
%   | | then return -0.1254446385283913;  // std dev = 0.000, 116.000 (wgt'ed) examples reached here.  /* #neg=116 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.11231637819360638;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else if ( genre(B, E) )
%   | | then return 0.5553664367462833;  // std dev = 5.40e-07, 156.000 (wgt'ed) examples reached here.  /* #pos=156 */
%   | | else if ( movie(F, A) )
%   | | | then return 7.758973011973736E-4;  // std dev = 2.449, 49.000 (wgt'ed) examples reached here.  /* #neg=42 #pos=7 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then if ( movie(H, A) )
%   | | then return -0.11231637819360618;  // std dev = 8.43e-09, 116.000 (wgt'ed) examples reached here.  /* #neg=116 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.10159632948783633;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else if ( genre(B, E) )
%   | | then return 0.4175135841583089;  // std dev = 4.58e-07, 156.000 (wgt'ed) examples reached here.  /* #pos=156 */
%   | | else if ( movie(F, A) )
%   | | | then return 6.812936799186532E-4;  // std dev = 2.449, 49.000 (wgt'ed) examples reached here.  /* #neg=42 #pos=7 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.10159632948783635;  // std dev = 0.000, 116.000 (wgt'ed) examples reached here.  /* #neg=116 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.09269127618926098;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else if ( movie(E, B) )
%   | | then return 0.2441968734327034;  // std dev = 3.134, 205.000 (wgt'ed) examples reached here.  /* #neg=42 #pos=163 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, B) )
%   | then if ( movie(G, A) )
%   | | then return -0.09269127618926085;  // std dev = 7.22e-08, 116.000 (wgt'ed) examples reached here.  /* #neg=116 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.08518475138839687;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else if ( movie(E, B) )
%   | | then return 0.19783309856296613;  // std dev = 3.066, 205.000 (wgt'ed) examples reached here.  /* #neg=42 #pos=163 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.0851847513883968;  // std dev = 6.23e-08, 116.000 (wgt'ed) examples reached here.  /* #neg=116 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.23280633470329506;  // std dev = 1.40e-07, 156.000 (wgt'ed) examples reached here.  /* #pos=156 */
%   | else if ( genre(A, E) )
%   | | then return -0.07877675473109177;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.06225842097694427;  // std dev = 2.449, 49.000 (wgt'ed) examples reached here.  /* #neg=42 #pos=7 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.07877675473109155;  // std dev = 6.66e-08, 116.000 (wgt'ed) examples reached here.  /* #neg=116 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.19382601184464313;  // std dev = 2.31e-07, 156.000 (wgt'ed) examples reached here.  /* #pos=156 */
%   | else if ( movie(E, B) )
%   | | then return -0.05423381272664094;  // std dev = 2.450, 54.000 (wgt'ed) examples reached here.  /* #neg=47 #pos=7 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then if ( movie(G, B) )
%   | | then return -0.07324622576333711;  // std dev = 0.000, 116.000 (wgt'ed) examples reached here.  /* #neg=116 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.16532010231398178;  // std dev = 1.86e-07, 156.000 (wgt'ed) examples reached here.  /* #pos=156 */
%   | else if ( genre(A, E) )
%   | | then return -0.06964890834525088;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.043915990726122234;  // std dev = 2.449, 49.000 (wgt'ed) examples reached here.  /* #neg=42 #pos=7 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.06842697784420264;  // std dev = 5.48e-08, 116.000 (wgt'ed) examples reached here.  /* #neg=116 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.14375023642687143;  // std dev = 0.000, 156.000 (wgt'ed) examples reached here.  /* #pos=156 */
%   | else if ( movie(E, A) )
%   | | then return -0.03992345647762096;  // std dev = 2.450, 54.000 (wgt'ed) examples reached here.  /* #neg=47 #pos=7 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.06419184008202626;  // std dev = 0.000, 116.000 (wgt'ed) examples reached here.  /* #neg=116 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 0.976029
   AUC PR    = 0.976327
   CLL	      = -0.332064
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.724719
   F1        = 0.840391


Total learning time: 4.953 seconds
Total inference time: 2.478 seconds
AUC ROC: 0.976029


Results scoring model
   AUC ROC   = 0.994467
   AUC PR    = 0.995209
   CLL	      = -0.150333
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.957055
   F1        = 0.978056


Total scoring time: 2.409 seconds
Parameter learned model CLL: -0.150333


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 5, 0], 'true,false,true': [9.68e-07, 0, 156], 'true,false,false,true': [2.449, 42, 7], 'true,false,false,false': [0.0, 0, 0], 'false,true': [5.89e-09, 116, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)', 'false,true': 'movie(H, B)'}, {'true,true': [0.0, 5, 0], 'true,false,true': [0.0, 0, 156], 'true,false,false,true': [2.449, 42, 7], 'true,false,false,false': [0.0, 0, 0], 'false,true,true': [0.0, 116, 0], 'false,true,false': [0.0, 0, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)', 'false,true': 'movie(H, A)'}, {'true,true': [0.0, 5, 0], 'true,false,true': [5.4e-07, 0, 156], 'true,false,false,true': [2.449, 42, 7], 'true,false,false,false': [0.0, 0, 0], 'false,true,true': [8.43e-09, 116, 0], 'false,true,false': [0.0, 0, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 5, 0], 'true,false,true': [4.58e-07, 0, 156], 'true,false,false,true': [2.449, 42, 7], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 116, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, B)', 'false,true': 'movie(G, A)'}, {'true,true': [0.0, 5, 0], 'true,false,true': [3.134, 42, 163], 'true,false,false': [0.0, 0, 0], 'false,true,true': [7.22e-08, 116, 0], 'false,true,false': [0.0, 0, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, A)'}, {'true,true': [0.0, 5, 0], 'true,false,true': [3.066, 42, 163], 'true,false,false': [0.0, 0, 0], 'false,true': [6.23e-08, 116, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [1.4e-07, 0, 156], 'true,false,true': [0.0, 5, 0], 'true,false,false,true': [2.449, 42, 7], 'true,false,false,false': [0.0, 0, 0], 'false,true': [6.66e-08, 116, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, A)', 'false,true': 'movie(G, B)'}, {'true,true': [2.31e-07, 0, 156], 'true,false,true': [2.45, 47, 7], 'true,false,false': [0.0, 0, 0], 'false,true,true': [0.0, 116, 0], 'false,true,false': [0.0, 0, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [1.86e-07, 0, 156], 'true,false,true': [0.0, 5, 0], 'true,false,false,true': [2.449, 42, 7], 'true,false,false,false': [0.0, 0, 0], 'false,true': [5.48e-08, 116, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.0, 0, 156], 'true,false,true': [2.45, 47, 7], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 116, 0], 'false,false': [0.0, 0, 0]}]]
[{'': [0.1737188208616838, 3.4455197315953135e-17], 'true': [-2.7755575615628915e-18, 0.16290303390839372], 'true,false': [6.012284687200848e-15, 0.12244897959183695], 'true,false,false': [0.12244897959183695, nan], 'false': [3.4455197315953135e-17, nan]}, {'': [0.13079102345842758, -3.828355257328126e-18], 'true': [0.0, 0.12319197489924874], 'true,false': [-2.6417614534670392e-15, 0.12244897959183686], 'true,false,false': [0.12244897959183686, nan], 'false': [-3.828355257328126e-18, nan], 'false,true': [-3.828355257328126e-18, nan]}, {'': [0.08983963621152877, 7.082457226057034e-17], 'true': [0.0, 0.08521285364146633], 'true,false': [1.8674520619335967e-15, 0.12244897959183641], 'true,false,false': [0.12244897959183641, nan], 'false': [7.082457226057034e-17, nan], 'false,true': [7.082457226057034e-17, nan]}, {'': [0.0635122907277857, -1.5313421029312504e-17], 'true': [0.0, 0.060871827880987266], 'true,false': [1.343654532366856e-15, 0.12244897959183701], 'true,false,false': [0.12244897959183701, nan], 'false': [-1.5313421029312504e-17, nan]}, {'': [0.04940448200044042, 4.498317427360548e-17], 'true': [0.0, 0.04790724019116883], 'true,false': [0.04790724019116883, nan], 'false': [4.498317427360548e-17, nan], 'false,true': [4.498317427360548e-17, nan]}, {'': [0.046612352472914544, 3.34981085016211e-17], 'true': [0.0, 0.04584211760928366], 'true,false': [0.04584211760928366, nan], 'false': [3.34981085016211e-17, nan]}, {'': [0.04538103319743143, 3.828355257328126e-17], 'true': [1.25255930983351e-16, 0.11113403620053279], 'true,false': [-1.3877787807814458e-18, 0.12244897959183688], 'true,false,false': [0.12244897959183688, nan], 'false': [3.828355257328126e-17, nan]}, {'': [0.040335101269013636, -7.656710514656252e-18], 'true': [3.416070845000482e-16, 0.11114799599371092], 'true,false': [0.11114799599371092, nan], 'false': [-7.656710514656252e-18, nan], 'false,true': [-7.656710514656252e-18, nan]}, {'': [0.03714010720119671, 2.584139798696485e-17], 'true': [2.220446049250313e-16, 0.11116674720406448], 'true,false': [0.0, 0.1224489795918367], 'true,false,false': [0.1224489795918367, nan], 'false': [2.584139798696485e-17, nan]}, {'': [0.03503255362428346, -1.7706143065142584e-17], 'true': [-5.693451408334136e-17, 0.11117666105046607], 'true,false': [0.11117666105046607, nan], 'false': [-1.7706143065142584e-17, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(A, D).;true;true
0;true,false;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;true;genre(A, D).;true;true
1;true,false;genre(B, E).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;true;genre(A, D).;true;true
2;true,false;genre(B, E).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;true;genre(A, D).;true;true
3;true,false;genre(B, E).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;true;genre(A, D).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;true;genre(A, D).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(B, D).;true;true
6;true,false;genre(A, E).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;true;genre(B, D).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;true;genre(B, D).;true;true
8;true,false;genre(A, E).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;true;genre(B, D).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14185106490048777;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995098;  // std dev = 9.68e-07, 156.000 (wgt'ed) examples reached here.  /* #pos=156 */
%   | | else if ( actor(B) )
%   | | | then return -0.14185106490048768;  // std dev = 4.47e-08, 42.000 (wgt'ed) examples reached here.  /* #neg=42 */
%   | | | else return 0.8581489350995123;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   else return -0.14185106490048768;  // std dev = 6.32e-08, 116.000 (wgt'ed) examples reached here.  /* #neg=116 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.12544463852839138;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else if ( genre(B, E) )
%   | | then return 0.7194734122109563;  // std dev = 0.000, 156.000 (wgt'ed) examples reached here.  /* #pos=156 */
%   | | else if ( actor(B) )
%   | | | then return -0.12544463852839152;  // std dev = 0.000, 42.000 (wgt'ed) examples reached here.  /* #neg=42 */
%   | | | else return 0.7194734122109543;  // std dev = 2.11e-08, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   else return -0.1254446385283913;  // std dev = 0.000, 116.000 (wgt'ed) examples reached here.  /* #neg=116 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.11231637819360638;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else if ( genre(B, E) )
%   | | then return 0.5553664367462833;  // std dev = 5.40e-07, 156.000 (wgt'ed) examples reached here.  /* #pos=156 */
%   | | else if ( actor(B) )
%   | | | then return -0.11231637819360636;  // std dev = 0.000, 42.000 (wgt'ed) examples reached here.  /* #neg=42 */
%   | | | else return 0.5553664367462846;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   else return -0.11231637819360618;  // std dev = 9.06e-08, 116.000 (wgt'ed) examples reached here.  /* #neg=116 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.10159632948783633;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else if ( genre(B, E) )
%   | | then return 0.4175135841583089;  // std dev = 4.58e-07, 156.000 (wgt'ed) examples reached here.  /* #pos=156 */
%   | | else if ( actor(B) )
%   | | | then return -0.10159632948783633;  // std dev = 0.000, 42.000 (wgt'ed) examples reached here.  /* #neg=42 */
%   | | | else return 0.41751358415830986;  // std dev = 2.58e-08, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   else return -0.10159632948783635;  // std dev = 0.000, 116.000 (wgt'ed) examples reached here.  /* #neg=116 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.09269127618926098;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else if ( director(B) )
%   | | then return 0.32071184716014955;  // std dev = 3.21e-07, 163.000 (wgt'ed) examples reached here.  /* #pos=163 */
%   | | else return -0.09269127618926101;  // std dev = 0.000, 42.000 (wgt'ed) examples reached here.  /* #neg=42 */
%   else return -0.09269127618926085;  // std dev = 7.22e-08, 116.000 (wgt'ed) examples reached here.  /* #neg=116 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.08518475138839687;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else if ( director(B) )
%   | | then return 0.2551722425694905;  // std dev = 0.000, 163.000 (wgt'ed) examples reached here.  /* #pos=163 */
%   | | else return -0.08518475138839679;  // std dev = 2.24e-08, 42.000 (wgt'ed) examples reached here.  /* #neg=42 */
%   else return -0.0851847513883968;  // std dev = 6.23e-08, 116.000 (wgt'ed) examples reached here.  /* #neg=116 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.20975771563253517;  // std dev = 2.53e-07, 156.000 (wgt'ed) examples reached here.  /* #pos=156 */
%   | else if ( genre(A, E) )
%   | | then return -0.07877675473109177;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( actor(B) )
%   | | | then return -0.07877675473109179;  // std dev = 0.000, 42.000 (wgt'ed) examples reached here.  /* #neg=42 */
%   | | | else return 0.2097577156325356;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   else return -0.07877675473109155;  // std dev = 6.66e-08, 116.000 (wgt'ed) examples reached here.  /* #neg=116 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.1770964977452782;  // std dev = 0.000, 156.000 (wgt'ed) examples reached here.  /* #pos=156 */
%   | else if ( actor(B) )
%   | | then return -0.07324622576333704;  // std dev = 1.29e-08, 47.000 (wgt'ed) examples reached here.  /* #neg=47 */
%   | | else return 0.17709649774527714;  // std dev = 5.27e-09, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   else return -0.07324622576333711;  // std dev = 0.000, 116.000 (wgt'ed) examples reached here.  /* #neg=116 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.15274385809367147;  // std dev = 0.000, 156.000 (wgt'ed) examples reached here.  /* #pos=156 */
%   | else if ( genre(A, E) )
%   | | then return -0.06842697784420272;  // std dev = 1.86e-09, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( actor(B) )
%   | | | then return -0.06842697784420271;  // std dev = 7.45e-09, 42.000 (wgt'ed) examples reached here.  /* #neg=42 */
%   | | | else return 0.15274385809367072;  // std dev = 7.45e-09, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   else return -0.06842697784420264;  // std dev = 5.48e-08, 116.000 (wgt'ed) examples reached here.  /* #neg=116 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.134007030008011;  // std dev = 6.66e-08, 156.000 (wgt'ed) examples reached here.  /* #pos=156 */
%   | else if ( actor(B) )
%   | | then return -0.06419184008202625;  // std dev = 0.000, 47.000 (wgt'ed) examples reached here.  /* #neg=47 */
%   | | else return 0.13400703000801095;  // std dev = 5.27e-09, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   else return -0.06419184008202626;  // std dev = 0.000, 116.000 (wgt'ed) examples reached here.  /* #neg=116 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.094637
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 6.518 seconds
Total inference time: 2.457 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.094637
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 2.007 seconds
Refined model CLL: -0.094637


******************************************
Best model found
******************************************
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.094637
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 15.886999999999999 seconds
Total inference time: 2.457 seconds
AUC ROC: 1.0
Total revision time: 15.886999999999999
Best scored revision CLL: -0.094637


Dataset: 4_cora_imdb, Fold: 3, Type: Transfer (trRDN-B), Time: 18:00:01
{'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.094637, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 15.886999999999999, 'Inference time': 2.457, 'parameter_0.8': {'AUC ROC': 0.976029, 'AUC PR': 0.976327, 'CLL': -0.332064, 'Precision': [1.0, 0.5], 'Recall': 0.724719, 'F1': 0.840391, 'Learning time': 4.953, 'Inference time': 2.478}}


Amount of data: 1.0
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;false;false
0;false;haswordvenue(A, I), haswordtitle(J, I).;true;false
0;false,true;haswordtitle(J, K), haswordauthor(L, K).;true;false
0;false,true,true;haswordauthor(L, I).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, A).;false;true
1;true,true,false;title(F, D), venue(F, B).;false;false
1;true,false;haswordvenue(A, G), haswordtitle(H, G).;false;false
1;false;haswordvenue(A, I), haswordtitle(J, I).;true;false
1;false,true;haswordtitle(J, K), haswordauthor(L, K).;true;false
1;false,true,true;haswordvenue(B, K).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;title(F, D), venue(F, B).;false;false
2;true,false;haswordvenue(A, G), haswordtitle(H, G).;false;false
2;false;haswordvenue(B, I), haswordtitle(J, I).;true;false
2;false,true;haswordtitle(J, K), haswordvenue(A, K).;true;false
2;false,true,true;haswordauthor(L, K).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;title(E, D), venue(E, A).;false;true
3;true,true,false;title(F, D), venue(F, B).;false;false
3;true,false;haswordvenue(A, G), haswordtitle(H, G).;false;false
3;false;haswordvenue(A, I), haswordtitle(J, I).;true;false
3;false,true;haswordtitle(J, K), haswordauthor(L, K).;true;false
3;false,true,true;haswordauthor(L, I).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, A).;false;true
4;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
4;true,false;haswordvenue(B, H), haswordtitle(I, H).;false;false
4;false;haswordvenue(B, J), haswordtitle(K, J).;true;false
4;false,true;haswordtitle(K, L), haswordauthor(M, L).;true;false
4;false,true,true;haswordvenue(A, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, A).;false;true
5;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
5;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;false
5;false;haswordvenue(A, J), haswordauthor(K, J).;false;true
5;false,false;haswordvenue(B, L), haswordtitle(M, L).;true;false
5;false,false,true;haswordtitle(M, N), haswordauthor(P, N).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;title(E, D), venue(E, B).;false;true
6;true,true,false;title(F, D), venue(F, A).;false;false
6;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
6;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
6;false;haswordvenue(A, K), haswordauthor(L, K).;false;true
6;false,false;haswordvenue(B, M), haswordtitle(N, M).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
7;true,false;haswordvenue(B, H), haswordtitle(I, H).;false;false
7;false;haswordvenue(A, J), haswordtitle(K, J).;true;false
7;false,true;haswordtitle(K, L), haswordauthor(M, L).;true;false
7;false,true,true;haswordvenue(B, L).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;title(E, D), venue(E, B).;false;true
8;true,true,false;title(F, D), venue(F, A).;false;false
8;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;false
8;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
8;false;haswordvenue(B, K), haswordauthor(L, K).;false;true
8;false,false;haswordvenue(A, M), haswordtitle(N, M).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, B).;false;true
9;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
9;true,false;haswordvenue(A, H), haswordauthor(I, H).;false;true
9;true,false,false;haswordvenue(A, J), haswordtitle(K, J).;false;false
9;false;haswordvenue(A, L), haswordauthor(M, L).;false;true
9;false,false;haswordvenue(B, N), haswordauthor(P, N).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14185106490048777;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995093;  // std dev = 1.09e-06, 194.000 (wgt'ed) examples reached here.  /* #pos=194 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.03056272820296064;  // std dev = 2.877, 58.000 (wgt'ed) examples reached here.  /* #neg=48 #pos=10 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.14185106490048807;  // std dev = 0.000, 151.000 (wgt'ed) examples reached here.  /* #neg=151 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.12544463852839138;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else if ( genre(B, E) )
%   | | then return 0.719473412210957;  // std dev = 0.000, 194.000 (wgt'ed) examples reached here.  /* #pos=194 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.026801469463012102;  // std dev = 2.877, 58.000 (wgt'ed) examples reached here.  /* #neg=48 #pos=10 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then if ( movie(H, B) )
%   | | then return -0.1254446385283913;  // std dev = 4.71e-08, 151.000 (wgt'ed) examples reached here.  /* #neg=151 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.11231637819360638;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else if ( genre(B, E) )
%   | | then return 0.5553664367462833;  // std dev = 6.19e-07, 194.000 (wgt'ed) examples reached here.  /* #pos=194 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.023435345074299035;  // std dev = 2.877, 58.000 (wgt'ed) examples reached here.  /* #neg=48 #pos=10 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then if ( movie(H, A) )
%   | | then return -0.11231637819360625;  // std dev = 7.57e-09, 151.000 (wgt'ed) examples reached here.  /* #neg=151 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.10159632948783633;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else if ( genre(B, E) )
%   | | then return 0.4175135841583099;  // std dev = 3.04e-07, 194.000 (wgt'ed) examples reached here.  /* #pos=194 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.020439614626026222;  // std dev = 2.877, 58.000 (wgt'ed) examples reached here.  /* #neg=48 #pos=10 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.10159632948783646;  // std dev = 0.000, 151.000 (wgt'ed) examples reached here.  /* #neg=151 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.09269127618926098;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else if ( movie(E, B) )
%   | | then return 0.2509909610011464;  // std dev = 3.518, 252.000 (wgt'ed) examples reached here.  /* #neg=48 #pos=204 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, B) )
%   | then if ( movie(G, A) )
%   | | then return -0.0926912761892607;  // std dev = 7.74e-08, 151.000 (wgt'ed) examples reached here.  /* #neg=151 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.08518475138839687;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else if ( movie(E, B) )
%   | | then return 0.20268922449257212;  // std dev = 3.456, 252.000 (wgt'ed) examples reached here.  /* #neg=48 #pos=204 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.08518475138839678;  // std dev = 6.66e-08, 151.000 (wgt'ed) examples reached here.  /* #neg=151 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.23073199925361174;  // std dev = 8.43e-08, 194.000 (wgt'ed) examples reached here.  /* #pos=194 */
%   | else if ( genre(A, E) )
%   | | then return -0.07877675473109177;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.051139069028214204;  // std dev = 2.877, 58.000 (wgt'ed) examples reached here.  /* #neg=48 #pos=10 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.07877675473109151;  // std dev = 8.23e-08, 151.000 (wgt'ed) examples reached here.  /* #neg=151 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.19233409471556528;  // std dev = 1.52e-07, 194.000 (wgt'ed) examples reached here.  /* #pos=194 */
%   | else if ( movie(E, B) )
%   | | then return -0.04483718078642522;  // std dev = 2.878, 63.000 (wgt'ed) examples reached here.  /* #neg=53 #pos=10 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then if ( movie(G, B) )
%   | | then return -0.07324622576333731;  // std dev = 0.000, 151.000 (wgt'ed) examples reached here.  /* #neg=151 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.16420761760073005;  // std dev = 0.000, 194.000 (wgt'ed) examples reached here.  /* #pos=194 */
%   | else if ( genre(A, E) )
%   | | then return -0.0702602584284796;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.03492251122379125;  // std dev = 2.877, 58.000 (wgt'ed) examples reached here.  /* #neg=48 #pos=10 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.06842697784420264;  // std dev = 6.66e-08, 151.000 (wgt'ed) examples reached here.  /* #neg=151 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.14289427389187995;  // std dev = 0.000, 194.000 (wgt'ed) examples reached here.  /* #pos=194 */
%   | else if ( movie(E, A) )
%   | | then return -0.032143704712905924;  // std dev = 2.878, 63.000 (wgt'ed) examples reached here.  /* #neg=53 #pos=10 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.06419184008202626;  // std dev = 0.000, 151.000 (wgt'ed) examples reached here.  /* #neg=151 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 0.976029
   AUC PR    = 0.976327
   CLL	      = -0.317705
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.724719
   F1        = 0.840391


Total learning time: 5.246 seconds
Total inference time: 2.471 seconds
AUC ROC: 0.976029


Results scoring model
   AUC ROC   = 0.994233
   AUC PR    = 0.994929
   CLL	      = -0.153685
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.95098
   F1        = 0.974874


Total scoring time: 2.739 seconds
Parameter learned model CLL: -0.153685


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 5, 0], 'true,false,true': [1.09e-06, 0, 194], 'true,false,false,true': [2.877, 48, 10], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 151, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)', 'false,true': 'movie(H, B)'}, {'true,true': [0.0, 5, 0], 'true,false,true': [0.0, 0, 194], 'true,false,false,true': [2.877, 48, 10], 'true,false,false,false': [0.0, 0, 0], 'false,true,true': [4.71e-08, 151, 0], 'false,true,false': [0.0, 0, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)', 'false,true': 'movie(H, A)'}, {'true,true': [0.0, 5, 0], 'true,false,true': [6.19e-07, 0, 194], 'true,false,false,true': [2.877, 48, 10], 'true,false,false,false': [0.0, 0, 0], 'false,true,true': [7.57e-09, 151, 0], 'false,true,false': [0.0, 0, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 5, 0], 'true,false,true': [3.04e-07, 0, 194], 'true,false,false,true': [2.877, 48, 10], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 151, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, B)', 'false,true': 'movie(G, A)'}, {'true,true': [0.0, 5, 0], 'true,false,true': [3.518, 48, 204], 'true,false,false': [0.0, 0, 0], 'false,true,true': [7.74e-08, 151, 0], 'false,true,false': [0.0, 0, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, A)'}, {'true,true': [0.0, 5, 0], 'true,false,true': [3.456, 48, 204], 'true,false,false': [0.0, 0, 0], 'false,true': [6.66e-08, 151, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [8.43e-08, 0, 194], 'true,false,true': [0.0, 5, 0], 'true,false,false,true': [2.877, 48, 10], 'true,false,false,false': [0.0, 0, 0], 'false,true': [8.23e-08, 151, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, A)', 'false,true': 'movie(G, B)'}, {'true,true': [1.52e-07, 0, 194], 'true,false,true': [2.878, 53, 10], 'true,false,false': [0.0, 0, 0], 'false,true,true': [0.0, 151, 0], 'false,true,false': [0.0, 0, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 194], 'true,false,true': [0.0, 5, 0], 'true,false,false,true': [2.877, 48, 10], 'true,false,false,false': [0.0, 0, 0], 'false,true': [6.66e-08, 151, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.0, 0, 194], 'true,false,true': [2.878, 53, 10], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 151, 0], 'false,false': [0.0, 0, 0]}]]
[{'': [0.1636966494572263, -1.1763952578809607e-16], 'true': [-2.7755575615628915e-18, 0.1541950113378737], 'true,false': [6.15315358802561e-15, 0.14268727705112952], 'true,false,false': [0.14268727705112952, nan], 'false': [-1.1763952578809607e-16, nan]}, {'': [0.12452474920349198, 1.4704940723512008e-17], 'true': [0.0, 0.11785342747322722], 'true,false': [-3.516087764586063e-15, 0.14268727705112938], 'true,false,false': [0.14268727705112938, nan], 'false': [1.4704940723512008e-17, nan], 'false,true': [1.4704940723512008e-17, nan]}, {'': [0.0870327829151383, 5.734926882169682e-17], 'true': [0.0, 0.08297553482433717], 'true,false': [1.9777993675796604e-15, 0.1426872770511295], 'true,false,false': [0.1426872770511295, nan], 'false': [5.734926882169682e-17, nan], 'false,true': [5.734926882169682e-17, nan]}, {'': [0.06308473534425259, -6.029025696639923e-17], 'true': [0.0, 0.06077718917320492], 'true,false': [4.76136884787696e-16, 0.14268727705112974], 'true,false,false': [0.14268727705112974, nan], 'false': [-6.029025696639923e-17, nan]}, {'': [0.050397981471793134, 3.970333995348242e-17], 'true': [0.0, 0.04909993597104275], 'true,false': [0.04909993597104275, nan], 'false': [3.970333995348242e-17, nan], 'false,true': [3.970333995348242e-17, nan]}, {'': [0.0480514418416672, 2.9409881447024017e-17], 'true': [0.0, 0.04739255891318457], 'true,false': [0.04739255891318457, nan], 'false': [2.9409881447024017e-17, nan]}, {'': [0.04714720710983744, 4.485006920671162e-17], 'true': [3.6625914214438153e-17, 0.13141870104041856], 'true,false': [-1.3877787807814458e-18, 0.14268727705112974], 'true,false,false': [0.14268727705112974, nan], 'false': [4.485006920671162e-17, nan]}, {'': [0.042627642515009646, -2.7939387374672815e-17], 'true': [1.19034221196924e-16, 0.1314324653143124], 'true,false': [0.1314324653143124, nan], 'false': [-2.7939387374672815e-17, nan], 'false,true': [-2.7939387374672815e-17, nan]}, {'': [0.039769837822627885, 2.9409881447024017e-17], 'true': [-2.4264668167065275e-16, 0.13145413194615846], 'true,false': [0.0, 0.14268727705112944], 'true,false,false': [0.14268727705112944, nan], 'false': [2.9409881447024017e-17, nan]}, {'': [0.037895191261535184, -1.0293458506458405e-17], 'true': [-4.349327312964531e-17, 0.1314605805031648], 'true,false': [0.1314605805031648, nan], 'false': [-1.0293458506458405e-17, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(A, D).;true;true
0;true,false;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;true;genre(A, D).;true;true
1;true,false;genre(B, E).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;true;genre(A, D).;true;true
2;true,false;genre(B, E).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;true;genre(A, D).;true;true
3;true,false;genre(B, E).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;true;genre(A, D).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;true;genre(A, D).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(B, D).;true;true
6;true,false;genre(A, E).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;true;genre(B, D).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;true;genre(B, D).;true;true
8;true,false;genre(A, E).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;true;genre(B, D).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14185106490048777;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995093;  // std dev = 1.09e-06, 194.000 (wgt'ed) examples reached here.  /* #pos=194 */
%   | | else if ( actor(B) )
%   | | | then return -0.14185106490048768;  // std dev = 5.05e-08, 48.000 (wgt'ed) examples reached here.  /* #neg=48 */
%   | | | else return 0.8581489350995122;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else return -0.14185106490048807;  // std dev = 0.000, 151.000 (wgt'ed) examples reached here.  /* #neg=151 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.12544463852839138;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else if ( genre(B, E) )
%   | | then return 0.719473412210957;  // std dev = 0.000, 194.000 (wgt'ed) examples reached here.  /* #pos=194 */
%   | | else if ( actor(B) )
%   | | | then return -0.12544463852839155;  // std dev = 0.000, 48.000 (wgt'ed) examples reached here.  /* #neg=48 */
%   | | | else return 0.7194734122109544;  // std dev = 2.98e-08, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else return -0.1254446385283913;  // std dev = 4.71e-08, 151.000 (wgt'ed) examples reached here.  /* #neg=151 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.11231637819360638;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else if ( genre(B, E) )
%   | | then return 0.5553664367462833;  // std dev = 6.19e-07, 194.000 (wgt'ed) examples reached here.  /* #pos=194 */
%   | | else if ( actor(B) )
%   | | | then return -0.11231637819360633;  // std dev = 2.79e-08, 48.000 (wgt'ed) examples reached here.  /* #neg=48 */
%   | | | else return 0.5553664367462846;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else return -0.11231637819360625;  // std dev = 9.31e-08, 151.000 (wgt'ed) examples reached here.  /* #neg=151 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.10159632948783633;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else if ( genre(B, E) )
%   | | then return 0.4175135841583099;  // std dev = 3.04e-07, 194.000 (wgt'ed) examples reached here.  /* #pos=194 */
%   | | else if ( actor(B) )
%   | | | then return -0.10159632948783627;  // std dev = 1.97e-08, 48.000 (wgt'ed) examples reached here.  /* #neg=48 */
%   | | | else return 0.41751358415830986;  // std dev = 3.65e-08, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else return -0.10159632948783646;  // std dev = 0.000, 151.000 (wgt'ed) examples reached here.  /* #neg=151 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.09269127618926098;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else if ( actor(B) )
%   | | then return -0.09269127618926105;  // std dev = 0.000, 48.000 (wgt'ed) examples reached here.  /* #neg=48 */
%   | | else return 0.3207118471601491;  // std dev = 4.00e-07, 204.000 (wgt'ed) examples reached here.  /* #pos=204 */
%   else return -0.0926912761892607;  // std dev = 7.74e-08, 151.000 (wgt'ed) examples reached here.  /* #neg=151 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.08518475138839687;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else if ( actor(B) )
%   | | then return -0.0851847513883968;  // std dev = 1.83e-08, 48.000 (wgt'ed) examples reached here.  /* #neg=48 */
%   | | else return 0.25517224256948845;  // std dev = 4.34e-07, 204.000 (wgt'ed) examples reached here.  /* #pos=204 */
%   else return -0.08518475138839678;  // std dev = 6.66e-08, 151.000 (wgt'ed) examples reached here.  /* #neg=151 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.209757715632535;  // std dev = 3.04e-07, 194.000 (wgt'ed) examples reached here.  /* #pos=194 */
%   | else if ( genre(A, E) )
%   | | then return -0.07877675473109177;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( actor(B) )
%   | | | then return -0.07877675473109179;  // std dev = 0.000, 48.000 (wgt'ed) examples reached here.  /* #neg=48 */
%   | | | else return 0.20975771563253587;  // std dev = 1.05e-08, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else return -0.07877675473109151;  // std dev = 8.23e-08, 151.000 (wgt'ed) examples reached here.  /* #neg=151 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.17709649774527803;  // std dev = 0.000, 194.000 (wgt'ed) examples reached here.  /* #pos=194 */
%   | else if ( actor(B) )
%   | | then return -0.07324622576333704;  // std dev = 7.45e-09, 53.000 (wgt'ed) examples reached here.  /* #neg=53 */
%   | | else return 0.1770964977452775;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else return -0.07324622576333731;  // std dev = 0.000, 151.000 (wgt'ed) examples reached here.  /* #neg=151 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.15274385809367166;  // std dev = 0.000, 194.000 (wgt'ed) examples reached here.  /* #pos=194 */
%   | else if ( genre(A, E) )
%   | | then return -0.06842697784420272;  // std dev = 1.86e-09, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( actor(B) )
%   | | | then return -0.0684269778442027;  // std dev = 1.18e-08, 48.000 (wgt'ed) examples reached here.  /* #neg=48 */
%   | | | else return 0.15274385809367094;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else return -0.06842697784420264;  // std dev = 6.66e-08, 151.000 (wgt'ed) examples reached here.  /* #neg=151 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.13400703000801095;  // std dev = 8.69e-08, 194.000 (wgt'ed) examples reached here.  /* #pos=194 */
%   | else if ( actor(B) )
%   | | then return -0.06419184008202625;  // std dev = 0.000, 53.000 (wgt'ed) examples reached here.  /* #neg=53 */
%   | | else return 0.13400703000801126;  // std dev = 9.13e-09, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else return -0.06419184008202626;  // std dev = 0.000, 151.000 (wgt'ed) examples reached here.  /* #neg=151 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.094637
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 7.229 seconds
Total inference time: 2.264 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.094637
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 2.465 seconds
Refined model CLL: -0.094637


******************************************
Best model found
******************************************
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.094637
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 17.679000000000002 seconds
Total inference time: 2.264 seconds
AUC ROC: 1.0
Total revision time: 17.679000000000002
Best scored revision CLL: -0.094637


Dataset: 4_cora_imdb, Fold: 3, Type: Transfer (trRDN-B), Time: 18:00:24
{'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.094637, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 17.679000000000002, 'Inference time': 2.264, 'parameter_1.0': {'AUC ROC': 0.976029, 'AUC PR': 0.976327, 'CLL': -0.317705, 'Precision': [1.0, 0.5], 'Recall': 0.724719, 'F1': 0.840391, 'Learning time': 5.246, 'Inference time': 2.471}}


Starting fold 4

Target train facts examples: 927
Target train pos examples: 337
Target train neg examples: 337

Target test facts examples: 151
Target test pos	 examples: 45
Target test neg examples: 45

Amount of data: 0.2
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;false;false
0;false;haswordvenue(A, I), haswordtitle(J, I).;true;false
0;false,true;haswordtitle(J, K), haswordauthor(L, K).;true;false
0;false,true,true;haswordauthor(L, I).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, A).;false;true
1;true,true,false;title(F, D), venue(F, B).;false;false
1;true,false;haswordvenue(A, G), haswordtitle(H, G).;false;false
1;false;haswordvenue(A, I), haswordtitle(J, I).;true;false
1;false,true;haswordtitle(J, K), haswordauthor(L, K).;true;false
1;false,true,true;haswordvenue(B, K).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;title(F, D), venue(F, B).;false;false
2;true,false;haswordvenue(A, G), haswordtitle(H, G).;false;false
2;false;haswordvenue(B, I), haswordtitle(J, I).;true;false
2;false,true;haswordtitle(J, K), haswordvenue(A, K).;true;false
2;false,true,true;haswordauthor(L, K).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;title(E, D), venue(E, A).;false;true
3;true,true,false;title(F, D), venue(F, B).;false;false
3;true,false;haswordvenue(A, G), haswordtitle(H, G).;false;false
3;false;haswordvenue(A, I), haswordtitle(J, I).;true;false
3;false,true;haswordtitle(J, K), haswordauthor(L, K).;true;false
3;false,true,true;haswordauthor(L, I).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, A).;false;true
4;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
4;true,false;haswordvenue(B, H), haswordtitle(I, H).;false;false
4;false;haswordvenue(B, J), haswordtitle(K, J).;true;false
4;false,true;haswordtitle(K, L), haswordauthor(M, L).;true;false
4;false,true,true;haswordvenue(A, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, A).;false;true
5;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
5;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;false
5;false;haswordvenue(A, J), haswordauthor(K, J).;false;true
5;false,false;haswordvenue(B, L), haswordtitle(M, L).;true;false
5;false,false,true;haswordtitle(M, N), haswordauthor(P, N).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;title(E, D), venue(E, B).;false;true
6;true,true,false;title(F, D), venue(F, A).;false;false
6;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
6;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
6;false;haswordvenue(A, K), haswordauthor(L, K).;false;true
6;false,false;haswordvenue(B, M), haswordtitle(N, M).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
7;true,false;haswordvenue(B, H), haswordtitle(I, H).;false;false
7;false;haswordvenue(A, J), haswordtitle(K, J).;true;false
7;false,true;haswordtitle(K, L), haswordauthor(M, L).;true;false
7;false,true,true;haswordvenue(B, L).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;title(E, D), venue(E, B).;false;true
8;true,true,false;title(F, D), venue(F, A).;false;false
8;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;false
8;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
8;false;haswordvenue(B, K), haswordauthor(L, K).;false;true
8;false,false;haswordvenue(A, M), haswordtitle(N, M).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, B).;false;true
9;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
9;true,false;haswordvenue(A, H), haswordauthor(I, H).;false;true
9;true,false,false;haswordvenue(A, J), haswordtitle(K, J).;false;false
9;false;haswordvenue(A, L), haswordauthor(M, L).;false;true
9;false,false;haswordvenue(B, N), haswordauthor(P, N).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14185106490048777;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995124;  // std dev = 0.000, 55.000 (wgt'ed) examples reached here.  /* #pos=55 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.42957750652808374;  // std dev = 2.268, 21.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=12 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.14185106490048766;  // std dev = 7.90e-09, 56.000 (wgt'ed) examples reached here.  /* #neg=56 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.12544463852839138;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else if ( genre(B, E) )
%   | | then return 0.7194734122109545;  // std dev = 0.000, 55.000 (wgt'ed) examples reached here.  /* #pos=55 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.36887697659770585;  // std dev = 2.268, 21.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=12 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then if ( movie(H, B) )
%   | | then return -0.12544463852839158;  // std dev = 0.000, 56.000 (wgt'ed) examples reached here.  /* #neg=56 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.11231637819360639;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else if ( genre(B, E) )
%   | | then return 0.5553664367462838;  // std dev = 1.03e-07, 55.000 (wgt'ed) examples reached here.  /* #pos=55 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.3027909085849407;  // std dev = 2.268, 21.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=12 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then if ( movie(H, A) )
%   | | then return -0.11231637819360629;  // std dev = 5.27e-09, 56.000 (wgt'ed) examples reached here.  /* #neg=56 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.10159632948783628;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else if ( genre(B, E) )
%   | | then return 0.4175135841583103;  // std dev = 0.000, 55.000 (wgt'ed) examples reached here.  /* #pos=55 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.23934016640989283;  // std dev = 2.268, 21.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=12 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.10159632948783623;  // std dev = 5.10e-09, 56.000 (wgt'ed) examples reached here.  /* #neg=56 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.09269127618926096;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else if ( movie(E, B) )
%   | | then return 0.28302015757697646;  // std dev = 2.329, 76.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=67 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, B) )
%   | then if ( movie(G, A) )
%   | | then return -0.09269127618926107;  // std dev = 0.000, 56.000 (wgt'ed) examples reached here.  /* #neg=56 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.08518475138839687;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else if ( movie(E, B) )
%   | | then return 0.2217864865738048;  // std dev = 2.339, 76.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=67 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.08518475138839679;  // std dev = 1.83e-08, 56.000 (wgt'ed) examples reached here.  /* #neg=56 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.22178247649781108;  // std dev = 0.000, 55.000 (wgt'ed) examples reached here.  /* #pos=55 */
%   | else if ( genre(A, E) )
%   | | then return -0.07877675473109173;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.060082468968805834;  // std dev = 2.268, 21.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=12 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.07877675473109176;  // std dev = 1.83e-08, 56.000 (wgt'ed) examples reached here.  /* #neg=56 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.1858671347174024;  // std dev = 2.98e-08, 55.000 (wgt'ed) examples reached here.  /* #pos=55 */
%   | else if ( movie(E, B) )
%   | | then return 0.03479470933355922;  // std dev = 2.273, 23.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=12 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then if ( movie(G, B) )
%   | | then return -0.07324622576333704;  // std dev = 7.45e-09, 56.000 (wgt'ed) examples reached here.  /* #neg=56 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.15936523661447743;  // std dev = 0.000, 55.000 (wgt'ed) examples reached here.  /* #pos=55 */
%   | else if ( genre(A, E) )
%   | | then return -0.07564348749264357;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.03641861067435158;  // std dev = 2.268, 21.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=12 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.06842697784420268;  // std dev = 1.67e-08, 56.000 (wgt'ed) examples reached here.  /* #neg=56 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.1391552617461578;  // std dev = 5.16e-08, 55.000 (wgt'ed) examples reached here.  /* #pos=55 */
%   | else if ( movie(E, A) )
%   | | then return 0.018858751420270888;  // std dev = 2.272, 23.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=12 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.06419184008202625;  // std dev = 0.000, 56.000 (wgt'ed) examples reached here.  /* #neg=56 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.178455
   Precision = 0.818182 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.9


Total learning time: 3.972 seconds
Total inference time: 1.562 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 0.987971
   AUC PR    = 0.988264
   CLL	      = -0.188367
   Precision = 0.881579 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.937063


Total scoring time: 2.029 seconds
Parameter learned model CLL: -0.188367


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 2, 0], 'true,false,true': [0.0, 0, 55], 'true,false,false,true': [2.268, 9, 12], 'true,false,false,false': [0.0, 0, 0], 'false,true': [7.9e-09, 56, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)', 'false,true': 'movie(H, B)'}, {'true,true': [0.0, 2, 0], 'true,false,true': [0.0, 0, 55], 'true,false,false,true': [2.268, 9, 12], 'true,false,false,false': [0.0, 0, 0], 'false,true,true': [0.0, 56, 0], 'false,true,false': [0.0, 0, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)', 'false,true': 'movie(H, A)'}, {'true,true': [0.0, 2, 0], 'true,false,true': [1.03e-07, 0, 55], 'true,false,false,true': [2.268, 9, 12], 'true,false,false,false': [0.0, 0, 0], 'false,true,true': [5.27e-09, 56, 0], 'false,true,false': [0.0, 0, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 2, 0], 'true,false,true': [0.0, 0, 55], 'true,false,false,true': [2.268, 9, 12], 'true,false,false,false': [0.0, 0, 0], 'false,true': [5.1e-09, 56, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, B)', 'false,true': 'movie(G, A)'}, {'true,true': [0.0, 2, 0], 'true,false,true': [2.329, 9, 67], 'true,false,false': [0.0, 0, 0], 'false,true,true': [0.0, 56, 0], 'false,true,false': [0.0, 0, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, A)'}, {'true,true': [0.0, 2, 0], 'true,false,true': [2.339, 9, 67], 'true,false,false': [0.0, 0, 0], 'false,true': [1.83e-08, 56, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 0, 55], 'true,false,true': [0.0, 2, 0], 'true,false,false,true': [2.268, 9, 12], 'true,false,false,false': [0.0, 0, 0], 'false,true': [1.83e-08, 56, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, A)', 'false,true': 'movie(G, B)'}, {'true,true': [2.98e-08, 0, 55], 'true,false,true': [2.273, 11, 12], 'true,false,false': [0.0, 0, 0], 'false,true,true': [7.45e-09, 56, 0], 'false,true,false': [0.0, 0, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 55], 'true,false,true': [0.0, 2, 0], 'true,false,false,true': [2.268, 9, 12], 'true,false,false,false': [0.0, 0, 0], 'false,true': [1.67e-08, 56, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [5.16e-08, 0, 55], 'true,false,true': [2.272, 11, 12], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 56, 0], 'false,false': [0.0, 0, 0]}]]
[{'': [0.12113740959894706, 5.947623346206196e-17], 'true': [0.0, 0.1043975069252067], 'true,false': [-1.291895883200182e-16, 0.24489795918367308], 'true,false,false': [0.24489795918367308, nan], 'false': [5.947623346206196e-17, nan]}, {'': [0.1038631434364508, -3.766828119263924e-17], 'true': [0.0, 0.09224848890666303], 'true,false': [-3.2297397080004555e-16, 0.24489795918367332], 'true,false,false': [0.24489795918367332, nan], 'false': [-3.766828119263924e-17, nan], 'false,true': [-3.766828119263924e-17, nan]}, {'': [0.08729464402049203, 2.7755575615628914e-17], 'true': [0.0, 0.08042584347024832], 'true,false': [1.9378438248002731e-16, 0.24489795918367327], 'true,false,false': [0.24489795918367327, nan], 'false': [2.7755575615628914e-17, nan], 'false,true': [2.7755575615628914e-17, nan]}, {'': [0.07763534881898253, 2.577303450022685e-17], 'true': [0.0, 0.07401722706060881], 'true,false': [-3.2297397080004555e-16, 0.24489795918367344], 'true,false,false': [0.24489795918367344, nan], 'false': [2.577303450022685e-17, nan]}, {'': [0.07308610331323538, -9.912705577010326e-19], 'true': [0.0, 0.07138995819423018], 'true,false': [0.07138995819423018, nan], 'false': [-9.912705577010326e-19, nan], 'false,true': [-9.912705577010326e-19, nan]}, {'': [0.0724979035219175, 5.9476233462061954e-18], 'true': [0.0, 0.07198955485915434], 'true,false': [0.07198955485915434, nan], 'false': [5.9476233462061954e-18, nan]}, {'': [0.07266425060747504, 5.9476233462061954e-18], 'true': [-4.844609562000683e-17, 0.2251333712929846], 'true,false': [0.0, 0.2448979591836734], 'true,false,false': [0.2448979591836734, nan], 'false': [5.9476233462061954e-18, nan]}, {'': [0.0710072626830886, 9.912705577010326e-19], 'true': [1.6148698540002276e-17, 0.22471418386791756], 'true,false': [0.22471418386791756, nan], 'false': [9.912705577010326e-19, nan], 'false,true': [9.912705577010326e-19, nan]}, {'': [0.06988894209201228, 4.956352788505163e-18], 'true': [-6.45947941600091e-17, 0.22459952111007378], 'true,false': [0.0, 0.2448979591836735], 'true,false,false': [0.2448979591836735, nan], 'false': [4.956352788505163e-18, nan]}, {'': [0.06916731255697578, -2.9738116731030977e-18], 'true': [4.844609562000683e-17, 0.22436332098381218], 'true,false': [0.22436332098381218, nan], 'false': [-2.9738116731030977e-18, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(A, D).;true;true
0;true,false;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;true;genre(A, D).;true;true
1;true,false;genre(B, E).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;true;genre(A, D).;true;true
2;true,false;genre(B, E).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;true;genre(A, D).;true;true
3;true,false;genre(B, E).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;true;genre(A, D).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;true;genre(A, D).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(B, D).;true;true
6;true,false;genre(A, E).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;true;genre(B, D).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;true;genre(B, D).;true;true
8;true,false;genre(A, E).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;true;genre(B, D).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14185106490048777;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995124;  // std dev = 0.000, 55.000 (wgt'ed) examples reached here.  /* #pos=55 */
%   | | else if ( actor(B) )
%   | | | then return -0.1418510649004878;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | | else return 0.8581489350995123;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   else return -0.14185106490048766;  // std dev = 5.77e-08, 56.000 (wgt'ed) examples reached here.  /* #neg=56 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.12544463852839138;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else if ( genre(B, E) )
%   | | then return 0.7194734122109545;  // std dev = 0.000, 55.000 (wgt'ed) examples reached here.  /* #pos=55 */
%   | | else if ( actor(B) )
%   | | | then return -0.12544463852839138;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | | else return 0.7194734122109542;  // std dev = 4.21e-08, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   else return -0.12544463852839158;  // std dev = 0.000, 56.000 (wgt'ed) examples reached here.  /* #neg=56 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.11231637819360639;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else if ( genre(B, E) )
%   | | then return 0.5553664367462838;  // std dev = 1.03e-07, 55.000 (wgt'ed) examples reached here.  /* #pos=55 */
%   | | else if ( actor(B) )
%   | | | then return -0.11231637819360639;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | | else return 0.5553664367462846;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   else return -0.11231637819360629;  // std dev = 3.94e-08, 56.000 (wgt'ed) examples reached here.  /* #neg=56 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.10159632948783628;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else if ( genre(B, E) )
%   | | then return 0.4175135841583103;  // std dev = 0.000, 55.000 (wgt'ed) examples reached here.  /* #pos=55 */
%   | | else if ( actor(B) )
%   | | | then return -0.10159632948783627;  // std dev = 5.27e-09, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | | else return 0.4175135841583098;  // std dev = 4.21e-08, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   else return -0.10159632948783623;  // std dev = 3.80e-08, 56.000 (wgt'ed) examples reached here.  /* #neg=56 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.09269127618926096;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else if ( director(B) )
%   | | then return 0.3207118471601499;  // std dev = 0.000, 67.000 (wgt'ed) examples reached here.  /* #pos=67 */
%   | | else return -0.09269127618926097;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   else return -0.09269127618926107;  // std dev = 0.000, 56.000 (wgt'ed) examples reached here.  /* #neg=56 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.08518475138839687;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else if ( director(B) )
%   | | then return 0.25517224256948967;  // std dev = 0.000, 67.000 (wgt'ed) examples reached here.  /* #pos=67 */
%   | | else return -0.08518475138839687;  // std dev = 3.73e-09, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   else return -0.08518475138839679;  // std dev = 1.83e-08, 56.000 (wgt'ed) examples reached here.  /* #neg=56 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.20975771563253562;  // std dev = 0.000, 55.000 (wgt'ed) examples reached here.  /* #pos=55 */
%   | else if ( genre(A, E) )
%   | | then return -0.07877675473109173;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | else if ( actor(B) )
%   | | | then return -0.07877675473109173;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | | else return 0.20975771563253562;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   else return -0.07877675473109176;  // std dev = 1.83e-08, 56.000 (wgt'ed) examples reached here.  /* #neg=56 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.17709649774527736;  // std dev = 0.000, 55.000 (wgt'ed) examples reached here.  /* #pos=55 */
%   | else if ( actor(B) )
%   | | then return -0.07324622576333704;  // std dev = 2.63e-09, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | else return 0.17709649774527736;  // std dev = 1.05e-08, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   else return -0.07324622576333704;  // std dev = 7.45e-09, 56.000 (wgt'ed) examples reached here.  /* #neg=56 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.1527438580936708;  // std dev = 0.000, 55.000 (wgt'ed) examples reached here.  /* #pos=55 */
%   | else if ( genre(A, E) )
%   | | then return -0.06842697784420272;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | else if ( actor(B) )
%   | | | then return -0.06842697784420272;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | | else return 0.15274385809367078;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   else return -0.06842697784420268;  // std dev = 1.67e-08, 56.000 (wgt'ed) examples reached here.  /* #neg=56 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.13400703000801079;  // std dev = 5.16e-08, 55.000 (wgt'ed) examples reached here.  /* #pos=55 */
%   | else if ( actor(B) )
%   | | then return -0.06419184008202619;  // std dev = 5.27e-09, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | else return 0.13400703000801095;  // std dev = 7.45e-09, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   else return -0.06419184008202625;  // std dev = 0.000, 56.000 (wgt'ed) examples reached here.  /* #neg=56 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.094637
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 5.213 seconds
Total inference time: 1.801 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.094637
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 2.021 seconds
Refined model CLL: -0.094637


******************************************
Best model found
******************************************
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.094637
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 13.235 seconds
Total inference time: 1.801 seconds
AUC ROC: 1.0
Total revision time: 13.235
Best scored revision CLL: -0.094637


Dataset: 4_cora_imdb, Fold: 4, Type: Transfer (trRDN-B), Time: 18:00:42
{'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.094637, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 13.235, 'Inference time': 1.801, 'parameter_0.2': {'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.178455, 'Precision': [0.818182, 0.5], 'Recall': 1.0, 'F1': 0.9, 'Learning time': 3.972, 'Inference time': 1.562}}


Amount of data: 0.4
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;false;false
0;false;haswordvenue(A, I), haswordtitle(J, I).;true;false
0;false,true;haswordtitle(J, K), haswordauthor(L, K).;true;false
0;false,true,true;haswordauthor(L, I).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, A).;false;true
1;true,true,false;title(F, D), venue(F, B).;false;false
1;true,false;haswordvenue(A, G), haswordtitle(H, G).;false;false
1;false;haswordvenue(A, I), haswordtitle(J, I).;true;false
1;false,true;haswordtitle(J, K), haswordauthor(L, K).;true;false
1;false,true,true;haswordvenue(B, K).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;title(F, D), venue(F, B).;false;false
2;true,false;haswordvenue(A, G), haswordtitle(H, G).;false;false
2;false;haswordvenue(B, I), haswordtitle(J, I).;true;false
2;false,true;haswordtitle(J, K), haswordvenue(A, K).;true;false
2;false,true,true;haswordauthor(L, K).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;title(E, D), venue(E, A).;false;true
3;true,true,false;title(F, D), venue(F, B).;false;false
3;true,false;haswordvenue(A, G), haswordtitle(H, G).;false;false
3;false;haswordvenue(A, I), haswordtitle(J, I).;true;false
3;false,true;haswordtitle(J, K), haswordauthor(L, K).;true;false
3;false,true,true;haswordauthor(L, I).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, A).;false;true
4;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
4;true,false;haswordvenue(B, H), haswordtitle(I, H).;false;false
4;false;haswordvenue(B, J), haswordtitle(K, J).;true;false
4;false,true;haswordtitle(K, L), haswordauthor(M, L).;true;false
4;false,true,true;haswordvenue(A, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, A).;false;true
5;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
5;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;false
5;false;haswordvenue(A, J), haswordauthor(K, J).;false;true
5;false,false;haswordvenue(B, L), haswordtitle(M, L).;true;false
5;false,false,true;haswordtitle(M, N), haswordauthor(P, N).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;title(E, D), venue(E, B).;false;true
6;true,true,false;title(F, D), venue(F, A).;false;false
6;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
6;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
6;false;haswordvenue(A, K), haswordauthor(L, K).;false;true
6;false,false;haswordvenue(B, M), haswordtitle(N, M).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
7;true,false;haswordvenue(B, H), haswordtitle(I, H).;false;false
7;false;haswordvenue(A, J), haswordtitle(K, J).;true;false
7;false,true;haswordtitle(K, L), haswordauthor(M, L).;true;false
7;false,true,true;haswordvenue(B, L).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;title(E, D), venue(E, B).;false;true
8;true,true,false;title(F, D), venue(F, A).;false;false
8;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;false
8;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
8;false;haswordvenue(B, K), haswordauthor(L, K).;false;true
8;false,false;haswordvenue(A, M), haswordtitle(N, M).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, B).;false;true
9;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
9;true,false;haswordvenue(A, H), haswordauthor(I, H).;false;true
9;true,false,false;haswordvenue(A, J), haswordtitle(K, J).;false;false
9;false;haswordvenue(A, L), haswordauthor(M, L).;false;true
9;false,false;haswordvenue(B, N), haswordauthor(P, N).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14185106490048777;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995107;  // std dev = 6.19e-07, 116.000 (wgt'ed) examples reached here.  /* #pos=116 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.2971733253434148;  // std dev = 3.178, 41.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=18 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.14185106490048763;  // std dev = 8.33e-09, 106.000 (wgt'ed) examples reached here.  /* #neg=106 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.12544463852839138;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else if ( genre(B, E) )
%   | | then return 0.7194734122109551;  // std dev = 0.000, 116.000 (wgt'ed) examples reached here.  /* #pos=116 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.25702007654150416;  // std dev = 3.178, 41.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=18 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then if ( movie(H, B) )
%   | | then return -0.12544463852839133;  // std dev = 0.000, 106.000 (wgt'ed) examples reached here.  /* #neg=106 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.11231637819360638;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else if ( genre(B, E) )
%   | | then return 0.5553664367462834;  // std dev = 4.54e-07, 116.000 (wgt'ed) examples reached here.  /* #pos=116 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.21559750946631662;  // std dev = 3.178, 41.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=18 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then if ( movie(H, A) )
%   | | then return -0.11231637819360618;  // std dev = 8.12e-09, 106.000 (wgt'ed) examples reached here.  /* #neg=106 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.10159632948783633;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else if ( genre(B, E) )
%   | | then return 0.4175135841583094;  // std dev = 3.32e-07, 116.000 (wgt'ed) examples reached here.  /* #pos=116 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.17598082026505293;  // std dev = 3.178, 41.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=18 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.10159632948783631;  // std dev = 0.000, 106.000 (wgt'ed) examples reached here.  /* #neg=106 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.09269127618926098;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else if ( movie(E, B) )
%   | | then return 0.2736443455485381;  // std dev = 3.329, 157.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=134 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, B) )
%   | then if ( movie(G, A) )
%   | | then return -0.09269127618926092;  // std dev = 5.87e-08, 106.000 (wgt'ed) examples reached here.  /* #neg=106 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.08518475138839687;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else if ( movie(E, B) )
%   | | then return 0.21617098830043455;  // std dev = 3.335, 157.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=134 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.08518475138839682;  // std dev = 5.87e-08, 106.000 (wgt'ed) examples reached here.  /* #neg=106 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.22438068992970991;  // std dev = 5.96e-08, 116.000 (wgt'ed) examples reached here.  /* #pos=116 */
%   | else if ( genre(A, E) )
%   | | then return -0.07877675473109177;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.029132650000306855;  // std dev = 3.178, 41.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=18 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.07877675473109158;  // std dev = 6.14e-08, 106.000 (wgt'ed) examples reached here.  /* #neg=106 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.18774977001666449;  // std dev = 0.000, 116.000 (wgt'ed) examples reached here.  /* #pos=116 */
%   | else if ( movie(E, B) )
%   | | then return 0.011707744035861433;  // std dev = 3.184, 46.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=18 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then if ( movie(G, B) )
%   | | then return -0.07324622576333707;  // std dev = 0.000, 106.000 (wgt'ed) examples reached here.  /* #neg=106 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.16077834794120704;  // std dev = 9.19e-08, 116.000 (wgt'ed) examples reached here.  /* #pos=116 */
%   | else if ( genre(A, E) )
%   | | then return -0.07404494319477663;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.019219050298736235;  // std dev = 3.178, 41.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=18 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.06842697784420265;  // std dev = 5.11e-08, 106.000 (wgt'ed) examples reached here.  /* #neg=106 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.1402486247863859;  // std dev = 0.000, 116.000 (wgt'ed) examples reached here.  /* #pos=116 */
%   | else if ( movie(E, A) )
%   | | then return 0.00543771389429897;  // std dev = 3.183, 46.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=18 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.06419184008202626;  // std dev = 0.000, 106.000 (wgt'ed) examples reached here.  /* #neg=106 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.152186
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 4.488 seconds
Total inference time: 1.911 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 0.988472
   AUC PR    = 0.989174
   CLL	      = -0.188347
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.865672
   F1        = 0.928


Total scoring time: 2.122 seconds
Parameter learned model CLL: -0.188347


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 5, 0], 'true,false,true': [6.19e-07, 0, 116], 'true,false,false,true': [3.178, 23, 18], 'true,false,false,false': [0.0, 0, 0], 'false,true': [8.33e-09, 106, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)', 'false,true': 'movie(H, B)'}, {'true,true': [0.0, 5, 0], 'true,false,true': [0.0, 0, 116], 'true,false,false,true': [3.178, 23, 18], 'true,false,false,false': [0.0, 0, 0], 'false,true,true': [0.0, 106, 0], 'false,true,false': [0.0, 0, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)', 'false,true': 'movie(H, A)'}, {'true,true': [0.0, 5, 0], 'true,false,true': [4.54e-07, 0, 116], 'true,false,false,true': [3.178, 23, 18], 'true,false,false,false': [0.0, 0, 0], 'false,true,true': [8.12e-09, 106, 0], 'false,true,false': [0.0, 0, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 5, 0], 'true,false,true': [3.32e-07, 0, 116], 'true,false,false,true': [3.178, 23, 18], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 106, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, B)', 'false,true': 'movie(G, A)'}, {'true,true': [0.0, 5, 0], 'true,false,true': [3.329, 23, 134], 'true,false,false': [0.0, 0, 0], 'false,true,true': [5.87e-08, 106, 0], 'false,true,false': [0.0, 0, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, A)'}, {'true,true': [0.0, 5, 0], 'true,false,true': [3.335, 23, 134], 'true,false,false': [0.0, 0, 0], 'false,true': [5.87e-08, 106, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [5.96e-08, 0, 116], 'true,false,true': [0.0, 5, 0], 'true,false,false,true': [3.178, 23, 18], 'true,false,false,false': [0.0, 0, 0], 'false,true': [6.14e-08, 106, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, A)', 'false,true': 'movie(G, B)'}, {'true,true': [0.0, 0, 116], 'true,false,true': [3.184, 28, 18], 'true,false,false': [0.0, 0, 0], 'false,true,true': [0.0, 106, 0], 'false,true,false': [0.0, 0, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [9.19e-08, 0, 116], 'true,false,true': [0.0, 5, 0], 'true,false,false,true': [3.178, 23, 18], 'true,false,false,false': [0.0, 0, 0], 'false,true': [5.11e-08, 106, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.0, 0, 116], 'true,false,true': [3.183, 28, 18], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 106, 0], 'false,false': [0.0, 0, 0]}]]
[{'': [0.14296601127877331, 6.70323335622736e-17], 'true': [-2.7755575615628915e-18, 0.12503549839750572], 'true,false': [3.3076989423315008e-15, 0.2462819750148716], 'true,false,false': [0.2462819750148716, nan], 'false': [6.70323335622736e-17, nan]}, {'': [0.1180071310848832, -8.3790416952842e-18], 'true': [0.0, 0.10558034476602539], 'true,false': [-1.1025663141105003e-15, 0.2462819750148721], 'true,false,false': [0.2462819750148721, nan], 'false': [-8.3790416952842e-18, nan], 'false,true': [-8.3790416952842e-18, nan]}, {'': [0.09394371145618408, 6.70323335622736e-17], 'true': [0.0, 0.08659027219980849], 'true,false': [1.7763568394002505e-15, 0.24628197501487206], 'true,false,false': [0.24628197501487206, nan], 'false': [6.70323335622736e-17, nan], 'false,true': [6.70323335622736e-17, nan]}, {'': [0.07946011992333218, 0.0], 'true': [0.0, 0.07557194867086123], 'true,false': [9.494321038173752e-16, 0.24628197501487192], 'true,false,false': [0.24628197501487192, nan], 'false': [0.0, nan]}, {'': [0.07241918083728537, 3.2468786569226275e-17], 'true': [0.0, 0.07058349368981721], 'true,false': [0.07058349368981721, nan], 'false': [3.2468786569226275e-17, nan], 'false,true': [3.2468786569226275e-17, nan]}, {'': [0.07137752387595439, 3.2468786569226275e-17], 'true': [0.0, 0.07084775262850813], 'true,false': [0.07084775262850813, nan], 'false': [3.2468786569226275e-17, nan]}, {'': [0.07136121887629943, 3.561092720495785e-17], 'true': [3.062684205862501e-17, 0.22064031899909894], 'true,false': [-1.3877787807814458e-18, 0.2462819750148722], 'true,false,false': [0.2462819750148722, nan], 'false': [3.561092720495785e-17, nan]}, {'': [0.06888167159414806, -3.142140635731575e-18], 'true': [-8.422381566121877e-17, 0.2203923386566637], 'true,false': [0.2203923386566637, nan], 'false': [-3.142140635731575e-18, nan], 'false,true': [-3.142140635731575e-18, nan]}, {'': [0.06724874256777992, 2.461343497989734e-17], 'true': [7.273874988923439e-17, 0.22035488196452366], 'true,false': [0.0, 0.24628197501487206], 'true,false,false': [0.24628197501487206, nan], 'false': [2.461343497989734e-17, nan]}, {'': [0.06621832751719836, -1.6234393284613138e-17], 'true': [-4.2111907830609384e-17, 0.22019020679466966], 'true,false': [0.22019020679466966, nan], 'false': [-1.6234393284613138e-17, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(A, D).;true;true
0;true,false;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;true;genre(A, D).;true;true
1;true,false;genre(B, E).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;true;genre(A, D).;true;true
2;true,false;genre(B, E).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;true;genre(A, D).;true;true
3;true,false;genre(B, E).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;true;genre(A, D).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;true;genre(A, D).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(B, D).;true;true
6;true,false;genre(A, E).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;true;genre(B, D).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;true;genre(B, D).;true;true
8;true,false;genre(A, E).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;true;genre(B, D).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14185106490048777;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995107;  // std dev = 6.19e-07, 116.000 (wgt'ed) examples reached here.  /* #pos=116 */
%   | | else if ( actor(B) )
%   | | | then return -0.14185106490048774;  // std dev = 1.49e-08, 23.000 (wgt'ed) examples reached here.  /* #neg=23 */
%   | | | else return 0.8581489350995123;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   else return -0.14185106490048763;  // std dev = 8.43e-08, 106.000 (wgt'ed) examples reached here.  /* #neg=106 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.12544463852839138;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else if ( genre(B, E) )
%   | | then return 0.7194734122109551;  // std dev = 0.000, 116.000 (wgt'ed) examples reached here.  /* #pos=116 */
%   | | else if ( actor(B) )
%   | | | then return -0.12544463852839138;  // std dev = 0.000, 23.000 (wgt'ed) examples reached here.  /* #neg=23 */
%   | | | else return 0.7194734122109542;  // std dev = 7.30e-08, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   else return -0.12544463852839133;  // std dev = 0.000, 106.000 (wgt'ed) examples reached here.  /* #neg=106 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.11231637819360638;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else if ( genre(B, E) )
%   | | then return 0.5553664367462834;  // std dev = 4.54e-07, 116.000 (wgt'ed) examples reached here.  /* #pos=116 */
%   | | else if ( actor(B) )
%   | | | then return -0.11231637819360638;  // std dev = 1.05e-08, 23.000 (wgt'ed) examples reached here.  /* #neg=23 */
%   | | | else return 0.5553664367462846;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   else return -0.11231637819360618;  // std dev = 8.43e-08, 106.000 (wgt'ed) examples reached here.  /* #neg=106 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.10159632948783633;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else if ( genre(B, E) )
%   | | then return 0.4175135841583094;  // std dev = 3.32e-07, 116.000 (wgt'ed) examples reached here.  /* #pos=116 */
%   | | else if ( actor(B) )
%   | | | then return -0.10159632948783635;  // std dev = 0.000, 23.000 (wgt'ed) examples reached here.  /* #neg=23 */
%   | | | else return 0.4175135841583098;  // std dev = 5.58e-08, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   else return -0.10159632948783631;  // std dev = 0.000, 106.000 (wgt'ed) examples reached here.  /* #neg=106 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.09269127618926098;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else if ( director(B) )
%   | | then return 0.32071184716014967;  // std dev = 2.53e-07, 134.000 (wgt'ed) examples reached here.  /* #pos=134 */
%   | | else return -0.09269127618926094;  // std dev = 1.18e-08, 23.000 (wgt'ed) examples reached here.  /* #neg=23 */
%   else return -0.09269127618926092;  // std dev = 5.87e-08, 106.000 (wgt'ed) examples reached here.  /* #neg=106 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.08518475138839687;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else if ( director(B) )
%   | | then return 0.2551722425694895;  // std dev = 1.33e-07, 134.000 (wgt'ed) examples reached here.  /* #pos=134 */
%   | | else return -0.08518475138839682;  // std dev = 1.58e-08, 23.000 (wgt'ed) examples reached here.  /* #neg=23 */
%   else return -0.08518475138839682;  // std dev = 5.87e-08, 106.000 (wgt'ed) examples reached here.  /* #neg=106 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.20975771563253548;  // std dev = 1.79e-07, 116.000 (wgt'ed) examples reached here.  /* #pos=116 */
%   | else if ( genre(A, E) )
%   | | then return -0.07877675473109177;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( actor(B) )
%   | | | then return -0.07877675473109176;  // std dev = 0.000, 23.000 (wgt'ed) examples reached here.  /* #neg=23 */
%   | | | else return 0.20975771563253562;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   else return -0.07877675473109158;  // std dev = 6.14e-08, 106.000 (wgt'ed) examples reached here.  /* #neg=106 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.1770964977452781;  // std dev = 0.000, 116.000 (wgt'ed) examples reached here.  /* #pos=116 */
%   | else if ( actor(B) )
%   | | then return -0.07324622576333704;  // std dev = 5.27e-09, 28.000 (wgt'ed) examples reached here.  /* #neg=28 */
%   | | else return 0.17709649774527744;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   else return -0.07324622576333707;  // std dev = 0.000, 106.000 (wgt'ed) examples reached here.  /* #neg=106 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.1527438580936714;  // std dev = 0.000, 116.000 (wgt'ed) examples reached here.  /* #pos=116 */
%   | else if ( genre(A, E) )
%   | | then return -0.06842697784420272;  // std dev = 1.86e-09, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( actor(B) )
%   | | | then return -0.06842697784420275;  // std dev = 0.000, 23.000 (wgt'ed) examples reached here.  /* #neg=23 */
%   | | | else return 0.1527438580936708;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   else return -0.06842697784420265;  // std dev = 5.11e-08, 106.000 (wgt'ed) examples reached here.  /* #neg=106 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.1340070300080111;  // std dev = 5.16e-08, 116.000 (wgt'ed) examples reached here.  /* #pos=116 */
%   | else if ( actor(B) )
%   | | then return -0.06419184008202622;  // std dev = 0.000, 28.000 (wgt'ed) examples reached here.  /* #neg=28 */
%   | | else return 0.13400703000801117;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   else return -0.06419184008202626;  // std dev = 0.000, 106.000 (wgt'ed) examples reached here.  /* #neg=106 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.094637
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 5.935 seconds
Total inference time: 1.582 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.094637
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 2.003 seconds
Refined model CLL: -0.094637


******************************************
Best model found
******************************************
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.094637
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 14.548 seconds
Total inference time: 1.582 seconds
AUC ROC: 1.0
Total revision time: 14.548
Best scored revision CLL: -0.094637


Dataset: 4_cora_imdb, Fold: 4, Type: Transfer (trRDN-B), Time: 18:01:02
{'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.094637, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 14.548, 'Inference time': 1.582, 'parameter_0.4': {'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.152186, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 4.488, 'Inference time': 1.911}}


Amount of data: 0.6
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;false;false
0;false;haswordvenue(A, I), haswordtitle(J, I).;true;false
0;false,true;haswordtitle(J, K), haswordauthor(L, K).;true;false
0;false,true,true;haswordauthor(L, I).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, A).;false;true
1;true,true,false;title(F, D), venue(F, B).;false;false
1;true,false;haswordvenue(A, G), haswordtitle(H, G).;false;false
1;false;haswordvenue(A, I), haswordtitle(J, I).;true;false
1;false,true;haswordtitle(J, K), haswordauthor(L, K).;true;false
1;false,true,true;haswordvenue(B, K).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;title(F, D), venue(F, B).;false;false
2;true,false;haswordvenue(A, G), haswordtitle(H, G).;false;false
2;false;haswordvenue(B, I), haswordtitle(J, I).;true;false
2;false,true;haswordtitle(J, K), haswordvenue(A, K).;true;false
2;false,true,true;haswordauthor(L, K).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;title(E, D), venue(E, A).;false;true
3;true,true,false;title(F, D), venue(F, B).;false;false
3;true,false;haswordvenue(A, G), haswordtitle(H, G).;false;false
3;false;haswordvenue(A, I), haswordtitle(J, I).;true;false
3;false,true;haswordtitle(J, K), haswordauthor(L, K).;true;false
3;false,true,true;haswordauthor(L, I).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, A).;false;true
4;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
4;true,false;haswordvenue(B, H), haswordtitle(I, H).;false;false
4;false;haswordvenue(B, J), haswordtitle(K, J).;true;false
4;false,true;haswordtitle(K, L), haswordauthor(M, L).;true;false
4;false,true,true;haswordvenue(A, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, A).;false;true
5;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
5;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;false
5;false;haswordvenue(A, J), haswordauthor(K, J).;false;true
5;false,false;haswordvenue(B, L), haswordtitle(M, L).;true;false
5;false,false,true;haswordtitle(M, N), haswordauthor(P, N).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;title(E, D), venue(E, B).;false;true
6;true,true,false;title(F, D), venue(F, A).;false;false
6;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
6;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
6;false;haswordvenue(A, K), haswordauthor(L, K).;false;true
6;false,false;haswordvenue(B, M), haswordtitle(N, M).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
7;true,false;haswordvenue(B, H), haswordtitle(I, H).;false;false
7;false;haswordvenue(A, J), haswordtitle(K, J).;true;false
7;false,true;haswordtitle(K, L), haswordauthor(M, L).;true;false
7;false,true,true;haswordvenue(B, L).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;title(E, D), venue(E, B).;false;true
8;true,true,false;title(F, D), venue(F, A).;false;false
8;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;false
8;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
8;false;haswordvenue(B, K), haswordauthor(L, K).;false;true
8;false,false;haswordvenue(A, M), haswordtitle(N, M).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, B).;false;true
9;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
9;true,false;haswordvenue(A, H), haswordauthor(I, H).;false;true
9;true,false,false;haswordvenue(A, J), haswordtitle(K, J).;false;false
9;false;haswordvenue(A, L), haswordauthor(M, L).;false;true
9;false,false;haswordvenue(B, N), haswordauthor(P, N).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14185106490048777;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995095;  // std dev = 1.09e-06, 173.000 (wgt'ed) examples reached here.  /* #pos=173 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.2975428744934505;  // std dev = 4.032, 66.000 (wgt'ed) examples reached here.  /* #neg=37 #pos=29 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.14185106490048816;  // std dev = 0.000, 160.000 (wgt'ed) examples reached here.  /* #neg=160 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.12544463852839138;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else if ( genre(B, E) )
%   | | then return 0.7194734122109566;  // std dev = 0.000, 173.000 (wgt'ed) examples reached here.  /* #pos=173 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.25733460121284546;  // std dev = 4.032, 66.000 (wgt'ed) examples reached here.  /* #neg=37 #pos=29 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then if ( movie(H, B) )
%   | | then return -0.12544463852839138;  // std dev = 2.98e-08, 160.000 (wgt'ed) examples reached here.  /* #neg=160 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.11231637819360638;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else if ( genre(B, E) )
%   | | then return 0.5553664367462833;  // std dev = 5.72e-07, 173.000 (wgt'ed) examples reached here.  /* #pos=173 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.21584834435226868;  // std dev = 4.032, 66.000 (wgt'ed) examples reached here.  /* #neg=37 #pos=29 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then if ( movie(H, A) )
%   | | then return -0.11231637819360633;  // std dev = 6.04e-09, 160.000 (wgt'ed) examples reached here.  /* #neg=160 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.10159632948783633;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else if ( genre(B, E) )
%   | | then return 0.4175135841583094;  // std dev = 4.00e-07, 173.000 (wgt'ed) examples reached here.  /* #pos=173 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.17616909567447614;  // std dev = 4.032, 66.000 (wgt'ed) examples reached here.  /* #neg=37 #pos=29 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.10159632948783648;  // std dev = 0.000, 160.000 (wgt'ed) examples reached here.  /* #neg=160 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.09269127618926098;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else if ( movie(E, B) )
%   | | then return 0.27097717189098824;  // std dev = 4.220, 239.000 (wgt'ed) examples reached here.  /* #neg=37 #pos=202 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, B) )
%   | then if ( movie(G, A) )
%   | | then return -0.09269127618926067;  // std dev = 7.88e-08, 160.000 (wgt'ed) examples reached here.  /* #neg=160 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.08518475138839687;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else if ( movie(E, B) )
%   | | then return 0.21398600208620042;  // std dev = 4.227, 239.000 (wgt'ed) examples reached here.  /* #neg=37 #pos=202 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.08518475138839678;  // std dev = 6.66e-08, 160.000 (wgt'ed) examples reached here.  /* #neg=160 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.22522625986412229;  // std dev = 0.000, 173.000 (wgt'ed) examples reached here.  /* #pos=173 */
%   | else if ( genre(A, E) )
%   | | then return -0.07877675473109177;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.030403861662332197;  // std dev = 4.032, 66.000 (wgt'ed) examples reached here.  /* #neg=37 #pos=29 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.0787767547310915;  // std dev = 8.56e-08, 160.000 (wgt'ed) examples reached here.  /* #neg=160 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.1883615386963618;  // std dev = 0.000, 173.000 (wgt'ed) examples reached here.  /* #pos=173 */
%   | else if ( movie(E, B) )
%   | | then return 0.016254541704622483;  // std dev = 4.037, 71.000 (wgt'ed) examples reached here.  /* #neg=42 #pos=29 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then if ( movie(G, B) )
%   | | then return -0.07324622576333677;  // std dev = 9.13e-08, 160.000 (wgt'ed) examples reached here.  /* #neg=160 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.16123693432724523;  // std dev = 0.000, 173.000 (wgt'ed) examples reached here.  /* #pos=173 */
%   | else if ( genre(A, E) )
%   | | then return -0.07435728644010384;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.019079690941070985;  // std dev = 4.032, 66.000 (wgt'ed) examples reached here.  /* #neg=37 #pos=29 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.06842697784420262;  // std dev = 7.07e-08, 160.000 (wgt'ed) examples reached here.  /* #neg=160 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.14060304702510695;  // std dev = 4.71e-08, 173.000 (wgt'ed) examples reached here.  /* #pos=173 */
%   | else if ( movie(E, A) )
%   | | then return 0.008520982869110943;  // std dev = 4.036, 71.000 (wgt'ed) examples reached here.  /* #neg=42 #pos=29 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.06419184008202626;  // std dev = 0.000, 160.000 (wgt'ed) examples reached here.  /* #neg=160 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.152585
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 6.267 seconds
Total inference time: 1.75 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 0.986852
   AUC PR    = 0.987696
   CLL	      = -0.194588
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.856436
   F1        = 0.922667


Total scoring time: 2.336 seconds
Parameter learned model CLL: -0.194588


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 5, 0], 'true,false,true': [1.09e-06, 0, 173], 'true,false,false,true': [4.032, 37, 29], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 160, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)', 'false,true': 'movie(H, B)'}, {'true,true': [0.0, 5, 0], 'true,false,true': [0.0, 0, 173], 'true,false,false,true': [4.032, 37, 29], 'true,false,false,false': [0.0, 0, 0], 'false,true,true': [2.98e-08, 160, 0], 'false,true,false': [0.0, 0, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)', 'false,true': 'movie(H, A)'}, {'true,true': [0.0, 5, 0], 'true,false,true': [5.72e-07, 0, 173], 'true,false,false,true': [4.032, 37, 29], 'true,false,false,false': [0.0, 0, 0], 'false,true,true': [6.04e-09, 160, 0], 'false,true,false': [0.0, 0, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 5, 0], 'true,false,true': [4e-07, 0, 173], 'true,false,false,true': [4.032, 37, 29], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 160, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, B)', 'false,true': 'movie(G, A)'}, {'true,true': [0.0, 5, 0], 'true,false,true': [4.22, 37, 202], 'true,false,false': [0.0, 0, 0], 'false,true,true': [7.88e-08, 160, 0], 'false,true,false': [0.0, 0, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, A)'}, {'true,true': [0.0, 5, 0], 'true,false,true': [4.227, 37, 202], 'true,false,false': [0.0, 0, 0], 'false,true': [6.66e-08, 160, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 0, 173], 'true,false,true': [0.0, 5, 0], 'true,false,false,true': [4.032, 37, 29], 'true,false,false,false': [0.0, 0, 0], 'false,true': [8.56e-08, 160, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, A)', 'false,true': 'movie(G, B)'}, {'true,true': [0.0, 0, 173], 'true,false,true': [4.037, 42, 29], 'true,false,false': [0.0, 0, 0], 'false,true,true': [9.13e-08, 160, 0], 'false,true,false': [0.0, 0, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 173], 'true,false,true': [0.0, 5, 0], 'true,false,false,true': [4.032, 37, 29], 'true,false,false,false': [0.0, 0, 0], 'false,true': [7.07e-08, 160, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [4.71e-08, 0, 173], 'true,false,true': [4.036, 42, 29], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 160, 0], 'false,false': [0.0, 0, 0]}]]
[{'': [0.14250201558721304, -1.4432899320127036e-16], 'true': [-2.7755575615628915e-18, 0.13084504823095375], 'true,false': [6.8179245165420015e-15, 0.24632690541781596], 'true,false,false': [0.24632690541781596, nan], 'false': [-1.4432899320127036e-16, nan]}, {'': [0.11877318262357173, 5.551115123125783e-18], 'true': [0.0, 0.11071460419639617], 'true,false': [-3.121459417212001e-15, 0.24632690541781493], 'true,false,false': [0.24632690541781493, nan], 'false': [5.551115123125783e-18, nan], 'false,true': [5.551115123125783e-18, nan]}, {'': [0.09581070232412095, 3.608224830031759e-17], 'true': [0.0, 0.09106532468634225], 'true,false': [1.8893043841020003e-15, 0.24632690541781424], 'true,false,false': [0.24632690541781424, nan], 'false': [3.608224830031759e-17, nan], 'false,true': [3.608224830031759e-17, nan]}, {'': [0.08214309399245305, -6.661338147750939e-17], 'true': [0.0, 0.07966643971856448], 'true,false': [9.241162748325002e-16, 0.2463269054178151], 'true,false,false': [0.2463269054178151, nan], 'false': [-6.661338147750939e-17, nan]}, {'': [0.07563481689100966, 3.8857805861880476e-17], 'true': [0.0, 0.07450699711861034], 'true,false': [0.07450699711861034, nan], 'false': [3.8857805861880476e-17, nan], 'false,true': [3.8857805861880476e-17, nan]}, {'': [0.0750395200531225, 2.7755575615628914e-17], 'true': [0.0, 0.07477530375711475], 'true,false': [0.07477530375711475, nan], 'false': [2.7755575615628914e-17, nan]}, {'': [0.07531749849490371, 4.5796699765787705e-17], 'true': [-5.133979304625001e-17, 0.22976028825561923], 'true,false': [-1.3877787807814458e-18, 0.24632690541781493], 'true,false,false': [0.24632690541781493, nan], 'false': [4.5796699765787705e-17, nan]}, {'': [0.07291712617587526, 5.204170427930421e-17], 'true': [-2.618329445358751e-16, 0.22958678777613353], 'true,false': [0.22958678777613353, nan], 'false': [5.204170427930421e-17, nan], 'false,true': [5.204170427930421e-17, nan]}, {'': [0.07135991298957331, 3.122502256758253e-17], 'true': [-1.6942131705262503e-16, 0.22955146468414617], 'true,false': [-6.938893903907229e-19, 0.2463269054178143], 'true,false,false': [0.2463269054178143, nan], 'false': [3.122502256758253e-17, nan]}, {'': [0.07036250350284647, -8.326672684688674e-18], 'true': [1.2834948261562503e-17, 0.2294398997576694], 'true,false': [0.2294398997576694, nan], 'false': [-8.326672684688674e-18, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(A, D).;true;true
0;true,false;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;true;genre(A, D).;true;true
1;true,false;genre(B, E).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;true;genre(A, D).;true;true
2;true,false;genre(B, E).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;true;genre(A, D).;true;true
3;true,false;genre(B, E).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;true;genre(A, D).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;true;genre(A, D).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(B, D).;true;true
6;true,false;genre(A, E).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;true;genre(B, D).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;true;genre(B, D).;true;true
8;true,false;genre(A, E).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;true;genre(B, D).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14185106490048777;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995095;  // std dev = 1.09e-06, 173.000 (wgt'ed) examples reached here.  /* #pos=173 */
%   | | else if ( actor(B) )
%   | | | then return -0.14185106490048768;  // std dev = 3.80e-08, 37.000 (wgt'ed) examples reached here.  /* #neg=37 */
%   | | | else return 0.8581489350995117;  // std dev = 1.79e-07, 29.000 (wgt'ed) examples reached here.  /* #pos=29 */
%   else return -0.14185106490048816;  // std dev = 0.000, 160.000 (wgt'ed) examples reached here.  /* #neg=160 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.12544463852839138;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else if ( genre(B, E) )
%   | | then return 0.7194734122109566;  // std dev = 0.000, 173.000 (wgt'ed) examples reached here.  /* #pos=173 */
%   | | else if ( actor(B) )
%   | | | then return -0.12544463852839147;  // std dev = 0.000, 37.000 (wgt'ed) examples reached here.  /* #neg=37 */
%   | | | else return 0.7194734122109546;  // std dev = 0.000, 29.000 (wgt'ed) examples reached here.  /* #pos=29 */
%   else return -0.12544463852839138;  // std dev = 2.98e-08, 160.000 (wgt'ed) examples reached here.  /* #neg=160 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.11231637819360638;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else if ( genre(B, E) )
%   | | then return 0.5553664367462833;  // std dev = 5.72e-07, 173.000 (wgt'ed) examples reached here.  /* #pos=173 */
%   | | else if ( actor(B) )
%   | | | then return -0.1123163781936064;  // std dev = 0.000, 37.000 (wgt'ed) examples reached here.  /* #neg=37 */
%   | | | else return 0.5553664367462846;  // std dev = 0.000, 29.000 (wgt'ed) examples reached here.  /* #pos=29 */
%   else return -0.11231637819360633;  // std dev = 7.60e-08, 160.000 (wgt'ed) examples reached here.  /* #neg=160 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.10159632948783633;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else if ( genre(B, E) )
%   | | then return 0.4175135841583094;  // std dev = 4.00e-07, 173.000 (wgt'ed) examples reached here.  /* #pos=173 */
%   | | else if ( actor(B) )
%   | | | then return -0.10159632948783634;  // std dev = 0.000, 37.000 (wgt'ed) examples reached here.  /* #neg=37 */
%   | | | else return 0.4175135841583101;  // std dev = 0.000, 29.000 (wgt'ed) examples reached here.  /* #pos=29 */
%   else return -0.10159632948783648;  // std dev = 0.000, 160.000 (wgt'ed) examples reached here.  /* #neg=160 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.09269127618926098;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else if ( director(B) )
%   | | then return 0.32071184716014906;  // std dev = 4.38e-07, 202.000 (wgt'ed) examples reached here.  /* #pos=202 */
%   | | else return -0.092691276189261;  // std dev = 0.000, 37.000 (wgt'ed) examples reached here.  /* #neg=37 */
%   else return -0.09269127618926067;  // std dev = 7.88e-08, 160.000 (wgt'ed) examples reached here.  /* #neg=160 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.08518475138839687;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else if ( director(B) )
%   | | then return 0.2551722425694907;  // std dev = 0.000, 202.000 (wgt'ed) examples reached here.  /* #pos=202 */
%   | | else return -0.0851847513883968;  // std dev = 2.24e-08, 37.000 (wgt'ed) examples reached here.  /* #neg=37 */
%   else return -0.08518475138839678;  // std dev = 6.66e-08, 160.000 (wgt'ed) examples reached here.  /* #neg=160 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.2097577156325351;  // std dev = 2.81e-07, 173.000 (wgt'ed) examples reached here.  /* #pos=173 */
%   | else if ( genre(A, E) )
%   | | then return -0.07877675473109177;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( actor(B) )
%   | | | then return -0.07877675473109179;  // std dev = 5.27e-09, 37.000 (wgt'ed) examples reached here.  /* #neg=37 */
%   | | | else return 0.20975771563253548;  // std dev = 3.33e-08, 29.000 (wgt'ed) examples reached here.  /* #pos=29 */
%   else return -0.0787767547310915;  // std dev = 8.56e-08, 160.000 (wgt'ed) examples reached here.  /* #neg=160 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.17709649774527822;  // std dev = 0.000, 173.000 (wgt'ed) examples reached here.  /* #pos=173 */
%   | else if ( actor(B) )
%   | | then return -0.07324622576333704;  // std dev = 1.18e-08, 42.000 (wgt'ed) examples reached here.  /* #neg=42 */
%   | | else return 0.17709649774527705;  // std dev = 2.11e-08, 29.000 (wgt'ed) examples reached here.  /* #pos=29 */
%   else return -0.07324622576333677;  // std dev = 9.13e-08, 160.000 (wgt'ed) examples reached here.  /* #neg=160 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.1527438580936715;  // std dev = 0.000, 173.000 (wgt'ed) examples reached here.  /* #pos=173 */
%   | else if ( genre(A, E) )
%   | | then return -0.06842697784420272;  // std dev = 1.86e-09, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( actor(B) )
%   | | | then return -0.06842697784420274;  // std dev = 0.000, 37.000 (wgt'ed) examples reached here.  /* #neg=37 */
%   | | | else return 0.15274385809367083;  // std dev = 0.000, 29.000 (wgt'ed) examples reached here.  /* #pos=29 */
%   else return -0.06842697784420262;  // std dev = 7.07e-08, 160.000 (wgt'ed) examples reached here.  /* #neg=160 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.13400703000801098;  // std dev = 7.88e-08, 173.000 (wgt'ed) examples reached here.  /* #pos=173 */
%   | else if ( actor(B) )
%   | | then return -0.06419184008202625;  // std dev = 0.000, 42.000 (wgt'ed) examples reached here.  /* #neg=42 */
%   | | else return 0.13400703000801084;  // std dev = 2.98e-08, 29.000 (wgt'ed) examples reached here.  /* #pos=29 */
%   else return -0.06419184008202626;  // std dev = 0.000, 160.000 (wgt'ed) examples reached here.  /* #neg=160 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.094637
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 6.98 seconds
Total inference time: 1.527 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.094637
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 2.49 seconds
Refined model CLL: -0.094637


******************************************
Best model found
******************************************
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.094637
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 18.073 seconds
Total inference time: 1.527 seconds
AUC ROC: 1.0
Total revision time: 18.073
Best scored revision CLL: -0.094637


Dataset: 4_cora_imdb, Fold: 4, Type: Transfer (trRDN-B), Time: 18:01:24
{'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.094637, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 18.073, 'Inference time': 1.527, 'parameter_0.6': {'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.152585, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 6.267, 'Inference time': 1.75}}


Amount of data: 0.8
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;false;false
0;false;haswordvenue(A, I), haswordtitle(J, I).;true;false
0;false,true;haswordtitle(J, K), haswordauthor(L, K).;true;false
0;false,true,true;haswordauthor(L, I).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, A).;false;true
1;true,true,false;title(F, D), venue(F, B).;false;false
1;true,false;haswordvenue(A, G), haswordtitle(H, G).;false;false
1;false;haswordvenue(A, I), haswordtitle(J, I).;true;false
1;false,true;haswordtitle(J, K), haswordauthor(L, K).;true;false
1;false,true,true;haswordvenue(B, K).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;title(F, D), venue(F, B).;false;false
2;true,false;haswordvenue(A, G), haswordtitle(H, G).;false;false
2;false;haswordvenue(B, I), haswordtitle(J, I).;true;false
2;false,true;haswordtitle(J, K), haswordvenue(A, K).;true;false
2;false,true,true;haswordauthor(L, K).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;title(E, D), venue(E, A).;false;true
3;true,true,false;title(F, D), venue(F, B).;false;false
3;true,false;haswordvenue(A, G), haswordtitle(H, G).;false;false
3;false;haswordvenue(A, I), haswordtitle(J, I).;true;false
3;false,true;haswordtitle(J, K), haswordauthor(L, K).;true;false
3;false,true,true;haswordauthor(L, I).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, A).;false;true
4;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
4;true,false;haswordvenue(B, H), haswordtitle(I, H).;false;false
4;false;haswordvenue(B, J), haswordtitle(K, J).;true;false
4;false,true;haswordtitle(K, L), haswordauthor(M, L).;true;false
4;false,true,true;haswordvenue(A, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, A).;false;true
5;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
5;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;false
5;false;haswordvenue(A, J), haswordauthor(K, J).;false;true
5;false,false;haswordvenue(B, L), haswordtitle(M, L).;true;false
5;false,false,true;haswordtitle(M, N), haswordauthor(P, N).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;title(E, D), venue(E, B).;false;true
6;true,true,false;title(F, D), venue(F, A).;false;false
6;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
6;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
6;false;haswordvenue(A, K), haswordauthor(L, K).;false;true
6;false,false;haswordvenue(B, M), haswordtitle(N, M).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
7;true,false;haswordvenue(B, H), haswordtitle(I, H).;false;false
7;false;haswordvenue(A, J), haswordtitle(K, J).;true;false
7;false,true;haswordtitle(K, L), haswordauthor(M, L).;true;false
7;false,true,true;haswordvenue(B, L).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;title(E, D), venue(E, B).;false;true
8;true,true,false;title(F, D), venue(F, A).;false;false
8;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;false
8;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
8;false;haswordvenue(B, K), haswordauthor(L, K).;false;true
8;false,false;haswordvenue(A, M), haswordtitle(N, M).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, B).;false;true
9;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
9;true,false;haswordvenue(A, H), haswordauthor(I, H).;false;true
9;true,false,false;haswordvenue(A, J), haswordtitle(K, J).;false;false
9;false;haswordvenue(A, L), haswordauthor(M, L).;false;true
9;false,false;haswordvenue(B, N), haswordauthor(P, N).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1418510649004878;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | else if ( genre(B, E) )
%   | | then return 0.858148935099509;  // std dev = 1.07e-06, 226.000 (wgt'ed) examples reached here.  /* #pos=226 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.3107805140468809;  // std dev = 4.851, 95.000 (wgt'ed) examples reached here.  /* #neg=52 #pos=43 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.14185106490048843;  // std dev = 0.000, 208.000 (wgt'ed) examples reached here.  /* #neg=208 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.12544463852839138;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | else if ( genre(B, E) )
%   | | then return 0.7194734122109573;  // std dev = 0.000, 226.000 (wgt'ed) examples reached here.  /* #pos=226 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.2685926717395528;  // std dev = 4.851, 95.000 (wgt'ed) examples reached here.  /* #neg=52 #pos=43 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then if ( movie(H, B) )
%   | | then return -0.1254446385283917;  // std dev = 0.000, 208.000 (wgt'ed) examples reached here.  /* #neg=208 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.11231637819360639;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | else if ( genre(B, E) )
%   | | then return 0.5553664367462832;  // std dev = 5.72e-07, 226.000 (wgt'ed) examples reached here.  /* #pos=226 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.22480541722117983;  // std dev = 4.851, 95.000 (wgt'ed) examples reached here.  /* #neg=52 #pos=43 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then if ( movie(H, A) )
%   | | then return -0.11231637819360665;  // std dev = 0.000, 208.000 (wgt'ed) examples reached here.  /* #neg=208 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.10159632948783627;  // std dev = 5.27e-09, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | else if ( genre(B, E) )
%   | | then return 0.4175135841583105;  // std dev = 0.000, 226.000 (wgt'ed) examples reached here.  /* #pos=226 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.18286780157194815;  // std dev = 4.851, 95.000 (wgt'ed) examples reached here.  /* #neg=52 #pos=43 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.10159632948783653;  // std dev = 0.000, 208.000 (wgt'ed) examples reached here.  /* #neg=208 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.09269127618926097;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | else if ( movie(E, B) )
%   | | then return 0.26881943544336634;  // std dev = 5.059, 321.000 (wgt'ed) examples reached here.  /* #neg=52 #pos=269 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, B) )
%   | then if ( movie(G, A) )
%   | | then return -0.09269127618926051;  // std dev = 6.14e-08, 208.000 (wgt'ed) examples reached here.  /* #neg=208 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.08518475138839687;  // std dev = 3.73e-09, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | else if ( movie(E, B) )
%   | | then return 0.21196120005113972;  // std dev = 5.069, 321.000 (wgt'ed) examples reached here.  /* #neg=52 #pos=269 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.08518475138839678;  // std dev = 7.88e-08, 208.000 (wgt'ed) examples reached here.  /* #neg=208 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.2259569489657669;  // std dev = 2.35e-07, 226.000 (wgt'ed) examples reached here.  /* #pos=226 */
%   | else if ( genre(A, E) )
%   | | then return -0.07877675473109173;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.03491957628946777;  // std dev = 4.851, 95.000 (wgt'ed) examples reached here.  /* #neg=52 #pos=43 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.07877675473109146;  // std dev = 7.15e-08, 208.000 (wgt'ed) examples reached here.  /* #neg=208 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.18888983027603312;  // std dev = 3.37e-07, 226.000 (wgt'ed) examples reached here.  /* #pos=226 */
%   | else if ( movie(E, B) )
%   | | then return 0.017779076026293247;  // std dev = 4.860, 104.000 (wgt'ed) examples reached here.  /* #neg=61 #pos=43 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then if ( movie(G, B) )
%   | | then return -0.07324622576333663;  // std dev = 1.25e-07, 208.000 (wgt'ed) examples reached here.  /* #neg=208 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.16163270676051883;  // std dev = 1.55e-07, 226.000 (wgt'ed) examples reached here.  /* #pos=226 */
%   | else if ( genre(A, E) )
%   | | then return -0.07446228563023012;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.02204891768450515;  // std dev = 4.851, 95.000 (wgt'ed) examples reached here.  /* #neg=52 #pos=43 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.06842697784420262;  // std dev = 8.43e-08, 208.000 (wgt'ed) examples reached here.  /* #neg=208 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.1409087665898588;  // std dev = 0.000, 226.000 (wgt'ed) examples reached here.  /* #pos=226 */
%   | else if ( movie(E, A) )
%   | | then return 0.009181724737064877;  // std dev = 4.858, 104.000 (wgt'ed) examples reached here.  /* #neg=61 #pos=43 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.06419184008202626;  // std dev = 0.000, 208.000 (wgt'ed) examples reached here.  /* #neg=208 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.154918
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 5.82 seconds
Total inference time: 1.535 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 0.98455
   AUC PR    = 0.985545
   CLL	      = -0.202944
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.840149
   F1        = 0.913131


Total scoring time: 2.763 seconds
Parameter learned model CLL: -0.202944


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 9, 0], 'true,false,true': [1.07e-06, 0, 226], 'true,false,false,true': [4.851, 52, 43], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 208, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)', 'false,true': 'movie(H, B)'}, {'true,true': [0.0, 9, 0], 'true,false,true': [0.0, 0, 226], 'true,false,false,true': [4.851, 52, 43], 'true,false,false,false': [0.0, 0, 0], 'false,true,true': [0.0, 208, 0], 'false,true,false': [0.0, 0, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)', 'false,true': 'movie(H, A)'}, {'true,true': [0.0, 9, 0], 'true,false,true': [5.72e-07, 0, 226], 'true,false,false,true': [4.851, 52, 43], 'true,false,false,false': [0.0, 0, 0], 'false,true,true': [0.0, 208, 0], 'false,true,false': [0.0, 0, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [5.27e-09, 9, 0], 'true,false,true': [0.0, 0, 226], 'true,false,false,true': [4.851, 52, 43], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 208, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, B)', 'false,true': 'movie(G, A)'}, {'true,true': [0.0, 9, 0], 'true,false,true': [5.059, 52, 269], 'true,false,false': [0.0, 0, 0], 'false,true,true': [6.14e-08, 208, 0], 'false,true,false': [0.0, 0, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, A)'}, {'true,true': [3.73e-09, 9, 0], 'true,false,true': [5.069, 52, 269], 'true,false,false': [0.0, 0, 0], 'false,true': [7.88e-08, 208, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [2.35e-07, 0, 226], 'true,false,true': [0.0, 9, 0], 'true,false,false,true': [4.851, 52, 43], 'true,false,false,false': [0.0, 0, 0], 'false,true': [7.15e-08, 208, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, A)', 'false,true': 'movie(G, B)'}, {'true,true': [3.37e-07, 0, 226], 'true,false,true': [4.86, 61, 43], 'true,false,false': [0.0, 0, 0], 'false,true,true': [1.25e-07, 208, 0], 'false,true,false': [0.0, 0, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [1.55e-07, 0, 226], 'true,false,true': [0.0, 9, 0], 'true,false,false,true': [4.851, 52, 43], 'true,false,false,false': [0.0, 0, 0], 'false,true': [8.43e-08, 208, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.0, 0, 226], 'true,false,true': [4.858, 61, 43], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 208, 0], 'false,false': [0.0, 0, 0]}]]
[{'': [0.15067952249770827, -2.391249591500337e-16], 'true': [-9.25185853854297e-18, 0.1357517881231782], 'true,false': [5.030391049629028e-15, 0.2477562326869814], 'true,false,false': [0.2477562326869814, nan], 'false': [-2.391249591500337e-16, nan]}, {'': [0.1259565214158886, -5.764619550938313e-17], 'true': [0.0, 0.11568246152772743], 'true,false': [-4.087192727823585e-15, 0.247756232686981], 'true,false,false': [0.247756232686981, nan], 'false': [-5.764619550938313e-17, nan], 'false,true': [-5.764619550938313e-17, nan]}, {'': [0.10208564738482327, -5.337610695313253e-17], 'true': [-1.5419764230904951e-18, 0.09609151534044195], 'true,false': [1.4462374267683456e-15, 0.24775623268698105], 'true,false,false': [0.24775623268698105, nan], 'false': [-5.337610695313253e-17, nan], 'false,true': [-5.337610695313253e-17, nan]}, {'': [0.08784725242646749, -8.753681540313734e-17], 'true': [3.0839528461809902e-18, 0.08479571614338396], 'true,false': [-3.1439944060181424e-17, 0.24775623268698066], 'true,false,false': [0.24775623268698066, nan], 'false': [-8.753681540313734e-17, nan]}, {'': [0.08102220050167233, 1.814787636406506e-17], 'true': [0.0, 0.0797295784023423], 'true,false': [0.0797295784023423, nan], 'false': [1.814787636406506e-17, nan], 'false,true': [1.814787636406506e-17, nan]}, {'': [0.08021510722466826, 2.9890619893754213e-17], 'true': [1.5419764230904951e-18, 0.08005606392827687], 'true,false': [0.08005606392827687, nan], 'false': [2.9890619893754213e-17, nan]}, {'': [0.08035488117171825, 2.455300919844096e-17], 'true': [2.43659566466406e-16, 0.22733765167901304], 'true,false': [0.0, 0.24775623268697985], 'true,false,false': [0.24775623268697985, nan], 'false': [2.455300919844096e-17, nan]}, {'': [0.07789043605832845, 7.472654973438554e-17], 'true': [5.030391049629028e-16, 0.227100741579927], 'true,false': [0.227100741579927, nan], 'false': [7.472654973438554e-17, nan], 'false,true': [7.472654973438554e-17, nan]}, {'': [0.07627926742523561, 3.416070845000482e-17], 'true': [1.0610981120311231e-16, 0.22705208963754317], 'true,false': [0.0, 0.247756232686981], 'true,false,false': [0.247756232686981, nan], 'false': [3.416070845000482e-17, nan]}, {'': [0.07525365753648008, -1.0675221390626506e-18], 'true': [-1.414797482708164e-16, 0.22690214391372993], 'true,false': [0.22690214391372993, nan], 'false': [-1.0675221390626506e-18, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(A, D).;true;true
0;true,false;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;true;genre(A, D).;true;true
1;true,false;genre(B, E).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;true;genre(A, D).;true;true
2;true,false;genre(B, E).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;true;genre(A, D).;true;true
3;true,false;genre(B, E).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;true;genre(A, D).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;true;genre(A, D).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(B, D).;true;true
6;true,false;genre(A, E).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;true;genre(B, D).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;true;genre(B, D).;true;true
8;true,false;genre(A, E).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;true;genre(B, D).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1418510649004878;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | else if ( genre(B, E) )
%   | | then return 0.858148935099509;  // std dev = 1.07e-06, 226.000 (wgt'ed) examples reached here.  /* #pos=226 */
%   | | else if ( actor(B) )
%   | | | then return -0.14185106490048766;  // std dev = 5.37e-08, 52.000 (wgt'ed) examples reached here.  /* #neg=52 */
%   | | | else return 0.8581489350995118;  // std dev = 2.31e-07, 43.000 (wgt'ed) examples reached here.  /* #pos=43 */
%   else return -0.14185106490048843;  // std dev = 0.000, 208.000 (wgt'ed) examples reached here.  /* #neg=208 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.12544463852839138;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | else if ( genre(B, E) )
%   | | then return 0.7194734122109573;  // std dev = 0.000, 226.000 (wgt'ed) examples reached here.  /* #pos=226 */
%   | | else if ( actor(B) )
%   | | | then return -0.12544463852839158;  // std dev = 0.000, 52.000 (wgt'ed) examples reached here.  /* #neg=52 */
%   | | | else return 0.7194734122109551;  // std dev = 0.000, 43.000 (wgt'ed) examples reached here.  /* #pos=43 */
%   else return -0.1254446385283917;  // std dev = 0.000, 208.000 (wgt'ed) examples reached here.  /* #neg=208 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.11231637819360639;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | else if ( genre(B, E) )
%   | | then return 0.5553664367462832;  // std dev = 5.72e-07, 226.000 (wgt'ed) examples reached here.  /* #pos=226 */
%   | | else if ( actor(B) )
%   | | | then return -0.1123163781936063;  // std dev = 3.33e-08, 52.000 (wgt'ed) examples reached here.  /* #neg=52 */
%   | | | else return 0.555366436746284;  // std dev = 0.000, 43.000 (wgt'ed) examples reached here.  /* #pos=43 */
%   else return -0.11231637819360665;  // std dev = 0.000, 208.000 (wgt'ed) examples reached here.  /* #neg=208 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.10159632948783627;  // std dev = 5.27e-09, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | else if ( genre(B, E) )
%   | | then return 0.4175135841583105;  // std dev = 0.000, 226.000 (wgt'ed) examples reached here.  /* #pos=226 */
%   | | else if ( director(B) )
%   | | | then return 0.41751358415831025;  // std dev = 0.000, 43.000 (wgt'ed) examples reached here.  /* #pos=43 */
%   | | | else return -0.10159632948783624;  // std dev = 3.33e-08, 52.000 (wgt'ed) examples reached here.  /* #neg=52 */
%   else return -0.10159632948783653;  // std dev = 0.000, 208.000 (wgt'ed) examples reached here.  /* #neg=208 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.09269127618926097;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | else if ( actor(B) )
%   | | then return -0.09269127618926107;  // std dev = 0.000, 52.000 (wgt'ed) examples reached here.  /* #neg=52 */
%   | | else return 0.3207118471601504;  // std dev = 0.000, 269.000 (wgt'ed) examples reached here.  /* #pos=269 */
%   else return -0.09269127618926051;  // std dev = 6.14e-08, 208.000 (wgt'ed) examples reached here.  /* #neg=208 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.08518475138839687;  // std dev = 3.73e-09, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | else if ( director(B) )
%   | | then return 0.2551722425694879;  // std dev = 3.32e-07, 269.000 (wgt'ed) examples reached here.  /* #pos=269 */
%   | | else return -0.08518475138839679;  // std dev = 1.97e-08, 52.000 (wgt'ed) examples reached here.  /* #neg=52 */
%   else return -0.08518475138839678;  // std dev = 7.88e-08, 208.000 (wgt'ed) examples reached here.  /* #neg=208 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.20975771563253492;  // std dev = 2.89e-07, 226.000 (wgt'ed) examples reached here.  /* #pos=226 */
%   | else if ( genre(A, E) )
%   | | then return -0.07877675473109173;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | else if ( actor(B) )
%   | | | then return -0.07877675473109179;  // std dev = 7.45e-09, 52.000 (wgt'ed) examples reached here.  /* #neg=52 */
%   | | | else return 0.2097577156325359;  // std dev = 0.000, 43.000 (wgt'ed) examples reached here.  /* #pos=43 */
%   else return -0.07877675473109146;  // std dev = 7.15e-08, 208.000 (wgt'ed) examples reached here.  /* #neg=208 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.17709649774527755;  // std dev = 0.000, 226.000 (wgt'ed) examples reached here.  /* #pos=226 */
%   | else if ( actor(B) )
%   | | then return -0.07324622576333704;  // std dev = 0.000, 61.000 (wgt'ed) examples reached here.  /* #neg=61 */
%   | | else return 0.17709649774527753;  // std dev = 0.000, 43.000 (wgt'ed) examples reached here.  /* #pos=43 */
%   else return -0.07324622576333663;  // std dev = 1.25e-07, 208.000 (wgt'ed) examples reached here.  /* #neg=208 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.15274385809367155;  // std dev = 0.000, 226.000 (wgt'ed) examples reached here.  /* #pos=226 */
%   | else if ( genre(A, E) )
%   | | then return -0.06842697784420272;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | else if ( actor(B) )
%   | | | then return -0.0684269778442027;  // std dev = 1.49e-08, 52.000 (wgt'ed) examples reached here.  /* #neg=52 */
%   | | | else return 0.15274385809367083;  // std dev = 0.000, 43.000 (wgt'ed) examples reached here.  /* #pos=43 */
%   else return -0.06842697784420262;  // std dev = 8.43e-08, 208.000 (wgt'ed) examples reached here.  /* #neg=208 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.13400703000801092;  // std dev = 9.88e-08, 226.000 (wgt'ed) examples reached here.  /* #pos=226 */
%   | else if ( actor(B) )
%   | | then return -0.06419184008202625;  // std dev = 0.000, 61.000 (wgt'ed) examples reached here.  /* #neg=61 */
%   | | else return 0.13400703000801106;  // std dev = 2.36e-08, 43.000 (wgt'ed) examples reached here.  /* #pos=43 */
%   else return -0.06419184008202626;  // std dev = 0.000, 208.000 (wgt'ed) examples reached here.  /* #neg=208 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.094637
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 8.024 seconds
Total inference time: 1.533 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.094637
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 2.904 seconds
Refined model CLL: -0.094637


******************************************
Best model found
******************************************
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.094637
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 19.511 seconds
Total inference time: 1.533 seconds
AUC ROC: 1.0
Total revision time: 19.511
Best scored revision CLL: -0.094637


Dataset: 4_cora_imdb, Fold: 4, Type: Transfer (trRDN-B), Time: 18:01:48
{'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.094637, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 19.511, 'Inference time': 1.533, 'parameter_0.8': {'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.154918, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 5.82, 'Inference time': 1.535}}


Amount of data: 1.0
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;false;false
0;false;haswordvenue(A, I), haswordtitle(J, I).;true;false
0;false,true;haswordtitle(J, K), haswordauthor(L, K).;true;false
0;false,true,true;haswordauthor(L, I).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, A).;false;true
1;true,true,false;title(F, D), venue(F, B).;false;false
1;true,false;haswordvenue(A, G), haswordtitle(H, G).;false;false
1;false;haswordvenue(A, I), haswordtitle(J, I).;true;false
1;false,true;haswordtitle(J, K), haswordauthor(L, K).;true;false
1;false,true,true;haswordvenue(B, K).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;title(F, D), venue(F, B).;false;false
2;true,false;haswordvenue(A, G), haswordtitle(H, G).;false;false
2;false;haswordvenue(B, I), haswordtitle(J, I).;true;false
2;false,true;haswordtitle(J, K), haswordvenue(A, K).;true;false
2;false,true,true;haswordauthor(L, K).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;title(E, D), venue(E, A).;false;true
3;true,true,false;title(F, D), venue(F, B).;false;false
3;true,false;haswordvenue(A, G), haswordtitle(H, G).;false;false
3;false;haswordvenue(A, I), haswordtitle(J, I).;true;false
3;false,true;haswordtitle(J, K), haswordauthor(L, K).;true;false
3;false,true,true;haswordauthor(L, I).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, A).;false;true
4;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
4;true,false;haswordvenue(B, H), haswordtitle(I, H).;false;false
4;false;haswordvenue(B, J), haswordtitle(K, J).;true;false
4;false,true;haswordtitle(K, L), haswordauthor(M, L).;true;false
4;false,true,true;haswordvenue(A, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, A).;false;true
5;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
5;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;false
5;false;haswordvenue(A, J), haswordauthor(K, J).;false;true
5;false,false;haswordvenue(B, L), haswordtitle(M, L).;true;false
5;false,false,true;haswordtitle(M, N), haswordauthor(P, N).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;title(E, D), venue(E, B).;false;true
6;true,true,false;title(F, D), venue(F, A).;false;false
6;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
6;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
6;false;haswordvenue(A, K), haswordauthor(L, K).;false;true
6;false,false;haswordvenue(B, M), haswordtitle(N, M).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
7;true,false;haswordvenue(B, H), haswordtitle(I, H).;false;false
7;false;haswordvenue(A, J), haswordtitle(K, J).;true;false
7;false,true;haswordtitle(K, L), haswordauthor(M, L).;true;false
7;false,true,true;haswordvenue(B, L).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;title(E, D), venue(E, B).;false;true
8;true,true,false;title(F, D), venue(F, A).;false;false
8;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;false
8;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
8;false;haswordvenue(B, K), haswordauthor(L, K).;false;true
8;false,false;haswordvenue(A, M), haswordtitle(N, M).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, B).;false;true
9;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
9;true,false;haswordvenue(A, H), haswordauthor(I, H).;false;true
9;true,false,false;haswordvenue(A, J), haswordtitle(K, J).;false;false
9;false;haswordvenue(A, L), haswordauthor(M, L).;false;true
9;false,false;haswordvenue(B, N), haswordauthor(P, N).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1418510649004878;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995086;  // std dev = 1.07e-06, 278.000 (wgt'ed) examples reached here.  /* #pos=278 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.3190864350995134;  // std dev = 5.640, 128.000 (wgt'ed) examples reached here.  /* #neg=69 #pos=59 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.14185106490048818;  // std dev = 0.000, 257.000 (wgt'ed) examples reached here.  /* #neg=257 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.12544463852839138;  // std dev = 5.27e-09, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | else if ( genre(B, E) )
%   | | then return 0.7194734122109576;  // std dev = 0.000, 278.000 (wgt'ed) examples reached here.  /* #pos=278 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.27564802963370844;  // std dev = 5.640, 128.000 (wgt'ed) examples reached here.  /* #neg=69 #pos=59 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then if ( movie(H, B) )
%   | | then return -0.12544463852839188;  // std dev = 0.000, 257.000 (wgt'ed) examples reached here.  /* #neg=257 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.11231637819360638;  // std dev = 7.45e-09, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | else if ( genre(B, E) )
%   | | then return 0.5553664367462832;  // std dev = 2.92e-07, 278.000 (wgt'ed) examples reached here.  /* #pos=278 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.23039766822336077;  // std dev = 5.640, 128.000 (wgt'ed) examples reached here.  /* #neg=69 #pos=59 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then if ( movie(H, A) )
%   | | then return -0.11231637819360688;  // std dev = 0.000, 257.000 (wgt'ed) examples reached here.  /* #neg=257 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.10159632948783628;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | else if ( genre(B, E) )
%   | | then return 0.41751358415831125;  // std dev = 0.000, 278.000 (wgt'ed) examples reached here.  /* #pos=278 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.18702620292833677;  // std dev = 5.640, 128.000 (wgt'ed) examples reached here.  /* #neg=69 #pos=59 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.10159632948783659;  // std dev = 0.000, 257.000 (wgt'ed) examples reached here.  /* #neg=257 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.09269127618926097;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | else if ( movie(E, B) )
%   | | then return 0.26635704411166977;  // std dev = 5.866, 406.000 (wgt'ed) examples reached here.  /* #neg=69 #pos=337 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, B) )
%   | then if ( movie(G, A) )
%   | | then return -0.09269127618926046;  // std dev = 1.10e-07, 257.000 (wgt'ed) examples reached here.  /* #neg=257 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.08518475138839687;  // std dev = 5.27e-09, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | else if ( movie(E, B) )
%   | | then return 0.2097713060100091;  // std dev = 5.879, 406.000 (wgt'ed) examples reached here.  /* #neg=69 #pos=337 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.08518475138839678;  // std dev = 9.42e-08, 257.000 (wgt'ed) examples reached here.  /* #neg=257 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.22677167281066912;  // std dev = 0.000, 278.000 (wgt'ed) examples reached here.  /* #pos=278 */
%   | else if ( genre(A, E) )
%   | | then return -0.07877675473109172;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.03824090645908289;  // std dev = 5.640, 128.000 (wgt'ed) examples reached here.  /* #neg=69 #pos=59 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.07877675473109143;  // std dev = 5.96e-08, 257.000 (wgt'ed) examples reached here.  /* #neg=257 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.18947848692916783;  // std dev = 0.000, 278.000 (wgt'ed) examples reached here.  /* #pos=278 */
%   | else if ( movie(E, B) )
%   | | then return 0.020800533191622953;  // std dev = 5.649, 139.000 (wgt'ed) examples reached here.  /* #neg=80 #pos=59 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then if ( movie(G, B) )
%   | | then return -0.07324622576333681;  // std dev = 1.16e-07, 257.000 (wgt'ed) examples reached here.  /* #neg=257 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.16207344210395985;  // std dev = 0.000, 278.000 (wgt'ed) examples reached here.  /* #pos=278 */
%   | else if ( genre(A, E) )
%   | | then return -0.07467078528722383;  // std dev = 2.63e-09, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.02377153060119429;  // std dev = 5.640, 128.000 (wgt'ed) examples reached here.  /* #neg=69 #pos=59 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.06842697784420276;  // std dev = 0.000, 257.000 (wgt'ed) examples reached here.  /* #neg=257 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.14124904821380402;  // std dev = 2.46e-07, 278.000 (wgt'ed) examples reached here.  /* #pos=278 */
%   | else if ( movie(E, A) )
%   | | then return 0.010982721851743281;  // std dev = 5.646, 139.000 (wgt'ed) examples reached here.  /* #neg=80 #pos=59 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.0641918400820262;  // std dev = 5.16e-08, 257.000 (wgt'ed) examples reached here.  /* #neg=257 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.156561
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 6.797 seconds
Total inference time: 1.74 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 0.982077
   AUC PR    = 0.983254
   CLL	      = -0.21117
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.824926
   F1        = 0.904065


Total scoring time: 2.837 seconds
Parameter learned model CLL: -0.21117


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 11, 0], 'true,false,true': [1.07e-06, 0, 278], 'true,false,false,true': [5.64, 69, 59], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 257, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)', 'false,true': 'movie(H, B)'}, {'true,true': [5.27e-09, 11, 0], 'true,false,true': [0.0, 0, 278], 'true,false,false,true': [5.64, 69, 59], 'true,false,false,false': [0.0, 0, 0], 'false,true,true': [0.0, 257, 0], 'false,true,false': [0.0, 0, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)', 'false,true': 'movie(H, A)'}, {'true,true': [7.45e-09, 11, 0], 'true,false,true': [2.92e-07, 0, 278], 'true,false,false,true': [5.64, 69, 59], 'true,false,false,false': [0.0, 0, 0], 'false,true,true': [0.0, 257, 0], 'false,true,false': [0.0, 0, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 11, 0], 'true,false,true': [0.0, 0, 278], 'true,false,false,true': [5.64, 69, 59], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 257, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, B)', 'false,true': 'movie(G, A)'}, {'true,true': [0.0, 11, 0], 'true,false,true': [5.866, 69, 337], 'true,false,false': [0.0, 0, 0], 'false,true,true': [1.1e-07, 257, 0], 'false,true,false': [0.0, 0, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, A)'}, {'true,true': [5.27e-09, 11, 0], 'true,false,true': [5.879, 69, 337], 'true,false,false': [0.0, 0, 0], 'false,true': [9.42e-08, 257, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 0, 278], 'true,false,true': [0.0, 11, 0], 'true,false,false,true': [5.64, 69, 59], 'true,false,false,false': [0.0, 0, 0], 'false,true': [5.96e-08, 257, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, A)', 'false,true': 'movie(G, B)'}, {'true,true': [0.0, 0, 278], 'true,false,true': [5.649, 80, 59], 'true,false,false': [0.0, 0, 0], 'false,true,true': [1.16e-07, 257, 0], 'false,true,false': [0.0, 0, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 278], 'true,false,true': [2.63e-09, 11, 0], 'true,false,false,true': [5.64, 69, 59], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 257, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [2.46e-07, 0, 278], 'true,false,true': [5.646, 80, 59], 'true,false,false': [0.0, 0, 0], 'false,true': [5.16e-08, 257, 0], 'false,false': [0.0, 0, 0]}]]
[{'': [0.15504143447831958, -1.0022246759262114e-16], 'true': [-1.0092936587501423e-17, 0.14106748525807772], 'true,false': [4.089454594302735e-15, 0.2484741210937499], 'true,false,false': [0.2484741210937499, nan], 'false': [-1.0022246759262114e-16, nan]}, {'': [0.1304366748292485, -6.566299600895868e-17], 'true': [2.523234146875356e-18, 0.12085996972325372], 'true,false': [-4.702872783448145e-15, 0.24847412109375006], 'true,false,false': [0.24847412109375006, nan], 'false': [-6.566299600895868e-17, nan], 'false,true': [-6.566299600895868e-17, nan]}, {'': [0.10667163249274475, -9.676652043425489e-17], 'true': [5.046468293750712e-18, 0.10113410170191292], 'true,false': [3.0670909457270513e-16, 0.24847412109374847], 'true,false,false': [0.24847412109374847, nan], 'false': [-9.676652043425489e-17, nan], 'false,true': [-9.676652043425489e-17, nan]}, {'': [0.09255490541523693, -6.739096958814179e-17], 'true': [0.0, 0.08980491485801496], 'true,false': [-5.878590979310181e-16, 0.24847412109374897], 'true,false,false': [0.24847412109374897, nan], 'false': [-6.739096958814179e-17, nan]}, {'': [0.08582860151592538, 4.665528663794432e-17], 'true': [0.0, 0.08475335311619575], 'true,false': [0.08475335311619575, nan], 'false': [4.665528663794432e-17, nan], 'false,true': [4.665528663794432e-17, nan]}, {'': [0.08510481317633042, 3.455947158366246e-17], 'true': [2.523234146875356e-18, 0.08511566895792094], 'true,false': [0.08511566895792094, nan], 'false': [3.455947158366246e-17, nan]}, {'': [0.08529649010458258, 1.3823788633464984e-17], 'true': [-1.916931841079407e-16, 0.22980857584011252], 'true,false': [0.0, 0.2484741210937491], 'true,false,false': [0.2484741210937491, nan], 'false': [1.3823788633464984e-17, nan]}, {'': [0.0828463229591666, 5.270319416508525e-17], 'true': [-5.111818242878418e-16, 0.22957080082610837], 'true,false': [0.22957080082610837, nan], 'false': [5.270319416508525e-17, nan], 'false,true': [5.270319416508525e-17, nan]}, {'': [0.08124851939813087, -1.5551762212648107e-17], 'true': [-2.5239602574212193e-16, 0.22951691604973415], 'true,false': [6.30808536718839e-19, 0.24847412109374928], 'true,false,false': [0.24847412109374928, nan], 'false': [-1.5551762212648107e-17, nan]}, {'': [0.0802275414690466, 1.0367841475098738e-17], 'true': [2.172522753223328e-16, 0.22936974721789555], 'true,false': [0.22936974721789555, nan], 'false': [1.0367841475098738e-17, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(A, D).;true;true
0;true,false;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;true;genre(A, D).;true;true
1;true,false;genre(B, E).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;true;genre(A, D).;true;true
2;true,false;genre(B, E).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;true;genre(A, D).;true;true
3;true,false;genre(B, E).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;true;genre(A, D).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;true;genre(A, D).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(B, D).;true;true
6;true,false;genre(A, E).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;true;genre(B, D).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;true;genre(B, D).;true;true
8;true,false;genre(A, E).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;true;genre(B, D).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1418510649004878;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995086;  // std dev = 1.07e-06, 278.000 (wgt'ed) examples reached here.  /* #pos=278 */
%   | | else if ( actor(B) )
%   | | | then return -0.14185106490048766;  // std dev = 6.83e-08, 69.000 (wgt'ed) examples reached here.  /* #neg=69 */
%   | | | else return 0.8581489350995125;  // std dev = 0.000, 59.000 (wgt'ed) examples reached here.  /* #pos=59 */
%   else return -0.14185106490048818;  // std dev = 0.000, 257.000 (wgt'ed) examples reached here.  /* #neg=257 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.12544463852839138;  // std dev = 5.27e-09, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | else if ( genre(B, E) )
%   | | then return 0.7194734122109576;  // std dev = 0.000, 278.000 (wgt'ed) examples reached here.  /* #pos=278 */
%   | | else if ( actor(B) )
%   | | | then return -0.12544463852839155;  // std dev = 0.000, 69.000 (wgt'ed) examples reached here.  /* #neg=69 */
%   | | | else return 0.7194734122109543;  // std dev = 0.000, 59.000 (wgt'ed) examples reached here.  /* #pos=59 */
%   else return -0.12544463852839188;  // std dev = 0.000, 257.000 (wgt'ed) examples reached here.  /* #neg=257 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.11231637819360638;  // std dev = 7.45e-09, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | else if ( genre(B, E) )
%   | | then return 0.5553664367462832;  // std dev = 2.92e-07, 278.000 (wgt'ed) examples reached here.  /* #pos=278 */
%   | | else if ( actor(B) )
%   | | | then return -0.11231637819360625;  // std dev = 5.48e-08, 69.000 (wgt'ed) examples reached here.  /* #neg=69 */
%   | | | else return 0.5553664367462838;  // std dev = 1.19e-07, 59.000 (wgt'ed) examples reached here.  /* #pos=59 */
%   else return -0.11231637819360688;  // std dev = 0.000, 257.000 (wgt'ed) examples reached here.  /* #neg=257 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.10159632948783628;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | else if ( genre(B, E) )
%   | | then return 0.41751358415831125;  // std dev = 0.000, 278.000 (wgt'ed) examples reached here.  /* #pos=278 */
%   | | else if ( actor(B) )
%   | | | then return -0.10159632948783617;  // std dev = 5.27e-08, 69.000 (wgt'ed) examples reached here.  /* #neg=69 */
%   | | | else return 0.41751358415831036;  // std dev = 0.000, 59.000 (wgt'ed) examples reached here.  /* #pos=59 */
%   else return -0.10159632948783659;  // std dev = 0.000, 257.000 (wgt'ed) examples reached here.  /* #neg=257 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.09269127618926097;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | else if ( director(B) )
%   | | then return 0.3207118471601512;  // std dev = 0.000, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | | else return -0.09269127618926107;  // std dev = 0.000, 69.000 (wgt'ed) examples reached here.  /* #neg=69 */
%   else return -0.09269127618926046;  // std dev = 1.10e-07, 257.000 (wgt'ed) examples reached here.  /* #neg=257 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.08518475138839687;  // std dev = 5.27e-09, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | else if ( actor(B) )
%   | | then return -0.08518475138839679;  // std dev = 1.83e-08, 69.000 (wgt'ed) examples reached here.  /* #neg=69 */
%   | | else return 0.2551722425694875;  // std dev = 4.04e-07, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   else return -0.08518475138839678;  // std dev = 9.42e-08, 257.000 (wgt'ed) examples reached here.  /* #neg=257 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.20975771563253479;  // std dev = 2.86e-07, 278.000 (wgt'ed) examples reached here.  /* #pos=278 */
%   | else if ( genre(A, E) )
%   | | then return -0.07877675473109172;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | else if ( actor(B) )
%   | | | then return -0.07877675473109168;  // std dev = 3.49e-08, 69.000 (wgt'ed) examples reached here.  /* #neg=69 */
%   | | | else return 0.20975771563253595;  // std dev = 0.000, 59.000 (wgt'ed) examples reached here.  /* #pos=59 */
%   else return -0.07877675473109143;  // std dev = 5.96e-08, 257.000 (wgt'ed) examples reached here.  /* #neg=257 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.17709649774527705;  // std dev = 1.26e-07, 278.000 (wgt'ed) examples reached here.  /* #pos=278 */
%   | else if ( actor(B) )
%   | | then return -0.07324622576333704;  // std dev = 0.000, 80.000 (wgt'ed) examples reached here.  /* #neg=80 */
%   | | else return 0.17709649774527733;  // std dev = 0.000, 59.000 (wgt'ed) examples reached here.  /* #pos=59 */
%   else return -0.07324622576333681;  // std dev = 1.16e-07, 257.000 (wgt'ed) examples reached here.  /* #neg=257 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.15274385809367158;  // std dev = 0.000, 278.000 (wgt'ed) examples reached here.  /* #pos=278 */
%   | else if ( genre(A, E) )
%   | | then return -0.06842697784420272;  // std dev = 2.63e-09, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | else if ( actor(B) )
%   | | | then return -0.06842697784420268;  // std dev = 2.89e-08, 69.000 (wgt'ed) examples reached here.  /* #neg=69 */
%   | | | else return 0.15274385809367097;  // std dev = 2.58e-08, 59.000 (wgt'ed) examples reached here.  /* #pos=59 */
%   else return -0.06842697784420276;  // std dev = 0.000, 257.000 (wgt'ed) examples reached here.  /* #neg=257 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.1340070300080114;  // std dev = 0.000, 278.000 (wgt'ed) examples reached here.  /* #pos=278 */
%   | else if ( actor(B) )
%   | | then return -0.06419184008202625;  // std dev = 0.000, 80.000 (wgt'ed) examples reached here.  /* #neg=80 */
%   | | else return 0.13400703000801098;  // std dev = 4.21e-08, 59.000 (wgt'ed) examples reached here.  /* #pos=59 */
%   else return -0.0641918400820262;  // std dev = 5.16e-08, 257.000 (wgt'ed) examples reached here.  /* #neg=257 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.094637
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 8.254 seconds
Total inference time: 1.693 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.094637
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 2.9 seconds
Refined model CLL: -0.094637


******************************************
Best model found
******************************************
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.094637
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 20.787999999999997 seconds
Total inference time: 1.693 seconds
AUC ROC: 1.0
Total revision time: 20.787999999999997
Best scored revision CLL: -0.094637


Dataset: 4_cora_imdb, Fold: 4, Type: Transfer (trRDN-B), Time: 18:02:14
{'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.094637, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 20.787999999999997, 'Inference time': 1.693, 'parameter_1.0': {'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.156561, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 6.797, 'Inference time': 1.74}}


Starting fold 5

Target train facts examples: 915
Target train pos examples: 337
Target train neg examples: 337

Target test facts examples: 163
Target test pos	 examples: 45
Target test neg examples: 45

Amount of data: 0.2
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;false;false
0;false;haswordvenue(A, I), haswordtitle(J, I).;true;false
0;false,true;haswordtitle(J, K), haswordauthor(L, K).;true;false
0;false,true,true;haswordauthor(L, I).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, A).;false;true
1;true,true,false;title(F, D), venue(F, B).;false;false
1;true,false;haswordvenue(A, G), haswordtitle(H, G).;false;false
1;false;haswordvenue(A, I), haswordtitle(J, I).;true;false
1;false,true;haswordtitle(J, K), haswordauthor(L, K).;true;false
1;false,true,true;haswordvenue(B, K).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;title(F, D), venue(F, B).;false;false
2;true,false;haswordvenue(A, G), haswordtitle(H, G).;false;false
2;false;haswordvenue(B, I), haswordtitle(J, I).;true;false
2;false,true;haswordtitle(J, K), haswordvenue(A, K).;true;false
2;false,true,true;haswordauthor(L, K).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;title(E, D), venue(E, A).;false;true
3;true,true,false;title(F, D), venue(F, B).;false;false
3;true,false;haswordvenue(A, G), haswordtitle(H, G).;false;false
3;false;haswordvenue(A, I), haswordtitle(J, I).;true;false
3;false,true;haswordtitle(J, K), haswordauthor(L, K).;true;false
3;false,true,true;haswordauthor(L, I).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, A).;false;true
4;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
4;true,false;haswordvenue(B, H), haswordtitle(I, H).;false;false
4;false;haswordvenue(B, J), haswordtitle(K, J).;true;false
4;false,true;haswordtitle(K, L), haswordauthor(M, L).;true;false
4;false,true,true;haswordvenue(A, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, A).;false;true
5;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
5;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;false
5;false;haswordvenue(A, J), haswordauthor(K, J).;false;true
5;false,false;haswordvenue(B, L), haswordtitle(M, L).;true;false
5;false,false,true;haswordtitle(M, N), haswordauthor(P, N).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;title(E, D), venue(E, B).;false;true
6;true,true,false;title(F, D), venue(F, A).;false;false
6;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
6;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
6;false;haswordvenue(A, K), haswordauthor(L, K).;false;true
6;false,false;haswordvenue(B, M), haswordtitle(N, M).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
7;true,false;haswordvenue(B, H), haswordtitle(I, H).;false;false
7;false;haswordvenue(A, J), haswordtitle(K, J).;true;false
7;false,true;haswordtitle(K, L), haswordauthor(M, L).;true;false
7;false,true,true;haswordvenue(B, L).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;title(E, D), venue(E, B).;false;true
8;true,true,false;title(F, D), venue(F, A).;false;false
8;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;false
8;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
8;false;haswordvenue(B, K), haswordauthor(L, K).;false;true
8;false,false;haswordvenue(A, M), haswordtitle(N, M).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, B).;false;true
9;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
9;true,false;haswordvenue(A, H), haswordauthor(I, H).;false;true
9;true,false,false;haswordvenue(A, J), haswordtitle(K, J).;false;false
9;false;haswordvenue(A, L), haswordauthor(M, L).;false;true
9;false,false;haswordvenue(B, N), haswordauthor(P, N).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14185106490048777;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995126;  // std dev = 0.000, 62.000 (wgt'ed) examples reached here.  /* #pos=62 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.1914822684328457;  // std dev = 1.826, 15.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=5 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.14185106490048766;  // std dev = 7.90e-09, 56.000 (wgt'ed) examples reached here.  /* #neg=56 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.12544463852839138;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( genre(B, E) )
%   | | then return 0.7194734122109543;  // std dev = 8.43e-08, 62.000 (wgt'ed) examples reached here.  /* #pos=62 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.1665388245648817;  // std dev = 1.826, 15.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=5 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then if ( movie(H, B) )
%   | | then return -0.12544463852839158;  // std dev = 0.000, 56.000 (wgt'ed) examples reached here.  /* #neg=56 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.11231637819360639;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( genre(B, E) )
%   | | then return 0.5553664367462837;  // std dev = 1.46e-07, 62.000 (wgt'ed) examples reached here.  /* #pos=62 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.14209424281556463;  // std dev = 1.826, 15.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=5 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then if ( movie(H, A) )
%   | | then return -0.11231637819360629;  // std dev = 5.27e-09, 56.000 (wgt'ed) examples reached here.  /* #neg=56 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.10159632948783628;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( genre(B, E) )
%   | | then return 0.41751358415831036;  // std dev = 0.000, 62.000 (wgt'ed) examples reached here.  /* #pos=62 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.11914890490746437;  // std dev = 1.826, 15.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=5 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.10159632948783623;  // std dev = 5.10e-09, 56.000 (wgt'ed) examples reached here.  /* #neg=56 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.09269127618926096;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( movie(E, B) )
%   | | then return 0.2774069553985661;  // std dev = 1.982, 77.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=67 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, B) )
%   | then if ( movie(G, A) )
%   | | then return -0.09269127618926107;  // std dev = 0.000, 56.000 (wgt'ed) examples reached here.  /* #neg=56 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.08518475138839687;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( movie(E, B) )
%   | | then return 0.2209201714466434;  // std dev = 1.977, 77.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=67 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.08518475138839679;  // std dev = 1.83e-08, 56.000 (wgt'ed) examples reached here.  /* #neg=56 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.2229028245983552;  // std dev = 0.000, 62.000 (wgt'ed) examples reached here.  /* #pos=62 */
%   | else if ( genre(A, E) )
%   | | then return -0.07877675473109173;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.0023905996499743233;  // std dev = 1.826, 15.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=5 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.07877675473109176;  // std dev = 1.83e-08, 56.000 (wgt'ed) examples reached here.  /* #neg=56 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.18667945269722355;  // std dev = 3.65e-08, 62.000 (wgt'ed) examples reached here.  /* #pos=62 */
%   | else if ( movie(E, B) )
%   | | then return -0.006319458016717183;  // std dev = 1.827, 16.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=5 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then if ( movie(G, B) )
%   | | then return -0.07324622576333704;  // std dev = 7.45e-09, 56.000 (wgt'ed) examples reached here.  /* #neg=56 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.15997531283283345;  // std dev = 4.71e-08, 62.000 (wgt'ed) examples reached here.  /* #pos=62 */
%   | else if ( genre(A, E) )
%   | | then return -0.07281840845156828;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( movie(F, A) )
%   | | | then return -4.5092795349073916E-4;  // std dev = 1.826, 15.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=5 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.06842697784420268;  // std dev = 1.67e-08, 56.000 (wgt'ed) examples reached here.  /* #neg=56 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.1396275225227513;  // std dev = 5.77e-08, 62.000 (wgt'ed) examples reached here.  /* #pos=62 */
%   | else if ( movie(E, A) )
%   | | then return -0.004582018373606188;  // std dev = 1.827, 16.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=5 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.06419184008202625;  // std dev = 0.000, 56.000 (wgt'ed) examples reached here.  /* #neg=56 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 0.982716
   AUC PR    = 0.983099
   CLL	      = -0.231503
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.777778
   F1        = 0.875


Total learning time: 4.016 seconds
Total inference time: 1.801 seconds
AUC ROC: 0.982716


Results scoring model
   AUC ROC   = 0.994431
   AUC PR    = 0.994819
   CLL	      = -0.158917
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.925373
   F1        = 0.96124


Total scoring time: 1.916 seconds
Parameter learned model CLL: -0.158917


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 1, 0], 'true,false,true': [0.0, 0, 62], 'true,false,false,true': [1.826, 10, 5], 'true,false,false,false': [0.0, 0, 0], 'false,true': [7.9e-09, 56, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)', 'false,true': 'movie(H, B)'}, {'true,true': [0.0, 1, 0], 'true,false,true': [8.43e-08, 0, 62], 'true,false,false,true': [1.826, 10, 5], 'true,false,false,false': [0.0, 0, 0], 'false,true,true': [0.0, 56, 0], 'false,true,false': [0.0, 0, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)', 'false,true': 'movie(H, A)'}, {'true,true': [0.0, 1, 0], 'true,false,true': [1.46e-07, 0, 62], 'true,false,false,true': [1.826, 10, 5], 'true,false,false,false': [0.0, 0, 0], 'false,true,true': [5.27e-09, 56, 0], 'false,true,false': [0.0, 0, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 1, 0], 'true,false,true': [0.0, 0, 62], 'true,false,false,true': [1.826, 10, 5], 'true,false,false,false': [0.0, 0, 0], 'false,true': [5.1e-09, 56, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, B)', 'false,true': 'movie(G, A)'}, {'true,true': [0.0, 1, 0], 'true,false,true': [1.982, 10, 67], 'true,false,false': [0.0, 0, 0], 'false,true,true': [0.0, 56, 0], 'false,true,false': [0.0, 0, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, A)'}, {'true,true': [0.0, 1, 0], 'true,false,true': [1.977, 10, 67], 'true,false,false': [0.0, 0, 0], 'false,true': [1.83e-08, 56, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 0, 62], 'true,false,true': [0.0, 1, 0], 'true,false,false,true': [1.826, 10, 5], 'true,false,false,false': [0.0, 0, 0], 'false,true': [1.83e-08, 56, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, A)', 'false,true': 'movie(G, B)'}, {'true,true': [3.65e-08, 0, 62], 'true,false,true': [1.827, 11, 5], 'true,false,false': [0.0, 0, 0], 'false,true,true': [7.45e-09, 56, 0], 'false,true,false': [0.0, 0, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [4.71e-08, 0, 62], 'true,false,true': [0.0, 1, 0], 'true,false,false,true': [1.826, 10, 5], 'true,false,false,false': [0.0, 0, 0], 'false,true': [1.67e-08, 56, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [5.77e-08, 0, 62], 'true,false,true': [1.827, 11, 5], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 56, 0], 'false,false': [0.0, 0, 0]}]]
[{'': [0.12113740959894706, 5.947623346206196e-17], 'true': [0.0, 0.11300387923764449], 'true,false': [-6.87622002348484e-16, 0.22222222222222202], 'true,false,false': [0.22222222222222202, nan], 'false': [5.947623346206196e-17, nan]}, {'': [0.09695510701083211, -3.766828119263924e-17], 'true': [0.0, 0.09124671256652532], 'true,false': [1.1460366705808067e-16, 0.22222222222222238], 'true,false,false': [0.22222222222222238, nan], 'false': [-3.766828119263924e-17, nan], 'false,true': [-3.766828119263924e-17, nan]}, {'': [0.07354517183808344, 2.7755575615628914e-17], 'true': [0.0, 0.07008011460678647], 'true,false': [3.43811001174242e-16, 0.22222222222222215], 'true,false,false': [0.22222222222222215, nan], 'false': [2.7755575615628914e-17, nan], 'false,true': [2.7755575615628914e-17, nan]}, {'': [0.05920913236785108, 2.577303450022685e-17], 'true': [0.0, 0.05725360849441983], 'true,false': [-3.1516008440972187e-16, 0.22222222222222218], 'true,false,false': [0.22222222222222218, nan], 'false': [2.577303450022685e-17, nan]}, {'': [0.052120510238227793, -9.912705577010326e-19], 'true': [0.0, 0.05104133971203736], 'true,false': [0.05104133971203736, nan], 'false': [-9.912705577010326e-19, nan], 'false,true': [-9.912705577010326e-19, nan]}, {'': [0.05131515266528957, 5.9476233462061954e-18], 'true': [0.0, 0.05078029829907852], 'true,false': [0.05078029829907852, nan], 'false': [5.9476233462061954e-18, nan]}, {'': [0.051435619007466085, 5.9476233462061954e-18], 'true': [-1.4325458382260084e-16, 0.20867521876427528], 'true,false': [0.0, 0.22222222222222218], 'true,false,false': [0.22222222222222218, nan], 'false': [5.9476233462061954e-18, nan]}, {'': [0.04886970080455719, 9.912705577010326e-19], 'true': [2.1488187573390126e-17, 0.2086319461494007], 'true,false': [0.2086319461494007, nan], 'false': [9.912705577010326e-19, nan], 'false,true': [9.912705577010326e-19, nan]}, {'': [0.047234308816328646, 4.956352788505163e-18], 'true': [3.581364595565021e-17, 0.20864019186264823], 'true,false': [0.0, 0.2222222222222223], 'true,false,false': [0.2222222222222223, nan], 'false': [4.956352788505163e-18, nan]}, {'': [0.04618099778976111, -2.9738116731030977e-18], 'true': [5.372046893347532e-17, 0.20860189903914483], 'true,false': [0.20860189903914483, nan], 'false': [-2.9738116731030977e-18, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(A, D).;true;true
0;true,false;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;true;genre(A, D).;true;true
1;true,false;genre(B, E).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;true;genre(A, D).;true;true
2;true,false;genre(B, E).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;true;genre(A, D).;true;true
3;true,false;genre(B, E).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;true;genre(A, D).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;true;genre(A, D).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(B, D).;true;true
6;true,false;genre(A, E).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;true;genre(B, D).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;true;genre(B, D).;true;true
8;true,false;genre(A, E).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;true;genre(B, D).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14185106490048777;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995126;  // std dev = 0.000, 62.000 (wgt'ed) examples reached here.  /* #pos=62 */
%   | | else if ( actor(B) )
%   | | | then return -0.1418510649004878;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | | | else return 0.8581489350995122;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return -0.14185106490048766;  // std dev = 5.77e-08, 56.000 (wgt'ed) examples reached here.  /* #neg=56 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.12544463852839138;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( genre(B, E) )
%   | | then return 0.7194734122109543;  // std dev = 8.43e-08, 62.000 (wgt'ed) examples reached here.  /* #pos=62 */
%   | | else if ( actor(B) )
%   | | | then return -0.12544463852839138;  // std dev = 5.27e-09, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | | | else return 0.7194734122109545;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return -0.12544463852839158;  // std dev = 0.000, 56.000 (wgt'ed) examples reached here.  /* #neg=56 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.11231637819360639;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( genre(B, E) )
%   | | then return 0.5553664367462837;  // std dev = 1.46e-07, 62.000 (wgt'ed) examples reached here.  /* #pos=62 */
%   | | else if ( actor(B) )
%   | | | then return -0.11231637819360638;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | | | else return 0.5553664367462845;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return -0.11231637819360629;  // std dev = 3.94e-08, 56.000 (wgt'ed) examples reached here.  /* #neg=56 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.10159632948783628;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( genre(B, E) )
%   | | then return 0.41751358415831036;  // std dev = 0.000, 62.000 (wgt'ed) examples reached here.  /* #pos=62 */
%   | | else if ( actor(B) )
%   | | | then return -0.10159632948783628;  // std dev = 3.73e-09, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | | | else return 0.4175135841583099;  // std dev = 1.49e-08, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return -0.10159632948783623;  // std dev = 3.80e-08, 56.000 (wgt'ed) examples reached here.  /* #neg=56 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.09269127618926096;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( actor(B) )
%   | | then return -0.09269127618926097;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | | else return 0.3207118471601499;  // std dev = 0.000, 67.000 (wgt'ed) examples reached here.  /* #pos=67 */
%   else return -0.09269127618926107;  // std dev = 0.000, 56.000 (wgt'ed) examples reached here.  /* #neg=56 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.08518475138839687;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( director(B) )
%   | | then return 0.25517224256948967;  // std dev = 0.000, 67.000 (wgt'ed) examples reached here.  /* #pos=67 */
%   | | else return -0.08518475138839687;  // std dev = 3.73e-09, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   else return -0.08518475138839679;  // std dev = 1.83e-08, 56.000 (wgt'ed) examples reached here.  /* #neg=56 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.20975771563253567;  // std dev = 0.000, 62.000 (wgt'ed) examples reached here.  /* #pos=62 */
%   | else if ( genre(A, E) )
%   | | then return -0.07877675473109173;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( actor(B) )
%   | | | then return -0.07877675473109172;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | | | else return 0.20975771563253556;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return -0.07877675473109176;  // std dev = 1.83e-08, 56.000 (wgt'ed) examples reached here.  /* #neg=56 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.1770964977452773;  // std dev = 0.000, 62.000 (wgt'ed) examples reached here.  /* #pos=62 */
%   | else if ( actor(B) )
%   | | then return -0.07324622576333704;  // std dev = 2.63e-09, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | else return 0.17709649774527736;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return -0.07324622576333704;  // std dev = 7.45e-09, 56.000 (wgt'ed) examples reached here.  /* #neg=56 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.15274385809367072;  // std dev = 3.65e-08, 62.000 (wgt'ed) examples reached here.  /* #pos=62 */
%   | else if ( genre(A, E) )
%   | | then return -0.06842697784420272;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( actor(B) )
%   | | | then return -0.06842697784420272;  // std dev = 2.63e-09, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | | | else return 0.15274385809367075;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return -0.06842697784420268;  // std dev = 1.67e-08, 56.000 (wgt'ed) examples reached here.  /* #neg=56 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.13400703000801095;  // std dev = 4.47e-08, 62.000 (wgt'ed) examples reached here.  /* #pos=62 */
%   | else if ( actor(B) )
%   | | then return -0.06419184008202619;  // std dev = 5.27e-09, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | else return 0.13400703000801095;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return -0.06419184008202625;  // std dev = 0.000, 56.000 (wgt'ed) examples reached here.  /* #neg=56 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.094637
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 4.989 seconds
Total inference time: 1.967 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.094637
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 2.0 seconds
Refined model CLL: -0.094637


******************************************
Best model found
******************************************
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.094637
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 12.921 seconds
Total inference time: 1.967 seconds
AUC ROC: 1.0
Total revision time: 12.921
Best scored revision CLL: -0.094637


Dataset: 4_cora_imdb, Fold: 5, Type: Transfer (trRDN-B), Time: 18:02:32
{'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.094637, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 12.921, 'Inference time': 1.967, 'parameter_0.2': {'AUC ROC': 0.982716, 'AUC PR': 0.983099, 'CLL': -0.231503, 'Precision': [1.0, 0.5], 'Recall': 0.777778, 'F1': 0.875, 'Learning time': 4.016, 'Inference time': 1.801}}


Amount of data: 0.4
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;false;false
0;false;haswordvenue(A, I), haswordtitle(J, I).;true;false
0;false,true;haswordtitle(J, K), haswordauthor(L, K).;true;false
0;false,true,true;haswordauthor(L, I).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, A).;false;true
1;true,true,false;title(F, D), venue(F, B).;false;false
1;true,false;haswordvenue(A, G), haswordtitle(H, G).;false;false
1;false;haswordvenue(A, I), haswordtitle(J, I).;true;false
1;false,true;haswordtitle(J, K), haswordauthor(L, K).;true;false
1;false,true,true;haswordvenue(B, K).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;title(F, D), venue(F, B).;false;false
2;true,false;haswordvenue(A, G), haswordtitle(H, G).;false;false
2;false;haswordvenue(B, I), haswordtitle(J, I).;true;false
2;false,true;haswordtitle(J, K), haswordvenue(A, K).;true;false
2;false,true,true;haswordauthor(L, K).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;title(E, D), venue(E, A).;false;true
3;true,true,false;title(F, D), venue(F, B).;false;false
3;true,false;haswordvenue(A, G), haswordtitle(H, G).;false;false
3;false;haswordvenue(A, I), haswordtitle(J, I).;true;false
3;false,true;haswordtitle(J, K), haswordauthor(L, K).;true;false
3;false,true,true;haswordauthor(L, I).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, A).;false;true
4;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
4;true,false;haswordvenue(B, H), haswordtitle(I, H).;false;false
4;false;haswordvenue(B, J), haswordtitle(K, J).;true;false
4;false,true;haswordtitle(K, L), haswordauthor(M, L).;true;false
4;false,true,true;haswordvenue(A, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, A).;false;true
5;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
5;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;false
5;false;haswordvenue(A, J), haswordauthor(K, J).;false;true
5;false,false;haswordvenue(B, L), haswordtitle(M, L).;true;false
5;false,false,true;haswordtitle(M, N), haswordauthor(P, N).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;title(E, D), venue(E, B).;false;true
6;true,true,false;title(F, D), venue(F, A).;false;false
6;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
6;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
6;false;haswordvenue(A, K), haswordauthor(L, K).;false;true
6;false,false;haswordvenue(B, M), haswordtitle(N, M).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
7;true,false;haswordvenue(B, H), haswordtitle(I, H).;false;false
7;false;haswordvenue(A, J), haswordtitle(K, J).;true;false
7;false,true;haswordtitle(K, L), haswordauthor(M, L).;true;false
7;false,true,true;haswordvenue(B, L).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;title(E, D), venue(E, B).;false;true
8;true,true,false;title(F, D), venue(F, A).;false;false
8;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;false
8;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
8;false;haswordvenue(B, K), haswordauthor(L, K).;false;true
8;false,false;haswordvenue(A, M), haswordtitle(N, M).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, B).;false;true
9;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
9;true,false;haswordvenue(A, H), haswordauthor(I, H).;false;true
9;true,false,false;haswordvenue(A, J), haswordtitle(K, J).;false;false
9;false;haswordvenue(A, L), haswordauthor(M, L).;false;true
9;false,false;haswordvenue(B, N), haswordauthor(P, N).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14185106490048777;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995107;  // std dev = 6.42e-07, 118.000 (wgt'ed) examples reached here.  /* #pos=118 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.23024195835532632;  // std dev = 3.170, 43.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=16 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.14185106490048763;  // std dev = 8.54e-09, 103.000 (wgt'ed) examples reached here.  /* #neg=103 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.12544463852839138;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else if ( genre(B, E) )
%   | | then return 0.7194734122109552;  // std dev = 0.000, 118.000 (wgt'ed) examples reached here.  /* #pos=118 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.19984213570973106;  // std dev = 3.170, 43.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=16 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then if ( movie(H, B) )
%   | | then return -0.12544463852839136;  // std dev = 0.000, 103.000 (wgt'ed) examples reached here.  /* #neg=103 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.11231637819360639;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else if ( genre(B, E) )
%   | | then return 0.5553664367462834;  // std dev = 4.54e-07, 118.000 (wgt'ed) examples reached here.  /* #pos=118 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.16945958982356543;  // std dev = 3.170, 43.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=16 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then if ( movie(H, A) )
%   | | then return -0.1123163781936062;  // std dev = 8.01e-09, 103.000 (wgt'ed) examples reached here.  /* #neg=103 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.10159632948783628;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else if ( genre(B, E) )
%   | | then return 0.41751358415830936;  // std dev = 3.37e-07, 118.000 (wgt'ed) examples reached here.  /* #pos=118 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.1406989729073491;  // std dev = 3.170, 43.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=16 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.1015963294878363;  // std dev = 2.28e-09, 103.000 (wgt'ed) examples reached here.  /* #neg=103 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.09269127618926096;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else if ( movie(E, B) )
%   | | then return 0.2656999832188974;  // std dev = 3.374, 161.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=134 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, B) )
%   | then if ( movie(G, A) )
%   | | then return -0.09269127618926093;  // std dev = 5.48e-08, 103.000 (wgt'ed) examples reached here.  /* #neg=103 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.08518475138839687;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else if ( movie(E, B) )
%   | | then return 0.2110234778145551;  // std dev = 3.372, 161.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=134 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.08518475138839682;  // std dev = 5.77e-08, 103.000 (wgt'ed) examples reached here.  /* #neg=103 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.22666733929320443;  // std dev = 1.15e-07, 118.000 (wgt'ed) examples reached here.  /* #pos=118 */
%   | else if ( genre(A, E) )
%   | | then return -0.07877675473109173;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.013858226658502441;  // std dev = 3.170, 43.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=16 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.07877675473109158;  // std dev = 5.96e-08, 103.000 (wgt'ed) examples reached here.  /* #neg=103 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.18940312659489195;  // std dev = 0.000, 118.000 (wgt'ed) examples reached here.  /* #pos=118 */
%   | else if ( movie(E, B) )
%   | | then return 0.0035245005530394986;  // std dev = 3.174, 47.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=16 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then if ( movie(G, B) )
%   | | then return -0.07324622576333707;  // std dev = 0.000, 103.000 (wgt'ed) examples reached here.  /* #neg=103 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.16201703404304588;  // std dev = 0.000, 118.000 (wgt'ed) examples reached here.  /* #pos=118 */
%   | else if ( genre(A, E) )
%   | | then return -0.0734858332914749;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.009852120769336793;  // std dev = 3.170, 43.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=16 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.06842697784420265;  // std dev = 4.94e-08, 103.000 (wgt'ed) examples reached here.  /* #neg=103 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.14120550683670519;  // std dev = 0.000, 118.000 (wgt'ed) examples reached here.  /* #pos=118 */
%   | else if ( movie(E, A) )
%   | | then return 0.0010870569784746952;  // std dev = 3.173, 47.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=16 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.06419184008202626;  // std dev = 0.000, 103.000 (wgt'ed) examples reached here.  /* #neg=103 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 0.982716
   AUC PR    = 0.983099
   CLL	      = -0.225668
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.777778
   F1        = 0.875


Total learning time: 4.689 seconds
Total inference time: 1.807 seconds
AUC ROC: 0.982716


Results scoring model
   AUC ROC   = 0.987971
   AUC PR    = 0.988958
   CLL	      = -0.189707
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.880597
   F1        = 0.936508


Total scoring time: 2.517 seconds
Parameter learned model CLL: -0.189707


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 4, 0], 'true,false,true': [6.42e-07, 0, 118], 'true,false,false,true': [3.17, 27, 16], 'true,false,false,false': [0.0, 0, 0], 'false,true': [8.54e-09, 103, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)', 'false,true': 'movie(H, B)'}, {'true,true': [0.0, 4, 0], 'true,false,true': [0.0, 0, 118], 'true,false,false,true': [3.17, 27, 16], 'true,false,false,false': [0.0, 0, 0], 'false,true,true': [0.0, 103, 0], 'false,true,false': [0.0, 0, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)', 'false,true': 'movie(H, A)'}, {'true,true': [0.0, 4, 0], 'true,false,true': [4.54e-07, 0, 118], 'true,false,false,true': [3.17, 27, 16], 'true,false,false,false': [0.0, 0, 0], 'false,true,true': [8.01e-09, 103, 0], 'false,true,false': [0.0, 0, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 4, 0], 'true,false,true': [3.37e-07, 0, 118], 'true,false,false,true': [3.17, 27, 16], 'true,false,false,false': [0.0, 0, 0], 'false,true': [2.28e-09, 103, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, B)', 'false,true': 'movie(G, A)'}, {'true,true': [0.0, 4, 0], 'true,false,true': [3.374, 27, 134], 'true,false,false': [0.0, 0, 0], 'false,true,true': [5.48e-08, 103, 0], 'false,true,false': [0.0, 0, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, A)'}, {'true,true': [0.0, 4, 0], 'true,false,true': [3.372, 27, 134], 'true,false,false': [0.0, 0, 0], 'false,true': [5.77e-08, 103, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [1.15e-07, 0, 118], 'true,false,true': [0.0, 4, 0], 'true,false,false,true': [3.17, 27, 16], 'true,false,false,false': [0.0, 0, 0], 'false,true': [5.96e-08, 103, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, A)', 'false,true': 'movie(G, B)'}, {'true,true': [0.0, 0, 118], 'true,false,true': [3.174, 31, 16], 'true,false,false': [0.0, 0, 0], 'false,true,true': [0.0, 103, 0], 'false,true,false': [0.0, 0, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 118], 'true,false,true': [0.0, 4, 0], 'true,false,false,true': [3.17, 27, 16], 'true,false,false,false': [0.0, 0, 0], 'false,true': [4.94e-08, 103, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.0, 0, 118], 'true,false,true': [3.173, 31, 16], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 103, 0], 'false,false': [0.0, 0, 0]}]]
[{'': [0.1525803489439901, 7.329627735389383e-17], 'true': [0.0, 0.13957794838162585], 'true,false': [3.4924981927191367e-15, 0.23363980530016176], 'true,false,false': [0.23363980530016176, nan], 'false': [7.329627735389383e-17, nan]}, {'': [0.12425685872121253, -1.0778864316749092e-17], 'true': [0.0, 0.11525608282029288], 'true,false': [-1.2043097216272884e-15, 0.23363980530016237], 'true,false,false': [0.23363980530016237, nan], 'false': [-1.0778864316749092e-17, nan], 'false,true': [-1.0778864316749092e-17, nan]}, {'': [0.09687380859393735, 6.467318590049455e-17], 'true': [0.0, 0.09155237944505946], 'true,false': [1.7462490963595683e-15, 0.2336398053001621], 'true,false,false': [0.2336398053001621, nan], 'false': [6.467318590049455e-17, nan], 'false,true': [6.467318590049455e-17, nan]}, {'': [0.08021180042784498, 6.467318590049456e-18], 'true': [0.0, 0.07740019156086884], 'true,false': [9.634477773018308e-16, 0.23363980530016226], 'true,false,false': [0.23363980530016226, nan], 'false': [6.467318590049456e-18, nan]}, {'': [0.07202968155368059, 2.910293365522255e-17], 'true': [0.0, 0.0707054377728126], 'true,false': [0.0707054377728126, nan], 'false': [2.910293365522255e-17, nan], 'false,true': [2.910293365522255e-17, nan]}, {'': [0.07098818739074245, 3.2336592950247276e-17], 'true': [0.0, 0.07062485536692423], 'true,false': [0.07062485536692423, nan], 'false': [3.2336592950247276e-17, nan]}, {'': [0.07100003789716565, 3.4492365813597093e-17], 'true': [1.1290403640255829e-16, 0.2144237300829698], 'true,false': [0.0, 0.23363980530016204], 'true,false,false': [0.23363980530016204, nan], 'false': [3.4492365813597093e-17, nan]}, {'': [0.06808246934978777, -4.311545726699637e-18], 'true': [-1.0537710064238774e-16, 0.21430382184601654], 'true,false': [0.21430382184601654, nan], 'false': [-4.311545726699637e-18, nan], 'false,true': [-4.311545726699637e-18, nan]}, {'': [0.06620867155261273, 2.3713501496848002e-17], 'true': [-5.268855032119387e-17, 0.21429634378478887], 'true,false': [0.0, 0.23363980530016196], 'true,false,false': [0.23363980530016196, nan], 'false': [2.3713501496848002e-17, nan]}, {'': [0.06501623598777839, -1.6168296475123638e-17], 'true': [-7.526935760170552e-17, 0.21420778962462855], 'true,false': [0.21420778962462855, nan], 'false': [-1.6168296475123638e-17, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(A, D).;true;true
0;true,false;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;true;genre(A, D).;true;true
1;true,false;genre(B, E).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;true;genre(A, D).;true;true
2;true,false;genre(B, E).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;true;genre(A, D).;true;true
3;true,false;genre(B, E).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;true;genre(A, D).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;true;genre(A, D).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(B, D).;true;true
6;true,false;genre(A, E).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;true;genre(B, D).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;true;genre(B, D).;true;true
8;true,false;genre(A, E).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;true;genre(B, D).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14185106490048777;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995107;  // std dev = 6.42e-07, 118.000 (wgt'ed) examples reached here.  /* #pos=118 */
%   | | else if ( actor(B) )
%   | | | then return -0.1418510649004877;  // std dev = 2.36e-08, 27.000 (wgt'ed) examples reached here.  /* #neg=27 */
%   | | | else return 0.8581489350995123;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   else return -0.14185106490048763;  // std dev = 8.69e-08, 103.000 (wgt'ed) examples reached here.  /* #neg=103 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.12544463852839138;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else if ( genre(B, E) )
%   | | then return 0.7194734122109552;  // std dev = 0.000, 118.000 (wgt'ed) examples reached here.  /* #pos=118 */
%   | | else if ( actor(B) )
%   | | | then return -0.12544463852839138;  // std dev = 0.000, 27.000 (wgt'ed) examples reached here.  /* #neg=27 */
%   | | | else return 0.7194734122109542;  // std dev = 5.96e-08, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   else return -0.12544463852839136;  // std dev = 0.000, 103.000 (wgt'ed) examples reached here.  /* #neg=103 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.11231637819360639;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else if ( genre(B, E) )
%   | | then return 0.5553664367462834;  // std dev = 4.54e-07, 118.000 (wgt'ed) examples reached here.  /* #pos=118 */
%   | | else if ( actor(B) )
%   | | | then return -0.1123163781936064;  // std dev = 0.000, 27.000 (wgt'ed) examples reached here.  /* #neg=27 */
%   | | | else return 0.5553664367462846;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   else return -0.1123163781936062;  // std dev = 8.16e-08, 103.000 (wgt'ed) examples reached here.  /* #neg=103 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.10159632948783628;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else if ( genre(B, E) )
%   | | then return 0.41751358415830936;  // std dev = 3.37e-07, 118.000 (wgt'ed) examples reached here.  /* #pos=118 */
%   | | else if ( actor(B) )
%   | | | then return -0.10159632948783635;  // std dev = 0.000, 27.000 (wgt'ed) examples reached here.  /* #neg=27 */
%   | | | else return 0.4175135841583098;  // std dev = 5.16e-08, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   else return -0.1015963294878363;  // std dev = 2.58e-08, 103.000 (wgt'ed) examples reached here.  /* #neg=103 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.09269127618926096;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else if ( actor(B) )
%   | | then return -0.09269127618926097;  // std dev = 5.27e-09, 27.000 (wgt'ed) examples reached here.  /* #neg=27 */
%   | | else return 0.32071184716014967;  // std dev = 2.56e-07, 134.000 (wgt'ed) examples reached here.  /* #pos=134 */
%   else return -0.09269127618926093;  // std dev = 5.48e-08, 103.000 (wgt'ed) examples reached here.  /* #neg=103 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.08518475138839687;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else if ( director(B) )
%   | | then return 0.2551722425694896;  // std dev = 1.12e-07, 134.000 (wgt'ed) examples reached here.  /* #pos=134 */
%   | | else return -0.08518475138839682;  // std dev = 1.83e-08, 27.000 (wgt'ed) examples reached here.  /* #neg=27 */
%   else return -0.08518475138839682;  // std dev = 5.77e-08, 103.000 (wgt'ed) examples reached here.  /* #neg=103 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.20975771563253542;  // std dev = 1.86e-07, 118.000 (wgt'ed) examples reached here.  /* #pos=118 */
%   | else if ( genre(A, E) )
%   | | then return -0.07877675473109173;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else if ( actor(B) )
%   | | | then return -0.07877675473109175;  // std dev = 0.000, 27.000 (wgt'ed) examples reached here.  /* #neg=27 */
%   | | | else return 0.20975771563253562;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   else return -0.07877675473109158;  // std dev = 5.96e-08, 103.000 (wgt'ed) examples reached here.  /* #neg=103 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.1770964977452781;  // std dev = 0.000, 118.000 (wgt'ed) examples reached here.  /* #pos=118 */
%   | else if ( actor(B) )
%   | | then return -0.07324622576333704;  // std dev = 7.45e-09, 31.000 (wgt'ed) examples reached here.  /* #neg=31 */
%   | | else return 0.17709649774527741;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   else return -0.07324622576333707;  // std dev = 0.000, 103.000 (wgt'ed) examples reached here.  /* #neg=103 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.1527438580936714;  // std dev = 0.000, 118.000 (wgt'ed) examples reached here.  /* #pos=118 */
%   | else if ( genre(A, E) )
%   | | then return -0.06842697784420272;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else if ( actor(B) )
%   | | | then return -0.06842697784420276;  // std dev = 0.000, 27.000 (wgt'ed) examples reached here.  /* #neg=27 */
%   | | | else return 0.1527438580936708;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   else return -0.06842697784420265;  // std dev = 4.94e-08, 103.000 (wgt'ed) examples reached here.  /* #neg=103 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.13400703000801106;  // std dev = 5.16e-08, 118.000 (wgt'ed) examples reached here.  /* #pos=118 */
%   | else if ( actor(B) )
%   | | then return -0.06419184008202622;  // std dev = 0.000, 31.000 (wgt'ed) examples reached here.  /* #neg=31 */
%   | | else return 0.13400703000801095;  // std dev = 7.45e-09, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   else return -0.06419184008202626;  // std dev = 0.000, 103.000 (wgt'ed) examples reached here.  /* #neg=103 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.094637
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 6.45 seconds
Total inference time: 1.682 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.094637
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 2.069 seconds
Refined model CLL: -0.094637


******************************************
Best model found
******************************************
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.094637
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 15.724999999999998 seconds
Total inference time: 1.682 seconds
AUC ROC: 1.0
Total revision time: 15.724999999999998
Best scored revision CLL: -0.094637


Dataset: 4_cora_imdb, Fold: 5, Type: Transfer (trRDN-B), Time: 18:02:52
{'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.094637, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 15.724999999999998, 'Inference time': 1.682, 'parameter_0.4': {'AUC ROC': 0.982716, 'AUC PR': 0.983099, 'CLL': -0.225668, 'Precision': [1.0, 0.5], 'Recall': 0.777778, 'F1': 0.875, 'Learning time': 4.689, 'Inference time': 1.807}}


Amount of data: 0.6
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;false;false
0;false;haswordvenue(A, I), haswordtitle(J, I).;true;false
0;false,true;haswordtitle(J, K), haswordauthor(L, K).;true;false
0;false,true,true;haswordauthor(L, I).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, A).;false;true
1;true,true,false;title(F, D), venue(F, B).;false;false
1;true,false;haswordvenue(A, G), haswordtitle(H, G).;false;false
1;false;haswordvenue(A, I), haswordtitle(J, I).;true;false
1;false,true;haswordtitle(J, K), haswordauthor(L, K).;true;false
1;false,true,true;haswordvenue(B, K).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;title(F, D), venue(F, B).;false;false
2;true,false;haswordvenue(A, G), haswordtitle(H, G).;false;false
2;false;haswordvenue(B, I), haswordtitle(J, I).;true;false
2;false,true;haswordtitle(J, K), haswordvenue(A, K).;true;false
2;false,true,true;haswordauthor(L, K).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;title(E, D), venue(E, A).;false;true
3;true,true,false;title(F, D), venue(F, B).;false;false
3;true,false;haswordvenue(A, G), haswordtitle(H, G).;false;false
3;false;haswordvenue(A, I), haswordtitle(J, I).;true;false
3;false,true;haswordtitle(J, K), haswordauthor(L, K).;true;false
3;false,true,true;haswordauthor(L, I).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, A).;false;true
4;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
4;true,false;haswordvenue(B, H), haswordtitle(I, H).;false;false
4;false;haswordvenue(B, J), haswordtitle(K, J).;true;false
4;false,true;haswordtitle(K, L), haswordauthor(M, L).;true;false
4;false,true,true;haswordvenue(A, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, A).;false;true
5;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
5;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;false
5;false;haswordvenue(A, J), haswordauthor(K, J).;false;true
5;false,false;haswordvenue(B, L), haswordtitle(M, L).;true;false
5;false,false,true;haswordtitle(M, N), haswordauthor(P, N).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;title(E, D), venue(E, B).;false;true
6;true,true,false;title(F, D), venue(F, A).;false;false
6;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
6;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
6;false;haswordvenue(A, K), haswordauthor(L, K).;false;true
6;false,false;haswordvenue(B, M), haswordtitle(N, M).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
7;true,false;haswordvenue(B, H), haswordtitle(I, H).;false;false
7;false;haswordvenue(A, J), haswordtitle(K, J).;true;false
7;false,true;haswordtitle(K, L), haswordauthor(M, L).;true;false
7;false,true,true;haswordvenue(B, L).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;title(E, D), venue(E, B).;false;true
8;true,true,false;title(F, D), venue(F, A).;false;false
8;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;false
8;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
8;false;haswordvenue(B, K), haswordauthor(L, K).;false;true
8;false,false;haswordvenue(A, M), haswordtitle(N, M).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, B).;false;true
9;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
9;true,false;haswordvenue(A, H), haswordauthor(I, H).;false;true
9;true,false,false;haswordvenue(A, J), haswordtitle(K, J).;false;false
9;false;haswordvenue(A, L), haswordauthor(M, L).;false;true
9;false,false;haswordvenue(B, N), haswordauthor(P, N).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14185106490048777;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995095;  // std dev = 1.09e-06, 173.000 (wgt'ed) examples reached here.  /* #pos=173 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.2846195233348052;  // std dev = 4.078, 68.000 (wgt'ed) examples reached here.  /* #neg=39 #pos=29 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.14185106490048813;  // std dev = 0.000, 158.000 (wgt'ed) examples reached here.  /* #neg=158 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.12544463852839138;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else if ( genre(B, E) )
%   | | then return 0.7194734122109566;  // std dev = 0.000, 173.000 (wgt'ed) examples reached here.  /* #pos=173 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.24632781299051956;  // std dev = 4.078, 68.000 (wgt'ed) examples reached here.  /* #neg=39 #pos=29 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then if ( movie(H, B) )
%   | | then return -0.12544463852839136;  // std dev = 3.65e-08, 158.000 (wgt'ed) examples reached here.  /* #neg=158 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.11231637819360638;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else if ( genre(B, E) )
%   | | then return 0.5553664367462833;  // std dev = 5.72e-07, 173.000 (wgt'ed) examples reached here.  /* #pos=173 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.20705112466130227;  // std dev = 4.078, 68.000 (wgt'ed) examples reached here.  /* #neg=39 #pos=29 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then if ( movie(H, A) )
%   | | then return -0.11231637819360632;  // std dev = 6.32e-09, 158.000 (wgt'ed) examples reached here.  /* #neg=158 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.10159632948783633;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else if ( genre(B, E) )
%   | | then return 0.4175135841583094;  // std dev = 4.00e-07, 173.000 (wgt'ed) examples reached here.  /* #pos=173 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.16954344440698138;  // std dev = 4.078, 68.000 (wgt'ed) examples reached here.  /* #neg=39 #pos=29 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.10159632948783648;  // std dev = 0.000, 158.000 (wgt'ed) examples reached here.  /* #neg=158 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.09269127618926098;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else if ( movie(E, B) )
%   | | then return 0.26855667035266517;  // std dev = 4.278, 241.000 (wgt'ed) examples reached here.  /* #neg=39 #pos=202 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, B) )
%   | then if ( movie(G, A) )
%   | | then return -0.09269127618926067;  // std dev = 8.02e-08, 158.000 (wgt'ed) examples reached here.  /* #neg=158 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.08518475138839687;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else if ( movie(E, B) )
%   | | then return 0.21226813119293422;  // std dev = 4.284, 241.000 (wgt'ed) examples reached here.  /* #neg=39 #pos=202 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.08518475138839678;  // std dev = 6.66e-08, 158.000 (wgt'ed) examples reached here.  /* #neg=158 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.22594922439898765;  // std dev = 0.000, 173.000 (wgt'ed) examples reached here.  /* #pos=173 */
%   | else if ( genre(A, E) )
%   | | then return -0.07877675473109177;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.027950035382915225;  // std dev = 4.078, 68.000 (wgt'ed) examples reached here.  /* #neg=39 #pos=29 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.0787767547310915;  // std dev = 8.49e-08, 158.000 (wgt'ed) examples reached here.  /* #neg=158 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.18888424712267504;  // std dev = 0.000, 173.000 (wgt'ed) examples reached here.  /* #pos=173 */
%   | else if ( movie(E, B) )
%   | | then return 0.014760646529290312;  // std dev = 4.083, 73.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=29 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then if ( movie(G, B) )
%   | | then return -0.07324622576333678;  // std dev = 8.94e-08, 158.000 (wgt'ed) examples reached here.  /* #neg=158 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.16162852526658872;  // std dev = 0.000, 173.000 (wgt'ed) examples reached here.  /* #pos=173 */
%   | else if ( genre(A, E) )
%   | | then return -0.07425452956277126;  // std dev = 2.63e-09, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.017669205907991304;  // std dev = 4.078, 68.000 (wgt'ed) examples reached here.  /* #neg=39 #pos=29 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.06842697784420262;  // std dev = 6.99e-08, 158.000 (wgt'ed) examples reached here.  /* #neg=158 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.14090553729667382;  // std dev = 0.000, 173.000 (wgt'ed) examples reached here.  /* #pos=173 */
%   | else if ( movie(E, A) )
%   | | then return 0.007727635126617919;  // std dev = 4.082, 73.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=29 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.06419184008202626;  // std dev = 0.000, 158.000 (wgt'ed) examples reached here.  /* #neg=158 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 0.982716
   AUC PR    = 0.983099
   CLL	      = -0.217655
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.777778
   F1        = 0.875


Total learning time: 5.247 seconds
Total inference time: 1.535 seconds
AUC ROC: 0.982716


Results scoring model
   AUC ROC   = 0.986141
   AUC PR    = 0.987106
   CLL	      = -0.197198
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.856436
   F1        = 0.922667


Total scoring time: 2.32 seconds
Parameter learned model CLL: -0.197198


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 5, 0], 'true,false,true': [1.09e-06, 0, 173], 'true,false,false,true': [4.078, 39, 29], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 158, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)', 'false,true': 'movie(H, B)'}, {'true,true': [0.0, 5, 0], 'true,false,true': [0.0, 0, 173], 'true,false,false,true': [4.078, 39, 29], 'true,false,false,false': [0.0, 0, 0], 'false,true,true': [3.65e-08, 158, 0], 'false,true,false': [0.0, 0, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)', 'false,true': 'movie(H, A)'}, {'true,true': [0.0, 5, 0], 'true,false,true': [5.72e-07, 0, 173], 'true,false,false,true': [4.078, 39, 29], 'true,false,false,false': [0.0, 0, 0], 'false,true,true': [6.32e-09, 158, 0], 'false,true,false': [0.0, 0, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 5, 0], 'true,false,true': [4e-07, 0, 173], 'true,false,false,true': [4.078, 39, 29], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 158, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, B)', 'false,true': 'movie(G, A)'}, {'true,true': [0.0, 5, 0], 'true,false,true': [4.278, 39, 202], 'true,false,false': [0.0, 0, 0], 'false,true,true': [8.02e-08, 158, 0], 'false,true,false': [0.0, 0, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, A)'}, {'true,true': [0.0, 5, 0], 'true,false,true': [4.284, 39, 202], 'true,false,false': [0.0, 0, 0], 'false,true': [6.66e-08, 158, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 0, 173], 'true,false,true': [0.0, 5, 0], 'true,false,false,true': [4.078, 39, 29], 'true,false,false,false': [0.0, 0, 0], 'false,true': [8.49e-08, 158, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, A)', 'false,true': 'movie(G, B)'}, {'true,true': [0.0, 0, 173], 'true,false,true': [4.083, 44, 29], 'true,false,false': [0.0, 0, 0], 'false,true,true': [8.94e-08, 158, 0], 'false,true,false': [0.0, 0, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 173], 'true,false,true': [2.63e-09, 5, 0], 'true,false,false,true': [4.078, 39, 29], 'true,false,false,false': [0.0, 0, 0], 'false,true': [6.99e-08, 158, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.0, 0, 173], 'true,false,true': [4.082, 44, 29], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 158, 0], 'false,false': [0.0, 0, 0]}]]
[{'': [0.1468702491903021, -1.4053456007913375e-16], 'true': [-2.7755575615628915e-18, 0.13563816049999672], 'true,false': [6.8179245165420015e-15, 0.24459342560553776], 'true,false,false': [0.24459342560553776, nan], 'false': [-1.4053456007913375e-16, nan]}, {'': [0.12211038759319812, 8.432073604748025e-18], 'true': [0.0, 0.11435694290148024], 'true,false': [-3.121459417212001e-15, 0.24459342560553654], 'true,false,false': [0.24459342560553654, nan], 'false': [8.432073604748025e-18, nan], 'false,true': [8.432073604748025e-18, nan]}, {'': [0.09814106919953537, 4.0755022422948786e-17], 'true': [0.0, 0.0935873586724133], 'true,false': [1.8893043841020003e-15, 0.24459342560553593], 'true,false,false': [0.24459342560553593, nan], 'false': [4.0755022422948786e-17, nan], 'false,true': [4.0755022422948786e-17, nan]}, {'': [0.08382922408835859, -6.74565888379842e-17], 'true': [0.0, 0.08146822355733992], 'true,false': [9.241162748325002e-16, 0.24459342560553718], 'true,false,false': [0.24459342560553718, nan], 'false': [-6.74565888379842e-17, nan]}, {'': [0.0769894745801579, 4.0755022422948786e-17], 'true': [0.0, 0.0759343259562379], 'true,false': [0.0759343259562379, nan], 'false': [4.0755022422948786e-17, nan], 'false,true': [4.0755022422948786e-17, nan]}, {'': [0.07635899369756258, 2.810691201582675e-17], 'true': [0.0, 0.07614486743392682], 'true,false': [0.07614486743392682, nan], 'false': [2.810691201582675e-17, nan]}, {'': [0.07662346835545947, 4.567373202571847e-17], 'true': [-4.723260960255001e-16, 0.22856719296930256], 'true,false': [-1.3877787807814458e-18, 0.24459342560553582], 'true,false,false': [0.24459342560553582, nan], 'false': [4.567373202571847e-17, nan]}, {'': [0.07410742490185496, 5.0592441628488145e-17], 'true': [-3.1317273758212507e-16, 0.22840995195272293], 'true,false': [0.22840995195272293, nan], 'false': [5.0592441628488145e-17, nan], 'false,true': [5.0592441628488145e-17, nan]}, {'': [0.07248267592053613, 3.091760321740942e-17], 'true': [-2.1049315148962505e-16, 0.22837957507496073], 'true,false': [1.3877787807814458e-18, 0.24459342560553587], 'true,false,false': [0.24459342560553587, nan], 'false': [3.091760321740942e-17, nan]}, {'': [0.07144205743188792, -8.432073604748025e-18], 'true': [-8.984463783093753e-17, 0.2282768202249756], 'true,false': [0.2282768202249756, nan], 'false': [-8.432073604748025e-18, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(A, D).;true;true
0;true,false;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;true;genre(A, D).;true;true
1;true,false;genre(B, E).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;true;genre(A, D).;true;true
2;true,false;genre(B, E).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;true;genre(A, D).;true;true
3;true,false;genre(B, E).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;true;genre(A, D).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;true;genre(A, D).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(B, D).;true;true
6;true,false;genre(A, E).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;true;genre(B, D).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;true;genre(B, D).;true;true
8;true,false;genre(A, E).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;true;genre(B, D).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14185106490048777;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995095;  // std dev = 1.09e-06, 173.000 (wgt'ed) examples reached here.  /* #pos=173 */
%   | | else if ( actor(B) )
%   | | | then return -0.14185106490048768;  // std dev = 4.08e-08, 39.000 (wgt'ed) examples reached here.  /* #neg=39 */
%   | | | else return 0.8581489350995117;  // std dev = 1.79e-07, 29.000 (wgt'ed) examples reached here.  /* #pos=29 */
%   else return -0.14185106490048813;  // std dev = 0.000, 158.000 (wgt'ed) examples reached here.  /* #neg=158 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.12544463852839138;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else if ( genre(B, E) )
%   | | then return 0.7194734122109566;  // std dev = 0.000, 173.000 (wgt'ed) examples reached here.  /* #pos=173 */
%   | | else if ( actor(B) )
%   | | | then return -0.1254446385283915;  // std dev = 0.000, 39.000 (wgt'ed) examples reached here.  /* #neg=39 */
%   | | | else return 0.7194734122109546;  // std dev = 0.000, 29.000 (wgt'ed) examples reached here.  /* #pos=29 */
%   else return -0.12544463852839136;  // std dev = 3.65e-08, 158.000 (wgt'ed) examples reached here.  /* #neg=158 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.11231637819360638;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else if ( genre(B, E) )
%   | | then return 0.5553664367462833;  // std dev = 5.72e-07, 173.000 (wgt'ed) examples reached here.  /* #pos=173 */
%   | | else if ( actor(B) )
%   | | | then return -0.11231637819360639;  // std dev = 0.000, 39.000 (wgt'ed) examples reached here.  /* #neg=39 */
%   | | | else return 0.5553664367462846;  // std dev = 0.000, 29.000 (wgt'ed) examples reached here.  /* #pos=29 */
%   else return -0.11231637819360632;  // std dev = 8.02e-08, 158.000 (wgt'ed) examples reached here.  /* #neg=158 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.10159632948783633;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else if ( genre(B, E) )
%   | | then return 0.4175135841583094;  // std dev = 4.00e-07, 173.000 (wgt'ed) examples reached here.  /* #pos=173 */
%   | | else if ( actor(B) )
%   | | | then return -0.10159632948783634;  // std dev = 0.000, 39.000 (wgt'ed) examples reached here.  /* #neg=39 */
%   | | | else return 0.4175135841583101;  // std dev = 0.000, 29.000 (wgt'ed) examples reached here.  /* #pos=29 */
%   else return -0.10159632948783648;  // std dev = 0.000, 158.000 (wgt'ed) examples reached here.  /* #neg=158 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.09269127618926098;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else if ( actor(B) )
%   | | then return -0.092691276189261;  // std dev = 0.000, 39.000 (wgt'ed) examples reached here.  /* #neg=39 */
%   | | else return 0.32071184716014906;  // std dev = 4.38e-07, 202.000 (wgt'ed) examples reached here.  /* #pos=202 */
%   else return -0.09269127618926067;  // std dev = 8.02e-08, 158.000 (wgt'ed) examples reached here.  /* #neg=158 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.08518475138839687;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else if ( director(B) )
%   | | then return 0.25517224256949067;  // std dev = 0.000, 202.000 (wgt'ed) examples reached here.  /* #pos=202 */
%   | | else return -0.08518475138839679;  // std dev = 1.67e-08, 39.000 (wgt'ed) examples reached here.  /* #neg=39 */
%   else return -0.08518475138839678;  // std dev = 6.66e-08, 158.000 (wgt'ed) examples reached here.  /* #neg=158 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.2097577156325351;  // std dev = 2.81e-07, 173.000 (wgt'ed) examples reached here.  /* #pos=173 */
%   | else if ( genre(A, E) )
%   | | then return -0.07877675473109177;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( actor(B) )
%   | | | then return -0.07877675473109177;  // std dev = 0.000, 39.000 (wgt'ed) examples reached here.  /* #neg=39 */
%   | | | else return 0.20975771563253548;  // std dev = 3.33e-08, 29.000 (wgt'ed) examples reached here.  /* #pos=29 */
%   else return -0.0787767547310915;  // std dev = 8.49e-08, 158.000 (wgt'ed) examples reached here.  /* #neg=158 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.17709649774527822;  // std dev = 0.000, 173.000 (wgt'ed) examples reached here.  /* #pos=173 */
%   | else if ( actor(B) )
%   | | then return -0.07324622576333704;  // std dev = 1.18e-08, 44.000 (wgt'ed) examples reached here.  /* #neg=44 */
%   | | else return 0.17709649774527705;  // std dev = 2.11e-08, 29.000 (wgt'ed) examples reached here.  /* #pos=29 */
%   else return -0.07324622576333678;  // std dev = 8.94e-08, 158.000 (wgt'ed) examples reached here.  /* #neg=158 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.1527438580936715;  // std dev = 0.000, 173.000 (wgt'ed) examples reached here.  /* #pos=173 */
%   | else if ( genre(A, E) )
%   | | then return -0.06842697784420272;  // std dev = 1.86e-09, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( actor(B) )
%   | | | then return -0.06842697784420272;  // std dev = 0.000, 39.000 (wgt'ed) examples reached here.  /* #neg=39 */
%   | | | else return 0.15274385809367083;  // std dev = 0.000, 29.000 (wgt'ed) examples reached here.  /* #pos=29 */
%   else return -0.06842697784420262;  // std dev = 6.99e-08, 158.000 (wgt'ed) examples reached here.  /* #neg=158 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.13400703000801098;  // std dev = 7.88e-08, 173.000 (wgt'ed) examples reached here.  /* #pos=173 */
%   | else if ( actor(B) )
%   | | then return -0.06419184008202623;  // std dev = 0.000, 44.000 (wgt'ed) examples reached here.  /* #neg=44 */
%   | | else return 0.13400703000801084;  // std dev = 2.98e-08, 29.000 (wgt'ed) examples reached here.  /* #pos=29 */
%   else return -0.06419184008202626;  // std dev = 0.000, 158.000 (wgt'ed) examples reached here.  /* #neg=158 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.094637
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 6.927 seconds
Total inference time: 1.75 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.094637
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 2.402 seconds
Refined model CLL: -0.094637


******************************************
Best model found
******************************************
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.094637
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 16.896 seconds
Total inference time: 1.75 seconds
AUC ROC: 1.0
Total revision time: 16.896
Best scored revision CLL: -0.094637


Dataset: 4_cora_imdb, Fold: 5, Type: Transfer (trRDN-B), Time: 18:03:14
{'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.094637, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 16.896, 'Inference time': 1.75, 'parameter_0.6': {'AUC ROC': 0.982716, 'AUC PR': 0.983099, 'CLL': -0.217655, 'Precision': [1.0, 0.5], 'Recall': 0.777778, 'F1': 0.875, 'Learning time': 5.247, 'Inference time': 1.535}}


Amount of data: 0.8
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;false;false
0;false;haswordvenue(A, I), haswordtitle(J, I).;true;false
0;false,true;haswordtitle(J, K), haswordauthor(L, K).;true;false
0;false,true,true;haswordauthor(L, I).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, A).;false;true
1;true,true,false;title(F, D), venue(F, B).;false;false
1;true,false;haswordvenue(A, G), haswordtitle(H, G).;false;false
1;false;haswordvenue(A, I), haswordtitle(J, I).;true;false
1;false,true;haswordtitle(J, K), haswordauthor(L, K).;true;false
1;false,true,true;haswordvenue(B, K).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;title(F, D), venue(F, B).;false;false
2;true,false;haswordvenue(A, G), haswordtitle(H, G).;false;false
2;false;haswordvenue(B, I), haswordtitle(J, I).;true;false
2;false,true;haswordtitle(J, K), haswordvenue(A, K).;true;false
2;false,true,true;haswordauthor(L, K).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;title(E, D), venue(E, A).;false;true
3;true,true,false;title(F, D), venue(F, B).;false;false
3;true,false;haswordvenue(A, G), haswordtitle(H, G).;false;false
3;false;haswordvenue(A, I), haswordtitle(J, I).;true;false
3;false,true;haswordtitle(J, K), haswordauthor(L, K).;true;false
3;false,true,true;haswordauthor(L, I).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, A).;false;true
4;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
4;true,false;haswordvenue(B, H), haswordtitle(I, H).;false;false
4;false;haswordvenue(B, J), haswordtitle(K, J).;true;false
4;false,true;haswordtitle(K, L), haswordauthor(M, L).;true;false
4;false,true,true;haswordvenue(A, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, A).;false;true
5;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
5;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;false
5;false;haswordvenue(A, J), haswordauthor(K, J).;false;true
5;false,false;haswordvenue(B, L), haswordtitle(M, L).;true;false
5;false,false,true;haswordtitle(M, N), haswordauthor(P, N).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;title(E, D), venue(E, B).;false;true
6;true,true,false;title(F, D), venue(F, A).;false;false
6;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
6;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
6;false;haswordvenue(A, K), haswordauthor(L, K).;false;true
6;false,false;haswordvenue(B, M), haswordtitle(N, M).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
7;true,false;haswordvenue(B, H), haswordtitle(I, H).;false;false
7;false;haswordvenue(A, J), haswordtitle(K, J).;true;false
7;false,true;haswordtitle(K, L), haswordauthor(M, L).;true;false
7;false,true,true;haswordvenue(B, L).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;title(E, D), venue(E, B).;false;true
8;true,true,false;title(F, D), venue(F, A).;false;false
8;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;false
8;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
8;false;haswordvenue(B, K), haswordauthor(L, K).;false;true
8;false,false;haswordvenue(A, M), haswordtitle(N, M).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, B).;false;true
9;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
9;true,false;haswordvenue(A, H), haswordauthor(I, H).;false;true
9;true,false,false;haswordvenue(A, J), haswordtitle(K, J).;false;false
9;false;haswordvenue(A, L), haswordauthor(M, L).;false;true
9;false,false;haswordvenue(B, N), haswordauthor(P, N).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1418510649004878;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995088;  // std dev = 1.07e-06, 234.000 (wgt'ed) examples reached here.  /* #pos=234 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.2427643197148956;  // std dev = 4.641, 91.000 (wgt'ed) examples reached here.  /* #neg=56 #pos=35 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.14185106490048843;  // std dev = 0.000, 205.000 (wgt'ed) examples reached here.  /* #neg=205 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.12544463852839138;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else if ( genre(B, E) )
%   | | then return 0.7194734122109573;  // std dev = 0.000, 234.000 (wgt'ed) examples reached here.  /* #pos=234 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.21057171779917386;  // std dev = 4.641, 91.000 (wgt'ed) examples reached here.  /* #neg=56 #pos=35 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then if ( movie(H, B) )
%   | | then return -0.1254446385283917;  // std dev = 0.000, 205.000 (wgt'ed) examples reached here.  /* #neg=205 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.11231637819360639;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else if ( genre(B, E) )
%   | | then return 0.5553664367462832;  // std dev = 5.33e-07, 234.000 (wgt'ed) examples reached here.  /* #pos=234 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.17819907632636625;  // std dev = 4.641, 91.000 (wgt'ed) examples reached here.  /* #neg=56 #pos=35 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then if ( movie(H, A) )
%   | | then return -0.11231637819360664;  // std dev = 0.000, 205.000 (wgt'ed) examples reached here.  /* #neg=205 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.10159632948783627;  // std dev = 3.73e-09, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else if ( genre(B, E) )
%   | | then return 0.4175135841583107;  // std dev = 0.000, 234.000 (wgt'ed) examples reached here.  /* #pos=234 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.1474828092189576;  // std dev = 4.641, 91.000 (wgt'ed) examples reached here.  /* #neg=56 #pos=35 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.10159632948783653;  // std dev = 0.000, 205.000 (wgt'ed) examples reached here.  /* #neg=205 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.09269127618926097;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else if ( movie(E, B) )
%   | | then return 0.26445071620769933;  // std dev = 4.918, 325.000 (wgt'ed) examples reached here.  /* #neg=56 #pos=269 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, B) )
%   | then if ( movie(G, A) )
%   | | then return -0.09269127618926051;  // std dev = 6.14e-08, 205.000 (wgt'ed) examples reached here.  /* #neg=205 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.08518475138839687;  // std dev = 3.73e-09, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else if ( movie(E, B) )
%   | | then return 0.20978874188824448;  // std dev = 4.917, 325.000 (wgt'ed) examples reached here.  /* #neg=56 #pos=269 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.08518475138839678;  // std dev = 7.74e-08, 205.000 (wgt'ed) examples reached here.  /* #neg=205 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.22710305392988114;  // std dev = 3.60e-07, 234.000 (wgt'ed) examples reached here.  /* #pos=234 */
%   | else if ( genre(A, E) )
%   | | then return -0.07877675473109173;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.017994908620854396;  // std dev = 4.641, 91.000 (wgt'ed) examples reached here.  /* #neg=56 #pos=35 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.07877675473109146;  // std dev = 7.15e-08, 205.000 (wgt'ed) examples reached here.  /* #neg=205 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.1897177995243718;  // std dev = 1.58e-07, 234.000 (wgt'ed) examples reached here.  /* #pos=234 */
%   | else if ( movie(E, B) )
%   | | then return 0.00677181914574496;  // std dev = 4.647, 99.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=35 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then if ( movie(G, B) )
%   | | then return -0.07324622576333664;  // std dev = 1.23e-07, 205.000 (wgt'ed) examples reached here.  /* #neg=205 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.16225254062546893;  // std dev = 0.000, 234.000 (wgt'ed) examples reached here.  /* #pos=234 */
%   | else if ( genre(A, E) )
%   | | then return -0.07370723559295621;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.012225064150535913;  // std dev = 4.641, 91.000 (wgt'ed) examples reached here.  /* #neg=56 #pos=35 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.06842697784420262;  // std dev = 8.36e-08, 205.000 (wgt'ed) examples reached here.  /* #neg=205 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.14138727493240127;  // std dev = 0.000, 234.000 (wgt'ed) examples reached here.  /* #pos=234 */
%   | else if ( movie(E, A) )
%   | | then return 0.003044754273961184;  // std dev = 4.646, 99.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=35 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.06419184008202626;  // std dev = 0.000, 205.000 (wgt'ed) examples reached here.  /* #neg=205 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 0.982716
   AUC PR    = 0.983099
   CLL	      = -0.22376
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.777778
   F1        = 0.875


Total learning time: 5.848 seconds
Total inference time: 1.488 seconds
AUC ROC: 0.982716


Results scoring model
   AUC ROC   = 0.986457
   AUC PR    = 0.987568
   CLL	      = -0.195662
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.869888
   F1        = 0.930417


Total scoring time: 2.734 seconds
Parameter learned model CLL: -0.195662


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 8, 0], 'true,false,true': [1.07e-06, 0, 234], 'true,false,false,true': [4.641, 56, 35], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 205, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)', 'false,true': 'movie(H, B)'}, {'true,true': [0.0, 8, 0], 'true,false,true': [0.0, 0, 234], 'true,false,false,true': [4.641, 56, 35], 'true,false,false,false': [0.0, 0, 0], 'false,true,true': [0.0, 205, 0], 'false,true,false': [0.0, 0, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)', 'false,true': 'movie(H, A)'}, {'true,true': [0.0, 8, 0], 'true,false,true': [5.33e-07, 0, 234], 'true,false,false,true': [4.641, 56, 35], 'true,false,false,false': [0.0, 0, 0], 'false,true,true': [0.0, 205, 0], 'false,true,false': [0.0, 0, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [3.73e-09, 8, 0], 'true,false,true': [0.0, 0, 234], 'true,false,false,true': [4.641, 56, 35], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 205, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, B)', 'false,true': 'movie(G, A)'}, {'true,true': [0.0, 8, 0], 'true,false,true': [4.918, 56, 269], 'true,false,false': [0.0, 0, 0], 'false,true,true': [6.14e-08, 205, 0], 'false,true,false': [0.0, 0, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, A)'}, {'true,true': [3.73e-09, 8, 0], 'true,false,true': [4.917, 56, 269], 'true,false,false': [0.0, 0, 0], 'false,true': [7.74e-08, 205, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [3.6e-07, 0, 234], 'true,false,true': [0.0, 8, 0], 'true,false,false,true': [4.641, 56, 35], 'true,false,false,false': [0.0, 0, 0], 'false,true': [7.15e-08, 205, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, A)', 'false,true': 'movie(G, B)'}, {'true,true': [1.58e-07, 0, 234], 'true,false,true': [4.647, 64, 35], 'true,false,false': [0.0, 0, 0], 'false,true,true': [1.23e-07, 205, 0], 'false,true,false': [0.0, 0, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 234], 'true,false,true': [0.0, 8, 0], 'true,false,false,true': [4.641, 56, 35], 'true,false,false,false': [0.0, 0, 0], 'false,true': [8.36e-08, 205, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.0, 0, 234], 'true,false,true': [4.646, 64, 35], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 205, 0], 'false,false': [0.0, 0, 0]}]]
[{'': [0.15525435345255548, -2.38291771139058e-16], 'true': [-6.938893903907228e-18, 0.14261775147929387], 'true,false': [4.8584118684451296e-15, 0.2366863905325459], 'true,false,false': [0.2366863905325459, nan], 'false': [-2.38291771139058e-16, nan]}, {'': [0.12720503886280773, -5.415722071342227e-17], 'true': [0.0, 0.11848274575946456], 'true,false': [-4.12965008817836e-15, 0.23668639053254314], 'true,false,false': [0.23668639053254314, nan], 'false': [-5.415722071342227e-17, nan], 'false,true': [-5.415722071342227e-17, nan]}, {'': [0.10007729510950746, -4.982464305634849e-17], 'true': [-1.734723475976807e-18, 0.09495084125076403], 'true,false': [1.2146029671112824e-15, 0.2366863905325444], 'true,false,false': [0.2366863905325444, nan], 'false': [-4.982464305634849e-17, nan], 'false,true': [-4.982464305634849e-17, nan]}, {'': [0.08363874687045529, -8.881784197001253e-17], 'true': [1.734723475976807e-18, 0.080972179823045], 'true,false': [-1.2146029671112825e-16, 0.23668639053254364], 'true,false,false': [0.23668639053254364, nan], 'false': [-8.881784197001253e-17, nan]}, {'': [0.07561456280118584, 1.8413455042563573e-17], 'true': [0.0, 0.07441157040752314], 'true,false': [0.07441157040752314, nan], 'false': [1.8413455042563573e-17, nan], 'false,true': [1.8413455042563573e-17, nan]}, {'': [0.07465321032114339, 2.924489918524803e-17], 'true': [1.734723475976807e-18, 0.07440051280931508], 'true,false': [0.07440051280931508, nan], 'false': [2.924489918524803e-17, nan]}, {'': [0.07471778270823087, 2.4912321528174245e-17], 'true': [5.541626037445226e-16, 0.21825581408248249], 'true,false': [0.0, 0.23668639053254495], 'true,false,false': [0.23668639053254495, nan], 'false': [2.4912321528174245e-17, nan]}, {'': [0.0718395219474641, 7.365382017025429e-17], 'true': [1.0627775962223721e-16, 0.2181231087699824], 'true,false': [0.2181231087699824, nan], 'false': [7.365382017025429e-17, nan], 'false,true': [7.365382017025429e-17, nan]}, {'': [0.0699907242532736, 3.411904904945603e-17], 'true': [-5.3138879811118606e-17, 0.21810871405867135], 'true,false': [-2.6020852139652106e-18, 0.23668639053254478], 'true,false,false': [0.23668639053254478, nan], 'false': [3.411904904945603e-17, nan]}, {'': [0.06881337111228394, -1.0831444142684454e-18], 'true': [-5.693451408334136e-17, 0.21801437417294056], 'true,false': [0.21801437417294056, nan], 'false': [-1.0831444142684454e-18, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(A, D).;true;true
0;true,false;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;true;genre(A, D).;true;true
1;true,false;genre(B, E).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;true;genre(A, D).;true;true
2;true,false;genre(B, E).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;true;genre(A, D).;true;true
3;true,false;genre(B, E).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;true;genre(A, D).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;true;genre(A, D).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(B, D).;true;true
6;true,false;genre(A, E).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;true;genre(B, D).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;true;genre(B, D).;true;true
8;true,false;genre(A, E).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;true;genre(B, D).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1418510649004878;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995088;  // std dev = 1.07e-06, 234.000 (wgt'ed) examples reached here.  /* #pos=234 */
%   | | else if ( actor(B) )
%   | | | then return -0.14185106490048766;  // std dev = 5.77e-08, 56.000 (wgt'ed) examples reached here.  /* #neg=56 */
%   | | | else return 0.8581489350995115;  // std dev = 2.38e-07, 35.000 (wgt'ed) examples reached here.  /* #pos=35 */
%   else return -0.14185106490048843;  // std dev = 0.000, 205.000 (wgt'ed) examples reached here.  /* #neg=205 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.12544463852839138;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else if ( genre(B, E) )
%   | | then return 0.7194734122109573;  // std dev = 0.000, 234.000 (wgt'ed) examples reached here.  /* #pos=234 */
%   | | else if ( actor(B) )
%   | | | then return -0.12544463852839158;  // std dev = 0.000, 56.000 (wgt'ed) examples reached here.  /* #neg=56 */
%   | | | else return 0.7194734122109548;  // std dev = 0.000, 35.000 (wgt'ed) examples reached here.  /* #pos=35 */
%   else return -0.1254446385283917;  // std dev = 0.000, 205.000 (wgt'ed) examples reached here.  /* #neg=205 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.11231637819360639;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else if ( genre(B, E) )
%   | | then return 0.5553664367462832;  // std dev = 5.33e-07, 234.000 (wgt'ed) examples reached here.  /* #pos=234 */
%   | | else if ( actor(B) )
%   | | | then return -0.11231637819360629;  // std dev = 3.94e-08, 56.000 (wgt'ed) examples reached here.  /* #neg=56 */
%   | | | else return 0.5553664367462844;  // std dev = 9.42e-08, 35.000 (wgt'ed) examples reached here.  /* #pos=35 */
%   else return -0.11231637819360664;  // std dev = 0.000, 205.000 (wgt'ed) examples reached here.  /* #neg=205 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.10159632948783627;  // std dev = 3.73e-09, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else if ( genre(B, E) )
%   | | then return 0.4175135841583107;  // std dev = 0.000, 234.000 (wgt'ed) examples reached here.  /* #pos=234 */
%   | | else if ( actor(B) )
%   | | | then return -0.10159632948783623;  // std dev = 3.80e-08, 56.000 (wgt'ed) examples reached here.  /* #neg=56 */
%   | | | else return 0.4175135841583102;  // std dev = 0.000, 35.000 (wgt'ed) examples reached here.  /* #pos=35 */
%   else return -0.10159632948783653;  // std dev = 0.000, 205.000 (wgt'ed) examples reached here.  /* #neg=205 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.09269127618926097;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else if ( actor(B) )
%   | | then return -0.09269127618926107;  // std dev = 0.000, 56.000 (wgt'ed) examples reached here.  /* #neg=56 */
%   | | else return 0.3207118471601504;  // std dev = 0.000, 269.000 (wgt'ed) examples reached here.  /* #pos=269 */
%   else return -0.09269127618926051;  // std dev = 6.14e-08, 205.000 (wgt'ed) examples reached here.  /* #neg=205 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.08518475138839687;  // std dev = 3.73e-09, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else if ( director(B) )
%   | | then return 0.2551722425694879;  // std dev = 3.37e-07, 269.000 (wgt'ed) examples reached here.  /* #pos=269 */
%   | | else return -0.08518475138839679;  // std dev = 1.83e-08, 56.000 (wgt'ed) examples reached here.  /* #neg=56 */
%   else return -0.08518475138839678;  // std dev = 7.74e-08, 205.000 (wgt'ed) examples reached here.  /* #neg=205 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.2097577156325349;  // std dev = 2.89e-07, 234.000 (wgt'ed) examples reached here.  /* #pos=234 */
%   | else if ( genre(A, E) )
%   | | then return -0.07877675473109173;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | else if ( actor(B) )
%   | | | then return -0.07877675473109176;  // std dev = 1.83e-08, 56.000 (wgt'ed) examples reached here.  /* #neg=56 */
%   | | | else return 0.209757715632536;  // std dev = 0.000, 35.000 (wgt'ed) examples reached here.  /* #pos=35 */
%   else return -0.07877675473109146;  // std dev = 7.15e-08, 205.000 (wgt'ed) examples reached here.  /* #neg=205 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.17709649774527747;  // std dev = 0.000, 234.000 (wgt'ed) examples reached here.  /* #pos=234 */
%   | else if ( actor(B) )
%   | | then return -0.07324622576333704;  // std dev = 0.000, 64.000 (wgt'ed) examples reached here.  /* #neg=64 */
%   | | else return 0.1770964977452775;  // std dev = 0.000, 35.000 (wgt'ed) examples reached here.  /* #pos=35 */
%   else return -0.07324622576333664;  // std dev = 1.23e-07, 205.000 (wgt'ed) examples reached here.  /* #neg=205 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.15274385809367155;  // std dev = 0.000, 234.000 (wgt'ed) examples reached here.  /* #pos=234 */
%   | else if ( genre(A, E) )
%   | | then return -0.06842697784420272;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | else if ( actor(B) )
%   | | | then return -0.06842697784420268;  // std dev = 1.67e-08, 56.000 (wgt'ed) examples reached here.  /* #neg=56 */
%   | | | else return 0.1527438580936709;  // std dev = 3.49e-08, 35.000 (wgt'ed) examples reached here.  /* #pos=35 */
%   else return -0.06842697784420262;  // std dev = 8.36e-08, 205.000 (wgt'ed) examples reached here.  /* #neg=205 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.13400703000801092;  // std dev = 9.88e-08, 234.000 (wgt'ed) examples reached here.  /* #pos=234 */
%   | else if ( actor(B) )
%   | | then return -0.06419184008202625;  // std dev = 0.000, 64.000 (wgt'ed) examples reached here.  /* #neg=64 */
%   | | else return 0.13400703000801115;  // std dev = 0.000, 35.000 (wgt'ed) examples reached here.  /* #pos=35 */
%   else return -0.06419184008202626;  // std dev = 0.000, 205.000 (wgt'ed) examples reached here.  /* #neg=205 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.094637
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 7.609 seconds
Total inference time: 1.679 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.094637
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 2.733 seconds
Refined model CLL: -0.094637


******************************************
Best model found
******************************************
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.094637
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 18.924000000000003 seconds
Total inference time: 1.679 seconds
AUC ROC: 1.0
Total revision time: 18.924000000000003
Best scored revision CLL: -0.094637


Dataset: 4_cora_imdb, Fold: 5, Type: Transfer (trRDN-B), Time: 18:03:37
{'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.094637, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 18.924000000000003, 'Inference time': 1.679, 'parameter_0.8': {'AUC ROC': 0.982716, 'AUC PR': 0.983099, 'CLL': -0.22376, 'Precision': [1.0, 0.5], 'Recall': 0.777778, 'F1': 0.875, 'Learning time': 5.848, 'Inference time': 1.488}}


Amount of data: 1.0
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;false;false
0;false;haswordvenue(A, I), haswordtitle(J, I).;true;false
0;false,true;haswordtitle(J, K), haswordauthor(L, K).;true;false
0;false,true,true;haswordauthor(L, I).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, A).;false;true
1;true,true,false;title(F, D), venue(F, B).;false;false
1;true,false;haswordvenue(A, G), haswordtitle(H, G).;false;false
1;false;haswordvenue(A, I), haswordtitle(J, I).;true;false
1;false,true;haswordtitle(J, K), haswordauthor(L, K).;true;false
1;false,true,true;haswordvenue(B, K).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;title(F, D), venue(F, B).;false;false
2;true,false;haswordvenue(A, G), haswordtitle(H, G).;false;false
2;false;haswordvenue(B, I), haswordtitle(J, I).;true;false
2;false,true;haswordtitle(J, K), haswordvenue(A, K).;true;false
2;false,true,true;haswordauthor(L, K).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;title(E, D), venue(E, A).;false;true
3;true,true,false;title(F, D), venue(F, B).;false;false
3;true,false;haswordvenue(A, G), haswordtitle(H, G).;false;false
3;false;haswordvenue(A, I), haswordtitle(J, I).;true;false
3;false,true;haswordtitle(J, K), haswordauthor(L, K).;true;false
3;false,true,true;haswordauthor(L, I).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, A).;false;true
4;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
4;true,false;haswordvenue(B, H), haswordtitle(I, H).;false;false
4;false;haswordvenue(B, J), haswordtitle(K, J).;true;false
4;false,true;haswordtitle(K, L), haswordauthor(M, L).;true;false
4;false,true,true;haswordvenue(A, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, A).;false;true
5;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
5;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;false
5;false;haswordvenue(A, J), haswordauthor(K, J).;false;true
5;false,false;haswordvenue(B, L), haswordtitle(M, L).;true;false
5;false,false,true;haswordtitle(M, N), haswordauthor(P, N).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;title(E, D), venue(E, B).;false;true
6;true,true,false;title(F, D), venue(F, A).;false;false
6;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
6;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
6;false;haswordvenue(A, K), haswordauthor(L, K).;false;true
6;false,false;haswordvenue(B, M), haswordtitle(N, M).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
7;true,false;haswordvenue(B, H), haswordtitle(I, H).;false;false
7;false;haswordvenue(A, J), haswordtitle(K, J).;true;false
7;false,true;haswordtitle(K, L), haswordauthor(M, L).;true;false
7;false,true,true;haswordvenue(B, L).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;title(E, D), venue(E, B).;false;true
8;true,true,false;title(F, D), venue(F, A).;false;false
8;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;false
8;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
8;false;haswordvenue(B, K), haswordauthor(L, K).;false;true
8;false,false;haswordvenue(A, M), haswordtitle(N, M).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, B).;false;true
9;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
9;true,false;haswordvenue(A, H), haswordauthor(I, H).;false;true
9;true,false,false;haswordvenue(A, J), haswordtitle(K, J).;false;false
9;false;haswordvenue(A, L), haswordauthor(M, L).;false;true
9;false,false;haswordvenue(B, N), haswordauthor(P, N).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1418510649004878;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995085;  // std dev = 1.08e-06, 288.000 (wgt'ed) examples reached here.  /* #pos=288 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.2631076127854637;  // std dev = 5.400, 121.000 (wgt'ed) examples reached here.  /* #neg=72 #pos=49 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.14185106490048818;  // std dev = 0.000, 255.000 (wgt'ed) examples reached here.  /* #neg=255 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.12544463852839138;  // std dev = 5.27e-09, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | else if ( genre(B, E) )
%   | | then return 0.7194734122109577;  // std dev = 0.000, 288.000 (wgt'ed) examples reached here.  /* #pos=288 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.22797119326147255;  // std dev = 5.400, 121.000 (wgt'ed) examples reached here.  /* #neg=72 #pos=49 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then if ( movie(H, B) )
%   | | then return -0.12544463852839188;  // std dev = 0.000, 255.000 (wgt'ed) examples reached here.  /* #neg=255 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.11231637819360638;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | else if ( genre(B, E) )
%   | | then return 0.5553664367462832;  // std dev = 1.69e-07, 288.000 (wgt'ed) examples reached here.  /* #pos=288 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.19229125428201949;  // std dev = 5.400, 121.000 (wgt'ed) examples reached here.  /* #neg=72 #pos=49 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then if ( movie(H, A) )
%   | | then return -0.11231637819360688;  // std dev = 0.000, 255.000 (wgt'ed) examples reached here.  /* #neg=255 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.10159632948783628;  // std dev = 3.73e-09, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | else if ( genre(B, E) )
%   | | then return 0.4175135841583113;  // std dev = 0.000, 288.000 (wgt'ed) examples reached here.  /* #pos=288 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.15832174761337012;  // std dev = 5.400, 121.000 (wgt'ed) examples reached here.  /* #neg=72 #pos=49 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.10159632948783659;  // std dev = 0.000, 255.000 (wgt'ed) examples reached here.  /* #neg=255 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.09269127618926097;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | else if ( movie(E, B) )
%   | | then return 0.2636228577757747;  // std dev = 5.686, 409.000 (wgt'ed) examples reached here.  /* #neg=72 #pos=337 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, B) )
%   | then if ( movie(G, A) )
%   | | then return -0.09269127618926046;  // std dev = 1.07e-07, 255.000 (wgt'ed) examples reached here.  /* #neg=255 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.08518475138839687;  // std dev = 3.73e-09, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | else if ( movie(E, B) )
%   | | then return 0.2087186544882647;  // std dev = 5.690, 409.000 (wgt'ed) examples reached here.  /* #neg=72 #pos=337 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.08518475138839678;  // std dev = 9.31e-08, 255.000 (wgt'ed) examples reached here.  /* #neg=255 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.2274363676930432;  // std dev = 0.000, 288.000 (wgt'ed) examples reached here.  /* #pos=288 */
%   | else if ( genre(A, E) )
%   | | then return -0.07877675473109172;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.024114503648899197;  // std dev = 5.400, 121.000 (wgt'ed) examples reached here.  /* #neg=72 #pos=49 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.07877675473109143;  // std dev = 5.96e-08, 255.000 (wgt'ed) examples reached here.  /* #neg=255 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.18995843929649886;  // std dev = 4.00e-07, 288.000 (wgt'ed) examples reached here.  /* #pos=288 */
%   | else if ( movie(E, B) )
%   | | then return 0.011415326877687043;  // std dev = 5.407, 131.000 (wgt'ed) examples reached here.  /* #neg=82 #pos=49 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then if ( movie(G, B) )
%   | | then return -0.07324622576333681;  // std dev = 1.17e-07, 255.000 (wgt'ed) examples reached here.  /* #neg=255 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.16243258695377646;  // std dev = 0.000, 288.000 (wgt'ed) examples reached here.  /* #pos=288 */
%   | else if ( genre(A, E) )
%   | | then return -0.07402489690193938;  // std dev = 5.89e-09, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.015701771441069913;  // std dev = 5.400, 121.000 (wgt'ed) examples reached here.  /* #neg=72 #pos=49 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.06842697784420276;  // std dev = 0.000, 255.000 (wgt'ed) examples reached here.  /* #neg=255 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.1415262034200523;  // std dev = 2.60e-07, 288.000 (wgt'ed) examples reached here.  /* #pos=288 */
%   | else if ( movie(E, A) )
%   | | then return 0.0057738749509486575;  // std dev = 5.405, 131.000 (wgt'ed) examples reached here.  /* #neg=82 #pos=49 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.0641918400820262;  // std dev = 4.71e-08, 255.000 (wgt'ed) examples reached here.  /* #neg=255 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 0.982716
   AUC PR    = 0.983099
   CLL	      = -0.220832
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.777778
   F1        = 0.875


Total learning time: 6.511 seconds
Total inference time: 1.766 seconds
AUC ROC: 0.982716


Results scoring model
   AUC ROC   = 0.984468
   AUC PR    = 0.985712
   CLL	      = -0.203022
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.854599
   F1        = 0.9216


Total scoring time: 2.792 seconds
Parameter learned model CLL: -0.203022


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 10, 0], 'true,false,true': [1.08e-06, 0, 288], 'true,false,false,true': [5.4, 72, 49], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 255, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)', 'false,true': 'movie(H, B)'}, {'true,true': [5.27e-09, 10, 0], 'true,false,true': [0.0, 0, 288], 'true,false,false,true': [5.4, 72, 49], 'true,false,false,false': [0.0, 0, 0], 'false,true,true': [0.0, 255, 0], 'false,true,false': [0.0, 0, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)', 'false,true': 'movie(H, A)'}, {'true,true': [0.0, 10, 0], 'true,false,true': [1.69e-07, 0, 288], 'true,false,false,true': [5.4, 72, 49], 'true,false,false,false': [0.0, 0, 0], 'false,true,true': [0.0, 255, 0], 'false,true,false': [0.0, 0, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [3.73e-09, 10, 0], 'true,false,true': [0.0, 0, 288], 'true,false,false,true': [5.4, 72, 49], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 255, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, B)', 'false,true': 'movie(G, A)'}, {'true,true': [0.0, 10, 0], 'true,false,true': [5.686, 72, 337], 'true,false,false': [0.0, 0, 0], 'false,true,true': [1.07e-07, 255, 0], 'false,true,false': [0.0, 0, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, A)'}, {'true,true': [3.73e-09, 10, 0], 'true,false,true': [5.69, 72, 337], 'true,false,false': [0.0, 0, 0], 'false,true': [9.31e-08, 255, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 0, 288], 'true,false,true': [0.0, 10, 0], 'true,false,false,true': [5.4, 72, 49], 'true,false,false,false': [0.0, 0, 0], 'false,true': [5.96e-08, 255, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, A)', 'false,true': 'movie(G, B)'}, {'true,true': [4e-07, 0, 288], 'true,false,true': [5.407, 82, 49], 'true,false,false': [0.0, 0, 0], 'false,true,true': [1.17e-07, 255, 0], 'false,true,false': [0.0, 0, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 288], 'true,false,true': [5.89e-09, 10, 0], 'true,false,false,true': [5.4, 72, 49], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 255, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [2.6e-07, 0, 288], 'true,false,true': [5.405, 82, 49], 'true,false,false': [0.0, 0, 0], 'false,true': [4.71e-08, 255, 0], 'false,false': [0.0, 0, 0]}]]
[{'': [0.15740397924368466, -1.0797463141452503e-16], 'true': [-1.1102230246251566e-17, 0.1450493481028957], 'true,false': [4.046146134189459e-15, 0.24096714705279723], 'true,false,false': [0.24096714705279723, nan], 'false': [-1.0797463141452503e-16, nan]}, {'': [0.13011035851700273, -6.617799989922502e-17], 'true': [2.7755575615628915e-18, 0.121613386577535], 'true,false': [-4.736951571734001e-15, 0.2409671470527975], 'true,false,false': [0.2409671470527975, nan], 'false': [-6.617799989922502e-17, nan], 'false,true': [-6.617799989922502e-17, nan]}, {'': [0.10370616253172918, -9.578394722256253e-17], 'true': [0.0, 0.09875007645430306], 'true,false': [9.868649107779169e-17, 0.24096714705279762], 'true,false,false': [0.24096714705279762, nan], 'false': [-9.578394722256253e-17, nan], 'false,true': [-9.578394722256253e-17, nan]}, {'': [0.08780839143245843, -6.791952621236252e-17], 'true': [1.3877787807814458e-18, 0.08528360066632482], 'true,false': [-6.661338147750939e-16, 0.24096714705279595], 'true,false,false': [0.24096714705279595, nan], 'false': [-6.791952621236252e-17, nan]}, {'': [0.08011710385260135, 4.527968414157501e-17], 'true': [0.0, 0.07904589132716641], 'true,false': [0.07904589132716641, nan], 'false': [4.527968414157501e-17, nan], 'false,true': [4.527968414157501e-17, nan]}, {'': [0.07926902339788044, 3.395976310618126e-17], 'true': [1.3877787807814458e-18, 0.07914558495739041], 'true,false': [0.07914558495739041, nan], 'false': [3.395976310618126e-17, nan]}, {'': [0.0794040778247852, 1.3932210505100003e-17], 'true': [-9.43689570931383e-16, 0.2233191566520381], 'true,false': [0.0, 0.24096714705279754], 'true,false,false': [0.24096714705279754, nan], 'false': [1.3932210505100003e-17, nan]}, {'': [0.07662286756925284, 5.3987315707262513e-17], 'true': [5.551115123125783e-16, 0.22316507020561688], 'true,false': [0.22316507020561688, nan], 'false': [5.3987315707262513e-17, nan], 'false,true': [5.3987315707262513e-17, nan]}, {'': [0.07483345955676983, -1.3061447348531253e-17], 'true': [-5.150201253122254e-16, 0.22314036517092978], 'true,false': [3.469446951953614e-18, 0.24096714705279676], 'true,false,false': [0.24096714705279676, nan], 'false': [-1.3061447348531253e-17, nan]}, {'': [0.07369237778161444, 8.707631565687502e-18], 'true': [2.3438041630975528e-16, 0.22303612276868742], 'true,false': [0.22303612276868742, nan], 'false': [8.707631565687502e-18, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(A, D).;true;true
0;true,false;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;true;genre(A, D).;true;true
1;true,false;genre(B, E).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;true;genre(A, D).;true;true
2;true,false;genre(B, E).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;true;genre(A, D).;true;true
3;true,false;genre(B, E).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;true;genre(A, D).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;true;genre(A, D).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(B, D).;true;true
6;true,false;genre(A, E).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;true;genre(B, D).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;true;genre(B, D).;true;true
8;true,false;genre(A, E).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;true;genre(B, D).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1418510649004878;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995085;  // std dev = 1.08e-06, 288.000 (wgt'ed) examples reached here.  /* #pos=288 */
%   | | else if ( actor(B) )
%   | | | then return -0.14185106490048766;  // std dev = 6.99e-08, 72.000 (wgt'ed) examples reached here.  /* #neg=72 */
%   | | | else return 0.8581489350995122;  // std dev = 1.69e-07, 49.000 (wgt'ed) examples reached here.  /* #pos=49 */
%   else return -0.14185106490048818;  // std dev = 0.000, 255.000 (wgt'ed) examples reached here.  /* #neg=255 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.12544463852839138;  // std dev = 5.27e-09, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | else if ( genre(B, E) )
%   | | then return 0.7194734122109577;  // std dev = 0.000, 288.000 (wgt'ed) examples reached here.  /* #pos=288 */
%   | | else if ( actor(B) )
%   | | | then return -0.12544463852839152;  // std dev = 0.000, 72.000 (wgt'ed) examples reached here.  /* #neg=72 */
%   | | | else return 0.7194734122109547;  // std dev = 0.000, 49.000 (wgt'ed) examples reached here.  /* #pos=49 */
%   else return -0.12544463852839188;  // std dev = 0.000, 255.000 (wgt'ed) examples reached here.  /* #neg=255 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.11231637819360638;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | else if ( genre(B, E) )
%   | | then return 0.5553664367462832;  // std dev = 1.69e-07, 288.000 (wgt'ed) examples reached here.  /* #pos=288 */
%   | | else if ( actor(B) )
%   | | | then return -0.11231637819360624;  // std dev = 5.77e-08, 72.000 (wgt'ed) examples reached here.  /* #neg=72 */
%   | | | else return 0.5553664367462838;  // std dev = 0.000, 49.000 (wgt'ed) examples reached here.  /* #pos=49 */
%   else return -0.11231637819360688;  // std dev = 0.000, 255.000 (wgt'ed) examples reached here.  /* #neg=255 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.10159632948783628;  // std dev = 3.73e-09, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | else if ( genre(B, E) )
%   | | then return 0.4175135841583113;  // std dev = 0.000, 288.000 (wgt'ed) examples reached here.  /* #pos=288 */
%   | | else if ( actor(B) )
%   | | | then return -0.10159632948783616;  // std dev = 5.37e-08, 72.000 (wgt'ed) examples reached here.  /* #neg=72 */
%   | | | else return 0.41751358415831025;  // std dev = 0.000, 49.000 (wgt'ed) examples reached here.  /* #pos=49 */
%   else return -0.10159632948783659;  // std dev = 0.000, 255.000 (wgt'ed) examples reached here.  /* #neg=255 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.09269127618926097;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | else if ( director(B) )
%   | | then return 0.3207118471601512;  // std dev = 0.000, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | | else return -0.09269127618926107;  // std dev = 0.000, 72.000 (wgt'ed) examples reached here.  /* #neg=72 */
%   else return -0.09269127618926046;  // std dev = 1.07e-07, 255.000 (wgt'ed) examples reached here.  /* #neg=255 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.08518475138839687;  // std dev = 3.73e-09, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | else if ( director(B) )
%   | | then return 0.2551722425694875;  // std dev = 4.00e-07, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | | else return -0.08518475138839679;  // std dev = 1.83e-08, 72.000 (wgt'ed) examples reached here.  /* #neg=72 */
%   else return -0.08518475138839678;  // std dev = 9.31e-08, 255.000 (wgt'ed) examples reached here.  /* #neg=255 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.20975771563253476;  // std dev = 2.53e-07, 288.000 (wgt'ed) examples reached here.  /* #pos=288 */
%   | else if ( genre(A, E) )
%   | | then return -0.07877675473109172;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | | else if ( actor(B) )
%   | | | then return -0.07877675473109166;  // std dev = 3.80e-08, 72.000 (wgt'ed) examples reached here.  /* #neg=72 */
%   | | | else return 0.2097577156325359;  // std dev = 0.000, 49.000 (wgt'ed) examples reached here.  /* #pos=49 */
%   else return -0.07877675473109143;  // std dev = 5.96e-08, 255.000 (wgt'ed) examples reached here.  /* #neg=255 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.17709649774527672;  // std dev = 2.15e-07, 288.000 (wgt'ed) examples reached here.  /* #pos=288 */
%   | else if ( actor(B) )
%   | | then return -0.07324622576333704;  // std dev = 0.000, 82.000 (wgt'ed) examples reached here.  /* #neg=82 */
%   | | else return 0.17709649774527744;  // std dev = 0.000, 49.000 (wgt'ed) examples reached here.  /* #pos=49 */
%   else return -0.07324622576333681;  // std dev = 1.17e-07, 255.000 (wgt'ed) examples reached here.  /* #neg=255 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.1527438580936716;  // std dev = 0.000, 288.000 (wgt'ed) examples reached here.  /* #pos=288 */
%   | else if ( genre(A, E) )
%   | | then return -0.06842697784420272;  // std dev = 2.63e-09, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | | else if ( actor(B) )
%   | | | then return -0.06842697784420267;  // std dev = 3.07e-08, 72.000 (wgt'ed) examples reached here.  /* #neg=72 */
%   | | | else return 0.15274385809367083;  // std dev = 0.000, 49.000 (wgt'ed) examples reached here.  /* #pos=49 */
%   else return -0.06842697784420276;  // std dev = 0.000, 255.000 (wgt'ed) examples reached here.  /* #neg=255 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.1340070300080115;  // std dev = 0.000, 288.000 (wgt'ed) examples reached here.  /* #pos=288 */
%   | else if ( actor(B) )
%   | | then return -0.06419184008202625;  // std dev = 0.000, 82.000 (wgt'ed) examples reached here.  /* #neg=82 */
%   | | else return 0.134007030008011;  // std dev = 2.98e-08, 49.000 (wgt'ed) examples reached here.  /* #pos=49 */
%   else return -0.0641918400820262;  // std dev = 4.71e-08, 255.000 (wgt'ed) examples reached here.  /* #neg=255 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.094637
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 8.733 seconds
Total inference time: 1.742 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.094637
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 2.942 seconds
Refined model CLL: -0.094637


******************************************
Best model found
******************************************
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.094637
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 20.978 seconds
Total inference time: 1.742 seconds
AUC ROC: 1.0
Total revision time: 20.978
Best scored revision CLL: -0.094637


Dataset: 4_cora_imdb, Fold: 5, Type: Transfer (trRDN-B), Time: 18:04:03
{'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.094637, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 20.978, 'Inference time': 1.742, 'parameter_1.0': {'AUC ROC': 0.982716, 'AUC PR': 0.983099, 'CLL': -0.220832, 'Precision': [1.0, 0.5], 'Recall': 0.777778, 'F1': 0.875, 'Learning time': 6.511, 'Inference time': 1.766}}


