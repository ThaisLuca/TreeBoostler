Starting experiment #1 for 7_yeast_twitter

Start learning from source dataset

Source train facts examples: 15015
Source train pos examples: 369
Source train neg examples: 369

WILL Produced-Tree #1
% FOR proteinclass(A, B):
%   if ( interaction(A, C), recursion_proteinclass(C, B) )
%   then if ( phenotype(C, D), enzyme(A, E) )
%   | then if ( phenotype(A, D) )
%   | | then return 0.8581489350995123;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else return 0.19148226843284552;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | else return 0.8381489350995119;  // std dev = 0.140, 50.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=49 */
%   else if ( interaction(F, A), recursion_proteinclass(F, B) )
%   | then if ( interaction(A, G), interaction(G, G) )
%   | | then return 0.19148226843284552;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | else if ( interaction(H, F), phenotype(H, I) )
%   | | | then return 0.8581489350995123;  // std dev = 0.000, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | | else return 0.5581489350995122;  // std dev = 1.449, 10.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=7 */
%   | else if ( interaction(A, A) )
%   | | then return -0.14185106490048774;  // std dev = 1.49e-08, 24.000 (wgt'ed) examples reached here.  /* #neg=24 */
%   | | else if ( complex(A, J), location(A, K) )
%   | | | then return 0.28609653335278407;  // std dev = 7.487, 229.000 (wgt'ed) examples reached here.  /* #neg=131 #pos=98 */
%   | | | else return 0.33925724744207747;  // std dev = 9.955, 397.000 (wgt'ed) examples reached here.  /* #neg=206 #pos=191 */
WILL Produced-Tree #2
% FOR proteinclass(A, B):
%   if ( interaction(A, C), recursion_proteinclass(C, B) )
%   then if ( interaction(D, A), complex(D, E) )
%   | then return 0.7229634694882523;  // std dev = 0.008, 38.000 (wgt'ed) examples reached here.  /* #pos=38 */
%   | else if ( enzyme(A, F), interaction(C, G) )
%   | | then return 0.3657700145860847;  // std dev = 0.972, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | else if ( interaction(H, A), interaction(A, H) )
%   | | | then return 0.5234922660454181;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return 0.732635034810929;  // std dev = 0.105, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   else if ( interaction(A, A) )
%   | then return -0.12544463852839138;  // std dev = 0.000, 24.000 (wgt'ed) examples reached here.  /* #neg=24 */
%   | else if ( interaction(A, I), location(A, J) )
%   | | then if ( complex(A, K), complex(I, K) )
%   | | | then return 0.14963346114814924;  // std dev = 3.617, 60.000 (wgt'ed) examples reached here.  /* #neg=40 #pos=20 */
%   | | | else return 0.29188298050435363;  // std dev = 7.654, 236.000 (wgt'ed) examples reached here.  /* #neg=123 #pos=113 */
%   | | else if ( complex(A, L), phenotype(A, M) )
%   | | | then return 0.31514152715838684;  // std dev = 3.967, 64.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=32 */
%   | | | else return 0.3093197867660256;  // std dev = 8.531, 294.000 (wgt'ed) examples reached here.  /* #neg=147 #pos=147 */
WILL Produced-Tree #3
% FOR proteinclass(A, B):
%   if ( interaction(A, C), enzyme(C, D) )
%   then if ( recursion_proteinclass(C, B) )
%   | then return 0.5362640507501859;  // std dev = 0.189, 18.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=17 */
%   | else if ( interaction(C, E), recursion_proteinclass(E, B) )
%   | | then return 0.6048145717609004;  // std dev = 0.293, 17.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=15 */
%   | | else if ( interaction(F, A), enzyme(A, D) )
%   | | | then return -0.06842001375882717;  // std dev = 1.313, 18.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=2 */
%   | | | else return 0.18851096905381476;  // std dev = 5.034, 115.000 (wgt'ed) examples reached here.  /* #neg=65 #pos=50 */
%   else if ( location(A, G), interaction(A, A) )
%   | then if ( interaction(A, H), recursion_proteinclass(H, B) )
%   | | then return 0.5638420782335317;  // std dev = 0.046, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | else return -0.11231637819360638;  // std dev = 7.45e-09, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | else if ( interaction(I, A), recursion_proteinclass(I, B) )
%   | | then return 0.5552277697336405;  // std dev = 0.300, 27.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=24 */
%   | | else if ( interaction(J, A), interaction(K, J) )
%   | | | then return 0.23456635502300674;  // std dev = 9.886, 398.000 (wgt'ed) examples reached here.  /* #neg=210 #pos=188 */
%   | | | else return 0.2654235799479738;  // std dev = 5.513, 123.000 (wgt'ed) examples reached here.  /* #neg=61 #pos=62 */
WILL Produced-Tree #4
% FOR proteinclass(A, B):
%   if ( interaction(C, A), recursion_proteinclass(C, B) )
%   then return 0.4126262652805719;  // std dev = 0.255, 63.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=57 */
%   else if ( interaction(D, A), interaction(A, D) )
%   | then if ( complex(A, E), complex(D, E) )
%   | | then if ( interaction(A, A) )
%   | | | then return -0.11808077977070612;  // std dev = 0.088, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | | | else return 0.10383320136952973;  // std dev = 1.455, 11.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=4 */
%   | | else if ( interaction(D, D) )
%   | | | then return 0.10258508460292683;  // std dev = 2.503, 34.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=11 */
%   | | | else return 0.20543480542189899;  // std dev = 3.526, 54.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=27 */
%   | else if ( complex(A, F), interaction(G, A) )
%   | | then if ( complex(G, F), location(A, H) )
%   | | | then return 0.06083724076321495;  // std dev = 2.953, 42.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=14 */
%   | | | else return 0.21058309832190622;  // std dev = 5.380, 120.000 (wgt'ed) examples reached here.  /* #neg=61 #pos=59 */
%   | | else if ( interaction(I, A), interaction(J, I) )
%   | | | then return 0.194503299167608;  // std dev = 7.838, 249.000 (wgt'ed) examples reached here.  /* #neg=129 #pos=120 */
%   | | | else return 0.21289391962197557;  // std dev = 6.030, 152.000 (wgt'ed) examples reached here.  /* #neg=75 #pos=77 */
WILL Produced-Tree #5
% FOR proteinclass(A, B):
%   if ( interaction(A, C), recursion_proteinclass(C, B) )
%   then return 0.3462322769497836;  // std dev = 0.183, 60.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=57 */
%   else if ( interaction(A, D), interaction(E, A) )
%   | then if ( recursion_proteinclass(E, B), phenotype(A, F) )
%   | | then if ( complex(D, G), phenotype(D, F) )
%   | | | then return 0.13887584626419347;  // std dev = 0.692, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.5308199228102168;  // std dev = 0.170, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( interaction(A, A) )
%   | | | then return -0.11261038846600663;  // std dev = 0.098, 24.000 (wgt'ed) examples reached here.  /* #neg=24 */
%   | | | else return 0.12705483839032145;  // std dev = 7.234, 221.000 (wgt'ed) examples reached here.  /* #neg=125 #pos=96 */
%   | else if ( interaction(H, A), recursion_proteinclass(H, B) )
%   | | then if ( enzyme(H, I), phenotype(H, J) )
%   | | | then return -0.20023782049773073;  // std dev = 0.756, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | else return 0.38656045916928344;  // std dev = 0.935, 16.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   | | else if ( interaction(A, K), enzyme(K, L) )
%   | | | then return 0.11687866348899448;  // std dev = 2.735, 31.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=13 */
%   | | | else return 0.15624141705007297;  // std dev = 9.677, 376.000 (wgt'ed) examples reached here.  /* #neg=195 #pos=181 */
WILL Produced-Tree #6
% FOR proteinclass(A, B):
%   if ( interaction(A, C), enzyme(C, D) )
%   then if ( interaction(E, A), recursion_proteinclass(C, B) )
%   | then return 0.2771996300062658;  // std dev = 0.110, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | else if ( interaction(C, A), enzyme(A, F) )
%   | | then return -0.08650002815994906;  // std dev = 0.289, 14.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=2 */
%   | | else if ( interaction(C, G), recursion_proteinclass(G, B) )
%   | | | then return 0.3556070434180714;  // std dev = 1.153, 15.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=13 */
%   | | | else return 0.08152112178463633;  // std dev = 5.082, 125.000 (wgt'ed) examples reached here.  /* #neg=70 #pos=55 */
%   else if ( interaction(A, A) )
%   | then return 0.08324982051975097;  // std dev = 0.177, 24.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=12 */
%   | else if ( enzyme(A, H), interaction(A, I) )
%   | | then if ( interaction(I, I), complex(A, J) )
%   | | | then return 0.19030415600804565;  // std dev = 1.583, 10.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
%   | | | else return 0.13951913297408752;  // std dev = 3.709, 56.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=28 */
%   | | else if ( interaction(A, K), interaction(K, K) )
%   | | | then return 0.15505912212833145;  // std dev = 2.879, 34.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=17 */
%   | | | else return 0.12347197028110762;  // std dev = 10.258, 446.000 (wgt'ed) examples reached here.  /* #neg=223 #pos=223 */
WILL Produced-Tree #7
% FOR proteinclass(A, B):
%   if ( interaction(C, A), enzyme(C, D) )
%   then if ( interaction(E, C), recursion_proteinclass(E, B) )
%   | then return 0.2707346637794879;  // std dev = 0.254, 30.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=27 */
%   | else if ( interaction(A, F), enzyme(F, G) )
%   | | then return -0.03733459719945956;  // std dev = 0.405, 49.000 (wgt'ed) examples reached here.  /* #neg=35 #pos=14 */
%   | | else if ( enzyme(A, H), complex(A, I) )
%   | | | then return -0.04425087557474084;  // std dev = 1.238, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | | else return 0.09590091796188903;  // std dev = 4.864, 101.000 (wgt'ed) examples reached here.  /* #neg=51 #pos=50 */
%   else if ( enzyme(A, J) )
%   | then if ( enzyme(K, J), recursion_proteinclass(K, B) )
%   | | then return 0.5716295037364855;  // std dev = 0.190, 98.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=95 */
%   | | else return -0.3800457538899997;  // std dev = 0.271, 92.000 (wgt'ed) examples reached here.  /* #neg=92 */
%   | else if ( interaction(L, A), complex(A, M) )
%   | | then return 0.08385936823839922;  // std dev = 0.422, 114.000 (wgt'ed) examples reached here.  /* #neg=57 #pos=57 */
%   | | else if ( interaction(A, N), recursion_proteinclass(N, B) )
%   | | | then return 0.3153698888839866;  // std dev = 0.161, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | | else return 0.08367646207834464;  // std dev = 7.433, 230.000 (wgt'ed) examples reached here.  /* #neg=122 #pos=108 */
WILL Produced-Tree #8
% FOR proteinclass(A, B):
%   if ( interaction(A, C), recursion_proteinclass(C, B) )
%   then if ( enzyme(A, D), interaction(C, E) )
%   | then if ( complex(E, F), phenotype(C, G) )
%   | | then return -0.05462108473472361;  // std dev = 0.842, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | | else return 0.1792950132514185;  // std dev = 0.082, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else if ( interaction(H, A), enzyme(H, I) )
%   | | then return 0.1652719990953166;  // std dev = 0.244, 11.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=10 */
%   | | else return 0.25854348462771265;  // std dev = 0.288, 34.000 (wgt'ed) examples reached here.  /* #pos=34 */
%   else if ( interaction(A, A) )
%   | then return -0.11183763950882396;  // std dev = 0.131, 24.000 (wgt'ed) examples reached here.  /* #neg=24 */
%   | else if ( interaction(A, J), enzyme(J, K) )
%   | | then if ( phenotype(J, L), interaction(J, M) )
%   | | | then return 0.08489982435917556;  // std dev = 3.570, 66.000 (wgt'ed) examples reached here.  /* #neg=35 #pos=31 */
%   | | | else return 0.008563706746088563;  // std dev = 3.293, 54.000 (wgt'ed) examples reached here.  /* #neg=34 #pos=20 */
%   | | else if ( interaction(N, A), interaction(A, N) )
%   | | | then return 0.10275016469731027;  // std dev = 3.169, 45.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=22 */
%   | | | else return 0.06790700116079729;  // std dev = 10.169, 489.000 (wgt'ed) examples reached here.  /* #neg=250 #pos=239 */
WILL Produced-Tree #9
% FOR proteinclass(A, B):
%   if ( phenotype(A, C), complex(A, D) )
%   then if ( complex(E, D), recursion_proteinclass(E, B) )
%   | then return 0.46111821147300935;  // std dev = 0.165, 91.000 (wgt'ed) examples reached here.  /* #pos=91 */
%   | else return -0.3257295548140405;  // std dev = 0.093, 91.000 (wgt'ed) examples reached here.  /* #neg=91 */
%   else if ( interaction(F, A), enzyme(F, G) )
%   | then if ( interaction(H, F), recursion_proteinclass(H, B) )
%   | | then return 0.18989968618538755;  // std dev = 0.264, 26.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=23 */
%   | | else if ( interaction(A, I), interaction(I, A) )
%   | | | then return -0.12069598122439758;  // std dev = 1.811, 28.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=6 */
%   | | | else return 0.04148585413265748;  // std dev = 4.644, 94.000 (wgt'ed) examples reached here.  /* #neg=49 #pos=45 */
%   | else if ( interaction(J, A), complex(J, K) )
%   | | then if ( phenotype(J, L) )
%   | | | then return 0.07055935759538551;  // std dev = 4.961, 126.000 (wgt'ed) examples reached here.  /* #neg=63 #pos=63 */
%   | | | else return 0.052624309385541634;  // std dev = 2.801, 40.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=20 */
%   | | else if ( interaction(M, A), phenotype(M, N) )
%   | | | then return 0.03510190147343932;  // std dev = 3.919, 82.000 (wgt'ed) examples reached here.  /* #neg=41 #pos=41 */
%   | | | else return 0.058224363577632075;  // std dev = 5.726, 160.000 (wgt'ed) examples reached here.  /* #neg=80 #pos=80 */
WILL Produced-Tree #10
% FOR proteinclass(A, B):
%   if ( interaction(A, C), recursion_proteinclass(C, B) )
%   then if ( enzyme(A, D), phenotype(C, E) )
%   | then if ( phenotype(A, E) )
%   | | then return 0.1374521843948279;  // std dev = 0.080, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else return -0.26811584451185666;  // std dev = 0.658, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | else if ( complex(C, F), interaction(G, A) )
%   | | then return 0.13780941982659367;  // std dev = 0.147, 30.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=29 */
%   | | else return 0.19438092428359302;  // std dev = 0.198, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   else if ( interaction(A, A) )
%   | then return -0.09136482317589563;  // std dev = 0.149, 24.000 (wgt'ed) examples reached here.  /* #neg=24 */
%   | else if ( interaction(A, H), location(A, I) )
%   | | then if ( interaction(H, J), interaction(J, H) )
%   | | | then return 0.04682900488027172;  // std dev = 5.729, 186.000 (wgt'ed) examples reached here.  /* #neg=100 #pos=86 */
%   | | | else return 0.0061592165354457;  // std dev = 4.631, 110.000 (wgt'ed) examples reached here.  /* #neg=63 #pos=47 */
%   | | else if ( interaction(A, K), interaction(L, A) )
%   | | | then return 0.0758265138493779;  // std dev = 1.673, 12.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=6 */
%   | | | else return 0.04306755287797171;  // std dev = 8.267, 346.000 (wgt'ed) examples reached here.  /* #neg=173 #pos=173 */


Starting fold 1

Target train facts examples: 1562
Target train pos examples: 156
Target train neg examples: 156

Target test facts examples: 1580
Target test pos	 examples: 126
Target test neg examples: 126

Amount of data: 0.2
******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
0;true;phenotype(C, D), enzyme(A, E).;true;false
0;true,true;phenotype(A, D).;false;false
0;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
0;false,true;interaction(A, G), interaction(G, G).;false;true
0;false,true,false;interaction(H, F), phenotype(H, I).;false;false
0;false,false;interaction(A, A).;false;true
0;false,false,false;complex(A, J), location(A, K).;false;false
1;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
1;true;interaction(D, A), complex(D, E).;false;true
1;true,false;enzyme(A, F), interaction(C, G).;false;true
1;true,false,false;interaction(H, A), interaction(A, H).;false;false
1;false;interaction(A, A).;false;true
1;false,false;interaction(A, I), location(A, J).;true;true
1;false,false,true;complex(A, K), complex(I, K).;false;false
1;false,false,false;complex(A, L), phenotype(A, M).;false;false
2;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
2;true;recursion_proteinclass(C, B).;false;true
2;true,false;interaction(C, E), recursion_proteinclass(E, B).;false;true
2;true,false,false;interaction(F, A), enzyme(A, D).;false;false
2;false;location(A, G), interaction(A, A).;true;true
2;false,true;interaction(A, H), recursion_proteinclass(H, B).;false;false
2;false,false;interaction(I, A), recursion_proteinclass(I, B).;false;true
2;false,false,false;interaction(J, A), interaction(K, J).;false;false
3;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
3;false;interaction(D, A), interaction(A, D).;true;true
3;false,true;complex(A, E), complex(D, E).;true;true
3;false,true,true;interaction(A, A).;false;false
3;false,true,false;interaction(D, D).;false;false
3;false,false;complex(A, F), interaction(G, A).;true;true
3;false,false,true;complex(G, F), location(A, H).;false;false
3;false,false,false;interaction(I, A), interaction(J, I).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;false;true
4;false;interaction(A, D), interaction(E, A).;true;true
4;false,true;recursion_proteinclass(E, B), phenotype(A, F).;true;true
4;false,true,true;complex(D, G), phenotype(D, F).;false;false
4;false,true,false;interaction(A, A).;false;false
4;false,false;interaction(H, A), recursion_proteinclass(H, B).;true;true
4;false,false,true;enzyme(H, I), phenotype(H, J).;false;false
4;false,false,false;interaction(A, K), enzyme(K, L).;false;false
5;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
5;true;interaction(E, A), recursion_proteinclass(C, B).;false;true
5;true,false;interaction(C, A), enzyme(A, F).;false;true
5;true,false,false;interaction(C, G), recursion_proteinclass(G, B).;false;false
5;false;interaction(A, A).;false;true
5;false,false;enzyme(A, H), interaction(A, I).;true;true
5;false,false,true;interaction(I, I), complex(A, J).;false;false
5;false,false,false;interaction(A, K), interaction(K, K).;false;false
6;;proteinclass(A, B) :- interaction(C, A), enzyme(C, D).;true;true
6;true;interaction(E, C), recursion_proteinclass(E, B).;false;true
6;true,false;interaction(A, F), enzyme(F, G).;false;true
6;true,false,false;enzyme(A, H), complex(A, I).;false;false
6;false;enzyme(A, J).;true;true
6;false,true;enzyme(K, J), recursion_proteinclass(K, B).;false;false
6;false,false;interaction(L, A), complex(A, M).;false;true
6;false,false,false;interaction(A, N), recursion_proteinclass(N, B).;false;false
7;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
7;true;enzyme(A, D), interaction(C, E).;true;true
7;true,true;complex(E, F), phenotype(C, G).;false;false
7;true,false;interaction(H, A), enzyme(H, I).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(A, J), enzyme(J, K).;true;true
7;false,false,true;phenotype(J, L), interaction(J, M).;false;false
7;false,false,false;interaction(N, A), interaction(A, N).;false;false
8;;proteinclass(A, B) :- phenotype(A, C), complex(A, D).;true;true
8;true;complex(E, D), recursion_proteinclass(E, B).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(H, F), recursion_proteinclass(H, B).;false;true
8;false,true,false;interaction(A, I), interaction(I, A).;false;false
8;false,false;interaction(J, A), complex(J, K).;true;true
8;false,false,true;phenotype(J, L).;false;false
8;false,false,false;interaction(M, A), phenotype(M, N).;false;false
9;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
9;true;enzyme(A, D), phenotype(C, E).;true;true
9;true,true;phenotype(A, E).;false;false
9;true,false;complex(C, F), interaction(G, A).;false;false
9;false;interaction(A, A).;false;true
9;false,false;interaction(A, H), location(A, I).;true;true
9;false,false,true;interaction(H, J), interaction(J, H).;false;false
9;false,false,false;interaction(A, K), interaction(L, A).;false;false


WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.48314893509951234;  // std dev = 0.484, 24.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=15 */
%   else if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), follows(E, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(D, F) )
%   | | | then return -0.04185106490048778;  // std dev = 0.949, 10.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=1 */
%   | | | else return -0.14185106490048777;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, G) )
%   | | | then return 0.3966104735610508;  // std dev = 1.797, 13.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=7 */
%   | | | else return 0.4735335504841277;  // std dev = 1.754, 13.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=8 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D), tweets(D, E) )
%   | then return 0.4202362760767337;  // std dev = 2.103, 19.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=12 */
%   | else if ( follows(F, C) )
%   | | then return 0.3886573287083125;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A) )
%   | | then if ( tweets(A, H), tweets(G, H) )
%   | | | then return 0.026899715633042286;  // std dev = 1.230, 10.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | | | else return 0.15186844643788516;  // std dev = 1.119, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   | | else if ( tweets(A, I) )
%   | | | then return 0.44425625876528213;  // std dev = 1.355, 8.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=5 */
%   | | | else return 0.31108752602838907;  // std dev = 1.795, 14.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=7 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( recursion_accounttype(C, B) )
%   | then return 0.3365982079417948;  // std dev = 2.371, 24.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=15 */
%   | else if ( follows(D, C), recursion_accounttype(D, B) )
%   | | then return 0.03896806560344231;  // std dev = 1.482, 13.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=3 */
%   | | else if ( follows(A, E) )
%   | | | then return 0.164815809105655;  // std dev = 0.750, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F), recursion_accounttype(F, B) )
%   | | then return -0.01541842906530814;  // std dev = 0.895, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | | else if ( follows(A, G), follows(G, H) )
%   | | | then return 0.4296221906907062;  // std dev = 1.448, 10.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=7 */
%   | | | else return 0.39703040773212256;  // std dev = 1.158, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.11521512642926943;  // std dev = 2.435, 30.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=12 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( tweets(A, E), tweets(D, E) )
%   | | then if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.1920820979229748;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | else if ( follows(D, D) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.7568763870194856;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( tweets(A, F), follows(A, G) )
%   | | then if ( tweets(G, F) )
%   | | | then return 0.3428865296428991;  // std dev = 1.106, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, H), follows(H, I) )
%   | | | then return 0.3558288698120468;  // std dev = 1.194, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   | | | else return 0.20043521945656761;  // std dev = 1.738, 13.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=7 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.2292885706211123;  // std dev = 2.364, 24.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=15 */
%   else if ( follows(D, A), follows(A, E) )
%   | then if ( recursion_accounttype(E, B) )
%   | | then if ( tweets(D, F) )
%   | | | then return -0.16905738882096122;  // std dev = 0.023, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.22434876218439112;  // std dev = 1.345, 8.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=4 */
%   | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | then return -0.030748985167648447;  // std dev = 0.365, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | | else if ( follows(H, A) )
%   | | | then return -0.2818720082865202;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | | else return 0.25751803027173986;  // std dev = 1.854, 16.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=11 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(A, D), recursion_accounttype(C, B) )
%   | then return 0.18209456939001006;  // std dev = 2.093, 19.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=12 */
%   | else if ( follows(A, C) )
%   | | then return 0.05272694899618213;  // std dev = 1.271, 10.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=3 */
%   | | else if ( follows(E, C), recursion_accounttype(E, B) )
%   | | | then return -0.023298146472089765;  // std dev = 1.232, 9.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=3 */
%   | | | else return 0.23653868318020244;  // std dev = 0.552, 2.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(G, A), follows(G, G) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.1338312970534689;  // std dev = 2.110, 22.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=12 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.0973357913390231;  // std dev = 3.009, 45.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=23 */
%   | else if ( follows(E, A) )
%   | | then return 0.02384435028990221;  // std dev = 0.675, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | else if ( tweets(A, F) )
%   | | | then return -0.21505568288691107;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | | else return 0.5066406017560087;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( recursion_accounttype(G, B) )
%   | then return 0.06559502854935864;  // std dev = 1.616, 12.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=6 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C) )
%   | then if ( tweets(D, E) )
%   | | then return 0.11609208887934279;  // std dev = 2.363, 24.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=15 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A) )
%   | | then if ( follows(G, F) )
%   | | | then return -0.007894980227268538;  // std dev = 1.466, 15.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=4 */
%   | | | else return -0.19098929514179844;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( follows(A, H), follows(H, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.08109306483343379;  // std dev = 2.076, 22.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=12 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( tweets(A, C) )
%   then if ( tweets(D, C), recursion_accounttype(D, B) )
%   | then return 0.047944173008771004;  // std dev = 2.963, 40.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=20 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, E) )
%   | then if ( follows(E, F), recursion_accounttype(F, B) )
%   | | then return 0.06200807409922625;  // std dev = 1.559, 16.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=8 */
%   | | else if ( follows(G, A), follows(A, G) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.36327685748150795;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(A, H), tweets(H, I) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, J) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.011826339602630992;  // std dev = 0.912, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(C, D), follows(A, E) )
%   | then return 0.05398285584599459;  // std dev = 2.067, 18.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=11 */
%   | else return 0.13767722526417694;  // std dev = 1.128, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A) )
%   | | then if ( follows(G, F), follows(F, G) )
%   | | | then return -0.014595746145957956;  // std dev = 1.459, 15.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=4 */
%   | | | else return -0.1698571660057554;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( follows(H, A), follows(A, I) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.04942605131484576;  // std dev = 2.067, 22.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=12 */


Results
   AUC ROC   = 0.613694
   AUC PR    = 0.582243
   CLL	      = -0.671803
   Precision = 0.557377 at threshold = 0.5
   Recall    = 0.809524
   F1        = 0.660194


Total learning time: 3.948 seconds
Total inference time: 2.559 seconds
AUC ROC: 0.613694


Results scoring model
   AUC ROC   = 0.764308
   AUC PR    = 0.738207
   CLL	      = -0.572866
   Precision = 0.658537 at threshold = 0.5
   Recall    = 0.870968
   F1        = 0.75


Total scoring time: 1.995 seconds
Parameter learned model CLL: -0.572866


Structure after Parameter Learning
[['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), recursion_accounttype(D, B)', 'false,true': 'follows(E, A), follows(E, E)', 'false,true,false': 'follows(D, F)', 'false,false': 'follows(A, A)', 'false,false,false': 'tweets(A, G)'}, {'true': [0.484, 9, 15], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [0.949, 9, 1], 'false,true,false,false': [0.0, 2, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [1.797, 6, 7], 'false,false,false,false': [1.754, 5, 8]}], ['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(A, D), tweets(D, E)', 'true,false': 'follows(F, C)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A)', 'false,false,true': 'tweets(A, H), tweets(G, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true': [2.103, 7, 12], 'true,false,true': [1.095, 2, 3], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [1.23, 8, 2], 'false,false,true,false': [1.119, 4, 2], 'false,false,false,true': [1.355, 3, 5], 'false,false,false,false': [1.795, 7, 7]}], ['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'recursion_accounttype(C, B)', 'true,false': 'follows(D, C), recursion_accounttype(D, B)', 'true,false,false': 'follows(A, E)', 'false': 'follows(A, A)', 'false,false': 'follows(A, F), recursion_accounttype(F, B)', 'false,false,false': 'follows(A, G), follows(G, H)'}, {'true,true': [2.371, 9, 15], 'true,false,true': [1.482, 10, 3], 'true,false,false,true': [0.75, 2, 1], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.895, 5, 1], 'false,false,false,true': [1.448, 3, 7], 'false,false,false,false': [1.158, 2, 4]}], ['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'tweets(A, E), tweets(D, E)', 'false,true,true': 'follows(A, A)', 'false,true,false': 'follows(D, D)', 'false,false': 'tweets(A, F), follows(A, G)', 'false,false,true': 'tweets(G, F)', 'false,false,false': 'follows(A, H), follows(H, I)'}, {'true': [2.435, 18, 12], 'false,true,true,true': [0.0, 0, 0], 'false,true,true,false': [1.095, 3, 2], 'false,true,false,true': [0.0, 0, 0], 'false,true,false,false': [0.0, 0, 1], 'false,false,true,true': [1.106, 2, 4], 'false,false,true,false': [0.0, 0, 0], 'false,false,false,true': [1.194, 2, 5], 'false,false,false,false': [1.738, 6, 7]}], ['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(D, A), follows(A, E)', 'false,true': 'recursion_accounttype(E, B)', 'false,true,true': 'tweets(D, F)', 'false,true,false': 'follows(A, A)', 'false,false': 'follows(A, G), recursion_accounttype(G, B)', 'false,false,false': 'follows(H, A)'}, {'true': [2.364, 9, 15], 'false,true,true,true': [0.023, 6, 0], 'false,true,true,false': [0.0, 0, 0], 'false,true,false,true': [0.0, 0, 0], 'false,true,false,false': [1.345, 4, 4], 'false,false,true': [0.365, 5, 1], 'false,false,false,true': [0.0, 2, 0], 'false,false,false,false': [1.854, 5, 11]}], ['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(A, D), recursion_accounttype(C, B)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(E, C), recursion_accounttype(E, B)', 'false': 'follows(A, A)', 'false,false': 'follows(F, A)', 'false,false,false': 'follows(G, A), follows(G, G)'}, {'true,true': [2.093, 7, 12], 'true,false,true': [1.271, 7, 3], 'true,false,false,true': [1.232, 6, 3], 'true,false,false,false': [0.552, 1, 1], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [2.11, 10, 12]}], ['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'true,false': 'follows(E, A)', 'true,false,false': 'tweets(A, F)', 'false': 'recursion_accounttype(G, B)'}, {'true,true': [3.009, 22, 23], 'true,false,true': [0.675, 2, 1], 'true,false,false,true': [0.0, 1, 0], 'true,false,false,false': [0.0, 0, 1], 'false,true': [1.616, 6, 6], 'false,false': [0.0, 0, 0]}], ['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C)', 'true,true': 'tweets(D, E)', 'false': 'follows(A, A)', 'false,false': 'follows(F, A)', 'false,false,true': 'follows(G, F)', 'false,false,false': 'follows(A, H), follows(H, A)'}, {'true,true,true': [2.363, 9, 15], 'true,true,false': [0.0, 0, 0], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [1.466, 11, 4], 'false,false,true,false': [0.0, 1, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [2.076, 10, 12]}], ['accounttype(A, B)', {'': 'tweets(A, C)', 'true': 'tweets(D, C), recursion_accounttype(D, B)', 'false': 'follows(A, E)', 'false,true': 'follows(E, F), recursion_accounttype(F, B)', 'false,true,false': 'follows(G, A), follows(A, G)', 'false,false': 'follows(A, H), tweets(H, I)', 'false,false,false': 'follows(A, J)'}, {'true,true': [2.963, 20, 20], 'true,false': [0.0, 0, 0], 'false,true,true': [1.559, 8, 8], 'false,true,false,true': [0.0, 0, 0], 'false,true,false,false': [0.0, 0, 1], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.912, 3, 2]}], ['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'tweets(C, D), follows(A, E)', 'false': 'follows(A, A)', 'false,false': 'follows(F, A)', 'false,false,true': 'follows(G, F), follows(F, G)', 'false,false,false': 'follows(H, A), follows(A, I)'}, {'true,true': [2.067, 7, 11], 'true,false': [1.128, 2, 4], 'false,true': [0.0, 0, 0], 'false,false,true,true': [1.459, 11, 4], 'false,false,true,false': [0.0, 1, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [2.067, 10, 12]}]]
[{'': [0.23437499999999958, 0.24376731301939025], 'false': [0.07638888888888894, 0.24408284023668608], 'false,false': [nan, 0.24408284023668597], 'false,false,false': [0.24852071005917156, 0.23668639053254428], 'false,true': [nan, 0.07638888888888891], 'false,true,false': [0.09000000000000005, 0.0]}, {'': [0.23437499999999964, 0.2297605189682871], 'true': [0.23268698060941825, 0.24000000000000005], 'true,false': [0.24000000000000005, nan], 'false': [nan, 0.22976051896828703], 'false,false': [0.17647158592164144, 0.23413598287732793], 'false,false,false': [0.22964608084216653, 0.23025294613631633], 'false,false,true': [0.15120549609807313, 0.20882099582823063]}, {'': [0.22855467639610644, 0.22998326505488856], 'false': [nan, 0.22998326505488856], 'false,false': [0.13357303200296516, 0.21504654934149187], 'true': [0.23431462971594344, 0.17485806832138512], 'false,false,false': [0.2095847642108979, 0.22348563436138633], 'true,false': [0.16891780183698174, 0.18773112876964634], 'true,false,false': [0.18773112876964634, nan]}, {'': [0.19757844510156572, 0.2274971590038528], 'false': [0.244304526249449, 0.2235955622414642], 'false,true': [0.23999999999999994, 0.0], 'false,true,true': [nan, 0.23999999999999994], 'false,false': [0.20377209935976823, 0.22775294285198452], 'false,false,false': [0.20360149008633918, 0.2323060559644748], 'false,false,true': [0.20377209935976823, nan], 'false,true,false': [nan, 0.0]}, {'': [0.23283057198707313, 0.1945544827489468], 'false': [0.1670776886265288, 0.20793603193763435], 'false,false': [0.133244414480519, 0.21979904379741308], 'false,false,false': [0.0, 0.21494707830588075], 'false,true': [8.988294181790091e-05, 0.22598922875484215], 'false,true,false': [nan, 0.22598922875484215], 'false,true,true': [8.988294181790091e-05, nan]}, {'': [0.2035174523610869, 0.2022803812096593], 'true': [0.230541398646406, 0.16915679273627346], 'false': [nan, 0.2022803812096593], 'false,false': [nan, 0.2022803812096593], 'false,false,false': [nan, 0.2022803812096593], 'true,false': [0.16152525192235506, 0.17570007827002196], 'true,false,false': [0.1685849102739305, 0.15247864312572545]}, {'': [0.19583881204657938, 0.2177292674576551], 'false': [0.2177292674576551, nan], 'true': [0.20123033164289342, 0.14676551224983928], 'true,false': [0.15185306267558454, 0.13021138181684855], 'true,false,false': [0.0, 0.0]}, {'': [0.23257141457526462, 0.17328021215259992], 'true': [0.23257141457526462, nan], 'true,true': [0.23257141457526462, nan], 'false': [nan, 0.1732802121525999], 'false,false': [0.13625106357585295, 0.19596356556814554], 'false,false,false': [nan, 0.19596356556814556], 'false,false,true': [0.14323924730461682, 0.0]}, {'': [0.21953644269199574, 0.15362946387638335], 'true': [0.21953644269199574, nan], 'false': [0.14796511934773837, 0.16641083291463726], 'false,false': [nan, 0.16641083291463726], 'false,false,false': [nan, 0.16641083291463726], 'false,true': [0.15187394637516966, 0.0], 'false,true,false': [nan, 0.0]}, {'': [0.2323059235934073, 0.1703331117964094], 'true': [0.2373558164327032, 0.2119026844712892], 'false': [nan, 0.1703331117964094], 'false,false': [0.13441286806625574, 0.19416830670954113], 'false,false,false': [nan, 0.19416830670954113], 'false,false,true': [0.14186709415628446, 0.0]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
0;false;follows(A, D), recursion_accounttype(D, B).;true;true
0;false,true;follows(D, F).;true;true
3;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
3;false;follows(A, D), follows(D, A).;true;true
3;false,true;tweets(A, E), tweets(D, E).;true;true
4;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
4;false;follows(D, A), follows(A, E).;true;true
4;false,true;recursion_accounttype(E, B).;true;true
4;false,false;follows(A, G), recursion_accounttype(G, B).;true;true
4;false,false,false;follows(H, A).;true;true
6;;accounttype(A, B) :- follows(A, C).;true;true
6;true;follows(C, D), recursion_accounttype(D, B).;true;true
6;true,false;follows(E, A).;true;true
6;true,false,false;tweets(A, F).;true;true
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
7;false;follows(F, A).;true;true
7;false,true;follows(G, F).;true;true
8;;accounttype(A, B) :- tweets(A, C).;true;true
8;false;follows(A, E).;true;true
8;false,true;follows(E, F), recursion_accounttype(F, B).;true;true
9;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
9;false;follows(F, A).;true;true
9;false,true;follows(G, F), follows(F, G).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then if ( follows(A, E), follows(E, A) )
%   | | then if ( follows(A, F), follows(F, E) )
%   | | | then return 0.524815601766179;  // std dev = 1.633, 12.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=8 */
%   | | | else return -0.14185106490048777;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else return 0.5248156017661789;  // std dev = 1.155, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | else return 0.8581489350995121;  // std dev = 2.11e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( follows(A, G), recursion_accounttype(G, B) )
%   | then return -0.05851773156715445;  // std dev = 0.276, 12.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=1 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), follows(I, A) )
%   | | | then return -0.14185106490048777;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.4295775065280837;  // std dev = 1.309, 7.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=4 */
%   | | else if ( follows(A, J) )
%   | | | then return 0.5854216623722396;  // std dev = 1.477, 11.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=8 */
%   | | | else return 0.4581489350995122;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(C, E) )
%   | | then return 0.6320903567041017;  // std dev = 0.330, 14.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=12 */
%   | | else if ( follows(D, A) )
%   | | | then return 0.28162893957529533;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return 0.1769132208395042;  // std dev = 0.741, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | else return -0.21837106042470475;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else if ( follows(A, F), recursion_accounttype(F, B) )
%   | then return -0.05154258263854086;  // std dev = 0.276, 12.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=1 */
%   | else if ( follows(G, A) )
%   | | then if ( follows(G, H), follows(H, A) )
%   | | | then return -0.12544463852839138;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.36887697659770574;  // std dev = 1.309, 7.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=4 */
%   | | else if ( follows(A, I) )
%   | | | then return 0.498380757744019;  // std dev = 1.477, 11.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=8 */
%   | | | else return 0.3927941835770488;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.45087596560335713;  // std dev = 0.367, 14.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=11 */
%   | | else return -0.16478082991910714;  // std dev = 0.037, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else return -0.0456407429776432;  // std dev = 0.276, 12.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=1 */
%   else if ( follows(F, A), tweets(F, G) )
%   | then if ( follows(A, H), follows(F, H) )
%   | | then return 0.025155107946383804;  // std dev = 0.801, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else if ( follows(A, I) )
%   | | | then return 0.731362337156369;  // std dev = 1.49e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.16168845562817838;  // std dev = 1.317, 7.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=3 */
%   | else if ( follows(A, J) )
%   | | then if ( follows(A, K), follows(J, K) )
%   | | | then return 0.6527806897933971;  // std dev = 0.085, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.24319772075961218;  // std dev = 1.309, 7.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=4 */
%   | | else return 0.32092546969114216;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.3464588964090805;  // std dev = 0.360, 14.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=11 */
%   | | else return -0.1433835893859202;  // std dev = 0.033, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else return -0.04059971203405114;  // std dev = 0.276, 12.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=1 */
%   else if ( follows(A, F), follows(F, A) )
%   | then if ( tweets(A, G), tweets(F, G) )
%   | | then return 0.15794578440834012;  // std dev = 0.747, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | else return 0.7263914077353917;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(A, H) )
%   | | then if ( follows(A, I), follows(H, I) )
%   | | | then return 0.49569434388759576;  // std dev = 0.090, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.17846489319060937;  // std dev = 1.439, 9.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=5 */
%   | | else if ( follows(J, A), recursion_accounttype(J, B) )
%   | | | then return 0.3010814157318286;  // std dev = 1.103, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.09388549218019906;  // std dev = 1.280, 7.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=3 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(A, E) )
%   | then if ( follows(E, F), follows(F, A) )
%   | | then if ( recursion_accounttype(F, B), recursion_accounttype(E, B) )
%   | | | then return 0.4615160597964422;  // std dev = 2.11e-08, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.03287569550775348;  // std dev = 1.035, 7.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=3 */
%   | | else return -0.03414661973651051;  // std dev = 0.611, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | else if ( follows(A, G) )
%   | | then return 0.35424534452479745;  // std dev = 0.064, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.23448021885649348;  // std dev = 1.104, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   else if ( follows(H, A), follows(A, I) )
%   | then return 0.051243258285946384;  // std dev = 0.310, 14.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=4 */
%   | else if ( follows(A, J), recursion_accounttype(J, B) )
%   | | then return 0.04707480169806103;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | | else if ( follows(K, A) )
%   | | | then return -0.32169970861261843;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | | else return 0.23365230211856394;  // std dev = 1.753, 16.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=11 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(C, D) )
%   | then if ( follows(D, C), recursion_accounttype(D, B) )
%   | | then return 0.3408280204588836;  // std dev = 0.044, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else if ( recursion_accounttype(D, B), follows(D, E) )
%   | | | then return -0.212327965396281;  // std dev = 0.190, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.11336472428963061;  // std dev = 1.462, 15.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=7 */
%   | else return -0.12019199307229275;  // std dev = 0.020, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   else if ( follows(A, F) )
%   | then if ( follows(G, A), follows(G, F) )
%   | | then return 0.007841711631624726;  // std dev = 0.718, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   | | else if ( follows(A, H), follows(F, H) )
%   | | | then return 0.3745758295514861;  // std dev = 0.157, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.1813192164015713;  // std dev = 1.413, 9.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=6 */
%   | else if ( follows(I, A), recursion_accounttype(I, B) )
%   | | then return 0.17861786128289744;  // std dev = 1.105, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | else return 0.051606533644127296;  // std dev = 0.457, 7.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=3 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( follows(A, F), follows(E, F) )
%   | | | then return 0.09545246369905946;  // std dev = 1.591, 23.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=12 */
%   | | | else return -0.10635449623890017;  // std dev = 0.017, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( follows(G, A) )
%   | | | then return 0.17923526694780342;  // std dev = 0.765, 7.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=4 */
%   | | | else return 0.08637730313750178;  // std dev = 1.305, 10.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=7 */
%   | else if ( follows(H, A) )
%   | | then return 0.00968958641226847;  // std dev = 0.577, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.11210496018995438;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | | else return 0.4699272034692735;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(J, A) )
%   | then return 0.020190759133912852;  // std dev = 0.455, 7.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=3 */
%   | else return 0.161927171977485;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, E), follows(E, D) )
%   | | then if ( recursion_accounttype(D, B), recursion_accounttype(E, B) )
%   | | | then return 0.2506420147367729;  // std dev = 0.037, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.053266043017149135;  // std dev = 1.084, 9.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=5 */
%   | | else return -0.17223013362571804;  // std dev = 0.205, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else return 0.18104425517306585;  // std dev = 0.430, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else if ( follows(F, A) )
%   | then if ( follows(G, F) )
%   | | then if ( follows(A, H), recursion_accounttype(H, B) )
%   | | | then return -0.13080650747821054;  // std dev = 0.052, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | | else return 0.04203624870988478;  // std dev = 1.051, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | else return -0.11349178693294348;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else return 0.08507032495788712;  // std dev = 0.416, 22.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=12 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( tweets(A, C) )
%   then if ( follows(D, A), follows(A, E) )
%   | then if ( follows(D, E) )
%   | | then if ( follows(A, F), follows(E, F) )
%   | | | then return 0.02634147156455618;  // std dev = 1.251, 19.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=9 */
%   | | | else return -0.24656177312845692;  // std dev = 0.178, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else return 0.21718787739250356;  // std dev = 0.537, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | else if ( follows(A, G) )
%   | | then return 0.1739942894152162;  // std dev = 1.073, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | | else return 0.06039824362742679;  // std dev = 0.497, 7.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=4 */
%   else if ( follows(A, H) )
%   | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | then return 0.030323392065256895;  // std dev = 0.314, 16.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=8 */
%   | | else return 0.33728112907426644;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else return -0.010947033106673965;  // std dev = 0.951, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then if ( follows(A, E), follows(E, A) )
%   | | then if ( follows(A, F), follows(F, E) )
%   | | | then return 0.07707285435446565;  // std dev = 1.108, 12.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=8 */
%   | | | else return -0.1457285602478803;  // std dev = 0.131, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else return 0.11925757050136043;  // std dev = 1.139, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | else return 0.19544974707187412;  // std dev = 0.059, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( follows(G, A) )
%   | then if ( follows(H, G), follows(G, H) )
%   | | then if ( tweets(A, I) )
%   | | | then return -0.007951480887440885;  // std dev = 0.779, 10.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=3 */
%   | | | else return -0.05958170339969392;  // std dev = 0.630, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else return -0.0819898131517697;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( tweets(A, J), follows(A, K) )
%   | | then return 0.1430805466208236;  // std dev = 1.079, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | | else return 0.019317096351153158;  // std dev = 0.397, 16.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=8 */


Results
   AUC ROC   = 0.657565
   AUC PR    = 0.641616
   CLL	      = -0.700833
   Precision = 0.583851 at threshold = 0.5
   Recall    = 0.746032
   F1        = 0.655052


Total learning time: 20.571 seconds
Total inference time: 3.51 seconds
AUC ROC: 0.657565


Results scoring model
   AUC ROC   = 0.923517
   AUC PR    = 0.924241
   CLL	      = -0.40147
   Precision = 0.789474 at threshold = 0.5
   Recall    = 0.967742
   F1        = 0.869565


Total scoring time: 2.562 seconds
Refined model CLL: -0.40147


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.657565
   AUC PR    = 0.641616
   CLL	      = -0.700833
   Precision = 0.583851 at threshold = 0.5
   Recall    = 0.746032
   F1        = 0.655052


Total learning time: 29.076000000000004 seconds
Total inference time: 3.51 seconds
AUC ROC: 0.657565
Total revision time: 29.076000000000004
Best scored revision CLL: -0.40147


Dataset: 7_yeast_twitter, Fold: 1, Type: Transfer (trRDN-B), Time: 18:05:51
{'AUC ROC': 0.657565, 'AUC PR': 0.641616, 'CLL': -0.700833, 'Precision': [0.583851, 0.5], 'Recall': 0.746032, 'F1': 0.655052, 'Learning time': 29.076000000000004, 'Inference time': 3.51, 'parameter_0.2': {'AUC ROC': 0.613694, 'AUC PR': 0.582243, 'CLL': -0.671803, 'Precision': [0.557377, 0.5], 'Recall': 0.809524, 'F1': 0.660194, 'Learning time': 3.948, 'Inference time': 2.559}}


Amount of data: 0.4
******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
0;true;phenotype(C, D), enzyme(A, E).;true;false
0;true,true;phenotype(A, D).;false;false
0;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
0;false,true;interaction(A, G), interaction(G, G).;false;true
0;false,true,false;interaction(H, F), phenotype(H, I).;false;false
0;false,false;interaction(A, A).;false;true
0;false,false,false;complex(A, J), location(A, K).;false;false
1;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
1;true;interaction(D, A), complex(D, E).;false;true
1;true,false;enzyme(A, F), interaction(C, G).;false;true
1;true,false,false;interaction(H, A), interaction(A, H).;false;false
1;false;interaction(A, A).;false;true
1;false,false;interaction(A, I), location(A, J).;true;true
1;false,false,true;complex(A, K), complex(I, K).;false;false
1;false,false,false;complex(A, L), phenotype(A, M).;false;false
2;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
2;true;recursion_proteinclass(C, B).;false;true
2;true,false;interaction(C, E), recursion_proteinclass(E, B).;false;true
2;true,false,false;interaction(F, A), enzyme(A, D).;false;false
2;false;location(A, G), interaction(A, A).;true;true
2;false,true;interaction(A, H), recursion_proteinclass(H, B).;false;false
2;false,false;interaction(I, A), recursion_proteinclass(I, B).;false;true
2;false,false,false;interaction(J, A), interaction(K, J).;false;false
3;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
3;false;interaction(D, A), interaction(A, D).;true;true
3;false,true;complex(A, E), complex(D, E).;true;true
3;false,true,true;interaction(A, A).;false;false
3;false,true,false;interaction(D, D).;false;false
3;false,false;complex(A, F), interaction(G, A).;true;true
3;false,false,true;complex(G, F), location(A, H).;false;false
3;false,false,false;interaction(I, A), interaction(J, I).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;false;true
4;false;interaction(A, D), interaction(E, A).;true;true
4;false,true;recursion_proteinclass(E, B), phenotype(A, F).;true;true
4;false,true,true;complex(D, G), phenotype(D, F).;false;false
4;false,true,false;interaction(A, A).;false;false
4;false,false;interaction(H, A), recursion_proteinclass(H, B).;true;true
4;false,false,true;enzyme(H, I), phenotype(H, J).;false;false
4;false,false,false;interaction(A, K), enzyme(K, L).;false;false
5;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
5;true;interaction(E, A), recursion_proteinclass(C, B).;false;true
5;true,false;interaction(C, A), enzyme(A, F).;false;true
5;true,false,false;interaction(C, G), recursion_proteinclass(G, B).;false;false
5;false;interaction(A, A).;false;true
5;false,false;enzyme(A, H), interaction(A, I).;true;true
5;false,false,true;interaction(I, I), complex(A, J).;false;false
5;false,false,false;interaction(A, K), interaction(K, K).;false;false
6;;proteinclass(A, B) :- interaction(C, A), enzyme(C, D).;true;true
6;true;interaction(E, C), recursion_proteinclass(E, B).;false;true
6;true,false;interaction(A, F), enzyme(F, G).;false;true
6;true,false,false;enzyme(A, H), complex(A, I).;false;false
6;false;enzyme(A, J).;true;true
6;false,true;enzyme(K, J), recursion_proteinclass(K, B).;false;false
6;false,false;interaction(L, A), complex(A, M).;false;true
6;false,false,false;interaction(A, N), recursion_proteinclass(N, B).;false;false
7;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
7;true;enzyme(A, D), interaction(C, E).;true;true
7;true,true;complex(E, F), phenotype(C, G).;false;false
7;true,false;interaction(H, A), enzyme(H, I).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(A, J), enzyme(J, K).;true;true
7;false,false,true;phenotype(J, L), interaction(J, M).;false;false
7;false,false,false;interaction(N, A), interaction(A, N).;false;false
8;;proteinclass(A, B) :- phenotype(A, C), complex(A, D).;true;true
8;true;complex(E, D), recursion_proteinclass(E, B).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(H, F), recursion_proteinclass(H, B).;false;true
8;false,true,false;interaction(A, I), interaction(I, A).;false;false
8;false,false;interaction(J, A), complex(J, K).;true;true
8;false,false,true;phenotype(J, L).;false;false
8;false,false,false;interaction(M, A), phenotype(M, N).;false;false
9;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
9;true;enzyme(A, D), phenotype(C, E).;true;true
9;true,true;phenotype(A, E).;false;false
9;true,false;complex(C, F), interaction(G, A).;false;false
9;false;interaction(A, A).;false;true
9;false,false;interaction(A, H), location(A, I).;true;true
9;false,false,true;interaction(H, J), interaction(J, H).;false;false
9;false,false,false;interaction(A, K), interaction(L, A).;false;false


WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.5248156017661781;  // std dev = 0.471, 57.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=38 */
%   else if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), follows(E, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(D, F) )
%   | | | then return 0.09344305274657114;  // std dev = 1.749, 17.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=4 */
%   | | | else return -0.1418510649004878;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, G) )
%   | | | then return 0.2867203636709409;  // std dev = 2.619, 28.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=12 */
%   | | | else return 0.35814893509951234;  // std dev = 2.000, 16.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=8 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D), tweets(D, E) )
%   | then return 0.4416289395752954;  // std dev = 3.350, 50.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=33 */
%   | else if ( follows(F, C) )
%   | | then return 0.4959146538610097;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A) )
%   | | then if ( tweets(A, H), tweets(G, H) )
%   | | | then return 0.030349900550978748;  // std dev = 1.781, 20.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=4 */
%   | | | else return 0.11077940226907065;  // std dev = 1.179, 7.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=2 */
%   | | else if ( tweets(A, I) )
%   | | | then return 0.3331484683293373;  // std dev = 2.317, 22.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=11 */
%   | | | else return 0.21174415810366873;  // std dev = 2.022, 18.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=7 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( recursion_accounttype(C, B) )
%   | then return 0.36235032140683504;  // std dev = 3.558, 57.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=38 */
%   | else if ( follows(D, C), recursion_accounttype(D, B) )
%   | | then return 0.03734221480748111;  // std dev = 1.970, 23.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=5 */
%   | | else if ( follows(A, E) )
%   | | | then return 0.168957103052234;  // std dev = 0.776, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | else return -0.18498530778677036;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F), recursion_accounttype(F, B) )
%   | | then return 0.030197771876935935;  // std dev = 1.501, 14.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=3 */
%   | | else if ( follows(A, G), follows(G, H) )
%   | | | then return 0.39385021750480353;  // std dev = 1.935, 16.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=10 */
%   | | | else return 0.2694043361055518;  // std dev = 1.584, 10.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.17063269417652016;  // std dev = 3.814, 68.000 (wgt'ed) examples reached here.  /* #neg=35 #pos=33 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( tweets(A, E), tweets(D, E) )
%   | | then if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.15535028706246523;  // std dev = 1.527, 11.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=4 */
%   | | else if ( follows(D, D) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.28477776795142096;  // std dev = 0.707, 2.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */
%   | else if ( tweets(A, F), follows(A, G) )
%   | | then if ( tweets(G, F) )
%   | | | then return 0.3150219455128716;  // std dev = 1.916, 16.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=10 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, H), follows(H, I) )
%   | | | then return 0.31242533506431874;  // std dev = 1.349, 8.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=5 */
%   | | | else return 0.16816586768262134;  // std dev = 2.036, 19.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=9 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.23726532197656855;  // std dev = 3.556, 57.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=38 */
%   else if ( follows(D, A), follows(A, E) )
%   | then if ( recursion_accounttype(E, B) )
%   | | then if ( tweets(D, F) )
%   | | | then return -0.07573196889422694;  // std dev = 0.943, 9.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=1 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.12701337430634743;  // std dev = 1.767, 14.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=5 */
%   | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | then return -0.0018323886612792478;  // std dev = 0.400, 14.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=3 */
%   | | else if ( follows(H, A) )
%   | | | then return -0.22260347051224338;  // std dev = 0.051, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | | else return 0.2192819072930892;  // std dev = 2.507, 26.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=15 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(A, D), recursion_accounttype(C, B) )
%   | then return 0.17302430004396757;  // std dev = 3.347, 50.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=33 */
%   | else if ( follows(A, C) )
%   | | then return 0.04341329353592791;  // std dev = 1.883, 19.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=5 */
%   | | else if ( follows(E, C), recursion_accounttype(E, B) )
%   | | | then return 0.040094889615847944;  // std dev = 1.400, 12.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=5 */
%   | | | else return 0.11357427724001046;  // std dev = 0.704, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(G, A), follows(G, G) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.10847153761977235;  // std dev = 2.964, 40.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=18 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.11387372595497687;  // std dev = 4.485, 96.000 (wgt'ed) examples reached here.  /* #neg=45 #pos=51 */
%   | else if ( follows(E, A) )
%   | | then return -0.18357384811392566;  // std dev = 0.994, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else if ( tweets(A, F) )
%   | | | then return -0.08423847809854619;  // std dev = 0.769, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | else return 0.6141482826819888;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( recursion_accounttype(G, B) )
%   | then return 0.05179997658148426;  // std dev = 1.888, 18.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=8 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C) )
%   | then if ( tweets(D, E) )
%   | | then return 0.10424276698148172;  // std dev = 3.506, 55.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=36 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0.4266815832793898;  // std dev = 0.025, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A) )
%   | | then if ( follows(H, G) )
%   | | | then return -0.00984050951068824;  // std dev = 2.073, 26.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=6 */
%   | | | else return -0.18507291065279804;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( follows(A, I), follows(I, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.06289104100082184;  // std dev = 2.926, 40.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=18 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( tweets(A, C) )
%   then if ( tweets(D, C), recursion_accounttype(D, B) )
%   | then return 0.05356424670681981;  // std dev = 4.455, 92.000 (wgt'ed) examples reached here.  /* #neg=45 #pos=47 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, E) )
%   | then if ( follows(E, F), recursion_accounttype(F, B) )
%   | | then return 0.03411550840626927;  // std dev = 2.035, 24.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=11 */
%   | | else if ( follows(G, A), follows(A, G) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.44713431294917994;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(A, H), tweets(H, I) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, J) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.05152590144042476;  // std dev = 1.146, 7.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=3 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(C, D), follows(A, E) )
%   | then return 0.05736903109024667;  // std dev = 3.293, 49.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=32 */
%   | else return 0.18278131628200767;  // std dev = 1.213, 8.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=6 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A) )
%   | | then if ( follows(G, F), follows(F, G) )
%   | | | then return -0.017225761471972287;  // std dev = 2.072, 26.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=6 */
%   | | | else return -0.1660537455029862;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( follows(H, A), follows(A, I) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.03544912715595896;  // std dev = 2.908, 40.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=18 */


Results
   AUC ROC   = 0.610796
   AUC PR    = 0.588448
   CLL	      = -0.678738
   Precision = 0.562874 at threshold = 0.5
   Recall    = 0.746032
   F1        = 0.641638


Total learning time: 4.726 seconds
Total inference time: 2.478 seconds
AUC ROC: 0.610796


Results scoring model
   AUC ROC   = 0.741155
   AUC PR    = 0.711075
   CLL	      = -0.595979
   Precision = 0.662162 at threshold = 0.5
   Recall    = 0.790323
   F1        = 0.720588


Total scoring time: 2.053 seconds
Parameter learned model CLL: -0.595979


Structure after Parameter Learning
[['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), recursion_accounttype(D, B)', 'false,true': 'follows(E, A), follows(E, E)', 'false,true,false': 'follows(D, F)', 'false,false': 'follows(A, A)', 'false,false,false': 'tweets(A, G)'}, {'true': [0.471, 19, 38], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [1.749, 13, 4], 'false,true,false,false': [0.0, 6, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [2.619, 16, 12], 'false,false,false,false': [2.0, 8, 8]}], ['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(A, D), tweets(D, E)', 'true,false': 'follows(F, C)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A)', 'false,false,true': 'tweets(A, H), tweets(G, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true': [3.35, 17, 33], 'true,false,true': [1.195, 2, 5], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [1.781, 16, 4], 'false,false,true,false': [1.179, 5, 2], 'false,false,false,true': [2.317, 11, 11], 'false,false,false,false': [2.022, 11, 7]}], ['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'recursion_accounttype(C, B)', 'true,false': 'follows(D, C), recursion_accounttype(D, B)', 'true,false,false': 'follows(A, E)', 'false': 'follows(A, A)', 'false,false': 'follows(A, F), recursion_accounttype(F, B)', 'false,false,false': 'follows(A, G), follows(G, H)'}, {'true,true': [3.558, 19, 38], 'true,false,true': [1.97, 18, 5], 'true,false,false,true': [0.776, 2, 1], 'true,false,false,false': [0.0, 1, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [1.501, 11, 3], 'false,false,false,true': [1.935, 6, 10], 'false,false,false,false': [1.584, 5, 5]}], ['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'tweets(A, E), tweets(D, E)', 'false,true,true': 'follows(A, A)', 'false,true,false': 'follows(D, D)', 'false,false': 'tweets(A, F), follows(A, G)', 'false,false,true': 'tweets(G, F)', 'false,false,false': 'follows(A, H), follows(H, I)'}, {'true': [3.814, 35, 33], 'false,true,true,true': [0.0, 0, 0], 'false,true,true,false': [1.527, 7, 4], 'false,true,false,true': [0.0, 0, 0], 'false,true,false,false': [0.707, 1, 1], 'false,false,true,true': [1.916, 6, 10], 'false,false,true,false': [0.0, 0, 0], 'false,false,false,true': [1.349, 3, 5], 'false,false,false,false': [2.036, 10, 9]}], ['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(D, A), follows(A, E)', 'false,true': 'recursion_accounttype(E, B)', 'false,true,true': 'tweets(D, F)', 'false,true,false': 'follows(A, A)', 'false,false': 'follows(A, G), recursion_accounttype(G, B)', 'false,false,false': 'follows(H, A)'}, {'true': [3.556, 19, 38], 'false,true,true,true': [0.943, 8, 1], 'false,true,true,false': [0.0, 0, 0], 'false,true,false,true': [0.0, 0, 0], 'false,true,false,false': [1.767, 9, 5], 'false,false,true': [0.4, 11, 3], 'false,false,false,true': [0.051, 4, 0], 'false,false,false,false': [2.507, 11, 15]}], ['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(A, D), recursion_accounttype(C, B)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(E, C), recursion_accounttype(E, B)', 'false': 'follows(A, A)', 'false,false': 'follows(F, A)', 'false,false,false': 'follows(G, A), follows(G, G)'}, {'true,true': [3.347, 17, 33], 'true,false,true': [1.883, 14, 5], 'true,false,false,true': [1.4, 7, 5], 'true,false,false,false': [0.704, 2, 1], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [2.964, 22, 18]}], ['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'true,false': 'follows(E, A)', 'true,false,false': 'tweets(A, F)', 'false': 'recursion_accounttype(G, B)'}, {'true,true': [4.485, 45, 51], 'true,false,true': [0.994, 4, 1], 'true,false,false,true': [0.769, 3, 1], 'true,false,false,false': [0.0, 0, 1], 'false,true': [1.888, 10, 8], 'false,false': [0.0, 0, 0]}], ['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C)', 'true,true': 'tweets(D, E)', 'true,false': 'follows(A, F)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A)', 'false,false,true': 'follows(H, G)', 'false,false,false': 'follows(A, I), follows(I, A)'}, {'true,true,true': [3.506, 19, 36], 'true,true,false': [0.0, 0, 0], 'true,false,true': [0.025, 0, 2], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [2.073, 20, 6], 'false,false,true,false': [0.0, 1, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [2.926, 22, 18]}], ['accounttype(A, B)', {'': 'tweets(A, C)', 'true': 'tweets(D, C), recursion_accounttype(D, B)', 'false': 'follows(A, E)', 'false,true': 'follows(E, F), recursion_accounttype(F, B)', 'false,true,false': 'follows(G, A), follows(A, G)', 'false,false': 'follows(A, H), tweets(H, I)', 'false,false,false': 'follows(A, J)'}, {'true,true': [4.455, 45, 47], 'true,false': [0.0, 0, 0], 'false,true,true': [2.035, 13, 11], 'false,true,false,true': [0.0, 0, 0], 'false,true,false,false': [0.0, 0, 1], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.146, 4, 3]}], ['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'tweets(C, D), follows(A, E)', 'false': 'follows(A, A)', 'false,false': 'follows(F, A)', 'false,false,true': 'follows(G, F), follows(F, G)', 'false,false,false': 'follows(H, A), follows(A, I)'}, {'true,true': [3.293, 17, 32], 'true,false': [1.213, 2, 6], 'false,true': [0.0, 0, 0], 'false,false,true,true': [2.072, 20, 6], 'false,false,true,false': [0.0, 1, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [2.908, 22, 18]}]]
[{'': [0.22222222222222376, 0.22989529962129623], 'false': [0.14366729678638926, 0.24793388429752028], 'false,false': [nan, 0.2479338842975204], 'false,false,false': [0.24489795918367302, 0.24999999999999997], 'false,true': [nan, 0.14366729678638937], 'false,true,false': [0.1799307958477507, -6.938893903907228e-18]}, {'': [0.22222222222222288, 0.22435790551214754], 'false': [nan, 0.22435790551214804], 'false,false': [0.1701742216208912, 0.24010888851330145], 'false,false,false': [0.2441103108476951, 0.22711180761795566], 'true': [0.22440000000000063, 0.20408163265306128], 'true,false': [0.20408163265306128, nan], 'false,false,true': [0.1586137229361501, 0.19841243656921642]}, {'': [0.22740239271595422, 0.2377099033004863], 'false': [nan, 0.2377099033004863], 'false,false': [0.16092113827112312, 0.244154835926104], 'false,false,false': [0.23397875503713156, 0.2509062407963139], 'true': [0.22210119718663515, 0.16970672603569473], 'true,false': [0.1686686717353831, 0.17409097858739553], 'true,false,false': [0.20080249723556243, 0.0]}, {'': [0.21396079640662954, 0.22817212697366848], 'false': [0.22011009626866634, 0.22932494835164433], 'false,false': [0.22943065715156152, 0.22522903379962664], 'false,false,true': [0.22943065715156152, nan], 'false,false,false': [0.22742238485083266, 0.2181393564033172], 'false,true': [0.2120984186545515, 0.25], 'false,true,false': [nan, 0.25], 'false,true,true': [nan, 0.2120984186545515]}, {'': [0.221800600358695, 0.20523654968617658], 'false': [0.1842996056509899, 0.21490024607376962], 'false,false': [0.16001188714269993, 0.23214420654936854], 'false,false,false': [0.0006585093932250097, 0.2417223657781487], 'false,true': [0.09887313992681374, 0.22313179030013616], 'false,true,false': [nan, 0.22313179030013616], 'false,true,true': [0.09887313992681374, nan]}, {'': [0.2087277191464571, 0.21959556272297048], 'false': [nan, 0.21959556272297048], 'false,false': [nan, 0.21959556272297048], 'false,false,false': [nan, 0.21959556272297048], 'true': [0.22403683022487736, 0.17697440975164538], 'true,false': [0.18664747940301665, 0.16464951688323462], 'true,false,false': [0.16338242337034523, 0.16539851461029456]}, {'': [0.21244330786975285, 0.19809737047009268], 'true': [0.2095658690591783, 0.21139072774673867], 'true,false': [0.19780125907005588, 0.19641665574350928], 'false': [0.19809737047009268, nan], 'true,false,false': [0.14797200615268097, 0.0]}, {'': [0.2191489036520668, 0.193859976187219], 'true': [0.22345866596127997, 0.00031160744593639045], 'true,true': [0.22345866596127997, nan], 'false': [nan, 0.193859976187219], 'false,false': [0.16029919926539798, 0.21398433881524365], 'false,false,false': [nan, 0.21398433881524367], 'false,false,true': [0.16532727921625978, 0.0], 'true,false': [0.00031160744593639045, nan]}, {'': [0.2157263133447519, 0.17556815972779555], 'true': [0.2157263133447519, nan], 'false': [0.1721566157109855, 0.18775162717333105], 'false,false': [nan, 0.18775162717333105], 'false,false,false': [nan, 0.18775162717333105], 'false,true': [0.17250642671603442, 0.0], 'false,true,false': [nan, 0.0]}, {'': [0.21799709280938176, 0.19141225798494388], 'true': [0.22134387346822992, 0.18397729245684996], 'false': [nan, 0.191412257984944], 'false,false': [0.1597940611556856, 0.21139014171247372], 'false,false,false': [nan, 0.21139014171247372], 'false,false,true': [0.16511962477620462, 0.0]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
0;false;follows(A, D), recursion_accounttype(D, B).;true;true
0;false,true;follows(D, F).;true;true
2;;accounttype(A, B) :- follows(C, A).;true;true
2;true;recursion_accounttype(C, B).;true;true
2;true,false;follows(D, C), recursion_accounttype(D, B).;true;true
2;true,false,false;follows(A, E).;true;true
4;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
4;false;follows(D, A), follows(A, E).;true;true
4;false,false;follows(A, G), recursion_accounttype(G, B).;true;true
4;false,false,false;follows(H, A).;true;true
6;;accounttype(A, B) :- follows(A, C).;true;true
6;true;follows(C, D), recursion_accounttype(D, B).;true;true
6;true,false;follows(E, A).;true;true
6;true,false,false;tweets(A, F).;true;true
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
7;true;follows(D, C).;true;true
7;false;follows(G, A).;true;true
7;false,true;follows(H, G).;true;true
8;;accounttype(A, B) :- tweets(A, C).;true;true
8;false;follows(A, E).;true;true
8;false,true;follows(E, F), recursion_accounttype(F, B).;true;true
9;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
9;false;follows(F, A).;true;true
9;false,true;follows(G, F), follows(F, G).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then if ( follows(E, A), follows(A, E) )
%   | | then if ( follows(A, F), follows(E, F) )
%   | | | then return 0.5248156017661783;  // std dev = 2.708, 33.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=22 */
%   | | | else return 0.0581489350995122;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else return 0.5854216623722396;  // std dev = 0.445, 11.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=8 */
%   | else return 0.7331489350995123;  // std dev = 0.331, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   else if ( follows(A, G), recursion_accounttype(G, B) )
%   | then return 0.03206197857777315;  // std dev = 0.379, 23.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=4 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), follows(I, A) )
%   | | | then return -0.1418510649004878;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | | else return 0.3581489350995123;  // std dev = 1.581, 10.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
%   | | else if ( follows(A, J) )
%   | | | then return 0.48972788246793336;  // std dev = 2.103, 19.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=12 */
%   | | | else return 0.28672036367094084;  // std dev = 1.309, 7.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=3 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then if ( follows(D, C) )
%   | | then if ( follows(D, A), follows(A, E) )
%   | | | then return 0.7787342222498743;  // std dev = 0.036, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | | else return 0.5154617447243075;  // std dev = 2.425, 31.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=23 */
%   | | else return 0.14610184967642356;  // std dev = 1.084, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   | else return -0.21384795075216398;  // std dev = 0.078, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   else if ( follows(A, F), recursion_accounttype(F, B) )
%   | then return 0.028114099916791816;  // std dev = 0.379, 23.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=4 */
%   | else if ( follows(G, A) )
%   | | then if ( follows(G, H), follows(H, A) )
%   | | | then return -0.12544463852839138;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | | else return 0.30874113578563506;  // std dev = 1.581, 10.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
%   | | else if ( follows(A, I) )
%   | | | then return 0.4191376347930739;  // std dev = 2.103, 19.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=12 */
%   | | | else return 0.24811816884741303;  // std dev = 1.309, 7.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=3 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( recursion_accounttype(C, B) )
%   | then if ( tweets(A, D) )
%   | | then if ( follows(A, E), follows(E, A) )
%   | | | then return 0.3067830855242105;  // std dev = 2.672, 38.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=23 */
%   | | | else return 0.40914009810668206;  // std dev = 1.508, 11.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=8 */
%   | | else return 0.520106370764895;  // std dev = 0.280, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | else return 0.048947220431982255;  // std dev = 0.389, 27.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=6 */
%   else if ( follows(A, F), recursion_accounttype(F, B) )
%   | then return 0.06495041313310392;  // std dev = 0.410, 14.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=3 */
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), tweets(A, I) )
%   | | | then return 0.375790901151377;  // std dev = 1.414, 9.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=6 */
%   | | | else return 0.3091242344847103;  // std dev = 1.549, 10.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=6 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.11324667924077346;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | else return 0.2799133459074401;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(C, E) )
%   | | then return 0.41778052074628197;  // std dev = 0.346, 38.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=32 */
%   | | else if ( follows(D, C) )
%   | | | then return 0.2474127350372279;  // std dev = 1.441, 9.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=6 */
%   | | | else return -0.2160278555046161;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else return -0.2361447425085727;  // std dev = 0.111, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   else if ( follows(A, F), recursion_accounttype(F, B) )
%   | then return 0.016965123957932444;  // std dev = 0.379, 23.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=4 */
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H) )
%   | | | then return 0.1949124410122699;  // std dev = 2.492, 29.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=14 */
%   | | | else return 0.4179676070312616;  // std dev = 0.901, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else if ( follows(I, A) )
%   | | | then return -0.18500447028354797;  // std dev = 0.135, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | | else return 0.17031067518529347;  // std dev = 1.303, 7.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=3 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then if ( follows(A, E), follows(E, F) )
%   | | then return 0.205170689997906;  // std dev = 0.389, 42.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=27 */
%   | | else return 0.08206790516691068;  // std dev = 0.495, 7.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=4 */
%   | else return 0.31780481306912306;  // std dev = 0.224, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   else if ( follows(G, A), follows(A, H) )
%   | then if ( follows(A, I), recursion_accounttype(I, B) )
%   | | then return -0.046792249495449974;  // std dev = 0.314, 9.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=1 */
%   | | else return 0.12769043934115692;  // std dev = 0.430, 14.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=5 */
%   | else if ( follows(A, J), recursion_accounttype(J, B) )
%   | | then if ( tweets(A, K) )
%   | | | then return 0.21495702869936606;  // std dev = 1.369, 8.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=3 */
%   | | | else return -0.1600429713006339;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else if ( follows(L, A) )
%   | | | then return -0.15942482363797497;  // std dev = 0.120, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | | else return 0.19083190341747552;  // std dev = 2.476, 26.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=15 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then if ( follows(D, C), follows(A, C) )
%   | | then return 0.28860108818272284;  // std dev = 0.325, 31.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=27 */
%   | | else return 0.09171526236222967;  // std dev = 0.428, 19.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=11 */
%   | else return -0.23418081665593768;  // std dev = 0.129, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   else if ( follows(A, E), tweets(A, F) )
%   | then if ( follows(G, A), follows(G, E) )
%   | | then return -0.09363584231724105;  // std dev = 0.265, 14.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=1 */
%   | | else if ( follows(E, H), follows(A, H) )
%   | | | then return 0.48036802798246153;  // std dev = 1.129, 9.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=7 */
%   | | | else return 0.08560057162806993;  // std dev = 1.854, 15.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=7 */
%   | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | then return -0.14270503888071331;  // std dev = 0.015, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | else if ( follows(A, J) )
%   | | | then return 0.16990547018273197;  // std dev = 1.529, 10.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=6 */
%   | | | else return 0.009986448482361597;  // std dev = 1.359, 11.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=3 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E) )
%   | | then return 0.11938950449810516;  // std dev = 0.396, 72.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=40 */
%   | | else return 0.0480055164449578;  // std dev = 0.347, 24.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=11 */
%   | else if ( follows(F, A) )
%   | | then return -0.0976822250135754;  // std dev = 0.857, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else if ( tweets(A, G) )
%   | | | then return -0.11636956319820335;  // std dev = 0.729, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | else return 0.45098424523306246;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(H, A), recursion_accounttype(H, B) )
%   | then return 0.1645643429151715;  // std dev = 0.443, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   | else if ( follows(I, A) )
%   | | then return -0.14086222008695956;  // std dev = 0.108, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.019182772077638854;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | else return 0.1488798496534235;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C) )
%   | then if ( tweets(A, E) )
%   | | then if ( follows(A, F), follows(F, G) )
%   | | | then return 0.0730209085518009;  // std dev = 2.324, 40.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=25 */
%   | | | else return 0.007306786399588134;  // std dev = 1.282, 7.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=4 */
%   | | else return 0.19673727947016822;  // std dev = 0.188, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | else return 0.4564308826749629;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else if ( follows(H, A) )
%   | then return 0.010316161421183708;  // std dev = 0.353, 27.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=6 */
%   | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | then if ( follows(I, J), tweets(A, K) )
%   | | | then return 0.3220343967352639;  // std dev = 1.036, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return -0.1649034891071023;  // std dev = 0.174, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | else if ( tweets(A, L) )
%   | | | then return 0.07769988904084091;  // std dev = 1.740, 14.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=8 */
%   | | | else return 0.10522172316793788;  // std dev = 1.668, 12.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=7 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( tweets(A, C) )
%   then if ( follows(D, A), follows(E, D) )
%   | then if ( follows(E, A) )
%   | | then if ( recursion_accounttype(D, B), recursion_accounttype(E, B) )
%   | | | then return 0.16856774360827362;  // std dev = 1.469, 19.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=16 */
%   | | | else return -0.11020112880774471;  // std dev = 1.692, 28.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=7 */
%   | | else if ( follows(D, E), recursion_accounttype(E, B) )
%   | | | then return 0.2587800637268973;  // std dev = 1.506, 14.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=10 */
%   | | | else return -0.10970748162803072;  // std dev = 0.830, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | else if ( follows(A, F), follows(F, G) )
%   | | then if ( recursion_accounttype(G, B), recursion_accounttype(F, B) )
%   | | | then return 0.6274188390148385;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.01143238436722442;  // std dev = 1.581, 17.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=8 */
%   | | else return -0.008603116230683262;  // std dev = 1.080, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   else if ( follows(A, H) )
%   | then return 0.03650209161018164;  // std dev = 0.338, 25.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=12 */
%   | else return 0.03961080978394817;  // std dev = 0.406, 7.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=3 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, E), follows(E, D) )
%   | | then return 0.06593118166167429;  // std dev = 0.330, 38.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=26 */
%   | | else return -0.09965376197541197;  // std dev = 0.923, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   | else if ( follows(A, F), follows(F, G) )
%   | | then return 0.30628291790609063;  // std dev = 0.077, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return 0.027728997650679092;  // std dev = 0.469, 8.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=5 */
%   else if ( follows(H, A) )
%   | then if ( follows(I, H), follows(H, I) )
%   | | then return 0.006336126487158532;  // std dev = 0.345, 26.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=6 */
%   | | else return -0.13121330559884545;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( follows(A, J), recursion_accounttype(J, B) )
%   | | then return -0.03713578787858492;  // std dev = 0.277, 14.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=3 */
%   | | else if ( follows(A, K) )
%   | | | then return 0.07049441359555239;  // std dev = 2.033, 19.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=12 */
%   | | | else return 0.04532373083472518;  // std dev = 1.295, 7.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=3 */


Results
   AUC ROC   = 0.687295
   AUC PR    = 0.66357
   CLL	      = -0.642357
   Precision = 0.595238 at threshold = 0.5
   Recall    = 0.793651
   F1        = 0.680272


Total learning time: 25.284 seconds
Total inference time: 3.439 seconds
AUC ROC: 0.687295


Results scoring model
   AUC ROC   = 0.900624
   AUC PR    = 0.901974
   CLL	      = -0.444234
   Precision = 0.782609 at threshold = 0.5
   Recall    = 0.870968
   F1        = 0.824427


Total scoring time: 2.687 seconds
Refined model CLL: -0.444234


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.687295
   AUC PR    = 0.66357
   CLL	      = -0.642357
   Precision = 0.595238 at threshold = 0.5
   Recall    = 0.793651
   F1        = 0.680272


Total learning time: 34.75 seconds
Total inference time: 3.439 seconds
AUC ROC: 0.687295
Total revision time: 34.75
Best scored revision CLL: -0.444234


Dataset: 7_yeast_twitter, Fold: 1, Type: Transfer (trRDN-B), Time: 18:06:33
{'AUC ROC': 0.687295, 'AUC PR': 0.66357, 'CLL': -0.642357, 'Precision': [0.595238, 0.5], 'Recall': 0.793651, 'F1': 0.680272, 'Learning time': 34.75, 'Inference time': 3.439, 'parameter_0.4': {'AUC ROC': 0.610796, 'AUC PR': 0.588448, 'CLL': -0.678738, 'Precision': [0.562874, 0.5], 'Recall': 0.746032, 'F1': 0.641638, 'Learning time': 4.726, 'Inference time': 2.478}}


Amount of data: 0.6
******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
0;true;phenotype(C, D), enzyme(A, E).;true;false
0;true,true;phenotype(A, D).;false;false
0;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
0;false,true;interaction(A, G), interaction(G, G).;false;true
0;false,true,false;interaction(H, F), phenotype(H, I).;false;false
0;false,false;interaction(A, A).;false;true
0;false,false,false;complex(A, J), location(A, K).;false;false
1;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
1;true;interaction(D, A), complex(D, E).;false;true
1;true,false;enzyme(A, F), interaction(C, G).;false;true
1;true,false,false;interaction(H, A), interaction(A, H).;false;false
1;false;interaction(A, A).;false;true
1;false,false;interaction(A, I), location(A, J).;true;true
1;false,false,true;complex(A, K), complex(I, K).;false;false
1;false,false,false;complex(A, L), phenotype(A, M).;false;false
2;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
2;true;recursion_proteinclass(C, B).;false;true
2;true,false;interaction(C, E), recursion_proteinclass(E, B).;false;true
2;true,false,false;interaction(F, A), enzyme(A, D).;false;false
2;false;location(A, G), interaction(A, A).;true;true
2;false,true;interaction(A, H), recursion_proteinclass(H, B).;false;false
2;false,false;interaction(I, A), recursion_proteinclass(I, B).;false;true
2;false,false,false;interaction(J, A), interaction(K, J).;false;false
3;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
3;false;interaction(D, A), interaction(A, D).;true;true
3;false,true;complex(A, E), complex(D, E).;true;true
3;false,true,true;interaction(A, A).;false;false
3;false,true,false;interaction(D, D).;false;false
3;false,false;complex(A, F), interaction(G, A).;true;true
3;false,false,true;complex(G, F), location(A, H).;false;false
3;false,false,false;interaction(I, A), interaction(J, I).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;false;true
4;false;interaction(A, D), interaction(E, A).;true;true
4;false,true;recursion_proteinclass(E, B), phenotype(A, F).;true;true
4;false,true,true;complex(D, G), phenotype(D, F).;false;false
4;false,true,false;interaction(A, A).;false;false
4;false,false;interaction(H, A), recursion_proteinclass(H, B).;true;true
4;false,false,true;enzyme(H, I), phenotype(H, J).;false;false
4;false,false,false;interaction(A, K), enzyme(K, L).;false;false
5;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
5;true;interaction(E, A), recursion_proteinclass(C, B).;false;true
5;true,false;interaction(C, A), enzyme(A, F).;false;true
5;true,false,false;interaction(C, G), recursion_proteinclass(G, B).;false;false
5;false;interaction(A, A).;false;true
5;false,false;enzyme(A, H), interaction(A, I).;true;true
5;false,false,true;interaction(I, I), complex(A, J).;false;false
5;false,false,false;interaction(A, K), interaction(K, K).;false;false
6;;proteinclass(A, B) :- interaction(C, A), enzyme(C, D).;true;true
6;true;interaction(E, C), recursion_proteinclass(E, B).;false;true
6;true,false;interaction(A, F), enzyme(F, G).;false;true
6;true,false,false;enzyme(A, H), complex(A, I).;false;false
6;false;enzyme(A, J).;true;true
6;false,true;enzyme(K, J), recursion_proteinclass(K, B).;false;false
6;false,false;interaction(L, A), complex(A, M).;false;true
6;false,false,false;interaction(A, N), recursion_proteinclass(N, B).;false;false
7;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
7;true;enzyme(A, D), interaction(C, E).;true;true
7;true,true;complex(E, F), phenotype(C, G).;false;false
7;true,false;interaction(H, A), enzyme(H, I).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(A, J), enzyme(J, K).;true;true
7;false,false,true;phenotype(J, L), interaction(J, M).;false;false
7;false,false,false;interaction(N, A), interaction(A, N).;false;false
8;;proteinclass(A, B) :- phenotype(A, C), complex(A, D).;true;true
8;true;complex(E, D), recursion_proteinclass(E, B).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(H, F), recursion_proteinclass(H, B).;false;true
8;false,true,false;interaction(A, I), interaction(I, A).;false;false
8;false,false;interaction(J, A), complex(J, K).;true;true
8;false,false,true;phenotype(J, L).;false;false
8;false,false,false;interaction(M, A), phenotype(M, N).;false;false
9;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
9;true;enzyme(A, D), phenotype(C, E).;true;true
9;true,true;phenotype(A, E).;false;false
9;true,false;complex(C, F), interaction(G, A).;false;false
9;false;interaction(A, A).;false;true
9;false,false;interaction(A, H), location(A, I).;true;true
9;false,false,true;interaction(H, J), interaction(J, H).;false;false
9;false,false,false;interaction(A, K), interaction(L, A).;false;false


WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.49768381882044327;  // std dev = 0.480, 86.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=55 */
%   else if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), follows(E, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(D, F) )
%   | | | then return 0.045648935099512344;  // std dev = 2.208, 32.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=6 */
%   | | | else return -0.1418510649004878;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, G) )
%   | | | then return 0.38446472457319614;  // std dev = 3.078, 38.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=20 */
%   | | | else return 0.37988806553429494;  // std dev = 2.396, 23.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=12 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D), tweets(D, E) )
%   | then return 0.4200273513687052;  // std dev = 4.059, 71.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=45 */
%   | else if ( follows(F, C) )
%   | | then return 0.4528912011339644;  // std dev = 1.826, 15.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=10 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A) )
%   | | then if ( tweets(A, H), tweets(G, H) )
%   | | | then return 0.04193312409314077;  // std dev = 2.156, 28.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=6 */
%   | | | else return 0.12634749888892954;  // std dev = 1.407, 10.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=3 */
%   | | else if ( tweets(A, I) )
%   | | | then return 0.33993933890676314;  // std dev = 2.971, 37.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=19 */
%   | | | else return 0.21943869027388765;  // std dev = 2.394, 25.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=10 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( recursion_accounttype(C, B) )
%   | then return 0.3456364505815074;  // std dev = 4.452, 86.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=55 */
%   | else if ( follows(D, C), recursion_accounttype(D, B) )
%   | | then return 0.059263628840337715;  // std dev = 2.434, 33.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=8 */
%   | | else if ( follows(A, E) )
%   | | | then return 0.08177024966519009;  // std dev = 0.811, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | else return -0.20203848807598643;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F), recursion_accounttype(F, B) )
%   | | then return -0.0016820979174768354;  // std dev = 1.783, 22.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=4 */
%   | | else if ( follows(A, G), follows(G, H) )
%   | | | then return 0.5052366830856528;  // std dev = 2.117, 24.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=18 */
%   | | | else return 0.19465208953707824;  // std dev = 1.979, 16.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=7 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.1512187195412962;  // std dev = 4.723, 105.000 (wgt'ed) examples reached here.  /* #neg=58 #pos=47 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( tweets(A, E), tweets(D, E) )
%   | | then if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.16076094136783742;  // std dev = 1.705, 13.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=5 */
%   | | else if ( follows(D, D) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.2746053497611285;  // std dev = 0.707, 2.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */
%   | else if ( tweets(A, F), follows(A, G) )
%   | | then if ( tweets(G, F) )
%   | | | then return 0.37186001953497094;  // std dev = 2.033, 21.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=15 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, H), follows(H, I) )
%   | | | then return 0.3911623244617017;  // std dev = 1.471, 11.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=8 */
%   | | | else return 0.18796799366358738;  // std dev = 2.810, 34.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=17 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.22917629616034227;  // std dev = 4.447, 86.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=55 */
%   else if ( follows(D, A), follows(A, E) )
%   | then if ( recursion_accounttype(E, B) )
%   | | then if ( tweets(D, F) )
%   | | | then return -0.06494234880743266;  // std dev = 1.330, 17.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=2 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.12408098556428553;  // std dev = 1.921, 16.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=6 */
%   | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | then return -0.025124003218257418;  // std dev = 0.380, 22.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=4 */
%   | | else if ( follows(H, A) )
%   | | | then return -0.04485708976891145;  // std dev = 0.879, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else return 0.2311720982932522;  // std dev = 2.960, 40.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=25 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(A, D), recursion_accounttype(C, B) )
%   | then return 0.16958374395467551;  // std dev = 4.054, 71.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=45 */
%   | else if ( follows(A, C) )
%   | | then return 0.02216662956392853;  // std dev = 2.247, 29.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=7 */
%   | | else if ( follows(E, C), recursion_accounttype(E, B) )
%   | | | then return 0.11215446915273285;  // std dev = 2.114, 21.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=11 */
%   | | | else return 0.10070726506474308;  // std dev = 0.698, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(G, A), follows(G, G) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.10589428674904129;  // std dev = 3.530, 62.000 (wgt'ed) examples reached here.  /* #neg=33 #pos=29 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.11715982805786952;  // std dev = 5.353, 140.000 (wgt'ed) examples reached here.  /* #neg=66 #pos=74 */
%   | else if ( follows(E, A) )
%   | | then return -0.23969691486861877;  // std dev = 1.019, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | | else if ( tweets(A, F) )
%   | | | then return -0.13125899891203227;  // std dev = 0.769, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | | | else return 0.11798086045043665;  // std dev = 0.707, 2.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */
%   else if ( recursion_accounttype(G, B) )
%   | then return 0.07359534341727485;  // std dev = 2.688, 32.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=16 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C) )
%   | then if ( tweets(D, E) )
%   | | then return 0.10091838298126402;  // std dev = 4.386, 84.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=53 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0.4402668427305492;  // std dev = 0.038, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A) )
%   | | then if ( follows(H, G) )
%   | | | then return -0.005632523081071242;  // std dev = 2.538, 37.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=9 */
%   | | | else return -0.15665093377361414;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( follows(A, I), follows(I, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.06371093350955316;  // std dev = 3.499, 62.000 (wgt'ed) examples reached here.  /* #neg=33 #pos=29 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( tweets(A, C) )
%   then if ( tweets(D, C), recursion_accounttype(D, B) )
%   | then return 0.053810148581256205;  // std dev = 5.382, 137.000 (wgt'ed) examples reached here.  /* #neg=68 #pos=69 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, E) )
%   | then if ( follows(E, F), recursion_accounttype(F, B) )
%   | | then return 0.07389790174347985;  // std dev = 2.498, 36.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=19 */
%   | | else if ( follows(G, A), follows(A, G) )
%   | | | then return -0.4686780307587671;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | | else return 0.07427016026024214;  // std dev = 0.707, 2.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */
%   | else if ( follows(A, H), tweets(H, I) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, J) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.010044729100857153;  // std dev = 1.499, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(C, D), follows(A, E) )
%   | then return 0.05249622261802541;  // std dev = 3.955, 69.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=43 */
%   | else return 0.13883171990399404;  // std dev = 1.869, 17.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=12 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A) )
%   | | then if ( follows(G, F), follows(F, G) )
%   | | | then return -0.01440005360792024;  // std dev = 2.538, 37.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=9 */
%   | | | else return -0.14353903096671236;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( follows(H, A), follows(A, I) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.03710496438447005;  // std dev = 3.491, 62.000 (wgt'ed) examples reached here.  /* #neg=33 #pos=29 */


Results
   AUC ROC   = 0.618859
   AUC PR    = 0.608075
   CLL	      = -0.672038
   Precision = 0.56962 at threshold = 0.5
   Recall    = 0.714286
   F1        = 0.633803


Total learning time: 5.207 seconds
Total inference time: 2.505 seconds
AUC ROC: 0.618859


Results scoring model
   AUC ROC   = 0.761418
   AUC PR    = 0.741214
   CLL	      = -0.597652
   Precision = 0.675926 at threshold = 0.5
   Recall    = 0.784946
   F1        = 0.726368


Total scoring time: 2.372 seconds
Parameter learned model CLL: -0.597652


Structure after Parameter Learning
[['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), recursion_accounttype(D, B)', 'false,true': 'follows(E, A), follows(E, E)', 'false,true,false': 'follows(D, F)', 'false,false': 'follows(A, A)', 'false,false,false': 'tweets(A, G)'}, {'true': [0.48, 31, 55], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [2.208, 26, 6], 'false,true,false,false': [0.0, 7, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [3.078, 18, 20], 'false,false,false,false': [2.396, 11, 12]}], ['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(A, D), tweets(D, E)', 'true,false': 'follows(F, C)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A)', 'false,false,true': 'tweets(A, H), tweets(G, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true': [4.059, 26, 45], 'true,false,true': [1.826, 5, 10], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [2.156, 22, 6], 'false,false,true,false': [1.407, 7, 3], 'false,false,false,true': [2.971, 18, 19], 'false,false,false,false': [2.394, 15, 10]}], ['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'recursion_accounttype(C, B)', 'true,false': 'follows(D, C), recursion_accounttype(D, B)', 'true,false,false': 'follows(A, E)', 'false': 'follows(A, A)', 'false,false': 'follows(A, F), recursion_accounttype(F, B)', 'false,false,false': 'follows(A, G), follows(G, H)'}, {'true,true': [4.452, 31, 55], 'true,false,true': [2.434, 25, 8], 'true,false,false,true': [0.811, 3, 1], 'true,false,false,false': [0.0, 1, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [1.783, 18, 4], 'false,false,false,true': [2.117, 6, 18], 'false,false,false,false': [1.979, 9, 7]}], ['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'tweets(A, E), tweets(D, E)', 'false,true,true': 'follows(A, A)', 'false,true,false': 'follows(D, D)', 'false,false': 'tweets(A, F), follows(A, G)', 'false,false,true': 'tweets(G, F)', 'false,false,false': 'follows(A, H), follows(H, I)'}, {'true': [4.723, 58, 47], 'false,true,true,true': [0.0, 0, 0], 'false,true,true,false': [1.705, 8, 5], 'false,true,false,true': [0.0, 0, 0], 'false,true,false,false': [0.707, 1, 1], 'false,false,true,true': [2.033, 6, 15], 'false,false,true,false': [0.0, 0, 0], 'false,false,false,true': [1.471, 3, 8], 'false,false,false,false': [2.81, 17, 17]}], ['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(D, A), follows(A, E)', 'false,true': 'recursion_accounttype(E, B)', 'false,true,true': 'tweets(D, F)', 'false,true,false': 'follows(A, A)', 'false,false': 'follows(A, G), recursion_accounttype(G, B)', 'false,false,false': 'follows(H, A)'}, {'true': [4.447, 31, 55], 'false,true,true,true': [1.33, 15, 2], 'false,true,true,false': [0.0, 0, 0], 'false,true,false,true': [0.0, 0, 0], 'false,true,false,false': [1.921, 10, 6], 'false,false,true': [0.38, 18, 4], 'false,false,false,true': [0.879, 4, 1], 'false,false,false,false': [2.96, 15, 25]}], ['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(A, D), recursion_accounttype(C, B)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(E, C), recursion_accounttype(E, B)', 'false': 'follows(A, A)', 'false,false': 'follows(F, A)', 'false,false,false': 'follows(G, A), follows(G, G)'}, {'true,true': [4.054, 26, 45], 'true,false,true': [2.247, 22, 7], 'true,false,false,true': [2.114, 10, 11], 'true,false,false,false': [0.698, 2, 1], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [3.53, 33, 29]}], ['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'true,false': 'follows(E, A)', 'true,false,false': 'tweets(A, F)', 'false': 'recursion_accounttype(G, B)'}, {'true,true': [5.353, 66, 74], 'true,false,true': [1.019, 5, 1], 'true,false,false,true': [0.769, 5, 1], 'true,false,false,false': [0.707, 1, 1], 'false,true': [2.688, 16, 16], 'false,false': [0.0, 0, 0]}], ['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C)', 'true,true': 'tweets(D, E)', 'true,false': 'follows(A, F)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A)', 'false,false,true': 'follows(H, G)', 'false,false,false': 'follows(A, I), follows(I, A)'}, {'true,true,true': [4.386, 31, 53], 'true,true,false': [0.0, 0, 0], 'true,false,true': [0.038, 0, 2], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [2.538, 28, 9], 'false,false,true,false': [0.0, 1, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [3.499, 33, 29]}], ['accounttype(A, B)', {'': 'tweets(A, C)', 'true': 'tweets(D, C), recursion_accounttype(D, B)', 'false': 'follows(A, E)', 'false,true': 'follows(E, F), recursion_accounttype(F, B)', 'false,true,false': 'follows(G, A), follows(A, G)', 'false,false': 'follows(A, H), tweets(H, I)', 'false,false,false': 'follows(A, J)'}, {'true,true': [5.382, 68, 69], 'true,false': [0.0, 0, 0], 'false,true,true': [2.498, 17, 19], 'false,true,false,true': [0.0, 1, 0], 'false,true,false,false': [0.707, 1, 1], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.499, 6, 4]}], ['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'tweets(C, D), follows(A, E)', 'false': 'follows(A, A)', 'false,false': 'follows(F, A)', 'false,false,true': 'follows(G, F), follows(F, G)', 'false,false,false': 'follows(H, A), follows(A, I)'}, {'true,true': [3.955, 26, 43], 'true,false': [1.869, 5, 12], 'false,true': [0.0, 0, 0], 'false,false,true,true': [2.538, 28, 9], 'false,false,true,false': [0.0, 1, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [3.491, 33, 29]}]]
[{'': [0.2305300162249862, 0.2356000000000008], 'false': [0.13017751479289963, 0.24939532383767893], 'false,false': [nan, 0.24939532383767962], 'false,false,false': [0.24930747922437657, 0.24952741020793906], 'false,true': [nan, 0.13017751479289935], 'false,true,false': [0.1523437500000002, -7.93016446160826e-18]}, {'': [0.2305300162249872, 0.22669069218119353], 'true': [0.2320968061892494, 0.22222222222222227], 'false': [nan, 0.2266906921811936], 'false,false': [0.17577223132687342, 0.23828273519406298], 'false,false,false': [0.23852385822158723, 0.22926046934115032], 'true,false': [0.22222222222222227, nan], 'false,false,true': [0.16597051936567353, 0.1979664451650596]}, {'': [0.23148565229278503, 0.2351877652401347], 'false': [nan, 0.2351877652401347], 'false,false': [0.14455727133818297, 0.23306920054742583], 'false,false,false': [0.18667070413988263, 0.2447892713089007], 'true': [0.2304719421199888, 0.17509786457307552], 'true,false': [0.17958709080896335, 0.144449954249754], 'true,false,false': [0.1644529628885445, 0.0]}, {'': [0.21246438591621652, 0.22657467101060788], 'false': [0.22858116118595898, 0.22410007191928194], 'false,true': [0.2235578819715789, 0.25], 'false,true,false': [nan, 0.25], 'false,false': [0.19678766308650505, 0.23111361808140837], 'false,false,false': [0.19666290097204903, 0.23216683172815106], 'false,true,true': [nan, 0.2235578819715789], 'false,false,true': [0.19678766308650505, nan]}, {'': [0.22991643775724657, 0.19769303665546004], 'false': [0.17431529044701857, 0.2059265185807581], 'false,false': [0.14417284372385625, 0.2194014141462158], 'false,false,false': [0.1545282712999932, 0.2190447667061873], 'false,true': [0.1039974135654833, 0.23062176324186065], 'false,true,false': [nan, 0.23062176324186065], 'false,true,true': [0.1039974135654833, nan]}, {'': [0.21686317245568468, 0.20103156348830645], 'true': [0.23147005289348038, 0.19070122885684346], 'false': [nan, 0.20103156348830645], 'false,false': [nan, 0.20103156348830645], 'false,false,false': [nan, 0.20103156348830645], 'true,false': [0.1740986087039052, 0.20647164118366756], 'true,false,false': [0.21273570966668906, 0.16250850313126403]}, {'': [0.20671002003772085, 0.22584272971246835], 'false': [0.22584272971246835, nan], 'true': [0.20466610909490865, 0.1660314001779217], 'true,false': [0.17321427975408246, 0.14814930958291425], 'true,false,false': [0.09866895257012982, 0.24999999999999997]}, {'': [0.22634169868204737, 0.18832594403558134], 'true': [0.22903514756991455, 0.000737546795421623], 'true,true': [0.22903514756991455, nan], 'false': [nan, 0.1883259440355815], 'false,false': [0.17010928580045137, 0.197448312443433], 'false,false,false': [nan, 0.19744831244343294], 'false,false,true': [0.17410666142406261, 0.0], 'true,false': [0.000737546795421623, nan]}, {'': [0.21146031787483643, 0.18966079827279633], 'true': [0.21146031787483643, nan], 'false': [0.18013924964870295, 0.22480821966239173], 'false,false': [nan, 0.22480821966239173], 'false,false,false': [nan, 0.22480821966239173], 'false,true': [0.17329359838376776, 0.23217616402906985], 'false,true,false': [0.0, 0.25]}, {'': [0.22374728481367787, 0.18712274386713762], 'true': [0.22674918463491583, 0.20558271425233], 'false': [nan, 0.18712274386713756], 'false,false': [0.16988436931360631, 0.19654273306637818], 'false,false,false': [nan, 0.19654273306637818], 'false,false,true': [0.17403697361048107, 0.0]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
0;false;follows(A, D), recursion_accounttype(D, B).;true;true
0;false,true;follows(D, F).;true;true
2;;accounttype(A, B) :- follows(C, A).;true;true
2;true;recursion_accounttype(C, B).;true;true
2;true,false;follows(D, C), recursion_accounttype(D, B).;true;true
2;true,false,false;follows(A, E).;true;true
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
7;true;follows(D, C).;true;true
7;false;follows(G, A).;true;true
7;false,true;follows(H, G).;true;true
8;;accounttype(A, B) :- tweets(A, C).;true;true
8;false;follows(A, E).;true;true
8;false,true;follows(E, F), recursion_accounttype(F, B).;true;true
8;false,true,false;follows(G, A), follows(A, G).;true;true
9;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
9;false;follows(F, A).;true;true
9;false,true;follows(G, F), follows(F, G).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then if ( follows(E, A), follows(A, E) )
%   | | then if ( follows(A, F), follows(E, F) )
%   | | | then return 0.5025933795439558;  // std dev = 3.211, 45.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=29 */
%   | | | else return 0.024815601766178873;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | | else return 0.5423594614153018;  // std dev = 0.465, 19.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=13 */
%   | else return 0.6081489350995123;  // std dev = 0.433, 16.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=12 */
%   else if ( follows(A, G), recursion_accounttype(G, B) )
%   | then return 0.011995088945666163;  // std dev = 0.361, 39.000 (wgt'ed) examples reached here.  /* #neg=33 #pos=6 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), follows(I, A) )
%   | | | then return -0.1418510649004878;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | | else return 0.3966104735610508;  // std dev = 1.797, 13.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=7 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.6081489350995123;  // std dev = 2.121, 24.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=18 */
%   | | | else return 0.2956489350995123;  // std dev = 1.984, 16.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=7 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then if ( follows(D, C) )
%   | | then if ( follows(A, E), follows(D, A) )
%   | | | then return 0.7278063940062436;  // std dev = 0.970, 18.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=17 */
%   | | | else return 0.5004557877573569;  // std dev = 3.173, 50.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=36 */
%   | | else return 0.035056952532231546;  // std dev = 0.399, 9.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | else return -0.21092951890402403;  // std dev = 0.074, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   else if ( follows(A, F), recursion_accounttype(F, B) )
%   | then return 0.010528652411522633;  // std dev = 0.361, 39.000 (wgt'ed) examples reached here.  /* #neg=33 #pos=6 */
%   | else if ( follows(G, A) )
%   | | then if ( follows(G, H), follows(H, A) )
%   | | | then return -0.12544463852839138;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | | else return 0.3411827428099923;  // std dev = 1.797, 13.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=7 */
%   | | else if ( follows(A, I), follows(I, J) )
%   | | | then return 0.5170719622367218;  // std dev = 2.121, 24.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=18 */
%   | | | else return 0.25572252559754294;  // std dev = 1.984, 16.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=7 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( recursion_accounttype(C, B) )
%   | then if ( tweets(A, D) )
%   | | then if ( follows(E, A), follows(A, E) )
%   | | | then return 0.29862621444660586;  // std dev = 3.168, 51.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=30 */
%   | | | else return 0.37461332638628037;  // std dev = 2.058, 19.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=13 */
%   | | else return 0.43268720950450607;  // std dev = 0.391, 16.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=12 */
%   | else return 0.06061762405239763;  // std dev = 0.397, 38.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=9 */
%   else if ( follows(A, F), recursion_accounttype(F, B) )
%   | then return 0.0372031369694594;  // std dev = 0.386, 22.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=4 */
%   | else if ( follows(A, G), follows(G, H) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.66257245288266;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.3467829791984496;  // std dev = 2.026, 19.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=13 */
%   | | else if ( tweets(A, I) )
%   | | | then return 0.27706236447869914;  // std dev = 1.414, 8.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=4 */
%   | | | else return 0.15206236447869914;  // std dev = 1.369, 8.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=3 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then if ( follows(D, C) )
%   | | then if ( follows(A, E), follows(E, F) )
%   | | | then return 0.4175937105911277;  // std dev = 2.678, 52.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=43 */
%   | | | else return 0.21760724488564892;  // std dev = 1.931, 16.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=10 */
%   | | else return -0.027080605466255278;  // std dev = 0.391, 9.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | else return -0.2315938424700011;  // std dev = 0.097, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   else if ( follows(A, G), recursion_accounttype(G, B) )
%   | then return 0.0032610923778735933;  // std dev = 0.361, 39.000 (wgt'ed) examples reached here.  /* #neg=33 #pos=6 */
%   | else if ( follows(A, H) )
%   | | then if ( follows(I, A), follows(I, H) )
%   | | | then return -0.05743428343580516;  // std dev = 0.857, 9.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=1 */
%   | | | else return 0.33226036218925364;  // std dev = 2.625, 35.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=25 */
%   | | else if ( follows(J, A) )
%   | | | then return -0.008578872081898448;  // std dev = 0.841, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else return 0.1541905251696237;  // std dev = 1.701, 12.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=5 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then if ( follows(D, C) )
%   | | then if ( follows(A, E), follows(D, A) )
%   | | | then return 0.40132316362194387;  // std dev = 0.968, 18.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=17 */
%   | | | else return 0.23546630111021963;  // std dev = 3.142, 50.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=36 */
%   | | else return -0.022123450913374296;  // std dev = 0.392, 9.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | else return -0.19315284849033804;  // std dev = 0.085, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   else if ( follows(A, F), recursion_accounttype(F, B) )
%   | then return 0.0028435004166464627;  // std dev = 0.361, 39.000 (wgt'ed) examples reached here.  /* #neg=33 #pos=6 */
%   | else if ( follows(A, G) )
%   | | then if ( follows(H, G), recursion_accounttype(H, B) )
%   | | | then return 0.23023820397098607;  // std dev = 2.722, 41.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=26 */
%   | | | else return -0.3339209291260934;  // std dev = 0.020, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else if ( follows(I, A) )
%   | | | then return -0.007212310214247303;  // std dev = 0.841, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else return 0.12329579530956696;  // std dev = 1.701, 12.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=5 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then if ( tweets(C, E), follows(F, C) )
%   | | then if ( follows(D, C) )
%   | | | then return 0.20411630567694816;  // std dev = 3.306, 66.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=51 */
%   | | | else return -0.2262630751964064;  // std dev = 0.136, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else return 0.5712000515230292;  // std dev = 0.281, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else return -0.16494559383366028;  // std dev = 0.074, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   else if ( follows(A, G), recursion_accounttype(G, B) )
%   | then return 0.0024786056996013526;  // std dev = 0.361, 39.000 (wgt'ed) examples reached here.  /* #neg=33 #pos=6 */
%   | else if ( follows(H, A), tweets(A, I) )
%   | | then if ( follows(A, J), follows(H, J) )
%   | | | then return -0.16150948128681816;  // std dev = 0.154, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | | else return 0.23846923549200538;  // std dev = 1.261, 9.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=5 */
%   | | else if ( tweets(A, K) )
%   | | | then return 0.1946962395041818;  // std dev = 2.041, 22.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=15 */
%   | | | else return 0.10456143361876548;  // std dev = 2.232, 23.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=12 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then if ( tweets(C, E), follows(F, C) )
%   | | then if ( tweets(A, E), tweets(D, E) )
%   | | | then return 0.19350736768198412;  // std dev = 2.691, 49.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=39 */
%   | | | else return -0.022913754729022313;  // std dev = 1.929, 24.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=12 */
%   | | else return 0.4408535836054165;  // std dev = 0.282, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else return -0.14354761414963702;  // std dev = 0.066, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   else if ( follows(A, G), recursion_accounttype(G, B) )
%   | then return 0.002159945715682915;  // std dev = 0.361, 39.000 (wgt'ed) examples reached here.  /* #neg=33 #pos=6 */
%   | else if ( follows(A, H) )
%   | | then if ( follows(I, H), recursion_accounttype(I, B) )
%   | | | then return 0.14957281486111224;  // std dev = 2.640, 41.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=26 */
%   | | | else return -0.30081155753107164;  // std dev = 0.038, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else if ( follows(J, A) )
%   | | | then return -0.029377974493581628;  // std dev = 0.843, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else return 0.06352329830031628;  // std dev = 1.696, 12.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=5 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C) )
%   | then if ( tweets(A, E) )
%   | | then if ( follows(A, F), follows(F, G) )
%   | | | then return 0.06543272439566446;  // std dev = 2.585, 53.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=32 */
%   | | | else return -0.00796085775667823;  // std dev = 1.865, 15.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=9 */
%   | | else return 0.17632837048731068;  // std dev = 0.298, 16.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=12 */
%   | else return 0.47131171385121895;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else if ( follows(H, A) )
%   | then return 0.006479431756676487;  // std dev = 0.358, 38.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=9 */
%   | else if ( tweets(A, I) )
%   | | then if ( follows(A, J), follows(J, K) )
%   | | | then return 0.13260032448032577;  // std dev = 2.266, 28.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=15 */
%   | | | else return 0.08394987035520807;  // std dev = 1.363, 9.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=4 */
%   | | else if ( follows(A, L), recursion_accounttype(L, B) )
%   | | | then return -0.15064771065426716;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | | else return 0.053206622471141496;  // std dev = 1.929, 18.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=10 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( tweets(A, C) )
%   then if ( follows(D, A), follows(E, D) )
%   | then if ( follows(E, A), follows(D, E) )
%   | | then return -0.013209980648936097;  // std dev = 0.366, 61.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=30 */
%   | | else if ( follows(D, E), recursion_accounttype(E, B) )
%   | | | then return 0.160587397497476;  // std dev = 2.121, 28.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=17 */
%   | | | else return -0.0746232788504218;  // std dev = 0.639, 8.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */
%   | else if ( follows(A, F), follows(F, G) )
%   | | then if ( follows(A, G) )
%   | | | then return 0.2794394732031863;  // std dev = 1.493, 13.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=8 */
%   | | | else return -9.33651263555583E-4;  // std dev = 1.584, 18.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=9 */
%   | | else if ( follows(A, H) )
%   | | | then return 0.021218925194958254;  // std dev = 0.586, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | else return 0.0870807803499749;  // std dev = 1.225, 6.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   else if ( follows(A, I) )
%   | then return 0.04195663122321299;  // std dev = 0.346, 39.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=20 */
%   | else return 0.03910270380747509;  // std dev = 0.461, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then if ( follows(A, E), follows(E, F) )
%   | | then return 0.05674882088582491;  // std dev = 0.348, 55.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=34 */
%   | | else return -0.0029102781960118544;  // std dev = 0.482, 15.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=9 */
%   | else return 0.1320114898217693;  // std dev = 0.296, 16.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=12 */
%   else if ( follows(G, A) )
%   | then if ( follows(H, G), follows(G, H) )
%   | | then return -0.0021581438948499268;  // std dev = 0.357, 37.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=9 */
%   | | else return -0.1543908723446869;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( tweets(A, I) )
%   | | then if ( follows(A, J), follows(J, K) )
%   | | | then return 0.09004154160591356;  // std dev = 2.232, 28.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=15 */
%   | | | else return 0.0495771116985729;  // std dev = 1.359, 9.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=4 */
%   | | else if ( follows(A, L), recursion_accounttype(L, B) )
%   | | | then return -0.13726182091336606;  // std dev = 5.27e-09, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | | else return 0.03189410913713638;  // std dev = 1.928, 18.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=10 */


Results
   AUC ROC   = 0.720711
   AUC PR    = 0.697682
   CLL	      = -0.628974
   Precision = 0.60625 at threshold = 0.5
   Recall    = 0.769841
   F1        = 0.678322


Total learning time: 54.682 seconds
Total inference time: 3.764 seconds
AUC ROC: 0.720711


Results scoring model
   AUC ROC   = 0.885709
   AUC PR    = 0.877434
   CLL	      = -0.463907
   Precision = 0.78 at threshold = 0.5
   Recall    = 0.83871
   F1        = 0.80829


Total scoring time: 3.239 seconds
Refined model CLL: -0.463907


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.720711
   AUC PR    = 0.697682
   CLL	      = -0.628974
   Precision = 0.60625 at threshold = 0.5
   Recall    = 0.769841
   F1        = 0.678322


Total learning time: 65.5 seconds
Total inference time: 3.764 seconds
AUC ROC: 0.720711
Total revision time: 65.5
Best scored revision CLL: -0.463907


Dataset: 7_yeast_twitter, Fold: 1, Type: Transfer (trRDN-B), Time: 18:07:46
{'AUC ROC': 0.720711, 'AUC PR': 0.697682, 'CLL': -0.628974, 'Precision': [0.60625, 0.5], 'Recall': 0.769841, 'F1': 0.678322, 'Learning time': 65.5, 'Inference time': 3.764, 'parameter_0.6': {'AUC ROC': 0.618859, 'AUC PR': 0.608075, 'CLL': -0.672038, 'Precision': [0.56962, 0.5], 'Recall': 0.714286, 'F1': 0.633803, 'Learning time': 5.207, 'Inference time': 2.505}}


Amount of data: 0.8
******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
0;true;phenotype(C, D), enzyme(A, E).;true;false
0;true,true;phenotype(A, D).;false;false
0;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
0;false,true;interaction(A, G), interaction(G, G).;false;true
0;false,true,false;interaction(H, F), phenotype(H, I).;false;false
0;false,false;interaction(A, A).;false;true
0;false,false,false;complex(A, J), location(A, K).;false;false
1;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
1;true;interaction(D, A), complex(D, E).;false;true
1;true,false;enzyme(A, F), interaction(C, G).;false;true
1;true,false,false;interaction(H, A), interaction(A, H).;false;false
1;false;interaction(A, A).;false;true
1;false,false;interaction(A, I), location(A, J).;true;true
1;false,false,true;complex(A, K), complex(I, K).;false;false
1;false,false,false;complex(A, L), phenotype(A, M).;false;false
2;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
2;true;recursion_proteinclass(C, B).;false;true
2;true,false;interaction(C, E), recursion_proteinclass(E, B).;false;true
2;true,false,false;interaction(F, A), enzyme(A, D).;false;false
2;false;location(A, G), interaction(A, A).;true;true
2;false,true;interaction(A, H), recursion_proteinclass(H, B).;false;false
2;false,false;interaction(I, A), recursion_proteinclass(I, B).;false;true
2;false,false,false;interaction(J, A), interaction(K, J).;false;false
3;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
3;false;interaction(D, A), interaction(A, D).;true;true
3;false,true;complex(A, E), complex(D, E).;true;true
3;false,true,true;interaction(A, A).;false;false
3;false,true,false;interaction(D, D).;false;false
3;false,false;complex(A, F), interaction(G, A).;true;true
3;false,false,true;complex(G, F), location(A, H).;false;false
3;false,false,false;interaction(I, A), interaction(J, I).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;false;true
4;false;interaction(A, D), interaction(E, A).;true;true
4;false,true;recursion_proteinclass(E, B), phenotype(A, F).;true;true
4;false,true,true;complex(D, G), phenotype(D, F).;false;false
4;false,true,false;interaction(A, A).;false;false
4;false,false;interaction(H, A), recursion_proteinclass(H, B).;true;true
4;false,false,true;enzyme(H, I), phenotype(H, J).;false;false
4;false,false,false;interaction(A, K), enzyme(K, L).;false;false
5;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
5;true;interaction(E, A), recursion_proteinclass(C, B).;false;true
5;true,false;interaction(C, A), enzyme(A, F).;false;true
5;true,false,false;interaction(C, G), recursion_proteinclass(G, B).;false;false
5;false;interaction(A, A).;false;true
5;false,false;enzyme(A, H), interaction(A, I).;true;true
5;false,false,true;interaction(I, I), complex(A, J).;false;false
5;false,false,false;interaction(A, K), interaction(K, K).;false;false
6;;proteinclass(A, B) :- interaction(C, A), enzyme(C, D).;true;true
6;true;interaction(E, C), recursion_proteinclass(E, B).;false;true
6;true,false;interaction(A, F), enzyme(F, G).;false;true
6;true,false,false;enzyme(A, H), complex(A, I).;false;false
6;false;enzyme(A, J).;true;true
6;false,true;enzyme(K, J), recursion_proteinclass(K, B).;false;false
6;false,false;interaction(L, A), complex(A, M).;false;true
6;false,false,false;interaction(A, N), recursion_proteinclass(N, B).;false;false
7;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
7;true;enzyme(A, D), interaction(C, E).;true;true
7;true,true;complex(E, F), phenotype(C, G).;false;false
7;true,false;interaction(H, A), enzyme(H, I).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(A, J), enzyme(J, K).;true;true
7;false,false,true;phenotype(J, L), interaction(J, M).;false;false
7;false,false,false;interaction(N, A), interaction(A, N).;false;false
8;;proteinclass(A, B) :- phenotype(A, C), complex(A, D).;true;true
8;true;complex(E, D), recursion_proteinclass(E, B).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(H, F), recursion_proteinclass(H, B).;false;true
8;false,true,false;interaction(A, I), interaction(I, A).;false;false
8;false,false;interaction(J, A), complex(J, K).;true;true
8;false,false,true;phenotype(J, L).;false;false
8;false,false,false;interaction(M, A), phenotype(M, N).;false;false
9;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
9;true;enzyme(A, D), phenotype(C, E).;true;true
9;true,true;phenotype(A, E).;false;false
9;true,false;complex(C, F), interaction(G, A).;false;false
9;false;interaction(A, A).;false;true
9;false,false;interaction(A, H), location(A, I).;true;true
9;false,false,true;interaction(H, J), interaction(J, H).;false;false
9;false,false,false;interaction(A, K), interaction(L, A).;false;false


WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( tweets(C, D) )
%   | then if ( tweets(A, D) )
%   | | then return 0.2599346493852269;  // std dev = 5.188, 112.000 (wgt'ed) examples reached here.  /* #neg=67 #pos=45 */
%   | | else return 0.32689893509951234;  // std dev = 2.823, 32.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=15 */
%   | else return 0.8581489350995122;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(A, F), follows(F, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(G, E), tweets(G, H) )
%   | | | then return 0.524815601766179;  // std dev = 2.160, 21.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=14 */
%   | | | else return 0.8581489350995122;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.4507415276921055;  // std dev = 0.491, 81.000 (wgt'ed) examples reached here.  /* #neg=33 #pos=48 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A) )
%   | then return 0.28612286591761704;  // std dev = 5.359, 116.000 (wgt'ed) examples reached here.  /* #neg=62 #pos=54 */
%   | else if ( follows(C, E) )
%   | | then return 0.11182557508294554;  // std dev = 2.228, 24.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=7 */
%   | | else if ( follows(F, A), follows(A, F) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.1785149649197183;  // std dev = 0.009, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then return 0.45870594748741006;  // std dev = 0.471, 63.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=42 */
%   | | else if ( tweets(A, H) )
%   | | | then return 0.286271226380215;  // std dev = 2.442, 24.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=12 */
%   | | | else return 0.3549609421201076;  // std dev = 1.979, 16.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=9 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( recursion_accounttype(C, B) )
%   | then return 0.20248184959495588;  // std dev = 5.894, 145.000 (wgt'ed) examples reached here.  /* #neg=84 #pos=61 */
%   | else if ( follows(C, D), recursion_accounttype(D, B) )
%   | | then return 0.4045313217831451;  // std dev = 3.331, 53.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=37 */
%   | | else if ( follows(E, A) )
%   | | | then return 0.03716555477126582;  // std dev = 0.823, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | else return 0.28043275256027284;  // std dev = 1.309, 7.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=4 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A), recursion_accounttype(F, B) )
%   | | then return 0.3743101922635881;  // std dev = 1.966, 17.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=11 */
%   | | else if ( follows(G, A), follows(H, G) )
%   | | | then return -0.09673486996262477;  // std dev = 0.906, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | | | else return 0.26405065909982417;  // std dev = 2.057, 17.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=9 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.31818624126486533;  // std dev = 5.034, 108.000 (wgt'ed) examples reached here.  /* #neg=43 #pos=65 */
%   else if ( follows(D, A), follows(A, D) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(D, D) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.034946313146029875;  // std dev = 2.816, 43.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=12 */
%   | else if ( follows(E, A) )
%   | | then return -0.04439565030979398;  // std dev = 0.405, 14.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=3 */
%   | | else if ( follows(F, A), follows(G, F) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.21952533317257283;  // std dev = 4.280, 83.000 (wgt'ed) examples reached here.  /* #neg=39 #pos=44 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.120306659740632;  // std dev = 5.768, 145.000 (wgt'ed) examples reached here.  /* #neg=84 #pos=61 */
%   else if ( follows(A, D), follows(E, A) )
%   | then if ( recursion_accounttype(E, B), tweets(A, F) )
%   | | then if ( tweets(D, F) )
%   | | | then return 0.2751298157868941;  // std dev = 0.767, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.1302052657150542;  // std dev = 2.328, 22.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=11 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( tweets(G, H) )
%   | | | then return 0.2186393448512122;  // std dev = 1.964, 17.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=11 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, I) )
%   | | | then return 0.3287014560212745;  // std dev = 2.596, 37.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=28 */
%   | | | else return 0.09993958285650587;  // std dev = 2.299, 23.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=10 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, A), recursion_accounttype(C, B) )
%   | then return 0.12957461582047333;  // std dev = 5.223, 116.000 (wgt'ed) examples reached here.  /* #neg=62 #pos=54 */
%   | else if ( follows(C, A) )
%   | | then return 0.08938195568335745;  // std dev = 2.208, 20.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=10 */
%   | | else if ( follows(C, E), recursion_accounttype(E, B) )
%   | | | then return 0.16549537293006186;  // std dev = 3.346, 58.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=34 */
%   | | | else return -0.038193851832572914;  // std dev = 1.674, 14.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=5 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), follows(G, G) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.11457229715646933;  // std dev = 3.035, 40.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=21 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.09822794811721387;  // std dev = 6.014, 155.000 (wgt'ed) examples reached here.  /* #neg=79 #pos=76 */
%   | else if ( follows(A, E) )
%   | | then return 0.09019046094566117;  // std dev = 1.364, 9.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=4 */
%   | | else return -0.2709899295360414;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   else if ( recursion_accounttype(F, B) )
%   | then return 0.0923484089579879;  // std dev = 4.167, 83.000 (wgt'ed) examples reached here.  /* #neg=39 #pos=44 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then if ( tweets(C, E) )
%   | | then return 0.05122604962116984;  // std dev = 5.585, 134.000 (wgt'ed) examples reached here.  /* #neg=76 #pos=58 */
%   | | else return 0.5617808892298547;  // std dev = 0.162, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | else if ( follows(F, A) )
%   | | then return -0.09600929594578671;  // std dev = 0.800, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | else return -0.27218506097713574;  // std dev = 0.050, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then if ( tweets(G, H), follows(G, I) )
%   | | | then return 0.1535678850243577;  // std dev = 3.232, 54.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=37 */
%   | | | else return 0.07962493530052307;  // std dev = 1.538, 9.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=5 */
%   | | else if ( follows(J, A), follows(A, J) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.06599558687231463;  // std dev = 3.023, 40.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=21 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( tweets(A, C) )
%   then if ( recursion_accounttype(D, B) )
%   | then return 0.039148795298724864;  // std dev = 6.322, 181.000 (wgt'ed) examples reached here.  /* #neg=95 #pos=86 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(E, A) )
%   | then if ( follows(F, E), recursion_accounttype(F, B) )
%   | | then return 0.19132102796638187;  // std dev = 2.409, 27.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=17 */
%   | | else if ( follows(A, G), follows(G, A) )
%   | | | then return -0.3316238536996867;  // std dev = 0.023, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(H, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(I, A), tweets(I, J) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.050848281703708094;  // std dev = 2.854, 38.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=21 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( tweets(C, D) )
%   | then if ( tweets(A, D) )
%   | | then return 0.010724290646905303;  // std dev = 5.007, 112.000 (wgt'ed) examples reached here.  /* #neg=67 #pos=45 */
%   | | else return 0.03956046341791761;  // std dev = 2.649, 32.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=15 */
%   | else if ( follows(E, A) )
%   | | then return 0.30704328621362165;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then if ( follows(F, G), follows(G, F) )
%   | | | then return 0.10819924395055248;  // std dev = 3.186, 52.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=36 */
%   | | | else return 0.04013030071208666;  // std dev = 1.629, 11.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=6 */
%   | | else if ( follows(A, H), follows(I, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.035361632570554455;  // std dev = 3.014, 40.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=21 */


Results
   AUC ROC   = 0.639991
   AUC PR    = 0.618803
   CLL	      = -0.668006
   Precision = 0.602273 at threshold = 0.5
   Recall    = 0.420635
   F1        = 0.495327


Total learning time: 5.772 seconds
Total inference time: 2.741 seconds
AUC ROC: 0.639991


Results scoring model
   AUC ROC   = 0.72701
   AUC PR    = 0.715673
   CLL	      = -0.629684
   Precision = 0.670886 at threshold = 0.5
   Recall    = 0.427419
   F1        = 0.522167


Total scoring time: 2.487 seconds
Parameter learned model CLL: -0.629684


Structure after Parameter Learning
[['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'tweets(C, D)', 'true,true': 'tweets(A, D)', 'false': 'follows(E, A), recursion_accounttype(E, B)', 'false,true': 'follows(A, F), follows(F, F)', 'false,true,false': 'follows(G, E), tweets(G, H)', 'false,false': 'follows(A, A)'}, {'true,true,true': [5.188, 67, 45], 'true,true,false': [2.823, 17, 15], 'true,false': [0.0, 0, 1], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [2.16, 7, 14], 'false,true,false,false': [0.0, 0, 1], 'false,false,true': [0.0, 0, 0], 'false,false,false': [0.491, 33, 48]}], ['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A)', 'true,false': 'follows(C, E)', 'true,false,false': 'follows(F, A), follows(A, F)', 'false': 'follows(A, A)', 'false,false': 'follows(A, G)', 'false,false,false': 'tweets(A, H)'}, {'true,true': [5.359, 62, 54], 'true,false,true': [2.228, 17, 7], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [0.009, 5, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.471, 21, 42], 'false,false,false,true': [2.442, 12, 12], 'false,false,false,false': [1.979, 7, 9]}], ['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'recursion_accounttype(C, B)', 'true,false': 'follows(C, D), recursion_accounttype(D, B)', 'true,false,false': 'follows(E, A)', 'false': 'follows(A, A)', 'false,false': 'follows(F, A), recursion_accounttype(F, B)', 'false,false,false': 'follows(G, A), follows(H, G)'}, {'true,true': [5.894, 84, 61], 'true,false,true': [3.331, 16, 37], 'true,false,false,true': [0.823, 2, 1], 'true,false,false,false': [1.309, 3, 4], 'false,true': [0.0, 0, 0], 'false,false,true': [1.966, 6, 11], 'false,false,false,true': [0.906, 5, 1], 'false,false,false,false': [2.057, 8, 9]}], ['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(D, A), follows(A, D)', 'false,true': 'follows(A, A)', 'false,true,false': 'follows(D, D)', 'false,false': 'follows(E, A)', 'false,false,false': 'follows(F, A), follows(G, F)'}, {'true': [5.034, 43, 65], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [0.0, 0, 0], 'false,true,false,false': [2.816, 31, 12], 'false,false,true': [0.405, 11, 3], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [4.28, 39, 44]}], ['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(E, A)', 'false,true': 'recursion_accounttype(E, B), tweets(A, F)', 'false,true,true': 'tweets(D, F)', 'false,true,false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'tweets(G, H)', 'false,false,false': 'follows(A, I)'}, {'true': [5.768, 84, 61], 'false,true,true,true': [0.767, 1, 3], 'false,true,true,false': [0.0, 0, 0], 'false,true,false,true': [0.0, 0, 0], 'false,true,false,false': [2.328, 11, 11], 'false,false,true,true': [1.964, 6, 11], 'false,false,true,false': [0.0, 0, 0], 'false,false,false,true': [2.596, 9, 28], 'false,false,false,false': [2.299, 13, 10]}], ['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(D, A), recursion_accounttype(C, B)', 'true,false': 'follows(C, A)', 'true,false,false': 'follows(C, E), recursion_accounttype(E, B)', 'false': 'follows(A, A)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), follows(G, G)'}, {'true,true': [5.223, 62, 54], 'true,false,true': [2.208, 10, 10], 'true,false,false,true': [3.346, 24, 34], 'true,false,false,false': [1.674, 9, 5], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [3.035, 19, 21]}], ['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, E)', 'false': 'recursion_accounttype(F, B)'}, {'true,true': [6.014, 79, 76], 'true,false,true': [1.364, 5, 4], 'true,false,false': [0.0, 1, 0], 'false,true': [4.167, 39, 44], 'false,false': [0.0, 0, 0]}], ['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D)', 'true,true': 'tweets(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(A, G)', 'false,false,true': 'tweets(G, H), follows(G, I)', 'false,false,false': 'follows(J, A), follows(A, J)'}, {'true,true,true': [5.585, 76, 58], 'true,true,false': [0.162, 0, 2], 'true,false,true': [0.8, 3, 1], 'true,false,false': [0.05, 5, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [3.232, 17, 37], 'false,false,true,false': [1.538, 4, 5], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [3.023, 19, 21]}], ['accounttype(A, B)', {'': 'tweets(A, C)', 'true': 'recursion_accounttype(D, B)', 'false': 'follows(E, A)', 'false,true': 'follows(F, E), recursion_accounttype(F, B)', 'false,true,false': 'follows(A, G), follows(G, A)', 'false,false': 'follows(H, A)', 'false,false,false': 'follows(I, A), tweets(I, J)'}, {'true,true': [6.322, 95, 86], 'true,false': [0.0, 0, 0], 'false,true,true': [2.409, 10, 17], 'false,true,false,true': [0.023, 2, 0], 'false,true,false,false': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [2.854, 17, 21]}], ['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'tweets(C, D)', 'true,true': 'tweets(A, D)', 'true,false': 'follows(E, A)', 'false': 'follows(A, A)', 'false,false': 'follows(A, F)', 'false,false,true': 'follows(F, G), follows(G, F)', 'false,false,false': 'follows(A, H), follows(I, A)'}, {'true,true,true': [5.007, 67, 45], 'true,true,false': [2.649, 17, 15], 'true,false,true': [0.0, 0, 1], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [3.186, 16, 36], 'false,false,true,false': [1.629, 5, 6], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [3.014, 19, 21]}]]
[{'': [0.24370986920332932, 0.23753416910170647], 'true': [0.24305555555555555, 0.0], 'true,true': [0.24035395408163338, 0.24902343749999953], 'false': [0.21694214876033016, 0.24142661179698302], 'false,false': [nan, 0.24142661179698227], 'false,true': [nan, 0.21694214876033036], 'false,true,false': [0.22222222222222185, 0.0]}, {'': [0.2427558144589969, 0.2367690356461028], 'true': [0.24756395105912254, 0.18325477460830114], 'false': [nan, 0.23676903564610433], 'false,false': [0.22139652799321022, 0.2481280845318416], 'false,false,false': [0.2484884891096587, 0.24475651143606028], 'true,false': [0.20689548125966853, 1.582750736080496e-05], 'true,false,false': [nan, 1.582750736080496e-05]}, {'': [0.240187565594222, 0.24750858864665276], 'false': [nan, 0.24750858864665276], 'false,false': [0.22724860787669493, 0.24473103845145963], 'false,false,false': [0.13671243341479675, 0.24889885252054053], 'true': [0.23958755251176264, 0.221239677634446], 'true,false': [0.20935127782754892, 0.2515732547334606], 'true,false,false': [0.22572369368554943, 0.2448979591836735]}, {'': [0.2346395828741769, 0.21983919555352452], 'false': [0.18445247157172348, 0.22114557733292065], 'false,false': [0.1639720555853977, 0.2207361080441644], 'false,false,false': [nan, 0.2207361080441644], 'false,true': [nan, 0.18445247157172348], 'false,true,false': [nan, 0.18445247157172348]}, {'': [0.22942662170522019, 0.22183052154747057], 'false': [0.23385529423985738, 0.21600730447613203], 'false,true': [0.14716346892086288, 0.24638619426500633], 'false,true,false': [nan, 0.24638619426500633], 'false,false': [0.22700153364341896, 0.21278179063489872], 'false,false,true': [0.22700153364341896, nan], 'false,false,false': [0.1820985265416452, 0.22987042749767667], 'false,true,true': [0.14716346892086288, nan]}, {'': [0.22427894849697222, 0.23021059867896243], 'false': [nan, 0.23021059867896243], 'false,false': [nan, 0.23021059867896243], 'false,false,false': [nan, 0.23021059867896243], 'true': [0.23515297593886758, 0.2104928925284585], 'true,false': [0.24386931259493455, 0.2009319312266231], 'true,false,false': [0.19307084504085348, 0.2000773519417405]}, {'': [0.23133571835090208, 0.2091731095683544], 'true': [0.23338011957424545, 0.19781595316580824], 'false': [0.2091731095683544, nan], 'true,false': [0.2067503760707132, 0.0]}, {'': [0.22743908491760784, 0.21492188300430595], 'true': [0.23329363516461574, 0.0791150150407287], 'true,true': [0.23274545444842076, 0.013188826023122158], 'false': [nan, 0.21492188300430604], 'false,false': [0.20401332679882098, 0.22847553365436069], 'false,false,false': [nan, 0.22847553365436077], 'false,false,true': [0.19342834553304009, 0.2628367345530534], 'true,false': [0.16014545028570953, 0.0004960445405746583]}, {'': [0.22079467389505994, 0.2184953141961309], 'true': [0.22079467389505994, nan], 'false': [0.2177426771979363, 0.2143513763728292], 'false,true': [0.21499197261817102, 0.0002659328164938274], 'false,false': [nan, 0.2143513763728292], 'false,false,false': [nan, 0.2143513763728292], 'false,true,false': [0.0002659328164938274, nan]}, {'': [0.22203903326970084, 0.21378740633977641], 'true': [0.22300132711736761, 0.0], 'true,true': [0.22387114212109213, 0.21931023304649191], 'false': [nan, 0.2137874063397764], 'false,false': [0.20390376997195436, 0.2270817209876526], 'false,false,false': [nan, 0.2270817209876526], 'false,false,true': [0.19517132944719512, 0.24136001991119116], 'true,false': [0.0, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
0;true;tweets(C, D).;true;true
0;false;follows(E, A), recursion_accounttype(E, B).;true;true
0;false,true;follows(G, E), tweets(G, H).;true;true
1;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
1;true;follows(D, A).;true;true
1;true,false;follows(C, E).;true;true
6;;accounttype(A, B) :- follows(C, A).;true;true
6;true;follows(D, C), recursion_accounttype(D, B).;true;true
6;true,false;follows(A, E).;true;true
7;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
7;true;follows(C, D).;true;true
7;true,false;follows(F, A).;true;true
8;;accounttype(A, B) :- tweets(A, C).;true;true
8;false;follows(E, A).;true;true
8;false,true;follows(F, E), recursion_accounttype(F, B).;true;true
9;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
9;true;tweets(C, D).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( tweets(C, D) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F), recursion_accounttype(F, B) )
%   | | | then return 0.5293818118118416;  // std dev = 4.014, 73.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=49 */
%   | | | else return -0.1418510649004878;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else return 0.044589613065614014;  // std dev = 0.389, 59.000 (wgt'ed) examples reached here.  /* #neg=48 #pos=11 */
%   | else return 0.8581489350995122;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then if ( follows(H, G), tweets(H, I) )
%   | | then return 0.524815601766179;  // std dev = 0.471, 21.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=14 */
%   | | else return 0.8581489350995122;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(J, A) )
%   | | then if ( follows(J, K), follows(K, A) )
%   | | | then return -0.1418510649004878;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | | else return 0.4692600462106234;  // std dev = 2.068, 18.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=11 */
%   | | else return 0.5433341202846964;  // std dev = 0.464, 54.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=37 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F), recursion_accounttype(F, B) )
%   | | | then return 0.45569483504857533;  // std dev = 4.022, 74.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=50 */
%   | | | else return -0.12544463852839138;  // std dev = 5.27e-09, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else return -0.014032755416697145;  // std dev = 0.340, 30.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=4 */
%   | else return 0.09401322159479723;  // std dev = 0.428, 29.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=7 */
%   else if ( follows(A, G), follows(G, H) )
%   | then return 0.4766430219489451;  // std dev = 0.449, 54.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=37 */
%   | else if ( follows(I, A), recursion_accounttype(I, B) )
%   | | then if ( follows(I, J), follows(J, A) )
%   | | | then return 0.4244860824324382;  // std dev = 1.793, 14.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=9 */
%   | | | else return 0.28162893957529533;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else if ( follows(A, K), tweets(A, L) )
%   | | | then return 0.5315794690890183;  // std dev = 0.870, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | else return 0.23496441470338858;  // std dev = 2.535, 27.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=12 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.30083618898955405;  // std dev = 0.464, 86.000 (wgt'ed) examples reached here.  /* #neg=36 #pos=50 */
%   | else return 0.033965944687810154;  // std dev = 0.389, 59.000 (wgt'ed) examples reached here.  /* #neg=48 #pos=11 */
%   else if ( follows(E, A), tweets(E, F) )
%   | then if ( recursion_accounttype(E, B) )
%   | | then if ( tweets(A, F), follows(G, E) )
%   | | | then return 0.31544280812505326;  // std dev = 2.053, 18.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=11 */
%   | | | else return 0.6815840561648345;  // std dev = 0.085, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( follows(E, H), follows(H, A) )
%   | | | then return -0.1763040297208337;  // std dev = 0.048, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | | else return 0.31989778430681015;  // std dev = 2.048, 18.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=11 */
%   | else if ( follows(A, I), follows(I, J) )
%   | | then return 0.4922649545039763;  // std dev = 0.395, 31.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=25 */
%   | | else if ( follows(A, K), tweets(A, L) )
%   | | | then return 0.34039276112487776;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.2591134155045733;  // std dev = 2.289, 21.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=11 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then if ( follows(D, C) )
%   | | then if ( tweets(A, E), tweets(C, F) )
%   | | | then return 0.34953705926074047;  // std dev = 3.595, 65.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=47 */
%   | | | else return 0.5562481265859313;  // std dev = 0.964, 17.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=16 */
%   | | else return -0.24152837642773922;  // std dev = 0.319, 14.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=2 */
%   | else return -0.1459831756506169;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   else if ( follows(A, G), recursion_accounttype(G, B) )
%   | then return 0.029526371410381964;  // std dev = 0.389, 59.000 (wgt'ed) examples reached here.  /* #neg=48 #pos=11 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), follows(I, A) )
%   | | | then return -0.15218055144590767;  // std dev = 0.043, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | | else return 0.24991190142438993;  // std dev = 2.046, 18.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=11 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.3714471421387338;  // std dev = 2.191, 30.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=24 */
%   | | | else return 0.2127181913543769;  // std dev = 2.432, 24.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=13 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then if ( follows(D, C) )
%   | | then if ( tweets(A, E), tweets(C, F) )
%   | | | then return 0.26491559740730214;  // std dev = 3.595, 65.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=47 */
%   | | | else return 0.41964288784663695;  // std dev = 0.964, 17.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=16 */
%   | | else return -0.18670932237572027;  // std dev = 0.320, 14.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=2 */
%   | else return -0.12870667725320611;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   else if ( follows(A, G), recursion_accounttype(G, B) )
%   | then return 0.02558213216073648;  // std dev = 0.389, 59.000 (wgt'ed) examples reached here.  /* #neg=48 #pos=11 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), follows(I, A) )
%   | | | then return -0.13359336335322453;  // std dev = 0.038, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | | else return 0.1906150345587339;  // std dev = 2.044, 18.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=11 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.27908989319492267;  // std dev = 2.191, 30.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=24 */
%   | | | else return 0.16436991530389075;  // std dev = 2.431, 24.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=13 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(D, C) )
%   then if ( recursion_accounttype(D, B), follows(C, D) )
%   | then if ( recursion_accounttype(C, B) )
%   | | then return 0.22346146950294182;  // std dev = 0.414, 82.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=63 */
%   | | else return -0.02669368296698518;  // std dev = 0.347, 61.000 (wgt'ed) examples reached here.  /* #neg=48 #pos=13 */
%   | else return -0.111698648355531;  // std dev = 0.290, 19.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=2 */
%   else if ( follows(A, E), recursion_accounttype(E, B) )
%   | then if ( follows(E, F), follows(A, F) )
%   | | then if ( follows(E, G), follows(F, G) )
%   | | | then return 0.3281144778938475;  // std dev = 1.871, 14.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=7 */
%   | | | else return -0.17188552210615227;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return -0.10217064364997243;  // std dev = 0.237, 13.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=1 */
%   | else if ( follows(A, H), follows(H, I) )
%   | | then return 0.2213347642352754;  // std dev = 0.398, 31.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=25 */
%   | | else if ( tweets(A, J), follows(A, K) )
%   | | | then return 0.16856804321214705;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.11900845821801295;  // std dev = 2.289, 21.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=11 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.06439351080260373;  // std dev = 0.392, 155.000 (wgt'ed) examples reached here.  /* #neg=79 #pos=76 */
%   | else return 0.18240618350455134;  // std dev = 0.400, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   else if ( follows(A, E), recursion_accounttype(E, B) )
%   | then if ( follows(E, F), follows(A, F) )
%   | | then if ( follows(E, G), follows(F, G) )
%   | | | then return 0.2762956696736542;  // std dev = 1.871, 14.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=7 */
%   | | | else return -0.14877919841825607;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return -0.15782601629938056;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | else if ( follows(A, H), follows(H, I) )
%   | | then if ( tweets(A, J) )
%   | | | then return 0.17048653654497847;  // std dev = 1.561, 16.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=13 */
%   | | | else return 0.14370082225926417;  // std dev = 1.535, 14.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=11 */
%   | | else if ( tweets(A, K), follows(A, L) )
%   | | | then return 0.12651269967606896;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.09004089144786595;  // std dev = 2.289, 21.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=11 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then return 0.05695004331111019;  // std dev = 0.386, 136.000 (wgt'ed) examples reached here.  /* #neg=76 #pos=60 */
%   | else return -0.053061572494043016;  // std dev = 0.268, 9.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=1 */
%   else if ( follows(A, E), follows(E, F) )
%   | then if ( follows(F, E), recursion_accounttype(F, B) )
%   | | then if ( follows(E, G), follows(F, G) )
%   | | | then return 0.21944095770168304;  // std dev = 2.207, 46.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=36 */
%   | | | else return -0.5668897158381812;  // std dev = 0.487, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return -0.2103349195053521;  // std dev = 0.649, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | else if ( follows(H, A), tweets(A, I) )
%   | | then if ( recursion_accounttype(H, B) )
%   | | | then return -0.0019472837903313066;  // std dev = 1.910, 16.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=9 */
%   | | | else return 0.04263785777793286;  // std dev = 0.519, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | else if ( tweets(A, J), follows(A, K) )
%   | | | then return 0.09528875861676049;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.06441727980117164;  // std dev = 2.462, 26.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=14 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( tweets(A, C) )
%   then if ( follows(D, A), follows(E, D) )
%   | then if ( recursion_accounttype(E, B), follows(D, E) )
%   | | then if ( tweets(A, F), tweets(E, F) )
%   | | | then return 0.07250855757470187;  // std dev = 4.261, 111.000 (wgt'ed) examples reached here.  /* #neg=52 #pos=59 */
%   | | | else return -0.2925786301452112;  // std dev = 0.494, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else return -0.10792402422389179;  // std dev = 0.305, 16.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=2 */
%   | else if ( follows(A, G), follows(G, H) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.20063058967420813;  // std dev = 1.731, 17.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=9 */
%   | | | else return 0.010224440660200503;  // std dev = 1.572, 21.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=11 */
%   | | else if ( follows(A, I) )
%   | | | then return 0.0211523208261276;  // std dev = 0.835, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return 0.027979069610157403;  // std dev = 1.225, 6.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   else if ( follows(J, A) )
%   | then return 0.0646569779436727;  // std dev = 0.332, 29.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=17 */
%   | else return 0.06263160029351116;  // std dev = 0.420, 38.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=21 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( tweets(C, D) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F), recursion_accounttype(F, B) )
%   | | | then return 0.08553131505258146;  // std dev = 3.459, 73.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=49 */
%   | | | else return -0.12512800285015693;  // std dev = 0.041, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else return -0.013838326730088136;  // std dev = 0.362, 59.000 (wgt'ed) examples reached here.  /* #neg=48 #pos=11 */
%   | else return 0.3001788797701921;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(A, G), follows(G, H) )
%   | then return 0.08685960199683969;  // std dev = 0.364, 54.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=37 */
%   | else if ( tweets(A, I), follows(J, A) )
%   | | then if ( recursion_accounttype(J, B) )
%   | | | then return -0.01666627084364641;  // std dev = 1.906, 16.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=9 */
%   | | | else return 0.05077932606758598;  // std dev = 0.529, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | else if ( follows(A, K), tweets(A, L) )
%   | | | then return 0.0670384430429836;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.03530731777531047;  // std dev = 2.463, 26.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=14 */


Results
   AUC ROC   = 0.688964
   AUC PR    = 0.648812
   CLL	      = -0.629101
   Precision = 0.608187 at threshold = 0.5
   Recall    = 0.825397
   F1        = 0.700337


Total learning time: 43.214 seconds
Total inference time: 3.047 seconds
AUC ROC: 0.688964


Results scoring model
   AUC ROC   = 0.876398
   AUC PR    = 0.867907
   CLL	      = -0.480886
   Precision = 0.78125 at threshold = 0.5
   Recall    = 0.806452
   F1        = 0.793651


Total scoring time: 3.218 seconds
Refined model CLL: -0.480886


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.688964
   AUC PR    = 0.648812
   CLL	      = -0.629101
   Precision = 0.608187 at threshold = 0.5
   Recall    = 0.825397
   F1        = 0.700337


Total learning time: 54.691 seconds
Total inference time: 3.047 seconds
AUC ROC: 0.688964
Total revision time: 54.691
Best scored revision CLL: -0.480886


Dataset: 7_yeast_twitter, Fold: 1, Type: Transfer (trRDN-B), Time: 18:08:47
{'AUC ROC': 0.688964, 'AUC PR': 0.648812, 'CLL': -0.629101, 'Precision': [0.608187, 0.5], 'Recall': 0.825397, 'F1': 0.700337, 'Learning time': 54.691, 'Inference time': 3.047, 'parameter_0.8': {'AUC ROC': 0.639991, 'AUC PR': 0.618803, 'CLL': -0.668006, 'Precision': [0.602273, 0.5], 'Recall': 0.420635, 'F1': 0.495327, 'Learning time': 5.772, 'Inference time': 2.741}}


Amount of data: 1.0
******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
0;true;phenotype(C, D), enzyme(A, E).;true;false
0;true,true;phenotype(A, D).;false;false
0;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
0;false,true;interaction(A, G), interaction(G, G).;false;true
0;false,true,false;interaction(H, F), phenotype(H, I).;false;false
0;false,false;interaction(A, A).;false;true
0;false,false,false;complex(A, J), location(A, K).;false;false
1;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
1;true;interaction(D, A), complex(D, E).;false;true
1;true,false;enzyme(A, F), interaction(C, G).;false;true
1;true,false,false;interaction(H, A), interaction(A, H).;false;false
1;false;interaction(A, A).;false;true
1;false,false;interaction(A, I), location(A, J).;true;true
1;false,false,true;complex(A, K), complex(I, K).;false;false
1;false,false,false;complex(A, L), phenotype(A, M).;false;false
2;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
2;true;recursion_proteinclass(C, B).;false;true
2;true,false;interaction(C, E), recursion_proteinclass(E, B).;false;true
2;true,false,false;interaction(F, A), enzyme(A, D).;false;false
2;false;location(A, G), interaction(A, A).;true;true
2;false,true;interaction(A, H), recursion_proteinclass(H, B).;false;false
2;false,false;interaction(I, A), recursion_proteinclass(I, B).;false;true
2;false,false,false;interaction(J, A), interaction(K, J).;false;false
3;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
3;false;interaction(D, A), interaction(A, D).;true;true
3;false,true;complex(A, E), complex(D, E).;true;true
3;false,true,true;interaction(A, A).;false;false
3;false,true,false;interaction(D, D).;false;false
3;false,false;complex(A, F), interaction(G, A).;true;true
3;false,false,true;complex(G, F), location(A, H).;false;false
3;false,false,false;interaction(I, A), interaction(J, I).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;false;true
4;false;interaction(A, D), interaction(E, A).;true;true
4;false,true;recursion_proteinclass(E, B), phenotype(A, F).;true;true
4;false,true,true;complex(D, G), phenotype(D, F).;false;false
4;false,true,false;interaction(A, A).;false;false
4;false,false;interaction(H, A), recursion_proteinclass(H, B).;true;true
4;false,false,true;enzyme(H, I), phenotype(H, J).;false;false
4;false,false,false;interaction(A, K), enzyme(K, L).;false;false
5;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
5;true;interaction(E, A), recursion_proteinclass(C, B).;false;true
5;true,false;interaction(C, A), enzyme(A, F).;false;true
5;true,false,false;interaction(C, G), recursion_proteinclass(G, B).;false;false
5;false;interaction(A, A).;false;true
5;false,false;enzyme(A, H), interaction(A, I).;true;true
5;false,false,true;interaction(I, I), complex(A, J).;false;false
5;false,false,false;interaction(A, K), interaction(K, K).;false;false
6;;proteinclass(A, B) :- interaction(C, A), enzyme(C, D).;true;true
6;true;interaction(E, C), recursion_proteinclass(E, B).;false;true
6;true,false;interaction(A, F), enzyme(F, G).;false;true
6;true,false,false;enzyme(A, H), complex(A, I).;false;false
6;false;enzyme(A, J).;true;true
6;false,true;enzyme(K, J), recursion_proteinclass(K, B).;false;false
6;false,false;interaction(L, A), complex(A, M).;false;true
6;false,false,false;interaction(A, N), recursion_proteinclass(N, B).;false;false
7;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
7;true;enzyme(A, D), interaction(C, E).;true;true
7;true,true;complex(E, F), phenotype(C, G).;false;false
7;true,false;interaction(H, A), enzyme(H, I).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(A, J), enzyme(J, K).;true;true
7;false,false,true;phenotype(J, L), interaction(J, M).;false;false
7;false,false,false;interaction(N, A), interaction(A, N).;false;false
8;;proteinclass(A, B) :- phenotype(A, C), complex(A, D).;true;true
8;true;complex(E, D), recursion_proteinclass(E, B).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(H, F), recursion_proteinclass(H, B).;false;true
8;false,true,false;interaction(A, I), interaction(I, A).;false;false
8;false,false;interaction(J, A), complex(J, K).;true;true
8;false,false,true;phenotype(J, L).;false;false
8;false,false,false;interaction(M, A), phenotype(M, N).;false;false
9;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
9;true;enzyme(A, D), phenotype(C, E).;true;true
9;true,true;phenotype(A, E).;false;false
9;true,false;complex(C, F), interaction(G, A).;false;false
9;false;interaction(A, A).;false;true
9;false,false;interaction(A, H), location(A, I).;true;true
9;false,false,true;interaction(H, J), interaction(J, H).;false;false
9;false,false,false;interaction(A, K), interaction(L, A).;false;false


WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.4696597264664166;  // std dev = 0.487, 139.000 (wgt'ed) examples reached here.  /* #neg=54 #pos=85 */
%   else if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), follows(E, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(D, F) )
%   | | | then return 0.0954370706927327;  // std dev = 3.268, 59.000 (wgt'ed) examples reached here.  /* #neg=45 #pos=14 */
%   | | | else return -0.1418510649004878;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | else if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, G) )
%   | | | then return 0.39783147478205083;  // std dev = 3.956, 63.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=34 */
%   | | | else return 0.41912454485560896;  // std dev = 3.178, 41.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=23 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D), tweets(D, E) )
%   | then return 0.39434519031094106;  // std dev = 5.269, 116.000 (wgt'ed) examples reached here.  /* #neg=46 #pos=70 */
%   | else if ( follows(F, C) )
%   | | then return 0.4430708274923494;  // std dev = 2.284, 23.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=15 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A) )
%   | | then if ( tweets(A, H), tweets(G, H) )
%   | | | then return 0.14165333401261226;  // std dev = 3.653, 63.000 (wgt'ed) examples reached here.  /* #neg=43 #pos=20 */
%   | | | else return 0.04121975666369156;  // std dev = 1.486, 14.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=3 */
%   | | else if ( tweets(A, I) )
%   | | | then return 0.3231146503695254;  // std dev = 3.468, 50.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=25 */
%   | | | else return 0.3116061560054011;  // std dev = 3.337, 46.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=23 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( recursion_accounttype(C, B) )
%   | then return 0.32815210953008156;  // std dev = 5.745, 139.000 (wgt'ed) examples reached here.  /* #neg=54 #pos=85 */
%   | else if ( follows(D, C), recursion_accounttype(D, B) )
%   | | then return 0.12194086422811572;  // std dev = 3.723, 66.000 (wgt'ed) examples reached here.  /* #neg=45 #pos=21 */
%   | | else if ( follows(A, E) )
%   | | | then return 0.024336604790701696;  // std dev = 1.247, 10.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | | | else return -0.2208852176722845;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F), recursion_accounttype(F, B) )
%   | | then return 0.05647699165563097;  // std dev = 2.428, 32.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=8 */
%   | | else if ( follows(A, G), follows(G, H) )
%   | | | then return 0.4596986563862706;  // std dev = 2.673, 35.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=25 */
%   | | | else return 0.2624036769698399;  // std dev = 2.691, 29.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=15 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.15083227933989649;  // std dev = 6.262, 177.000 (wgt'ed) examples reached here.  /* #neg=99 #pos=78 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( tweets(A, E), tweets(D, E) )
%   | | then if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.28809247893547296;  // std dev = 2.546, 26.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=14 */
%   | | else if ( follows(D, D) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.11057472563787052;  // std dev = 0.810, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | else if ( tweets(A, F), follows(A, G) )
%   | | then if ( tweets(G, F) )
%   | | | then return 0.37744505226563924;  // std dev = 2.379, 28.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=20 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, H), follows(H, I) )
%   | | | then return 0.3700431728164403;  // std dev = 1.900, 18.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=13 */
%   | | | else return 0.18432570541209728;  // std dev = 3.770, 60.000 (wgt'ed) examples reached here.  /* #neg=30 #pos=30 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.21772316980009723;  // std dev = 5.734, 139.000 (wgt'ed) examples reached here.  /* #neg=54 #pos=85 */
%   else if ( follows(D, A), follows(A, E) )
%   | then if ( recursion_accounttype(E, B) )
%   | | then if ( tweets(D, F) )
%   | | | then return -0.03942528730377434;  // std dev = 2.219, 36.000 (wgt'ed) examples reached here.  /* #neg=30 #pos=6 */
%   | | | else return -0.19931677054663832;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.22459350580601936;  // std dev = 2.683, 29.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=15 */
%   | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | then return 0.022105799163984346;  // std dev = 0.429, 32.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=8 */
%   | | else if ( follows(H, A) )
%   | | | then return -0.08619625805573937;  // std dev = 1.277, 11.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=2 */
%   | | | else return 0.22436152694709693;  // std dev = 3.813, 64.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=40 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(A, D), recursion_accounttype(C, B) )
%   | then return 0.15949950450910713;  // std dev = 5.257, 116.000 (wgt'ed) examples reached here.  /* #neg=46 #pos=70 */
%   | else if ( follows(A, C) )
%   | | then return 0.06986058471307027;  // std dev = 3.367, 56.000 (wgt'ed) examples reached here.  /* #neg=37 #pos=19 */
%   | | else if ( follows(E, C), recursion_accounttype(E, B) )
%   | | | then return 0.07916663575403296;  // std dev = 2.776, 37.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=17 */
%   | | | else return 0.07742805572473932;  // std dev = 1.115, 7.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=2 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(G, A), follows(G, G) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.11937055284128584;  // std dev = 4.572, 96.000 (wgt'ed) examples reached here.  /* #neg=48 #pos=48 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.10557654354193724;  // std dev = 7.167, 235.000 (wgt'ed) examples reached here.  /* #neg=114 #pos=121 */
%   | else if ( follows(E, A) )
%   | | then return -0.03820828965800417;  // std dev = 1.495, 9.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=3 */
%   | | else if ( tweets(A, F) )
%   | | | then return -0.056016761476939805;  // std dev = 0.994, 7.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=2 */
%   | | | else return 0.0033339461014600946;  // std dev = 1.043, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   else if ( recursion_accounttype(G, B) )
%   | then return 0.08138801283184183;  // std dev = 3.584, 56.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=28 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C) )
%   | then if ( tweets(D, E) )
%   | | then return 0.09883134062924032;  // std dev = 5.705, 137.000 (wgt'ed) examples reached here.  /* #neg=54 #pos=83 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0.46539288657148375;  // std dev = 0.040, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A) )
%   | | then if ( follows(H, G) )
%   | | | then return 0.011805236717445693;  // std dev = 3.811, 75.000 (wgt'ed) examples reached here.  /* #neg=52 #pos=23 */
%   | | | else return -0.19247220351062616;  // std dev = 0.010, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | else if ( follows(A, I), follows(I, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.07329798841238132;  // std dev = 4.553, 96.000 (wgt'ed) examples reached here.  /* #neg=48 #pos=48 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( tweets(A, C) )
%   then if ( tweets(D, C), recursion_accounttype(D, B) )
%   | then return 0.05643149586379286;  // std dev = 7.128, 230.000 (wgt'ed) examples reached here.  /* #neg=115 #pos=115 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, E) )
%   | then if ( follows(E, F), recursion_accounttype(F, B) )
%   | | then return 0.057615404878208244;  // std dev = 3.342, 56.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=29 */
%   | | else if ( follows(G, A), follows(A, G) )
%   | | | then return -0.49520890437691684;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | | else return -0.014776243563760238;  // std dev = 1.042, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | else if ( follows(A, H), tweets(H, I) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, J) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.050943442993528064;  // std dev = 2.205, 20.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=10 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(C, D), follows(A, E) )
%   | then return 0.045603448882451145;  // std dev = 5.181, 113.000 (wgt'ed) examples reached here.  /* #neg=46 #pos=67 */
%   | else return 0.15014931182680613;  // std dev = 2.345, 26.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=18 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A) )
%   | | then if ( follows(G, F), follows(F, G) )
%   | | | then return -0.0021837637012722187;  // std dev = 3.807, 75.000 (wgt'ed) examples reached here.  /* #neg=52 #pos=23 */
%   | | | else return -0.1722132298288762;  // std dev = 0.009, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | else if ( follows(H, A), follows(A, I) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.04421594707385366;  // std dev = 4.548, 96.000 (wgt'ed) examples reached here.  /* #neg=48 #pos=48 */


Results
   AUC ROC   = 0.617032
   AUC PR    = 0.596137
   CLL	      = -0.663752
   Precision = 0.562874 at threshold = 0.5
   Recall    = 0.746032
   F1        = 0.641638


Total learning time: 6.002 seconds
Total inference time: 2.322 seconds
AUC ROC: 0.617032


Results scoring model
   AUC ROC   = 0.713819
   AUC PR    = 0.688048
   CLL	      = -0.626327
   Precision = 0.636364 at threshold = 0.5
   Recall    = 0.717949
   F1        = 0.674699


Total scoring time: 2.522 seconds
Parameter learned model CLL: -0.626327


Structure after Parameter Learning
[['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), recursion_accounttype(D, B)', 'false,true': 'follows(E, A), follows(E, E)', 'false,true,false': 'follows(D, F)', 'false,false': 'follows(A, A)', 'false,false,false': 'tweets(A, G)'}, {'true': [0.487, 54, 85], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [3.268, 45, 14], 'false,true,false,false': [0.0, 10, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [3.956, 29, 34], 'false,false,false,false': [3.178, 18, 23]}], ['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(A, D), tweets(D, E)', 'true,false': 'follows(F, C)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A)', 'false,false,true': 'tweets(A, H), tweets(G, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true': [5.269, 46, 70], 'true,false,true': [2.284, 8, 15], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [3.653, 43, 20], 'false,false,true,false': [1.486, 11, 3], 'false,false,false,true': [3.468, 25, 25], 'false,false,false,false': [3.337, 23, 23]}], ['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'recursion_accounttype(C, B)', 'true,false': 'follows(D, C), recursion_accounttype(D, B)', 'true,false,false': 'follows(A, E)', 'false': 'follows(A, A)', 'false,false': 'follows(A, F), recursion_accounttype(F, B)', 'false,false,false': 'follows(A, G), follows(G, H)'}, {'true,true': [5.745, 54, 85], 'true,false,true': [3.723, 45, 21], 'true,false,false,true': [1.247, 8, 2], 'true,false,false,false': [0.0, 1, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [2.428, 24, 8], 'false,false,false,true': [2.673, 10, 25], 'false,false,false,false': [2.691, 14, 15]}], ['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'tweets(A, E), tweets(D, E)', 'false,true,true': 'follows(A, A)', 'false,true,false': 'follows(D, D)', 'false,false': 'tweets(A, F), follows(A, G)', 'false,false,true': 'tweets(G, F)', 'false,false,false': 'follows(A, H), follows(H, I)'}, {'true': [6.262, 99, 78], 'false,true,true,true': [0.0, 0, 0], 'false,true,true,false': [2.546, 12, 14], 'false,true,false,true': [0.0, 0, 0], 'false,true,false,false': [0.81, 2, 1], 'false,false,true,true': [2.379, 8, 20], 'false,false,true,false': [0.0, 0, 0], 'false,false,false,true': [1.9, 5, 13], 'false,false,false,false': [3.77, 30, 30]}], ['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(D, A), follows(A, E)', 'false,true': 'recursion_accounttype(E, B)', 'false,true,true': 'tweets(D, F)', 'false,true,false': 'follows(A, A)', 'false,false': 'follows(A, G), recursion_accounttype(G, B)', 'false,false,false': 'follows(H, A)'}, {'true': [5.734, 54, 85], 'false,true,true,true': [2.219, 30, 6], 'false,true,true,false': [0.0, 1, 0], 'false,true,false,true': [0.0, 0, 0], 'false,true,false,false': [2.683, 14, 15], 'false,false,true': [0.429, 24, 8], 'false,false,false,true': [1.277, 9, 2], 'false,false,false,false': [3.813, 24, 40]}], ['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(A, D), recursion_accounttype(C, B)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(E, C), recursion_accounttype(E, B)', 'false': 'follows(A, A)', 'false,false': 'follows(F, A)', 'false,false,false': 'follows(G, A), follows(G, G)'}, {'true,true': [5.257, 46, 70], 'true,false,true': [3.367, 37, 19], 'true,false,false,true': [2.776, 20, 17], 'true,false,false,false': [1.115, 5, 2], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [4.572, 48, 48]}], ['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'true,false': 'follows(E, A)', 'true,false,false': 'tweets(A, F)', 'false': 'recursion_accounttype(G, B)'}, {'true,true': [7.167, 114, 121], 'true,false,true': [1.495, 6, 3], 'true,false,false,true': [0.994, 5, 2], 'true,false,false,false': [1.043, 3, 2], 'false,true': [3.584, 28, 28], 'false,false': [0.0, 0, 0]}], ['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C)', 'true,true': 'tweets(D, E)', 'true,false': 'follows(A, F)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A)', 'false,false,true': 'follows(H, G)', 'false,false,false': 'follows(A, I), follows(I, A)'}, {'true,true,true': [5.705, 54, 83], 'true,true,false': [0.0, 0, 0], 'true,false,true': [0.04, 0, 2], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [3.811, 52, 23], 'false,false,true,false': [0.01, 2, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [4.553, 48, 48]}], ['accounttype(A, B)', {'': 'tweets(A, C)', 'true': 'tweets(D, C), recursion_accounttype(D, B)', 'false': 'follows(A, E)', 'false,true': 'follows(E, F), recursion_accounttype(F, B)', 'false,true,false': 'follows(G, A), follows(A, G)', 'false,false': 'follows(A, H), tweets(H, I)', 'false,false,false': 'follows(A, J)'}, {'true,true': [7.128, 115, 115], 'true,false': [0.0, 0, 0], 'false,true,true': [3.342, 27, 29], 'false,true,false,true': [0.0, 1, 0], 'false,true,false,false': [1.042, 3, 2], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [2.205, 10, 10]}], ['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'tweets(C, D), follows(A, E)', 'false': 'follows(A, A)', 'false,false': 'follows(F, A)', 'false,false,true': 'follows(G, F), follows(F, G)', 'false,false,false': 'follows(H, A), follows(A, I)'}, {'true,true': [5.181, 46, 67], 'true,false': [2.345, 8, 18], 'false,true': [0.0, 0, 0], 'false,false,true,true': [3.807, 52, 23], 'false,false,true,false': [0.009, 2, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [4.548, 48, 48]}]]
[{'': [0.23756534340872829, 0.24197266864913694], 'false': [0.16173072883847878, 0.2476886094674557], 'false,false': [nan, 0.24768860946745536], 'false,false,false': [0.24842529604434532, 0.24628197501487328], 'false,true': [nan, 0.1617307288384795], 'false,true,false': [0.1809824762999133, -1.1102230246251566e-17]}, {'': [0.23756534340872665, 0.23378309238180134], 'true': [0.2392984542211647, 0.2268431001890362], 'false': [nan, 0.23378309238180248], 'false,false': [0.2034508687644024, 0.24132493055151305], 'false,false,false': [0.24051519967238547, 0.2421360908101155], 'true,false': [0.2268431001890362, nan], 'false,false,true': [0.21176895395707432, 0.1577665643853873]}, {'': [0.23648158212155032, 0.2396011040522099], 'false': [nan, 0.2396011040522099], 'false,false': [0.18429372747057673, 0.23442663086952037], 'true': [0.2374449729628048, 0.20264345364710065], 'false,false,false': [0.20409765292057672, 0.24974329146712831], 'true,false': [0.20996862904195143, 0.14637069229151614], 'true,false,false': [0.15554105768320697, 0.0]}, {'': [0.2215148153140206, 0.23443692101496405], 'false': [0.24906890422007832, 0.23043208241598875], 'false,true': [0.2493287423081861, 0.21856434063584929], 'false,true,true': [nan, 0.2493287423081861], 'false,false': [0.20213872687708928, 0.23462453705317501], 'false,false,false': [0.20060512373200556, 0.2368709046574297], 'false,true,false': [nan, 0.21856434063584929], 'false,false,true': [0.20213872687708928, nan]}, {'': [0.236535853321097, 0.21369295158442425], 'false': [0.20179221033112854, 0.21975963065671986], 'false,false': [0.18389643226606622, 0.2277170636798492], 'false,false,false': [0.1482860704683158, 0.22722383209028757], 'false,true': [0.1337965209392415, 0.24817807640339587], 'false,true,false': [nan, 0.24817807640339587], 'false,true,true': [0.13682213727847736, 0.0]}, {'': [0.2237030303303667, 0.21776080487557067], 'true': [0.23826246734134462, 0.20287295313570886], 'false': [nan, 0.21776080487557067], 'false,false': [nan, 0.21776080487557067], 'false,false,false': [nan, 0.21776080487557067], 'true,false': [0.20243229153904704, 0.20338813773750858], 'true,false,false': [0.2082711174846522, 0.17757556014846912]}, {'': [0.21899615828310726, 0.22932895683940266], 'false': [0.22932895683940266, nan], 'true': [0.21857359353293962, 0.2057763449735275], 'true,false': [0.2484715044462465, 0.1737344467555421], 'true,false,false': [0.14109007302984397, 0.21738177451898638]}, {'': [0.2360711290429404, 0.2053563249469099], 'true': [0.2375725027765073, 0.0007930047395887652], 'true,true': [0.2375725027765073, nan], 'false': [nan, 0.20535632494690967], 'false,false': [0.18963186625334408, 0.21598264721727678], 'false,false,false': [nan, 0.21598264721727675], 'false,false,true': [0.19360343186893617, 5.276029253771519e-05], 'true,false': [0.0007930047395887652, nan]}, {'': [0.22091645180029545, 0.2126196786902456], 'true': [0.22091645180029545, nan], 'false': [0.20275004845808264, 0.24316613780509871], 'false,false': [nan, 0.24316613780509871], 'false,false,false': [nan, 0.24316613780509871], 'false,true': [0.19941599181760222, 0.21287224801563728], 'false,true,false': [0.0, 0.21697744068942976]}, {'': [0.23430766352478463, 0.20429323979083447], 'true': [0.2375172515408361, 0.21147289279373405], 'false': [nan, 0.20429323979083444], 'false,false': [0.1889814781557485, 0.21542521366176312], 'false,false,false': [nan, 0.21542521366176312], 'false,false,true': [0.19326889114027532, 4.438147790340394e-05]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
0;false;follows(A, D), recursion_accounttype(D, B).;true;true
0;false,true;follows(D, F).;true;true
2;;accounttype(A, B) :- follows(C, A).;true;true
2;true;recursion_accounttype(C, B).;true;true
2;true,false;follows(D, C), recursion_accounttype(D, B).;true;true
2;true,false,false;follows(A, E).;true;true
4;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
4;false;follows(D, A), follows(A, E).;true;true
4;false,true;recursion_accounttype(E, B).;true;true
4;false,true,true;tweets(D, F).;true;true
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
7;true;follows(D, C).;true;true
7;false;follows(G, A).;true;true
7;false,true;follows(H, G).;true;true
8;;accounttype(A, B) :- tweets(A, C).;true;true
8;false;follows(A, E).;true;true
8;false,true;follows(E, F), recursion_accounttype(F, B).;true;true
8;false,true,false;follows(G, A), follows(A, G).;true;true
9;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
9;false;follows(F, A).;true;true
9;false,true;follows(G, F), follows(F, G).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, D), recursion_accounttype(D, B) )
%   | | | then return 0.6448156017661795;  // std dev = 3.548, 75.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=59 */
%   | | | else return -0.008517731567154407;  // std dev = 1.862, 30.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=4 */
%   | | else return -0.14185106490048777;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else return 0.567826354454351;  // std dev = 0.454, 31.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=22 */
%   else if ( follows(A, F), recursion_accounttype(F, B) )
%   | then return 0.06104748582415005;  // std dev = 0.402, 69.000 (wgt'ed) examples reached here.  /* #neg=55 #pos=14 */
%   | else if ( follows(A, G) )
%   | | then if ( follows(H, A), follows(H, G) )
%   | | | then return 0.25814893509951237;  // std dev = 2.191, 20.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=8 */
%   | | | else return 0.564031288040688;  // std dev = 3.254, 51.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=36 */
%   | | else if ( follows(I, A), tweets(A, J) )
%   | | | then return -0.016851064900487787;  // std dev = 0.935, 8.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */
%   | | | else return 0.3381489350995123;  // std dev = 2.498, 25.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=12 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then if ( follows(D, C) )
%   | | then if ( tweets(C, E), tweets(A, F) )
%   | | | then return 0.5000458391769181;  // std dev = 4.175, 89.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=65 */
%   | | | else return 0.6681413345051748;  // std dev = 1.346, 20.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=18 */
%   | | else return -0.024480802718304013;  // std dev = 0.314, 15.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=2 */
%   | else return -0.13774282108367303;  // std dev = 0.024, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   else if ( follows(A, G), recursion_accounttype(G, B) )
%   | then return 0.05345251714923056;  // std dev = 0.402, 69.000 (wgt'ed) examples reached here.  /* #neg=55 #pos=14 */
%   | else if ( follows(A, H) )
%   | | then if ( follows(I, H), recursion_accounttype(I, B) )
%   | | | then return 0.4362945083644312;  // std dev = 3.883, 68.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=44 */
%   | | | else return -0.22513846918543312;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else if ( follows(J, A) )
%   | | | then return 0.028813607839057943;  // std dev = 1.264, 11.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=2 */
%   | | | else return 0.3118156270860298;  // std dev = 2.345, 22.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=11 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( recursion_accounttype(C, B) )
%   | then if ( follows(D, A), follows(A, D) )
%   | | then return 0.29618354740929265;  // std dev = 0.433, 108.000 (wgt'ed) examples reached here.  /* #neg=45 #pos=63 */
%   | | else if ( follows(A, E), follows(E, F) )
%   | | | then return 0.7033500704796828;  // std dev = 0.134, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.3148526953285874;  // std dev = 2.374, 25.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=16 */
%   | else return 0.10190797406913828;  // std dev = 0.435, 77.000 (wgt'ed) examples reached here.  /* #neg=54 #pos=23 */
%   else if ( follows(A, G), recursion_accounttype(G, B) )
%   | then return 0.09363144859496748;  // std dev = 0.433, 32.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=8 */
%   | else if ( follows(A, H), follows(H, I) )
%   | | then if ( follows(A, I) )
%   | | | then return 0.5787936746933187;  // std dev = 0.943, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | | else return 0.3437509396505836;  // std dev = 2.426, 26.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=17 */
%   | | else if ( follows(A, J), tweets(A, K) )
%   | | | then return 0.39717050948587046;  // std dev = 0.717, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.25349226495333527;  // std dev = 2.529, 26.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=13 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then if ( follows(D, C) )
%   | | then if ( tweets(A, E), tweets(D, E) )
%   | | | then return 0.38677375032487926;  // std dev = 3.732, 85.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=67 */
%   | | | else return 0.22349610843048406;  // std dev = 2.224, 24.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=16 */
%   | | else return -0.07564785775029735;  // std dev = 0.280, 15.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=2 */
%   | else return -0.15765534129249217;  // std dev = 0.027, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   else if ( follows(A, F), recursion_accounttype(F, B) )
%   | then return 0.03315203067097039;  // std dev = 0.402, 69.000 (wgt'ed) examples reached here.  /* #neg=55 #pos=14 */
%   | else if ( follows(A, G) )
%   | | then if ( follows(H, G), recursion_accounttype(H, B) )
%   | | | then return 0.29387579019615695;  // std dev = 3.814, 68.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=44 */
%   | | | else return -0.23035056323084915;  // std dev = 0.037, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else if ( tweets(A, I), follows(J, A) )
%   | | | then return -0.03128552919714367;  // std dev = 0.935, 8.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */
%   | | | else return 0.1999332615659464;  // std dev = 2.487, 25.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=12 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then return 0.17601865066881417;  // std dev = 0.422, 114.000 (wgt'ed) examples reached here.  /* #neg=45 #pos=69 */
%   | else return 0.23073253041333827;  // std dev = 0.355, 25.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=16 */
%   else if ( follows(E, A), follows(A, F) )
%   | then if ( recursion_accounttype(F, B) )
%   | | then return -0.012860566531123224;  // std dev = 0.369, 37.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=6 */
%   | | else if ( tweets(A, G) )
%   | | | then return 0.19321135059060746;  // std dev = 2.443, 26.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=14 */
%   | | | else return 0.003684286596074967;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then if ( follows(H, I), follows(A, I) )
%   | | | then return 0.2261691044857677;  // std dev = 2.191, 20.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=8 */
%   | | | else return -0.17383089551423245;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else if ( follows(A, J) )
%   | | | then return 0.23148445998129172;  // std dev = 2.864, 42.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=29 */
%   | | | else return 0.11315542884950658;  // std dev = 2.696, 33.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=13 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then if ( follows(D, C) )
%   | | then if ( follows(A, E), follows(D, A) )
%   | | | then return 0.31683224883758776;  // std dev = 1.887, 28.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=24 */
%   | | | else return 0.18504214510627268;  // std dev = 3.896, 81.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=59 */
%   | | else return -0.09397490363418594;  // std dev = 0.278, 15.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=2 */
%   | else return -0.1620975513822903;  // std dev = 0.029, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   else if ( follows(A, F), recursion_accounttype(F, B) )
%   | then return 0.023400989453652123;  // std dev = 0.396, 69.000 (wgt'ed) examples reached here.  /* #neg=55 #pos=14 */
%   | else if ( follows(G, A) )
%   | | then if ( follows(G, H), follows(H, A) )
%   | | | then return -0.2107308615516032;  // std dev = 0.949, 15.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=1 */
%   | | | else return 0.2761397264657403;  // std dev = 2.298, 25.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=16 */
%   | | else if ( tweets(A, I), follows(A, J) )
%   | | | then return 0.19699018065251922;  // std dev = 1.991, 21.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=15 */
%   | | | else return 0.14698464008898607;  // std dev = 3.113, 43.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=25 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then if ( follows(D, C) )
%   | | then if ( tweets(A, E), tweets(C, F) )
%   | | | then return 0.13768627785969123;  // std dev = 4.097, 89.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=65 */
%   | | | else return 0.2904332091315748;  // std dev = 1.342, 20.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=18 */
%   | | else return -0.07830770389776123;  // std dev = 0.280, 15.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=2 */
%   | else return -0.1412754882118346;  // std dev = 0.026, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   else if ( follows(A, G), recursion_accounttype(G, B) )
%   | then return 0.019938649645734913;  // std dev = 0.395, 69.000 (wgt'ed) examples reached here.  /* #neg=55 #pos=14 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), follows(I, A) )
%   | | | then return -0.17243773432725037;  // std dev = 0.943, 15.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=1 */
%   | | | else return 0.21207428925433708;  // std dev = 2.296, 25.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=16 */
%   | | else if ( tweets(A, J), follows(A, K) )
%   | | | then return 0.1489077642735123;  // std dev = 1.989, 21.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=15 */
%   | | | else return 0.11185125950672972;  // std dev = 3.112, 43.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=25 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C) )
%   | then return 0.07065073534311704;  // std dev = 0.387, 137.000 (wgt'ed) examples reached here.  /* #neg=54 #pos=83 */
%   | else return 0.6514039585596132;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else if ( follows(E, A) )
%   | then if ( follows(F, E) )
%   | | then if ( tweets(A, G) )
%   | | | then return 0.045899115039078044;  // std dev = 3.227, 64.000 (wgt'ed) examples reached here.  /* #neg=43 #pos=21 */
%   | | | else return -0.12238597438778372;  // std dev = 1.171, 11.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=2 */
%   | | else return -0.17946727424952752;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else if ( follows(A, H), tweets(A, I) )
%   | | then if ( follows(H, J), follows(A, J) )
%   | | | then return 0.1893281975484829;  // std dev = 2.044, 18.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=9 */
%   | | | else return 0.038227384071832224;  // std dev = 1.890, 24.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=12 */
%   | | else if ( follows(A, K), recursion_accounttype(K, B) )
%   | | | then return -0.012311704535908711;  // std dev = 1.248, 11.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=2 */
%   | | | else return 0.08489977042456003;  // std dev = 3.112, 43.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=25 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( tweets(A, C) )
%   then if ( follows(D, A), follows(E, D) )
%   | then if ( recursion_accounttype(E, B), follows(D, E) )
%   | | then return 0.05982221059484807;  // std dev = 0.410, 159.000 (wgt'ed) examples reached here.  /* #neg=73 #pos=86 */
%   | | else return -0.10527215666966376;  // std dev = 0.286, 17.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=2 */
%   | else if ( follows(A, F), recursion_accounttype(F, B) )
%   | | then if ( follows(F, G), follows(A, G) )
%   | | | then return 0.2117760027406941;  // std dev = 1.797, 13.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=6 */
%   | | | else return -0.1022641283748078;  // std dev = 0.625, 11.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=1 */
%   | | else if ( follows(A, H) )
%   | | | then return 0.11610382919634075;  // std dev = 2.027, 22.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=16 */
%   | | | else return 0.059644353846609814;  // std dev = 1.414, 8.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=4 */
%   else if ( follows(A, I) )
%   | then return 0.043275138696746;  // std dev = 0.370, 62.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=31 */
%   | else if ( follows(J, A) )
%   | | then return -0.010962884347416268;  // std dev = 1.155, 6.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | else return 0.05964435384660982;  // std dev = 0.500, 14.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=7 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, E) )
%   | then return 0.06224475536765266;  // std dev = 0.367, 114.000 (wgt'ed) examples reached here.  /* #neg=45 #pos=69 */
%   | else return 0.007795762188861382;  // std dev = 0.463, 25.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=16 */
%   else if ( follows(F, A) )
%   | then if ( follows(G, F), follows(F, G) )
%   | | then if ( tweets(A, H) )
%   | | | then return 0.030339583060082446;  // std dev = 3.214, 64.000 (wgt'ed) examples reached here.  /* #neg=43 #pos=21 */
%   | | | else return -0.10359278279584401;  // std dev = 1.176, 11.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=2 */
%   | | else return -0.14164518445215715;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | then if ( follows(I, J), follows(A, J) )
%   | | | then return 0.13307743660194513;  // std dev = 2.170, 20.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=8 */
%   | | | else return -0.15342854404155493;  // std dev = 0.025, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else if ( follows(A, K), follows(K, L) )
%   | | | then return 0.07119199719296851;  // std dev = 2.645, 35.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=25 */
%   | | | else return 0.04294689832160912;  // std dev = 2.578, 29.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=15 */


Results
   AUC ROC   = 0.728238
   AUC PR    = 0.706921
   CLL	      = -0.611795
   Precision = 0.630952 at threshold = 0.5
   Recall    = 0.84127
   F1        = 0.721088


Total learning time: 42.292 seconds
Total inference time: 2.79 seconds
AUC ROC: 0.728238


Results scoring model
   AUC ROC   = 0.849297
   AUC PR    = 0.823634
   CLL	      = -0.507406
   Precision = 0.759036 at threshold = 0.5
   Recall    = 0.807692
   F1        = 0.782609


Total scoring time: 3.044 seconds
Refined model CLL: -0.507406


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.728238
   AUC PR    = 0.706921
   CLL	      = -0.611795
   Precision = 0.630952 at threshold = 0.5
   Recall    = 0.84127
   F1        = 0.721088


Total learning time: 53.86 seconds
Total inference time: 2.79 seconds
AUC ROC: 0.728238
Total revision time: 53.86
Best scored revision CLL: -0.507406


Dataset: 7_yeast_twitter, Fold: 1, Type: Transfer (trRDN-B), Time: 18:09:48
{'AUC ROC': 0.728238, 'AUC PR': 0.706921, 'CLL': -0.611795, 'Precision': [0.630952, 0.5], 'Recall': 0.84127, 'F1': 0.721088, 'Learning time': 53.86, 'Inference time': 2.79, 'parameter_1.0': {'AUC ROC': 0.617032, 'AUC PR': 0.596137, 'CLL': -0.663752, 'Precision': [0.562874, 0.5], 'Recall': 0.746032, 'F1': 0.641638, 'Learning time': 6.002, 'Inference time': 2.322}}


Starting fold 2

Target train facts examples: 1580
Target train pos examples: 126
Target train neg examples: 126

Target test facts examples: 1562
Target test pos	 examples: 156
Target test neg examples: 156

Amount of data: 0.2
******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
0;true;phenotype(C, D), enzyme(A, E).;true;false
0;true,true;phenotype(A, D).;false;false
0;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
0;false,true;interaction(A, G), interaction(G, G).;false;true
0;false,true,false;interaction(H, F), phenotype(H, I).;false;false
0;false,false;interaction(A, A).;false;true
0;false,false,false;complex(A, J), location(A, K).;false;false
1;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
1;true;interaction(D, A), complex(D, E).;false;true
1;true,false;enzyme(A, F), interaction(C, G).;false;true
1;true,false,false;interaction(H, A), interaction(A, H).;false;false
1;false;interaction(A, A).;false;true
1;false,false;interaction(A, I), location(A, J).;true;true
1;false,false,true;complex(A, K), complex(I, K).;false;false
1;false,false,false;complex(A, L), phenotype(A, M).;false;false
2;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
2;true;recursion_proteinclass(C, B).;false;true
2;true,false;interaction(C, E), recursion_proteinclass(E, B).;false;true
2;true,false,false;interaction(F, A), enzyme(A, D).;false;false
2;false;location(A, G), interaction(A, A).;true;true
2;false,true;interaction(A, H), recursion_proteinclass(H, B).;false;false
2;false,false;interaction(I, A), recursion_proteinclass(I, B).;false;true
2;false,false,false;interaction(J, A), interaction(K, J).;false;false
3;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
3;false;interaction(D, A), interaction(A, D).;true;true
3;false,true;complex(A, E), complex(D, E).;true;true
3;false,true,true;interaction(A, A).;false;false
3;false,true,false;interaction(D, D).;false;false
3;false,false;complex(A, F), interaction(G, A).;true;true
3;false,false,true;complex(G, F), location(A, H).;false;false
3;false,false,false;interaction(I, A), interaction(J, I).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;false;true
4;false;interaction(A, D), interaction(E, A).;true;true
4;false,true;recursion_proteinclass(E, B), phenotype(A, F).;true;true
4;false,true,true;complex(D, G), phenotype(D, F).;false;false
4;false,true,false;interaction(A, A).;false;false
4;false,false;interaction(H, A), recursion_proteinclass(H, B).;true;true
4;false,false,true;enzyme(H, I), phenotype(H, J).;false;false
4;false,false,false;interaction(A, K), enzyme(K, L).;false;false
5;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
5;true;interaction(E, A), recursion_proteinclass(C, B).;false;true
5;true,false;interaction(C, A), enzyme(A, F).;false;true
5;true,false,false;interaction(C, G), recursion_proteinclass(G, B).;false;false
5;false;interaction(A, A).;false;true
5;false,false;enzyme(A, H), interaction(A, I).;true;true
5;false,false,true;interaction(I, I), complex(A, J).;false;false
5;false,false,false;interaction(A, K), interaction(K, K).;false;false
6;;proteinclass(A, B) :- interaction(C, A), enzyme(C, D).;true;true
6;true;interaction(E, C), recursion_proteinclass(E, B).;false;true
6;true,false;interaction(A, F), enzyme(F, G).;false;true
6;true,false,false;enzyme(A, H), complex(A, I).;false;false
6;false;enzyme(A, J).;true;true
6;false,true;enzyme(K, J), recursion_proteinclass(K, B).;false;false
6;false,false;interaction(L, A), complex(A, M).;false;true
6;false,false,false;interaction(A, N), recursion_proteinclass(N, B).;false;false
7;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
7;true;enzyme(A, D), interaction(C, E).;true;true
7;true,true;complex(E, F), phenotype(C, G).;false;false
7;true,false;interaction(H, A), enzyme(H, I).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(A, J), enzyme(J, K).;true;true
7;false,false,true;phenotype(J, L), interaction(J, M).;false;false
7;false,false,false;interaction(N, A), interaction(A, N).;false;false
8;;proteinclass(A, B) :- phenotype(A, C), complex(A, D).;true;true
8;true;complex(E, D), recursion_proteinclass(E, B).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(H, F), recursion_proteinclass(H, B).;false;true
8;false,true,false;interaction(A, I), interaction(I, A).;false;false
8;false,false;interaction(J, A), complex(J, K).;true;true
8;false,false,true;phenotype(J, L).;false;false
8;false,false,false;interaction(M, A), phenotype(M, N).;false;false
9;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
9;true;enzyme(A, D), phenotype(C, E).;true;true
9;true,true;phenotype(A, E).;false;false
9;true,false;complex(C, F), interaction(G, A).;false;false
9;false;interaction(A, A).;false;true
9;false,false;interaction(A, H), location(A, I).;true;true
9;false,false,true;interaction(H, J), interaction(J, H).;false;false
9;false,false,false;interaction(A, K), interaction(L, A).;false;false


WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( tweets(C, D) )
%   | then if ( tweets(A, D) )
%   | | then return 0.35814893509951234;  // std dev = 2.449, 24.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=12 */
%   | | else return 0.15814893509951225;  // std dev = 1.449, 10.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=3 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(A, F), follows(F, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(G, E), tweets(G, H) )
%   | | | then return 0.3581489350995122;  // std dev = 0.707, 2.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.5010060779566552;  // std dev = 0.479, 14.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=9 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A) )
%   | then return 0.28315327418492664;  // std dev = 2.726, 30.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=14 */
%   | else if ( follows(C, E) )
%   | | then return 0.07326389528430699;  // std dev = 0.850, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0.430171007557226;  // std dev = 0.477, 14.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=9 */
%   | | else if ( tweets(A, G) )
%   | | | then return 0.2972033744318763;  // std dev = 0.723, 2.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( recursion_accounttype(C, B) )
%   | then return 0.2164107040010514;  // std dev = 2.872, 34.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=15 */
%   | else if ( follows(C, D), recursion_accounttype(D, B) )
%   | | then return 0.4045007119729015;  // std dev = 1.449, 10.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=7 */
%   | | else if ( follows(E, A) )
%   | | | then return -0.2666511895780489;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | | else return 0.3711673786395682;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A), recursion_accounttype(F, B) )
%   | | then return 0.758531938307088;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else if ( follows(G, A), follows(H, G) )
%   | | | then return -0.2685895240240181;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.3131736250645188;  // std dev = 2.357, 24.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=14 */
%   else if ( follows(D, A), follows(A, D) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(D, D) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.11654919604917803;  // std dev = 1.578, 11.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=5 */
%   | else if ( follows(E, A) )
%   | | then return -0.2651269942399146;  // std dev = 0.027, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else if ( follows(F, A), follows(G, F) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.22096978596849084;  // std dev = 1.542, 11.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=6 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.13043907582540645;  // std dev = 2.793, 34.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=15 */
%   else if ( follows(A, D), follows(E, A) )
%   | then if ( recursion_accounttype(E, B), tweets(A, F) )
%   | | then if ( tweets(D, F) )
%   | | | then return -0.2758467423127877;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.25274410148396914;  // std dev = 1.155, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( tweets(G, H) )
%   | | | then return 0.5182274508129265;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, I) )
%   | | | then return 0.27833700690854385;  // std dev = 1.194, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   | | | else return -0.17718936467295082;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, A), recursion_accounttype(C, B) )
%   | then return 0.12089018302544363;  // std dev = 2.641, 30.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=14 */
%   | else if ( follows(C, A) )
%   | | then return 0.19040603075357657;  // std dev = 1.155, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | | else if ( follows(C, E), recursion_accounttype(E, B) )
%   | | | then return 0.1009644039275093;  // std dev = 1.272, 8.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=4 */
%   | | | else return 0.06862508687793772;  // std dev = 0.884, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), follows(G, G) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.11883400109959806;  // std dev = 0.384, 2.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.11261639474419287;  // std dev = 2.875, 37.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=19 */
%   | else if ( follows(A, E) )
%   | | then return -0.27766276308407645;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( recursion_accounttype(F, B) )
%   | then return 0.09724371099183218;  // std dev = 1.513, 11.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=6 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then if ( tweets(C, E) )
%   | | then return 0.06700693583656535;  // std dev = 2.727, 33.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=15 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A) )
%   | | then return -0.3857605944500101;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then if ( tweets(G, H), follows(G, I) )
%   | | | then return 0.1456987942276669;  // std dev = 1.448, 10.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=7 */
%   | | | else return 0.029324546309167837;  // std dev = 0.881, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else if ( follows(J, A), follows(A, J) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.07587547912687335;  // std dev = 0.369, 2.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( tweets(A, C) )
%   then if ( recursion_accounttype(D, B) )
%   | then return 0.0401166292238126;  // std dev = 2.882, 39.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=19 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(E, A) )
%   | then if ( follows(F, E), recursion_accounttype(F, B) )
%   | | then return 0.11252162577730622;  // std dev = 1.395, 9.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=5 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(H, A), tweets(H, I) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.0634848479267425;  // std dev = 0.548, 2.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( tweets(C, D) )
%   | then if ( tweets(A, D) )
%   | | then return 0.08000631994944496;  // std dev = 2.320, 24.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=12 */
%   | | else return -0.09820789556408867;  // std dev = 1.392, 10.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=3 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, E) )
%   | | then if ( follows(E, F), follows(F, E) )
%   | | | then return 0.09692448185590684;  // std dev = 1.441, 10.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=7 */
%   | | | else return 0.011626217741153688;  // std dev = 0.877, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else if ( follows(A, G), follows(H, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.05409776190752791;  // std dev = 0.364, 2.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */


Results
   AUC ROC   = 0.643162
   AUC PR    = 0.613378
   CLL	      = -0.663637
   Precision = 0.631579 at threshold = 0.5
   Recall    = 0.384615
   F1        = 0.478088


Total learning time: 4.131 seconds
Total inference time: 2.735 seconds
AUC ROC: 0.643162


Results scoring model
   AUC ROC   = 0.7752
   AUC PR    = 0.76168
   CLL	      = -0.608857
   Precision = 0.714286 at threshold = 0.5
   Recall    = 0.4
   F1        = 0.512821


Total scoring time: 1.762 seconds
Parameter learned model CLL: -0.608857


Structure after Parameter Learning
[['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'tweets(C, D)', 'true,true': 'tweets(A, D)', 'false': 'follows(E, A), recursion_accounttype(E, B)', 'false,true': 'follows(A, F), follows(F, F)', 'false,true,false': 'follows(G, E), tweets(G, H)', 'false,false': 'follows(A, A)'}, {'true,true,true': [2.449, 12, 12], 'true,true,false': [1.449, 7, 3], 'true,false': [0.0, 0, 0], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [0.707, 1, 1], 'false,true,false,false': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [0.479, 5, 9]}], ['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A)', 'true,false': 'follows(C, E)', 'false': 'follows(A, A)', 'false,false': 'follows(A, F)', 'false,false,false': 'tweets(A, G)'}, {'true,true': [2.726, 16, 14], 'true,false,true': [0.85, 3, 1], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.477, 5, 9], 'false,false,false,true': [0.723, 1, 1], 'false,false,false,false': [0.0, 0, 0]}], ['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'recursion_accounttype(C, B)', 'true,false': 'follows(C, D), recursion_accounttype(D, B)', 'true,false,false': 'follows(E, A)', 'false': 'follows(A, A)', 'false,false': 'follows(F, A), recursion_accounttype(F, B)', 'false,false,false': 'follows(G, A), follows(H, G)'}, {'true,true': [2.872, 19, 15], 'true,false,true': [1.449, 3, 7], 'true,false,false,true': [0.0, 1, 0], 'true,false,false,false': [0.816, 1, 2], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 1], 'false,false,false,true': [0.0, 1, 0], 'false,false,false,false': [0.0, 0, 0]}], ['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(D, A), follows(A, D)', 'false,true': 'follows(A, A)', 'false,true,false': 'follows(D, D)', 'false,false': 'follows(E, A)', 'false,false,false': 'follows(F, A), follows(G, F)'}, {'true': [2.357, 10, 14], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [0.0, 0, 0], 'false,true,false,false': [1.578, 6, 5], 'false,false,true': [0.027, 4, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.542, 5, 6]}], ['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(E, A)', 'false,true': 'recursion_accounttype(E, B), tweets(A, F)', 'false,true,true': 'tweets(D, F)', 'false,true,false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'tweets(G, H)', 'false,false,false': 'follows(A, I)'}, {'true': [2.793, 19, 15], 'false,true,true,true': [0.0, 1, 0], 'false,true,true,false': [0.0, 0, 0], 'false,true,false,true': [0.0, 0, 0], 'false,true,false,false': [1.155, 2, 4], 'false,false,true,true': [0.0, 0, 1], 'false,false,true,false': [0.0, 0, 0], 'false,false,false,true': [1.194, 2, 5], 'false,false,false,false': [0.0, 1, 0]}], ['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(D, A), recursion_accounttype(C, B)', 'true,false': 'follows(C, A)', 'true,false,false': 'follows(C, E), recursion_accounttype(E, B)', 'false': 'follows(A, A)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), follows(G, G)'}, {'true,true': [2.641, 16, 14], 'true,false,true': [1.155, 2, 4], 'true,false,false,true': [1.272, 4, 4], 'true,false,false,false': [0.884, 2, 2], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.384, 1, 1]}], ['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, E)', 'false': 'recursion_accounttype(F, B)'}, {'true,true': [2.875, 18, 19], 'true,false,true': [0.0, 2, 0], 'true,false,false': [0.0, 0, 0], 'false,true': [1.513, 5, 6], 'false,false': [0.0, 0, 0]}], ['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D)', 'true,true': 'tweets(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(A, G)', 'false,false,true': 'tweets(G, H), follows(G, I)', 'false,false,false': 'follows(J, A), follows(A, J)'}, {'true,true,true': [2.727, 18, 15], 'true,true,false': [0.0, 0, 0], 'true,false,true': [0.0, 1, 0], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [1.448, 3, 7], 'false,false,true,false': [0.881, 2, 2], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.369, 1, 1]}], ['accounttype(A, B)', {'': 'tweets(A, C)', 'true': 'recursion_accounttype(D, B)', 'false': 'follows(E, A)', 'false,true': 'follows(F, E), recursion_accounttype(F, B)', 'false,false': 'follows(G, A)', 'false,false,false': 'follows(H, A), tweets(H, I)'}, {'true,true': [2.882, 20, 19], 'true,false': [0.0, 0, 0], 'false,true,true': [1.395, 4, 5], 'false,true,false': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.548, 1, 1]}], ['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'tweets(C, D)', 'true,true': 'tweets(A, D)', 'false': 'follows(A, A)', 'false,false': 'follows(A, E)', 'false,false,true': 'follows(E, F), follows(F, E)', 'false,false,false': 'follows(A, G), follows(H, A)'}, {'true,true,true': [2.32, 12, 12], 'true,true,false': [1.392, 7, 3], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [1.441, 3, 7], 'false,false,true,false': [0.877, 2, 2], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.364, 1, 1]}]]
[{'': [0.24653979238754278, 0.23437499999999994], 'true': [0.24653979238754278, nan], 'true,true': [0.24999999999999956, 0.20999999999999988], 'false': [0.25, 0.2295918367346937], 'false,true': [nan, 0.25], 'false,true,false': [0.25, nan], 'false,false': [nan, 0.22959183673469377]}, {'': [0.24430285838924995, 0.23371212988785206], 'true': [0.2476338646519001, 0.18044953079412027], 'false': [nan, 0.23371212988785198], 'false,false': [0.22750797361220193, 0.26167088129081506], 'false,false,false': [0.26167088129081506, nan], 'true,false': [0.18044953079412027, nan]}, {'': [0.241761962506682, 0.26374462459529746], 'false': [nan, 0.26374462459529746], 'false,false': [0.0, 0.0], 'true': [0.24268146539634858, 0.2269977193577079], 'true,false': [0.2100000000000001, 0.24294401528476123], 'true,false,false': [0.0, 0.22222222222222218], 'false,false,false': [0.0, nan]}, {'': [0.23154240689309594, 0.21415634006725975], 'false': [0.2262762182361249, 0.2049996473626204], 'false,true': [nan, 0.2262762182361249], 'false,true,false': [nan, 0.2262762182361249], 'false,false': [0.0007033351981235031, 0.21627852749470983], 'false,false,false': [nan, 0.21627852749470983]}, {'': [0.22948480433867172, 0.20515568629981623], 'false': [0.22468944926954973, 0.18735895331652203], 'false,true': [0.0, 0.2222222222222222], 'false,true,false': [nan, 0.2222222222222222], 'false,false': [0.0, 0.20098895745342632], 'false,false,false': [0.20376363126028346, 0.0], 'false,true,true': [0.0, nan], 'false,false,true': [0.0, nan]}, {'': [0.22396804915475854, 0.07379280129964419], 'true': [0.232499150299989, 0.2097449856565403], 'true,false': [0.22222222222222224, 0.20015825775610593], 'true,false,false': [0.2022583790089166, 0.1952607942989962], 'false': [nan, 0.07379280129964419], 'false,false': [nan, 0.07379280129964419], 'false,false,false': [nan, 0.07379280129964419]}, {'': [0.21937901405990587, 0.2081610955767238], 'true': [0.22342616883473054, 0.0], 'false': [0.2081610955767238, nan], 'true,false': [0.0, nan]}, {'': [0.22455069807271852, 0.19070294138203617], 'true': [0.2253258989021061, 0.0], 'true,true': [0.2253258989021061, nan], 'false': [nan, 0.19070294138203617], 'false,false': [0.20803888426020115, 0.0681809210265049], 'false,false,true': [0.20976034844965108, 0.19406167694472176], 'false,false,false': [nan, 0.0681809210265049], 'true,false': [0.0, nan]}, {'': [0.213009340162779, 0.20453183999722696], 'true': [0.213009340162779, nan], 'false': [0.21618459753481792, 0.15012702651100485], 'false,true': [0.21618459753481792, nan], 'false,false': [nan, 0.15012702651100485], 'false,false,false': [nan, 0.15012702651100485]}, {'': [0.22193775094882465, 0.18752869223893853], 'true': [0.22193775094882465, nan], 'true,true': [0.2243385032270175, 0.19375690552038244], 'false': [nan, 0.18752869223893853], 'false,false': [0.20480467444763656, 0.06629877770237096], 'false,false,true': [0.2077234493015904, 0.192310741697759], 'false,false,false': [nan, 0.06629877770237096]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
2;;accounttype(A, B) :- follows(A, C).;true;true
2;true;recursion_accounttype(C, B).;true;true
2;true,false;follows(C, D), recursion_accounttype(D, B).;true;true
2;true,false,false;follows(E, A).;true;true
2;false;follows(F, A), recursion_accounttype(F, B).;true;true
3;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
3;false;follows(D, A), follows(A, D).;true;true
3;false,false;follows(E, A).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;false;follows(A, D), follows(E, A).;true;true
4;false,true;recursion_accounttype(E, B), tweets(A, F).;true;true
4;false,false;follows(G, A), recursion_accounttype(G, B).;true;true
4;false,false,false;follows(A, I).;true;true
6;;accounttype(A, B) :- follows(C, A).;true;true
6;true;follows(D, C), recursion_accounttype(D, B).;true;true
7;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
7;true;follows(C, D).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, A), tweets(A, D) )
%   | then return 0.6273797043302815;  // std dev = 0.421, 13.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=10 */
%   | else if ( tweets(A, E), follows(F, A) )
%   | | then if ( follows(A, F), tweets(C, E) )
%   | | | then return 0.024815601766178873;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | | | else return -0.14185106490048777;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else if ( follows(C, A) )
%   | | | then return 0.28672036367094084;  // std dev = 1.309, 7.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=3 */
%   | | | else return 0.10814893509951219;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   else if ( tweets(A, G) )
%   | then if ( follows(H, A) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.3581489350995122;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return 0.19148226843284552;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | else return 0.5248156017661789;  // std dev = 1.155, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | else return 0.8581489350995121;  // std dev = 2.11e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, A), tweets(A, D) )
%   | then return 0.5328490890947368;  // std dev = 0.421, 13.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=10 */
%   | else if ( follows(C, A) )
%   | | then return 0.24811816884741303;  // std dev = 0.495, 7.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=3 */
%   | | else if ( follows(A, E), follows(E, C) )
%   | | | then return -0.04788216464757959;  // std dev = 0.948, 11.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=1 */
%   | | | else return 0.17780077116908896;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   else if ( tweets(A, F) )
%   | then if ( follows(A, G), follows(G, H) )
%   | | then if ( follows(H, A), follows(G, A) )
%   | | | then return 0.14207446911896834;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | else return 0.5870513788173632;  // std dev = 0.901, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else return 0.21257487056904717;  // std dev = 1.087, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | else return 0.7194734122109545;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( recursion_accounttype(C, B) )
%   | then if ( follows(D, A), follows(A, D) )
%   | | then if ( recursion_accounttype(D, B), tweets(A, E) )
%   | | | then return 0.4239325089396988;  // std dev = 1.519, 13.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=10 */
%   | | | else return 0.10747931674270253;  // std dev = 1.646, 14.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=4 */
%   | | else return -0.007317147660155399;  // std dev = 0.339, 7.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=1 */
%   | else if ( follows(C, F), recursion_accounttype(F, B) )
%   | | then if ( follows(G, A), tweets(A, H) )
%   | | | then return 0.26474129053832507;  // std dev = 0.960, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return 0.4621564649262073;  // std dev = 0.881, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | else if ( follows(I, A) )
%   | | | then return -0.1984607075199754;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | | else return 0.3472480879331202;  // std dev = 0.752, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   else if ( follows(J, A), recursion_accounttype(J, B) )
%   | then return 0.8015392924800246;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else return -0.1984607075199754;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then return 0.2582237731863357;  // std dev = 0.421, 17.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=11 */
%   | else return 0.18948272304439798;  // std dev = 0.495, 7.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=3 */
%   else if ( follows(E, A), follows(A, E) )
%   | then if ( follows(A, F), recursion_accounttype(F, B) )
%   | | then return 0.04755957220320199;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else return 0.2896221753862829;  // std dev = 0.990, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | else if ( follows(G, A) )
%   | | then return -0.13182603297838585;  // std dev = 0.043, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | | then return 0.07844991177088684;  // std dev = 0.857, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | else return 0.2910017450410883;  // std dev = 1.145, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( recursion_accounttype(D, B) )
%   | | then if ( follows(D, E), follows(E, A) )
%   | | | then return 0.2504537993370202;  // std dev = 1.718, 16.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=11 */
%   | | | else return 0.10708288863584349;  // std dev = 1.027, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else return -0.020993901751058846;  // std dev = 0.352, 7.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=1 */
%   | else return -0.007265407750391354;  // std dev = 0.335, 7.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=1 */
%   else if ( follows(A, F), follows(G, A) )
%   | then if ( recursion_accounttype(G, B), tweets(A, H) )
%   | | then return -0.20813899180689405;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else return 0.22506627289156866;  // std dev = 0.984, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | else if ( follows(I, A), recursion_accounttype(I, B) )
%   | | then return 0.5832622521215046;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else if ( follows(A, J) )
%   | | | then return 0.2202220946382801;  // std dev = 1.144, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   | | | else return -0.15107049066655476;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(D, C) )
%   | then if ( recursion_accounttype(D, B) )
%   | | then return 0.4579091797368341;  // std dev = 0.081, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( tweets(A, E), tweets(D, E) )
%   | | | then return 0.1662492530280778;  // std dev = 0.984, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | | | else return -0.17433866818267207;  // std dev = 0.973, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | else return -0.07685453726425792;  // std dev = 0.937, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   else if ( follows(A, F), recursion_accounttype(F, B) )
%   | then if ( follows(A, G), follows(G, F) )
%   | | then return -0.02822960678938223;  // std dev = 0.309, 9.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=1 */
%   | | else return 0.14335991996042194;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | else if ( tweets(A, H) )
%   | | then if ( follows(A, I), follows(I, J) )
%   | | | then return 0.1396489257883776;  // std dev = 1.290, 8.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=5 */
%   | | | else return -0.010327826601944487;  // std dev = 0.723, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | else return 0.32860911374673146;  // std dev = 0.021, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E), follows(A, F) )
%   | | then if ( recursion_accounttype(F, B), tweets(F, E) )
%   | | | then return 0.08519703975077193;  // std dev = 1.686, 20.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=11 */
%   | | | else return -0.006415569820285387;  // std dev = 0.981, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.11989368779773373;  // std dev = 1.253, 7.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=3 */
%   | | | else return 0.19311172650954772;  // std dev = 0.393, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | else return -0.10299588397085446;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   else if ( follows(A, H), follows(H, I) )
%   | then return 0.09854936400137422;  // std dev = 0.432, 8.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=4 */
%   | else return 0.12758702143573142;  // std dev = 0.730, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( follows(F, A), follows(F, E) )
%   | | | then return 0.11737936228266838;  // std dev = 1.622, 18.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=12 */
%   | | | else return -0.05057160027663621;  // std dev = 0.926, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | else if ( follows(G, A), follows(A, G) )
%   | | | then return 0.036450841454388865;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else return -0.02229844618293066;  // std dev = 0.868, 7.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=1 */
%   | else return -0.1387419687442423;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   else if ( tweets(A, H) )
%   | then if ( follows(I, A) )
%   | | then if ( follows(A, I) )
%   | | | then return 0.06807527621739429;  // std dev = 0.948, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return 0.011175719438277748;  // std dev = 0.419, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | else return 0.08859991449929039;  // std dev = 1.124, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | else return 0.22919560271195213;  // std dev = 0.027, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( tweets(A, C), follows(A, D) )
%   then if ( follows(D, E) )
%   | then if ( tweets(D, C), follows(E, D) )
%   | | then if ( recursion_accounttype(D, B), recursion_accounttype(E, B) )
%   | | | then return 0.07345755559407872;  // std dev = 1.532, 20.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=11 */
%   | | | else return -0.06417938216793705;  // std dev = 1.414, 11.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=4 */
%   | | else return 0.32046185874588573;  // std dev = 0.664, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else return -0.05552029528488889;  // std dev = 0.720, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   else return 0.08371940113364452;  // std dev = 0.376, 13.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=7 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E), tweets(D, E) )
%   | | then if ( follows(A, D) )
%   | | | then return 0.21612930770146474;  // std dev = 0.939, 13.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=10 */
%   | | | else return -0.10847285318169139;  // std dev = 1.154, 7.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=2 */
%   | | else if ( follows(C, A) )
%   | | | then return 0.059179888487256256;  // std dev = 1.257, 7.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=3 */
%   | | | else return -0.19884971240593116;  // std dev = 0.101, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else return -0.23370610261746216;  // std dev = 0.476, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   else if ( tweets(A, F) )
%   | then if ( tweets(G, F), follows(A, G) )
%   | | then if ( follows(G, H) )
%   | | | then return 0.05251295952949102;  // std dev = 1.252, 7.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=4 */
%   | | | else return -0.04375788678658967;  // std dev = 0.721, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | else return 0.14863241409524272;  // std dev = 0.389, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else return 0.17867054416827166;  // std dev = 0.022, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */


Results
   AUC ROC   = 0.685035
   AUC PR    = 0.648626
   CLL	      = -0.656387
   Precision = 0.625698 at threshold = 0.5
   Recall    = 0.717949
   F1        = 0.668657


Total learning time: 23.707 seconds
Total inference time: 4.002 seconds
AUC ROC: 0.685035


Results scoring model
   AUC ROC   = 0.9024
   AUC PR    = 0.918863
   CLL	      = -0.447938
   Precision = 0.826087 at threshold = 0.5
   Recall    = 0.76
   F1        = 0.791667


Total scoring time: 2.237 seconds
Refined model CLL: -0.447938


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.685035
   AUC PR    = 0.648626
   CLL	      = -0.656387
   Precision = 0.625698 at threshold = 0.5
   Recall    = 0.717949
   F1        = 0.668657


Total learning time: 31.837000000000003 seconds
Total inference time: 4.002 seconds
AUC ROC: 0.685035
Total revision time: 31.837000000000003
Best scored revision CLL: -0.447938


Dataset: 7_yeast_twitter, Fold: 2, Type: Transfer (trRDN-B), Time: 18:10:28
{'AUC ROC': 0.685035, 'AUC PR': 0.648626, 'CLL': -0.656387, 'Precision': [0.625698, 0.5], 'Recall': 0.717949, 'F1': 0.668657, 'Learning time': 31.837000000000003, 'Inference time': 4.002, 'parameter_0.2': {'AUC ROC': 0.643162, 'AUC PR': 0.613378, 'CLL': -0.663637, 'Precision': [0.631579, 0.5], 'Recall': 0.384615, 'F1': 0.478088, 'Learning time': 4.131, 'Inference time': 2.735}}


Amount of data: 0.4
******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
0;true;phenotype(C, D), enzyme(A, E).;true;false
0;true,true;phenotype(A, D).;false;false
0;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
0;false,true;interaction(A, G), interaction(G, G).;false;true
0;false,true,false;interaction(H, F), phenotype(H, I).;false;false
0;false,false;interaction(A, A).;false;true
0;false,false,false;complex(A, J), location(A, K).;false;false
1;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
1;true;interaction(D, A), complex(D, E).;false;true
1;true,false;enzyme(A, F), interaction(C, G).;false;true
1;true,false,false;interaction(H, A), interaction(A, H).;false;false
1;false;interaction(A, A).;false;true
1;false,false;interaction(A, I), location(A, J).;true;true
1;false,false,true;complex(A, K), complex(I, K).;false;false
1;false,false,false;complex(A, L), phenotype(A, M).;false;false
2;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
2;true;recursion_proteinclass(C, B).;false;true
2;true,false;interaction(C, E), recursion_proteinclass(E, B).;false;true
2;true,false,false;interaction(F, A), enzyme(A, D).;false;false
2;false;location(A, G), interaction(A, A).;true;true
2;false,true;interaction(A, H), recursion_proteinclass(H, B).;false;false
2;false,false;interaction(I, A), recursion_proteinclass(I, B).;false;true
2;false,false,false;interaction(J, A), interaction(K, J).;false;false
3;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
3;false;interaction(D, A), interaction(A, D).;true;true
3;false,true;complex(A, E), complex(D, E).;true;true
3;false,true,true;interaction(A, A).;false;false
3;false,true,false;interaction(D, D).;false;false
3;false,false;complex(A, F), interaction(G, A).;true;true
3;false,false,true;complex(G, F), location(A, H).;false;false
3;false,false,false;interaction(I, A), interaction(J, I).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;false;true
4;false;interaction(A, D), interaction(E, A).;true;true
4;false,true;recursion_proteinclass(E, B), phenotype(A, F).;true;true
4;false,true,true;complex(D, G), phenotype(D, F).;false;false
4;false,true,false;interaction(A, A).;false;false
4;false,false;interaction(H, A), recursion_proteinclass(H, B).;true;true
4;false,false,true;enzyme(H, I), phenotype(H, J).;false;false
4;false,false,false;interaction(A, K), enzyme(K, L).;false;false
5;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
5;true;interaction(E, A), recursion_proteinclass(C, B).;false;true
5;true,false;interaction(C, A), enzyme(A, F).;false;true
5;true,false,false;interaction(C, G), recursion_proteinclass(G, B).;false;false
5;false;interaction(A, A).;false;true
5;false,false;enzyme(A, H), interaction(A, I).;true;true
5;false,false,true;interaction(I, I), complex(A, J).;false;false
5;false,false,false;interaction(A, K), interaction(K, K).;false;false
6;;proteinclass(A, B) :- interaction(C, A), enzyme(C, D).;true;true
6;true;interaction(E, C), recursion_proteinclass(E, B).;false;true
6;true,false;interaction(A, F), enzyme(F, G).;false;true
6;true,false,false;enzyme(A, H), complex(A, I).;false;false
6;false;enzyme(A, J).;true;true
6;false,true;enzyme(K, J), recursion_proteinclass(K, B).;false;false
6;false,false;interaction(L, A), complex(A, M).;false;true
6;false,false,false;interaction(A, N), recursion_proteinclass(N, B).;false;false
7;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
7;true;enzyme(A, D), interaction(C, E).;true;true
7;true,true;complex(E, F), phenotype(C, G).;false;false
7;true,false;interaction(H, A), enzyme(H, I).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(A, J), enzyme(J, K).;true;true
7;false,false,true;phenotype(J, L), interaction(J, M).;false;false
7;false,false,false;interaction(N, A), interaction(A, N).;false;false
8;;proteinclass(A, B) :- phenotype(A, C), complex(A, D).;true;true
8;true;complex(E, D), recursion_proteinclass(E, B).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(H, F), recursion_proteinclass(H, B).;false;true
8;false,true,false;interaction(A, I), interaction(I, A).;false;false
8;false,false;interaction(J, A), complex(J, K).;true;true
8;false,false,true;phenotype(J, L).;false;false
8;false,false,false;interaction(M, A), phenotype(M, N).;false;false
9;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
9;true;enzyme(A, D), phenotype(C, E).;true;true
9;true,true;phenotype(A, E).;false;false
9;true,false;complex(C, F), interaction(G, A).;false;false
9;false;interaction(A, A).;false;true
9;false,false;interaction(A, H), location(A, I).;true;true
9;false,false,true;interaction(H, J), interaction(J, H).;false;false
9;false,false,false;interaction(A, K), interaction(L, A).;false;false


WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(C, D) )
%   | then if ( tweets(A, D) )
%   | | then return 0.4295775065280833;  // std dev = 2.928, 35.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=20 */
%   | | else return 0.41370449065506787;  // std dev = 2.108, 18.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=10 */
%   | else return 0.8581489350995122;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else if ( follows(A, E), recursion_accounttype(E, B) )
%   | then if ( follows(F, A), follows(F, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(E, G), tweets(G, H) )
%   | | | then return -0.0168510649004878;  // std dev = 1.323, 16.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=2 */
%   | | | else return -0.14185106490048777;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.4507415276921049;  // std dev = 0.491, 27.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=16 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D) )
%   | then return 0.36141033022434615;  // std dev = 3.591, 53.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=30 */
%   | else if ( follows(E, C) )
%   | | then return 0.7974484051691344;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A) )
%   | | then return 0.14899640086359592;  // std dev = 0.449, 25.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=8 */
%   | | else if ( tweets(A, G) )
%   | | | then return 0.2792807329961218;  // std dev = 1.903, 15.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=7 */
%   | | | else return 0.4072442669683535;  // std dev = 1.060, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( recursion_accounttype(C, B) )
%   | then return 0.30892973125879025;  // std dev = 3.620, 55.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=32 */
%   | else if ( follows(D, C), recursion_accounttype(D, B) )
%   | | then return 0.15187085003515977;  // std dev = 2.197, 23.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=8 */
%   | | else if ( follows(A, E) )
%   | | | then return -0.15871041746274578;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F), recursion_accounttype(F, B) )
%   | | then return 0.022724078370673494;  // std dev = 0.895, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else if ( follows(A, G), follows(G, H) )
%   | | | then return 0.3124374903601474;  // std dev = 1.301, 7.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=4 */
%   | | | else return 0.36018530323516357;  // std dev = 1.367, 8.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=5 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.17105321943455246;  // std dev = 3.847, 67.000 (wgt'ed) examples reached here.  /* #neg=36 #pos=31 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(D, D) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.2678104957761687;  // std dev = 1.843, 13.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=7 */
%   | else if ( follows(A, E) )
%   | | then return 0.25588018655336636;  // std dev = 0.490, 17.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=10 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.29057543207376685;  // std dev = 0.674, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.20199734828173982;  // std dev = 3.618, 55.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=32 */
%   else if ( follows(D, A), follows(A, E) )
%   | then if ( recursion_accounttype(E, B), tweets(A, F) )
%   | | then if ( tweets(D, F) )
%   | | | then return -0.10736675758024856;  // std dev = 0.946, 11.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=1 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.24232340802652763;  // std dev = 1.732, 13.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=7 */
%   | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | then if ( tweets(G, H) )
%   | | | then return -0.007291662466419319;  // std dev = 0.895, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(I, A) )
%   | | | then return -0.31912066971612724;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | | else return 0.20864087143051954;  // std dev = 1.887, 15.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=9 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(A, D), recursion_accounttype(C, B) )
%   | then return 0.14269093913172837;  // std dev = 3.594, 53.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=30 */
%   | else if ( follows(A, C) )
%   | | then return 0.09297323942780295;  // std dev = 2.043, 21.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=8 */
%   | | else if ( follows(E, C), recursion_accounttype(E, B) )
%   | | | then return 0.11062401011711794;  // std dev = 0.667, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return -0.14643017946951803;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(G, A), follows(G, G) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.11700181503207177;  // std dev = 2.113, 20.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=10 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.09972510494771938;  // std dev = 4.373, 86.000 (wgt'ed) examples reached here.  /* #neg=43 #pos=43 */
%   | else if ( follows(E, A) )
%   | | then return -0.4645934260218135;  // std dev = 0.015, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | else return 0.10621751131522639;  // std dev = 0.469, 9.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=5 */
%   else if ( recursion_accounttype(F, B) )
%   | then return 0.1854715441360819;  // std dev = 0.565, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C) )
%   | then if ( tweets(C, E) )
%   | | then return 0.08632772995101475;  // std dev = 3.548, 53.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=30 */
%   | | else return 0.41484893363400954;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A) )
%   | | then if ( tweets(F, G), follows(H, F) )
%   | | | then return 0.012153377734560973;  // std dev = 2.091, 25.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=8 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, I), follows(I, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.0664854258817839;  // std dev = 2.108, 20.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=10 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( tweets(A, C) )
%   then if ( recursion_accounttype(D, B) )
%   | then return 0.05118805407892801;  // std dev = 4.110, 79.000 (wgt'ed) examples reached here.  /* #neg=40 #pos=39 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, E) )
%   | then if ( follows(E, F), recursion_accounttype(F, B) )
%   | | then return 0.051237729327403336;  // std dev = 2.003, 18.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=9 */
%   | | else if ( follows(G, A), follows(A, G) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.12367386824873654;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(C, D) )
%   | then if ( tweets(A, D) )
%   | | then return 0.05518390178895568;  // std dev = 2.853, 35.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=20 */
%   | | else return 0.04629228932789562;  // std dev = 2.108, 18.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=10 */
%   | else if ( follows(A, E) )
%   | | then return 0.30789207342851455;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A) )
%   | | then if ( follows(G, F), follows(F, G) )
%   | | | then return -8.48560678094159E-4;  // std dev = 2.087, 25.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=8 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(H, A), follows(A, I) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.03620994203525762;  // std dev = 2.105, 20.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=10 */


Results
   AUC ROC   = 0.665331
   AUC PR    = 0.628574
   CLL	      = -0.635902
   Precision = 0.623116 at threshold = 0.5
   Recall    = 0.794872
   F1        = 0.698592


Total learning time: 4.484 seconds
Total inference time: 2.528 seconds
AUC ROC: 0.665331


Results scoring model
   AUC ROC   = 0.6968
   AUC PR    = 0.680388
   CLL	      = -0.619475
   Precision = 0.602941 at threshold = 0.5
   Recall    = 0.82
   F1        = 0.694915


Total scoring time: 2.194 seconds
Parameter learned model CLL: -0.619475


Structure after Parameter Learning
[['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'tweets(C, D)', 'true,true': 'tweets(A, D)', 'false': 'follows(A, E), recursion_accounttype(E, B)', 'false,true': 'follows(F, A), follows(F, F)', 'false,true,false': 'follows(E, G), tweets(G, H)', 'false,false': 'follows(A, A)'}, {'true,true,true': [2.928, 15, 20], 'true,true,false': [2.108, 8, 10], 'true,false': [0.0, 0, 2], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [1.323, 14, 2], 'false,true,false,false': [0.0, 2, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [0.491, 11, 16]}], ['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(A, D)', 'true,false': 'follows(E, C)', 'false': 'follows(A, A)', 'false,false': 'follows(F, A)', 'false,false,false': 'tweets(A, G)'}, {'true,true': [3.591, 23, 30], 'true,false,true': [0.0, 0, 2], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.449, 17, 8], 'false,false,false,true': [1.903, 8, 7], 'false,false,false,false': [1.06, 2, 3]}], ['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'recursion_accounttype(C, B)', 'true,false': 'follows(D, C), recursion_accounttype(D, B)', 'true,false,false': 'follows(A, E)', 'false': 'follows(A, A)', 'false,false': 'follows(A, F), recursion_accounttype(F, B)', 'false,false,false': 'follows(A, G), follows(G, H)'}, {'true,true': [3.62, 23, 32], 'true,false,true': [2.197, 15, 8], 'true,false,false,true': [0.0, 2, 0], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.895, 4, 1], 'false,false,false,true': [1.301, 3, 4], 'false,false,false,false': [1.367, 3, 5]}], ['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,true,false': 'follows(D, D)', 'false,false': 'follows(A, E)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true': [3.847, 36, 31], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [0.0, 0, 0], 'false,true,false,false': [1.843, 6, 7], 'false,false,true': [0.49, 7, 10], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.674, 1, 2]}], ['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(D, A), follows(A, E)', 'false,true': 'recursion_accounttype(E, B), tweets(A, F)', 'false,true,true': 'tweets(D, F)', 'false,true,false': 'follows(A, A)', 'false,false': 'follows(A, G), recursion_accounttype(G, B)', 'false,false,true': 'tweets(G, H)', 'false,false,false': 'follows(I, A)'}, {'true': [3.618, 23, 32], 'false,true,true,true': [0.946, 10, 1], 'false,true,true,false': [0.0, 0, 0], 'false,true,false,true': [0.0, 0, 0], 'false,true,false,false': [1.732, 6, 7], 'false,false,true,true': [0.895, 4, 1], 'false,false,true,false': [0.0, 0, 0], 'false,false,false,true': [0.0, 1, 0], 'false,false,false,false': [1.887, 6, 9]}], ['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(A, D), recursion_accounttype(C, B)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(E, C), recursion_accounttype(E, B)', 'false': 'follows(A, A)', 'false,false': 'follows(F, A)', 'false,false,false': 'follows(G, A), follows(G, G)'}, {'true,true': [3.594, 23, 30], 'true,false,true': [2.043, 13, 8], 'true,false,false,true': [0.667, 2, 2], 'true,false,false,false': [0.0, 2, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [2.113, 10, 10]}], ['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'true,false': 'follows(E, A)', 'false': 'recursion_accounttype(F, B)'}, {'true,true': [4.373, 43, 43], 'true,false,true': [0.015, 2, 0], 'true,false,false': [0.469, 4, 5], 'false,true': [0.565, 1, 2], 'false,false': [0.0, 0, 0]}], ['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C)', 'true,true': 'tweets(C, E)', 'false': 'follows(A, A)', 'false,false': 'follows(F, A)', 'false,false,true': 'tweets(F, G), follows(H, F)', 'false,false,false': 'follows(A, I), follows(I, A)'}, {'true,true,true': [3.548, 23, 30], 'true,true,false': [0.0, 0, 2], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [2.091, 17, 8], 'false,false,true,false': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [2.108, 10, 10]}], ['accounttype(A, B)', {'': 'tweets(A, C)', 'true': 'recursion_accounttype(D, B)', 'false': 'follows(A, E)', 'false,true': 'follows(E, F), recursion_accounttype(F, B)', 'false,true,false': 'follows(G, A), follows(A, G)'}, {'true,true': [4.11, 40, 39], 'true,false': [0.0, 0, 0], 'false,true,true': [2.003, 9, 9], 'false,true,false,true': [0.0, 0, 0], 'false,true,false,false': [0.816, 1, 2], 'false,false': [0.0, 0, 0]}], ['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'tweets(C, D)', 'true,true': 'tweets(A, D)', 'true,false': 'follows(A, E)', 'false': 'follows(A, A)', 'false,false': 'follows(F, A)', 'false,false,true': 'follows(G, F), follows(F, G)', 'false,false,false': 'follows(H, A), follows(A, I)'}, {'true,true,true': [2.853, 15, 20], 'true,true,false': [2.108, 8, 10], 'true,false,true': [0.0, 0, 2], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [2.087, 17, 8], 'false,false,true,false': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [2.105, 10, 10]}]]
[{'': [0.24330578512396855, 0.24000000000000005], 'true': [0.24563901744393174, 0.0], 'true,true': [0.2448979591836734, 0.24691358024691354], 'false': [0.09876543209876548, 0.24142661179698177], 'false,false': [nan, 0.24142661179698177], 'false,true': [nan, 0.09876543209876548], 'false,true,false': [0.10937500000000004, 0.0]}, {'': [0.24110967326122285, 0.2253049536326903], 'true': [0.24329436230471155, 0.0], 'false': [nan, 0.22530495363268999], 'false,false': [0.2016396370521082, 0.24025701846601252], 'false,false,false': [0.2413097978924908, 0.22481768066658098], 'true,false': [0.0, nan]}, {'': [0.23344085196022152, 0.23728572187913785], 'false': [nan, 0.23728572187913785], 'false,false': [0.16029109637544076, 0.2381161603748005], 'false,false,false': [0.24190322205843762, 0.2337385497055891], 'true': [0.23821807005960374, 0.20018189398525113], 'true,false': [0.2098721573037115, 0.0], 'true,false,false': [0.0, nan]}, {'': [0.22091982066675733, 0.24045188229954315], 'false': [0.2611724673706775, 0.22696568043044768], 'false,true': [nan, 0.2611724673706775], 'false,true,false': [nan, 0.2611724673706775], 'false,false': [0.24013607010803753, 0.15131027620497553], 'false,false,false': [nan, 0.15131027620497553]}, {'': [0.23804857249103492, 0.2090404210485772], 'false': [0.19274344729881956, 0.22632963333165104], 'false,false': [0.16033471498144108, 0.2389840536695777], 'false,false,false': [0.0, 0.2375080586446235], 'false,true': [0.08143227096871627, 0.23088335513948505], 'false,true,false': [nan, 0.23088335513948505], 'false,false,true': [0.16033471498144108, nan], 'false,true,true': [0.08143227096871627, nan]}, {'': [0.22149402550984437, 0.2232081509894773], 'false': [nan, 0.2232081509894773], 'false,false': [nan, 0.2232081509894773], 'false,false,false': [nan, 0.2232081509894773], 'true': [0.24369425676422934, 0.1751308072749487], 'true,false': [0.19878815622515056, 0.08873004848200056], 'true,false,false': [0.11106945392832011, 0.0]}, {'': [0.22397506716821866, 0.10630091663486507], 'true': [0.2223536429397503, 0.2282594604336092], 'true,false': [0.00011127286053100316, 0.219718125638691], 'false': [0.10630091663486507, nan]}, {'': [0.23264866087590522, 0.19664253510991453], 'true': [0.23264866087590522, nan], 'true,true': [0.23750326721614584, 0.0], 'false': [nan, 0.19664253510991447], 'false,false': [0.17487172564839285, 0.22221606279466544], 'false,false,false': [nan, 0.22221606279466544], 'false,false,true': [0.17487172564839285, nan]}, {'': [0.21386381440435637, 0.22350882120827267], 'false': [0.22350882120827267, nan], 'false,true': [0.22297368376949567, 0.22222222222222224], 'false,true,false': [nan, 0.22222222222222224], 'true': [0.21386381440435637, nan]}, {'': [0.23114069008951257, 0.19553292900808236], 'true': [0.23748491512326683, 0.0], 'true,true': [0.2326089576757291, 0.24691373354960097], 'false': [nan, 0.19553292900808236], 'false,false': [0.17414522459759418, 0.2215045969526618], 'false,false,false': [nan, 0.2215045969526618], 'false,false,true': [0.17414522459759418, nan], 'true,false': [0.0, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
0;true;tweets(C, D).;true;true
0;false;follows(A, E), recursion_accounttype(E, B).;true;true
0;false,true;follows(E, G), tweets(G, H).;true;true
1;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
1;true;follows(A, D).;true;true
2;;accounttype(A, B) :- follows(C, A).;true;true
2;true;recursion_accounttype(C, B).;true;true
2;true,false;follows(D, C), recursion_accounttype(D, B).;true;true
4;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
4;false;follows(D, A), follows(A, E).;true;true
4;false,false;follows(A, G), recursion_accounttype(G, B).;true;true
4;false,false,false;follows(I, A).;true;true
5;;accounttype(A, B) :- follows(C, A).;true;true
5;true;follows(A, D), recursion_accounttype(C, B).;true;true
5;true,false;follows(A, C).;true;true
5;true,false,false;follows(E, C), recursion_accounttype(E, B).;true;true
6;;accounttype(A, B) :- follows(A, C).;true;true
6;true;follows(C, D), recursion_accounttype(D, B).;true;true
6;true,false;follows(E, A).;true;true
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
7;true;tweets(C, E).;true;true
9;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
9;true;tweets(C, D).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(C, D) )
%   | then if ( follows(A, E), follows(E, A) )
%   | | then if ( recursion_accounttype(E, B) )
%   | | | then return 0.4581489350995113;  // std dev = 3.286, 45.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=27 */
%   | | | else return -0.14185106490048777;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return 0.6081489350995122;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | else return 0.8581489350995122;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else if ( follows(A, F), recursion_accounttype(F, B) )
%   | then return -0.030739953789376686;  // std dev = 0.314, 18.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=2 */
%   | else if ( tweets(A, G) )
%   | | then if ( tweets(H, G), follows(A, H) )
%   | | | then return 0.44638422921715937;  // std dev = 2.029, 17.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=10 */
%   | | | else return 0.19148226843284552;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | else if ( follows(I, A) )
%   | | | then return 0.5248156017661788;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.6081489350995122;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F), recursion_accounttype(F, B) )
%   | | | then return 0.4504105389216477;  // std dev = 3.114, 44.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=29 */
%   | | | else return -0.19085358084403908;  // std dev = 0.073, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.07081366185416516;  // std dev = 0.809, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | else return 0.7670719622367217;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else if ( follows(A, G), recursion_accounttype(G, B) )
%   | then return -0.027039036105351237;  // std dev = 0.314, 18.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=2 */
%   | else if ( tweets(A, H) )
%   | | then if ( tweets(I, H), follows(A, I) )
%   | | | then return 0.382955427940009;  // std dev = 2.029, 17.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=10 */
%   | | | else return 0.16653882456488175;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.527989695240652;  // std dev = 0.862, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | else return 0.4337386289033884;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( recursion_accounttype(C, B) )
%   | then if ( follows(A, D), follows(D, A) )
%   | | then if ( recursion_accounttype(D, B) )
%   | | | then return 0.3320676565120521;  // std dev = 3.237, 47.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=29 */
%   | | | else return -0.13912689466046557;  // std dev = 0.056, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return 0.42940368652188565;  // std dev = 0.789, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | else if ( follows(E, C), recursion_accounttype(E, B) )
%   | | then return 0.1374733724573251;  // std dev = 0.438, 23.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=8 */
%   | | else return -0.13496213885626876;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   else if ( follows(A, F), recursion_accounttype(F, B) )
%   | then return 0.06503786114373127;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else if ( tweets(A, G) )
%   | | then if ( follows(A, H), follows(H, I) )
%   | | | then return 0.2530877021989913;  // std dev = 1.229, 6.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | | else return 0.3252510985573712;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | else return 0.4257396516057158;  // std dev = 0.860, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then if ( follows(D, A), tweets(D, E) )
%   | | then return 0.4917118795853024;  // std dev = 0.329, 20.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=17 */
%   | | else if ( tweets(C, F), tweets(D, G) )
%   | | | then return 0.10439203113616403;  // std dev = 2.462, 27.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=12 */
%   | | | else return 0.5719418721017603;  // std dev = 0.079, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return -0.2578280508399514;  // std dev = 0.118, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else if ( follows(A, H), recursion_accounttype(H, B) )
%   | then return -0.034653837076183955;  // std dev = 0.314, 18.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=2 */
%   | else if ( follows(I, A), follows(A, I) )
%   | | then if ( follows(I, J), follows(J, A) )
%   | | | then return 0.09702837595593658;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | | else return 0.5057861369053628;  // std dev = 0.941, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | else if ( tweets(A, K) )
%   | | | then return 0.1906535646767792;  // std dev = 1.702, 12.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=6 */
%   | | | else return 0.32656513079435057;  // std dev = 0.860, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, A) )
%   | then if ( follows(D, E), follows(E, A) )
%   | | then if ( recursion_accounttype(D, B), recursion_accounttype(E, B) )
%   | | | then return 0.3919087972429018;  // std dev = 1.323, 16.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=14 */
%   | | | else return 0.11345363476909334;  // std dev = 2.203, 26.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=12 */
%   | | else if ( tweets(A, F) )
%   | | | then return -0.1746236872144123;  // std dev = 0.661, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else return 0.11182281819822458;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | else return 0.28415970645248767;  // std dev = 0.764, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   else if ( follows(G, A), follows(A, H) )
%   | then return 0.07698645129761826;  // std dev = 0.400, 24.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=8 */
%   | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | then return 0.06145110057744903;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else if ( follows(J, A) )
%   | | | then return -0.2471534599573772;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | | else return 0.20117245729623137;  // std dev = 1.863, 15.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=9 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(A, D), recursion_accounttype(C, B) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F), recursion_accounttype(F, B) )
%   | | | then return 0.17997339923403985;  // std dev = 2.840, 44.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=29 */
%   | | | else return -0.17942387079191896;  // std dev = 0.083, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return -0.047355312046176476;  // std dev = 0.749, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | else if ( follows(A, C) )
%   | | then return 0.09184653158822167;  // std dev = 0.419, 21.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=8 */
%   | | else return 0.017784535590909936;  // std dev = 0.244, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   else if ( follows(A, G), recursion_accounttype(G, B) )
%   | then return 0.05395252555197742;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else if ( tweets(A, H) )
%   | | then if ( follows(A, I), follows(I, J) )
%   | | | then return 0.11693151862927076;  // std dev = 1.231, 6.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | | else return 0.16305825663115284;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | else return 0.19550964296707096;  // std dev = 0.860, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F), recursion_accounttype(F, B) )
%   | | | then return 0.10330559301248829;  // std dev = 3.157, 57.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=31 */
%   | | | else return -0.1532497678867868;  // std dev = 0.084, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | | then return 0.08666474159455999;  // std dev = 0.614, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | else return 0.17652164006489782;  // std dev = 1.991, 18.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=11 */
%   | else if ( follows(H, A) )
%   | | then return -0.2768055564082477;  // std dev = 0.193, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | else if ( tweets(A, I) )
%   | | | then return 0.07669556467896245;  // std dev = 1.124, 6.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | | else return 0.0701734798723354;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   else return 0.16736475936681494;  // std dev = 0.463, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(C, D) )
%   | then if ( follows(A, E), follows(E, A) )
%   | | then if ( follows(E, F), follows(F, A) )
%   | | | then return 0.10840749499924586;  // std dev = 2.565, 41.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=25 */
%   | | | else return -0.15109325385442443;  // std dev = 1.132, 8.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | | else return 0.21312368211315874;  // std dev = 0.682, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | else return 0.34030266417487903;  // std dev = 0.046, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else if ( follows(A, G), recursion_accounttype(G, B) )
%   | then return -0.05577989871267892;  // std dev = 0.312, 18.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=2 */
%   | else if ( follows(H, A), follows(A, H) )
%   | | then if ( follows(H, I), follows(I, A) )
%   | | | then return -0.0035237759279777014;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | | else return 0.30105746212828755;  // std dev = 0.945, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.046699552132152884;  // std dev = 1.677, 12.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=6 */
%   | | | else return 0.1251453666591202;  // std dev = 0.853, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( tweets(A, C) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.08032661454857573;  // std dev = 0.378, 44.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=26 */
%   | else if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then return -0.02594564250128429;  // std dev = 0.337, 15.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=2 */
%   | | else if ( follows(F, A), follows(A, F) )
%   | | | then return 0.1561713251255828;  // std dev = 1.240, 8.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=5 */
%   | | | else return 0.03539636084408609;  // std dev = 1.677, 12.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=6 */
%   else if ( follows(A, G), recursion_accounttype(G, B) )
%   | then if ( follows(G, A) )
%   | | then if ( follows(G, H), follows(H, A) )
%   | | | then return -0.002883269147642745;  // std dev = 1.175, 7.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=4 */
%   | | | else return 0.0525483074873071;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else return -0.15944798293130266;  // std dev = 0.024, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( follows(A, I), follows(I, J) )
%   | | then return 0.10392313495415012;  // std dev = 0.851, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else return 0.02417543215803734;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(C, D) )
%   | then if ( follows(A, E), follows(E, A) )
%   | | then if ( follows(E, F), follows(F, A) )
%   | | | then return 0.07031818346594619;  // std dev = 2.551, 41.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=25 */
%   | | | else return -0.1317741019729038;  // std dev = 1.137, 8.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | | else return 0.14781937009127452;  // std dev = 0.682, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | else return 0.2533597987416049;  // std dev = 0.038, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else if ( follows(A, G), recursion_accounttype(G, B) )
%   | then return -0.0419709375116528;  // std dev = 0.311, 18.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=2 */
%   | else if ( tweets(A, H), follows(A, I) )
%   | | then if ( follows(J, A), follows(I, J) )
%   | | | then return 0.02994778769367649;  // std dev = 1.162, 6.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | | else return 0.10302926605156572;  // std dev = 1.707, 13.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=8 */
%   | | else if ( follows(K, A) )
%   | | | then return -0.05487678560106053;  // std dev = 0.847, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return 0.08672185933013207;  // std dev = 0.850, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */


Results
   AUC ROC   = 0.731345
   AUC PR    = 0.682995
   CLL	      = -0.600675
   Precision = 0.682353 at threshold = 0.5
   Recall    = 0.74359
   F1        = 0.711656


Total learning time: 21.708 seconds
Total inference time: 3.482 seconds
AUC ROC: 0.731345


Results scoring model
   AUC ROC   = 0.8656
   AUC PR    = 0.855303
   CLL	      = -0.499562
   Precision = 0.741379 at threshold = 0.5
   Recall    = 0.86
   F1        = 0.796296


Total scoring time: 2.72 seconds
Refined model CLL: -0.499562


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.731345
   AUC PR    = 0.682995
   CLL	      = -0.600675
   Precision = 0.682353 at threshold = 0.5
   Recall    = 0.74359
   F1        = 0.711656


Total learning time: 31.105999999999998 seconds
Total inference time: 3.482 seconds
AUC ROC: 0.731345
Total revision time: 31.105999999999998
Best scored revision CLL: -0.499562


Dataset: 7_yeast_twitter, Fold: 2, Type: Transfer (trRDN-B), Time: 18:11:07
{'AUC ROC': 0.731345, 'AUC PR': 0.682995, 'CLL': -0.600675, 'Precision': [0.682353, 0.5], 'Recall': 0.74359, 'F1': 0.711656, 'Learning time': 31.105999999999998, 'Inference time': 3.482, 'parameter_0.4': {'AUC ROC': 0.665331, 'AUC PR': 0.628574, 'CLL': -0.635902, 'Precision': [0.623116, 0.5], 'Recall': 0.794872, 'F1': 0.698592, 'Learning time': 4.484, 'Inference time': 2.528}}


Amount of data: 0.6
******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
0;true;phenotype(C, D), enzyme(A, E).;true;false
0;true,true;phenotype(A, D).;false;false
0;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
0;false,true;interaction(A, G), interaction(G, G).;false;true
0;false,true,false;interaction(H, F), phenotype(H, I).;false;false
0;false,false;interaction(A, A).;false;true
0;false,false,false;complex(A, J), location(A, K).;false;false
1;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
1;true;interaction(D, A), complex(D, E).;false;true
1;true,false;enzyme(A, F), interaction(C, G).;false;true
1;true,false,false;interaction(H, A), interaction(A, H).;false;false
1;false;interaction(A, A).;false;true
1;false,false;interaction(A, I), location(A, J).;true;true
1;false,false,true;complex(A, K), complex(I, K).;false;false
1;false,false,false;complex(A, L), phenotype(A, M).;false;false
2;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
2;true;recursion_proteinclass(C, B).;false;true
2;true,false;interaction(C, E), recursion_proteinclass(E, B).;false;true
2;true,false,false;interaction(F, A), enzyme(A, D).;false;false
2;false;location(A, G), interaction(A, A).;true;true
2;false,true;interaction(A, H), recursion_proteinclass(H, B).;false;false
2;false,false;interaction(I, A), recursion_proteinclass(I, B).;false;true
2;false,false,false;interaction(J, A), interaction(K, J).;false;false
3;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
3;false;interaction(D, A), interaction(A, D).;true;true
3;false,true;complex(A, E), complex(D, E).;true;true
3;false,true,true;interaction(A, A).;false;false
3;false,true,false;interaction(D, D).;false;false
3;false,false;complex(A, F), interaction(G, A).;true;true
3;false,false,true;complex(G, F), location(A, H).;false;false
3;false,false,false;interaction(I, A), interaction(J, I).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;false;true
4;false;interaction(A, D), interaction(E, A).;true;true
4;false,true;recursion_proteinclass(E, B), phenotype(A, F).;true;true
4;false,true,true;complex(D, G), phenotype(D, F).;false;false
4;false,true,false;interaction(A, A).;false;false
4;false,false;interaction(H, A), recursion_proteinclass(H, B).;true;true
4;false,false,true;enzyme(H, I), phenotype(H, J).;false;false
4;false,false,false;interaction(A, K), enzyme(K, L).;false;false
5;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
5;true;interaction(E, A), recursion_proteinclass(C, B).;false;true
5;true,false;interaction(C, A), enzyme(A, F).;false;true
5;true,false,false;interaction(C, G), recursion_proteinclass(G, B).;false;false
5;false;interaction(A, A).;false;true
5;false,false;enzyme(A, H), interaction(A, I).;true;true
5;false,false,true;interaction(I, I), complex(A, J).;false;false
5;false,false,false;interaction(A, K), interaction(K, K).;false;false
6;;proteinclass(A, B) :- interaction(C, A), enzyme(C, D).;true;true
6;true;interaction(E, C), recursion_proteinclass(E, B).;false;true
6;true,false;interaction(A, F), enzyme(F, G).;false;true
6;true,false,false;enzyme(A, H), complex(A, I).;false;false
6;false;enzyme(A, J).;true;true
6;false,true;enzyme(K, J), recursion_proteinclass(K, B).;false;false
6;false,false;interaction(L, A), complex(A, M).;false;true
6;false,false,false;interaction(A, N), recursion_proteinclass(N, B).;false;false
7;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
7;true;enzyme(A, D), interaction(C, E).;true;true
7;true,true;complex(E, F), phenotype(C, G).;false;false
7;true,false;interaction(H, A), enzyme(H, I).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(A, J), enzyme(J, K).;true;true
7;false,false,true;phenotype(J, L), interaction(J, M).;false;false
7;false,false,false;interaction(N, A), interaction(A, N).;false;false
8;;proteinclass(A, B) :- phenotype(A, C), complex(A, D).;true;true
8;true;complex(E, D), recursion_proteinclass(E, B).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(H, F), recursion_proteinclass(H, B).;false;true
8;false,true,false;interaction(A, I), interaction(I, A).;false;false
8;false,false;interaction(J, A), complex(J, K).;true;true
8;false,false,true;phenotype(J, L).;false;false
8;false,false,false;interaction(M, A), phenotype(M, N).;false;false
9;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
9;true;enzyme(A, D), phenotype(C, E).;true;true
9;true,true;phenotype(A, E).;false;false
9;true,false;complex(C, F), interaction(G, A).;false;false
9;false;interaction(A, A).;false;true
9;false,false;interaction(A, H), location(A, I).;true;true
9;false,false,true;interaction(H, J), interaction(J, H).;false;false
9;false,false,false;interaction(A, K), interaction(L, A).;false;false


WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(C, D) )
%   | then if ( tweets(A, D) )
%   | | then return 0.43709630352056383;  // std dev = 3.728, 57.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=33 */
%   | | else return 0.47719655414713136;  // std dev = 2.225, 21.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=13 */
%   | else return 0.6081489350995122;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   else if ( follows(A, E), recursion_accounttype(E, B) )
%   | then if ( follows(F, A), follows(F, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(E, G), tweets(G, H) )
%   | | | then return -0.026466449515872396;  // std dev = 1.629, 26.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=3 */
%   | | | else return 0.10814893509951219;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | else if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.4370963035205641;  // std dev = 0.494, 38.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=22 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D) )
%   | then return 0.3718247730464805;  // std dev = 4.299, 76.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=44 */
%   | else if ( follows(E, C) )
%   | | then return 0.6295645525352501;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A) )
%   | | then return 0.12461565621810676;  // std dev = 0.440, 41.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=12 */
%   | | else if ( tweets(A, G) )
%   | | | then return 0.2335297618407514;  // std dev = 2.125, 19.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=8 */
%   | | | else return 0.5603993743906471;  // std dev = 1.196, 8.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=6 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( recursion_accounttype(C, B) )
%   | then return 0.31917187983832374;  // std dev = 4.420, 82.000 (wgt'ed) examples reached here.  /* #neg=33 #pos=49 */
%   | else if ( follows(D, C), recursion_accounttype(D, B) )
%   | | then return 0.12768223173653934;  // std dev = 2.768, 38.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=12 */
%   | | else if ( follows(A, E) )
%   | | | then return -0.16035275136477545;  // std dev = 0.015, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F), recursion_accounttype(F, B) )
%   | | then return 0.09593810547790396;  // std dev = 1.169, 7.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=2 */
%   | | else if ( follows(A, G), follows(G, H) )
%   | | | then return 0.33615931717679504;  // std dev = 1.501, 10.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=6 */
%   | | | else return 0.3361593171767951;  // std dev = 1.544, 10.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=6 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.1568193668510735;  // std dev = 4.687, 100.000 (wgt'ed) examples reached here.  /* #neg=55 #pos=45 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(D, D) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.3341796378104724;  // std dev = 2.213, 20.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=12 */
%   | else if ( follows(A, E) )
%   | | then return 0.2568302761753038;  // std dev = 0.483, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.26462552520754556;  // std dev = 1.238, 8.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=5 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.2100183056694316;  // std dev = 4.416, 82.000 (wgt'ed) examples reached here.  /* #neg=33 #pos=49 */
%   else if ( follows(D, A), follows(A, E) )
%   | then if ( recursion_accounttype(E, B), tweets(A, F) )
%   | | then if ( tweets(D, F) )
%   | | | then return -0.08425648840545938;  // std dev = 1.331, 19.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=2 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.20781160521847353;  // std dev = 2.141, 20.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=10 */
%   | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | then if ( tweets(G, H) )
%   | | | then return 0.05425851831794387;  // std dev = 1.166, 7.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=2 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(I, A) )
%   | | | then return -0.30027676407625287;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | | else return 0.20733602120934988;  // std dev = 2.146, 20.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=12 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(A, D), recursion_accounttype(C, B) )
%   | then return 0.14673931434359502;  // std dev = 4.301, 76.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=44 */
%   | else if ( follows(A, C) )
%   | | then return 0.07252816197091105;  // std dev = 2.582, 35.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=12 */
%   | | else if ( follows(E, C), recursion_accounttype(E, B) )
%   | | | then return 0.13830886657308963;  // std dev = 1.191, 9.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=5 */
%   | | | else return -0.14888816451276668;  // std dev = 0.014, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(G, A), follows(G, G) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.12801255931480499;  // std dev = 2.455, 27.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=14 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.09210769499484787;  // std dev = 5.288, 128.000 (wgt'ed) examples reached here.  /* #neg=65 #pos=63 */
%   | else if ( follows(E, A) )
%   | | then return -0.47296215615739967;  // std dev = 0.018, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | else return 0.1382824299349707;  // std dev = 0.485, 12.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=7 */
%   else if ( recursion_accounttype(F, B) )
%   | then return 0.14600458791427828;  // std dev = 1.135, 8.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=5 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C) )
%   | then if ( tweets(C, E) )
%   | | then return 0.09636263931731731;  // std dev = 4.287, 78.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=46 */
%   | | else return 0.2238164066152588;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A) )
%   | | then if ( tweets(F, G), follows(H, F) )
%   | | | then return 0.008027352984271591;  // std dev = 2.630, 40.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=12 */
%   | | | else return -0.15292964821310717;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( follows(A, I), follows(I, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.07171465638929354;  // std dev = 2.448, 27.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=14 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( tweets(A, C) )
%   then if ( recursion_accounttype(D, B) )
%   | then return 0.04249239555891214;  // std dev = 5.063, 120.000 (wgt'ed) examples reached here.  /* #neg=62 #pos=58 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, E) )
%   | then if ( follows(E, F), recursion_accounttype(F, B) )
%   | | then return 0.07509756736860194;  // std dev = 2.362, 26.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=14 */
%   | | else if ( follows(G, A), follows(A, G) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.21743294496560672;  // std dev = 0.939, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(C, D) )
%   | then if ( tweets(A, D) )
%   | | then return 0.05114975851545174;  // std dev = 3.660, 57.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=33 */
%   | | else return 0.085869215537945;  // std dev = 2.226, 21.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=13 */
%   | else if ( follows(A, E) )
%   | | then return 0.15630262733542777;  // std dev = 0.873, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A) )
%   | | then if ( follows(G, F), follows(F, G) )
%   | | | then return -0.003517983729015961;  // std dev = 2.625, 40.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=12 */
%   | | | else return -0.1391649479064492;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( follows(H, A), follows(A, I) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.03724524086639808;  // std dev = 2.435, 27.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=14 */


Results
   AUC ROC   = 0.675563
   AUC PR    = 0.627666
   CLL	      = -0.639288
   Precision = 0.623116 at threshold = 0.5
   Recall    = 0.794872
   F1        = 0.698592


Total learning time: 4.755 seconds
Total inference time: 2.688 seconds
AUC ROC: 0.675563


Results scoring model
   AUC ROC   = 0.711822
   AUC PR    = 0.661271
   CLL	      = -0.617031
   Precision = 0.61 at threshold = 0.5
   Recall    = 0.813333
   F1        = 0.697143


Total scoring time: 2.027 seconds
Parameter learned model CLL: -0.617031


Structure after Parameter Learning
[['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'tweets(C, D)', 'true,true': 'tweets(A, D)', 'false': 'follows(A, E), recursion_accounttype(E, B)', 'false,true': 'follows(F, A), follows(F, F)', 'false,true,false': 'follows(E, G), tweets(G, H)', 'false,false': 'follows(A, A)'}, {'true,true,true': [3.728, 24, 33], 'true,true,false': [2.225, 8, 13], 'true,false': [0.866, 1, 3], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [1.629, 23, 3], 'false,true,false,false': [0.866, 3, 1], 'false,false,true': [0.0, 0, 0], 'false,false,false': [0.494, 16, 22]}], ['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(A, D)', 'true,false': 'follows(E, C)', 'false': 'follows(A, A)', 'false,false': 'follows(F, A)', 'false,false,false': 'tweets(A, G)'}, {'true,true': [4.299, 32, 44], 'true,false,true': [0.913, 1, 5], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.44, 29, 12], 'false,false,false,true': [2.125, 11, 8], 'false,false,false,false': [1.196, 2, 6]}], ['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'recursion_accounttype(C, B)', 'true,false': 'follows(D, C), recursion_accounttype(D, B)', 'true,false,false': 'follows(A, E)', 'false': 'follows(A, A)', 'false,false': 'follows(A, F), recursion_accounttype(F, B)', 'false,false,false': 'follows(A, G), follows(G, H)'}, {'true,true': [4.42, 33, 49], 'true,false,true': [2.768, 26, 12], 'true,false,false,true': [0.015, 3, 0], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [1.169, 5, 2], 'false,false,false,true': [1.501, 4, 6], 'false,false,false,false': [1.544, 4, 6]}], ['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,true,false': 'follows(D, D)', 'false,false': 'follows(A, E)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true': [4.687, 55, 45], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [0.0, 0, 0], 'false,true,false,false': [2.213, 8, 12], 'false,false,true': [0.483, 9, 13], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.238, 3, 5]}], ['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(D, A), follows(A, E)', 'false,true': 'recursion_accounttype(E, B), tweets(A, F)', 'false,true,true': 'tweets(D, F)', 'false,true,false': 'follows(A, A)', 'false,false': 'follows(A, G), recursion_accounttype(G, B)', 'false,false,true': 'tweets(G, H)', 'false,false,false': 'follows(I, A)'}, {'true': [4.416, 33, 49], 'false,true,true,true': [1.331, 17, 2], 'false,true,true,false': [0.0, 0, 0], 'false,true,false,true': [0.0, 0, 0], 'false,true,false,false': [2.141, 10, 10], 'false,false,true,true': [1.166, 5, 2], 'false,false,true,false': [0.0, 0, 0], 'false,false,false,true': [0.0, 2, 0], 'false,false,false,false': [2.146, 8, 12]}], ['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(A, D), recursion_accounttype(C, B)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(E, C), recursion_accounttype(E, B)', 'false': 'follows(A, A)', 'false,false': 'follows(F, A)', 'false,false,false': 'follows(G, A), follows(G, G)'}, {'true,true': [4.301, 32, 44], 'true,false,true': [2.582, 23, 12], 'true,false,false,true': [1.191, 4, 5], 'true,false,false,false': [0.014, 3, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [2.455, 13, 14]}], ['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'true,false': 'follows(E, A)', 'false': 'recursion_accounttype(F, B)'}, {'true,true': [5.288, 65, 63], 'true,false,true': [0.018, 2, 0], 'true,false,false': [0.485, 5, 7], 'false,true': [1.135, 3, 5], 'false,false': [0.0, 0, 0]}], ['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C)', 'true,true': 'tweets(C, E)', 'false': 'follows(A, A)', 'false,false': 'follows(F, A)', 'false,false,true': 'tweets(F, G), follows(H, F)', 'false,false,false': 'follows(A, I), follows(I, A)'}, {'true,true,true': [4.287, 32, 46], 'true,true,false': [0.866, 1, 3], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [2.63, 28, 12], 'false,false,true,false': [0.0, 1, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [2.448, 13, 14]}], ['accounttype(A, B)', {'': 'tweets(A, C)', 'true': 'recursion_accounttype(D, B)', 'false': 'follows(A, E)', 'false,true': 'follows(E, F), recursion_accounttype(F, B)', 'false,true,false': 'follows(G, A), follows(A, G)'}, {'true,true': [5.063, 62, 58], 'true,false': [0.0, 0, 0], 'false,true,true': [2.362, 12, 14], 'false,true,false,true': [0.0, 0, 0], 'false,true,false,false': [0.939, 1, 3], 'false,false': [0.0, 0, 0]}], ['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'tweets(C, D)', 'true,true': 'tweets(A, D)', 'true,false': 'follows(A, E)', 'false': 'follows(A, A)', 'false,false': 'follows(F, A)', 'false,false,true': 'follows(G, F), follows(F, G)', 'false,false,false': 'follows(H, A), follows(A, I)'}, {'true,true,true': [3.66, 24, 33], 'true,true,false': [2.226, 8, 13], 'true,false,true': [0.873, 1, 3], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [2.625, 28, 12], 'false,false,true,false': [0.0, 1, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [2.435, 13, 14]}]]
[{'': [0.24048185603807262, 0.23615916955017255], 'true': [0.24194608809993448, 0.18750000000000006], 'true,true': [0.24376731301939225, 0.23582766439909256], 'false': [0.1155555555555554, 0.24376731301939153], 'false,false': [nan, 0.24376731301939172], 'false,true': [nan, 0.11555555555555559], 'false,true,false': [0.10207100591715962, 0.18750000000000003]}, {'': [0.24001865700692465, 0.22310459788216774], 'true': [0.24314186943978228, 0.13888888888888892], 'false': [nan, 0.2231045978821676], 'false,false': [0.1934834771142775, 0.24255690851596154], 'false,false,false': [0.23769111713119181, 0.17892682495990714], 'true,false': [0.13888888888888892, nan]}, {'': [0.23302315688444522, 0.23340738673874434], 'false': [nan, 0.23340738673874434], 'false,false': [0.19535968601263945, 0.23176320740582254], 'true': [0.23824618576399906, 0.19245440568019526], 'false,false,false': [0.2252418656497804, 0.23828454916186423], 'true,false': [0.2015716955122443, 7.513065407790953e-05], 'true,false,false': [7.513065407790953e-05, nan]}, {'': [0.21970385661861438, 0.23271463991280533], 'false': [0.24491748042149988, 0.22231314589748774], 'false,true': [nan, 0.24491748042149988], 'false,true,false': [nan, 0.24491748042149988], 'false,false': [0.23343665041837366, 0.19167894679957012], 'false,false,false': [nan, 0.19167894679957012]}, {'': [0.23782436777652852, 0.20237926163994366], 'false': [0.18425746541024904, 0.22395117102655898], 'false,false': [0.19427087175104266, 0.23063491983022433], 'false,false,false': [0.0, 0.23027379910548246], 'false,false,true': [0.19427087175104266, nan], 'false,true': [0.09318930531548074, 0.229213969937478], 'false,true,false': [nan, 0.22921396993747795], 'false,true,true': [0.09318930531548074, nan]}, {'': [0.21902719762662362, 0.2231487498373656], 'false': [nan, 0.2231487498373656], 'false,false': [nan, 0.2231487498373656], 'false,false,false': [nan, 0.2231487498373656], 'true': [0.24343060278203166, 0.17602110829779283], 'true,false': [0.19053183543989846, 0.1336711795720669], 'true,false,false': [0.157585499878467, 6.661765446895156e-05]}, {'': [0.22149289949303133, 0.16112937654044274], 'true': [0.2184748131587688, 0.24756075912824857], 'true,false': [0.00015530612700662139, 0.23542072357694602], 'false': [0.16112937654044274, nan]}, {'': [0.23398827695812754, 0.19136463543409388], 'true': [0.23398827695812754, nan], 'true,true': [0.23557987834167252, 0.18750000000000003], 'false': [nan, 0.1913646354340937], 'false,false': [0.16936687107932963, 0.2220122848284665], 'false,false,false': [nan, 0.2220122848284665], 'false,false,true': [0.172969160996936, 0.0]}, {'': [0.2136489590965143, 0.21773987552064009], 'false': [0.21773987552064009, nan], 'false,true': [0.21461561812991073, 0.22048943680678956], 'false,true,false': [nan, 0.22048943680678956], 'true': [0.2136489590965143, nan]}, {'': [0.2337296327512716, 0.1892336021843868], 'true': [0.23550103663202002, 0.19045633672454398], 'true,true': [0.2350368708569498, 0.23588001619424648], 'true,false': [0.19045633672454398, nan], 'false': [nan, 0.18923360218438673], 'false,false': [0.16851452189577243, 0.2195248084380149], 'false,false,false': [nan, 0.2195248084380149], 'false,false,true': [0.17227860204339712, 0.0]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
2;;accounttype(A, B) :- follows(C, A).;true;true
2;true;recursion_accounttype(C, B).;true;true
2;true,false;follows(D, C), recursion_accounttype(D, B).;true;true
4;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
4;false;follows(D, A), follows(A, E).;true;true
4;false,false;follows(A, G), recursion_accounttype(G, B).;true;true
4;false,false,false;follows(I, A).;true;true
5;;accounttype(A, B) :- follows(C, A).;true;true
5;true;follows(A, D), recursion_accounttype(C, B).;true;true
5;true,false;follows(A, C).;true;true
5;true,false,false;follows(E, C), recursion_accounttype(E, B).;true;true
6;;accounttype(A, B) :- follows(A, C).;true;true
6;true;follows(C, D), recursion_accounttype(D, B).;true;true
6;true,false;follows(E, A).;true;true
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
7;false;follows(F, A).;true;true
7;false,true;tweets(F, G), follows(H, F).;true;true
9;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
9;false;follows(F, A).;true;true
9;false,true;follows(G, F), follows(F, G).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then if ( tweets(D, E), follows(D, A) )
%   | | then return 0.7152917922423687;  // std dev = 0.350, 35.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=30 */
%   | | else if ( follows(A, D) )
%   | | | then return 0.17064893509951234;  // std dev = 1.854, 16.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=5 */
%   | | | else return 0.44148226843284566;  // std dev = 2.415, 24.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=14 */
%   | else return -0.1418510649004878;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   else if ( follows(A, F), recursion_accounttype(F, B) )
%   | then return -0.008517731567154404;  // std dev = 0.340, 30.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=4 */
%   | else if ( tweets(A, G) )
%   | | then if ( tweets(H, G), follows(A, H) )
%   | | | then return 0.399815601766179;  // std dev = 2.441, 24.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=13 */
%   | | | else return 0.10814893509951219;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | else if ( follows(A, I), follows(I, J) )
%   | | | then return 0.7152917922423694;  // std dev = 0.926, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | | else return 0.5248156017661788;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then if ( follows(D, A), tweets(D, E) )
%   | | then return 0.6045267906174343;  // std dev = 0.350, 35.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=30 */
%   | | else if ( tweets(C, F), tweets(D, G) )
%   | | | then return 0.2414738434162482;  // std dev = 2.910, 35.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=15 */
%   | | | else return 0.6036310920707756;  // std dev = 0.858, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else return -0.12544463852839138;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   else if ( follows(A, H), recursion_accounttype(H, B) )
%   | then return -0.007484033389160131;  // std dev = 0.340, 30.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=4 */
%   | else if ( tweets(A, I) )
%   | | then if ( tweets(J, I), follows(A, J) )
%   | | | then return 0.34387981480959035;  // std dev = 2.441, 24.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=13 */
%   | | | else return 0.09446743783575562;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | else if ( follows(A, K), follows(K, L) )
%   | | | then return 0.6045267906174348;  // std dev = 0.926, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | | else return 0.448295606241962;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( recursion_accounttype(C, B) )
%   | then if ( follows(A, D) )
%   | | then if ( recursion_accounttype(D, B), follows(D, A) )
%   | | | then return 0.31474371559648945;  // std dev = 3.624, 68.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=41 */
%   | | | else return 0.10623095079259948;  // std dev = 1.332, 8.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=3 */
%   | | else return 0.5189486779931349;  // std dev = 0.852, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | else if ( follows(E, C), recursion_accounttype(E, B) )
%   | | then return 0.11157857285396537;  // std dev = 0.426, 38.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=12 */
%   | | else return -0.13991432144102992;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else if ( tweets(A, F) )
%   | then if ( follows(A, G), recursion_accounttype(G, B) )
%   | | then return 0.06008567855897011;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else if ( follows(A, H), follows(H, I) )
%   | | | then return 0.19617476468907635;  // std dev = 1.323, 7.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=3 */
%   | | | else return 0.3134122847097337;  // std dev = 1.309, 7.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=4 */
%   | else return 0.45757919183694046;  // std dev = 0.402, 8.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=6 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then if ( tweets(D, E), follows(D, A) )
%   | | then return 0.39696328882868814;  // std dev = 0.346, 35.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=30 */
%   | | else if ( follows(A, D) )
%   | | | then return 0.05772358396554318;  // std dev = 1.856, 16.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=5 */
%   | | | else return 0.26156717624292836;  // std dev = 2.355, 24.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=14 */
%   | else return -0.1477256068048112;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   else if ( follows(A, F), recursion_accounttype(F, B) )
%   | then return -0.019833485158772937;  // std dev = 0.336, 30.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=4 */
%   | else if ( tweets(A, G) )
%   | | then if ( follows(H, A), follows(A, H) )
%   | | | then return 0.3033866336212814;  // std dev = 1.708, 12.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=7 */
%   | | | else return 0.15578011012955337;  // std dev = 1.940, 16.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=7 */
%   | | else if ( follows(A, I), follows(I, J) )
%   | | | then return 0.41163375434469235;  // std dev = 0.892, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | | else return 0.257958809628737;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D) )
%   | then if ( recursion_accounttype(D, B), follows(D, A) )
%   | | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | | then return 0.2273099209756701;  // std dev = 3.330, 61.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=41 */
%   | | | else return -0.13007705935588135;  // std dev = 7.45e-09, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else return 0.0312572112653204;  // std dev = 0.464, 8.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=3 */
%   | else return 0.3213861622317515;  // std dev = 0.835, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   else if ( follows(F, A), follows(A, G) )
%   | then if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return -0.06051268585700015;  // std dev = 0.281, 23.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=2 */
%   | | else return 0.23860310739303095;  // std dev = 0.479, 16.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=10 */
%   | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | then return 0.12475395572973023;  // std dev = 0.445, 7.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=2 */
%   | | else if ( follows(J, A) )
%   | | | then return -0.20915523919949075;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | | else return 0.20964832894270283;  // std dev = 2.074, 20.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=12 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(A, D), recursion_accounttype(C, B) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F), recursion_accounttype(F, B) )
%   | | | then return 0.16304884768108144;  // std dev = 3.361, 63.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=41 */
%   | | | else return -0.1327282525132654;  // std dev = 0.108, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else return 0.11025455907743138;  // std dev = 1.243, 6.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | else return 0.0597355056510283;  // std dev = 0.387, 47.000 (wgt'ed) examples reached here.  /* #neg=30 #pos=17 */
%   else if ( tweets(A, G) )
%   | then if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0.039025565348613636;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else if ( follows(A, I), follows(I, J) )
%   | | | then return 0.08316238319760114;  // std dev = 1.329, 7.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=3 */
%   | | | else return 0.1646898428124284;  // std dev = 1.309, 7.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=4 */
%   | else if ( follows(A, K), follows(K, L) )
%   | | then return 0.2104607104076054;  // std dev = 0.499, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else return 0.30106041347979207;  // std dev = 0.985, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, A) )
%   | | | then return 0.11404590548071394;  // std dev = 3.373, 67.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=41 */
%   | | | else return -0.05961507682687633;  // std dev = 1.658, 30.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=3 */
%   | | else if ( tweets(A, F) )
%   | | | then return 0.13874133442841768;  // std dev = 2.461, 24.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=13 */
%   | | | else return 0.22658976636045886;  // std dev = 0.886, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | else if ( follows(G, A) )
%   | | then return -0.22784563326918575;  // std dev = 0.176, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | else if ( tweets(A, H) )
%   | | | then return 0.0880800986180349;  // std dev = 1.337, 8.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=4 */
%   | | | else return 0.23150144551153085;  // std dev = 0.993, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   else return 0.12685430706544976;  // std dev = 0.347, 8.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=5 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, A) )
%   | then if ( follows(D, E), follows(E, A) )
%   | | then if ( tweets(D, F), tweets(E, F) )
%   | | | then return 0.07205029108361051;  // std dev = 3.118, 57.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=34 */
%   | | | else return 0.4015170315777256;  // std dev = 0.204, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else if ( tweets(A, G), tweets(D, G) )
%   | | | then return -0.3165812937354616;  // std dev = 0.297, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return -0.008253338445755029;  // std dev = 1.271, 8.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=3 */
%   | else return 0.19060794615079535;  // std dev = 0.375, 8.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=6 */
%   else if ( follows(H, A) )
%   | then return 0.010380789512073524;  // std dev = 0.379, 41.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=12 */
%   | else if ( tweets(A, I) )
%   | | then if ( follows(A, J), recursion_accounttype(J, B) )
%   | | | then return 0.03765175263235829;  // std dev = 0.899, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else return 0.06733571586550982;  // std dev = 1.872, 14.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=7 */
%   | | else return 0.15643033082224694;  // std dev = 0.386, 8.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=6 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( tweets(C, D) )
%   | then return 0.02447158987393721;  // std dev = 0.380, 97.000 (wgt'ed) examples reached here.  /* #neg=55 #pos=42 */
%   | else return 0.382955368253298;  // std dev = 0.071, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( follows(A, E), follows(E, F) )
%   | then if ( follows(F, A), follows(E, A) )
%   | | then if ( recursion_accounttype(F, B) )
%   | | | then return 0.13748897851186262;  // std dev = 0.904, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return -0.1954772973856549;  // std dev = 1.215, 8.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | | else if ( follows(G, A), tweets(A, H) )
%   | | | then return 0.5517903629974793;  // std dev = 0.019, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.08918953594967181;  // std dev = 1.620, 14.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=9 */
%   | else if ( follows(I, A), recursion_accounttype(I, B) )
%   | | then return 0.08819424039491956;  // std dev = 0.364, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   | | else if ( tweets(A, J), follows(A, K) )
%   | | | then return 0.08576419192509646;  // std dev = 1.309, 7.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=4 */
%   | | | else return -0.09520822341584664;  // std dev = 0.842, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D) )
%   | then if ( tweets(D, E), follows(D, A) )
%   | | then if ( follows(D, F), recursion_accounttype(F, B) )
%   | | | then return 0.06912229797456187;  // std dev = 3.378, 69.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=43 */
%   | | | else return -0.17350750093132977;  // std dev = 0.220, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return -0.13303776821128285;  // std dev = 0.696, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | else return 0.14173161482445093;  // std dev = 0.843, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   else if ( follows(G, A) )
%   | then return -0.002832459126906396;  // std dev = 0.353, 41.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=12 */
%   | else if ( tweets(A, H) )
%   | | then if ( follows(A, I), follows(I, J) )
%   | | | then return 0.026895813195524997;  // std dev = 1.595, 11.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=4 */
%   | | | else return 0.03276194812133028;  // std dev = 1.330, 8.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=4 */
%   | | else if ( follows(A, K), follows(K, L) )
%   | | | then return 0.09184022581300222;  // std dev = 0.435, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | else return 0.1581329773006248;  // std dev = 0.983, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */


Results
   AUC ROC   = 0.74887
   AUC PR    = 0.691158
   CLL	      = -0.597226
   Precision = 0.696552 at threshold = 0.5
   Recall    = 0.647436
   F1        = 0.671096


Total learning time: 30.782 seconds
Total inference time: 3.514 seconds
AUC ROC: 0.74887


Results scoring model
   AUC ROC   = 0.866844
   AUC PR    = 0.860776
   CLL	      = -0.490404
   Precision = 0.779221 at threshold = 0.5
   Recall    = 0.8
   F1        = 0.789474


Total scoring time: 3.055 seconds
Refined model CLL: -0.490404


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.74887
   AUC PR    = 0.691158
   CLL	      = -0.597226
   Precision = 0.696552 at threshold = 0.5
   Recall    = 0.647436
   F1        = 0.671096


Total learning time: 40.619 seconds
Total inference time: 3.514 seconds
AUC ROC: 0.74887
Total revision time: 40.619
Best scored revision CLL: -0.490404


Dataset: 7_yeast_twitter, Fold: 2, Type: Transfer (trRDN-B), Time: 18:11:55
{'AUC ROC': 0.74887, 'AUC PR': 0.691158, 'CLL': -0.597226, 'Precision': [0.696552, 0.5], 'Recall': 0.647436, 'F1': 0.671096, 'Learning time': 40.619, 'Inference time': 3.514, 'parameter_0.6': {'AUC ROC': 0.675563, 'AUC PR': 0.627666, 'CLL': -0.639288, 'Precision': [0.623116, 0.5], 'Recall': 0.794872, 'F1': 0.698592, 'Learning time': 4.755, 'Inference time': 2.688}}


Amount of data: 0.8
******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
0;true;phenotype(C, D), enzyme(A, E).;true;false
0;true,true;phenotype(A, D).;false;false
0;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
0;false,true;interaction(A, G), interaction(G, G).;false;true
0;false,true,false;interaction(H, F), phenotype(H, I).;false;false
0;false,false;interaction(A, A).;false;true
0;false,false,false;complex(A, J), location(A, K).;false;false
1;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
1;true;interaction(D, A), complex(D, E).;false;true
1;true,false;enzyme(A, F), interaction(C, G).;false;true
1;true,false,false;interaction(H, A), interaction(A, H).;false;false
1;false;interaction(A, A).;false;true
1;false,false;interaction(A, I), location(A, J).;true;true
1;false,false,true;complex(A, K), complex(I, K).;false;false
1;false,false,false;complex(A, L), phenotype(A, M).;false;false
2;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
2;true;recursion_proteinclass(C, B).;false;true
2;true,false;interaction(C, E), recursion_proteinclass(E, B).;false;true
2;true,false,false;interaction(F, A), enzyme(A, D).;false;false
2;false;location(A, G), interaction(A, A).;true;true
2;false,true;interaction(A, H), recursion_proteinclass(H, B).;false;false
2;false,false;interaction(I, A), recursion_proteinclass(I, B).;false;true
2;false,false,false;interaction(J, A), interaction(K, J).;false;false
3;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
3;false;interaction(D, A), interaction(A, D).;true;true
3;false,true;complex(A, E), complex(D, E).;true;true
3;false,true,true;interaction(A, A).;false;false
3;false,true,false;interaction(D, D).;false;false
3;false,false;complex(A, F), interaction(G, A).;true;true
3;false,false,true;complex(G, F), location(A, H).;false;false
3;false,false,false;interaction(I, A), interaction(J, I).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;false;true
4;false;interaction(A, D), interaction(E, A).;true;true
4;false,true;recursion_proteinclass(E, B), phenotype(A, F).;true;true
4;false,true,true;complex(D, G), phenotype(D, F).;false;false
4;false,true,false;interaction(A, A).;false;false
4;false,false;interaction(H, A), recursion_proteinclass(H, B).;true;true
4;false,false,true;enzyme(H, I), phenotype(H, J).;false;false
4;false,false,false;interaction(A, K), enzyme(K, L).;false;false
5;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
5;true;interaction(E, A), recursion_proteinclass(C, B).;false;true
5;true,false;interaction(C, A), enzyme(A, F).;false;true
5;true,false,false;interaction(C, G), recursion_proteinclass(G, B).;false;false
5;false;interaction(A, A).;false;true
5;false,false;enzyme(A, H), interaction(A, I).;true;true
5;false,false,true;interaction(I, I), complex(A, J).;false;false
5;false,false,false;interaction(A, K), interaction(K, K).;false;false
6;;proteinclass(A, B) :- interaction(C, A), enzyme(C, D).;true;true
6;true;interaction(E, C), recursion_proteinclass(E, B).;false;true
6;true,false;interaction(A, F), enzyme(F, G).;false;true
6;true,false,false;enzyme(A, H), complex(A, I).;false;false
6;false;enzyme(A, J).;true;true
6;false,true;enzyme(K, J), recursion_proteinclass(K, B).;false;false
6;false,false;interaction(L, A), complex(A, M).;false;true
6;false,false,false;interaction(A, N), recursion_proteinclass(N, B).;false;false
7;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
7;true;enzyme(A, D), interaction(C, E).;true;true
7;true,true;complex(E, F), phenotype(C, G).;false;false
7;true,false;interaction(H, A), enzyme(H, I).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(A, J), enzyme(J, K).;true;true
7;false,false,true;phenotype(J, L), interaction(J, M).;false;false
7;false,false,false;interaction(N, A), interaction(A, N).;false;false
8;;proteinclass(A, B) :- phenotype(A, C), complex(A, D).;true;true
8;true;complex(E, D), recursion_proteinclass(E, B).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(H, F), recursion_proteinclass(H, B).;false;true
8;false,true,false;interaction(A, I), interaction(I, A).;false;false
8;false,false;interaction(J, A), complex(J, K).;true;true
8;false,false,true;phenotype(J, L).;false;false
8;false,false,false;interaction(M, A), phenotype(M, N).;false;false
9;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
9;true;enzyme(A, D), phenotype(C, E).;true;true
9;true,true;phenotype(A, E).;false;false
9;true,false;complex(C, F), interaction(G, A).;false;false
9;false;interaction(A, A).;false;true
9;false,false;interaction(A, H), location(A, I).;true;true
9;false,false,true;interaction(H, J), interaction(J, H).;false;false
9;false,false,false;interaction(A, K), interaction(L, A).;false;false


WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(C, D) )
%   | then if ( tweets(A, D) )
%   | | then return 0.3914822684328453;  // std dev = 4.320, 75.000 (wgt'ed) examples reached here.  /* #neg=35 #pos=40 */
%   | | else return 0.5581489350995117;  // std dev = 2.510, 30.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=21 */
%   | else return 0.5248156017661789;  // std dev = 1.155, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   else if ( follows(A, E), recursion_accounttype(E, B) )
%   | then if ( follows(F, A), follows(F, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(E, G), tweets(G, H) )
%   | | | then return 0.045648935099512344;  // std dev = 2.208, 32.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=6 */
%   | | | else return 0.19148226843284558;  // std dev = 1.414, 9.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=3 */
%   | else if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.399815601766178;  // std dev = 0.498, 48.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=26 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D) )
%   | then return 0.3725438263847353;  // std dev = 4.966, 102.000 (wgt'ed) examples reached here.  /* #neg=43 #pos=59 */
%   | else if ( follows(E, C) )
%   | | then return 0.47019871238460076;  // std dev = 1.414, 9.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=6 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A) )
%   | | then return 0.1430201996997494;  // std dev = 0.456, 51.000 (wgt'ed) examples reached here.  /* #neg=35 #pos=16 */
%   | | else if ( tweets(A, G) )
%   | | | then return 0.31527242887567253;  // std dev = 2.441, 24.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=12 */
%   | | | else return 0.3160383088450211;  // std dev = 1.837, 14.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=7 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( recursion_accounttype(C, B) )
%   | then return 0.3116091581041995;  // std dev = 5.165, 111.000 (wgt'ed) examples reached here.  /* #neg=46 #pos=65 */
%   | else if ( follows(D, C), recursion_accounttype(D, B) )
%   | | then return 0.14104402207554378;  // std dev = 3.091, 45.000 (wgt'ed) examples reached here.  /* #neg=30 #pos=15 */
%   | | else if ( follows(A, E) )
%   | | | then return -0.021627431805449304;  // std dev = 0.938, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F), recursion_accounttype(F, B) )
%   | | then return 0.13175314885409634;  // std dev = 1.629, 12.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=4 */
%   | | else if ( follows(A, G), follows(G, H) )
%   | | | then return 0.36277364538311613;  // std dev = 1.754, 13.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=8 */
%   | | | else return 0.2858171964906461;  // std dev = 1.797, 13.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=7 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.16710943047939925;  // std dev = 5.500, 132.000 (wgt'ed) examples reached here.  /* #neg=71 #pos=61 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(D, D) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.30579942936786325;  // std dev = 2.518, 26.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=15 */
%   | else if ( follows(A, E) )
%   | | then return 0.26208297309304457;  // std dev = 0.487, 31.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=18 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.2156567467697548;  // std dev = 1.588, 11.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=6 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.20335947396538792;  // std dev = 5.158, 111.000 (wgt'ed) examples reached here.  /* #neg=46 #pos=65 */
%   else if ( follows(D, A), follows(A, E) )
%   | then if ( recursion_accounttype(E, B), tweets(A, F) )
%   | | then if ( tweets(D, F) )
%   | | | then return -0.06691721927946556;  // std dev = 1.613, 21.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=3 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.18334440689036913;  // std dev = 2.575, 28.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=13 */
%   | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | then if ( tweets(G, H) )
%   | | | then return 0.07942204139756637;  // std dev = 1.628, 12.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=4 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(I, A) )
%   | | | then return -0.2889552717425085;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | | else return 0.1989331201584619;  // std dev = 2.516, 26.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=15 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(A, D), recursion_accounttype(C, B) )
%   | then return 0.14878193176718044;  // std dev = 4.956, 102.000 (wgt'ed) examples reached here.  /* #neg=43 #pos=59 */
%   | else if ( follows(A, C) )
%   | | then return 0.07269960944364509;  // std dev = 2.954, 43.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=15 */
%   | | else if ( follows(E, C), recursion_accounttype(E, B) )
%   | | | then return 0.10802563859849201;  // std dev = 1.562, 12.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=6 */
%   | | | else return -0.007120013770267314;  // std dev = 0.933, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(G, A), follows(G, G) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.12367867930145934;  // std dev = 3.007, 38.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=19 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.10253381798041065;  // std dev = 6.183, 168.000 (wgt'ed) examples reached here.  /* #neg=83 #pos=85 */
%   | else if ( follows(E, A) )
%   | | then return -0.21902294788504495;  // std dev = 0.824, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | else return 0.055584719811746584;  // std dev = 0.488, 17.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=8 */
%   else if ( recursion_accounttype(F, B) )
%   | then return 0.11068932576970375;  // std dev = 1.524, 11.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=6 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C) )
%   | then if ( tweets(C, E) )
%   | | then return 0.08768100926272476;  // std dev = 4.977, 104.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=60 */
%   | | else return 0.16263184513818216;  // std dev = 1.192, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | else if ( follows(A, F) )
%   | | then return 0.5256225590048276;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A) )
%   | | then if ( tweets(G, H), follows(I, G) )
%   | | | then return 0.025763925266258803;  // std dev = 3.100, 49.000 (wgt'ed) examples reached here.  /* #neg=33 #pos=16 */
%   | | | else return -0.2833243520340153;  // std dev = 0.096, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | else if ( follows(A, J), follows(J, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.07571408220339479;  // std dev = 3.002, 38.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=19 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( tweets(A, C) )
%   then if ( recursion_accounttype(D, B) )
%   | then return 0.039674946615799976;  // std dev = 5.866, 151.000 (wgt'ed) examples reached here.  /* #neg=78 #pos=73 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, E) )
%   | then if ( follows(E, F), recursion_accounttype(F, B) )
%   | | then return 0.11530867940336553;  // std dev = 2.901, 40.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=23 */
%   | | else if ( follows(G, A), follows(A, G) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.011187433361986255;  // std dev = 1.472, 9.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=4 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(C, D) )
%   | then if ( tweets(A, D) )
%   | | then return 0.023027173464787606;  // std dev = 4.277, 75.000 (wgt'ed) examples reached here.  /* #neg=35 #pos=40 */
%   | | else return 0.1362044715193391;  // std dev = 2.498, 30.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=21 */
%   | else if ( follows(A, E) )
%   | | then return 0.10932075469414733;  // std dev = 1.202, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A) )
%   | | then if ( follows(G, F), follows(F, G) )
%   | | | then return 0.0015751062785266156;  // std dev = 3.108, 50.000 (wgt'ed) examples reached here.  /* #neg=34 #pos=16 */
%   | | | else return -0.17723875203893413;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( follows(H, A), follows(A, I) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.047278769174195566;  // std dev = 2.997, 38.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=19 */


Results
   AUC ROC   = 0.703382
   AUC PR    = 0.668562
   CLL	      = -0.639611
   Precision = 0.635359 at threshold = 0.5
   Recall    = 0.737179
   F1        = 0.682493


Total learning time: 5.691 seconds
Total inference time: 2.559 seconds
AUC ROC: 0.703382


Results scoring model
   AUC ROC   = 0.68285
   AUC PR    = 0.652673
   CLL	      = -0.641397
   Precision = 0.601563 at threshold = 0.5
   Recall    = 0.77
   F1        = 0.675439


Total scoring time: 2.079 seconds
Parameter learned model CLL: -0.641397


Structure after Parameter Learning
[['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'tweets(C, D)', 'true,true': 'tweets(A, D)', 'false': 'follows(A, E), recursion_accounttype(E, B)', 'false,true': 'follows(F, A), follows(F, F)', 'false,true,false': 'follows(E, G), tweets(G, H)', 'false,false': 'follows(A, A)'}, {'true,true,true': [4.32, 35, 40], 'true,true,false': [2.51, 9, 21], 'true,false': [1.155, 2, 4], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [2.208, 26, 6], 'false,true,false,false': [1.414, 6, 3], 'false,false,true': [0.0, 0, 0], 'false,false,false': [0.498, 22, 26]}], ['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(A, D)', 'true,false': 'follows(E, C)', 'false': 'follows(A, A)', 'false,false': 'follows(F, A)', 'false,false,false': 'tweets(A, G)'}, {'true,true': [4.966, 43, 59], 'true,false,true': [1.414, 3, 6], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.456, 35, 16], 'false,false,false,true': [2.441, 12, 12], 'false,false,false,false': [1.837, 7, 7]}], ['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'recursion_accounttype(C, B)', 'true,false': 'follows(D, C), recursion_accounttype(D, B)', 'true,false,false': 'follows(A, E)', 'false': 'follows(A, A)', 'false,false': 'follows(A, F), recursion_accounttype(F, B)', 'false,false,false': 'follows(A, G), follows(G, H)'}, {'true,true': [5.165, 46, 65], 'true,false,true': [3.091, 30, 15], 'true,false,false,true': [0.938, 5, 1], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [1.629, 8, 4], 'false,false,false,true': [1.754, 5, 8], 'false,false,false,false': [1.797, 6, 7]}], ['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,true,false': 'follows(D, D)', 'false,false': 'follows(A, E)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true': [5.5, 71, 61], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [0.0, 0, 0], 'false,true,false,false': [2.518, 11, 15], 'false,false,true': [0.487, 13, 18], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.588, 5, 6]}], ['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(D, A), follows(A, E)', 'false,true': 'recursion_accounttype(E, B), tweets(A, F)', 'false,true,true': 'tweets(D, F)', 'false,true,false': 'follows(A, A)', 'false,false': 'follows(A, G), recursion_accounttype(G, B)', 'false,false,true': 'tweets(G, H)', 'false,false,false': 'follows(I, A)'}, {'true': [5.158, 46, 65], 'false,true,true,true': [1.613, 18, 3], 'false,true,true,false': [0.0, 0, 0], 'false,true,false,true': [0.0, 0, 0], 'false,true,false,false': [2.575, 15, 13], 'false,false,true,true': [1.628, 8, 4], 'false,false,true,false': [0.0, 0, 0], 'false,false,false,true': [0.0, 2, 0], 'false,false,false,false': [2.516, 11, 15]}], ['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(A, D), recursion_accounttype(C, B)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(E, C), recursion_accounttype(E, B)', 'false': 'follows(A, A)', 'false,false': 'follows(F, A)', 'false,false,false': 'follows(G, A), follows(G, G)'}, {'true,true': [4.956, 43, 59], 'true,false,true': [2.954, 28, 15], 'true,false,false,true': [1.562, 6, 6], 'true,false,false,false': [0.933, 4, 1], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [3.007, 19, 19]}], ['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'true,false': 'follows(E, A)', 'false': 'recursion_accounttype(F, B)'}, {'true,true': [6.183, 83, 85], 'true,false,true': [0.824, 3, 1], 'true,false,false': [0.488, 9, 8], 'false,true': [1.524, 5, 6], 'false,false': [0.0, 0, 0]}], ['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C)', 'true,true': 'tweets(C, E)', 'true,false': 'follows(A, F)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A)', 'false,false,true': 'tweets(G, H), follows(I, G)', 'false,false,false': 'follows(A, J), follows(J, A)'}, {'true,true,true': [4.977, 44, 60], 'true,true,false': [1.192, 2, 4], 'true,false,true': [0.0, 0, 1], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [3.1, 33, 16], 'false,false,true,false': [0.096, 2, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [3.002, 19, 19]}], ['accounttype(A, B)', {'': 'tweets(A, C)', 'true': 'recursion_accounttype(D, B)', 'false': 'follows(A, E)', 'false,true': 'follows(E, F), recursion_accounttype(F, B)', 'false,true,false': 'follows(G, A), follows(A, G)'}, {'true,true': [5.866, 78, 73], 'true,false': [0.0, 0, 0], 'false,true,true': [2.901, 17, 23], 'false,true,false,true': [0.0, 0, 0], 'false,true,false,false': [1.472, 5, 4], 'false,false': [0.0, 0, 0]}], ['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'tweets(C, D)', 'true,true': 'tweets(A, D)', 'true,false': 'follows(A, E)', 'false': 'follows(A, A)', 'false,false': 'follows(F, A)', 'false,false,true': 'follows(G, F), follows(F, G)', 'false,false,false': 'follows(H, A), follows(A, I)'}, {'true,true,true': [4.277, 35, 40], 'true,true,false': [2.498, 9, 21], 'true,false,true': [1.202, 2, 4], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [3.108, 34, 16], 'false,false,true,false': [0.0, 1, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [2.997, 19, 19]}]]
[{'': [0.24267510753997185, 0.23860623658628913], 'true': [0.24344671201814017, 0.22222222222222213], 'true,true': [0.24888888888889, 0.21000000000000033], 'false': [0.1713265913146938, 0.2482638888888901], 'false,false': [nan, 0.24826388888889026], 'false,true': [nan, 0.17132659131469358], 'false,true,false': [0.1523437500000002, 0.2222222222222221]}, {'': [0.24093090807437742, 0.23134631123158397], 'true': [0.24180844662772066, 0.22222222222222238], 'false': [nan, 0.23134631123158494], 'false,false': [0.2079946470100822, 0.2456285678686282], 'false,false,false': [0.24834102431664906, 0.2409782720625577], 'true,false': [0.22222222222222238, nan]}, {'': [0.23772381664670184, 0.24481628992916574], 'false': [nan, 0.24481628992916574], 'false,false': [0.2210594747615009, 0.2440738602088714], 'false,false,false': [0.23666072349915193, 0.24852584940552125], 'true': [0.2403442016647495, 0.2073627220243014], 'true,false': [0.2123256427732399, 0.14679199119453637], 'true,false,false': [0.14679199119453637, nan]}, {'': [0.22919032495343758, 0.23960159405858986], 'false': [0.24384857659369297, 0.23577876760824498], 'false,true': [nan, 0.24384857659369297], 'false,true,false': [nan, 0.24384857659369297], 'false,false': [0.23750254319170092, 0.2293299681905794], 'false,false,false': [nan, 0.2293299681905794]}, {'': [0.2397146829158903, 0.219719569686692], 'false': [0.2037957851500344, 0.23706896516702933], 'false,false': [0.22088333722561784, 0.24185537126087533], 'false,false,false': [0.0, 0.24345712466351246], 'false,false,true': [0.22088333722561784, nan], 'false,true': [0.12391120932223142, 0.23686741064952746], 'false,true,false': [nan, 0.2368674106495276], 'false,true,true': [0.12391120932223142, nan]}, {'': [0.22751796443709987, 0.2379383161333551], 'false': [nan, 0.2379383161333551], 'false,false': [nan, 0.2379383161333551], 'false,false,false': [nan, 0.2379383161333551], 'true': [0.24076704212361616, 0.20138942422629558], 'true,false': [0.20293954304893427, 0.19746700850268137], 'true,false,false': [0.20326952563638778, 0.17418201119866103]}, {'': [0.22959993509652388, 0.21125070657966677], 'true': [0.22758671004971762, 0.23694874110222178], 'true,false': [0.16965604928377717, 0.2384186259033816], 'false': [0.21125070657966677, nan]}, {'': [0.23797554619921119, 0.21234581963800583], 'true': [0.23844320615378925, 0.0], 'true,true': [0.23822586773091148, 0.23689919374697335], 'false': [nan, 0.212345819638006], 'false,false': [0.19216495730695943, 0.2372228528250871], 'false,false,false': [nan, 0.2372228528250871], 'false,false,true': [0.19607470152373027, 0.004587153504738567], 'true,false': [0.0, nan]}, {'': [0.22786876980940796, 0.21760296962675577], 'true': [0.22786876980940796, nan], 'false': [0.21760296962675577, nan], 'false,true': [0.21036609078012242, 0.2409168887732544], 'false,true,false': [nan, 0.2409168887732544]}, {'': [0.23667005938217292, 0.21042339337090754], 'true': [0.2362698818717119, 0.2409191571873626], 'true,false': [0.2409191571873626, nan], 'true,true': [0.24391526551484607, 0.2080070650532119], 'false': [nan, 0.2104233933709074], 'false,false': [0.19006010286770325, 0.23636541081531293], 'false,false,false': [nan, 0.23636541081531293], 'false,false,true': [0.19323435598532446, 0.0]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
4;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
4;false;follows(D, A), follows(A, E).;true;true
4;false,false;follows(A, G), recursion_accounttype(G, B).;true;true
4;false,false,false;follows(I, A).;true;true
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
7;true;follows(D, C).;true;true
9;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
9;false;follows(F, A).;true;true
9;false,true;follows(G, F), follows(F, G).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then if ( tweets(D, E), follows(D, A) )
%   | | then return 0.6581489350995113;  // std dev = 0.400, 45.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=36 */
%   | | else if ( follows(A, F), follows(F, C) )
%   | | | then return 0.2727830814409758;  // std dev = 3.155, 41.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=17 */
%   | | | else return 0.6081489350995123;  // std dev = 1.732, 16.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=12 */
%   | else return -0.1418510649004878;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   else if ( follows(A, G), recursion_accounttype(G, B) )
%   | then return 0.07766113022146359;  // std dev = 0.414, 41.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=9 */
%   | else if ( tweets(A, H) )
%   | | then if ( tweets(I, H), follows(A, I) )
%   | | | then return 0.39148226843284567;  // std dev = 2.733, 30.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=16 */
%   | | | else return 0.10814893509951219;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.6081489350995123;  // std dev = 1.225, 8.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=6 */
%   | | | else return 0.35814893509951223;  // std dev = 1.225, 6.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then if ( follows(A, D), follows(D, A) )
%   | | then return 0.5913526679551886;  // std dev = 0.373, 36.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=30 */
%   | | else if ( tweets(D, E), follows(F, C) )
%   | | | then return 0.30093644465870834;  // std dev = 3.884, 62.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=31 */
%   | | | else return 0.7807036594785781;  // std dev = 0.047, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else return -0.12544463852839138;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   else if ( follows(A, G), recursion_accounttype(G, B) )
%   | then return 0.06794204742591953;  // std dev = 0.414, 41.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=9 */
%   | else if ( tweets(A, H) )
%   | | then if ( tweets(I, H), follows(A, I) )
%   | | | then return 0.336865379051268;  // std dev = 2.733, 30.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=16 */
%   | | | else return 0.09446743783575562;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.5170719622367218;  // std dev = 1.225, 8.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=6 */
%   | | | else return 0.30874113578563506;  // std dev = 1.225, 6.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then if ( follows(D, A), tweets(D, E) )
%   | | then return 0.4471325342681069;  // std dev = 0.397, 45.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=36 */
%   | | else if ( follows(A, D) )
%   | | | then return 0.08221027301673595;  // std dev = 2.016, 19.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=6 */
%   | | | else return 0.3438214202671457;  // std dev = 2.919, 38.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=23 */
%   | else return -0.11231637819360639;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   else if ( follows(A, F), recursion_accounttype(F, B) )
%   | then return 0.05899660355809804;  // std dev = 0.414, 41.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=9 */
%   | else if ( follows(G, A) )
%   | | then if ( follows(A, G), tweets(G, H) )
%   | | | then return 0.3377246721921376;  // std dev = 2.051, 18.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=11 */
%   | | | else return -0.2323029350333357;  // std dev = 0.141, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else if ( tweets(A, I) )
%   | | | then return 0.2845276526418725;  // std dev = 2.059, 17.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=9 */
%   | | | else return 0.39179906346661103;  // std dev = 1.353, 9.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=6 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then if ( follows(D, A), follows(A, D) )
%   | | then return 0.35915181496125226;  // std dev = 0.373, 36.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=30 */
%   | | else if ( follows(A, E), follows(E, C) )
%   | | | then return 0.14892687770377877;  // std dev = 3.220, 44.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=19 */
%   | | | else return 0.3402440582017862;  // std dev = 2.048, 22.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=16 */
%   | else return -0.10159632948783627;  // std dev = 5.27e-09, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   else if ( follows(A, F), recursion_accounttype(F, B) )
%   | then return 0.05088671520939661;  // std dev = 0.414, 41.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=9 */
%   | else if ( follows(G, A) )
%   | | then if ( follows(G, H), follows(H, A) )
%   | | | then return -0.06076501731714131;  // std dev = 1.202, 9.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | | | else return 0.35095907620874905;  // std dev = 1.602, 13.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=9 */
%   | | else if ( tweets(A, I) )
%   | | | then return 0.22848150371798545;  // std dev = 2.059, 17.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=9 */
%   | | | else return 0.3082805160617333;  // std dev = 1.345, 9.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=6 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then if ( follows(A, E), follows(E, A) )
%   | | then return 0.14810304082438988;  // std dev = 0.431, 76.000 (wgt'ed) examples reached here.  /* #neg=35 #pos=41 */
%   | | else if ( follows(A, F) )
%   | | | then return 0.27169422953760114;  // std dev = 0.837, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | else return 0.19276377000786885;  // std dev = 1.415, 9.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=6 */
%   | else return 0.25765100589219037;  // std dev = 0.412, 22.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=15 */
%   else if ( follows(G, A), follows(A, H) )
%   | then return 0.06585374698018479;  // std dev = 0.425, 49.000 (wgt'ed) examples reached here.  /* #neg=33 #pos=16 */
%   | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | then if ( tweets(A, J) )
%   | | | then return 0.25269132675008427;  // std dev = 1.309, 7.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=3 */
%   | | | else return 0.02411989817865572;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else if ( follows(K, A) )
%   | | | then return -0.1311929892166932;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | | else return 0.19835876855337878;  // std dev = 2.462, 26.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=15 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), tweets(A, D) )
%   then if ( recursion_accounttype(C, B), follows(A, C) )
%   | then return 0.13721043628191523;  // std dev = 0.423, 69.000 (wgt'ed) examples reached here.  /* #neg=30 #pos=39 */
%   | else if ( follows(C, E), follows(E, A) )
%   | | then return -0.04427868542893695;  // std dev = 0.393, 34.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=10 */
%   | | else if ( follows(A, F), follows(F, C) )
%   | | | then return 0.3191203597567114;  // std dev = 1.510, 12.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=7 */
%   | | | else return 0.04334514667489934;  // std dev = 1.385, 12.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=5 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.1977216414041328;  // std dev = 0.412, 22.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=15 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), follows(I, A) )
%   | | | then return -0.1856299404923316;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | | else return 0.1997704388939591;  // std dev = 1.464, 9.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=5 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.18142313046503594;  // std dev = 2.145, 21.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=11 */
%   | | | else return 0.10120061873251018;  // std dev = 2.006, 17.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=8 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, A) )
%   | then return 0.10578600425965999;  // std dev = 0.421, 88.000 (wgt'ed) examples reached here.  /* #neg=37 #pos=51 */
%   | else return 0.005857137728914875;  // std dev = 0.397, 44.000 (wgt'ed) examples reached here.  /* #neg=34 #pos=10 */
%   else if ( tweets(A, D) )
%   | then if ( follows(E, A), tweets(E, F) )
%   | | then if ( follows(A, G), follows(E, G) )
%   | | | then return 0.16472393082195225;  // std dev = 1.809, 16.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=9 */
%   | | | else return 0.08699856121709482;  // std dev = 1.890, 17.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=9 */
%   | | else if ( follows(A, H), follows(H, I) )
%   | | | then return 0.03585879737807357;  // std dev = 1.628, 11.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=5 */
%   | | | else return 0.13583962983606138;  // std dev = 1.309, 7.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=4 */
%   | else if ( follows(J, A), recursion_accounttype(J, B) )
%   | | then return 0.48182294876135695;  // std dev = 0.107, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( follows(A, K), follows(K, L) )
%   | | | then return 0.18683387337816576;  // std dev = 1.124, 8.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=6 */
%   | | | else return 0.033318292866869825;  // std dev = 1.225, 6.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C) )
%   | then if ( tweets(A, E), follows(A, F) )
%   | | then if ( recursion_accounttype(F, B), tweets(F, E) )
%   | | | then return 0.04190281147647621;  // std dev = 3.212, 60.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=31 */
%   | | | else return 0.1541354991822704;  // std dev = 1.965, 19.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=12 */
%   | | else return 0.12019075034357825;  // std dev = 0.425, 31.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=21 */
%   | else return 0.3557600903707011;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(G, A) )
%   | then return 0.013682633824218183;  // std dev = 0.400, 51.000 (wgt'ed) examples reached here.  /* #neg=35 #pos=16 */
%   | else if ( follows(A, H), follows(H, I) )
%   | | then if ( follows(I, H), recursion_accounttype(H, B) )
%   | | | then return -0.06880817981657786;  // std dev = 0.899, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | | | else return 0.21191759670185378;  // std dev = 1.843, 15.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=10 */
%   | | else if ( follows(A, J), recursion_accounttype(J, B) )
%   | | | then return 0.04466951550850298;  // std dev = 0.878, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | else return 0.06657756062088047;  // std dev = 1.798, 13.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=7 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(C, A), tweets(A, D) )
%   then if ( recursion_accounttype(C, B), follows(A, C) )
%   | then if ( tweets(C, E) )
%   | | then return 0.052370978730365524;  // std dev = 0.417, 66.000 (wgt'ed) examples reached here.  /* #neg=30 #pos=36 */
%   | | else return 0.5033576777916521;  // std dev = 0.107, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return 0.008998968676594214;  // std dev = 0.413, 58.000 (wgt'ed) examples reached here.  /* #neg=36 #pos=22 */
%   else if ( follows(A, F), follows(F, G) )
%   | then if ( recursion_accounttype(F, B), follows(G, F) )
%   | | then return 0.021023112257442526;  // std dev = 0.407, 30.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=14 */
%   | | else if ( follows(H, A), follows(H, F) )
%   | | | then return 6.694903276522716E-4;  // std dev = 1.115, 8.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=4 */
%   | | | else return 0.21631656740374952;  // std dev = 1.955, 18.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=13 */
%   | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | then return 0.03729771146476271;  // std dev = 0.878, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.0855914363633912;  // std dev = 1.309, 7.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=4 */
%   | | | else return 0.008392988775117072;  // std dev = 1.225, 6.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, A) )
%   | then if ( follows(D, E), follows(E, A) )
%   | | then return 0.09011589163273721;  // std dev = 0.413, 78.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=49 */
%   | | else return -0.14031617264789845;  // std dev = 0.378, 19.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=6 */
%   | else if ( follows(A, F), follows(F, G) )
%   | | then return 0.3230088517196467;  // std dev = 0.087, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.06742125410979029;  // std dev = 0.483, 11.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=7 */
%   else if ( follows(H, A) )
%   | then return 0.007755001284149954;  // std dev = 0.397, 51.000 (wgt'ed) examples reached here.  /* #neg=35 #pos=16 */
%   | else if ( follows(A, I), follows(I, J) )
%   | | then if ( follows(A, J), recursion_accounttype(I, B) )
%   | | | then return 0.2356803006318986;  // std dev = 0.954, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return 0.021715366187813036;  // std dev = 1.824, 17.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=9 */
%   | | else if ( tweets(A, K) )
%   | | | then return 0.02502111823012755;  // std dev = 1.342, 8.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=4 */
%   | | | else return 0.0456635529388104;  // std dev = 1.481, 9.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=4 */


Results
   AUC ROC   = 0.781332
   AUC PR    = 0.744024
   CLL	      = -0.57361
   Precision = 0.713333 at threshold = 0.5
   Recall    = 0.685897
   F1        = 0.699346


Total learning time: 41.268 seconds
Total inference time: 3.938 seconds
AUC ROC: 0.781332


Results scoring model
   AUC ROC   = 0.82795
   AUC PR    = 0.821915
   CLL	      = -0.538853
   Precision = 0.74 at threshold = 0.5
   Recall    = 0.74
   F1        = 0.74


Total scoring time: 3.477 seconds
Refined model CLL: -0.538853


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.781332
   AUC PR    = 0.744024
   CLL	      = -0.57361
   Precision = 0.713333 at threshold = 0.5
   Recall    = 0.685897
   F1        = 0.699346


Total learning time: 52.51499999999999 seconds
Total inference time: 3.938 seconds
AUC ROC: 0.781332
Total revision time: 52.51499999999999
Best scored revision CLL: -0.538853


Dataset: 7_yeast_twitter, Fold: 2, Type: Transfer (trRDN-B), Time: 18:12:56
{'AUC ROC': 0.781332, 'AUC PR': 0.744024, 'CLL': -0.57361, 'Precision': [0.713333, 0.5], 'Recall': 0.685897, 'F1': 0.699346, 'Learning time': 52.51499999999999, 'Inference time': 3.938, 'parameter_0.8': {'AUC ROC': 0.703382, 'AUC PR': 0.668562, 'CLL': -0.639611, 'Precision': [0.635359, 0.5], 'Recall': 0.737179, 'F1': 0.682493, 'Learning time': 5.691, 'Inference time': 2.559}}


Amount of data: 1.0
******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
0;true;phenotype(C, D), enzyme(A, E).;true;false
0;true,true;phenotype(A, D).;false;false
0;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
0;false,true;interaction(A, G), interaction(G, G).;false;true
0;false,true,false;interaction(H, F), phenotype(H, I).;false;false
0;false,false;interaction(A, A).;false;true
0;false,false,false;complex(A, J), location(A, K).;false;false
1;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
1;true;interaction(D, A), complex(D, E).;false;true
1;true,false;enzyme(A, F), interaction(C, G).;false;true
1;true,false,false;interaction(H, A), interaction(A, H).;false;false
1;false;interaction(A, A).;false;true
1;false,false;interaction(A, I), location(A, J).;true;true
1;false,false,true;complex(A, K), complex(I, K).;false;false
1;false,false,false;complex(A, L), phenotype(A, M).;false;false
2;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
2;true;recursion_proteinclass(C, B).;false;true
2;true,false;interaction(C, E), recursion_proteinclass(E, B).;false;true
2;true,false,false;interaction(F, A), enzyme(A, D).;false;false
2;false;location(A, G), interaction(A, A).;true;true
2;false,true;interaction(A, H), recursion_proteinclass(H, B).;false;false
2;false,false;interaction(I, A), recursion_proteinclass(I, B).;false;true
2;false,false,false;interaction(J, A), interaction(K, J).;false;false
3;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
3;false;interaction(D, A), interaction(A, D).;true;true
3;false,true;complex(A, E), complex(D, E).;true;true
3;false,true,true;interaction(A, A).;false;false
3;false,true,false;interaction(D, D).;false;false
3;false,false;complex(A, F), interaction(G, A).;true;true
3;false,false,true;complex(G, F), location(A, H).;false;false
3;false,false,false;interaction(I, A), interaction(J, I).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;false;true
4;false;interaction(A, D), interaction(E, A).;true;true
4;false,true;recursion_proteinclass(E, B), phenotype(A, F).;true;true
4;false,true,true;complex(D, G), phenotype(D, F).;false;false
4;false,true,false;interaction(A, A).;false;false
4;false,false;interaction(H, A), recursion_proteinclass(H, B).;true;true
4;false,false,true;enzyme(H, I), phenotype(H, J).;false;false
4;false,false,false;interaction(A, K), enzyme(K, L).;false;false
5;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
5;true;interaction(E, A), recursion_proteinclass(C, B).;false;true
5;true,false;interaction(C, A), enzyme(A, F).;false;true
5;true,false,false;interaction(C, G), recursion_proteinclass(G, B).;false;false
5;false;interaction(A, A).;false;true
5;false,false;enzyme(A, H), interaction(A, I).;true;true
5;false,false,true;interaction(I, I), complex(A, J).;false;false
5;false,false,false;interaction(A, K), interaction(K, K).;false;false
6;;proteinclass(A, B) :- interaction(C, A), enzyme(C, D).;true;true
6;true;interaction(E, C), recursion_proteinclass(E, B).;false;true
6;true,false;interaction(A, F), enzyme(F, G).;false;true
6;true,false,false;enzyme(A, H), complex(A, I).;false;false
6;false;enzyme(A, J).;true;true
6;false,true;enzyme(K, J), recursion_proteinclass(K, B).;false;false
6;false,false;interaction(L, A), complex(A, M).;false;true
6;false,false,false;interaction(A, N), recursion_proteinclass(N, B).;false;false
7;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
7;true;enzyme(A, D), interaction(C, E).;true;true
7;true,true;complex(E, F), phenotype(C, G).;false;false
7;true,false;interaction(H, A), enzyme(H, I).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(A, J), enzyme(J, K).;true;true
7;false,false,true;phenotype(J, L), interaction(J, M).;false;false
7;false,false,false;interaction(N, A), interaction(A, N).;false;false
8;;proteinclass(A, B) :- phenotype(A, C), complex(A, D).;true;true
8;true;complex(E, D), recursion_proteinclass(E, B).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(H, F), recursion_proteinclass(H, B).;false;true
8;false,true,false;interaction(A, I), interaction(I, A).;false;false
8;false,false;interaction(J, A), complex(J, K).;true;true
8;false,false,true;phenotype(J, L).;false;false
8;false,false,false;interaction(M, A), phenotype(M, N).;false;false
9;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
9;true;enzyme(A, D), phenotype(C, E).;true;true
9;true,true;phenotype(A, E).;false;false
9;true,false;complex(C, F), interaction(G, A).;false;false
9;false;interaction(A, A).;false;true
9;false,false;interaction(A, H), location(A, I).;true;true
9;false,false,true;interaction(H, J), interaction(J, H).;false;false
9;false,false,false;interaction(A, K), interaction(L, A).;false;false


WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(C, D) )
%   | then if ( tweets(A, D) )
%   | | then return 0.39212951762378506;  // std dev = 5.063, 103.000 (wgt'ed) examples reached here.  /* #neg=48 #pos=55 */
%   | | else return 0.4867203636709401;  // std dev = 2.859, 35.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=22 */
%   | else return 0.4831489350995123;  // std dev = 1.369, 8.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=5 */
%   else if ( follows(A, E), recursion_accounttype(E, B) )
%   | then if ( follows(F, A), follows(F, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(E, G), tweets(G, H) )
%   | | | then return 0.09499104036267027;  // std dev = 2.621, 38.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=9 */
%   | | | else return 0.19148226843284558;  // std dev = 1.414, 9.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=3 */
%   | else if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.4005218164554434;  // std dev = 0.498, 59.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=32 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D) )
%   | then return 0.3590656461230003;  // std dev = 5.695, 132.000 (wgt'ed) examples reached here.  /* #neg=58 #pos=74 */
%   | else if ( follows(E, C) )
%   | | then return 0.37485841694408084;  // std dev = 1.852, 14.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=8 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A) )
%   | | then return 0.18477460771884635;  // std dev = 0.474, 64.000 (wgt'ed) examples reached here.  /* #neg=41 #pos=23 */
%   | | else if ( tweets(A, G) )
%   | | | then return 0.3138778417554282;  // std dev = 2.442, 24.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=12 */
%   | | | else return 0.3121836668026543;  // std dev = 2.094, 18.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=9 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( recursion_accounttype(C, B) )
%   | then return 0.296463128485183;  // std dev = 5.987, 146.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=82 */
%   | else if ( follows(D, C), recursion_accounttype(D, B) )
%   | | then return 0.19057269030187093;  // std dev = 3.589, 56.000 (wgt'ed) examples reached here.  /* #neg=34 #pos=22 */
%   | | else if ( follows(A, E) )
%   | | | then return -0.08097949383075163;  // std dev = 0.966, 8.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F), recursion_accounttype(F, B) )
%   | | then return 0.127622058240831;  // std dev = 1.630, 12.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=4 */
%   | | else if ( follows(A, G), follows(G, H) )
%   | | | then return 0.31907221424478144;  // std dev = 1.852, 14.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=8 */
%   | | | else return 0.31023209991350675;  // std dev = 1.984, 16.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=9 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.1695431211752974;  // std dev = 6.273, 166.000 (wgt'ed) examples reached here.  /* #neg=89 #pos=77 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(D, D) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.31334389124676937;  // std dev = 2.838, 34.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=20 */
%   | else if ( follows(A, E) )
%   | | then return 0.2683586572761409;  // std dev = 0.489, 36.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=21 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.18368270842623713;  // std dev = 1.972, 16.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=8 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.1935944856860983;  // std dev = 5.979, 146.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=82 */
%   else if ( follows(D, A), follows(A, E) )
%   | then if ( recursion_accounttype(E, B), tweets(A, F) )
%   | | then if ( tweets(D, F) )
%   | | | then return -0.010210058226835027;  // std dev = 2.166, 27.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=6 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.18226455955091392;  // std dev = 2.870, 35.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=17 */
%   | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | then if ( tweets(G, H) )
%   | | | then return 0.07486167506163549;  // std dev = 1.629, 12.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=4 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(I, A) )
%   | | | then return -0.30144040111736586;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | | else return 0.18997530068213042;  // std dev = 2.714, 30.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=17 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(A, D), recursion_accounttype(C, B) )
%   | then return 0.14622066374435774;  // std dev = 5.685, 132.000 (wgt'ed) examples reached here.  /* #neg=58 #pos=74 */
%   | else if ( follows(A, C) )
%   | | then return 0.09081029766899625;  // std dev = 3.497, 56.000 (wgt'ed) examples reached here.  /* #neg=34 #pos=22 */
%   | | else if ( follows(E, C), recursion_accounttype(E, B) )
%   | | | then return 0.08960909922586051;  // std dev = 1.956, 17.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=8 */
%   | | | else return -0.016171627957693176;  // std dev = 0.927, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(G, A), follows(G, G) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.12038967279071014;  // std dev = 3.175, 42.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=21 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.10512635054030633;  // std dev = 7.033, 210.000 (wgt'ed) examples reached here.  /* #neg=103 #pos=107 */
%   | else if ( follows(E, A) )
%   | | then return -0.24822694775808318;  // std dev = 0.844, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | | else return 0.07753569648352618;  // std dev = 0.489, 20.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=10 */
%   else if ( recursion_accounttype(F, B) )
%   | then return 0.08878536994288361;  // std dev = 1.925, 16.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=8 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C) )
%   | then if ( tweets(C, E) )
%   | | then return 0.0835548325269992;  // std dev = 5.776, 137.000 (wgt'ed) examples reached here.  /* #neg=61 #pos=76 */
%   | | else return 0.14010007248584738;  // std dev = 1.404, 8.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=5 */
%   | else if ( follows(A, F) )
%   | | then return 0.5344097936129131;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A) )
%   | | then if ( tweets(G, H), follows(I, G) )
%   | | | then return 0.03992834783762369;  // std dev = 3.609, 62.000 (wgt'ed) examples reached here.  /* #neg=39 #pos=23 */
%   | | | else return -0.28749289469566763;  // std dev = 0.093, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | else if ( follows(A, J), follows(J, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.07035050744207971;  // std dev = 3.173, 42.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=21 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( tweets(A, C) )
%   then if ( recursion_accounttype(D, B) )
%   | then return 0.05522721799258295;  // std dev = 6.757, 194.000 (wgt'ed) examples reached here.  /* #neg=97 #pos=97 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, E) )
%   | then if ( follows(E, F), recursion_accounttype(F, B) )
%   | | then return 0.06403646835128975;  // std dev = 3.159, 44.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=23 */
%   | | else if ( follows(G, A), follows(A, G) )
%   | | | then return -0.28545472605202205;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | | else return 0.04904993300260019;  // std dev = 1.704, 12.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=6 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(C, D) )
%   | then if ( tweets(A, D) )
%   | | then return 0.03422591799450037;  // std dev = 5.026, 103.000 (wgt'ed) examples reached here.  /* #neg=48 #pos=55 */
%   | | else return 0.10046511901202455;  // std dev = 2.847, 35.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=22 */
%   | else if ( follows(A, E) )
%   | | then return 0.09117686109691672;  // std dev = 1.405, 8.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=5 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A) )
%   | | then if ( follows(G, F), follows(F, G) )
%   | | | then return 0.015592732590725808;  // std dev = 3.609, 63.000 (wgt'ed) examples reached here.  /* #neg=40 #pos=23 */
%   | | | else return -0.18411685404605854;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( follows(H, A), follows(A, I) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.040122180937398375;  // std dev = 3.172, 42.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=21 */


Results
   AUC ROC   = 0.700752
   AUC PR    = 0.674112
   CLL	      = -0.644454
   Precision = 0.636943 at threshold = 0.5
   Recall    = 0.641026
   F1        = 0.638978


Total learning time: 5.723 seconds
Total inference time: 2.541 seconds
AUC ROC: 0.700752


Results scoring model
   AUC ROC   = 0.636275
   AUC PR    = 0.605493
   CLL	      = -0.658269
   Precision = 0.56962 at threshold = 0.5
   Recall    = 0.714286
   F1        = 0.633803


Total scoring time: 2.514 seconds
Parameter learned model CLL: -0.658269


Structure after Parameter Learning
[['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'tweets(C, D)', 'true,true': 'tweets(A, D)', 'false': 'follows(A, E), recursion_accounttype(E, B)', 'false,true': 'follows(F, A), follows(F, F)', 'false,true,false': 'follows(E, G), tweets(G, H)', 'false,false': 'follows(A, A)'}, {'true,true,true': [5.063, 48, 55], 'true,true,false': [2.859, 13, 22], 'true,false': [1.369, 3, 5], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [2.621, 29, 9], 'false,true,false,false': [1.414, 6, 3], 'false,false,true': [0.0, 0, 0], 'false,false,false': [0.498, 27, 32]}], ['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(A, D)', 'true,false': 'follows(E, C)', 'false': 'follows(A, A)', 'false,false': 'follows(F, A)', 'false,false,false': 'tweets(A, G)'}, {'true,true': [5.695, 58, 74], 'true,false,true': [1.852, 6, 8], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.474, 41, 23], 'false,false,false,true': [2.442, 12, 12], 'false,false,false,false': [2.094, 9, 9]}], ['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'recursion_accounttype(C, B)', 'true,false': 'follows(D, C), recursion_accounttype(D, B)', 'true,false,false': 'follows(A, E)', 'false': 'follows(A, A)', 'false,false': 'follows(A, F), recursion_accounttype(F, B)', 'false,false,false': 'follows(A, G), follows(G, H)'}, {'true,true': [5.987, 64, 82], 'true,false,true': [3.589, 34, 22], 'true,false,false,true': [0.966, 7, 1], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [1.63, 8, 4], 'false,false,false,true': [1.852, 6, 8], 'false,false,false,false': [1.984, 7, 9]}], ['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,true,false': 'follows(D, D)', 'false,false': 'follows(A, E)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true': [6.273, 89, 77], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [0.0, 0, 0], 'false,true,false,false': [2.838, 14, 20], 'false,false,true': [0.489, 15, 21], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.972, 8, 8]}], ['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(D, A), follows(A, E)', 'false,true': 'recursion_accounttype(E, B), tweets(A, F)', 'false,true,true': 'tweets(D, F)', 'false,true,false': 'follows(A, A)', 'false,false': 'follows(A, G), recursion_accounttype(G, B)', 'false,false,true': 'tweets(G, H)', 'false,false,false': 'follows(I, A)'}, {'true': [5.979, 64, 82], 'false,true,true,true': [2.166, 21, 6], 'false,true,true,false': [0.0, 0, 0], 'false,true,false,true': [0.0, 0, 0], 'false,true,false,false': [2.87, 18, 17], 'false,false,true,true': [1.629, 8, 4], 'false,false,true,false': [0.0, 0, 0], 'false,false,false,true': [0.0, 2, 0], 'false,false,false,false': [2.714, 13, 17]}], ['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(A, D), recursion_accounttype(C, B)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(E, C), recursion_accounttype(E, B)', 'false': 'follows(A, A)', 'false,false': 'follows(F, A)', 'false,false,false': 'follows(G, A), follows(G, G)'}, {'true,true': [5.685, 58, 74], 'true,false,true': [3.497, 34, 22], 'true,false,false,true': [1.956, 9, 8], 'true,false,false,false': [0.927, 4, 1], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [3.175, 21, 21]}], ['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'true,false': 'follows(E, A)', 'false': 'recursion_accounttype(F, B)'}, {'true,true': [7.033, 103, 107], 'true,false,true': [0.844, 5, 1], 'true,false,false': [0.489, 10, 10], 'false,true': [1.925, 8, 8], 'false,false': [0.0, 0, 0]}], ['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C)', 'true,true': 'tweets(C, E)', 'true,false': 'follows(A, F)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A)', 'false,false,true': 'tweets(G, H), follows(I, G)', 'false,false,false': 'follows(A, J), follows(J, A)'}, {'true,true,true': [5.776, 61, 76], 'true,true,false': [1.404, 3, 5], 'true,false,true': [0.0, 0, 1], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [3.609, 39, 23], 'false,false,true,false': [0.093, 2, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [3.173, 21, 21]}], ['accounttype(A, B)', {'': 'tweets(A, C)', 'true': 'recursion_accounttype(D, B)', 'false': 'follows(A, E)', 'false,true': 'follows(E, F), recursion_accounttype(F, B)', 'false,true,false': 'follows(G, A), follows(A, G)'}, {'true,true': [6.757, 97, 97], 'true,false': [0.0, 0, 0], 'false,true,true': [3.159, 21, 23], 'false,true,false,true': [0.0, 2, 0], 'false,true,false,false': [1.704, 6, 6], 'false,false': [0.0, 0, 0]}], ['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'tweets(C, D)', 'true,true': 'tweets(A, D)', 'true,false': 'follows(A, E)', 'false': 'follows(A, A)', 'false,false': 'follows(F, A)', 'false,false,true': 'follows(G, F), follows(F, G)', 'false,false,false': 'follows(H, A), follows(A, I)'}, {'true,true,true': [5.026, 48, 55], 'true,true,false': [2.847, 13, 22], 'true,false,true': [1.405, 3, 5], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [3.609, 40, 23], 'false,false,true,false': [0.0, 1, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [3.172, 21, 21]}]]
[{'': [0.2462000375304948, 0.24279102883588533], 'true': [0.24663936147868093, 0.23437499999999983], 'true,true': [0.24884532001131102, 0.23346938775510304], 'false': [0.19013128112267944, 0.24820453892559757], 'false,false': [nan, 0.24820453892559768], 'false,true': [nan, 0.19013128112268005], 'false,true,false': [0.18074792243767326, 0.2222222222222221]}, {'': [0.24565270474207185, 0.2371634194158728], 'true': [0.24570883733161641, 0.24489795918367344], 'true,false': [0.24489795918367344, nan], 'false': [nan, 0.23716341941587335], 'false,false': [0.22455386828887933, 0.24642736523188413], 'false,false,false': [0.24850990926182673, 0.24364899972790122]}, {'': [0.24309836382495345, 0.24577209636227562], 'false': [nan, 0.24577209636227562], 'false,false': [0.22137242278499422, 0.24556907430604014], 'false,false,false': [0.24493059093916175, 0.24609127836207628], 'true': [0.24554233337470116, 0.22392859745767182], 'true,false': [0.2300497940735172, 0.11655720602795638], 'true,false,false': [0.11655720602795638, nan]}, {'': [0.2370637624936184, 0.24098582480268507], 'false': [0.2368891450171762, 0.24166925869259087], 'false,false': [0.23889578601615918, 0.24294571476666346], 'false,false,false': [nan, 0.24294571476666346], 'false,true': [nan, 0.2368891450171762], 'false,true,false': [nan, 0.2368891450171762]}, {'': [0.24489042201298042, 0.227004881022878], 'false': [0.2175644721057871, 0.23947159937128557], 'false,false': [0.221238236909553, 0.24436636910785997], 'false,false,false': [0.0, 0.24556437338327405], 'false,false,true': [0.221238236909553, nan], 'false,true': [0.17369973017122722, 0.2352698434544697], 'false,true,false': [nan, 0.2352698434544698], 'false,true,true': [0.17369973017122722, nan]}, {'': [0.23558758523242482, 0.24005131973092836], 'false': [nan, 0.24005131973092836], 'false,false': [nan, 0.24005131973092836], 'false,false,false': [nan, 0.24005131973092836], 'true': [0.2448213595112298, 0.2175034845956779], 'true,false': [0.2183594346131337, 0.21486724567113064], 'true,false,false': [0.22499719273903301, 0.17177894572484514]}, {'': [0.2359593531125745, 0.231543854621804], 'true': [0.2355147166872627, 0.2301531614453996], 'false': [0.231543854621804, nan], 'true,false': [0.11882857001057841, 0.23906100801816468]}, {'': [0.24358080367412396, 0.22029322555056294], 'true': [0.24388761080245297, 0.0], 'true,true': [0.24355579677880002, 0.2465489680941008], 'false': [nan, 0.22029322555056258], 'false,false': [0.20691954877003593, 0.23967427257866744], 'false,false,false': [nan, 0.23967427257866744], 'false,false,true': [0.21010411649118332, 0.00434342529186145], 'true,false': [0.0, nan]}, {'': [0.23532231258069858, 0.2261419514945837], 'true': [0.23532231258069858, nan], 'false': [0.2261419514945837, nan], 'false,true': [0.22683003677482702, 0.22099009929263524], 'false,true,false': [0.0, 0.24183701580389602]}, {'': [0.24288531752424505, 0.21834214302870297], 'true': [0.24256576699285734, 0.24687378472755614], 'true,false': [0.24687378472755614, nan], 'true,true': [0.24520210143755544, 0.23153258474422914], 'false': [nan, 0.21834214302870297], 'false,false': [0.20413163968809994, 0.23953464785035342], 'false,false,false': [nan, 0.23953464785035342], 'false,false,true': [0.20674863821076275, 0.0]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
4;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
4;false;follows(D, A), follows(A, E).;true;true
4;false,false;follows(A, G), recursion_accounttype(G, B).;true;true
4;false,false,false;follows(I, A).;true;true
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
7;true;follows(D, C).;true;true
8;;accounttype(A, B) :- tweets(A, C).;true;true
8;false;follows(E, F), recursion_accounttype(F, B).;true;true
8;false,false;follows(G, A), follows(A, G).;true;true
9;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
9;false;follows(F, A).;true;true
9;false,true;follows(G, F), follows(F, G).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then if ( follows(D, A), tweets(D, E) )
%   | | then return 0.6717082571334108;  // std dev = 0.389, 59.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=48 */
%   | | else if ( follows(A, F), follows(F, C) )
%   | | | then return 0.20360348055405775;  // std dev = 3.527, 55.000 (wgt'ed) examples reached here.  /* #neg=36 #pos=19 */
%   | | | else return 0.5399671169176941;  // std dev = 2.185, 22.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=15 */
%   | else return -0.1418510649004878;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   else if ( follows(A, G), recursion_accounttype(G, B) )
%   | then return 0.11346808403568258;  // std dev = 0.436, 47.000 (wgt'ed) examples reached here.  /* #neg=35 #pos=12 */
%   | else if ( tweets(A, H), follows(A, I) )
%   | | then if ( follows(I, A), tweets(I, J) )
%   | | | then return 0.48972788246793336;  // std dev = 2.103, 19.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=12 */
%   | | | else return 0.35814893509951234;  // std dev = 2.121, 18.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=9 */
%   | | else if ( follows(K, A) )
%   | | | then return 0.19148226843284558;  // std dev = 1.414, 9.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=3 */
%   | | | else return 0.4735335504841277;  // std dev = 1.754, 13.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=8 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then if ( follows(A, D), follows(D, A) )
%   | | then return 0.6065873383180408;  // std dev = 0.356, 47.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=40 */
%   | | else if ( follows(A, E), follows(E, C) )
%   | | | then return 0.18965256157909677;  // std dev = 3.643, 58.000 (wgt'ed) examples reached here.  /* #neg=37 #pos=21 */
%   | | | else return 0.44962614454385375;  // std dev = 2.604, 31.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=21 */
%   | else return -0.12544463852839138;  // std dev = 5.27e-09, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   else if ( follows(A, F), recursion_accounttype(F, B) )
%   | then return 0.09908667735687045;  // std dev = 0.436, 47.000 (wgt'ed) examples reached here.  /* #neg=35 #pos=12 */
%   | else if ( follows(G, A), follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.44767117504324344;  // std dev = 2.293, 23.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=15 */
%   | | | else return -0.17494929391708944;  // std dev = 0.020, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else if ( follows(I, A) )
%   | | | then return -0.16679450876845162;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.36739737909202874;  // std dev = 2.710, 30.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=17 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then if ( tweets(D, E), follows(D, A) )
%   | | then return 0.45122227138399895;  // std dev = 0.386, 59.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=48 */
%   | | else if ( tweets(D, F), follows(G, C) )
%   | | | then return 0.18530586787362463;  // std dev = 4.113, 73.000 (wgt'ed) examples reached here.  /* #neg=43 #pos=30 */
%   | | | else return 0.719960096362504;  // std dev = 0.096, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else return -0.11231637819360638;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   else if ( follows(A, H), recursion_accounttype(H, B) )
%   | then return 0.08557551131938379;  // std dev = 0.436, 47.000 (wgt'ed) examples reached here.  /* #neg=35 #pos=12 */
%   | else if ( follows(A, I), follows(I, J) )
%   | | then if ( follows(I, A), follows(J, A) )
%   | | | then return 0.07820377917951574;  // std dev = 1.369, 8.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=3 */
%   | | | else return 0.3493660014087738;  // std dev = 2.689, 33.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=20 */
%   | | else if ( tweets(A, K), follows(A, L) )
%   | | | then return 0.316871532102888;  // std dev = 1.309, 7.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=4 */
%   | | | else return 0.20151386572061056;  // std dev = 1.586, 11.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=5 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then if ( follows(D, A), follows(A, D) )
%   | | then return 0.3686770721943357;  // std dev = 0.356, 47.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=40 */
%   | | else if ( tweets(D, E), follows(F, C) )
%   | | | then return 0.16410960119289772;  // std dev = 4.429, 85.000 (wgt'ed) examples reached here.  /* #neg=47 #pos=38 */
%   | | | else return 0.5582599686197288;  // std dev = 0.124, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else return -0.10159632948783628;  // std dev = 3.73e-09, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   else if ( follows(A, G), recursion_accounttype(G, B) )
%   | then return 0.07317232275555122;  // std dev = 0.436, 47.000 (wgt'ed) examples reached here.  /* #neg=35 #pos=12 */
%   | else if ( follows(H, A), follows(A, H) )
%   | | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | | then return 0.310605457597254;  // std dev = 2.241, 23.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=15 */
%   | | | else return -0.20153925557480037;  // std dev = 0.022, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else if ( follows(J, A) )
%   | | | then return -0.179027415952693;  // std dev = 0.018, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.2407320103698802;  // std dev = 2.708, 30.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=17 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then return 0.1566004095639903;  // std dev = 0.417, 119.000 (wgt'ed) examples reached here.  /* #neg=54 #pos=65 */
%   | else return 0.23182793254741205;  // std dev = 0.486, 27.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=17 */
%   else if ( follows(E, A), follows(A, F) )
%   | then if ( follows(A, G), recursion_accounttype(G, B) )
%   | | then return 0.035269703736741584;  // std dev = 0.420, 35.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=8 */
%   | | else if ( tweets(A, H) )
%   | | | then return 0.18992400382688632;  // std dev = 2.079, 20.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=12 */
%   | | | else return 0.1424648411847792;  // std dev = 1.116, 7.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=3 */
%   | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | then if ( tweets(A, J) )
%   | | | then return 0.2352697037367417;  // std dev = 1.309, 7.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=3 */
%   | | | else return 0.006698275165313105;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else if ( follows(K, A) )
%   | | | then return -0.1476911376118559;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | | else return 0.18583727251027315;  // std dev = 2.707, 30.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=17 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( recursion_accounttype(C, B), tweets(C, E) )
%   | | then if ( tweets(D, E), follows(C, D) )
%   | | | then return 0.16866517538921227;  // std dev = 4.445, 107.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=63 */
%   | | | else return -0.0564505374724004;  // std dev = 2.538, 54.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=10 */
%   | | else if ( tweets(A, F), follows(C, D) )
%   | | | then return 0.17935186625988747;  // std dev = 3.165, 43.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=26 */
%   | | | else return 0.32658881742378676;  // std dev = 2.148, 26.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=19 */
%   | else return -0.3789060400741637;  // std dev = 0.214, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   else return 0.040430597911111615;  // std dev = 0.458, 16.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=8 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.12066538409547271;  // std dev = 0.434, 136.000 (wgt'ed) examples reached here.  /* #neg=54 #pos=82 */
%   | else return -0.10370862256796962;  // std dev = 0.021, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   else if ( follows(E, A) )
%   | then if ( follows(F, E), follows(F, A) )
%   | | then return -0.1705608195983963;  // std dev = 0.274, 26.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=3 */
%   | | else if ( follows(G, E), recursion_accounttype(G, B) )
%   | | | then return 0.2667273181795578;  // std dev = 2.457, 30.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=19 */
%   | | | else return -0.0826000871913953;  // std dev = 0.920, 8.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then if ( follows(I, H), follows(H, I) )
%   | | | then return -0.07046812323256002;  // std dev = 0.886, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | | | else return 0.2958085403783362;  // std dev = 1.210, 6.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.06728593109887263;  // std dev = 1.975, 17.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=9 */
%   | | | else return 0.14419369136166885;  // std dev = 1.579, 13.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=8 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C) )
%   | then if ( follows(A, E), follows(E, F) )
%   | | then if ( recursion_accounttype(E, B), tweets(E, G) )
%   | | | then return 0.06523186101370315;  // std dev = 4.222, 111.000 (wgt'ed) examples reached here.  /* #neg=51 #pos=60 */
%   | | | else return 0.2173139767589065;  // std dev = 1.951, 18.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=12 */
%   | | else return 0.015093697192356936;  // std dev = 0.487, 16.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=9 */
%   | else return 0.3343382212774375;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(H, A) )
%   | then return 0.0333558080535983;  // std dev = 0.408, 64.000 (wgt'ed) examples reached here.  /* #neg=41 #pos=23 */
%   | else if ( follows(A, I), follows(I, J) )
%   | | then if ( recursion_accounttype(I, B), follows(J, I) )
%   | | | then return -0.058015584028249335;  // std dev = 0.887, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | | | else return 0.14299103688294984;  // std dev = 2.023, 16.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=10 */
%   | | else if ( follows(A, K), recursion_accounttype(K, B) )
%   | | | then return 0.004549987282380062;  // std dev = 0.879, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | else return 0.08975632740469788;  // std dev = 1.753, 16.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=9 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( tweets(A, C) )
%   then if ( follows(A, D), follows(D, E) )
%   | then if ( follows(D, A), follows(E, A) )
%   | | then if ( recursion_accounttype(E, B) )
%   | | | then return 0.08298914439619058;  // std dev = 3.833, 84.000 (wgt'ed) examples reached here.  /* #neg=34 #pos=50 */
%   | | | else return -0.12611897542542702;  // std dev = 1.742, 26.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=5 */
%   | | else if ( follows(A, E), recursion_accounttype(E, B) )
%   | | | then return 0.03263642804424107;  // std dev = 2.295, 25.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=8 */
%   | | | else return 0.14778446358299122;  // std dev = 2.444, 33.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=21 */
%   | else if ( follows(F, A) )
%   | | then if ( tweets(F, G), recursion_accounttype(F, B) )
%   | | | then return -0.017318828082394325;  // std dev = 1.898, 15.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=8 */
%   | | | else return 0.0676637904031389;  // std dev = 0.458, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | else return 0.03752759159042364;  // std dev = 0.430, 8.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=4 */
%   else if ( follows(H, I), recursion_accounttype(I, B) )
%   | then return 0.06503012181362484;  // std dev = 0.408, 58.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=29 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then return 0.041161569731800164;  // std dev = 0.404, 119.000 (wgt'ed) examples reached here.  /* #neg=54 #pos=65 */
%   | else if ( tweets(A, E) )
%   | | then if ( follows(A, F), follows(F, G) )
%   | | | then return 0.10142682190755811;  // std dev = 1.314, 8.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=5 */
%   | | | else return 0.01433491609569211;  // std dev = 1.945, 16.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=9 */
%   | | else return 0.42627803924621893;  // std dev = 0.120, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( follows(H, A) )
%   | then return 0.02349164207052408;  // std dev = 0.402, 64.000 (wgt'ed) examples reached here.  /* #neg=41 #pos=23 */
%   | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | then if ( follows(I, J), follows(J, I) )
%   | | | then return -0.05856449375437942;  // std dev = 0.892, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | | | else return 0.21525094123515567;  // std dev = 1.168, 6.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | else if ( tweets(A, K) )
%   | | | then return -0.0046625000021135255;  // std dev = 1.983, 17.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=9 */
%   | | | else return 0.06764985454550237;  // std dev = 1.573, 13.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=8 */


Results
   AUC ROC   = 0.784147
   AUC PR    = 0.75533
   CLL	      = -0.571223
   Precision = 0.714286 at threshold = 0.5
   Recall    = 0.641026
   F1        = 0.675676


Total learning time: 64.694 seconds
Total inference time: 4.04 seconds
AUC ROC: 0.784147


Results scoring model
   AUC ROC   = 0.8322
   AUC PR    = 0.80212
   CLL	      = -0.534149
   Precision = 0.775862 at threshold = 0.5
   Recall    = 0.714286
   F1        = 0.743802


Total scoring time: 4.213 seconds
Refined model CLL: -0.534149


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.784147
   AUC PR    = 0.75533
   CLL	      = -0.571223
   Precision = 0.714286 at threshold = 0.5
   Recall    = 0.641026
   F1        = 0.675676


Total learning time: 77.14399999999999 seconds
Total inference time: 4.04 seconds
AUC ROC: 0.784147
Total revision time: 77.14399999999999
Best scored revision CLL: -0.534149


Dataset: 7_yeast_twitter, Fold: 2, Type: Transfer (trRDN-B), Time: 18:14:21
{'AUC ROC': 0.784147, 'AUC PR': 0.75533, 'CLL': -0.571223, 'Precision': [0.714286, 0.5], 'Recall': 0.641026, 'F1': 0.675676, 'Learning time': 77.14399999999999, 'Inference time': 4.04, 'parameter_1.0': {'AUC ROC': 0.700752, 'AUC PR': 0.674112, 'CLL': -0.644454, 'Precision': [0.636943, 0.5], 'Recall': 0.641026, 'F1': 0.638978, 'Learning time': 5.723, 'Inference time': 2.541}}


