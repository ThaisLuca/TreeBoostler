Starting experiment #1 for 38_uwcse_cora

Loading pre-trained trees.
Starting fold 1

Target train facts examples: 7463
Target train pos examples: 368
Target train neg examples: 688

Target test facts examples: 35095
Target test pos  examples: 2649
Target test neg examples: 4334

******************************************
Performing Parameter Learning
******************************************
Refine
0;;advisedby(A, B) :- professor(B), student(A).;true;false
0;true;publication(C, B), publication(C, A).;true;true
0;true,true;tempadvisedby(D, B), ta(E, A, F).;true;false
0;true,true,true;ta(G, D, H).;false;false
0;true,false;publication(I, A).;true;true
0;true,false,true;publication(I, J), professor(J).;false;false
0;true,false,false;publication(K, B), tempadvisedby(L, B).;false;false
1;;advisedby(A, B) :- professor(B), student(A).;true;false
1;true;publication(C, A), publication(C, B).;true;true
1;true,true;tempadvisedby(D, B), ta(E, D, F).;false;true
1;true,true,false;tempadvisedby(G, B), ta(H, A, I).;false;false
1;true,false;publication(J, B), publication(K, A).;true;true
1;true,false,true;publication(K, L), professor(L).;false;false
1;true,false,false;publication(M, B).;false;false
2;;advisedby(A, B) :- professor(B), student(A).;true;false
2;true;publication(C, B), publication(C, A).;true;true
2;true,true;tempadvisedby(D, B), publication(C, D).;false;true
2;true,true,false;ta(E, A, F).;false;false
2;true,false;tempadvisedby(G, B), publication(H, A).;true;true
2;true,false,true;projectmember(I, B).;false;false
2;true,false,false;ta(J, A, K), tempadvisedby(L, B).;false;false
3;;advisedby(A, B) :- hasposition(B, C), student(A).;true;true
3;true;ta(D, A, E), publication(F, B).;true;true
3;true,true;ta(D, G, H), publication(I, G).;true;false
3;true,true,true;publication(F, G).;false;false
3;true,false;projectmember(J, B).;false;true
3;true,false,false;publication(K, B), publication(K, A).;false;false
3;false;ta(L, A, M).;false;true
3;false,false;student(B).;false;false
4;;advisedby(A, B) :- professor(B), student(A).;true;false
4;true;publication(C, B).;true;true
4;true,true;publication(C, D), inphase(D, E).;true;true
4;true,true,true;tempadvisedby(D, F), publication(C, F).;false;false
4;true,true,false;publication(G, A).;false;false
4;true,false;projectmember(H, B).;true;true
4;true,false,true;publication(I, A).;false;false
4;true,false,false;ta(J, A, K), tempadvisedby(L, B).;false;false
5;;advisedby(A, B) :- professor(B), student(A).;true;false
5;true;publication(C, B), publication(C, A).;true;true
5;true,true;tempadvisedby(D, B).;true;false
5;true,true,true;ta(E, A, F), publication(G, D).;false;false
5;true,false;publication(H, A), publication(I, B).;true;true
5;true,false,true;tempadvisedby(J, B), ta(K, J, L).;false;false
5;true,false,false;publication(M, B).;false;false
6;;advisedby(A, B) :- student(A), professor(B).;true;false
6;true;publication(C, A).;true;true
6;true,true;publication(C, D), professor(D).;true;true
6;true,true,true;tempadvisedby(E, D), publication(C, E).;false;false
6;true,true,false;ta(F, A, G).;false;false
6;true,false;ta(H, A, I), publication(J, B).;true;true
6;true,false,true;tempadvisedby(K, B), ta(H, K, L).;false;false
6;true,false,false;tempadvisedby(M, B).;false;false
7;;advisedby(A, B) :- student(A), hasposition(B, C).;true;true
7;true;publication(D, A), publication(D, B).;false;true
7;true,false;publication(E, A), publication(F, B).;true;true
7;true,false,true;tempadvisedby(G, B), ta(H, G, I).;false;false
7;true,false,false;publication(J, B), tempadvisedby(K, B).;false;false
7;false;student(B).;false;true
7;false,false;publication(L, A).;false;false
8;;advisedby(A, B) :- professor(B), student(A).;true;false
8;true;projectmember(C, B), ta(D, A, E).;false;true
8;true,false;publication(F, A), publication(F, B).;true;true
8;true,false,true;ta(G, A, H), tempadvisedby(I, B).;false;false
8;true,false,false;tempadvisedby(J, B), ta(K, A, L).;false;false
9;;advisedby(A, B) :- professor(B), student(A).;true;false
9;true;publication(C, B).;true;true
9;true,true;publication(C, D), tempadvisedby(D, B).;true;true
9;true,true,true;publication(E, A), ta(F, D, G).;false;false
9;true,true,false;publication(H, A).;false;false
9;true,false;publication(I, A), projectmember(J, B).;false;true
9;true,false,false;tempadvisedby(K, B).;false;false


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.23843062524035266;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | else if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then return 0.5248156017661788;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | | then return 0.4581489350995122;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.424815601766179;  // std dev = 2.714, 30.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=17 */
%   else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(B, K) )
%   | | then return -0.1418510649004878;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else return 0.004815601766179008;  // std dev = 0.354, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | | then return 0.004815601766179008;  // std dev = 0.354, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else return -0.14185106490048777;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.20686012285620575;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | else if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then return 0.45935396641210174;  // std dev = 0.810, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | | then return 0.3927941835770488;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.36377731048015727;  // std dev = 2.715, 30.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=17 */
%   else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | then if ( title(K, J), venue(K, A) )
%   | | then if ( samebib(K, L), venue(L, B) )
%   | | | then return 0.1488242116562869;  // std dev = 2.789, 38.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=11 */
%   | | | else return -0.14162905569876189;  // std dev = 0.023, 42.000 (wgt'ed) examples reached here.  /* #neg=42 */
%   | | else return -0.12787230110394693;  // std dev = 0.016, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else if ( haswordvenue(B, M), haswordtitle(N, M) )
%   | | then return 0.004228390109386251;  // std dev = 0.354, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else return -0.12544463852839138;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.1751801570305961;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | else if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then return 0.3733088535417444;  // std dev = 0.808, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.3332954282738762;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.2966268577074642;  // std dev = 2.715, 30.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=17 */
%   else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | then if ( title(K, J), venue(K, B) )
%   | | then if ( samebib(K, L), venue(L, A) )
%   | | | then return 0.14976876060774363;  // std dev = 2.783, 38.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=11 */
%   | | | else return -0.14148503077066796;  // std dev = 0.043, 42.000 (wgt'ed) examples reached here.  /* #neg=42 */
%   | | else return -0.13359848245519318;  // std dev = 0.038, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else if ( haswordvenue(A, M), haswordtitle(N, M) )
%   | | then return 0.004507924439813003;  // std dev = 0.346, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else return -0.11231637819360639;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.14514481334590568;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | else if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then return 0.2905331745276396;  // std dev = 0.807, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.2633171091379274;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.23437882668925694;  // std dev = 2.715, 30.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=17 */
%   else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(A, K) )
%   | | then return -0.11782635975506077;  // std dev = 0.047, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else return 0.0039346425251476835;  // std dev = 0.346, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | | then return 0.003958717519531332;  // std dev = 0.346, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else return -0.10159632948783628;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.11804668707041945;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | else if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then return 0.2426655373888218;  // std dev = 0.794, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | | then return 0.2030168244899552;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.17815733588206908;  // std dev = 2.717, 30.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=17 */
%   else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(A, K) )
%   | | then return -0.10613899675299487;  // std dev = 0.043, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else return 0.0034537792951347284;  // std dev = 0.346, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | | then return 0.00347496757165363;  // std dev = 0.346, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else return -0.09269127618926096;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.09457696812283496;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | else if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then return 0.18276879258286213;  // std dev = 0.794, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.15888477797375203;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.1342415020287841;  // std dev = 2.717, 30.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=17 */
%   else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | then return -0.029249288580713365;  // std dev = 0.328, 8.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */
%   | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | then if ( title(M, L), venue(M, B) )
%   | | | then return -0.0028148877574176757;  // std dev = 3.003, 80.000 (wgt'ed) examples reached here.  /* #neg=69 #pos=11 */
%   | | | else return -0.10078199855719006;  // std dev = 0.041, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else if ( haswordvenue(A, N), haswordtitle(P, N) )
%   | | | then return 0.006905746264301312;  // std dev = 2.848, 67.000 (wgt'ed) examples reached here.  /* #neg=57 #pos=10 */
%   | | | else return -0.08518475138839687;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.07489163449109286;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | else if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then return 0.13725310675533406;  // std dev = 0.794, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | | then return 0.12018723780055965;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.10094950277256796;  // std dev = 2.717, 30.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=17 */
%   else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(B, K) )
%   | | then return -0.09217243842830035;  // std dev = 0.041, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else return 0.002698313307183965;  // std dev = 0.346, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | | then return 0.003516003210894502;  // std dev = 0.346, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else return -0.07877675473109173;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.05877777591804268;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then return 0.09420099346503075;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | | then return 0.09015268163664261;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.07545554595136388;  // std dev = 2.610, 28.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=16 */
%   else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | then if ( title(K, J), venue(K, A) )
%   | | then if ( samebib(K, L), venue(L, B) )
%   | | | then return 0.1338082360745088;  // std dev = 2.766, 38.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=11 */
%   | | | else return -0.12527591558945742;  // std dev = 0.085, 42.000 (wgt'ed) examples reached here.  /* #neg=42 */
%   | | else return -0.094674463630454;  // std dev = 0.046, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else if ( haswordvenue(B, M), haswordtitle(N, M) )
%   | | then return 0.0030853428488761244;  // std dev = 0.346, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else return -0.07324622576333704;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.04582386394015474;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | else if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then return 0.0869206786370685;  // std dev = 0.793, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.0706841473309947;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.05546640533740496;  // std dev = 2.717, 30.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=17 */
%   else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | then return -0.036652622771195985;  // std dev = 0.326, 8.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */
%   | else if ( haswordvenue(A, K), haswordauthor(L, K) )
%   | | then return -0.02980161018835547;  // std dev = 0.328, 8.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */
%   | | else if ( haswordvenue(A, M), haswordtitle(N, M) )
%   | | | then return -0.008087315679671843;  // std dev = 2.805, 79.000 (wgt'ed) examples reached here.  /* #neg=69 #pos=10 */
%   | | | else return 0.002361915165130332;  // std dev = 2.851, 71.000 (wgt'ed) examples reached here.  /* #neg=61 #pos=10 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.03554750876544446;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | else if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then return 0.06596818353274758;  // std dev = 0.794, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | | then return 0.0538781239809917;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.04150964612401585;  // std dev = 2.717, 30.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=17 */
%   else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | then return -0.031776513584859334;  // std dev = 0.326, 8.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */
%   | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | then if ( haswordtitle(L, M), haswordvenue(A, M) )
%   | | | then return -0.08299099188375537;  // std dev = 0.052, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | | else return 0.002859830908282101;  // std dev = 2.995, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else if ( haswordvenue(A, N), haswordtitle(P, N) )
%   | | | then return 0.006422302115240232;  // std dev = 2.791, 67.000 (wgt'ed) examples reached here.  /* #neg=57 #pos=10 */
%   | | | else return -0.06857769103828362;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */


Results
   AUC ROC   = 0.557426
   AUC PR    = 0.428426
   CLL	      = -0.653353
   Precision = 0.637427 at threshold = 0.5
   Recall    = 0.041148
   F1        = 0.077305


Total learning time: 58.02540326118469 seconds
Total inference time: 7.657 seconds
AUC ROC: 0.557426


Results scoring model
   AUC ROC   = 0.591874
   AUC PR    = 0.419752
   CLL	      = -0.617666
   Precision = 0.578947 at threshold = 0.5
   Recall    = 0.059783
   F1        = 0.108374


Total scoring time: 1.129 seconds
Parameter learned model CLL: -0.617666


Structure after Parameter Learning
[['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(B, E), haswordauthor(F, E)', 'true,false,false': 'haswordvenue(A, G), haswordtitle(H, G)', 'false': 'haswordvenue(A, I), haswordtitle(J, I)', 'false,true': 'haswordtitle(J, K), haswordvenue(B, K)', 'false,false': 'haswordvenue(B, L), haswordtitle(M, L)'}, {'true,true': [0.485, 528, 324], 'true,false,true': [0.816, 1, 2], 'true,false,false,true': [1.095, 2, 3], 'true,false,false,false': [2.714, 13, 17], 'false,true,true': [0.0, 12, 0], 'false,true,false': [0.354, 64, 11], 'false,false,true': [0.354, 64, 11], 'false,false,false': [0.0, 4, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(A, E), haswordauthor(F, E)', 'true,false,false': 'haswordvenue(A, G), haswordtitle(H, G)', 'false': 'haswordvenue(A, I), haswordtitle(J, I)', 'false,true': 'title(K, J), venue(K, A)', 'false,true,true': 'samebib(K, L), venue(L, B)', 'false,false': 'haswordvenue(B, M), haswordtitle(N, M)'}, {'true,true': [0.485, 528, 324], 'true,false,true': [0.81, 1, 2], 'true,false,false,true': [1.095, 2, 3], 'true,false,false,false': [2.715, 13, 17], 'false,true,true,true': [2.789, 27, 11], 'false,true,true,false': [0.023, 42, 0], 'false,true,false': [0.016, 7, 0], 'false,false,true': [0.354, 64, 11], 'false,false,false': [0.0, 4, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(B, E), haswordauthor(F, E)', 'true,false,false': 'haswordvenue(B, G), haswordtitle(H, G)', 'false': 'haswordvenue(B, I), haswordtitle(J, I)', 'false,true': 'title(K, J), venue(K, B)', 'false,true,true': 'samebib(K, L), venue(L, A)', 'false,false': 'haswordvenue(A, M), haswordtitle(N, M)'}, {'true,true': [0.485, 528, 324], 'true,false,true': [0.808, 1, 2], 'true,false,false,true': [1.095, 2, 3], 'true,false,false,false': [2.715, 13, 17], 'false,true,true,true': [2.783, 27, 11], 'false,true,true,false': [0.043, 42, 0], 'false,true,false': [0.038, 7, 0], 'false,false,true': [0.346, 64, 11], 'false,false,false': [0.0, 4, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(B, E), haswordauthor(F, E)', 'true,false,false': 'haswordvenue(B, G), haswordtitle(H, G)', 'false': 'haswordvenue(B, I), haswordtitle(J, I)', 'false,true': 'haswordtitle(J, K), haswordvenue(A, K)', 'false,false': 'haswordvenue(A, L), haswordtitle(M, L)'}, {'true,true': [0.485, 528, 324], 'true,false,true': [0.807, 1, 2], 'true,false,false,true': [1.095, 2, 3], 'true,false,false,false': [2.715, 13, 17], 'false,true,true': [0.047, 12, 0], 'false,true,false': [0.346, 64, 11], 'false,false,true': [0.346, 64, 11], 'false,false,false': [0.0, 4, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(A, E), haswordauthor(F, E)', 'true,false,false': 'haswordvenue(A, G), haswordtitle(H, G)', 'false': 'haswordvenue(B, I), haswordtitle(J, I)', 'false,true': 'haswordtitle(J, K), haswordvenue(A, K)', 'false,false': 'haswordvenue(A, L), haswordtitle(M, L)'}, {'true,true': [0.485, 528, 324], 'true,false,true': [0.794, 1, 2], 'true,false,false,true': [1.095, 2, 3], 'true,false,false,false': [2.717, 13, 17], 'false,true,true': [0.043, 12, 0], 'false,true,false': [0.346, 64, 11], 'false,false,true': [0.346, 64, 11], 'false,false,false': [0.0, 4, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(A, E), haswordauthor(F, E)', 'true,false,false': 'haswordvenue(B, G), haswordtitle(H, G)', 'false': 'haswordvenue(B, I), haswordauthor(J, I)', 'false,false': 'haswordvenue(B, K), haswordtitle(L, K)', 'false,false,true': 'title(M, L), venue(M, B)', 'false,false,false': 'haswordvenue(A, N), haswordtitle(P, N)'}, {'true,true': [0.485, 528, 324], 'true,false,true': [0.794, 1, 2], 'true,false,false,true': [1.095, 2, 3], 'true,false,false,false': [2.717, 13, 17], 'false,true': [0.328, 7, 1], 'false,false,true,true': [3.003, 69, 11], 'false,false,true,false': [0.041, 7, 0], 'false,false,false,true': [2.848, 57, 10], 'false,false,false,false': [0.0, 4, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(A, E), haswordauthor(F, E)', 'true,false,false': 'haswordvenue(A, G), haswordtitle(H, G)', 'false': 'haswordvenue(A, I), haswordtitle(J, I)', 'false,true': 'haswordtitle(J, K), haswordvenue(B, K)', 'false,false': 'haswordvenue(B, L), haswordtitle(M, L)'}, {'true,true': [0.485, 528, 324], 'true,false,true': [0.794, 1, 2], 'true,false,false,true': [1.095, 2, 3], 'true,false,false,false': [2.717, 13, 17], 'false,true,true': [0.041, 12, 0], 'false,true,false': [0.346, 64, 11], 'false,false,true': [0.346, 64, 11], 'false,false,false': [0.0, 4, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(B, E), haswordtitle(F, E)', 'true,false,false': 'haswordvenue(A, G), haswordtitle(H, G)', 'false': 'haswordvenue(A, I), haswordtitle(J, I)', 'false,true': 'title(K, J), venue(K, A)', 'false,true,true': 'samebib(K, L), venue(L, B)', 'false,false': 'haswordvenue(B, M), haswordtitle(N, M)'}, {'true,true': [0.485, 528, 324], 'true,false,true': [1.095, 2, 3], 'true,false,false,true': [1.095, 2, 3], 'true,false,false,false': [2.61, 12, 16], 'false,true,true,true': [2.766, 27, 11], 'false,true,true,false': [0.085, 42, 0], 'false,true,false': [0.046, 7, 0], 'false,false,true': [0.346, 64, 11], 'false,false,false': [0.0, 4, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(B, E), haswordauthor(F, E)', 'true,false,false': 'haswordvenue(B, G), haswordtitle(H, G)', 'false': 'haswordvenue(B, I), haswordauthor(J, I)', 'false,false': 'haswordvenue(A, K), haswordauthor(L, K)', 'false,false,false': 'haswordvenue(A, M), haswordtitle(N, M)'}, {'true,true': [0.485, 528, 324], 'true,false,true': [0.793, 1, 2], 'true,false,false,true': [1.095, 2, 3], 'true,false,false,false': [2.717, 13, 17], 'false,true': [0.326, 7, 1], 'false,false,true': [0.328, 7, 1], 'false,false,false,true': [2.805, 69, 10], 'false,false,false,false': [2.851, 61, 10]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(B, E), haswordauthor(F, E)', 'true,false,false': 'haswordvenue(A, G), haswordtitle(H, G)', 'false': 'haswordvenue(B, I), haswordauthor(J, I)', 'false,false': 'haswordvenue(B, K), haswordtitle(L, K)', 'false,false,true': 'haswordtitle(L, M), haswordvenue(A, M)', 'false,false,false': 'haswordvenue(A, N), haswordtitle(P, N)'}, {'true,true': [0.485, 528, 324], 'true,false,true': [0.794, 1, 2], 'true,false,false,true': [1.095, 2, 3], 'true,false,false,false': [2.717, 13, 17], 'false,true': [0.326, 7, 1], 'false,false,true,true': [0.052, 12, 0], 'false,false,true,false': [2.995, 64, 11], 'false,false,false,true': [2.791, 57, 10], 'false,false,false,false': [0.0, 4, 0]}]]
[{'': [0.23762656230272572, 0.11496588764697444], 'true': [0.2356675262844691, 0.24376731301939172], 'true,false': [0.22222222222222224, 0.2448979591836734], 'true,false,false': [0.23999999999999994, 0.2455555555555551], 'false': [0.1104505218655035, 0.11985258772632539], 'false,false': [0.12515555555555502, 0.0], 'false,true': [-1.1564823173178714e-17, 0.12515555555555502]}, {'': [0.2371606616282308, 0.11455688633284844], 'true': [0.2356675262844735, 0.243529026415323], 'true,false': [0.21859724583033524, 0.2450060599606714], 'true,false,false': [0.24, 0.24572012058397555], 'false': [0.10989213699570438, 0.1196268538653256], 'false,false': [0.125155555555556, 0.0], 'false,true': [0.11826329058716308, 3.536127348451641e-05], 'false,true,true': [0.20467024545790047, 1.3096767957214494e-05]}, {'': [0.23670562699489206, 0.112007925399031], 'true': [0.23566752628446727, 0.24321855620341246], 'true,false': [0.21788000733146848, 0.2449874692892416], 'true,false,false': [0.23999999999999994, 0.24562663073258423], 'false': [0.1098029509778292, 0.1143578111986426], 'false,false': [0.11976586065569501, 0.0], 'false,true': [0.11802298805418568, 0.0002095079382072417], 'false,true,true': [0.20388654248514937, 4.324877625808529e-05]}, {'': [0.23636701212875486, 0.10942475837381226], 'true': [0.23566752628446358, 0.24295453706206263], 'true,false': [0.21733255764871232, 0.24493706627412684], 'true,false,false': [0.24000000000000005, 0.24564027862585117], 'false': [0.10500611231737597, 0.11422186192353923], 'false,false': [0.11974954934686752, 0.0], 'false,true': [0.0001871028954361804, 0.11973222393850279]}, {'': [0.23616380583628732, 0.10918423356002242], 'true': [0.235667526284474, 0.24280236758963694], 'true,false': [0.21025548302990496, 0.24529875288822497], 'true,false,false': [0.24, 0.24609359348761772], 'false': [0.10465468821421929, 0.1141172078451467], 'false,false': [0.11973520847760942, 0.0], 'false,true': [0.00015548797119565214, 0.11971792900318097]}, {'': [0.2360547730986134, 0.10900163713688904], 'true': [0.23566752628446164, 0.24264606650792886], 'true,false': [0.21005460196217673, 0.24527970371102503], 'true,false,false': [0.24000000000000005, 0.2460728984653434], 'false': [0.10737257418635811, 0.10905605887068213], 'false,false': [0.10439019809387824, 0.11468851303083978], 'false,false,false': [0.12105780478733244, 0.0], 'false,false,true': [0.1127314334464947, 0.00023645631826998772]}, {'': [0.23600224352294738, 0.10889069473781601], 'true': [0.23566752628447166, 0.2425597706480384], 'true,false': [0.21012260842154648, 0.245251207108003], 'true,false,false': [0.24000000000000005, 0.24607353822852632], 'false': [0.10425514913383287, 0.11394597773423834], 'false,false': [0.11968020550826527, 0.0], 'false,true': [0.00013972003187931575, 0.11967217509568252]}, {'': [0.23597826571414135, 0.10876545423046964], 'true': [0.23566752628446394, 0.24252005364878182], 'true,false': [0.24, 0.2428659767439649], 'true,false,false': [0.23999999999999994, 0.24334503015427342], 'false': [0.1040762173992995, 0.1138883069997723], 'false,false': [0.11966733695789687, 0.0], 'false,true': [0.11246839375125764, 0.00030401898337287437], 'false,true,true': [0.2013465619480308, 0.00017062912116389524]}, {'': [0.23596767524312665, 0.10674770341681325], 'true': [0.23566752628446355, 0.2425062498015861], 'true,false': [0.209849155654245, 0.24523774483443495], 'true,false,false': [0.24, 0.24607761949664303], 'false': [0.10602817462015145, 0.10673428682184717], 'false,false': [0.10736269905693742, 0.10666478316519622], 'false,false,false': [0.09960197967603196, 0.11446589064757863]}, {'': [0.235962222330888, 0.10674890231451159], 'true': [0.23566752628447613, 0.24248284789054594], 'true,false': [0.21004927050758568, 0.24522221807841288], 'true,false,false': [0.24, 0.24607073358036294], 'false': [0.10609348902311574, 0.10674479384152517], 'false,false': [0.10403146097001889, 0.1100007741636776], 'false,false,false': [0.11625108321091591, 0.0], 'false,false,true': [0.00022157662309247225, 0.11962444056565538]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;false;haswordvenue(A, I), haswordtitle(J, I).;true;true
0;false,true;haswordtitle(J, K), haswordvenue(B, K).;true;true
0;false,false;haswordvenue(B, L), haswordtitle(M, L).;true;true
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;false;haswordvenue(A, I), haswordtitle(J, I).;true;true
1;false,true;title(K, J), venue(K, A).;true;true
1;false,true,true;samebib(K, L), venue(L, B).;true;true
1;false,false;haswordvenue(B, M), haswordtitle(N, M).;true;true
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;false;haswordvenue(B, I), haswordtitle(J, I).;true;true
2;false,true;title(K, J), venue(K, B).;true;true
2;false,true,true;samebib(K, L), venue(L, A).;true;true
2;false,false;haswordvenue(A, M), haswordtitle(N, M).;true;true
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;false;haswordvenue(B, I), haswordtitle(J, I).;true;true
3;false,true;haswordtitle(J, K), haswordvenue(A, K).;true;true
3;false,false;haswordvenue(A, L), haswordtitle(M, L).;true;true
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;false;haswordvenue(B, I), haswordtitle(J, I).;true;true
4;false,true;haswordtitle(J, K), haswordvenue(A, K).;true;true
4;false,false;haswordvenue(A, L), haswordtitle(M, L).;true;true
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;false;haswordvenue(B, I), haswordauthor(J, I).;true;true
5;false,false;haswordvenue(B, K), haswordtitle(L, K).;true;true
5;false,false,true;title(M, L), venue(M, B).;true;true
5;false,false,false;haswordvenue(A, N), haswordtitle(P, N).;true;true
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;false;haswordvenue(A, I), haswordtitle(J, I).;true;true
6;false,true;haswordtitle(J, K), haswordvenue(B, K).;true;true
6;false,false;haswordvenue(B, L), haswordtitle(M, L).;true;true
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;false;haswordvenue(A, I), haswordtitle(J, I).;true;true
7;false,true;title(K, J), venue(K, A).;true;true
7;false,true,true;samebib(K, L), venue(L, B).;true;true
7;false,false;haswordvenue(B, M), haswordtitle(N, M).;true;true
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;false;haswordvenue(B, I), haswordauthor(J, I).;true;true
9;false,false;haswordvenue(B, K), haswordtitle(L, K).;true;true
9;false,false,true;haswordtitle(L, M), haswordvenue(A, M).;true;true
9;false,false,false;haswordvenue(A, N), haswordtitle(P, N).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.23843062524035266;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | else if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then return 0.5248156017661788;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | | then return 0.4581489350995122;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.424815601766179;  // std dev = 2.714, 30.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=17 */
%   else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(B, K) )
%   | | then return -0.1418510649004878;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else return 0.004815601766179008;  // std dev = 0.354, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | | then return 0.004815601766179008;  // std dev = 0.354, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else return -0.14185106490048777;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.20686012285620575;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | else if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then return 0.45935396641210174;  // std dev = 0.810, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.3982164798305049;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.36287359443791467;  // std dev = 2.715, 30.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=17 */
%   else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(B, K) )
%   | | then return -0.12544463852839138;  // std dev = 5.27e-09, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else return 0.004228390109386251;  // std dev = 0.354, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | | then return 0.004228390109386251;  // std dev = 0.354, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else return -0.12544463852839138;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.1751801570305961;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | else if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then return 0.37391135762433364;  // std dev = 0.808, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | | then return 0.3269052770205085;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.2976445171077738;  // std dev = 2.715, 30.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=17 */
%   else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(B, K) )
%   | | then return -0.11231637819360636;  // std dev = 9.13e-09, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else return 0.0037111125833978686;  // std dev = 0.354, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | | then return 0.0037111125833978686;  // std dev = 0.354, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else return -0.11231637819360639;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.14514481334590568;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | else if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then return 0.29107789104287257;  // std dev = 0.807, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.26358767085800217;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.23427726647373656;  // std dev = 2.715, 30.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=17 */
%   else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(B, K) )
%   | | then return -0.1015963294878363;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else return 0.0032558270569705674;  // std dev = 0.354, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | | then return 0.0032558270569705674;  // std dev = 0.354, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else return -0.10159632948783628;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.11804668707041945;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then return 0.20295547503731384;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.20246239867675433;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.1807376326131477;  // std dev = 2.612, 28.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=16 */
%   else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(B, K) )
%   | | then return -0.09269127618926097;  // std dev = 5.27e-09, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else return 0.0028554031467501392;  // std dev = 0.354, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | | then return 0.0028554031467501392;  // std dev = 0.354, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else return -0.09269127618926096;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.09457696812283496;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | else if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then return 0.19734062040573988;  // std dev = 0.794, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | | then return 0.15350422607609474;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.13369469701530526;  // std dev = 2.717, 30.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=17 */
%   else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | then if ( title(K, J), venue(K, A) )
%   | | then if ( samebib(K, L), venue(L, B) )
%   | | | then return 0.15151873674305016;  // std dev = 2.773, 38.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=11 */
%   | | | else return -0.14135470799918157;  // std dev = 0.081, 42.000 (wgt'ed) examples reached here.  /* #neg=42 */
%   | | else return -0.09361024488001457;  // std dev = 0.055, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else if ( haswordvenue(B, M), haswordtitle(N, M) )
%   | | then return 0.002503460836945874;  // std dev = 0.354, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else return -0.08518475138839687;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.07489163449109286;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | else if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then return 0.13721635581445576;  // std dev = 0.800, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.11988416632413071;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.10099557465586845;  // std dev = 2.716, 30.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=17 */
%   else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(A, K) )
%   | | then return -0.08413588432950221;  // std dev = 0.034, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else return 0.0021943081594878503;  // std dev = 0.354, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | | then return 0.0025547559874408267;  // std dev = 0.346, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else return -0.07877675473109173;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordtitle(F, C) )
%   | | then return -0.12150391422280449;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else return 0.12019318259144585;  // std dev = 0.791, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else if ( haswordtitle(G, C) )
%   | | then return 0.05984201257766986;  // std dev = 0.486, 847.000 (wgt'ed) examples reached here.  /* #neg=524 #pos=323 */
%   | | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | | then return 0.09008621225117124;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.07409841009945965;  // std dev = 2.718, 30.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=17 */
%   else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | then if ( title(L, K), venue(L, B) )
%   | | then return -0.0018117025145237484;  // std dev = 0.343, 80.000 (wgt'ed) examples reached here.  /* #neg=69 #pos=11 */
%   | | else return -0.09220540463135439;  // std dev = 0.062, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else if ( haswordvenue(A, M), haswordtitle(N, M) )
%   | | then return 0.0022401878042661166;  // std dev = 0.346, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else return -0.07324622576333704;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.045816398181049725;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | else if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then return 0.09071711110519502;  // std dev = 0.792, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.07143016857152787;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.05496370191701808;  // std dev = 2.718, 30.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=17 */
%   else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | then return -0.030435655651264742;  // std dev = 0.328, 8.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */
%   | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | then if ( haswordtitle(L, M), haswordvenue(A, M) )
%   | | | then return -0.07443251943508777;  // std dev = 0.024, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | | else return 0.00229128685080323;  // std dev = 3.063, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else if ( haswordvenue(A, N), haswordtitle(P, N) )
%   | | | then return 0.005832486103627062;  // std dev = 2.847, 67.000 (wgt'ed) examples reached here.  /* #neg=57 #pos=10 */
%   | | | else return -0.06842697784420272;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.03554203749134577;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | else if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then return 0.06880908145258886;  // std dev = 0.792, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.053674713442502096;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.04126188377483617;  // std dev = 2.717, 30.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=17 */
%   else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | then if ( title(K, J), venue(K, A) )
%   | | then if ( samebib(K, L), venue(L, B) )
%   | | | then return 0.13412911406932945;  // std dev = 2.763, 38.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=11 */
%   | | | else return -0.12526723591220973;  // std dev = 0.096, 42.000 (wgt'ed) examples reached here.  /* #neg=42 */
%   | | else return -0.0769161878853262;  // std dev = 0.062, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else if ( haswordvenue(B, M), haswordtitle(N, M) )
%   | | then return 0.0020080144360597823;  // std dev = 0.354, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else return -0.0641918400820262;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */


Results
   AUC ROC   = 0.55687
   AUC PR    = 0.428233
   CLL	      = -0.655973
   Precision = 0.637427 at threshold = 0.5
   Recall    = 0.041148
   F1        = 0.077305


Total learning time: 60.4740788936615 seconds
Total inference time: 7.536 seconds
AUC ROC: 0.55687


Results scoring model
   AUC ROC   = 0.592458
   AUC PR    = 0.42035
   CLL	      = -0.619001
   Precision = 0.578947 at threshold = 0.5
   Recall    = 0.059783
   F1        = 0.108374


Total scoring time: 1.226 seconds
Refined model CLL: -0.619001


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.557426
   AUC PR    = 0.428426
   CLL	      = -0.653353
   Precision = 0.637427 at threshold = 0.5
   Recall    = 0.041148
   F1        = 0.077305


Total learning time: 120.85448215484618 seconds
Total inference time: 7.657 seconds
AUC ROC: 0.557426
Total revision time: 120.85448215484618
Best scored revision CLL: -0.617666


Dataset: 38_uwcse_cora, Fold: 1, Type: Transfer (trRDN-B), Time: 00:02:16
{'AUC ROC': 0.557426, 'AUC PR': 0.428426, 'CLL': -0.653353, 'Precision': [0.637427, 0.5], 'Recall': 0.041148, 'F1': 0.077305, 'Learning time': 120.85448215484618, 'Inference time': 7.657, 'parameter': {'AUC ROC': 0.557426, 'AUC PR': 0.428426, 'CLL': -0.653353, 'Precision': [0.637427, 0.5], 'Recall': 0.041148, 'F1': 0.077305, 'Learning time': 58.02540326118469, 'Inference time': 7.657}}


Starting fold 2

Target train facts examples: 9016
Target train pos examples: 771
Target train neg examples: 544

Target test facts examples: 33542
Target test pos  examples: 2246
Target test neg examples: 4478

******************************************
Performing Parameter Learning
******************************************
Refine
0;;advisedby(A, B) :- professor(B), student(A).;true;false
0;true;publication(C, B), publication(C, A).;true;true
0;true,true;tempadvisedby(D, B), ta(E, A, F).;true;false
0;true,true,true;ta(G, D, H).;false;false
0;true,false;publication(I, A).;true;true
0;true,false,true;publication(I, J), professor(J).;false;false
0;true,false,false;publication(K, B), tempadvisedby(L, B).;false;false
1;;advisedby(A, B) :- professor(B), student(A).;true;false
1;true;publication(C, A), publication(C, B).;true;true
1;true,true;tempadvisedby(D, B), ta(E, D, F).;false;true
1;true,true,false;tempadvisedby(G, B), ta(H, A, I).;false;false
1;true,false;publication(J, B), publication(K, A).;true;true
1;true,false,true;publication(K, L), professor(L).;false;false
1;true,false,false;publication(M, B).;false;false
2;;advisedby(A, B) :- professor(B), student(A).;true;false
2;true;publication(C, B), publication(C, A).;true;true
2;true,true;tempadvisedby(D, B), publication(C, D).;false;true
2;true,true,false;ta(E, A, F).;false;false
2;true,false;tempadvisedby(G, B), publication(H, A).;true;true
2;true,false,true;projectmember(I, B).;false;false
2;true,false,false;ta(J, A, K), tempadvisedby(L, B).;false;false
3;;advisedby(A, B) :- hasposition(B, C), student(A).;true;true
3;true;ta(D, A, E), publication(F, B).;true;true
3;true,true;ta(D, G, H), publication(I, G).;true;false
3;true,true,true;publication(F, G).;false;false
3;true,false;projectmember(J, B).;false;true
3;true,false,false;publication(K, B), publication(K, A).;false;false
3;false;ta(L, A, M).;false;true
3;false,false;student(B).;false;false
4;;advisedby(A, B) :- professor(B), student(A).;true;false
4;true;publication(C, B).;true;true
4;true,true;publication(C, D), inphase(D, E).;true;true
4;true,true,true;tempadvisedby(D, F), publication(C, F).;false;false
4;true,true,false;publication(G, A).;false;false
4;true,false;projectmember(H, B).;true;true
4;true,false,true;publication(I, A).;false;false
4;true,false,false;ta(J, A, K), tempadvisedby(L, B).;false;false
5;;advisedby(A, B) :- professor(B), student(A).;true;false
5;true;publication(C, B), publication(C, A).;true;true
5;true,true;tempadvisedby(D, B).;true;false
5;true,true,true;ta(E, A, F), publication(G, D).;false;false
5;true,false;publication(H, A), publication(I, B).;true;true
5;true,false,true;tempadvisedby(J, B), ta(K, J, L).;false;false
5;true,false,false;publication(M, B).;false;false
6;;advisedby(A, B) :- student(A), professor(B).;true;false
6;true;publication(C, A).;true;true
6;true,true;publication(C, D), professor(D).;true;true
6;true,true,true;tempadvisedby(E, D), publication(C, E).;false;false
6;true,true,false;ta(F, A, G).;false;false
6;true,false;ta(H, A, I), publication(J, B).;true;true
6;true,false,true;tempadvisedby(K, B), ta(H, K, L).;false;false
6;true,false,false;tempadvisedby(M, B).;false;false
7;;advisedby(A, B) :- student(A), hasposition(B, C).;true;true
7;true;publication(D, A), publication(D, B).;false;true
7;true,false;publication(E, A), publication(F, B).;true;true
7;true,false,true;tempadvisedby(G, B), ta(H, G, I).;false;false
7;true,false,false;publication(J, B), tempadvisedby(K, B).;false;false
7;false;student(B).;false;true
7;false,false;publication(L, A).;false;false
8;;advisedby(A, B) :- professor(B), student(A).;true;false
8;true;projectmember(C, B), ta(D, A, E).;false;true
8;true,false;publication(F, A), publication(F, B).;true;true
8;true,false,true;ta(G, A, H), tempadvisedby(I, B).;false;false
8;true,false,false;tempadvisedby(J, B), ta(K, A, L).;false;false
9;;advisedby(A, B) :- professor(B), student(A).;true;false
9;true;publication(C, B).;true;true
9;true,true;publication(C, D), tempadvisedby(D, B).;true;true
9;true,true,true;publication(E, A), ta(F, D, G).;false;false
9;true,true,false;publication(H, A).;false;false
9;true,false;publication(I, A), projectmember(J, B).;false;true
9;true,false,false;tempadvisedby(K, B).;false;false


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.4356367001892301;  // std dev = 0.494, 1,226.000 (wgt'ed) examples reached here.  /* #neg=518 #pos=708 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then return 0.5949910403626703;  // std dev = 0.440, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.5640312880406888;  // std dev = 1.879, 17.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=12 */
%   | | | else return 0.8581489350995122;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(B, K) )
%   | | then return 0.8581489350995122;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.2867203636709409;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | else return 0.2867203636709409;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.37395569825543723;  // std dev = 0.494, 1,226.000 (wgt'ed) examples reached here.  /* #neg=518 #pos=708 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then return 0.5062567560764839;  // std dev = 0.440, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.48074388375574334;  // std dev = 1.879, 17.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=12 */
%   | | | else return 0.7194734122109545;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(B, K) )
%   | | then return 0.7194734122109543;  // std dev = 7.30e-08, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.24811816884741297;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | else return 0.24811816884741297;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.30665618885999163;  // std dev = 0.494, 1,226.000 (wgt'ed) examples reached here.  /* #neg=518 #pos=708 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then return 0.4047531668618019;  // std dev = 0.440, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.386198448632422;  // std dev = 1.879, 17.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=12 */
%   | | | else return 0.5553664367462845;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(B, K) )
%   | | then return 0.5553664367462846;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.20848477447886868;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | else return 0.20848477447886868;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.24206322397592006;  // std dev = 0.494, 1,226.000 (wgt'ed) examples reached here.  /* #neg=518 #pos=708 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then return 0.3261448737160187;  // std dev = 0.439, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | | then return 0.2788572331674748;  // std dev = 1.879, 17.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=12 */
%   | | | else return 0.4175135841583099;  // std dev = 1.49e-08, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(B, K) )
%   | | then return 0.41751358415830986;  // std dev = 5.16e-08, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.17062637354018512;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | else return 0.17062637354018512;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordauthor(D, C) )
%   then if ( haswordtitle(E, C) )
%   | then return 0.4586612187245652;  // std dev = 0.357, 20.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=17 */
%   | else if ( haswordvenue(B, C) )
%   | | then return 0.10866121872456526;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else if ( author(F, D), venue(F, B) )
%   | | | then return -0.11648547966105265;  // std dev = 0.841, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | else return -0.19133878127543472;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   else if ( haswordvenue(A, G), haswordvenue(B, G) )
%   | then if ( haswordtitle(H, G) )
%   | | then return 0.18403810314669028;  // std dev = 0.494, 1,194.000 (wgt'ed) examples reached here.  /* #neg=507 #pos=687 */
%   | | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | | then return 0.24558668125641064;  // std dev = 1.914, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | | else return 0.23490503051382786;  // std dev = 1.891, 22.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=17 */
%   | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | then return 0.26118801425970334;  // std dev = 0.321, 33.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=26 */
%   | | else return 0.13664585375352212;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.1410318005492892;  // std dev = 0.493, 1,226.000 (wgt'ed) examples reached here.  /* #neg=518 #pos=708 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then return 0.1843926491048414;  // std dev = 0.439, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | | then return 0.15116160134657963;  // std dev = 1.879, 17.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=12 */
%   | | | else return 0.2718201561947905;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(A, K) )
%   | | then return 0.26664917052066356;  // std dev = 2.58e-08, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.10762034996184425;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | else return 0.08562597039058929;  // std dev = 0.490, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.10610559718238302;  // std dev = 0.493, 1,226.000 (wgt'ed) examples reached here.  /* #neg=518 #pos=708 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then return 0.14286117219398245;  // std dev = 0.439, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.11029848809583002;  // std dev = 1.879, 17.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=12 */
%   | | | else return 0.22145152238219926;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(A, K) )
%   | | then return 0.21783300094806574;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.08372807955323866;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | else return 0.06611884415675119;  // std dev = 0.490, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordtitle(F, D) )
%   | | then return 0.34921441755900956;  // std dev = 0.356, 20.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=17 */
%   | | else if ( haswordvenue(A, D) )
%   | | | then return 0.02145920260937316;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return -0.24737185224418823;  // std dev = 1.225, 8.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | else if ( haswordtitle(G, C) )
%   | | then return 0.07749383948732146;  // std dev = 0.493, 1,194.000 (wgt'ed) examples reached here.  /* #neg=507 #pos=687 */
%   | | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | | then return 0.11236863332413517;  // std dev = 1.913, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | | else return 0.10415200997764608;  // std dev = 1.890, 22.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=17 */
%   else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordvenue(A, L) )
%   | | then return 0.18299706781972397;  // std dev = 2.11e-08, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.06457405393631672;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | else return 0.05073647902347161;  // std dev = 0.490, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.059747449683581665;  // std dev = 0.492, 1,226.000 (wgt'ed) examples reached here.  /* #neg=518 #pos=708 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then return 0.08641417488393481;  // std dev = 0.439, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | | then return 0.056132916827479847;  // std dev = 1.879, 17.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=12 */
%   | | | else return 0.17039490463436613;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(A, K) )
%   | | then return 0.1572054559621971;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.04949778322519479;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | else return 0.03876238412070362;  // std dev = 0.490, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordauthor(D, C) )
%   then if ( haswordtitle(E, C) )
%   | then return 0.24782870001815865;  // std dev = 0.356, 20.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=17 */
%   | else if ( haswordvenue(B, C) )
%   | | then return 0.0011707278530782572;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else if ( author(F, D), venue(F, B) )
%   | | | then return -0.1720866658461499;  // std dev = 0.834, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | else return -0.23815623062917152;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   else if ( haswordvenue(A, G), haswordvenue(B, G) )
%   | then if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | then if ( haswordtitle(J, H) )
%   | | | then return 0.24379026131843062;  // std dev = 1.589, 19.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=16 */
%   | | | else return -0.20062714636405132;  // std dev = 1.225, 8.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | | else if ( haswordtitle(K, G) )
%   | | | then return 0.04162496481465047;  // std dev = 16.896, 1,167.000 (wgt'ed) examples reached here.  /* #neg=498 #pos=669 */
%   | | | else return 0.06709322319323162;  // std dev = 2.689, 41.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=31 */
%   | else return 0.08532373449468163;  // std dev = 0.379, 47.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=32 */


Results
   AUC ROC   = 0.5373
   AUC PR    = 0.344283
   CLL	      = -0.756091
   Precision = 0.353813 at threshold = 0.5
   Recall    = 0.956367
   F1        = 0.516532


Total learning time: 56.05774998664856 seconds
Total inference time: 6.551 seconds
AUC ROC: 0.5373


Results scoring model
   AUC ROC   = 0.553485
   AUC PR    = 0.660729
   CLL	      = -0.665489
   Precision = 0.594317 at threshold = 0.5
   Recall    = 0.976654
   F1        = 0.73896


Total scoring time: 1.055 seconds
Parameter learned model CLL: -0.665489


Structure after Parameter Learning
[['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(A, E), haswordtitle(F, E)', 'true,false,false': 'haswordvenue(B, G), haswordtitle(H, G)', 'false': 'haswordvenue(A, I), haswordtitle(J, I)', 'false,true': 'haswordtitle(J, K), haswordvenue(B, K)'}, {'true,true': [0.494, 518, 708], 'true,false,true': [0.44, 5, 14], 'true,false,false,true': [1.879, 5, 12], 'true,false,false,false': [0.0, 0, 5], 'false,true,true': [0.0, 0, 20], 'false,true,false': [0.495, 8, 6], 'false,false': [0.495, 8, 6]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(A, E), haswordtitle(F, E)', 'true,false,false': 'haswordvenue(B, G), haswordtitle(H, G)', 'false': 'haswordvenue(A, I), haswordtitle(J, I)', 'false,true': 'haswordtitle(J, K), haswordvenue(B, K)'}, {'true,true': [0.494, 518, 708], 'true,false,true': [0.44, 5, 14], 'true,false,false,true': [1.879, 5, 12], 'true,false,false,false': [0.0, 0, 5], 'false,true,true': [7.3e-08, 0, 20], 'false,true,false': [0.495, 8, 6], 'false,false': [0.495, 8, 6]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(A, E), haswordtitle(F, E)', 'true,false,false': 'haswordvenue(B, G), haswordtitle(H, G)', 'false': 'haswordvenue(A, I), haswordtitle(J, I)', 'false,true': 'haswordtitle(J, K), haswordvenue(B, K)'}, {'true,true': [0.494, 518, 708], 'true,false,true': [0.44, 5, 14], 'true,false,false,true': [1.879, 5, 12], 'true,false,false,false': [0.0, 0, 5], 'false,true,true': [0.0, 0, 20], 'false,true,false': [0.495, 8, 6], 'false,false': [0.495, 8, 6]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(B, E), haswordtitle(F, E)', 'true,false,false': 'haswordvenue(A, G), haswordtitle(H, G)', 'false': 'haswordvenue(A, I), haswordtitle(J, I)', 'false,true': 'haswordtitle(J, K), haswordvenue(B, K)'}, {'true,true': [0.494, 518, 708], 'true,false,true': [0.439, 5, 14], 'true,false,false,true': [1.879, 5, 12], 'true,false,false,false': [1.49e-08, 0, 5], 'false,true,true': [5.16e-08, 0, 20], 'false,true,false': [0.495, 8, 6], 'false,false': [0.495, 8, 6]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordauthor(D, C)', 'true': 'haswordtitle(E, C)', 'true,false': 'haswordvenue(B, C)', 'true,false,false': 'author(F, D), venue(F, B)', 'false': 'haswordvenue(A, G), haswordvenue(B, G)', 'false,true': 'haswordtitle(H, G)', 'false,true,false': 'haswordvenue(B, I), haswordtitle(J, I)', 'false,false': 'haswordvenue(A, K), haswordtitle(L, K)'}, {'true,true': [0.357, 3, 17], 'true,false,true': [1.0, 2, 2], 'true,false,false,true': [0.841, 3, 1], 'true,false,false,false': [0.894, 4, 1], 'false,true,true': [0.494, 507, 687], 'false,true,false,true': [1.914, 5, 14], 'false,true,false,false': [1.891, 5, 17], 'false,false,true': [0.321, 7, 26], 'false,false,false': [0.495, 8, 6]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(B, E), haswordtitle(F, E)', 'true,false,false': 'haswordvenue(A, G), haswordtitle(H, G)', 'false': 'haswordvenue(B, I), haswordtitle(J, I)', 'false,true': 'haswordtitle(J, K), haswordvenue(A, K)'}, {'true,true': [0.493, 518, 708], 'true,false,true': [0.439, 5, 14], 'true,false,false,true': [1.879, 5, 12], 'true,false,false,false': [0.0, 0, 5], 'false,true,true': [2.58e-08, 0, 20], 'false,true,false': [0.495, 8, 6], 'false,false': [0.49, 8, 6]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(A, E), haswordtitle(F, E)', 'true,false,false': 'haswordvenue(B, G), haswordtitle(H, G)', 'false': 'haswordvenue(B, I), haswordtitle(J, I)', 'false,true': 'haswordtitle(J, K), haswordvenue(A, K)'}, {'true,true': [0.493, 518, 708], 'true,false,true': [0.439, 5, 14], 'true,false,false,true': [1.879, 5, 12], 'true,false,false,false': [0.0, 0, 5], 'false,true,true': [0.0, 0, 20], 'false,true,false': [0.495, 8, 6], 'false,false': [0.49, 8, 6]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(B, D), haswordauthor(E, D)', 'true,true': 'haswordtitle(F, D)', 'true,true,false': 'haswordvenue(A, D)', 'true,false': 'haswordtitle(G, C)', 'true,false,false': 'haswordvenue(B, H), haswordtitle(I, H)', 'false': 'haswordvenue(B, J), haswordtitle(K, J)', 'false,true': 'haswordtitle(K, L), haswordvenue(A, L)'}, {'true,true,true': [0.356, 3, 17], 'true,true,false,true': [1.0, 2, 2], 'true,true,false,false': [1.225, 6, 2], 'true,false,true': [0.493, 507, 687], 'true,false,false,true': [1.913, 5, 14], 'true,false,false,false': [1.89, 5, 17], 'false,true,true': [2.11e-08, 0, 20], 'false,true,false': [0.495, 8, 6], 'false,false': [0.49, 8, 6]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(B, E), haswordtitle(F, E)', 'true,false,false': 'haswordvenue(A, G), haswordtitle(H, G)', 'false': 'haswordvenue(B, I), haswordtitle(J, I)', 'false,true': 'haswordtitle(J, K), haswordvenue(A, K)'}, {'true,true': [0.492, 518, 708], 'true,false,true': [0.439, 5, 14], 'true,false,false,true': [1.879, 5, 12], 'true,false,false,false': [0.0, 0, 5], 'false,true,true': [0.0, 0, 20], 'false,true,false': [0.495, 8, 6], 'false,false': [0.49, 8, 6]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordauthor(D, C)', 'true': 'haswordtitle(E, C)', 'true,false': 'haswordvenue(B, C)', 'true,false,false': 'author(F, D), venue(F, B)', 'false': 'haswordvenue(A, G), haswordvenue(B, G)', 'false,true': 'haswordvenue(B, H), haswordauthor(I, H)', 'false,true,true': 'haswordtitle(J, H)', 'false,true,false': 'haswordtitle(K, G)'}, {'true,true': [0.356, 3, 17], 'true,false,true': [1.0, 2, 2], 'true,false,false,true': [0.834, 3, 1], 'true,false,false,false': [0.894, 4, 1], 'false,true,true,true': [1.589, 3, 16], 'false,true,true,false': [1.225, 6, 2], 'false,true,false,true': [16.896, 498, 669], 'false,true,false,false': [2.689, 10, 31], 'false,false': [0.379, 15, 32]}]]
[{'': [0.24306651325713594, 0.22222222222222385], 'true': [0.24399564626142126, 0.1844140392623454], 'false': [0.17993079584775207, 0.24489795918367352], 'true,false': [0.19390581717451486, 0.17561983471074338], 'false,true': [-8.881784197001253e-17, 0.24489795918367352], 'true,false,false': [0.20761245674740453, 0.0]}, {'': [0.24265720194658652, 0.1968581969586747], 'true': [0.2439956462613994, 0.18151807630785113], 'false': [0.15465453537750243, 0.24489795918367324], 'true,false': [0.193905817174515, 0.17043669583228802], 'true,false,false': [0.20761245674740458, 0.0], 'false,true': [2.6645352591003756e-16, 0.24489795918367324]}, {'': [0.24225435465227543, 0.17210326137526186], 'true': [0.2439956462614137, 0.17873720595178558], 'true,false': [0.1939058171745152, 0.16545366223293648], 'false': [0.12998525701064187, 0.2448979591836735], 'true,false,false': [0.20761245674740486, -4.4408920985006264e-17], 'false,true': [-2.6645352591003756e-16, 0.2448979591836735]}, {'': [0.24201842021934108, 0.1576721797796284], 'true': [0.24399564626139422, 0.1773616247101183], 'true,false': [0.192926167121755, 0.16380420131299048], 'true,false,false': [0.20761245674740472, 4.4408920985006264e-17], 'false': [0.11560410995340116, 0.24489795918367352], 'false,true': [1.3322676295501878e-16, 0.24489795918367352]}, {'': [0.2278612496497384, 0.23879925635780827], 'false': [0.24217238192445262, 0.14875931520453098], 'false,true': [0.2443183252948197, 0.17666622133125587], 'true': [0.12749999999999995, 0.2090135513358448], 'true,false': [0.24999999999999994, 0.16890630937179282], 'false,true,false': [0.1928999136805661, 0.16259333977574142], 'true,false,false': [0.17692640899621528, 0.15999999999999998], 'false,false': [0.10335300049157509, 0.24489795918367335]}, {'': [0.2410466298665023, 0.14864594110085502], 'true': [0.24314066820253483, 0.1768626051359244], 'true,false': [0.19291380837503871, 0.16298456654228186], 'true,false,false': [0.2076124567474049, 0.0], 'false': [0.10696598182228448, 0.24041268758675885], 'false,true': [3.3306690738754695e-17, 0.24489795918367338]}, {'': [0.24101220591273828, 0.14652070955902308], 'true': [0.2431320671705134, 0.1765797340818492], 'true,false': [0.19274098552072666, 0.1625975900230787], 'true,false,false': [0.2076124567474048, -5.551115123125783e-18], 'false': [0.10519635376753982, 0.24028443641561995], 'false,true': [-3.8857805861880476e-17, 0.24489795918367346]}, {'': [0.24099583390122906, 0.1453311797071294], 'true': [0.2235734591951105, 0.24128321618279375], 'true,false': [0.24348062407793145, 0.17639305489668441], 'true,true': [0.1266972984642341, 0.2243933635674841], 'true,true,false': [0.25000000000000006, 0.18750000000000006], 'true,false,false': [0.19258222486253052, 0.162380212551599], 'false': [0.10423715521821177, 0.24019249269844137], 'false,true': [2.2204460492503132e-17, 0.24489795918367332]}, {'': [0.24020034567648343, 0.14459000065161362], 'true': [0.2423086622260895, 0.1765826788910422], 'true,false': [0.19262345172080805, 0.1627206652508756], 'true,false,false': [0.20761245674740486, 0.0], 'false': [0.10365025306749695, 0.2401265283286469], 'false,true': [-2.4980018054066023e-17, 0.2448979591836735]}, {'': [0.19310924152494374, 0.237787255803314], 'false': [0.24130334481459054, 0.14375227255060452], 'false,true': [0.19030392979146019, 0.24233726175722214], 'false,true,false': [0.24463227179307437, 0.1763868221664945], 'true': [0.12674192096545822, 0.20207514635522134], 'true,false': [0.25, 0.16721079954748985], 'false,true,true': [0.13296398891966754, 0.18749999999999994], 'true,false,false': [0.17379919487595324, 0.15999999999999998]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,false;haswordvenue(A, E), haswordtitle(F, E).;true;true
0;true,false,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
0;false;haswordvenue(A, I), haswordtitle(J, I).;true;true
0;false,true;haswordtitle(J, K), haswordvenue(B, K).;true;true
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,false;haswordvenue(A, E), haswordtitle(F, E).;true;true
1;true,false,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;false;haswordvenue(A, I), haswordtitle(J, I).;true;true
1;false,true;haswordtitle(J, K), haswordvenue(B, K).;true;true
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,false;haswordvenue(A, E), haswordtitle(F, E).;true;true
2;true,false,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
2;false;haswordvenue(A, I), haswordtitle(J, I).;true;true
2;false,true;haswordtitle(J, K), haswordvenue(B, K).;true;true
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,false;haswordvenue(B, E), haswordtitle(F, E).;true;true
3;true,false,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
3;false;haswordvenue(A, I), haswordtitle(J, I).;true;true
3;false,true;haswordtitle(J, K), haswordvenue(B, K).;true;true
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,false;haswordvenue(B, E), haswordtitle(F, E).;true;true
5;true,false,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
5;false;haswordvenue(B, I), haswordtitle(J, I).;true;true
5;false,true;haswordtitle(J, K), haswordvenue(A, K).;true;true
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,false;haswordvenue(A, E), haswordtitle(F, E).;true;true
6;true,false,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
6;false;haswordvenue(B, I), haswordtitle(J, I).;true;true
6;false,true;haswordtitle(J, K), haswordvenue(A, K).;true;true
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;false;haswordvenue(B, J), haswordtitle(K, J).;true;true
7;false,true;haswordtitle(K, L), haswordvenue(A, L).;true;true
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,false;haswordvenue(B, E), haswordtitle(F, E).;true;true
8;true,false,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
8;false;haswordvenue(B, I), haswordtitle(J, I).;true;true
8;false,true;haswordtitle(J, K), haswordvenue(A, K).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.4356367001892301;  // std dev = 0.494, 1,226.000 (wgt'ed) examples reached here.  /* #neg=518 #pos=708 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then return 0.5949910403626703;  // std dev = 0.440, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.5640312880406888;  // std dev = 1.879, 17.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=12 */
%   | | | else return 0.8581489350995122;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(B, K) )
%   | | then return 0.8581489350995122;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.2867203636709409;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | else return 0.2867203636709409;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.37395569825543723;  // std dev = 0.494, 1,226.000 (wgt'ed) examples reached here.  /* #neg=518 #pos=708 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then return 0.5062567560764839;  // std dev = 0.440, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.48074388375574334;  // std dev = 1.879, 17.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=12 */
%   | | | else return 0.7194734122109545;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(B, K) )
%   | | then return 0.7194734122109543;  // std dev = 7.30e-08, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.24811816884741297;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | else return 0.24811816884741297;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.30665618885999163;  // std dev = 0.494, 1,226.000 (wgt'ed) examples reached here.  /* #neg=518 #pos=708 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then return 0.4047531668618019;  // std dev = 0.440, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.386198448632422;  // std dev = 1.879, 17.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=12 */
%   | | | else return 0.5553664367462845;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(B, K) )
%   | | then return 0.5553664367462846;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.20848477447886868;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | else return 0.20848477447886868;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.24206322397592006;  // std dev = 0.494, 1,226.000 (wgt'ed) examples reached here.  /* #neg=518 #pos=708 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then return 0.3261448737160187;  // std dev = 0.439, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | | then return 0.2788572331674748;  // std dev = 1.879, 17.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=12 */
%   | | | else return 0.4175135841583099;  // std dev = 1.49e-08, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(B, K) )
%   | | then return 0.41751358415830986;  // std dev = 5.16e-08, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.17062637354018512;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | else return 0.17062637354018512;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.18614898381430323;  // std dev = 0.494, 1,226.000 (wgt'ed) examples reached here.  /* #neg=518 #pos=708 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then return 0.24558668125641064;  // std dev = 0.439, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | | then return 0.20966773150020385;  // std dev = 1.879, 17.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=12 */
%   | | | else return 0.32071184716014967;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(B, K) )
%   | | then return 0.3207118471601496;  // std dev = 2.11e-08, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.13664585375352212;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | else return 0.13664585375352212;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(B, C), haswordauthor(D, C) )
%   then if ( haswordtitle(E, C) )
%   | then return 0.4135394151203006;  // std dev = 0.357, 20.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=17 */
%   | else if ( haswordvenue(A, C) )
%   | | then return 0.06353941512030048;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else if ( author(F, D), venue(F, A) )
%   | | | then return -0.1575832083121707;  // std dev = 0.838, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | else return -0.23646058487969954;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   else if ( haswordvenue(A, G), haswordvenue(B, G) )
%   | then if ( haswordtitle(H, G) )
%   | | then return 0.13891629954241463;  // std dev = 0.494, 1,194.000 (wgt'ed) examples reached here.  /* #neg=507 #pos=687 */
%   | | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | | then return 0.18620428986064227;  // std dev = 1.914, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | | else return 0.1780591823696338;  // std dev = 1.889, 22.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=17 */
%   | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | then return 0.2100327524080362;  // std dev = 0.318, 33.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=26 */
%   | | else return 0.10762034996184425;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordtitle(F, D) )
%   | | then return 0.31058191631929993;  // std dev = 0.357, 20.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=17 */
%   | | else if ( haswordvenue(A, D) )
%   | | | then return 0.04785303348920687;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return -0.13645048668898688;  // std dev = 1.221, 8.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | else if ( haswordvenue(A, G), haswordauthor(H, G) )
%   | | then if ( haswordtitle(I, G) )
%   | | | then return 0.371227989033261;  // std dev = 1.589, 19.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=16 */
%   | | | else return -0.22087727412463362;  // std dev = 1.225, 8.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | | else if ( haswordtitle(J, C) )
%   | | | then return 0.10238750736637042;  // std dev = 16.896, 1,167.000 (wgt'ed) examples reached here.  /* #neg=498 #pos=669 */
%   | | | else return 0.13874198132673543;  // std dev = 2.691, 41.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=31 */
%   else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | then return 0.16232217207098393;  // std dev = 0.324, 34.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=26 */
%   | else return 0.06600318601199684;  // std dev = 0.490, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordtitle(F, D) )
%   | | then return 0.23495189009805495;  // std dev = 0.357, 20.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=17 */
%   | | else if ( haswordvenue(A, D) )
%   | | | then return 0.03597442006497721;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return -0.10465007437004654;  // std dev = 1.221, 8.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | else if ( haswordtitle(G, C) )
%   | | then return 0.07840777998094993;  // std dev = 0.493, 1,194.000 (wgt'ed) examples reached here.  /* #neg=507 #pos=687 */
%   | | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | | then return 0.10779201828913959;  // std dev = 1.914, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | | else return 0.10632156261779285;  // std dev = 1.894, 22.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=17 */
%   else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordvenue(A, L) )
%   | | then return 0.19099325520646365;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.050644430317014585;  // std dev = 0.490, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | else return 0.046192241128045604;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordauthor(D, C) )
%   then if ( haswordtitle(E, C) )
%   | then return 0.26318379955883964;  // std dev = 0.356, 20.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=17 */
%   | else if ( haswordvenue(B, C) )
%   | | then return 0.02701674504348707;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else if ( author(F, D), venue(F, B) )
%   | | | then return -0.1750265791009075;  // std dev = 0.855, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | else return -0.23558682957531488;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   else if ( haswordvenue(A, G), haswordvenue(B, G) )
%   | then if ( haswordtitle(H, G) )
%   | | then return 0.058144886588136636;  // std dev = 0.493, 1,194.000 (wgt'ed) examples reached here.  /* #neg=507 #pos=687 */
%   | | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | | then return 0.08301151518150929;  // std dev = 1.914, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | | else return 0.08364226725534986;  // std dev = 1.896, 22.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=17 */
%   | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | then return 0.12577668427604016;  // std dev = 0.316, 33.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=26 */
%   | | else return 0.038689877141555744;  // std dev = 0.490, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.04501254762945642;  // std dev = 0.491, 1,226.000 (wgt'ed) examples reached here.  /* #neg=518 #pos=708 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then return 0.06447302363842192;  // std dev = 0.439, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.03559827698968802;  // std dev = 1.879, 17.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=12 */
%   | | | else return 0.17108186573380813;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(A, K) )
%   | | then return 0.14674787759567204;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.029466625246109435;  // std dev = 0.490, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | else return 0.009935992345247288;  // std dev = 0.491, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */


Results
   AUC ROC   = 0.537246
   AUC PR    = 0.3456
   CLL	      = -0.755891
   Precision = 0.354232 at threshold = 0.5
   Recall    = 0.955922
   F1        = 0.516913


Total learning time: 58.17067003250122 seconds
Total inference time: 6.4 seconds
AUC ROC: 0.537246


Results scoring model
   AUC ROC   = 0.553717
   AUC PR    = 0.662696
   CLL	      = -0.665013
   Precision = 0.594317 at threshold = 0.5
   Recall    = 0.976654
   F1        = 0.73896


Total scoring time: 1.132 seconds
Refined model CLL: -0.665013


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.537246
   AUC PR    = 0.3456
   CLL	      = -0.755891
   Precision = 0.354232 at threshold = 0.5
   Recall    = 0.955922
   F1        = 0.516913


Total learning time: 116.41542001914979 seconds
Total inference time: 6.4 seconds
AUC ROC: 0.537246
Total revision time: 116.41542001914979
Best scored revision CLL: -0.665013


Dataset: 38_uwcse_cora, Fold: 2, Type: Transfer (trRDN-B), Time: 00:04:26
{'AUC ROC': 0.537246, 'AUC PR': 0.3456, 'CLL': -0.755891, 'Precision': [0.354232, 0.5], 'Recall': 0.955922, 'F1': 0.516913, 'Learning time': 116.41542001914979, 'Inference time': 6.4, 'parameter': {'AUC ROC': 0.5373, 'AUC PR': 0.344283, 'CLL': -0.756091, 'Precision': [0.353813, 0.5], 'Recall': 0.956367, 'F1': 0.516532, 'Learning time': 56.05774998664856, 'Inference time': 6.551}}


Starting fold 3

Target train facts examples: 9306
Target train pos examples: 581
Target train neg examples: 2222

Target test facts examples: 33252
Target test pos  examples: 2436
Target test neg examples: 2800

******************************************
Performing Parameter Learning
******************************************
Refine
0;;advisedby(A, B) :- professor(B), student(A).;true;false
0;true;publication(C, B), publication(C, A).;true;true
0;true,true;tempadvisedby(D, B), ta(E, A, F).;true;false
0;true,true,true;ta(G, D, H).;false;false
0;true,false;publication(I, A).;true;true
0;true,false,true;publication(I, J), professor(J).;false;false
0;true,false,false;publication(K, B), tempadvisedby(L, B).;false;false
1;;advisedby(A, B) :- professor(B), student(A).;true;false
1;true;publication(C, A), publication(C, B).;true;true
1;true,true;tempadvisedby(D, B), ta(E, D, F).;false;true
1;true,true,false;tempadvisedby(G, B), ta(H, A, I).;false;false
1;true,false;publication(J, B), publication(K, A).;true;true
1;true,false,true;publication(K, L), professor(L).;false;false
1;true,false,false;publication(M, B).;false;false
2;;advisedby(A, B) :- professor(B), student(A).;true;false
2;true;publication(C, B), publication(C, A).;true;true
2;true,true;tempadvisedby(D, B), publication(C, D).;false;true
2;true,true,false;ta(E, A, F).;false;false
2;true,false;tempadvisedby(G, B), publication(H, A).;true;true
2;true,false,true;projectmember(I, B).;false;false
2;true,false,false;ta(J, A, K), tempadvisedby(L, B).;false;false
3;;advisedby(A, B) :- hasposition(B, C), student(A).;true;true
3;true;ta(D, A, E), publication(F, B).;true;true
3;true,true;ta(D, G, H), publication(I, G).;true;false
3;true,true,true;publication(F, G).;false;false
3;true,false;projectmember(J, B).;false;true
3;true,false,false;publication(K, B), publication(K, A).;false;false
3;false;ta(L, A, M).;false;true
3;false,false;student(B).;false;false
4;;advisedby(A, B) :- professor(B), student(A).;true;false
4;true;publication(C, B).;true;true
4;true,true;publication(C, D), inphase(D, E).;true;true
4;true,true,true;tempadvisedby(D, F), publication(C, F).;false;false
4;true,true,false;publication(G, A).;false;false
4;true,false;projectmember(H, B).;true;true
4;true,false,true;publication(I, A).;false;false
4;true,false,false;ta(J, A, K), tempadvisedby(L, B).;false;false
5;;advisedby(A, B) :- professor(B), student(A).;true;false
5;true;publication(C, B), publication(C, A).;true;true
5;true,true;tempadvisedby(D, B).;true;false
5;true,true,true;ta(E, A, F), publication(G, D).;false;false
5;true,false;publication(H, A), publication(I, B).;true;true
5;true,false,true;tempadvisedby(J, B), ta(K, J, L).;false;false
5;true,false,false;publication(M, B).;false;false
6;;advisedby(A, B) :- student(A), professor(B).;true;false
6;true;publication(C, A).;true;true
6;true,true;publication(C, D), professor(D).;true;true
6;true,true,true;tempadvisedby(E, D), publication(C, E).;false;false
6;true,true,false;ta(F, A, G).;false;false
6;true,false;ta(H, A, I), publication(J, B).;true;true
6;true,false,true;tempadvisedby(K, B), ta(H, K, L).;false;false
6;true,false,false;tempadvisedby(M, B).;false;false
7;;advisedby(A, B) :- student(A), hasposition(B, C).;true;true
7;true;publication(D, A), publication(D, B).;false;true
7;true,false;publication(E, A), publication(F, B).;true;true
7;true,false,true;tempadvisedby(G, B), ta(H, G, I).;false;false
7;true,false,false;publication(J, B), tempadvisedby(K, B).;false;false
7;false;student(B).;false;true
7;false,false;publication(L, A).;false;false
8;;advisedby(A, B) :- professor(B), student(A).;true;false
8;true;projectmember(C, B), ta(D, A, E).;false;true
8;true,false;publication(F, A), publication(F, B).;true;true
8;true,false,true;ta(G, A, H), tempadvisedby(I, B).;false;false
8;true,false,false;tempadvisedby(J, B), ta(K, A, L).;false;false
9;;advisedby(A, B) :- professor(B), student(A).;true;false
9;true;publication(C, B).;true;true
9;true,true;publication(C, D), tempadvisedby(D, B).;true;true
9;true,true,true;publication(E, A), ta(F, D, G).;false;false
9;true,true,false;publication(H, A).;false;false
9;true,false;publication(I, A), projectmember(J, B).;false;true
9;true,false,false;tempadvisedby(K, B).;false;false


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordauthor(F, C) )
%   | | then return 0.28672036367094084;  // std dev = 0.495, 7.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=3 */
%   | | else return 0.1604745164948612;  // std dev = 0.459, 43.000 (wgt'ed) examples reached here.  /* #neg=30 #pos=13 */
%   | else return 0.22348042681221456;  // std dev = 0.482, 1,448.000 (wgt'ed) examples reached here.  /* #neg=919 #pos=529 */
%   else if ( haswordvenue(B, G), haswordauthor(H, G) )
%   | then return -0.0168510649004878;  // std dev = 0.331, 16.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=2 */
%   | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | then if ( title(K, J), venue(K, B) )
%   | | | then return 0.08350104777556872;  // std dev = 3.521, 71.000 (wgt'ed) examples reached here.  /* #neg=55 #pos=16 */
%   | | | else return -0.0418510649004878;  // std dev = 1.342, 20.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=2 */
%   | | else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | | | then return 0.039967116917694195;  // std dev = 3.618, 88.000 (wgt'ed) examples reached here.  /* #neg=72 #pos=16 */
%   | | | else return -0.1418510649004878;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.19465758318726933;  // std dev = 0.482, 1,490.000 (wgt'ed) examples reached here.  /* #neg=945 #pos=545 */
%   else if ( haswordvenue(B, D), haswordtitle(E, D) )
%   | then if ( title(F, E), venue(F, B) )
%   | | then if ( samebib(F, G), venue(G, A) )
%   | | | then return 0.5749500567168854;  // std dev = 2.089, 22.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=16 */
%   | | | else return -0.15188370490049863;  // std dev = 0.017, 57.000 (wgt'ed) examples reached here.  /* #neg=57 */
%   | | else if ( title(H, E), venue(H, A) )
%   | | | then return -0.136832517440075;  // std dev = 5.27e-09, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | | else return 0.029834149226591656;  // std dev = 1.291, 12.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=2 */
%   | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | then if ( title(K, J), venue(K, A) )
%   | | | then return 0.0446032403467668;  // std dev = 3.599, 84.000 (wgt'ed) examples reached here.  /* #neg=68 #pos=16 */
%   | | | else return -0.05154812623734951;  // std dev = 1.345, 21.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=2 */
%   | | else return -0.12903651624093268;  // std dev = 0.012, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.16096395960943716;  // std dev = 0.480, 1,508.000 (wgt'ed) examples reached here.  /* #neg=963 #pos=545 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return -0.055602621512579296;  // std dev = 0.265, 21.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=2 */
%   | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | then if ( title(H, G), venue(H, A) )
%   | | | then return 0.04152437589409631;  // std dev = 3.593, 83.000 (wgt'ed) examples reached here.  /* #neg=67 #pos=16 */
%   | | | else return -0.04044715500092934;  // std dev = 1.342, 20.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=2 */
%   | | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | | then return 0.010549475288950217;  // std dev = 3.339, 97.000 (wgt'ed) examples reached here.  /* #neg=81 #pos=16 */
%   | | | else return -0.11521968806689419;  // std dev = 0.011, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordauthor(F, C) )
%   | | then return 0.2609069178310583;  // std dev = 1.225, 6.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | else return 0.10811358070341844;  // std dev = 0.468, 40.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=13 */
%   | else return 0.12989565160627348;  // std dev = 0.479, 1,479.000 (wgt'ed) examples reached here.  /* #neg=950 #pos=529 */
%   else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | then if ( title(I, H), venue(I, A) )
%   | | then if ( samebib(I, J), venue(J, B) )
%   | | | then return 0.5703788639827467;  // std dev = 2.088, 22.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=16 */
%   | | | else return -0.1566279922178921;  // std dev = 0.027, 70.000 (wgt'ed) examples reached here.  /* #neg=70 */
%   | | else return -0.02452383199126111;  // std dev = 0.314, 18.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=2 */
%   | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | then if ( title(M, L), venue(M, B) )
%   | | | then return 0.011359251116936116;  // std dev = 3.287, 94.000 (wgt'ed) examples reached here.  /* #neg=78 #pos=16 */
%   | | | else return -0.055207908859193904;  // std dev = 1.345, 26.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=2 */
%   | | else return -0.10398747637317238;  // std dev = 0.010, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordauthor(F, C) )
%   | | then return 0.13885283952365787;  // std dev = 0.495, 7.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=3 */
%   | | else return 0.05809423859315236;  // std dev = 0.462, 42.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=13 */
%   | else if ( haswordvenue(A, G), haswordauthor(H, G) )
%   | | then return 0.1253011663764285;  // std dev = 0.480, 36.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=13 */
%   | | else return 0.11016818660262023;  // std dev = 0.480, 1,427.000 (wgt'ed) examples reached here.  /* #neg=911 #pos=516 */
%   else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | then if ( title(K, J), venue(K, A) )
%   | | then if ( samebib(K, L), venue(L, B) )
%   | | | then return 0.42209684513387885;  // std dev = 2.309, 24.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=16 */
%   | | | else return -0.1324762280926926;  // std dev = 0.057, 71.000 (wgt'ed) examples reached here.  /* #neg=71 */
%   | | else return 0.0649089620949053;  // std dev = 0.400, 10.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | else if ( haswordvenue(A, M), haswordtitle(N, M) )
%   | | then return 0.005281755477884468;  // std dev = 0.335, 111.000 (wgt'ed) examples reached here.  /* #neg=93 #pos=18 */
%   | | else return -0.09322167294737357;  // std dev = 0.004, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.08392690853750558;  // std dev = 0.479, 1,530.000 (wgt'ed) examples reached here.  /* #neg=985 #pos=545 */
%   else if ( haswordvenue(A, D), haswordtitle(E, D) )
%   | then if ( title(F, E), venue(F, A) )
%   | | then return 0.03565208407369189;  // std dev = 0.355, 81.000 (wgt'ed) examples reached here.  /* #neg=65 #pos=16 */
%   | | else if ( title(G, E), venue(G, B) )
%   | | | then return -0.1333948134909869;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | | else return 0.033271853175679794;  // std dev = 1.291, 12.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=2 */
%   | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | then if ( title(J, I), venue(J, A) )
%   | | | then return -0.010034709398126774;  // std dev = 3.018, 101.000 (wgt'ed) examples reached here.  /* #neg=85 #pos=16 */
%   | | | else return 0.057143704233153556;  // std dev = 1.265, 10.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | | else return -0.08648992929162777;  // std dev = 0.009, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.07808221615894609;  // std dev = 0.482, 1,484.000 (wgt'ed) examples reached here.  /* #neg=939 #pos=545 */
%   else if ( haswordvenue(B, D), haswordtitle(E, D) )
%   | then if ( title(F, E), venue(F, B) )
%   | | then if ( samebib(F, G), venue(G, A) )
%   | | | then return 0.4720349935001041;  // std dev = 1.786, 20.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=16 */
%   | | | else return -0.11960541632152047;  // std dev = 0.017, 63.000 (wgt'ed) examples reached here.  /* #neg=63 */
%   | | else if ( title(H, E), venue(H, A) )
%   | | | then return -0.10285908938077237;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | | else return 0.003848911335097336;  // std dev = 1.301, 13.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=2 */
%   | else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | | then return -0.016971176304959444;  // std dev = 0.316, 14.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=2 */
%   | | else if ( haswordvenue(A, K), haswordauthor(L, K) )
%   | | | then return -0.13161817206462217;  // std dev = 2.63e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return -0.0053851226246152155;  // std dev = 3.355, 100.000 (wgt'ed) examples reached here.  /* #neg=84 #pos=16 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordauthor(D, C) )
%   | then return 0.24471526045933448;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | else if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then return -0.00881489175612608;  // std dev = 0.450, 46.000 (wgt'ed) examples reached here.  /* #neg=33 #pos=13 */
%   | | else return 0.06062599692480786;  // std dev = 0.482, 1,444.000 (wgt'ed) examples reached here.  /* #neg=915 #pos=529 */
%   else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | then if ( title(I, H), venue(I, A) )
%   | | then if ( samebib(I, J), venue(J, B) )
%   | | | then return 0.47323067361718024;  // std dev = 2.088, 22.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=16 */
%   | | | else return -0.14073764657196994;  // std dev = 0.040, 67.000 (wgt'ed) examples reached here.  /* #neg=67 */
%   | | else if ( title(K, H), venue(K, B) )
%   | | | then return -0.1181517496766998;  // std dev = 3.73e-09, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | | else return 0.017194531869546132;  // std dev = 1.301, 13.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=2 */
%   | else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | | then return -0.01808142549586505;  // std dev = 0.280, 113.000 (wgt'ed) examples reached here.  /* #neg=95 #pos=18 */
%   | | else return -0.07931943774090455;  // std dev = 0.008, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.0440276736578029;  // std dev = 0.481, 1,504.000 (wgt'ed) examples reached here.  /* #neg=959 #pos=545 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return -0.029368246020080636;  // std dev = 0.252, 15.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=2 */
%   | else if ( haswordvenue(B, F), haswordtitle(G, F) )
%   | | then if ( title(H, G), venue(H, A) )
%   | | | then return -0.012968480030256682;  // std dev = 2.468, 84.000 (wgt'ed) examples reached here.  /* #neg=70 #pos=14 */
%   | | | else return 0.05180835067657539;  // std dev = 1.265, 10.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | | then return -0.01183749673897365;  // std dev = 3.225, 113.000 (wgt'ed) examples reached here.  /* #neg=95 #pos=18 */
%   | | | else return -0.07411603024983705;  // std dev = 0.007, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(B, C), haswordtitle(D, C) )
%   then if ( title(E, D), venue(E, A) )
%   | then if ( samebib(E, F), venue(F, B) )
%   | | then return 0.5475577415479448;  // std dev = 0.327, 450.000 (wgt'ed) examples reached here.  /* #neg=54 #pos=396 */
%   | | else return -0.2915208856554152;  // std dev = 0.145, 880.000 (wgt'ed) examples reached here.  /* #neg=864 #pos=16 */
%   | else if ( haswordvenue(A, C) )
%   | | then if ( title(G, D), venue(G, B) )
%   | | | then return -0.2902162315428135;  // std dev = 0.981, 26.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=1 */
%   | | | else return 0.19323458059325876;  // std dev = 7.914, 251.000 (wgt'ed) examples reached here.  /* #neg=120 #pos=131 */
%   | | else return 0.03839979587968797;  // std dev = 0.389, 18.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=4 */
%   else if ( haswordvenue(A, H), haswordvenue(B, H) )
%   | then if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | then if ( title(K, J), venue(K, B) )
%   | | | then return 0.0046555633289812786;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | else return 0.17132222999564797;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else return 0.4153763748343503;  // std dev = 0.430, 16.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=12 */
%   | else return 0.009273113548642808;  // std dev = 0.304, 106.000 (wgt'ed) examples reached here.  /* #neg=88 #pos=18 */


Results
   AUC ROC   = 0.860342
   AUC PR    = 0.744618
   CLL	      = -0.569067
   Precision = 0.612403 at threshold = 0.5
   Recall    = 0.03243
   F1        = 0.061598


Total learning time: 71.00190711021423 seconds
Total inference time: 9.915 seconds
AUC ROC: 0.860342


Results scoring model
   AUC ROC   = 0.932558
   AUC PR    = 0.720165
   CLL	      = -0.426574
   Precision = 0.633333 at threshold = 0.5
   Recall    = 0.032702
   F1        = 0.062193


Total scoring time: 2.295 seconds
Parameter learned model CLL: -0.426574


Structure after Parameter Learning
[['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(A, D), haswordauthor(E, D)', 'true,true': 'haswordauthor(F, C)', 'false': 'haswordvenue(B, G), haswordauthor(H, G)', 'false,false': 'haswordvenue(B, I), haswordtitle(J, I)', 'false,false,true': 'title(K, J), venue(K, B)', 'false,false,false': 'haswordvenue(A, L), haswordtitle(M, L)'}, {'true,true,true': [0.495, 4, 3], 'true,true,false': [0.459, 30, 13], 'true,false': [0.482, 919, 529], 'false,true': [0.331, 14, 2], 'false,false,true,true': [3.521, 55, 16], 'false,false,true,false': [1.342, 18, 2], 'false,false,false,true': [3.618, 72, 16], 'false,false,false,false': [0.0, 6, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'false': 'haswordvenue(B, D), haswordtitle(E, D)', 'false,true': 'title(F, E), venue(F, B)', 'false,true,true': 'samebib(F, G), venue(G, A)', 'false,true,false': 'title(H, E), venue(H, A)', 'false,false': 'haswordvenue(A, I), haswordtitle(J, I)', 'false,false,true': 'title(K, J), venue(K, A)'}, {'true': [0.482, 945, 545], 'false,true,true,true': [2.089, 6, 16], 'false,true,true,false': [0.017, 57, 0], 'false,true,false,true': [5.27e-09, 8, 0], 'false,true,false,false': [1.291, 10, 2], 'false,false,true,true': [3.599, 68, 16], 'false,false,true,false': [1.345, 19, 2], 'false,false,false': [0.012, 4, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'false': 'haswordvenue(A, D), haswordauthor(E, D)', 'false,false': 'haswordvenue(A, F), haswordtitle(G, F)', 'false,false,true': 'title(H, G), venue(H, A)', 'false,false,false': 'haswordvenue(B, I), haswordtitle(J, I)'}, {'true': [0.48, 963, 545], 'false,true': [0.265, 19, 2], 'false,false,true,true': [3.593, 67, 16], 'false,false,true,false': [1.342, 18, 2], 'false,false,false,true': [3.339, 81, 16], 'false,false,false,false': [0.011, 4, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(A, D), haswordauthor(E, D)', 'true,true': 'haswordauthor(F, C)', 'false': 'haswordvenue(A, G), haswordtitle(H, G)', 'false,true': 'title(I, H), venue(I, A)', 'false,true,true': 'samebib(I, J), venue(J, B)', 'false,false': 'haswordvenue(B, K), haswordtitle(L, K)', 'false,false,true': 'title(M, L), venue(M, B)'}, {'true,true,true': [1.225, 3, 3], 'true,true,false': [0.468, 27, 13], 'true,false': [0.479, 950, 529], 'false,true,true,true': [2.088, 6, 16], 'false,true,true,false': [0.027, 70, 0], 'false,true,false': [0.314, 16, 2], 'false,false,true,true': [3.287, 78, 16], 'false,false,true,false': [1.345, 24, 2], 'false,false,false': [0.01, 4, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(B, D), haswordauthor(E, D)', 'true,true': 'haswordauthor(F, C)', 'true,false': 'haswordvenue(A, G), haswordauthor(H, G)', 'false': 'haswordvenue(B, I), haswordtitle(J, I)', 'false,true': 'title(K, J), venue(K, A)', 'false,true,true': 'samebib(K, L), venue(L, B)', 'false,false': 'haswordvenue(A, M), haswordtitle(N, M)'}, {'true,true,true': [0.495, 4, 3], 'true,true,false': [0.462, 29, 13], 'true,false,true': [0.48, 23, 13], 'true,false,false': [0.48, 911, 516], 'false,true,true,true': [2.309, 8, 16], 'false,true,true,false': [0.057, 71, 0], 'false,true,false': [0.4, 8, 2], 'false,false,true': [0.335, 93, 18], 'false,false,false': [0.004, 4, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'false': 'haswordvenue(A, D), haswordtitle(E, D)', 'false,true': 'title(F, E), venue(F, A)', 'false,true,false': 'title(G, E), venue(G, B)', 'false,false': 'haswordvenue(B, H), haswordtitle(I, H)', 'false,false,true': 'title(J, I), venue(J, A)'}, {'true': [0.479, 985, 545], 'false,true,true': [0.355, 65, 16], 'false,true,false,true': [0.0, 4, 0], 'false,true,false,false': [1.291, 10, 2], 'false,false,true,true': [3.018, 85, 16], 'false,false,true,false': [1.265, 8, 2], 'false,false,false': [0.009, 5, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'false': 'haswordvenue(B, D), haswordtitle(E, D)', 'false,true': 'title(F, E), venue(F, B)', 'false,true,true': 'samebib(F, G), venue(G, A)', 'false,true,false': 'title(H, E), venue(H, A)', 'false,false': 'haswordvenue(B, I), haswordauthor(J, I)', 'false,false,false': 'haswordvenue(A, K), haswordauthor(L, K)'}, {'true': [0.482, 939, 545], 'false,true,true,true': [1.786, 4, 16], 'false,true,true,false': [0.017, 63, 0], 'false,true,false,true': [0.0, 9, 0], 'false,true,false,false': [1.301, 11, 2], 'false,false,true': [0.316, 12, 2], 'false,false,false,true': [2.63e-09, 3, 0], 'false,false,false,false': [3.355, 84, 16]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordauthor(D, C)', 'true,false': 'haswordvenue(A, E), haswordauthor(F, E)', 'false': 'haswordvenue(A, G), haswordtitle(H, G)', 'false,true': 'title(I, H), venue(I, A)', 'false,true,true': 'samebib(I, J), venue(J, B)', 'false,true,false': 'title(K, H), venue(K, B)', 'false,false': 'haswordvenue(B, L), haswordtitle(M, L)'}, {'true,true': [1.095, 2, 3], 'true,false,true': [0.45, 33, 13], 'true,false,false': [0.482, 915, 529], 'false,true,true,true': [2.088, 6, 16], 'false,true,true,false': [0.04, 67, 0], 'false,true,false,true': [3.73e-09, 5, 0], 'false,true,false,false': [1.301, 11, 2], 'false,false,true': [0.28, 95, 18], 'false,false,false': [0.008, 5, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'false': 'haswordvenue(A, D), haswordauthor(E, D)', 'false,false': 'haswordvenue(B, F), haswordtitle(G, F)', 'false,false,true': 'title(H, G), venue(H, A)', 'false,false,false': 'haswordvenue(A, I), haswordtitle(J, I)'}, {'true': [0.481, 959, 545], 'false,true': [0.252, 13, 2], 'false,false,true,true': [2.468, 70, 14], 'false,false,true,false': [1.265, 8, 2], 'false,false,false,true': [3.225, 95, 18], 'false,false,false,false': [0.007, 4, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(B, C), haswordtitle(D, C)', 'true': 'title(E, D), venue(E, A)', 'true,true': 'samebib(E, F), venue(F, B)', 'true,false': 'haswordvenue(A, C)', 'true,false,true': 'title(G, D), venue(G, B)', 'false': 'haswordvenue(A, H), haswordvenue(B, H)', 'false,true': 'haswordvenue(A, I), haswordtitle(J, I)', 'false,true,true': 'title(K, J), venue(K, B)'}, {'true,true,true': [0.327, 54, 396], 'true,true,false': [0.145, 864, 16], 'true,false,true,true': [0.981, 25, 1], 'true,false,true,false': [7.914, 120, 131], 'true,false,false': [0.389, 14, 4], 'false,true,true,true': [0.816, 2, 1], 'false,true,true,false': [1.0, 2, 2], 'false,true,false': [0.43, 4, 12], 'false,false': [0.304, 88, 18]}]]
[{'': [0.23145457851232434, 0.1470260637112954], 'true': [0.2175999999999995, 0.23186439287566177], 'true,true': [0.24489795918367335, 0.2109248242293126], 'false': [0.10937500000000004, 0.1500073046019003], 'false,false': [0.15867648834681747, 0.1412403802625617], 'false,false,true': [0.1745685379884938, 0.09000000000000004], 'false,false,false': [0.14876033057851187, -6.938893903907228e-18]}, {'': [0.23197307536841397, 0.14273481472371546], 'false': [0.14819655199231, 0.1376915866139286], 'false,true': [0.16138814767957552, 0.09000000000000005], 'false,true,true': [0.19834710743801628, 5.298998280716934e-06], 'false,false': [0.1420605595549304, 3.870475650554969e-05], 'false,false,true': [0.15418473227108587, 0.0861678004535148], 'false,true,false': [3.469446951953614e-18, 0.13888888888888895]}, {'': [0.230730908533036, 0.12273003011256459], 'false': [0.07025291100306845, 0.12765775650383054], 'false,false': [0.1438300797999516, 0.11096243886057348], 'false,false,true': [0.15549645872984094, 0.09000000000000005], 'false,false,false': [0.11491044324280984, 3.190093026037184e-05]}, {'': [0.22963105325392927, 0.11869296617714295], 'true': [0.2260174824805979, 0.22974333936321312], 'true,true': [0.25, 0.21937500000000046], 'false': [0.13648289332718525, 0.10278032526290769], 'false,true': [0.1435772323438, 0.09876543209876548], 'false,true,true': [0.19823110735812186, 1.0546748831262244e-05], 'false,false': [0.10587687814511439, 2.6685198679984173e-05], 'false,false,true': [0.11494278861620626, 0.0696290285867653]}, {'': [0.23051462280201335, 0.11368545509152453], 'true': [0.2189715898004433, 0.2308469952542613], 'true,false': [0.23070987654320968, 0.23084481928017364], 'true,true': [0.2448979591836735, 0.21371882086167832], 'false': [0.11888713619975462, 0.10887594271861022], 'false,true': [0.11424696280323715, 0.16000000000000003], 'false,true,true': [0.22223814516855714, 4.573226229387853e-05], 'false,false': [0.11246173130350444, 4.877134058231883e-06]}, {'': [0.2292443637011269, 0.10732517853511994], 'false': [0.12380585111461723, 0.09295616732538815], 'false,true': [0.12633636829751552, 0.10937500000000001], 'false,true,false': [0.0, 0.1388888888888889], 'false,false': [0.09684921008851075, 1.6583580586823633e-05], 'false,false,true': [0.09019008552760176, 0.15999999999999992]}, {'': [0.23225058553526326, 0.10380262971547842], 'false': [0.09832817016982462, 0.10852987369460916], 'false,false': [0.0998248668935073, 0.10970559292726778], 'false,false,false': [2.3129646346357427e-18, 0.11253264082855406], 'false,true': [0.10244686671169558, 0.07967562216638897], 'false,true,true': [0.15944820580509536, 4.6072342126258715e-06], 'false,true,false': [-1.5419764230904951e-18, 0.13017751479289943]}, {'': [0.23150136677056318, 0.09463504350453902], 'true': [0.24, 0.23135685201870448], 'true,false': [0.2027410207939509, 0.23211956841289022], 'false': [0.11567609539850866, 0.07522353710160805], 'false,true': [0.11914710793306955, 0.09769212499038331], 'false,true,true': [0.19815479727656238, 2.3878270936478457e-05], 'false,true,false': [2.7755575615628915e-18, 0.13017751479289946], 'false,false': [0.07839259617665162, 1.1610156124867987e-05]}, {'': [0.2309396036380225, 0.0845125233454908], 'false': [0.06346088271171642, 0.08598533604820893], 'false,false': [0.08220048104964536, 0.08899843113171932], 'false,false,false': [0.09201579443640283, 1.190428554065804e-05], 'false,false,true': [0.07249224655593617, 0.15999999999999998]}, {'': [0.21761847356517025, 0.1301558957119426], 'true': [0.20771502173653367, 0.24414603866669538], 'true,false': [0.2494493607371378, 0.15128405919488186], 'true,false,true': [0.03698224852071007, 0.24951984889128567], 'true,true': [0.1069955556046269, 0.02100589254880123], 'false': [0.22434209879973163, 0.09257556371253226], 'false,true': [0.2448979591836735, 0.18505737032333786], 'false,true,true': [0.22222222222222224, 0.24999999999999997]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;false;haswordvenue(B, G), haswordauthor(H, G).;true;true
0;false,false;haswordvenue(B, I), haswordtitle(J, I).;true;true
0;false,false,false;haswordvenue(A, L), haswordtitle(M, L).;true;true
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;false;haswordvenue(B, D), haswordtitle(E, D).;true;true
1;false,true;title(F, E), venue(F, B).;true;true
1;false,true,true;samebib(F, G), venue(G, A).;true;true
1;false,true,false;title(H, E), venue(H, A).;true;true
1;false,false;haswordvenue(A, I), haswordtitle(J, I).;true;true
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;false;haswordvenue(A, D), haswordauthor(E, D).;true;true
2;false,false;haswordvenue(A, F), haswordtitle(G, F).;true;true
2;false,false,false;haswordvenue(B, I), haswordtitle(J, I).;true;true
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;false;haswordvenue(A, G), haswordtitle(H, G).;true;true
3;false,true;title(I, H), venue(I, A).;true;true
3;false,true,true;samebib(I, J), venue(J, B).;true;true
3;false,false;haswordvenue(B, K), haswordtitle(L, K).;true;true
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;false;haswordvenue(B, I), haswordtitle(J, I).;true;true
4;false,true;title(K, J), venue(K, A).;true;true
4;false,true,true;samebib(K, L), venue(L, B).;true;true
4;false,false;haswordvenue(A, M), haswordtitle(N, M).;true;true
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;false;haswordvenue(A, D), haswordtitle(E, D).;true;true
5;false,true;title(F, E), venue(F, A).;true;true
5;false,true,false;title(G, E), venue(G, B).;true;true
5;false,false;haswordvenue(B, H), haswordtitle(I, H).;true;true
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;false;haswordvenue(B, D), haswordtitle(E, D).;true;true
6;false,true;title(F, E), venue(F, B).;true;true
6;false,true,true;samebib(F, G), venue(G, A).;true;true
6;false,true,false;title(H, E), venue(H, A).;true;true
6;false,false;haswordvenue(B, I), haswordauthor(J, I).;true;true
6;false,false,false;haswordvenue(A, K), haswordauthor(L, K).;true;true
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;false;haswordvenue(A, G), haswordtitle(H, G).;true;true
7;false,true;title(I, H), venue(I, A).;true;true
7;false,true,true;samebib(I, J), venue(J, B).;true;true
7;false,true,false;title(K, H), venue(K, B).;true;true
7;false,false;haswordvenue(B, L), haswordtitle(M, L).;true;true
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;false;haswordvenue(A, D), haswordauthor(E, D).;true;true
8;false,false;haswordvenue(B, F), haswordtitle(G, F).;true;true
8;false,false,false;haswordvenue(A, I), haswordtitle(J, I).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.20908261185417576;  // std dev = 0.477, 1,553.000 (wgt'ed) examples reached here.  /* #neg=1,008 #pos=545 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.058148935099512175;  // std dev = 0.400, 10.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | | then return -0.00851773156715447;  // std dev = 0.340, 15.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=2 */
%   | | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | | then return 0.02656998773109133;  // std dev = 3.648, 95.000 (wgt'ed) examples reached here.  /* #neg=79 #pos=16 */
%   | | | else return 0.01656477668367079;  // std dev = 3.670, 101.000 (wgt'ed) examples reached here.  /* #neg=85 #pos=16 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordtitle(F, C) )
%   | | then return 0.15683209052658423;  // std dev = 0.469, 46.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=15 */
%   | | else return 0.030745134004845475;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else if ( haswordvenue(A, G), haswordauthor(H, G) )
%   | | then return 0.12619967945939076;  // std dev = 0.456, 44.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=13 */
%   | | else return 0.1913321361013015;  // std dev = 0.480, 1,431.000 (wgt'ed) examples reached here.  /* #neg=915 #pos=516 */
%   else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | then if ( title(K, J), venue(K, B) )
%   | | then if ( samebib(K, L), venue(L, A) )
%   | | | then return 0.6553136006829974;  // std dev = 1.790, 20.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=16 */
%   | | | else return -0.1447214431632359;  // std dev = 0.014, 57.000 (wgt'ed) examples reached here.  /* #neg=57 */
%   | | else return -0.04511629182750354;  // std dev = 0.300, 20.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=2 */
%   | else if ( haswordvenue(A, M), haswordtitle(N, M) )
%   | | then return 0.025430003447091162;  // std dev = 0.375, 106.000 (wgt'ed) examples reached here.  /* #neg=88 #pos=18 */
%   | | else return -0.14430674986115166;  // std dev = 0.006, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.15648517598339803;  // std dev = 0.478, 1,540.000 (wgt'ed) examples reached here.  /* #neg=995 #pos=545 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return -0.043801628530931;  // std dev = 0.306, 19.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=2 */
%   | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | then if ( title(H, G), venue(H, A) )
%   | | | then return 0.04478318717842455;  // std dev = 3.364, 73.000 (wgt'ed) examples reached here.  /* #neg=59 #pos=14 */
%   | | | else return -0.04704034798828824;  // std dev = 1.342, 20.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=2 */
%   | | else if ( haswordvenue(A, I), haswordauthor(J, I) )
%   | | | then return 0.07230969291303775;  // std dev = 1.103, 9.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | | | else return 0.015278482837744271;  // std dev = 3.308, 95.000 (wgt'ed) examples reached here.  /* #neg=79 #pos=16 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.13375080327430208;  // std dev = 0.479, 1,526.000 (wgt'ed) examples reached here.  /* #neg=981 #pos=545 */
%   else if ( haswordvenue(B, D), haswordtitle(E, D) )
%   | then if ( title(F, E), venue(F, B) )
%   | | then if ( samebib(F, G), venue(G, A) )
%   | | | then return 0.5503786442080654;  // std dev = 1.788, 20.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=16 */
%   | | | else return -0.13001821483168138;  // std dev = 0.008, 59.000 (wgt'ed) examples reached here.  /* #neg=59 */
%   | | else if ( title(H, E), venue(H, A) )
%   | | | then return -0.1414537405432665;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | | | else return 0.01239241330288732;  // std dev = 1.301, 13.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=2 */
%   | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | then if ( title(K, J), venue(K, B) )
%   | | | then return 0.01044142378235797;  // std dev = 3.659, 99.000 (wgt'ed) examples reached here.  /* #neg=83 #pos=16 */
%   | | | else return 0.14447630527649827;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=2 */
%   | | else return -0.12942942677623764;  // std dev = 0.003, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordtitle(F, C) )
%   | | then return 0.12069926260427621;  // std dev = 0.479, 42.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=15 */
%   | | else return -0.01926816097215519;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else return 0.11450254316698384;  // std dev = 0.481, 1,460.000 (wgt'ed) examples reached here.  /* #neg=931 #pos=529 */
%   else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | then if ( title(I, H), venue(I, A) )
%   | | then if ( samebib(I, J), venue(J, B) )
%   | | | then return 0.6083763745021037;  // std dev = 1.953, 21.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=16 */
%   | | | else return -0.15322012840856586;  // std dev = 0.016, 62.000 (wgt'ed) examples reached here.  /* #neg=62 */
%   | | else if ( title(K, H), venue(K, B) )
%   | | | then return -0.1425091690852973;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | | else return 0.006981071651049812;  // std dev = 1.291, 12.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=2 */
%   | else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | | then return -0.0010773159195501777;  // std dev = 0.305, 106.000 (wgt'ed) examples reached here.  /* #neg=88 #pos=18 */
%   | | else return -0.1142851225020907;  // std dev = 0.001, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordauthor(F, C) )
%   | | then return 0.3646417958727116;  // std dev = 1.061, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | else return 0.03911481637762784;  // std dev = 0.459, 43.000 (wgt'ed) examples reached here.  /* #neg=30 #pos=13 */
%   | else return 0.09442600889009953;  // std dev = 0.481, 1,453.000 (wgt'ed) examples reached here.  /* #neg=924 #pos=529 */
%   else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | then if ( title(I, H), venue(I, A) )
%   | | then if ( samebib(I, J), venue(J, B) )
%   | | | then return 0.5500828926046966;  // std dev = 1.791, 20.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=16 */
%   | | | else return -0.1343585993220756;  // std dev = 0.015, 64.000 (wgt'ed) examples reached here.  /* #neg=64 */
%   | | else return -0.05238586758406972;  // std dev = 0.282, 22.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=2 */
%   | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | then if ( title(M, L), venue(M, A) )
%   | | | then return -0.01545664065943921;  // std dev = 2.872, 106.000 (wgt'ed) examples reached here.  /* #neg=90 #pos=16 */
%   | | | else return 0.038984701162171946;  // std dev = 1.279, 11.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=2 */
%   | | else return -0.10403392609396882;  // std dev = 0.003, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.07428444760961085;  // std dev = 0.481, 1,503.000 (wgt'ed) examples reached here.  /* #neg=958 #pos=545 */
%   else if ( haswordvenue(B, D), haswordtitle(E, D) )
%   | then if ( title(F, E), venue(F, B) )
%   | | then if ( samebib(F, G), venue(G, A) )
%   | | | then return 0.43802283852359797;  // std dev = 1.788, 20.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=16 */
%   | | | else return -0.1143052641511559;  // std dev = 0.008, 61.000 (wgt'ed) examples reached here.  /* #neg=61 */
%   | | else return -0.049018962249410186;  // std dev = 0.285, 22.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=2 */
%   | else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | then return -0.014135261775317836;  // std dev = 0.258, 15.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=2 */
%   | | else return -0.006475060224316117;  // std dev = 0.309, 94.000 (wgt'ed) examples reached here.  /* #neg=78 #pos=16 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordauthor(F, C) )
%   | | then return 0.17133211085176936;  // std dev = 1.203, 6.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | else return 0.06556701545170399;  // std dev = 0.477, 37.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=13 */
%   | else return 0.05622766782233072;  // std dev = 0.480, 1,468.000 (wgt'ed) examples reached here.  /* #neg=939 #pos=529 */
%   else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | then if ( title(I, H), venue(I, A) )
%   | | then if ( samebib(I, J), venue(J, B) )
%   | | | then return 0.3627370248164721;  // std dev = 2.092, 22.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=16 */
%   | | | else return -0.11851740392993065;  // std dev = 0.017, 66.000 (wgt'ed) examples reached here.  /* #neg=66 */
%   | | else if ( title(K, H), venue(K, B) )
%   | | | then return -0.1196262492845792;  // std dev = 3.73e-09, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | | else return -0.009989180726667574;  // std dev = 1.309, 14.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=2 */
%   | else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | | then return -0.020552131344142518;  // std dev = 0.287, 105.000 (wgt'ed) examples reached here.  /* #neg=87 #pos=18 */
%   | | else return -0.09391976345468366;  // std dev = 1.86e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.041405744309389016;  // std dev = 0.479, 1,525.000 (wgt'ed) examples reached here.  /* #neg=980 #pos=545 */
%   else if ( haswordvenue(A, D), haswordtitle(E, D) )
%   | then if ( title(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.34822748359205946;  // std dev = 1.792, 20.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=16 */
%   | | | else return -0.10665190445532188;  // std dev = 0.014, 58.000 (wgt'ed) examples reached here.  /* #neg=58 */
%   | | else if ( title(H, E), venue(H, B) )
%   | | | then return -0.10758975721572273;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | | else return -0.018224028482263194;  // std dev = 1.317, 15.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=2 */
%   | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | then if ( title(K, J), venue(K, B) )
%   | | | then return -0.0244171552735709;  // std dev = 2.616, 100.000 (wgt'ed) examples reached here.  /* #neg=84 #pos=16 */
%   | | | else return -0.0569641371263727;  // std dev = 1.348, 28.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=2 */
%   | | else return -0.08573598097367578;  // std dev = 0.002, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.03725613016218201;  // std dev = 0.480, 1,505.000 (wgt'ed) examples reached here.  /* #neg=960 #pos=545 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return -0.05800063656957931;  // std dev = 0.201, 20.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=2 */
%   | else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | | then return 1.0296989184239457E-4;  // std dev = 0.230, 13.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=2 */
%   | | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | | then return -0.026219645496288097;  // std dev = 2.578, 99.000 (wgt'ed) examples reached here.  /* #neg=83 #pos=16 */
%   | | | else return -0.028076960918340915;  // std dev = 2.882, 102.000 (wgt'ed) examples reached here.  /* #neg=86 #pos=16 */


Results
   AUC ROC   = 0.5641
   AUC PR    = 0.507072
   CLL	      = -0.705403
   Precision = 0.536082 at threshold = 0.5
   Recall    = 0.021346
   F1        = 0.041058


Total learning time: 44.831119775772095 seconds
Total inference time: 4.928 seconds
AUC ROC: 0.5641


Results scoring model
   AUC ROC   = 0.594639
   AUC PR    = 0.27854
   CLL	      = -0.512405
   Precision = 0.592593 at threshold = 0.5
   Recall    = 0.027539
   F1        = 0.052632


Total scoring time: 1.51 seconds
Refined model CLL: -0.512405


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.860342
   AUC PR    = 0.744618
   CLL	      = -0.569067
   Precision = 0.612403 at threshold = 0.5
   Recall    = 0.03243
   F1        = 0.061598


Total learning time: 119.63802688598633 seconds
Total inference time: 9.915 seconds
AUC ROC: 0.860342
Total revision time: 119.63802688598633
Best scored revision CLL: -0.426574


Dataset: 38_uwcse_cora, Fold: 3, Type: Transfer (trRDN-B), Time: 00:06:41
{'AUC ROC': 0.860342, 'AUC PR': 0.744618, 'CLL': -0.569067, 'Precision': [0.612403, 0.5], 'Recall': 0.03243, 'F1': 0.061598, 'Learning time': 119.63802688598633, 'Inference time': 9.915, 'parameter': {'AUC ROC': 0.860342, 'AUC PR': 0.744618, 'CLL': -0.569067, 'Precision': [0.612403, 0.5], 'Recall': 0.03243, 'F1': 0.061598, 'Learning time': 71.00190711021423, 'Inference time': 9.915}}


Starting fold 4

Target train facts examples: 8129
Target train pos examples: 747
Target train neg examples: 1068

Target test facts examples: 34429
Target test pos  examples: 2270
Target test neg examples: 3954

******************************************
Performing Parameter Learning
******************************************
Refine
0;;advisedby(A, B) :- professor(B), student(A).;true;false
0;true;publication(C, B), publication(C, A).;true;true
0;true,true;tempadvisedby(D, B), ta(E, A, F).;true;false
0;true,true,true;ta(G, D, H).;false;false
0;true,false;publication(I, A).;true;true
0;true,false,true;publication(I, J), professor(J).;false;false
0;true,false,false;publication(K, B), tempadvisedby(L, B).;false;false
1;;advisedby(A, B) :- professor(B), student(A).;true;false
1;true;publication(C, A), publication(C, B).;true;true
1;true,true;tempadvisedby(D, B), ta(E, D, F).;false;true
1;true,true,false;tempadvisedby(G, B), ta(H, A, I).;false;false
1;true,false;publication(J, B), publication(K, A).;true;true
1;true,false,true;publication(K, L), professor(L).;false;false
1;true,false,false;publication(M, B).;false;false
2;;advisedby(A, B) :- professor(B), student(A).;true;false
2;true;publication(C, B), publication(C, A).;true;true
2;true,true;tempadvisedby(D, B), publication(C, D).;false;true
2;true,true,false;ta(E, A, F).;false;false
2;true,false;tempadvisedby(G, B), publication(H, A).;true;true
2;true,false,true;projectmember(I, B).;false;false
2;true,false,false;ta(J, A, K), tempadvisedby(L, B).;false;false
3;;advisedby(A, B) :- hasposition(B, C), student(A).;true;true
3;true;ta(D, A, E), publication(F, B).;true;true
3;true,true;ta(D, G, H), publication(I, G).;true;false
3;true,true,true;publication(F, G).;false;false
3;true,false;projectmember(J, B).;false;true
3;true,false,false;publication(K, B), publication(K, A).;false;false
3;false;ta(L, A, M).;false;true
3;false,false;student(B).;false;false
4;;advisedby(A, B) :- professor(B), student(A).;true;false
4;true;publication(C, B).;true;true
4;true,true;publication(C, D), inphase(D, E).;true;true
4;true,true,true;tempadvisedby(D, F), publication(C, F).;false;false
4;true,true,false;publication(G, A).;false;false
4;true,false;projectmember(H, B).;true;true
4;true,false,true;publication(I, A).;false;false
4;true,false,false;ta(J, A, K), tempadvisedby(L, B).;false;false
5;;advisedby(A, B) :- professor(B), student(A).;true;false
5;true;publication(C, B), publication(C, A).;true;true
5;true,true;tempadvisedby(D, B).;true;false
5;true,true,true;ta(E, A, F), publication(G, D).;false;false
5;true,false;publication(H, A), publication(I, B).;true;true
5;true,false,true;tempadvisedby(J, B), ta(K, J, L).;false;false
5;true,false,false;publication(M, B).;false;false
6;;advisedby(A, B) :- student(A), professor(B).;true;false
6;true;publication(C, A).;true;true
6;true,true;publication(C, D), professor(D).;true;true
6;true,true,true;tempadvisedby(E, D), publication(C, E).;false;false
6;true,true,false;ta(F, A, G).;false;false
6;true,false;ta(H, A, I), publication(J, B).;true;true
6;true,false,true;tempadvisedby(K, B), ta(H, K, L).;false;false
6;true,false,false;tempadvisedby(M, B).;false;false
7;;advisedby(A, B) :- student(A), hasposition(B, C).;true;true
7;true;publication(D, A), publication(D, B).;false;true
7;true,false;publication(E, A), publication(F, B).;true;true
7;true,false,true;tempadvisedby(G, B), ta(H, G, I).;false;false
7;true,false,false;publication(J, B), tempadvisedby(K, B).;false;false
7;false;student(B).;false;true
7;false,false;publication(L, A).;false;false
8;;advisedby(A, B) :- professor(B), student(A).;true;false
8;true;projectmember(C, B), ta(D, A, E).;false;true
8;true,false;publication(F, A), publication(F, B).;true;true
8;true,false,true;ta(G, A, H), tempadvisedby(I, B).;false;false
8;true,false,false;tempadvisedby(J, B), ta(K, A, L).;false;false
9;;advisedby(A, B) :- professor(B), student(A).;true;false
9;true;publication(C, B).;true;true
9;true,true;publication(C, D), tempadvisedby(D, B).;true;true
9;true,true,true;publication(E, A), ta(F, D, G).;false;false
9;true,true,false;publication(H, A).;false;false
9;true,false;publication(I, A), projectmember(J, B).;false;true
9;true,false,false;tempadvisedby(K, B).;false;false


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.27854694504975613;  // std dev = 0.494, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordvenue(B, G) )
%   | | | then return 0.2867203636709409;  // std dev = 2.619, 28.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=12 */
%   | | | else return 0.44905802600860323;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | | then return 0.44905802600860323;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | | else return 0.5724346493852266;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordvenue(B, L) )
%   | | then return 0.1914822684328457;  // std dev = 0.471, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | else return 0.05814893509951237;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | else return 0.05814893509951237;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.2411503606196619;  // std dev = 0.494, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordvenue(B, G) )
%   | | | then return 0.24811816884741328;  // std dev = 2.619, 28.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=12 */
%   | | | else return 0.3851926776601658;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | | then return 0.3851926776601658;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | | else return 0.48767788391726297;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordvenue(B, L) )
%   | | then return 0.16653882456488167;  // std dev = 0.471, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | else return 0.05092203251355405;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | else return 0.05092203251355405;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.20289930723994204;  // std dev = 0.494, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordvenue(A, G) )
%   | | | then return 0.20848477447886868;  // std dev = 2.619, 28.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=12 */
%   | | | else return 0.31518052304212246;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | | then return 0.31518052304212246;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | | else return 0.3912569620992536;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordvenue(B, L) )
%   | | then return 0.1420942428155646;  // std dev = 0.471, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | else return 0.04434629760466855;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | else return 0.04434629760466855;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.16640029396569495;  // std dev = 0.494, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordvenue(B, G) )
%   | | | then return 0.17062637354018492;  // std dev = 2.619, 28.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=12 */
%   | | | else return 0.24804771389482108;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | | then return 0.24804771389482108;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | | else return 0.3005711547884894;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordvenue(B, L) )
%   | | then return 0.11914890490746433;  // std dev = 0.471, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | else return 0.03842866223690456;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | else return 0.03842866223690456;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.13360339271793026;  // std dev = 0.494, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordvenue(A, G) )
%   | | | then return 0.13664585375352234;  // std dev = 2.619, 28.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=12 */
%   | | | else return 0.19020231164899937;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | | then return 0.19020231164899937;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | | else return 0.22629823971521876;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordvenue(B, L) )
%   | | then return 0.0984134027840187;  // std dev = 0.471, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | else return 0.033154945921885746;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | else return 0.033154945921885746;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.6851194194405705;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return -0.3148805805594295;  // std dev = 1.05e-08, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else return 0.4851194194405705;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else if ( haswordtitle(H, C) )
%   | | then return 0.103255439591714;  // std dev = 0.493, 1,588.000 (wgt'ed) examples reached here.  /* #neg=924 #pos=664 */
%   | | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | | then return 0.12353511621533306;  // std dev = 3.492, 50.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=25 */
%   | | | else return 0.1500790041100246;  // std dev = 2.598, 29.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=18 */
%   else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | then if ( haswordtitle(L, M), haswordvenue(B, M) )
%   | | then return 0.08026654944252247;  // std dev = 0.471, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | else return 0.028495105925721097;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | else return 0.028495105925721097;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, B) )
%   | | then if ( samebib(F, G), venue(G, A) )
%   | | | then return 0.645008407302907;  // std dev = 0.130, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return -0.33756949348002724;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else return 0.44445526353414;  // std dev = 0.878, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else if ( haswordtitle(H, C) )
%   | | then return 0.08010652675260503;  // std dev = 0.492, 1,588.000 (wgt'ed) examples reached here.  /* #neg=924 #pos=664 */
%   | | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | | then return 0.09171342855472955;  // std dev = 3.491, 50.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=25 */
%   | | | else return 0.11788066198866198;  // std dev = 2.598, 29.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=18 */
%   else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | then if ( haswordtitle(L, M), haswordvenue(B, M) )
%   | | then return 0.06479591611329234;  // std dev = 0.471, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | else return 0.024408230135271918;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | else return 0.024408230135271918;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.06352249504455292;  // std dev = 0.491, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordvenue(A, G) )
%   | | | then return 0.059023320401544906;  // std dev = 2.619, 28.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=12 */
%   | | | else return 0.08354120304401937;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | | then return 0.08363534647238015;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | | else return 0.10455068691742762;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordvenue(B, L) )
%   | | then return 0.05187916934404051;  // std dev = 0.471, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | else return 0.02084688910874009;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | else return 0.02084688910874009;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, B) )
%   | | then if ( samebib(F, G), venue(G, A) )
%   | | | then return 0.47380799685479075;  // std dev = 0.132, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return -0.27924871979099514;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else return 0.32241378979788726;  // std dev = 0.877, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else if ( haswordtitle(H, C) )
%   | | then return 0.047280596176174104;  // std dev = 0.492, 1,588.000 (wgt'ed) examples reached here.  /* #neg=924 #pos=664 */
%   | | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | | then return 0.05287637458987124;  // std dev = 3.490, 50.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=25 */
%   | | | else return 0.06691247959565583;  // std dev = 2.598, 29.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=18 */
%   else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | then if ( haswordtitle(L, M), haswordvenue(B, M) )
%   | | then return 0.04126932998424623;  // std dev = 0.471, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | else return 0.017760671541598414;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | else return 0.017760671541598414;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.4473932103901672;  // std dev = 0.209, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return -0.2887689071719164;  // std dev = 1.05e-08, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else return 0.2939822007625129;  // std dev = 0.870, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else if ( haswordtitle(H, C) )
%   | | then return 0.03586264012586747;  // std dev = 0.492, 1,588.000 (wgt'ed) examples reached here.  /* #neg=924 #pos=664 */
%   | | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | | then return 0.03854492947400407;  // std dev = 3.490, 50.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=25 */
%   | | | else return 0.05316823613418903;  // std dev = 2.598, 29.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=18 */
%   else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | then if ( haswordtitle(L, M), haswordvenue(A, M) )
%   | | then return 0.03266374873483021;  // std dev = 0.471, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | else return 0.015098879183171418;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | else return 0.015098879183171418;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */


Results
   AUC ROC   = 0.573051
   AUC PR    = 0.439706
   CLL	      = -0.640426
   Precision = 0.503797 at threshold = 0.5
   Recall    = 0.087665
   F1        = 0.149343


Total learning time: 97.42778301239014 seconds
Total inference time: 8.278 seconds
AUC ROC: 0.573051


Results scoring model
   AUC ROC   = 0.556933
   AUC PR    = 0.482513
   CLL	      = -0.663537
   Precision = 0.706667 at threshold = 0.5
   Recall    = 0.07095
   F1        = 0.128954


Total scoring time: 1.376 seconds
Parameter learned model CLL: -0.663537


Structure after Parameter Learning
[['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(A, E), haswordtitle(F, E)', 'true,false,true': 'haswordtitle(F, G), haswordvenue(B, G)', 'true,false,false': 'haswordvenue(B, H), haswordtitle(I, H)', 'false': 'haswordvenue(A, J), haswordtitle(K, J)', 'false,true': 'haswordtitle(K, L), haswordvenue(B, L)'}, {'true,true': [0.494, 932, 676], 'true,false,true,true': [2.619, 16, 12], 'true,false,true,false': [2.306, 9, 13], 'true,false,false,true': [2.306, 9, 13], 'true,false,false,false': [1.195, 2, 5], 'false,true,true': [0.471, 12, 6], 'false,true,false': [0.4, 44, 11], 'false,false': [0.4, 44, 11]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(A, E), haswordtitle(F, E)', 'true,false,true': 'haswordtitle(F, G), haswordvenue(B, G)', 'true,false,false': 'haswordvenue(B, H), haswordtitle(I, H)', 'false': 'haswordvenue(A, J), haswordtitle(K, J)', 'false,true': 'haswordtitle(K, L), haswordvenue(B, L)'}, {'true,true': [0.494, 932, 676], 'true,false,true,true': [2.619, 16, 12], 'true,false,true,false': [2.306, 9, 13], 'true,false,false,true': [2.306, 9, 13], 'true,false,false,false': [1.195, 2, 5], 'false,true,true': [0.471, 12, 6], 'false,true,false': [0.4, 44, 11], 'false,false': [0.4, 44, 11]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(B, E), haswordtitle(F, E)', 'true,false,true': 'haswordtitle(F, G), haswordvenue(A, G)', 'true,false,false': 'haswordvenue(A, H), haswordtitle(I, H)', 'false': 'haswordvenue(A, J), haswordtitle(K, J)', 'false,true': 'haswordtitle(K, L), haswordvenue(B, L)'}, {'true,true': [0.494, 932, 676], 'true,false,true,true': [2.619, 16, 12], 'true,false,true,false': [2.306, 9, 13], 'true,false,false,true': [2.306, 9, 13], 'true,false,false,false': [1.195, 2, 5], 'false,true,true': [0.471, 12, 6], 'false,true,false': [0.4, 44, 11], 'false,false': [0.4, 44, 11]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(A, E), haswordtitle(F, E)', 'true,false,true': 'haswordtitle(F, G), haswordvenue(B, G)', 'true,false,false': 'haswordvenue(B, H), haswordtitle(I, H)', 'false': 'haswordvenue(A, J), haswordtitle(K, J)', 'false,true': 'haswordtitle(K, L), haswordvenue(B, L)'}, {'true,true': [0.494, 932, 676], 'true,false,true,true': [2.619, 16, 12], 'true,false,true,false': [2.306, 9, 13], 'true,false,false,true': [2.306, 9, 13], 'true,false,false,false': [1.195, 2, 5], 'false,true,true': [0.471, 12, 6], 'false,true,false': [0.4, 44, 11], 'false,false': [0.4, 44, 11]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(B, E), haswordtitle(F, E)', 'true,false,true': 'haswordtitle(F, G), haswordvenue(A, G)', 'true,false,false': 'haswordvenue(A, H), haswordtitle(I, H)', 'false': 'haswordvenue(A, J), haswordtitle(K, J)', 'false,true': 'haswordtitle(K, L), haswordvenue(B, L)'}, {'true,true': [0.494, 932, 676], 'true,false,true,true': [2.619, 16, 12], 'true,false,true,false': [2.306, 9, 13], 'true,false,false,true': [2.306, 9, 13], 'true,false,false,false': [1.195, 2, 5], 'false,true,true': [0.471, 12, 6], 'false,true,false': [0.4, 44, 11], 'false,false': [0.4, 44, 11]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(B, D), haswordauthor(E, D)', 'true,true': 'author(F, E), venue(F, A)', 'true,true,true': 'samebib(F, G), venue(G, B)', 'true,false': 'haswordtitle(H, C)', 'true,false,false': 'haswordvenue(A, I), haswordtitle(J, I)', 'false': 'haswordvenue(A, K), haswordtitle(L, K)', 'false,true': 'haswordtitle(L, M), haswordvenue(B, M)'}, {'true,true,true,true': [0.0, 0, 8], 'true,true,true,false': [1.05e-08, 7, 0], 'true,true,false': [0.894, 1, 4], 'true,false,true': [0.493, 924, 664], 'true,false,false,true': [3.492, 25, 25], 'true,false,false,false': [2.598, 11, 18], 'false,true,true': [0.471, 12, 6], 'false,true,false': [0.4, 44, 11], 'false,false': [0.4, 44, 11]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(A, D), haswordauthor(E, D)', 'true,true': 'author(F, E), venue(F, B)', 'true,true,true': 'samebib(F, G), venue(G, A)', 'true,false': 'haswordtitle(H, C)', 'true,false,false': 'haswordvenue(B, I), haswordtitle(J, I)', 'false': 'haswordvenue(A, K), haswordtitle(L, K)', 'false,true': 'haswordtitle(L, M), haswordvenue(B, M)'}, {'true,true,true,true': [0.13, 0, 8], 'true,true,true,false': [0.0, 7, 0], 'true,true,false': [0.878, 1, 4], 'true,false,true': [0.492, 924, 664], 'true,false,false,true': [3.491, 25, 25], 'true,false,false,false': [2.598, 11, 18], 'false,true,true': [0.471, 12, 6], 'false,true,false': [0.4, 44, 11], 'false,false': [0.4, 44, 11]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(B, E), haswordtitle(F, E)', 'true,false,true': 'haswordtitle(F, G), haswordvenue(A, G)', 'true,false,false': 'haswordvenue(A, H), haswordtitle(I, H)', 'false': 'haswordvenue(A, J), haswordtitle(K, J)', 'false,true': 'haswordtitle(K, L), haswordvenue(B, L)'}, {'true,true': [0.491, 932, 676], 'true,false,true,true': [2.619, 16, 12], 'true,false,true,false': [2.306, 9, 13], 'true,false,false,true': [2.306, 9, 13], 'true,false,false,false': [1.195, 2, 5], 'false,true,true': [0.471, 12, 6], 'false,true,false': [0.4, 44, 11], 'false,false': [0.4, 44, 11]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(A, D), haswordauthor(E, D)', 'true,true': 'author(F, E), venue(F, B)', 'true,true,true': 'samebib(F, G), venue(G, A)', 'true,false': 'haswordtitle(H, C)', 'true,false,false': 'haswordvenue(B, I), haswordtitle(J, I)', 'false': 'haswordvenue(A, K), haswordtitle(L, K)', 'false,true': 'haswordtitle(L, M), haswordvenue(B, M)'}, {'true,true,true,true': [0.132, 0, 8], 'true,true,true,false': [0.0, 7, 0], 'true,true,false': [0.877, 1, 4], 'true,false,true': [0.492, 924, 664], 'true,false,false,true': [3.49, 25, 25], 'true,false,false,false': [2.598, 11, 18], 'false,true,true': [0.471, 12, 6], 'false,true,false': [0.4, 44, 11], 'false,false': [0.4, 44, 11]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(B, D), haswordauthor(E, D)', 'true,true': 'author(F, E), venue(F, A)', 'true,true,true': 'samebib(F, G), venue(G, B)', 'true,false': 'haswordtitle(H, C)', 'true,false,false': 'haswordvenue(A, I), haswordtitle(J, I)', 'false': 'haswordvenue(B, K), haswordtitle(L, K)', 'false,true': 'haswordtitle(L, M), haswordvenue(A, M)'}, {'true,true,true,true': [0.209, 0, 8], 'true,true,true,false': [1.05e-08, 7, 0], 'true,true,false': [0.87, 1, 4], 'true,false,true': [0.492, 924, 664], 'true,false,false,true': [3.49, 25, 25], 'true,false,false,false': [2.598, 11, 18], 'false,true,true': [0.471, 12, 6], 'false,true,false': [0.4, 44, 11], 'false,false': [0.4, 44, 11]}]]
[{'': [0.24455361249545102, 0.17089843750000108], 'true': [0.24366352318011741, 0.24803717352988336], 'true,false': [0.25000000000000133, 0.2354340071343634], 'true,false,true': [0.24489795918367302, 0.2417355371900822], 'true,false,false': [0.2417355371900822, 0.20408163265306106], 'false': [0.17864514918371124, 0.15999999999999948], 'false,true': [0.22222222222222232, 0.15999999999999948]}, {'': [0.24423965838627748, 0.17036542604714272], 'true': [0.24366352318012574, 0.24554974033866342], 'true,false': [0.24813620683257942, 0.23456996391329926], 'true,false,true': [0.244897959183673, 0.2417355371900833], 'true,false,false': [0.2417355371900833, 0.20408163265306115], 'false': [0.177825777852918, 0.1600000000000007], 'false,true': [0.22222222222222207, 0.1600000000000007]}, {'': [0.2439315722131506, 0.16990467702453835], 'true': [0.2436635231801326, 0.2431019584682028], 'true,false': [0.2463115068589202, 0.2337064665173658], 'true,false,true': [0.24489795918367316, 0.24173553719008264], 'true,false,false': [0.24173553719008264, 0.20408163265306115], 'false': [0.1771174918718374, 0.15999999999999953], 'false,true': [0.22222222222222218, 0.15999999999999953]}, {'': [0.24371075047936078, 0.16953742675793848], 'true': [0.24366352318009946, 0.24136967032829015], 'true,false': [0.24498343086187796, 0.23315182613521263], 'true,false,true': [0.24489795918367355, 0.24173553719008264], 'true,false,false': [0.24173553719008264, 0.2040816326530612], 'false': [0.17655293676131073, 0.15999999999999967], 'false,true': [0.2222222222222222, 0.15999999999999967]}, {'': [0.24358519092549577, 0.16926465814576508], 'true': [0.2436635231801065, 0.24040290855188662], 'true,false': [0.2442132411930144, 0.23288524759022633], 'true,false,true': [0.24489795918367332, 0.2417355371900829], 'true,false,false': [0.2417355371900829, 0.20408163265306128], 'false': [0.17613362348097328, 0.15999999999999995], 'false,true': [0.22222222222222218, 0.15999999999999995]}, {'': [0.24352324389713026, 0.16907391107668152], 'true': [0.2400000000000002, 0.24317951547848915], 'true,false': [0.24329828880328844, 0.2399333213191563], 'true,true': [0.24888888888888902, 0.16], 'true,true,true': [0.0, 1.586032892321652e-17], 'true,false,false': [0.24382884959637013, 0.232770957821724], 'false': [0.175840397736944, 0.1599999999999999], 'false,true': [0.22222222222222215, 0.1599999999999999]}, {'': [0.24237641938627014, 0.168947125674667], 'true': [0.23207366853052985, 0.24215798761713914], 'true,false': [0.2422532854092049, 0.2398137316878471], 'true,false,false': [0.24367744885017925, 0.23271878068640273], 'true,true': [0.24142527714017994, 0.1541023402472658], 'true,true,true': [0.0021247067879051063, 0.0], 'false': [0.17564549700260337, 0.16000000000000006], 'false,true': [0.22222222222222227, 0.16000000000000006]}, {'': [0.24125961281286742, 0.16886637846587366], 'true': [0.24132678425050022, 0.23972587684079488], 'true,false': [0.24365461109316203, 0.23272676775457518], 'true,false,true': [0.24489795918367344, 0.24173553719008264], 'true,false,false': [0.24173553719008264, 0.20408163265306123], 'false': [0.1755213684354357, 0.16000000000000014], 'false,true': [0.2222222222222222, 0.16000000000000014]}, {'': [0.24122829223129308, 0.16881678838519856], 'true': [0.15268598221962743, 0.2421065321485267], 'true,false': [0.2422240846427461, 0.2396335276563406], 'true,false,false': [0.2435820926049056, 0.232700965761864], 'false': [0.1754451361327745, 0.16000000000000014], 'false,true': [0.22222222222222213, 0.16000000000000014], 'true,true': [0.14229943638166395, 0.15383594073961374], 'true,true,true': [0.0021673812557984617, -1.586032892321652e-17]}, {'': [0.24059832103093057, 0.16878728508251156], 'true': [0.14797789563569042, 0.24155237590200732], 'true,false': [0.24164576299508958, 0.2396134404501974], 'true,false,false': [0.24355155853780772, 0.23268823921157092], 'false': [0.17539978220978475, 0.16000000000000011], 'false,true': [0.22222222222222202, 0.16000000000000011], 'true,true': [0.13780206066928127, 0.15139296371093058], 'true,true,true': [0.0054760208659399845, 1.586032892321652e-17]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordvenue(B, D), haswordauthor(E, D).;true;true
5;true,true;author(F, E), venue(F, A).;true;true
5;true,true,true;samebib(F, G), venue(G, B).;true;true
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordvenue(A, D), haswordauthor(E, D).;true;true
6;true,true;author(F, E), venue(F, B).;true;true
6;true,true,true;samebib(F, G), venue(G, A).;true;true
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordvenue(A, D), haswordauthor(E, D).;true;true
8;true,true;author(F, E), venue(F, B).;true;true
8;true,true,true;samebib(F, G), venue(G, A).;true;true
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordvenue(B, D), haswordauthor(E, D).;true;true
9;true,true;author(F, E), venue(F, A).;true;true
9;true,true,true;samebib(F, G), venue(G, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.27854694504975613;  // std dev = 0.494, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordvenue(B, G) )
%   | | | then return 0.2867203636709409;  // std dev = 2.619, 28.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=12 */
%   | | | else return 0.44905802600860323;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | | then return 0.44905802600860323;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | | else return 0.5724346493852266;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordvenue(B, L) )
%   | | then return 0.1914822684328457;  // std dev = 0.471, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | else return 0.05814893509951237;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | else return 0.05814893509951237;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.2411503606196619;  // std dev = 0.494, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordvenue(B, G) )
%   | | | then return 0.24811816884741328;  // std dev = 2.619, 28.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=12 */
%   | | | else return 0.3851926776601658;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | | then return 0.3851926776601658;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | | else return 0.48767788391726297;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordvenue(B, L) )
%   | | then return 0.16653882456488167;  // std dev = 0.471, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | else return 0.05092203251355405;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | else return 0.05092203251355405;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.7825012972897073;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return -0.21749870271029265;  // std dev = 1.05e-08, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else return 0.5825012972897073;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else if ( haswordtitle(H, C) )
%   | | then return 0.2006373174408249;  // std dev = 0.493, 1,588.000 (wgt'ed) examples reached here.  /* #neg=924 #pos=664 */
%   | | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | | then return 0.2554309038467003;  // std dev = 3.509, 50.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=25 */
%   | | | else return 0.33354380143522294;  // std dev = 2.603, 29.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=18 */
%   else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | then if ( haswordtitle(L, M), haswordvenue(B, M) )
%   | | then return 0.1420942428155646;  // std dev = 0.471, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | else return 0.04434629760466855;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | else return 0.04434629760466855;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.16627278814108717;  // std dev = 0.493, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordvenue(B, G) )
%   | | | then return 0.16153884536939936;  // std dev = 2.619, 28.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=12 */
%   | | | else return 0.24389847404002757;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | | then return 0.2613806000007637;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | | else return 0.3144965494660669;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | then if ( title(L, K), venue(L, B) )
%   | | then if ( samebib(L, M), venue(M, A) )
%   | | | then return 0.3309125064279366;  // std dev = 2.628, 28.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=14 */
%   | | | else return -0.16908749357206307;  // std dev = 0.109, 35.000 (wgt'ed) examples reached here.  /* #neg=35 */
%   | | else return 0.09107688064040842;  // std dev = 0.455, 10.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=3 */
%   | else return 0.03842866223690456;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.1335135558943241;  // std dev = 0.493, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordvenue(B, G) )
%   | | | then return 0.12875910516214492;  // std dev = 2.619, 28.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=12 */
%   | | | else return 0.18678417359691227;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | | then return 0.20129574584424512;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | | else return 0.23723136491506377;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordvenue(A, L) )
%   | | then return 0.10527529174949778;  // std dev = 0.455, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | else return 0.033154945921885746;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | else return 0.02818420881593642;  // std dev = 0.381, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.10546120260430514;  // std dev = 0.492, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordvenue(B, G) )
%   | | | then return 0.10105349094222651;  // std dev = 2.619, 28.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=12 */
%   | | | else return 0.14111998948018567;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | | then return 0.152505134275848;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | | else return 0.17800353626734847;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordvenue(A, L) )
%   | | then return 0.08632343575542516;  // std dev = 0.454, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | else return 0.028495105925721097;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | else return 0.02417255067718233;  // std dev = 0.381, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.0822928503978773;  // std dev = 0.492, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordvenue(B, G) )
%   | | | then return 0.07842124408592599;  // std dev = 2.619, 28.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=12 */
%   | | | else return 0.10600521577534826;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | | then return 0.1146753959044374;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | | else return 0.1341360554815721;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordvenue(A, L) )
%   | | then return 0.07001800777768508;  // std dev = 0.453, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | else return 0.024408230135271918;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | else return 0.020674036282823993;  // std dev = 0.381, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(B, C), haswordauthor(D, C) )
%   then if ( author(E, D), venue(E, A) )
%   | then return 0.12330420492680844;  // std dev = 0.380, 16.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=8 */
%   | else return 0.3523724445670725;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   else if ( haswordvenue(A, F), haswordvenue(B, F) )
%   | then if ( haswordvenue(A, G), haswordauthor(H, G) )
%   | | then if ( author(I, H), venue(I, B) )
%   | | | then return 0.14385256607084848;  // std dev = 1.871, 14.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=7 */
%   | | | else return 0.3938525660708485;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else if ( haswordtitle(J, F) )
%   | | | then return 0.06041307562498801;  // std dev = 19.534, 1,570.000 (wgt'ed) examples reached here.  /* #neg=916 #pos=654 */
%   | | | else return 0.07652227078585;  // std dev = 4.352, 79.000 (wgt'ed) examples reached here.  /* #neg=36 #pos=43 */
%   | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | then if ( haswordtitle(L, M), haswordvenue(A, M) )
%   | | | then return 0.0562982734540786;  // std dev = 1.921, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | | else return 0.02455059281244379;  // std dev = 2.960, 54.000 (wgt'ed) examples reached here.  /* #neg=43 #pos=11 */
%   | | else return 0.017639294111430476;  // std dev = 0.380, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.048949425494600234;  // std dev = 0.492, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordvenue(B, G) )
%   | | | then return 0.042400309127383906;  // std dev = 2.619, 28.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=12 */
%   | | | else return 0.060415823425255;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | | then return 0.06691235231922725;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | | else return 0.08385940644236096;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordvenue(A, L) )
%   | | then return 0.04495465333118345;  // std dev = 0.452, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | else return 0.01693141106138156;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | else return 0.015018889909239903;  // std dev = 0.380, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(B, C), haswordauthor(D, C) )
%   then if ( author(E, D), venue(E, A) )
%   | then if ( samebib(E, F), venue(F, B) )
%   | | then return 0.45959017202411345;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return -0.2892990949909667;  // std dev = 0.095, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else return 0.2523795568313193;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   else if ( haswordvenue(A, G), haswordvenue(B, G) )
%   | then if ( haswordtitle(H, G) )
%   | | then return 0.03615640223486874;  // std dev = 0.493, 1,588.000 (wgt'ed) examples reached here.  /* #neg=924 #pos=664 */
%   | | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | | then return 0.038065458932155724;  // std dev = 3.490, 50.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=25 */
%   | | | else return 0.05370456242266642;  // std dev = 2.598, 29.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=18 */
%   | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | then if ( haswordtitle(L, M), haswordvenue(A, M) )
%   | | | then return 0.035702398552615366;  // std dev = 1.917, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | | else return 0.01836897536374207;  // std dev = 2.960, 54.000 (wgt'ed) examples reached here.  /* #neg=43 #pos=11 */
%   | | else return 0.012765108355844641;  // std dev = 0.380, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */


Results
   AUC ROC   = 0.568363
   AUC PR    = 0.425071
   CLL	      = -0.639884
   Precision = 0.546125 at threshold = 0.5
   Recall    = 0.065198
   F1        = 0.11649


Total learning time: 89.61151456832886 seconds
Total inference time: 7.548 seconds
AUC ROC: 0.568363


Results scoring model
   AUC ROC   = 0.551523
   AUC PR    = 0.471943
   CLL	      = -0.664449
   Precision = 0.671875 at threshold = 0.5
   Recall    = 0.057564
   F1        = 0.106042


Total scoring time: 1.428 seconds
Refined model CLL: -0.664449


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.573051
   AUC PR    = 0.439706
   CLL	      = -0.640426
   Precision = 0.503797 at threshold = 0.5
   Recall    = 0.087665
   F1        = 0.149343


Total learning time: 189.843297580719 seconds
Total inference time: 8.278 seconds
AUC ROC: 0.573051
Total revision time: 189.843297580719
Best scored revision CLL: -0.663537


Dataset: 38_uwcse_cora, Fold: 4, Type: Transfer (trRDN-B), Time: 00:10:07
{'AUC ROC': 0.573051, 'AUC PR': 0.439706, 'CLL': -0.640426, 'Precision': [0.503797, 0.5], 'Recall': 0.087665, 'F1': 0.149343, 'Learning time': 189.843297580719, 'Inference time': 8.278, 'parameter': {'AUC ROC': 0.573051, 'AUC PR': 0.439706, 'CLL': -0.640426, 'Precision': [0.503797, 0.5], 'Recall': 0.087665, 'F1': 0.149343, 'Learning time': 97.42778301239014, 'Inference time': 8.278}}


Starting fold 5

Target train facts examples: 8644
Target train pos examples: 550
Target train neg examples: 500

Target test facts examples: 33914
Target test pos  examples: 2467
Target test neg examples: 4522

******************************************
Performing Parameter Learning
******************************************
Refine
0;;advisedby(A, B) :- professor(B), student(A).;true;false
0;true;publication(C, B), publication(C, A).;true;true
0;true,true;tempadvisedby(D, B), ta(E, A, F).;true;false
0;true,true,true;ta(G, D, H).;false;false
0;true,false;publication(I, A).;true;true
0;true,false,true;publication(I, J), professor(J).;false;false
0;true,false,false;publication(K, B), tempadvisedby(L, B).;false;false
1;;advisedby(A, B) :- professor(B), student(A).;true;false
1;true;publication(C, A), publication(C, B).;true;true
1;true,true;tempadvisedby(D, B), ta(E, D, F).;false;true
1;true,true,false;tempadvisedby(G, B), ta(H, A, I).;false;false
1;true,false;publication(J, B), publication(K, A).;true;true
1;true,false,true;publication(K, L), professor(L).;false;false
1;true,false,false;publication(M, B).;false;false
2;;advisedby(A, B) :- professor(B), student(A).;true;false
2;true;publication(C, B), publication(C, A).;true;true
2;true,true;tempadvisedby(D, B), publication(C, D).;false;true
2;true,true,false;ta(E, A, F).;false;false
2;true,false;tempadvisedby(G, B), publication(H, A).;true;true
2;true,false,true;projectmember(I, B).;false;false
2;true,false,false;ta(J, A, K), tempadvisedby(L, B).;false;false
3;;advisedby(A, B) :- hasposition(B, C), student(A).;true;true
3;true;ta(D, A, E), publication(F, B).;true;true
3;true,true;ta(D, G, H), publication(I, G).;true;false
3;true,true,true;publication(F, G).;false;false
3;true,false;projectmember(J, B).;false;true
3;true,false,false;publication(K, B), publication(K, A).;false;false
3;false;ta(L, A, M).;false;true
3;false,false;student(B).;false;false
4;;advisedby(A, B) :- professor(B), student(A).;true;false
4;true;publication(C, B).;true;true
4;true,true;publication(C, D), inphase(D, E).;true;true
4;true,true,true;tempadvisedby(D, F), publication(C, F).;false;false
4;true,true,false;publication(G, A).;false;false
4;true,false;projectmember(H, B).;true;true
4;true,false,true;publication(I, A).;false;false
4;true,false,false;ta(J, A, K), tempadvisedby(L, B).;false;false
5;;advisedby(A, B) :- professor(B), student(A).;true;false
5;true;publication(C, B), publication(C, A).;true;true
5;true,true;tempadvisedby(D, B).;true;false
5;true,true,true;ta(E, A, F), publication(G, D).;false;false
5;true,false;publication(H, A), publication(I, B).;true;true
5;true,false,true;tempadvisedby(J, B), ta(K, J, L).;false;false
5;true,false,false;publication(M, B).;false;false
6;;advisedby(A, B) :- student(A), professor(B).;true;false
6;true;publication(C, A).;true;true
6;true,true;publication(C, D), professor(D).;true;true
6;true,true,true;tempadvisedby(E, D), publication(C, E).;false;false
6;true,true,false;ta(F, A, G).;false;false
6;true,false;ta(H, A, I), publication(J, B).;true;true
6;true,false,true;tempadvisedby(K, B), ta(H, K, L).;false;false
6;true,false,false;tempadvisedby(M, B).;false;false
7;;advisedby(A, B) :- student(A), hasposition(B, C).;true;true
7;true;publication(D, A), publication(D, B).;false;true
7;true,false;publication(E, A), publication(F, B).;true;true
7;true,false,true;tempadvisedby(G, B), ta(H, G, I).;false;false
7;true,false,false;publication(J, B), tempadvisedby(K, B).;false;false
7;false;student(B).;false;true
7;false,false;publication(L, A).;false;false
8;;advisedby(A, B) :- professor(B), student(A).;true;false
8;true;projectmember(C, B), ta(D, A, E).;false;true
8;true,false;publication(F, A), publication(F, B).;true;true
8;true,false,true;ta(G, A, H), tempadvisedby(I, B).;false;false
8;true,false,false;tempadvisedby(J, B), ta(K, A, L).;false;false
9;;advisedby(A, B) :- professor(B), student(A).;true;false
9;true;publication(C, B).;true;true
9;true,true;publication(C, D), tempadvisedby(D, B).;true;true
9;true,true,true;publication(E, A), ta(F, D, G).;false;false
9;true,true,false;publication(H, A).;false;false
9;true,false;publication(I, A), projectmember(J, B).;false;true
9;true,false,false;tempadvisedby(K, B).;false;false


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.443242102801371;  // std dev = 0.493, 805.000 (wgt'ed) examples reached here.  /* #neg=334 #pos=471 */
%   | else return 0.7291166770349955;  // std dev = 0.335, 31.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=27 */
%   else if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | then if ( author(G, F), venue(G, A) )
%   | | then if ( author(H, F), venue(H, B) )
%   | | | then return 0.3581489350995122;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return -0.14185106490048777;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else if ( author(I, F), venue(I, B) )
%   | | | then return 0.2581489350995122;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | | else return 0.15083186192878065;  // std dev = 2.913, 41.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=12 */
%   | else if ( haswordvenue(B, J), haswordauthor(K, J) )
%   | | then if ( author(L, K), venue(L, A) )
%   | | | then return 0.23314893509951226;  // std dev = 1.369, 8.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=3 */
%   | | | else return 0.14762261931003867;  // std dev = 2.796, 38.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=11 */
%   | | else return 0.051131391239862906;  // std dev = 0.395, 114.000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.3803254334818479;  // std dev = 0.493, 805.000 (wgt'ed) examples reached here.  /* #neg=334 #pos=471 */
%   | else return 0.6157326050686436;  // std dev = 0.335, 31.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=27 */
%   else if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | then if ( author(G, F), venue(G, B) )
%   | | then if ( samebib(G, H), venue(H, A) )
%   | | | then return 0.6177366470047175;  // std dev = 0.888, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.17209901159778193;  // std dev = 0.054, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( author(I, F), venue(I, A) )
%   | | | then return -0.12544463852839138;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.13146151704002107;  // std dev = 2.913, 41.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=12 */
%   | else if ( haswordvenue(B, J), haswordauthor(K, J) )
%   | | then if ( author(L, K), venue(L, B) )
%   | | | then return 0.03208538409086366;  // std dev = 0.889, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else return 0.15483675235342564;  // std dev = 2.978, 41.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=13 */
%   | | else return 0.04479249977758044;  // std dev = 0.395, 114.000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordtitle(F, D) )
%   | | then if ( author(G, E), venue(G, A) )
%   | | | then return -0.2736002340839688;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | | else return 0.5180664325826982;  // std dev = 1.990, 24.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=19 */
%   | | else if ( haswordtitle(H, C) )
%   | | | then return -0.12360023408396874;  // std dev = 1.597, 20.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=3 */
%   | | | else return 0.5007520519797396;  // std dev = 0.943, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | else if ( haswordtitle(I, C) )
%   | | then return 0.3226813064206765;  // std dev = 0.491, 753.000 (wgt'ed) examples reached here.  /* #neg=304 #pos=449 */
%   | | else return 0.47549952672721435;  // std dev = 0.343, 22.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=19 */
%   else if ( haswordvenue(B, J), haswordauthor(K, J) )
%   | then if ( author(L, K), venue(L, A) )
%   | | then return 0.21289258987079;  // std dev = 0.490, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | else return 0.09014749694966882;  // std dev = 0.439, 44.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | else return 0.06261127797761692;  // std dev = 0.412, 160.000 (wgt'ed) examples reached here.  /* #neg=124 #pos=36 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordtitle(E, D) )
%   | then if ( haswordauthor(F, D) )
%   | | then if ( author(G, F), venue(G, B) )
%   | | | then return -0.3421447211654781;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | | else return 0.4439497358396689;  // std dev = 1.933, 24.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=19 */
%   | | else return 0.24558335443458965;  // std dev = 0.488, 783.000 (wgt'ed) examples reached here.  /* #neg=323 #pos=460 */
%   | else return 0.3984727196694333;  // std dev = 0.293, 21.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=19 */
%   else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | then if ( author(J, I), venue(J, B) )
%   | | then if ( samebib(J, K), venue(K, A) )
%   | | | then return 0.4932557994813913;  // std dev = 0.884, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.15791371844371432;  // std dev = 0.052, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( author(L, I), venue(L, A) )
%   | | | then return -0.11968236577482122;  // std dev = 0.002, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.10197511522228299;  // std dev = 2.911, 41.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=12 */
%   | else return 0.05173019446312223;  // std dev = 0.415, 160.000 (wgt'ed) examples reached here.  /* #neg=124 #pos=36 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordauthor(F, C) )
%   | | then return 0.48195454769050805;  // std dev = 0.089, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else if ( haswordtitle(G, D) )
%   | | | then return 0.12744613438431063;  // std dev = 2.309, 27.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=14 */
%   | | | else return -0.19380573934018383;  // std dev = 1.888, 24.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=6 */
%   | else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | then if ( haswordtitle(J, H) )
%   | | | then return 0.14651482085004244;  // std dev = 2.258, 26.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=14 */
%   | | | else return -0.09875565407120741;  // std dev = 1.793, 23.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=6 */
%   | | else return 0.21321058052138966;  // std dev = 0.484, 726.000 (wgt'ed) examples reached here.  /* #neg=278 #pos=448 */
%   else if ( haswordvenue(A, K), haswordauthor(L, K) )
%   | then if ( author(M, L), venue(M, B) )
%   | | then return 0.12091489934182512;  // std dev = 0.381, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | else return 0.07255666926319852;  // std dev = 0.442, 44.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | else return 0.04421286329537576;  // std dev = 0.415, 160.000 (wgt'ed) examples reached here.  /* #neg=124 #pos=36 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordvenue(A, D) )
%   | | then return 0.36850508046536934;  // std dev = 0.087, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else if ( author(F, E), venue(F, A) )
%   | | | then return 0.08414299290881079;  // std dev = 2.515, 31.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=15 */
%   | | | else return -0.11243613633082675;  // std dev = 1.498, 20.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=5 */
%   | else if ( haswordtitle(G, C) )
%   | | then return 0.14818438556932864;  // std dev = 0.487, 753.000 (wgt'ed) examples reached here.  /* #neg=304 #pos=449 */
%   | | else return 0.2407628547046605;  // std dev = 0.340, 22.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=19 */
%   else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | then if ( author(J, I), venue(J, B) )
%   | | then if ( author(K, I), venue(K, A) )
%   | | | then return 0.26449821204462826;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return -0.20849022011887958;  // std dev = 0.032, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return 0.08497461331935449;  // std dev = 0.451, 46.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=14 */
%   | else return 0.034623203855925;  // std dev = 0.409, 160.000 (wgt'ed) examples reached here.  /* #neg=124 #pos=36 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordtitle(E, D) )
%   | then return 0.10551607470224578;  // std dev = 0.481, 815.000 (wgt'ed) examples reached here.  /* #neg=336 #pos=479 */
%   | else return 0.24379421278802377;  // std dev = 0.284, 21.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=19 */
%   else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | then if ( author(H, G), venue(H, A) )
%   | | then if ( samebib(H, I), venue(I, B) )
%   | | | then return 0.5262287886696334;  // std dev = 0.885, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.25917791425683234;  // std dev = 0.079, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( author(J, G), venue(J, B) )
%   | | | then return -0.1708112029502701;  // std dev = 0.021, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.06238406020550974;  // std dev = 2.850, 41.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=12 */
%   | else if ( haswordvenue(A, K), haswordauthor(L, K) )
%   | | then if ( author(M, L), venue(M, B) )
%   | | | then return 0.07220468479659325;  // std dev = 1.069, 8.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=3 */
%   | | | else return 0.07164861510601117;  // std dev = 2.777, 38.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=11 */
%   | | else return 0.012176792746538757;  // std dev = 0.395, 114.000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordtitle(F, D) )
%   | | then if ( author(G, E), venue(G, B) )
%   | | | then return -0.3509765847701636;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | | else return 0.2193555489273669;  // std dev = 1.866, 24.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=19 */
%   | | else return -0.13430392689454926;  // std dev = 0.389, 29.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=11 */
%   | else if ( haswordtitle(H, C) )
%   | | then return 0.08856009877884895;  // std dev = 0.484, 753.000 (wgt'ed) examples reached here.  /* #neg=304 #pos=449 */
%   | | else return 0.16069938570806572;  // std dev = 0.339, 22.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=19 */
%   else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | then if ( author(K, J), venue(K, A) )
%   | | then if ( samebib(K, L), venue(L, B) )
%   | | | then return 0.4105825660800685;  // std dev = 0.884, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.212843370492004;  // std dev = 0.068, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.037683782283128076;  // std dev = 0.432, 44.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | else return 0.024378700505118624;  // std dev = 0.408, 160.000 (wgt'ed) examples reached here.  /* #neg=124 #pos=36 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordauthor(D, C) )
%   then if ( author(E, D), venue(E, A) )
%   | then if ( samebib(E, F), venue(F, B) )
%   | | then return 0.38462152507118125;  // std dev = 0.189, 22.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=21 */
%   | | else return -0.3648936923635365;  // std dev = 0.137, 27.000 (wgt'ed) examples reached here.  /* #neg=27 */
%   | else if ( author(G, D), venue(G, B) )
%   | | then return -0.12478574156051424;  // std dev = 0.302, 14.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=3 */
%   | | else return 0.08104061737317296;  // std dev = 0.419, 52.000 (wgt'ed) examples reached here.  /* #neg=30 #pos=22 */
%   else if ( haswordvenue(A, H), haswordvenue(B, H) )
%   | then if ( haswordtitle(I, H) )
%   | | then return 0.06659143159547004;  // std dev = 0.484, 753.000 (wgt'ed) examples reached here.  /* #neg=304 #pos=449 */
%   | | else return 0.12887224182892013;  // std dev = 0.339, 22.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=19 */
%   | else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | | then return -0.008875711474965867;  // std dev = 0.378, 66.000 (wgt'ed) examples reached here.  /* #neg=54 #pos=12 */
%   | | else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | | | then return 0.0718726949882021;  // std dev = 4.045, 83.000 (wgt'ed) examples reached here.  /* #neg=59 #pos=24 */
%   | | | else return -0.21289306074163736;  // std dev = 0.097, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordtitle(E, D) )
%   | then return 0.04381627796095814;  // std dev = 0.475, 815.000 (wgt'ed) examples reached here.  /* #neg=336 #pos=479 */
%   | else if ( haswordvenue(B, F), haswordtitle(G, F) )
%   | | then return 0.0833494417048907;  // std dev = 0.400, 10.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   | | else return 0.2187336217020538;  // std dev = 0.053, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | then if ( title(J, I), venue(J, B) )
%   | | then if ( title(K, I), venue(K, A) )
%   | | | then return 0.6356623567843183;  // std dev = 1.745, 29.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=26 */
%   | | | else return -0.20279334601730548;  // std dev = 0.290, 69.000 (wgt'ed) examples reached here.  /* #neg=69 */
%   | | else return -0.20513483117588255;  // std dev = 0.084, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | | then if ( haswordauthor(N, L) )
%   | | | then return 0.08411207717741839;  // std dev = 0.577, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | | else return 0.05427038888659906;  // std dev = 4.052, 86.000 (wgt'ed) examples reached here.  /* #neg=62 #pos=24 */
%   | | else return -0.2108935226903544;  // std dev = 0.188, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */


Results
   AUC ROC   = 0.549349
   AUC PR    = 0.397373
   CLL	      = -0.705079
   Precision = 0.372112 at threshold = 0.5
   Recall    = 0.927037
   F1        = 0.531058


Total learning time: 56.46634483337402 seconds
Total inference time: 12.323 seconds
AUC ROC: 0.549349


Results scoring model
   AUC ROC   = 0.705429
   AUC PR    = 0.702643
   CLL	      = -0.598949
   Precision = 0.633838 at threshold = 0.5
   Recall    = 0.912727
   F1        = 0.748137


Total scoring time: 1.187 seconds
Parameter learned model CLL: -0.598949


Structure after Parameter Learning
[['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'false': 'haswordvenue(A, E), haswordauthor(F, E)', 'false,true': 'author(G, F), venue(G, A)', 'false,true,true': 'author(H, F), venue(H, B)', 'false,true,false': 'author(I, F), venue(I, B)', 'false,false': 'haswordvenue(B, J), haswordauthor(K, J)', 'false,false,true': 'author(L, K), venue(L, A)'}, {'true,true': [0.493, 334, 471], 'true,false': [0.335, 4, 27], 'false,true,true,true': [1.0, 2, 2], 'false,true,true,false': [0.0, 4, 0], 'false,true,false,true': [1.095, 3, 2], 'false,true,false,false': [2.913, 29, 12], 'false,false,true,true': [1.369, 5, 3], 'false,false,true,false': [2.796, 27, 11], 'false,false,false': [0.395, 92, 22]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'false': 'haswordvenue(A, E), haswordauthor(F, E)', 'false,true': 'author(G, F), venue(G, B)', 'false,true,true': 'samebib(G, H), venue(H, A)', 'false,true,false': 'author(I, F), venue(I, A)', 'false,false': 'haswordvenue(B, J), haswordauthor(K, J)', 'false,false,true': 'author(L, K), venue(L, B)'}, {'true,true': [0.493, 334, 471], 'true,false': [0.335, 4, 27], 'false,true,true,true': [0.888, 1, 4], 'false,true,true,false': [0.054, 5, 0], 'false,true,false,true': [0.0, 3, 0], 'false,true,false,false': [2.913, 29, 12], 'false,false,true,true': [0.889, 4, 1], 'false,false,true,false': [2.978, 28, 13], 'false,false,false': [0.395, 92, 22]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(B, D), haswordauthor(E, D)', 'true,true': 'haswordtitle(F, D)', 'true,true,true': 'author(G, E), venue(G, A)', 'true,true,false': 'haswordtitle(H, C)', 'true,false': 'haswordtitle(I, C)', 'false': 'haswordvenue(B, J), haswordauthor(K, J)', 'false,true': 'author(L, K), venue(L, A)'}, {'true,true,true,true': [0.0, 8, 0], 'true,true,true,false': [1.99, 5, 19], 'true,true,false,true': [1.597, 17, 3], 'true,true,false,false': [0.943, 1, 8], 'true,false,true': [0.491, 304, 449], 'true,false,false': [0.343, 3, 19], 'false,true,true': [0.49, 6, 4], 'false,true,false': [0.439, 32, 12], 'false,false': [0.412, 124, 36]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(A, D), haswordtitle(E, D)', 'true,true': 'haswordauthor(F, D)', 'true,true,true': 'author(G, F), venue(G, B)', 'false': 'haswordvenue(A, H), haswordauthor(I, H)', 'false,true': 'author(J, I), venue(J, B)', 'false,true,true': 'samebib(J, K), venue(K, A)', 'false,true,false': 'author(L, I), venue(L, A)'}, {'true,true,true,true': [0.0, 8, 0], 'true,true,true,false': [1.933, 5, 19], 'true,true,false': [0.488, 323, 460], 'true,false': [0.293, 2, 19], 'false,true,true,true': [0.884, 1, 4], 'false,true,true,false': [0.052, 5, 0], 'false,true,false,true': [0.002, 3, 0], 'false,true,false,false': [2.911, 29, 12], 'false,false': [0.415, 124, 36]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(A, D), haswordauthor(E, D)', 'true,true': 'haswordauthor(F, C)', 'true,true,false': 'haswordtitle(G, D)', 'true,false': 'haswordvenue(B, H), haswordauthor(I, H)', 'true,false,true': 'haswordtitle(J, H)', 'false': 'haswordvenue(A, K), haswordauthor(L, K)', 'false,true': 'author(M, L), venue(M, B)'}, {'true,true,true': [0.089, 0, 10], 'true,true,false,true': [2.309, 13, 14], 'true,true,false,false': [1.888, 18, 6], 'true,false,true,true': [2.258, 12, 14], 'true,false,true,false': [1.793, 17, 6], 'true,false,false': [0.484, 278, 448], 'false,true,true': [0.381, 6, 4], 'false,true,false': [0.442, 32, 12], 'false,false': [0.415, 124, 36]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(B, D), haswordauthor(E, D)', 'true,true': 'haswordvenue(A, D)', 'true,true,false': 'author(F, E), venue(F, A)', 'true,false': 'haswordtitle(G, C)', 'false': 'haswordvenue(B, H), haswordauthor(I, H)', 'false,true': 'author(J, I), venue(J, B)', 'false,true,true': 'author(K, I), venue(K, A)'}, {'true,true,true': [0.087, 0, 10], 'true,true,false,true': [2.515, 16, 15], 'true,true,false,false': [1.498, 15, 5], 'true,false,true': [0.487, 304, 449], 'true,false,false': [0.34, 3, 19], 'false,true,true,true': [1.0, 2, 2], 'false,true,true,false': [0.032, 4, 0], 'false,true,false': [0.451, 32, 14], 'false,false': [0.409, 124, 36]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(B, D), haswordtitle(E, D)', 'false': 'haswordvenue(B, F), haswordauthor(G, F)', 'false,true': 'author(H, G), venue(H, A)', 'false,true,true': 'samebib(H, I), venue(I, B)', 'false,true,false': 'author(J, G), venue(J, B)', 'false,false': 'haswordvenue(A, K), haswordauthor(L, K)', 'false,false,true': 'author(M, L), venue(M, B)'}, {'true,true': [0.481, 336, 479], 'true,false': [0.284, 2, 19], 'false,true,true,true': [0.885, 1, 4], 'false,true,true,false': [0.079, 5, 0], 'false,true,false,true': [0.021, 3, 0], 'false,true,false,false': [2.85, 29, 12], 'false,false,true,true': [1.069, 5, 3], 'false,false,true,false': [2.777, 27, 11], 'false,false,false': [0.395, 92, 22]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(A, D), haswordauthor(E, D)', 'true,true': 'haswordtitle(F, D)', 'true,true,true': 'author(G, E), venue(G, B)', 'true,false': 'haswordtitle(H, C)', 'false': 'haswordvenue(B, I), haswordauthor(J, I)', 'false,true': 'author(K, J), venue(K, A)', 'false,true,true': 'samebib(K, L), venue(L, B)'}, {'true,true,true,true': [0.0, 8, 0], 'true,true,true,false': [1.866, 5, 19], 'true,true,false': [0.389, 18, 11], 'true,false,true': [0.484, 304, 449], 'true,false,false': [0.339, 3, 19], 'false,true,true,true': [0.884, 1, 4], 'false,true,true,false': [0.068, 5, 0], 'false,true,false': [0.432, 32, 12], 'false,false': [0.408, 124, 36]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordauthor(D, C)', 'true': 'author(E, D), venue(E, A)', 'true,true': 'samebib(E, F), venue(F, B)', 'true,false': 'author(G, D), venue(G, B)', 'false': 'haswordvenue(A, H), haswordvenue(B, H)', 'false,true': 'haswordtitle(I, H)', 'false,false': 'haswordvenue(B, J), haswordtitle(K, J)', 'false,false,false': 'haswordvenue(A, L), haswordtitle(M, L)'}, {'true,true,true': [0.189, 1, 21], 'true,true,false': [0.137, 27, 0], 'true,false,true': [0.302, 11, 3], 'true,false,false': [0.419, 30, 22], 'false,true,true': [0.484, 304, 449], 'false,true,false': [0.339, 3, 19], 'false,false,true': [0.378, 54, 12], 'false,false,false,true': [4.045, 59, 24], 'false,false,false,false': [0.097, 11, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(A, D), haswordtitle(E, D)', 'true,false': 'haswordvenue(B, F), haswordtitle(G, F)', 'false': 'haswordvenue(B, H), haswordtitle(I, H)', 'false,true': 'title(J, I), venue(J, B)', 'false,true,true': 'title(K, I), venue(K, A)', 'false,false': 'haswordvenue(A, L), haswordtitle(M, L)', 'false,false,true': 'haswordauthor(N, L)'}, {'true,true': [0.475, 336, 479], 'true,false,true': [0.4, 2, 8], 'true,false,false': [0.053, 0, 11], 'false,true,true,true': [1.745, 3, 26], 'false,true,true,false': [0.29, 69, 0], 'false,true,false': [0.084, 7, 0], 'false,false,true,true': [0.577, 3, 2], 'false,false,true,false': [4.052, 62, 24], 'false,false,false': [0.188, 18, 0]}]]
[{'': [0.24084270048762138, 0.18394619617433927], 'true': [0.2427591528104568, 0.11238293444328941], 'false': [0.20850480109739317, 0.17437500000000122], 'false,true': [0.18750000000000003, 0.21172022684309966], 'false,true,false': [0.24000000000000005, 0.20701963117192096], 'false,true,true': [0.25, 0.0], 'false,false': [0.21172022684309966, 0.15574022776238935], 'false,false,true': [0.2343749999999999, 0.20567867036011028]}, {'': [0.2399033482150972, 0.18252330885040377], 'true': [0.24275915281046145, 0.11238293444328855], 'false': [0.20592061191814837, 0.17367192440578533], 'false,true': [0.2350822198556688, 0.19709788723384572], 'false,true,true': [0.15765514315630633, 0.000589112755009269], 'false,true,false': [0.0, 0.2070196311719211], 'false,false': [0.21144860141020058, 0.15574022776238897], 'false,false,true': [0.15813340211730062, 0.21631263993790428]}, {'': [0.23897284752961942, 0.17912342849688215], 'true': [0.23816220413684797, 0.237883468142118], 'true,true': [0.24121093749999967, 0.2020150031606589], 'true,true,true': [0.0, 0.16493055555555525], 'true,false': [0.2407298649580488, 0.11776859504132223], 'true,true,false': [0.1275, 0.09876543209876548], 'false': [0.20409843247386372, 0.1700567734444977], 'false,true': [0.23997827198757243, 0.19315385722750952]}, {'': [0.23502517892053243, 0.1786402196684199], 'true': [0.23827989031810698, 0.08594495993348654], 'true,true': [0.2326087224480802, 0.23851152885341825], 'true,true,true': [-2.7755575615628914e-17, 0.15565883943055278], 'false': [0.19464787862001495, 0.17260435553742492], 'false,true': [0.18440258624982694, 0.19576707933744386], 'false,true,false': [1.8833589194531635e-06, 0.2067414502280655], 'false,true,true': [0.1562577653547515, 0.0005365366074951861]}, {'': [0.23270080113433506, 0.17624601853825878], 'true': [0.20368803305355093, 0.23350174129019727], 'true,false': [0.18461210189721106, 0.234711241662341], 'true,true': [0.007842912375251077, 0.2001680381608849], 'true,true,false': [0.1974821747294937, 0.14855287585393576], 'true,false,true': [0.19604857447404467, 0.13976355320865103], 'false': [0.18613249915923558, 0.17255827633966073], 'false,true': [0.14517668846381257, 0.19500757898766147]}, {'': [0.2291904070832306, 0.17588960781621835], 'true': [0.16734961109118077, 0.2335368170969766], 'true,false': [0.236743411138548, 0.11545637472411086], 'false': [0.20052087633671783, 0.16713331093753483], 'false,true': [0.18109667390330203, 0.2034181612780171], 'false,true,true': [0.25007408439255746, 0.000260234933799966], 'true,true': [0.007570865085779377, 0.17726115295959596], 'true,true,false': [0.20411229511004153, 0.11215278506501256]}, {'': [0.22809541788706914, 0.17497323482989788], 'true': [0.23140938536675007, 0.08084138287698762], 'false': [0.1976084793822098, 0.16705402051806129], 'false,true': [0.23322944634107948, 0.1881098152423769], 'false,true,true': [0.15678633489044058, 0.0012407132908075936], 'false,true,false': [0.0001518000692796682, 0.1981551113729638], 'false,false': [0.19256430842109734, 0.1557402277623892], 'false,false,true': [0.14295116585082987, 0.2030091267648927]}, {'': [0.22782333632685767, 0.17155996296761322], 'true': [0.17193183982564797, 0.23127121461115419], 'true,false': [0.23452652531909937, 0.11479445910908005], 'true,true': [0.16976199207675305, 0.15095395023671515], 'false': [0.18551293609545064, 0.166697685977796], 'false,true': [0.1757313734550513, 0.1870427399915502], 'false,true,true': [0.1562070932193649, 0.0009257044953548121], 'true,true,true': [0.0, 0.14502963708700967]}, {'': [0.1662898800211547, 0.22047426250860724], 'false': [0.23116837580266875, 0.16665409761851568], 'false,true': [0.23445890106710748, 0.11477388152788098], 'false,false': [0.14266349437855433, 0.18257080695753253], 'false,false,false': [0.19716489348686964, 0.0008496898028818135], 'true': [0.1653635108194489, 0.16513523854229611], 'true,true': [0.035837234523260465, 0.018678799946101002], 'true,false': [0.09148131473744112, 0.17597873412867807]}, {'': [0.22262877331892472, 0.16719221896780836], 'true': [0.2259380537949912, 0.08230469352838708], 'false': [0.17048879092991368, 0.16387857975622197], 'false,true': [0.1784118690867108, 0.0010194030712145324], 'false,true,true': [0.10502781845695426, 0.001221471689945631], 'false,false': [0.18415001261428857, 0.0019662620148050486], 'false,false,true': [0.0666152029517345, 0.19093450176093338], 'true,false': [0.16019112518319695, 0.0027708102868479415]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;false;haswordvenue(A, E), haswordauthor(F, E).;true;true
0;false,true;author(G, F), venue(G, A).;true;true
0;false,true,true;author(H, F), venue(H, B).;true;true
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;false;haswordvenue(A, E), haswordauthor(F, E).;true;true
1;false,true;author(G, F), venue(G, B).;true;true
1;false,true,true;samebib(G, H), venue(H, A).;true;true
1;false,true,false;author(I, F), venue(I, A).;true;true
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordvenue(B, D), haswordauthor(E, D).;true;true
2;true,true;haswordtitle(F, D).;true;true
2;true,true,true;author(G, E), venue(G, A).;true;true
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordvenue(A, D), haswordtitle(E, D).;true;true
3;true,true;haswordauthor(F, D).;true;true
3;true,true,true;author(G, F), venue(G, B).;true;true
3;false;haswordvenue(A, H), haswordauthor(I, H).;true;true
3;false,true;author(J, I), venue(J, B).;true;true
3;false,true,true;samebib(J, K), venue(K, A).;true;true
3;false,true,false;author(L, I), venue(L, A).;true;true
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;false;haswordvenue(B, H), haswordauthor(I, H).;true;true
5;false,true;author(J, I), venue(J, B).;true;true
5;false,true,true;author(K, I), venue(K, A).;true;true
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;false;haswordvenue(B, F), haswordauthor(G, F).;true;true
6;false,true;author(H, G), venue(H, A).;true;true
6;false,true,true;samebib(H, I), venue(I, B).;true;true
6;false,true,false;author(J, G), venue(J, B).;true;true
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordvenue(A, D), haswordauthor(E, D).;true;true
7;true,true;haswordtitle(F, D).;true;true
7;true,true,true;author(G, E), venue(G, B).;true;true
7;false;haswordvenue(B, I), haswordauthor(J, I).;true;true
7;false,true;author(K, J), venue(K, A).;true;true
7;false,true,true;samebib(K, L), venue(L, B).;true;true
8;;samevenue(A, B) :- haswordvenue(A, C), haswordauthor(D, C).;true;true
8;false;haswordvenue(A, H), haswordvenue(B, H).;true;true
8;false,false;haswordvenue(B, J), haswordtitle(K, J).;true;true
8;false,false,false;haswordvenue(A, L), haswordtitle(M, L).;true;true
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;false;haswordvenue(B, H), haswordtitle(I, H).;true;true
9;false,true;title(J, I), venue(J, B).;true;true
9;false,true,true;title(K, I), venue(K, A).;true;true
9;false,false;haswordvenue(A, L), haswordtitle(M, L).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.443242102801371;  // std dev = 0.493, 805.000 (wgt'ed) examples reached here.  /* #neg=334 #pos=471 */
%   | else return 0.7291166770349955;  // std dev = 0.335, 31.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=27 */
%   else if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | then if ( author(G, F), venue(G, B) )
%   | | then if ( samebib(G, H), venue(H, A) )
%   | | | then return 0.6581489350995122;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.14185106490048777;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.13087620782678508;  // std dev = 0.445, 44.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | | then if ( haswordtitle(K, I) )
%   | | | then return 0.0581489350995122;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else return 0.17522210583121967;  // std dev = 2.980, 41.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=13 */
%   | | else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | | | then return 0.04458961306561406;  // std dev = 2.992, 59.000 (wgt'ed) examples reached here.  /* #neg=48 #pos=11 */
%   | | | else return 0.05814893509951237;  // std dev = 2.966, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.3803254334818479;  // std dev = 0.493, 805.000 (wgt'ed) examples reached here.  /* #neg=334 #pos=471 */
%   | else if ( haswordauthor(E, C) )
%   | | then return 0.7447648631331598;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | | then return 0.5225426409109375;  // std dev = 1.247, 9.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=7 */
%   | | | else return 0.6336537520220485;  // std dev = 1.333, 18.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=16 */
%   else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | then if ( haswordtitle(I, J), haswordvenue(A, J) )
%   | | then return -0.14920706375662926;  // std dev = 0.014, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | | else return 0.13042535503308014;  // std dev = 0.449, 91.000 (wgt'ed) examples reached here.  /* #neg=65 #pos=26 */
%   | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | then return 0.13020379682094502;  // std dev = 0.447, 91.000 (wgt'ed) examples reached here.  /* #neg=65 #pos=26 */
%   | | else return -0.157055001072838;  // std dev = 0.026, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordtitle(E, D) )
%   | then return 0.31263928154612025;  // std dev = 0.492, 815.000 (wgt'ed) examples reached here.  /* #neg=336 #pos=479 */
%   | else return 0.5197422359820001;  // std dev = 0.288, 21.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=19 */
%   else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | then if ( author(H, G), venue(H, A) )
%   | | then if ( samebib(H, I), venue(I, B) )
%   | | | then return 0.6214352303256121;  // std dev = 0.900, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.17519568843284775;  // std dev = 0.017, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.09770631626511234;  // std dev = 0.437, 44.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | else if ( haswordvenue(A, J), haswordauthor(K, J) )
%   | | then if ( author(L, K), venue(L, A) )
%   | | | then return 0.019815884960977793;  // std dev = 0.799, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else return 0.14198082739826873;  // std dev = 2.918, 41.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=13 */
%   | | else if ( haswordvenue(B, M), haswordtitle(N, M) )
%   | | | then return 0.026287878239817725;  // std dev = 2.970, 59.000 (wgt'ed) examples reached here.  /* #neg=48 #pos=11 */
%   | | | else return 0.03924892013093195;  // std dev = 2.954, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordauthor(D, C) )
%   | then return 0.5819275656225978;  // std dev = 0.097, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | else if ( haswordtitle(E, C) )
%   | | then return 0.24208943059155288;  // std dev = 0.493, 799.000 (wgt'ed) examples reached here.  /* #neg=334 #pos=465 */
%   | | else return 0.3577318509070817;  // std dev = 0.350, 27.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=23 */
%   else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | then if ( author(H, G), venue(H, B) )
%   | | then if ( samebib(H, I), venue(I, A) )
%   | | | then return 0.5114291916708696;  // std dev = 0.902, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.15106926762487777;  // std dev = 0.016, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.08337896451712067;  // std dev = 0.436, 44.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | else if ( haswordvenue(B, J), haswordauthor(K, J) )
%   | | then if ( author(L, K), venue(L, A) )
%   | | | then return 0.15517457822154446;  // std dev = 1.230, 8.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=3 */
%   | | | else return 0.09958246779503462;  // std dev = 2.765, 38.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=11 */
%   | | else return 0.028110815768512192;  // std dev = 0.392, 114.000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordtitle(E, D) )
%   | then if ( haswordvenue(B, D), haswordauthor(F, C) )
%   | | then return 0.5204549813412996;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else if ( haswordauthor(G, D) )
%   | | | then return 0.12240938920594278;  // std dev = 2.596, 27.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=14 */
%   | | | else return 0.1883441113578754;  // std dev = 13.751, 782.000 (wgt'ed) examples reached here.  /* #neg=323 #pos=459 */
%   | else return 0.3092901402027292;  // std dev = 0.284, 21.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=19 */
%   else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | then if ( author(J, I), venue(J, A) )
%   | | then if ( samebib(J, K), venue(K, B) )
%   | | | then return 0.4822047229666261;  // std dev = 0.906, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.1703083761495978;  // std dev = 0.018, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.0663116624334353;  // std dev = 0.432, 44.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | else if ( haswordvenue(A, L), haswordauthor(M, L) )
%   | | then return 0.09014134932594184;  // std dev = 0.439, 46.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=14 */
%   | | else return 0.024208401653998606;  // std dev = 0.392, 114.000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordvenue(A, D) )
%   | | then return 0.3427390259260454;  // std dev = 0.061, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else if ( haswordtitle(F, D) )
%   | | | then return 0.07659511239409988;  // std dev = 2.596, 27.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=14 */
%   | | | else return -0.23190248088831888;  // std dev = 1.885, 24.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=6 */
%   | else if ( haswordtitle(G, C) )
%   | | then return 0.15491726955600213;  // std dev = 0.491, 753.000 (wgt'ed) examples reached here.  /* #neg=304 #pos=449 */
%   | | else return 0.2155996251591844;  // std dev = 0.337, 22.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=19 */
%   else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | then if ( author(J, I), venue(J, B) )
%   | | then return 0.11651377696105021;  // std dev = 0.386, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | else return 0.05447431426209481;  // std dev = 0.432, 44.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | then return 0.006589002550679023;  // std dev = 0.377, 66.000 (wgt'ed) examples reached here.  /* #neg=54 #pos=12 */
%   | | else return 0.05711471457191525;  // std dev = 0.425, 94.000 (wgt'ed) examples reached here.  /* #neg=70 #pos=24 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordauthor(D, C) )
%   then if ( haswordtitle(E, C) )
%   | then if ( author(F, D), venue(F, B) )
%   | | then return -0.4639682943716279;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | else return 0.23013931111727698;  // std dev = 0.387, 31.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=21 */
%   | else if ( author(G, D), venue(G, A) )
%   | | then return -0.30155313352557794;  // std dev = 0.326, 24.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=4 */
%   | | else if ( haswordvenue(B, C) )
%   | | | then return 0.20493477303619748;  // std dev = 0.028, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.07867786919523488;  // std dev = 3.074, 49.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=18 */
%   else if ( haswordvenue(A, H), haswordvenue(B, H) )
%   | then if ( haswordtitle(I, H) )
%   | | then return 0.11881857163026936;  // std dev = 0.489, 753.000 (wgt'ed) examples reached here.  /* #neg=304 #pos=449 */
%   | | else return 0.1926674696741277;  // std dev = 0.336, 22.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=19 */
%   | else if ( haswordvenue(B, J), haswordauthor(K, J) )
%   | | then return 0.06590183586788245;  // std dev = 0.437, 46.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=14 */
%   | | else return 0.01628419333792745;  // std dev = 0.392, 114.000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordauthor(D, C) )
%   then if ( haswordtitle(E, C) )
%   | then return 0.06928315298167997;  // std dev = 0.404, 39.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=21 */
%   | else if ( author(F, D), venue(F, A) )
%   | | then return -0.2317582403333782;  // std dev = 0.324, 24.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=4 */
%   | | else if ( haswordvenue(B, C) )
%   | | | then return 0.17359555732527285;  // std dev = 0.025, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.06410106190808912;  // std dev = 3.070, 49.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=18 */
%   else if ( haswordvenue(A, G), haswordvenue(B, G) )
%   | then if ( haswordtitle(H, G) )
%   | | then return 0.08915603919718385;  // std dev = 0.489, 753.000 (wgt'ed) examples reached here.  /* #neg=304 #pos=449 */
%   | | else return 0.15210617627668935;  // std dev = 0.336, 22.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=19 */
%   | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | then if ( haswordtitle(J, K), haswordvenue(B, K) )
%   | | | then return -0.1469530177291125;  // std dev = 0.042, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | | else return 0.0699434400991494;  // std dev = 4.044, 83.000 (wgt'ed) examples reached here.  /* #neg=59 #pos=24 */
%   | | else return 4.6861406503443564E-4;  // std dev = 0.381, 65.000 (wgt'ed) examples reached here.  /* #neg=53 #pos=12 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(B, C), haswordauthor(D, C) )
%   then if ( haswordtitle(E, C) )
%   | then if ( author(F, D), venue(F, A) )
%   | | then return -0.5127997236286245;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | else return 0.19461301483150778;  // std dev = 0.375, 31.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=21 */
%   | else if ( author(G, D), venue(G, B) )
%   | | then return -0.2672261441255756;  // std dev = 0.326, 24.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=4 */
%   | | else if ( haswordvenue(A, C) )
%   | | | then return 0.19932611246489573;  // std dev = 0.143, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.06135017741797937;  // std dev = 3.053, 49.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=18 */
%   else if ( haswordvenue(A, H), haswordvenue(B, H) )
%   | then if ( haswordvenue(A, I), haswordauthor(J, I) )
%   | | then if ( author(K, J), venue(K, B) )
%   | | | then return 0.037894391104624885;  // std dev = 2.486, 30.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=15 */
%   | | | else return -0.19507673217452384;  // std dev = 1.384, 19.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=5 */
%   | | else return 0.07930525225462715;  // std dev = 0.484, 726.000 (wgt'ed) examples reached here.  /* #neg=278 #pos=448 */
%   | else return 0.018666292001087575;  // std dev = 0.404, 160.000 (wgt'ed) examples reached here.  /* #neg=124 #pos=36 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordtitle(E, D) )
%   | then return 0.04495393162384943;  // std dev = 0.480, 815.000 (wgt'ed) examples reached here.  /* #neg=336 #pos=479 */
%   | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | then return 0.08048959711422571;  // std dev = 0.400, 10.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   | | else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | | then return 0.1738199060048344;  // std dev = 0.135, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.21039419278471017;  // std dev = 0.081, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | then if ( title(L, K), venue(L, B) )
%   | | then if ( title(M, K), venue(M, A) )
%   | | | then return 0.6285793619742186;  // std dev = 1.755, 29.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=26 */
%   | | | else return -0.2030013783112258;  // std dev = 0.339, 69.000 (wgt'ed) examples reached here.  /* #neg=69 */
%   | | else return -0.1601698712503738;  // std dev = 0.053, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else if ( haswordvenue(A, N), haswordtitle(P, N) )
%   | | then return 0.045814788349355956;  // std dev = 0.432, 91.000 (wgt'ed) examples reached here.  /* #neg=65 #pos=26 */
%   | | else return -0.1919477632324565;  // std dev = 0.119, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */


Results
   AUC ROC   = 0.550686
   AUC PR    = 0.398634
   CLL	      = -0.703708
   Precision = 0.372033 at threshold = 0.5
   Recall    = 0.927442
   F1        = 0.531043


Total learning time: 56.87626004219055 seconds
Total inference time: 16.339 seconds
AUC ROC: 0.550686


Results scoring model
   AUC ROC   = 0.688235
   AUC PR    = 0.679752
   CLL	      = -0.605687
   Precision = 0.633838 at threshold = 0.5
   Recall    = 0.912727
   F1        = 0.748137


Total scoring time: 1.292 seconds
Refined model CLL: -0.605687


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.549349
   AUC PR    = 0.397373
   CLL	      = -0.705079
   Precision = 0.372112 at threshold = 0.5
   Recall    = 0.927037
   F1        = 0.531058


Total learning time: 115.82160487556457 seconds
Total inference time: 12.323 seconds
AUC ROC: 0.549349
Total revision time: 115.82160487556457
Best scored revision CLL: -0.598949


Dataset: 38_uwcse_cora, Fold: 5, Type: Transfer (trRDN-B), Time: 00:12:32
{'AUC ROC': 0.549349, 'AUC PR': 0.397373, 'CLL': -0.705079, 'Precision': [0.372112, 0.5], 'Recall': 0.927037, 'F1': 0.531058, 'Learning time': 115.82160487556457, 'Inference time': 12.323, 'parameter': {'AUC ROC': 0.549349, 'AUC PR': 0.397373, 'CLL': -0.705079, 'Precision': [0.372112, 0.5], 'Recall': 0.927037, 'F1': 0.531058, 'Learning time': 56.46634483337402, 'Inference time': 12.323}}


