Starting experiment #1 for 13_twitter_cora

Loading pre-trained trees.
Starting fold 1

Target train facts examples: 7463
Target train pos examples: 368
Target train neg examples: 688

Target test facts examples: 35095
Target test pos  examples: 2649
Target test neg examples: 4334

******************************************
Performing Parameter Learning
******************************************
Refine
0;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
0;true;follows(A, D).;false;false
0;false;follows(A, E), recursion_accounttype(E, B).;true;true
0;false,true;follows(A, F), follows(F, A).;false;true
0;false,true,false;follows(A, G), follows(G, E).;false;false
0;false,false;follows(H, A).;true;true
0;false,false,true;follows(I, H), follows(I, A).;false;false
0;false,false,false;follows(A, J), follows(J, K).;false;false
1;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
1;true;follows(A, C), tweets(A, D).;false;false
1;false;follows(A, E), recursion_accounttype(E, B).;true;true
1;false,true;tweets(A, F), tweets(E, F).;false;true
1;false,true,false;follows(G, A), follows(E, H).;false;false
1;false,false;follows(I, A).;true;true
1;false,false,true;follows(I, J), recursion_accounttype(J, B).;false;false
1;false,false,false;tweets(A, K).;false;false
2;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
2;true;follows(C, D), follows(D, A).;false;false
2;false;follows(E, A).;true;true
2;false,true;follows(F, E), follows(F, A).;false;true
2;false,true,false;follows(E, G), recursion_accounttype(G, B).;false;false
2;false,false;follows(A, H), follows(H, I).;true;true
2;false,false,true;recursion_accounttype(I, B).;false;false
2;false,false,false;follows(A, J).;false;false
3;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
3;true;tweets(A, D), tweets(C, D).;false;false
3;false;follows(E, A).;true;true
3;false,true;follows(F, E), recursion_accounttype(F, B).;true;false
3;false,true,true;follows(A, G), recursion_accounttype(G, B).;false;false
3;false,false;follows(A, H), recursion_accounttype(H, B).;true;true
3;false,false,true;follows(A, I), follows(I, H).;false;false
3;false,false,false;tweets(A, J), follows(A, K).;false;false
4;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
4;true;follows(A, D), follows(D, C).;true;false
4;true,true;follows(D, A).;false;true
4;true,true,false;tweets(A, E).;false;false
4;false;follows(F, A).;false;true
4;false,false;follows(A, G), recursion_accounttype(G, B).;true;true
4;false,false,true;follows(G, H), follows(H, G).;false;false
4;false,false,false;follows(A, I), follows(I, J).;false;false
5;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
5;true;follows(D, A), tweets(D, E).;true;true
5;true,true;recursion_accounttype(D, B).;false;false
5;true,false;follows(C, F), follows(F, C).;true;false
5;true,false,true;tweets(C, G), recursion_accounttype(F, B).;false;false
5;false;follows(A, H), follows(H, A).;false;true
5;false,false;follows(I, A), recursion_accounttype(I, B).;false;true
5;false,false,false;tweets(A, J), follows(K, A).;false;false
6;;accounttype(A, B) :- follows(A, C).;true;true
6;true;follows(D, C), recursion_accounttype(D, B).;true;false
6;true,true;recursion_accounttype(C, B).;true;true
6;true,true,true;follows(E, A), follows(E, D).;false;false
6;true,true,false;follows(F, A), recursion_accounttype(F, B).;false;false
6;false;follows(G, A), recursion_accounttype(G, B).;false;true
6;false,false;follows(H, A).;false;true
6;false,false,false;tweets(A, I).;false;false
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
7;true;tweets(C, D), follows(A, C).;false;false
7;false;follows(E, A).;true;true
7;false,true;follows(E, F), recursion_accounttype(F, B).;true;false
7;false,true,true;follows(F, E), follows(A, F).;false;false
7;false,false;follows(A, G), recursion_accounttype(G, B).;true;true
7;false,false,true;tweets(A, H).;false;false
7;false,false,false;follows(A, I).;false;false
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;true;follows(C, D), recursion_accounttype(D, B).;false;true
8;true,false;follows(A, E), follows(E, A).;false;false
8;false;follows(F, A), follows(A, G).;true;true
8;false,true;follows(G, A), follows(G, F).;false;true
8;false,true,false;follows(H, F), recursion_accounttype(H, B).;false;false
8;false,false;follows(I, A), recursion_accounttype(I, B).;false;true
8;false,false,false;follows(J, A).;false;false
9;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
9;true;follows(C, D).;true;false
9;true,true;follows(A, D).;true;true
9;true,true,true;follows(E, A), recursion_accounttype(E, B).;false;false
9;true,true,false;tweets(C, F), follows(D, C).;false;false
9;false;follows(A, G), follows(H, A).;false;true
9;false,false;follows(I, A), recursion_accounttype(I, B).;false;true
9;false,false,false;follows(J, A).;false;false


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.23843062524035266;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then return 0.4581489350995122;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | else if ( haswordvenue(A, G), haswordauthor(H, G) )
%   | | | then return 0.5248156017661788;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.424815601766179;  // std dev = 2.714, 30.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=17 */
%   else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(B, K) )
%   | | then return -0.1418510649004878;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else return 0.004815601766179008;  // std dev = 0.354, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | | then return 0.004815601766179008;  // std dev = 0.354, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else return -0.14185106490048777;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.20686012285620575;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | else if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then return 0.45935396641210174;  // std dev = 0.810, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.3982164798305049;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.3628735944379147;  // std dev = 2.715, 30.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=17 */
%   else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(B, K) )
%   | | then return -0.12544463852839138;  // std dev = 5.27e-09, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else return 0.004228390109386251;  // std dev = 0.354, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | | then return 0.004228390109386251;  // std dev = 0.354, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else return -0.12544463852839138;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.1751801570305961;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | else if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then return 0.37391135762433364;  // std dev = 0.808, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.32650617096328266;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.29771103478397803;  // std dev = 2.715, 30.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=17 */
%   else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | then if ( title(K, J), venue(K, A) )
%   | | then if ( samebib(K, L), venue(L, B) )
%   | | | then return 0.14974330653669568;  // std dev = 2.784, 38.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=11 */
%   | | | else return -0.1414965457075706;  // std dev = 0.042, 42.000 (wgt'ed) examples reached here.  /* #neg=42 */
%   | | else return -0.11669340332070104;  // std dev = 0.028, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else if ( haswordvenue(B, M), haswordtitle(N, M) )
%   | | then return 0.0037111125833978686;  // std dev = 0.354, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else return -0.11231637819360639;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.14514481334590568;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | else if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then return 0.30223164165896194;  // std dev = 0.801, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.2571145088587262;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.2342403005157702;  // std dev = 2.716, 30.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=17 */
%   else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | then if ( title(K, J), venue(K, B) )
%   | | then if ( samebib(K, L), venue(L, A) )
%   | | | then return 0.15050635248187116;  // std dev = 2.779, 38.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=11 */
%   | | | else return -0.14140068128255853;  // std dev = 0.058, 42.000 (wgt'ed) examples reached here.  /* #neg=42 */
%   | | else return -0.12198246998550875;  // std dev = 0.041, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else if ( haswordvenue(A, M), haswordtitle(N, M) )
%   | | then return 0.003911681670084805;  // std dev = 0.346, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else return -0.10159632948783628;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.11804668707041945;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then return 0.20993193874128463;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | else if ( haswordvenue(A, G), haswordauthor(H, G) )
%   | | | then return 0.22993052047106874;  // std dev = 0.800, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.17827438649039878;  // std dev = 2.716, 30.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=17 */
%   else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(A, K) )
%   | | then return -0.10655670760965545;  // std dev = 0.043, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else return 0.0034132269013044366;  // std dev = 0.346, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | | then return 0.0034335612113566578;  // std dev = 0.346, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else return -0.09269127618926096;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.09457696812283496;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then return 0.15899743588362739;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | else if ( haswordvenue(B, G), haswordauthor(H, G) )
%   | | | then return 0.18068886059905154;  // std dev = 0.795, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.1344301511491958;  // std dev = 2.717, 30.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=17 */
%   else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | then if ( title(K, J), venue(K, B) )
%   | | then if ( samebib(K, L), venue(L, A) )
%   | | | then return 0.13221515546850374;  // std dev = 2.774, 38.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=11 */
%   | | | else return -0.12506444585903417;  // std dev = 0.064, 42.000 (wgt'ed) examples reached here.  /* #neg=42 */
%   | | else return -0.10128282298599231;  // std dev = 0.041, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else if ( haswordvenue(A, M), haswordtitle(N, M) )
%   | | then return 0.0030127853339828987;  // std dev = 0.346, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else return -0.08518475138839687;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.07489163449109286;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | else if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then return 0.13568056643322346;  // std dev = 0.795, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.12014975651818607;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.10111150224937022;  // std dev = 2.717, 30.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=17 */
%   else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | then return -0.029692030260580787;  // std dev = 0.328, 8.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */
%   | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | then if ( haswordtitle(L, M), haswordvenue(A, M) )
%   | | | then return -0.09551201935066468;  // std dev = 0.065, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | | else return 0.0016507227173070285;  // std dev = 2.942, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else if ( haswordvenue(A, N), haswordtitle(P, N) )
%   | | | then return 0.0065035968664527545;  // std dev = 2.848, 67.000 (wgt'ed) examples reached here.  /* #neg=57 #pos=10 */
%   | | | else return -0.07877675473109173;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordtitle(F, C) )
%   | | then return -0.12150391422280449;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else return 0.10217116650627207;  // std dev = 0.795, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else if ( haswordtitle(G, C) )
%   | | then return 0.05984201257766986;  // std dev = 0.486, 847.000 (wgt'ed) examples reached here.  /* #neg=524 #pos=323 */
%   | | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | | then return 0.09424656852556126;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.07522344514662459;  // std dev = 2.717, 30.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=17 */
%   else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordvenue(A, L) )
%   | | then return -0.08760324780899974;  // std dev = 0.060, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else return 0.0014478382892084071;  // std dev = 0.340, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | else if ( haswordvenue(A, M), haswordtitle(N, M) )
%   | | then return 0.002341115411384995;  // std dev = 0.346, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else return -0.07324622576333704;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.04581639818104974;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then return 0.07134879611919712;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | else return 0.05824001123108474;  // std dev = 0.493, 33.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=19 */
%   else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | then if ( title(I, H), venue(I, A) )
%   | | then if ( samebib(I, J), venue(J, B) )
%   | | | then return 0.13417088387385218;  // std dev = 2.764, 38.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=11 */
%   | | | else return -0.1252392741222901;  // std dev = 0.092, 42.000 (wgt'ed) examples reached here.  /* #neg=42 */
%   | | else return -0.09356905754732085;  // std dev = 0.062, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | then return 0.001269697570074139;  // std dev = 0.340, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else return -0.06842697784420272;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.035542037491345754;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | else if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then return 0.06332050899304298;  // std dev = 0.796, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | | then return 0.05623693980343849;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.04137039688971254;  // std dev = 2.717, 30.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=17 */
%   else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(B, K) )
%   | | then return -0.07967554816464781;  // std dev = 0.060, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else return 6.032218516643336E-4;  // std dev = 0.339, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | | then return 0.0011133273109178328;  // std dev = 0.340, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else return -0.0641918400820262;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */


Results
   AUC ROC   = 0.557323
   AUC PR    = 0.428209
   CLL	      = -0.652612
   Precision = 0.637427 at threshold = 0.5
   Recall    = 0.041148
   F1        = 0.077305


Total learning time: 65.5259804725647 seconds
Total inference time: 8.309 seconds
AUC ROC: 0.557323


Results scoring model
   AUC ROC   = 0.593454
   AUC PR    = 0.420622
   CLL	      = -0.616285
   Precision = 0.578947 at threshold = 0.5
   Recall    = 0.059783
   F1        = 0.108374


Total scoring time: 1.192 seconds
Parameter learned model CLL: -0.616285


Structure after Parameter Learning
[['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(A, E), haswordtitle(F, E)', 'true,false,false': 'haswordvenue(A, G), haswordauthor(H, G)', 'false': 'haswordvenue(A, I), haswordtitle(J, I)', 'false,true': 'haswordtitle(J, K), haswordvenue(B, K)', 'false,false': 'haswordvenue(B, L), haswordtitle(M, L)'}, {'true,true': [0.485, 528, 324], 'true,false,true': [1.095, 2, 3], 'true,false,false,true': [0.816, 1, 2], 'true,false,false,false': [2.714, 13, 17], 'false,true,true': [0.0, 12, 0], 'false,true,false': [0.354, 64, 11], 'false,false,true': [0.354, 64, 11], 'false,false,false': [0.0, 4, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(B, E), haswordauthor(F, E)', 'true,false,false': 'haswordvenue(B, G), haswordtitle(H, G)', 'false': 'haswordvenue(A, I), haswordtitle(J, I)', 'false,true': 'haswordtitle(J, K), haswordvenue(B, K)', 'false,false': 'haswordvenue(B, L), haswordtitle(M, L)'}, {'true,true': [0.485, 528, 324], 'true,false,true': [0.81, 1, 2], 'true,false,false,true': [1.095, 2, 3], 'true,false,false,false': [2.715, 13, 17], 'false,true,true': [5.27e-09, 12, 0], 'false,true,false': [0.354, 64, 11], 'false,false,true': [0.354, 64, 11], 'false,false,false': [0.0, 4, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(B, E), haswordauthor(F, E)', 'true,false,false': 'haswordvenue(B, G), haswordtitle(H, G)', 'false': 'haswordvenue(A, I), haswordtitle(J, I)', 'false,true': 'title(K, J), venue(K, A)', 'false,true,true': 'samebib(K, L), venue(L, B)', 'false,false': 'haswordvenue(B, M), haswordtitle(N, M)'}, {'true,true': [0.485, 528, 324], 'true,false,true': [0.808, 1, 2], 'true,false,false,true': [1.095, 2, 3], 'true,false,false,false': [2.715, 13, 17], 'false,true,true,true': [2.784, 27, 11], 'false,true,true,false': [0.042, 42, 0], 'false,true,false': [0.028, 7, 0], 'false,false,true': [0.354, 64, 11], 'false,false,false': [0.0, 4, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(A, E), haswordauthor(F, E)', 'true,false,false': 'haswordvenue(B, G), haswordtitle(H, G)', 'false': 'haswordvenue(B, I), haswordtitle(J, I)', 'false,true': 'title(K, J), venue(K, B)', 'false,true,true': 'samebib(K, L), venue(L, A)', 'false,false': 'haswordvenue(A, M), haswordtitle(N, M)'}, {'true,true': [0.485, 528, 324], 'true,false,true': [0.801, 1, 2], 'true,false,false,true': [1.095, 2, 3], 'true,false,false,false': [2.716, 13, 17], 'false,true,true,true': [2.779, 27, 11], 'false,true,true,false': [0.058, 42, 0], 'false,true,false': [0.041, 7, 0], 'false,false,true': [0.346, 64, 11], 'false,false,false': [0.0, 4, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(A, E), haswordtitle(F, E)', 'true,false,false': 'haswordvenue(A, G), haswordauthor(H, G)', 'false': 'haswordvenue(B, I), haswordtitle(J, I)', 'false,true': 'haswordtitle(J, K), haswordvenue(A, K)', 'false,false': 'haswordvenue(A, L), haswordtitle(M, L)'}, {'true,true': [0.485, 528, 324], 'true,false,true': [1.095, 2, 3], 'true,false,false,true': [0.8, 1, 2], 'true,false,false,false': [2.716, 13, 17], 'false,true,true': [0.043, 12, 0], 'false,true,false': [0.346, 64, 11], 'false,false,true': [0.346, 64, 11], 'false,false,false': [0.0, 4, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(A, E), haswordtitle(F, E)', 'true,false,false': 'haswordvenue(B, G), haswordauthor(H, G)', 'false': 'haswordvenue(B, I), haswordtitle(J, I)', 'false,true': 'title(K, J), venue(K, B)', 'false,true,true': 'samebib(K, L), venue(L, A)', 'false,false': 'haswordvenue(A, M), haswordtitle(N, M)'}, {'true,true': [0.485, 528, 324], 'true,false,true': [1.095, 2, 3], 'true,false,false,true': [0.795, 1, 2], 'true,false,false,false': [2.717, 13, 17], 'false,true,true,true': [2.774, 27, 11], 'false,true,true,false': [0.064, 42, 0], 'false,true,false': [0.041, 7, 0], 'false,false,true': [0.346, 64, 11], 'false,false,false': [0.0, 4, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(B, E), haswordauthor(F, E)', 'true,false,false': 'haswordvenue(B, G), haswordtitle(H, G)', 'false': 'haswordvenue(B, I), haswordauthor(J, I)', 'false,false': 'haswordvenue(B, K), haswordtitle(L, K)', 'false,false,true': 'haswordtitle(L, M), haswordvenue(A, M)', 'false,false,false': 'haswordvenue(A, N), haswordtitle(P, N)'}, {'true,true': [0.485, 528, 324], 'true,false,true': [0.795, 1, 2], 'true,false,false,true': [1.095, 2, 3], 'true,false,false,false': [2.717, 13, 17], 'false,true': [0.328, 7, 1], 'false,false,true,true': [0.065, 12, 0], 'false,false,true,false': [2.942, 64, 11], 'false,false,false,true': [2.848, 57, 10], 'false,false,false,false': [0.0, 4, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(B, D), haswordauthor(E, D)', 'true,true': 'haswordtitle(F, C)', 'true,false': 'haswordtitle(G, C)', 'true,false,false': 'haswordvenue(A, H), haswordtitle(I, H)', 'false': 'haswordvenue(B, J), haswordtitle(K, J)', 'false,true': 'haswordtitle(K, L), haswordvenue(A, L)', 'false,false': 'haswordvenue(A, M), haswordtitle(N, M)'}, {'true,true,true': [0.894, 4, 1], 'true,true,false': [0.795, 1, 2], 'true,false,true': [0.486, 524, 323], 'true,false,false,true': [1.095, 2, 3], 'true,false,false,false': [2.717, 13, 17], 'false,true,true': [0.06, 12, 0], 'false,true,false': [0.34, 64, 11], 'false,false,true': [0.346, 64, 11], 'false,false,false': [0.0, 4, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(B, E), haswordtitle(F, E)', 'false': 'haswordvenue(A, G), haswordtitle(H, G)', 'false,true': 'title(I, H), venue(I, A)', 'false,true,true': 'samebib(I, J), venue(J, B)', 'false,false': 'haswordvenue(B, K), haswordtitle(L, K)'}, {'true,true': [0.485, 528, 324], 'true,false,true': [1.095, 2, 3], 'true,false,false': [0.493, 14, 19], 'false,true,true,true': [2.764, 27, 11], 'false,true,true,false': [0.092, 42, 0], 'false,true,false': [0.062, 7, 0], 'false,false,true': [0.34, 64, 11], 'false,false,false': [0.0, 4, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(B, E), haswordauthor(F, E)', 'true,false,false': 'haswordvenue(A, G), haswordtitle(H, G)', 'false': 'haswordvenue(A, I), haswordtitle(J, I)', 'false,true': 'haswordtitle(J, K), haswordvenue(B, K)', 'false,false': 'haswordvenue(B, L), haswordtitle(M, L)'}, {'true,true': [0.485, 528, 324], 'true,false,true': [0.796, 1, 2], 'true,false,false,true': [1.095, 2, 3], 'true,false,false,false': [2.717, 13, 17], 'false,true,true': [0.06, 12, 0], 'false,true,false': [0.339, 64, 11], 'false,false,true': [0.34, 64, 11], 'false,false,false': [0.0, 4, 0]}]]
[{'': [0.23762656230272572, 0.11496588764697444], 'true': [0.2356675262844691, 0.24376731301939172], 'true,false': [0.23999999999999994, 0.2442607897153348], 'true,false,false': [0.22222222222222224, 0.2455555555555551], 'false': [0.1104505218655035, 0.11985258772632539], 'false,false': [0.12515555555555502, 0.0], 'false,true': [-1.1564823173178714e-17, 0.12515555555555502]}, {'': [0.23716066162823074, 0.11455688633284844], 'true': [0.2356675262844735, 0.24352902641532292], 'true,false': [0.21859724583033524, 0.2450060599606714], 'true,false,false': [0.23999999999999994, 0.24566195763775364], 'false': [0.10989213699570438, 0.1196268538653256], 'false,false': [0.125155555555556, 0.0], 'false,true': [2.3129646346357427e-18, 0.125155555555556]}, {'': [0.23670497169729696, 0.11426488031687218], 'true': [0.23566752628446727, 0.24320063124509564], 'true,false': [0.2176873624141201, 0.24497723310199554], 'true,false,false': [0.23999999999999994, 0.24568832054267317], 'false': [0.10949347876263746, 0.1194656914359021], 'false,false': [0.12515555555555488, 0.0], 'false,true': [0.11802694340978195, 0.00011495009377930235], 'false,true,true': [0.20389987794958447, 4.257410880718705e-05]}, {'': [0.23636698010066837, 0.11173833815389335], 'true': [0.23566752628446358, 0.242954147337458], 'true,false': [0.2136330627757932, 0.24513666126064934], 'true,false,false': [0.24, 0.24591802441256944], 'false': [0.109435906756026, 0.11421156581709413], 'false,false': [0.1197392067745037, 0.0], 'false,true': [0.11784672398232088, 0.0002386147873557204], 'false,true,true': [0.2032739436452795, 8.081473000321444e-05]}, {'': [0.2361623050267115, 0.10918155372515907], 'true': [0.235667526284474, 0.24276762401137456], 'true,false': [0.24, 0.24309131300345405], 'true,false,false': [0.21315924120545937, 0.24584194234890538], 'false': [0.10465818947219645, 0.11410714620620822], 'false,false': [0.11972501336090417, 0.0], 'false,true': [0.0001573040463913993, 0.11971027783048463]}, {'': [0.2360546229003904, 0.10899773049875978], 'true': [0.23566752628446164, 0.2426425888173204], 'true,false': [0.24000000000000005, 0.2429884272588859], 'true,false,false': [0.21070159688187715, 0.24602257682386247], 'false': [0.10439131077843708, 0.11402506882682778], 'false,false': [0.11971254226212041, 0.0], 'false,true': [0.11272464395836698, 0.0002449741335400986], 'false,true,true': [0.20245539152756722, 9.810507380116007e-05]}, {'': [0.23600236510528788, 0.10700367143847543], 'true': [0.23566752628447166, 0.24256268961969618], 'true,false': [0.2107704986914994, 0.24520765202151965], 'true,false,false': [0.24, 0.24602381472144857], 'false': [0.10736382990724018, 0.10695771114932776], 'false,false': [0.10063733638814568, 0.1146027832929139], 'false,false,false': [0.12103500876535506, 0.0], 'false,false,true': [0.00034985643565629024, 0.1153811816707279]}, {'': [0.235978534088455, 0.10685369940098126], 'true': [0.1908267978275982, 0.23630141757465956], 'true,false': [0.23592121091315768, 0.24518784319071127], 'true,false,false': [0.24, 0.2460007866906264], 'true,true': [0.15999999999999998, 0.2109357056199543], 'false': [0.10044211906697242, 0.11386874588833364], 'false,false': [0.11965245725659601, 0.0], 'false,true': [0.00029929835653666123, 0.11537116404474274]}, {'': [0.23589695379535983, 0.1067485516650375], 'true': [0.23559370765518345, 0.24250441969444686], 'true,false': [0.23999999999999994, 0.24286126666585023], 'false': [0.1039946219238326, 0.10975474486457669], 'false,false': [0.11536237548197169, 0.0], 'false,true': [0.11237233549742787, 0.0005423530786492591], 'false,true,true': [0.2010202934459055, 0.00020256592670786765]}, {'': [0.23589147311578862, 0.10472729275525496], 'true': [0.23559263145797749, 0.24250510448646606], 'true,false': [0.21124865190337394, 0.24515319612714143], 'true,false,false': [0.24, 0.24598048870573083], 'false': [0.10016205932955656, 0.1097189279073553], 'false,false': [0.11535466659971955, 0.0], 'false,true': [0.0003001138353660252, 0.11525104910306404]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;false;haswordvenue(A, I), haswordtitle(J, I).;true;true
0;false,true;haswordtitle(J, K), haswordvenue(B, K).;true;true
0;false,false;haswordvenue(B, L), haswordtitle(M, L).;true;true
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;false;haswordvenue(A, I), haswordtitle(J, I).;true;true
1;false,true;haswordtitle(J, K), haswordvenue(B, K).;true;true
1;false,false;haswordvenue(B, L), haswordtitle(M, L).;true;true
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;false;haswordvenue(A, I), haswordtitle(J, I).;true;true
2;false,true;title(K, J), venue(K, A).;true;true
2;false,true,true;samebib(K, L), venue(L, B).;true;true
2;false,false;haswordvenue(B, M), haswordtitle(N, M).;true;true
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;false;haswordvenue(B, I), haswordtitle(J, I).;true;true
3;false,true;title(K, J), venue(K, B).;true;true
3;false,true,true;samebib(K, L), venue(L, A).;true;true
3;false,false;haswordvenue(A, M), haswordtitle(N, M).;true;true
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;false;haswordvenue(B, I), haswordtitle(J, I).;true;true
4;false,true;haswordtitle(J, K), haswordvenue(A, K).;true;true
4;false,false;haswordvenue(A, L), haswordtitle(M, L).;true;true
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;false;haswordvenue(B, I), haswordtitle(J, I).;true;true
5;false,true;title(K, J), venue(K, B).;true;true
5;false,true,true;samebib(K, L), venue(L, A).;true;true
5;false,false;haswordvenue(A, M), haswordtitle(N, M).;true;true
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;false;haswordvenue(B, I), haswordauthor(J, I).;true;true
6;false,false;haswordvenue(B, K), haswordtitle(L, K).;true;true
6;false,false,true;haswordtitle(L, M), haswordvenue(A, M).;true;true
6;false,false,false;haswordvenue(A, N), haswordtitle(P, N).;true;true
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;false;haswordvenue(B, J), haswordtitle(K, J).;true;true
7;false,true;haswordtitle(K, L), haswordvenue(A, L).;true;true
7;false,false;haswordvenue(A, M), haswordtitle(N, M).;true;true
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;false;haswordvenue(A, G), haswordtitle(H, G).;true;true
8;false,true;title(I, H), venue(I, A).;true;true
8;false,true,true;samebib(I, J), venue(J, B).;true;true
8;false,false;haswordvenue(B, K), haswordtitle(L, K).;true;true
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;false;haswordvenue(A, I), haswordtitle(J, I).;true;true
9;false,true;haswordtitle(J, K), haswordvenue(B, K).;true;true
9;false,false;haswordvenue(B, L), haswordtitle(M, L).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.23843062524035266;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | else if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then return 0.5248156017661788;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | | then return 0.4581489350995122;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.424815601766179;  // std dev = 2.714, 30.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=17 */
%   else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(B, K) )
%   | | then return -0.1418510649004878;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else return 0.004815601766179008;  // std dev = 0.354, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | | then return 0.004815601766179008;  // std dev = 0.354, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else return -0.14185106490048777;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.20686012285620575;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | else if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then return 0.45935396641210174;  // std dev = 0.810, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.3982164798305049;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.3628735944379147;  // std dev = 2.715, 30.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=17 */
%   else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | then if ( title(K, J), venue(K, A) )
%   | | then if ( samebib(K, L), venue(L, B) )
%   | | | then return 0.1488242116562869;  // std dev = 2.789, 38.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=11 */
%   | | | else return -0.14162905569876189;  // std dev = 0.023, 42.000 (wgt'ed) examples reached here.  /* #neg=42 */
%   | | else return -0.12787230110394693;  // std dev = 0.016, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else if ( haswordvenue(B, M), haswordtitle(N, M) )
%   | | then return 0.004228390109386251;  // std dev = 0.354, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else return -0.12544463852839138;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.1751801570305961;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then return 0.3269052770205085;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | else if ( haswordvenue(A, G), haswordauthor(H, G) )
%   | | | then return 0.37391135762433364;  // std dev = 0.808, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.2976445171077738;  // std dev = 2.715, 30.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=17 */
%   else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(A, K) )
%   | | then return -0.12205676751791568;  // std dev = 0.051, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else return 0.0037111125833978686;  // std dev = 0.354, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | | then return 0.004507924439812988;  // std dev = 0.346, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else return -0.11231637819360639;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.14514481334590568;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | else if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then return 0.3022417434729106;  // std dev = 0.801, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.26358767085800217;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.23316088123073275;  // std dev = 2.716, 30.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=17 */
%   else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | then if ( title(K, J), venue(K, B) )
%   | | then if ( samebib(K, L), venue(L, A) )
%   | | | then return 0.15058071527896155;  // std dev = 2.779, 38.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=11 */
%   | | | else return -0.14136704096958908;  // std dev = 0.059, 42.000 (wgt'ed) examples reached here.  /* #neg=42 */
%   | | else return -0.12222326163509453;  // std dev = 0.041, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else if ( haswordvenue(A, M), haswordtitle(N, M) )
%   | | then return 0.003958717519531317;  // std dev = 0.346, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else return -0.10159632948783628;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.11804668707041945;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | else if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then return 0.2299388596657689;  // std dev = 0.800, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | | then return 0.20322270711158522;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.17939506450759002;  // std dev = 2.716, 30.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=17 */
%   else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | then if ( title(K, J), venue(K, B) )
%   | | then if ( samebib(K, L), venue(L, A) )
%   | | | then return 0.13160418625804432;  // std dev = 2.777, 38.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=11 */
%   | | | else return -0.1250714584428941;  // std dev = 0.053, 42.000 (wgt'ed) examples reached here.  /* #neg=42 */
%   | | else return -0.10972932149175826;  // std dev = 0.037, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else if ( haswordvenue(A, M), haswordtitle(N, M) )
%   | | then return 0.003474967571653636;  // std dev = 0.346, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else return -0.09269127618926096;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.09457696812283496;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | else if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then return 0.17288979964843879;  // std dev = 0.799, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.1588116678226005;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.13524011263964966;  // std dev = 2.716, 30.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=17 */
%   else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | then if ( title(K, J), venue(K, B) )
%   | | then if ( samebib(K, L), venue(L, A) )
%   | | | then return 0.11334328328598432;  // std dev = 2.776, 38.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=11 */
%   | | | else return -0.11202162284249521;  // std dev = 0.048, 42.000 (wgt'ed) examples reached here.  /* #neg=42 */
%   | | else return -0.09947892958171546;  // std dev = 0.034, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else if ( haswordvenue(A, M), haswordtitle(N, M) )
%   | | then return 0.0030492092141664083;  // std dev = 0.346, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else return -0.08518475138839687;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.07489163449109286;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | else if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then return 0.1438835721987973;  // std dev = 0.792, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return 0.10312803843584828;  // std dev = 0.495, 35.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=20 */
%   else if ( haswordvenue(A, G), haswordauthor(H, G) )
%   | then return -0.05006856177253945;  // std dev = 0.324, 8.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */
%   | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | then if ( haswordtitle(J, K), haswordvenue(B, K) )
%   | | | then return -0.10338368597732521;  // std dev = 0.101, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | | else return 0.0026747502538141004;  // std dev = 2.996, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | | | then return 0.006086472454712563;  // std dev = 2.746, 67.000 (wgt'ed) examples reached here.  /* #neg=57 #pos=10 */
%   | | | else return -0.07877675473109173;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.05877777591804268;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | else if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then return 0.10829422341271559;  // std dev = 0.792, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | | then return 0.09433035652465009;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.07459771049063507;  // std dev = 2.718, 30.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=17 */
%   else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(A, K) )
%   | | then return -0.0942635036017624;  // std dev = 0.093, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else return 1.9044896800638034E-4;  // std dev = 0.335, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | | then return 0.0023456102534391665;  // std dev = 0.346, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else return -0.07324622576333704;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.04582386394015474;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then return 0.07497174782217511;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | else if ( haswordvenue(B, G), haswordauthor(H, G) )
%   | | | then return 0.08022587452219121;  // std dev = 0.793, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.0554389844320842;  // std dev = 2.717, 30.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=17 */
%   else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(A, K) )
%   | | then return -0.08657811236704903;  // std dev = 0.086, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else return 1.6706671365904072E-4;  // std dev = 0.335, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | | then return 0.002056459214648467;  // std dev = 0.346, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else return -0.06842697784420272;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.03554750876544446;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then return 0.05699430298157915;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | else if ( haswordvenue(B, G), haswordauthor(H, G) )
%   | | | then return 0.060974570169780806;  // std dev = 0.794, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.04150226843344071;  // std dev = 2.717, 30.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=17 */
%   else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | then if ( title(K, J), venue(K, B) )
%   | | then if ( samebib(K, L), venue(L, A) )
%   | | | then return 0.10009052943790761;  // std dev = 2.761, 38.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=11 */
%   | | | else return -0.10089220070151689;  // std dev = 0.068, 42.000 (wgt'ed) examples reached here.  /* #neg=42 */
%   | | else return -0.07360242983581089;  // std dev = 0.042, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else if ( haswordvenue(A, M), haswordtitle(N, M) )
%   | | then return 0.0018025579208930265;  // std dev = 0.346, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else return -0.0641918400820262;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */


Results
   AUC ROC   = 0.557912
   AUC PR    = 0.428552
   CLL	      = -0.651363
   Precision = 0.637427 at threshold = 0.5
   Recall    = 0.041148
   F1        = 0.077305


Total learning time: 66.4065146446228 seconds
Total inference time: 8.94 seconds
AUC ROC: 0.557912


Results scoring model
   AUC ROC   = 0.591811
   AUC PR    = 0.419735
   CLL	      = -0.616016
   Precision = 0.578947 at threshold = 0.5
   Recall    = 0.059783
   F1        = 0.108374


Total scoring time: 1.114 seconds
Refined model CLL: -0.616016


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.557912
   AUC PR    = 0.428552
   CLL	      = -0.651363
   Precision = 0.637427 at threshold = 0.5
   Recall    = 0.041148
   F1        = 0.077305


Total learning time: 134.2384951171875 seconds
Total inference time: 8.94 seconds
AUC ROC: 0.557912
Total revision time: 134.2384951171875
Best scored revision CLL: -0.616016


Dataset: 13_twitter_cora, Fold: 1, Type: Transfer (trRDN-B), Time: 00:02:32
{'AUC ROC': 0.557912, 'AUC PR': 0.428552, 'CLL': -0.651363, 'Precision': [0.637427, 0.5], 'Recall': 0.041148, 'F1': 0.077305, 'Learning time': 134.2384951171875, 'Inference time': 8.94, 'parameter': {'AUC ROC': 0.557323, 'AUC PR': 0.428209, 'CLL': -0.652612, 'Precision': [0.637427, 0.5], 'Recall': 0.041148, 'F1': 0.077305, 'Learning time': 65.5259804725647, 'Inference time': 8.309}}


Starting fold 2

Target train facts examples: 9016
Target train pos examples: 771
Target train neg examples: 544

Target test facts examples: 33542
Target test pos  examples: 2246
Target test neg examples: 4478

******************************************
Performing Parameter Learning
******************************************
Refine
0;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
0;true;follows(A, D).;false;false
0;false;follows(A, E), recursion_accounttype(E, B).;true;true
0;false,true;follows(A, F), follows(F, A).;false;true
0;false,true,false;follows(A, G), follows(G, E).;false;false
0;false,false;follows(H, A).;true;true
0;false,false,true;follows(I, H), follows(I, A).;false;false
0;false,false,false;follows(A, J), follows(J, K).;false;false
1;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
1;true;follows(A, C), tweets(A, D).;false;false
1;false;follows(A, E), recursion_accounttype(E, B).;true;true
1;false,true;tweets(A, F), tweets(E, F).;false;true
1;false,true,false;follows(G, A), follows(E, H).;false;false
1;false,false;follows(I, A).;true;true
1;false,false,true;follows(I, J), recursion_accounttype(J, B).;false;false
1;false,false,false;tweets(A, K).;false;false
2;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
2;true;follows(C, D), follows(D, A).;false;false
2;false;follows(E, A).;true;true
2;false,true;follows(F, E), follows(F, A).;false;true
2;false,true,false;follows(E, G), recursion_accounttype(G, B).;false;false
2;false,false;follows(A, H), follows(H, I).;true;true
2;false,false,true;recursion_accounttype(I, B).;false;false
2;false,false,false;follows(A, J).;false;false
3;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
3;true;tweets(A, D), tweets(C, D).;false;false
3;false;follows(E, A).;true;true
3;false,true;follows(F, E), recursion_accounttype(F, B).;true;false
3;false,true,true;follows(A, G), recursion_accounttype(G, B).;false;false
3;false,false;follows(A, H), recursion_accounttype(H, B).;true;true
3;false,false,true;follows(A, I), follows(I, H).;false;false
3;false,false,false;tweets(A, J), follows(A, K).;false;false
4;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
4;true;follows(A, D), follows(D, C).;true;false
4;true,true;follows(D, A).;false;true
4;true,true,false;tweets(A, E).;false;false
4;false;follows(F, A).;false;true
4;false,false;follows(A, G), recursion_accounttype(G, B).;true;true
4;false,false,true;follows(G, H), follows(H, G).;false;false
4;false,false,false;follows(A, I), follows(I, J).;false;false
5;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
5;true;follows(D, A), tweets(D, E).;true;true
5;true,true;recursion_accounttype(D, B).;false;false
5;true,false;follows(C, F), follows(F, C).;true;false
5;true,false,true;tweets(C, G), recursion_accounttype(F, B).;false;false
5;false;follows(A, H), follows(H, A).;false;true
5;false,false;follows(I, A), recursion_accounttype(I, B).;false;true
5;false,false,false;tweets(A, J), follows(K, A).;false;false
6;;accounttype(A, B) :- follows(A, C).;true;true
6;true;follows(D, C), recursion_accounttype(D, B).;true;false
6;true,true;recursion_accounttype(C, B).;true;true
6;true,true,true;follows(E, A), follows(E, D).;false;false
6;true,true,false;follows(F, A), recursion_accounttype(F, B).;false;false
6;false;follows(G, A), recursion_accounttype(G, B).;false;true
6;false,false;follows(H, A).;false;true
6;false,false,false;tweets(A, I).;false;false
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
7;true;tweets(C, D), follows(A, C).;false;false
7;false;follows(E, A).;true;true
7;false,true;follows(E, F), recursion_accounttype(F, B).;true;false
7;false,true,true;follows(F, E), follows(A, F).;false;false
7;false,false;follows(A, G), recursion_accounttype(G, B).;true;true
7;false,false,true;tweets(A, H).;false;false
7;false,false,false;follows(A, I).;false;false
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;true;follows(C, D), recursion_accounttype(D, B).;false;true
8;true,false;follows(A, E), follows(E, A).;false;false
8;false;follows(F, A), follows(A, G).;true;true
8;false,true;follows(G, A), follows(G, F).;false;true
8;false,true,false;follows(H, F), recursion_accounttype(H, B).;false;false
8;false,false;follows(I, A), recursion_accounttype(I, B).;false;true
8;false,false,false;follows(J, A).;false;false
9;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
9;true;follows(C, D).;true;false
9;true,true;follows(A, D).;true;true
9;true,true,true;follows(E, A), recursion_accounttype(E, B).;false;false
9;true,true,false;tweets(C, F), follows(D, C).;false;false
9;false;follows(A, G), follows(H, A).;false;true
9;false,false;follows(I, A), recursion_accounttype(I, B).;false;true
9;false,false,false;follows(J, A).;false;false


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.4356367001892301;  // std dev = 0.494, 1,226.000 (wgt'ed) examples reached here.  /* #neg=518 #pos=708 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then return 0.5949910403626703;  // std dev = 0.440, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.5640312880406888;  // std dev = 1.879, 17.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=12 */
%   | | | else return 0.8581489350995122;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(B, K) )
%   | | then return 0.8581489350995122;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.2867203636709409;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | else return 0.2867203636709409;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.37395569825543723;  // std dev = 0.494, 1,226.000 (wgt'ed) examples reached here.  /* #neg=518 #pos=708 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then return 0.5062567560764839;  // std dev = 0.440, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.48074388375574334;  // std dev = 1.879, 17.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=12 */
%   | | | else return 0.7194734122109545;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(B, K) )
%   | | then return 0.7194734122109543;  // std dev = 7.30e-08, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.24811816884741297;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | else return 0.24811816884741297;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordauthor(D, C) )
%   then if ( haswordtitle(E, C) )
%   | then return 0.5791684237702857;  // std dev = 0.357, 20.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=17 */
%   | else if ( haswordvenue(B, C) )
%   | | then return 0.22916842377028543;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else if ( author(F, D), venue(F, B) )
%   | | | then return -0.008145345695425868;  // std dev = 0.852, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | else return -0.07083157622971455;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   else if ( haswordvenue(A, G), haswordvenue(B, G) )
%   | then if ( haswordtitle(H, G) )
%   | | then return 0.3045453081923796;  // std dev = 0.494, 1,194.000 (wgt'ed) examples reached here.  /* #neg=507 #pos=687 */
%   | | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | | then return 0.4047531668618019;  // std dev = 1.919, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | | else return 0.4246457186582996;  // std dev = 1.908, 22.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=17 */
%   | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | then return 0.4317030979309822;  // std dev = 0.348, 33.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=26 */
%   | | else return 0.20848477447886868;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordauthor(D, C) )
%   then if ( haswordtitle(E, C) )
%   | then return 0.4513849731813856;  // std dev = 0.357, 20.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=17 */
%   | else if ( haswordvenue(B, C) )
%   | | then return 0.18162271221626702;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else if ( author(F, D), venue(F, B) )
%   | | | then return -0.006592444675509679;  // std dev = 0.852, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | else return -0.05707271743850968;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   else if ( haswordvenue(A, G), haswordvenue(B, G) )
%   | then if ( haswordtitle(H, G) )
%   | | then return 0.24042272651457108;  // std dev = 0.494, 1,194.000 (wgt'ed) examples reached here.  /* #neg=507 #pos=687 */
%   | | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | | then return 0.3098169854894562;  // std dev = 1.919, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | | else return 0.32456036871644023;  // std dev = 1.905, 22.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=17 */
%   | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | then return 0.33370432400678046;  // std dev = 0.346, 34.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=26 */
%   | | else return 0.15862414845603107;  // std dev = 0.499, 13.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=6 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordtitle(F, D) )
%   | | then return 0.45357492933583404;  // std dev = 0.356, 20.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=17 */
%   | | else if ( haswordvenue(A, D) )
%   | | | then return 0.140979150293288;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return -0.140445595378058;  // std dev = 1.225, 8.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | else if ( haswordtitle(G, C) )
%   | | then return 0.1839396211181616;  // std dev = 0.493, 1,194.000 (wgt'ed) examples reached here.  /* #neg=507 #pos=687 */
%   | | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | | then return 0.23288770051702257;  // std dev = 1.919, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | | else return 0.24463018700680503;  // std dev = 1.906, 22.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=17 */
%   else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordvenue(A, L) )
%   | | then return 0.3674830626152011;  // std dev = 3.65e-08, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.10183264543670413;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | else return 0.0997167650237253;  // std dev = 0.488, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.14101598080301853;  // std dev = 0.492, 1,226.000 (wgt'ed) examples reached here.  /* #neg=518 #pos=708 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then return 0.17498421379444495;  // std dev = 0.440, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.14651091925551252;  // std dev = 1.879, 17.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=12 */
%   | | | else return 0.31616366159683973;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(A, K) )
%   | | then return 0.2868949074503533;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.0790491450754914;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | else return 0.0774458362118892;  // std dev = 0.488, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordauthor(D, C) )
%   then if ( haswordtitle(E, C) )
%   | then return 0.2565608276853954;  // std dev = 0.356, 20.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=17 */
%   | else if ( author(F, D), venue(F, B) )
%   | | then return -0.06447107822333782;  // std dev = 0.844, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | else if ( haswordvenue(B, C) )
%   | | | then return 0.07386092954304789;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return -0.11144846286896581;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   else if ( haswordvenue(A, G), haswordvenue(B, G) )
%   | then if ( haswordtitle(H, G) )
%   | | then return 0.10492204924854115;  // std dev = 0.493, 1,194.000 (wgt'ed) examples reached here.  /* #neg=507 #pos=687 */
%   | | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | | then return 0.1324762415840328;  // std dev = 1.919, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | | else return 0.14288618698117547;  // std dev = 1.899, 22.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=17 */
%   | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | then return 0.17344211184651911;  // std dev = 0.321, 33.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=26 */
%   | | else return 0.060870033991458225;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.0797383219763429;  // std dev = 0.492, 1,226.000 (wgt'ed) examples reached here.  /* #neg=518 #pos=708 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then return 0.10127711761073177;  // std dev = 0.440, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.07686383415218308;  // std dev = 1.879, 17.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=12 */
%   | | | else return 0.22609244393172193;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(A, K) )
%   | | then return 0.20248257489154176;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.04660747569805666;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | else return 0.02194647280888887;  // std dev = 0.486, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordtitle(F, D) )
%   | | then return 0.17866039675153195;  // std dev = 0.356, 20.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=17 */
%   | | else if ( haswordvenue(B, D) )
%   | | | then return 0.03594341293743274;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return -0.06779379693493272;  // std dev = 1.219, 8.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | else if ( haswordtitle(G, C) )
%   | | then return 0.058818604550560954;  // std dev = 0.493, 1,194.000 (wgt'ed) examples reached here.  /* #neg=507 #pos=687 */
%   | | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | | then return 0.07815629510841408;  // std dev = 1.919, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | | else return 0.08862930578101294;  // std dev = 1.896, 22.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=17 */
%   else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordvenue(A, L) )
%   | | then return 0.1717418468450019;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.03554611554298846;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | else return 0.016689369688269746;  // std dev = 0.486, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(B, C), haswordauthor(D, C) )
%   then if ( haswordtitle(E, C) )
%   | then return 0.24495728075168607;  // std dev = 0.355, 20.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=17 */
%   | else if ( haswordvenue(A, C) )
%   | | then return 0.02699339679806735;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else if ( author(F, D), venue(F, A) )
%   | | | then return -0.18775057948791843;  // std dev = 0.853, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | else return -0.24982192764293426;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   else if ( haswordvenue(A, G), haswordvenue(B, G) )
%   | then if ( haswordtitle(H, G) )
%   | | then return 0.043387868929755;  // std dev = 0.493, 1,194.000 (wgt'ed) examples reached here.  /* #neg=507 #pos=687 */
%   | | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | | then return 0.06080926191424572;  // std dev = 1.919, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | | else return 0.07019130372262049;  // std dev = 1.898, 22.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=17 */
%   | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | then return 0.11373988247401479;  // std dev = 0.316, 33.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=26 */
%   | | else return 0.012678348847926688;  // std dev = 0.486, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */


Results
   AUC ROC   = 0.535507
   AUC PR    = 0.344513
   CLL	      = -0.756144
   Precision = 0.353871 at threshold = 0.5
   Recall    = 0.956367
   F1        = 0.516595


Total learning time: 63.90351724624634 seconds
Total inference time: 6.001 seconds
AUC ROC: 0.535507


Results scoring model
   AUC ROC   = 0.553688
   AUC PR    = 0.662371
   CLL	      = -0.664717
   Precision = 0.594317 at threshold = 0.5
   Recall    = 0.976654
   F1        = 0.73896


Total scoring time: 1.173 seconds
Parameter learned model CLL: -0.664717


Structure after Parameter Learning
[['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(A, E), haswordtitle(F, E)', 'true,false,false': 'haswordvenue(B, G), haswordtitle(H, G)', 'false': 'haswordvenue(A, I), haswordtitle(J, I)', 'false,true': 'haswordtitle(J, K), haswordvenue(B, K)'}, {'true,true': [0.494, 518, 708], 'true,false,true': [0.44, 5, 14], 'true,false,false,true': [1.879, 5, 12], 'true,false,false,false': [0.0, 0, 5], 'false,true,true': [0.0, 0, 20], 'false,true,false': [0.495, 8, 6], 'false,false': [0.495, 8, 6]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(A, E), haswordtitle(F, E)', 'true,false,false': 'haswordvenue(B, G), haswordtitle(H, G)', 'false': 'haswordvenue(A, I), haswordtitle(J, I)', 'false,true': 'haswordtitle(J, K), haswordvenue(B, K)'}, {'true,true': [0.494, 518, 708], 'true,false,true': [0.44, 5, 14], 'true,false,false,true': [1.879, 5, 12], 'true,false,false,false': [0.0, 0, 5], 'false,true,true': [7.3e-08, 0, 20], 'false,true,false': [0.495, 8, 6], 'false,false': [0.495, 8, 6]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordauthor(D, C)', 'true': 'haswordtitle(E, C)', 'true,false': 'haswordvenue(B, C)', 'true,false,false': 'author(F, D), venue(F, B)', 'false': 'haswordvenue(A, G), haswordvenue(B, G)', 'false,true': 'haswordtitle(H, G)', 'false,true,false': 'haswordvenue(A, I), haswordtitle(J, I)', 'false,false': 'haswordvenue(A, K), haswordtitle(L, K)'}, {'true,true': [0.357, 3, 17], 'true,false,true': [1.0, 2, 2], 'true,false,false,true': [0.852, 3, 1], 'true,false,false,false': [0.894, 4, 1], 'false,true,true': [0.494, 507, 687], 'false,true,false,true': [1.919, 5, 14], 'false,true,false,false': [1.908, 5, 17], 'false,false,true': [0.348, 7, 26], 'false,false,false': [0.495, 8, 6]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordauthor(D, C)', 'true': 'haswordtitle(E, C)', 'true,false': 'haswordvenue(B, C)', 'true,false,false': 'author(F, D), venue(F, B)', 'false': 'haswordvenue(A, G), haswordvenue(B, G)', 'false,true': 'haswordtitle(H, G)', 'false,true,false': 'haswordvenue(A, I), haswordtitle(J, I)', 'false,false': 'haswordvenue(B, K), haswordtitle(L, K)'}, {'true,true': [0.357, 3, 17], 'true,false,true': [1.0, 2, 2], 'true,false,false,true': [0.852, 3, 1], 'true,false,false,false': [0.894, 4, 1], 'false,true,true': [0.494, 507, 687], 'false,true,false,true': [1.919, 5, 14], 'false,true,false,false': [1.905, 5, 17], 'false,false,true': [0.346, 8, 26], 'false,false,false': [0.499, 7, 6]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(B, D), haswordauthor(E, D)', 'true,true': 'haswordtitle(F, D)', 'true,true,false': 'haswordvenue(A, D)', 'true,false': 'haswordtitle(G, C)', 'true,false,false': 'haswordvenue(A, H), haswordtitle(I, H)', 'false': 'haswordvenue(B, J), haswordtitle(K, J)', 'false,true': 'haswordtitle(K, L), haswordvenue(A, L)'}, {'true,true,true': [0.356, 3, 17], 'true,true,false,true': [1.0, 2, 2], 'true,true,false,false': [1.225, 6, 2], 'true,false,true': [0.493, 507, 687], 'true,false,false,true': [1.919, 5, 14], 'true,false,false,false': [1.906, 5, 17], 'false,true,true': [3.65e-08, 0, 20], 'false,true,false': [0.495, 8, 6], 'false,false': [0.488, 8, 6]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(A, E), haswordtitle(F, E)', 'true,false,false': 'haswordvenue(B, G), haswordtitle(H, G)', 'false': 'haswordvenue(B, I), haswordtitle(J, I)', 'false,true': 'haswordtitle(J, K), haswordvenue(A, K)'}, {'true,true': [0.492, 518, 708], 'true,false,true': [0.44, 5, 14], 'true,false,false,true': [1.879, 5, 12], 'true,false,false,false': [0.0, 0, 5], 'false,true,true': [0.0, 0, 20], 'false,true,false': [0.495, 8, 6], 'false,false': [0.488, 8, 6]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordauthor(D, C)', 'true': 'haswordtitle(E, C)', 'true,false': 'author(F, D), venue(F, B)', 'true,false,false': 'haswordvenue(B, C)', 'false': 'haswordvenue(A, G), haswordvenue(B, G)', 'false,true': 'haswordtitle(H, G)', 'false,true,false': 'haswordvenue(A, I), haswordtitle(J, I)', 'false,false': 'haswordvenue(A, K), haswordtitle(L, K)'}, {'true,true': [0.356, 3, 17], 'true,false,true': [0.844, 3, 1], 'true,false,false,true': [1.0, 2, 2], 'true,false,false,false': [0.894, 4, 1], 'false,true,true': [0.493, 507, 687], 'false,true,false,true': [1.919, 5, 14], 'false,true,false,false': [1.899, 5, 17], 'false,false,true': [0.321, 7, 26], 'false,false,false': [0.495, 8, 6]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(A, E), haswordtitle(F, E)', 'true,false,false': 'haswordvenue(B, G), haswordtitle(H, G)', 'false': 'haswordvenue(B, I), haswordtitle(J, I)', 'false,true': 'haswordtitle(J, K), haswordvenue(A, K)'}, {'true,true': [0.492, 518, 708], 'true,false,true': [0.44, 5, 14], 'true,false,false,true': [1.879, 5, 12], 'true,false,false,false': [0.0, 0, 5], 'false,true,true': [0.0, 0, 20], 'false,true,false': [0.495, 8, 6], 'false,false': [0.486, 8, 6]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(A, D), haswordauthor(E, D)', 'true,true': 'haswordtitle(F, D)', 'true,true,false': 'haswordvenue(B, D)', 'true,false': 'haswordtitle(G, C)', 'true,false,false': 'haswordvenue(A, H), haswordtitle(I, H)', 'false': 'haswordvenue(B, J), haswordtitle(K, J)', 'false,true': 'haswordtitle(K, L), haswordvenue(A, L)'}, {'true,true,true': [0.356, 3, 17], 'true,true,false,true': [1.0, 2, 2], 'true,true,false,false': [1.219, 6, 2], 'true,false,true': [0.493, 507, 687], 'true,false,false,true': [1.919, 5, 14], 'true,false,false,false': [1.896, 5, 17], 'false,true,true': [0.0, 0, 20], 'false,true,false': [0.495, 8, 6], 'false,false': [0.486, 8, 6]}], ['samevenue(A, B)', {'': 'haswordvenue(B, C), haswordauthor(D, C)', 'true': 'haswordtitle(E, C)', 'true,false': 'haswordvenue(A, C)', 'true,false,false': 'author(F, D), venue(F, A)', 'false': 'haswordvenue(A, G), haswordvenue(B, G)', 'false,true': 'haswordtitle(H, G)', 'false,true,false': 'haswordvenue(A, I), haswordtitle(J, I)', 'false,false': 'haswordvenue(B, K), haswordtitle(L, K)'}, {'true,true': [0.355, 3, 17], 'true,false,true': [1.0, 2, 2], 'true,false,false,true': [0.853, 3, 1], 'true,false,false,false': [0.894, 4, 1], 'false,true,true': [0.493, 507, 687], 'false,true,false,true': [1.919, 5, 14], 'false,true,false,false': [1.898, 5, 17], 'false,false,true': [0.316, 7, 26], 'false,false,false': [0.486, 8, 6]}]]
[{'': [0.24306651325713594, 0.22222222222222385], 'true': [0.24399564626142126, 0.1844140392623454], 'false': [0.17993079584775207, 0.24489795918367352], 'true,false': [0.19390581717451486, 0.17561983471074338], 'false,true': [-8.881784197001253e-17, 0.24489795918367352], 'true,false,false': [0.20761245674740453, 0.0]}, {'': [0.2426572019465864, 0.1968581969586748], 'true': [0.2439956462613994, 0.18151807630785113], 'false': [0.15465453537750243, 0.24489795918367324], 'true,false': [0.193905817174515, 0.170436695832288], 'true,false,false': [0.20761245674740458, 0.0], 'false,true': [2.6645352591003756e-16, 0.24489795918367324]}, {'': [0.22952352137572604, 0.23994088079159367], 'false': [0.24253575522871798, 0.16862805083149526], 'false,true': [0.24431832529482975, 0.1787372059517856], 'true': [0.12749999999999978, 0.21079846857026777], 'true,false': [0.25, 0.17058790973374105], 'false,true,false': [0.1939058171745152, 0.16545366223293662], 'true,false,false': [0.18163970606836305, 0.16000000000000003], 'false,false': [0.12142920769740277, 0.2448979591836735]}, {'': [0.19994562389889503, 0.23941615243062966], 'false': [0.24232387034928346, 0.16128844856615307], 'false,true': [0.24431832529481307, 0.17846373208604321], 'true': [0.1275000000000001, 0.20475562200934608], 'true,false': [0.24999999999999997, 0.17025676935000267], 'false,true,false': [0.1939058171745152, 0.16502665466276983], 'true,false,false': [0.18166203218293545, 0.16000000000000003], 'false,false': [0.11945642868432348, 0.24852071005917167]}, {'': [0.24069494216805873, 0.1582848764013507], 'true': [0.22235943202310438, 0.24100749418558248], 'true,false': [0.24305232858162754, 0.17850681904003896], 'true,true': [0.12638548578341396, 0.2259333083280404], 'true,true,false': [0.25, 0.1875], 'true,false,false': [0.19390581717451524, 0.16514378590240728], 'false': [0.11793345063375366, 0.2385130172301659], 'false,true': [6.661338147750939e-17, 0.24489795918367332]}, {'': [0.2398563085115379, 0.15150827503449463], 'true': [0.24185200505356225, 0.17867957121202083], 'true,false': [0.19390581717451524, 0.16548250687430513], 'true,false,false': [0.2076124567474048, 0.0], 'false': [0.11130397027148871, 0.23827957804200292], 'false,true': [0.0, 0.24489795918367357]}, {'': [0.17635114594214993, 0.23798906100137796], 'false': [0.24137033194386562, 0.14803449240782235], 'false,true': [0.24351504834737467, 0.17785020523152648], 'false,true,false': [0.1939058171745152, 0.16393377608053566], 'true': [0.126740935628257, 0.1993812992007505], 'true,false': [0.17804497583228648, 0.2084789063990395], 'true,false,false': [0.25000000000000006, 0.16], 'false,false': [0.10316612133642697, 0.24489795918367335]}, {'': [0.23955562506580294, 0.1472103425910297], 'true': [0.24158910562575403, 0.17806299644029144], 'true,false': [0.19390581717451524, 0.16433871684204915], 'true,false,false': [0.20761245674740483, -1.1102230246251566e-17], 'false': [0.1067254339143864, 0.23594152947738184], 'false,true': [-2.2204460492503132e-17, 0.24489795918367346]}, {'': [0.2395391762793551, 0.1454363919588689], 'true': [0.16831927210516906, 0.24134502388192125], 'true,false': [0.2435146595700776, 0.17755880790832362], 'true,false,false': [0.19390581717451524, 0.16339010712059798], 'true,true': [0.1268009804127145, 0.20945950739143715], 'true,true,false': [0.25000000000000006, 0.18560212484978794], 'false': [0.10533324065259325, 0.23589132741839894], 'false,true': [-2.7755575615628914e-17, 0.24489795918367346]}, {'': [0.19503004405458296, 0.23697790919811157], 'false': [0.24051818746257905, 0.14244816457082277], 'false,true': [0.24265772059166518, 0.17772329191298594], 'true': [0.12631681431745562, 0.20832134909674685], 'true,false': [0.24999999999999997, 0.1706853118844881], 'false,true,false': [0.19390581717451524, 0.16370668363041171], 'true,false,false': [0.18190147826133088, 0.16], 'false,false': [0.09977914704398107, 0.23585400024057915]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,false;haswordvenue(A, E), haswordtitle(F, E).;true;true
0;true,false,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
0;false;haswordvenue(A, I), haswordtitle(J, I).;true;true
0;false,true;haswordtitle(J, K), haswordvenue(B, K).;true;true
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,false;haswordvenue(A, E), haswordtitle(F, E).;true;true
1;true,false,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;false;haswordvenue(A, I), haswordtitle(J, I).;true;true
1;false,true;haswordtitle(J, K), haswordvenue(B, K).;true;true
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;false;haswordvenue(B, J), haswordtitle(K, J).;true;true
4;false,true;haswordtitle(K, L), haswordvenue(A, L).;true;true
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,false;haswordvenue(A, E), haswordtitle(F, E).;true;true
5;true,false,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
5;false;haswordvenue(B, I), haswordtitle(J, I).;true;true
5;false,true;haswordtitle(J, K), haswordvenue(A, K).;true;true
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,false;haswordvenue(A, E), haswordtitle(F, E).;true;true
7;true,false,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
7;false;haswordvenue(B, I), haswordtitle(J, I).;true;true
7;false,true;haswordtitle(J, K), haswordvenue(A, K).;true;true
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;false;haswordvenue(B, J), haswordtitle(K, J).;true;true
8;false,true;haswordtitle(K, L), haswordvenue(A, L).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.4356367001892301;  // std dev = 0.494, 1,226.000 (wgt'ed) examples reached here.  /* #neg=518 #pos=708 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then return 0.5949910403626703;  // std dev = 0.440, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.5640312880406888;  // std dev = 1.879, 17.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=12 */
%   | | | else return 0.8581489350995122;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(B, K) )
%   | | then return 0.8581489350995122;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.2867203636709409;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | else return 0.2867203636709409;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.37395569825543723;  // std dev = 0.494, 1,226.000 (wgt'ed) examples reached here.  /* #neg=518 #pos=708 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then return 0.5062567560764839;  // std dev = 0.440, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.48074388375574334;  // std dev = 1.879, 17.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=12 */
%   | | | else return 0.7194734122109545;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(B, K) )
%   | | then return 0.7194734122109543;  // std dev = 7.30e-08, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.24811816884741297;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | else return 0.24811816884741297;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.30665618885999163;  // std dev = 0.494, 1,226.000 (wgt'ed) examples reached here.  /* #neg=518 #pos=708 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then return 0.4047531668618019;  // std dev = 0.440, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.386198448632422;  // std dev = 1.879, 17.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=12 */
%   | | | else return 0.5553664367462845;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(A, K) )
%   | | then return 0.5553664367462846;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.20848477447886868;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | else return 0.20848477447886868;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.24206322397592006;  // std dev = 0.494, 1,226.000 (wgt'ed) examples reached here.  /* #neg=518 #pos=708 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then return 0.3261448737160187;  // std dev = 0.439, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | | then return 0.2788572331674748;  // std dev = 1.879, 17.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=12 */
%   | | | else return 0.4175135841583099;  // std dev = 1.49e-08, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(B, K) )
%   | | then return 0.41751358415830986;  // std dev = 5.16e-08, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.17062637354018512;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | else return 0.17062637354018512;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordtitle(F, D) )
%   | | then return 0.4586612187245652;  // std dev = 0.357, 20.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=17 */
%   | | else if ( haswordvenue(A, D) )
%   | | | then return 0.10866121872456526;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return -0.14133878127543473;  // std dev = 1.225, 8.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | else if ( haswordtitle(G, C) )
%   | | then return 0.18403810314669028;  // std dev = 0.494, 1,194.000 (wgt'ed) examples reached here.  /* #neg=507 #pos=687 */
%   | | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | | then return 0.24558668125641064;  // std dev = 1.914, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | | else return 0.23490503051382786;  // std dev = 1.891, 22.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=17 */
%   else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordvenue(B, L) )
%   | | then return 0.3207118471601496;  // std dev = 2.11e-08, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.13664585375352212;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | else return 0.13664585375352212;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordtitle(F, D) )
%   | | then return 0.3457568443635729;  // std dev = 0.357, 20.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=17 */
%   | | else if ( haswordvenue(A, D) )
%   | | | then return 0.08249570247950498;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return -0.10823638572622582;  // std dev = 1.225, 8.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | else if ( haswordtitle(G, C) )
%   | | then return 0.1394354277206239;  // std dev = 0.494, 1,194.000 (wgt'ed) examples reached here.  /* #neg=507 #pos=687 */
%   | | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | | then return 0.1843926491048414;  // std dev = 1.915, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | | else return 0.17858400017571843;  // std dev = 1.894, 22.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=17 */
%   else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordvenue(B, L) )
%   | | then return 0.25517224256948945;  // std dev = 1.49e-08, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.10762034996184425;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | else return 0.10762034996184425;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.10606136147433547;  // std dev = 0.493, 1,226.000 (wgt'ed) examples reached here.  /* #neg=518 #pos=708 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then return 0.1369486899938656;  // std dev = 0.439, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.11029848809583002;  // std dev = 1.879, 17.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=12 */
%   | | | else return 0.2379427838492716;  // std dev = 7.45e-09, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(B, K) )
%   | | then return 0.2097577156325356;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.08372807955323866;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | else return 0.08372807955323866;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordauthor(D, C) )
%   then if ( haswordtitle(E, C) )
%   | then return 0.3471314914501008;  // std dev = 0.356, 20.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=17 */
%   | else if ( haswordvenue(B, C) )
%   | | then return 0.03605478835921884;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else if ( author(F, D), venue(F, B) )
%   | | | then return -0.21372062863555702;  // std dev = 0.835, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | else return -0.29696171330237203;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   else if ( haswordvenue(A, G), haswordvenue(B, G) )
%   | then if ( haswordtitle(H, G) )
%   | | then return 0.0774681188165936;  // std dev = 0.493, 1,194.000 (wgt'ed) examples reached here.  /* #neg=507 #pos=687 */
%   | | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | | then return 0.11251093658851966;  // std dev = 1.913, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | | else return 0.10297046158450582;  // std dev = 1.894, 22.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=17 */
%   | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | then return 0.14575648741360903;  // std dev = 0.315, 33.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=26 */
%   | | else return 0.06457405393631672;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.05979105630723591;  // std dev = 0.492, 1,226.000 (wgt'ed) examples reached here.  /* #neg=518 #pos=708 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then return 0.08075539732226207;  // std dev = 0.439, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.05796270886439176;  // std dev = 1.879, 17.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=12 */
%   | | | else return 0.18169515258754354;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(A, K) )
%   | | then return 0.15684395404186718;  // std dev = 1.67e-08, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.04949778322519479;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | else return 0.03608670751568198;  // std dev = 0.490, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.04491123799421882;  // std dev = 0.492, 1,226.000 (wgt'ed) examples reached here.  /* #neg=518 #pos=708 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then return 0.072941583006325;  // std dev = 0.439, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | | then return 0.033490783815348965;  // std dev = 1.879, 17.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=12 */
%   | | | else return 0.1562235234559377;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(A, K) )
%   | | then return 0.13719983240199474;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.03777940363354101;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | else return 0.027466025968485575;  // std dev = 0.490, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */


Results
   AUC ROC   = 0.537215
   AUC PR    = 0.344276
   CLL	      = -0.75568
   Precision = 0.35429 at threshold = 0.5
   Recall    = 0.955922
   F1        = 0.516976


Total learning time: 62.535189390182495 seconds
Total inference time: 6.649 seconds
AUC ROC: 0.537215


Results scoring model
   AUC ROC   = 0.553342
   AUC PR    = 0.660693
   CLL	      = -0.666312
   Precision = 0.594317 at threshold = 0.5
   Recall    = 0.976654
   F1        = 0.73896


Total scoring time: 1.08 seconds
Refined model CLL: -0.666312


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.535507
   AUC PR    = 0.344513
   CLL	      = -0.756144
   Precision = 0.353871 at threshold = 0.5
   Recall    = 0.956367
   F1        = 0.516595


Total learning time: 128.69170663642885 seconds
Total inference time: 6.001 seconds
AUC ROC: 0.535507
Total revision time: 128.69170663642885
Best scored revision CLL: -0.664717


Dataset: 13_twitter_cora, Fold: 2, Type: Transfer (trRDN-B), Time: 00:04:53
{'AUC ROC': 0.535507, 'AUC PR': 0.344513, 'CLL': -0.756144, 'Precision': [0.353871, 0.5], 'Recall': 0.956367, 'F1': 0.516595, 'Learning time': 128.69170663642885, 'Inference time': 6.001, 'parameter': {'AUC ROC': 0.535507, 'AUC PR': 0.344513, 'CLL': -0.756144, 'Precision': [0.353871, 0.5], 'Recall': 0.956367, 'F1': 0.516595, 'Learning time': 63.90351724624634, 'Inference time': 6.001}}


Starting fold 3

Target train facts examples: 9306
Target train pos examples: 581
Target train neg examples: 2222

Target test facts examples: 33252
Target test pos  examples: 2436
Target test neg examples: 2800

******************************************
Performing Parameter Learning
******************************************
Refine
0;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
0;true;follows(A, D).;false;false
0;false;follows(A, E), recursion_accounttype(E, B).;true;true
0;false,true;follows(A, F), follows(F, A).;false;true
0;false,true,false;follows(A, G), follows(G, E).;false;false
0;false,false;follows(H, A).;true;true
0;false,false,true;follows(I, H), follows(I, A).;false;false
0;false,false,false;follows(A, J), follows(J, K).;false;false
1;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
1;true;follows(A, C), tweets(A, D).;false;false
1;false;follows(A, E), recursion_accounttype(E, B).;true;true
1;false,true;tweets(A, F), tweets(E, F).;false;true
1;false,true,false;follows(G, A), follows(E, H).;false;false
1;false,false;follows(I, A).;true;true
1;false,false,true;follows(I, J), recursion_accounttype(J, B).;false;false
1;false,false,false;tweets(A, K).;false;false
2;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
2;true;follows(C, D), follows(D, A).;false;false
2;false;follows(E, A).;true;true
2;false,true;follows(F, E), follows(F, A).;false;true
2;false,true,false;follows(E, G), recursion_accounttype(G, B).;false;false
2;false,false;follows(A, H), follows(H, I).;true;true
2;false,false,true;recursion_accounttype(I, B).;false;false
2;false,false,false;follows(A, J).;false;false
3;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
3;true;tweets(A, D), tweets(C, D).;false;false
3;false;follows(E, A).;true;true
3;false,true;follows(F, E), recursion_accounttype(F, B).;true;false
3;false,true,true;follows(A, G), recursion_accounttype(G, B).;false;false
3;false,false;follows(A, H), recursion_accounttype(H, B).;true;true
3;false,false,true;follows(A, I), follows(I, H).;false;false
3;false,false,false;tweets(A, J), follows(A, K).;false;false
4;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
4;true;follows(A, D), follows(D, C).;true;false
4;true,true;follows(D, A).;false;true
4;true,true,false;tweets(A, E).;false;false
4;false;follows(F, A).;false;true
4;false,false;follows(A, G), recursion_accounttype(G, B).;true;true
4;false,false,true;follows(G, H), follows(H, G).;false;false
4;false,false,false;follows(A, I), follows(I, J).;false;false
5;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
5;true;follows(D, A), tweets(D, E).;true;true
5;true,true;recursion_accounttype(D, B).;false;false
5;true,false;follows(C, F), follows(F, C).;true;false
5;true,false,true;tweets(C, G), recursion_accounttype(F, B).;false;false
5;false;follows(A, H), follows(H, A).;false;true
5;false,false;follows(I, A), recursion_accounttype(I, B).;false;true
5;false,false,false;tweets(A, J), follows(K, A).;false;false
6;;accounttype(A, B) :- follows(A, C).;true;true
6;true;follows(D, C), recursion_accounttype(D, B).;true;false
6;true,true;recursion_accounttype(C, B).;true;true
6;true,true,true;follows(E, A), follows(E, D).;false;false
6;true,true,false;follows(F, A), recursion_accounttype(F, B).;false;false
6;false;follows(G, A), recursion_accounttype(G, B).;false;true
6;false,false;follows(H, A).;false;true
6;false,false,false;tweets(A, I).;false;false
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
7;true;tweets(C, D), follows(A, C).;false;false
7;false;follows(E, A).;true;true
7;false,true;follows(E, F), recursion_accounttype(F, B).;true;false
7;false,true,true;follows(F, E), follows(A, F).;false;false
7;false,false;follows(A, G), recursion_accounttype(G, B).;true;true
7;false,false,true;tweets(A, H).;false;false
7;false,false,false;follows(A, I).;false;false
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;true;follows(C, D), recursion_accounttype(D, B).;false;true
8;true,false;follows(A, E), follows(E, A).;false;false
8;false;follows(F, A), follows(A, G).;true;true
8;false,true;follows(G, A), follows(G, F).;false;true
8;false,true,false;follows(H, F), recursion_accounttype(H, B).;false;false
8;false,false;follows(I, A), recursion_accounttype(I, B).;false;true
8;false,false,false;follows(J, A).;false;false
9;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
9;true;follows(C, D).;true;false
9;true,true;follows(A, D).;true;true
9;true,true,true;follows(E, A), recursion_accounttype(E, B).;false;false
9;true,true,false;tweets(C, F), follows(D, C).;false;false
9;false;follows(A, G), follows(H, A).;false;true
9;false,false;follows(I, A), recursion_accounttype(I, B).;false;true
9;false,false,false;follows(J, A).;false;false


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordtitle(F, C) )
%   | | then return 0.17729787126972513;  // std dev = 0.466, 47.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=15 */
%   | | else return 0.19148226843284552;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | else if ( haswordvenue(A, G), haswordauthor(H, G) )
%   | | then return 0.21926004621062345;  // std dev = 0.480, 36.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=13 */
%   | | else return 0.22436611040113977;  // std dev = 0.482, 1,409.000 (wgt'ed) examples reached here.  /* #neg=893 #pos=516 */
%   else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | then if ( title(K, J), venue(K, B) )
%   | | then if ( samebib(K, L), venue(L, A) )
%   | | | then return 0.5854216623722396;  // std dev = 2.089, 22.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=16 */
%   | | | else return -0.14185106490048766;  // std dev = 6.99e-08, 70.000 (wgt'ed) examples reached here.  /* #neg=70 */
%   | | else return -0.0418510649004878;  // std dev = 0.300, 20.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=2 */
%   | else if ( haswordvenue(A, M), haswordtitle(N, M) )
%   | | then return 0.009409439301193045;  // std dev = 0.358, 119.000 (wgt'ed) examples reached here.  /* #neg=101 #pos=18 */
%   | | else return -0.14185106490048777;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordtitle(F, C) )
%   | | then if ( haswordvenue(A, D) )
%   | | | then return 0.5018341160018718;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.1522406200669126;  // std dev = 2.980, 41.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=13 */
%   | | else return 0.16653882456488175;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | else return 0.20009285722166614;  // std dev = 0.483, 1,424.000 (wgt'ed) examples reached here.  /* #neg=895 #pos=529 */
%   else if ( haswordvenue(A, G), haswordauthor(H, G) )
%   | then return -0.030704257458101396;  // std dev = 0.284, 18.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=2 */
%   | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | then if ( title(K, J), venue(K, A) )
%   | | | then return 0.036774946623655345;  // std dev = 3.623, 89.000 (wgt'ed) examples reached here.  /* #neg=73 #pos=16 */
%   | | | else return -0.01800033427522063;  // std dev = 1.323, 16.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=2 */
%   | | else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | | | then return 0.01971919111422996;  // std dev = 3.362, 94.000 (wgt'ed) examples reached here.  /* #neg=78 #pos=16 */
%   | | | else return -0.12544463852839138;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordtitle(F, C) )
%   | | then return 0.20320822021341817;  // std dev = 0.486, 38.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=15 */
%   | | else return 0.058760909482231456;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | else if ( haswordvenue(A, G), haswordauthor(H, G) )
%   | | then return 0.14120016984453532;  // std dev = 0.474, 38.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=13 */
%   | | else return 0.1581065516716267;  // std dev = 0.480, 1,434.000 (wgt'ed) examples reached here.  /* #neg=918 #pos=516 */
%   else if ( haswordvenue(A, I), haswordauthor(J, I) )
%   | then return -0.039899737822531436;  // std dev = 0.273, 20.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=2 */
%   | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | then if ( title(M, L), venue(M, A) )
%   | | | then return 0.04520450074461705;  // std dev = 3.594, 83.000 (wgt'ed) examples reached here.  /* #neg=67 #pos=16 */
%   | | | else return -0.015808515072841735;  // std dev = 1.323, 16.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=2 */
%   | | else if ( haswordvenue(B, N), haswordtitle(P, N) )
%   | | | then return 0.009668067973216413;  // std dev = 3.374, 99.000 (wgt'ed) examples reached here.  /* #neg=83 #pos=16 */
%   | | | else return -0.11231637819360639;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.1316236483951187;  // std dev = 0.480, 1,515.000 (wgt'ed) examples reached here.  /* #neg=970 #pos=545 */
%   else if ( haswordvenue(A, D), haswordtitle(E, D) )
%   | then if ( title(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.7355449413534841;  // std dev = 1.333, 18.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=16 */
%   | | | else return -0.1533439475354051;  // std dev = 4.71e-08, 65.000 (wgt'ed) examples reached here.  /* #neg=65 */
%   | | else if ( title(H, E), venue(H, B) )
%   | | | then return -0.1389068155617796;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | | else return 0.042911366256402184;  // std dev = 1.279, 11.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=2 */
%   | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | then if ( title(K, J), venue(K, B) )
%   | | | then return 0.027957767090256228;  // std dev = 3.265, 91.000 (wgt'ed) examples reached here.  /* #neg=75 #pos=16 */
%   | | | else return -0.040340616085542805;  // std dev = 1.342, 20.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=2 */
%   | | else return -0.10567259969036127;  // std dev = 0.014, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.10612822490228163;  // std dev = 0.479, 1,521.000 (wgt'ed) examples reached here.  /* #neg=976 #pos=545 */
%   else if ( haswordvenue(B, D), haswordtitle(E, D) )
%   | then if ( title(F, E), venue(F, B) )
%   | | then if ( samebib(F, G), venue(G, A) )
%   | | | then return 0.4297110879284614;  // std dev = 2.310, 24.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=16 */
%   | | | else return -0.1309679019012234;  // std dev = 0.024, 61.000 (wgt'ed) examples reached here.  /* #neg=61 */
%   | | else if ( title(H, E), venue(H, A) )
%   | | | then return -0.13554396187249654;  // std dev = 5.27e-09, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | | | else return 0.046274219945685306;  // std dev = 1.279, 11.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=2 */
%   | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | then if ( title(K, J), venue(K, B) )
%   | | | then return -0.005396006443502565;  // std dev = 3.200, 102.000 (wgt'ed) examples reached here.  /* #neg=86 #pos=16 */
%   | | | else return 0.05588051193286296;  // std dev = 1.265, 10.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | | else return -0.09234903218319662;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordauthor(D, C) )
%   | then return 0.2270272564896149;  // std dev = 1.150, 6.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | else if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then return 0.04634303286770652;  // std dev = 0.462, 42.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=13 */
%   | | else return 0.07841652653915641;  // std dev = 0.477, 1,506.000 (wgt'ed) examples reached here.  /* #neg=977 #pos=529 */
%   else if ( haswordvenue(A, G), haswordauthor(H, G) )
%   | then return -0.025204397373616964;  // std dev = 0.267, 17.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=2 */
%   | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | then if ( title(K, J), venue(K, B) )
%   | | | then return -0.0013579537656342132;  // std dev = 3.207, 97.000 (wgt'ed) examples reached here.  /* #neg=81 #pos=16 */
%   | | | else return 0.1821830460389052;  // std dev = 1.155, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   | | else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | | | then return 0.006487201343536172;  // std dev = 3.064, 96.000 (wgt'ed) examples reached here.  /* #neg=80 #pos=16 */
%   | | | else return -0.08489421539698846;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.06497601561203835;  // std dev = 0.478, 1,542.000 (wgt'ed) examples reached here.  /* #neg=997 #pos=545 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return -0.039001962952359394;  // std dev = 0.244, 21.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=2 */
%   | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | then if ( title(H, G), venue(H, A) )
%   | | | then return 0.011598136475218568;  // std dev = 3.170, 90.000 (wgt'ed) examples reached here.  /* #neg=74 #pos=16 */
%   | | | else return -0.06587688119115391;  // std dev = 1.320, 24.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=2 */
%   | | else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | | | then return -0.10501747068000637;  // std dev = 0.032, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return -0.004396041893569989;  // std dev = 3.112, 100.000 (wgt'ed) examples reached here.  /* #neg=84 #pos=16 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.05569420395726619;  // std dev = 0.479, 1,524.000 (wgt'ed) examples reached here.  /* #neg=979 #pos=545 */
%   else if ( haswordvenue(B, D), haswordtitle(E, D) )
%   | then if ( title(F, E), venue(F, B) )
%   | | then if ( samebib(F, G), venue(G, A) )
%   | | | then return 0.4390821473691183;  // std dev = 1.961, 21.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=16 */
%   | | | else return -0.11512673151250981;  // std dev = 0.046, 62.000 (wgt'ed) examples reached here.  /* #neg=62 */
%   | | else if ( title(H, E), venue(H, A) )
%   | | | then return -0.12065339310370492;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | | else return 0.05868843820626089;  // std dev = 1.265, 10.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | then if ( title(K, J), venue(K, A) )
%   | | | then return 0.020208105981926086;  // std dev = 3.140, 85.000 (wgt'ed) examples reached here.  /* #neg=69 #pos=16 */
%   | | | else return -0.05715670893666638;  // std dev = 1.326, 22.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=2 */
%   | | else return -0.07955615394810124;  // std dev = 0.016, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordauthor(F, C) )
%   | | then return 0.24661702839365612;  // std dev = 1.021, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | else return 0.005505821969247846;  // std dev = 0.459, 43.000 (wgt'ed) examples reached here.  /* #neg=30 #pos=13 */
%   | else return 0.04411726243174337;  // std dev = 0.479, 1,477.000 (wgt'ed) examples reached here.  /* #neg=948 #pos=529 */
%   else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | then if ( title(I, H), venue(I, A) )
%   | | then if ( samebib(I, J), venue(J, B) )
%   | | | then return 0.38738224651431624;  // std dev = 2.309, 24.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=16 */
%   | | | else return -0.13661910736019842;  // std dev = 0.034, 62.000 (wgt'ed) examples reached here.  /* #neg=62 */
%   | | else if ( title(K, H), venue(K, B) )
%   | | | then return -0.10976988397265174;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | | else return 0.022921201035867863;  // std dev = 1.279, 11.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=2 */
%   | else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | | then return -3.0375932064496852E-5;  // std dev = 0.288, 104.000 (wgt'ed) examples reached here.  /* #neg=86 #pos=18 */
%   | | else return -0.07266330989074248;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.03452831636463159;  // std dev = 0.479, 1,523.000 (wgt'ed) examples reached here.  /* #neg=978 #pos=545 */
%   else if ( haswordvenue(A, D), haswordtitle(E, D) )
%   | then if ( title(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.36387140500580534;  // std dev = 2.089, 22.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=16 */
%   | | | else return -0.1207541938247102;  // std dev = 0.043, 71.000 (wgt'ed) examples reached here.  /* #neg=71 */
%   | | else if ( title(H, E), venue(H, B) )
%   | | | then return -0.0994936261031638;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | | else return -0.008138219934701455;  // std dev = 1.301, 13.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=2 */
%   | else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | | then return -0.0853804917898585;  // std dev = 0.029, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | | then return -0.01516686205095703;  // std dev = 3.018, 112.000 (wgt'ed) examples reached here.  /* #neg=94 #pos=18 */
%   | | | else return -0.07122340189628026;  // std dev = 0.011, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */


Results
   AUC ROC   = 0.565047
   AUC PR    = 0.514923
   CLL	      = -0.707658
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 47.76474595069885 seconds
Total inference time: 5.643 seconds
AUC ROC: 0.565047


Results scoring model
   AUC ROC   = 0.594621
   AUC PR    = 0.277306
   CLL	      = -0.51295
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total scoring time: 1.596 seconds
Parameter learned model CLL: -0.51295


Structure after Parameter Learning
[['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(B, D), haswordauthor(E, D)', 'true,true': 'haswordtitle(F, C)', 'true,false': 'haswordvenue(A, G), haswordauthor(H, G)', 'false': 'haswordvenue(B, I), haswordtitle(J, I)', 'false,true': 'title(K, J), venue(K, B)', 'false,true,true': 'samebib(K, L), venue(L, A)', 'false,false': 'haswordvenue(A, M), haswordtitle(N, M)'}, {'true,true,true': [0.466, 32, 15], 'true,true,false': [0.816, 2, 1], 'true,false,true': [0.48, 23, 13], 'true,false,false': [0.482, 893, 516], 'false,true,true,true': [2.089, 6, 16], 'false,true,true,false': [6.99e-08, 70, 0], 'false,true,false': [0.3, 18, 2], 'false,false,true': [0.358, 101, 18], 'false,false,false': [0.0, 3, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(B, D), haswordauthor(E, D)', 'true,true': 'haswordtitle(F, C)', 'true,true,true': 'haswordvenue(A, D)', 'false': 'haswordvenue(A, G), haswordauthor(H, G)', 'false,false': 'haswordvenue(A, I), haswordtitle(J, I)', 'false,false,true': 'title(K, J), venue(K, A)', 'false,false,false': 'haswordvenue(B, L), haswordtitle(M, L)'}, {'true,true,true,true': [0.816, 1, 2], 'true,true,true,false': [2.98, 28, 13], 'true,true,false': [0.816, 2, 1], 'true,false': [0.483, 895, 529], 'false,true': [0.284, 16, 2], 'false,false,true,true': [3.623, 73, 16], 'false,false,true,false': [1.323, 14, 2], 'false,false,false,true': [3.362, 78, 16], 'false,false,false,false': [0.0, 4, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(B, D), haswordauthor(E, D)', 'true,true': 'haswordtitle(F, C)', 'true,false': 'haswordvenue(A, G), haswordauthor(H, G)', 'false': 'haswordvenue(A, I), haswordauthor(J, I)', 'false,false': 'haswordvenue(A, K), haswordtitle(L, K)', 'false,false,true': 'title(M, L), venue(M, A)', 'false,false,false': 'haswordvenue(B, N), haswordtitle(P, N)'}, {'true,true,true': [0.486, 23, 15], 'true,true,false': [0.866, 3, 1], 'true,false,true': [0.474, 25, 13], 'true,false,false': [0.48, 918, 516], 'false,true': [0.273, 18, 2], 'false,false,true,true': [3.594, 67, 16], 'false,false,true,false': [1.323, 14, 2], 'false,false,false,true': [3.374, 83, 16], 'false,false,false,false': [0.0, 4, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'false': 'haswordvenue(A, D), haswordtitle(E, D)', 'false,true': 'title(F, E), venue(F, A)', 'false,true,true': 'samebib(F, G), venue(G, B)', 'false,true,false': 'title(H, E), venue(H, B)', 'false,false': 'haswordvenue(B, I), haswordtitle(J, I)', 'false,false,true': 'title(K, J), venue(K, B)'}, {'true': [0.48, 970, 545], 'false,true,true,true': [1.333, 2, 16], 'false,true,true,false': [4.71e-08, 65, 0], 'false,true,false,true': [0.0, 8, 0], 'false,true,false,false': [1.279, 9, 2], 'false,false,true,true': [3.265, 75, 16], 'false,false,true,false': [1.342, 18, 2], 'false,false,false': [0.014, 4, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'false': 'haswordvenue(B, D), haswordtitle(E, D)', 'false,true': 'title(F, E), venue(F, B)', 'false,true,true': 'samebib(F, G), venue(G, A)', 'false,true,false': 'title(H, E), venue(H, A)', 'false,false': 'haswordvenue(A, I), haswordtitle(J, I)', 'false,false,true': 'title(K, J), venue(K, B)'}, {'true': [0.479, 976, 545], 'false,true,true,true': [2.31, 8, 16], 'false,true,true,false': [0.024, 61, 0], 'false,true,false,true': [5.27e-09, 10, 0], 'false,true,false,false': [1.279, 9, 2], 'false,false,true,true': [3.2, 86, 16], 'false,false,true,false': [1.265, 8, 2], 'false,false,false': [0.0, 6, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordauthor(D, C)', 'true,false': 'haswordvenue(B, E), haswordauthor(F, E)', 'false': 'haswordvenue(A, G), haswordauthor(H, G)', 'false,false': 'haswordvenue(A, I), haswordtitle(J, I)', 'false,false,true': 'title(K, J), venue(K, B)', 'false,false,false': 'haswordvenue(B, L), haswordtitle(M, L)'}, {'true,true': [1.15, 3, 3], 'true,false,true': [0.462, 29, 13], 'true,false,false': [0.477, 977, 529], 'false,true': [0.267, 15, 2], 'false,false,true,true': [3.207, 81, 16], 'false,false,true,false': [1.155, 4, 2], 'false,false,false,true': [3.064, 80, 16], 'false,false,false,false': [0.0, 4, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'false': 'haswordvenue(A, D), haswordauthor(E, D)', 'false,false': 'haswordvenue(A, F), haswordtitle(G, F)', 'false,false,true': 'title(H, G), venue(H, A)', 'false,false,false': 'haswordvenue(B, I), haswordauthor(J, I)'}, {'true': [0.478, 997, 545], 'false,true': [0.244, 19, 2], 'false,false,true,true': [3.17, 74, 16], 'false,false,true,false': [1.32, 22, 2], 'false,false,false,true': [0.032, 3, 0], 'false,false,false,false': [3.112, 84, 16]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'false': 'haswordvenue(B, D), haswordtitle(E, D)', 'false,true': 'title(F, E), venue(F, B)', 'false,true,true': 'samebib(F, G), venue(G, A)', 'false,true,false': 'title(H, E), venue(H, A)', 'false,false': 'haswordvenue(A, I), haswordtitle(J, I)', 'false,false,true': 'title(K, J), venue(K, A)'}, {'true': [0.479, 979, 545], 'false,true,true,true': [1.961, 5, 16], 'false,true,true,false': [0.046, 62, 0], 'false,true,false,true': [0.0, 8, 0], 'false,true,false,false': [1.265, 8, 2], 'false,false,true,true': [3.14, 69, 16], 'false,false,true,false': [1.326, 20, 2], 'false,false,false': [0.016, 6, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(B, D), haswordauthor(E, D)', 'true,true': 'haswordauthor(F, C)', 'false': 'haswordvenue(A, G), haswordtitle(H, G)', 'false,true': 'title(I, H), venue(I, A)', 'false,true,true': 'samebib(I, J), venue(J, B)', 'false,true,false': 'title(K, H), venue(K, B)', 'false,false': 'haswordvenue(B, L), haswordtitle(M, L)'}, {'true,true,true': [1.021, 2, 3], 'true,true,false': [0.459, 30, 13], 'true,false': [0.479, 948, 529], 'false,true,true,true': [2.309, 8, 16], 'false,true,true,false': [0.034, 62, 0], 'false,true,false,true': [0.0, 8, 0], 'false,true,false,false': [1.279, 9, 2], 'false,false,true': [0.288, 86, 18], 'false,false,false': [0.0, 4, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'false': 'haswordvenue(A, D), haswordtitle(E, D)', 'false,true': 'title(F, E), venue(F, A)', 'false,true,true': 'samebib(F, G), venue(G, B)', 'false,true,false': 'title(H, E), venue(H, B)', 'false,false': 'haswordvenue(B, I), haswordauthor(J, I)', 'false,false,false': 'haswordvenue(B, K), haswordtitle(L, K)'}, {'true': [0.479, 978, 545], 'false,true,true,true': [2.089, 6, 16], 'false,true,true,false': [0.043, 71, 0], 'false,true,false,true': [0.0, 8, 0], 'false,true,false,false': [1.301, 11, 2], 'false,false,true': [0.029, 3, 0], 'false,false,false,true': [3.018, 94, 18], 'false,false,false,false': [0.011, 4, 0]}]]
[{'': [0.23165288978869142, 0.1301775147929005], 'true': [0.2175999999999995, 0.23206810263285724], 'true,false': [0.23070987654320937, 0.23210215581571217], 'true,true': [0.2172928927116337, 0.22222222222222224], 'false': [0.1348852040816321, 0.1257726417629664], 'false,true': [0.14366729678638887, 0.09000000000000004], 'false,true,true': [0.19834710743801612, 6.97854472621527e-17], 'false,false': [0.12838076407033347, 0.0]}, {'': [0.23321703575127828, 0.12580232762476082], 'true': [0.22453799548262338, 0.2334841178504624], 'true,true': [0.2246900826446284, 0.2222222222222222], 'true,true,true': [0.22222222222222224, 0.2165377751338493], 'false': [0.08042172624169436, 0.12960541370818734], 'false,false': [0.1420408163265303, 0.1161709972395256], 'false,false,true': [0.1474561292766062, 0.10937500000000007], 'false,false,false': [0.12025434036173205, 0.0]}, {'': [0.23034918146195243, 0.12505638083332443], 'true': [0.2337581719819439, 0.23022389429421392], 'true,true': [0.23664030795010849, 0.18749999999999994], 'true,false': [0.22506925207756256, 0.2303531100645832], 'false': [0.07454665601416231, 0.12973586790600397], 'false,false': [0.14864240377566598, 0.11111024897986674], 'false,false,true': [0.1556103933807525, 0.10937499999999997], 'false,false,false': [0.11502167992597646, 0.0]}, {'': [0.23023912079302086, 0.12622132545736328], 'false': [0.14497732092606208, 0.10948831884042698], 'false,true': [0.1556103933807525, 0.09418282548476462], 'false,true,true': [0.09876543209876518, 3.416070845000482e-17], 'false,false': [0.1129200614925012, 4.984793629197841e-05], 'false,false,true': [0.11711695671777513, 0.08999999999999993], 'false,true,false': [-1.0408340855860843e-17, 0.14876033057851246]}, {'': [0.2298914344083678, 0.10971710123935514], 'false': [0.1192047680151416, 0.10103120091029626], 'false,true': [0.12646024446119675, 0.08616780045351476], 'false,true,true': [0.2222565593341639, 9.157994737444585e-06], 'false,false': [0.10600923638727268, 0.0], 'false,false,true': [0.10038077322334846, 0.15999999999999995], 'false,true,false': [2.7755575615628915e-18, 0.1487603305785124]}, {'': [0.22757667215873462, 0.10209163258174135], 'true': [0.22034946632383498, 0.2275184121839572], 'true,false': [0.21371882086167776, 0.22787535063513822], 'false': [0.07143019784679899, 0.10458346481648291], 'false,false': [0.11465118251141893, 0.09419226645615902], 'false,false,true': [0.10603493685714406, 0.22222222222222224], 'false,false,false': [0.09778292169214542, 0.0]}, {'': [0.2284129143258357, 0.09618925514976479], 'false': [0.05934578949889971, 0.09965838008177559], 'false,false': [0.10446295178490747, 0.09433710807967328], 'false,false,true': [0.11168612815585453, 0.07263732063406281], 'false,false,false': [0.0003508667045208612, 0.09686180196371358]}, {'': [0.2295745486790923, 0.1038118750990519], 'false': [0.10336856387636145, 0.1040712658033058], 'false,false': [0.1095311912353838, 4.390396891199485e-05], 'false,false,true': [0.11597863450386446, 0.07986592581259411], 'false,true': [0.10440748133549625, 0.0968304919648425], 'false,true,true': [0.18312153806228887, 3.425519902858131e-05], 'false,true,false': [-5.204170427930421e-18, 0.16]}, {'': [0.22942943635084567, 0.09615891870650593], 'true': [0.216092343056866, 0.22985713657720896], 'true,true': [0.20845408005449723, 0.21092482422931286], 'false': [0.1126804891101362, 0.08008570183559344], 'false,true': [0.11727149256555551, 0.09041639447782289], 'false,true,true': [0.22222222222222254, 1.914723950509927e-05], 'false,true,false': [-3.469446951953614e-18, 0.1487603305785124], 'false,false': [0.08297053065194591, 0.0]}, {'': [0.22959589116554957, 0.08243194210261241], 'false': [0.0883075606966684, 0.07678601981418305], 'false,true': [0.08935684004328641, 0.08255425352160281], 'false,true,true': [0.19834710743801692, 2.6462054953018842e-05], 'false,true,false': [-3.469446951953614e-18, 0.13017751479289938], 'false,false': [0.00027761667435805573, 0.07864714978495249], 'false,false,false': [0.0813464484876469, 3.2806852128837785e-05]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;false;haswordvenue(B, I), haswordtitle(J, I).;true;true
0;false,true;title(K, J), venue(K, B).;true;true
0;false,true,true;samebib(K, L), venue(L, A).;true;true
0;false,false;haswordvenue(A, M), haswordtitle(N, M).;true;true
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;false;haswordvenue(A, G), haswordauthor(H, G).;true;true
1;false,false;haswordvenue(A, I), haswordtitle(J, I).;true;true
1;false,false,false;haswordvenue(B, L), haswordtitle(M, L).;true;true
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;false;haswordvenue(A, I), haswordauthor(J, I).;true;true
2;false,false;haswordvenue(A, K), haswordtitle(L, K).;true;true
2;false,false,false;haswordvenue(B, N), haswordtitle(P, N).;true;true
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;false;haswordvenue(A, D), haswordtitle(E, D).;true;true
3;false,true;title(F, E), venue(F, A).;true;true
3;false,true,true;samebib(F, G), venue(G, B).;true;true
3;false,true,false;title(H, E), venue(H, B).;true;true
3;false,false;haswordvenue(B, I), haswordtitle(J, I).;true;true
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;false;haswordvenue(B, D), haswordtitle(E, D).;true;true
4;false,true;title(F, E), venue(F, B).;true;true
4;false,true,true;samebib(F, G), venue(G, A).;true;true
4;false,true,false;title(H, E), venue(H, A).;true;true
4;false,false;haswordvenue(A, I), haswordtitle(J, I).;true;true
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;false;haswordvenue(A, G), haswordauthor(H, G).;true;true
5;false,false;haswordvenue(A, I), haswordtitle(J, I).;true;true
5;false,false,false;haswordvenue(B, L), haswordtitle(M, L).;true;true
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;false;haswordvenue(A, D), haswordauthor(E, D).;true;true
6;false,false;haswordvenue(A, F), haswordtitle(G, F).;true;true
6;false,false,false;haswordvenue(B, I), haswordauthor(J, I).;true;true
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;false;haswordvenue(B, D), haswordtitle(E, D).;true;true
7;false,true;title(F, E), venue(F, B).;true;true
7;false,true,true;samebib(F, G), venue(G, A).;true;true
7;false,true,false;title(H, E), venue(H, A).;true;true
7;false,false;haswordvenue(A, I), haswordtitle(J, I).;true;true
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;false;haswordvenue(A, G), haswordtitle(H, G).;true;true
8;false,true;title(I, H), venue(I, A).;true;true
8;false,true,true;samebib(I, J), venue(J, B).;true;true
8;false,true,false;title(K, H), venue(K, B).;true;true
8;false,false;haswordvenue(B, L), haswordtitle(M, L).;true;true
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;false;haswordvenue(A, D), haswordtitle(E, D).;true;true
9;false,true;title(F, E), venue(F, A).;true;true
9;false,true,true;samebib(F, G), venue(G, B).;true;true
9;false,true,false;title(H, E), venue(H, B).;true;true
9;false,false;haswordvenue(B, I), haswordauthor(J, I).;true;true
9;false,false,false;haswordvenue(B, K), haswordtitle(L, K).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.2319486607510849;  // std dev = 0.484, 1,458.000 (wgt'ed) examples reached here.  /* #neg=913 #pos=545 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return -0.0418510649004878;  // std dev = 0.300, 20.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=2 */
%   | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | then if ( title(H, G), venue(H, A) )
%   | | | then return 0.053270886319024574;  // std dev = 3.589, 82.000 (wgt'ed) examples reached here.  /* #neg=66 #pos=16 */
%   | | | else return -0.05094197399139689;  // std dev = 1.348, 22.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=2 */
%   | | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | | then return 0.019765096715673995;  // std dev = 3.663, 99.000 (wgt'ed) examples reached here.  /* #neg=83 #pos=16 */
%   | | | else return -0.14185106490048777;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordauthor(D, C) )
%   | then return 0.32750563380446485;  // std dev = 1.225, 6.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | else return 0.1808302752647209;  // std dev = 0.478, 1,534.000 (wgt'ed) examples reached here.  /* #neg=992 #pos=542 */
%   else if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | then return -0.029828204726971876;  // std dev = 0.322, 17.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=2 */
%   | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | then if ( title(I, H), venue(I, B) )
%   | | | then return 0.06429123170081268;  // std dev = 3.561, 77.000 (wgt'ed) examples reached here.  /* #neg=61 #pos=16 */
%   | | | else return -0.049036035479539594;  // std dev = 1.345, 21.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=2 */
%   | | else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | | | then return 0.012574577955533071;  // std dev = 3.665, 101.000 (wgt'ed) examples reached here.  /* #neg=85 #pos=16 */
%   | | | else return -0.1277222143107281;  // std dev = 0.010, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.16046839397155324;  // std dev = 0.480, 1,512.000 (wgt'ed) examples reached here.  /* #neg=967 #pos=545 */
%   else if ( haswordvenue(A, D), haswordtitle(E, D) )
%   | then if ( title(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.6504758782314465;  // std dev = 1.790, 20.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=16 */
%   | | | else return -0.14895543385883267;  // std dev = 0.021, 60.000 (wgt'ed) examples reached here.  /* #neg=60 */
%   | | else if ( title(H, E), venue(H, B) )
%   | | | then return -0.13724449220384013;  // std dev = 5.27e-09, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | | else return 0.06275550779615989;  // std dev = 1.265, 10.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | then if ( title(K, J), venue(K, B) )
%   | | | then return 0.04610012981059425;  // std dev = 3.583, 81.000 (wgt'ed) examples reached here.  /* #neg=65 #pos=16 */
%   | | | else return -0.03306199012404662;  // std dev = 1.338, 19.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=2 */
%   | | else return -0.11467580788383071;  // std dev = 0.009, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.13331981681034696;  // std dev = 0.480, 1,513.000 (wgt'ed) examples reached here.  /* #neg=968 #pos=545 */
%   else if ( haswordvenue(A, D), haswordtitle(E, D) )
%   | then if ( title(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.5479820550896024;  // std dev = 1.791, 20.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=16 */
%   | | | else return -0.13077229163744422;  // std dev = 0.023, 60.000 (wgt'ed) examples reached here.  /* #neg=60 */
%   | | else if ( title(H, E), venue(H, B) )
%   | | | then return -0.12178739097995586;  // std dev = 7.45e-09, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | | else return -0.011512489833306279;  // std dev = 1.317, 15.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=2 */
%   | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | then if ( title(K, J), venue(K, A) )
%   | | | then return 0.0069387800435496035;  // std dev = 3.651, 99.000 (wgt'ed) examples reached here.  /* #neg=83 #pos=16 */
%   | | | else return 0.1155686382384975;  // std dev = 1.225, 8.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | | else return -0.10429379770453019;  // std dev = 0.011, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.10377091926070241;  // std dev = 0.478, 1,536.000 (wgt'ed) examples reached here.  /* #neg=991 #pos=545 */
%   else if ( haswordvenue(B, D), haswordtitle(E, D) )
%   | then if ( title(F, E), venue(F, B) )
%   | | then if ( samebib(F, G), venue(G, A) )
%   | | | then return 0.5686350653340331;  // std dev = 2.091, 22.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=16 */
%   | | | else return -0.15734730590025012;  // std dev = 0.034, 76.000 (wgt'ed) examples reached here.  /* #neg=76 */
%   | | else if ( title(H, E), venue(H, A) )
%   | | | then return -0.1352408052157068;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | | | else return -0.005598637632020452;  // std dev = 1.309, 14.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=2 */
%   | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | then if ( title(K, J), venue(K, B) )
%   | | | then return -0.0231797063710492;  // std dev = 2.967, 99.000 (wgt'ed) examples reached here.  /* #neg=83 #pos=16 */
%   | | | else return 0.07879657710786044;  // std dev = 1.247, 9.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | | else return -0.09377970621681644;  // std dev = 0.008, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordauthor(F, C) )
%   | | then return 0.19909385022265294;  // std dev = 1.225, 6.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | else return 0.02447568825619397;  // std dev = 0.456, 44.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=13 */
%   | else if ( haswordvenue(A, G), haswordauthor(H, G) )
%   | | then return 0.08037249415299984;  // std dev = 0.477, 37.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=13 */
%   | | else return 0.08028050291056044;  // std dev = 0.477, 1,469.000 (wgt'ed) examples reached here.  /* #neg=953 #pos=516 */
%   else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | then if ( title(K, J), venue(K, A) )
%   | | then if ( samebib(K, L), venue(L, B) )
%   | | | then return 0.478012080744057;  // std dev = 2.088, 22.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=16 */
%   | | | else return -0.13618936277462537;  // std dev = 0.054, 76.000 (wgt'ed) examples reached here.  /* #neg=76 */
%   | | else return 0.07447281071433078;  // std dev = 0.416, 9.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | else if ( haswordvenue(A, M), haswordtitle(N, M) )
%   | | then return -0.004903462193435618;  // std dev = 0.305, 108.000 (wgt'ed) examples reached here.  /* #neg=90 #pos=18 */
%   | | else return -0.08719017743881095;  // std dev = 0.009, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.06961119937553958;  // std dev = 0.479, 1,528.000 (wgt'ed) examples reached here.  /* #neg=983 #pos=545 */
%   else if ( haswordvenue(B, D), haswordtitle(E, D) )
%   | then if ( title(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.41259521510452857;  // std dev = 1.955, 21.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=16 */
%   | | | else return -0.12141216438457773;  // std dev = 0.041, 69.000 (wgt'ed) examples reached here.  /* #neg=69 */
%   | | else return 0.09262494573118615;  // std dev = 0.433, 8.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( title(J, I), venue(J, A) )
%   | | | then return 8.202393553276242E-4;  // std dev = 2.867, 92.000 (wgt'ed) examples reached here.  /* #neg=76 #pos=16 */
%   | | | else return -0.031999871355002325;  // std dev = 1.314, 20.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=2 */
%   | | else return -0.08297106168030861;  // std dev = 0.006, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.05005671773258067;  // std dev = 0.477, 1,550.000 (wgt'ed) examples reached here.  /* #neg=1,005 #pos=545 */
%   else if ( haswordvenue(A, D), haswordtitle(E, D) )
%   | then if ( title(F, E), venue(F, B) )
%   | | then if ( samebib(F, G), venue(G, A) )
%   | | | then return 0.3652956888619864;  // std dev = 2.092, 22.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=16 */
%   | | | else return -0.112931669321056;  // std dev = 0.033, 74.000 (wgt'ed) examples reached here.  /* #neg=74 */
%   | | else return 0.07357252077244215;  // std dev = 0.416, 9.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | then if ( title(J, I), venue(J, A) )
%   | | | then return -0.02565760746018021;  // std dev = 2.668, 99.000 (wgt'ed) examples reached here.  /* #neg=83 #pos=16 */
%   | | | else return 0.02994890272720855;  // std dev = 1.265, 10.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | | else return -0.07456663984428773;  // std dev = 0.008, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.04886017632198336;  // std dev = 0.480, 1,510.000 (wgt'ed) examples reached here.  /* #neg=965 #pos=545 */
%   else if ( haswordvenue(A, D), haswordtitle(E, D) )
%   | then if ( title(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.2779567438018203;  // std dev = 2.088, 22.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=16 */
%   | | | else return -0.10298863503336819;  // std dev = 0.018, 71.000 (wgt'ed) examples reached here.  /* #neg=71 */
%   | | else if ( title(H, E), venue(H, B) )
%   | | | then return -0.09360308290705356;  // std dev = 6.45e-09, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | | | else return -0.024869834507725567;  // std dev = 1.317, 15.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=2 */
%   | else if ( haswordvenue(A, I), haswordauthor(J, I) )
%   | | then return 0.011013281036211419;  // std dev = 0.316, 9.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | | then return -0.02863126001191906;  // std dev = 2.870, 101.000 (wgt'ed) examples reached here.  /* #neg=85 #pos=16 */
%   | | | else return -0.06741765852289076;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.02992405411777756;  // std dev = 0.478, 1,545.000 (wgt'ed) examples reached here.  /* #neg=1,000 #pos=545 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.018502546475114647;  // std dev = 0.260, 11.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=2 */
%   | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | then if ( title(H, G), venue(H, B) )
%   | | | then return -0.021774612566039804;  // std dev = 2.427, 93.000 (wgt'ed) examples reached here.  /* #neg=77 #pos=16 */
%   | | | else return 0.011747452899064587;  // std dev = 1.291, 12.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=2 */
%   | | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | | then return -0.027730631100909477;  // std dev = 2.866, 105.000 (wgt'ed) examples reached here.  /* #neg=89 #pos=16 */
%   | | | else return -0.06330056936816816;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */


Results
   AUC ROC   = 0.563855
   AUC PR    = 0.50798
   CLL	      = -0.708375
   Precision = 0.55 at threshold = 0.5
   Recall    = 0.027094
   F1        = 0.051643


Total learning time: 45.45057773590088 seconds
Total inference time: 4.938 seconds
AUC ROC: 0.563855


Results scoring model
   AUC ROC   = 0.591135
   AUC PR    = 0.275272
   CLL	      = -0.511197
   Precision = 0.592593 at threshold = 0.5
   Recall    = 0.027539
   F1        = 0.052632


Total scoring time: 1.581 seconds
Refined model CLL: -0.511197


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.563855
   AUC PR    = 0.50798
   CLL	      = -0.708375
   Precision = 0.55 at threshold = 0.5
   Recall    = 0.027094
   F1        = 0.051643


Total learning time: 96.39232368659974 seconds
Total inference time: 4.938 seconds
AUC ROC: 0.563855
Total revision time: 96.39232368659974
Best scored revision CLL: -0.511197


Dataset: 13_twitter_cora, Fold: 3, Type: Transfer (trRDN-B), Time: 00:06:41
{'AUC ROC': 0.563855, 'AUC PR': 0.50798, 'CLL': -0.708375, 'Precision': [0.55, 0.5], 'Recall': 0.027094, 'F1': 0.051643, 'Learning time': 96.39232368659974, 'Inference time': 4.938, 'parameter': {'AUC ROC': 0.565047, 'AUC PR': 0.514923, 'CLL': -0.707658, 'Precision': [nan, 0.5], 'Recall': 0.0, 'F1': nan, 'Learning time': 47.76474595069885, 'Inference time': 5.643}}


Starting fold 4

Target train facts examples: 8129
Target train pos examples: 747
Target train neg examples: 1068

Target test facts examples: 34429
Target test pos  examples: 2270
Target test neg examples: 3954

******************************************
Performing Parameter Learning
******************************************
Refine
0;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
0;true;follows(A, D).;false;false
0;false;follows(A, E), recursion_accounttype(E, B).;true;true
0;false,true;follows(A, F), follows(F, A).;false;true
0;false,true,false;follows(A, G), follows(G, E).;false;false
0;false,false;follows(H, A).;true;true
0;false,false,true;follows(I, H), follows(I, A).;false;false
0;false,false,false;follows(A, J), follows(J, K).;false;false
1;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
1;true;follows(A, C), tweets(A, D).;false;false
1;false;follows(A, E), recursion_accounttype(E, B).;true;true
1;false,true;tweets(A, F), tweets(E, F).;false;true
1;false,true,false;follows(G, A), follows(E, H).;false;false
1;false,false;follows(I, A).;true;true
1;false,false,true;follows(I, J), recursion_accounttype(J, B).;false;false
1;false,false,false;tweets(A, K).;false;false
2;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
2;true;follows(C, D), follows(D, A).;false;false
2;false;follows(E, A).;true;true
2;false,true;follows(F, E), follows(F, A).;false;true
2;false,true,false;follows(E, G), recursion_accounttype(G, B).;false;false
2;false,false;follows(A, H), follows(H, I).;true;true
2;false,false,true;recursion_accounttype(I, B).;false;false
2;false,false,false;follows(A, J).;false;false
3;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
3;true;tweets(A, D), tweets(C, D).;false;false
3;false;follows(E, A).;true;true
3;false,true;follows(F, E), recursion_accounttype(F, B).;true;false
3;false,true,true;follows(A, G), recursion_accounttype(G, B).;false;false
3;false,false;follows(A, H), recursion_accounttype(H, B).;true;true
3;false,false,true;follows(A, I), follows(I, H).;false;false
3;false,false,false;tweets(A, J), follows(A, K).;false;false
4;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
4;true;follows(A, D), follows(D, C).;true;false
4;true,true;follows(D, A).;false;true
4;true,true,false;tweets(A, E).;false;false
4;false;follows(F, A).;false;true
4;false,false;follows(A, G), recursion_accounttype(G, B).;true;true
4;false,false,true;follows(G, H), follows(H, G).;false;false
4;false,false,false;follows(A, I), follows(I, J).;false;false
5;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
5;true;follows(D, A), tweets(D, E).;true;true
5;true,true;recursion_accounttype(D, B).;false;false
5;true,false;follows(C, F), follows(F, C).;true;false
5;true,false,true;tweets(C, G), recursion_accounttype(F, B).;false;false
5;false;follows(A, H), follows(H, A).;false;true
5;false,false;follows(I, A), recursion_accounttype(I, B).;false;true
5;false,false,false;tweets(A, J), follows(K, A).;false;false
6;;accounttype(A, B) :- follows(A, C).;true;true
6;true;follows(D, C), recursion_accounttype(D, B).;true;false
6;true,true;recursion_accounttype(C, B).;true;true
6;true,true,true;follows(E, A), follows(E, D).;false;false
6;true,true,false;follows(F, A), recursion_accounttype(F, B).;false;false
6;false;follows(G, A), recursion_accounttype(G, B).;false;true
6;false,false;follows(H, A).;false;true
6;false,false,false;tweets(A, I).;false;false
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
7;true;tweets(C, D), follows(A, C).;false;false
7;false;follows(E, A).;true;true
7;false,true;follows(E, F), recursion_accounttype(F, B).;true;false
7;false,true,true;follows(F, E), follows(A, F).;false;false
7;false,false;follows(A, G), recursion_accounttype(G, B).;true;true
7;false,false,true;tweets(A, H).;false;false
7;false,false,false;follows(A, I).;false;false
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;true;follows(C, D), recursion_accounttype(D, B).;false;true
8;true,false;follows(A, E), follows(E, A).;false;false
8;false;follows(F, A), follows(A, G).;true;true
8;false,true;follows(G, A), follows(G, F).;false;true
8;false,true,false;follows(H, F), recursion_accounttype(H, B).;false;false
8;false,false;follows(I, A), recursion_accounttype(I, B).;false;true
8;false,false,false;follows(J, A).;false;false
9;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
9;true;follows(C, D).;true;false
9;true,true;follows(A, D).;true;true
9;true,true,true;follows(E, A), recursion_accounttype(E, B).;false;false
9;true,true,false;tweets(C, F), follows(D, C).;false;false
9;false;follows(A, G), follows(H, A).;false;true
9;false,false;follows(I, A), recursion_accounttype(I, B).;false;true
9;false,false,false;follows(J, A).;false;false


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.27854694504975613;  // std dev = 0.494, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordvenue(B, G) )
%   | | | then return 0.2867203636709409;  // std dev = 2.619, 28.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=12 */
%   | | | else return 0.44905802600860323;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | | then return 0.44905802600860323;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | | else return 0.5724346493852266;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordvenue(B, L) )
%   | | then return 0.1914822684328457;  // std dev = 0.471, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | else return 0.05814893509951237;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | else return 0.05814893509951237;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.2411503606196619;  // std dev = 0.494, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordvenue(B, G) )
%   | | | then return 0.24811816884741328;  // std dev = 2.619, 28.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=12 */
%   | | | else return 0.3851926776601658;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | | then return 0.3851926776601658;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | | else return 0.48767788391726297;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordvenue(B, L) )
%   | | then return 0.16653882456488167;  // std dev = 0.471, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | else return 0.05092203251355405;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | else return 0.05092203251355405;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.20289930723994204;  // std dev = 0.494, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordvenue(B, G) )
%   | | | then return 0.20848477447886868;  // std dev = 2.619, 28.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=12 */
%   | | | else return 0.31518052304212246;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | | then return 0.31518052304212246;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | | else return 0.3912569620992536;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordvenue(B, L) )
%   | | then return 0.1420942428155646;  // std dev = 0.471, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | else return 0.04434629760466855;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | else return 0.04434629760466855;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.16640029396569495;  // std dev = 0.494, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordvenue(B, G) )
%   | | | then return 0.17062637354018492;  // std dev = 2.619, 28.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=12 */
%   | | | else return 0.24804771389482108;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | | then return 0.24804771389482108;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | | else return 0.3005711547884894;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordvenue(B, L) )
%   | | then return 0.11914890490746433;  // std dev = 0.471, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | else return 0.03842866223690456;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | else return 0.03842866223690456;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.13360339271793026;  // std dev = 0.494, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordvenue(B, G) )
%   | | | then return 0.13664585375352234;  // std dev = 2.619, 28.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=12 */
%   | | | else return 0.19020231164899937;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | | then return 0.19020231164899937;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | | else return 0.22629823971521876;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | then if ( title(L, K), venue(L, B) )
%   | | then if ( samebib(L, M), venue(M, A) )
%   | | | then return 0.3234299635688567;  // std dev = 2.623, 28.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=14 */
%   | | | else return -0.1765700364311428;  // std dev = 0.141, 35.000 (wgt'ed) examples reached here.  /* #neg=35 */
%   | | else return 0.07188755709780538;  // std dev = 0.454, 10.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=3 */
%   | else return 0.033154945921885746;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.10551742939082928;  // std dev = 0.494, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordvenue(A, G) )
%   | | | then return 0.10762034996184403;  // std dev = 2.619, 28.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=12 */
%   | | | else return 0.14379027326522745;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | | then return 0.14379027326522745;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | | else return 0.16984358676510128;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordvenue(A, L) )
%   | | then return 0.0862347787799619;  // std dev = 0.454, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | else return 0.028495105925721097;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | else return 0.0238066600161269;  // std dev = 0.381, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(B, C), haswordauthor(D, C) )
%   then if ( author(E, D), venue(E, A) )
%   | then if ( samebib(E, F), venue(F, B) )
%   | | then return 0.6619245029632226;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return -0.3177650311402712;  // std dev = 0.054, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else return 0.46192450296322257;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   else if ( haswordvenue(A, G), haswordvenue(B, G) )
%   | then if ( haswordtitle(H, G) )
%   | | then return 0.08006052311436539;  // std dev = 0.493, 1,588.000 (wgt'ed) examples reached here.  /* #neg=924 #pos=664 */
%   | | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | | then return 0.09442290810957077;  // std dev = 3.490, 50.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=25 */
%   | | | else return 0.11288591814362521;  // std dev = 2.598, 29.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=18 */
%   | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | then if ( haswordtitle(L, M), haswordvenue(A, M) )
%   | | | then return 0.06994291324218899;  // std dev = 1.923, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | | else return 0.02811193383897562;  // std dev = 2.960, 54.000 (wgt'ed) examples reached here.  /* #neg=43 #pos=11 */
%   | | else return 0.020355951021442806;  // std dev = 0.381, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.0635646654926562;  // std dev = 0.492, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordvenue(A, G) )
%   | | | then return 0.06209458316513356;  // std dev = 2.619, 28.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=12 */
%   | | | else return 0.0798215479051692;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | | then return 0.08443584420203289;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | | else return 0.10104183313636735;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | then if ( title(L, K), venue(L, A) )
%   | | then if ( samebib(L, M), venue(M, B) )
%   | | | then return 0.30620877613196995;  // std dev = 2.615, 28.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=14 */
%   | | | else return -0.19249144729386575;  // std dev = 0.212, 35.000 (wgt'ed) examples reached here.  /* #neg=35 */
%   | | else return 0.03376799747834356;  // std dev = 0.417, 10.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=3 */
%   | else return 0.017364121342584565;  // std dev = 0.380, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.04885754847774214;  // std dev = 0.492, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordvenue(A, G) )
%   | | | then return 0.04756216640296153;  // std dev = 2.619, 28.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=12 */
%   | | | else return 0.05990417518779126;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | | then return 0.06335446712404859;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | | else return 0.0773681737517355;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordvenue(B, L) )
%   | | then return 0.04860922433015011;  // std dev = 0.432, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | else return 0.014781837877170741;  // std dev = 0.380, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | else return 0.013816624002312886;  // std dev = 0.380, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordauthor(D, C) )
%   then if ( author(E, D), venue(E, B) )
%   | then if ( samebib(E, F), venue(F, A) )
%   | | then return 0.5997060988631828;  // std dev = 0.134, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return -0.35376585332750005;  // std dev = 0.076, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else return 0.3989577739817284;  // std dev = 0.877, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   else if ( haswordvenue(A, G), haswordvenue(B, G) )
%   | then if ( haswordtitle(H, G) )
%   | | then return 0.03526672894012137;  // std dev = 0.492, 1,588.000 (wgt'ed) examples reached here.  /* #neg=924 #pos=664 */
%   | | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | | then return 0.04012651126933303;  // std dev = 3.489, 50.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=25 */
%   | | | else return 0.0505116397867402;  // std dev = 2.598, 29.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=18 */
%   | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | then if ( haswordtitle(L, M), haswordvenue(B, M) )
%   | | | then return 0.03873610383328198;  // std dev = 1.831, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | | else return 0.015634422369800807;  // std dev = 2.813, 54.000 (wgt'ed) examples reached here.  /* #neg=43 #pos=11 */
%   | | else return 0.011734871352794973;  // std dev = 0.380, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */


Results
   AUC ROC   = 0.575893
   AUC PR    = 0.43719
   CLL	      = -0.632967
   Precision = 0.755869 at threshold = 0.5
   Recall    = 0.070925
   F1        = 0.129682


Total learning time: 95.41594195365906 seconds
Total inference time: 7.658 seconds
AUC ROC: 0.575893


Results scoring model
   AUC ROC   = 0.557507
   AUC PR    = 0.474522
   CLL	      = -0.662046
   Precision = 0.701493 at threshold = 0.5
   Recall    = 0.062918
   F1        = 0.115479


Total scoring time: 1.306 seconds
Parameter learned model CLL: -0.662046


Structure after Parameter Learning
[['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(A, E), haswordtitle(F, E)', 'true,false,true': 'haswordtitle(F, G), haswordvenue(B, G)', 'true,false,false': 'haswordvenue(B, H), haswordtitle(I, H)', 'false': 'haswordvenue(A, J), haswordtitle(K, J)', 'false,true': 'haswordtitle(K, L), haswordvenue(B, L)'}, {'true,true': [0.494, 932, 676], 'true,false,true,true': [2.619, 16, 12], 'true,false,true,false': [2.306, 9, 13], 'true,false,false,true': [2.306, 9, 13], 'true,false,false,false': [1.195, 2, 5], 'false,true,true': [0.471, 12, 6], 'false,true,false': [0.4, 44, 11], 'false,false': [0.4, 44, 11]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(A, E), haswordtitle(F, E)', 'true,false,true': 'haswordtitle(F, G), haswordvenue(B, G)', 'true,false,false': 'haswordvenue(B, H), haswordtitle(I, H)', 'false': 'haswordvenue(A, J), haswordtitle(K, J)', 'false,true': 'haswordtitle(K, L), haswordvenue(B, L)'}, {'true,true': [0.494, 932, 676], 'true,false,true,true': [2.619, 16, 12], 'true,false,true,false': [2.306, 9, 13], 'true,false,false,true': [2.306, 9, 13], 'true,false,false,false': [1.195, 2, 5], 'false,true,true': [0.471, 12, 6], 'false,true,false': [0.4, 44, 11], 'false,false': [0.4, 44, 11]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(A, E), haswordtitle(F, E)', 'true,false,true': 'haswordtitle(F, G), haswordvenue(B, G)', 'true,false,false': 'haswordvenue(B, H), haswordtitle(I, H)', 'false': 'haswordvenue(A, J), haswordtitle(K, J)', 'false,true': 'haswordtitle(K, L), haswordvenue(B, L)'}, {'true,true': [0.494, 932, 676], 'true,false,true,true': [2.619, 16, 12], 'true,false,true,false': [2.306, 9, 13], 'true,false,false,true': [2.306, 9, 13], 'true,false,false,false': [1.195, 2, 5], 'false,true,true': [0.471, 12, 6], 'false,true,false': [0.4, 44, 11], 'false,false': [0.4, 44, 11]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(A, E), haswordtitle(F, E)', 'true,false,true': 'haswordtitle(F, G), haswordvenue(B, G)', 'true,false,false': 'haswordvenue(B, H), haswordtitle(I, H)', 'false': 'haswordvenue(A, J), haswordtitle(K, J)', 'false,true': 'haswordtitle(K, L), haswordvenue(B, L)'}, {'true,true': [0.494, 932, 676], 'true,false,true,true': [2.619, 16, 12], 'true,false,true,false': [2.306, 9, 13], 'true,false,false,true': [2.306, 9, 13], 'true,false,false,false': [1.195, 2, 5], 'false,true,true': [0.471, 12, 6], 'false,true,false': [0.4, 44, 11], 'false,false': [0.4, 44, 11]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(A, E), haswordtitle(F, E)', 'true,false,true': 'haswordtitle(F, G), haswordvenue(B, G)', 'true,false,false': 'haswordvenue(B, H), haswordtitle(I, H)', 'false': 'haswordvenue(A, J), haswordtitle(K, J)', 'false,true': 'title(L, K), venue(L, B)', 'false,true,true': 'samebib(L, M), venue(M, A)'}, {'true,true': [0.494, 932, 676], 'true,false,true,true': [2.619, 16, 12], 'true,false,true,false': [2.306, 9, 13], 'true,false,false,true': [2.306, 9, 13], 'true,false,false,false': [1.195, 2, 5], 'false,true,true,true': [2.623, 14, 14], 'false,true,true,false': [0.141, 35, 0], 'false,true,false': [0.454, 7, 3], 'false,false': [0.4, 44, 11]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(B, E), haswordtitle(F, E)', 'true,false,true': 'haswordtitle(F, G), haswordvenue(A, G)', 'true,false,false': 'haswordvenue(A, H), haswordtitle(I, H)', 'false': 'haswordvenue(B, J), haswordtitle(K, J)', 'false,true': 'haswordtitle(K, L), haswordvenue(A, L)'}, {'true,true': [0.494, 932, 676], 'true,false,true,true': [2.619, 16, 12], 'true,false,true,false': [2.306, 9, 13], 'true,false,false,true': [2.306, 9, 13], 'true,false,false,false': [1.195, 2, 5], 'false,true,true': [0.454, 12, 6], 'false,true,false': [0.4, 44, 11], 'false,false': [0.381, 44, 11]}], ['samevenue(A, B)', {'': 'haswordvenue(B, C), haswordauthor(D, C)', 'true': 'author(E, D), venue(E, A)', 'true,true': 'samebib(E, F), venue(F, B)', 'false': 'haswordvenue(A, G), haswordvenue(B, G)', 'false,true': 'haswordtitle(H, G)', 'false,true,false': 'haswordvenue(A, I), haswordtitle(J, I)', 'false,false': 'haswordvenue(B, K), haswordtitle(L, K)', 'false,false,true': 'haswordtitle(L, M), haswordvenue(A, M)'}, {'true,true,true': [0.0, 0, 8], 'true,true,false': [0.054, 8, 0], 'true,false': [0.894, 1, 4], 'false,true,true': [0.493, 924, 664], 'false,true,false,true': [3.49, 25, 25], 'false,true,false,false': [2.598, 11, 18], 'false,false,true,true': [1.923, 12, 6], 'false,false,true,false': [2.96, 43, 11], 'false,false,false': [0.381, 44, 11]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(B, E), haswordtitle(F, E)', 'true,false,true': 'haswordtitle(F, G), haswordvenue(A, G)', 'true,false,false': 'haswordvenue(A, H), haswordtitle(I, H)', 'false': 'haswordvenue(B, J), haswordtitle(K, J)', 'false,true': 'title(L, K), venue(L, A)', 'false,true,true': 'samebib(L, M), venue(M, B)'}, {'true,true': [0.492, 932, 676], 'true,false,true,true': [2.619, 16, 12], 'true,false,true,false': [2.306, 9, 13], 'true,false,false,true': [2.306, 9, 13], 'true,false,false,false': [1.195, 2, 5], 'false,true,true,true': [2.615, 14, 14], 'false,true,true,false': [0.212, 35, 0], 'false,true,false': [0.417, 7, 3], 'false,false': [0.38, 44, 11]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(B, E), haswordtitle(F, E)', 'true,false,true': 'haswordtitle(F, G), haswordvenue(A, G)', 'true,false,false': 'haswordvenue(A, H), haswordtitle(I, H)', 'false': 'haswordvenue(A, J), haswordtitle(K, J)', 'false,true': 'haswordtitle(K, L), haswordvenue(B, L)'}, {'true,true': [0.492, 932, 676], 'true,false,true,true': [2.619, 16, 12], 'true,false,true,false': [2.306, 9, 13], 'true,false,false,true': [2.306, 9, 13], 'true,false,false,false': [1.195, 2, 5], 'false,true,true': [0.432, 12, 6], 'false,true,false': [0.38, 44, 11], 'false,false': [0.38, 44, 11]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordauthor(D, C)', 'true': 'author(E, D), venue(E, B)', 'true,true': 'samebib(E, F), venue(F, A)', 'false': 'haswordvenue(A, G), haswordvenue(B, G)', 'false,true': 'haswordtitle(H, G)', 'false,true,false': 'haswordvenue(B, I), haswordtitle(J, I)', 'false,false': 'haswordvenue(A, K), haswordtitle(L, K)', 'false,false,true': 'haswordtitle(L, M), haswordvenue(B, M)'}, {'true,true,true': [0.134, 0, 8], 'true,true,false': [0.076, 8, 0], 'true,false': [0.877, 1, 4], 'false,true,true': [0.492, 924, 664], 'false,true,false,true': [3.489, 25, 25], 'false,true,false,false': [2.598, 11, 18], 'false,false,true,true': [1.831, 12, 6], 'false,false,true,false': [2.813, 43, 11], 'false,false,false': [0.38, 44, 11]}]]
[{'': [0.24455361249545102, 0.17089843750000108], 'true': [0.24366352318011741, 0.24803717352988336], 'true,false': [0.25000000000000133, 0.2354340071343634], 'true,false,true': [0.24489795918367302, 0.2417355371900822], 'true,false,false': [0.2417355371900822, 0.20408163265306106], 'false': [0.17864514918371124, 0.15999999999999948], 'false,true': [0.22222222222222232, 0.15999999999999948]}, {'': [0.24423965838627754, 0.17036542604714272], 'true': [0.24366352318012574, 0.24554974033866322], 'true,false': [0.24813620683257942, 0.23456996391329932], 'true,false,true': [0.244897959183673, 0.2417355371900833], 'true,false,false': [0.2417355371900833, 0.20408163265306115], 'false': [0.17782577785291806, 0.1600000000000007], 'false,true': [0.22222222222222207, 0.1600000000000007]}, {'': [0.2439315722131504, 0.16990467702453838], 'true': [0.2436635231801326, 0.2431019584682027], 'true,false': [0.24631150685892017, 0.2337064665173658], 'true,false,true': [0.24489795918367316, 0.24173553719008264], 'true,false,false': [0.24173553719008264, 0.20408163265306115], 'false': [0.1771174918718374, 0.15999999999999953], 'false,true': [0.22222222222222218, 0.15999999999999953]}, {'': [0.24371075047936078, 0.1695374267579385], 'true': [0.24366352318009946, 0.2413696703282902], 'true,false': [0.244983430861878, 0.23315182613521265], 'true,false,true': [0.24489795918367355, 0.24173553719008264], 'true,false,false': [0.24173553719008264, 0.2040816326530612], 'false': [0.17655293676131073, 0.15999999999999967], 'false,true': [0.2222222222222222, 0.15999999999999967]}, {'': [0.24358519092549577, 0.16926465814576508], 'true': [0.2436635231801065, 0.24040290855188662], 'true,false': [0.2442132411930144, 0.2328852475902263], 'true,false,true': [0.24489795918367332, 0.2417355371900829], 'true,false,false': [0.2417355371900829, 0.20408163265306128], 'false': [0.17613362348097325, 0.15999999999999995], 'false,true': [0.17124585067387785, 0.20633258440431912], 'false,true,true': [0.24570496051408622, 0.0005674516906003735]}, {'': [0.2435232438971303, 0.16049963298504494], 'true': [0.2436635231801034, 0.2399333213191563], 'true,false': [0.24382884959637013, 0.232770957821724], 'true,false,true': [0.2448979591836737, 0.24173553719008273], 'true,false,false': [0.24173553719008273, 0.2040816326530612], 'false': [0.17196981191492605, 0.14507130318174416], 'false,true': [0.20603241748214604, 0.1599999999999999]}, {'': [0.23725262988613433, 0.23750637341686387], 'false': [0.24314881395387272, 0.16108527453881208], 'false,true': [0.24329828880330062, 0.2397184616663662], 'false,true,false': [0.24365206723466534, 0.2327206345310192], 'true': [0.24139169839524616, 0.16], 'true,true': [0.0, 0.0028876051745319736], 'false,false': [0.17333301343428015, 0.14486379789350953], 'false,false,true': [0.20539416620545428, 0.16220850480109744]}, {'': [0.24235342855298833, 0.15977513888097006], 'true': [0.24247730398362552, 0.23966746108922912], 'true,false': [0.24358392354321295, 0.23269715935979943], 'true,false,true': [0.24489795918367344, 0.24173553719008273], 'true,false,false': [0.24173553719008273, 0.2040816326530612], 'false': [0.1710772111073802, 0.14468621596056525], 'false,true': [0.1706311631154758, 0.17386893358481575], 'false,true,true': [0.2441452390817776, 0.0012857188557774623]}, {'': [0.2423341971242383, 0.1505185550910473], 'true': [0.24246453936636744, 0.2396008197648245], 'true,false': [0.24354402643105344, 0.23268262459899522], 'true,false,true': [0.24489795918367324, 0.24173553719008253], 'true,false,false': [0.24173553719008264, 0.20408163265306123], 'false': [0.155215935508761, 0.14423445791360248], 'false,true': [0.18699099155294602, 0.1445346720478503]}, {'': [0.22667145680600734, 0.2356933900351353], 'false': [0.24210504664777244, 0.1512175136744152], 'false,true': [0.24222775906105395, 0.2395667314232622], 'false,true,false': [0.2435252916256769, 0.232673367566297], 'true': [0.2312671057383594, 0.1539317165100555], 'true,true': [0.002242863626334468, 0.005736966043228459], 'false,false': [0.15660444280393734, 0.14411246628106622], 'false,false,true': [0.1863359578253988, 0.1465605158751742]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;false;haswordvenue(A, J), haswordtitle(K, J).;true;true
4;false,true;title(L, K), venue(L, B).;true;true
4;false,true,true;samebib(L, M), venue(M, A).;true;true
6;;samevenue(A, B) :- haswordvenue(B, C), haswordauthor(D, C).;true;true
6;true;author(E, D), venue(E, A).;true;true
6;true,true;samebib(E, F), venue(F, B).;true;true
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;false;haswordvenue(B, J), haswordtitle(K, J).;true;true
7;false,true;title(L, K), venue(L, A).;true;true
7;false,true,true;samebib(L, M), venue(M, B).;true;true
9;;samevenue(A, B) :- haswordvenue(A, C), haswordauthor(D, C).;true;true
9;true;author(E, D), venue(E, B).;true;true
9;true,true;samebib(E, F), venue(F, A).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.27854694504975613;  // std dev = 0.494, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordvenue(B, G) )
%   | | | then return 0.2867203636709409;  // std dev = 2.619, 28.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=12 */
%   | | | else return 0.44905802600860323;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | | then return 0.44905802600860323;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | | else return 0.5724346493852266;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordvenue(B, L) )
%   | | then return 0.1914822684328457;  // std dev = 0.471, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | else return 0.05814893509951237;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | else return 0.05814893509951237;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.2411503606196619;  // std dev = 0.494, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordvenue(B, G) )
%   | | | then return 0.24811816884741328;  // std dev = 2.619, 28.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=12 */
%   | | | else return 0.3851926776601658;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | | then return 0.3851926776601658;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | | else return 0.48767788391726297;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordvenue(B, L) )
%   | | then return 0.16653882456488167;  // std dev = 0.471, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | else return 0.05092203251355405;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | else return 0.05092203251355405;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.20289930723994204;  // std dev = 0.494, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordvenue(B, G) )
%   | | | then return 0.20848477447886868;  // std dev = 2.619, 28.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=12 */
%   | | | else return 0.31518052304212246;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | | then return 0.31518052304212246;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | | else return 0.3912569620992536;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | then if ( title(L, K), venue(L, B) )
%   | | then if ( samebib(L, M), venue(M, A) )
%   | | | then return 0.33926267073003424;  // std dev = 2.633, 28.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=14 */
%   | | | else return -0.16073732926996526;  // std dev = 0.074, 35.000 (wgt'ed) examples reached here.  /* #neg=35 */
%   | | else return 0.11231944829447513;  // std dev = 0.456, 10.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=3 */
%   | else return 0.04434629760466855;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.16640029396569495;  // std dev = 0.494, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordvenue(A, G) )
%   | | | then return 0.17062637354018492;  // std dev = 2.619, 28.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=12 */
%   | | | else return 0.24804771389482108;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | | then return 0.24804771389482108;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | | else return 0.3005711547884894;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordvenue(A, L) )
%   | | then return 0.12678454835924946;  // std dev = 0.456, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | else return 0.03842866223690456;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | else return 0.03316968589779432;  // std dev = 0.382, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.13360339271793026;  // std dev = 0.494, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordvenue(B, G) )
%   | | | then return 0.13664585375352234;  // std dev = 2.619, 28.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=12 */
%   | | | else return 0.19020231164899937;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | | then return 0.19020231164899937;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | | else return 0.22629823971521876;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordvenue(A, L) )
%   | | then return 0.10535054369296881;  // std dev = 0.455, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | else return 0.033154945921885746;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | else return 0.028548709354250267;  // std dev = 0.381, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.10551742939082928;  // std dev = 0.494, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordvenue(A, G) )
%   | | | then return 0.10762034996184403;  // std dev = 2.619, 28.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=12 */
%   | | | else return 0.14379027326522745;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | | then return 0.14379027326522745;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | | else return 0.16984358676510128;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordvenue(A, L) )
%   | | then return 0.08638890069593763;  // std dev = 0.454, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | else return 0.028495105925721097;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | else return 0.024491423776695873;  // std dev = 0.381, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.6619245029632226;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return -0.33807549703677736;  // std dev = 1.05e-08, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else return 0.46192450296322257;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else if ( haswordtitle(H, C) )
%   | | then return 0.08006052311436539;  // std dev = 0.493, 1,588.000 (wgt'ed) examples reached here.  /* #neg=924 #pos=664 */
%   | | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | | then return 0.09442290810957077;  // std dev = 3.490, 50.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=25 */
%   | | | else return 0.11288591814362521;  // std dev = 2.598, 29.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=18 */
%   else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | then if ( haswordtitle(L, M), haswordvenue(A, M) )
%   | | then return 0.07007362131933406;  // std dev = 0.453, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | else return 0.024408230135271918;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | else return 0.02095138352955625;  // std dev = 0.381, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.06358205070660689;  // std dev = 0.492, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordvenue(A, G) )
%   | | | then return 0.06209458316513356;  // std dev = 2.619, 28.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=12 */
%   | | | else return 0.0798215479051692;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | | then return 0.08443584420203289;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | | else return 0.10104183313636735;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordvenue(A, L) )
%   | | then return 0.05634464441162654;  // std dev = 0.453, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | else return 0.02084688910874009;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | else return 0.017879326300506405;  // std dev = 0.380, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.04887138098884238;  // std dev = 0.492, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordvenue(A, G) )
%   | | | then return 0.04756216640296153;  // std dev = 2.619, 28.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=12 */
%   | | | else return 0.05990417518779126;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | | then return 0.06335446712404859;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | | else return 0.0773681737517355;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordvenue(A, L) )
%   | | then return 0.04499276337191825;  // std dev = 0.452, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | else return 0.017760671541598414;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | else return 0.015225744505757404;  // std dev = 0.380, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.037398484637230806;  // std dev = 0.492, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordvenue(A, G) )
%   | | | then return 0.036283341901860444;  // std dev = 2.619, 28.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=12 */
%   | | | else return 0.04501781773702543;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | | then return 0.04759673142973417;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | | else return 0.059672780337330575;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | then if ( title(L, K), venue(L, A) )
%   | | then if ( samebib(L, M), venue(M, B) )
%   | | | then return 0.2984286358778303;  // std dev = 2.610, 28.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=14 */
%   | | | else return -0.2015713641221697;  // std dev = 0.242, 35.000 (wgt'ed) examples reached here.  /* #neg=35 */
%   | | else return 0.017263503312945593;  // std dev = 0.415, 10.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=3 */
%   | else return 0.012942724102024867;  // std dev = 0.380, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */


Results
   AUC ROC   = 0.570905
   AUC PR    = 0.430266
   CLL	      = -0.634108
   Precision = 0.721212 at threshold = 0.5
   Recall    = 0.052423
   F1        = 0.097741


Total learning time: 96.34327936172485 seconds
Total inference time: 7.911 seconds
AUC ROC: 0.570905


Results scoring model
   AUC ROC   = 0.548964
   AUC PR    = 0.46175
   CLL	      = -0.664183
   Precision = 0.661017 at threshold = 0.5
   Recall    = 0.052209
   F1        = 0.096774


Total scoring time: 1.425 seconds
Refined model CLL: -0.664183


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.575893
   AUC PR    = 0.43719
   CLL	      = -0.632967
   Precision = 0.755869 at threshold = 0.5
   Recall    = 0.070925
   F1        = 0.129682


Total learning time: 194.4902213153839 seconds
Total inference time: 7.658 seconds
AUC ROC: 0.575893
Total revision time: 194.4902213153839
Best scored revision CLL: -0.662046


Dataset: 13_twitter_cora, Fold: 4, Type: Transfer (trRDN-B), Time: 00:10:12
{'AUC ROC': 0.575893, 'AUC PR': 0.43719, 'CLL': -0.632967, 'Precision': [0.755869, 0.5], 'Recall': 0.070925, 'F1': 0.129682, 'Learning time': 194.4902213153839, 'Inference time': 7.658, 'parameter': {'AUC ROC': 0.575893, 'AUC PR': 0.43719, 'CLL': -0.632967, 'Precision': [0.755869, 0.5], 'Recall': 0.070925, 'F1': 0.129682, 'Learning time': 95.41594195365906, 'Inference time': 7.658}}


Starting fold 5

Target train facts examples: 8644
Target train pos examples: 550
Target train neg examples: 500

Target test facts examples: 33914
Target test pos  examples: 2467
Target test neg examples: 4522

******************************************
Performing Parameter Learning
******************************************
Refine
0;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
0;true;follows(A, D).;false;false
0;false;follows(A, E), recursion_accounttype(E, B).;true;true
0;false,true;follows(A, F), follows(F, A).;false;true
0;false,true,false;follows(A, G), follows(G, E).;false;false
0;false,false;follows(H, A).;true;true
0;false,false,true;follows(I, H), follows(I, A).;false;false
0;false,false,false;follows(A, J), follows(J, K).;false;false
1;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
1;true;follows(A, C), tweets(A, D).;false;false
1;false;follows(A, E), recursion_accounttype(E, B).;true;true
1;false,true;tweets(A, F), tweets(E, F).;false;true
1;false,true,false;follows(G, A), follows(E, H).;false;false
1;false,false;follows(I, A).;true;true
1;false,false,true;follows(I, J), recursion_accounttype(J, B).;false;false
1;false,false,false;tweets(A, K).;false;false
2;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
2;true;follows(C, D), follows(D, A).;false;false
2;false;follows(E, A).;true;true
2;false,true;follows(F, E), follows(F, A).;false;true
2;false,true,false;follows(E, G), recursion_accounttype(G, B).;false;false
2;false,false;follows(A, H), follows(H, I).;true;true
2;false,false,true;recursion_accounttype(I, B).;false;false
2;false,false,false;follows(A, J).;false;false
3;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
3;true;tweets(A, D), tweets(C, D).;false;false
3;false;follows(E, A).;true;true
3;false,true;follows(F, E), recursion_accounttype(F, B).;true;false
3;false,true,true;follows(A, G), recursion_accounttype(G, B).;false;false
3;false,false;follows(A, H), recursion_accounttype(H, B).;true;true
3;false,false,true;follows(A, I), follows(I, H).;false;false
3;false,false,false;tweets(A, J), follows(A, K).;false;false
4;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
4;true;follows(A, D), follows(D, C).;true;false
4;true,true;follows(D, A).;false;true
4;true,true,false;tweets(A, E).;false;false
4;false;follows(F, A).;false;true
4;false,false;follows(A, G), recursion_accounttype(G, B).;true;true
4;false,false,true;follows(G, H), follows(H, G).;false;false
4;false,false,false;follows(A, I), follows(I, J).;false;false
5;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
5;true;follows(D, A), tweets(D, E).;true;true
5;true,true;recursion_accounttype(D, B).;false;false
5;true,false;follows(C, F), follows(F, C).;true;false
5;true,false,true;tweets(C, G), recursion_accounttype(F, B).;false;false
5;false;follows(A, H), follows(H, A).;false;true
5;false,false;follows(I, A), recursion_accounttype(I, B).;false;true
5;false,false,false;tweets(A, J), follows(K, A).;false;false
6;;accounttype(A, B) :- follows(A, C).;true;true
6;true;follows(D, C), recursion_accounttype(D, B).;true;false
6;true,true;recursion_accounttype(C, B).;true;true
6;true,true,true;follows(E, A), follows(E, D).;false;false
6;true,true,false;follows(F, A), recursion_accounttype(F, B).;false;false
6;false;follows(G, A), recursion_accounttype(G, B).;false;true
6;false,false;follows(H, A).;false;true
6;false,false,false;tweets(A, I).;false;false
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
7;true;tweets(C, D), follows(A, C).;false;false
7;false;follows(E, A).;true;true
7;false,true;follows(E, F), recursion_accounttype(F, B).;true;false
7;false,true,true;follows(F, E), follows(A, F).;false;false
7;false,false;follows(A, G), recursion_accounttype(G, B).;true;true
7;false,false,true;tweets(A, H).;false;false
7;false,false,false;follows(A, I).;false;false
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;true;follows(C, D), recursion_accounttype(D, B).;false;true
8;true,false;follows(A, E), follows(E, A).;false;false
8;false;follows(F, A), follows(A, G).;true;true
8;false,true;follows(G, A), follows(G, F).;false;true
8;false,true,false;follows(H, F), recursion_accounttype(H, B).;false;false
8;false,false;follows(I, A), recursion_accounttype(I, B).;false;true
8;false,false,false;follows(J, A).;false;false
9;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
9;true;follows(C, D).;true;false
9;true,true;follows(A, D).;true;true
9;true,true,true;follows(E, A), recursion_accounttype(E, B).;false;false
9;true,true,false;tweets(C, F), follows(D, C).;false;false
9;false;follows(A, G), follows(H, A).;false;true
9;false,false;follows(I, A), recursion_accounttype(I, B).;false;true
9;false,false,false;follows(J, A).;false;false


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.443242102801371;  // std dev = 0.493, 805.000 (wgt'ed) examples reached here.  /* #neg=334 #pos=471 */
%   | else return 0.7291166770349955;  // std dev = 0.335, 31.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=27 */
%   else if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | then if ( author(G, F), venue(G, A) )
%   | | then if ( samebib(G, H), venue(H, B) )
%   | | | then return 0.6581489350995122;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.14185106490048777;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.13087620782678508;  // std dev = 0.445, 44.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | else if ( haswordvenue(A, I), haswordauthor(J, I) )
%   | | then if ( author(K, J), venue(K, A) )
%   | | | then return 0.0581489350995122;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else return 0.17522210583121967;  // std dev = 2.980, 41.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=13 */
%   | | else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | | | then return 0.04458961306561406;  // std dev = 2.992, 59.000 (wgt'ed) examples reached here.  /* #neg=48 #pos=11 */
%   | | | else return 0.05814893509951237;  // std dev = 2.966, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.3803254334818479;  // std dev = 0.493, 805.000 (wgt'ed) examples reached here.  /* #neg=334 #pos=471 */
%   | else return 0.6157326050686436;  // std dev = 0.335, 31.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=27 */
%   else if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | then if ( author(G, F), venue(G, B) )
%   | | then if ( samebib(G, H), venue(H, A) )
%   | | | then return 0.6397480032138977;  // std dev = 0.899, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.15715819152444083;  // std dev = 0.016, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.10855824646068735;  // std dev = 0.441, 44.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | then if ( haswordtitle(J, K), haswordvenue(A, K) )
%   | | | then return -0.14922857980165982;  // std dev = 0.014, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | | else return 0.07194865890017786;  // std dev = 3.031, 54.000 (wgt'ed) examples reached here.  /* #neg=42 #pos=12 */
%   | | else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | | | then return 0.13499446218461325;  // std dev = 4.098, 83.000 (wgt'ed) examples reached here.  /* #neg=59 #pos=24 */
%   | | | else return -0.1533793618379733;  // std dev = 0.016, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordvenue(B, D) )
%   | | then return 0.6805851247859591;  // std dev = 0.056, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else if ( haswordtitle(F, D) )
%   | | | then return 0.2449182844345499;  // std dev = 2.596, 27.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=14 */
%   | | | else return -0.047462026339214695;  // std dev = 1.980, 24.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=6 */
%   | else if ( haswordtitle(G, C) )
%   | | then return 0.3226813064206765;  // std dev = 0.491, 753.000 (wgt'ed) examples reached here.  /* #neg=304 #pos=449 */
%   | | else return 0.47549952672721435;  // std dev = 0.343, 22.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=19 */
%   else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | then if ( author(J, I), venue(J, A) )
%   | | then if ( samebib(J, K), venue(K, B) )
%   | | | then return 0.5358691455212182;  // std dev = 0.898, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.13739788574429695;  // std dev = 0.007, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.10108740634564822;  // std dev = 0.438, 44.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | else return 0.06027231943387955;  // std dev = 0.412, 160.000 (wgt'ed) examples reached here.  /* #neg=124 #pos=36 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordauthor(F, C) )
%   | | then return 0.5216077804329589;  // std dev = 0.063, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else if ( haswordtitle(G, D) )
%   | | | then return 0.1792580649666844;  // std dev = 2.582, 27.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=14 */
%   | | | else return -0.12537094389750977;  // std dev = 1.924, 24.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=6 */
%   | else if ( haswordtitle(H, C) )
%   | | then return 0.2565951072431472;  // std dev = 0.489, 753.000 (wgt'ed) examples reached here.  /* #neg=304 #pos=449 */
%   | | else return 0.3876766473547287;  // std dev = 0.342, 22.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=19 */
%   else if ( haswordvenue(A, I), haswordauthor(J, I) )
%   | then if ( author(K, J), venue(K, B) )
%   | | then if ( samebib(K, L), venue(L, A) )
%   | | | then return 0.5207925008704439;  // std dev = 0.900, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.14578374590341267;  // std dev = 0.016, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.08169571783069142;  // std dev = 0.438, 44.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | else return 0.050691944779996535;  // std dev = 0.408, 160.000 (wgt'ed) examples reached here.  /* #neg=124 #pos=36 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordvenue(A, D) )
%   | | then return 0.39486548967809154;  // std dev = 0.060, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else if ( haswordtitle(F, D) )
%   | | | then return 0.1380390339262089;  // std dev = 2.581, 27.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=14 */
%   | | | else return -0.09699990162912826;  // std dev = 1.928, 24.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=6 */
%   | else if ( haswordtitle(G, C) )
%   | | then return 0.19695624176868212;  // std dev = 0.489, 753.000 (wgt'ed) examples reached here.  /* #neg=304 #pos=449 */
%   | | else return 0.2924122103949954;  // std dev = 0.342, 22.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=19 */
%   else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | then if ( author(J, I), venue(J, A) )
%   | | then return 0.13909531338846332;  // std dev = 0.390, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | else return 0.07619203387776301;  // std dev = 0.434, 44.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | else if ( haswordvenue(A, K), haswordauthor(L, K) )
%   | | then return 0.09304124505315818;  // std dev = 0.443, 46.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=14 */
%   | | else return 0.0203944856220792;  // std dev = 0.392, 114.000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordauthor(F, C) )
%   | | then return 0.30657157648316485;  // std dev = 0.053, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else if ( haswordtitle(G, D) )
%   | | | then return 0.09322631042327147;  // std dev = 2.570, 27.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=14 */
%   | | | else return -0.14801889611743768;  // std dev = 1.901, 24.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=6 */
%   | else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | then if ( haswordtitle(J, C) )
%   | | | then return -0.0028437480979081834;  // std dev = 3.038, 44.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=16 */
%   | | | else return 0.35033443430768757;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else return 0.16185471946072066;  // std dev = 0.484, 726.000 (wgt'ed) examples reached here.  /* #neg=278 #pos=448 */
%   else if ( haswordvenue(B, K), haswordauthor(L, K) )
%   | then if ( author(M, L), venue(M, A) )
%   | | then return 0.11409691317658129;  // std dev = 0.384, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | else return 0.06398459517520605;  // std dev = 0.434, 44.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | else return 0.03471950767340358;  // std dev = 0.408, 160.000 (wgt'ed) examples reached here.  /* #neg=124 #pos=36 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordauthor(F, C) )
%   | | then return 0.24619046339162445;  // std dev = 0.144, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else if ( haswordtitle(G, C) )
%   | | | then return -0.049953284457331854;  // std dev = 3.055, 46.000 (wgt'ed) examples reached here.  /* #neg=30 #pos=16 */
%   | | | else return 0.2926362281221648;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | then if ( author(J, I), venue(J, B) )
%   | | | then return 0.08975834199466465;  // std dev = 2.748, 36.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=16 */
%   | | | else return -0.1548378369248948;  // std dev = 1.489, 13.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=4 */
%   | | else return 0.12168383598066554;  // std dev = 0.484, 726.000 (wgt'ed) examples reached here.  /* #neg=278 #pos=448 */
%   else if ( haswordvenue(B, K), haswordauthor(L, K) )
%   | then if ( author(M, L), venue(M, A) )
%   | | then return 0.0926960391316222;  // std dev = 0.380, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | else return 0.05331070441788532;  // std dev = 0.433, 44.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | else return 0.029375941157388747;  // std dev = 0.408, 160.000 (wgt'ed) examples reached here.  /* #neg=124 #pos=36 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordtitle(E, D) )
%   | then return 0.07859457472221752;  // std dev = 0.482, 815.000 (wgt'ed) examples reached here.  /* #neg=336 #pos=479 */
%   | else return 0.22185966099595586;  // std dev = 0.294, 21.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=19 */
%   else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | then if ( author(H, G), venue(H, B) )
%   | | then if ( samebib(H, I), venue(I, A) )
%   | | | then return 0.3654941076306966;  // std dev = 0.899, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.14815504385962794;  // std dev = 0.018, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.04007513800516515;  // std dev = 0.437, 44.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | else if ( haswordvenue(B, J), haswordauthor(K, J) )
%   | | then if ( haswordtitle(L, J) )
%   | | | then return -0.03432323628838615;  // std dev = 0.636, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else return 0.07464778034750469;  // std dev = 2.884, 41.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=13 */
%   | | else if ( haswordvenue(A, M), haswordtitle(N, M) )
%   | | | then return -5.602697662143935E-4;  // std dev = 2.968, 59.000 (wgt'ed) examples reached here.  /* #neg=48 #pos=11 */
%   | | | else return 0.01719869102327496;  // std dev = 2.955, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordtitle(E, D) )
%   | then return 0.05923354518005167;  // std dev = 0.482, 815.000 (wgt'ed) examples reached here.  /* #neg=336 #pos=479 */
%   | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | then return 0.10659364535040838;  // std dev = 0.401, 10.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   | | else return 0.24392825912778163;  // std dev = 0.088, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | then if ( title(J, I), venue(J, B) )
%   | | then if ( title(K, I), venue(K, A) )
%   | | | then return 0.6362101253648241;  // std dev = 1.806, 29.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=26 */
%   | | | else return -0.1984458672702927;  // std dev = 0.229, 69.000 (wgt'ed) examples reached here.  /* #neg=69 */
%   | | else return -0.17673624012898778;  // std dev = 0.098, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | | then if ( haswordauthor(N, L) )
%   | | | then return 0.1158909175849419;  // std dev = 0.667, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | | else return 0.05573754417539694;  // std dev = 4.076, 86.000 (wgt'ed) examples reached here.  /* #neg=62 #pos=24 */
%   | | else return -0.19936512140213042;  // std dev = 0.145, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordtitle(E, D) )
%   | then return 0.04462686125220918;  // std dev = 0.482, 815.000 (wgt'ed) examples reached here.  /* #neg=336 #pos=479 */
%   | else return 0.15005276901854572;  // std dev = 0.285, 21.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=19 */
%   else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | then if ( haswordtitle(H, F) )
%   | | then return 5.499949701019571E-4;  // std dev = 0.234, 7.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=2 */
%   | | else if ( author(I, G), venue(I, A) )
%   | | | then return 0.013570703463410567;  // std dev = 0.901, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | | else return 0.04036140571010264;  // std dev = 2.795, 42.000 (wgt'ed) examples reached here.  /* #neg=30 #pos=12 */
%   | else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | | then if ( haswordtitle(K, L), haswordvenue(B, L) )
%   | | | then return -0.1533505633028178;  // std dev = 0.143, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | | else return 0.015215887323491007;  // std dev = 2.983, 54.000 (wgt'ed) examples reached here.  /* #neg=42 #pos=12 */
%   | | else if ( haswordvenue(B, M), haswordtitle(N, M) )
%   | | | then return 0.05366596058214863;  // std dev = 3.454, 83.000 (wgt'ed) examples reached here.  /* #neg=59 #pos=24 */
%   | | | else return -0.16372094698700587;  // std dev = 0.115, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */


Results
   AUC ROC   = 0.556125
   AUC PR    = 0.404392
   CLL	      = -0.70342
   Precision = 0.375187 at threshold = 0.5
   Recall    = 0.915687
   F1        = 0.532281


Total learning time: 65.09852051734924 seconds
Total inference time: 5.96 seconds
AUC ROC: 0.556125


Results scoring model
   AUC ROC   = 0.681071
   AUC PR    = 0.671358
   CLL	      = -0.609706
   Precision = 0.626984 at threshold = 0.5
   Recall    = 0.861818
   F1        = 0.725881


Total scoring time: 1.261 seconds
Parameter learned model CLL: -0.609706


Structure after Parameter Learning
[['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'false': 'haswordvenue(B, E), haswordauthor(F, E)', 'false,true': 'author(G, F), venue(G, A)', 'false,true,true': 'samebib(G, H), venue(H, B)', 'false,false': 'haswordvenue(A, I), haswordauthor(J, I)', 'false,false,true': 'author(K, J), venue(K, A)', 'false,false,false': 'haswordvenue(A, L), haswordtitle(M, L)'}, {'true,true': [0.493, 334, 471], 'true,false': [0.335, 4, 27], 'false,true,true,true': [0.894, 1, 4], 'false,true,true,false': [0.0, 5, 0], 'false,true,false': [0.445, 32, 12], 'false,false,true,true': [0.894, 4, 1], 'false,false,true,false': [2.98, 28, 13], 'false,false,false,true': [2.992, 48, 11], 'false,false,false,false': [2.966, 44, 11]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'false': 'haswordvenue(A, E), haswordauthor(F, E)', 'false,true': 'author(G, F), venue(G, B)', 'false,true,true': 'samebib(G, H), venue(H, A)', 'false,false': 'haswordvenue(B, I), haswordtitle(J, I)', 'false,false,true': 'haswordtitle(J, K), haswordvenue(A, K)', 'false,false,false': 'haswordvenue(A, L), haswordtitle(M, L)'}, {'true,true': [0.493, 334, 471], 'true,false': [0.335, 4, 27], 'false,true,true,true': [0.899, 1, 4], 'false,true,true,false': [0.016, 5, 0], 'false,true,false': [0.441, 32, 12], 'false,false,true,true': [0.014, 12, 0], 'false,false,true,false': [3.031, 42, 12], 'false,false,false,true': [4.098, 59, 24], 'false,false,false,false': [0.016, 11, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(A, D), haswordauthor(E, D)', 'true,true': 'haswordvenue(B, D)', 'true,true,false': 'haswordtitle(F, D)', 'true,false': 'haswordtitle(G, C)', 'false': 'haswordvenue(B, H), haswordauthor(I, H)', 'false,true': 'author(J, I), venue(J, A)', 'false,true,true': 'samebib(J, K), venue(K, B)'}, {'true,true,true': [0.056, 0, 10], 'true,true,false,true': [2.596, 13, 14], 'true,true,false,false': [1.98, 18, 6], 'true,false,true': [0.491, 304, 449], 'true,false,false': [0.343, 3, 19], 'false,true,true,true': [0.898, 1, 4], 'false,true,true,false': [0.007, 5, 0], 'false,true,false': [0.438, 32, 12], 'false,false': [0.412, 124, 36]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(B, D), haswordauthor(E, D)', 'true,true': 'haswordauthor(F, C)', 'true,true,false': 'haswordtitle(G, D)', 'true,false': 'haswordtitle(H, C)', 'false': 'haswordvenue(A, I), haswordauthor(J, I)', 'false,true': 'author(K, J), venue(K, B)', 'false,true,true': 'samebib(K, L), venue(L, A)'}, {'true,true,true': [0.063, 0, 10], 'true,true,false,true': [2.582, 13, 14], 'true,true,false,false': [1.924, 18, 6], 'true,false,true': [0.489, 304, 449], 'true,false,false': [0.342, 3, 19], 'false,true,true,true': [0.9, 1, 4], 'false,true,true,false': [0.016, 5, 0], 'false,true,false': [0.438, 32, 12], 'false,false': [0.408, 124, 36]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(B, D), haswordauthor(E, D)', 'true,true': 'haswordvenue(A, D)', 'true,true,false': 'haswordtitle(F, D)', 'true,false': 'haswordtitle(G, C)', 'false': 'haswordvenue(B, H), haswordauthor(I, H)', 'false,true': 'author(J, I), venue(J, A)', 'false,false': 'haswordvenue(A, K), haswordauthor(L, K)'}, {'true,true,true': [0.06, 0, 10], 'true,true,false,true': [2.581, 13, 14], 'true,true,false,false': [1.928, 18, 6], 'true,false,true': [0.489, 304, 449], 'true,false,false': [0.342, 3, 19], 'false,true,true': [0.39, 6, 4], 'false,true,false': [0.434, 32, 12], 'false,false,true': [0.443, 32, 14], 'false,false,false': [0.392, 92, 22]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(A, D), haswordauthor(E, D)', 'true,true': 'haswordauthor(F, C)', 'true,true,false': 'haswordtitle(G, D)', 'true,false': 'haswordvenue(B, H), haswordauthor(I, H)', 'true,false,true': 'haswordtitle(J, C)', 'false': 'haswordvenue(B, K), haswordauthor(L, K)', 'false,true': 'author(M, L), venue(M, A)'}, {'true,true,true': [0.053, 0, 10], 'true,true,false,true': [2.57, 13, 14], 'true,true,false,false': [1.901, 18, 6], 'true,false,true,true': [3.038, 28, 16], 'true,false,true,false': [0.894, 1, 4], 'true,false,false': [0.484, 278, 448], 'false,true,true': [0.384, 6, 4], 'false,true,false': [0.434, 32, 12], 'false,false': [0.408, 124, 36]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(A, D), haswordauthor(E, D)', 'true,true': 'haswordauthor(F, C)', 'true,true,false': 'haswordtitle(G, C)', 'true,false': 'haswordvenue(B, H), haswordauthor(I, H)', 'true,false,true': 'author(J, I), venue(J, B)', 'false': 'haswordvenue(B, K), haswordauthor(L, K)', 'false,true': 'author(M, L), venue(M, A)'}, {'true,true,true': [0.144, 0, 10], 'true,true,false,true': [3.055, 30, 16], 'true,true,false,false': [0.894, 1, 4], 'true,false,true,true': [2.748, 20, 16], 'true,false,true,false': [1.489, 9, 4], 'true,false,false': [0.484, 278, 448], 'false,true,true': [0.38, 6, 4], 'false,true,false': [0.433, 32, 12], 'false,false': [0.408, 124, 36]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(B, D), haswordtitle(E, D)', 'false': 'haswordvenue(A, F), haswordauthor(G, F)', 'false,true': 'author(H, G), venue(H, B)', 'false,true,true': 'samebib(H, I), venue(I, A)', 'false,false': 'haswordvenue(B, J), haswordauthor(K, J)', 'false,false,true': 'haswordtitle(L, J)', 'false,false,false': 'haswordvenue(A, M), haswordtitle(N, M)'}, {'true,true': [0.482, 336, 479], 'true,false': [0.294, 2, 19], 'false,true,true,true': [0.899, 1, 4], 'false,true,true,false': [0.018, 5, 0], 'false,true,false': [0.437, 32, 12], 'false,false,true,true': [0.636, 4, 1], 'false,false,true,false': [2.884, 28, 13], 'false,false,false,true': [2.968, 48, 11], 'false,false,false,false': [2.955, 44, 11]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(B, D), haswordtitle(E, D)', 'true,false': 'haswordvenue(A, F), haswordtitle(G, F)', 'false': 'haswordvenue(B, H), haswordtitle(I, H)', 'false,true': 'title(J, I), venue(J, B)', 'false,true,true': 'title(K, I), venue(K, A)', 'false,false': 'haswordvenue(A, L), haswordtitle(M, L)', 'false,false,true': 'haswordauthor(N, L)'}, {'true,true': [0.482, 336, 479], 'true,false,true': [0.401, 2, 8], 'true,false,false': [0.088, 0, 11], 'false,true,true,true': [1.806, 3, 26], 'false,true,true,false': [0.229, 69, 0], 'false,true,false': [0.098, 7, 0], 'false,false,true,true': [0.667, 3, 2], 'false,false,true,false': [4.076, 62, 24], 'false,false,false': [0.145, 18, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(A, D), haswordtitle(E, D)', 'false': 'haswordvenue(B, F), haswordauthor(G, F)', 'false,true': 'haswordtitle(H, F)', 'false,true,false': 'author(I, G), venue(I, A)', 'false,false': 'haswordvenue(A, J), haswordtitle(K, J)', 'false,false,true': 'haswordtitle(K, L), haswordvenue(B, L)', 'false,false,false': 'haswordvenue(B, M), haswordtitle(N, M)'}, {'true,true': [0.482, 336, 479], 'true,false': [0.285, 2, 19], 'false,true,true': [0.234, 5, 2], 'false,true,false,true': [0.901, 3, 2], 'false,true,false,false': [2.795, 30, 12], 'false,false,true,true': [0.143, 12, 0], 'false,false,true,false': [2.983, 42, 12], 'false,false,false,true': [3.454, 59, 24], 'false,false,false,false': [0.115, 11, 0]}]]
[{'': [0.24084270048762138, 0.18394619617433927], 'true': [0.2427591528104568, 0.11238293444328941], 'false': [0.20850480109739317, 0.17437500000000122], 'false,true': [0.23999999999999985, 0.19834710743801603], 'false,true,true': [0.15999999999999986, -2.7755575615628915e-18], 'false,false': [0.21172022684309966, 0.15574022776238935], 'false,false,true': [0.16000000000000003, 0.2165377751338484], 'false,false,false': [0.15168055156564153, 0.15999999999999948]}, {'': [0.23990334821509712, 0.18089461947223093], 'true': [0.24275915281046145, 0.11238293444328855], 'false': [0.2057722521244538, 0.17157281722592596], 'false,true': [0.2396663510462111, 0.1948062662047147], 'false,true,true': [0.16175462426720671, 4.833621904624941e-05], 'false,false': [0.14646332631635856, 0.18720960589104277], 'false,false,false': [0.20228614858057634, 2.220239204083056e-05], 'false,false,true': [1.7344364587006573e-05, 0.17011244678487497]}, {'': [0.2389728475296195, 0.17646785008727142], 'true': [0.238162204136848, 0.237883468142118], 'true,true': [0.0031484720128160506, 0.23037050068870057], 'true,false': [0.2407298649580488, 0.11776859504132223], 'true,true,false': [0.24965706447187935, 0.16341569201183295], 'false': [0.19359709063055913, 0.16980862559891508], 'false,true': [0.19403211511341345, 0.1917143188772048], 'false,true,true': [0.1614087856431266, 1.1196889160397516e-05]}, {'': [0.23642904608101797, 0.17393551753981187], 'true': [0.22228318412191328, 0.2360127988719816], 'true,false': [0.23900375125104348, 0.11694604352600325], 'true,true': [0.004027855333989594, 0.22640475593211415], 'true,true,false': [0.246882266123149, 0.1542387630040101], 'false': [0.193494513100452, 0.16668833624483048], 'false,true': [0.19210435019856814, 0.1917372235742336], 'false,true,true': [0.1619976145904028, 4.913942517288106e-05]}, {'': [0.23395525603566844, 0.1714598803295275], 'true': [0.20074513186474244, 0.23565394581221633], 'true,false': [0.23886296209057403, 0.11696488725934441], 'true,true': [0.0035916435430981995, 0.21727038031128423], 'true,true,false': [0.24671502430451067, 0.15489870222814692], 'false': [0.18221029864607963, 0.1672845822477297], 'false,true': [0.1519958151429912, 0.1883444817940001], 'false,false': [0.1963654465844997, 0.15403290229148905]}, {'': [0.23255527268355003, 0.1706171007506662], 'true': [0.19473530060713257, 0.2344737160418217], 'true,false': [0.21605310392903096, 0.2346703807020966], 'true,false,true': [0.2096947311027798, 0.16000000000000006], 'true,true': [0.0027822182178349865, 0.21485749099491802], 'true,true,false': [0.24461955992601964, 0.15056379597037997], 'false': [0.18088008872821118, 0.16677843890284205], 'false,true': [0.1474695235347497, 0.18800835373732852]}, {'': [0.2306936131117023, 0.1701915880429971], 'true': [0.18457365499816333, 0.23374720643139976], 'true,false': [0.2110807590075646, 0.23468436981683174], 'true,false,true': [0.2098078920164127, 0.17065087722595149], 'true,true': [0.0020872888180828663, 0.20905432213352404], 'true,true,false': [0.20287968875512408, 0.15999999999999998], 'false': [0.17987765536248612, 0.16667645943236203], 'false,true': [0.1440501674065775, 0.18773300615220176]}, {'': [0.22941969076458005, 0.16987357324793143], 'true': [0.23258941358356708, 0.08639494985989164], 'false': [0.1832362420791908, 0.16515121658939186], 'false,true': [0.14689041956030358, 0.19062532464510015], 'false,false': [0.1907883145770102, 0.15394319188060837], 'false,false,true': [0.08091561256645158, 0.2028966982232262], 'false,false,false': [0.14934585320114985, 0.1587116591253345], 'false,true,true': [0.16179914122049466, 6.397248674733236e-05]}, {'': [0.22918788493439912, 0.16820590949875613], 'true': [0.23253370971025483, 0.08546367629212477], 'false': [0.17027730785680006, 0.16606611822035602], 'false,true': [0.17895760765516164, 0.0013852644630114477], 'false,true,true': [0.11243939181516152, 0.000762823080747874], 'false,false': [0.18765625424822496, 0.0011683934066789765], 'false,false,true': [0.08899999770335257, 0.19319326837356632], 'true,false': [0.1611708547439956, 0.0076576371127104826]}, {'': [0.22901042419524179, 0.14352893523516178], 'true': [0.23254192535338772, 0.08111911893741112], 'false': [0.16702452327159786, 0.1354713997042409], 'false,true': [0.05455001009355973, 0.18359895424181785], 'false,true,false': [0.16235867534158718, 0.18605120336993913], 'false,false': [0.1393885160283675, 0.13193479179557507], 'false,false,true': [0.0016964499995948679, 0.16482045323696812], 'false,false,false': [0.1437316875947631, 0.001194865559531224]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;false;haswordvenue(B, E), haswordauthor(F, E).;true;true
0;false,true;author(G, F), venue(G, A).;true;true
0;false,true,true;samebib(G, H), venue(H, B).;true;true
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;false;haswordvenue(A, E), haswordauthor(F, E).;true;true
1;false,true;author(G, F), venue(G, B).;true;true
1;false,true,true;samebib(G, H), venue(H, A).;true;true
1;false,false;haswordvenue(B, I), haswordtitle(J, I).;true;true
1;false,false,true;haswordtitle(J, K), haswordvenue(A, K).;true;true
1;false,false,false;haswordvenue(A, L), haswordtitle(M, L).;true;true
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;false;haswordvenue(B, H), haswordauthor(I, H).;true;true
2;false,true;author(J, I), venue(J, A).;true;true
2;false,true,true;samebib(J, K), venue(K, B).;true;true
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;false;haswordvenue(A, I), haswordauthor(J, I).;true;true
3;false,true;author(K, J), venue(K, B).;true;true
3;false,true,true;samebib(K, L), venue(L, A).;true;true
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordvenue(A, D), haswordauthor(E, D).;true;true
6;true,true;haswordauthor(F, C).;true;true
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;false;haswordvenue(A, F), haswordauthor(G, F).;true;true
7;false,true;author(H, G), venue(H, B).;true;true
7;false,true,true;samebib(H, I), venue(I, A).;true;true
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;false;haswordvenue(B, H), haswordtitle(I, H).;true;true
8;false,true;title(J, I), venue(J, B).;true;true
8;false,true,true;title(K, I), venue(K, A).;true;true
8;false,false;haswordvenue(A, L), haswordtitle(M, L).;true;true
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;false;haswordvenue(B, F), haswordauthor(G, F).;true;true
9;false,false;haswordvenue(A, J), haswordtitle(K, J).;true;true
9;false,false,true;haswordtitle(K, L), haswordvenue(B, L).;true;true
9;false,false,false;haswordvenue(B, M), haswordtitle(N, M).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.443242102801371;  // std dev = 0.493, 805.000 (wgt'ed) examples reached here.  /* #neg=334 #pos=471 */
%   | else return 0.7291166770349955;  // std dev = 0.335, 31.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=27 */
%   else if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | then if ( author(G, F), venue(G, A) )
%   | | then if ( samebib(G, H), venue(H, B) )
%   | | | then return 0.6581489350995122;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.14185106490048777;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( author(I, F), venue(I, B) )
%   | | | then return -0.14185106490048777;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.15083186192878065;  // std dev = 2.913, 41.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=12 */
%   | else if ( haswordvenue(A, J), haswordauthor(K, J) )
%   | | then if ( haswordtitle(L, J) )
%   | | | then return 0.0581489350995122;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else return 0.17522210583121967;  // std dev = 2.980, 41.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=13 */
%   | | else return 0.051131391239862906;  // std dev = 0.395, 114.000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.3803254334818479;  // std dev = 0.493, 805.000 (wgt'ed) examples reached here.  /* #neg=334 #pos=471 */
%   | else return 0.6157326050686436;  // std dev = 0.335, 31.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=27 */
%   else if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | then if ( author(G, F), venue(G, B) )
%   | | then if ( samebib(G, H), venue(H, A) )
%   | | | then return 0.6392119282680095;  // std dev = 0.899, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.15769426647032894;  // std dev = 0.016, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( author(I, F), venue(I, A) )
%   | | | then return -0.16343846579291768;  // std dev = 0.003, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.12907154912175825;  // std dev = 2.884, 41.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=12 */
%   | else if ( haswordvenue(B, J), haswordauthor(K, J) )
%   | | then if ( haswordtitle(L, J) )
%   | | | then return 0.03693744759731563;  // std dev = 0.807, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else return 0.1534329638272584;  // std dev = 2.940, 41.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=13 */
%   | | else return 0.04479249977758044;  // std dev = 0.395, 114.000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.31149293361789177;  // std dev = 0.493, 805.000 (wgt'ed) examples reached here.  /* #neg=334 #pos=471 */
%   | else return 0.48283090502633463;  // std dev = 0.335, 31.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=27 */
%   else if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | then if ( author(G, F), venue(G, A) )
%   | | then if ( samebib(G, H), venue(H, B) )
%   | | | then return 0.5342138905737382;  // std dev = 0.901, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.1371885616510316;  // std dev = 0.014, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.09339221621720722;  // std dev = 0.439, 44.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | else if ( haswordvenue(A, I), haswordauthor(J, I) )
%   | | then if ( haswordtitle(K, I) )
%   | | | then return 0.03160564895277737;  // std dev = 0.805, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else return 0.13136057997248266;  // std dev = 2.936, 41.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=13 */
%   | | else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | | | then return 0.03250702666026084;  // std dev = 2.992, 59.000 (wgt'ed) examples reached here.  /* #neg=48 #pos=11 */
%   | | | else return 0.04606634869415913;  // std dev = 2.966, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordauthor(D, C) )
%   | then return 0.5934536245591475;  // std dev = 0.082, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | else if ( haswordtitle(E, C) )
%   | | then return 0.2423465827554072;  // std dev = 0.493, 799.000 (wgt'ed) examples reached here.  /* #neg=334 #pos=465 */
%   | | else return 0.34493224687631924;  // std dev = 0.355, 27.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=23 */
%   else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | then if ( author(H, G), venue(H, B) )
%   | | then if ( samebib(H, I), venue(I, A) )
%   | | | then return 0.5126961211624405;  // std dev = 0.908, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.14843846012740275;  // std dev = 0.028, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( author(J, G), venue(J, A) )
%   | | | then return -0.15744714287561928;  // std dev = 0.007, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.09005442089025201;  // std dev = 2.855, 41.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=12 */
%   | else if ( haswordvenue(B, K), haswordauthor(L, K) )
%   | | then return 0.10015316449903641;  // std dev = 0.442, 46.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=14 */
%   | | else return 0.03389206741048833;  // std dev = 0.395, 114.000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordtitle(E, D) )
%   | then return 0.18871979708102982;  // std dev = 0.491, 815.000 (wgt'ed) examples reached here.  /* #neg=336 #pos=479 */
%   | else return 0.30433092289756913;  // std dev = 0.292, 21.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=19 */
%   else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | then if ( author(H, G), venue(H, A) )
%   | | then if ( samebib(H, I), venue(I, B) )
%   | | | then return 0.39484723323764503;  // std dev = 0.903, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.13262849337984867;  // std dev = 0.014, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.06263853936024594;  // std dev = 0.435, 44.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | else if ( haswordvenue(A, J), haswordauthor(K, J) )
%   | | then if ( haswordtitle(L, J) )
%   | | | then return 0.006714437361983866;  // std dev = 0.707, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else return 0.09170297102150146;  // std dev = 2.899, 41.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=13 */
%   | | else if ( haswordvenue(B, M), haswordtitle(N, M) )
%   | | | then return 0.02211754487386993;  // std dev = 2.990, 59.000 (wgt'ed) examples reached here.  /* #neg=48 #pos=11 */
%   | | | else return 0.03701608712189873;  // std dev = 2.967, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordvenue(A, D) )
%   | | then return 0.3983809162672542;  // std dev = 0.089, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else if ( haswordtitle(F, D) )
%   | | | then return 0.0767217541115256;  // std dev = 2.596, 27.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=14 */
%   | | | else return -0.23789246875046174;  // std dev = 1.865, 24.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=6 */
%   | else if ( haswordtitle(G, C) )
%   | | then return 0.15448477609765013;  // std dev = 0.491, 753.000 (wgt'ed) examples reached here.  /* #neg=304 #pos=449 */
%   | | else return 0.21133743094004806;  // std dev = 0.341, 22.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=19 */
%   else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | then if ( author(J, I), venue(J, B) )
%   | | then return 0.12201772989363846;  // std dev = 0.389, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | else return 0.044997345493449865;  // std dev = 0.430, 44.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | then return 0.05701711286118817;  // std dev = 0.423, 95.000 (wgt'ed) examples reached here.  /* #neg=71 #pos=24 */
%   | | else return 0.008948670415282294;  // std dev = 0.382, 65.000 (wgt'ed) examples reached here.  /* #neg=53 #pos=12 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordauthor(F, C) )
%   | | then return 0.31038203993848185;  // std dev = 0.078, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else if ( haswordtitle(G, D) )
%   | | | then return 0.04190945004989491;  // std dev = 2.579, 27.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=14 */
%   | | | else return -0.27286084768811353;  // std dev = 1.873, 24.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=6 */
%   | else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | then if ( haswordtitle(J, H) )
%   | | | then return 0.07766873045752412;  // std dev = 2.542, 26.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=14 */
%   | | | else return -0.17198852238050863;  // std dev = 1.850, 23.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=6 */
%   | | else return 0.13173731372026617;  // std dev = 0.484, 726.000 (wgt'ed) examples reached here.  /* #neg=278 #pos=448 */
%   else if ( haswordvenue(B, K), haswordauthor(L, K) )
%   | then if ( author(M, L), venue(M, A) )
%   | | then return 0.08207867376212412;  // std dev = 0.352, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | else return 0.04316453557410037;  // std dev = 0.433, 44.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | else return 0.031115499489301424;  // std dev = 0.408, 160.000 (wgt'ed) examples reached here.  /* #neg=124 #pos=36 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordauthor(D, C) )
%   then if ( haswordtitle(E, C) )
%   | then if ( author(F, D), venue(F, B) )
%   | | then return -0.4906313655987141;  // std dev = 2.11e-08, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | else return 0.2133117622470947;  // std dev = 0.385, 31.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=21 */
%   | else if ( author(G, D), venue(G, A) )
%   | | then return -0.24298888678638408;  // std dev = 0.313, 24.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=4 */
%   | | else if ( haswordvenue(B, C) )
%   | | | then return 0.16872313104089245;  // std dev = 0.013, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.06762871505959583;  // std dev = 3.092, 49.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=18 */
%   else if ( haswordvenue(A, H), haswordvenue(B, H) )
%   | then if ( haswordtitle(I, H) )
%   | | then return 0.08836714887778951;  // std dev = 0.487, 753.000 (wgt'ed) examples reached here.  /* #neg=304 #pos=449 */
%   | | else return 0.17223441493483013;  // std dev = 0.342, 22.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=19 */
%   | else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | | then return 0.0024440618268066813;  // std dev = 0.378, 66.000 (wgt'ed) examples reached here.  /* #neg=54 #pos=12 */
%   | | else return 0.042408030174445804;  // std dev = 0.426, 94.000 (wgt'ed) examples reached here.  /* #neg=70 #pos=24 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(B, C), haswordauthor(D, C) )
%   then if ( haswordtitle(E, C) )
%   | then if ( author(F, D), venue(F, A) )
%   | | then return -0.5022211061860419;  // std dev = 2.98e-08, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | else return 0.19501109885734327;  // std dev = 0.375, 31.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=21 */
%   | else if ( author(G, D), venue(G, B) )
%   | | then return -0.21093480002505685;  // std dev = 0.311, 24.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=4 */
%   | | else return 0.07117736661849366;  // std dev = 0.429, 52.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=21 */
%   else if ( haswordvenue(A, H), haswordvenue(B, H) )
%   | then if ( haswordtitle(I, H) )
%   | | then return 0.06699131583022784;  // std dev = 0.485, 753.000 (wgt'ed) examples reached here.  /* #neg=304 #pos=449 */
%   | | else return 0.12944913213650738;  // std dev = 0.340, 22.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=19 */
%   | else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | | then if ( haswordtitle(K, L), haswordvenue(A, L) )
%   | | | then return -0.18766902055210788;  // std dev = 0.069, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | | else return 0.07302408907443096;  // std dev = 4.034, 83.000 (wgt'ed) examples reached here.  /* #neg=59 #pos=24 */
%   | | else return -0.009185730747732969;  // std dev = 0.383, 65.000 (wgt'ed) examples reached here.  /* #neg=53 #pos=12 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(B, C), haswordauthor(D, C) )
%   then if ( haswordvenue(A, C) )
%   | then return 0.21753701850815124;  // std dev = 0.073, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | else if ( author(E, D), venue(E, A) )
%   | | then return 0.024462855757543575;  // std dev = 0.428, 41.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=19 */
%   | | else return -0.03900449989928401;  // std dev = 0.409, 64.000 (wgt'ed) examples reached here.  /* #neg=47 #pos=17 */
%   else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | then if ( author(H, G), venue(H, B) )
%   | | then if ( samebib(H, I), venue(I, A) )
%   | | | then return 0.3808678935654469;  // std dev = 1.257, 20.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=18 */
%   | | | else return -0.37722278581293156;  // std dev = 0.543, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | | else if ( author(J, G), venue(J, A) )
%   | | | then return -0.2901853801258188;  // std dev = 0.818, 16.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=1 */
%   | | | else return 0.047377648814554064;  // std dev = 2.887, 41.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=15 */
%   | else if ( haswordvenue(A, K), haswordvenue(B, K) )
%   | | then return 0.05990915534189399;  // std dev = 0.484, 726.000 (wgt'ed) examples reached here.  /* #neg=278 #pos=448 */
%   | | else return 0.01105528335576081;  // std dev = 0.393, 114.000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */


Results
   AUC ROC   = 0.548447
   AUC PR    = 0.393849
   CLL	      = -0.708561
   Precision = 0.372154 at threshold = 0.5
   Recall    = 0.927442
   F1        = 0.531167


Total learning time: 39.89195108413696 seconds
Total inference time: 5.606 seconds
AUC ROC: 0.548447


Results scoring model
   AUC ROC   = 0.686651
   AUC PR    = 0.686293
   CLL	      = -0.613134
   Precision = 0.636595 at threshold = 0.5
   Recall    = 0.910909
   F1        = 0.749439


Total scoring time: 1.115 seconds
Refined model CLL: -0.613134


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.556125
   AUC PR    = 0.404392
   CLL	      = -0.70342
   Precision = 0.375187 at threshold = 0.5
   Recall    = 0.915687
   F1        = 0.532281


Total learning time: 107.3664716014862 seconds
Total inference time: 5.96 seconds
AUC ROC: 0.556125
Total revision time: 107.3664716014862
Best scored revision CLL: -0.609706


Dataset: 13_twitter_cora, Fold: 5, Type: Transfer (trRDN-B), Time: 00:12:11
{'AUC ROC': 0.556125, 'AUC PR': 0.404392, 'CLL': -0.70342, 'Precision': [0.375187, 0.5], 'Recall': 0.915687, 'F1': 0.532281, 'Learning time': 107.3664716014862, 'Inference time': 5.96, 'parameter': {'AUC ROC': 0.556125, 'AUC PR': 0.404392, 'CLL': -0.70342, 'Precision': [0.375187, 0.5], 'Recall': 0.915687, 'F1': 0.532281, 'Learning time': 65.09852051734924, 'Inference time': 5.96}}


