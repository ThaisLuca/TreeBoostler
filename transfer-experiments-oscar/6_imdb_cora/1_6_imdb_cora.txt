Starting experiment #1 for 6_imdb_cora

Loading pre-trained trees.
Starting fold 1

Target train facts examples: 7463
Target train pos examples: 162
Target train neg examples: 236

Target test facts examples: 35095
Target test pos  examples: 536
Target test neg examples: 480

******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


WILL Produced-Tree #1
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordauthor(D, C) )
%   then if ( haswordtitle(B, C) )
%   | then return 0.7369368138873914;  // std dev = 0.326, 66.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=58 */
%   | else if ( author(E, D), title(E, B) )
%   | | then return 0.23314893509951226;  // std dev = 0.484, 8.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=3 */
%   | | else return -0.030739953789376603;  // std dev = 0.314, 54.000 (wgt'ed) examples reached here.  /* #neg=48 #pos=6 */
%   else return 0.21000078695136187;  // std dev = 0.478, 270.000 (wgt'ed) examples reached here.  /* #neg=175 #pos=95 */
WILL Produced-Tree #2
% FOR sametitle(A, B):
%   if ( haswordtitle(B, C), haswordauthor(D, C) )
%   then if ( haswordtitle(A, C) )
%   | then return 0.6220633676283396;  // std dev = 0.326, 66.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=58 */
%   | else if ( author(E, D), title(E, A) )
%   | | then return 0.21732869001095817;  // std dev = 0.475, 8.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=3 */
%   | | else return -0.05845521615977301;  // std dev = 0.314, 54.000 (wgt'ed) examples reached here.  /* #neg=48 #pos=6 */
%   else if ( haswordtitle(A, F), haswordauthor(G, F) )
%   | then if ( author(H, G), title(H, B) )
%   | | then return 0.427334239218108;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | else return -0.020503088392933043;  // std dev = 0.322, 51.000 (wgt'ed) examples reached here.  /* #neg=45 #pos=6 */
%   | else return 0.23248515122591415;  // std dev = 0.490, 214.000 (wgt'ed) examples reached here.  /* #neg=128 #pos=86 */
WILL Produced-Tree #3
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordauthor(D, C) )
%   then if ( haswordtitle(B, C) )
%   | then return 0.48728512046144257;  // std dev = 0.326, 66.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=58 */
%   | else if ( author(E, D), title(E, B) )
%   | | then return 0.1618164346155691;  // std dev = 0.462, 8.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=3 */
%   | | else return -0.026304156074732108;  // std dev = 0.315, 54.000 (wgt'ed) examples reached here.  /* #neg=48 #pos=6 */
%   else if ( haswordtitle(B, F), haswordauthor(G, F) )
%   | then if ( author(H, G), title(H, A) )
%   | | then return 0.39781127410651673;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | else return -0.0436708884868525;  // std dev = 0.322, 51.000 (wgt'ed) examples reached here.  /* #neg=45 #pos=6 */
%   | else return 0.19722452943661778;  // std dev = 0.490, 214.000 (wgt'ed) examples reached here.  /* #neg=128 #pos=86 */
WILL Produced-Tree #4
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordauthor(D, C) )
%   then if ( haswordtitle(B, C) )
%   | then return 0.3672186186501392;  // std dev = 0.326, 66.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=58 */
%   | else if ( author(E, D), title(E, B) )
%   | | then return 0.13368199995402796;  // std dev = 0.461, 8.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=3 */
%   | | else return -0.023217135281130303;  // std dev = 0.315, 54.000 (wgt'ed) examples reached here.  /* #neg=48 #pos=6 */
%   else return 0.1282835916168408;  // std dev = 0.471, 270.000 (wgt'ed) examples reached here.  /* #neg=175 #pos=95 */
WILL Produced-Tree #5
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordvenue(D, C) )
%   then if ( title(E, A), venue(E, D) )
%   | then if ( samebib(E, F), title(F, B) )
%   | | then if ( venue(F, D) )
%   | | | then return 0.6420838817558047;  // std dev = 1.670, 107.000 (wgt'ed) examples reached here.  /* #pos=107 */
%   | | | else return 0.618881967994003;  // std dev = 0.973, 27.000 (wgt'ed) examples reached here.  /* #pos=27 */
%   | | else return -0.20484314406380755;  // std dev = 0.180, 235.000 (wgt'ed) examples reached here.  /* #neg=227 #pos=8 */
%   | else if ( haswordtitle(A, G), haswordauthor(H, G) )
%   | | then if ( haswordtitle(B, G) )
%   | | | then return 0.39807224506280847;  // std dev = 2.11e-08, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.036644675316950745;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | | else return 0.7373046044321345;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( haswordtitle(B, I), haswordauthor(J, I) )
%   | then return 0.20768280494111013;  // std dev = 0.660, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | else return 0.30364130654120935;  // std dev = 0.867, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
WILL Produced-Tree #6
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordvenue(D, C) )
%   then if ( title(E, A), venue(E, D) )
%   | then if ( samebib(E, F), title(F, B) )
%   | | then if ( venue(F, D) )
%   | | | then return 0.5036048760935316;  // std dev = 1.698, 107.000 (wgt'ed) examples reached here.  /* #pos=107 */
%   | | | else return 0.4901809280026591;  // std dev = 1.018, 27.000 (wgt'ed) examples reached here.  /* #pos=27 */
%   | | else return -0.17120651426492098;  // std dev = 0.179, 235.000 (wgt'ed) examples reached here.  /* #neg=227 #pos=8 */
%   | else if ( haswordtitle(A, G), haswordauthor(H, G) )
%   | | then if ( haswordtitle(B, G) )
%   | | | then return 0.30755472608314727;  // std dev = 1.05e-08, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.032443072200313984;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | | else return 0.5731467063430893;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( haswordtitle(B, I), haswordauthor(J, I) )
%   | then return 0.16471930241495655;  // std dev = 0.640, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | else return 0.2530311022916303;  // std dev = 0.843, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
WILL Produced-Tree #7
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordvenue(D, C) )
%   then if ( title(E, A), venue(E, D) )
%   | then if ( samebib(E, F), title(F, B) )
%   | | then if ( venue(F, D) )
%   | | | then return 0.3920696810262709;  // std dev = 1.531, 107.000 (wgt'ed) examples reached here.  /* #pos=107 */
%   | | | else return 0.38777178401328916;  // std dev = 0.951, 27.000 (wgt'ed) examples reached here.  /* #pos=27 */
%   | | else return -0.14584758983862456;  // std dev = 0.178, 235.000 (wgt'ed) examples reached here.  /* #neg=227 #pos=8 */
%   | else if ( haswordtitle(A, G), haswordauthor(H, G) )
%   | | then if ( haswordtitle(B, G) )
%   | | | then return 0.24617252978697307;  // std dev = 1.83e-08, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.02862800147924811;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | | else return 0.4308349554515625;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( haswordtitle(B, I), haswordauthor(J, I) )
%   | then return 0.13103174657757521;  // std dev = 0.631, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | else return 0.20490370205052744;  // std dev = 0.823, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
WILL Produced-Tree #8
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordvenue(D, C) )
%   then if ( title(E, A), venue(E, D) )
%   | then if ( samebib(E, F), title(F, B) )
%   | | then if ( venue(F, D) )
%   | | | then return 0.31053517446331297;  // std dev = 1.325, 107.000 (wgt'ed) examples reached here.  /* #pos=107 */
%   | | | else return 0.3115600252148746;  // std dev = 0.848, 27.000 (wgt'ed) examples reached here.  /* #pos=27 */
%   | | else return -0.12619568668387826;  // std dev = 0.177, 235.000 (wgt'ed) examples reached here.  /* #neg=227 #pos=8 */
%   | else if ( haswordtitle(A, G), haswordauthor(H, G) )
%   | | then if ( haswordtitle(B, G) )
%   | | | then return 0.20337970921485166;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.02518629891945505;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | | else return 0.32975788145402896;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( haswordtitle(B, I), haswordauthor(J, I) )
%   | then return 0.10464433049279231;  // std dev = 0.627, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | else return 0.16236449453109525;  // std dev = 0.810, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
WILL Produced-Tree #9
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordvenue(D, C) )
%   then if ( title(E, A), venue(E, D) )
%   | then if ( samebib(E, F), title(F, B) )
%   | | then if ( venue(F, D) )
%   | | | then return 0.2523206652885983;  // std dev = 1.140, 107.000 (wgt'ed) examples reached here.  /* #pos=107 */
%   | | | else return 0.25576090411192365;  // std dev = 0.746, 27.000 (wgt'ed) examples reached here.  /* #pos=27 */
%   | | else return -0.11059865187406881;  // std dev = 0.176, 235.000 (wgt'ed) examples reached here.  /* #neg=227 #pos=8 */
%   | else if ( haswordtitle(A, G), haswordauthor(H, G) )
%   | | then if ( haswordtitle(B, G) )
%   | | | then return 0.1724042028944549;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.022099367396604296;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | | else return 0.26133561516838744;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( haswordtitle(B, I), haswordauthor(J, I) )
%   | then return 0.08390382493242428;  // std dev = 0.626, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | else return 0.1267337964972109;  // std dev = 0.801, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
WILL Produced-Tree #10
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordvenue(D, C) )
%   then if ( title(E, A), venue(E, D) )
%   | then if ( samebib(E, F), title(F, B) )
%   | | then if ( venue(F, D) )
%   | | | then return 0.21022883121594502;  // std dev = 0.988, 107.000 (wgt'ed) examples reached here.  /* #pos=107 */
%   | | | else return 0.21452078506940891;  // std dev = 0.657, 27.000 (wgt'ed) examples reached here.  /* #pos=27 */
%   | | else return -0.09796464213075913;  // std dev = 0.176, 235.000 (wgt'ed) examples reached here.  /* #neg=227 #pos=8 */
%   | else if ( haswordtitle(A, G), haswordauthor(H, G) )
%   | | then if ( haswordtitle(B, G) )
%   | | | then return 0.14917487560723686;  // std dev = 5.27e-09, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.019344867728966385;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | | else return 0.21410211003596025;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( haswordtitle(A, I), haswordauthor(J, I) )
%   | then return 0.06600427458897416;  // std dev = 0.633, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | else return 0.10023276960887957;  // std dev = 0.790, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */


Results
   AUC ROC   = 0.960658
   AUC PR    = 0.95581
   CLL	      = -0.235895
   Precision = 0.949275 at threshold = 0.5
   Recall    = 0.977612
   F1        = 0.963235


Total learning time: 477.8762881755829 seconds
Total inference time: 156.878 seconds
AUC ROC: 0.960658


Results scoring model
   AUC ROC   = 0.99711
   AUC PR    = 0.996048
   CLL	      = -0.196872
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.944444
   F1        = 0.971429


Total scoring time: 4.947 seconds
Parameter learned model CLL: -0.196872


Structure after Parameter Learning
[['sametitle(A, B)', {'': 'haswordtitle(A, C), haswordauthor(D, C)', 'true': 'haswordtitle(B, C)', 'true,false': 'author(E, D), title(E, B)'}, {'true,true': [0.326, 8, 58], 'true,false,true': [0.484, 5, 3], 'true,false,false': [0.314, 48, 6], 'false': [0.478, 175, 95]}], ['sametitle(A, B)', {'': 'haswordtitle(B, C), haswordauthor(D, C)', 'true': 'haswordtitle(A, C)', 'true,false': 'author(E, D), title(E, A)', 'false': 'haswordtitle(A, F), haswordauthor(G, F)', 'false,true': 'author(H, G), title(H, B)'}, {'true,true': [0.326, 8, 58], 'true,false,true': [0.475, 5, 3], 'true,false,false': [0.314, 48, 6], 'false,true,true': [1.095, 2, 3], 'false,true,false': [0.322, 45, 6], 'false,false': [0.49, 128, 86]}], ['sametitle(A, B)', {'': 'haswordtitle(A, C), haswordauthor(D, C)', 'true': 'haswordtitle(B, C)', 'true,false': 'author(E, D), title(E, B)', 'false': 'haswordtitle(B, F), haswordauthor(G, F)', 'false,true': 'author(H, G), title(H, A)'}, {'true,true': [0.326, 8, 58], 'true,false,true': [0.462, 5, 3], 'true,false,false': [0.315, 48, 6], 'false,true,true': [1.095, 2, 3], 'false,true,false': [0.322, 45, 6], 'false,false': [0.49, 128, 86]}], ['sametitle(A, B)', {'': 'haswordtitle(A, C), haswordauthor(D, C)', 'true': 'haswordtitle(B, C)', 'true,false': 'author(E, D), title(E, B)'}, {'true,true': [0.326, 8, 58], 'true,false,true': [0.461, 5, 3], 'true,false,false': [0.315, 48, 6], 'false': [0.471, 175, 95]}], ['sametitle(A, B)', {'': 'haswordtitle(A, C), haswordvenue(D, C)', 'true': 'title(E, A), venue(E, D)', 'true,true': 'samebib(E, F), title(F, B)', 'true,true,true': 'venue(F, D)', 'true,false': 'haswordtitle(A, G), haswordauthor(H, G)', 'true,false,true': 'haswordtitle(B, G)', 'false': 'haswordtitle(B, I), haswordauthor(J, I)'}, {'true,true,true,true': [1.67, 0, 107], 'true,true,true,false': [0.973, 0, 27], 'true,true,false': [0.18, 227, 8], 'true,false,true,true': [2.11e-08, 0, 9], 'true,false,true,false': [0.913, 5, 1], 'true,false,false': [0.0, 0, 4], 'false,true': [0.66, 2, 4], 'false,false': [0.867, 2, 2]}], ['sametitle(A, B)', {'': 'haswordtitle(A, C), haswordvenue(D, C)', 'true': 'title(E, A), venue(E, D)', 'true,true': 'samebib(E, F), title(F, B)', 'true,true,true': 'venue(F, D)', 'true,false': 'haswordtitle(A, G), haswordauthor(H, G)', 'true,false,true': 'haswordtitle(B, G)', 'false': 'haswordtitle(B, I), haswordauthor(J, I)'}, {'true,true,true,true': [1.698, 0, 107], 'true,true,true,false': [1.018, 0, 27], 'true,true,false': [0.179, 227, 8], 'true,false,true,true': [1.05e-08, 0, 9], 'true,false,true,false': [0.913, 5, 1], 'true,false,false': [0.0, 0, 4], 'false,true': [0.64, 2, 4], 'false,false': [0.843, 2, 2]}], ['sametitle(A, B)', {'': 'haswordtitle(A, C), haswordvenue(D, C)', 'true': 'title(E, A), venue(E, D)', 'true,true': 'samebib(E, F), title(F, B)', 'true,true,true': 'venue(F, D)', 'true,false': 'haswordtitle(A, G), haswordauthor(H, G)', 'true,false,true': 'haswordtitle(B, G)', 'false': 'haswordtitle(B, I), haswordauthor(J, I)'}, {'true,true,true,true': [1.531, 0, 107], 'true,true,true,false': [0.951, 0, 27], 'true,true,false': [0.178, 227, 8], 'true,false,true,true': [1.83e-08, 0, 9], 'true,false,true,false': [0.913, 5, 1], 'true,false,false': [0.0, 0, 4], 'false,true': [0.631, 2, 4], 'false,false': [0.823, 2, 2]}], ['sametitle(A, B)', {'': 'haswordtitle(A, C), haswordvenue(D, C)', 'true': 'title(E, A), venue(E, D)', 'true,true': 'samebib(E, F), title(F, B)', 'true,true,true': 'venue(F, D)', 'true,false': 'haswordtitle(A, G), haswordauthor(H, G)', 'true,false,true': 'haswordtitle(B, G)', 'false': 'haswordtitle(B, I), haswordauthor(J, I)'}, {'true,true,true,true': [1.325, 0, 107], 'true,true,true,false': [0.848, 0, 27], 'true,true,false': [0.177, 227, 8], 'true,false,true,true': [0.0, 0, 9], 'true,false,true,false': [0.913, 5, 1], 'true,false,false': [0.0, 0, 4], 'false,true': [0.627, 2, 4], 'false,false': [0.81, 2, 2]}], ['sametitle(A, B)', {'': 'haswordtitle(A, C), haswordvenue(D, C)', 'true': 'title(E, A), venue(E, D)', 'true,true': 'samebib(E, F), title(F, B)', 'true,true,true': 'venue(F, D)', 'true,false': 'haswordtitle(A, G), haswordauthor(H, G)', 'true,false,true': 'haswordtitle(B, G)', 'false': 'haswordtitle(B, I), haswordauthor(J, I)'}, {'true,true,true,true': [1.14, 0, 107], 'true,true,true,false': [0.746, 0, 27], 'true,true,false': [0.176, 227, 8], 'true,false,true,true': [0.0, 0, 9], 'true,false,true,false': [0.913, 5, 1], 'true,false,false': [0.0, 0, 4], 'false,true': [0.626, 2, 4], 'false,false': [0.801, 2, 2]}], ['sametitle(A, B)', {'': 'haswordtitle(A, C), haswordvenue(D, C)', 'true': 'title(E, A), venue(E, D)', 'true,true': 'samebib(E, F), title(F, B)', 'true,true,true': 'venue(F, D)', 'true,false': 'haswordtitle(A, G), haswordauthor(H, G)', 'true,false,true': 'haswordtitle(B, G)', 'false': 'haswordtitle(A, I), haswordauthor(J, I)'}, {'true,true,true,true': [0.988, 0, 107], 'true,true,true,false': [0.657, 0, 27], 'true,true,false': [0.176, 227, 8], 'true,false,true,true': [5.27e-09, 0, 9], 'true,false,true,false': [0.913, 5, 1], 'true,false,false': [0.0, 0, 4], 'false,true': [0.633, 2, 4], 'false,false': [0.79, 2, 2]}]]
[{'': [0.24945068359374953, 0.22805212620027596], 'true': [0.10651974288337872, 0.12408949011446431], 'true,false': [0.2343749999999999, 0.09876543209876568]}, {'': [0.2187453994764357, 0.22540885232768326], 'false': [0.13227453686089047, 0.24037033802078614], 'true': [0.10651974288338104, 0.12374271867216342], 'false,true': [0.24000000000000005, 0.10380622837370229], 'true,false': [0.22581912222993544, 0.09880651265703237]}, {'': [0.1718625212269259, 0.2245282378935908], 'false': [0.13181496993200362, 0.24037033802078853], 'true': [0.10651974288337995, 0.11796496833920689], 'false,true': [0.23999999999999985, 0.10380622837370208], 'true,false': [0.21387941297605828, 0.09918905238667441]}, {'': [0.14558676368836582, 0.22147527833991498], 'true': [0.10651974288337966, 0.11651239061592904], 'true,false': [0.21206216585905222, 0.09918043756574789]}, {'': [0.193610584225035, 0.12093323723391851], 'true': [0.1948760356375225, 0.10751346464328417], 'true,true': [0.027965311626663544, 0.03244076196494488], 'false': [0.0724962778197075, 0.1880638559376333], 'true,false': [0.08690672871693085, 0.0], 'true,false,true': [4.9343245538895844e-17, 0.13888888888888887], 'true,true,true': [0.026067647690022847, 0.03505582395777914]}, {'': [0.1347258846222569, 0.11388589212371644], 'true': [0.13542623266671083, 0.08165223768830074], 'true,true': [0.029272436427187822, 0.03191461400537529], 'false': [0.06829638454304272, 0.17759076909625232], 'true,false': [0.0737202968600711, 0.0], 'true,false,true': [1.2335811384723961e-17, 0.13888888888888887], 'true,true,true': [0.026935176415383285, 0.038391018341687254]}, {'': [0.09539412539485805, 0.10887824496245826], 'false': [0.0662601241438445, 0.16953118670714026], 'true': [0.09558577970780126, 0.06509422419502432], 'true,true': [0.024253029019757042, 0.03152125922939598], 'true,false': [0.06691370478674687, 0.0], 'true,false,true': [3.700743415417188e-17, 0.1388888888888889], 'true,true,true': [0.021909565275598158, 0.03352533907794498]}, {'': [0.07097521120653376, 0.10564203132420089], 'false': [0.0654770646861703, 0.16389051087928158], 'true': [0.07075042721128995, 0.05636923482888817], 'true,true': [0.018469352735174943, 0.031232466580314207], 'true,false': [0.06317624950900441, 0.0], 'true,false,true': [-3.0839528461809905e-17, 0.13888888888888887], 'true,true,true': [0.016402461927724193, 0.02665952576598019]}, {'': [0.05588921924762659, 0.10375539294325789], 'false': [0.0653885011476686, 0.16020508675809741], 'true': [0.055366640013436746, 0.05183271168832879], 'true,true': [0.013857964541770724, 0.03102272646714937], 'true,false': [0.06097752601332418, 0.0], 'true,false,true': [0.0, 0.13888888888888892], 'true,true,true': [0.012146651459599232, 0.020630384374463667]}, {'': [0.046292629764314176, 0.10278201780408805], 'false': [0.06676525501790077, 0.1561042080605723], 'true': [0.045569880645859026, 0.04932309433375195], 'true,false': [0.05960095498251678, 0.0], 'true,false,true': [3.0839528461809902e-18, 0.13888888888888892], 'true,true': [0.010515626583951167, 0.030871868388226472], 'true,true,true': [0.009131408330525056, 0.015986523054464734]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
4;;sametitle(A, B) :- haswordtitle(A, C), haswordvenue(D, C).;true;true
4;true;title(E, A), venue(E, D).;true;true
4;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
4;true,false,true;haswordtitle(B, G).;true;true
5;;sametitle(A, B) :- haswordtitle(A, C), haswordvenue(D, C).;true;true
5;true;title(E, A), venue(E, D).;true;true
5;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
5;true,false,true;haswordtitle(B, G).;true;true
6;;sametitle(A, B) :- haswordtitle(A, C), haswordvenue(D, C).;true;true
6;true;title(E, A), venue(E, D).;true;true
6;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
6;true,false,true;haswordtitle(B, G).;true;true
7;;sametitle(A, B) :- haswordtitle(A, C), haswordvenue(D, C).;true;true
7;true;title(E, A), venue(E, D).;true;true
7;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
7;true,false,true;haswordtitle(B, G).;true;true
8;;sametitle(A, B) :- haswordtitle(A, C), haswordvenue(D, C).;true;true
8;true;title(E, A), venue(E, D).;true;true
8;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
8;true,false,true;haswordtitle(B, G).;true;true
9;;sametitle(A, B) :- haswordtitle(A, C), haswordvenue(D, C).;true;true
9;true;title(E, A), venue(E, D).;true;true
9;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
9;true,false,true;haswordtitle(B, G).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordauthor(D, C) )
%   then if ( haswordtitle(B, C) )
%   | then return 0.7369368138873914;  // std dev = 0.326, 66.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=58 */
%   | else if ( author(E, D), title(E, B) )
%   | | then return 0.23314893509951226;  // std dev = 0.484, 8.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=3 */
%   | | else return -0.030739953789376603;  // std dev = 0.314, 54.000 (wgt'ed) examples reached here.  /* #neg=48 #pos=6 */
%   else if ( haswordtitle(B, F), haswordauthor(G, F) )
%   | then return 0.01886322081379807;  // std dev = 0.367, 56.000 (wgt'ed) examples reached here.  /* #neg=47 #pos=9 */
%   | else return 0.2600180939780157;  // std dev = 0.490, 214.000 (wgt'ed) examples reached here.  /* #neg=128 #pos=86 */
WILL Produced-Tree #2
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordauthor(D, C) )
%   then if ( haswordtitle(B, C) )
%   | then return 0.6220633676283396;  // std dev = 0.326, 66.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=58 */
%   | else return 0.0025575155492885355;  // std dev = 0.350, 62.000 (wgt'ed) examples reached here.  /* #neg=53 #pos=9 */
%   else if ( haswordtitle(B, E), haswordauthor(F, E) )
%   | then if ( author(G, F), title(G, A) )
%   | | then return 0.4558371783570768;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | else return -0.026515762819393735;  // std dev = 0.322, 51.000 (wgt'ed) examples reached here.  /* #neg=45 #pos=6 */
%   | else return 0.22533125375206722;  // std dev = 0.490, 214.000 (wgt'ed) examples reached here.  /* #neg=128 #pos=86 */
WILL Produced-Tree #3
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordauthor(D, C) )
%   then if ( haswordtitle(B, C) )
%   | then return 0.48728512046144257;  // std dev = 0.326, 66.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=58 */
%   | else if ( author(E, D), title(E, B) )
%   | | then return 0.20196858633872047;  // std dev = 0.484, 8.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=3 */
%   | | else return -0.027343827785405832;  // std dev = 0.314, 54.000 (wgt'ed) examples reached here.  /* #neg=48 #pos=6 */
%   else return 0.15354598781833537;  // std dev = 0.472, 270.000 (wgt'ed) examples reached here.  /* #neg=175 #pos=95 */
WILL Produced-Tree #4
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordauthor(D, C) )
%   then if ( haswordtitle(B, C) )
%   | then return 0.3672186186501392;  // std dev = 0.326, 66.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=58 */
%   | else if ( author(E, D), title(E, B) )
%   | | then return 0.17113730529774163;  // std dev = 0.484, 8.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=3 */
%   | | else return -0.02411424364843527;  // std dev = 0.314, 54.000 (wgt'ed) examples reached here.  /* #neg=48 #pos=6 */
%   else if ( haswordtitle(B, F), haswordauthor(G, F) )
%   | then return -0.006624659830658248;  // std dev = 0.360, 56.000 (wgt'ed) examples reached here.  /* #neg=47 #pos=9 */
%   | else return 0.1634025390604775;  // std dev = 0.490, 214.000 (wgt'ed) examples reached here.  /* #neg=128 #pos=86 */
WILL Produced-Tree #5
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordvenue(D, C) )
%   then if ( title(E, A), venue(E, D) )
%   | then if ( samebib(E, F), title(F, B) )
%   | | then if ( venue(F, D) )
%   | | | then return 0.6380736601368769;  // std dev = 1.648, 107.000 (wgt'ed) examples reached here.  /* #pos=107 */
%   | | | else return 0.6174672148957533;  // std dev = 0.972, 27.000 (wgt'ed) examples reached here.  /* #pos=27 */
%   | | else return -0.20356559454215759;  // std dev = 0.190, 235.000 (wgt'ed) examples reached here.  /* #neg=227 #pos=8 */
%   | else if ( haswordtitle(A, G), haswordauthor(H, G) )
%   | | then if ( haswordtitle(B, G) )
%   | | | then return 0.39807224506280847;  // std dev = 2.11e-08, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.034236495868208136;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | | else return 0.7306065492575841;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( haswordtitle(B, I), haswordauthor(J, I) )
%   | then return 0.21216020851497705;  // std dev = 0.644, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | else return 0.29908818922956276;  // std dev = 0.863, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
WILL Produced-Tree #6
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordvenue(D, C) )
%   then if ( title(E, A), venue(E, D) )
%   | then if ( samebib(E, F), title(F, B) )
%   | | then if ( venue(F, D) )
%   | | | then return 0.4995988465260495;  // std dev = 1.673, 107.000 (wgt'ed) examples reached here.  /* #pos=107 */
%   | | | else return 0.48897481002264215;  // std dev = 1.020, 27.000 (wgt'ed) examples reached here.  /* #pos=27 */
%   | | else return -0.1703261518259266;  // std dev = 0.188, 235.000 (wgt'ed) examples reached here.  /* #neg=227 #pos=8 */
%   | else if ( haswordtitle(A, G), haswordauthor(H, G) )
%   | | then if ( haswordtitle(B, G) )
%   | | | then return 0.30755472608314727;  // std dev = 1.05e-08, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.03025324461143468;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | | else return 0.5663797346691128;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( haswordtitle(B, I), haswordauthor(J, I) )
%   | then return 0.16892235915768058;  // std dev = 0.622, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | else return 0.2485815590819767;  // std dev = 0.839, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
WILL Produced-Tree #7
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordvenue(D, C) )
%   then if ( title(E, A), venue(E, D) )
%   | then if ( samebib(E, F), title(F, B) )
%   | | then if ( venue(F, D) )
%   | | | then return 0.38880969137624366;  // std dev = 1.512, 107.000 (wgt'ed) examples reached here.  /* #pos=107 */
%   | | | else return 0.3870088537893748;  // std dev = 0.957, 27.000 (wgt'ed) examples reached here.  /* #pos=27 */
%   | | else return -0.14522073393841353;  // std dev = 0.186, 235.000 (wgt'ed) examples reached here.  /* #neg=227 #pos=8 */
%   | else if ( haswordtitle(A, G), haswordauthor(H, G) )
%   | | then if ( haswordtitle(B, G) )
%   | | | then return 0.24617252978697307;  // std dev = 1.83e-08, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.02664990645456826;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | | else return 0.42573248590242185;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( haswordtitle(B, I), haswordauthor(J, I) )
%   | then return 0.13491979466283757;  // std dev = 0.611, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | else return 0.20090668341969423;  // std dev = 0.819, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
WILL Produced-Tree #8
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordvenue(D, C) )
%   then if ( title(E, A), venue(E, D) )
%   | then if ( samebib(E, F), title(F, B) )
%   | | then if ( venue(F, D) )
%   | | | then return 0.3081193142803454;  // std dev = 1.313, 107.000 (wgt'ed) examples reached here.  /* #pos=107 */
%   | | | else return 0.3111999360301106;  // std dev = 0.857, 27.000 (wgt'ed) examples reached here.  /* #pos=27 */
%   | | else return -0.1257365068220437;  // std dev = 0.184, 235.000 (wgt'ed) examples reached here.  /* #neg=227 #pos=8 */
%   | else if ( haswordtitle(A, G), haswordauthor(H, G) )
%   | | then if ( haswordtitle(B, G) )
%   | | | then return 0.20337970921485166;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.023410046216382027;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | | else return 0.32628924167842965;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( haswordtitle(A, I), haswordauthor(J, I) )
%   | then return 0.10736166563197462;  // std dev = 0.609, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | else return 0.1602540480974588;  // std dev = 0.803, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
WILL Produced-Tree #9
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordvenue(D, C) )
%   then if ( title(E, A), venue(E, D) )
%   | then if ( samebib(E, F), title(F, B) )
%   | | then if ( venue(F, D) )
%   | | | then return 0.2505710396344908;  // std dev = 1.133, 107.000 (wgt'ed) examples reached here.  /* #pos=107 */
%   | | | else return 0.2556713871083964;  // std dev = 0.757, 27.000 (wgt'ed) examples reached here.  /* #pos=27 */
%   | | else return -0.11025413346974794;  // std dev = 0.183, 235.000 (wgt'ed) examples reached here.  /* #neg=227 #pos=8 */
%   | else if ( haswordtitle(A, G), haswordauthor(H, G) )
%   | | then if ( haswordtitle(B, G) )
%   | | | then return 0.1724042028944549;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.020512769893998233;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | | else return 0.25897441369744856;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( haswordtitle(B, I), haswordauthor(J, I) )
%   | then return 0.08383492228377602;  // std dev = 0.616, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | else return 0.12894822817397156;  // std dev = 0.787, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
WILL Produced-Tree #10
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordauthor(D, C) )
%   then if ( author(E, D), title(E, B) )
%   | then if ( author(F, D), title(F, A) )
%   | | then return 0.033389172434645925;  // std dev = 0.201, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return 0.3036130539545489;  // std dev = 0.495, 7.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=3 */
%   | else if ( haswordtitle(B, C) )
%   | | then return 0.05050066754806741;  // std dev = 0.200, 64.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=56 */
%   | | else return -0.017791052364570334;  // std dev = 0.201, 54.000 (wgt'ed) examples reached here.  /* #neg=48 #pos=6 */
%   else if ( haswordtitle(B, G), haswordauthor(H, G) )
%   | then return 0.011715736784588121;  // std dev = 0.258, 56.000 (wgt'ed) examples reached here.  /* #neg=47 #pos=9 */
%   | else return 0.014693347247804661;  // std dev = 0.199, 214.000 (wgt'ed) examples reached here.  /* #neg=128 #pos=86 */


Results
   AUC ROC   = 0.955442
   AUC PR    = 0.953186
   CLL	      = -0.256989
   Precision = 0.949275 at threshold = 0.5
   Recall    = 0.977612
   F1        = 0.963235


Total learning time: 430.4515550136566 seconds
Total inference time: 133.148 seconds
AUC ROC: 0.955442


Results scoring model
   AUC ROC   = 0.983012
   AUC PR    = 0.986232
   CLL	      = -0.219386
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.944444
   F1        = 0.971429


Total scoring time: 4.127 seconds
Refined model CLL: -0.219386


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.960658
   AUC PR    = 0.95581
   CLL	      = -0.235895
   Precision = 0.949275 at threshold = 0.5
   Recall    = 0.977612
   F1        = 0.963235


Total learning time: 917.4018431892395 seconds
Total inference time: 156.878 seconds
AUC ROC: 0.960658
Total revision time: 917.4018431892395
Best scored revision CLL: -0.196872


Dataset: 6_imdb_cora, Fold: 1, Type: Transfer (trRDN-B), Time: 00:20:11
{'AUC ROC': 0.960658, 'AUC PR': 0.95581, 'CLL': -0.235895, 'Precision': [0.949275, 0.5], 'Recall': 0.977612, 'F1': 0.963235, 'Learning time': 917.4018431892395, 'Inference time': 156.878, 'parameter': {'AUC ROC': 0.960658, 'AUC PR': 0.95581, 'CLL': -0.235895, 'Precision': [0.949275, 0.5], 'Recall': 0.977612, 'F1': 0.963235, 'Learning time': 477.8762881755829, 'Inference time': 156.878}}


WILL Produced-Tree #1
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordvenue(D, C) )
%   then if ( haswordtitle(A, E), haswordauthor(F, E) )
%   | then if ( haswordtitle(B, E) )
%   | | then return 0.7291166770349965;  // std dev = 0.335, 62.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=54 */
%   | | else if ( author(G, F), title(G, B) )
%   | | | then return 0.23314893509951226;  // std dev = 1.369, 8.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=3 */
%   | | | else return -0.026466449515872327;  // std dev = 2.304, 52.000 (wgt'ed) examples reached here.  /* #neg=46 #pos=6 */
%   | else if ( title(H, B), venue(H, D) )
%   | | then if ( samebib(H, I), title(I, A) )
%   | | | then return 0.8581489350995121;  // std dev = 0.000, 85.000 (wgt'ed) examples reached here.  /* #pos=85 */
%   | | | else return -0.12430720525136522;  // std dev = 1.717, 171.000 (wgt'ed) examples reached here.  /* #neg=168 #pos=3 */
%   | | else if ( title(J, A), venue(J, D) )
%   | | | then return 0.1438632208137979;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=2 */
%   | | | else return 0.8581489350995121;  // std dev = 2.11e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( haswordtitle(A, K), haswordauthor(L, K) )
%   | then return 0.5248156017661789;  // std dev = 1.155, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | else return 0.3581489350995122;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
WILL Produced-Tree #2
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordauthor(D, C) )
%   then if ( haswordtitle(B, C) )
%   | then return 0.6257869283720768;  // std dev = 0.327, 66.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=58 */
%   | else if ( author(E, D), title(E, B) )
%   | | then return 0.202334239218108;  // std dev = 0.484, 8.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=3 */
%   | | else return -0.03050091727402732;  // std dev = 0.316, 54.000 (wgt'ed) examples reached here.  /* #neg=48 #pos=6 */
%   else if ( haswordtitle(B, F), haswordauthor(G, F) )
%   | then return 0.013852403152097134;  // std dev = 0.339, 56.000 (wgt'ed) examples reached here.  /* #neg=47 #pos=9 */
%   | else return 0.2143392282132963;  // std dev = 0.417, 214.000 (wgt'ed) examples reached here.  /* #neg=128 #pos=86 */
WILL Produced-Tree #3
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordauthor(D, C) )
%   then if ( haswordtitle(B, C) )
%   | then return 0.49113345116223694;  // std dev = 0.328, 66.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=58 */
%   | else if ( author(E, D), title(E, B) )
%   | | then return 0.17149281961528945;  // std dev = 0.484, 8.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=3 */
%   | | else return -0.026840359596085016;  // std dev = 0.316, 54.000 (wgt'ed) examples reached here.  /* #neg=48 #pos=6 */
%   else if ( haswordtitle(B, F), haswordauthor(G, F) )
%   | then return 0.012136022255811283;  // std dev = 0.338, 56.000 (wgt'ed) examples reached here.  /* #neg=47 #pos=9 */
%   | else return 0.18090425344311417;  // std dev = 0.408, 214.000 (wgt'ed) examples reached here.  /* #neg=128 #pos=86 */
WILL Produced-Tree #4
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordauthor(D, C) )
%   then if ( haswordtitle(B, C) )
%   | then return 0.3703710019257535;  // std dev = 0.328, 66.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=58 */
%   | else if ( author(E, D), title(E, B) )
%   | | then return 0.14228146899184052;  // std dev = 0.484, 8.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=3 */
%   | | else return -0.023685076703919648;  // std dev = 0.316, 54.000 (wgt'ed) examples reached here.  /* #neg=48 #pos=6 */
%   else if ( haswordtitle(B, F), haswordauthor(G, F) )
%   | then if ( author(H, G), title(H, A) )
%   | | then return 0.4697011263452211;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | else return -0.03438917163508303;  // std dev = 0.282, 51.000 (wgt'ed) examples reached here.  /* #neg=45 #pos=6 */
%   | else return 0.14965697181958504;  // std dev = 0.400, 214.000 (wgt'ed) examples reached here.  /* #neg=128 #pos=86 */
WILL Produced-Tree #5
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordvenue(D, C) )
%   then if ( title(E, A), venue(E, D) )
%   | then return 0.09802395825581939;  // std dev = 0.379, 369.000 (wgt'ed) examples reached here.  /* #neg=227 #pos=142 */
%   | else if ( haswordtitle(A, F), haswordauthor(G, F) )
%   | | then if ( haswordtitle(B, F) )
%   | | | then return 0.39737658887192917;  // std dev = 1.49e-08, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.03740388189411462;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | | else return 0.5979547917599222;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( haswordtitle(A, H), haswordauthor(I, H) )
%   | then return 0.2298284965769144;  // std dev = 0.753, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | else return 0.26017981719770067;  // std dev = 0.900, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
WILL Produced-Tree #6
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordauthor(D, C) )
%   then if ( haswordtitle(B, C) )
%   | then return 0.24483489342272197;  // std dev = 0.324, 66.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=58 */
%   | else if ( author(E, D), title(E, B) )
%   | | then return 0.09666157739667229;  // std dev = 0.484, 8.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=3 */
%   | | else return -0.03265101181700957;  // std dev = 0.316, 54.000 (wgt'ed) examples reached here.  /* #neg=48 #pos=6 */
%   else if ( haswordtitle(B, F), haswordauthor(G, F) )
%   | then if ( author(H, G), title(H, A) )
%   | | then return 0.3909388219842659;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | else return -0.04371551010030708;  // std dev = 0.281, 51.000 (wgt'ed) examples reached here.  /* #neg=45 #pos=6 */
%   | else return 0.09993122174773232;  // std dev = 0.388, 214.000 (wgt'ed) examples reached here.  /* #neg=128 #pos=86 */
WILL Produced-Tree #7
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordvenue(D, C) )
%   then if ( title(E, B), venue(E, D) )
%   | then if ( samebib(E, F), title(F, A) )
%   | | then if ( venue(F, D) )
%   | | | then return 0.49386080175165803;  // std dev = 1.321, 107.000 (wgt'ed) examples reached here.  /* #pos=107 */
%   | | | else return 0.4750456076884304;  // std dev = 1.028, 29.000 (wgt'ed) examples reached here.  /* #pos=29 */
%   | | else return -0.1870254677796822;  // std dev = 0.183, 235.000 (wgt'ed) examples reached here.  /* #neg=227 #pos=8 */
%   | else if ( title(G, A), venue(G, D) )
%   | | then if ( samebib(G, H), title(H, B) )
%   | | | then return 0.5007061305596283;  // std dev = 0.505, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return -0.16655681164024053;  // std dev = 5.27e-09, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( haswordtitle(B, I), haswordauthor(J, I) )
%   | | | then return 0.25757335061558406;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.4253288323128144;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( haswordtitle(A, K), haswordauthor(L, K) )
%   | then return 0.1435536063381375;  // std dev = 0.662, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | else return 0.202778852226147;  // std dev = 0.857, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
WILL Produced-Tree #8
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordvenue(D, C) )
%   then if ( title(E, B), venue(E, D) )
%   | then if ( samebib(E, F), title(F, A) )
%   | | then if ( venue(F, D) )
%   | | | then return 0.38073178092168336;  // std dev = 1.267, 107.000 (wgt'ed) examples reached here.  /* #pos=107 */
%   | | | else return 0.3768232128913175;  // std dev = 1.028, 29.000 (wgt'ed) examples reached here.  /* #pos=29 */
%   | | else if ( title(G, A), venue(G, D) )
%   | | | then return -0.16352104818478608;  // std dev = 0.264, 36.000 (wgt'ed) examples reached here.  /* #neg=36 */
%   | | | else return -0.1576384245914862;  // std dev = 2.780, 199.000 (wgt'ed) examples reached here.  /* #neg=191 #pos=8 */
%   | else if ( title(H, A), venue(H, D) )
%   | | then if ( samebib(H, I), title(I, B) )
%   | | | then return 0.4033361841687607;  // std dev = 0.511, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return -0.1447004655992635;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.26055067550735883;  // std dev = 0.057, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   else if ( haswordtitle(A, J), haswordauthor(K, J) )
%   | then return 0.11374809965368189;  // std dev = 0.658, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | else return 0.15992924032194955;  // std dev = 0.846, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
WILL Produced-Tree #9
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordvenue(D, C) )
%   then if ( title(E, B), venue(E, D) )
%   | then if ( samebib(E, F), title(F, A) )
%   | | then if ( venue(F, D) )
%   | | | then return 0.3007985906819327;  // std dev = 1.167, 107.000 (wgt'ed) examples reached here.  /* #pos=107 */
%   | | | else return 0.30554238654747423;  // std dev = 0.981, 29.000 (wgt'ed) examples reached here.  /* #pos=29 */
%   | | else if ( title(G, A), venue(G, D) )
%   | | | then return -0.1426324191657278;  // std dev = 0.235, 36.000 (wgt'ed) examples reached here.  /* #neg=36 */
%   | | | else return -0.13558544543631185;  // std dev = 2.765, 199.000 (wgt'ed) examples reached here.  /* #neg=191 #pos=8 */
%   | else if ( title(H, A), venue(H, D) )
%   | | then if ( samebib(H, I), title(I, B) )
%   | | | then return 0.3299645073700428;  // std dev = 0.482, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return -0.12769591015039541;  // std dev = 3.73e-09, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.21423623169198727;  // std dev = 0.050, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   else if ( haswordtitle(B, J), haswordauthor(K, J) )
%   | then return 0.08837577440940973;  // std dev = 0.664, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | else return 0.12736420597763815;  // std dev = 0.832, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
WILL Produced-Tree #10
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordvenue(D, C) )
%   then if ( title(E, A), venue(E, D) )
%   | then return 0.014494622695283566;  // std dev = 0.240, 369.000 (wgt'ed) examples reached here.  /* #neg=227 #pos=142 */
%   | else if ( haswordtitle(A, F), haswordauthor(G, F) )
%   | | then if ( haswordtitle(B, F) )
%   | | | then return 0.11815680131788531;  // std dev = 0.067, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.04262743260907776;  // std dev = 0.696, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | | else return 0.22064629210012285;  // std dev = 0.037, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( haswordtitle(A, H), haswordauthor(I, H) )
%   | then return 0.06989483539738577;  // std dev = 0.668, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | else return 0.09897610242360379;  // std dev = 0.825, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */


Results
   AUC ROC   = 0.976885
   AUC PR    = 0.984357
   CLL	      = -0.276839
   Precision = 0.900524 at threshold = 0.5
   Recall    = 0.962687
   F1        = 0.930568


Total learning time: 365.1042699813843 seconds
Total inference time: 128.39 seconds
AUC ROC: 0.976885


Dataset: 6_imdb_cora, Fold: 1, Type: Scratch (RDN-B), Time: 00:28:25
{'AUC ROC': 0.976885, 'AUC PR': 0.984357, 'CLL': -0.276839, 'Precision': [0.900524, 0.5], 'Recall': 0.962687, 'F1': 0.930568, 'Learning time': 365.1042699813843, 'Inference time': 128.39}


Starting fold 2

Target train facts examples: 9016
Target train pos examples: 140
Target train neg examples: 52

Target test facts examples: 33542
Target test pos  examples: 558
Target test neg examples: 664

******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


WILL Produced-Tree #1
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordauthor(D, C) )
%   then if ( haswordtitle(B, C) )
%   | then if ( author(E, D), title(E, A) )
%   | | then return 0.8581489350995123;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return 0.7936328060672545;  // std dev = 0.246, 62.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=58 */
%   | else return -0.1418510649004878;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   else return 0.5618526388032163;  // std dev = 0.457, 108.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=76 */
WILL Produced-Tree #2
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordauthor(D, C) )
%   then if ( haswordtitle(B, C) )
%   | then if ( author(E, D), title(E, B) )
%   | | then return 0.7237518087032814;  // std dev = 0.015, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return 0.6673784342854517;  // std dev = 0.246, 62.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=58 */
%   | else return -0.12544463852839138;  // std dev = 7.45e-09, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   else return 0.478945074750187;  // std dev = 0.457, 108.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=76 */
WILL Produced-Tree #3
% FOR sametitle(A, B):
%   if ( haswordtitle(B, C), haswordauthor(D, C) )
%   then if ( haswordtitle(A, C) )
%   | then if ( author(E, D), title(E, A) )
%   | | then return 0.5589366687406878;  // std dev = 0.016, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return 0.5189849385027072;  // std dev = 0.246, 62.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=58 */
%   | else return -0.31881948350713596;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   else return 0.4154772728356105;  // std dev = 0.413, 108.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=76 */
WILL Produced-Tree #4
% FOR sametitle(A, B):
%   if ( haswordtitle(B, C), haswordauthor(D, C) )
%   then if ( haswordtitle(A, C) )
%   | then return 0.3928063151083124;  // std dev = 0.235, 68.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=64 */
%   | else return -0.25388056084682503;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   else return 0.3264345813695307;  // std dev = 0.405, 108.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=76 */
WILL Produced-Tree #5
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordauthor(D, C) )
%   then if ( haswordtitle(B, C) )
%   | then if ( author(E, D), title(E, B) )
%   | | then return 0.3321629077543768;  // std dev = 0.027, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return 0.29530913797948355;  // std dev = 0.246, 62.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=58 */
%   | else return -0.20992395583084467;  // std dev = 2.36e-08, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   else return 0.25051992676397883;  // std dev = 0.399, 108.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=76 */
WILL Produced-Tree #6
% FOR sametitle(A, B):
%   if ( haswordtitle(B, C), haswordauthor(D, C) )
%   then if ( haswordtitle(A, C) )
%   | then if ( author(E, D), title(E, B) )
%   | | then return 0.26300431907731914;  // std dev = 0.024, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return 0.23044477977069647;  // std dev = 0.246, 62.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=58 */
%   | else return -0.25324449868742416;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   else if ( haswordtitle(A, F), haswordauthor(G, F) )
%   | then return -0.1772184174330067;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | else return 0.2680424603461736;  // std dev = 0.379, 92.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=76 */
WILL Produced-Tree #7
% FOR sametitle(A, B):
%   if ( haswordtitle(B, C), haswordauthor(D, C) )
%   then if ( haswordtitle(A, C) )
%   | then if ( author(E, D), title(E, A) )
%   | | then return 0.216549961022781;  // std dev = 0.025, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return 0.18475765683803855;  // std dev = 0.246, 62.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=58 */
%   | else return -0.20839505114571424;  // std dev = 2.11e-08, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   else if ( haswordtitle(A, F), haswordauthor(G, F) )
%   | then return -0.1528363401241215;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | else return 0.20332875779670792;  // std dev = 0.379, 92.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=76 */
WILL Produced-Tree #8
% FOR sametitle(A, B):
%   if ( haswordtitle(B, C), haswordauthor(D, C) )
%   then if ( haswordtitle(A, C) )
%   | then return 0.15447698817879693;  // std dev = 0.235, 68.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=64 */
%   | else return -0.17609640094908988;  // std dev = 1.97e-08, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   else return 0.11377487645397694;  // std dev = 0.365, 108.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=76 */
WILL Produced-Tree #9
% FOR sametitle(A, B):
%   if ( haswordtitle(B, C), haswordauthor(D, C) )
%   then if ( haswordtitle(A, C) )
%   | then if ( author(E, D), title(E, B) )
%   | | then return 0.16070224594211222;  // std dev = 0.022, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return 0.12671835806629334;  // std dev = 0.246, 62.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=58 */
%   | else return -0.15198475998041266;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   else return 0.0907077500973892;  // std dev = 0.364, 108.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=76 */
WILL Produced-Tree #10
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordauthor(D, C) )
%   then if ( haswordtitle(B, C) )
%   | then if ( author(E, D), title(E, A) )
%   | | then return 0.14121499718090447;  // std dev = 0.023, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return 0.10778504887399784;  // std dev = 0.246, 62.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=58 */
%   | else return -0.15964391135867345;  // std dev = 1.67e-08, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   else return 0.0767279568572171;  // std dev = 0.361, 108.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=76 */


Results
   AUC ROC   = 0.710066
   AUC PR    = 0.662695
   CLL	      = -0.688398
   Precision = 0.548596 at threshold = 0.5
   Recall    = 0.910394
   F1        = 0.684636


Total learning time: 27.82032084465027 seconds
Total inference time: 3.233 seconds
AUC ROC: 0.710066


Results scoring model
   AUC ROC   = 0.859341
   AUC PR    = 0.926052
   CLL	      = -0.353761
   Precision = 0.875 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.933333


Total scoring time: 1.698 seconds
Parameter learned model CLL: -0.353761


Structure after Parameter Learning
[['sametitle(A, B)', {'': 'haswordtitle(A, C), haswordauthor(D, C)', 'true': 'haswordtitle(B, C)', 'true,true': 'author(E, D), title(E, A)'}, {'true,true,true': [0.0, 0, 6], 'true,true,false': [0.246, 4, 58], 'true,false': [0.0, 16, 0], 'false': [0.457, 32, 76]}], ['sametitle(A, B)', {'': 'haswordtitle(A, C), haswordauthor(D, C)', 'true': 'haswordtitle(B, C)', 'true,true': 'author(E, D), title(E, B)'}, {'true,true,true': [0.015, 0, 6], 'true,true,false': [0.246, 4, 58], 'true,false': [7.45e-09, 16, 0], 'false': [0.457, 32, 76]}], ['sametitle(A, B)', {'': 'haswordtitle(B, C), haswordauthor(D, C)', 'true': 'haswordtitle(A, C)', 'true,true': 'author(E, D), title(E, A)'}, {'true,true,true': [0.016, 0, 6], 'true,true,false': [0.246, 4, 58], 'true,false': [0.0, 16, 0], 'false': [0.413, 32, 76]}], ['sametitle(A, B)', {'': 'haswordtitle(B, C), haswordauthor(D, C)', 'true': 'haswordtitle(A, C)'}, {'true,true': [0.235, 4, 64], 'true,false': [0.0, 16, 0], 'false': [0.405, 32, 76]}], ['sametitle(A, B)', {'': 'haswordtitle(A, C), haswordauthor(D, C)', 'true': 'haswordtitle(B, C)', 'true,true': 'author(E, D), title(E, B)'}, {'true,true,true': [0.027, 0, 6], 'true,true,false': [0.246, 4, 58], 'true,false': [2.36e-08, 16, 0], 'false': [0.399, 32, 76]}], ['sametitle(A, B)', {'': 'haswordtitle(B, C), haswordauthor(D, C)', 'true': 'haswordtitle(A, C)', 'true,true': 'author(E, D), title(E, B)', 'false': 'haswordtitle(A, F), haswordauthor(G, F)'}, {'true,true,true': [0.024, 0, 6], 'true,true,false': [0.246, 4, 58], 'true,false': [0.0, 16, 0], 'false,true': [0.0, 16, 0], 'false,false': [0.379, 16, 76]}], ['sametitle(A, B)', {'': 'haswordtitle(B, C), haswordauthor(D, C)', 'true': 'haswordtitle(A, C)', 'true,true': 'author(E, D), title(E, A)', 'false': 'haswordtitle(A, F), haswordauthor(G, F)'}, {'true,true,true': [0.025, 0, 6], 'true,true,false': [0.246, 4, 58], 'true,false': [2.11e-08, 16, 0], 'false,true': [0.0, 16, 0], 'false,false': [0.379, 16, 76]}], ['sametitle(A, B)', {'': 'haswordtitle(B, C), haswordauthor(D, C)', 'true': 'haswordtitle(A, C)'}, {'true,true': [0.235, 4, 64], 'true,false': [1.97e-08, 16, 0], 'false': [0.365, 32, 76]}], ['sametitle(A, B)', {'': 'haswordtitle(B, C), haswordauthor(D, C)', 'true': 'haswordtitle(A, C)', 'true,true': 'author(E, D), title(E, B)'}, {'true,true,true': [0.022, 0, 6], 'true,true,false': [0.246, 4, 58], 'true,false': [0.0, 16, 0], 'false': [0.364, 32, 76]}], ['sametitle(A, B)', {'': 'haswordtitle(A, C), haswordauthor(D, C)', 'true': 'haswordtitle(B, C)', 'true,true': 'author(E, D), title(E, A)'}, {'true,true,true': [0.023, 0, 6], 'true,true,false': [0.246, 4, 58], 'true,false': [1.67e-08, 16, 0], 'false': [0.361, 32, 76]}]]
[{'': [0.18140589569160917, 0.2085048010973933], 'true': [0.05536332179930703, -6.938893903907228e-18], 'true,true': [-1.4802973661668753e-16, 0.06035379812695064]}, {'': [0.14286289420974324, 0.20850480109739167], 'true': [0.05524333801085281, 3.469446951953614e-18], 'true,true': [3.660935309116967e-05, 0.06030551665427711]}, {'': [0.15376065062785674, 0.170829537699209], 'true': [0.05511382663137736, -5.551115123125783e-17], 'true,true': [4.2817603675637805e-05, 0.06030244316948719]}, {'': [0.1090552080182973, 0.16368051529046476], 'true': [0.05505736829090003, 0.0]}, {'': [0.08445219878874213, 0.15908169070931144], 'true': [0.05507437286165554, 3.469446951953614e-17], 'true,true': [0.00012066070042619319, 0.06027263283149396]}, {'': [0.081072111951579, 0.14740337206882148], 'false': [-6.938893903907228e-18, 0.14366729678638937], 'true': [0.055054045090666116, -2.7755575615628914e-17], 'true,true': [9.256040156925087e-05, 0.060279358130040955]}, {'': [0.06873703161801258, 0.13839220903460567], 'false': [-3.469446951953614e-18, 0.14366729678638904], 'true': [0.055047085581023586, 2.7755575615628914e-17], 'true,true': [0.00010350283254578763, 0.06027502261522173]}, {'': [0.06140896646119264, 0.1330670190241293], 'true': [0.05504313206896398, 2.42861286636753e-17]}, {'': [0.05681110106903365, 0.13228036510476293], 'true': [0.05506301977748391, -3.469446951953614e-18], 'true,true': [7.727256211648621e-05, 0.0602823177707457]}, {'': [0.05584240190236081, 0.1300632003974014], 'true': [0.05505710094266701, 1.734723475976807e-17], 'true,true': [8.64584002291946e-05, 0.060278232180859634]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;sametitle(A, B) :- haswordtitle(A, C), haswordauthor(D, C).;true;true
0;true;haswordtitle(B, C).;true;true
0;true,true;author(E, D), title(E, A).;true;true
1;;sametitle(A, B) :- haswordtitle(A, C), haswordauthor(D, C).;true;true
1;true;haswordtitle(B, C).;true;true
1;true,true;author(E, D), title(E, B).;true;true
2;;sametitle(A, B) :- haswordtitle(B, C), haswordauthor(D, C).;true;true
2;true;haswordtitle(A, C).;true;true
2;true,true;author(E, D), title(E, A).;true;true
3;;sametitle(A, B) :- haswordtitle(B, C), haswordauthor(D, C).;true;true
3;true;haswordtitle(A, C).;true;true
4;;sametitle(A, B) :- haswordtitle(A, C), haswordauthor(D, C).;true;true
4;true;haswordtitle(B, C).;true;true
4;true,true;author(E, D), title(E, B).;true;true
5;;sametitle(A, B) :- haswordtitle(B, C), haswordauthor(D, C).;true;true
5;true;haswordtitle(A, C).;true;true
5;true,true;author(E, D), title(E, B).;true;true
5;false;haswordtitle(A, F), haswordauthor(G, F).;true;true
6;;sametitle(A, B) :- haswordtitle(B, C), haswordauthor(D, C).;true;true
6;true;haswordtitle(A, C).;true;true
6;true,true;author(E, D), title(E, A).;true;true
6;false;haswordtitle(A, F), haswordauthor(G, F).;true;true
7;;sametitle(A, B) :- haswordtitle(B, C), haswordauthor(D, C).;true;true
7;true;haswordtitle(A, C).;true;true
8;;sametitle(A, B) :- haswordtitle(B, C), haswordauthor(D, C).;true;true
8;true;haswordtitle(A, C).;true;true
8;true,true;author(E, D), title(E, B).;true;true
9;;sametitle(A, B) :- haswordtitle(A, C), haswordauthor(D, C).;true;true
9;true;haswordtitle(B, C).;true;true
9;true,true;author(E, D), title(E, A).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordauthor(D, C) )
%   then if ( haswordtitle(B, C) )
%   | then if ( author(E, D), title(E, A) )
%   | | then return 0.8581489350995123;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return 0.7936328060672545;  // std dev = 0.246, 62.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=58 */
%   | else return -0.1418510649004878;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   else if ( haswordtitle(B, F), haswordauthor(G, F) )
%   | then return -0.1418510649004878;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | else return 0.6842358916212514;  // std dev = 0.379, 92.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=76 */
WILL Produced-Tree #2
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordauthor(D, C) )
%   then if ( haswordtitle(B, C) )
%   | then if ( author(E, D), title(E, B) )
%   | | then return 0.7237518087032814;  // std dev = 0.015, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return 0.6673784342854517;  // std dev = 0.246, 62.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=58 */
%   | else return -0.12544463852839138;  // std dev = 7.45e-09, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   else if ( haswordtitle(B, F), haswordauthor(G, F) )
%   | then return -0.12544463852839138;  // std dev = 7.45e-09, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | else return 0.5792891135108365;  // std dev = 0.379, 92.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=76 */
WILL Produced-Tree #3
% FOR sametitle(A, B):
%   if ( haswordtitle(B, C), haswordauthor(D, C) )
%   then if ( haswordtitle(A, C) )
%   | then if ( author(E, D), title(E, B) )
%   | | then return 0.5596022372298854;  // std dev = 0.018, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return 0.5189205286489138;  // std dev = 0.246, 62.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=58 */
%   | else return -0.11231637819360635;  // std dev = 1.39e-08, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   else if ( haswordtitle(A, F), haswordauthor(G, F) )
%   | then return -0.11231637819360635;  // std dev = 1.39e-08, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | else return 0.4570789878895837;  // std dev = 0.379, 92.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=76 */
WILL Produced-Tree #4
% FOR sametitle(A, B):
%   if ( haswordtitle(B, C), haswordauthor(D, C) )
%   then if ( haswordtitle(A, C) )
%   | then if ( author(E, D), title(E, A) )
%   | | then return 0.4233597971885226;  // std dev = 0.027, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return 0.3898494672190816;  // std dev = 0.246, 62.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=58 */
%   | else return -0.10159632948783631;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   else return 0.27962600202991966;  // std dev = 0.384, 108.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=76 */
WILL Produced-Tree #5
% FOR sametitle(A, B):
%   if ( haswordtitle(B, C), haswordauthor(D, C) )
%   then if ( haswordtitle(A, C) )
%   | then if ( author(E, D), title(E, B) )
%   | | then return 0.32479615896124664;  // std dev = 0.025, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return 0.29605184057090483;  // std dev = 0.246, 62.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=58 */
%   | else return -0.09269127618926094;  // std dev = 9.13e-09, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   else return 0.21600253862151758;  // std dev = 0.378, 108.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=76 */
WILL Produced-Tree #6
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordauthor(D, C) )
%   then if ( haswordtitle(B, C) )
%   | then if ( author(E, D), title(E, A) )
%   | | then return 0.2598237112372312;  // std dev = 0.028, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return 0.23078233831773928;  // std dev = 0.245, 62.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=58 */
%   | else return -0.1565687026477107;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   else return 0.17777367803578675;  // std dev = 0.367, 108.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=76 */
WILL Produced-Tree #7
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordauthor(D, C) )
%   then if ( haswordtitle(B, C) )
%   | then if ( author(E, D), title(E, B) )
%   | | then return 0.21314056586265942;  // std dev = 0.025, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return 0.18511377217363273;  // std dev = 0.246, 62.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=58 */
%   | else return -0.13698599278704385;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   else if ( haswordtitle(B, F), haswordauthor(G, F) )
%   | then return -0.10009891458233099;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | else return 0.18180312870770257;  // std dev = 0.379, 92.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=76 */
WILL Produced-Tree #8
% FOR sametitle(A, B):
%   if ( haswordtitle(B, C), haswordauthor(D, C) )
%   then if ( haswordtitle(A, C) )
%   | then return 0.15449647607427405;  // std dev = 0.235, 68.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=64 */
%   | else return -0.09143609414953248;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   else return 0.10236372979473611;  // std dev = 0.362, 108.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=76 */
WILL Produced-Tree #9
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordauthor(D, C) )
%   then if ( haswordtitle(B, C) )
%   | then return 0.12973386586115854;  // std dev = 0.235, 68.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=64 */
%   | else return -0.13294412353514656;  // std dev = 1.05e-08, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   else return 0.08945651190629283;  // std dev = 0.357, 108.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=76 */
WILL Produced-Tree #10
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordauthor(D, C) )
%   then if ( haswordtitle(B, C) )
%   | then if ( author(E, D), title(E, A) )
%   | | then return 0.14262120846779938;  // std dev = 0.022, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return 0.10760301425433924;  // std dev = 0.246, 62.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=58 */
%   | else return -0.11835314971613724;  // std dev = 7.45e-09, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   else return 0.07289026569262766;  // std dev = 0.356, 108.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=76 */


Results
   AUC ROC   = 0.710066
   AUC PR    = 0.662695
   CLL	      = -0.701694
   Precision = 0.548596 at threshold = 0.5
   Recall    = 0.910394
   F1        = 0.684636


Total learning time: 27.736340045928955 seconds
Total inference time: 3.255 seconds
AUC ROC: 0.710066


Results scoring model
   AUC ROC   = 0.859341
   AUC PR    = 0.926052
   CLL	      = -0.343963
   Precision = 0.875 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.933333


Total scoring time: 1.749 seconds
Refined model CLL: -0.343963


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.710066
   AUC PR    = 0.662695
   CLL	      = -0.701694
   Precision = 0.548596 at threshold = 0.5
   Recall    = 0.910394
   F1        = 0.684636


Total learning time: 59.003660890579226 seconds
Total inference time: 3.255 seconds
AUC ROC: 0.710066
Total revision time: 59.003660890579226
Best scored revision CLL: -0.343963


Dataset: 6_imdb_cora, Fold: 2, Type: Transfer (trRDN-B), Time: 00:29:34
{'AUC ROC': 0.710066, 'AUC PR': 0.662695, 'CLL': -0.701694, 'Precision': [0.548596, 0.5], 'Recall': 0.910394, 'F1': 0.684636, 'Learning time': 59.003660890579226, 'Inference time': 3.255, 'parameter': {'AUC ROC': 0.710066, 'AUC PR': 0.662695, 'CLL': -0.688398, 'Precision': [0.548596, 0.5], 'Recall': 0.910394, 'F1': 0.684636, 'Learning time': 27.82032084465027, 'Inference time': 3.233}}


WILL Produced-Tree #1
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordauthor(D, C) )
%   then if ( haswordtitle(B, C) )
%   | then if ( author(E, D), title(E, A) )
%   | | then return 0.8581489350995123;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return 0.7936328060672545;  // std dev = 0.246, 62.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=58 */
%   | else return -0.1418510649004878;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   else if ( haswordtitle(B, F), haswordauthor(G, F) )
%   | then return -0.1418510649004878;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | else return 0.6842358916212514;  // std dev = 0.379, 92.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=76 */
WILL Produced-Tree #2
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordauthor(D, C) )
%   then if ( haswordtitle(B, C) )
%   | then return 0.672352555557613;  // std dev = 0.235, 68.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=64 */
%   | else return -0.12544463852839138;  // std dev = 7.45e-09, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   else return 0.4748841132087285;  // std dev = 0.430, 108.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=76 */
WILL Produced-Tree #3
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordauthor(D, C) )
%   then if ( haswordtitle(B, C) )
%   | then return 0.5225212231240813;  // std dev = 0.235, 68.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=64 */
%   | else return -0.11231637819360635;  // std dev = 1.39e-08, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   else return 0.38201066609447526;  // std dev = 0.423, 108.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=76 */
WILL Produced-Tree #4
% FOR sametitle(A, B):
%   if ( haswordtitle(B, C), haswordauthor(D, C) )
%   then if ( haswordtitle(A, C) )
%   | then if ( author(E, D), title(E, B) )
%   | | then return 0.4423905685394316;  // std dev = 0.018, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return 0.38798232320289583;  // std dev = 0.246, 62.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=58 */
%   | else return -0.25256923200871423;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   else if ( haswordtitle(A, F), haswordauthor(G, F) )
%   | then return -0.10159632948783631;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | else return 0.39044528408274887;  // std dev = 0.379, 92.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=76 */
WILL Produced-Tree #5
% FOR sametitle(A, B):
%   if ( haswordtitle(B, C), haswordauthor(D, C) )
%   then if ( haswordtitle(A, C) )
%   | then return 0.29853568462544877;  // std dev = 0.235, 68.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=64 */
%   | else return -0.20791728080793528;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   else if ( haswordtitle(A, E), haswordauthor(F, E) )
%   | then return -0.09269127618926094;  // std dev = 9.13e-09, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | else return 0.2932403414540885;  // std dev = 0.379, 92.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=76 */
WILL Produced-Tree #6
% FOR sametitle(A, B):
%   if ( haswordtitle(B, C), haswordauthor(D, C) )
%   then if ( haswordtitle(A, C) )
%   | then if ( author(E, D), title(E, B) )
%   | | then return 0.27443512368368617;  // std dev = 0.015, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return 0.22926738994699608;  // std dev = 0.246, 62.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=58 */
%   | else return -0.17574544455095786;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   else if ( haswordtitle(A, F), haswordauthor(G, F) )
%   | then return -0.08518475138839685;  // std dev = 1.05e-08, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | else return 0.22145178556649467;  // std dev = 0.379, 92.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=76 */
WILL Produced-Tree #7
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordauthor(D, C) )
%   then if ( haswordtitle(B, C) )
%   | then if ( author(E, D), title(E, A) )
%   | | then return 0.22537949349950667;  // std dev = 0.020, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return 0.18383499838442327;  // std dev = 0.246, 62.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=58 */
%   | else return -0.07877675473109173;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   else return 0.12226816676496186;  // std dev = 0.368, 108.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=76 */
WILL Produced-Tree #8
% FOR sametitle(A, B):
%   if ( haswordtitle(B, C), haswordauthor(D, C) )
%   then if ( haswordtitle(A, C) )
%   | then if ( author(E, D), title(E, B) )
%   | | then return 0.18882991040725725;  // std dev = 0.019, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return 0.15109162241213273;  // std dev = 0.246, 62.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=58 */
%   | else return -0.16813260323426546;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   else return 0.1108636736492673;  // std dev = 0.358, 108.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=76 */
WILL Produced-Tree #9
% FOR sametitle(A, B):
%   if ( haswordtitle(B, C), haswordauthor(D, C) )
%   then if ( haswordtitle(A, C) )
%   | then if ( author(E, D), title(E, A) )
%   | | then return 0.16309128203894196;  // std dev = 0.022, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return 0.12649285539022595;  // std dev = 0.246, 62.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=58 */
%   | else return -0.14590924006006306;  // std dev = 1.29e-08, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   else return 0.08968152627832834;  // std dev = 0.357, 108.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=76 */
WILL Produced-Tree #10
% FOR sametitle(A, B):
%   if ( haswordtitle(B, C), haswordauthor(D, C) )
%   then if ( haswordtitle(A, C) )
%   | then if ( author(E, D), title(E, B) )
%   | | then return 0.142277067130449;  // std dev = 0.020, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return 0.10768495786756054;  // std dev = 0.246, 62.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=58 */
%   | else return -0.12864846143369887;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   else return 0.07311653254666198;  // std dev = 0.356, 108.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=76 */


Results
   AUC ROC   = 0.710066
   AUC PR    = 0.662695
   CLL	      = -0.701509
   Precision = 0.548596 at threshold = 0.5
   Recall    = 0.910394
   F1        = 0.684636


Total learning time: 25.812599182128906 seconds
Total inference time: 3.138 seconds
AUC ROC: 0.710066


Dataset: 6_imdb_cora, Fold: 2, Type: Scratch (RDN-B), Time: 00:30:04
{'AUC ROC': 0.710066, 'AUC PR': 0.662695, 'CLL': -0.701509, 'Precision': [0.548596, 0.5], 'Recall': 0.910394, 'F1': 0.684636, 'Learning time': 25.812599182128906, 'Inference time': 3.138}


Starting fold 3

Target train facts examples: 9306
Target train pos examples: 113
Target train neg examples: 210

Target test facts examples: 33252
Target test pos  examples: 585
Target test neg examples: 506

******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


WILL Produced-Tree #1
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordvenue(D, C) )
%   then if ( title(E, B), venue(E, D) )
%   | then if ( samebib(E, F), title(F, A) )
%   | | then return 0.8581489350995115;  // std dev = 3.37e-07, 96.000 (wgt'ed) examples reached here.  /* #pos=96 */
%   | | else return -0.14185106490048843;  // std dev = 0.000, 206.000 (wgt'ed) examples reached here.  /* #neg=206 */
%   | else return 0.7812258581764353;  // std dev = 0.266, 13.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   else if ( haswordtitle(A, G), haswordtitle(B, G) )
%   | then return 0.8581489350995122;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return -0.14185106490048777;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #2
% FOR sametitle(A, B):
%   if ( haswordtitle(B, C), haswordvenue(D, C) )
%   then if ( title(E, A), venue(E, D) )
%   | then if ( samebib(E, F), title(F, B) )
%   | | then return 0.7194734122109541;  // std dev = 1.88e-07, 96.000 (wgt'ed) examples reached here.  /* #pos=96 */
%   | | else return -0.12612338422298822;  // std dev = 0.139, 206.000 (wgt'ed) examples reached here.  /* #neg=206 */
%   | else return 0.6673923081472714;  // std dev = 0.229, 13.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   else if ( haswordtitle(A, G), haswordtitle(B, G) )
%   | then return 0.7225254794457083;  // std dev = 0.014, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return -0.12544463852839136;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #3
% FOR sametitle(A, B):
%   if ( haswordtitle(B, C), haswordvenue(D, C) )
%   then if ( title(E, A), venue(E, D) )
%   | then return 0.09954558670019466;  // std dev = 0.311, 302.000 (wgt'ed) examples reached here.  /* #neg=206 #pos=96 */
%   | else return 0.5235516292488023;  // std dev = 0.214, 13.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   else if ( haswordtitle(A, F), haswordtitle(B, F) )
%   | then return 0.5583951624779799;  // std dev = 0.017, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return -0.11231637819360636;  // std dev = 2.63e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #4
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordvenue(D, C) )
%   then if ( title(E, B), venue(E, D) )
%   | then if ( samebib(E, F), title(F, A) )
%   | | then return 0.5294753614289639;  // std dev = 0.114, 96.000 (wgt'ed) examples reached here.  /* #pos=96 */
%   | | else return -0.12341747328715781;  // std dev = 0.199, 206.000 (wgt'ed) examples reached here.  /* #neg=206 */
%   | else return 0.4001858950091284;  // std dev = 0.191, 13.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   else if ( haswordtitle(A, G), haswordtitle(B, G) )
%   | then return 0.4433645537439409;  // std dev = 0.099, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return -0.10858346719654566;  // std dev = 0.017, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #5
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordvenue(D, C) )
%   then if ( title(E, B), venue(E, D) )
%   | then if ( samebib(E, F), title(F, A) )
%   | | then return 0.39863226725749284;  // std dev = 0.104, 96.000 (wgt'ed) examples reached here.  /* #pos=96 */
%   | | else return -0.11069496956881056;  // std dev = 0.185, 206.000 (wgt'ed) examples reached here.  /* #neg=206 */
%   | else return 0.30490492432774946;  // std dev = 0.187, 13.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   else if ( haswordtitle(A, G), haswordtitle(B, G) )
%   | then return 0.3390838297821593;  // std dev = 0.093, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return -0.09852064042471538;  // std dev = 0.016, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #6
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordvenue(D, C) )
%   then if ( title(E, B), venue(E, D) )
%   | then if ( samebib(E, F), title(F, A) )
%   | | then return 0.30796943539573907;  // std dev = 0.089, 96.000 (wgt'ed) examples reached here.  /* #pos=96 */
%   | | else return -0.10027486063207795;  // std dev = 0.173, 206.000 (wgt'ed) examples reached here.  /* #neg=206 */
%   | else return 0.23776068514113785;  // std dev = 0.189, 13.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   else if ( haswordtitle(A, G), haswordtitle(B, G) )
%   | then return 0.26816013849928283;  // std dev = 0.083, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return -0.09011727027603067;  // std dev = 0.015, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #7
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordvenue(D, C) )
%   then if ( title(E, A), venue(E, D) )
%   | then if ( samebib(E, F), title(F, B) )
%   | | then return 0.24647701484970316;  // std dev = 0.075, 96.000 (wgt'ed) examples reached here.  /* #pos=96 */
%   | | else return -0.09276076313240801;  // std dev = 0.383, 205.000 (wgt'ed) examples reached here.  /* #neg=205 */
%   | else return 0.1871067674939641;  // std dev = 0.147, 14.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=12 */
%   else if ( haswordtitle(A, G), haswordtitle(B, G) )
%   | then return 0.2191937543027099;  // std dev = 0.073, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return -0.08300153178116877;  // std dev = 0.013, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #8
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordvenue(D, C) )
%   then if ( title(E, B), venue(E, D) )
%   | then return 0.0070591216959462535;  // std dev = 0.135, 302.000 (wgt'ed) examples reached here.  /* #neg=206 #pos=96 */
%   | else return 0.16150851344786446;  // std dev = 0.177, 13.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   else if ( haswordtitle(A, F), haswordtitle(B, F) )
%   | then return 0.18418061919642564;  // std dev = 0.065, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return -0.07690335482020245;  // std dev = 0.013, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #9
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordvenue(D, C) )
%   then if ( title(E, A), venue(E, D) )
%   | then if ( samebib(E, F), title(F, B) )
%   | | then return 0.2024659719176135;  // std dev = 0.064, 96.000 (wgt'ed) examples reached here.  /* #pos=96 */
%   | | else return -0.08604032653247937;  // std dev = 0.407, 205.000 (wgt'ed) examples reached here.  /* #neg=205 */
%   | else return 0.1329445456767347;  // std dev = 0.137, 14.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=12 */
%   else if ( haswordtitle(A, G), haswordtitle(B, G) )
%   | then return 0.15822594283901353;  // std dev = 0.058, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return -0.07162228040746611;  // std dev = 0.012, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #10
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordvenue(D, C) )
%   then if ( title(E, B), venue(E, D) )
%   | then if ( samebib(E, F), title(F, A) )
%   | | then return 0.17173674235573785;  // std dev = 0.056, 96.000 (wgt'ed) examples reached here.  /* #pos=96 */
%   | | else return -0.0789458284050004;  // std dev = 0.242, 206.000 (wgt'ed) examples reached here.  /* #neg=206 */
%   | else return 0.11840011221167347;  // std dev = 0.170, 13.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   else if ( haswordtitle(A, G), haswordtitle(B, G) )
%   | then return 0.13836175373809995;  // std dev = 0.052, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return -0.06700663942049828;  // std dev = 0.011, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */


Results
   AUC ROC   = 0.979528
   AUC PR    = 0.961504
   CLL	      = -0.183504
   Precision = 0.986038 at threshold = 0.5
   Recall    = 0.965812
   F1        = 0.97582


Total learning time: 385.00806999206543 seconds
Total inference time: 54.582 seconds
AUC ROC: 0.979528


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.107473
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 5.278 seconds
Parameter learned model CLL: -0.107473


Structure after Parameter Learning
[['sametitle(A, B)', {'': 'haswordtitle(A, C), haswordvenue(D, C)', 'true': 'title(E, B), venue(E, D)', 'true,true': 'samebib(E, F), title(F, A)', 'false': 'haswordtitle(A, G), haswordtitle(B, G)'}, {'true,true,true': [3.37e-07, 0, 96], 'true,true,false': [0.0, 206, 0], 'true,false': [0.266, 1, 12], 'false,true': [0.0, 0, 5], 'false,false': [0.0, 3, 0]}], ['sametitle(A, B)', {'': 'haswordtitle(B, C), haswordvenue(D, C)', 'true': 'title(E, A), venue(E, D)', 'true,true': 'samebib(E, F), title(F, B)', 'false': 'haswordtitle(A, G), haswordtitle(B, G)'}, {'true,true,true': [1.88e-07, 0, 96], 'true,true,false': [0.139, 206, 0], 'true,false': [0.229, 1, 12], 'false,true': [0.014, 0, 5], 'false,false': [0.0, 3, 0]}], ['sametitle(A, B)', {'': 'haswordtitle(B, C), haswordvenue(D, C)', 'true': 'title(E, A), venue(E, D)', 'false': 'haswordtitle(A, F), haswordtitle(B, F)'}, {'true,true': [0.311, 206, 96], 'true,false': [0.214, 1, 12], 'false,true': [0.017, 0, 5], 'false,false': [2.63e-09, 3, 0]}], ['sametitle(A, B)', {'': 'haswordtitle(A, C), haswordvenue(D, C)', 'true': 'title(E, B), venue(E, D)', 'true,true': 'samebib(E, F), title(F, A)', 'false': 'haswordtitle(A, G), haswordtitle(B, G)'}, {'true,true,true': [0.114, 0, 96], 'true,true,false': [0.199, 206, 0], 'true,false': [0.191, 1, 12], 'false,true': [0.099, 0, 5], 'false,false': [0.017, 3, 0]}], ['sametitle(A, B)', {'': 'haswordtitle(A, C), haswordvenue(D, C)', 'true': 'title(E, B), venue(E, D)', 'true,true': 'samebib(E, F), title(F, A)', 'false': 'haswordtitle(A, G), haswordtitle(B, G)'}, {'true,true,true': [0.104, 0, 96], 'true,true,false': [0.185, 206, 0], 'true,false': [0.187, 1, 12], 'false,true': [0.093, 0, 5], 'false,false': [0.016, 3, 0]}], ['sametitle(A, B)', {'': 'haswordtitle(A, C), haswordvenue(D, C)', 'true': 'title(E, B), venue(E, D)', 'true,true': 'samebib(E, F), title(F, A)', 'false': 'haswordtitle(A, G), haswordtitle(B, G)'}, {'true,true,true': [0.089, 0, 96], 'true,true,false': [0.173, 206, 0], 'true,false': [0.189, 1, 12], 'false,true': [0.083, 0, 5], 'false,false': [0.015, 3, 0]}], ['sametitle(A, B)', {'': 'haswordtitle(A, C), haswordvenue(D, C)', 'true': 'title(E, A), venue(E, D)', 'true,true': 'samebib(E, F), title(F, B)', 'false': 'haswordtitle(A, G), haswordtitle(B, G)'}, {'true,true,true': [0.075, 0, 96], 'true,true,false': [0.383, 205, 0], 'true,false': [0.147, 2, 12], 'false,true': [0.073, 0, 5], 'false,false': [0.013, 3, 0]}], ['sametitle(A, B)', {'': 'haswordtitle(A, C), haswordvenue(D, C)', 'true': 'title(E, B), venue(E, D)', 'false': 'haswordtitle(A, F), haswordtitle(B, F)'}, {'true,true': [0.135, 206, 96], 'true,false': [0.177, 1, 12], 'false,true': [0.065, 0, 5], 'false,false': [0.013, 3, 0]}], ['sametitle(A, B)', {'': 'haswordtitle(A, C), haswordvenue(D, C)', 'true': 'title(E, A), venue(E, D)', 'true,true': 'samebib(E, F), title(F, B)', 'false': 'haswordtitle(A, G), haswordtitle(B, G)'}, {'true,true,true': [0.064, 0, 96], 'true,true,false': [0.407, 205, 0], 'true,false': [0.137, 2, 12], 'false,true': [0.058, 0, 5], 'false,false': [0.012, 3, 0]}], ['sametitle(A, B)', {'': 'haswordtitle(A, C), haswordvenue(D, C)', 'true': 'title(E, B), venue(E, D)', 'true,true': 'samebib(E, F), title(F, A)', 'false': 'haswordtitle(A, G), haswordtitle(B, G)'}, {'true,true,true': [0.056, 0, 96], 'true,true,false': [0.242, 206, 0], 'true,false': [0.17, 1, 12], 'false,true': [0.052, 0, 5], 'false,false': [0.011, 3, 0]}]]
[{'': [0.225306122448982, 0.23437499999999983], 'false': [0.0, 0.0], 'true': [0.21683259506162156, 0.07100591715976314], 'true,true': [1.1842378929335002e-15, -2.3713501496848003e-16]}, {'': [0.16176212761460204, 0.16855140989000014], 'false': [3.7260457621890454e-05, 0.0], 'true': [0.15510708635760087, 0.05239895620925212], 'true,true': [3.7007434154171886e-16, 9.444262217627639e-05]}, {'': [0.10189087629019088, 0.10547029292289227], 'false': [5.722963035768025e-05, 2.3129646346357427e-18], 'true': [0.09688107090960915, 0.04591092331542283]}, {'': [0.09423464296242558, 0.07267454822418584], 'true': [0.0926029366540525, 0.03636834565666868], 'true,true': [0.00013545895669719865, 0.0001918312232747659], 'false': [0.0019782113641198416, 9.764018672093801e-05]}, {'': [0.05806715876177957, 0.04598637259049333], 'true': [0.05639844148286251, 0.03512798664149624], 'true,true': [0.00011183660727792644, 0.0001662893827119362], 'false': [0.0017171815754941423, 8.231239984237207e-05]}, {'': [0.03795240948997348, 0.030963664190052084], 'true': [0.03626310828408939, 0.03561290519055888], 'true,true': [8.19398224463271e-05, 0.0001451396289838479], 'false': [0.0013637087344141707, 7.023475856127286e-05]}, {'': [0.026583437147443614, 0.022090370289734606], 'true': [0.025502855227301197, 0.021654476762273032], 'true,true': [5.919960087503543e-05, 0.0007139531801364285], 'false': [0.0010625029643217486, 6.057150001609219e-05]}, {'': [0.01964347951161449, 0.01651666610107018], 'true': [0.018156636942450195, 0.03131383766442976], 'false': [0.0008332105418344283, 5.273276959936087e-05]}, {'': [0.019337378150709825, 0.012813871896172875], 'true': [0.01864297769263819, 0.018862216198876507], 'true,true': [4.3211108180873e-05, 0.0008061193063731158], 'false': [0.0006630909837860577, 4.629483584035638e-05]}, {'': [0.014998592302003812, 0.010235694666204694], 'true': [0.013830140872573234, 0.028870355208244096], 'true,true': [3.2734811211479475e-05, 0.0002838141695928617], 'false': [0.0005364762654758326, 4.0948099579099735e-05]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;sametitle(A, B) :- haswordtitle(A, C), haswordvenue(D, C).;true;true
0;true;title(E, B), venue(E, D).;true;true
0;true,true;samebib(E, F), title(F, A).;true;true
0;false;haswordtitle(A, G), haswordtitle(B, G).;true;true
1;;sametitle(A, B) :- haswordtitle(B, C), haswordvenue(D, C).;true;true
1;true;title(E, A), venue(E, D).;true;true
1;true,true;samebib(E, F), title(F, B).;true;true
1;false;haswordtitle(A, G), haswordtitle(B, G).;true;true
2;;sametitle(A, B) :- haswordtitle(B, C), haswordvenue(D, C).;true;true
2;false;haswordtitle(A, F), haswordtitle(B, F).;true;true
3;;sametitle(A, B) :- haswordtitle(A, C), haswordvenue(D, C).;true;true
3;true;title(E, B), venue(E, D).;true;true
3;true,true;samebib(E, F), title(F, A).;true;true
3;false;haswordtitle(A, G), haswordtitle(B, G).;true;true
4;;sametitle(A, B) :- haswordtitle(A, C), haswordvenue(D, C).;true;true
4;true;title(E, B), venue(E, D).;true;true
4;true,true;samebib(E, F), title(F, A).;true;true
4;false;haswordtitle(A, G), haswordtitle(B, G).;true;true
5;;sametitle(A, B) :- haswordtitle(A, C), haswordvenue(D, C).;true;true
5;true;title(E, B), venue(E, D).;true;true
5;true,true;samebib(E, F), title(F, A).;true;true
5;false;haswordtitle(A, G), haswordtitle(B, G).;true;true
6;;sametitle(A, B) :- haswordtitle(A, C), haswordvenue(D, C).;true;true
6;true;title(E, A), venue(E, D).;true;true
6;true,true;samebib(E, F), title(F, B).;true;true
6;false;haswordtitle(A, G), haswordtitle(B, G).;true;true
7;;sametitle(A, B) :- haswordtitle(A, C), haswordvenue(D, C).;true;true
7;false;haswordtitle(A, F), haswordtitle(B, F).;true;true
8;;sametitle(A, B) :- haswordtitle(A, C), haswordvenue(D, C).;true;true
8;true;title(E, A), venue(E, D).;true;true
8;true,true;samebib(E, F), title(F, B).;true;true
8;false;haswordtitle(A, G), haswordtitle(B, G).;true;true
9;;sametitle(A, B) :- haswordtitle(A, C), haswordvenue(D, C).;true;true
9;true;title(E, B), venue(E, D).;true;true
9;true,true;samebib(E, F), title(F, A).;true;true
9;false;haswordtitle(A, G), haswordtitle(B, G).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordvenue(D, C) )
%   then if ( title(E, B), venue(E, D) )
%   | then if ( samebib(E, F), title(F, A) )
%   | | then return 0.8581489350995115;  // std dev = 3.37e-07, 96.000 (wgt'ed) examples reached here.  /* #pos=96 */
%   | | else return -0.14185106490048843;  // std dev = 0.000, 206.000 (wgt'ed) examples reached here.  /* #neg=206 */
%   | else return 0.7812258581764353;  // std dev = 0.266, 13.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   else if ( haswordtitle(A, G), haswordtitle(B, G) )
%   | then return 0.8581489350995122;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return -0.14185106490048777;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #2
% FOR sametitle(A, B):
%   if ( haswordtitle(B, C), haswordvenue(D, C) )
%   then if ( title(E, A), venue(E, D) )
%   | then if ( samebib(E, F), title(F, B) )
%   | | then return 0.7194734122109541;  // std dev = 1.88e-07, 96.000 (wgt'ed) examples reached here.  /* #pos=96 */
%   | | else return -0.12612338422298822;  // std dev = 0.139, 206.000 (wgt'ed) examples reached here.  /* #neg=206 */
%   | else return 0.6673923081472714;  // std dev = 0.229, 13.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   else if ( haswordtitle(A, G), haswordtitle(B, G) )
%   | then return 0.7225254794457083;  // std dev = 0.014, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return -0.12544463852839136;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #3
% FOR sametitle(A, B):
%   if ( haswordtitle(B, C), haswordvenue(D, C) )
%   then if ( title(E, A), venue(E, D) )
%   | then if ( samebib(E, F), title(F, B) )
%   | | then return 0.5553664367462835;  // std dev = 4.09e-07, 96.000 (wgt'ed) examples reached here.  /* #pos=96 */
%   | | else return -0.11287578031157806;  // std dev = 0.129, 206.000 (wgt'ed) examples reached here.  /* #neg=206 */
%   | else return 0.5235516292488023;  // std dev = 0.214, 13.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   else if ( haswordtitle(A, G), haswordtitle(B, G) )
%   | then return 0.5583951624779799;  // std dev = 0.017, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return -0.11231637819360636;  // std dev = 2.63e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #4
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordvenue(D, C) )
%   then if ( title(E, B), venue(E, D) )
%   | then if ( samebib(E, F), title(F, A) )
%   | | then return 0.41749818750685663;  // std dev = 0.001, 96.000 (wgt'ed) examples reached here.  /* #pos=96 */
%   | | else return -0.1025477100747007;  // std dev = 0.219, 206.000 (wgt'ed) examples reached here.  /* #neg=206 */
%   | else return 0.40316752663743777;  // std dev = 0.180, 13.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   else if ( haswordtitle(A, G), haswordtitle(B, G) )
%   | then return 0.42073337754073636;  // std dev = 0.019, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return -0.10155867761849639;  // std dev = 9.22e-05, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #5
% FOR sametitle(A, B):
%   if ( haswordtitle(B, C), haswordvenue(D, C) )
%   then if ( title(E, A), venue(E, D) )
%   | then if ( samebib(E, F), title(F, B) )
%   | | then return 0.32070786392391376;  // std dev = 0.000701, 96.000 (wgt'ed) examples reached here.  /* #pos=96 */
%   | | else return -0.09350751227163409;  // std dev = 0.205, 206.000 (wgt'ed) examples reached here.  /* #neg=206 */
%   | else return 0.30768423831114233;  // std dev = 0.175, 13.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   else if ( haswordtitle(A, G), haswordtitle(B, G) )
%   | then return 0.32300119034950237;  // std dev = 0.019, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return -0.0926667273159864;  // std dev = 6.79e-05, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #6
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordvenue(D, C) )
%   then if ( title(E, B), venue(E, D) )
%   | then if ( samebib(E, F), title(F, A) )
%   | | then return 0.2551593808193205;  // std dev = 0.002, 96.000 (wgt'ed) examples reached here.  /* #pos=96 */
%   | | else return -0.0863200185848198;  // std dev = 0.281, 206.000 (wgt'ed) examples reached here.  /* #neg=206 */
%   | else return 0.24692714516757797;  // std dev = 0.152, 13.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   else if ( haswordtitle(A, G), haswordtitle(B, G) )
%   | then return 0.2573749481850921;  // std dev = 0.018, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return -0.08513563990483575;  // std dev = 0.000132, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #7
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordvenue(D, C) )
%   then if ( title(E, B), venue(E, D) )
%   | then if ( samebib(E, F), title(F, A) )
%   | | then return 0.20974863564756707;  // std dev = 0.001, 96.000 (wgt'ed) examples reached here.  /* #pos=96 */
%   | | else return -0.07978117896841946;  // std dev = 0.268, 206.000 (wgt'ed) examples reached here.  /* #neg=206 */
%   | else return 0.1984301653893709;  // std dev = 0.153, 13.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   else if ( haswordtitle(A, G), haswordtitle(B, G) )
%   | then return 0.21132605742777538;  // std dev = 0.016, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return -0.078734582391261;  // std dev = 0.000123, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #8
% FOR sametitle(A, B):
%   if ( haswordtitle(B, C), haswordvenue(D, C) )
%   then if ( title(E, A), venue(E, D) )
%   | then if ( samebib(E, F), title(F, B) )
%   | | then return 0.17709187451440622;  // std dev = 0.001, 96.000 (wgt'ed) examples reached here.  /* #pos=96 */
%   | | else return -0.0743744762276613;  // std dev = 0.303, 206.000 (wgt'ed) examples reached here.  /* #neg=206 */
%   | else return 0.16654646394404693;  // std dev = 0.143, 13.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   else if ( haswordtitle(A, G), haswordtitle(B, G) )
%   | then return 0.17860389115331468;  // std dev = 0.016, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return -0.07318387632889668;  // std dev = 0.000178, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #9
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordvenue(D, C) )
%   then if ( title(E, B), venue(E, D) )
%   | then if ( samebib(E, F), title(F, A) )
%   | | then return 0.1527365222925299;  // std dev = 0.001, 96.000 (wgt'ed) examples reached here.  /* #pos=96 */
%   | | else return -0.06948022626133439;  // std dev = 0.298, 206.000 (wgt'ed) examples reached here.  /* #neg=206 */
%   | else return 0.140130722639821;  // std dev = 0.144, 13.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   else if ( haswordtitle(A, G), haswordtitle(B, G) )
%   | then return 0.15395388231852367;  // std dev = 0.014, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return -0.0683713506062769;  // std dev = 0.000170, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #10
% FOR sametitle(A, B):
%   if ( haswordtitle(B, C), haswordvenue(D, C) )
%   then if ( title(E, A), venue(E, D) )
%   | then if ( samebib(E, F), title(F, B) )
%   | | then return 0.13400327537981715;  // std dev = 0.000949, 96.000 (wgt'ed) examples reached here.  /* #pos=96 */
%   | | else return -0.06535000597888806;  // std dev = 0.328, 206.000 (wgt'ed) examples reached here.  /* #neg=206 */
%   | else return 0.12227045775978468;  // std dev = 0.137, 13.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   else if ( haswordtitle(A, G), haswordtitle(B, G) )
%   | then return 0.13527651275535196;  // std dev = 0.014, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return -0.06412161142768061;  // std dev = 0.000212, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */


Results
   AUC ROC   = 0.986433
   AUC PR    = 0.987219
   CLL	      = -0.161061
   Precision = 0.986038 at threshold = 0.5
   Recall    = 0.965812
   F1        = 0.97582


Total learning time: 394.92899918556213 seconds
Total inference time: 59.938 seconds
AUC ROC: 0.986433


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.088329
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 5.696 seconds
Refined model CLL: -0.088329


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.986433
   AUC PR    = 0.987219
   CLL	      = -0.161061
   Precision = 0.986038 at threshold = 0.5
   Recall    = 0.965812
   F1        = 0.97582


Total learning time: 790.9110691776276 seconds
Total inference time: 59.938 seconds
AUC ROC: 0.986433
Total revision time: 790.9110691776276
Best scored revision CLL: -0.088329


Dataset: 6_imdb_cora, Fold: 3, Type: Transfer (trRDN-B), Time: 00:45:13
{'AUC ROC': 0.986433, 'AUC PR': 0.987219, 'CLL': -0.161061, 'Precision': [0.986038, 0.5], 'Recall': 0.965812, 'F1': 0.97582, 'Learning time': 790.9110691776276, 'Inference time': 59.938, 'parameter': {'AUC ROC': 0.979528, 'AUC PR': 0.961504, 'CLL': -0.183504, 'Precision': [0.986038, 0.5], 'Recall': 0.965812, 'F1': 0.97582, 'Learning time': 385.00806999206543, 'Inference time': 54.582}}


WILL Produced-Tree #1
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordvenue(D, C) )
%   then if ( title(E, B), venue(E, D) )
%   | then if ( samebib(E, F), title(F, A) )
%   | | then return 0.8581489350995115;  // std dev = 3.37e-07, 96.000 (wgt'ed) examples reached here.  /* #pos=96 */
%   | | else return -0.14185106490048843;  // std dev = 0.000, 206.000 (wgt'ed) examples reached here.  /* #neg=206 */
%   | else return 0.7812258581764353;  // std dev = 0.266, 13.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   else if ( haswordtitle(A, G), haswordtitle(B, G) )
%   | then return 0.8581489350995122;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return -0.14185106490048777;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #2
% FOR sametitle(A, B):
%   if ( haswordtitle(B, C), haswordvenue(D, C) )
%   then if ( title(E, A), venue(E, D) )
%   | then if ( samebib(E, F), title(F, B) )
%   | | then return 0.7194734122109541;  // std dev = 1.88e-07, 96.000 (wgt'ed) examples reached here.  /* #pos=96 */
%   | | else return -0.12612338422298822;  // std dev = 0.139, 206.000 (wgt'ed) examples reached here.  /* #neg=206 */
%   | else return 0.6673923081472714;  // std dev = 0.229, 13.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   else if ( haswordtitle(A, G), haswordtitle(B, G) )
%   | then return 0.7225254794457083;  // std dev = 0.014, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return -0.12544463852839136;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #3
% FOR sametitle(A, B):
%   if ( haswordtitle(B, C), haswordvenue(D, C) )
%   then if ( title(E, A), venue(E, D) )
%   | then if ( samebib(E, F), title(F, B) )
%   | | then return 0.5553664367462835;  // std dev = 4.09e-07, 96.000 (wgt'ed) examples reached here.  /* #pos=96 */
%   | | else return -0.11287578031157806;  // std dev = 0.129, 206.000 (wgt'ed) examples reached here.  /* #neg=206 */
%   | else return 0.5235516292488023;  // std dev = 0.214, 13.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   else if ( haswordtitle(A, G), haswordtitle(B, G) )
%   | then return 0.5583951624779799;  // std dev = 0.017, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return -0.11231637819360636;  // std dev = 2.63e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #4
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordvenue(D, C) )
%   then if ( title(E, B), venue(E, D) )
%   | then if ( samebib(E, F), title(F, A) )
%   | | then return 0.41749818750685663;  // std dev = 0.001, 96.000 (wgt'ed) examples reached here.  /* #pos=96 */
%   | | else return -0.1025477100747007;  // std dev = 0.219, 206.000 (wgt'ed) examples reached here.  /* #neg=206 */
%   | else return 0.40316752663743777;  // std dev = 0.180, 13.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   else if ( haswordtitle(A, G), haswordtitle(B, G) )
%   | then return 0.42073337754073636;  // std dev = 0.019, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return -0.10155867761849639;  // std dev = 9.22e-05, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #5
% FOR sametitle(A, B):
%   if ( haswordtitle(B, C), haswordvenue(D, C) )
%   then if ( title(E, A), venue(E, D) )
%   | then if ( samebib(E, F), title(F, B) )
%   | | then return 0.32070786392391376;  // std dev = 0.000701, 96.000 (wgt'ed) examples reached here.  /* #pos=96 */
%   | | else return -0.09350751227163409;  // std dev = 0.205, 206.000 (wgt'ed) examples reached here.  /* #neg=206 */
%   | else return 0.30768423831114233;  // std dev = 0.175, 13.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   else if ( haswordtitle(A, G), haswordtitle(B, G) )
%   | then return 0.32300119034950237;  // std dev = 0.019, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return -0.0926667273159864;  // std dev = 6.79e-05, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #6
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordvenue(D, C) )
%   then if ( title(E, B), venue(E, D) )
%   | then if ( samebib(E, F), title(F, A) )
%   | | then return 0.2551593808193205;  // std dev = 0.002, 96.000 (wgt'ed) examples reached here.  /* #pos=96 */
%   | | else return -0.0863200185848198;  // std dev = 0.281, 206.000 (wgt'ed) examples reached here.  /* #neg=206 */
%   | else return 0.24692714516757797;  // std dev = 0.152, 13.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   else if ( haswordtitle(A, G), haswordtitle(B, G) )
%   | then return 0.2573749481850921;  // std dev = 0.018, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return -0.08513563990483575;  // std dev = 0.000132, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #7
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordvenue(D, C) )
%   then if ( title(E, B), venue(E, D) )
%   | then if ( samebib(E, F), title(F, A) )
%   | | then return 0.20974863564756707;  // std dev = 0.001, 96.000 (wgt'ed) examples reached here.  /* #pos=96 */
%   | | else return -0.07978117896841946;  // std dev = 0.268, 206.000 (wgt'ed) examples reached here.  /* #neg=206 */
%   | else return 0.1984301653893709;  // std dev = 0.153, 13.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   else if ( haswordtitle(A, G), haswordtitle(B, G) )
%   | then return 0.21132605742777538;  // std dev = 0.016, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return -0.078734582391261;  // std dev = 0.000123, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #8
% FOR sametitle(A, B):
%   if ( haswordtitle(B, C), haswordvenue(D, C) )
%   then if ( title(E, A), venue(E, D) )
%   | then if ( samebib(E, F), title(F, B) )
%   | | then return 0.17709187451440622;  // std dev = 0.001, 96.000 (wgt'ed) examples reached here.  /* #pos=96 */
%   | | else return -0.0743744762276613;  // std dev = 0.303, 206.000 (wgt'ed) examples reached here.  /* #neg=206 */
%   | else return 0.16654646394404693;  // std dev = 0.143, 13.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   else if ( haswordtitle(A, G), haswordtitle(B, G) )
%   | then return 0.17860389115331468;  // std dev = 0.016, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return -0.07318387632889668;  // std dev = 0.000178, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #9
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordvenue(D, C) )
%   then if ( title(E, B), venue(E, D) )
%   | then if ( samebib(E, F), title(F, A) )
%   | | then return 0.1527365222925299;  // std dev = 0.001, 96.000 (wgt'ed) examples reached here.  /* #pos=96 */
%   | | else return -0.06948022626133439;  // std dev = 0.298, 206.000 (wgt'ed) examples reached here.  /* #neg=206 */
%   | else return 0.140130722639821;  // std dev = 0.144, 13.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   else if ( haswordtitle(A, G), haswordtitle(B, G) )
%   | then return 0.15395388231852367;  // std dev = 0.014, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return -0.0683713506062769;  // std dev = 0.000170, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #10
% FOR sametitle(A, B):
%   if ( haswordtitle(B, C), haswordvenue(D, C) )
%   then if ( title(E, A), venue(E, D) )
%   | then if ( samebib(E, F), title(F, B) )
%   | | then return 0.13400327537981715;  // std dev = 0.000949, 96.000 (wgt'ed) examples reached here.  /* #pos=96 */
%   | | else return -0.06535000597888806;  // std dev = 0.328, 206.000 (wgt'ed) examples reached here.  /* #neg=206 */
%   | else return 0.12227045775978468;  // std dev = 0.137, 13.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   else if ( haswordtitle(A, G), haswordtitle(B, G) )
%   | then return 0.13527651275535196;  // std dev = 0.014, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return -0.06412161142768061;  // std dev = 0.000212, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */


Results
   AUC ROC   = 0.986433
   AUC PR    = 0.987219
   CLL	      = -0.161061
   Precision = 0.986038 at threshold = 0.5
   Recall    = 0.965812
   F1        = 0.97582


Total learning time: 390.5368733406067 seconds
Total inference time: 61.117 seconds
AUC ROC: 0.986433


Dataset: 6_imdb_cora, Fold: 3, Type: Scratch (RDN-B), Time: 00:52:45
{'AUC ROC': 0.986433, 'AUC PR': 0.987219, 'CLL': -0.161061, 'Precision': [0.986038, 0.5], 'Recall': 0.965812, 'F1': 0.97582, 'Learning time': 390.5368733406067, 'Inference time': 61.117}


Starting fold 4

Target train facts examples: 8129
Target train pos examples: 129
Target train neg examples: 70

Target test facts examples: 34429
Target test pos  examples: 569
Target test neg examples: 646

******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


WILL Produced-Tree #1
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordauthor(D, C) )
%   then if ( haswordtitle(B, C) )
%   | then return 0.8581489350995118;  // std dev = 1.46e-07, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | else return 0.088918165868743;  // std dev = 0.421, 13.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=3 */
%   else if ( haswordtitle(B, E), haswordauthor(F, E) )
%   | then return 0.088918165868743;  // std dev = 0.421, 13.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=3 */
%   | else return 0.5180128806777413;  // std dev = 0.474, 147.000 (wgt'ed) examples reached here.  /* #neg=50 #pos=97 */
WILL Produced-Tree #2
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordauthor(D, C) )
%   then if ( haswordtitle(B, C) )
%   | then return 0.7194734122109545;  // std dev = 0.000, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | else return 0.07774578121441031;  // std dev = 0.421, 13.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=3 */
%   else if ( haswordtitle(B, E), haswordauthor(F, E) )
%   | then return 0.07774578121441031;  // std dev = 0.421, 13.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=3 */
%   | else return 0.4426517838203286;  // std dev = 0.474, 147.000 (wgt'ed) examples reached here.  /* #neg=50 #pos=97 */
WILL Produced-Tree #3
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordauthor(D, C) )
%   then if ( haswordtitle(B, C) )
%   | then return 0.5553664367462846;  // std dev = 0.000, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | else return 0.06739536297660921;  // std dev = 0.421, 13.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=3 */
%   else if ( haswordtitle(B, E), haswordauthor(F, E) )
%   | then return 0.06739536297660921;  // std dev = 0.421, 13.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=3 */
%   | else return 0.35818915709203447;  // std dev = 0.474, 147.000 (wgt'ed) examples reached here.  /* #neg=50 #pos=97 */
WILL Produced-Tree #4
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordauthor(D, C) )
%   then if ( haswordtitle(B, C) )
%   | then return 0.41751358415831;  // std dev = 0.000, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | else return 0.0579733820773872;  // std dev = 0.421, 13.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=3 */
%   else return 0.2600148264126967;  // std dev = 0.474, 160.000 (wgt'ed) examples reached here.  /* #neg=60 #pos=100 */
WILL Produced-Tree #5
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordauthor(D, C) )
%   then if ( haswordtitle(B, C) )
%   | then return 0.3207118471601494;  // std dev = 0.000, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | else return 0.049528997355293175;  // std dev = 0.421, 13.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=3 */
%   else return 0.19889013145186038;  // std dev = 0.473, 160.000 (wgt'ed) examples reached here.  /* #neg=60 #pos=100 */
WILL Produced-Tree #6
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordauthor(D, C) )
%   then if ( haswordtitle(B, C) )
%   | then return 0.25517224256948956;  // std dev = 0.000, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | else return 0.04206293300387109;  // std dev = 0.421, 13.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=3 */
%   else if ( haswordtitle(B, E), haswordauthor(F, E) )
%   | then return -0.017654701889428692;  // std dev = 0.421, 13.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=3 */
%   | else return 0.16542402151534982;  // std dev = 0.474, 147.000 (wgt'ed) examples reached here.  /* #neg=50 #pos=97 */
WILL Produced-Tree #7
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordauthor(D, C) )
%   then if ( haswordtitle(B, C) )
%   | then return 0.2097577156325355;  // std dev = 2.11e-08, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | else return 0.03553879177151896;  // std dev = 0.421, 13.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=3 */
%   else if ( haswordtitle(B, E), haswordauthor(F, E) )
%   | then return -0.014373062279642374;  // std dev = 0.421, 13.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=3 */
%   | else return 0.12412927512870053;  // std dev = 0.474, 147.000 (wgt'ed) examples reached here.  /* #neg=50 #pos=97 */
WILL Produced-Tree #8
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordauthor(D, C) )
%   then if ( haswordtitle(B, C) )
%   | then return 0.17709649774527747;  // std dev = 0.000, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | else return 0.029894556746069525;  // std dev = 0.421, 13.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=3 */
%   else return 0.08488726549893039;  // std dev = 0.471, 160.000 (wgt'ed) examples reached here.  /* #neg=60 #pos=100 */
WILL Produced-Tree #9
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordauthor(D, C) )
%   then if ( haswordtitle(B, C) )
%   | then return 0.15274385809367083;  // std dev = 0.000, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | else return 0.025052826506284376;  // std dev = 0.421, 13.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=3 */
%   else return 0.06455824524825884;  // std dev = 0.471, 160.000 (wgt'ed) examples reached here.  /* #neg=60 #pos=100 */
WILL Produced-Tree #10
% FOR sametitle(A, B):
%   return 0;  // std dev = 0.436, 199.000 (wgt'ed) examples reached here.  /* #neg=70 #pos=129 */


Results
   AUC ROC   = 0.746149
   AUC PR    = 0.695718
   CLL	      = -0.600369
   Precision = 0.580541 at threshold = 0.5
   Recall    = 0.943761
   F1        = 0.718876


Total learning time: 9.352946996688843 seconds
Total inference time: 2.239 seconds
AUC ROC: 0.746149


Results scoring model
   AUC ROC   = 0.691584
   AUC PR    = 0.815016
   CLL	      = -0.56847
   Precision = 0.710983 at threshold = 0.5
   Recall    = 0.953488
   F1        = 0.81457


Total scoring time: 1.235 seconds
Parameter learned model CLL: -0.56847


Structure after Parameter Learning
[['sametitle(A, B)', {'': 'haswordtitle(A, C), haswordauthor(D, C)', 'true': 'haswordtitle(B, C)', 'false': 'haswordtitle(B, E), haswordauthor(F, E)'}, {'true,true': [1.46e-07, 0, 26], 'true,false': [0.421, 10, 3], 'false,true': [0.421, 10, 3], 'false,false': [0.474, 50, 97]}], ['sametitle(A, B)', {'': 'haswordtitle(A, C), haswordauthor(D, C)', 'true': 'haswordtitle(B, C)', 'false': 'haswordtitle(B, E), haswordauthor(F, E)'}, {'true,true': [0.0, 0, 26], 'true,false': [0.421, 10, 3], 'false,true': [0.421, 10, 3], 'false,false': [0.474, 50, 97]}], ['sametitle(A, B)', {'': 'haswordtitle(A, C), haswordauthor(D, C)', 'true': 'haswordtitle(B, C)', 'false': 'haswordtitle(B, E), haswordauthor(F, E)'}, {'true,true': [0.0, 0, 26], 'true,false': [0.421, 10, 3], 'false,true': [0.421, 10, 3], 'false,false': [0.474, 50, 97]}], ['sametitle(A, B)', {'': 'haswordtitle(A, C), haswordauthor(D, C)', 'true': 'haswordtitle(B, C)'}, {'true,true': [0.0, 0, 26], 'true,false': [0.421, 10, 3], 'false': [0.474, 60, 100]}], ['sametitle(A, B)', {'': 'haswordtitle(A, C), haswordauthor(D, C)', 'true': 'haswordtitle(B, C)'}, {'true,true': [0.0, 0, 26], 'true,false': [0.421, 10, 3], 'false': [0.473, 60, 100]}], ['sametitle(A, B)', {'': 'haswordtitle(A, C), haswordauthor(D, C)', 'true': 'haswordtitle(B, C)', 'false': 'haswordtitle(B, E), haswordauthor(F, E)'}, {'true,true': [0.0, 0, 26], 'true,false': [0.421, 10, 3], 'false,true': [0.421, 10, 3], 'false,false': [0.474, 50, 97]}], ['sametitle(A, B)', {'': 'haswordtitle(A, C), haswordauthor(D, C)', 'true': 'haswordtitle(B, C)', 'false': 'haswordtitle(B, E), haswordauthor(F, E)'}, {'true,true': [2.11e-08, 0, 26], 'true,false': [0.421, 10, 3], 'false,true': [0.421, 10, 3], 'false,false': [0.474, 50, 97]}], ['sametitle(A, B)', {'': 'haswordtitle(A, C), haswordauthor(D, C)', 'true': 'haswordtitle(B, C)'}, {'true,true': [0.0, 0, 26], 'true,false': [0.421, 10, 3], 'false': [0.471, 60, 100]}], ['sametitle(A, B)', {'': 'haswordtitle(A, C), haswordauthor(D, C)', 'true': 'haswordtitle(B, C)'}, {'true,true': [0.0, 0, 26], 'true,false': [0.421, 10, 3], 'false': [0.471, 60, 100]}], ['sametitle(A, B)', {}, {}]]
[{'': [0.19066403681788444, 0.2343750000000029], 'false': [0.17751479289940816, 0.22444351890416298], 'true': [8.198570028001156e-16, 0.17751479289940816]}, {'': [0.15068589816301023, 0.23057047642799117], 'false': [0.17751479289940827, 0.22444351890415876], 'true': [-1.3664283380001927e-16, 0.17751479289940827]}, {'': [0.1120862129300096, 0.2269429087311233], 'false': [0.17751479289940833, 0.22444351890416056], 'true': [-3.416070845000482e-16, 0.17751479289940833]}, {'': [0.08789807694700037, 0.2242405577936754], 'true': [-6.832141690000964e-17, 0.1775147928994081]}, {'': [0.07551385052831006, 0.2235370920134942], 'true': [-1.708035422500241e-17, 0.1775147928994083]}, {'': [0.06926394826058821, 0.2231326127303094], 'false': [0.17751479289940827, 0.22444351890416037], 'true': [-8.540177112501205e-18, 0.17751479289940833]}, {'': [0.06591653839564514, 0.2220625332389508], 'false': [0.17751479289940827, 0.22444351890415987], 'true': [1.708035422500241e-17, 0.1775147928994083]}, {'': [0.06398680017401033, 0.22145597728291797], 'true': [-3.416070845000482e-17, 0.1775147928994083]}, {'': [0.06279493086599186, 0.2213825464232131], 'true': [-3.843079700625542e-17, 0.17751479289940836]}, {}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;sametitle(A, B) :- haswordtitle(A, C), haswordauthor(D, C).;true;true
0;true;haswordtitle(B, C).;true;true
1;;sametitle(A, B) :- haswordtitle(A, C), haswordauthor(D, C).;true;true
1;true;haswordtitle(B, C).;true;true
2;;sametitle(A, B) :- haswordtitle(A, C), haswordauthor(D, C).;true;true
2;true;haswordtitle(B, C).;true;true
3;;sametitle(A, B) :- haswordtitle(A, C), haswordauthor(D, C).;true;true
3;true;haswordtitle(B, C).;true;true
4;;sametitle(A, B) :- haswordtitle(A, C), haswordauthor(D, C).;true;true
4;true;haswordtitle(B, C).;true;true
5;;sametitle(A, B) :- haswordtitle(A, C), haswordauthor(D, C).;true;true
5;true;haswordtitle(B, C).;true;true
6;;sametitle(A, B) :- haswordtitle(A, C), haswordauthor(D, C).;true;true
6;true;haswordtitle(B, C).;true;true
7;;sametitle(A, B) :- haswordtitle(A, C), haswordauthor(D, C).;true;true
7;true;haswordtitle(B, C).;true;true
8;;sametitle(A, B) :- haswordtitle(A, C), haswordauthor(D, C).;true;true
8;true;haswordtitle(B, C).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordauthor(D, C) )
%   then if ( haswordtitle(B, C) )
%   | then return 0.8581489350995118;  // std dev = 1.46e-07, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | else return 0.088918165868743;  // std dev = 0.421, 13.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=3 */
%   else if ( haswordtitle(B, E), haswordauthor(F, E) )
%   | then return 0.088918165868743;  // std dev = 0.421, 13.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=3 */
%   | else return 0.5180128806777413;  // std dev = 0.474, 147.000 (wgt'ed) examples reached here.  /* #neg=50 #pos=97 */
WILL Produced-Tree #2
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordauthor(D, C) )
%   then if ( haswordtitle(B, C) )
%   | then return 0.7194734122109545;  // std dev = 0.000, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | else return 0.07774578121441031;  // std dev = 0.421, 13.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=3 */
%   else if ( haswordtitle(B, E), haswordauthor(F, E) )
%   | then return 0.07774578121441031;  // std dev = 0.421, 13.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=3 */
%   | else return 0.4426517838203286;  // std dev = 0.474, 147.000 (wgt'ed) examples reached here.  /* #neg=50 #pos=97 */
WILL Produced-Tree #3
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordauthor(D, C) )
%   then if ( haswordtitle(B, C) )
%   | then return 0.5553664367462846;  // std dev = 0.000, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | else return 0.06739536297660921;  // std dev = 0.421, 13.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=3 */
%   else if ( haswordtitle(B, E), haswordauthor(F, E) )
%   | then return 0.06739536297660921;  // std dev = 0.421, 13.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=3 */
%   | else return 0.35818915709203447;  // std dev = 0.474, 147.000 (wgt'ed) examples reached here.  /* #neg=50 #pos=97 */
WILL Produced-Tree #4
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordauthor(D, C) )
%   then if ( haswordtitle(B, C) )
%   | then return 0.41751358415831;  // std dev = 0.000, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | else return 0.0579733820773872;  // std dev = 0.421, 13.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=3 */
%   else return 0.2600148264126967;  // std dev = 0.474, 160.000 (wgt'ed) examples reached here.  /* #neg=60 #pos=100 */
WILL Produced-Tree #5
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordauthor(D, C) )
%   then if ( haswordtitle(B, C) )
%   | then return 0.3207118471601494;  // std dev = 0.000, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | else return 0.049528997355293175;  // std dev = 0.421, 13.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=3 */
%   else if ( haswordtitle(B, E), haswordauthor(F, E) )
%   | then return 0.01759983761955297;  // std dev = 0.421, 13.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=3 */
%   | else return 0.2149226064166222;  // std dev = 0.474, 147.000 (wgt'ed) examples reached here.  /* #neg=50 #pos=97 */
WILL Produced-Tree #6
% FOR sametitle(A, B):
%   return 0;  // std dev = 0.439, 199.000 (wgt'ed) examples reached here.  /* #neg=70 #pos=129 */
WILL Produced-Tree #7
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordauthor(D, C) )
%   then if ( haswordtitle(B, C) )
%   | then return 0.25517224256948956;  // std dev = 0.000, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | else return 0.04206293300387109;  // std dev = 0.421, 13.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=3 */
%   else if ( haswordtitle(B, E), haswordauthor(F, E) )
%   | then return 0.014632947695550798;  // std dev = 0.421, 13.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=3 */
%   | else return 0.16141612698718671;  // std dev = 0.474, 147.000 (wgt'ed) examples reached here.  /* #neg=50 #pos=97 */
WILL Produced-Tree #8
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordauthor(D, C) )
%   then if ( haswordtitle(B, C) )
%   | then return 0.2097577156325355;  // std dev = 2.11e-08, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | else return 0.03553879177151896;  // std dev = 0.421, 13.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=3 */
%   else return 0.11228385716133607;  // std dev = 0.471, 160.000 (wgt'ed) examples reached here.  /* #neg=60 #pos=100 */
WILL Produced-Tree #9
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordauthor(D, C) )
%   then if ( haswordtitle(B, C) )
%   | then return 0.17709649774527747;  // std dev = 0.000, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | else return 0.029894556746069525;  // std dev = 0.421, 13.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=3 */
%   else return 0.08517842466921861;  // std dev = 0.471, 160.000 (wgt'ed) examples reached here.  /* #neg=60 #pos=100 */
WILL Produced-Tree #10
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordauthor(D, C) )
%   then if ( haswordtitle(B, C) )
%   | then return 0.15274385809367083;  // std dev = 0.000, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | else return 0.025052826506284376;  // std dev = 0.421, 13.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=3 */
%   else return 0.06479507876028492;  // std dev = 0.470, 160.000 (wgt'ed) examples reached here.  /* #neg=60 #pos=100 */


Results
   AUC ROC   = 0.746149
   AUC PR    = 0.695718
   CLL	      = -0.600033
   Precision = 0.580541 at threshold = 0.5
   Recall    = 0.943761
   F1        = 0.718876


Total learning time: 9.199007034301758 seconds
Total inference time: 2.282 seconds
AUC ROC: 0.746149


Results scoring model
   AUC ROC   = 0.691584
   AUC PR    = 0.815016
   CLL	      = -0.568386
   Precision = 0.710983 at threshold = 0.5
   Recall    = 0.953488
   F1        = 0.81457


Total scoring time: 1.229 seconds
Refined model CLL: -0.568386


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.746149
   AUC PR    = 0.695718
   CLL	      = -0.600033
   Precision = 0.580541 at threshold = 0.5
   Recall    = 0.943761
   F1        = 0.718876


Total learning time: 21.0159540309906 seconds
Total inference time: 2.282 seconds
AUC ROC: 0.746149
Total revision time: 21.0159540309906
Best scored revision CLL: -0.568386


Dataset: 6_imdb_cora, Fold: 4, Type: Transfer (trRDN-B), Time: 00:53:14
{'AUC ROC': 0.746149, 'AUC PR': 0.695718, 'CLL': -0.600033, 'Precision': [0.580541, 0.5], 'Recall': 0.943761, 'F1': 0.718876, 'Learning time': 21.0159540309906, 'Inference time': 2.282, 'parameter': {'AUC ROC': 0.746149, 'AUC PR': 0.695718, 'CLL': -0.600369, 'Precision': [0.580541, 0.5], 'Recall': 0.943761, 'F1': 0.718876, 'Learning time': 9.352946996688843, 'Inference time': 2.239}}


WILL Produced-Tree #1
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordauthor(D, C) )
%   then if ( haswordtitle(B, C) )
%   | then return 0.8581489350995118;  // std dev = 1.46e-07, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | else return 0.088918165868743;  // std dev = 0.421, 13.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=3 */
%   else if ( haswordtitle(B, E), haswordauthor(F, E) )
%   | then return 0.088918165868743;  // std dev = 0.421, 13.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=3 */
%   | else return 0.5180128806777413;  // std dev = 0.474, 147.000 (wgt'ed) examples reached here.  /* #neg=50 #pos=97 */
WILL Produced-Tree #2
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordauthor(D, C) )
%   then if ( haswordtitle(B, C) )
%   | then return 0.7194734122109545;  // std dev = 0.000, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | else return 0.07774578121441031;  // std dev = 0.421, 13.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=3 */
%   else return 0.41300317110859763;  // std dev = 0.480, 160.000 (wgt'ed) examples reached here.  /* #neg=60 #pos=100 */
WILL Produced-Tree #3
% FOR sametitle(A, B):
%   if ( haswordtitle(B, C), haswordauthor(D, C) )
%   then if ( haswordtitle(A, C) )
%   | then return 0.5553664367462846;  // std dev = 0.000, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | else return 0.016280678363360668;  // std dev = 0.421, 13.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=3 */
%   else if ( haswordtitle(A, E), haswordauthor(F, E) )
%   | then return 0.06739536297660921;  // std dev = 0.421, 13.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=3 */
%   | else return 0.36439818036135135;  // std dev = 0.474, 147.000 (wgt'ed) examples reached here.  /* #neg=50 #pos=97 */
WILL Produced-Tree #4
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordauthor(D, C) )
%   then if ( haswordtitle(B, C) )
%   | then return 0.41751358415831;  // std dev = 0.000, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | else return 0.0579733820773872;  // std dev = 0.421, 13.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=3 */
%   else if ( haswordtitle(B, E), haswordauthor(F, E) )
%   | then return 0.013524908528151632;  // std dev = 0.421, 13.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=3 */
%   | else return 0.2834003425133103;  // std dev = 0.474, 147.000 (wgt'ed) examples reached here.  /* #neg=50 #pos=97 */
WILL Produced-Tree #5
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordauthor(D, C) )
%   then if ( haswordtitle(B, C) )
%   | then return 0.3207118471601494;  // std dev = 0.000, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | else return 0.049528997355293175;  // std dev = 0.421, 13.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=3 */
%   else if ( haswordtitle(B, E), haswordauthor(F, E) )
%   | then return 0.011216214473559336;  // std dev = 0.421, 13.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=3 */
%   | else return 0.21493596079134583;  // std dev = 0.474, 147.000 (wgt'ed) examples reached here.  /* #neg=50 #pos=97 */
WILL Produced-Tree #6
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordauthor(D, C) )
%   then if ( haswordtitle(B, C) )
%   | then return 0.25517224256948956;  // std dev = 0.000, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | else return 0.04206293300387109;  // std dev = 0.421, 13.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=3 */
%   else if ( haswordtitle(B, E), haswordauthor(F, E) )
%   | then return 0.00928827763449951;  // std dev = 0.421, 13.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=3 */
%   | else return 0.16142630663020713;  // std dev = 0.474, 147.000 (wgt'ed) examples reached here.  /* #neg=50 #pos=97 */
WILL Produced-Tree #7
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordauthor(D, C) )
%   then if ( haswordtitle(B, C) )
%   | then return 0.2097577156325355;  // std dev = 2.11e-08, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | else return 0.03553879177151896;  // std dev = 0.421, 13.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=3 */
%   else return 0.11192837878046724;  // std dev = 0.471, 160.000 (wgt'ed) examples reached here.  /* #neg=60 #pos=100 */
WILL Produced-Tree #8
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordauthor(D, C) )
%   then if ( haswordtitle(B, C) )
%   | then return 0.17709649774527747;  // std dev = 0.000, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | else return 0.029894556746069525;  // std dev = 0.421, 13.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=3 */
%   else if ( haswordtitle(B, E), haswordauthor(F, E) )
%   | then return -0.01231569197840423;  // std dev = 0.421, 13.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=3 */
%   | else return 0.0934818422255345;  // std dev = 0.474, 147.000 (wgt'ed) examples reached here.  /* #neg=50 #pos=97 */
WILL Produced-Tree #9
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordauthor(D, C) )
%   then if ( haswordtitle(B, C) )
%   | then return 0.15274385809367083;  // std dev = 0.000, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | else return 0.025052826506284376;  // std dev = 0.421, 13.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=3 */
%   else return 0.06412142440349336;  // std dev = 0.470, 160.000 (wgt'ed) examples reached here.  /* #neg=60 #pos=100 */
WILL Produced-Tree #10
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordauthor(D, C) )
%   then if ( haswordtitle(B, C) )
%   | then return 0.13400703000801117;  // std dev = 0.000, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | else return 0.020929078465113212;  // std dev = 0.421, 13.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=3 */
%   else return 0.048979722592592;  // std dev = 0.470, 160.000 (wgt'ed) examples reached here.  /* #neg=60 #pos=100 */


Results
   AUC ROC   = 0.746454
   AUC PR    = 0.6958
   CLL	      = -0.605895
   Precision = 0.580541 at threshold = 0.5
   Recall    = 0.943761
   F1        = 0.718876


Total learning time: 9.892919063568115 seconds
Total inference time: 2.36 seconds
AUC ROC: 0.746454


Dataset: 6_imdb_cora, Fold: 4, Type: Scratch (RDN-B), Time: 00:53:27
{'AUC ROC': 0.746454, 'AUC PR': 0.6958, 'CLL': -0.605895, 'Precision': [0.580541, 0.5], 'Recall': 0.943761, 'F1': 0.718876, 'Learning time': 9.892919063568115, 'Inference time': 2.36}


Starting fold 5

Target train facts examples: 8644
Target train pos examples: 154
Target train neg examples: 148

Target test facts examples: 33914
Target test pos  examples: 544
Target test neg examples: 568

******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


WILL Produced-Tree #1
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordauthor(D, C) )
%   then if ( haswordtitle(B, C) )
%   | then return 0.8248156017661792;  // std dev = 0.180, 60.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=58 */
%   | else if ( author(E, D), title(E, B) )
%   | | then return 0.5248156017661788;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return -0.04185106490048778;  // std dev = 0.300, 10.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=1 */
%   else if ( haswordtitle(B, F), haswordauthor(G, F) )
%   | then if ( author(H, G), title(H, A) )
%   | | then return 0.5248156017661788;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return -0.016851064900487787;  // std dev = 0.331, 8.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */
%   | else return 0.27099297179675785;  // std dev = 0.492, 218.000 (wgt'ed) examples reached here.  /* #neg=128 #pos=90 */
WILL Produced-Tree #2
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordauthor(D, C) )
%   then if ( haswordtitle(B, C) )
%   | then return 0.6928183180467428;  // std dev = 0.180, 60.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=58 */
%   | else if ( author(E, D), title(E, B) )
%   | | then return 0.448295606241962;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return -0.03683251744007497;  // std dev = 0.300, 10.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=1 */
%   else return 0.22878639373303108;  // std dev = 0.490, 229.000 (wgt'ed) examples reached here.  /* #neg=136 #pos=93 */
WILL Produced-Tree #3
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordauthor(D, C) )
%   then if ( haswordtitle(B, C) )
%   | then return 0.5367928709789446;  // std dev = 0.180, 60.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=58 */
%   | else if ( author(E, D), title(E, B) )
%   | | then return 0.36236334632262296;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return -0.03254015317273094;  // std dev = 0.300, 10.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=1 */
%   else if ( haswordtitle(B, F), haswordauthor(G, F) )
%   | then if ( author(H, G), title(H, A) )
%   | | then return 0.40674928419898954;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return -0.04465635838839303;  // std dev = 0.331, 8.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */
%   | else return 0.1987161498180874;  // std dev = 0.492, 218.000 (wgt'ed) examples reached here.  /* #neg=128 #pos=90 */
WILL Produced-Tree #4
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordauthor(D, C) )
%   then if ( haswordtitle(B, C) )
%   | then return 0.4034008832853693;  // std dev = 0.180, 60.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=58 */
%   | else if ( author(E, D), title(E, B) )
%   | | then return 0.2807538536965855;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return -0.028843434243526523;  // std dev = 0.300, 10.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=1 */
%   else return 0.15840389333150853;  // std dev = 0.489, 229.000 (wgt'ed) examples reached here.  /* #neg=136 #pos=93 */
WILL Produced-Tree #5
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordauthor(D, C) )
%   then if ( haswordtitle(B, C) )
%   | then return 0.30789442979240567;  // std dev = 0.180, 60.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=58 */
%   | else if ( author(E, D), title(E, B) )
%   | | then return 0.21248070121827137;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return -0.025640477399664095;  // std dev = 0.300, 10.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=1 */
%   else if ( haswordtitle(B, F), haswordauthor(G, F) )
%   | then if ( author(H, G), title(H, A) )
%   | | then return 0.2847084460805233;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return -0.06128731719107605;  // std dev = 0.331, 8.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */
%   | else return 0.1325695734266833;  // std dev = 0.492, 218.000 (wgt'ed) examples reached here.  /* #neg=128 #pos=90 */
WILL Produced-Tree #6
% FOR sametitle(A, B):
%   return 0;  // std dev = 0.443, 302.000 (wgt'ed) examples reached here.  /* #neg=148 #pos=154 */
WILL Produced-Tree #7
% FOR sametitle(A, B):
%   return 0;  // std dev = 0.443, 302.000 (wgt'ed) examples reached here.  /* #neg=148 #pos=154 */
WILL Produced-Tree #8
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordauthor(D, C) )
%   then if ( haswordtitle(B, C) )
%   | then return 0.24240066496454685;  // std dev = 0.180, 60.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=58 */
%   | else if ( author(E, D), title(E, B) )
%   | | then return 0.1594898822817116;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return -0.022850675562834787;  // std dev = 0.300, 10.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=1 */
%   else return 0.10102212178213466;  // std dev = 0.488, 229.000 (wgt'ed) examples reached here.  /* #neg=136 #pos=93 */
WILL Produced-Tree #9
% FOR sametitle(A, B):
%   return 0;  // std dev = 0.442, 302.000 (wgt'ed) examples reached here.  /* #neg=148 #pos=154 */
WILL Produced-Tree #10
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordauthor(D, C) )
%   then if ( haswordtitle(B, C) )
%   | then return 0.19670004057326665;  // std dev = 0.180, 60.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=58 */
%   | else if ( author(E, D), title(E, B) )
%   | | then return 0.11975529938157474;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return -0.02040946845150366;  // std dev = 0.300, 10.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=1 */
%   else return 0.07928510912682483;  // std dev = 0.488, 229.000 (wgt'ed) examples reached here.  /* #neg=136 #pos=93 */


Results
   AUC ROC   = 0.73954
   AUC PR    = 0.695161
   CLL	      = -0.620498
   Precision = 0.762646 at threshold = 0.5
   Recall    = 0.360294
   F1        = 0.489388


Total learning time: 14.161580801010132 seconds
Total inference time: 3.571 seconds
AUC ROC: 0.73954


Results scoring model
   AUC ROC   = 0.716172
   AUC PR    = 0.772847
   CLL	      = -0.583659
   Precision = 0.952381 at threshold = 0.5
   Recall    = 0.38961
   F1        = 0.552995


Total scoring time: 1.362 seconds
Parameter learned model CLL: -0.583659


Structure after Parameter Learning
[['sametitle(A, B)', {'': 'haswordtitle(A, C), haswordauthor(D, C)', 'true': 'haswordtitle(B, C)', 'true,false': 'author(E, D), title(E, B)', 'false': 'haswordtitle(B, F), haswordauthor(G, F)', 'false,true': 'author(H, G), title(H, A)'}, {'true,true': [0.18, 2, 58], 'true,false,true': [0.816, 1, 2], 'true,false,false': [0.3, 9, 1], 'false,true,true': [0.816, 1, 2], 'false,true,false': [0.331, 7, 1], 'false,false': [0.492, 128, 90]}], ['sametitle(A, B)', {'': 'haswordtitle(A, C), haswordauthor(D, C)', 'true': 'haswordtitle(B, C)', 'true,false': 'author(E, D), title(E, B)'}, {'true,true': [0.18, 2, 58], 'true,false,true': [0.816, 1, 2], 'true,false,false': [0.3, 9, 1], 'false': [0.49, 136, 93]}], ['sametitle(A, B)', {'': 'haswordtitle(A, C), haswordauthor(D, C)', 'true': 'haswordtitle(B, C)', 'true,false': 'author(E, D), title(E, B)', 'false': 'haswordtitle(B, F), haswordauthor(G, F)', 'false,true': 'author(H, G), title(H, A)'}, {'true,true': [0.18, 2, 58], 'true,false,true': [0.816, 1, 2], 'true,false,false': [0.3, 9, 1], 'false,true,true': [0.816, 1, 2], 'false,true,false': [0.331, 7, 1], 'false,false': [0.492, 128, 90]}], ['sametitle(A, B)', {'': 'haswordtitle(A, C), haswordauthor(D, C)', 'true': 'haswordtitle(B, C)', 'true,false': 'author(E, D), title(E, B)'}, {'true,true': [0.18, 2, 58], 'true,false,true': [0.816, 1, 2], 'true,false,false': [0.3, 9, 1], 'false': [0.489, 136, 93]}], ['sametitle(A, B)', {'': 'haswordtitle(A, C), haswordauthor(D, C)', 'true': 'haswordtitle(B, C)', 'true,false': 'author(E, D), title(E, B)', 'false': 'haswordtitle(B, F), haswordauthor(G, F)', 'false,true': 'author(H, G), title(H, A)'}, {'true,true': [0.18, 2, 58], 'true,false,true': [0.816, 1, 2], 'true,false,false': [0.3, 9, 1], 'false,true,true': [0.816, 1, 2], 'false,true,false': [0.331, 7, 1], 'false,false': [0.492, 128, 90]}], ['sametitle(A, B)', {}, {}], ['sametitle(A, B)', {}, {}], ['sametitle(A, B)', {'': 'haswordtitle(A, C), haswordauthor(D, C)', 'true': 'haswordtitle(B, C)', 'true,false': 'author(E, D), title(E, B)'}, {'true,true': [0.18, 2, 58], 'true,false,true': [0.816, 1, 2], 'true,false,false': [0.3, 9, 1], 'false': [0.488, 136, 93]}], ['sametitle(A, B)', {}, {}], ['sametitle(A, B)', {'': 'haswordtitle(A, C), haswordauthor(D, C)', 'true': 'haswordtitle(B, C)', 'true,false': 'author(E, D), title(E, B)'}, {'true,true': [0.18, 2, 58], 'true,false,true': [0.816, 1, 2], 'true,false,false': [0.3, 9, 1], 'false': [0.488, 136, 93]}]]
[{'': [0.13736160630512223, 0.2411853320874907], 'false': [0.1983471074380164, 0.2424038380607709], 'false,true': [0.22222222222222224, 0.10937500000000004], 'true': [0.03222222222222181, 0.17751479289940816], 'true,false': [0.22222222222222224, 0.09000000000000005]}, {'': [0.11123233779573757, 0.24022975904226385], 'true': [0.03222222222222181, 0.16229080212002525], 'true,false': [0.2222222222222222, 0.08999999999999996]}, {'': [0.08634624456448783, 0.24009491773657263], 'false': [0.1805681209352628, 0.24240383806076754], 'false,true': [0.22222222222222224, 0.10937500000000004], 'true': [0.032222222222222464, 0.14819603481702354], 'true,false': [0.22222222222222224, 0.09]}, {'': [0.07002893926415045, 0.23921745056252558], 'true': [0.032222222222221604, 0.1375276987435672], 'true,false': [0.2222222222222222, 0.08999999999999998]}, {'': [0.06109721369649851, 0.2390853950972969], 'false': [0.1638962559518914, 0.24240383806077007], 'false,true': [0.2222222222222222, 0.10937499999999997], 'true': [0.03222222222222227, 0.13057821028318645], 'true,false': [0.2222222222222222, 0.08999999999999998]}, {}, {}, {'': [0.05628631303833905, 0.2384997326408898], 'true': [0.03222222222222208, 0.12641484637703249], 'true,false': [0.2222222222222222, 0.09]}, {}, {'': [0.053562956837137646, 0.2384199137907652], 'true': [0.03222222222222211, 0.12400030491667272], 'true,false': [0.22222222222222224, 0.09000000000000001]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Pruning resulted in null theory

Candidate for revision
0;;sametitle(A, B) :- haswordtitle(A, C), haswordauthor(D, C).;true;true
0;true;haswordtitle(B, C).;true;true
0;true,false;author(E, D), title(E, B).;true;true
0;false;haswordtitle(B, F), haswordauthor(G, F).;true;true
0;false,true;author(H, G), title(H, A).;true;true
1;;sametitle(A, B) :- haswordtitle(A, C), haswordauthor(D, C).;true;true
1;true;haswordtitle(B, C).;true;true
1;true,false;author(E, D), title(E, B).;true;true
2;;sametitle(A, B) :- haswordtitle(A, C), haswordauthor(D, C).;true;true
2;true;haswordtitle(B, C).;true;true
2;true,false;author(E, D), title(E, B).;true;true
2;false;haswordtitle(B, F), haswordauthor(G, F).;true;true
2;false,true;author(H, G), title(H, A).;true;true
3;;sametitle(A, B) :- haswordtitle(A, C), haswordauthor(D, C).;true;true
3;true;haswordtitle(B, C).;true;true
3;true,false;author(E, D), title(E, B).;true;true
4;;sametitle(A, B) :- haswordtitle(A, C), haswordauthor(D, C).;true;true
4;true;haswordtitle(B, C).;true;true
4;true,false;author(E, D), title(E, B).;true;true
4;false;haswordtitle(B, F), haswordauthor(G, F).;true;true
4;false,true;author(H, G), title(H, A).;true;true
7;;sametitle(A, B) :- haswordtitle(A, C), haswordauthor(D, C).;true;true
7;true;haswordtitle(B, C).;true;true
7;true,false;author(E, D), title(E, B).;true;true
9;;sametitle(A, B) :- haswordtitle(A, C), haswordauthor(D, C).;true;true
9;true;haswordtitle(B, C).;true;true
9;true,false;author(E, D), title(E, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordauthor(D, C) )
%   then if ( haswordtitle(B, C) )
%   | then return 0.8248156017661792;  // std dev = 0.180, 60.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=58 */
%   | else if ( author(E, D), title(E, B) )
%   | | then return 0.5248156017661788;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return -0.04185106490048778;  // std dev = 0.300, 10.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=1 */
%   else return 0.2642624722174136;  // std dev = 0.491, 229.000 (wgt'ed) examples reached here.  /* #neg=136 #pos=93 */
WILL Produced-Tree #2
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordauthor(D, C) )
%   then if ( haswordtitle(B, C) )
%   | then return 0.6928183180467428;  // std dev = 0.180, 60.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=58 */
%   | else if ( author(E, D), title(E, B) )
%   | | then return 0.448295606241962;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return -0.03683251744007497;  // std dev = 0.300, 10.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=1 */
%   else return 0.22895776974583762;  // std dev = 0.491, 229.000 (wgt'ed) examples reached here.  /* #neg=136 #pos=93 */
WILL Produced-Tree #3
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordauthor(D, C) )
%   then if ( haswordtitle(B, C) )
%   | then return 0.5367928709789446;  // std dev = 0.180, 60.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=58 */
%   | else if ( author(E, D), title(E, B) )
%   | | then return 0.36236334632262296;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return -0.03254015317273094;  // std dev = 0.300, 10.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=1 */
%   else return 0.19308733108125853;  // std dev = 0.491, 229.000 (wgt'ed) examples reached here.  /* #neg=136 #pos=93 */
WILL Produced-Tree #4
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordauthor(D, C) )
%   then if ( haswordtitle(B, C) )
%   | then return 0.4034008832853693;  // std dev = 0.180, 60.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=58 */
%   | else if ( author(E, D), title(E, B) )
%   | | then return 0.2807538536965855;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return -0.028843434243526523;  // std dev = 0.300, 10.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=1 */
%   else if ( haswordtitle(B, F), haswordauthor(G, F) )
%   | then if ( author(H, G), title(H, A) )
%   | | then return 0.4194835195810378;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return -0.12218314708562883;  // std dev = 0.331, 8.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */
%   | else return 0.16566088961161832;  // std dev = 0.492, 218.000 (wgt'ed) examples reached here.  /* #neg=128 #pos=90 */
WILL Produced-Tree #5
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordauthor(D, C) )
%   then if ( haswordtitle(B, C) )
%   | then return 0.30789442979240567;  // std dev = 0.180, 60.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=58 */
%   | else if ( author(E, D), title(E, B) )
%   | | then return 0.21248070121827137;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return -0.025640477399664095;  // std dev = 0.300, 10.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=1 */
%   else if ( haswordtitle(B, F), haswordauthor(G, F) )
%   | then if ( author(H, G), title(H, A) )
%   | | then return 0.3335692308601645;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return -0.10015471761728321;  // std dev = 0.331, 8.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */
%   | else return 0.13356316872473095;  // std dev = 0.492, 218.000 (wgt'ed) examples reached here.  /* #neg=128 #pos=90 */
WILL Produced-Tree #6
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordauthor(D, C) )
%   then if ( haswordtitle(B, C) )
%   | then return 0.24240066496454685;  // std dev = 0.180, 60.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=58 */
%   | else return 0.019227914708983666;  // std dev = 0.356, 13.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=3 */
%   else if ( haswordtitle(B, E), haswordauthor(F, E) )
%   | then if ( author(G, F), title(G, A) )
%   | | then return 0.2558619395468224;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return -0.0831636336517164;  // std dev = 0.331, 8.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */
%   | else return 0.10590490501701066;  // std dev = 0.492, 218.000 (wgt'ed) examples reached here.  /* #neg=128 #pos=90 */
WILL Produced-Tree #7
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordauthor(D, C) )
%   then if ( haswordtitle(B, C) )
%   | then return 0.19670004057326665;  // std dev = 0.180, 60.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=58 */
%   | else if ( author(E, D), title(E, B) )
%   | | then return 0.15468470509411195;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return -0.024937715121825493;  // std dev = 0.300, 10.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=1 */
%   else return 0.07903251326997539;  // std dev = 0.488, 229.000 (wgt'ed) examples reached here.  /* #neg=136 #pos=93 */
WILL Produced-Tree #8
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordauthor(D, C) )
%   then if ( haswordtitle(B, C) )
%   | then return 0.16371858628713193;  // std dev = 0.180, 60.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=58 */
%   | else if ( author(E, D), title(E, B) )
%   | | then return 0.11618383310837625;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return -0.022236720467804977;  // std dev = 0.300, 10.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=1 */
%   else if ( haswordtitle(B, F), haswordauthor(G, F) )
%   | then if ( author(H, G), title(H, A) )
%   | | then return 0.17310261710709754;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return -0.08248351566187058;  // std dev = 0.331, 8.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */
%   | else return 0.06522713569618836;  // std dev = 0.492, 218.000 (wgt'ed) examples reached here.  /* #neg=128 #pos=90 */
WILL Produced-Tree #9
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordauthor(D, C) )
%   then if ( haswordtitle(B, C) )
%   | then return 0.13909109340224876;  // std dev = 0.180, 60.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=58 */
%   | else if ( author(E, D), title(E, B) )
%   | | then return 0.08763353572174397;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return -0.019870805353872627;  // std dev = 0.300, 10.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=1 */
%   else if ( haswordtitle(B, F), haswordauthor(G, F) )
%   | then if ( author(H, G), title(H, A) )
%   | | then return 0.12989383530078105;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return -0.06924727720604733;  // std dev = 0.331, 8.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */
%   | else return 0.05029181063671114;  // std dev = 0.492, 218.000 (wgt'ed) examples reached here.  /* #neg=128 #pos=90 */
WILL Produced-Tree #10
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordauthor(D, C) )
%   then if ( haswordtitle(B, C) )
%   | then return 0.12013771168374343;  // std dev = 0.180, 60.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=58 */
%   | else if ( author(E, D), title(E, B) )
%   | | then return 0.06643293190570969;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return -0.017790184090931194;  // std dev = 0.300, 10.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=1 */
%   else if ( haswordtitle(B, F), haswordauthor(G, F) )
%   | then if ( author(H, G), title(H, A) )
%   | | then return 0.09779446905720672;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return -0.05863788766643392;  // std dev = 0.331, 8.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */
%   | else return 0.03859054659975991;  // std dev = 0.492, 218.000 (wgt'ed) examples reached here.  /* #neg=128 #pos=90 */


Results
   AUC ROC   = 0.73954
   AUC PR    = 0.695161
   CLL	      = -0.610558
   Precision = 0.759542 at threshold = 0.5
   Recall    = 0.365809
   F1        = 0.493797


Total learning time: 18.09212327003479 seconds
Total inference time: 3.798 seconds
AUC ROC: 0.73954


Results scoring model
   AUC ROC   = 0.716172
   AUC PR    = 0.772847
   CLL	      = -0.566224
   Precision = 0.939394 at threshold = 0.5
   Recall    = 0.402597
   F1        = 0.563636


Total scoring time: 1.421 seconds
Refined model CLL: -0.566224


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.73954
   AUC PR    = 0.695161
   CLL	      = -0.610558
   Precision = 0.759542 at threshold = 0.5
   Recall    = 0.365809
   F1        = 0.493797


Total learning time: 35.03670407104492 seconds
Total inference time: 3.798 seconds
AUC ROC: 0.73954
Total revision time: 35.03670407104492
Best scored revision CLL: -0.566224


Dataset: 6_imdb_cora, Fold: 5, Type: Transfer (trRDN-B), Time: 00:54:13
{'AUC ROC': 0.73954, 'AUC PR': 0.695161, 'CLL': -0.610558, 'Precision': [0.759542, 0.5], 'Recall': 0.365809, 'F1': 0.493797, 'Learning time': 35.03670407104492, 'Inference time': 3.798, 'parameter': {'AUC ROC': 0.73954, 'AUC PR': 0.695161, 'CLL': -0.620498, 'Precision': [0.762646, 0.5], 'Recall': 0.360294, 'F1': 0.489388, 'Learning time': 14.161580801010132, 'Inference time': 3.571}}


WILL Produced-Tree #1
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordauthor(D, C) )
%   then if ( haswordtitle(B, C) )
%   | then return 0.8248156017661792;  // std dev = 0.180, 60.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=58 */
%   | else if ( author(E, D), title(E, B) )
%   | | then return 0.5248156017661788;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return -0.04185106490048778;  // std dev = 0.300, 10.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=1 */
%   else if ( haswordtitle(B, F), haswordauthor(G, F) )
%   | then if ( author(H, G), title(H, A) )
%   | | then return 0.5248156017661788;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return -0.016851064900487787;  // std dev = 0.331, 8.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */
%   | else return 0.27099297179675785;  // std dev = 0.492, 218.000 (wgt'ed) examples reached here.  /* #neg=128 #pos=90 */
WILL Produced-Tree #2
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordauthor(D, C) )
%   then if ( haswordtitle(B, C) )
%   | then return 0.6928183180467428;  // std dev = 0.180, 60.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=58 */
%   | else if ( author(E, D), title(E, B) )
%   | | then return 0.448295606241962;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return -0.03683251744007497;  // std dev = 0.300, 10.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=1 */
%   else if ( haswordtitle(B, F), haswordauthor(G, F) )
%   | then if ( author(H, G), title(H, A) )
%   | | then return 0.448295606241962;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return -0.014812149378556561;  // std dev = 0.331, 8.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */
%   | else return 0.23470502083103983;  // std dev = 0.492, 218.000 (wgt'ed) examples reached here.  /* #neg=128 #pos=90 */
WILL Produced-Tree #3
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordauthor(D, C) )
%   then if ( haswordtitle(B, C) )
%   | then return 0.5367928709789446;  // std dev = 0.180, 60.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=58 */
%   | else if ( author(E, D), title(E, B) )
%   | | then return 0.36236334632262296;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return -0.03254015317273094;  // std dev = 0.300, 10.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=1 */
%   else return 0.19251266342706985;  // std dev = 0.489, 229.000 (wgt'ed) examples reached here.  /* #neg=136 #pos=93 */
WILL Produced-Tree #4
% FOR sametitle(A, B):
%   return 0;  // std dev = 0.452, 302.000 (wgt'ed) examples reached here.  /* #neg=148 #pos=154 */
WILL Produced-Tree #5
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordauthor(D, C) )
%   then if ( haswordtitle(B, C) )
%   | then return 0.4034008832853693;  // std dev = 0.180, 60.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=58 */
%   | else if ( author(E, D), title(E, B) )
%   | | then return 0.2807538536965855;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return -0.028843434243526523;  // std dev = 0.300, 10.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=1 */
%   else return 0.1584696800762259;  // std dev = 0.489, 229.000 (wgt'ed) examples reached here.  /* #neg=136 #pos=93 */
WILL Produced-Tree #6
% FOR sametitle(A, B):
%   return 0;  // std dev = 0.446, 302.000 (wgt'ed) examples reached here.  /* #neg=148 #pos=154 */
WILL Produced-Tree #7
% FOR sametitle(A, B):
%   return 0;  // std dev = 0.446, 302.000 (wgt'ed) examples reached here.  /* #neg=148 #pos=154 */
WILL Produced-Tree #8
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordauthor(D, C) )
%   then if ( haswordtitle(B, C) )
%   | then return 0.30789442979240567;  // std dev = 0.180, 60.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=58 */
%   | else if ( author(E, D), title(E, B) )
%   | | then return 0.21248070121827137;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return -0.025640477399664095;  // std dev = 0.300, 10.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=1 */
%   else return 0.12784954504974083;  // std dev = 0.489, 229.000 (wgt'ed) examples reached here.  /* #neg=136 #pos=93 */
WILL Produced-Tree #9
% FOR sametitle(A, B):
%   if ( haswordtitle(B, C), haswordauthor(D, C) )
%   then if ( haswordtitle(A, C) )
%   | then return 0.24240066496454685;  // std dev = 0.180, 60.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=58 */
%   | else if ( author(E, D), title(E, A) )
%   | | then return 0.25281297055934876;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return -0.08889643124426556;  // std dev = 0.296, 10.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=1 */
%   else return 0.10318506685362755;  // std dev = 0.488, 229.000 (wgt'ed) examples reached here.  /* #neg=136 #pos=93 */
WILL Produced-Tree #10
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordauthor(D, C) )
%   then if ( haswordtitle(B, C) )
%   | then return 0.19670004057326665;  // std dev = 0.180, 60.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=58 */
%   | else if ( author(E, D), title(E, B) )
%   | | then return 0.1337408404834012;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return -0.030245034584855356;  // std dev = 0.299, 10.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=1 */
%   else return 0.07990670945987756;  // std dev = 0.488, 229.000 (wgt'ed) examples reached here.  /* #neg=136 #pos=93 */


Results
   AUC ROC   = 0.739647
   AUC PR    = 0.695209
   CLL	      = -0.620215
   Precision = 0.762646 at threshold = 0.5
   Recall    = 0.360294
   F1        = 0.489388


Total learning time: 12.859792947769165 seconds
Total inference time: 3.064 seconds
AUC ROC: 0.739647


Dataset: 6_imdb_cora, Fold: 5, Type: Scratch (RDN-B), Time: 00:54:29
{'AUC ROC': 0.739647, 'AUC PR': 0.695209, 'CLL': -0.620215, 'Precision': [0.762646, 0.5], 'Recall': 0.360294, 'F1': 0.489388, 'Learning time': 12.859792947769165, 'Inference time': 3.064}


Starting fold 1

Target train facts examples: 7463
Target train pos examples: 162
Target train neg examples: 236

Target test facts examples: 35095
Target test pos  examples: 536
Target test neg examples: 480

******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


WILL Produced-Tree #1
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordauthor(D, C) )
%   then if ( haswordtitle(B, C) )
%   | then return 0.7369368138873914;  // std dev = 0.326, 66.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=58 */
%   | else if ( author(E, D), title(E, B) )
%   | | then return 0.23314893509951226;  // std dev = 0.484, 8.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=3 */
%   | | else return -0.030739953789376603;  // std dev = 0.314, 54.000 (wgt'ed) examples reached here.  /* #neg=48 #pos=6 */
%   else if ( haswordtitle(B, F), haswordauthor(G, F) )
%   | then return 0.01886322081379807;  // std dev = 0.367, 56.000 (wgt'ed) examples reached here.  /* #neg=47 #pos=9 */
%   | else return 0.2600180939780157;  // std dev = 0.490, 214.000 (wgt'ed) examples reached here.  /* #neg=128 #pos=86 */
WILL Produced-Tree #2
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordauthor(D, C) )
%   then if ( haswordtitle(B, C) )
%   | then return 0.6220633676283396;  // std dev = 0.326, 66.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=58 */
%   | else return 0.0025575155492885103;  // std dev = 0.350, 62.000 (wgt'ed) examples reached here.  /* #neg=53 #pos=9 */
%   else if ( haswordtitle(B, E), haswordauthor(F, E) )
%   | then if ( author(G, F), title(G, A) )
%   | | then return 0.4558371783570768;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | else return -0.026515762819393735;  // std dev = 0.322, 51.000 (wgt'ed) examples reached here.  /* #neg=45 #pos=6 */
%   | else return 0.22533125375206722;  // std dev = 0.490, 214.000 (wgt'ed) examples reached here.  /* #neg=128 #pos=86 */
WILL Produced-Tree #3
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordauthor(D, C) )
%   then if ( haswordtitle(B, C) )
%   | then return 0.48728512046144257;  // std dev = 0.326, 66.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=58 */
%   | else return 0.0022448708112555193;  // std dev = 0.350, 62.000 (wgt'ed) examples reached here.  /* #neg=53 #pos=9 */
%   else if ( haswordtitle(B, E), haswordauthor(F, E) )
%   | then if ( author(G, F), title(G, A) )
%   | | then return 0.39006207073532295;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | else return -0.02327501784494782;  // std dev = 0.322, 51.000 (wgt'ed) examples reached here.  /* #neg=45 #pos=6 */
%   | else return 0.19015949657647718;  // std dev = 0.490, 214.000 (wgt'ed) examples reached here.  /* #neg=128 #pos=86 */
WILL Produced-Tree #4
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordauthor(D, C) )
%   then if ( haswordtitle(B, C) )
%   | then return 0.3672186186501392;  // std dev = 0.326, 66.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=58 */
%   | else if ( author(E, D), title(E, B) )
%   | | then return 0.20164712849349314;  // std dev = 0.484, 8.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=3 */
%   | | else return -0.02761182497890157;  // std dev = 0.314, 54.000 (wgt'ed) examples reached here.  /* #neg=48 #pos=6 */
%   else if ( haswordtitle(B, F), haswordauthor(G, F) )
%   | then if ( author(H, G), title(H, A) )
%   | | then return 0.31813665766061316;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | else return -0.02048075265286831;  // std dev = 0.322, 51.000 (wgt'ed) examples reached here.  /* #neg=45 #pos=6 */
%   | else return 0.15668998800103418;  // std dev = 0.490, 214.000 (wgt'ed) examples reached here.  /* #neg=128 #pos=86 */
WILL Produced-Tree #5
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordvenue(D, C) )
%   then if ( title(E, A), venue(E, D) )
%   | then if ( samebib(E, F), title(F, B) )
%   | | then if ( venue(F, D) )
%   | | | then return 0.634839330347209;  // std dev = 1.633, 107.000 (wgt'ed) examples reached here.  /* #pos=107 */
%   | | | else return 0.6174907218977388;  // std dev = 0.980, 27.000 (wgt'ed) examples reached here.  /* #pos=27 */
%   | | else return -0.2044036900024003;  // std dev = 0.188, 235.000 (wgt'ed) examples reached here.  /* #neg=227 #pos=8 */
%   | else if ( haswordtitle(A, G), haswordauthor(H, G) )
%   | | then if ( haswordtitle(B, G) )
%   | | | then return 0.39807224506280847;  // std dev = 2.11e-08, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.0312099706294016;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | | else return 0.7246810069936309;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( haswordtitle(B, I), haswordauthor(J, I) )
%   | then return 0.22014562011883285;  // std dev = 0.616, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | else return 0.29461215547818287;  // std dev = 0.860, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
WILL Produced-Tree #6
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordvenue(D, C) )
%   then if ( title(E, A), venue(E, D) )
%   | then if ( samebib(E, F), title(F, B) )
%   | | then if ( venue(F, D) )
%   | | | then return 0.49650827369338724;  // std dev = 1.662, 107.000 (wgt'ed) examples reached here.  /* #pos=107 */
%   | | | else return 0.4895811450417477;  // std dev = 1.037, 27.000 (wgt'ed) examples reached here.  /* #pos=27 */
%   | | else return -0.17115129011965083;  // std dev = 0.185, 235.000 (wgt'ed) examples reached here.  /* #neg=227 #pos=8 */
%   | else if ( haswordtitle(A, G), haswordauthor(H, G) )
%   | | then if ( haswordtitle(B, G) )
%   | | | then return 0.30755472608314727;  // std dev = 1.05e-08, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.027513269048771303;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | | else return 0.5604824199646525;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( haswordtitle(A, I), haswordauthor(J, I) )
%   | then return 0.17318925131088184;  // std dev = 0.601, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | else return 0.2492797028786001;  // std dev = 0.826, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
WILL Produced-Tree #7
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordvenue(D, C) )
%   then if ( title(E, A), venue(E, D) )
%   | then if ( samebib(E, F), title(F, B) )
%   | | then if ( venue(F, D) )
%   | | | then return 0.3864376379581657;  // std dev = 1.509, 107.000 (wgt'ed) examples reached here.  /* #pos=107 */
%   | | | else return 0.3882007109206239;  // std dev = 0.982, 27.000 (wgt'ed) examples reached here.  /* #pos=27 */
%   | | else return -0.14598406987124724;  // std dev = 0.183, 235.000 (wgt'ed) examples reached here.  /* #neg=227 #pos=8 */
%   | else if ( haswordtitle(A, G), haswordauthor(H, G) )
%   | | then if ( haswordtitle(B, G) )
%   | | | then return 0.24617252978697307;  // std dev = 1.83e-08, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.024184624953725097;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | | else return 0.4213187196417869;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( haswordtitle(B, I), haswordauthor(J, I) )
%   | then return 0.13881278856736562;  // std dev = 0.588, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | else return 0.20216544968319936;  // std dev = 0.805, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
WILL Produced-Tree #8
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordvenue(D, C) )
%   then if ( title(E, A), venue(E, D) )
%   | then if ( samebib(E, F), title(F, B) )
%   | | then if ( venue(F, D) )
%   | | | then return 0.3064837333692104;  // std dev = 1.318, 107.000 (wgt'ed) examples reached here.  /* #pos=107 */
%   | | | else return 0.3127421390197728;  // std dev = 0.888, 27.000 (wgt'ed) examples reached here.  /* #pos=27 */
%   | | else return -0.12642523081481877;  // std dev = 0.181, 235.000 (wgt'ed) examples reached here.  /* #neg=227 #pos=8 */
%   | else if ( haswordtitle(A, G), haswordauthor(H, G) )
%   | | then if ( haswordtitle(B, G) )
%   | | | then return 0.20337970921485166;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.021204099829374917;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | | else return 0.3232926446695569;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( haswordtitle(A, I), haswordauthor(J, I) )
%   | then return 0.10837055691418744;  // std dev = 0.594, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | else return 0.16566263868895692;  // std dev = 0.779, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
WILL Produced-Tree #9
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordvenue(D, C) )
%   then if ( title(E, A), venue(E, D) )
%   | then if ( samebib(E, F), title(F, B) )
%   | | then if ( venue(F, D) )
%   | | | then return 0.24948396086185276;  // std dev = 1.145, 107.000 (wgt'ed) examples reached here.  /* #pos=107 */
%   | | | else return 0.2573286265293952;  // std dev = 0.789, 27.000 (wgt'ed) examples reached here.  /* #pos=27 */
%   | | else return -0.11086964394220812;  // std dev = 0.180, 235.000 (wgt'ed) examples reached here.  /* #neg=227 #pos=8 */
%   | else if ( haswordtitle(A, G), haswordauthor(H, G) )
%   | | then if ( haswordtitle(B, G) )
%   | | | then return 0.1724042028944549;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.01854849780748505;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | | else return 0.25693247335634317;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( haswordtitle(A, I), haswordauthor(J, I) )
%   | then return 0.08749793417183911;  // std dev = 0.592, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | else return 0.13001932735272942;  // std dev = 0.768, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
WILL Produced-Tree #10
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordauthor(D, C) )
%   then if ( author(E, D), title(E, B) )
%   | then if ( author(F, D), title(F, A) )
%   | | then return 0.03956333172744867;  // std dev = 0.187, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return 0.32133018398961727;  // std dev = 0.495, 7.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=3 */
%   | else if ( haswordtitle(B, C) )
%   | | then return 0.05073058134497796;  // std dev = 0.200, 64.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=56 */
%   | | else return -0.018846960759475118;  // std dev = 0.199, 54.000 (wgt'ed) examples reached here.  /* #neg=48 #pos=6 */
%   else return 0.013134689390112782;  // std dev = 0.211, 270.000 (wgt'ed) examples reached here.  /* #neg=175 #pos=95 */


Results
   AUC ROC   = 0.955605
   AUC PR    = 0.953536
   CLL	      = -0.256816
   Precision = 0.949275 at threshold = 0.5
   Recall    = 0.977612
   F1        = 0.963235


Total learning time: 409.7325668334961 seconds
Total inference time: 130.076 seconds
AUC ROC: 0.955605


Results scoring model
   AUC ROC   = 0.983299
   AUC PR    = 0.986414
   CLL	      = -0.216614
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.944444
   F1        = 0.971429


Total scoring time: 4.171 seconds
Parameter learned model CLL: -0.216614


Structure after Parameter Learning
[['sametitle(A, B)', {'': 'haswordtitle(A, C), haswordauthor(D, C)', 'true': 'haswordtitle(B, C)', 'true,false': 'author(E, D), title(E, B)', 'false': 'haswordtitle(B, F), haswordauthor(G, F)'}, {'true,true': [0.326, 8, 58], 'true,false,true': [0.484, 5, 3], 'true,false,false': [0.314, 48, 6], 'false,true': [0.367, 47, 9], 'false,false': [0.49, 128, 86]}], ['sametitle(A, B)', {'': 'haswordtitle(A, C), haswordauthor(D, C)', 'true': 'haswordtitle(B, C)', 'false': 'haswordtitle(B, E), haswordauthor(F, E)', 'false,true': 'author(G, F), title(G, A)'}, {'true,true': [0.326, 8, 58], 'true,false': [0.35, 53, 9], 'false,true,true': [1.095, 2, 3], 'false,true,false': [0.322, 45, 6], 'false,false': [0.49, 128, 86]}], ['sametitle(A, B)', {'': 'haswordtitle(A, C), haswordauthor(D, C)', 'true': 'haswordtitle(B, C)', 'false': 'haswordtitle(B, E), haswordauthor(F, E)', 'false,true': 'author(G, F), title(G, A)'}, {'true,true': [0.326, 8, 58], 'true,false': [0.35, 53, 9], 'false,true,true': [1.095, 2, 3], 'false,true,false': [0.322, 45, 6], 'false,false': [0.49, 128, 86]}], ['sametitle(A, B)', {'': 'haswordtitle(A, C), haswordauthor(D, C)', 'true': 'haswordtitle(B, C)', 'true,false': 'author(E, D), title(E, B)', 'false': 'haswordtitle(B, F), haswordauthor(G, F)', 'false,true': 'author(H, G), title(H, A)'}, {'true,true': [0.326, 8, 58], 'true,false,true': [0.484, 5, 3], 'true,false,false': [0.314, 48, 6], 'false,true,true': [1.095, 2, 3], 'false,true,false': [0.322, 45, 6], 'false,false': [0.49, 128, 86]}], ['sametitle(A, B)', {'': 'haswordtitle(A, C), haswordvenue(D, C)', 'true': 'title(E, A), venue(E, D)', 'true,true': 'samebib(E, F), title(F, B)', 'true,true,true': 'venue(F, D)', 'true,false': 'haswordtitle(A, G), haswordauthor(H, G)', 'true,false,true': 'haswordtitle(B, G)', 'false': 'haswordtitle(B, I), haswordauthor(J, I)'}, {'true,true,true,true': [1.633, 0, 107], 'true,true,true,false': [0.98, 0, 27], 'true,true,false': [0.188, 227, 8], 'true,false,true,true': [2.11e-08, 0, 9], 'true,false,true,false': [0.913, 5, 1], 'true,false,false': [0.0, 0, 4], 'false,true': [0.616, 2, 4], 'false,false': [0.86, 2, 2]}], ['sametitle(A, B)', {'': 'haswordtitle(A, C), haswordvenue(D, C)', 'true': 'title(E, A), venue(E, D)', 'true,true': 'samebib(E, F), title(F, B)', 'true,true,true': 'venue(F, D)', 'true,false': 'haswordtitle(A, G), haswordauthor(H, G)', 'true,false,true': 'haswordtitle(B, G)', 'false': 'haswordtitle(A, I), haswordauthor(J, I)'}, {'true,true,true,true': [1.662, 0, 107], 'true,true,true,false': [1.037, 0, 27], 'true,true,false': [0.185, 227, 8], 'true,false,true,true': [1.05e-08, 0, 9], 'true,false,true,false': [0.913, 5, 1], 'true,false,false': [0.0, 0, 4], 'false,true': [0.601, 2, 4], 'false,false': [0.826, 2, 2]}], ['sametitle(A, B)', {'': 'haswordtitle(A, C), haswordvenue(D, C)', 'true': 'title(E, A), venue(E, D)', 'true,true': 'samebib(E, F), title(F, B)', 'true,true,true': 'venue(F, D)', 'true,false': 'haswordtitle(A, G), haswordauthor(H, G)', 'true,false,true': 'haswordtitle(B, G)', 'false': 'haswordtitle(B, I), haswordauthor(J, I)'}, {'true,true,true,true': [1.509, 0, 107], 'true,true,true,false': [0.982, 0, 27], 'true,true,false': [0.183, 227, 8], 'true,false,true,true': [1.83e-08, 0, 9], 'true,false,true,false': [0.913, 5, 1], 'true,false,false': [0.0, 0, 4], 'false,true': [0.588, 2, 4], 'false,false': [0.805, 2, 2]}], ['sametitle(A, B)', {'': 'haswordtitle(A, C), haswordvenue(D, C)', 'true': 'title(E, A), venue(E, D)', 'true,true': 'samebib(E, F), title(F, B)', 'true,true,true': 'venue(F, D)', 'true,false': 'haswordtitle(A, G), haswordauthor(H, G)', 'true,false,true': 'haswordtitle(B, G)', 'false': 'haswordtitle(A, I), haswordauthor(J, I)'}, {'true,true,true,true': [1.318, 0, 107], 'true,true,true,false': [0.888, 0, 27], 'true,true,false': [0.181, 227, 8], 'true,false,true,true': [0.0, 0, 9], 'true,false,true,false': [0.913, 5, 1], 'true,false,false': [0.0, 0, 4], 'false,true': [0.594, 2, 4], 'false,false': [0.779, 2, 2]}], ['sametitle(A, B)', {'': 'haswordtitle(A, C), haswordvenue(D, C)', 'true': 'title(E, A), venue(E, D)', 'true,true': 'samebib(E, F), title(F, B)', 'true,true,true': 'venue(F, D)', 'true,false': 'haswordtitle(A, G), haswordauthor(H, G)', 'true,false,true': 'haswordtitle(B, G)', 'false': 'haswordtitle(A, I), haswordauthor(J, I)'}, {'true,true,true,true': [1.145, 0, 107], 'true,true,true,false': [0.789, 0, 27], 'true,true,false': [0.18, 227, 8], 'true,false,true,true': [0.0, 0, 9], 'true,false,true,false': [0.913, 5, 1], 'true,false,false': [0.0, 0, 4], 'false,true': [0.592, 2, 4], 'false,false': [0.768, 2, 2]}], ['sametitle(A, B)', {'': 'haswordtitle(A, C), haswordauthor(D, C)', 'true': 'author(E, D), title(E, B)', 'true,true': 'author(F, D), title(F, A)', 'true,false': 'haswordtitle(B, C)'}, {'true,true,true': [0.187, 1, 2], 'true,true,false': [0.495, 4, 3], 'true,false,true': [0.2, 8, 56], 'true,false,false': [0.199, 48, 6], 'false': [0.211, 175, 95]}]]
[{'': [0.24945068359374953, 0.22805212620027596], 'true': [0.10651974288337872, 0.12408949011446431], 'false': [0.13488520408163285, 0.24037033802078886], 'true,false': [0.2343749999999999, 0.09876543209876568]}, {'': [0.20995648875073816, 0.22565751713986], 'false': [0.13488520408163276, 0.24037033802078653], 'true': [0.10651974288338104, 0.12217614298167391], 'false,true': [0.24000000000000005, 0.10380622837370253]}, {'': [0.17286036548573974, 0.22257220678584672], 'false': [0.1298586457838898, 0.24037033802078797], 'true': [0.10651974288337995, 0.12217300568156267], 'false,true': [0.24, 0.10380622837370264]}, {'': [0.14741953040950942, 0.22005106874118976], 'false': [0.12528996639986725, 0.2403703380207876], 'true': [0.10651974288337966, 0.12217025055501597], 'false,true': [0.24000000000000013, 0.10380622837370256], 'true,false': [0.2343750000000001, 0.09876543209876532]}, {'': [0.19246536385031104, 0.1133040110274937], 'true': [0.19377959254399282, 0.10660102367593091], 'true,true': [0.027121780499758913, 0.03516371944173389], 'false': [0.06331576772790835, 0.18495921704381646], 'true,false': [0.0878566583721441, 0.0], 'true,false,true': [4.9343245538895844e-17, 0.13888888888888892], 'true,true,true': [0.024925701664599842, 0.03558442943038254]}, {'': [0.13406641790286492, 0.10571667681496688], 'true': [0.13481667436463945, 0.08085468400746151], 'true,true': [0.02863766079101595, 0.03415913997705372], 'false': [0.06020049249679758, 0.17051709920035346], 'true,false': [0.07437712779346027, 0.0], 'true,false,true': [1.2335811384723961e-17, 0.13888888888888892], 'true,true,true': [0.025804424706976026, 0.03982735398788151]}, {'': [0.09546852446504257, 0.1002649954462477], 'false': [0.05763131336823244, 0.161807382760996], 'true': [0.09570841168374007, 0.06477532922157284], 'true,true': [0.02419596122311853, 0.03340693831756505], 'true,false': [0.06738242672969687, 0.0], 'true,false,true': [3.700743415417188e-17, 0.1388888888888889], 'true,true,true': [0.021279726398145297, 0.03575040972421492]}, {'': [0.07153380818101329, 0.0967358845157292], 'false': [0.05874879517970552, 0.15174708893931252], 'true': [0.07135911888901666, 0.05632495996145879], 'true,true': [0.01885105669428377, 0.0328460128020932], 'true,false': [0.06352066419274828, 0.0], 'true,false,true': [-3.0839528461809905e-17, 0.13888888888888887], 'true,true,true': [0.016234929053253667, 0.029187397988207]}, {'': [0.05666310569530451, 0.09448647024219178], 'false': [0.05845160297718043, 0.14745392981288247], 'true': [0.0561912831062277, 0.051891040570915474], 'true,true': [0.01444254966563972, 0.03242643594301844], 'true,false': [0.061236734272629635, 0.0], 'true,false,true': [0.0, 0.13888888888888892], 'true,true,true': [0.012250475892454744, 0.02308051766623029]}, {'': [0.05625691208636274, 0.044486139731041346], 'true': [0.1915959684094902, 0.04107774903929666], 'true,true': [0.011649865279450599, 0.2448979591836736], 'true,false': [0.03994184710651227, 0.039798357424406634]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
4;;sametitle(A, B) :- haswordtitle(A, C), haswordvenue(D, C).;true;true
4;true;title(E, A), venue(E, D).;true;true
4;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
4;true,false,true;haswordtitle(B, G).;true;true
5;;sametitle(A, B) :- haswordtitle(A, C), haswordvenue(D, C).;true;true
5;true;title(E, A), venue(E, D).;true;true
5;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
5;true,false,true;haswordtitle(B, G).;true;true
6;;sametitle(A, B) :- haswordtitle(A, C), haswordvenue(D, C).;true;true
6;true;title(E, A), venue(E, D).;true;true
6;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
6;true,false,true;haswordtitle(B, G).;true;true
7;;sametitle(A, B) :- haswordtitle(A, C), haswordvenue(D, C).;true;true
7;true;title(E, A), venue(E, D).;true;true
7;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
7;true,false,true;haswordtitle(B, G).;true;true
8;;sametitle(A, B) :- haswordtitle(A, C), haswordvenue(D, C).;true;true
8;true;title(E, A), venue(E, D).;true;true
8;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
8;true,false,true;haswordtitle(B, G).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordauthor(D, C) )
%   then if ( haswordtitle(B, C) )
%   | then return 0.7369368138873914;  // std dev = 0.326, 66.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=58 */
%   | else if ( author(E, D), title(E, B) )
%   | | then return 0.23314893509951226;  // std dev = 0.484, 8.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=3 */
%   | | else return -0.030739953789376603;  // std dev = 0.314, 54.000 (wgt'ed) examples reached here.  /* #neg=48 #pos=6 */
%   else if ( haswordtitle(B, F), haswordauthor(G, F) )
%   | then if ( author(H, G), title(H, A) )
%   | | then return 0.4581489350995122;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | else return -0.024204006076958298;  // std dev = 0.322, 51.000 (wgt'ed) examples reached here.  /* #neg=45 #pos=6 */
%   | else return 0.2600180939780157;  // std dev = 0.490, 214.000 (wgt'ed) examples reached here.  /* #neg=128 #pos=86 */
WILL Produced-Tree #2
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordauthor(D, C) )
%   then if ( haswordtitle(B, C) )
%   | then return 0.6220633676283396;  // std dev = 0.326, 66.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=58 */
%   | else if ( author(E, D), title(E, B) )
%   | | then return 0.202334239218108;  // std dev = 0.484, 8.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=3 */
%   | | else return -0.027039036105351338;  // std dev = 0.314, 54.000 (wgt'ed) examples reached here.  /* #neg=48 #pos=6 */
%   else if ( haswordtitle(B, F), haswordauthor(G, F) )
%   | then return 0.015688057809861582;  // std dev = 0.360, 56.000 (wgt'ed) examples reached here.  /* #neg=47 #pos=9 */
%   | else return 0.22533125375206722;  // std dev = 0.490, 214.000 (wgt'ed) examples reached here.  /* #neg=128 #pos=86 */
WILL Produced-Tree #3
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordauthor(D, C) )
%   then if ( haswordtitle(B, C) )
%   | then return 0.48728512046144257;  // std dev = 0.326, 66.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=58 */
%   | else if ( author(E, D), title(E, B) )
%   | | then return 0.17149281961528945;  // std dev = 0.484, 8.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=3 */
%   | | else return -0.023851027745157644;  // std dev = 0.314, 54.000 (wgt'ed) examples reached here.  /* #neg=48 #pos=6 */
%   else if ( haswordtitle(B, F), haswordauthor(G, F) )
%   | then return 0.01373802692710944;  // std dev = 0.360, 56.000 (wgt'ed) examples reached here.  /* #neg=47 #pos=9 */
%   | else return 0.19015949657647718;  // std dev = 0.490, 214.000 (wgt'ed) examples reached here.  /* #neg=128 #pos=86 */
WILL Produced-Tree #4
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordauthor(D, C) )
%   then if ( haswordtitle(B, C) )
%   | then return 0.3672186186501392;  // std dev = 0.326, 66.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=58 */
%   | else return -1.0374326409002248E-5;  // std dev = 0.345, 62.000 (wgt'ed) examples reached here.  /* #neg=53 #pos=9 */
%   else return 0.12668283725333118;  // std dev = 0.470, 270.000 (wgt'ed) examples reached here.  /* #neg=175 #pos=95 */
WILL Produced-Tree #5
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordvenue(D, C) )
%   then if ( title(E, A), venue(E, D) )
%   | then if ( samebib(E, F), title(F, B) )
%   | | then if ( venue(F, D) )
%   | | | then return 0.6381212075848588;  // std dev = 1.648, 107.000 (wgt'ed) examples reached here.  /* #pos=107 */
%   | | | else return 0.6176022425706589;  // std dev = 0.973, 27.000 (wgt'ed) examples reached here.  /* #pos=27 */
%   | | else return -0.20329444680958247;  // std dev = 0.190, 235.000 (wgt'ed) examples reached here.  /* #neg=227 #pos=8 */
%   | else if ( haswordtitle(A, G), haswordauthor(H, G) )
%   | | then if ( haswordtitle(B, G) )
%   | | | then return 0.39807224506280847;  // std dev = 2.11e-08, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.0344660983293485;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | | else return 0.7306274497274219;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( haswordtitle(B, I), haswordauthor(J, I) )
%   | then return 0.21248872375186031;  // std dev = 0.643, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | else return 0.29921344069505185;  // std dev = 0.863, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
WILL Produced-Tree #6
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordvenue(D, C) )
%   then if ( title(E, A), venue(E, D) )
%   | then if ( samebib(E, F), title(F, B) )
%   | | then if ( venue(F, D) )
%   | | | then return 0.4996546261655779;  // std dev = 1.674, 107.000 (wgt'ed) examples reached here.  /* #pos=107 */
%   | | | else return 0.4891395243629711;  // std dev = 1.021, 27.000 (wgt'ed) examples reached here.  /* #pos=27 */
%   | | else return -0.17013219937554966;  // std dev = 0.188, 235.000 (wgt'ed) examples reached here.  /* #neg=227 #pos=8 */
%   | else if ( haswordtitle(A, G), haswordauthor(H, G) )
%   | | then if ( haswordtitle(B, G) )
%   | | | then return 0.30755472608314727;  // std dev = 1.05e-08, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.030461657873873157;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | | else return 0.5664006818732328;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( haswordtitle(B, I), haswordauthor(J, I) )
%   | then return 0.1692330849658481;  // std dev = 0.621, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | else return 0.24871206189048364;  // std dev = 0.838, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
WILL Produced-Tree #7
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordvenue(D, C) )
%   then if ( title(E, A), venue(E, D) )
%   | then if ( samebib(E, F), title(F, B) )
%   | | then if ( venue(F, D) )
%   | | | then return 0.38886482658792787;  // std dev = 1.513, 107.000 (wgt'ed) examples reached here.  /* #pos=107 */
%   | | | else return 0.38718013858110917;  // std dev = 0.959, 27.000 (wgt'ed) examples reached here.  /* #pos=27 */
%   | | else return -0.14507764643938115;  // std dev = 0.186, 235.000 (wgt'ed) examples reached here.  /* #neg=227 #pos=8 */
%   | else if ( haswordtitle(A, G), haswordauthor(H, G) )
%   | | then if ( haswordtitle(B, G) )
%   | | | then return 0.24617252978697307;  // std dev = 1.83e-08, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.026837868317630586;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | | else return 0.42574821741390934;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( haswordtitle(B, I), haswordauthor(J, I) )
%   | then return 0.13520936983117401;  // std dev = 0.609, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | else return 0.2010329145755168;  // std dev = 0.819, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
WILL Produced-Tree #8
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordvenue(D, C) )
%   then if ( title(E, A), venue(E, D) )
%   | then if ( samebib(E, F), title(F, B) )
%   | | then if ( venue(F, D) )
%   | | | then return 0.3081690211510959;  // std dev = 1.314, 107.000 (wgt'ed) examples reached here.  /* #pos=107 */
%   | | | else return 0.3113607248567352;  // std dev = 0.859, 27.000 (wgt'ed) examples reached here.  /* #pos=27 */
%   | | else return -0.12562805597695692;  // std dev = 0.184, 235.000 (wgt'ed) examples reached here.  /* #neg=227 #pos=8 */
%   | else if ( haswordtitle(A, G), haswordauthor(H, G) )
%   | | then if ( haswordtitle(B, G) )
%   | | | then return 0.20337970921485166;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.023578588623496443;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | | else return 0.3262999282904451;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( haswordtitle(A, I), haswordauthor(J, I) )
%   | then return 0.10733546989333358;  // std dev = 0.608, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | else return 0.1608084235054278;  // std dev = 0.802, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
WILL Produced-Tree #9
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordvenue(D, C) )
%   then if ( title(E, A), venue(E, D) )
%   | then return 0.021226954883639255;  // std dev = 0.238, 369.000 (wgt'ed) examples reached here.  /* #neg=227 #pos=142 */
%   | else if ( haswordtitle(A, F), haswordauthor(G, F) )
%   | | then if ( haswordtitle(B, F) )
%   | | | then return 0.1724042028944549;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.020663126446067086;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | | else return 0.258981692256407;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( haswordtitle(B, H), haswordauthor(I, H) )
%   | then return 0.08410630574738161;  // std dev = 0.615, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | else return 0.12900444383953008;  // std dev = 0.786, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
WILL Produced-Tree #10
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordvenue(D, C) )
%   then if ( title(E, A), venue(E, D) )
%   | then if ( samebib(E, F), title(F, B) )
%   | | then if ( venue(F, D) )
%   | | | then return 0.2468999492603785;  // std dev = 1.122, 107.000 (wgt'ed) examples reached here.  /* #pos=107 */
%   | | | else return 0.2522396550331176;  // std dev = 0.751, 27.000 (wgt'ed) examples reached here.  /* #pos=27 */
%   | | else return -0.1126936621875752;  // std dev = 0.183, 235.000 (wgt'ed) examples reached here.  /* #neg=227 #pos=8 */
%   | else if ( haswordtitle(A, G), haswordauthor(H, G) )
%   | | then if ( haswordtitle(B, G) )
%   | | | then return 0.14917487560723686;  // std dev = 5.27e-09, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.018067821932771715;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | | else return 0.21244507145484404;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( haswordtitle(A, I), haswordauthor(J, I) )
%   | then return 0.06717461081692747;  // std dev = 0.618, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | else return 0.10099635281121595;  // std dev = 0.778, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */


Results
   AUC ROC   = 0.960658
   AUC PR    = 0.95578
   CLL	      = -0.259136
   Precision = 0.949275 at threshold = 0.5
   Recall    = 0.977612
   F1        = 0.963235


Total learning time: 433.3196439743042 seconds
Total inference time: 129.012 seconds
AUC ROC: 0.960658


Results scoring model
   AUC ROC   = 0.976224
   AUC PR    = 0.981328
   CLL	      = -0.22032
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.944444
   F1        = 0.971429


Total scoring time: 4.329 seconds
Refined model CLL: -0.22032


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.955605
   AUC PR    = 0.953536
   CLL	      = -0.256816
   Precision = 0.949275 at threshold = 0.5
   Recall    = 0.977612
   F1        = 0.963235


Total learning time: 851.5522108078003 seconds
Total inference time: 130.076 seconds
AUC ROC: 0.955605
Total revision time: 851.5522108078003
Best scored revision CLL: -0.216614


Dataset: 6_imdb_cora, Fold: 1, Type: Transfer (trRDN-B), Time: 01:13:04
{'AUC ROC': 0.955605, 'AUC PR': 0.953536, 'CLL': -0.256816, 'Precision': [0.949275, 0.5], 'Recall': 0.977612, 'F1': 0.963235, 'Learning time': 851.5522108078003, 'Inference time': 130.076, 'parameter': {'AUC ROC': 0.955605, 'AUC PR': 0.953536, 'CLL': -0.256816, 'Precision': [0.949275, 0.5], 'Recall': 0.977612, 'F1': 0.963235, 'Learning time': 409.7325668334961, 'Inference time': 130.076}}


WILL Produced-Tree #1
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordauthor(D, C) )
%   then if ( haswordtitle(B, C) )
%   | then return 0.7369368138873914;  // std dev = 0.326, 66.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=58 */
%   | else if ( author(E, D), title(E, B) )
%   | | then return 0.23314893509951226;  // std dev = 0.484, 8.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=3 */
%   | | else return -0.030739953789376603;  // std dev = 0.314, 54.000 (wgt'ed) examples reached here.  /* #neg=48 #pos=6 */
%   else if ( haswordtitle(B, F), haswordauthor(G, F) )
%   | then if ( author(H, G), title(H, A) )
%   | | then return 0.4581489350995122;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | else return -0.024204006076958298;  // std dev = 0.322, 51.000 (wgt'ed) examples reached here.  /* #neg=45 #pos=6 */
%   | else return 0.2600180939780157;  // std dev = 0.490, 214.000 (wgt'ed) examples reached here.  /* #neg=128 #pos=86 */
WILL Produced-Tree #2
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordauthor(D, C) )
%   then if ( haswordtitle(B, C) )
%   | then return 0.6220633676283396;  // std dev = 0.326, 66.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=58 */
%   | else return 0.0025575155492885103;  // std dev = 0.350, 62.000 (wgt'ed) examples reached here.  /* #neg=53 #pos=9 */
%   else return 0.18184970200109088;  // std dev = 0.474, 270.000 (wgt'ed) examples reached here.  /* #neg=175 #pos=95 */
WILL Produced-Tree #3
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordauthor(D, C) )
%   then if ( haswordtitle(B, C) )
%   | then return 0.48728512046144257;  // std dev = 0.326, 66.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=58 */
%   | else if ( author(E, D), title(E, B) )
%   | | then return 0.20196858633872047;  // std dev = 0.484, 8.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=3 */
%   | | else return -0.027343827785405832;  // std dev = 0.314, 54.000 (wgt'ed) examples reached here.  /* #neg=48 #pos=6 */
%   else return 0.15468462171797714;  // std dev = 0.474, 270.000 (wgt'ed) examples reached here.  /* #neg=175 #pos=95 */
WILL Produced-Tree #4
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordauthor(D, C) )
%   then if ( haswordtitle(B, C) )
%   | then return 0.3672186186501392;  // std dev = 0.326, 66.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=58 */
%   | else if ( author(E, D), title(E, B) )
%   | | then return 0.17113730529774163;  // std dev = 0.484, 8.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=3 */
%   | | else return -0.02411424364843527;  // std dev = 0.314, 54.000 (wgt'ed) examples reached here.  /* #neg=48 #pos=6 */
%   else if ( haswordtitle(B, F), haswordauthor(G, F) )
%   | then return -0.031024040378454357;  // std dev = 0.359, 56.000 (wgt'ed) examples reached here.  /* #neg=47 #pos=9 */
%   | else return 0.17100668024697496;  // std dev = 0.490, 214.000 (wgt'ed) examples reached here.  /* #neg=128 #pos=86 */
WILL Produced-Tree #5
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordvenue(D, C) )
%   then if ( title(E, A), venue(E, D) )
%   | then if ( samebib(E, F), title(F, B) )
%   | | then if ( venue(F, D) )
%   | | | then return 0.6418868182363635;  // std dev = 1.667, 107.000 (wgt'ed) examples reached here.  /* #pos=107 */
%   | | | else return 0.6180092498875789;  // std dev = 0.968, 27.000 (wgt'ed) examples reached here.  /* #pos=27 */
%   | | else return -0.20409327202195252;  // std dev = 0.186, 235.000 (wgt'ed) examples reached here.  /* #neg=227 #pos=8 */
%   | else if ( haswordtitle(A, G), haswordauthor(H, G) )
%   | | then if ( haswordtitle(B, G) )
%   | | | then return 0.39807224506280847;  // std dev = 2.11e-08, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.034236495868208136;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | | else return 0.7373888418759613;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( haswordtitle(B, I), haswordauthor(J, I) )
%   | then return 0.205496844734659;  // std dev = 0.667, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | else return 0.3024793355387514;  // std dev = 0.870, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
WILL Produced-Tree #6
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordvenue(D, C) )
%   then if ( title(E, A), venue(E, D) )
%   | then if ( samebib(E, F), title(F, B) )
%   | | then if ( venue(F, D) )
%   | | | then return 0.5033535391962155;  // std dev = 1.693, 107.000 (wgt'ed) examples reached here.  /* #pos=107 */
%   | | | else return 0.48911976547524505;  // std dev = 1.010, 27.000 (wgt'ed) examples reached here.  /* #pos=27 */
%   | | else return -0.17059699565787653;  // std dev = 0.185, 235.000 (wgt'ed) examples reached here.  /* #neg=227 #pos=8 */
%   | else if ( haswordtitle(A, G), haswordauthor(H, G) )
%   | | then if ( haswordtitle(B, G) )
%   | | | then return 0.30755472608314727;  // std dev = 1.05e-08, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.03025324461143468;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | | else return 0.573232508574621;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( haswordtitle(B, I), haswordauthor(J, I) )
%   | then return 0.16268836974337506;  // std dev = 0.649, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | else return 0.25179946687806887;  // std dev = 0.846, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
WILL Produced-Tree #7
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordvenue(D, C) )
%   then if ( title(E, A), venue(E, D) )
%   | then if ( samebib(E, F), title(F, B) )
%   | | then if ( venue(F, D) )
%   | | | then return 0.39180299848598205;  // std dev = 1.525, 107.000 (wgt'ed) examples reached here.  /* #pos=107 */
%   | | | else return 0.3866767289676703;  // std dev = 0.942, 27.000 (wgt'ed) examples reached here.  /* #pos=27 */
%   | | else return -0.1453477737183383;  // std dev = 0.183, 235.000 (wgt'ed) examples reached here.  /* #neg=227 #pos=8 */
%   | else if ( haswordtitle(A, G), haswordauthor(H, G) )
%   | | then if ( haswordtitle(B, G) )
%   | | | then return 0.24617252978697307;  // std dev = 1.83e-08, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.02664990645456834;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | | else return 0.4308999197114709;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( haswordtitle(B, I), haswordauthor(J, I) )
%   | then return 0.12917189726955688;  // std dev = 0.640, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | else return 0.20369307965722117;  // std dev = 0.827, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
WILL Produced-Tree #8
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordvenue(D, C) )
%   then if ( title(E, A), venue(E, D) )
%   | then if ( samebib(E, F), title(F, B) )
%   | | then if ( venue(F, D) )
%   | | | then return 0.3102824164476658;  // std dev = 1.317, 107.000 (wgt'ed) examples reached here.  /* #pos=107 */
%   | | | else return 0.31054165425477576;  // std dev = 0.838, 27.000 (wgt'ed) examples reached here.  /* #pos=27 */
%   | | else return -0.12578106632254576;  // std dev = 0.182, 235.000 (wgt'ed) examples reached here.  /* #neg=227 #pos=8 */
%   | else if ( haswordtitle(A, G), haswordauthor(H, G) )
%   | | then if ( haswordtitle(B, G) )
%   | | | then return 0.20337970921485166;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.023410046216382027;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | | else return 0.3298020770564759;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( haswordtitle(B, I), haswordauthor(J, I) )
%   | then return 0.10296007490758201;  // std dev = 0.637, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | else return 0.1612439053536645;  // std dev = 0.814, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
WILL Produced-Tree #9
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordvenue(D, C) )
%   then if ( title(E, A), venue(E, D) )
%   | then if ( samebib(E, F), title(F, B) )
%   | | then if ( venue(F, D) )
%   | | | then return 0.2520940413541418;  // std dev = 1.132, 107.000 (wgt'ed) examples reached here.  /* #pos=107 */
%   | | | else return 0.25486355863303867;  // std dev = 0.736, 27.000 (wgt'ed) examples reached here.  /* #pos=27 */
%   | | else return -0.11025058781127414;  // std dev = 0.181, 235.000 (wgt'ed) examples reached here.  /* #neg=227 #pos=8 */
%   | else if ( haswordtitle(A, G), haswordauthor(H, G) )
%   | | then if ( haswordtitle(B, G) )
%   | | | then return 0.1724042028944549;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.020512769893998233;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | | else return 0.2613656844269089;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( haswordtitle(B, I), haswordauthor(J, I) )
%   | then return 0.08239221280482882;  // std dev = 0.637, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | else return 0.12574145527096126;  // std dev = 0.805, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
WILL Produced-Tree #10
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordauthor(D, C) )
%   then if ( author(E, D), title(E, B) )
%   | then if ( author(F, D), title(F, A) )
%   | | then return 0.03309309383183543;  // std dev = 0.200, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return 0.30371870460350625;  // std dev = 0.495, 7.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=3 */
%   | else if ( haswordtitle(B, C) )
%   | | then return 0.0503551946347818;  // std dev = 0.200, 64.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=56 */
%   | | else return -0.01839461482246867;  // std dev = 0.202, 54.000 (wgt'ed) examples reached here.  /* #neg=48 #pos=6 */
%   else return 0.014554071125673725;  // std dev = 0.212, 270.000 (wgt'ed) examples reached here.  /* #neg=175 #pos=95 */


Results
   AUC ROC   = 0.960665
   AUC PR    = 0.955806
   CLL	      = -0.256976
   Precision = 0.949275 at threshold = 0.5
   Recall    = 0.977612
   F1        = 0.963235


Total learning time: 410.59542775154114 seconds
Total inference time: 127.921 seconds
AUC ROC: 0.960665


Dataset: 6_imdb_cora, Fold: 1, Type: Scratch (RDN-B), Time: 01:22:03
{'AUC ROC': 0.960665, 'AUC PR': 0.955806, 'CLL': -0.256976, 'Precision': [0.949275, 0.5], 'Recall': 0.977612, 'F1': 0.963235, 'Learning time': 410.59542775154114, 'Inference time': 127.921}


Starting fold 2

Target train facts examples: 9016
Target train pos examples: 140
Target train neg examples: 52

Target test facts examples: 33542
Target test pos  examples: 558
Target test neg examples: 664

******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


WILL Produced-Tree #1
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordauthor(D, C) )
%   then if ( haswordtitle(B, C) )
%   | then if ( author(E, D), title(E, A) )
%   | | then return 0.8581489350995123;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return 0.7936328060672545;  // std dev = 0.246, 62.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=58 */
%   | else return -0.1418510649004878;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   else if ( haswordtitle(B, F), haswordauthor(G, F) )
%   | then return -0.1418510649004878;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | else return 0.6842358916212514;  // std dev = 0.379, 92.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=76 */
WILL Produced-Tree #2
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordauthor(D, C) )
%   then if ( haswordtitle(B, C) )
%   | then if ( author(E, D), title(E, B) )
%   | | then return 0.7237518087032814;  // std dev = 0.015, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return 0.6673784342854517;  // std dev = 0.246, 62.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=58 */
%   | else return -0.12544463852839138;  // std dev = 7.45e-09, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   else return 0.4748841132087285;  // std dev = 0.430, 108.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=76 */
WILL Produced-Tree #3
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordauthor(D, C) )
%   then if ( haswordtitle(B, C) )
%   | then if ( author(E, D), title(E, A) )
%   | | then return 0.5589366687406879;  // std dev = 0.016, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return 0.5189849385027072;  // std dev = 0.246, 62.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=58 */
%   | else return -0.11231637819360635;  // std dev = 1.39e-08, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   else if ( haswordtitle(B, F), haswordauthor(G, F) )
%   | then return -0.1874040601650234;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | else return 0.48103931413960527;  // std dev = 0.379, 92.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=76 */
WILL Produced-Tree #4
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordauthor(D, C) )
%   then if ( haswordtitle(B, C) )
%   | then if ( author(E, D), title(E, B) )
%   | | then return 0.4241311193552321;  // std dev = 0.030, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return 0.3897748824392556;  // std dev = 0.245, 62.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=58 */
%   | else return -0.10159632948783631;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   else if ( haswordtitle(B, F), haswordauthor(G, F) )
%   | then return -0.16051906956732503;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | else return 0.3659622649099855;  // std dev = 0.379, 92.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=76 */
WILL Produced-Tree #5
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordauthor(D, C) )
%   then if ( haswordtitle(B, C) )
%   | then return 0.29858829708551893;  // std dev = 0.235, 68.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=64 */
%   | else return -0.09269127618926094;  // std dev = 9.13e-09, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   else return 0.21328839765007365;  // std dev = 0.380, 108.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=76 */
WILL Produced-Tree #6
% FOR sametitle(A, B):
%   if ( haswordtitle(B, C), haswordauthor(D, C) )
%   then if ( haswordtitle(A, C) )
%   | then if ( author(E, D), title(E, B) )
%   | | then return 0.2634404297978157;  // std dev = 0.024, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return 0.23039326895428264;  // std dev = 0.246, 62.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=58 */
%   | else return -0.16775787649765264;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   else if ( haswordtitle(A, F), haswordauthor(G, F) )
%   | then return -0.08518475138839685;  // std dev = 1.05e-08, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | else return 0.22274490151167825;  // std dev = 0.379, 92.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=76 */
WILL Produced-Tree #7
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordauthor(D, C) )
%   then if ( haswordtitle(B, C) )
%   | then if ( author(E, D), title(E, A) )
%   | | then return 0.21673859350824895;  // std dev = 0.025, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return 0.18473233071885897;  // std dev = 0.246, 62.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=58 */
%   | else return -0.07877675473109173;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   else return 0.12396231665165042;  // std dev = 0.367, 108.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=76 */
WILL Produced-Tree #8
% FOR sametitle(A, B):
%   if ( haswordtitle(B, C), haswordauthor(D, C) )
%   then if ( haswordtitle(A, C) )
%   | then if ( author(E, D), title(E, B) )
%   | | then return 0.18288400282653508;  // std dev = 0.024, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return 0.15172244243224906;  // std dev = 0.246, 62.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=58 */
%   | else return -0.16173199599492086;  // std dev = 7.45e-09, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   else if ( haswordtitle(A, F), haswordauthor(G, F) )
%   | then return -0.07324622576333704;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | else return 0.14340658834602593;  // std dev = 0.379, 92.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=76 */
WILL Produced-Tree #9
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordauthor(D, C) )
%   then if ( haswordtitle(B, C) )
%   | then if ( author(E, D), title(E, A) )
%   | | then return 0.15800590194176065;  // std dev = 0.024, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return 0.12703295534995337;  // std dev = 0.246, 62.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=58 */
%   | else return -0.06842697784420272;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   else if ( haswordtitle(B, F), haswordauthor(G, F) )
%   | then return -0.14098544115447348;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | else return 0.11318425134982683;  // std dev = 0.379, 92.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=76 */
WILL Produced-Tree #10
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordauthor(D, C) )
%   then if ( haswordtitle(B, C) )
%   | then return 0.1107747517917744;  // std dev = 0.235, 68.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=64 */
%   | else return -0.06419184008202619;  // std dev = 7.45e-09, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   else if ( haswordtitle(B, E), haswordauthor(F, E) )
%   | then return -0.12475907861090679;  // std dev = 5.27e-09, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | else return 0.09058719957088653;  // std dev = 0.379, 92.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=76 */


Results
   AUC ROC   = 0.710066
   AUC PR    = 0.662695
   CLL	      = -0.718591
   Precision = 0.548596 at threshold = 0.5
   Recall    = 0.910394
   F1        = 0.684636


Total learning time: 27.656343936920166 seconds
Total inference time: 3.121 seconds
AUC ROC: 0.710066


Results scoring model
   AUC ROC   = 0.859341
   AUC PR    = 0.926052
   CLL	      = -0.338293
   Precision = 0.875 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.933333


Total scoring time: 1.642 seconds
Parameter learned model CLL: -0.338293


Structure after Parameter Learning
[['sametitle(A, B)', {'': 'haswordtitle(A, C), haswordauthor(D, C)', 'true': 'haswordtitle(B, C)', 'true,true': 'author(E, D), title(E, A)', 'false': 'haswordtitle(B, F), haswordauthor(G, F)'}, {'true,true,true': [0.0, 0, 6], 'true,true,false': [0.246, 4, 58], 'true,false': [0.0, 16, 0], 'false,true': [0.0, 16, 0], 'false,false': [0.379, 16, 76]}], ['sametitle(A, B)', {'': 'haswordtitle(A, C), haswordauthor(D, C)', 'true': 'haswordtitle(B, C)', 'true,true': 'author(E, D), title(E, B)'}, {'true,true,true': [0.015, 0, 6], 'true,true,false': [0.246, 4, 58], 'true,false': [7.45e-09, 16, 0], 'false': [0.43, 32, 76]}], ['sametitle(A, B)', {'': 'haswordtitle(A, C), haswordauthor(D, C)', 'true': 'haswordtitle(B, C)', 'true,true': 'author(E, D), title(E, A)', 'false': 'haswordtitle(B, F), haswordauthor(G, F)'}, {'true,true,true': [0.016, 0, 6], 'true,true,false': [0.246, 4, 58], 'true,false': [1.39e-08, 16, 0], 'false,true': [0.0, 16, 0], 'false,false': [0.379, 16, 76]}], ['sametitle(A, B)', {'': 'haswordtitle(A, C), haswordauthor(D, C)', 'true': 'haswordtitle(B, C)', 'true,true': 'author(E, D), title(E, B)', 'false': 'haswordtitle(B, F), haswordauthor(G, F)'}, {'true,true,true': [0.03, 0, 6], 'true,true,false': [0.245, 4, 58], 'true,false': [0.0, 16, 0], 'false,true': [0.0, 16, 0], 'false,false': [0.379, 16, 76]}], ['sametitle(A, B)', {'': 'haswordtitle(A, C), haswordauthor(D, C)', 'true': 'haswordtitle(B, C)'}, {'true,true': [0.235, 4, 64], 'true,false': [9.13e-09, 16, 0], 'false': [0.38, 32, 76]}], ['sametitle(A, B)', {'': 'haswordtitle(B, C), haswordauthor(D, C)', 'true': 'haswordtitle(A, C)', 'true,true': 'author(E, D), title(E, B)', 'false': 'haswordtitle(A, F), haswordauthor(G, F)'}, {'true,true,true': [0.024, 0, 6], 'true,true,false': [0.246, 4, 58], 'true,false': [0.0, 16, 0], 'false,true': [1.05e-08, 16, 0], 'false,false': [0.379, 16, 76]}], ['sametitle(A, B)', {'': 'haswordtitle(A, C), haswordauthor(D, C)', 'true': 'haswordtitle(B, C)', 'true,true': 'author(E, D), title(E, A)'}, {'true,true,true': [0.025, 0, 6], 'true,true,false': [0.246, 4, 58], 'true,false': [0.0, 16, 0], 'false': [0.367, 32, 76]}], ['sametitle(A, B)', {'': 'haswordtitle(B, C), haswordauthor(D, C)', 'true': 'haswordtitle(A, C)', 'true,true': 'author(E, D), title(E, B)', 'false': 'haswordtitle(A, F), haswordauthor(G, F)'}, {'true,true,true': [0.024, 0, 6], 'true,true,false': [0.246, 4, 58], 'true,false': [7.45e-09, 16, 0], 'false,true': [0.0, 16, 0], 'false,false': [0.379, 16, 76]}], ['sametitle(A, B)', {'': 'haswordtitle(A, C), haswordauthor(D, C)', 'true': 'haswordtitle(B, C)', 'true,true': 'author(E, D), title(E, A)', 'false': 'haswordtitle(B, F), haswordauthor(G, F)'}, {'true,true,true': [0.024, 0, 6], 'true,true,false': [0.246, 4, 58], 'true,false': [0.0, 16, 0], 'false,true': [0.0, 16, 0], 'false,false': [0.379, 16, 76]}], ['sametitle(A, B)', {'': 'haswordtitle(A, C), haswordauthor(D, C)', 'true': 'haswordtitle(B, C)', 'false': 'haswordtitle(B, E), haswordauthor(F, E)'}, {'true,true': [0.235, 4, 64], 'true,false': [7.45e-09, 16, 0], 'false,true': [5.27e-09, 16, 0], 'false,false': [0.379, 16, 76]}]]
[{'': [0.18140589569160917, 0.2085048010973933], 'false': [-6.938893903907228e-18, 0.14366729678638912], 'true': [0.05536332179930703, -6.938893903907228e-18], 'true,true': [-1.4802973661668753e-16, 0.06035379812695064]}, {'': [0.14286289420974324, 0.18506057632451345], 'true': [0.05524333801085281, 3.469446951953614e-18], 'true,true': [3.660935309116967e-05, 0.06030551665427711]}, {'': [0.10675726088295794, 0.17877162333650232], 'false': [-6.938893903907228e-18, 0.14366729678638998], 'true': [0.0551138266313773, 1.214306433183765e-17], 'true,true': [4.28176036756008e-05, 0.06030244316948719]}, {'': [0.08226075006517136, 0.15736377242143287], 'false': [-1.734723475976807e-17, 0.14366729678638923], 'true': [0.05505736829089987, -6.938893903907228e-18], 'true,true': [0.00014535280009364548, 0.060267285687166425]}, {'': [0.06815825885686162, 0.14409572553175215], 'true': [0.055033647765976704, 5.204170427930421e-18]}, {'': [0.06937266947322629, 0.13434964752919384], 'false': [6.938893903907228e-18, 0.14366729678638893], 'true': [0.055056641807966114, 0.0], 'true,true': [9.275500017171441e-05, 0.06027936455397362]}, {'': [0.05550087784997361, 0.13502250489519754], 'true': [0.05504879248666492, -1.734723475976807e-18], 'true,true': [0.00010031244844343108, 0.060275999018096084]}, {'': [0.05997702711975952, 0.1283068970584452], 'false': [0.0, 0.14366729678638981], 'true': [0.055044514138378575, 3.469446951953614e-18], 'true,true': [9.49760323075699e-05, 0.06027653112331406]}, {'': [0.050614819941452616, 0.1305360722941275], 'false': [-1.3877787807814457e-17, 0.1436672967863893], 'true': [0.055042208020408205, 0.0], 'true,true': [9.759312912612413e-05, 0.060274782632170024]}, {'': [0.04927687539302825, 0.12823566680495033], 'false': [1.734723475976807e-18, 0.14366729678638937], 'true': [0.05504032797152386, 3.469446951953614e-18]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;sametitle(A, B) :- haswordtitle(A, C), haswordauthor(D, C).;true;true
0;true;haswordtitle(B, C).;true;true
0;true,true;author(E, D), title(E, A).;true;true
0;false;haswordtitle(B, F), haswordauthor(G, F).;true;true
1;;sametitle(A, B) :- haswordtitle(A, C), haswordauthor(D, C).;true;true
1;true;haswordtitle(B, C).;true;true
1;true,true;author(E, D), title(E, B).;true;true
2;;sametitle(A, B) :- haswordtitle(A, C), haswordauthor(D, C).;true;true
2;true;haswordtitle(B, C).;true;true
2;true,true;author(E, D), title(E, A).;true;true
2;false;haswordtitle(B, F), haswordauthor(G, F).;true;true
3;;sametitle(A, B) :- haswordtitle(A, C), haswordauthor(D, C).;true;true
3;true;haswordtitle(B, C).;true;true
3;true,true;author(E, D), title(E, B).;true;true
3;false;haswordtitle(B, F), haswordauthor(G, F).;true;true
4;;sametitle(A, B) :- haswordtitle(A, C), haswordauthor(D, C).;true;true
4;true;haswordtitle(B, C).;true;true
5;;sametitle(A, B) :- haswordtitle(B, C), haswordauthor(D, C).;true;true
5;true;haswordtitle(A, C).;true;true
5;true,true;author(E, D), title(E, B).;true;true
5;false;haswordtitle(A, F), haswordauthor(G, F).;true;true
6;;sametitle(A, B) :- haswordtitle(A, C), haswordauthor(D, C).;true;true
6;true;haswordtitle(B, C).;true;true
6;true,true;author(E, D), title(E, A).;true;true
7;;sametitle(A, B) :- haswordtitle(B, C), haswordauthor(D, C).;true;true
7;true;haswordtitle(A, C).;true;true
7;true,true;author(E, D), title(E, B).;true;true
7;false;haswordtitle(A, F), haswordauthor(G, F).;true;true
8;;sametitle(A, B) :- haswordtitle(A, C), haswordauthor(D, C).;true;true
8;true;haswordtitle(B, C).;true;true
8;true,true;author(E, D), title(E, A).;true;true
8;false;haswordtitle(B, F), haswordauthor(G, F).;true;true
9;;sametitle(A, B) :- haswordtitle(A, C), haswordauthor(D, C).;true;true
9;true;haswordtitle(B, C).;true;true
9;false;haswordtitle(B, E), haswordauthor(F, E).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordauthor(D, C) )
%   then if ( haswordtitle(B, C) )
%   | then if ( author(E, D), title(E, A) )
%   | | then return 0.8581489350995123;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return 0.7936328060672545;  // std dev = 0.246, 62.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=58 */
%   | else return -0.1418510649004878;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   else if ( haswordtitle(B, F), haswordauthor(G, F) )
%   | then return -0.1418510649004878;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | else return 0.6842358916212514;  // std dev = 0.379, 92.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=76 */
WILL Produced-Tree #2
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordauthor(D, C) )
%   then if ( haswordtitle(B, C) )
%   | then if ( author(E, D), title(E, B) )
%   | | then return 0.7237518087032814;  // std dev = 0.015, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return 0.6673784342854517;  // std dev = 0.246, 62.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=58 */
%   | else return -0.12544463852839138;  // std dev = 7.45e-09, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   else return 0.4748841132087285;  // std dev = 0.430, 108.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=76 */
WILL Produced-Tree #3
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordauthor(D, C) )
%   then if ( haswordtitle(B, C) )
%   | then if ( author(E, D), title(E, B) )
%   | | then return 0.5596022372298854;  // std dev = 0.018, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return 0.5189205286489138;  // std dev = 0.246, 62.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=58 */
%   | else return -0.11231637819360635;  // std dev = 1.39e-08, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   else return 0.38201066609447526;  // std dev = 0.423, 108.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=76 */
WILL Produced-Tree #4
% FOR sametitle(A, B):
%   if ( haswordtitle(B, C), haswordauthor(D, C) )
%   then if ( haswordtitle(A, C) )
%   | then if ( author(E, D), title(E, B) )
%   | | then return 0.42069383541158384;  // std dev = 0.018, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return 0.3901074635200757;  // std dev = 0.246, 62.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=58 */
%   | else return -0.25256923200871423;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   else if ( haswordtitle(A, F), haswordauthor(G, F) )
%   | then return -0.10159632948783631;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | else return 0.39044528408274887;  // std dev = 0.379, 92.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=76 */
WILL Produced-Tree #5
% FOR sametitle(A, B):
%   if ( haswordtitle(B, C), haswordauthor(D, C) )
%   then if ( haswordtitle(A, C) )
%   | then if ( author(E, D), title(E, B) )
%   | | then return 0.3228885523873477;  // std dev = 0.016, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return 0.2962358551039876;  // std dev = 0.246, 62.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=58 */
%   | else return -0.20791728080793528;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   else if ( haswordtitle(A, F), haswordauthor(G, F) )
%   | then return -0.09269127618926094;  // std dev = 9.13e-09, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | else return 0.2932403414540885;  // std dev = 0.379, 92.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=76 */
WILL Produced-Tree #6
% FOR sametitle(A, B):
%   if ( haswordtitle(B, C), haswordauthor(D, C) )
%   then if ( haswordtitle(A, C) )
%   | then if ( author(E, D), title(E, A) )
%   | | then return 0.2626179835981819;  // std dev = 0.035, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return 0.23051018122995076;  // std dev = 0.245, 62.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=58 */
%   | else return -0.17574544455095786;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   else return 0.1760241504620663;  // std dev = 0.366, 108.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=76 */
WILL Produced-Tree #7
% FOR sametitle(A, B):
%   if ( haswordtitle(B, C), haswordauthor(D, C) )
%   then if ( haswordtitle(A, C) )
%   | then if ( author(E, D), title(E, A) )
%   | | then return 0.21504731866935964;  // std dev = 0.030, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return 0.18492887166458427;  // std dev = 0.245, 62.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=58 */
%   | else return -0.1517181737650899;  // std dev = 1.05e-08, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   else return 0.1387302710939975;  // std dev = 0.364, 108.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=76 */
WILL Produced-Tree #8
% FOR sametitle(A, B):
%   if ( haswordtitle(B, C), haswordauthor(D, C) )
%   then if ( haswordtitle(A, C) )
%   | then if ( author(E, D), title(E, A) )
%   | | then return 0.18099407125111835;  // std dev = 0.027, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return 0.15193295660680112;  // std dev = 0.245, 62.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=58 */
%   | else return -0.1332057839426674;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   else return 0.11032327005780727;  // std dev = 0.362, 108.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=76 */
WILL Produced-Tree #9
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordauthor(D, C) )
%   then if ( haswordtitle(B, C) )
%   | then if ( author(E, D), title(E, B) )
%   | | then return 0.15578318666778943;  // std dev = 0.024, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return 0.12727074245011064;  // std dev = 0.246, 62.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=58 */
%   | else return -0.12468186438537954;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   else return 0.0893783899367893;  // std dev = 0.360, 108.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=76 */
WILL Produced-Tree #10
% FOR sametitle(A, B):
%   if ( haswordtitle(B, C), haswordauthor(D, C) )
%   then if ( haswordtitle(A, C) )
%   | then if ( author(E, D), title(E, A) )
%   | | then return 0.13753926151044768;  // std dev = 0.026, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return 0.10820290172560092;  // std dev = 0.245, 62.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=58 */
%   | else return -0.12822623175471806;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   else return 0.07471456498756535;  // std dev = 0.358, 108.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=76 */


Results
   AUC ROC   = 0.710066
   AUC PR    = 0.662695
   CLL	      = -0.695044
   Precision = 0.548596 at threshold = 0.5
   Recall    = 0.910394
   F1        = 0.684636


Total learning time: 30.621483087539673 seconds
Total inference time: 3.402 seconds
AUC ROC: 0.710066


Results scoring model
   AUC ROC   = 0.859341
   AUC PR    = 0.926052
   CLL	      = -0.347843
   Precision = 0.875 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.933333


Total scoring time: 1.78 seconds
Refined model CLL: -0.347843


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.710066
   AUC PR    = 0.662695
   CLL	      = -0.718591
   Precision = 0.548596 at threshold = 0.5
   Recall    = 0.910394
   F1        = 0.684636


Total learning time: 61.699827024459836 seconds
Total inference time: 3.121 seconds
AUC ROC: 0.710066
Total revision time: 61.699827024459836
Best scored revision CLL: -0.338293


Dataset: 6_imdb_cora, Fold: 2, Type: Transfer (trRDN-B), Time: 01:23:15
{'AUC ROC': 0.710066, 'AUC PR': 0.662695, 'CLL': -0.718591, 'Precision': [0.548596, 0.5], 'Recall': 0.910394, 'F1': 0.684636, 'Learning time': 61.699827024459836, 'Inference time': 3.121, 'parameter': {'AUC ROC': 0.710066, 'AUC PR': 0.662695, 'CLL': -0.718591, 'Precision': [0.548596, 0.5], 'Recall': 0.910394, 'F1': 0.684636, 'Learning time': 27.656343936920166, 'Inference time': 3.121}}


WILL Produced-Tree #1
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordauthor(D, C) )
%   then if ( haswordtitle(B, C) )
%   | then if ( author(E, D), title(E, B) )
%   | | then return 0.8581489350995123;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return 0.7936328060672545;  // std dev = 0.246, 62.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=58 */
%   | else return -0.1418510649004878;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   else if ( haswordtitle(B, F), haswordauthor(G, F) )
%   | then return -0.1418510649004878;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | else return 0.6842358916212514;  // std dev = 0.379, 92.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=76 */
WILL Produced-Tree #2
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordauthor(D, C) )
%   then if ( haswordtitle(B, C) )
%   | then if ( author(E, D), title(E, A) )
%   | | then return 0.7237518087032814;  // std dev = 0.015, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return 0.6673784342854517;  // std dev = 0.246, 62.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=58 */
%   | else return -0.12544463852839138;  // std dev = 7.45e-09, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   else if ( haswordtitle(B, F), haswordauthor(G, F) )
%   | then return -0.12544463852839138;  // std dev = 7.45e-09, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | else return 0.5792891135108365;  // std dev = 0.379, 92.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=76 */
WILL Produced-Tree #3
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordauthor(D, C) )
%   then if ( haswordtitle(B, C) )
%   | then if ( author(E, D), title(E, A) )
%   | | then return 0.5596022372298856;  // std dev = 0.018, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return 0.5189205286489138;  // std dev = 0.246, 62.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=58 */
%   | else return -0.11231637819360635;  // std dev = 1.39e-08, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   else if ( haswordtitle(B, F), haswordauthor(G, F) )
%   | then return -0.11231637819360635;  // std dev = 1.39e-08, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | else return 0.4570789878895837;  // std dev = 0.379, 92.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=76 */
WILL Produced-Tree #4
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordauthor(D, C) )
%   then if ( haswordtitle(B, C) )
%   | then if ( author(E, D), title(E, B) )
%   | | then return 0.4233597971885226;  // std dev = 0.027, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return 0.3898494672190816;  // std dev = 0.246, 62.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=58 */
%   | else return -0.10159632948783631;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   else if ( haswordtitle(B, F), haswordauthor(G, F) )
%   | then return -0.10159632948783631;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | else return 0.34592553794605063;  // std dev = 0.379, 92.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=76 */
WILL Produced-Tree #5
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordauthor(D, C) )
%   then if ( haswordtitle(B, C) )
%   | then if ( author(E, D), title(E, A) )
%   | | then return 0.3247961589612467;  // std dev = 0.025, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return 0.2960518405709048;  // std dev = 0.246, 62.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=58 */
%   | else return -0.09269127618926094;  // std dev = 9.13e-09, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   else if ( haswordtitle(B, F), haswordauthor(G, F) )
%   | then return -0.09269127618926094;  // std dev = 9.13e-09, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | else return 0.25984624421661506;  // std dev = 0.379, 92.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=76 */
WILL Produced-Tree #6
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordauthor(D, C) )
%   then if ( haswordtitle(B, C) )
%   | then if ( author(E, D), title(E, B) )
%   | | then return 0.2598237112372311;  // std dev = 0.028, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return 0.23078233831773928;  // std dev = 0.245, 62.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=58 */
%   | else return -0.08518475138839685;  // std dev = 1.05e-08, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   else if ( haswordtitle(B, F), haswordauthor(G, F) )
%   | then return -0.08518475138839685;  // std dev = 1.05e-08, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | else return 0.19744953338909077;  // std dev = 0.379, 92.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=76 */
WILL Produced-Tree #7
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordauthor(D, C) )
%   then if ( haswordtitle(B, C) )
%   | then if ( author(E, D), title(E, A) )
%   | | then return 0.21314056586265928;  // std dev = 0.025, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return 0.18511377217363273;  // std dev = 0.246, 62.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=58 */
%   | else return -0.07877675473109173;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   else return 0.11835444956953103;  // std dev = 0.359, 108.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=76 */
WILL Produced-Tree #8
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordauthor(D, C) )
%   then if ( haswordtitle(B, C) )
%   | then if ( author(E, D), title(E, B) )
%   | | then return 0.180988325808871;  // std dev = 0.027, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return 0.15193274868060336;  // std dev = 0.245, 62.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=58 */
%   | else return -0.07324622576333704;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   else if ( haswordtitle(B, F), haswordauthor(G, F) )
%   | then return -0.08780542829141773;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | else return 0.1271628569581206;  // std dev = 0.379, 92.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=76 */
WILL Produced-Tree #9
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordauthor(D, C) )
%   then if ( haswordtitle(B, C) )
%   | then if ( author(E, D), title(E, A) )
%   | | then return 0.15581571933735872;  // std dev = 0.024, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return 0.12726699032504407;  // std dev = 0.246, 62.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=58 */
%   | else return -0.06842697784420272;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   else if ( haswordtitle(B, F), haswordauthor(G, F) )
%   | then return -0.08102244993716992;  // std dev = 8.33e-09, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | else return 0.10109850887594363;  // std dev = 0.379, 92.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=76 */
WILL Produced-Tree #10
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordauthor(D, C) )
%   then if ( haswordtitle(B, C) )
%   | then return 0.11079098235233828;  // std dev = 0.235, 68.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=64 */
%   | else return -0.06419184008202619;  // std dev = 7.45e-09, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   else if ( haswordtitle(B, E), haswordauthor(F, E) )
%   | then return -0.07519084836813342;  // std dev = 7.45e-09, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | else return 0.08140616016331957;  // std dev = 0.379, 92.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=76 */


Results
   AUC ROC   = 0.709594
   AUC PR    = 0.662568
   CLL	      = -0.730083
   Precision = 0.548596 at threshold = 0.5
   Recall    = 0.910394
   F1        = 0.684636


Total learning time: 29.31014394760132 seconds
Total inference time: 3.267 seconds
AUC ROC: 0.709594


Dataset: 6_imdb_cora, Fold: 2, Type: Scratch (RDN-B), Time: 01:23:48
{'AUC ROC': 0.709594, 'AUC PR': 0.662568, 'CLL': -0.730083, 'Precision': [0.548596, 0.5], 'Recall': 0.910394, 'F1': 0.684636, 'Learning time': 29.31014394760132, 'Inference time': 3.267}


Starting fold 3

Target train facts examples: 9306
Target train pos examples: 113
Target train neg examples: 210

Target test facts examples: 33252
Target test pos  examples: 585
Target test neg examples: 506

******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


WILL Produced-Tree #1
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordvenue(D, C) )
%   then if ( title(E, B), venue(E, D) )
%   | then if ( samebib(E, F), title(F, A) )
%   | | then return 0.8581489350995115;  // std dev = 3.37e-07, 96.000 (wgt'ed) examples reached here.  /* #pos=96 */
%   | | else return -0.14185106490048843;  // std dev = 0.000, 206.000 (wgt'ed) examples reached here.  /* #neg=206 */
%   | else return 0.7812258581764353;  // std dev = 0.266, 13.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   else if ( haswordtitle(A, G), haswordtitle(B, G) )
%   | then return 0.8581489350995122;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return -0.14185106490048777;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #2
% FOR sametitle(A, B):
%   if ( haswordtitle(B, C), haswordvenue(D, C) )
%   then if ( title(E, A), venue(E, D) )
%   | then if ( samebib(E, F), title(F, B) )
%   | | then return 0.7194734122109541;  // std dev = 1.88e-07, 96.000 (wgt'ed) examples reached here.  /* #pos=96 */
%   | | else return -0.12612338422298822;  // std dev = 0.139, 206.000 (wgt'ed) examples reached here.  /* #neg=206 */
%   | else return 0.6673923081472714;  // std dev = 0.229, 13.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   else if ( haswordtitle(A, G), haswordtitle(B, G) )
%   | then return 0.7225254794457083;  // std dev = 0.014, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return -0.12544463852839136;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #3
% FOR sametitle(A, B):
%   if ( haswordtitle(B, C), haswordvenue(D, C) )
%   then if ( title(E, A), venue(E, D) )
%   | then if ( samebib(E, F), title(F, B) )
%   | | then return 0.5553664367462835;  // std dev = 4.09e-07, 96.000 (wgt'ed) examples reached here.  /* #pos=96 */
%   | | else return -0.11287578031157806;  // std dev = 0.129, 206.000 (wgt'ed) examples reached here.  /* #neg=206 */
%   | else return 0.5235516292488023;  // std dev = 0.214, 13.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   else if ( haswordtitle(A, G), haswordtitle(B, G) )
%   | then return 0.5583951624779799;  // std dev = 0.017, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return -0.11231637819360636;  // std dev = 2.63e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #4
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordvenue(D, C) )
%   then if ( title(E, B), venue(E, D) )
%   | then if ( samebib(E, F), title(F, A) )
%   | | then return 0.41749818750685663;  // std dev = 0.001, 96.000 (wgt'ed) examples reached here.  /* #pos=96 */
%   | | else return -0.1025477100747007;  // std dev = 0.219, 206.000 (wgt'ed) examples reached here.  /* #neg=206 */
%   | else return 0.40316752663743777;  // std dev = 0.180, 13.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   else if ( haswordtitle(A, G), haswordtitle(B, G) )
%   | then return 0.42073337754073636;  // std dev = 0.019, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return -0.10155867761849639;  // std dev = 9.22e-05, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #5
% FOR sametitle(A, B):
%   if ( haswordtitle(B, C), haswordvenue(D, C) )
%   then if ( title(E, A), venue(E, D) )
%   | then if ( samebib(E, F), title(F, B) )
%   | | then return 0.32070786392391376;  // std dev = 0.000701, 96.000 (wgt'ed) examples reached here.  /* #pos=96 */
%   | | else return -0.09350751227163408;  // std dev = 0.205, 206.000 (wgt'ed) examples reached here.  /* #neg=206 */
%   | else return 0.30768423831114233;  // std dev = 0.175, 13.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   else if ( haswordtitle(A, G), haswordtitle(B, G) )
%   | then return 0.32300119034950237;  // std dev = 0.019, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return -0.0926667273159864;  // std dev = 6.79e-05, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #6
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordvenue(D, C) )
%   then if ( title(E, B), venue(E, D) )
%   | then if ( samebib(E, F), title(F, A) )
%   | | then return 0.2551593808193205;  // std dev = 0.002, 96.000 (wgt'ed) examples reached here.  /* #pos=96 */
%   | | else return -0.08632001858481983;  // std dev = 0.281, 206.000 (wgt'ed) examples reached here.  /* #neg=206 */
%   | else return 0.24692714516757797;  // std dev = 0.152, 13.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   else if ( haswordtitle(A, G), haswordtitle(B, G) )
%   | then return 0.2573749481850921;  // std dev = 0.018, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return -0.08513563990483575;  // std dev = 0.000132, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #7
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordvenue(D, C) )
%   then if ( title(E, B), venue(E, D) )
%   | then if ( samebib(E, F), title(F, A) )
%   | | then return 0.20974863564756707;  // std dev = 0.001, 96.000 (wgt'ed) examples reached here.  /* #pos=96 */
%   | | else return -0.07978117896841946;  // std dev = 0.268, 206.000 (wgt'ed) examples reached here.  /* #neg=206 */
%   | else return 0.1984301653893709;  // std dev = 0.153, 13.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   else if ( haswordtitle(A, G), haswordtitle(B, G) )
%   | then return 0.21132605742777538;  // std dev = 0.016, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return -0.078734582391261;  // std dev = 0.000123, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #8
% FOR sametitle(A, B):
%   if ( haswordtitle(B, C), haswordvenue(D, C) )
%   then if ( title(E, A), venue(E, D) )
%   | then if ( samebib(E, F), title(F, B) )
%   | | then return 0.17709187451440622;  // std dev = 0.001, 96.000 (wgt'ed) examples reached here.  /* #pos=96 */
%   | | else return -0.07437447622766132;  // std dev = 0.303, 206.000 (wgt'ed) examples reached here.  /* #neg=206 */
%   | else return 0.16654646394404693;  // std dev = 0.143, 13.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   else if ( haswordtitle(A, G), haswordtitle(B, G) )
%   | then return 0.17860389115331468;  // std dev = 0.016, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return -0.07318387632889668;  // std dev = 0.000178, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #9
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordvenue(D, C) )
%   then if ( title(E, B), venue(E, D) )
%   | then return 0.0011582103650595646;  // std dev = 0.105, 302.000 (wgt'ed) examples reached here.  /* #neg=206 #pos=96 */
%   | else return 0.14013072263982093;  // std dev = 0.144, 13.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   else if ( haswordtitle(A, F), haswordtitle(B, F) )
%   | then return 0.15395388231852367;  // std dev = 0.014, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return -0.06837135060627689;  // std dev = 0.000170, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #10
% FOR sametitle(A, B):
%   if ( haswordtitle(B, C), haswordvenue(D, C) )
%   then if ( title(E, A), venue(E, D) )
%   | then if ( samebib(E, F), title(F, B) )
%   | | then return 0.15239642188371771;  // std dev = 0.019, 96.000 (wgt'ed) examples reached here.  /* #pos=96 */
%   | | else return -0.06965629475862903;  // std dev = 0.324, 206.000 (wgt'ed) examples reached here.  /* #neg=206 */
%   | else return 0.12102007536561965;  // std dev = 0.141, 13.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   else if ( haswordtitle(A, G), haswordtitle(B, G) )
%   | then return 0.1389676954070842;  // std dev = 0.019, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return -0.06557523305723328;  // std dev = 0.003, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */


Results
   AUC ROC   = 0.979568
   AUC PR    = 0.963901
   CLL	      = -0.170452
   Precision = 0.986038 at threshold = 0.5
   Recall    = 0.965812
   F1        = 0.97582


Total learning time: 388.7254159450531 seconds
Total inference time: 55.708 seconds
AUC ROC: 0.979568


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.096016
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 5.529 seconds
Parameter learned model CLL: -0.096016


Structure after Parameter Learning
[['sametitle(A, B)', {'': 'haswordtitle(A, C), haswordvenue(D, C)', 'true': 'title(E, B), venue(E, D)', 'true,true': 'samebib(E, F), title(F, A)', 'false': 'haswordtitle(A, G), haswordtitle(B, G)'}, {'true,true,true': [3.37e-07, 0, 96], 'true,true,false': [0.0, 206, 0], 'true,false': [0.266, 1, 12], 'false,true': [0.0, 0, 5], 'false,false': [0.0, 3, 0]}], ['sametitle(A, B)', {'': 'haswordtitle(B, C), haswordvenue(D, C)', 'true': 'title(E, A), venue(E, D)', 'true,true': 'samebib(E, F), title(F, B)', 'false': 'haswordtitle(A, G), haswordtitle(B, G)'}, {'true,true,true': [1.88e-07, 0, 96], 'true,true,false': [0.139, 206, 0], 'true,false': [0.229, 1, 12], 'false,true': [0.014, 0, 5], 'false,false': [0.0, 3, 0]}], ['sametitle(A, B)', {'': 'haswordtitle(B, C), haswordvenue(D, C)', 'true': 'title(E, A), venue(E, D)', 'true,true': 'samebib(E, F), title(F, B)', 'false': 'haswordtitle(A, G), haswordtitle(B, G)'}, {'true,true,true': [4.09e-07, 0, 96], 'true,true,false': [0.129, 206, 0], 'true,false': [0.214, 1, 12], 'false,true': [0.017, 0, 5], 'false,false': [2.63e-09, 3, 0]}], ['sametitle(A, B)', {'': 'haswordtitle(A, C), haswordvenue(D, C)', 'true': 'title(E, B), venue(E, D)', 'true,true': 'samebib(E, F), title(F, A)', 'false': 'haswordtitle(A, G), haswordtitle(B, G)'}, {'true,true,true': [0.001, 0, 96], 'true,true,false': [0.219, 206, 0], 'true,false': [0.18, 1, 12], 'false,true': [0.019, 0, 5], 'false,false': [9.22e-05, 3, 0]}], ['sametitle(A, B)', {'': 'haswordtitle(B, C), haswordvenue(D, C)', 'true': 'title(E, A), venue(E, D)', 'true,true': 'samebib(E, F), title(F, B)', 'false': 'haswordtitle(A, G), haswordtitle(B, G)'}, {'true,true,true': [0.000701, 0, 96], 'true,true,false': [0.205, 206, 0], 'true,false': [0.175, 1, 12], 'false,true': [0.019, 0, 5], 'false,false': [6.79e-05, 3, 0]}], ['sametitle(A, B)', {'': 'haswordtitle(A, C), haswordvenue(D, C)', 'true': 'title(E, B), venue(E, D)', 'true,true': 'samebib(E, F), title(F, A)', 'false': 'haswordtitle(A, G), haswordtitle(B, G)'}, {'true,true,true': [0.002, 0, 96], 'true,true,false': [0.281, 206, 0], 'true,false': [0.152, 1, 12], 'false,true': [0.018, 0, 5], 'false,false': [0.000132, 3, 0]}], ['sametitle(A, B)', {'': 'haswordtitle(A, C), haswordvenue(D, C)', 'true': 'title(E, B), venue(E, D)', 'true,true': 'samebib(E, F), title(F, A)', 'false': 'haswordtitle(A, G), haswordtitle(B, G)'}, {'true,true,true': [0.001, 0, 96], 'true,true,false': [0.268, 206, 0], 'true,false': [0.153, 1, 12], 'false,true': [0.016, 0, 5], 'false,false': [0.000123, 3, 0]}], ['sametitle(A, B)', {'': 'haswordtitle(B, C), haswordvenue(D, C)', 'true': 'title(E, A), venue(E, D)', 'true,true': 'samebib(E, F), title(F, B)', 'false': 'haswordtitle(A, G), haswordtitle(B, G)'}, {'true,true,true': [0.001, 0, 96], 'true,true,false': [0.303, 206, 0], 'true,false': [0.143, 1, 12], 'false,true': [0.016, 0, 5], 'false,false': [0.000178, 3, 0]}], ['sametitle(A, B)', {'': 'haswordtitle(A, C), haswordvenue(D, C)', 'true': 'title(E, B), venue(E, D)', 'false': 'haswordtitle(A, F), haswordtitle(B, F)'}, {'true,true': [0.105, 206, 96], 'true,false': [0.144, 1, 12], 'false,true': [0.014, 0, 5], 'false,false': [0.00017, 3, 0]}], ['sametitle(A, B)', {'': 'haswordtitle(B, C), haswordvenue(D, C)', 'true': 'title(E, A), venue(E, D)', 'true,true': 'samebib(E, F), title(F, B)', 'false': 'haswordtitle(A, G), haswordtitle(B, G)'}, {'true,true,true': [0.019, 0, 96], 'true,true,false': [0.324, 206, 0], 'true,false': [0.141, 1, 12], 'false,true': [0.019, 0, 5], 'false,false': [0.003, 3, 0]}]]
[{'': [0.225306122448982, 0.23437499999999983], 'false': [0.0, 0.0], 'true': [0.21683259506162156, 0.07100591715976314], 'true,true': [1.1842378929335002e-15, -2.3713501496848003e-16]}, {'': [0.161762127614602, 0.16855140989000014], 'false': [3.7260457621890454e-05, 0.0], 'true': [0.15510708635760087, 0.05239895620925205], 'true,true': [3.7007434154171886e-16, 9.444262217627639e-05]}, {'': [0.10189087629019086, 0.10547029292289227], 'false': [5.722963035768025e-05, 2.3129646346357427e-18], 'true': [0.09688107090960915, 0.04591092331542283], 'true,true': [1.7393494052460785e-15, 8.060589692388903e-05]}, {'': [0.0623010202988034, 0.06398196220226596], 'false': [7.526624150901994e-05, 2.835326529115889e-09], 'true': [0.05880013363106616, 0.032537457324748435], 'true,true': [2.2520403727040634e-08, 0.0002319860432165658]}, {'': [0.03994170768432088, 0.040538091767068504], 'false': [6.851423939926437e-05, 1.5362900245933602e-09], 'true': [0.03734269921975646, 0.03067519742922414], 'true,true': [5.114688524561946e-09, 0.00020492018359273326]}, {'': [0.02744324376802971, 0.027535645658674508], 'false': [6.446595237518116e-05, 5.823105779974765e-09], 'true': [0.02554631309280236, 0.023105141740417737], 'true,true': [2.600532208093161e-08, 0.0003838779237143128]}, {'': [0.019992707745681085, 0.019749993438571804], 'true': [0.018414205588012485, 0.023431721324288553], 'false': [4.929593196296156e-05, 5.050276891127581e-09], 'true,true': [1.9765987587424167e-08, 0.0003484171124182511]}, {'': [0.015309178090203846, 0.014889081404400328], 'true': [0.01401599993671357, 0.02050420565492502], 'false': [4.861894754779605e-05, 1.0590606955065049e-08], 'true,true': [1.0765525628360825e-08, 0.0004464275047850946]}, {'': [0.01217149420054837, 0.011608416982923371], 'true': [0.011001696558603717, 0.020830493366552905], 'false': [3.77704470939072e-05, 9.629055721174784e-09]}, {'': [0.011975168141678356, 0.009854467673643496], 'true': [0.011039475021895475, 0.01988559093371601], 'true,true': [3.936096917178666e-06, 0.0005083720957227201], 'false': [7.57269810490263e-05, 3.737837493294228e-06]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;sametitle(A, B) :- haswordtitle(A, C), haswordvenue(D, C).;true;true
0;true;title(E, B), venue(E, D).;true;true
0;true,true;samebib(E, F), title(F, A).;true;true
0;false;haswordtitle(A, G), haswordtitle(B, G).;true;true
1;;sametitle(A, B) :- haswordtitle(B, C), haswordvenue(D, C).;true;true
1;true;title(E, A), venue(E, D).;true;true
1;true,true;samebib(E, F), title(F, B).;true;true
1;false;haswordtitle(A, G), haswordtitle(B, G).;true;true
2;;sametitle(A, B) :- haswordtitle(B, C), haswordvenue(D, C).;true;true
2;true;title(E, A), venue(E, D).;true;true
2;true,true;samebib(E, F), title(F, B).;true;true
2;false;haswordtitle(A, G), haswordtitle(B, G).;true;true
3;;sametitle(A, B) :- haswordtitle(A, C), haswordvenue(D, C).;true;true
3;true;title(E, B), venue(E, D).;true;true
3;true,true;samebib(E, F), title(F, A).;true;true
3;false;haswordtitle(A, G), haswordtitle(B, G).;true;true
4;;sametitle(A, B) :- haswordtitle(B, C), haswordvenue(D, C).;true;true
4;true;title(E, A), venue(E, D).;true;true
4;true,true;samebib(E, F), title(F, B).;true;true
4;false;haswordtitle(A, G), haswordtitle(B, G).;true;true
5;;sametitle(A, B) :- haswordtitle(A, C), haswordvenue(D, C).;true;true
5;true;title(E, B), venue(E, D).;true;true
5;true,true;samebib(E, F), title(F, A).;true;true
5;false;haswordtitle(A, G), haswordtitle(B, G).;true;true
6;;sametitle(A, B) :- haswordtitle(A, C), haswordvenue(D, C).;true;true
6;true;title(E, B), venue(E, D).;true;true
6;true,true;samebib(E, F), title(F, A).;true;true
6;false;haswordtitle(A, G), haswordtitle(B, G).;true;true
7;;sametitle(A, B) :- haswordtitle(B, C), haswordvenue(D, C).;true;true
7;true;title(E, A), venue(E, D).;true;true
7;true,true;samebib(E, F), title(F, B).;true;true
7;false;haswordtitle(A, G), haswordtitle(B, G).;true;true
8;;sametitle(A, B) :- haswordtitle(A, C), haswordvenue(D, C).;true;true
8;false;haswordtitle(A, F), haswordtitle(B, F).;true;true
9;;sametitle(A, B) :- haswordtitle(B, C), haswordvenue(D, C).;true;true
9;true;title(E, A), venue(E, D).;true;true
9;true,true;samebib(E, F), title(F, B).;true;true
9;false;haswordtitle(A, G), haswordtitle(B, G).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordvenue(D, C) )
%   then if ( title(E, B), venue(E, D) )
%   | then return 0.17602972980149706;  // std dev = 0.466, 302.000 (wgt'ed) examples reached here.  /* #neg=206 #pos=96 */
%   | else return 0.7812258581764353;  // std dev = 0.266, 13.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   else if ( haswordtitle(A, F), haswordtitle(B, F) )
%   | then return 0.8581489350995122;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return -0.14185106490048777;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #2
% FOR sametitle(A, B):
%   if ( haswordtitle(B, C), haswordvenue(D, C) )
%   then if ( title(E, A), venue(E, D) )
%   | then if ( samebib(E, F), title(F, B) )
%   | | then return 0.8341349870768089;  // std dev = 0.115, 96.000 (wgt'ed) examples reached here.  /* #pos=96 */
%   | | else return -0.16495608194902647;  // std dev = 0.108, 206.000 (wgt'ed) examples reached here.  /* #neg=206 */
%   | else return 0.6643758919588988;  // std dev = 0.239, 13.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   else if ( haswordtitle(A, G), haswordtitle(B, G) )
%   | then return 0.7456991872080707;  // std dev = 0.101, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return -0.13851577534467233;  // std dev = 0.032, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #3
% FOR sametitle(A, B):
%   if ( haswordtitle(B, C), haswordvenue(D, C) )
%   then if ( title(E, A), venue(E, D) )
%   | then if ( samebib(E, F), title(F, B) )
%   | | then return 0.6861199933566984;  // std dev = 0.160, 96.000 (wgt'ed) examples reached here.  /* #pos=96 */
%   | | else return -0.14347824271561538;  // std dev = 0.098, 206.000 (wgt'ed) examples reached here.  /* #neg=206 */
%   | else return 0.519729907147475;  // std dev = 0.230, 13.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   else if ( haswordtitle(A, G), haswordtitle(B, G) )
%   | then return 0.5841910979491864;  // std dev = 0.138, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return -0.12283958881271022;  // std dev = 0.029, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #4
% FOR sametitle(A, B):
%   if ( haswordtitle(B, C), haswordvenue(D, C) )
%   then if ( title(E, A), venue(E, D) )
%   | then if ( samebib(E, F), title(F, B) )
%   | | then return 0.524170128964324;  // std dev = 0.166, 96.000 (wgt'ed) examples reached here.  /* #pos=96 */
%   | | else return -0.12673698222175894;  // std dev = 0.089, 206.000 (wgt'ed) examples reached here.  /* #neg=206 */
%   | else return 0.39187140794158987;  // std dev = 0.226, 13.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   else if ( haswordtitle(A, G), haswordtitle(B, G) )
%   | then return 0.441681046584424;  // std dev = 0.148, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return -0.11023473232650292;  // std dev = 0.026, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #5
% FOR sametitle(A, B):
%   if ( haswordtitle(B, C), haswordvenue(D, C) )
%   then if ( title(E, B), venue(E, D) )
%   | then if ( samebib(E, F), title(F, A) )
%   | | then return 0.3948751036354379;  // std dev = 0.146, 96.000 (wgt'ed) examples reached here.  /* #pos=96 */
%   | | else return -0.1149605741266172;  // std dev = 0.374, 205.000 (wgt'ed) examples reached here.  /* #neg=205 */
%   | else return 0.29131301503223367;  // std dev = 0.176, 14.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=12 */
%   else if ( haswordtitle(A, G), haswordtitle(B, G) )
%   | then return 0.3388982718195718;  // std dev = 0.140, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return -0.09990052844638124;  // std dev = 0.024, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #6
% FOR sametitle(A, B):
%   if ( haswordtitle(B, C), haswordvenue(D, C) )
%   then if ( title(E, A), venue(E, D) )
%   | then if ( samebib(E, F), title(F, B) )
%   | | then return 0.30546473998558815;  // std dev = 0.123, 96.000 (wgt'ed) examples reached here.  /* #pos=96 */
%   | | else return -0.1028017205676252;  // std dev = 0.136, 206.000 (wgt'ed) examples reached here.  /* #neg=206 */
%   | else return 0.24012969423586988;  // std dev = 0.202, 13.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   else if ( haswordtitle(A, G), haswordtitle(B, G) )
%   | then return 0.268666413934071;  // std dev = 0.126, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return -0.0912869054386602;  // std dev = 0.022, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #7
% FOR sametitle(A, B):
%   if ( haswordtitle(B, C), haswordvenue(D, C) )
%   then if ( title(E, B), venue(E, D) )
%   | then if ( samebib(E, F), title(F, A) )
%   | | then return 0.24477674969207666;  // std dev = 0.104, 96.000 (wgt'ed) examples reached here.  /* #pos=96 */
%   | | else return -0.09513309477560783;  // std dev = 0.425, 205.000 (wgt'ed) examples reached here.  /* #neg=205 */
%   | else return 0.19195979820301975;  // std dev = 0.146, 14.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=12 */
%   else if ( haswordtitle(A, G), haswordtitle(B, G) )
%   | then return 0.21995533441234807;  // std dev = 0.112, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return -0.08400517952500004;  // std dev = 0.021, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #8
% FOR sametitle(A, B):
%   if ( haswordtitle(B, C), haswordvenue(D, C) )
%   then if ( title(E, B), venue(E, D) )
%   | then if ( samebib(E, F), title(F, A) )
%   | | then return 0.2024086826530537;  // std dev = 0.089, 96.000 (wgt'ed) examples reached here.  /* #pos=96 */
%   | | else return -0.08733090441474964;  // std dev = 0.409, 205.000 (wgt'ed) examples reached here.  /* #neg=205 */
%   | else return 0.1587323283570059;  // std dev = 0.144, 14.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=12 */
%   else if ( haswordtitle(A, G), haswordtitle(B, G) )
%   | then return 0.18500198244076585;  // std dev = 0.100, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return -0.07777379099783051;  // std dev = 0.019, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #9
% FOR sametitle(A, B):
%   if ( haswordtitle(B, C), haswordvenue(D, C) )
%   then if ( title(E, A), venue(E, D) )
%   | then if ( samebib(E, F), title(F, B) )
%   | | then return 0.17170074509909092;  // std dev = 0.077, 96.000 (wgt'ed) examples reached here.  /* #pos=96 */
%   | | else return -0.08004661309232061;  // std dev = 0.215, 206.000 (wgt'ed) examples reached here.  /* #neg=206 */
%   | else return 0.13957210448087956;  // std dev = 0.177, 13.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   else if ( haswordtitle(A, G), haswordtitle(B, G) )
%   | then return 0.15902585621525087;  // std dev = 0.089, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return -0.07238425513121866;  // std dev = 0.018, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #10
% FOR sametitle(A, B):
%   if ( haswordtitle(B, C), haswordvenue(D, C) )
%   then if ( title(E, B), venue(E, D) )
%   | then if ( samebib(E, F), title(F, A) )
%   | | then return 0.148646932943119;  // std dev = 0.067, 96.000 (wgt'ed) examples reached here.  /* #pos=96 */
%   | | else return -0.07526490195726096;  // std dev = 0.434, 205.000 (wgt'ed) examples reached here.  /* #neg=205 */
%   | else return 0.1173360061615307;  // std dev = 0.132, 14.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=12 */
%   else if ( haswordtitle(A, G), haswordtitle(B, G) )
%   | then return 0.13910945389027657;  // std dev = 0.081, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return -0.06767917123314075;  // std dev = 0.017, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */


Results
   AUC ROC   = 0.983068
   AUC PR    = 0.975305
   CLL	      = -0.172352
   Precision = 0.986038 at threshold = 0.5
   Recall    = 0.965812
   F1        = 0.97582


Total learning time: 386.087384223938 seconds
Total inference time: 62.318 seconds
AUC ROC: 0.983068


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.098799
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 5.42 seconds
Refined model CLL: -0.098799


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.979568
   AUC PR    = 0.963901
   CLL	      = -0.170452
   Precision = 0.986038 at threshold = 0.5
   Recall    = 0.965812
   F1        = 0.97582


Total learning time: 785.761800168991 seconds
Total inference time: 55.708 seconds
AUC ROC: 0.979568
Total revision time: 785.761800168991
Best scored revision CLL: -0.096016


Dataset: 6_imdb_cora, Fold: 3, Type: Transfer (trRDN-B), Time: 01:38:56
{'AUC ROC': 0.979568, 'AUC PR': 0.963901, 'CLL': -0.170452, 'Precision': [0.986038, 0.5], 'Recall': 0.965812, 'F1': 0.97582, 'Learning time': 785.761800168991, 'Inference time': 55.708, 'parameter': {'AUC ROC': 0.979568, 'AUC PR': 0.963901, 'CLL': -0.170452, 'Precision': [0.986038, 0.5], 'Recall': 0.965812, 'F1': 0.97582, 'Learning time': 388.7254159450531, 'Inference time': 55.708}}


WILL Produced-Tree #1
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordvenue(D, C) )
%   then if ( title(E, B), venue(E, D) )
%   | then if ( samebib(E, F), title(F, A) )
%   | | then return 0.8581489350995115;  // std dev = 3.37e-07, 96.000 (wgt'ed) examples reached here.  /* #pos=96 */
%   | | else return -0.14185106490048843;  // std dev = 0.000, 206.000 (wgt'ed) examples reached here.  /* #neg=206 */
%   | else return 0.7812258581764353;  // std dev = 0.266, 13.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   else if ( haswordtitle(A, G), haswordtitle(B, G) )
%   | then return 0.8581489350995122;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return -0.14185106490048777;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #2
% FOR sametitle(A, B):
%   if ( haswordtitle(B, C), haswordvenue(D, C) )
%   then if ( title(E, A), venue(E, D) )
%   | then if ( samebib(E, F), title(F, B) )
%   | | then return 0.7194734122109541;  // std dev = 1.88e-07, 96.000 (wgt'ed) examples reached here.  /* #pos=96 */
%   | | else return -0.12612338422298822;  // std dev = 0.139, 206.000 (wgt'ed) examples reached here.  /* #neg=206 */
%   | else return 0.6673923081472714;  // std dev = 0.229, 13.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   else if ( haswordtitle(A, G), haswordtitle(B, G) )
%   | then return 0.7225254794457083;  // std dev = 0.014, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return -0.12544463852839136;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #3
% FOR sametitle(A, B):
%   if ( haswordtitle(B, C), haswordvenue(D, C) )
%   then if ( title(E, A), venue(E, D) )
%   | then if ( samebib(E, F), title(F, B) )
%   | | then return 0.5553664367462835;  // std dev = 4.09e-07, 96.000 (wgt'ed) examples reached here.  /* #pos=96 */
%   | | else return -0.11287578031157806;  // std dev = 0.129, 206.000 (wgt'ed) examples reached here.  /* #neg=206 */
%   | else return 0.5235516292488023;  // std dev = 0.214, 13.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   else if ( haswordtitle(A, G), haswordtitle(B, G) )
%   | then return 0.5583951624779799;  // std dev = 0.017, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return -0.11231637819360636;  // std dev = 2.63e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #4
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordvenue(D, C) )
%   then if ( title(E, B), venue(E, D) )
%   | then if ( samebib(E, F), title(F, A) )
%   | | then return 0.41749818750685663;  // std dev = 0.001, 96.000 (wgt'ed) examples reached here.  /* #pos=96 */
%   | | else return -0.1025477100747007;  // std dev = 0.219, 206.000 (wgt'ed) examples reached here.  /* #neg=206 */
%   | else return 0.40316752663743777;  // std dev = 0.180, 13.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   else if ( haswordtitle(A, G), haswordtitle(B, G) )
%   | then return 0.42073337754073636;  // std dev = 0.019, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return -0.10155867761849639;  // std dev = 9.22e-05, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #5
% FOR sametitle(A, B):
%   if ( haswordtitle(B, C), haswordvenue(D, C) )
%   then if ( title(E, A), venue(E, D) )
%   | then if ( samebib(E, F), title(F, B) )
%   | | then return 0.32070786392391376;  // std dev = 0.000701, 96.000 (wgt'ed) examples reached here.  /* #pos=96 */
%   | | else return -0.09350751227163408;  // std dev = 0.205, 206.000 (wgt'ed) examples reached here.  /* #neg=206 */
%   | else return 0.30768423831114233;  // std dev = 0.175, 13.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   else if ( haswordtitle(A, G), haswordtitle(B, G) )
%   | then return 0.32300119034950237;  // std dev = 0.019, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return -0.0926667273159864;  // std dev = 6.79e-05, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #6
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordvenue(D, C) )
%   then if ( title(E, B), venue(E, D) )
%   | then if ( samebib(E, F), title(F, A) )
%   | | then return 0.2551593808193205;  // std dev = 0.002, 96.000 (wgt'ed) examples reached here.  /* #pos=96 */
%   | | else return -0.08632001858481983;  // std dev = 0.281, 206.000 (wgt'ed) examples reached here.  /* #neg=206 */
%   | else return 0.24692714516757797;  // std dev = 0.152, 13.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   else if ( haswordtitle(A, G), haswordtitle(B, G) )
%   | then return 0.2573749481850921;  // std dev = 0.018, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return -0.08513563990483575;  // std dev = 0.000132, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #7
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordvenue(D, C) )
%   then if ( title(E, B), venue(E, D) )
%   | then if ( samebib(E, F), title(F, A) )
%   | | then return 0.20974863564756707;  // std dev = 0.001, 96.000 (wgt'ed) examples reached here.  /* #pos=96 */
%   | | else return -0.07978117896841946;  // std dev = 0.268, 206.000 (wgt'ed) examples reached here.  /* #neg=206 */
%   | else return 0.1984301653893709;  // std dev = 0.153, 13.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   else if ( haswordtitle(A, G), haswordtitle(B, G) )
%   | then return 0.21132605742777538;  // std dev = 0.016, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return -0.078734582391261;  // std dev = 0.000123, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #8
% FOR sametitle(A, B):
%   if ( haswordtitle(B, C), haswordvenue(D, C) )
%   then if ( title(E, A), venue(E, D) )
%   | then if ( samebib(E, F), title(F, B) )
%   | | then return 0.17709187451440622;  // std dev = 0.001, 96.000 (wgt'ed) examples reached here.  /* #pos=96 */
%   | | else return -0.07437447622766132;  // std dev = 0.303, 206.000 (wgt'ed) examples reached here.  /* #neg=206 */
%   | else return 0.16654646394404693;  // std dev = 0.143, 13.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   else if ( haswordtitle(A, G), haswordtitle(B, G) )
%   | then return 0.17860389115331468;  // std dev = 0.016, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return -0.07318387632889668;  // std dev = 0.000178, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #9
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordvenue(D, C) )
%   then if ( title(E, B), venue(E, D) )
%   | then if ( samebib(E, F), title(F, A) )
%   | | then return 0.1527365222925299;  // std dev = 0.001, 96.000 (wgt'ed) examples reached here.  /* #pos=96 */
%   | | else return -0.06948022626133438;  // std dev = 0.298, 206.000 (wgt'ed) examples reached here.  /* #neg=206 */
%   | else return 0.14013072263982093;  // std dev = 0.144, 13.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   else if ( haswordtitle(A, G), haswordtitle(B, G) )
%   | then return 0.15395388231852367;  // std dev = 0.014, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return -0.06837135060627689;  // std dev = 0.000170, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #10
% FOR sametitle(A, B):
%   if ( haswordtitle(B, C), haswordvenue(D, C) )
%   then if ( title(E, A), venue(E, D) )
%   | then if ( samebib(E, F), title(F, B) )
%   | | then return 0.13400327537981715;  // std dev = 0.000949, 96.000 (wgt'ed) examples reached here.  /* #pos=96 */
%   | | else return -0.06535000597888806;  // std dev = 0.328, 206.000 (wgt'ed) examples reached here.  /* #neg=206 */
%   | else return 0.12227045775978468;  // std dev = 0.137, 13.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   else if ( haswordtitle(A, G), haswordtitle(B, G) )
%   | then return 0.13527651275535196;  // std dev = 0.014, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return -0.06412161142768061;  // std dev = 0.000212, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */


Results
   AUC ROC   = 0.986433
   AUC PR    = 0.987219
   CLL	      = -0.161061
   Precision = 0.986038 at threshold = 0.5
   Recall    = 0.965812
   F1        = 0.97582


Total learning time: 389.55013823509216 seconds
Total inference time: 60.434 seconds
AUC ROC: 0.986433


Dataset: 6_imdb_cora, Fold: 3, Type: Scratch (RDN-B), Time: 01:46:26
{'AUC ROC': 0.986433, 'AUC PR': 0.987219, 'CLL': -0.161061, 'Precision': [0.986038, 0.5], 'Recall': 0.965812, 'F1': 0.97582, 'Learning time': 389.55013823509216, 'Inference time': 60.434}


Starting fold 4

Target train facts examples: 8129
Target train pos examples: 129
Target train neg examples: 70

Target test facts examples: 34429
Target test pos  examples: 569
Target test neg examples: 646

******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


WILL Produced-Tree #1
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordauthor(D, C) )
%   then if ( haswordtitle(B, C) )
%   | then return 0.8581489350995118;  // std dev = 1.46e-07, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | else return 0.088918165868743;  // std dev = 0.421, 13.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=3 */
%   else if ( haswordtitle(B, E), haswordauthor(F, E) )
%   | then return 0.088918165868743;  // std dev = 0.421, 13.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=3 */
%   | else return 0.5180128806777413;  // std dev = 0.474, 147.000 (wgt'ed) examples reached here.  /* #neg=50 #pos=97 */
WILL Produced-Tree #2
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordauthor(D, C) )
%   then if ( haswordtitle(B, C) )
%   | then return 0.7194734122109545;  // std dev = 0.000, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | else return 0.07774578121441031;  // std dev = 0.421, 13.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=3 */
%   else if ( haswordtitle(B, E), haswordauthor(F, E) )
%   | then return 0.07774578121441031;  // std dev = 0.421, 13.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=3 */
%   | else return 0.4426517838203286;  // std dev = 0.474, 147.000 (wgt'ed) examples reached here.  /* #neg=50 #pos=97 */
WILL Produced-Tree #3
% FOR sametitle(A, B):
%   if ( haswordtitle(B, C), haswordauthor(D, C) )
%   then if ( haswordtitle(A, C) )
%   | then return 0.5553664367462846;  // std dev = 0.000, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | else return 0.06739536297660921;  // std dev = 0.421, 13.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=3 */
%   else return 0.3345621613201564;  // std dev = 0.476, 160.000 (wgt'ed) examples reached here.  /* #neg=60 #pos=100 */
WILL Produced-Tree #4
% FOR sametitle(A, B):
%   return 0;  // std dev = 0.446, 199.000 (wgt'ed) examples reached here.  /* #neg=70 #pos=129 */
WILL Produced-Tree #5
% FOR sametitle(A, B):
%   if ( haswordtitle(B, C), haswordauthor(D, C) )
%   then if ( haswordtitle(A, C) )
%   | then return 0.41751358415831;  // std dev = 0.000, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | else return 0.0579733820773872;  // std dev = 0.421, 13.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=3 */
%   else return 0.2617468013590417;  // std dev = 0.475, 160.000 (wgt'ed) examples reached here.  /* #neg=60 #pos=100 */
WILL Produced-Tree #6
% FOR sametitle(A, B):
%   if ( haswordtitle(B, C), haswordauthor(D, C) )
%   then return 0.23031756389186392;  // std dev = 0.275, 39.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=29 */
%   else if ( haswordtitle(A, E), haswordauthor(F, E) )
%   | then return -0.030954795276344125;  // std dev = 0.421, 13.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=3 */
%   | else return 0.22032326153043133;  // std dev = 0.474, 147.000 (wgt'ed) examples reached here.  /* #neg=50 #pos=97 */
WILL Produced-Tree #7
% FOR sametitle(A, B):
%   return 0;  // std dev = 0.441, 199.000 (wgt'ed) examples reached here.  /* #neg=70 #pos=129 */
WILL Produced-Tree #8
% FOR sametitle(A, B):
%   if ( haswordtitle(B, C), haswordauthor(D, C) )
%   then if ( haswordtitle(A, C) )
%   | then return 0.2727291215056952;  // std dev = 0.000, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | else return 0.012818676052353737;  // std dev = 0.421, 13.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=3 */
%   else if ( haswordtitle(A, E), haswordauthor(F, E) )
%   | then return -0.025017832386321253;  // std dev = 0.421, 13.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=3 */
%   | else return 0.1655394796244285;  // std dev = 0.474, 147.000 (wgt'ed) examples reached here.  /* #neg=50 #pos=97 */
WILL Produced-Tree #9
% FOR sametitle(A, B):
%   if ( haswordtitle(B, C), haswordauthor(D, C) )
%   then if ( haswordtitle(A, C) )
%   | then return 0.22208638532667516;  // std dev = 0.000, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | else return 0.010625858836138978;  // std dev = 0.421, 13.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=3 */
%   else return 0.11247481338533336;  // std dev = 0.471, 160.000 (wgt'ed) examples reached here.  /* #neg=60 #pos=100 */
WILL Produced-Tree #10
% FOR sametitle(A, B):
%   if ( haswordtitle(B, C), haswordauthor(D, C) )
%   then if ( haswordtitle(A, C) )
%   | then return 0.1860875657672221;  // std dev = 1.83e-08, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | else return 0.008796184829081554;  // std dev = 0.421, 13.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=3 */
%   else return 0.08513569535185198;  // std dev = 0.471, 160.000 (wgt'ed) examples reached here.  /* #neg=60 #pos=100 */


Results
   AUC ROC   = 0.746149
   AUC PR    = 0.695718
   CLL	      = -0.596135
   Precision = 0.580541 at threshold = 0.5
   Recall    = 0.943761
   F1        = 0.718876


Total learning time: 8.513682842254639 seconds
Total inference time: 2.263 seconds
AUC ROC: 0.746149


Results scoring model
   AUC ROC   = 0.691584
   AUC PR    = 0.815016
   CLL	      = -0.576349
   Precision = 0.710983 at threshold = 0.5
   Recall    = 0.953488
   F1        = 0.81457


Total scoring time: 1.238 seconds
Parameter learned model CLL: -0.576349


Structure after Parameter Learning
[['sametitle(A, B)', {'': 'haswordtitle(A, C), haswordauthor(D, C)', 'true': 'haswordtitle(B, C)', 'false': 'haswordtitle(B, E), haswordauthor(F, E)'}, {'true,true': [1.46e-07, 0, 26], 'true,false': [0.421, 10, 3], 'false,true': [0.421, 10, 3], 'false,false': [0.474, 50, 97]}], ['sametitle(A, B)', {'': 'haswordtitle(A, C), haswordauthor(D, C)', 'true': 'haswordtitle(B, C)', 'false': 'haswordtitle(B, E), haswordauthor(F, E)'}, {'true,true': [0.0, 0, 26], 'true,false': [0.421, 10, 3], 'false,true': [0.421, 10, 3], 'false,false': [0.474, 50, 97]}], ['sametitle(A, B)', {'': 'haswordtitle(B, C), haswordauthor(D, C)', 'true': 'haswordtitle(A, C)'}, {'true,true': [0.0, 0, 26], 'true,false': [0.421, 10, 3], 'false': [0.476, 60, 100]}], ['sametitle(A, B)', {}, {}], ['sametitle(A, B)', {'': 'haswordtitle(B, C), haswordauthor(D, C)', 'true': 'haswordtitle(A, C)'}, {'true,true': [0.0, 0, 26], 'true,false': [0.421, 10, 3], 'false': [0.475, 60, 100]}], ['sametitle(A, B)', {'': 'haswordtitle(B, C), haswordauthor(D, C)', 'false': 'haswordtitle(A, E), haswordauthor(F, E)'}, {'true': [0.275, 10, 29], 'false,true': [0.421, 10, 3], 'false,false': [0.474, 50, 97]}], ['sametitle(A, B)', {}, {}], ['sametitle(A, B)', {'': 'haswordtitle(B, C), haswordauthor(D, C)', 'true': 'haswordtitle(A, C)', 'false': 'haswordtitle(A, E), haswordauthor(F, E)'}, {'true,true': [0.0, 0, 26], 'true,false': [0.421, 10, 3], 'false,true': [0.421, 10, 3], 'false,false': [0.474, 50, 97]}], ['sametitle(A, B)', {'': 'haswordtitle(B, C), haswordauthor(D, C)', 'true': 'haswordtitle(A, C)'}, {'true,true': [0.0, 0, 26], 'true,false': [0.421, 10, 3], 'false': [0.471, 60, 100]}], ['sametitle(A, B)', {'': 'haswordtitle(B, C), haswordauthor(D, C)', 'true': 'haswordtitle(A, C)'}, {'true,true': [1.83e-08, 0, 26], 'true,false': [0.421, 10, 3], 'false': [0.471, 60, 100]}]]
[{'': [0.19066403681788444, 0.2343750000000029], 'false': [0.17751479289940816, 0.22444351890416298], 'true': [8.198570028001156e-16, 0.17751479289940816]}, {'': [0.15068589816301034, 0.23057047642799117], 'false': [0.17751479289940827, 0.22444351890415876], 'true': [-1.3664283380001927e-16, 0.17751479289940827]}, {'': [0.11208621293000956, 0.22694290873112327], 'true': [-3.416070845000482e-16, 0.17751479289940833]}, {}, {'': [0.08789807694700044, 0.22595402787095825], 'true': [-6.832141690000964e-17, 0.1775147928994081]}, {'': [0.07551385052831006, 0.22534391166479145], 'false': [0.17751479289940833, 0.22444351890415906]}, {}, {'': [0.07418347311219266, 0.2233412006344851], 'false': [0.1775147928994083, 0.22444351890415973], 'true': [-7.686159401251084e-17, 0.17751479289940833]}, {'': [0.06910838746950383, 0.22218923890547013], 'true': [-8.540177112501205e-18, 0.17751479289940833]}, {'': [0.06615653846757015, 0.22206039783317197], 'true': [1.2810265668751807e-17, 0.17751479289940836]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;sametitle(A, B) :- haswordtitle(A, C), haswordauthor(D, C).;true;true
0;true;haswordtitle(B, C).;true;true
1;;sametitle(A, B) :- haswordtitle(A, C), haswordauthor(D, C).;true;true
1;true;haswordtitle(B, C).;true;true
2;;sametitle(A, B) :- haswordtitle(B, C), haswordauthor(D, C).;true;true
2;true;haswordtitle(A, C).;true;true
4;;sametitle(A, B) :- haswordtitle(B, C), haswordauthor(D, C).;true;true
4;true;haswordtitle(A, C).;true;true
7;;sametitle(A, B) :- haswordtitle(B, C), haswordauthor(D, C).;true;true
7;true;haswordtitle(A, C).;true;true
8;;sametitle(A, B) :- haswordtitle(B, C), haswordauthor(D, C).;true;true
8;true;haswordtitle(A, C).;true;true
9;;sametitle(A, B) :- haswordtitle(B, C), haswordauthor(D, C).;true;true
9;true;haswordtitle(A, C).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR sametitle(A, B):
%   if ( haswordtitle(B, C), haswordauthor(D, C) )
%   then if ( haswordtitle(A, C) )
%   | then return 0.8581489350995118;  // std dev = 1.46e-07, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | else return 0.088918165868743;  // std dev = 0.421, 13.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=3 */
%   else if ( haswordtitle(A, E), haswordauthor(F, E) )
%   | then return 0.088918165868743;  // std dev = 0.421, 13.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=3 */
%   | else return 0.5180128806777413;  // std dev = 0.474, 147.000 (wgt'ed) examples reached here.  /* #neg=50 #pos=97 */
WILL Produced-Tree #2
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordauthor(D, C) )
%   then if ( haswordtitle(B, C) )
%   | then return 0.7194734122109545;  // std dev = 0.000, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | else return 0.07774578121441031;  // std dev = 0.421, 13.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=3 */
%   else if ( haswordtitle(B, E), haswordauthor(F, E) )
%   | then return 0.07774578121441031;  // std dev = 0.421, 13.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=3 */
%   | else return 0.4426517838203286;  // std dev = 0.474, 147.000 (wgt'ed) examples reached here.  /* #neg=50 #pos=97 */
WILL Produced-Tree #3
% FOR sametitle(A, B):
%   if ( haswordtitle(B, C), haswordauthor(D, C) )
%   then if ( haswordtitle(A, C) )
%   | then return 0.5553664367462846;  // std dev = 0.000, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | else return 0.06739536297660921;  // std dev = 0.421, 13.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=3 */
%   else if ( haswordtitle(A, E), haswordauthor(F, E) )
%   | then return 0.06739536297660921;  // std dev = 0.421, 13.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=3 */
%   | else return 0.35818915709203447;  // std dev = 0.474, 147.000 (wgt'ed) examples reached here.  /* #neg=50 #pos=97 */
WILL Produced-Tree #4
% FOR sametitle(A, B):
%   if ( haswordtitle(B, C), haswordauthor(D, C) )
%   then if ( haswordtitle(A, C) )
%   | then return 0.41751358415831;  // std dev = 0.000, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | else return 0.0579733820773872;  // std dev = 0.421, 13.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=3 */
%   else if ( haswordtitle(A, E), haswordauthor(F, E) )
%   | then return 0.0579733820773872;  // std dev = 0.421, 13.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=3 */
%   | else return 0.27788243713622723;  // std dev = 0.474, 147.000 (wgt'ed) examples reached here.  /* #neg=50 #pos=97 */
WILL Produced-Tree #5
% FOR sametitle(A, B):
%   if ( haswordtitle(B, C), haswordauthor(D, C) )
%   then if ( haswordtitle(A, C) )
%   | then return 0.3207118471601494;  // std dev = 0.000, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | else return 0.049528997355293175;  // std dev = 0.421, 13.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=3 */
%   else if ( haswordtitle(A, E), haswordauthor(F, E) )
%   | then return 0.049528997355293175;  // std dev = 0.421, 13.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=3 */
%   | else return 0.21050564085975995;  // std dev = 0.474, 147.000 (wgt'ed) examples reached here.  /* #neg=50 #pos=97 */
WILL Produced-Tree #6
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordauthor(D, C) )
%   then if ( haswordtitle(B, C) )
%   | then return 0.25517224256948956;  // std dev = 0.000, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | else return 0.04206293300387109;  // std dev = 0.421, 13.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=3 */
%   else if ( haswordtitle(B, E), haswordauthor(F, E) )
%   | then return 0.04206293300387109;  // std dev = 0.421, 13.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=3 */
%   | else return 0.1580534785942129;  // std dev = 0.474, 147.000 (wgt'ed) examples reached here.  /* #neg=50 #pos=97 */
WILL Produced-Tree #7
% FOR sametitle(A, B):
%   if ( haswordtitle(B, C), haswordauthor(D, C) )
%   then if ( haswordtitle(A, C) )
%   | then return 0.2097577156325355;  // std dev = 2.11e-08, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | else return 0.03553879177151896;  // std dev = 0.421, 13.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=3 */
%   else if ( haswordtitle(A, E), haswordauthor(F, E) )
%   | then return 0.03553879177151896;  // std dev = 0.421, 13.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=3 */
%   | else return 0.11863393410771177;  // std dev = 0.474, 147.000 (wgt'ed) examples reached here.  /* #neg=50 #pos=97 */
WILL Produced-Tree #8
% FOR sametitle(A, B):
%   if ( haswordtitle(B, C), haswordauthor(D, C) )
%   then if ( haswordtitle(A, C) )
%   | then return 0.17709649774527747;  // std dev = 0.000, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | else return 0.029894556746069525;  // std dev = 0.421, 13.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=3 */
%   else return 0.08452352917895234;  // std dev = 0.470, 160.000 (wgt'ed) examples reached here.  /* #neg=60 #pos=100 */
WILL Produced-Tree #9
% FOR sametitle(A, B):
%   return 0;  // std dev = 0.436, 199.000 (wgt'ed) examples reached here.  /* #neg=70 #pos=129 */
WILL Produced-Tree #10
% FOR sametitle(A, B):
%   if ( haswordtitle(B, C), haswordauthor(D, C) )
%   then if ( haswordtitle(A, C) )
%   | then return 0.15274385809367083;  // std dev = 0.000, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | else return 0.025052826506284376;  // std dev = 0.421, 13.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=3 */
%   else return 0.06448920808360781;  // std dev = 0.470, 160.000 (wgt'ed) examples reached here.  /* #neg=60 #pos=100 */


Results
   AUC ROC   = 0.746149
   AUC PR    = 0.695718
   CLL	      = -0.597731
   Precision = 0.580541 at threshold = 0.5
   Recall    = 0.943761
   F1        = 0.718876


Total learning time: 9.976621866226196 seconds
Total inference time: 2.41 seconds
AUC ROC: 0.746149


Results scoring model
   AUC ROC   = 0.691584
   AUC PR    = 0.815016
   CLL	      = -0.567537
   Precision = 0.710983 at threshold = 0.5
   Recall    = 0.953488
   F1        = 0.81457


Total scoring time: 1.216 seconds
Refined model CLL: -0.567537


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.746149
   AUC PR    = 0.695718
   CLL	      = -0.597731
   Precision = 0.580541 at threshold = 0.5
   Recall    = 0.943761
   F1        = 0.718876


Total learning time: 20.944304708480836 seconds
Total inference time: 2.41 seconds
AUC ROC: 0.746149
Total revision time: 20.944304708480836
Best scored revision CLL: -0.567537


Dataset: 6_imdb_cora, Fold: 4, Type: Transfer (trRDN-B), Time: 01:46:55
{'AUC ROC': 0.746149, 'AUC PR': 0.695718, 'CLL': -0.597731, 'Precision': [0.580541, 0.5], 'Recall': 0.943761, 'F1': 0.718876, 'Learning time': 20.944304708480836, 'Inference time': 2.41, 'parameter': {'AUC ROC': 0.746149, 'AUC PR': 0.695718, 'CLL': -0.596135, 'Precision': [0.580541, 0.5], 'Recall': 0.943761, 'F1': 0.718876, 'Learning time': 8.513682842254639, 'Inference time': 2.263}}


WILL Produced-Tree #1
% FOR sametitle(A, B):
%   return 0;  // std dev = 0.478, 199.000 (wgt'ed) examples reached here.  /* #neg=70 #pos=129 */
WILL Produced-Tree #2
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordauthor(D, C) )
%   then if ( haswordtitle(B, C) )
%   | then return 0.8581489350995118;  // std dev = 1.46e-07, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | else return 0.088918165868743;  // std dev = 0.421, 13.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=3 */
%   else if ( haswordtitle(B, E), haswordauthor(F, E) )
%   | then return 0.088918165868743;  // std dev = 0.421, 13.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=3 */
%   | else return 0.5180128806777413;  // std dev = 0.474, 147.000 (wgt'ed) examples reached here.  /* #neg=50 #pos=97 */
WILL Produced-Tree #3
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordauthor(D, C) )
%   then if ( haswordtitle(B, C) )
%   | then return 0.7194734122109545;  // std dev = 0.000, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | else return 0.07774578121441031;  // std dev = 0.421, 13.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=3 */
%   else if ( haswordtitle(B, E), haswordauthor(F, E) )
%   | then return 0.07774578121441031;  // std dev = 0.421, 13.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=3 */
%   | else return 0.4426517838203286;  // std dev = 0.474, 147.000 (wgt'ed) examples reached here.  /* #neg=50 #pos=97 */
WILL Produced-Tree #4
% FOR sametitle(A, B):
%   if ( haswordtitle(B, C), haswordauthor(D, C) )
%   then if ( haswordtitle(A, C) )
%   | then return 0.5553664367462846;  // std dev = 0.000, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | else return 0.06739536297660921;  // std dev = 0.421, 13.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=3 */
%   else return 0.3345621613201564;  // std dev = 0.476, 160.000 (wgt'ed) examples reached here.  /* #neg=60 #pos=100 */
WILL Produced-Tree #5
% FOR sametitle(A, B):
%   if ( haswordtitle(B, C), haswordauthor(D, C) )
%   then if ( haswordtitle(A, C) )
%   | then return 0.41751358415831;  // std dev = 0.000, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | else return 0.0579733820773872;  // std dev = 0.421, 13.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=3 */
%   else return 0.2617468013590417;  // std dev = 0.475, 160.000 (wgt'ed) examples reached here.  /* #neg=60 #pos=100 */
WILL Produced-Tree #6
% FOR sametitle(A, B):
%   if ( haswordtitle(B, C), haswordauthor(D, C) )
%   then if ( haswordtitle(A, C) )
%   | then return 0.3207118471601494;  // std dev = 0.000, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | else return 0.049528997355293175;  // std dev = 0.421, 13.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=3 */
%   else return 0.19990691941488065;  // std dev = 0.475, 160.000 (wgt'ed) examples reached here.  /* #neg=60 #pos=100 */
WILL Produced-Tree #7
% FOR sametitle(A, B):
%   if ( haswordtitle(B, C), haswordauthor(D, C) )
%   then if ( haswordtitle(A, C) )
%   | then return 0.25517224256948956;  // std dev = 0.000, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | else return 0.04206293300387109;  // std dev = 0.421, 13.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=3 */
%   else return 0.1509784556790863;  // std dev = 0.474, 160.000 (wgt'ed) examples reached here.  /* #neg=60 #pos=100 */
WILL Produced-Tree #8
% FOR sametitle(A, B):
%   return 0;  // std dev = 0.440, 199.000 (wgt'ed) examples reached here.  /* #neg=70 #pos=129 */
WILL Produced-Tree #9
% FOR sametitle(A, B):
%   if ( haswordtitle(B, C), haswordauthor(D, C) )
%   then return 0.1516847410121967;  // std dev = 0.257, 39.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=29 */
%   else if ( haswordtitle(A, E), haswordauthor(F, E) )
%   | then return -0.10412268604957062;  // std dev = 0.421, 13.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=3 */
%   | else return 0.13292530598126764;  // std dev = 0.474, 147.000 (wgt'ed) examples reached here.  /* #neg=50 #pos=97 */
WILL Produced-Tree #10
% FOR sametitle(A, B):
%   if ( haswordtitle(B, C), haswordauthor(D, C) )
%   then if ( haswordtitle(A, C) )
%   | then return 0.1857189300773464;  // std dev = 4.08e-08, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | else return 0.010601748583620436;  // std dev = 0.421, 13.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=3 */
%   else if ( haswordtitle(A, E), haswordauthor(F, E) )
%   | then return -0.08134266940431942;  // std dev = 0.421, 13.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=3 */
%   | else return 0.09995702493302487;  // std dev = 0.474, 147.000 (wgt'ed) examples reached here.  /* #neg=50 #pos=97 */


Results
   AUC ROC   = 0.746149
   AUC PR    = 0.695718
   CLL	      = -0.596523
   Precision = 0.580541 at threshold = 0.5
   Recall    = 0.943761
   F1        = 0.718876


Total learning time: 8.180599927902222 seconds
Total inference time: 2.231 seconds
AUC ROC: 0.746149


Dataset: 6_imdb_cora, Fold: 4, Type: Scratch (RDN-B), Time: 01:47:06
{'AUC ROC': 0.746149, 'AUC PR': 0.695718, 'CLL': -0.596523, 'Precision': [0.580541, 0.5], 'Recall': 0.943761, 'F1': 0.718876, 'Learning time': 8.180599927902222, 'Inference time': 2.231}


Starting fold 5

Target train facts examples: 8644
Target train pos examples: 154
Target train neg examples: 148

Target test facts examples: 33914
Target test pos  examples: 544
Target test neg examples: 568

******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


WILL Produced-Tree #1
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordauthor(D, C) )
%   then if ( haswordtitle(B, C) )
%   | then return 0.8248156017661792;  // std dev = 0.180, 60.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=58 */
%   | else if ( author(E, D), title(E, B) )
%   | | then return 0.5248156017661788;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return -0.04185106490048778;  // std dev = 0.300, 10.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=1 */
%   else return 0.2642624722174136;  // std dev = 0.491, 229.000 (wgt'ed) examples reached here.  /* #neg=136 #pos=93 */
WILL Produced-Tree #2
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordauthor(D, C) )
%   then if ( haswordtitle(B, C) )
%   | then return 0.6928183180467428;  // std dev = 0.180, 60.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=58 */
%   | else if ( author(E, D), title(E, B) )
%   | | then return 0.448295606241962;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return -0.03683251744007497;  // std dev = 0.300, 10.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=1 */
%   else if ( haswordtitle(B, F), haswordauthor(G, F) )
%   | then if ( author(H, G), title(H, A) )
%   | | then return 0.48951089929460284;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return -0.052155767372063885;  // std dev = 0.331, 8.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */
%   | else return 0.2356882693251818;  // std dev = 0.492, 218.000 (wgt'ed) examples reached here.  /* #neg=128 #pos=90 */
WILL Produced-Tree #3
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordauthor(D, C) )
%   then if ( haswordtitle(B, C) )
%   | then return 0.5367928709789446;  // std dev = 0.180, 60.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=58 */
%   | else if ( author(E, D), title(E, B) )
%   | | then return 0.36236334632262296;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return -0.03254015317273094;  // std dev = 0.300, 10.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=1 */
%   else if ( haswordtitle(B, F), haswordauthor(G, F) )
%   | then if ( author(H, G), title(H, A) )
%   | | then return 0.4067163168951144;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return -0.04468050202167291;  // std dev = 0.331, 8.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */
%   | else return 0.19868730974080162;  // std dev = 0.492, 218.000 (wgt'ed) examples reached here.  /* #neg=128 #pos=90 */
WILL Produced-Tree #4
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordauthor(D, C) )
%   then if ( haswordtitle(B, C) )
%   | then return 0.4034008832853693;  // std dev = 0.180, 60.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=58 */
%   | else if ( author(E, D), title(E, B) )
%   | | then return 0.2807538536965855;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return -0.028843434243526523;  // std dev = 0.300, 10.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=1 */
%   else return 0.15837737421222356;  // std dev = 0.489, 229.000 (wgt'ed) examples reached here.  /* #neg=136 #pos=93 */
WILL Produced-Tree #5
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordauthor(D, C) )
%   then if ( haswordtitle(B, C) )
%   | then return 0.30789442979240567;  // std dev = 0.180, 60.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=58 */
%   | else if ( author(E, D), title(E, B) )
%   | | then return 0.21248070121827137;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return -0.025640477399664095;  // std dev = 0.300, 10.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=1 */
%   else return 0.1277671012788601;  // std dev = 0.489, 229.000 (wgt'ed) examples reached here.  /* #neg=136 #pos=93 */
WILL Produced-Tree #6
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordauthor(D, C) )
%   then if ( haswordtitle(B, C) )
%   | then return 0.24240066496454685;  // std dev = 0.180, 60.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=58 */
%   | else if ( author(E, D), title(E, B) )
%   | | then return 0.1594898822817116;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return -0.022850675562834787;  // std dev = 0.300, 10.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=1 */
%   else return 0.10145269150603223;  // std dev = 0.489, 229.000 (wgt'ed) examples reached here.  /* #neg=136 #pos=93 */
WILL Produced-Tree #7
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordauthor(D, C) )
%   then if ( haswordtitle(B, C) )
%   | then return 0.19670004057326665;  // std dev = 0.180, 60.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=58 */
%   | else if ( author(E, D), title(E, B) )
%   | | then return 0.11975529938157474;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return -0.02040946845150366;  // std dev = 0.300, 10.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=1 */
%   else return 0.0795985181691437;  // std dev = 0.489, 229.000 (wgt'ed) examples reached here.  /* #neg=136 #pos=93 */
WILL Produced-Tree #8
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordauthor(D, C) )
%   then if ( haswordtitle(B, C) )
%   | then return 0.16371858628713193;  // std dev = 0.180, 60.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=58 */
%   | else if ( author(E, D), title(E, B) )
%   | | then return 0.09028081829440963;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return -0.018264572141688296;  // std dev = 0.300, 10.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=1 */
%   else return 0.061903490484831535;  // std dev = 0.489, 229.000 (wgt'ed) examples reached here.  /* #neg=136 #pos=93 */
WILL Produced-Tree #9
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordauthor(D, C) )
%   then if ( haswordtitle(B, C) )
%   | then return 0.13909109340224876;  // std dev = 0.180, 60.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=58 */
%   | else if ( author(E, D), title(E, B) )
%   | | then return 0.06840311429118533;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return -0.01637321748135532;  // std dev = 0.300, 10.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=1 */
%   else if ( haswordtitle(B, F), haswordauthor(G, F) )
%   | then if ( author(H, G), title(H, A) )
%   | | then return 0.1942414435422454;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return -0.12408942126752452;  // std dev = 0.331, 8.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */
%   | else return 0.052129170809666184;  // std dev = 0.492, 218.000 (wgt'ed) examples reached here.  /* #neg=128 #pos=90 */
WILL Produced-Tree #10
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordauthor(D, C) )
%   then if ( haswordtitle(B, C) )
%   | then return 0.12013771168374343;  // std dev = 0.180, 60.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=58 */
%   | else if ( author(E, D), title(E, B) )
%   | | then return 0.052078905701252655;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return -0.014700098059752786;  // std dev = 0.300, 10.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=1 */
%   else return 0.036459925741103315;  // std dev = 0.488, 229.000 (wgt'ed) examples reached here.  /* #neg=136 #pos=93 */


Results
   AUC ROC   = 0.73954
   AUC PR    = 0.695161
   CLL	      = -0.61453
   Precision = 0.759542 at threshold = 0.5
   Recall    = 0.365809
   F1        = 0.493797


Total learning time: 16.464579820632935 seconds
Total inference time: 3.458 seconds
AUC ROC: 0.73954


Results scoring model
   AUC ROC   = 0.716172
   AUC PR    = 0.772847
   CLL	      = -0.567381
   Precision = 0.939394 at threshold = 0.5
   Recall    = 0.402597
   F1        = 0.563636


Total scoring time: 1.419 seconds
Parameter learned model CLL: -0.567381


Structure after Parameter Learning
[['sametitle(A, B)', {'': 'haswordtitle(A, C), haswordauthor(D, C)', 'true': 'haswordtitle(B, C)', 'true,false': 'author(E, D), title(E, B)'}, {'true,true': [0.18, 2, 58], 'true,false,true': [0.816, 1, 2], 'true,false,false': [0.3, 9, 1], 'false': [0.491, 136, 93]}], ['sametitle(A, B)', {'': 'haswordtitle(A, C), haswordauthor(D, C)', 'true': 'haswordtitle(B, C)', 'true,false': 'author(E, D), title(E, B)', 'false': 'haswordtitle(B, F), haswordauthor(G, F)', 'false,true': 'author(H, G), title(H, A)'}, {'true,true': [0.18, 2, 58], 'true,false,true': [0.816, 1, 2], 'true,false,false': [0.3, 9, 1], 'false,true,true': [0.816, 1, 2], 'false,true,false': [0.331, 7, 1], 'false,false': [0.492, 128, 90]}], ['sametitle(A, B)', {'': 'haswordtitle(A, C), haswordauthor(D, C)', 'true': 'haswordtitle(B, C)', 'true,false': 'author(E, D), title(E, B)', 'false': 'haswordtitle(B, F), haswordauthor(G, F)', 'false,true': 'author(H, G), title(H, A)'}, {'true,true': [0.18, 2, 58], 'true,false,true': [0.816, 1, 2], 'true,false,false': [0.3, 9, 1], 'false,true,true': [0.816, 1, 2], 'false,true,false': [0.331, 7, 1], 'false,false': [0.492, 128, 90]}], ['sametitle(A, B)', {'': 'haswordtitle(A, C), haswordauthor(D, C)', 'true': 'haswordtitle(B, C)', 'true,false': 'author(E, D), title(E, B)'}, {'true,true': [0.18, 2, 58], 'true,false,true': [0.816, 1, 2], 'true,false,false': [0.3, 9, 1], 'false': [0.489, 136, 93]}], ['sametitle(A, B)', {'': 'haswordtitle(A, C), haswordauthor(D, C)', 'true': 'haswordtitle(B, C)', 'true,false': 'author(E, D), title(E, B)'}, {'true,true': [0.18, 2, 58], 'true,false,true': [0.816, 1, 2], 'true,false,false': [0.3, 9, 1], 'false': [0.489, 136, 93]}], ['sametitle(A, B)', {'': 'haswordtitle(A, C), haswordauthor(D, C)', 'true': 'haswordtitle(B, C)', 'true,false': 'author(E, D), title(E, B)'}, {'true,true': [0.18, 2, 58], 'true,false,true': [0.816, 1, 2], 'true,false,false': [0.3, 9, 1], 'false': [0.489, 136, 93]}], ['sametitle(A, B)', {'': 'haswordtitle(A, C), haswordauthor(D, C)', 'true': 'haswordtitle(B, C)', 'true,false': 'author(E, D), title(E, B)'}, {'true,true': [0.18, 2, 58], 'true,false,true': [0.816, 1, 2], 'true,false,false': [0.3, 9, 1], 'false': [0.489, 136, 93]}], ['sametitle(A, B)', {'': 'haswordtitle(A, C), haswordauthor(D, C)', 'true': 'haswordtitle(B, C)', 'true,false': 'author(E, D), title(E, B)'}, {'true,true': [0.18, 2, 58], 'true,false,true': [0.816, 1, 2], 'true,false,false': [0.3, 9, 1], 'false': [0.489, 136, 93]}], ['sametitle(A, B)', {'': 'haswordtitle(A, C), haswordauthor(D, C)', 'true': 'haswordtitle(B, C)', 'true,false': 'author(E, D), title(E, B)', 'false': 'haswordtitle(B, F), haswordauthor(G, F)', 'false,true': 'author(H, G), title(H, A)'}, {'true,true': [0.18, 2, 58], 'true,false,true': [0.816, 1, 2], 'true,false,false': [0.3, 9, 1], 'false,true,true': [0.816, 1, 2], 'false,true,false': [0.331, 7, 1], 'false,false': [0.492, 128, 90]}], ['sametitle(A, B)', {'': 'haswordtitle(A, C), haswordauthor(D, C)', 'true': 'haswordtitle(B, C)', 'true,false': 'author(E, D), title(E, B)'}, {'true,true': [0.18, 2, 58], 'true,false,true': [0.816, 1, 2], 'true,false,false': [0.3, 9, 1], 'false': [0.488, 136, 93]}]]
[{'': [0.13736160630512223, 0.2411853320874907], 'true': [0.03222222222222181, 0.17751479289940816], 'true,false': [0.22222222222222224, 0.09000000000000005]}, {'': [0.11123233779573748, 0.2411853320874881], 'false': [0.1983471074380164, 0.24240383806077062], 'false,true': [0.22222222222222224, 0.10937500000000001], 'true': [0.03222222222222181, 0.16229080212002525], 'true,false': [0.2222222222222222, 0.08999999999999996]}, {'': [0.08634624456448779, 0.24009481665313295], 'false': [0.18056654089595053, 0.24240383806076876], 'false,true': [0.22222222222222224, 0.10937500000000003], 'true': [0.032222222222222464, 0.14819603481702354], 'true,false': [0.22222222222222224, 0.09]}, {'': [0.0700289392641505, 0.23921734075890397], 'true': [0.032222222222221604, 0.1375276987435672], 'true,false': [0.2222222222222222, 0.08999999999999998]}, {'': [0.06109721369649851, 0.23908531528670204], 'true': [0.03222222222222227, 0.13057821028318645], 'true,false': [0.2222222222222222, 0.08999999999999998]}, {'': [0.0562863130383391, 0.23898639421627693], 'true': [0.03222222222222208, 0.12641484637703249], 'true,false': [0.2222222222222222, 0.09]}, {'': [0.05356295683713766, 0.23891385945931823], 'true': [0.03222222222222211, 0.12400030491667272], 'true,false': [0.22222222222222224, 0.09000000000000001]}, {'': [0.05192248903411167, 0.23886121730203214], 'true': [0.03222222222222229, 0.12260431787109126], 'true,false': [0.22222222222222224, 0.08999999999999997]}, {'': [0.05087568478857527, 0.23882310854106473], 'false': [0.1602509279430264, 0.24240383806076962], 'false,true': [0.2222222222222222, 0.10937499999999996], 'true': [0.03222222222222225, 0.12178862402089298], 'true,false': [0.2222222222222222, 0.08999999999999998]}, {'': [0.050173819518684666, 0.23832658243462382], 'true': [0.03222222222222225, 0.12130443625423688], 'true,false': [0.22222222222222224, 0.08999999999999998]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Pruning resulted in null theory

Candidate for revision
0;;sametitle(A, B) :- haswordtitle(A, C), haswordauthor(D, C).;true;true
0;true;haswordtitle(B, C).;true;true
0;true,false;author(E, D), title(E, B).;true;true
1;;sametitle(A, B) :- haswordtitle(A, C), haswordauthor(D, C).;true;true
1;true;haswordtitle(B, C).;true;true
1;true,false;author(E, D), title(E, B).;true;true
1;false;haswordtitle(B, F), haswordauthor(G, F).;true;true
1;false,true;author(H, G), title(H, A).;true;true
2;;sametitle(A, B) :- haswordtitle(A, C), haswordauthor(D, C).;true;true
2;true;haswordtitle(B, C).;true;true
2;true,false;author(E, D), title(E, B).;true;true
2;false;haswordtitle(B, F), haswordauthor(G, F).;true;true
2;false,true;author(H, G), title(H, A).;true;true
3;;sametitle(A, B) :- haswordtitle(A, C), haswordauthor(D, C).;true;true
3;true;haswordtitle(B, C).;true;true
3;true,false;author(E, D), title(E, B).;true;true
4;;sametitle(A, B) :- haswordtitle(A, C), haswordauthor(D, C).;true;true
4;true;haswordtitle(B, C).;true;true
4;true,false;author(E, D), title(E, B).;true;true
5;;sametitle(A, B) :- haswordtitle(A, C), haswordauthor(D, C).;true;true
5;true;haswordtitle(B, C).;true;true
5;true,false;author(E, D), title(E, B).;true;true
6;;sametitle(A, B) :- haswordtitle(A, C), haswordauthor(D, C).;true;true
6;true;haswordtitle(B, C).;true;true
6;true,false;author(E, D), title(E, B).;true;true
7;;sametitle(A, B) :- haswordtitle(A, C), haswordauthor(D, C).;true;true
7;true;haswordtitle(B, C).;true;true
7;true,false;author(E, D), title(E, B).;true;true
8;;sametitle(A, B) :- haswordtitle(A, C), haswordauthor(D, C).;true;true
8;true;haswordtitle(B, C).;true;true
8;true,false;author(E, D), title(E, B).;true;true
8;false;haswordtitle(B, F), haswordauthor(G, F).;true;true
8;false,true;author(H, G), title(H, A).;true;true
9;;sametitle(A, B) :- haswordtitle(A, C), haswordauthor(D, C).;true;true
9;true;haswordtitle(B, C).;true;true
9;true,false;author(E, D), title(E, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordauthor(D, C) )
%   then if ( haswordtitle(B, C) )
%   | then return 0.8248156017661792;  // std dev = 0.180, 60.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=58 */
%   | else if ( author(E, D), title(E, B) )
%   | | then return 0.5248156017661788;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return -0.04185106490048778;  // std dev = 0.300, 10.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=1 */
%   else if ( haswordtitle(B, F), haswordauthor(G, F) )
%   | then if ( author(H, G), title(H, A) )
%   | | then return 0.5248156017661788;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return -0.016851064900487787;  // std dev = 0.331, 8.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */
%   | else return 0.27099297179675785;  // std dev = 0.492, 218.000 (wgt'ed) examples reached here.  /* #neg=128 #pos=90 */
WILL Produced-Tree #2
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordauthor(D, C) )
%   then if ( haswordtitle(B, C) )
%   | then return 0.6928183180467428;  // std dev = 0.180, 60.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=58 */
%   | else if ( author(E, D), title(E, B) )
%   | | then return 0.448295606241962;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return -0.03683251744007497;  // std dev = 0.300, 10.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=1 */
%   else return 0.22878639373303108;  // std dev = 0.490, 229.000 (wgt'ed) examples reached here.  /* #neg=136 #pos=93 */
WILL Produced-Tree #3
% FOR sametitle(A, B):
%   if ( haswordtitle(B, C), haswordauthor(D, C) )
%   then if ( haswordtitle(A, C) )
%   | then return 0.5367928709789446;  // std dev = 0.180, 60.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=58 */
%   | else if ( author(E, D), title(E, A) )
%   | | then return 0.40674928419898954;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return -0.06223311734526062;  // std dev = 0.298, 10.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=1 */
%   else return 0.1936545391874636;  // std dev = 0.489, 229.000 (wgt'ed) examples reached here.  /* #neg=136 #pos=93 */
WILL Produced-Tree #4
% FOR sametitle(A, B):
%   if ( haswordtitle(B, C), haswordauthor(D, C) )
%   then if ( haswordtitle(A, C) )
%   | then return 0.4034008832853693;  // std dev = 0.180, 60.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=58 */
%   | else if ( author(E, D), title(E, A) )
%   | | then return 0.3213407157010733;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return -0.053964401738106814;  // std dev = 0.298, 10.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=1 */
%   else if ( haswordtitle(A, F), haswordauthor(G, F) )
%   | then if ( author(H, G), title(H, B) )
%   | | then return 0.31988912371906036;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return -0.03143068848329426;  // std dev = 0.331, 8.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */
%   | else return 0.16433240803647503;  // std dev = 0.492, 218.000 (wgt'ed) examples reached here.  /* #neg=128 #pos=90 */
WILL Produced-Tree #5
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordauthor(D, C) )
%   then if ( haswordtitle(B, C) )
%   | then return 0.30789442979240567;  // std dev = 0.180, 60.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=58 */
%   | else if ( author(E, D), title(E, B) )
%   | | then return 0.24436822515775095;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return -0.045810472252368575;  // std dev = 0.298, 10.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=1 */
%   else return 0.12824234818479632;  // std dev = 0.488, 229.000 (wgt'ed) examples reached here.  /* #neg=136 #pos=93 */
WILL Produced-Tree #6
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordauthor(D, C) )
%   then if ( haswordtitle(B, C) )
%   | then return 0.24240066496454685;  // std dev = 0.180, 60.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=58 */
%   | else if ( author(E, D), title(E, B) )
%   | | then return 0.18390405883267116;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return -0.04020425865353348;  // std dev = 0.298, 10.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=1 */
%   else return 0.1019056226755954;  // std dev = 0.488, 229.000 (wgt'ed) examples reached here.  /* #neg=136 #pos=93 */
WILL Produced-Tree #7
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordauthor(D, C) )
%   then if ( haswordtitle(B, C) )
%   | then return 0.19670004057326665;  // std dev = 0.180, 60.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=58 */
%   | else if ( author(E, D), title(E, B) )
%   | | then return 0.13796646094836265;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return -0.035433605391053453;  // std dev = 0.298, 10.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=1 */
%   else return 0.08001492898859844;  // std dev = 0.488, 229.000 (wgt'ed) examples reached here.  /* #neg=136 #pos=93 */
WILL Produced-Tree #8
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordauthor(D, C) )
%   then if ( haswordtitle(B, C) )
%   | then return 0.16371858628713193;  // std dev = 0.180, 60.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=58 */
%   | else if ( author(E, D), title(E, B) )
%   | | then return 0.10377807690924983;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return -0.031343069258128374;  // std dev = 0.298, 10.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=1 */
%   else return 0.062275575903335836;  // std dev = 0.488, 229.000 (wgt'ed) examples reached here.  /* #neg=136 #pos=93 */
WILL Produced-Tree #9
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordauthor(D, C) )
%   then if ( haswordtitle(B, C) )
%   | then return 0.13909109340224876;  // std dev = 0.180, 60.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=58 */
%   | else if ( author(E, D), title(E, B) )
%   | | then return 0.07843216003132962;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return -0.027812500568839972;  // std dev = 0.298, 10.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=1 */
%   else return 0.04815991139391121;  // std dev = 0.488, 229.000 (wgt'ed) examples reached here.  /* #neg=136 #pos=93 */
WILL Produced-Tree #10
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordauthor(D, C) )
%   then if ( haswordtitle(B, C) )
%   | then return 0.12013771168374343;  // std dev = 0.180, 60.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=58 */
%   | else if ( author(E, D), title(E, B) )
%   | | then return 0.05957490617180886;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return -0.024747668183615845;  // std dev = 0.298, 10.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=1 */
%   else return 0.03707199837964389;  // std dev = 0.488, 229.000 (wgt'ed) examples reached here.  /* #neg=136 #pos=93 */


Results
   AUC ROC   = 0.739676
   AUC PR    = 0.695258
   CLL	      = -0.612938
   Precision = 0.76834 at threshold = 0.5
   Recall    = 0.365809
   F1        = 0.495641


Total learning time: 16.307782888412476 seconds
Total inference time: 3.433 seconds
AUC ROC: 0.739676


Results scoring model
   AUC ROC   = 0.716216
   AUC PR    = 0.772858
   CLL	      = -0.567117
   Precision = 0.939394 at threshold = 0.5
   Recall    = 0.402597
   F1        = 0.563636


Total scoring time: 1.423 seconds
Refined model CLL: -0.567117


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.739676
   AUC PR    = 0.695258
   CLL	      = -0.612938
   Precision = 0.76834 at threshold = 0.5
   Recall    = 0.365809
   F1        = 0.495641


Total learning time: 35.61436270904541 seconds
Total inference time: 3.433 seconds
AUC ROC: 0.739676
Total revision time: 35.61436270904541
Best scored revision CLL: -0.567117


Dataset: 6_imdb_cora, Fold: 5, Type: Transfer (trRDN-B), Time: 01:47:52
{'AUC ROC': 0.739676, 'AUC PR': 0.695258, 'CLL': -0.612938, 'Precision': [0.76834, 0.5], 'Recall': 0.365809, 'F1': 0.495641, 'Learning time': 35.61436270904541, 'Inference time': 3.433, 'parameter': {'AUC ROC': 0.73954, 'AUC PR': 0.695161, 'CLL': -0.61453, 'Precision': [0.759542, 0.5], 'Recall': 0.365809, 'F1': 0.493797, 'Learning time': 16.464579820632935, 'Inference time': 3.458}}


WILL Produced-Tree #1
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordauthor(D, C) )
%   then if ( haswordtitle(B, C) )
%   | then return 0.8248156017661792;  // std dev = 0.180, 60.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=58 */
%   | else if ( author(E, D), title(E, B) )
%   | | then return 0.5248156017661788;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return -0.04185106490048778;  // std dev = 0.300, 10.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=1 */
%   else return 0.2642624722174136;  // std dev = 0.491, 229.000 (wgt'ed) examples reached here.  /* #neg=136 #pos=93 */
WILL Produced-Tree #2
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordauthor(D, C) )
%   then if ( haswordtitle(B, C) )
%   | then return 0.6928183180467428;  // std dev = 0.180, 60.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=58 */
%   | else if ( author(E, D), title(E, B) )
%   | | then return 0.448295606241962;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return -0.03683251744007497;  // std dev = 0.300, 10.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=1 */
%   else return 0.22895776974583762;  // std dev = 0.491, 229.000 (wgt'ed) examples reached here.  /* #neg=136 #pos=93 */
WILL Produced-Tree #3
% FOR sametitle(A, B):
%   if ( haswordtitle(B, C), haswordauthor(D, C) )
%   then if ( haswordtitle(A, C) )
%   | then return 0.5367928709789446;  // std dev = 0.180, 60.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=58 */
%   | else if ( author(E, D), title(E, A) )
%   | | then return 0.4536404606300186;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return -0.0969289954638646;  // std dev = 0.296, 10.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=1 */
%   else return 0.19470330086287038;  // std dev = 0.489, 229.000 (wgt'ed) examples reached here.  /* #neg=136 #pos=93 */
WILL Produced-Tree #4
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordauthor(D, C) )
%   then if ( haswordtitle(B, C) )
%   | then return 0.4034008832853693;  // std dev = 0.180, 60.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=58 */
%   | else if ( author(E, D), title(E, B) )
%   | | then return 0.31965151704517386;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return -0.04961276990980944;  // std dev = 0.298, 10.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=1 */
%   else if ( haswordtitle(B, F), haswordauthor(G, F) )
%   | then if ( author(H, G), title(H, A) )
%   | | then return 0.367891933492884;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return -0.07222824777999622;  // std dev = 0.331, 8.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */
%   | else return 0.16536006123805125;  // std dev = 0.492, 218.000 (wgt'ed) examples reached here.  /* #neg=128 #pos=90 */
WILL Produced-Tree #5
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordauthor(D, C) )
%   then if ( haswordtitle(B, C) )
%   | then return 0.30789442979240567;  // std dev = 0.180, 60.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=58 */
%   | else if ( author(E, D), title(E, B) )
%   | | then return 0.24417032131917174;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return -0.043418804453601585;  // std dev = 0.298, 10.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=1 */
%   else return 0.12850510669463416;  // std dev = 0.489, 229.000 (wgt'ed) examples reached here.  /* #neg=136 #pos=93 */
WILL Produced-Tree #6
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordauthor(D, C) )
%   then if ( haswordtitle(B, C) )
%   | then return 0.24240066496454685;  // std dev = 0.180, 60.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=58 */
%   | else if ( author(E, D), title(E, B) )
%   | | then return 0.1837509266418981;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return -0.038174402579424706;  // std dev = 0.298, 10.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=1 */
%   else if ( haswordtitle(B, F), haswordauthor(G, F) )
%   | then if ( author(H, G), title(H, A) )
%   | | then return 0.25491826494225805;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return -0.08129054275487287;  // std dev = 0.331, 8.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */
%   | else return 0.10670055129581135;  // std dev = 0.492, 218.000 (wgt'ed) examples reached here.  /* #neg=128 #pos=90 */
WILL Produced-Tree #7
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordauthor(D, C) )
%   then if ( haswordtitle(B, C) )
%   | then return 0.19670004057326665;  // std dev = 0.180, 60.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=58 */
%   | else if ( author(E, D), title(E, B) )
%   | | then return 0.13785181172217412;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return -0.03369716116213065;  // std dev = 0.298, 10.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=1 */
%   else if ( haswordtitle(B, F), haswordauthor(G, F) )
%   | then if ( author(H, G), title(H, A) )
%   | | then return 0.1921006932675641;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return -0.06829782134444974;  // std dev = 0.331, 8.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */
%   | else return 0.08357892839004909;  // std dev = 0.492, 218.000 (wgt'ed) examples reached here.  /* #neg=128 #pos=90 */
WILL Produced-Tree #8
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordauthor(D, C) )
%   then if ( haswordtitle(B, C) )
%   | then return 0.16371858628713193;  // std dev = 0.180, 60.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=58 */
%   | else if ( author(E, D), title(E, B) )
%   | | then return 0.10369307764441564;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return -0.0298474047767678;  // std dev = 0.298, 10.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=1 */
%   else return 0.061614906891426034;  // std dev = 0.488, 229.000 (wgt'ed) examples reached here.  /* #neg=136 #pos=93 */
WILL Produced-Tree #9
% FOR sametitle(A, B):
%   return 0;  // std dev = 0.440, 302.000 (wgt'ed) examples reached here.  /* #neg=148 #pos=154 */
WILL Produced-Tree #10
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordauthor(D, C) )
%   then if ( haswordtitle(B, C) )
%   | then return 0.13909109340224876;  // std dev = 0.180, 60.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=58 */
%   | else if ( author(E, D), title(E, B) )
%   | | then return 0.07836907170949829;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return -0.02651650537071216;  // std dev = 0.298, 10.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=1 */
%   else if ( haswordtitle(B, F), haswordauthor(G, F) )
%   | then if ( author(H, G), title(H, A) )
%   | | then return 0.1287666029153113;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return -0.0672578647076957;  // std dev = 0.331, 8.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */
%   | else return 0.050756922753958475;  // std dev = 0.492, 218.000 (wgt'ed) examples reached here.  /* #neg=128 #pos=90 */


Results
   AUC ROC   = 0.739676
   AUC PR    = 0.695258
   CLL	      = -0.611487
   Precision = 0.759542 at threshold = 0.5
   Recall    = 0.365809
   F1        = 0.493797


Total learning time: 16.265799283981323 seconds
Total inference time: 3.43 seconds
AUC ROC: 0.739676


Dataset: 6_imdb_cora, Fold: 5, Type: Scratch (RDN-B), Time: 01:48:13
{'AUC ROC': 0.739676, 'AUC PR': 0.695258, 'CLL': -0.611487, 'Precision': [0.759542, 0.5], 'Recall': 0.365809, 'F1': 0.493797, 'Learning time': 16.265799283981323, 'Inference time': 3.43}


Starting fold 1

Target train facts examples: 7463
Target train pos examples: 162
Target train neg examples: 236

Target test facts examples: 35095
Target test pos  examples: 536
Target test neg examples: 480

******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


WILL Produced-Tree #1
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordauthor(D, C) )
%   then if ( haswordtitle(B, C) )
%   | then return 0.7369368138873914;  // std dev = 0.326, 66.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=58 */
%   | else return 0.003310225422092987;  // std dev = 0.352, 62.000 (wgt'ed) examples reached here.  /* #neg=53 #pos=9 */
%   else if ( haswordtitle(B, E), haswordauthor(F, E) )
%   | then return 0.01886322081379807;  // std dev = 0.367, 56.000 (wgt'ed) examples reached here.  /* #neg=47 #pos=9 */
%   | else return 0.2600180939780157;  // std dev = 0.490, 214.000 (wgt'ed) examples reached here.  /* #neg=128 #pos=86 */
WILL Produced-Tree #2
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordauthor(D, C) )
%   then if ( haswordtitle(B, C) )
%   | then return 0.6220633676283396;  // std dev = 0.326, 66.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=58 */
%   | else if ( author(E, D), title(E, B) )
%   | | then return 0.23274550562375218;  // std dev = 0.484, 8.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=3 */
%   | | else return -0.031143383265136704;  // std dev = 0.314, 54.000 (wgt'ed) examples reached here.  /* #neg=48 #pos=6 */
%   else if ( haswordtitle(B, F), haswordauthor(G, F) )
%   | then if ( author(H, G), title(H, A) )
%   | | then return 0.4558371783570768;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | else return -0.026515762819393735;  // std dev = 0.322, 51.000 (wgt'ed) examples reached here.  /* #neg=45 #pos=6 */
%   | else return 0.22533125375206722;  // std dev = 0.490, 214.000 (wgt'ed) examples reached here.  /* #neg=128 #pos=86 */
WILL Produced-Tree #3
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordauthor(D, C) )
%   then if ( haswordtitle(B, C) )
%   | then return 0.48728512046144257;  // std dev = 0.326, 66.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=58 */
%   | else if ( author(E, D), title(E, B) )
%   | | then return 0.201918601559637;  // std dev = 0.484, 8.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=3 */
%   | | else return -0.027385497018114976;  // std dev = 0.314, 54.000 (wgt'ed) examples reached here.  /* #neg=48 #pos=6 */
%   else if ( haswordtitle(B, F), haswordauthor(G, F) )
%   | then if ( author(H, G), title(H, A) )
%   | | then return 0.39006207073532295;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | else return -0.02327501784494782;  // std dev = 0.322, 51.000 (wgt'ed) examples reached here.  /* #neg=45 #pos=6 */
%   | else return 0.19015949657647718;  // std dev = 0.490, 214.000 (wgt'ed) examples reached here.  /* #neg=128 #pos=86 */
WILL Produced-Tree #4
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordauthor(D, C) )
%   then if ( haswordtitle(B, C) )
%   | then return 0.3672186186501392;  // std dev = 0.326, 66.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=58 */
%   | else if ( author(E, D), title(E, B) )
%   | | then return 0.1710887245064434;  // std dev = 0.484, 8.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=3 */
%   | | else return -0.024150219567855256;  // std dev = 0.314, 54.000 (wgt'ed) examples reached here.  /* #neg=48 #pos=6 */
%   else if ( haswordtitle(B, F), haswordauthor(G, F) )
%   | then if ( author(H, G), title(H, A) )
%   | | then return 0.31813665766061316;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | else return -0.02048075265286831;  // std dev = 0.322, 51.000 (wgt'ed) examples reached here.  /* #neg=45 #pos=6 */
%   | else return 0.15668998800103418;  // std dev = 0.490, 214.000 (wgt'ed) examples reached here.  /* #neg=128 #pos=86 */
WILL Produced-Tree #5
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordvenue(D, C) )
%   then if ( title(E, A), venue(E, D) )
%   | then if ( samebib(E, F), title(F, B) )
%   | | then if ( venue(F, D) )
%   | | | then return 0.6349233110937086;  // std dev = 1.634, 107.000 (wgt'ed) examples reached here.  /* #pos=107 */
%   | | | else return 0.6177125969563919;  // std dev = 0.982, 27.000 (wgt'ed) examples reached here.  /* #pos=27 */
%   | | else return -0.20486549010149374;  // std dev = 0.186, 235.000 (wgt'ed) examples reached here.  /* #neg=227 #pos=8 */
%   | else if ( haswordtitle(A, G), haswordauthor(H, G) )
%   | | then if ( haswordtitle(B, G) )
%   | | | then return 0.39807224506280847;  // std dev = 2.11e-08, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.03420528392122061;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | | else return 0.7246810069936309;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( haswordtitle(B, I), haswordauthor(J, I) )
%   | then return 0.22014562011883285;  // std dev = 0.616, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | else return 0.2961098121240924;  // std dev = 0.857, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
WILL Produced-Tree #6
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordvenue(D, C) )
%   then if ( title(E, A), venue(E, D) )
%   | then if ( samebib(E, F), title(F, B) )
%   | | then if ( venue(F, D) )
%   | | | then return 0.49661604115257973;  // std dev = 1.664, 107.000 (wgt'ed) examples reached here.  /* #pos=107 */
%   | | | else return 0.4898658391925486;  // std dev = 1.039, 27.000 (wgt'ed) examples reached here.  /* #pos=27 */
%   | | else return -0.17150355518318636;  // std dev = 0.183, 235.000 (wgt'ed) examples reached here.  /* #neg=227 #pos=8 */
%   | else if ( haswordtitle(A, G), haswordauthor(H, G) )
%   | | then if ( haswordtitle(B, G) )
%   | | | then return 0.30755472608314727;  // std dev = 1.05e-08, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.030224919116897907;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | | else return 0.5604824199646525;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( haswordtitle(A, I), haswordauthor(J, I) )
%   | then return 0.17434417967190194;  // std dev = 0.597, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | else return 0.24911216002685097;  // std dev = 0.826, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
WILL Produced-Tree #7
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordvenue(D, C) )
%   then if ( title(E, A), venue(E, D) )
%   | then if ( samebib(E, F), title(F, B) )
%   | | then if ( venue(F, D) )
%   | | | then return 0.3865548367931419;  // std dev = 1.512, 107.000 (wgt'ed) examples reached here.  /* #pos=107 */
%   | | | else return 0.38851391553869985;  // std dev = 0.986, 27.000 (wgt'ed) examples reached here.  /* #pos=27 */
%   | | else return -0.14625813744163985;  // std dev = 0.181, 235.000 (wgt'ed) examples reached here.  /* #neg=227 #pos=8 */
%   | else if ( haswordtitle(A, G), haswordauthor(H, G) )
%   | | then if ( haswordtitle(B, G) )
%   | | | then return 0.24617252978697307;  // std dev = 1.83e-08, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.02662436536963224;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | | else return 0.4213187196417869;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( haswordtitle(B, I), haswordauthor(J, I) )
%   | then return 0.1386575119767918;  // std dev = 0.588, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | else return 0.20384749970098132;  // std dev = 0.801, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
WILL Produced-Tree #8
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordvenue(D, C) )
%   then if ( title(E, A), venue(E, D) )
%   | then if ( samebib(E, F), title(F, B) )
%   | | then if ( venue(F, D) )
%   | | | then return 0.3065986788030886;  // std dev = 1.322, 107.000 (wgt'ed) examples reached here.  /* #pos=107 */
%   | | | else return 0.3130519891450052;  // std dev = 0.891, 27.000 (wgt'ed) examples reached here.  /* #pos=27 */
%   | | else return -0.12664262495930823;  // std dev = 0.180, 235.000 (wgt'ed) examples reached here.  /* #neg=227 #pos=8 */
%   | else if ( haswordtitle(A, G), haswordauthor(H, G) )
%   | | then if ( haswordtitle(B, G) )
%   | | | then return 0.20337970921485166;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.023387147810147755;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | | else return 0.3232926446695569;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( haswordtitle(A, I), haswordauthor(J, I) )
%   | then return 0.10951419502675071;  // std dev = 0.589, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | else return 0.16531869147706402;  // std dev = 0.778, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
WILL Produced-Tree #9
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordvenue(D, C) )
%   then if ( title(E, A), venue(E, D) )
%   | then if ( samebib(E, F), title(F, B) )
%   | | then if ( venue(F, D) )
%   | | | then return 0.24959068642636886;  // std dev = 1.149, 107.000 (wgt'ed) examples reached here.  /* #pos=107 */
%   | | | else return 0.2576165947417419;  // std dev = 0.793, 27.000 (wgt'ed) examples reached here.  /* #pos=27 */
%   | | else return -0.11104515992796095;  // std dev = 0.179, 235.000 (wgt'ed) examples reached here.  /* #neg=227 #pos=8 */
%   | else if ( haswordtitle(A, G), haswordauthor(H, G) )
%   | | then if ( haswordtitle(B, G) )
%   | | | then return 0.1724042028944549;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.020492345310102165;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | | else return 0.25693247335634317;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( haswordtitle(B, I), haswordauthor(J, I) )
%   | then return 0.08741139764789503;  // std dev = 0.591, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | else return 0.13138802868799154;  // std dev = 0.764, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
WILL Produced-Tree #10
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordauthor(D, C) )
%   then if ( haswordtitle(B, C) )
%   | then return 0.052613009249523376;  // std dev = 0.197, 66.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=58 */
%   | else if ( author(E, D), title(E, B) )
%   | | then return 0.25058308575731253;  // std dev = 0.484, 8.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=3 */
%   | | else return -0.016953265209784046;  // std dev = 0.201, 54.000 (wgt'ed) examples reached here.  /* #neg=48 #pos=6 */
%   else if ( haswordtitle(B, F), haswordauthor(G, F) )
%   | then if ( author(H, G), title(H, A) )
%   | | then return 0.39857565215413737;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | else return -0.01587365261162945;  // std dev = 0.173, 51.000 (wgt'ed) examples reached here.  /* #neg=45 #pos=6 */
%   | else return 0.01119917661539841;  // std dev = 0.199, 214.000 (wgt'ed) examples reached here.  /* #neg=128 #pos=86 */


Results
   AUC ROC   = 0.955613
   AUC PR    = 0.953569
   CLL	      = -0.256903
   Precision = 0.949275 at threshold = 0.5
   Recall    = 0.977612
   F1        = 0.963235


Total learning time: 403.1964547634125 seconds
Total inference time: 132.887 seconds
AUC ROC: 0.955613


Results scoring model
   AUC ROC   = 0.993879
   AUC PR    = 0.993985
   CLL	      = -0.214225
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.944444
   F1        = 0.971429


Total scoring time: 4.167 seconds
Parameter learned model CLL: -0.214225


Structure after Parameter Learning
[['sametitle(A, B)', {'': 'haswordtitle(A, C), haswordauthor(D, C)', 'true': 'haswordtitle(B, C)', 'false': 'haswordtitle(B, E), haswordauthor(F, E)'}, {'true,true': [0.326, 8, 58], 'true,false': [0.352, 53, 9], 'false,true': [0.367, 47, 9], 'false,false': [0.49, 128, 86]}], ['sametitle(A, B)', {'': 'haswordtitle(A, C), haswordauthor(D, C)', 'true': 'haswordtitle(B, C)', 'true,false': 'author(E, D), title(E, B)', 'false': 'haswordtitle(B, F), haswordauthor(G, F)', 'false,true': 'author(H, G), title(H, A)'}, {'true,true': [0.326, 8, 58], 'true,false,true': [0.484, 5, 3], 'true,false,false': [0.314, 48, 6], 'false,true,true': [1.095, 2, 3], 'false,true,false': [0.322, 45, 6], 'false,false': [0.49, 128, 86]}], ['sametitle(A, B)', {'': 'haswordtitle(A, C), haswordauthor(D, C)', 'true': 'haswordtitle(B, C)', 'true,false': 'author(E, D), title(E, B)', 'false': 'haswordtitle(B, F), haswordauthor(G, F)', 'false,true': 'author(H, G), title(H, A)'}, {'true,true': [0.326, 8, 58], 'true,false,true': [0.484, 5, 3], 'true,false,false': [0.314, 48, 6], 'false,true,true': [1.095, 2, 3], 'false,true,false': [0.322, 45, 6], 'false,false': [0.49, 128, 86]}], ['sametitle(A, B)', {'': 'haswordtitle(A, C), haswordauthor(D, C)', 'true': 'haswordtitle(B, C)', 'true,false': 'author(E, D), title(E, B)', 'false': 'haswordtitle(B, F), haswordauthor(G, F)', 'false,true': 'author(H, G), title(H, A)'}, {'true,true': [0.326, 8, 58], 'true,false,true': [0.484, 5, 3], 'true,false,false': [0.314, 48, 6], 'false,true,true': [1.095, 2, 3], 'false,true,false': [0.322, 45, 6], 'false,false': [0.49, 128, 86]}], ['sametitle(A, B)', {'': 'haswordtitle(A, C), haswordvenue(D, C)', 'true': 'title(E, A), venue(E, D)', 'true,true': 'samebib(E, F), title(F, B)', 'true,true,true': 'venue(F, D)', 'true,false': 'haswordtitle(A, G), haswordauthor(H, G)', 'true,false,true': 'haswordtitle(B, G)', 'false': 'haswordtitle(B, I), haswordauthor(J, I)'}, {'true,true,true,true': [1.634, 0, 107], 'true,true,true,false': [0.982, 0, 27], 'true,true,false': [0.186, 227, 8], 'true,false,true,true': [2.11e-08, 0, 9], 'true,false,true,false': [0.913, 5, 1], 'true,false,false': [0.0, 0, 4], 'false,true': [0.616, 2, 4], 'false,false': [0.857, 2, 2]}], ['sametitle(A, B)', {'': 'haswordtitle(A, C), haswordvenue(D, C)', 'true': 'title(E, A), venue(E, D)', 'true,true': 'samebib(E, F), title(F, B)', 'true,true,true': 'venue(F, D)', 'true,false': 'haswordtitle(A, G), haswordauthor(H, G)', 'true,false,true': 'haswordtitle(B, G)', 'false': 'haswordtitle(A, I), haswordauthor(J, I)'}, {'true,true,true,true': [1.664, 0, 107], 'true,true,true,false': [1.039, 0, 27], 'true,true,false': [0.183, 227, 8], 'true,false,true,true': [1.05e-08, 0, 9], 'true,false,true,false': [0.913, 5, 1], 'true,false,false': [0.0, 0, 4], 'false,true': [0.597, 2, 4], 'false,false': [0.826, 2, 2]}], ['sametitle(A, B)', {'': 'haswordtitle(A, C), haswordvenue(D, C)', 'true': 'title(E, A), venue(E, D)', 'true,true': 'samebib(E, F), title(F, B)', 'true,true,true': 'venue(F, D)', 'true,false': 'haswordtitle(A, G), haswordauthor(H, G)', 'true,false,true': 'haswordtitle(B, G)', 'false': 'haswordtitle(B, I), haswordauthor(J, I)'}, {'true,true,true,true': [1.512, 0, 107], 'true,true,true,false': [0.986, 0, 27], 'true,true,false': [0.181, 227, 8], 'true,false,true,true': [1.83e-08, 0, 9], 'true,false,true,false': [0.913, 5, 1], 'true,false,false': [0.0, 0, 4], 'false,true': [0.588, 2, 4], 'false,false': [0.801, 2, 2]}], ['sametitle(A, B)', {'': 'haswordtitle(A, C), haswordvenue(D, C)', 'true': 'title(E, A), venue(E, D)', 'true,true': 'samebib(E, F), title(F, B)', 'true,true,true': 'venue(F, D)', 'true,false': 'haswordtitle(A, G), haswordauthor(H, G)', 'true,false,true': 'haswordtitle(B, G)', 'false': 'haswordtitle(A, I), haswordauthor(J, I)'}, {'true,true,true,true': [1.322, 0, 107], 'true,true,true,false': [0.891, 0, 27], 'true,true,false': [0.18, 227, 8], 'true,false,true,true': [0.0, 0, 9], 'true,false,true,false': [0.913, 5, 1], 'true,false,false': [0.0, 0, 4], 'false,true': [0.589, 2, 4], 'false,false': [0.778, 2, 2]}], ['sametitle(A, B)', {'': 'haswordtitle(A, C), haswordvenue(D, C)', 'true': 'title(E, A), venue(E, D)', 'true,true': 'samebib(E, F), title(F, B)', 'true,true,true': 'venue(F, D)', 'true,false': 'haswordtitle(A, G), haswordauthor(H, G)', 'true,false,true': 'haswordtitle(B, G)', 'false': 'haswordtitle(B, I), haswordauthor(J, I)'}, {'true,true,true,true': [1.149, 0, 107], 'true,true,true,false': [0.793, 0, 27], 'true,true,false': [0.179, 227, 8], 'true,false,true,true': [0.0, 0, 9], 'true,false,true,false': [0.913, 5, 1], 'true,false,false': [0.0, 0, 4], 'false,true': [0.591, 2, 4], 'false,false': [0.764, 2, 2]}], ['sametitle(A, B)', {'': 'haswordtitle(A, C), haswordauthor(D, C)', 'true': 'haswordtitle(B, C)', 'true,false': 'author(E, D), title(E, B)', 'false': 'haswordtitle(B, F), haswordauthor(G, F)', 'false,true': 'author(H, G), title(H, A)'}, {'true,true': [0.197, 8, 58], 'true,false,true': [0.484, 5, 3], 'true,false,false': [0.201, 48, 6], 'false,true,true': [1.095, 2, 3], 'false,true,false': [0.173, 45, 6], 'false,false': [0.199, 128, 86]}]]
[{'': [0.24945068359374953, 0.22805212620027596], 'true': [0.10651974288337872, 0.12408949011446431], 'false': [0.13488520408163285, 0.24037033802078886]}, {'': [0.21077521176750943, 0.22565751713985993], 'false': [0.13488520408163276, 0.24037033802078653], 'true': [0.10651974288338104, 0.12408949011446414], 'false,true': [0.24000000000000005, 0.10380622837370253], 'true,false': [0.234375, 0.09876543209876548]}, {'': [0.172870514066648, 0.22257220678584677], 'false': [0.12985864578388986, 0.24037033802078797], 'true': [0.10651974288337995, 0.12217257709273506], 'false,true': [0.24, 0.10380622837370264], 'true,false': [0.23437499999999994, 0.09876543209876511]}, {'': [0.14680294293560336, 0.22005106874118974], 'false': [0.12528996639986728, 0.2403703380207876], 'true': [0.10651974288337966, 0.1205472811209754], 'false,true': [0.24000000000000013, 0.10380622837370256], 'true,false': [0.234375, 0.09876543209876548]}, {'': [0.19230736473891302, 0.11284370229758948], 'true': [0.19361484754159083, 0.10599802727554562], 'true,true': [0.027174230081286107, 0.034526857767603135], 'false': [0.06331576772790835, 0.18367326907190396], 'true,false': [0.08733135525405494, 0.0], 'true,false,true': [4.9343245538895844e-17, 0.13888888888888892], 'true,true,true': [0.02496452758283672, 0.035694674399425565]}, {'': [0.1338933494274027, 0.1051341633515904], 'true': [0.1346358476678167, 0.08043692849070662], 'true,true': [0.02873131917777919, 0.03358184921042651], 'false': [0.059401666610268376, 0.1703787579317586], 'true,false': [0.0740143927952205, 0.0], 'true,false,true': [1.2335811384723961e-17, 0.13888888888888884], 'true,true,true': [0.025874257679748595, 0.04001736390398153]}, {'': [0.09529236825444655, 0.0996425396499165], 'false': [0.05756948890177097, 0.16020227507244678], 'true': [0.09552366594052543, 0.06448575818528487], 'true,true': [0.024315100001354447, 0.03288216411521146], 'true,false': [0.06712389071532125, 0.0], 'true,false,true': [3.700743415417188e-17, 0.13888888888888892], 'true,true,true': [0.0213691898303011, 0.035986568238171285]}, {'': [0.07135728426837638, 0.09601982239035083], 'false': [0.0578303248922776, 0.1514355835430168], 'true': [0.07117349295291837, 0.05611932447191576], 'true,true': [0.018975350471965958, 0.032366435519763814], 'true,false': [0.06333091287420181, 0.0], 'true,false,true': [-3.0839528461809905e-17, 0.13888888888888892], 'true,true,true': [0.01632901588508396, 0.029429422412927904]}, {'': [0.05648735872134102, 0.0937602922705742], 'false': [0.05823023842436192, 0.1458950065933106], 'true': [0.05600621625074832, 0.0517407707834993], 'true,true': [0.014559223473881985, 0.031985483777243265], 'true,false': [0.06109408654949045, 0.0], 'true,false,true': [0.0, 0.13888888888888887], 'true,true,true': [0.012339644348604904, 0.023303897319386473]}, {'': [0.055884676342130776, 0.04439203193349292], 'true': [0.03884559703109073, 0.07338976876155863], 'true,false': [0.2343749999999999, 0.040304530798408934], 'false': [0.06263469050801963, 0.03959779425312146], 'false,true': [0.24000000000000007, 0.02990948590575561]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
4;;sametitle(A, B) :- haswordtitle(A, C), haswordvenue(D, C).;true;true
4;true;title(E, A), venue(E, D).;true;true
4;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
4;true,false,true;haswordtitle(B, G).;true;true
5;;sametitle(A, B) :- haswordtitle(A, C), haswordvenue(D, C).;true;true
5;true;title(E, A), venue(E, D).;true;true
5;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
5;true,false,true;haswordtitle(B, G).;true;true
6;;sametitle(A, B) :- haswordtitle(A, C), haswordvenue(D, C).;true;true
6;true;title(E, A), venue(E, D).;true;true
6;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
6;true,false,true;haswordtitle(B, G).;true;true
7;;sametitle(A, B) :- haswordtitle(A, C), haswordvenue(D, C).;true;true
7;true;title(E, A), venue(E, D).;true;true
7;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
7;true,false,true;haswordtitle(B, G).;true;true
8;;sametitle(A, B) :- haswordtitle(A, C), haswordvenue(D, C).;true;true
8;true;title(E, A), venue(E, D).;true;true
8;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
8;true,false,true;haswordtitle(B, G).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordauthor(D, C) )
%   then if ( haswordtitle(B, C) )
%   | then return 0.7369368138873914;  // std dev = 0.326, 66.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=58 */
%   | else return 0.003310225422092987;  // std dev = 0.352, 62.000 (wgt'ed) examples reached here.  /* #neg=53 #pos=9 */
%   else if ( haswordtitle(B, E), haswordauthor(F, E) )
%   | then if ( author(G, F), title(G, A) )
%   | | then return 0.4581489350995122;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | else return -0.024204006076958298;  // std dev = 0.322, 51.000 (wgt'ed) examples reached here.  /* #neg=45 #pos=6 */
%   | else return 0.2600180939780157;  // std dev = 0.490, 214.000 (wgt'ed) examples reached here.  /* #neg=128 #pos=86 */
WILL Produced-Tree #2
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordauthor(D, C) )
%   then if ( haswordtitle(B, C) )
%   | then return 0.6220633676283396;  // std dev = 0.326, 66.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=58 */
%   | else if ( author(E, D), title(E, B) )
%   | | then return 0.23274550562375218;  // std dev = 0.484, 8.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=3 */
%   | | else return -0.031143383265136704;  // std dev = 0.314, 54.000 (wgt'ed) examples reached here.  /* #neg=48 #pos=6 */
%   else if ( haswordtitle(B, F), haswordauthor(G, F) )
%   | then return 0.015688057809861575;  // std dev = 0.360, 56.000 (wgt'ed) examples reached here.  /* #neg=47 #pos=9 */
%   | else return 0.22533125375206722;  // std dev = 0.490, 214.000 (wgt'ed) examples reached here.  /* #neg=128 #pos=86 */
WILL Produced-Tree #3
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordauthor(D, C) )
%   then if ( author(E, D), title(E, B) )
%   | then if ( author(F, D), title(F, A) )
%   | | then return 0.34797102830225524;  // std dev = 0.638, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return 0.2554900301310656;  // std dev = 0.495, 7.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=3 */
%   | else return 0.24970344600110106;  // std dev = 0.411, 118.000 (wgt'ed) examples reached here.  /* #neg=56 #pos=62 */
%   else if ( haswordtitle(B, G), haswordauthor(H, G) )
%   | then if ( author(I, H), title(I, A) )
%   | | then return 0.39020524288213954;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | else return -0.023170523656717085;  // std dev = 0.322, 51.000 (wgt'ed) examples reached here.  /* #neg=45 #pos=6 */
%   | else return 0.19015949657647718;  // std dev = 0.490, 214.000 (wgt'ed) examples reached here.  /* #neg=128 #pos=86 */
WILL Produced-Tree #4
% FOR sametitle(A, B):
%   if ( haswordtitle(B, C), haswordauthor(D, C) )
%   then if ( haswordtitle(A, C) )
%   | then return 0.4257261069479117;  // std dev = 0.326, 66.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=58 */
%   | else return -0.009932556444307503;  // std dev = 0.342, 62.000 (wgt'ed) examples reached here.  /* #neg=53 #pos=9 */
%   else if ( haswordtitle(A, E), haswordauthor(F, E) )
%   | then if ( author(G, F), title(G, B) )
%   | | then return 0.3872543791431332;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | else return -0.05341346472038795;  // std dev = 0.322, 51.000 (wgt'ed) examples reached here.  /* #neg=45 #pos=6 */
%   | else return 0.15668998800103418;  // std dev = 0.490, 214.000 (wgt'ed) examples reached here.  /* #neg=128 #pos=86 */
WILL Produced-Tree #5
% FOR sametitle(A, B):
%   if ( haswordtitle(B, C), haswordauthor(D, C) )
%   then if ( haswordtitle(A, C) )
%   | then return 0.31971784045901774;  // std dev = 0.326, 66.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=58 */
%   | else if ( author(E, D), title(E, A) )
%   | | then return 0.1365586997592091;  // std dev = 0.454, 8.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=3 */
%   | | else return -0.030165345102305202;  // std dev = 0.316, 54.000 (wgt'ed) examples reached here.  /* #neg=48 #pos=6 */
%   else if ( haswordtitle(A, F), haswordauthor(G, F) )
%   | then return -0.01371678602981509;  // std dev = 0.356, 56.000 (wgt'ed) examples reached here.  /* #neg=47 #pos=9 */
%   | else return 0.1265501658721381;  // std dev = 0.490, 214.000 (wgt'ed) examples reached here.  /* #neg=128 #pos=86 */
WILL Produced-Tree #6
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordvenue(D, C) )
%   then if ( title(E, A), venue(E, D) )
%   | then if ( samebib(E, F), title(F, B) )
%   | | then if ( venue(F, D) )
%   | | | then return 0.6073032304374912;  // std dev = 1.682, 107.000 (wgt'ed) examples reached here.  /* #pos=107 */
%   | | | else return 0.5917198865363619;  // std dev = 1.020, 27.000 (wgt'ed) examples reached here.  /* #pos=27 */
%   | | else return -0.22530483567019857;  // std dev = 0.190, 235.000 (wgt'ed) examples reached here.  /* #neg=227 #pos=8 */
%   | else if ( haswordtitle(A, G), haswordauthor(H, G) )
%   | | then if ( haswordtitle(B, G) )
%   | | | then return 0.3624074338216121;  // std dev = 0.021, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.004916057965381239;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | | else return 0.6987286260111312;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( haswordtitle(A, I), haswordauthor(J, I) )
%   | then return 0.18935158132128768;  // std dev = 0.608, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | else return 0.2826966176894945;  // std dev = 0.832, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
WILL Produced-Tree #7
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordvenue(D, C) )
%   then if ( title(E, A), venue(E, D) )
%   | then if ( samebib(E, F), title(F, B) )
%   | | then if ( venue(F, D) )
%   | | | then return 0.4736783970239956;  // std dev = 1.663, 107.000 (wgt'ed) examples reached here.  /* #pos=107 */
%   | | | else return 0.4691353464082451;  // std dev = 1.053, 27.000 (wgt'ed) examples reached here.  /* #pos=27 */
%   | | else return -0.1866846904861741;  // std dev = 0.187, 235.000 (wgt'ed) examples reached here.  /* #neg=227 #pos=8 */
%   | else if ( haswordtitle(A, G), haswordauthor(H, G) )
%   | | then if ( haswordtitle(B, G) )
%   | | | then return 0.28347999565149695;  // std dev = 0.019, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.004248393813825292;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | | else return 0.5355704036294942;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( haswordtitle(A, I), haswordauthor(J, I) )
%   | then return 0.1517949908558601;  // std dev = 0.590, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | else return 0.23330285235660653;  // std dev = 0.806, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
WILL Produced-Tree #8
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordvenue(D, C) )
%   then if ( title(E, A), venue(E, D) )
%   | then if ( samebib(E, F), title(F, B) )
%   | | then if ( venue(F, D) )
%   | | | then return 0.3697927625433392;  // std dev = 1.495, 107.000 (wgt'ed) examples reached here.  /* #pos=107 */
%   | | | else return 0.3734975521339663;  // std dev = 0.990, 27.000 (wgt'ed) examples reached here.  /* #pos=27 */
%   | | else return -0.1578586744336748;  // std dev = 0.185, 235.000 (wgt'ed) examples reached here.  /* #neg=227 #pos=8 */
%   | else if ( haswordtitle(A, G), haswordauthor(H, G) )
%   | | then if ( haswordtitle(B, G) )
%   | | | then return 0.22957808257920384;  // std dev = 0.016, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.0036696191661717095;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | | else return 0.4029837658978592;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( haswordtitle(A, I), haswordauthor(J, I) )
%   | then return 0.1221878224834827;  // std dev = 0.581, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | else return 0.18783866740732968;  // std dev = 0.786, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
WILL Produced-Tree #9
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordvenue(D, C) )
%   then if ( title(E, A), venue(E, D) )
%   | then if ( samebib(E, F), title(F, B) )
%   | | then if ( venue(F, D) )
%   | | | then return 0.294806127083684;  // std dev = 1.305, 107.000 (wgt'ed) examples reached here.  /* #pos=107 */
%   | | | else return 0.30250870159605253;  // std dev = 0.895, 27.000 (wgt'ed) examples reached here.  /* #pos=27 */
%   | | else return -0.13573653887051831;  // std dev = 0.183, 235.000 (wgt'ed) examples reached here.  /* #neg=227 #pos=8 */
%   | else if ( haswordtitle(A, G), haswordauthor(H, G) )
%   | | then if ( haswordtitle(B, G) )
%   | | | then return 0.1915084217980133;  // std dev = 0.014, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.00316835732199842;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | | else return 0.3108749959441781;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( haswordtitle(B, I), haswordauthor(J, I) )
%   | then return 0.0979366441754765;  // std dev = 0.581, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | else return 0.14979655584360874;  // std dev = 0.769, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
WILL Produced-Tree #10
% FOR sametitle(A, B):
%   if ( haswordtitle(B, C), haswordauthor(D, C) )
%   then if ( haswordtitle(A, C) )
%   | then return 0.05692546234303002;  // std dev = 0.210, 66.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=58 */
%   | else if ( author(E, D), title(E, A) )
%   | | then return 0.2234914043272905;  // std dev = 0.463, 8.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=3 */
%   | | else return -0.012999797670523394;  // std dev = 0.196, 54.000 (wgt'ed) examples reached here.  /* #neg=48 #pos=6 */
%   else if ( haswordtitle(A, F), haswordauthor(G, F) )
%   | then if ( author(H, G), title(H, B) )
%   | | then return 0.43760314943738166;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | else return -0.028153543297442695;  // std dev = 0.215, 51.000 (wgt'ed) examples reached here.  /* #neg=45 #pos=6 */
%   | else return 0.012105779064117049;  // std dev = 0.230, 214.000 (wgt'ed) examples reached here.  /* #neg=128 #pos=86 */


Results
   AUC ROC   = 0.952293
   AUC PR    = 0.952346
   CLL	      = -0.28615
   Precision = 0.948624 at threshold = 0.5
   Recall    = 0.964552
   F1        = 0.956522


Total learning time: 313.80551505088806 seconds
Total inference time: 104.468 seconds
AUC ROC: 0.952293


Results scoring model
   AUC ROC   = 0.992506
   AUC PR    = 0.991881
   CLL	      = -0.242755
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.907407
   F1        = 0.951456


Total scoring time: 3.66 seconds
Refined model CLL: -0.242755


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.955613
   AUC PR    = 0.953569
   CLL	      = -0.256903
   Precision = 0.949275 at threshold = 0.5
   Recall    = 0.977612
   F1        = 0.963235


Total learning time: 724.8289698143004 seconds
Total inference time: 132.887 seconds
AUC ROC: 0.955613
Total revision time: 724.8289698143004
Best scored revision CLL: -0.214225


Dataset: 6_imdb_cora, Fold: 1, Type: Transfer (trRDN-B), Time: 02:04:20
{'AUC ROC': 0.955613, 'AUC PR': 0.953569, 'CLL': -0.256903, 'Precision': [0.949275, 0.5], 'Recall': 0.977612, 'F1': 0.963235, 'Learning time': 724.8289698143004, 'Inference time': 132.887, 'parameter': {'AUC ROC': 0.955613, 'AUC PR': 0.953569, 'CLL': -0.256903, 'Precision': [0.949275, 0.5], 'Recall': 0.977612, 'F1': 0.963235, 'Learning time': 403.1964547634125, 'Inference time': 132.887}}


WILL Produced-Tree #1
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordauthor(D, C) )
%   then if ( haswordtitle(B, C) )
%   | then return 0.7369368138873914;  // std dev = 0.326, 66.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=58 */
%   | else if ( author(E, D), title(E, B) )
%   | | then return 0.23314893509951226;  // std dev = 0.484, 8.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=3 */
%   | | else return -0.030739953789376603;  // std dev = 0.314, 54.000 (wgt'ed) examples reached here.  /* #neg=48 #pos=6 */
%   else if ( haswordtitle(B, F), haswordauthor(G, F) )
%   | then if ( author(H, G), title(H, A) )
%   | | then return 0.4581489350995122;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | else return -0.024204006076958298;  // std dev = 0.322, 51.000 (wgt'ed) examples reached here.  /* #neg=45 #pos=6 */
%   | else return 0.2600180939780157;  // std dev = 0.490, 214.000 (wgt'ed) examples reached here.  /* #neg=128 #pos=86 */
WILL Produced-Tree #2
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordauthor(D, C) )
%   then if ( haswordtitle(B, C) )
%   | then return 0.6220633676283396;  // std dev = 0.326, 66.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=58 */
%   | else return 0.0025575155492885355;  // std dev = 0.350, 62.000 (wgt'ed) examples reached here.  /* #neg=53 #pos=9 */
%   else if ( haswordtitle(B, E), haswordauthor(F, E) )
%   | then return 0.015688057809861575;  // std dev = 0.360, 56.000 (wgt'ed) examples reached here.  /* #neg=47 #pos=9 */
%   | else return 0.22533125375206722;  // std dev = 0.490, 214.000 (wgt'ed) examples reached here.  /* #neg=128 #pos=86 */
WILL Produced-Tree #3
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordauthor(D, C) )
%   then if ( haswordtitle(B, C) )
%   | then return 0.48728512046144257;  // std dev = 0.326, 66.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=58 */
%   | else if ( author(E, D), title(E, B) )
%   | | then return 0.20196858633872047;  // std dev = 0.484, 8.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=3 */
%   | | else return -0.027343827785405832;  // std dev = 0.314, 54.000 (wgt'ed) examples reached here.  /* #neg=48 #pos=6 */
%   else if ( haswordtitle(B, F), haswordauthor(G, F) )
%   | then if ( author(H, G), title(H, A) )
%   | | then return 0.39020524288213954;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | else return -0.023170523656717085;  // std dev = 0.322, 51.000 (wgt'ed) examples reached here.  /* #neg=45 #pos=6 */
%   | else return 0.19015949657647718;  // std dev = 0.490, 214.000 (wgt'ed) examples reached here.  /* #neg=128 #pos=86 */
WILL Produced-Tree #4
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordauthor(D, C) )
%   then if ( haswordtitle(B, C) )
%   | then return 0.3672186186501392;  // std dev = 0.326, 66.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=58 */
%   | else if ( author(E, D), title(E, B) )
%   | | then return 0.17113730529774163;  // std dev = 0.484, 8.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=3 */
%   | | else return -0.02411424364843527;  // std dev = 0.314, 54.000 (wgt'ed) examples reached here.  /* #neg=48 #pos=6 */
%   else if ( haswordtitle(B, F), haswordauthor(G, F) )
%   | then if ( author(H, G), title(H, A) )
%   | | then return 0.31828242194899514;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | else return -0.020390430103904865;  // std dev = 0.322, 51.000 (wgt'ed) examples reached here.  /* #neg=45 #pos=6 */
%   | else return 0.15668998800103418;  // std dev = 0.490, 214.000 (wgt'ed) examples reached here.  /* #neg=128 #pos=86 */
WILL Produced-Tree #5
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordvenue(D, C) )
%   then if ( title(E, A), venue(E, D) )
%   | then if ( samebib(E, F), title(F, B) )
%   | | then if ( venue(F, D) )
%   | | | then return 0.6349263843393732;  // std dev = 1.634, 107.000 (wgt'ed) examples reached here.  /* #pos=107 */
%   | | | else return 0.6177236201171006;  // std dev = 0.982, 27.000 (wgt'ed) examples reached here.  /* #pos=27 */
%   | | else return -0.204841391330483;  // std dev = 0.186, 235.000 (wgt'ed) examples reached here.  /* #neg=227 #pos=8 */
%   | else if ( haswordtitle(A, G), haswordauthor(H, G) )
%   | | then if ( haswordtitle(B, G) )
%   | | | then return 0.39807224506280847;  // std dev = 2.11e-08, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.034236495868208136;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | | else return 0.7246810069936309;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( haswordtitle(B, I), haswordauthor(J, I) )
%   | then return 0.22017175361273914;  // std dev = 0.616, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | else return 0.2961254180975862;  // std dev = 0.857, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
WILL Produced-Tree #6
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordvenue(D, C) )
%   then if ( title(E, A), venue(E, D) )
%   | then if ( samebib(E, F), title(F, B) )
%   | | then if ( venue(F, D) )
%   | | | then return 0.4966199792874162;  // std dev = 1.664, 107.000 (wgt'ed) examples reached here.  /* #pos=107 */
%   | | | else return 0.48987995941713797;  // std dev = 1.040, 27.000 (wgt'ed) examples reached here.  /* #pos=27 */
%   | | else return -0.1714863627969306;  // std dev = 0.183, 235.000 (wgt'ed) examples reached here.  /* #neg=227 #pos=8 */
%   | else if ( haswordtitle(A, G), haswordauthor(H, G) )
%   | | then if ( haswordtitle(B, G) )
%   | | | then return 0.30755472608314727;  // std dev = 1.05e-08, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.03025324461143468;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | | else return 0.5604824199646525;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( haswordtitle(A, I), haswordauthor(J, I) )
%   | then return 0.17435229335284572;  // std dev = 0.597, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | else return 0.2491543719236312;  // std dev = 0.825, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
WILL Produced-Tree #7
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordvenue(D, C) )
%   then if ( title(E, A), venue(E, D) )
%   | then if ( samebib(E, F), title(F, B) )
%   | | then if ( venue(F, D) )
%   | | | then return 0.38655911230749573;  // std dev = 1.512, 107.000 (wgt'ed) examples reached here.  /* #pos=107 */
%   | | | else return 0.38852941743720204;  // std dev = 0.986, 27.000 (wgt'ed) examples reached here.  /* #pos=27 */
%   | | else return -0.14624548351542058;  // std dev = 0.181, 235.000 (wgt'ed) examples reached here.  /* #neg=227 #pos=8 */
%   | else if ( haswordtitle(A, G), haswordauthor(H, G) )
%   | | then if ( haswordtitle(B, G) )
%   | | | then return 0.24617252978697307;  // std dev = 1.83e-08, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.02664990645456826;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | | else return 0.4213187196417869;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( haswordtitle(B, I), haswordauthor(J, I) )
%   | then return 0.13868472987649852;  // std dev = 0.588, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | else return 0.2038601485234279;  // std dev = 0.800, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
WILL Produced-Tree #8
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordvenue(D, C) )
%   then if ( title(E, A), venue(E, D) )
%   | then if ( samebib(E, F), title(F, B) )
%   | | then if ( venue(F, D) )
%   | | | then return 0.3066028650500544;  // std dev = 1.322, 107.000 (wgt'ed) examples reached here.  /* #pos=107 */
%   | | | else return 0.3130672913995881;  // std dev = 0.892, 27.000 (wgt'ed) examples reached here.  /* #pos=27 */
%   | | else return -0.12663305398949076;  // std dev = 0.180, 235.000 (wgt'ed) examples reached here.  /* #neg=227 #pos=8 */
%   | else if ( haswordtitle(A, G), haswordauthor(H, G) )
%   | | then if ( haswordtitle(B, G) )
%   | | | then return 0.20337970921485166;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.023410046216382027;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | | else return 0.3232926446695569;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( haswordtitle(A, I), haswordauthor(J, I) )
%   | then return 0.10951985421868571;  // std dev = 0.589, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | else return 0.1653597554843979;  // std dev = 0.778, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
WILL Produced-Tree #9
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordvenue(D, C) )
%   then if ( title(E, A), venue(E, D) )
%   | then if ( samebib(E, F), title(F, B) )
%   | | then if ( venue(F, D) )
%   | | | then return 0.24959456739942415;  // std dev = 1.149, 107.000 (wgt'ed) examples reached here.  /* #pos=107 */
%   | | | else return 0.2576307862535447;  // std dev = 0.793, 27.000 (wgt'ed) examples reached here.  /* #pos=27 */
%   | | else return -0.11103774981215353;  // std dev = 0.179, 235.000 (wgt'ed) examples reached here.  /* #neg=227 #pos=8 */
%   | else if ( haswordtitle(A, G), haswordauthor(H, G) )
%   | | then if ( haswordtitle(B, G) )
%   | | | then return 0.1724042028944549;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.020512769893998233;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | | else return 0.25693247335634317;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( haswordtitle(B, I), haswordauthor(J, I) )
%   | then return 0.08743641229034282;  // std dev = 0.591, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | else return 0.13139565465608605;  // std dev = 0.764, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
WILL Produced-Tree #10
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordauthor(D, C) )
%   then if ( haswordtitle(B, C) )
%   | then return 0.052607880515368445;  // std dev = 0.197, 66.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=58 */
%   | else return 0.01758615451398776;  // std dev = 0.271, 62.000 (wgt'ed) examples reached here.  /* #neg=53 #pos=9 */
%   else if ( haswordtitle(B, E), haswordauthor(F, E) )
%   | then if ( author(G, F), title(G, A) )
%   | | then return 0.39865663627317005;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | else return -0.015819501217785872;  // std dev = 0.173, 51.000 (wgt'ed) examples reached here.  /* #neg=45 #pos=6 */
%   | else return 0.011191623660833804;  // std dev = 0.199, 214.000 (wgt'ed) examples reached here.  /* #neg=128 #pos=86 */


Results
   AUC ROC   = 0.953483
   AUC PR    = 0.952899
   CLL	      = -0.256914
   Precision = 0.949275 at threshold = 0.5
   Recall    = 0.977612
   F1        = 0.963235


Total learning time: 397.0042324066162 seconds
Total inference time: 131.122 seconds
AUC ROC: 0.953483


Dataset: 6_imdb_cora, Fold: 1, Type: Scratch (RDN-B), Time: 02:13:09
{'AUC ROC': 0.953483, 'AUC PR': 0.952899, 'CLL': -0.256914, 'Precision': [0.949275, 0.5], 'Recall': 0.977612, 'F1': 0.963235, 'Learning time': 397.0042324066162, 'Inference time': 131.122}


Starting fold 2

Target train facts examples: 9016
Target train pos examples: 140
Target train neg examples: 52

Target test facts examples: 33542
Target test pos  examples: 558
Target test neg examples: 664

******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


WILL Produced-Tree #1
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordauthor(D, C) )
%   then if ( haswordtitle(B, C) )
%   | then return 0.799325405687748;  // std dev = 0.235, 68.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=64 */
%   | else return -0.1418510649004878;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   else return 0.5618526388032163;  // std dev = 0.457, 108.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=76 */
WILL Produced-Tree #2
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordauthor(D, C) )
%   then if ( haswordtitle(B, C) )
%   | then if ( author(E, D), title(E, B) )
%   | | then return 0.7311911912464265;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return 0.666675062214168;  // std dev = 0.246, 62.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=58 */
%   | else return -0.12544463852839138;  // std dev = 7.45e-09, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   else if ( haswordtitle(B, F), haswordauthor(G, F) )
%   | then return -0.22475862895351809;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | else return 0.6013283275682223;  // std dev = 0.379, 92.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=76 */
WILL Produced-Tree #3
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordauthor(D, C) )
%   then if ( haswordtitle(B, C) )
%   | then if ( author(E, D), title(E, A) )
%   | | then return 0.5722214529189243;  // std dev = 0.018, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return 0.5177074913802713;  // std dev = 0.246, 62.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=58 */
%   | else return -0.11231637819360635;  // std dev = 1.39e-08, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   else if ( haswordtitle(B, F), haswordauthor(G, F) )
%   | then return -0.1880232639236015;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | else return 0.48012100179645917;  // std dev = 0.379, 92.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=76 */
WILL Produced-Tree #4
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordauthor(D, C) )
%   then if ( haswordtitle(B, C) )
%   | then return 0.3927886471059252;  // std dev = 0.235, 68.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=64 */
%   | else return -0.10159632948783631;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   else if ( haswordtitle(B, E), haswordauthor(F, E) )
%   | then return -0.16098339778189036;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | else return 0.3651815023510468;  // std dev = 0.379, 92.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=76 */
WILL Produced-Tree #5
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordauthor(D, C) )
%   then if ( haswordtitle(B, C) )
%   | then return 0.29853183136564243;  // std dev = 0.235, 68.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=64 */
%   | else return -0.09269127618926094;  // std dev = 9.13e-09, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   else if ( haswordtitle(B, E), haswordauthor(F, E) )
%   | then return -0.1404071233069109;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | else return 0.2741540595915328;  // std dev = 0.379, 92.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=76 */
WILL Produced-Tree #6
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordauthor(D, C) )
%   then if ( haswordtitle(B, C) )
%   | then if ( author(E, D), title(E, A) )
%   | | then return 0.2744133123635057;  // std dev = 0.015, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return 0.22926659219152212;  // std dev = 0.246, 62.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=58 */
%   | else return -0.08518475138839685;  // std dev = 1.05e-08, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   else if ( haswordtitle(B, F), haswordauthor(G, F) )
%   | then return -0.12430063055012663;  // std dev = 9.13e-09, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | else return 0.20771646114886352;  // std dev = 0.379, 92.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=76 */
WILL Produced-Tree #7
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordauthor(D, C) )
%   then if ( haswordtitle(B, C) )
%   | then if ( author(E, D), title(E, B) )
%   | | then return 0.22536928669165301;  // std dev = 0.020, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return 0.1838339444985968;  // std dev = 0.246, 62.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=58 */
%   | else return -0.07877675473109173;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   else return 0.11982923765776306;  // std dev = 0.363, 108.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=76 */
WILL Produced-Tree #8
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordauthor(D, C) )
%   then if ( haswordtitle(B, C) )
%   | then return 0.1544201162209121;  // std dev = 0.235, 68.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=64 */
%   | else return -0.07324622576333704;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   else return 0.09575275748332021;  // std dev = 0.362, 108.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=76 */
WILL Produced-Tree #9
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordauthor(D, C) )
%   then if ( haswordtitle(B, C) )
%   | then if ( author(E, D), title(E, A) )
%   | | then return 0.16630081347175862;  // std dev = 0.017, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return 0.1261230971267714;  // std dev = 0.246, 62.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=58 */
%   | else return -0.06842697784420272;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   else return 0.07710414361891481;  // std dev = 0.361, 108.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=76 */
WILL Produced-Tree #10
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordauthor(D, C) )
%   then if ( haswordtitle(B, C) )
%   | then if ( author(E, D), title(E, B) )
%   | | then return 0.14599024490728196;  // std dev = 0.020, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return 0.10727515893889746;  // std dev = 0.246, 62.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=58 */
%   | else return -0.06419184008202619;  // std dev = 7.45e-09, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   else if ( haswordtitle(B, F), haswordauthor(G, F) )
%   | then return -0.1438180113413739;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | else return 0.09837592860200753;  // std dev = 0.379, 92.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=76 */


Results
   AUC ROC   = 0.709594
   AUC PR    = 0.662568
   CLL	      = -0.712754
   Precision = 0.548596 at threshold = 0.5
   Recall    = 0.910394
   F1        = 0.684636


Total learning time: 25.025737047195435 seconds
Total inference time: 3.032 seconds
AUC ROC: 0.709594


Results scoring model
   AUC ROC   = 0.859341
   AUC PR    = 0.926052
   CLL	      = -0.340952
   Precision = 0.875 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.933333


Total scoring time: 1.785 seconds
Parameter learned model CLL: -0.340952


Structure after Parameter Learning
[['sametitle(A, B)', {'': 'haswordtitle(A, C), haswordauthor(D, C)', 'true': 'haswordtitle(B, C)'}, {'true,true': [0.235, 4, 64], 'true,false': [0.0, 16, 0], 'false': [0.457, 32, 76]}], ['sametitle(A, B)', {'': 'haswordtitle(A, C), haswordauthor(D, C)', 'true': 'haswordtitle(B, C)', 'true,true': 'author(E, D), title(E, B)', 'false': 'haswordtitle(B, F), haswordauthor(G, F)'}, {'true,true,true': [0.0, 0, 6], 'true,true,false': [0.246, 4, 58], 'true,false': [7.45e-09, 16, 0], 'false,true': [0.0, 16, 0], 'false,false': [0.379, 16, 76]}], ['sametitle(A, B)', {'': 'haswordtitle(A, C), haswordauthor(D, C)', 'true': 'haswordtitle(B, C)', 'true,true': 'author(E, D), title(E, A)', 'false': 'haswordtitle(B, F), haswordauthor(G, F)'}, {'true,true,true': [0.018, 0, 6], 'true,true,false': [0.246, 4, 58], 'true,false': [1.39e-08, 16, 0], 'false,true': [0.0, 16, 0], 'false,false': [0.379, 16, 76]}], ['sametitle(A, B)', {'': 'haswordtitle(A, C), haswordauthor(D, C)', 'true': 'haswordtitle(B, C)', 'false': 'haswordtitle(B, E), haswordauthor(F, E)'}, {'true,true': [0.235, 4, 64], 'true,false': [0.0, 16, 0], 'false,true': [0.0, 16, 0], 'false,false': [0.379, 16, 76]}], ['sametitle(A, B)', {'': 'haswordtitle(A, C), haswordauthor(D, C)', 'true': 'haswordtitle(B, C)', 'false': 'haswordtitle(B, E), haswordauthor(F, E)'}, {'true,true': [0.235, 4, 64], 'true,false': [9.13e-09, 16, 0], 'false,true': [0.0, 16, 0], 'false,false': [0.379, 16, 76]}], ['sametitle(A, B)', {'': 'haswordtitle(A, C), haswordauthor(D, C)', 'true': 'haswordtitle(B, C)', 'true,true': 'author(E, D), title(E, A)', 'false': 'haswordtitle(B, F), haswordauthor(G, F)'}, {'true,true,true': [0.015, 0, 6], 'true,true,false': [0.246, 4, 58], 'true,false': [1.05e-08, 16, 0], 'false,true': [9.13e-09, 16, 0], 'false,false': [0.379, 16, 76]}], ['sametitle(A, B)', {'': 'haswordtitle(A, C), haswordauthor(D, C)', 'true': 'haswordtitle(B, C)', 'true,true': 'author(E, D), title(E, B)'}, {'true,true,true': [0.02, 0, 6], 'true,true,false': [0.246, 4, 58], 'true,false': [0.0, 16, 0], 'false': [0.363, 32, 76]}], ['sametitle(A, B)', {'': 'haswordtitle(A, C), haswordauthor(D, C)', 'true': 'haswordtitle(B, C)'}, {'true,true': [0.235, 4, 64], 'true,false': [0.0, 16, 0], 'false': [0.362, 32, 76]}], ['sametitle(A, B)', {'': 'haswordtitle(A, C), haswordauthor(D, C)', 'true': 'haswordtitle(B, C)', 'true,true': 'author(E, D), title(E, A)'}, {'true,true,true': [0.017, 0, 6], 'true,true,false': [0.246, 4, 58], 'true,false': [0.0, 16, 0], 'false': [0.361, 32, 76]}], ['sametitle(A, B)', {'': 'haswordtitle(A, C), haswordauthor(D, C)', 'true': 'haswordtitle(B, C)', 'true,true': 'author(E, D), title(E, B)', 'false': 'haswordtitle(B, F), haswordauthor(G, F)'}, {'true,true,true': [0.02, 0, 6], 'true,true,false': [0.246, 4, 58], 'true,false': [7.45e-09, 16, 0], 'false,true': [0.0, 16, 0], 'false,false': [0.379, 16, 76]}]]
[{'': [0.18140589569160917, 0.2085048010973933], 'true': [0.05536332179930703, -6.938893903907228e-18]}, {'': [0.14296374061649278, 0.20850480109739167], 'false': [-2.7755575615628914e-17, 0.1436672967863875], 'true': [0.055363321799308966, 3.469446951953614e-18], 'true,true': [0.0, 0.06035379812695184]}, {'': [0.10684439275246058, 0.1787211703803718], 'false': [-6.938893903907228e-18, 0.14366729678638898], 'true': [0.05521965704484397, 1.214306433183765e-17], 'true,true': [5.5237956760619454e-05, 0.06029593403795481]}, {'': [0.0823049723918581, 0.15732173594030616], 'false': [-2.0816681711721685e-17, 0.14366729678638981], 'true': [0.055115323471315474, -6.938893903907228e-18]}, {'': [0.06823010076526301, 0.14407215493283168], 'false': [0.0, 0.14366729678638973], 'true': [0.055130809762764195, 5.204170427930421e-18]}, {'': [0.060281150317593735, 0.13629498412747798], 'false': [5.204170427930421e-18, 0.1436672967863895], 'true': [0.0551505177553829, 6.938893903907228e-18], 'true,true': [3.7016547223461815e-05, 0.060304238887640624]}, {'': [0.055548734677033085, 0.13168105419264997], 'true': [0.05511375171051727, -1.734723475976807e-18], 'true,true': [6.84526450593174e-05, 0.06028849396111018]}, {'': [0.05258950517886437, 0.13076758054748813], 'true': [0.05509075148837518, 0.0]}, {'': [0.05066342930537154, 0.13017647889208825], 'true': [0.055109627548872823, 0.0], 'true,true': [4.913829516497067e-05, 0.060295628267130176]}, {'': [0.04931519406576556, 0.12978589646435568], 'false': [-3.469446951953614e-18, 0.14366729678638948], 'true': [0.05509323079969765, 3.469446951953614e-18], 'true,true': [6.968093973854413e-05, 0.06028583829754647]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;sametitle(A, B) :- haswordtitle(A, C), haswordauthor(D, C).;true;true
0;true;haswordtitle(B, C).;true;true
1;;sametitle(A, B) :- haswordtitle(A, C), haswordauthor(D, C).;true;true
1;true;haswordtitle(B, C).;true;true
1;true,true;author(E, D), title(E, B).;true;true
1;false;haswordtitle(B, F), haswordauthor(G, F).;true;true
2;;sametitle(A, B) :- haswordtitle(A, C), haswordauthor(D, C).;true;true
2;true;haswordtitle(B, C).;true;true
2;true,true;author(E, D), title(E, A).;true;true
2;false;haswordtitle(B, F), haswordauthor(G, F).;true;true
3;;sametitle(A, B) :- haswordtitle(A, C), haswordauthor(D, C).;true;true
3;true;haswordtitle(B, C).;true;true
3;false;haswordtitle(B, E), haswordauthor(F, E).;true;true
4;;sametitle(A, B) :- haswordtitle(A, C), haswordauthor(D, C).;true;true
4;true;haswordtitle(B, C).;true;true
4;false;haswordtitle(B, E), haswordauthor(F, E).;true;true
5;;sametitle(A, B) :- haswordtitle(A, C), haswordauthor(D, C).;true;true
5;true;haswordtitle(B, C).;true;true
5;true,true;author(E, D), title(E, A).;true;true
5;false;haswordtitle(B, F), haswordauthor(G, F).;true;true
6;;sametitle(A, B) :- haswordtitle(A, C), haswordauthor(D, C).;true;true
6;true;haswordtitle(B, C).;true;true
6;true,true;author(E, D), title(E, B).;true;true
7;;sametitle(A, B) :- haswordtitle(A, C), haswordauthor(D, C).;true;true
7;true;haswordtitle(B, C).;true;true
8;;sametitle(A, B) :- haswordtitle(A, C), haswordauthor(D, C).;true;true
8;true;haswordtitle(B, C).;true;true
8;true,true;author(E, D), title(E, A).;true;true
9;;sametitle(A, B) :- haswordtitle(A, C), haswordauthor(D, C).;true;true
9;true;haswordtitle(B, C).;true;true
9;true,true;author(E, D), title(E, B).;true;true
9;false;haswordtitle(B, F), haswordauthor(G, F).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordauthor(D, C) )
%   then if ( haswordtitle(B, C) )
%   | then return 0.799325405687748;  // std dev = 0.235, 68.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=64 */
%   | else return -0.1418510649004878;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   else return 0.5618526388032163;  // std dev = 0.457, 108.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=76 */
WILL Produced-Tree #2
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordauthor(D, C) )
%   then if ( haswordtitle(B, C) )
%   | then if ( author(E, D), title(E, A) )
%   | | then return 0.7311911912464265;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return 0.666675062214168;  // std dev = 0.246, 62.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=58 */
%   | else return -0.12544463852839138;  // std dev = 7.45e-09, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   else return 0.478945074750187;  // std dev = 0.457, 108.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=76 */
WILL Produced-Tree #3
% FOR sametitle(A, B):
%   if ( haswordtitle(B, C), haswordauthor(D, C) )
%   then if ( haswordtitle(A, C) )
%   | then if ( author(E, D), title(E, B) )
%   | | then return 0.5722214529189243;  // std dev = 0.018, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return 0.5177074913802713;  // std dev = 0.246, 62.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=58 */
%   | else return -0.31881948350713596;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   else return 0.4154772728356105;  // std dev = 0.413, 108.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=76 */
WILL Produced-Tree #4
% FOR sametitle(A, B):
%   if ( haswordtitle(B, C), haswordauthor(D, C) )
%   then if ( haswordtitle(A, C) )
%   | then return 0.3927886471059252;  // std dev = 0.235, 68.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=64 */
%   | else return -0.25388056084682503;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   else return 0.3264345813695307;  // std dev = 0.405, 108.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=76 */
WILL Produced-Tree #5
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordauthor(D, C) )
%   then if ( haswordtitle(B, C) )
%   | then return 0.2985318313656425;  // std dev = 0.235, 68.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=64 */
%   | else return -0.20992395583084467;  // std dev = 2.36e-08, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   else if ( haswordtitle(B, E), haswordauthor(F, E) )
%   | then return -0.20884487148991215;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | else return 0.3304094568950898;  // std dev = 0.379, 92.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=76 */
WILL Produced-Tree #6
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordauthor(D, C) )
%   then if ( haswordtitle(B, C) )
%   | then if ( author(E, D), title(E, B) )
%   | | then return 0.2744133123635056;  // std dev = 0.015, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return 0.22926659219152212;  // std dev = 0.246, 62.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=58 */
%   | else return -0.1772184174330067;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   else return 0.18549726520926826;  // std dev = 0.381, 108.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=76 */
WILL Produced-Tree #7
% FOR sametitle(A, B):
%   if ( haswordtitle(B, C), haswordauthor(D, C) )
%   then if ( haswordtitle(A, C) )
%   | then return 0.18749882763327821;  // std dev = 0.235, 68.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=64 */
%   | else return -0.20501339661473972;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   else if ( haswordtitle(A, E), haswordauthor(F, E) )
%   | then return -0.1528363401241215;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | else return 0.20395285739681768;  // std dev = 0.379, 92.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=76 */
WILL Produced-Tree #8
% FOR sametitle(A, B):
%   if ( haswordtitle(B, C), haswordauthor(D, C) )
%   then if ( haswordtitle(A, C) )
%   | then if ( author(E, D), title(E, A) )
%   | | then return 0.1943364767066934;  // std dev = 0.018, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return 0.15050502409656707;  // std dev = 0.246, 62.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=58 */
%   | else return -0.17360886359552324;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   else if ( haswordtitle(A, F), haswordauthor(G, F) )
%   | then return -0.13407922515630832;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | else return 0.1573298176687466;  // std dev = 0.379, 92.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=76 */
WILL Produced-Tree #9
% FOR sametitle(A, B):
%   return 0;  // std dev = 0.313, 192.000 (wgt'ed) examples reached here.  /* #neg=52 #pos=140 */
WILL Produced-Tree #10
% FOR sametitle(A, B):
%   if ( haswordtitle(B, C), haswordauthor(D, C) )
%   then if ( haswordtitle(A, C) )
%   | then if ( author(E, D), title(E, B) )
%   | | then return 0.1661284924019467;  // std dev = 0.018, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return 0.12615100315452632;  // std dev = 0.246, 62.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=58 */
%   | else return -0.1500929531155777;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   else if ( haswordtitle(A, F), haswordauthor(G, F) )
%   | then return -0.11926154318508898;  // std dev = 7.45e-09, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | else return 0.12344741173125065;  // std dev = 0.379, 92.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=76 */


Results
   AUC ROC   = 0.710066
   AUC PR    = 0.662695
   CLL	      = -0.689212
   Precision = 0.548596 at threshold = 0.5
   Recall    = 0.910394
   F1        = 0.684636


Total learning time: 22.004517793655396 seconds
Total inference time: 2.786 seconds
AUC ROC: 0.710066


Results scoring model
   AUC ROC   = 0.859341
   AUC PR    = 0.926052
   CLL	      = -0.35394
   Precision = 0.875 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.933333


Total scoring time: 1.552 seconds
Refined model CLL: -0.35394


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.709594
   AUC PR    = 0.662568
   CLL	      = -0.712754
   Precision = 0.548596 at threshold = 0.5
   Recall    = 0.910394
   F1        = 0.684636


Total learning time: 50.367254840850826 seconds
Total inference time: 3.032 seconds
AUC ROC: 0.709594
Total revision time: 50.367254840850826
Best scored revision CLL: -0.340952


Dataset: 6_imdb_cora, Fold: 2, Type: Transfer (trRDN-B), Time: 02:14:09
{'AUC ROC': 0.709594, 'AUC PR': 0.662568, 'CLL': -0.712754, 'Precision': [0.548596, 0.5], 'Recall': 0.910394, 'F1': 0.684636, 'Learning time': 50.367254840850826, 'Inference time': 3.032, 'parameter': {'AUC ROC': 0.709594, 'AUC PR': 0.662568, 'CLL': -0.712754, 'Precision': [0.548596, 0.5], 'Recall': 0.910394, 'F1': 0.684636, 'Learning time': 25.025737047195435, 'Inference time': 3.032}}


WILL Produced-Tree #1
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordauthor(D, C) )
%   then if ( haswordtitle(B, C) )
%   | then if ( author(E, D), title(E, A) )
%   | | then return 0.8581489350995123;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return 0.7936328060672545;  // std dev = 0.246, 62.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=58 */
%   | else return -0.1418510649004878;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   else return 0.5618526388032163;  // std dev = 0.457, 108.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=76 */
WILL Produced-Tree #2
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordauthor(D, C) )
%   then if ( haswordtitle(B, C) )
%   | then if ( author(E, D), title(E, B) )
%   | | then return 0.7237518087032814;  // std dev = 0.015, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return 0.6673784342854517;  // std dev = 0.246, 62.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=58 */
%   | else return -0.12544463852839138;  // std dev = 7.45e-09, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   else if ( haswordtitle(B, F), haswordauthor(G, F) )
%   | then return -0.22475862895351809;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | else return 0.6013283275682223;  // std dev = 0.379, 92.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=76 */
WILL Produced-Tree #3
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordauthor(D, C) )
%   then if ( haswordtitle(B, C) )
%   | then if ( author(E, D), title(E, B) )
%   | | then return 0.5596022372298856;  // std dev = 0.018, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return 0.5189205286489138;  // std dev = 0.246, 62.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=58 */
%   | else return -0.11231637819360635;  // std dev = 1.39e-08, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   else if ( haswordtitle(B, F), haswordauthor(G, F) )
%   | then return -0.1880232639236015;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | else return 0.48012100179645917;  // std dev = 0.379, 92.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=76 */
WILL Produced-Tree #4
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordauthor(D, C) )
%   then if ( haswordtitle(B, C) )
%   | then return 0.39280626103991473;  // std dev = 0.235, 68.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=64 */
%   | else return -0.10159632948783631;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   else return 0.28723114677579675;  // std dev = 0.397, 108.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=76 */
WILL Produced-Tree #5
% FOR sametitle(A, B):
%   if ( haswordtitle(B, C), haswordauthor(D, C) )
%   then if ( haswordtitle(A, C) )
%   | then return 0.29856084287054624;  // std dev = 0.235, 68.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=64 */
%   | else return -0.2036399203059567;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   else return 0.2362864224171227;  // std dev = 0.376, 108.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=76 */
WILL Produced-Tree #6
% FOR sametitle(A, B):
%   if ( haswordtitle(B, C), haswordauthor(D, C) )
%   then if ( haswordtitle(A, C) )
%   | then return 0.23328042529364476;  // std dev = 0.235, 68.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=64 */
%   | else return -0.17259620812973697;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   else if ( haswordtitle(A, E), haswordauthor(F, E) )
%   | then return -0.11456649254062003;  // std dev = 5.27e-09, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | else return 0.23539671295366563;  // std dev = 0.379, 92.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=76 */
WILL Produced-Tree #7
% FOR sametitle(A, B):
%   if ( haswordtitle(B, C), haswordauthor(D, C) )
%   then if ( haswordtitle(A, C) )
%   | then if ( author(E, D), title(E, A) )
%   | | then return 0.22561746523601367;  // std dev = 0.020, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return 0.18379581492449631;  // std dev = 0.246, 62.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=58 */
%   | else return -0.14932128800734065;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   else return 0.1379427851544166;  // std dev = 0.364, 108.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=76 */
WILL Produced-Tree #8
% FOR sametitle(A, B):
%   if ( haswordtitle(B, C), haswordauthor(D, C) )
%   then if ( haswordtitle(A, C) )
%   | then return 0.15441019899555986;  // std dev = 0.235, 68.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=64 */
%   | else return -0.1313293774499637;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   else if ( haswordtitle(A, E), haswordauthor(F, E) )
%   | then return -0.11695925716946264;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | else return 0.14905632458387175;  // std dev = 0.379, 92.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=76 */
WILL Produced-Tree #9
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordauthor(D, C) )
%   then if ( haswordtitle(B, C) )
%   | then if ( author(E, D), title(E, B) )
%   | | then return 0.16660359224349253;  // std dev = 0.017, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return 0.1260853188267646;  // std dev = 0.246, 62.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=58 */
%   | else return -0.10541028772842004;  // std dev = 1.39e-08, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   else return 0.08263025011069232;  // std dev = 0.360, 108.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=76 */
WILL Produced-Tree #10
% FOR sametitle(A, B):
%   if ( haswordtitle(B, C), haswordauthor(D, C) )
%   then if ( haswordtitle(A, C) )
%   | then if ( author(E, D), title(E, B) )
%   | | then return 0.14474334536234368;  // std dev = 0.015, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return 0.10738885651985602;  // std dev = 0.246, 62.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=58 */
%   | else return -0.1258727316185655;  // std dev = 7.45e-09, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   else return 0.07149228163057515;  // std dev = 0.357, 108.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=76 */


Results
   AUC ROC   = 0.710066
   AUC PR    = 0.662695
   CLL	      = -0.701126
   Precision = 0.548596 at threshold = 0.5
   Recall    = 0.910394
   F1        = 0.684636


Total learning time: 24.464972019195557 seconds
Total inference time: 3.037 seconds
AUC ROC: 0.710066


Dataset: 6_imdb_cora, Fold: 2, Type: Scratch (RDN-B), Time: 02:14:37
{'AUC ROC': 0.710066, 'AUC PR': 0.662695, 'CLL': -0.701126, 'Precision': [0.548596, 0.5], 'Recall': 0.910394, 'F1': 0.684636, 'Learning time': 24.464972019195557, 'Inference time': 3.037}


Starting fold 3

Target train facts examples: 9306
Target train pos examples: 113
Target train neg examples: 210

Target test facts examples: 33252
Target test pos  examples: 585
Target test neg examples: 506

******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


WILL Produced-Tree #1
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordvenue(D, C) )
%   then if ( title(E, B), venue(E, D) )
%   | then if ( samebib(E, F), title(F, A) )
%   | | then return 0.8581489350995115;  // std dev = 3.37e-07, 96.000 (wgt'ed) examples reached here.  /* #pos=96 */
%   | | else return -0.14185106490048843;  // std dev = 0.000, 206.000 (wgt'ed) examples reached here.  /* #neg=206 */
%   | else return 0.7812258581764353;  // std dev = 0.266, 13.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   else if ( haswordtitle(A, G), haswordtitle(B, G) )
%   | then return 0.8581489350995122;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return -0.14185106490048777;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #2
% FOR sametitle(A, B):
%   if ( haswordtitle(B, C), haswordvenue(D, C) )
%   then if ( title(E, A), venue(E, D) )
%   | then if ( samebib(E, F), title(F, B) )
%   | | then return 0.7194734122109541;  // std dev = 1.88e-07, 96.000 (wgt'ed) examples reached here.  /* #pos=96 */
%   | | else return -0.12612338422298822;  // std dev = 0.139, 206.000 (wgt'ed) examples reached here.  /* #neg=206 */
%   | else return 0.6673923081472714;  // std dev = 0.229, 13.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   else if ( haswordtitle(A, G), haswordtitle(B, G) )
%   | then return 0.7225254794457083;  // std dev = 0.014, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return -0.12544463852839136;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #3
% FOR sametitle(A, B):
%   if ( haswordtitle(B, C), haswordvenue(D, C) )
%   then if ( title(E, A), venue(E, D) )
%   | then if ( samebib(E, F), title(F, B) )
%   | | then return 0.5553664367462835;  // std dev = 4.09e-07, 96.000 (wgt'ed) examples reached here.  /* #pos=96 */
%   | | else return -0.11287578031157806;  // std dev = 0.129, 206.000 (wgt'ed) examples reached here.  /* #neg=206 */
%   | else return 0.5235516292488022;  // std dev = 0.214, 13.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   else if ( haswordtitle(A, G), haswordtitle(B, G) )
%   | then return 0.5583951624779799;  // std dev = 0.017, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return -0.11231637819360636;  // std dev = 2.63e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #4
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordvenue(D, C) )
%   then if ( title(E, B), venue(E, D) )
%   | then return 0.0627648931300328;  // std dev = 0.242, 302.000 (wgt'ed) examples reached here.  /* #neg=206 #pos=96 */
%   | else return 0.40316752663743777;  // std dev = 0.180, 13.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   else if ( haswordtitle(A, F), haswordtitle(B, F) )
%   | then return 0.42073337754073636;  // std dev = 0.019, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return -0.10155867761849639;  // std dev = 9.22e-05, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #5
% FOR sametitle(A, B):
%   if ( haswordtitle(B, C), haswordvenue(D, C) )
%   then if ( title(E, A), venue(E, D) )
%   | then if ( samebib(E, F), title(F, B) )
%   | | then return 0.4014754679530416;  // std dev = 0.082, 96.000 (wgt'ed) examples reached here.  /* #pos=96 */
%   | | else return -0.10820750209827167;  // std dev = 0.191, 206.000 (wgt'ed) examples reached here.  /* #neg=206 */
%   | else return 0.3049351736382916;  // std dev = 0.185, 13.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   else if ( haswordtitle(A, G), haswordtitle(B, G) )
%   | then return 0.33929714306022857;  // std dev = 0.071, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return -0.09761966683889588;  // std dev = 0.012, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #6
% FOR sametitle(A, B):
%   if ( haswordtitle(B, C), haswordvenue(D, C) )
%   then if ( title(E, A), venue(E, D) )
%   | then if ( samebib(E, F), title(F, B) )
%   | | then return 0.3098781522571682;  // std dev = 0.071, 96.000 (wgt'ed) examples reached here.  /* #pos=96 */
%   | | else return -0.09821691196456017;  // std dev = 0.179, 206.000 (wgt'ed) examples reached here.  /* #neg=206 */
%   | else return 0.23791640752136228;  // std dev = 0.186, 13.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   else if ( haswordtitle(A, G), haswordtitle(B, G) )
%   | then return 0.268103631699873;  // std dev = 0.063, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return -0.08935588527497763;  // std dev = 0.011, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #7
% FOR sametitle(A, B):
%   if ( haswordtitle(B, C), haswordvenue(D, C) )
%   then if ( title(E, B), venue(E, D) )
%   | then if ( samebib(E, F), title(F, A) )
%   | | then return 0.24777808820382793;  // std dev = 0.060, 96.000 (wgt'ed) examples reached here.  /* #pos=96 */
%   | | else return -0.09094076693033609;  // std dev = 0.374, 205.000 (wgt'ed) examples reached here.  /* #neg=205 */
%   | else return 0.18609224171409308;  // std dev = 0.148, 14.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=12 */
%   else if ( haswordtitle(A, G), haswordtitle(B, G) )
%   | then return 0.2190276846914389;  // std dev = 0.055, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return -0.08235003985897814;  // std dev = 0.010, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #8
% FOR sametitle(A, B):
%   if ( haswordtitle(B, C), haswordvenue(D, C) )
%   then if ( title(E, A), venue(E, D) )
%   | then if ( samebib(E, F), title(F, B) )
%   | | then return 0.20452824682284565;  // std dev = 0.052, 96.000 (wgt'ed) examples reached here.  /* #pos=96 */
%   | | else return -0.08307547716541015;  // std dev = 0.212, 206.000 (wgt'ed) examples reached here.  /* #neg=206 */
%   | else return 0.16189964364993215;  // std dev = 0.174, 13.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   else if ( haswordtitle(A, G), haswordtitle(B, G) )
%   | then return 0.1839780492526957;  // std dev = 0.049, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return -0.07633982688428556;  // std dev = 0.010, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #9
% FOR sametitle(A, B):
%   if ( haswordtitle(B, C), haswordvenue(D, C) )
%   then if ( title(E, B), venue(E, D) )
%   | then if ( samebib(E, F), title(F, A) )
%   | | then return 0.17325604238102776;  // std dev = 0.045, 96.000 (wgt'ed) examples reached here.  /* #pos=96 */
%   | | else return -0.0779394512263607;  // std dev = 0.404, 205.000 (wgt'ed) examples reached here.  /* #neg=205 */
%   | else return 0.13391254910649783;  // std dev = 0.134, 14.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=12 */
%   else if ( haswordtitle(A, G), haswordtitle(B, G) )
%   | then return 0.15801853088414533;  // std dev = 0.044, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return -0.07113019794706615;  // std dev = 0.009, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #10
% FOR sametitle(A, B):
%   if ( haswordtitle(B, C), haswordvenue(D, C) )
%   then if ( title(E, B), venue(E, D) )
%   | then if ( samebib(E, F), title(F, A) )
%   | | then return 0.14982728898528055;  // std dev = 0.040, 96.000 (wgt'ed) examples reached here.  /* #pos=96 */
%   | | else return -0.07257747022542889;  // std dev = 0.390, 205.000 (wgt'ed) examples reached here.  /* #neg=205 */
%   | else return 0.11448208866887673;  // std dev = 0.134, 14.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=12 */
%   else if ( haswordtitle(A, G), haswordtitle(B, G) )
%   | then return 0.13816267565356233;  // std dev = 0.039, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return -0.06657333852912671;  // std dev = 0.009, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */


Results
   AUC ROC   = 0.983068
   AUC PR    = 0.975305
   CLL	      = -0.170799
   Precision = 0.986038 at threshold = 0.5
   Recall    = 0.965812
   F1        = 0.97582


Total learning time: 390.33967328071594 seconds
Total inference time: 59.293 seconds
AUC ROC: 0.983068


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.097275
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 5.536 seconds
Parameter learned model CLL: -0.097275


Structure after Parameter Learning
[['sametitle(A, B)', {'': 'haswordtitle(A, C), haswordvenue(D, C)', 'true': 'title(E, B), venue(E, D)', 'true,true': 'samebib(E, F), title(F, A)', 'false': 'haswordtitle(A, G), haswordtitle(B, G)'}, {'true,true,true': [3.37e-07, 0, 96], 'true,true,false': [0.0, 206, 0], 'true,false': [0.266, 1, 12], 'false,true': [0.0, 0, 5], 'false,false': [0.0, 3, 0]}], ['sametitle(A, B)', {'': 'haswordtitle(B, C), haswordvenue(D, C)', 'true': 'title(E, A), venue(E, D)', 'true,true': 'samebib(E, F), title(F, B)', 'false': 'haswordtitle(A, G), haswordtitle(B, G)'}, {'true,true,true': [1.88e-07, 0, 96], 'true,true,false': [0.139, 206, 0], 'true,false': [0.229, 1, 12], 'false,true': [0.014, 0, 5], 'false,false': [0.0, 3, 0]}], ['sametitle(A, B)', {'': 'haswordtitle(B, C), haswordvenue(D, C)', 'true': 'title(E, A), venue(E, D)', 'true,true': 'samebib(E, F), title(F, B)', 'false': 'haswordtitle(A, G), haswordtitle(B, G)'}, {'true,true,true': [4.09e-07, 0, 96], 'true,true,false': [0.129, 206, 0], 'true,false': [0.214, 1, 12], 'false,true': [0.017, 0, 5], 'false,false': [2.63e-09, 3, 0]}], ['sametitle(A, B)', {'': 'haswordtitle(A, C), haswordvenue(D, C)', 'true': 'title(E, B), venue(E, D)', 'false': 'haswordtitle(A, F), haswordtitle(B, F)'}, {'true,true': [0.242, 206, 96], 'true,false': [0.18, 1, 12], 'false,true': [0.019, 0, 5], 'false,false': [9.22e-05, 3, 0]}], ['sametitle(A, B)', {'': 'haswordtitle(B, C), haswordvenue(D, C)', 'true': 'title(E, A), venue(E, D)', 'true,true': 'samebib(E, F), title(F, B)', 'false': 'haswordtitle(A, G), haswordtitle(B, G)'}, {'true,true,true': [0.082, 0, 96], 'true,true,false': [0.191, 206, 0], 'true,false': [0.185, 1, 12], 'false,true': [0.071, 0, 5], 'false,false': [0.012, 3, 0]}], ['sametitle(A, B)', {'': 'haswordtitle(B, C), haswordvenue(D, C)', 'true': 'title(E, A), venue(E, D)', 'true,true': 'samebib(E, F), title(F, B)', 'false': 'haswordtitle(A, G), haswordtitle(B, G)'}, {'true,true,true': [0.071, 0, 96], 'true,true,false': [0.179, 206, 0], 'true,false': [0.186, 1, 12], 'false,true': [0.063, 0, 5], 'false,false': [0.011, 3, 0]}], ['sametitle(A, B)', {'': 'haswordtitle(B, C), haswordvenue(D, C)', 'true': 'title(E, B), venue(E, D)', 'true,true': 'samebib(E, F), title(F, A)', 'false': 'haswordtitle(A, G), haswordtitle(B, G)'}, {'true,true,true': [0.06, 0, 96], 'true,true,false': [0.374, 205, 0], 'true,false': [0.148, 2, 12], 'false,true': [0.055, 0, 5], 'false,false': [0.01, 3, 0]}], ['sametitle(A, B)', {'': 'haswordtitle(B, C), haswordvenue(D, C)', 'true': 'title(E, A), venue(E, D)', 'true,true': 'samebib(E, F), title(F, B)', 'false': 'haswordtitle(A, G), haswordtitle(B, G)'}, {'true,true,true': [0.052, 0, 96], 'true,true,false': [0.212, 206, 0], 'true,false': [0.174, 1, 12], 'false,true': [0.049, 0, 5], 'false,false': [0.01, 3, 0]}], ['sametitle(A, B)', {'': 'haswordtitle(B, C), haswordvenue(D, C)', 'true': 'title(E, B), venue(E, D)', 'true,true': 'samebib(E, F), title(F, A)', 'false': 'haswordtitle(A, G), haswordtitle(B, G)'}, {'true,true,true': [0.045, 0, 96], 'true,true,false': [0.404, 205, 0], 'true,false': [0.134, 2, 12], 'false,true': [0.044, 0, 5], 'false,false': [0.009, 3, 0]}], ['sametitle(A, B)', {'': 'haswordtitle(B, C), haswordvenue(D, C)', 'true': 'title(E, B), venue(E, D)', 'true,true': 'samebib(E, F), title(F, A)', 'false': 'haswordtitle(A, G), haswordtitle(B, G)'}, {'true,true,true': [0.04, 0, 96], 'true,true,false': [0.39, 205, 0], 'true,false': [0.134, 2, 12], 'false,true': [0.039, 0, 5], 'false,false': [0.009, 3, 0]}]]
[{'': [0.225306122448982, 0.23437499999999983], 'false': [0.0, 0.0], 'true': [0.21683259506162156, 0.07100591715976314], 'true,true': [1.1842378929335002e-15, -2.3713501496848003e-16]}, {'': [0.16176212761460199, 0.16855140989000014], 'false': [3.7260457621890454e-05, 0.0], 'true': [0.15510708635760087, 0.05239895620925212], 'true,true': [3.7007434154171886e-16, 9.444262217627639e-05]}, {'': [0.1018908762901909, 0.10547029292289227], 'false': [5.722963035768025e-05, 2.3129646346357427e-18], 'true': [0.09688107090960915, 0.04591092331542287], 'true,true': [1.7393494052460785e-15, 8.060589692388903e-05]}, {'': [0.06230102029880341, 0.06398196220226599], 'false': [7.526624150906436e-05, 2.8353265302723716e-09], 'true': [0.05880013363106616, 0.032537457324748435]}, {'': [0.05804337276400556, 0.0453927090577628], 'true': [0.056471435519645646, 0.03409991212723373], 'true,true': [6.985780852865793e-05, 0.00017763254442073326], 'false': [0.0010131130539112521, 4.851566474810507e-05]}, {'': [0.037848840716157635, 0.03046086197534175], 'true': [0.0362343423966657, 0.03450899170847565], 'true,true': [5.207700617769021e-05, 0.00015561037714111736], 'false': [0.0007960300501354322, 4.1432094918794855e-05]}, {'': [0.02645707840676524, 0.021686046368868332], 'true': [0.02539742078793351, 0.02194710189444324], 'true,true': [3.8003273320014186e-05, 0.0006812749348868958], 'false': [0.000615519038805018, 3.5758884481948645e-05]}, {'': [0.019530956242645392, 0.016194237050021265], 'true': [0.01809307372698004, 0.030329096331058465], 'true,true': [2.817305647008957e-05, 0.00021787153545400746], 'false': [0.00048006400397709317, 3.115256230193028e-05]}, {'': [0.015153130883411366, 0.012554916885548786], 'true': [0.014256507803452577, 0.017847334516769186], 'true,true': [2.1412780844253427e-05, 0.0007980445010114541], 'false': [0.0003805198458366243, 2.7366165302326537e-05]}, {'': [0.012131477313350235, 0.010025172784938795], 'true': [0.011255979773477427, 0.01806866446923184], 'true,true': [1.6688529369165057e-05, 0.0007434031915560715], 'false': [0.000306931695481541, 2.4219077733648314e-05]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;sametitle(A, B) :- haswordtitle(A, C), haswordvenue(D, C).;true;true
0;true;title(E, B), venue(E, D).;true;true
0;true,true;samebib(E, F), title(F, A).;true;true
0;false;haswordtitle(A, G), haswordtitle(B, G).;true;true
1;;sametitle(A, B) :- haswordtitle(B, C), haswordvenue(D, C).;true;true
1;true;title(E, A), venue(E, D).;true;true
1;true,true;samebib(E, F), title(F, B).;true;true
1;false;haswordtitle(A, G), haswordtitle(B, G).;true;true
2;;sametitle(A, B) :- haswordtitle(B, C), haswordvenue(D, C).;true;true
2;true;title(E, A), venue(E, D).;true;true
2;true,true;samebib(E, F), title(F, B).;true;true
2;false;haswordtitle(A, G), haswordtitle(B, G).;true;true
3;;sametitle(A, B) :- haswordtitle(A, C), haswordvenue(D, C).;true;true
3;false;haswordtitle(A, F), haswordtitle(B, F).;true;true
4;;sametitle(A, B) :- haswordtitle(B, C), haswordvenue(D, C).;true;true
4;true;title(E, A), venue(E, D).;true;true
4;true,true;samebib(E, F), title(F, B).;true;true
4;false;haswordtitle(A, G), haswordtitle(B, G).;true;true
5;;sametitle(A, B) :- haswordtitle(B, C), haswordvenue(D, C).;true;true
5;true;title(E, A), venue(E, D).;true;true
5;true,true;samebib(E, F), title(F, B).;true;true
5;false;haswordtitle(A, G), haswordtitle(B, G).;true;true
6;;sametitle(A, B) :- haswordtitle(B, C), haswordvenue(D, C).;true;true
6;true;title(E, B), venue(E, D).;true;true
6;true,true;samebib(E, F), title(F, A).;true;true
6;false;haswordtitle(A, G), haswordtitle(B, G).;true;true
7;;sametitle(A, B) :- haswordtitle(B, C), haswordvenue(D, C).;true;true
7;true;title(E, A), venue(E, D).;true;true
7;true,true;samebib(E, F), title(F, B).;true;true
7;false;haswordtitle(A, G), haswordtitle(B, G).;true;true
8;;sametitle(A, B) :- haswordtitle(B, C), haswordvenue(D, C).;true;true
8;true;title(E, B), venue(E, D).;true;true
8;true,true;samebib(E, F), title(F, A).;true;true
8;false;haswordtitle(A, G), haswordtitle(B, G).;true;true
9;;sametitle(A, B) :- haswordtitle(B, C), haswordvenue(D, C).;true;true
9;true;title(E, B), venue(E, D).;true;true
9;true,true;samebib(E, F), title(F, A).;true;true
9;false;haswordtitle(A, G), haswordtitle(B, G).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordvenue(D, C) )
%   then if ( title(E, B), venue(E, D) )
%   | then if ( samebib(E, F), title(F, A) )
%   | | then return 0.8581489350995115;  // std dev = 3.37e-07, 96.000 (wgt'ed) examples reached here.  /* #pos=96 */
%   | | else return -0.14185106490048843;  // std dev = 0.000, 206.000 (wgt'ed) examples reached here.  /* #neg=206 */
%   | else return 0.7812258581764353;  // std dev = 0.266, 13.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   else if ( haswordtitle(A, G), haswordtitle(B, G) )
%   | then return 0.8581489350995122;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return -0.14185106490048777;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #2
% FOR sametitle(A, B):
%   if ( haswordtitle(B, C), haswordvenue(D, C) )
%   then if ( title(E, A), venue(E, D) )
%   | then if ( samebib(E, F), title(F, B) )
%   | | then return 0.7194734122109541;  // std dev = 1.88e-07, 96.000 (wgt'ed) examples reached here.  /* #pos=96 */
%   | | else return -0.12612338422298822;  // std dev = 0.139, 206.000 (wgt'ed) examples reached here.  /* #neg=206 */
%   | else return 0.6673923081472714;  // std dev = 0.229, 13.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   else if ( haswordtitle(A, G), haswordtitle(B, G) )
%   | then return 0.7225254794457083;  // std dev = 0.014, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return -0.12544463852839136;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #3
% FOR sametitle(A, B):
%   if ( haswordtitle(B, C), haswordvenue(D, C) )
%   then if ( title(E, A), venue(E, D) )
%   | then if ( samebib(E, F), title(F, B) )
%   | | then return 0.5553664367462835;  // std dev = 4.09e-07, 96.000 (wgt'ed) examples reached here.  /* #pos=96 */
%   | | else return -0.11287578031157806;  // std dev = 0.129, 206.000 (wgt'ed) examples reached here.  /* #neg=206 */
%   | else return 0.5235516292488022;  // std dev = 0.214, 13.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   else if ( haswordtitle(A, G), haswordtitle(B, G) )
%   | then return 0.5583951624779799;  // std dev = 0.017, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return -0.11231637819360636;  // std dev = 2.63e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #4
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordvenue(D, C) )
%   then if ( title(E, B), venue(E, D) )
%   | then if ( samebib(E, F), title(F, A) )
%   | | then return 0.41749818750685663;  // std dev = 0.001, 96.000 (wgt'ed) examples reached here.  /* #pos=96 */
%   | | else return -0.1025477100747007;  // std dev = 0.219, 206.000 (wgt'ed) examples reached here.  /* #neg=206 */
%   | else return 0.40316752663743777;  // std dev = 0.180, 13.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   else if ( haswordtitle(A, G), haswordtitle(B, G) )
%   | then return 0.42073337754073636;  // std dev = 0.019, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return -0.10155867761849639;  // std dev = 9.22e-05, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #5
% FOR sametitle(A, B):
%   if ( haswordtitle(B, C), haswordvenue(D, C) )
%   then if ( title(E, A), venue(E, D) )
%   | then if ( samebib(E, F), title(F, B) )
%   | | then return 0.32070786392391376;  // std dev = 0.000701, 96.000 (wgt'ed) examples reached here.  /* #pos=96 */
%   | | else return -0.09350751227163408;  // std dev = 0.205, 206.000 (wgt'ed) examples reached here.  /* #neg=206 */
%   | else return 0.30768423831114233;  // std dev = 0.175, 13.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   else if ( haswordtitle(A, G), haswordtitle(B, G) )
%   | then return 0.32300119034950237;  // std dev = 0.019, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return -0.09266672731598641;  // std dev = 6.79e-05, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #6
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordvenue(D, C) )
%   then if ( title(E, B), venue(E, D) )
%   | then if ( samebib(E, F), title(F, A) )
%   | | then return 0.2551593808193205;  // std dev = 0.002, 96.000 (wgt'ed) examples reached here.  /* #pos=96 */
%   | | else return -0.08632001858481983;  // std dev = 0.281, 206.000 (wgt'ed) examples reached here.  /* #neg=206 */
%   | else return 0.24692714516757797;  // std dev = 0.152, 13.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   else if ( haswordtitle(A, G), haswordtitle(B, G) )
%   | then return 0.2573749481850921;  // std dev = 0.018, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return -0.08513563990483575;  // std dev = 0.000132, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #7
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordvenue(D, C) )
%   then if ( title(E, B), venue(E, D) )
%   | then if ( samebib(E, F), title(F, A) )
%   | | then return 0.2097486356475671;  // std dev = 0.001, 96.000 (wgt'ed) examples reached here.  /* #pos=96 */
%   | | else return -0.07978117896841949;  // std dev = 0.268, 206.000 (wgt'ed) examples reached here.  /* #neg=206 */
%   | else return 0.1984301653893709;  // std dev = 0.153, 13.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   else if ( haswordtitle(A, G), haswordtitle(B, G) )
%   | then return 0.21132605742777538;  // std dev = 0.016, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return -0.07873458239126098;  // std dev = 0.000123, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #8
% FOR sametitle(A, B):
%   if ( haswordtitle(B, C), haswordvenue(D, C) )
%   then if ( title(E, A), venue(E, D) )
%   | then if ( samebib(E, F), title(F, B) )
%   | | then return 0.17709187451440622;  // std dev = 0.001, 96.000 (wgt'ed) examples reached here.  /* #pos=96 */
%   | | else return -0.07437447622766132;  // std dev = 0.303, 206.000 (wgt'ed) examples reached here.  /* #neg=206 */
%   | else return 0.16654646394404693;  // std dev = 0.143, 13.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   else if ( haswordtitle(A, G), haswordtitle(B, G) )
%   | then return 0.17860389115331468;  // std dev = 0.016, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return -0.07318387632889668;  // std dev = 0.000178, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #9
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordvenue(D, C) )
%   then if ( title(E, B), venue(E, D) )
%   | then if ( samebib(E, F), title(F, A) )
%   | | then return 0.1527365222925299;  // std dev = 0.001, 96.000 (wgt'ed) examples reached here.  /* #pos=96 */
%   | | else return -0.06948022626133438;  // std dev = 0.298, 206.000 (wgt'ed) examples reached here.  /* #neg=206 */
%   | else return 0.14013072263982093;  // std dev = 0.144, 13.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   else if ( haswordtitle(A, G), haswordtitle(B, G) )
%   | then return 0.15395388231852367;  // std dev = 0.014, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return -0.06837135060627689;  // std dev = 0.000170, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #10
% FOR sametitle(A, B):
%   if ( haswordtitle(B, C), haswordvenue(D, C) )
%   then if ( title(E, A), venue(E, D) )
%   | then if ( samebib(E, F), title(F, B) )
%   | | then return 0.1340032753798171;  // std dev = 0.000949, 96.000 (wgt'ed) examples reached here.  /* #pos=96 */
%   | | else return -0.06535000597888807;  // std dev = 0.328, 206.000 (wgt'ed) examples reached here.  /* #neg=206 */
%   | else return 0.12227045775978468;  // std dev = 0.137, 13.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   else if ( haswordtitle(A, G), haswordtitle(B, G) )
%   | then return 0.1352765127553519;  // std dev = 0.014, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return -0.06412161142768061;  // std dev = 0.000212, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */


Results
   AUC ROC   = 0.986433
   AUC PR    = 0.987219
   CLL	      = -0.161061
   Precision = 0.986038 at threshold = 0.5
   Recall    = 0.965812
   F1        = 0.97582


Total learning time: 393.42896485328674 seconds
Total inference time: 60.287 seconds
AUC ROC: 0.986433


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.088329
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 5.948 seconds
Refined model CLL: -0.088329


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.986433
   AUC PR    = 0.987219
   CLL	      = -0.161061
   Precision = 0.986038 at threshold = 0.5
   Recall    = 0.965812
   F1        = 0.97582


Total learning time: 795.2526381340027 seconds
Total inference time: 60.287 seconds
AUC ROC: 0.986433
Total revision time: 795.2526381340027
Best scored revision CLL: -0.088329


Dataset: 6_imdb_cora, Fold: 3, Type: Transfer (trRDN-B), Time: 02:29:55
{'AUC ROC': 0.986433, 'AUC PR': 0.987219, 'CLL': -0.161061, 'Precision': [0.986038, 0.5], 'Recall': 0.965812, 'F1': 0.97582, 'Learning time': 795.2526381340027, 'Inference time': 60.287, 'parameter': {'AUC ROC': 0.983068, 'AUC PR': 0.975305, 'CLL': -0.170799, 'Precision': [0.986038, 0.5], 'Recall': 0.965812, 'F1': 0.97582, 'Learning time': 390.33967328071594, 'Inference time': 59.293}}


WILL Produced-Tree #1
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordvenue(D, C) )
%   then if ( title(E, B), venue(E, D) )
%   | then if ( samebib(E, F), title(F, A) )
%   | | then return 0.8581489350995115;  // std dev = 3.37e-07, 96.000 (wgt'ed) examples reached here.  /* #pos=96 */
%   | | else return -0.14185106490048843;  // std dev = 0.000, 206.000 (wgt'ed) examples reached here.  /* #neg=206 */
%   | else return 0.7812258581764353;  // std dev = 0.266, 13.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   else if ( haswordtitle(A, G), haswordtitle(B, G) )
%   | then return 0.8581489350995122;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return -0.14185106490048777;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #2
% FOR sametitle(A, B):
%   if ( haswordtitle(B, C), haswordvenue(D, C) )
%   then if ( title(E, A), venue(E, D) )
%   | then if ( samebib(E, F), title(F, B) )
%   | | then return 0.7194734122109541;  // std dev = 1.88e-07, 96.000 (wgt'ed) examples reached here.  /* #pos=96 */
%   | | else return -0.12612338422298822;  // std dev = 0.139, 206.000 (wgt'ed) examples reached here.  /* #neg=206 */
%   | else return 0.6673923081472714;  // std dev = 0.229, 13.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   else if ( haswordtitle(A, G), haswordtitle(B, G) )
%   | then return 0.7225254794457083;  // std dev = 0.014, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return -0.12544463852839136;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #3
% FOR sametitle(A, B):
%   if ( haswordtitle(B, C), haswordvenue(D, C) )
%   then if ( title(E, A), venue(E, D) )
%   | then if ( samebib(E, F), title(F, B) )
%   | | then return 0.5553664367462835;  // std dev = 4.09e-07, 96.000 (wgt'ed) examples reached here.  /* #pos=96 */
%   | | else return -0.11287578031157806;  // std dev = 0.129, 206.000 (wgt'ed) examples reached here.  /* #neg=206 */
%   | else return 0.5235516292488022;  // std dev = 0.214, 13.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   else if ( haswordtitle(A, G), haswordtitle(B, G) )
%   | then return 0.5583951624779799;  // std dev = 0.017, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return -0.11231637819360636;  // std dev = 2.63e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #4
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordvenue(D, C) )
%   then return 0.07681325578271933;  // std dev = 0.250, 315.000 (wgt'ed) examples reached here.  /* #neg=207 #pos=108 */
%   else if ( haswordtitle(A, E), haswordtitle(B, E) )
%   | then return 0.42073337754073636;  // std dev = 0.019, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return -0.10155867761849639;  // std dev = 9.22e-05, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #5
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordauthor(D, C) )
%   then if ( haswordtitle(B, C) )
%   | then return 0.13522411351481384;  // std dev = 0.253, 85.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=41 */
%   | else return -0.075415581792305;  // std dev = 0.126, 61.000 (wgt'ed) examples reached here.  /* #neg=57 #pos=4 */
%   else if ( haswordtitle(B, E), haswordauthor(F, E) )
%   | then return -0.07178400153564209;  // std dev = 0.132, 55.000 (wgt'ed) examples reached here.  /* #neg=51 #pos=4 */
%   | else if ( haswordtitle(A, G), haswordtitle(B, G) )
%   | | then if ( haswordvenue(H, G) )
%   | | | then return 0.15486418598488988;  // std dev = 2.773, 112.000 (wgt'ed) examples reached here.  /* #neg=54 #pos=58 */
%   | | | else return 0.3515815339574979;  // std dev = 0.098, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return -0.09670108435478232;  // std dev = 0.014, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #6
% FOR sametitle(A, B):
%   if ( haswordtitle(B, C), haswordauthor(D, C) )
%   then if ( haswordtitle(A, C) )
%   | then return 0.11270724008699284;  // std dev = 0.244, 85.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=41 */
%   | else return -0.06792767914805518;  // std dev = 0.128, 61.000 (wgt'ed) examples reached here.  /* #neg=57 #pos=4 */
%   else if ( haswordtitle(A, E), haswordauthor(F, E) )
%   | then return -0.06388110157706146;  // std dev = 0.135, 55.000 (wgt'ed) examples reached here.  /* #neg=51 #pos=4 */
%   | else if ( haswordtitle(A, G), haswordtitle(B, G) )
%   | | then if ( haswordvenue(H, G) )
%   | | | then return 0.12787455032782913;  // std dev = 2.669, 112.000 (wgt'ed) examples reached here.  /* #neg=54 #pos=58 */
%   | | | else return 0.2766111681314922;  // std dev = 0.087, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return -0.08858160981296789;  // std dev = 0.013, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #7
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordauthor(D, C) )
%   then if ( haswordtitle(B, C) )
%   | then return 0.09376995873965589;  // std dev = 0.237, 85.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=41 */
%   | else return -0.061222133469699035;  // std dev = 0.131, 61.000 (wgt'ed) examples reached here.  /* #neg=57 #pos=4 */
%   else if ( haswordtitle(B, E), haswordauthor(F, E) )
%   | then return -0.05743369733143035;  // std dev = 0.137, 55.000 (wgt'ed) examples reached here.  /* #neg=51 #pos=4 */
%   | else if ( haswordtitle(A, G), haswordtitle(B, G) )
%   | | then if ( haswordvenue(H, G) )
%   | | | then return 0.10543748433183917;  // std dev = 2.597, 112.000 (wgt'ed) examples reached here.  /* #neg=54 #pos=58 */
%   | | | else return 0.2250781567378776;  // std dev = 0.076, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return -0.08168913046440035;  // std dev = 0.012, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #8
% FOR sametitle(A, B):
%   if ( haswordtitle(B, C), haswordauthor(D, C) )
%   then if ( haswordtitle(A, C) )
%   | then return 0.07792113329948676;  // std dev = 0.233, 85.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=41 */
%   | else return -0.055682235691667664;  // std dev = 0.133, 61.000 (wgt'ed) examples reached here.  /* #neg=57 #pos=4 */
%   else if ( haswordtitle(A, E), haswordauthor(F, E) )
%   | then return -0.0515743047989688;  // std dev = 0.140, 55.000 (wgt'ed) examples reached here.  /* #neg=51 #pos=4 */
%   | else if ( haswordtitle(A, G), haswordtitle(B, G) )
%   | | then if ( haswordvenue(H, G) )
%   | | | then return 0.08688100241963834;  // std dev = 2.547, 112.000 (wgt'ed) examples reached here.  /* #neg=54 #pos=58 */
%   | | | else return 0.1884332322368044;  // std dev = 0.067, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return -0.0757694764941716;  // std dev = 0.011, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #9
% FOR sametitle(A, B):
%   if ( haswordtitle(B, C), haswordvenue(D, C) )
%   then if ( title(E, A), venue(E, D) )
%   | then if ( samebib(E, F), title(F, B) )
%   | | then return 0.30949083437900443;  // std dev = 0.476, 96.000 (wgt'ed) examples reached here.  /* #pos=96 */
%   | | else return -0.12211070613210985;  // std dev = 0.571, 206.000 (wgt'ed) examples reached here.  /* #neg=206 */
%   | else return 0.25339260456981916;  // std dev = 0.208, 13.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   else if ( haswordtitle(A, G), haswordtitle(B, G) )
%   | then return 0.1816460063151553;  // std dev = 0.081, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return -0.07166526535259538;  // std dev = 0.010, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #10
% FOR sametitle(A, B):
%   if ( haswordtitle(B, C), haswordvenue(D, C) )
%   then if ( title(E, B), venue(E, D) )
%   | then return 0.0035040192228654467;  // std dev = 0.173, 301.000 (wgt'ed) examples reached here.  /* #neg=205 #pos=96 */
%   | else return 0.19757460391950138;  // std dev = 0.166, 14.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=12 */
%   else if ( haswordtitle(A, F), haswordtitle(B, F) )
%   | then return 0.15638347647975656;  // std dev = 0.071, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return -0.06704348381847854;  // std dev = 0.009, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */


Results
   AUC ROC   = 0.981345
   AUC PR    = 0.982883
   CLL	      = -0.263858
   Precision = 0.952782 at threshold = 0.5
   Recall    = 0.965812
   F1        = 0.959253


Total learning time: 209.39624977111816 seconds
Total inference time: 27.98 seconds
AUC ROC: 0.981345


Dataset: 6_imdb_cora, Fold: 3, Type: Scratch (RDN-B), Time: 02:33:53
{'AUC ROC': 0.981345, 'AUC PR': 0.982883, 'CLL': -0.263858, 'Precision': [0.952782, 0.5], 'Recall': 0.965812, 'F1': 0.959253, 'Learning time': 209.39624977111816, 'Inference time': 27.98}


Starting fold 4

Target train facts examples: 8129
Target train pos examples: 129
Target train neg examples: 70

Target test facts examples: 34429
Target test pos  examples: 569
Target test neg examples: 646

******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


WILL Produced-Tree #1
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordauthor(D, C) )
%   then if ( haswordtitle(B, C) )
%   | then return 0.8581489350995118;  // std dev = 1.46e-07, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | else return 0.088918165868743;  // std dev = 0.421, 13.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=3 */
%   else if ( haswordtitle(B, E), haswordauthor(F, E) )
%   | then return 0.088918165868743;  // std dev = 0.421, 13.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=3 */
%   | else return 0.5180128806777413;  // std dev = 0.474, 147.000 (wgt'ed) examples reached here.  /* #neg=50 #pos=97 */
WILL Produced-Tree #2
% FOR sametitle(A, B):
%   if ( haswordtitle(B, C), haswordauthor(D, C) )
%   then if ( haswordtitle(A, C) )
%   | then return 0.7194734122109545;  // std dev = 0.000, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | else return 0.07774578121441031;  // std dev = 0.421, 13.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=3 */
%   else return 0.41300317110859763;  // std dev = 0.480, 160.000 (wgt'ed) examples reached here.  /* #neg=60 #pos=100 */
WILL Produced-Tree #3
% FOR sametitle(A, B):
%   if ( haswordtitle(B, C), haswordauthor(D, C) )
%   then if ( haswordtitle(A, C) )
%   | then return 0.5553664367462846;  // std dev = 0.000, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | else return 0.06739536297660921;  // std dev = 0.421, 13.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=3 */
%   else if ( haswordtitle(A, E), haswordauthor(F, E) )
%   | then return 0.016280678363360668;  // std dev = 0.421, 13.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=3 */
%   | else return 0.36439818036135135;  // std dev = 0.474, 147.000 (wgt'ed) examples reached here.  /* #neg=50 #pos=97 */
WILL Produced-Tree #4
% FOR sametitle(A, B):
%   if ( haswordtitle(B, C), haswordauthor(D, C) )
%   then if ( haswordtitle(A, C) )
%   | then return 0.41751358415831;  // std dev = 0.000, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | else return 0.0579733820773872;  // std dev = 0.421, 13.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=3 */
%   else return 0.2614729635020162;  // std dev = 0.475, 160.000 (wgt'ed) examples reached here.  /* #neg=60 #pos=100 */
WILL Produced-Tree #5
% FOR sametitle(A, B):
%   if ( haswordtitle(B, C), haswordauthor(D, C) )
%   then if ( haswordtitle(A, C) )
%   | then return 0.3207118471601494;  // std dev = 0.000, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | else return 0.049528997355293175;  // std dev = 0.421, 13.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=3 */
%   else return 0.19966322567047562;  // std dev = 0.475, 160.000 (wgt'ed) examples reached here.  /* #neg=60 #pos=100 */
WILL Produced-Tree #6
% FOR sametitle(A, B):
%   if ( haswordtitle(B, C), haswordauthor(D, C) )
%   then if ( haswordtitle(A, C) )
%   | then return 0.25517224256948956;  // std dev = 0.000, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | else return 0.04206293300387109;  // std dev = 0.421, 13.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=3 */
%   else if ( haswordtitle(A, E), haswordauthor(F, E) )
%   | then return -0.07485396637043867;  // std dev = 0.421, 13.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=3 */
%   | else return 0.17072463167537763;  // std dev = 0.474, 147.000 (wgt'ed) examples reached here.  /* #neg=50 #pos=97 */
WILL Produced-Tree #7
% FOR sametitle(A, B):
%   if ( haswordtitle(B, C), haswordauthor(D, C) )
%   then if ( haswordtitle(A, C) )
%   | then return 0.2097577156325355;  // std dev = 2.11e-08, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | else return 0.03553879177151896;  // std dev = 0.421, 13.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=3 */
%   else return 0.11287061351514571;  // std dev = 0.472, 160.000 (wgt'ed) examples reached here.  /* #neg=60 #pos=100 */
WILL Produced-Tree #8
% FOR sametitle(A, B):
%   if ( haswordtitle(B, C), haswordauthor(D, C) )
%   then if ( haswordtitle(A, C) )
%   | then return 0.17709649774527747;  // std dev = 0.000, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | else return 0.029894556746069525;  // std dev = 0.421, 13.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=3 */
%   else return 0.08523791075675491;  // std dev = 0.472, 160.000 (wgt'ed) examples reached here.  /* #neg=60 #pos=100 */
WILL Produced-Tree #9
% FOR sametitle(A, B):
%   if ( haswordtitle(B, C), haswordauthor(D, C) )
%   then if ( haswordtitle(A, C) )
%   | then return 0.15274385809367083;  // std dev = 0.000, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | else return 0.025052826506284376;  // std dev = 0.421, 13.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=3 */
%   else return 0.06453447298415896;  // std dev = 0.472, 160.000 (wgt'ed) examples reached here.  /* #neg=60 #pos=100 */
WILL Produced-Tree #10
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordauthor(D, C) )
%   then if ( haswordtitle(B, C) )
%   | then return 0.13400703000801117;  // std dev = 0.000, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | else return -0.11609020206160067;  // std dev = 0.421, 13.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=3 */
%   else return 0.06013388264459104;  // std dev = 0.470, 160.000 (wgt'ed) examples reached here.  /* #neg=60 #pos=100 */


Results
   AUC ROC   = 0.746454
   AUC PR    = 0.6958
   CLL	      = -0.610273
   Precision = 0.580541 at threshold = 0.5
   Recall    = 0.943761
   F1        = 0.718876


Total learning time: 9.352712869644165 seconds
Total inference time: 2.347 seconds
AUC ROC: 0.746454


Results scoring model
   AUC ROC   = 0.691584
   AUC PR    = 0.815016
   CLL	      = -0.565904
   Precision = 0.710983 at threshold = 0.5
   Recall    = 0.953488
   F1        = 0.81457


Total scoring time: 1.202 seconds
Parameter learned model CLL: -0.565904


Structure after Parameter Learning
[['sametitle(A, B)', {'': 'haswordtitle(A, C), haswordauthor(D, C)', 'true': 'haswordtitle(B, C)', 'false': 'haswordtitle(B, E), haswordauthor(F, E)'}, {'true,true': [1.46e-07, 0, 26], 'true,false': [0.421, 10, 3], 'false,true': [0.421, 10, 3], 'false,false': [0.474, 50, 97]}], ['sametitle(A, B)', {'': 'haswordtitle(B, C), haswordauthor(D, C)', 'true': 'haswordtitle(A, C)'}, {'true,true': [0.0, 0, 26], 'true,false': [0.421, 10, 3], 'false': [0.48, 60, 100]}], ['sametitle(A, B)', {'': 'haswordtitle(B, C), haswordauthor(D, C)', 'true': 'haswordtitle(A, C)', 'false': 'haswordtitle(A, E), haswordauthor(F, E)'}, {'true,true': [0.0, 0, 26], 'true,false': [0.421, 10, 3], 'false,true': [0.421, 10, 3], 'false,false': [0.474, 50, 97]}], ['sametitle(A, B)', {'': 'haswordtitle(B, C), haswordauthor(D, C)', 'true': 'haswordtitle(A, C)'}, {'true,true': [0.0, 0, 26], 'true,false': [0.421, 10, 3], 'false': [0.475, 60, 100]}], ['sametitle(A, B)', {'': 'haswordtitle(B, C), haswordauthor(D, C)', 'true': 'haswordtitle(A, C)'}, {'true,true': [0.0, 0, 26], 'true,false': [0.421, 10, 3], 'false': [0.475, 60, 100]}], ['sametitle(A, B)', {'': 'haswordtitle(B, C), haswordauthor(D, C)', 'true': 'haswordtitle(A, C)', 'false': 'haswordtitle(A, E), haswordauthor(F, E)'}, {'true,true': [0.0, 0, 26], 'true,false': [0.421, 10, 3], 'false,true': [0.421, 10, 3], 'false,false': [0.474, 50, 97]}], ['sametitle(A, B)', {'': 'haswordtitle(B, C), haswordauthor(D, C)', 'true': 'haswordtitle(A, C)'}, {'true,true': [2.11e-08, 0, 26], 'true,false': [0.421, 10, 3], 'false': [0.472, 60, 100]}], ['sametitle(A, B)', {'': 'haswordtitle(B, C), haswordauthor(D, C)', 'true': 'haswordtitle(A, C)'}, {'true,true': [0.0, 0, 26], 'true,false': [0.421, 10, 3], 'false': [0.472, 60, 100]}], ['sametitle(A, B)', {'': 'haswordtitle(B, C), haswordauthor(D, C)', 'true': 'haswordtitle(A, C)'}, {'true,true': [0.0, 0, 26], 'true,false': [0.421, 10, 3], 'false': [0.472, 60, 100]}], ['sametitle(A, B)', {'': 'haswordtitle(A, C), haswordauthor(D, C)', 'true': 'haswordtitle(B, C)'}, {'true,true': [0.0, 0, 26], 'true,false': [0.421, 10, 3], 'false': [0.47, 60, 100]}]]
[{'': [0.19066403681788444, 0.2343750000000029], 'false': [0.17751479289940816, 0.22444351890416298], 'true': [8.198570028001156e-16, 0.17751479289940816]}, {'': [0.15068589816301034, 0.23057047642799117], 'true': [-1.3664283380001927e-16, 0.17751479289940827]}, {'': [0.11208621293000956, 0.22967689017494997], 'false': [0.17751479289940827, 0.22444351890416156], 'true': [-3.416070845000482e-16, 0.17751479289940833]}, {'': [0.08789807694700044, 0.22606741089279886], 'true': [-6.832141690000964e-17, 0.1775147928994081]}, {'': [0.07551385052831006, 0.22546705571150172], 'true': [-1.708035422500241e-17, 0.1775147928994083]}, {'': [0.06926394826058821, 0.22513252117332389], 'false': [0.17751479289940833, 0.22444351890415987], 'true': [-8.540177112501205e-18, 0.17751479289940833]}, {'': [0.06591653839564512, 0.22324909173737736], 'true': [1.708035422500241e-17, 0.1775147928994083]}, {'': [0.06398680017401036, 0.22313306433296795], 'true': [-3.416070845000482e-17, 0.1775147928994083]}, {'': [0.06279493086599189, 0.22307196666295953], 'true': [-3.843079700625542e-17, 0.17751479289940836]}, {'': [0.07307129218622077, 0.2207664865606264], 'true': [0.0, 0.17751479289940827]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;sametitle(A, B) :- haswordtitle(A, C), haswordauthor(D, C).;true;true
0;true;haswordtitle(B, C).;true;true
1;;sametitle(A, B) :- haswordtitle(B, C), haswordauthor(D, C).;true;true
1;true;haswordtitle(A, C).;true;true
2;;sametitle(A, B) :- haswordtitle(B, C), haswordauthor(D, C).;true;true
2;true;haswordtitle(A, C).;true;true
3;;sametitle(A, B) :- haswordtitle(B, C), haswordauthor(D, C).;true;true
3;true;haswordtitle(A, C).;true;true
4;;sametitle(A, B) :- haswordtitle(B, C), haswordauthor(D, C).;true;true
4;true;haswordtitle(A, C).;true;true
5;;sametitle(A, B) :- haswordtitle(B, C), haswordauthor(D, C).;true;true
5;true;haswordtitle(A, C).;true;true
6;;sametitle(A, B) :- haswordtitle(B, C), haswordauthor(D, C).;true;true
6;true;haswordtitle(A, C).;true;true
7;;sametitle(A, B) :- haswordtitle(B, C), haswordauthor(D, C).;true;true
7;true;haswordtitle(A, C).;true;true
8;;sametitle(A, B) :- haswordtitle(B, C), haswordauthor(D, C).;true;true
8;true;haswordtitle(A, C).;true;true
9;;sametitle(A, B) :- haswordtitle(A, C), haswordauthor(D, C).;true;true
9;true;haswordtitle(B, C).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordauthor(D, C) )
%   then if ( haswordtitle(B, C) )
%   | then return 0.8581489350995118;  // std dev = 1.46e-07, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | else return 0.088918165868743;  // std dev = 0.421, 13.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=3 */
%   else if ( haswordtitle(B, E), haswordauthor(F, E) )
%   | then return 0.088918165868743;  // std dev = 0.421, 13.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=3 */
%   | else return 0.5180128806777413;  // std dev = 0.474, 147.000 (wgt'ed) examples reached here.  /* #neg=50 #pos=97 */
WILL Produced-Tree #2
% FOR sametitle(A, B):
%   if ( haswordtitle(B, C), haswordauthor(D, C) )
%   then if ( haswordtitle(A, C) )
%   | then return 0.7194734122109545;  // std dev = 0.000, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | else return 0.07774578121441031;  // std dev = 0.421, 13.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=3 */
%   else if ( haswordtitle(A, E), haswordauthor(F, E) )
%   | then return 0.07774578121441031;  // std dev = 0.421, 13.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=3 */
%   | else return 0.4426517838203286;  // std dev = 0.474, 147.000 (wgt'ed) examples reached here.  /* #neg=50 #pos=97 */
WILL Produced-Tree #3
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordauthor(D, C) )
%   then if ( haswordtitle(B, C) )
%   | then return 0.5553664367462846;  // std dev = 0.000, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | else return 0.06739536297660921;  // std dev = 0.421, 13.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=3 */
%   else if ( haswordtitle(B, E), haswordauthor(F, E) )
%   | then return 0.06739536297660921;  // std dev = 0.421, 13.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=3 */
%   | else return 0.35818915709203447;  // std dev = 0.474, 147.000 (wgt'ed) examples reached here.  /* #neg=50 #pos=97 */
WILL Produced-Tree #4
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordauthor(D, C) )
%   then if ( haswordtitle(B, C) )
%   | then return 0.41751358415831;  // std dev = 0.000, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | else return 0.0579733820773872;  // std dev = 0.421, 13.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=3 */
%   else return 0.2600148264126967;  // std dev = 0.474, 160.000 (wgt'ed) examples reached here.  /* #neg=60 #pos=100 */
WILL Produced-Tree #5
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordauthor(D, C) )
%   then if ( haswordtitle(B, C) )
%   | then return 0.3207118471601494;  // std dev = 0.000, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | else return 0.049528997355293175;  // std dev = 0.421, 13.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=3 */
%   else if ( haswordtitle(B, E), haswordauthor(F, E) )
%   | then return 0.01759983761955297;  // std dev = 0.421, 13.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=3 */
%   | else return 0.2149226064166222;  // std dev = 0.474, 147.000 (wgt'ed) examples reached here.  /* #neg=50 #pos=97 */
WILL Produced-Tree #6
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordauthor(D, C) )
%   then if ( haswordtitle(B, C) )
%   | then return 0.25517224256948956;  // std dev = 0.000, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | else return 0.04206293300387109;  // std dev = 0.421, 13.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=3 */
%   else if ( haswordtitle(B, E), haswordauthor(F, E) )
%   | then return 0.014632947695550798;  // std dev = 0.421, 13.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=3 */
%   | else return 0.16141612698718671;  // std dev = 0.474, 147.000 (wgt'ed) examples reached here.  /* #neg=50 #pos=97 */
WILL Produced-Tree #7
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordauthor(D, C) )
%   then if ( haswordtitle(B, C) )
%   | then return 0.2097577156325355;  // std dev = 2.11e-08, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | else return 0.03553879177151896;  // std dev = 0.421, 13.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=3 */
%   else return 0.11228385716133607;  // std dev = 0.471, 160.000 (wgt'ed) examples reached here.  /* #neg=60 #pos=100 */
WILL Produced-Tree #8
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordauthor(D, C) )
%   then if ( haswordtitle(B, C) )
%   | then return 0.17709649774527747;  // std dev = 0.000, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | else return 0.029894556746069525;  // std dev = 0.421, 13.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=3 */
%   else return 0.08517842466921859;  // std dev = 0.471, 160.000 (wgt'ed) examples reached here.  /* #neg=60 #pos=100 */
WILL Produced-Tree #9
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordauthor(D, C) )
%   then if ( haswordtitle(B, C) )
%   | then return 0.15274385809367083;  // std dev = 0.000, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | else return 0.025052826506284376;  // std dev = 0.421, 13.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=3 */
%   else if ( haswordtitle(B, E), haswordauthor(F, E) )
%   | then return -0.023450735160250237;  // std dev = 0.421, 13.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=3 */
%   | else return 0.07259913033148854;  // std dev = 0.474, 147.000 (wgt'ed) examples reached here.  /* #neg=50 #pos=97 */
WILL Produced-Tree #10
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordauthor(D, C) )
%   then if ( haswordtitle(B, C) )
%   | then return 0.13400703000801117;  // std dev = 0.000, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | else return 0.020929078465113212;  // std dev = 0.421, 13.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=3 */
%   else if ( haswordtitle(B, E), haswordauthor(F, E) )
%   | then return -0.019030339787923893;  // std dev = 0.421, 13.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=3 */
%   | else return 0.055120609642470134;  // std dev = 0.474, 147.000 (wgt'ed) examples reached here.  /* #neg=50 #pos=97 */


Results
   AUC ROC   = 0.746149
   AUC PR    = 0.695718
   CLL	      = -0.60516
   Precision = 0.580541 at threshold = 0.5
   Recall    = 0.943761
   F1        = 0.718876


Total learning time: 10.10010290145874 seconds
Total inference time: 2.281 seconds
AUC ROC: 0.746149


Results scoring model
   AUC ROC   = 0.691584
   AUC PR    = 0.815016
   CLL	      = -0.563665
   Precision = 0.710983 at threshold = 0.5
   Recall    = 0.953488
   F1        = 0.81457


Total scoring time: 1.32 seconds
Refined model CLL: -0.563665


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.746149
   AUC PR    = 0.695718
   CLL	      = -0.60516
   Precision = 0.580541 at threshold = 0.5
   Recall    = 0.943761
   F1        = 0.718876


Total learning time: 21.974815771102904 seconds
Total inference time: 2.281 seconds
AUC ROC: 0.746149
Total revision time: 21.974815771102904
Best scored revision CLL: -0.563665


Dataset: 6_imdb_cora, Fold: 4, Type: Transfer (trRDN-B), Time: 02:34:23
{'AUC ROC': 0.746149, 'AUC PR': 0.695718, 'CLL': -0.60516, 'Precision': [0.580541, 0.5], 'Recall': 0.943761, 'F1': 0.718876, 'Learning time': 21.974815771102904, 'Inference time': 2.281, 'parameter': {'AUC ROC': 0.746454, 'AUC PR': 0.6958, 'CLL': -0.610273, 'Precision': [0.580541, 0.5], 'Recall': 0.943761, 'F1': 0.718876, 'Learning time': 9.352712869644165, 'Inference time': 2.347}}


WILL Produced-Tree #1
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordauthor(D, C) )
%   then if ( haswordtitle(B, C) )
%   | then return 0.8581489350995118;  // std dev = 1.46e-07, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | else return 0.088918165868743;  // std dev = 0.421, 13.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=3 */
%   else if ( haswordtitle(B, E), haswordauthor(F, E) )
%   | then return 0.088918165868743;  // std dev = 0.421, 13.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=3 */
%   | else return 0.5180128806777413;  // std dev = 0.474, 147.000 (wgt'ed) examples reached here.  /* #neg=50 #pos=97 */
WILL Produced-Tree #2
% FOR sametitle(A, B):
%   if ( haswordtitle(B, C), haswordauthor(D, C) )
%   then if ( haswordtitle(A, C) )
%   | then return 0.7194734122109545;  // std dev = 0.000, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | else return 0.07774578121441031;  // std dev = 0.421, 13.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=3 */
%   else return 0.41300317110859763;  // std dev = 0.480, 160.000 (wgt'ed) examples reached here.  /* #neg=60 #pos=100 */
WILL Produced-Tree #3
% FOR sametitle(A, B):
%   return 0;  // std dev = 0.455, 199.000 (wgt'ed) examples reached here.  /* #neg=70 #pos=129 */
WILL Produced-Tree #4
% FOR sametitle(A, B):
%   if ( haswordtitle(B, C), haswordauthor(D, C) )
%   then if ( haswordtitle(A, C) )
%   | then return 0.5553664367462846;  // std dev = 0.000, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | else return 0.06739536297660921;  // std dev = 0.421, 13.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=3 */
%   else return 0.3361136333240151;  // std dev = 0.479, 160.000 (wgt'ed) examples reached here.  /* #neg=60 #pos=100 */
WILL Produced-Tree #5
% FOR sametitle(A, B):
%   if ( haswordtitle(B, C), haswordauthor(D, C) )
%   then if ( haswordtitle(A, C) )
%   | then return 0.41751358415831;  // std dev = 0.000, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | else return 0.0579733820773872;  // std dev = 0.421, 13.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=3 */
%   else return 0.2627380412904167;  // std dev = 0.479, 160.000 (wgt'ed) examples reached here.  /* #neg=60 #pos=100 */
WILL Produced-Tree #6
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordauthor(D, C) )
%   then if ( haswordtitle(B, C) )
%   | then return 0.3207118471601494;  // std dev = 0.000, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | else return -0.1012144059602274;  // std dev = 0.421, 13.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=3 */
%   else if ( haswordtitle(B, E), haswordauthor(F, E) )
%   | then return 0.049528997355293175;  // std dev = 0.421, 13.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=3 */
%   | else return 0.22698932323122395;  // std dev = 0.474, 147.000 (wgt'ed) examples reached here.  /* #neg=50 #pos=97 */
WILL Produced-Tree #7
% FOR sametitle(A, B):
%   return 0;  // std dev = 0.441, 199.000 (wgt'ed) examples reached here.  /* #neg=70 #pos=129 */
WILL Produced-Tree #8
% FOR sametitle(A, B):
%   if ( haswordtitle(B, C), haswordauthor(D, C) )
%   then if ( haswordtitle(A, C) )
%   | then return 0.25517224256948956;  // std dev = 0.000, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | else return 0.04206293300387109;  // std dev = 0.421, 13.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=3 */
%   else return 0.15035095711129476;  // std dev = 0.475, 160.000 (wgt'ed) examples reached here.  /* #neg=60 #pos=100 */
WILL Produced-Tree #9
% FOR sametitle(A, B):
%   if ( haswordtitle(B, C), haswordauthor(D, C) )
%   then if ( haswordtitle(A, C) )
%   | then return 0.2097577156325355;  // std dev = 2.11e-08, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | else return 0.03553879177151896;  // std dev = 0.421, 13.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=3 */
%   else if ( haswordtitle(A, E), haswordauthor(F, E) )
%   | then return -0.11219992701744881;  // std dev = 0.421, 13.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=3 */
%   | else return 0.13308758528226222;  // std dev = 0.474, 147.000 (wgt'ed) examples reached here.  /* #neg=50 #pos=97 */
WILL Produced-Tree #10
% FOR sametitle(A, B):
%   if ( haswordtitle(B, C), haswordauthor(D, C) )
%   then if ( haswordtitle(A, C) )
%   | then return 0.17709649774527747;  // std dev = 0.000, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | else return 0.029894556746069525;  // std dev = 0.421, 13.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=3 */
%   else return 0.08484653717140936;  // std dev = 0.472, 160.000 (wgt'ed) examples reached here.  /* #neg=60 #pos=100 */


Results
   AUC ROC   = 0.746454
   AUC PR    = 0.6958
   CLL	      = -0.59909
   Precision = 0.580541 at threshold = 0.5
   Recall    = 0.943761
   F1        = 0.718876


Total learning time: 8.585015058517456 seconds
Total inference time: 2.264 seconds
AUC ROC: 0.746454


Dataset: 6_imdb_cora, Fold: 4, Type: Scratch (RDN-B), Time: 02:34:35
{'AUC ROC': 0.746454, 'AUC PR': 0.6958, 'CLL': -0.59909, 'Precision': [0.580541, 0.5], 'Recall': 0.943761, 'F1': 0.718876, 'Learning time': 8.585015058517456, 'Inference time': 2.264}


Starting fold 5

Target train facts examples: 8644
Target train pos examples: 154
Target train neg examples: 148

Target test facts examples: 33914
Target test pos  examples: 544
Target test neg examples: 568

******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


WILL Produced-Tree #1
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordauthor(D, C) )
%   then if ( haswordtitle(B, C) )
%   | then return 0.8248156017661792;  // std dev = 0.180, 60.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=58 */
%   | else if ( author(E, D), title(E, B) )
%   | | then return 0.5248156017661788;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return -0.04185106490048778;  // std dev = 0.300, 10.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=1 */
%   else if ( haswordtitle(B, F), haswordauthor(G, F) )
%   | then if ( author(H, G), title(H, A) )
%   | | then return 0.5248156017661788;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return -0.016851064900487787;  // std dev = 0.331, 8.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */
%   | else return 0.27099297179675785;  // std dev = 0.492, 218.000 (wgt'ed) examples reached here.  /* #neg=128 #pos=90 */
WILL Produced-Tree #2
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordauthor(D, C) )
%   then if ( haswordtitle(B, C) )
%   | then return 0.6928183180467428;  // std dev = 0.180, 60.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=58 */
%   | else if ( author(E, D), title(E, B) )
%   | | then return 0.448295606241962;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return -0.03683251744007497;  // std dev = 0.300, 10.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=1 */
%   else if ( haswordtitle(B, F), haswordauthor(G, F) )
%   | then if ( author(H, G), title(H, A) )
%   | | then return 0.448295606241962;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return -0.014812149378556561;  // std dev = 0.331, 8.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */
%   | else return 0.23470502083103983;  // std dev = 0.492, 218.000 (wgt'ed) examples reached here.  /* #neg=128 #pos=90 */
WILL Produced-Tree #3
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordauthor(D, C) )
%   then if ( haswordtitle(B, C) )
%   | then return 0.5367928709789446;  // std dev = 0.180, 60.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=58 */
%   | else if ( author(E, D), title(E, B) )
%   | | then return 0.36236334632262296;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return -0.03254015317273094;  // std dev = 0.300, 10.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=1 */
%   else return 0.19251266342706994;  // std dev = 0.489, 229.000 (wgt'ed) examples reached here.  /* #neg=136 #pos=93 */
WILL Produced-Tree #4
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordauthor(D, C) )
%   then if ( haswordtitle(B, C) )
%   | then return 0.4034008832853693;  // std dev = 0.180, 60.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=58 */
%   | else if ( author(E, D), title(E, B) )
%   | | then return 0.2807538536965855;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return -0.028843434243526523;  // std dev = 0.300, 10.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=1 */
%   else if ( haswordtitle(B, F), haswordauthor(G, F) )
%   | then if ( author(H, G), title(H, A) )
%   | | then return 0.32014773942760505;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return -0.037580680410143716;  // std dev = 0.331, 8.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */
%   | else return 0.16343926129566083;  // std dev = 0.492, 218.000 (wgt'ed) examples reached here.  /* #neg=128 #pos=90 */
WILL Produced-Tree #5
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordauthor(D, C) )
%   then if ( haswordtitle(B, C) )
%   | then return 0.30789442979240567;  // std dev = 0.180, 60.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=58 */
%   | else if ( author(E, D), title(E, B) )
%   | | then return 0.21248070121827137;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return -0.025640477399664095;  // std dev = 0.300, 10.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=1 */
%   else return 0.12735618213405805;  // std dev = 0.488, 229.000 (wgt'ed) examples reached here.  /* #neg=136 #pos=93 */
WILL Produced-Tree #6
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordauthor(D, C) )
%   then if ( haswordtitle(B, C) )
%   | then return 0.24240066496454685;  // std dev = 0.180, 60.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=58 */
%   | else if ( author(E, D), title(E, B) )
%   | | then return 0.1594898822817116;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return -0.022850675562834787;  // std dev = 0.300, 10.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=1 */
%   else return 0.10115445227605875;  // std dev = 0.488, 229.000 (wgt'ed) examples reached here.  /* #neg=136 #pos=93 */
WILL Produced-Tree #7
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordauthor(D, C) )
%   then if ( haswordtitle(B, C) )
%   | then return 0.19670004057326665;  // std dev = 0.180, 60.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=58 */
%   | else if ( author(E, D), title(E, B) )
%   | | then return 0.11975529938157474;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return -0.02040946845150366;  // std dev = 0.300, 10.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=1 */
%   else if ( haswordtitle(B, F), haswordauthor(G, F) )
%   | then if ( author(H, G), title(H, A) )
%   | | then return 0.1880829938555563;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return -0.06527556895852658;  // std dev = 0.331, 8.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */
%   | else return 0.0832097194655126;  // std dev = 0.492, 218.000 (wgt'ed) examples reached here.  /* #neg=128 #pos=90 */
WILL Produced-Tree #8
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordauthor(D, C) )
%   then if ( haswordtitle(B, C) )
%   | then return 0.16371858628713193;  // std dev = 0.180, 60.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=58 */
%   | else if ( author(E, D), title(E, B) )
%   | | then return 0.09028081829440963;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return -0.018264572141688296;  // std dev = 0.300, 10.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=1 */
%   else return 0.061379672696846604;  // std dev = 0.488, 229.000 (wgt'ed) examples reached here.  /* #neg=136 #pos=93 */
WILL Produced-Tree #9
% FOR sametitle(A, B):
%   return 0;  // std dev = 0.440, 302.000 (wgt'ed) examples reached here.  /* #neg=148 #pos=154 */
WILL Produced-Tree #10
% FOR sametitle(A, B):
%   return 0;  // std dev = 0.440, 302.000 (wgt'ed) examples reached here.  /* #neg=148 #pos=154 */


Results
   AUC ROC   = 0.73954
   AUC PR    = 0.695161
   CLL	      = -0.614958
   Precision = 0.759542 at threshold = 0.5
   Recall    = 0.365809
   F1        = 0.493797


Total learning time: 15.450796127319336 seconds
Total inference time: 3.274 seconds
AUC ROC: 0.73954


Results scoring model
   AUC ROC   = 0.716172
   AUC PR    = 0.772847
   CLL	      = -0.57549
   Precision = 0.939394 at threshold = 0.5
   Recall    = 0.402597
   F1        = 0.563636


Total scoring time: 1.329 seconds
Parameter learned model CLL: -0.57549


Structure after Parameter Learning
[['sametitle(A, B)', {'': 'haswordtitle(A, C), haswordauthor(D, C)', 'true': 'haswordtitle(B, C)', 'true,false': 'author(E, D), title(E, B)', 'false': 'haswordtitle(B, F), haswordauthor(G, F)', 'false,true': 'author(H, G), title(H, A)'}, {'true,true': [0.18, 2, 58], 'true,false,true': [0.816, 1, 2], 'true,false,false': [0.3, 9, 1], 'false,true,true': [0.816, 1, 2], 'false,true,false': [0.331, 7, 1], 'false,false': [0.492, 128, 90]}], ['sametitle(A, B)', {'': 'haswordtitle(A, C), haswordauthor(D, C)', 'true': 'haswordtitle(B, C)', 'true,false': 'author(E, D), title(E, B)', 'false': 'haswordtitle(B, F), haswordauthor(G, F)', 'false,true': 'author(H, G), title(H, A)'}, {'true,true': [0.18, 2, 58], 'true,false,true': [0.816, 1, 2], 'true,false,false': [0.3, 9, 1], 'false,true,true': [0.816, 1, 2], 'false,true,false': [0.331, 7, 1], 'false,false': [0.492, 128, 90]}], ['sametitle(A, B)', {'': 'haswordtitle(A, C), haswordauthor(D, C)', 'true': 'haswordtitle(B, C)', 'true,false': 'author(E, D), title(E, B)'}, {'true,true': [0.18, 2, 58], 'true,false,true': [0.816, 1, 2], 'true,false,false': [0.3, 9, 1], 'false': [0.489, 136, 93]}], ['sametitle(A, B)', {'': 'haswordtitle(A, C), haswordauthor(D, C)', 'true': 'haswordtitle(B, C)', 'true,false': 'author(E, D), title(E, B)', 'false': 'haswordtitle(B, F), haswordauthor(G, F)', 'false,true': 'author(H, G), title(H, A)'}, {'true,true': [0.18, 2, 58], 'true,false,true': [0.816, 1, 2], 'true,false,false': [0.3, 9, 1], 'false,true,true': [0.816, 1, 2], 'false,true,false': [0.331, 7, 1], 'false,false': [0.492, 128, 90]}], ['sametitle(A, B)', {'': 'haswordtitle(A, C), haswordauthor(D, C)', 'true': 'haswordtitle(B, C)', 'true,false': 'author(E, D), title(E, B)'}, {'true,true': [0.18, 2, 58], 'true,false,true': [0.816, 1, 2], 'true,false,false': [0.3, 9, 1], 'false': [0.488, 136, 93]}], ['sametitle(A, B)', {'': 'haswordtitle(A, C), haswordauthor(D, C)', 'true': 'haswordtitle(B, C)', 'true,false': 'author(E, D), title(E, B)'}, {'true,true': [0.18, 2, 58], 'true,false,true': [0.816, 1, 2], 'true,false,false': [0.3, 9, 1], 'false': [0.488, 136, 93]}], ['sametitle(A, B)', {'': 'haswordtitle(A, C), haswordauthor(D, C)', 'true': 'haswordtitle(B, C)', 'true,false': 'author(E, D), title(E, B)', 'false': 'haswordtitle(B, F), haswordauthor(G, F)', 'false,true': 'author(H, G), title(H, A)'}, {'true,true': [0.18, 2, 58], 'true,false,true': [0.816, 1, 2], 'true,false,false': [0.3, 9, 1], 'false,true,true': [0.816, 1, 2], 'false,true,false': [0.331, 7, 1], 'false,false': [0.492, 128, 90]}], ['sametitle(A, B)', {'': 'haswordtitle(A, C), haswordauthor(D, C)', 'true': 'haswordtitle(B, C)', 'true,false': 'author(E, D), title(E, B)'}, {'true,true': [0.18, 2, 58], 'true,false,true': [0.816, 1, 2], 'true,false,false': [0.3, 9, 1], 'false': [0.488, 136, 93]}], ['sametitle(A, B)', {}, {}], ['sametitle(A, B)', {}, {}]]
[{'': [0.13736160630512223, 0.2411853320874907], 'false': [0.1983471074380164, 0.2424038380607709], 'false,true': [0.22222222222222224, 0.10937500000000004], 'true': [0.03222222222222181, 0.17751479289940816], 'true,false': [0.22222222222222224, 0.09000000000000005]}, {'': [0.11123233779573757, 0.24022975904226385], 'false': [0.18269077994144062, 0.24240383806076876], 'false,true': [0.2222222222222222, 0.10937499999999994], 'true': [0.03222222222222181, 0.16229080212002525], 'true,false': [0.2222222222222222, 0.08999999999999996]}, {'': [0.08634624456448779, 0.23937194366189915], 'true': [0.032222222222222464, 0.14819603481702354], 'true,false': [0.22222222222222224, 0.09]}, {'': [0.07002893926415042, 0.23920084099602745], 'false': [0.16553391958647962, 0.24240383806076984], 'false,true': [0.22222222222222224, 0.10937499999999994], 'true': [0.032222222222221604, 0.1375276987435672], 'true,false': [0.2222222222222222, 0.08999999999999998]}, {'': [0.06109721369649853, 0.23858245034680156], 'true': [0.03222222222222227, 0.13057821028318645], 'true,false': [0.2222222222222222, 0.08999999999999998]}, {'': [0.05628631303833902, 0.23847211614122626], 'true': [0.03222222222222208, 0.12641484637703249], 'true,false': [0.2222222222222222, 0.09]}, {'': [0.053562956837137646, 0.23839192814912324], 'false': [0.15288352732035174, 0.24240383806076746], 'false,true': [0.2222222222222222, 0.10937499999999996], 'true': [0.03222222222222211, 0.12400030491667272], 'true,false': [0.22222222222222224, 0.09000000000000001]}, {'': [0.05192248903411163, 0.23806168208266193], 'true': [0.03222222222222229, 0.12260431787109126], 'true,false': [0.22222222222222224, 0.08999999999999997]}, {}, {}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Pruning resulted in null theory

Candidate for revision
0;;sametitle(A, B) :- haswordtitle(A, C), haswordauthor(D, C).;true;true
0;true;haswordtitle(B, C).;true;true
0;true,false;author(E, D), title(E, B).;true;true
0;false;haswordtitle(B, F), haswordauthor(G, F).;true;true
0;false,true;author(H, G), title(H, A).;true;true
1;;sametitle(A, B) :- haswordtitle(A, C), haswordauthor(D, C).;true;true
1;true;haswordtitle(B, C).;true;true
1;true,false;author(E, D), title(E, B).;true;true
1;false;haswordtitle(B, F), haswordauthor(G, F).;true;true
1;false,true;author(H, G), title(H, A).;true;true
2;;sametitle(A, B) :- haswordtitle(A, C), haswordauthor(D, C).;true;true
2;true;haswordtitle(B, C).;true;true
2;true,false;author(E, D), title(E, B).;true;true
3;;sametitle(A, B) :- haswordtitle(A, C), haswordauthor(D, C).;true;true
3;true;haswordtitle(B, C).;true;true
3;true,false;author(E, D), title(E, B).;true;true
3;false;haswordtitle(B, F), haswordauthor(G, F).;true;true
3;false,true;author(H, G), title(H, A).;true;true
4;;sametitle(A, B) :- haswordtitle(A, C), haswordauthor(D, C).;true;true
4;true;haswordtitle(B, C).;true;true
4;true,false;author(E, D), title(E, B).;true;true
5;;sametitle(A, B) :- haswordtitle(A, C), haswordauthor(D, C).;true;true
5;true;haswordtitle(B, C).;true;true
5;true,false;author(E, D), title(E, B).;true;true
6;;sametitle(A, B) :- haswordtitle(A, C), haswordauthor(D, C).;true;true
6;true;haswordtitle(B, C).;true;true
6;true,false;author(E, D), title(E, B).;true;true
6;false;haswordtitle(B, F), haswordauthor(G, F).;true;true
6;false,true;author(H, G), title(H, A).;true;true
7;;sametitle(A, B) :- haswordtitle(A, C), haswordauthor(D, C).;true;true
7;true;haswordtitle(B, C).;true;true
7;true,false;author(E, D), title(E, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordauthor(D, C) )
%   then if ( haswordtitle(B, C) )
%   | then return 0.8248156017661792;  // std dev = 0.180, 60.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=58 */
%   | else if ( author(E, D), title(E, B) )
%   | | then return 0.5248156017661788;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return -0.04185106490048778;  // std dev = 0.300, 10.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=1 */
%   else if ( haswordtitle(B, F), haswordauthor(G, F) )
%   | then if ( author(H, G), title(H, A) )
%   | | then return 0.5248156017661788;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return -0.016851064900487787;  // std dev = 0.331, 8.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */
%   | else return 0.27099297179675785;  // std dev = 0.492, 218.000 (wgt'ed) examples reached here.  /* #neg=128 #pos=90 */
WILL Produced-Tree #2
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordauthor(D, C) )
%   then if ( haswordtitle(B, C) )
%   | then return 0.6928183180467428;  // std dev = 0.180, 60.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=58 */
%   | else if ( author(E, D), title(E, B) )
%   | | then return 0.448295606241962;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return -0.03683251744007497;  // std dev = 0.300, 10.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=1 */
%   else if ( haswordtitle(B, F), haswordauthor(G, F) )
%   | then if ( author(H, G), title(H, A) )
%   | | then return 0.448295606241962;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return -0.014812149378556561;  // std dev = 0.331, 8.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */
%   | else return 0.23470502083103983;  // std dev = 0.492, 218.000 (wgt'ed) examples reached here.  /* #neg=128 #pos=90 */
WILL Produced-Tree #3
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordauthor(D, C) )
%   then if ( haswordtitle(B, C) )
%   | then return 0.5367928709789446;  // std dev = 0.180, 60.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=58 */
%   | else if ( author(E, D), title(E, B) )
%   | | then return 0.36236334632262296;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return -0.03254015317273094;  // std dev = 0.300, 10.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=1 */
%   else return 0.19251266342706994;  // std dev = 0.489, 229.000 (wgt'ed) examples reached here.  /* #neg=136 #pos=93 */
WILL Produced-Tree #4
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordauthor(D, C) )
%   then if ( haswordtitle(B, C) )
%   | then return 0.4034008832853693;  // std dev = 0.180, 60.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=58 */
%   | else if ( author(E, D), title(E, B) )
%   | | then return 0.2807538536965855;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return -0.028843434243526523;  // std dev = 0.300, 10.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=1 */
%   else return 0.1584696800762259;  // std dev = 0.489, 229.000 (wgt'ed) examples reached here.  /* #neg=136 #pos=93 */
WILL Produced-Tree #5
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordauthor(D, C) )
%   then if ( haswordtitle(B, C) )
%   | then return 0.30789442979240567;  // std dev = 0.180, 60.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=58 */
%   | else if ( author(E, D), title(E, B) )
%   | | then return 0.21248070121827137;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return -0.025640477399664095;  // std dev = 0.300, 10.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=1 */
%   else return 0.12784954504974078;  // std dev = 0.489, 229.000 (wgt'ed) examples reached here.  /* #neg=136 #pos=93 */
WILL Produced-Tree #6
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordauthor(D, C) )
%   then if ( haswordtitle(B, C) )
%   | then return 0.24240066496454685;  // std dev = 0.180, 60.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=58 */
%   | else if ( author(E, D), title(E, B) )
%   | | then return 0.1594898822817116;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return -0.022850675562834787;  // std dev = 0.300, 10.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=1 */
%   else return 0.10152354592794474;  // std dev = 0.489, 229.000 (wgt'ed) examples reached here.  /* #neg=136 #pos=93 */
WILL Produced-Tree #7
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordauthor(D, C) )
%   then if ( haswordtitle(B, C) )
%   | then return 0.19670004057326665;  // std dev = 0.180, 60.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=58 */
%   | else if ( author(E, D), title(E, B) )
%   | | then return 0.11975529938157474;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return -0.02040946845150366;  // std dev = 0.300, 10.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=1 */
%   else return 0.07965768490087152;  // std dev = 0.489, 229.000 (wgt'ed) examples reached here.  /* #neg=136 #pos=93 */
WILL Produced-Tree #8
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordauthor(D, C) )
%   then if ( haswordtitle(B, C) )
%   | then return 0.16371858628713193;  // std dev = 0.180, 60.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=58 */
%   | else if ( author(E, D), title(E, B) )
%   | | then return 0.09028081829440963;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return -0.018264572141688296;  // std dev = 0.300, 10.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=1 */
%   else return 0.0619518755803252;  // std dev = 0.489, 229.000 (wgt'ed) examples reached here.  /* #neg=136 #pos=93 */
WILL Produced-Tree #9
% FOR sametitle(A, B):
%   return 0;  // std dev = 0.441, 302.000 (wgt'ed) examples reached here.  /* #neg=148 #pos=154 */
WILL Produced-Tree #10
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordauthor(D, C) )
%   then if ( haswordtitle(B, C) )
%   | then return 0.13909109340224876;  // std dev = 0.180, 60.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=58 */
%   | else if ( author(E, D), title(E, B) )
%   | | then return 0.06840311429118533;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return -0.01637321748135532;  // std dev = 0.300, 10.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=1 */
%   else if ( haswordtitle(B, F), haswordauthor(G, F) )
%   | then if ( author(H, G), title(H, A) )
%   | | then return 0.1928735776704719;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return -0.1229271540888457;  // std dev = 0.331, 8.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */
%   | else return 0.05214629019959998;  // std dev = 0.492, 218.000 (wgt'ed) examples reached here.  /* #neg=128 #pos=90 */


Results
   AUC ROC   = 0.73954
   AUC PR    = 0.695161
   CLL	      = -0.614959
   Precision = 0.759542 at threshold = 0.5
   Recall    = 0.365809
   F1        = 0.493797


Total learning time: 16.584103107452393 seconds
Total inference time: 3.439 seconds
AUC ROC: 0.73954


Results scoring model
   AUC ROC   = 0.716172
   AUC PR    = 0.772847
   CLL	      = -0.57097
   Precision = 0.939394 at threshold = 0.5
   Recall    = 0.402597
   F1        = 0.563636


Total scoring time: 1.391 seconds
Refined model CLL: -0.57097


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.73954
   AUC PR    = 0.695161
   CLL	      = -0.614959
   Precision = 0.759542 at threshold = 0.5
   Recall    = 0.365809
   F1        = 0.493797


Total learning time: 34.75489923477173 seconds
Total inference time: 3.439 seconds
AUC ROC: 0.73954
Total revision time: 34.75489923477173
Best scored revision CLL: -0.57097


Dataset: 6_imdb_cora, Fold: 5, Type: Transfer (trRDN-B), Time: 02:35:20
{'AUC ROC': 0.73954, 'AUC PR': 0.695161, 'CLL': -0.614959, 'Precision': [0.759542, 0.5], 'Recall': 0.365809, 'F1': 0.493797, 'Learning time': 34.75489923477173, 'Inference time': 3.439, 'parameter': {'AUC ROC': 0.73954, 'AUC PR': 0.695161, 'CLL': -0.614958, 'Precision': [0.759542, 0.5], 'Recall': 0.365809, 'F1': 0.493797, 'Learning time': 15.450796127319336, 'Inference time': 3.274}}


WILL Produced-Tree #1
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordauthor(D, C) )
%   then if ( haswordtitle(B, C) )
%   | then return 0.8248156017661792;  // std dev = 0.180, 60.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=58 */
%   | else if ( author(E, D), title(E, B) )
%   | | then return 0.5248156017661788;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return -0.04185106490048778;  // std dev = 0.300, 10.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=1 */
%   else return 0.2642624722174136;  // std dev = 0.491, 229.000 (wgt'ed) examples reached here.  /* #neg=136 #pos=93 */
WILL Produced-Tree #2
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordauthor(D, C) )
%   then if ( haswordtitle(B, C) )
%   | then return 0.6928183180467428;  // std dev = 0.180, 60.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=58 */
%   | else if ( author(E, D), title(E, B) )
%   | | then return 0.448295606241962;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return -0.03683251744007497;  // std dev = 0.300, 10.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=1 */
%   else return 0.22895776974583762;  // std dev = 0.491, 229.000 (wgt'ed) examples reached here.  /* #neg=136 #pos=93 */
WILL Produced-Tree #3
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordauthor(D, C) )
%   then if ( haswordtitle(B, C) )
%   | then return 0.5367928709789446;  // std dev = 0.180, 60.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=58 */
%   | else if ( author(E, D), title(E, B) )
%   | | then return 0.36236334632262296;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return -0.03254015317273094;  // std dev = 0.300, 10.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=1 */
%   else return 0.19308733108125853;  // std dev = 0.491, 229.000 (wgt'ed) examples reached here.  /* #neg=136 #pos=93 */
WILL Produced-Tree #4
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordauthor(D, C) )
%   then if ( haswordtitle(B, C) )
%   | then return 0.4034008832853693;  // std dev = 0.180, 60.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=58 */
%   | else if ( author(E, D), title(E, B) )
%   | | then return 0.2807538536965855;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return -0.028843434243526523;  // std dev = 0.300, 10.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=1 */
%   else return 0.1589303900322742;  // std dev = 0.491, 229.000 (wgt'ed) examples reached here.  /* #neg=136 #pos=93 */
WILL Produced-Tree #5
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordauthor(D, C) )
%   then if ( haswordtitle(B, C) )
%   | then return 0.30789442979240567;  // std dev = 0.180, 60.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=58 */
%   | else if ( author(E, D), title(E, B) )
%   | | then return 0.21248070121827137;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return -0.025640477399664095;  // std dev = 0.300, 10.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=1 */
%   else return 0.12818539008696142;  // std dev = 0.491, 229.000 (wgt'ed) examples reached here.  /* #neg=136 #pos=93 */
WILL Produced-Tree #6
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordauthor(D, C) )
%   then if ( haswordtitle(B, C) )
%   | then return 0.24240066496454685;  // std dev = 0.180, 60.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=58 */
%   | else if ( author(E, D), title(E, B) )
%   | | then return 0.1594898822817116;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return -0.022850675562834787;  // std dev = 0.300, 10.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=1 */
%   else return 0.10174413073104283;  // std dev = 0.491, 229.000 (wgt'ed) examples reached here.  /* #neg=136 #pos=93 */
WILL Produced-Tree #7
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordauthor(D, C) )
%   then if ( haswordtitle(B, C) )
%   | then return 0.19670004057326665;  // std dev = 0.180, 60.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=58 */
%   | else if ( author(E, D), title(E, B) )
%   | | then return 0.11975529938157474;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return -0.02040946845150366;  // std dev = 0.300, 10.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=1 */
%   else if ( haswordtitle(B, F), haswordauthor(G, F) )
%   | then if ( author(H, G), title(H, A) )
%   | | then return 0.3403369477616513;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return -0.20132971890501536;  // std dev = 0.331, 8.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */
%   | else return 0.08651431779223273;  // std dev = 0.492, 218.000 (wgt'ed) examples reached here.  /* #neg=128 #pos=90 */
WILL Produced-Tree #8
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordauthor(D, C) )
%   then if ( haswordtitle(B, C) )
%   | then return 0.16371858628713193;  // std dev = 0.180, 60.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=58 */
%   | else if ( author(E, D), title(E, B) )
%   | | then return 0.09028081829440963;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return -0.018264572141688296;  // std dev = 0.300, 10.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=1 */
%   else if ( haswordtitle(B, F), haswordauthor(G, F) )
%   | then if ( author(H, G), title(H, A) )
%   | | then return 0.26162358681137904;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return -0.1587039620445273;  // std dev = 0.331, 8.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */
%   | else return 0.06721722485231206;  // std dev = 0.492, 218.000 (wgt'ed) examples reached here.  /* #neg=128 #pos=90 */
WILL Produced-Tree #9
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordauthor(D, C) )
%   then if ( haswordtitle(B, C) )
%   | then return 0.13909109340224876;  // std dev = 0.180, 60.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=58 */
%   | else if ( author(E, D), title(E, B) )
%   | | then return 0.06840311429118533;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return -0.01637321748135532;  // std dev = 0.300, 10.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=1 */
%   else return 0.04749822528242833;  // std dev = 0.489, 229.000 (wgt'ed) examples reached here.  /* #neg=136 #pos=93 */
WILL Produced-Tree #10
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordauthor(D, C) )
%   then if ( haswordtitle(B, C) )
%   | then return 0.12013771168374343;  // std dev = 0.180, 60.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=58 */
%   | else if ( author(E, D), title(E, B) )
%   | | then return 0.052078905701252655;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return -0.014700098059752786;  // std dev = 0.300, 10.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=1 */
%   else return 0.03652846986103761;  // std dev = 0.489, 229.000 (wgt'ed) examples reached here.  /* #neg=136 #pos=93 */


Results
   AUC ROC   = 0.73954
   AUC PR    = 0.695161
   CLL	      = -0.617678
   Precision = 0.762646 at threshold = 0.5
   Recall    = 0.360294
   F1        = 0.489388


Total learning time: 16.136638879776 seconds
Total inference time: 3.379 seconds
AUC ROC: 0.73954


Dataset: 6_imdb_cora, Fold: 5, Type: Scratch (RDN-B), Time: 02:35:40
{'AUC ROC': 0.73954, 'AUC PR': 0.695161, 'CLL': -0.617678, 'Precision': [0.762646, 0.5], 'Recall': 0.360294, 'F1': 0.489388, 'Learning time': 16.136638879776, 'Inference time': 3.379}


Starting fold 1

Target train facts examples: 7463
Target train pos examples: 162
Target train neg examples: 236

Target test facts examples: 35095
Target test pos  examples: 536
Target test neg examples: 480

******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


WILL Produced-Tree #1
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordauthor(D, C) )
%   then if ( haswordtitle(B, C) )
%   | then return 0.7369368138873914;  // std dev = 0.326, 66.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=58 */
%   | else return 0.003310225422092987;  // std dev = 0.352, 62.000 (wgt'ed) examples reached here.  /* #neg=53 #pos=9 */
%   else return 0.21000078695136187;  // std dev = 0.478, 270.000 (wgt'ed) examples reached here.  /* #neg=175 #pos=95 */
WILL Produced-Tree #2
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordauthor(D, C) )
%   then if ( haswordtitle(B, C) )
%   | then return 0.6220633676283396;  // std dev = 0.326, 66.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=58 */
%   | else if ( author(E, D), title(E, B) )
%   | | then return 0.23274550562375218;  // std dev = 0.484, 8.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=3 */
%   | | else return -0.031143383265136704;  // std dev = 0.314, 54.000 (wgt'ed) examples reached here.  /* #neg=48 #pos=6 */
%   else if ( haswordtitle(B, F), haswordauthor(G, F) )
%   | then if ( author(H, G), title(H, A) )
%   | | then return 0.43061599234741055;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | else return -0.05173694882906012;  // std dev = 0.322, 51.000 (wgt'ed) examples reached here.  /* #neg=45 #pos=6 */
%   | else return 0.23248515122591415;  // std dev = 0.490, 214.000 (wgt'ed) examples reached here.  /* #neg=128 #pos=86 */
WILL Produced-Tree #3
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordauthor(D, C) )
%   then if ( haswordtitle(B, C) )
%   | then return 0.48728512046144257;  // std dev = 0.326, 66.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=58 */
%   | else if ( author(E, D), title(E, B) )
%   | | then return 0.201918601559637;  // std dev = 0.484, 8.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=3 */
%   | | else return -0.027385497018114976;  // std dev = 0.314, 54.000 (wgt'ed) examples reached here.  /* #neg=48 #pos=6 */
%   else if ( haswordtitle(B, F), haswordauthor(G, F) )
%   | then if ( author(H, G), title(H, A) )
%   | | then return 0.36122062476593364;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | else return -0.04458190234057452;  // std dev = 0.322, 51.000 (wgt'ed) examples reached here.  /* #neg=45 #pos=6 */
%   | else return 0.19722452943661778;  // std dev = 0.490, 214.000 (wgt'ed) examples reached here.  /* #neg=128 #pos=86 */
WILL Produced-Tree #4
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordauthor(D, C) )
%   then if ( haswordtitle(B, C) )
%   | then return 0.3672186186501392;  // std dev = 0.326, 66.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=58 */
%   | else return 0.0010419022481831957;  // std dev = 0.347, 62.000 (wgt'ed) examples reached here.  /* #neg=53 #pos=9 */
%   else if ( haswordtitle(B, E), haswordauthor(F, E) )
%   | then if ( author(G, F), title(G, A) )
%   | | then return 0.289581305450505;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | else return -0.03861360559654551;  // std dev = 0.322, 51.000 (wgt'ed) examples reached here.  /* #neg=45 #pos=6 */
%   | else return 0.16325447928432651;  // std dev = 0.490, 214.000 (wgt'ed) examples reached here.  /* #neg=128 #pos=86 */
WILL Produced-Tree #5
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordvenue(D, C) )
%   then if ( title(E, A), venue(E, D) )
%   | then if ( samebib(E, F), title(F, B) )
%   | | then if ( venue(F, D) )
%   | | | then return 0.6381424512928835;  // std dev = 1.649, 107.000 (wgt'ed) examples reached here.  /* #pos=107 */
%   | | | else return 0.6181312862200993;  // std dev = 0.976, 27.000 (wgt'ed) examples reached here.  /* #pos=27 */
%   | | else return -0.20460692305579728;  // std dev = 0.184, 235.000 (wgt'ed) examples reached here.  /* #neg=227 #pos=8 */
%   | else if ( haswordtitle(A, G), haswordauthor(H, G) )
%   | | then if ( haswordtitle(B, G) )
%   | | | then return 0.39807224506280847;  // std dev = 2.11e-08, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.031283422840023785;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | | else return 0.7304752354810967;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( haswordtitle(B, I), haswordauthor(J, I) )
%   | then return 0.21496915555442916;  // std dev = 0.634, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | else return 0.2975459958272269;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
WILL Produced-Tree #6
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordvenue(D, C) )
%   then if ( title(E, A), venue(E, D) )
%   | then if ( samebib(E, F), title(F, B) )
%   | | then if ( venue(F, D) )
%   | | | then return 0.49969912519459136;  // std dev = 1.676, 107.000 (wgt'ed) examples reached here.  /* #pos=107 */
%   | | | else return 0.4897955908299502;  // std dev = 1.026, 27.000 (wgt'ed) examples reached here.  /* #pos=27 */
%   | | else return -0.17119745093388258;  // std dev = 0.182, 235.000 (wgt'ed) examples reached here.  /* #neg=227 #pos=8 */
%   | else if ( haswordtitle(A, G), haswordauthor(H, G) )
%   | | then if ( haswordtitle(B, G) )
%   | | | then return 0.30755472608314727;  // std dev = 1.05e-08, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.02757960827633836;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | | else return 0.5662481510606965;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( haswordtitle(B, I), haswordauthor(J, I) )
%   | then return 0.17158977960806832;  // std dev = 0.611, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | else return 0.2469719183226183;  // std dev = 0.842, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
WILL Produced-Tree #7
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordvenue(D, C) )
%   then if ( title(E, A), venue(E, D) )
%   | then if ( samebib(E, F), title(F, B) )
%   | | then if ( venue(F, D) )
%   | | | then return 0.38892642381361864;  // std dev = 1.516, 107.000 (wgt'ed) examples reached here.  /* #pos=107 */
%   | | | else return 0.38786862536279143;  // std dev = 0.965, 27.000 (wgt'ed) examples reached here.  /* #pos=27 */
%   | | else return -0.14595241394385813;  // std dev = 0.180, 235.000 (wgt'ed) examples reached here.  /* #neg=227 #pos=8 */
%   | else if ( haswordtitle(A, G), haswordauthor(H, G) )
%   | | then if ( haswordtitle(B, G) )
%   | | | then return 0.24617252978697307;  // std dev = 1.83e-08, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.024244186165560264;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | | else return 0.42563367443652067;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( haswordtitle(A, I), haswordauthor(J, I) )
%   | then return 0.1358267362492167;  // std dev = 0.603, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | else return 0.20172987511373155;  // std dev = 0.819, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
WILL Produced-Tree #8
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordvenue(D, C) )
%   then if ( title(E, A), venue(E, D) )
%   | then if ( samebib(E, F), title(F, B) )
%   | | then if ( venue(F, D) )
%   | | | then return 0.3082361052638508;  // std dev = 1.317, 107.000 (wgt'ed) examples reached here.  /* #pos=107 */
%   | | | else return 0.3120077295345379;  // std dev = 0.865, 27.000 (wgt'ed) examples reached here.  /* #pos=27 */
%   | | else return -0.12635567500278158;  // std dev = 0.179, 235.000 (wgt'ed) examples reached here.  /* #neg=227 #pos=8 */
%   | else if ( haswordtitle(A, G), haswordauthor(H, G) )
%   | | then if ( haswordtitle(B, G) )
%   | | | then return 0.20337970921485166;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.021257294468928132;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | | else return 0.32622211885216323;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( haswordtitle(B, I), haswordauthor(J, I) )
%   | then return 0.1068418256853522;  // std dev = 0.606, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | else return 0.16310362571961956;  // std dev = 0.799, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
WILL Produced-Tree #9
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordvenue(D, C) )
%   then if ( title(E, A), venue(E, D) )
%   | then if ( samebib(E, F), title(F, B) )
%   | | then if ( venue(F, D) )
%   | | | then return 0.2506788567983115;  // std dev = 1.137, 107.000 (wgt'ed) examples reached here.  /* #pos=107 */
%   | | | else return 0.25638690446265555;  // std dev = 0.765, 27.000 (wgt'ed) examples reached here.  /* #pos=27 */
%   | | else return -0.11078280912357925;  // std dev = 0.178, 235.000 (wgt'ed) examples reached here.  /* #neg=227 #pos=8 */
%   | else if ( haswordtitle(A, G), haswordauthor(H, G) )
%   | | then if ( haswordtitle(B, G) )
%   | | | then return 0.1724042028944549;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.018595785155404762;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | | else return 0.2589286963610681;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( haswordtitle(A, I), haswordauthor(J, I) )
%   | then return 0.08480310232609167;  // std dev = 0.609, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | else return 0.1293920979164922;  // std dev = 0.785, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
WILL Produced-Tree #10
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordauthor(D, C) )
%   then if ( haswordtitle(B, C) )
%   | then return 0.052380696169741066;  // std dev = 0.197, 66.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=58 */
%   | else if ( author(E, D), title(E, B) )
%   | | then return 0.2678203548713948;  // std dev = 0.484, 8.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=3 */
%   | | else return -0.019406539218069934;  // std dev = 0.200, 54.000 (wgt'ed) examples reached here.  /* #neg=48 #pos=6 */
%   else if ( haswordtitle(B, F), haswordauthor(G, F) )
%   | then if ( author(H, G), title(H, A) )
%   | | then return 0.3803104710210804;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | else return -0.027620027298852073;  // std dev = 0.166, 51.000 (wgt'ed) examples reached here.  /* #neg=45 #pos=6 */
%   | else return 0.014807969272939895;  // std dev = 0.199, 214.000 (wgt'ed) examples reached here.  /* #neg=128 #pos=86 */


Results
   AUC ROC   = 0.955605
   AUC PR    = 0.953536
   CLL	      = -0.25687
   Precision = 0.949275 at threshold = 0.5
   Recall    = 0.977612
   F1        = 0.963235


Total learning time: 389.08803606033325 seconds
Total inference time: 127.411 seconds
AUC ROC: 0.955605


Results scoring model
   AUC ROC   = 0.983574
   AUC PR    = 0.986812
   CLL	      = -0.214538
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.944444
   F1        = 0.971429


Total scoring time: 4.733 seconds
Parameter learned model CLL: -0.214538


Structure after Parameter Learning
[['sametitle(A, B)', {'': 'haswordtitle(A, C), haswordauthor(D, C)', 'true': 'haswordtitle(B, C)'}, {'true,true': [0.326, 8, 58], 'true,false': [0.352, 53, 9], 'false': [0.478, 175, 95]}], ['sametitle(A, B)', {'': 'haswordtitle(A, C), haswordauthor(D, C)', 'true': 'haswordtitle(B, C)', 'true,false': 'author(E, D), title(E, B)', 'false': 'haswordtitle(B, F), haswordauthor(G, F)', 'false,true': 'author(H, G), title(H, A)'}, {'true,true': [0.326, 8, 58], 'true,false,true': [0.484, 5, 3], 'true,false,false': [0.314, 48, 6], 'false,true,true': [1.095, 2, 3], 'false,true,false': [0.322, 45, 6], 'false,false': [0.49, 128, 86]}], ['sametitle(A, B)', {'': 'haswordtitle(A, C), haswordauthor(D, C)', 'true': 'haswordtitle(B, C)', 'true,false': 'author(E, D), title(E, B)', 'false': 'haswordtitle(B, F), haswordauthor(G, F)', 'false,true': 'author(H, G), title(H, A)'}, {'true,true': [0.326, 8, 58], 'true,false,true': [0.484, 5, 3], 'true,false,false': [0.314, 48, 6], 'false,true,true': [1.095, 2, 3], 'false,true,false': [0.322, 45, 6], 'false,false': [0.49, 128, 86]}], ['sametitle(A, B)', {'': 'haswordtitle(A, C), haswordauthor(D, C)', 'true': 'haswordtitle(B, C)', 'false': 'haswordtitle(B, E), haswordauthor(F, E)', 'false,true': 'author(G, F), title(G, A)'}, {'true,true': [0.326, 8, 58], 'true,false': [0.347, 53, 9], 'false,true,true': [1.095, 2, 3], 'false,true,false': [0.322, 45, 6], 'false,false': [0.49, 128, 86]}], ['sametitle(A, B)', {'': 'haswordtitle(A, C), haswordvenue(D, C)', 'true': 'title(E, A), venue(E, D)', 'true,true': 'samebib(E, F), title(F, B)', 'true,true,true': 'venue(F, D)', 'true,false': 'haswordtitle(A, G), haswordauthor(H, G)', 'true,false,true': 'haswordtitle(B, G)', 'false': 'haswordtitle(B, I), haswordauthor(J, I)'}, {'true,true,true,true': [1.649, 0, 107], 'true,true,true,false': [0.976, 0, 27], 'true,true,false': [0.184, 227, 8], 'true,false,true,true': [2.11e-08, 0, 9], 'true,false,true,false': [0.913, 5, 1], 'true,false,false': [0.0, 0, 4], 'false,true': [0.634, 2, 4], 'false,false': [0.866, 2, 2]}], ['sametitle(A, B)', {'': 'haswordtitle(A, C), haswordvenue(D, C)', 'true': 'title(E, A), venue(E, D)', 'true,true': 'samebib(E, F), title(F, B)', 'true,true,true': 'venue(F, D)', 'true,false': 'haswordtitle(A, G), haswordauthor(H, G)', 'true,false,true': 'haswordtitle(B, G)', 'false': 'haswordtitle(B, I), haswordauthor(J, I)'}, {'true,true,true,true': [1.676, 0, 107], 'true,true,true,false': [1.026, 0, 27], 'true,true,false': [0.182, 227, 8], 'true,false,true,true': [1.05e-08, 0, 9], 'true,false,true,false': [0.913, 5, 1], 'true,false,false': [0.0, 0, 4], 'false,true': [0.611, 2, 4], 'false,false': [0.842, 2, 2]}], ['sametitle(A, B)', {'': 'haswordtitle(A, C), haswordvenue(D, C)', 'true': 'title(E, A), venue(E, D)', 'true,true': 'samebib(E, F), title(F, B)', 'true,true,true': 'venue(F, D)', 'true,false': 'haswordtitle(A, G), haswordauthor(H, G)', 'true,false,true': 'haswordtitle(B, G)', 'false': 'haswordtitle(A, I), haswordauthor(J, I)'}, {'true,true,true,true': [1.516, 0, 107], 'true,true,true,false': [0.965, 0, 27], 'true,true,false': [0.18, 227, 8], 'true,false,true,true': [1.83e-08, 0, 9], 'true,false,true,false': [0.913, 5, 1], 'true,false,false': [0.0, 0, 4], 'false,true': [0.603, 2, 4], 'false,false': [0.819, 2, 2]}], ['sametitle(A, B)', {'': 'haswordtitle(A, C), haswordvenue(D, C)', 'true': 'title(E, A), venue(E, D)', 'true,true': 'samebib(E, F), title(F, B)', 'true,true,true': 'venue(F, D)', 'true,false': 'haswordtitle(A, G), haswordauthor(H, G)', 'true,false,true': 'haswordtitle(B, G)', 'false': 'haswordtitle(B, I), haswordauthor(J, I)'}, {'true,true,true,true': [1.317, 0, 107], 'true,true,true,false': [0.865, 0, 27], 'true,true,false': [0.179, 227, 8], 'true,false,true,true': [0.0, 0, 9], 'true,false,true,false': [0.913, 5, 1], 'true,false,false': [0.0, 0, 4], 'false,true': [0.606, 2, 4], 'false,false': [0.799, 2, 2]}], ['sametitle(A, B)', {'': 'haswordtitle(A, C), haswordvenue(D, C)', 'true': 'title(E, A), venue(E, D)', 'true,true': 'samebib(E, F), title(F, B)', 'true,true,true': 'venue(F, D)', 'true,false': 'haswordtitle(A, G), haswordauthor(H, G)', 'true,false,true': 'haswordtitle(B, G)', 'false': 'haswordtitle(A, I), haswordauthor(J, I)'}, {'true,true,true,true': [1.137, 0, 107], 'true,true,true,false': [0.765, 0, 27], 'true,true,false': [0.178, 227, 8], 'true,false,true,true': [0.0, 0, 9], 'true,false,true,false': [0.913, 5, 1], 'true,false,false': [0.0, 0, 4], 'false,true': [0.609, 2, 4], 'false,false': [0.785, 2, 2]}], ['sametitle(A, B)', {'': 'haswordtitle(A, C), haswordauthor(D, C)', 'true': 'haswordtitle(B, C)', 'true,false': 'author(E, D), title(E, B)', 'false': 'haswordtitle(B, F), haswordauthor(G, F)', 'false,true': 'author(H, G), title(H, A)'}, {'true,true': [0.197, 8, 58], 'true,false,true': [0.484, 5, 3], 'true,false,false': [0.2, 48, 6], 'false,true,true': [1.095, 2, 3], 'false,true,false': [0.166, 45, 6], 'false,false': [0.199, 128, 86]}]]
[{'': [0.24945068359374953, 0.22805212620027596], 'true': [0.10651974288337872, 0.12408949011446431]}, {'': [0.21077521176750943, 0.2280521262002774], 'false': [0.1348852040816328, 0.24037033802078614], 'true': [0.10651974288338104, 0.12408949011446414], 'false,true': [0.24000000000000013, 0.1038062283737026], 'true,false': [0.234375, 0.09876543209876548]}, {'': [0.172870514066648, 0.22429252333587166], 'false': [0.1293567887250738, 0.24037033802078853], 'true': [0.10651974288337995, 0.12217257709273506], 'false,true': [0.24, 0.10380622837370247], 'true,false': [0.23437499999999994, 0.09876543209876511]}, {'': [0.1468029429356034, 0.22127990930102703], 'false': [0.12472484778149749, 0.2403703380207876], 'true': [0.10651974288337966, 0.1205472811209754], 'false,true': [0.24000000000000005, 0.10380622837370267]}, {'': [0.1929789046878023, 0.11683972457579284], 'true': [0.1942640314724993, 0.10750342107836747], 'true,true': [0.027468039175040974, 0.03392105893136835], 'false': [0.06705348277502712, 0.18742772654727785], 'true,false': [0.08784372518137415, 0.0], 'true,false,true': [4.9343245538895844e-17, 0.1388888888888889], 'true,true,true': [0.02541572003902914, 0.035281544198860704]}, {'': [0.1343098166244368, 0.10957883243873912], 'true': [0.13503045101903588, 0.08154934758297018], 'true,true': [0.028839704822143746, 0.03310089978620416], 'false': [0.062140155776833385, 0.17732736732928991], 'true,false': [0.07436821153738035, 0.0], 'true,false,true': [1.2335811384723961e-17, 0.13888888888888892], 'true,true,true': [0.02625082155438838, 0.039021035721410725]}, {'': [0.09534148361735671, 0.1045296226025855], 'false': [0.060681063475123594, 0.1676965270664611], 'true': [0.09555214432568322, 0.06514986973999498], 'true,true': [0.02409231760177255, 0.03248852041129399], 'true,false': [0.06737608108416607, 0.0], 'true,false,true': [3.700743415417188e-17, 0.13888888888888887], 'true,true,true': [0.021467323578050226, 0.03449417821578883]}, {'': [0.07116749073988406, 0.10122885751257629], 'false': [0.06117270757901363, 0.15941384832706276], 'true': [0.07096261250469849, 0.05650905999793231], 'true,true': [0.018526374045670452, 0.032035401290458204], 'true,false': [0.06351601330424823, 0.0], 'true,false,true': [-3.0839528461809905e-17, 0.13888888888888887], 'true,true,true': [0.01619832726937616, 0.027740978308026867]}, {'': [0.056192344966701696, 0.09919959718538865], 'false': [0.061825490121227726, 0.1540678506649737], 'true': [0.05569023419254343, 0.05198494261242688], 'true,true': [0.014023070784835468, 0.03170060205988986], 'true,false': [0.06123324260372923, 0.0], 'true,false,true': [0.0, 0.13888888888888887], 'true,true,true': [0.012089835235696286, 0.02165839484781015]}, {'': [0.05634563036128699, 0.04391067578199407], 'true': [0.03892462935145295, 0.07426878799101884], 'true,false': [0.23437499999999978, 0.03990427966670827], 'false': [0.060109770692023286, 0.03966417960421372], 'false,true': [0.24000000000000005, 0.027615679820728354]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
4;;sametitle(A, B) :- haswordtitle(A, C), haswordvenue(D, C).;true;true
4;true;title(E, A), venue(E, D).;true;true
4;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
4;true,false,true;haswordtitle(B, G).;true;true
5;;sametitle(A, B) :- haswordtitle(A, C), haswordvenue(D, C).;true;true
5;true;title(E, A), venue(E, D).;true;true
5;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
5;true,false,true;haswordtitle(B, G).;true;true
6;;sametitle(A, B) :- haswordtitle(A, C), haswordvenue(D, C).;true;true
6;true;title(E, A), venue(E, D).;true;true
6;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
6;true,false,true;haswordtitle(B, G).;true;true
7;;sametitle(A, B) :- haswordtitle(A, C), haswordvenue(D, C).;true;true
7;true;title(E, A), venue(E, D).;true;true
7;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
7;true,false,true;haswordtitle(B, G).;true;true
8;;sametitle(A, B) :- haswordtitle(A, C), haswordvenue(D, C).;true;true
8;true;title(E, A), venue(E, D).;true;true
8;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
8;true,false,true;haswordtitle(B, G).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordauthor(D, C) )
%   then if ( haswordtitle(B, C) )
%   | then return 0.7369368138873914;  // std dev = 0.326, 66.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=58 */
%   | else return 0.003310225422092987;  // std dev = 0.352, 62.000 (wgt'ed) examples reached here.  /* #neg=53 #pos=9 */
%   else if ( haswordtitle(B, E), haswordauthor(F, E) )
%   | then return 0.01886322081379807;  // std dev = 0.367, 56.000 (wgt'ed) examples reached here.  /* #neg=47 #pos=9 */
%   | else return 0.2600180939780157;  // std dev = 0.490, 214.000 (wgt'ed) examples reached here.  /* #neg=128 #pos=86 */
WILL Produced-Tree #2
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordauthor(D, C) )
%   then if ( haswordtitle(B, C) )
%   | then return 0.6220633676283396;  // std dev = 0.326, 66.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=58 */
%   | else if ( author(E, D), title(E, B) )
%   | | then return 0.23274550562375218;  // std dev = 0.484, 8.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=3 */
%   | | else return -0.031143383265136704;  // std dev = 0.314, 54.000 (wgt'ed) examples reached here.  /* #neg=48 #pos=6 */
%   else if ( haswordtitle(B, F), haswordauthor(G, F) )
%   | then if ( author(H, G), title(H, A) )
%   | | then return 0.4558371783570768;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | else return -0.026515762819393735;  // std dev = 0.322, 51.000 (wgt'ed) examples reached here.  /* #neg=45 #pos=6 */
%   | else return 0.22533125375206722;  // std dev = 0.490, 214.000 (wgt'ed) examples reached here.  /* #neg=128 #pos=86 */
WILL Produced-Tree #3
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordauthor(D, C) )
%   then if ( haswordtitle(B, C) )
%   | then return 0.48728512046144257;  // std dev = 0.326, 66.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=58 */
%   | else if ( author(E, D), title(E, B) )
%   | | then return 0.201918601559637;  // std dev = 0.484, 8.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=3 */
%   | | else return -0.027385497018114976;  // std dev = 0.314, 54.000 (wgt'ed) examples reached here.  /* #neg=48 #pos=6 */
%   else if ( haswordtitle(B, F), haswordauthor(G, F) )
%   | then return 0.013630079349719132;  // std dev = 0.360, 56.000 (wgt'ed) examples reached here.  /* #neg=47 #pos=9 */
%   | else return 0.19015949657647718;  // std dev = 0.490, 214.000 (wgt'ed) examples reached here.  /* #neg=128 #pos=86 */
WILL Produced-Tree #4
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordauthor(D, C) )
%   then if ( haswordtitle(B, C) )
%   | then return 0.3672186186501392;  // std dev = 0.326, 66.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=58 */
%   | else if ( author(E, D), title(E, B) )
%   | | then return 0.1710887245064434;  // std dev = 0.484, 8.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=3 */
%   | | else return -0.024150219567855256;  // std dev = 0.314, 54.000 (wgt'ed) examples reached here.  /* #neg=48 #pos=6 */
%   else return 0.12666305872823613;  // std dev = 0.470, 270.000 (wgt'ed) examples reached here.  /* #neg=175 #pos=95 */
WILL Produced-Tree #5
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordvenue(D, C) )
%   then if ( title(E, A), venue(E, D) )
%   | then if ( samebib(E, F), title(F, B) )
%   | | then if ( venue(F, D) )
%   | | | then return 0.6381136508957913;  // std dev = 1.648, 107.000 (wgt'ed) examples reached here.  /* #pos=107 */
%   | | | else return 0.6175735935749521;  // std dev = 0.972, 27.000 (wgt'ed) examples reached here.  /* #pos=27 */
%   | | else return -0.20337136883508025;  // std dev = 0.190, 235.000 (wgt'ed) examples reached here.  /* #neg=227 #pos=8 */
%   | else if ( haswordtitle(A, G), haswordauthor(H, G) )
%   | | then if ( haswordtitle(B, G) )
%   | | | then return 0.39807224506280847;  // std dev = 2.11e-08, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.03420528392122061;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | | else return 0.7306313423405615;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( haswordtitle(B, I), haswordauthor(J, I) )
%   | then return 0.21245597788381945;  // std dev = 0.643, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | else return 0.29908497979755766;  // std dev = 0.863, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
WILL Produced-Tree #6
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordvenue(D, C) )
%   then if ( title(E, A), venue(E, D) )
%   | then return 0.07228676465741345;  // std dev = 0.369, 369.000 (wgt'ed) examples reached here.  /* #neg=227 #pos=142 */
%   | else if ( haswordtitle(A, F), haswordauthor(G, F) )
%   | | then if ( haswordtitle(B, F) )
%   | | | then return 0.30755472608314727;  // std dev = 1.05e-08, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.030224919116897907;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | | else return 0.5664045833053172;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( haswordtitle(B, H), haswordauthor(I, H) )
%   | then return 0.16920209773453218;  // std dev = 0.621, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | else return 0.24857688340144704;  // std dev = 0.839, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
WILL Produced-Tree #7
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordvenue(D, C) )
%   then if ( title(E, A), venue(E, D) )
%   | then if ( samebib(E, F), title(F, B) )
%   | | then if ( venue(F, D) )
%   | | | then return 0.4834569624933283;  // std dev = 1.660, 107.000 (wgt'ed) examples reached here.  /* #pos=107 */
%   | | | else return 0.47383824048081863;  // std dev = 1.017, 27.000 (wgt'ed) examples reached here.  /* #pos=27 */
%   | | else return -0.1815793741308909;  // std dev = 0.189, 235.000 (wgt'ed) examples reached here.  /* #neg=227 #pos=8 */
%   | else if ( haswordtitle(A, G), haswordauthor(H, G) )
%   | | then if ( haswordtitle(B, G) )
%   | | | then return 0.24617252978697307;  // std dev = 1.83e-08, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.02662436536963224;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | | else return 0.42575114746212517;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( haswordtitle(B, I), haswordauthor(J, I) )
%   | then return 0.13518047844239459;  // std dev = 0.609, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | else return 0.20090080553369763;  // std dev = 0.820, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
WILL Produced-Tree #8
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordvenue(D, C) )
%   then if ( title(E, A), venue(E, D) )
%   | then if ( samebib(E, F), title(F, B) )
%   | | then if ( venue(F, D) )
%   | | | then return 0.3767793562664273;  // std dev = 1.487, 107.000 (wgt'ed) examples reached here.  /* #pos=107 */
%   | | | else return 0.37560277713085216;  // std dev = 0.946, 27.000 (wgt'ed) examples reached here.  /* #pos=27 */
%   | | else return -0.15380614069675344;  // std dev = 0.186, 235.000 (wgt'ed) examples reached here.  /* #neg=227 #pos=8 */
%   | else if ( haswordtitle(A, G), haswordauthor(H, G) )
%   | | then if ( haswordtitle(B, G) )
%   | | | then return 0.20337970921485166;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.023387147810147755;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | | else return 0.3263019187137587;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( haswordtitle(A, I), haswordauthor(J, I) )
%   | then return 0.10723270959241642;  // std dev = 0.608, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | else return 0.16080086446622782;  // std dev = 0.802, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
WILL Produced-Tree #9
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordvenue(D, C) )
%   then if ( title(E, A), venue(E, D) )
%   | then if ( samebib(E, F), title(F, B) )
%   | | then if ( venue(F, D) )
%   | | | then return 0.29954162621359387;  // std dev = 1.288, 107.000 (wgt'ed) examples reached here.  /* #pos=107 */
%   | | | else return 0.30286467481922913;  // std dev = 0.844, 27.000 (wgt'ed) examples reached here.  /* #pos=27 */
%   | | else return -0.13245848809055316;  // std dev = 0.185, 235.000 (wgt'ed) examples reached here.  /* #neg=227 #pos=8 */
%   | else if ( haswordtitle(A, G), haswordauthor(H, G) )
%   | | then if ( haswordtitle(B, G) )
%   | | | then return 0.1724042028944549;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.020492345310102165;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | | else return 0.25898304791379434;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( haswordtitle(B, I), haswordauthor(J, I) )
%   | then return 0.08408962665640674;  // std dev = 0.615, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | else return 0.12888490865649432;  // std dev = 0.786, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
WILL Produced-Tree #10
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordvenue(D, C) )
%   then if ( title(E, A), venue(E, D) )
%   | then if ( samebib(E, F), title(F, B) )
%   | | then if ( venue(F, D) )
%   | | | then return 0.2444260474557745;  // std dev = 1.113, 107.000 (wgt'ed) examples reached here.  /* #pos=107 */
%   | | | else return 0.2495609299485879;  // std dev = 0.745, 27.000 (wgt'ed) examples reached here.  /* #pos=27 */
%   | | else return -0.11563594572609354;  // std dev = 0.183, 235.000 (wgt'ed) examples reached here.  /* #neg=227 #pos=8 */
%   | else if ( haswordtitle(A, G), haswordauthor(H, G) )
%   | | then if ( haswordtitle(B, G) )
%   | | | then return 0.14917487560723686;  // std dev = 5.27e-09, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.017916160154861447;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | | else return 0.2124460265329574;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( haswordtitle(A, I), haswordauthor(J, I) )
%   | then return 0.06708733385812175;  // std dev = 0.619, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | else return 0.10100072839022244;  // std dev = 0.778, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */


Results
   AUC ROC   = 0.955434
   AUC PR    = 0.953153
   CLL	      = -0.259394
   Precision = 0.949275 at threshold = 0.5
   Recall    = 0.977612
   F1        = 0.963235


Total learning time: 447.3953778743744 seconds
Total inference time: 128.897 seconds
AUC ROC: 0.955434


Results scoring model
   AUC ROC   = 0.972876
   AUC PR    = 0.978902
   CLL	      = -0.220739
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.944444
   F1        = 0.971429


Total scoring time: 4.236 seconds
Refined model CLL: -0.220739


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.955605
   AUC PR    = 0.953536
   CLL	      = -0.25687
   Precision = 0.949275 at threshold = 0.5
   Recall    = 0.977612
   F1        = 0.963235


Total learning time: 845.4524139347076 seconds
Total inference time: 127.411 seconds
AUC ROC: 0.955605
Total revision time: 845.4524139347076
Best scored revision CLL: -0.214538


Dataset: 6_imdb_cora, Fold: 1, Type: Transfer (trRDN-B), Time: 02:54:06
{'AUC ROC': 0.955605, 'AUC PR': 0.953536, 'CLL': -0.25687, 'Precision': [0.949275, 0.5], 'Recall': 0.977612, 'F1': 0.963235, 'Learning time': 845.4524139347076, 'Inference time': 127.411, 'parameter': {'AUC ROC': 0.955605, 'AUC PR': 0.953536, 'CLL': -0.25687, 'Precision': [0.949275, 0.5], 'Recall': 0.977612, 'F1': 0.963235, 'Learning time': 389.08803606033325, 'Inference time': 127.411}}


WILL Produced-Tree #1
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordauthor(D, C) )
%   then if ( haswordtitle(B, C) )
%   | then return 0.7369368138873914;  // std dev = 0.326, 66.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=58 */
%   | else if ( author(E, D), title(E, B) )
%   | | then return 0.23314893509951226;  // std dev = 0.484, 8.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=3 */
%   | | else return -0.030739953789376603;  // std dev = 0.314, 54.000 (wgt'ed) examples reached here.  /* #neg=48 #pos=6 */
%   else if ( haswordtitle(B, F), haswordauthor(G, F) )
%   | then return 0.01886322081379807;  // std dev = 0.367, 56.000 (wgt'ed) examples reached here.  /* #neg=47 #pos=9 */
%   | else return 0.2600180939780157;  // std dev = 0.490, 214.000 (wgt'ed) examples reached here.  /* #neg=128 #pos=86 */
WILL Produced-Tree #2
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordauthor(D, C) )
%   then if ( haswordtitle(B, C) )
%   | then return 0.6220633676283396;  // std dev = 0.326, 66.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=58 */
%   | else if ( author(E, D), title(E, B) )
%   | | then return 0.202334239218108;  // std dev = 0.484, 8.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=3 */
%   | | else return -0.027039036105351338;  // std dev = 0.314, 54.000 (wgt'ed) examples reached here.  /* #neg=48 #pos=6 */
%   else if ( haswordtitle(B, F), haswordauthor(G, F) )
%   | then if ( author(H, G), title(H, A) )
%   | | then return 0.4558371783570768;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | else return -0.026515762819393735;  // std dev = 0.322, 51.000 (wgt'ed) examples reached here.  /* #neg=45 #pos=6 */
%   | else return 0.22533125375206722;  // std dev = 0.490, 214.000 (wgt'ed) examples reached here.  /* #neg=128 #pos=86 */
WILL Produced-Tree #3
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordauthor(D, C) )
%   then if ( haswordtitle(B, C) )
%   | then return 0.48728512046144257;  // std dev = 0.326, 66.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=58 */
%   | else if ( author(E, D), title(E, B) )
%   | | then return 0.17149281961528945;  // std dev = 0.484, 8.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=3 */
%   | | else return -0.023851027745157644;  // std dev = 0.314, 54.000 (wgt'ed) examples reached here.  /* #neg=48 #pos=6 */
%   else return 0.1535459878183353;  // std dev = 0.472, 270.000 (wgt'ed) examples reached here.  /* #neg=175 #pos=95 */
WILL Produced-Tree #4
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordauthor(D, C) )
%   then if ( haswordtitle(B, C) )
%   | then return 0.3672186186501392;  // std dev = 0.326, 66.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=58 */
%   | else return -1.0374326408999562E-5;  // std dev = 0.345, 62.000 (wgt'ed) examples reached here.  /* #neg=53 #pos=9 */
%   else if ( haswordtitle(B, E), haswordauthor(F, E) )
%   | then if ( author(G, F), title(G, A) )
%   | | then return 0.36346184323908126;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | else return -0.042907650327691595;  // std dev = 0.322, 51.000 (wgt'ed) examples reached here.  /* #neg=45 #pos=6 */
%   | else return 0.1634025390604775;  // std dev = 0.490, 214.000 (wgt'ed) examples reached here.  /* #neg=128 #pos=86 */
WILL Produced-Tree #5
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordvenue(D, C) )
%   then if ( title(E, A), venue(E, D) )
%   | then if ( samebib(E, F), title(F, B) )
%   | | then if ( venue(F, D) )
%   | | | then return 0.6382149079161616;  // std dev = 1.650, 107.000 (wgt'ed) examples reached here.  /* #pos=107 */
%   | | | else return 0.6180184708188047;  // std dev = 0.975, 27.000 (wgt'ed) examples reached here.  /* #pos=27 */
%   | | else return -0.20418579229703082;  // std dev = 0.186, 235.000 (wgt'ed) examples reached here.  /* #neg=227 #pos=8 */
%   | else if ( haswordtitle(A, G), haswordauthor(H, G) )
%   | | then if ( haswordtitle(B, G) )
%   | | | then return 0.39807224506280847;  // std dev = 2.11e-08, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.0344660983293485;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | | else return 0.7306065492575841;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( haswordtitle(B, I), haswordauthor(J, I) )
%   | then return 0.21376295351498875;  // std dev = 0.638, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | else return 0.29920299046013293;  // std dev = 0.863, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
WILL Produced-Tree #6
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordvenue(D, C) )
%   then if ( title(E, A), venue(E, D) )
%   | then if ( samebib(E, F), title(F, B) )
%   | | then if ( venue(F, D) )
%   | | | then return 0.49977319970715917;  // std dev = 1.677, 107.000 (wgt'ed) examples reached here.  /* #pos=107 */
%   | | | else return 0.48965385649393084;  // std dev = 1.025, 27.000 (wgt'ed) examples reached here.  /* #pos=27 */
%   | | else return -0.17082716408586493;  // std dev = 0.184, 235.000 (wgt'ed) examples reached here.  /* #neg=227 #pos=8 */
%   | else if ( haswordtitle(A, G), haswordauthor(H, G) )
%   | | then if ( haswordtitle(B, G) )
%   | | | then return 0.30755472608314727;  // std dev = 1.05e-08, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.030461657873873157;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | | else return 0.5663797346691128;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( haswordtitle(B, I), haswordauthor(J, I) )
%   | then return 0.1704414027983958;  // std dev = 0.616, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | else return 0.24870218181887885;  // std dev = 0.838, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
WILL Produced-Tree #7
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordvenue(D, C) )
%   then if ( title(E, A), venue(E, D) )
%   | then if ( samebib(E, F), title(F, B) )
%   | | then if ( venue(F, D) )
%   | | | then return 0.3889902737776172;  // std dev = 1.516, 107.000 (wgt'ed) examples reached here.  /* #pos=107 */
%   | | | else return 0.3877206722480622;  // std dev = 0.964, 27.000 (wgt'ed) examples reached here.  /* #pos=27 */
%   | | else return -0.1456294583035653;  // std dev = 0.182, 235.000 (wgt'ed) examples reached here.  /* #neg=227 #pos=8 */
%   | else if ( haswordtitle(A, G), haswordauthor(H, G) )
%   | | then if ( haswordtitle(B, G) )
%   | | | then return 0.24617252978697307;  // std dev = 1.83e-08, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.026837868317630586;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | | else return 0.42573248590242185;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( haswordtitle(B, I), haswordauthor(J, I) )
%   | then return 0.13633829107577863;  // std dev = 0.603, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | else return 0.20102438468806227;  // std dev = 0.819, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
WILL Produced-Tree #8
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordvenue(D, C) )
%   then if ( title(E, A), venue(E, D) )
%   | then return 0.031923968817182374;  // std dev = 0.267, 369.000 (wgt'ed) examples reached here.  /* #neg=227 #pos=142 */
%   | else if ( haswordtitle(A, F), haswordauthor(G, F) )
%   | | then if ( haswordtitle(B, F) )
%   | | | then return 0.20337970921485166;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.023578588623496443;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | | else return 0.32628924167842965;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( haswordtitle(A, H), haswordauthor(I, H) )
%   | then return 0.10684925916216581;  // std dev = 0.607, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | else return 0.1630935762384776;  // std dev = 0.798, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
WILL Produced-Tree #9
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordvenue(D, C) )
%   then if ( title(E, A), venue(E, D) )
%   | then return 0.027039526216286504;  // std dev = 0.266, 369.000 (wgt'ed) examples reached here.  /* #neg=227 #pos=142 */
%   | else if ( haswordtitle(A, F), haswordauthor(G, F) )
%   | | then if ( haswordtitle(B, F) )
%   | | | then return 0.1724042028944549;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.020663126446067086;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | | else return 0.25897441369744856;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( haswordtitle(B, H), haswordauthor(I, H) )
%   | then return 0.08521168861726787;  // std dev = 0.609, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | else return 0.12875972202361224;  // std dev = 0.785, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
WILL Produced-Tree #10
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordvenue(D, C) )
%   then if ( title(E, A), venue(E, D) )
%   | then if ( samebib(E, F), title(F, B) )
%   | | then if ( venue(F, D) )
%   | | | then return 0.29677968643053315;  // std dev = 1.284, 107.000 (wgt'ed) examples reached here.  /* #pos=107 */
%   | | | else return 0.30093917966532985;  // std dev = 0.846, 27.000 (wgt'ed) examples reached here.  /* #pos=27 */
%   | | else return -0.13378118552750035;  // std dev = 0.181, 235.000 (wgt'ed) examples reached here.  /* #neg=227 #pos=8 */
%   | else if ( haswordtitle(A, G), haswordauthor(H, G) )
%   | | then if ( haswordtitle(B, G) )
%   | | | then return 0.14917487560723686;  // std dev = 5.27e-09, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.018067821932771715;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | | else return 0.2124399436009855;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( haswordtitle(A, I), haswordauthor(J, I) )
%   | then return 0.06670462975501434;  // std dev = 0.617, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | else return 0.10296730044232667;  // std dev = 0.773, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */


Results
   AUC ROC   = 0.955348
   AUC PR    = 0.953108
   CLL	      = -0.289348
   Precision = 0.948812 at threshold = 0.5
   Recall    = 0.968284
   F1        = 0.958449


Total learning time: 400.7013750076294 seconds
Total inference time: 111.544 seconds
AUC ROC: 0.955348


Dataset: 6_imdb_cora, Fold: 1, Type: Scratch (RDN-B), Time: 03:02:39
{'AUC ROC': 0.955348, 'AUC PR': 0.953108, 'CLL': -0.289348, 'Precision': [0.948812, 0.5], 'Recall': 0.968284, 'F1': 0.958449, 'Learning time': 400.7013750076294, 'Inference time': 111.544}


Starting fold 2

Target train facts examples: 9016
Target train pos examples: 140
Target train neg examples: 52

Target test facts examples: 33542
Target test pos  examples: 558
Target test neg examples: 664

******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


WILL Produced-Tree #1
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordauthor(D, C) )
%   then if ( haswordtitle(B, C) )
%   | then if ( author(E, D), title(E, A) )
%   | | then return 0.8581489350995123;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return 0.7936328060672545;  // std dev = 0.246, 62.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=58 */
%   | else return -0.1418510649004878;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   else if ( haswordtitle(B, F), haswordauthor(G, F) )
%   | then return -0.1418510649004878;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | else return 0.6842358916212514;  // std dev = 0.379, 92.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=76 */
WILL Produced-Tree #2
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordauthor(D, C) )
%   then if ( haswordtitle(B, C) )
%   | then if ( author(E, D), title(E, B) )
%   | | then return 0.7237518087032814;  // std dev = 0.015, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return 0.6673784342854517;  // std dev = 0.246, 62.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=58 */
%   | else return -0.12544463852839138;  // std dev = 7.45e-09, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   else if ( haswordtitle(B, F), haswordauthor(G, F) )
%   | then return -0.12544463852839138;  // std dev = 7.45e-09, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | else return 0.5792891135108365;  // std dev = 0.379, 92.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=76 */
WILL Produced-Tree #3
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordauthor(D, C) )
%   then if ( haswordtitle(B, C) )
%   | then return 0.5225100911707643;  // std dev = 0.235, 68.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=64 */
%   | else return -0.11231637819360635;  // std dev = 1.39e-08, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   else if ( haswordtitle(B, E), haswordauthor(F, E) )
%   | then return -0.11231637819360635;  // std dev = 1.39e-08, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | else return 0.4570789878895837;  // std dev = 0.379, 92.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=76 */
WILL Produced-Tree #4
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordauthor(D, C) )
%   then if ( haswordtitle(B, C) )
%   | then if ( author(E, D), title(E, B) )
%   | | then return 0.42975714872097215;  // std dev = 0.018, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return 0.38921763824397254;  // std dev = 0.246, 62.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=58 */
%   | else return -0.10159632948783631;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   else if ( haswordtitle(B, F), haswordauthor(G, F) )
%   | then return -0.10159632948783631;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | else return 0.34592553794605063;  // std dev = 0.379, 92.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=76 */
WILL Produced-Tree #5
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordauthor(D, C) )
%   then if ( haswordtitle(B, C) )
%   | then return 0.29856339653235797;  // std dev = 0.235, 68.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=64 */
%   | else return -0.09269127618926094;  // std dev = 9.13e-09, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   else if ( haswordtitle(B, E), haswordauthor(F, E) )
%   | then return -0.09269127618926094;  // std dev = 9.13e-09, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | else return 0.25984624421661506;  // std dev = 0.379, 92.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=76 */
WILL Produced-Tree #6
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordauthor(D, C) )
%   then if ( haswordtitle(B, C) )
%   | then return 0.2332821569399393;  // std dev = 0.235, 68.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=64 */
%   | else return -0.08518475138839685;  // std dev = 1.05e-08, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   else if ( haswordtitle(B, E), haswordauthor(F, E) )
%   | then return -0.08518475138839685;  // std dev = 1.05e-08, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | else return 0.19744953338909077;  // std dev = 0.379, 92.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=76 */
WILL Produced-Tree #7
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordauthor(D, C) )
%   then if ( haswordtitle(B, C) )
%   | then if ( author(E, D), title(E, A) )
%   | | then return 0.2256328163419101;  // std dev = 0.020, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return 0.18379565502864562;  // std dev = 0.246, 62.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=58 */
%   | else return -0.07877675473109173;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   else if ( haswordtitle(B, F), haswordauthor(G, F) )
%   | then return -0.07877675473109173;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | else return 0.1526381372739871;  // std dev = 0.379, 92.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=76 */
WILL Produced-Tree #8
% FOR sametitle(A, B):
%   if ( haswordtitle(B, C), haswordauthor(D, C) )
%   then if ( haswordtitle(A, C) )
%   | then if ( author(E, D), title(E, B) )
%   | | then return 0.18916991683231674;  // std dev = 0.019, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return 0.15104730387183196;  // std dev = 0.246, 62.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=58 */
%   | else return -0.07324622576333704;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   else if ( haswordtitle(A, F), haswordauthor(G, F) )
%   | then return -0.07324622576333704;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | else return 0.11999813200741807;  // std dev = 0.379, 92.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=76 */
WILL Produced-Tree #9
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordauthor(D, C) )
%   then if ( haswordtitle(B, C) )
%   | then if ( author(E, D), title(E, A) )
%   | | then return 0.16322377143836167;  // std dev = 0.022, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return 0.12647102405595598;  // std dev = 0.246, 62.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=58 */
%   | else return -0.06842697784420272;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   else return 0.07140588387747769;  // std dev = 0.355, 108.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=76 */
WILL Produced-Tree #10
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordauthor(D, C) )
%   then if ( haswordtitle(B, C) )
%   | then if ( author(E, D), title(E, B) )
%   | | then return 0.14249722885588056;  // std dev = 0.021, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return 0.10765642670710344;  // std dev = 0.246, 62.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=58 */
%   | else return -0.06419184008202619;  // std dev = 7.45e-09, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   else if ( haswordtitle(B, F), haswordauthor(G, F) )
%   | then return -0.07312139918858061;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | else return 0.08189580200177506;  // std dev = 0.379, 92.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=76 */


Results
   AUC ROC   = 0.709594
   AUC PR    = 0.662568
   CLL	      = -0.730124
   Precision = 0.548596 at threshold = 0.5
   Recall    = 0.910394
   F1        = 0.684636


Total learning time: 25.99366307258606 seconds
Total inference time: 3.184 seconds
AUC ROC: 0.709594


Results scoring model
   AUC ROC   = 0.859341
   AUC PR    = 0.926052
   CLL	      = -0.33311
   Precision = 0.875 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.933333


Total scoring time: 1.594 seconds
Parameter learned model CLL: -0.33311


Structure after Parameter Learning
[['sametitle(A, B)', {'': 'haswordtitle(A, C), haswordauthor(D, C)', 'true': 'haswordtitle(B, C)', 'true,true': 'author(E, D), title(E, A)', 'false': 'haswordtitle(B, F), haswordauthor(G, F)'}, {'true,true,true': [0.0, 0, 6], 'true,true,false': [0.246, 4, 58], 'true,false': [0.0, 16, 0], 'false,true': [0.0, 16, 0], 'false,false': [0.379, 16, 76]}], ['sametitle(A, B)', {'': 'haswordtitle(A, C), haswordauthor(D, C)', 'true': 'haswordtitle(B, C)', 'true,true': 'author(E, D), title(E, B)', 'false': 'haswordtitle(B, F), haswordauthor(G, F)'}, {'true,true,true': [0.015, 0, 6], 'true,true,false': [0.246, 4, 58], 'true,false': [7.45e-09, 16, 0], 'false,true': [7.45e-09, 16, 0], 'false,false': [0.379, 16, 76]}], ['sametitle(A, B)', {'': 'haswordtitle(A, C), haswordauthor(D, C)', 'true': 'haswordtitle(B, C)', 'false': 'haswordtitle(B, E), haswordauthor(F, E)'}, {'true,true': [0.235, 4, 64], 'true,false': [1.39e-08, 16, 0], 'false,true': [1.39e-08, 16, 0], 'false,false': [0.379, 16, 76]}], ['sametitle(A, B)', {'': 'haswordtitle(A, C), haswordauthor(D, C)', 'true': 'haswordtitle(B, C)', 'true,true': 'author(E, D), title(E, B)', 'false': 'haswordtitle(B, F), haswordauthor(G, F)'}, {'true,true,true': [0.018, 0, 6], 'true,true,false': [0.246, 4, 58], 'true,false': [0.0, 16, 0], 'false,true': [0.0, 16, 0], 'false,false': [0.379, 16, 76]}], ['sametitle(A, B)', {'': 'haswordtitle(A, C), haswordauthor(D, C)', 'true': 'haswordtitle(B, C)', 'false': 'haswordtitle(B, E), haswordauthor(F, E)'}, {'true,true': [0.235, 4, 64], 'true,false': [9.13e-09, 16, 0], 'false,true': [9.13e-09, 16, 0], 'false,false': [0.379, 16, 76]}], ['sametitle(A, B)', {'': 'haswordtitle(A, C), haswordauthor(D, C)', 'true': 'haswordtitle(B, C)', 'false': 'haswordtitle(B, E), haswordauthor(F, E)'}, {'true,true': [0.235, 4, 64], 'true,false': [1.05e-08, 16, 0], 'false,true': [1.05e-08, 16, 0], 'false,false': [0.379, 16, 76]}], ['sametitle(A, B)', {'': 'haswordtitle(A, C), haswordauthor(D, C)', 'true': 'haswordtitle(B, C)', 'true,true': 'author(E, D), title(E, A)', 'false': 'haswordtitle(B, F), haswordauthor(G, F)'}, {'true,true,true': [0.02, 0, 6], 'true,true,false': [0.246, 4, 58], 'true,false': [0.0, 16, 0], 'false,true': [0.0, 16, 0], 'false,false': [0.379, 16, 76]}], ['sametitle(A, B)', {'': 'haswordtitle(B, C), haswordauthor(D, C)', 'true': 'haswordtitle(A, C)', 'true,true': 'author(E, D), title(E, B)', 'false': 'haswordtitle(A, F), haswordauthor(G, F)'}, {'true,true,true': [0.019, 0, 6], 'true,true,false': [0.246, 4, 58], 'true,false': [0.0, 16, 0], 'false,true': [0.0, 16, 0], 'false,false': [0.379, 16, 76]}], ['sametitle(A, B)', {'': 'haswordtitle(A, C), haswordauthor(D, C)', 'true': 'haswordtitle(B, C)', 'true,true': 'author(E, D), title(E, A)'}, {'true,true,true': [0.022, 0, 6], 'true,true,false': [0.246, 4, 58], 'true,false': [0.0, 16, 0], 'false': [0.355, 32, 76]}], ['sametitle(A, B)', {'': 'haswordtitle(A, C), haswordauthor(D, C)', 'true': 'haswordtitle(B, C)', 'true,true': 'author(E, D), title(E, B)', 'false': 'haswordtitle(B, F), haswordauthor(G, F)'}, {'true,true,true': [0.021, 0, 6], 'true,true,false': [0.246, 4, 58], 'true,false': [7.45e-09, 16, 0], 'false,true': [0.0, 16, 0], 'false,false': [0.379, 16, 76]}]]
[{'': [0.18140589569160917, 0.2085048010973933], 'false': [-6.938893903907228e-18, 0.14366729678638912], 'true': [0.05536332179930703, -6.938893903907228e-18], 'true,true': [-1.4802973661668753e-16, 0.06035379812695064]}, {'': [0.14286289420974324, 0.18506057632451345], 'false': [3.469446951953614e-18, 0.14366729678638898], 'true': [0.05524333801085281, 3.469446951953614e-18], 'true,true': [3.660935309116967e-05, 0.06030551665427711]}, {'': [0.10675726088295802, 0.16329878042896004], 'false': [1.214306433183765e-17, 0.14366729678638843], 'true': [0.055113826631377406, 1.214306433183765e-17]}, {'': [0.08230346346528349, 0.14765811647852795], 'false': [-6.938893903907228e-18, 0.14366729678638945], 'true': [0.05511232819878207, -6.938893903907228e-18], 'true,true': [5.570559829996361e-05, 0.060295377987819816]}, {'': [0.06818681852329583, 0.13806776407049176], 'false': [5.204170427930421e-18, 0.14366729678638904], 'true': [0.05507263888451394, 5.204170427930421e-18]}, {'': [0.060239329249438076, 0.1324644006667525], 'false': [6.938893903907228e-18, 0.14366729678638943], 'true': [0.05509497065374787, 6.938893903907228e-18]}, {'': [0.05555025826873553, 0.12914163746308138], 'false': [-1.734723475976807e-18, 0.14366729678638943], 'true': [0.055116816374041325, -1.734723475976807e-18], 'true,true': [6.480646813710374e-05, 0.06028998775942491]}, {'': [0.05259076138075101, 0.12709599784758446], 'false': [0.0, 0.1436672967863894], 'true': [0.05509308836497384, 0.0], 'true,true': [6.0393775299321294e-05, 0.06029059768336649]}, {'': [0.05064170315120962, 0.12578381442103972], 'true': [0.05507933842271584, 0.0], 'true,true': [7.778437081966867e-05, 0.06028288436233538]}, {'': [0.04929779039841361, 0.12541588739302845], 'false': [-3.469446951953614e-18, 0.1436672967863893], 'true': [0.05506910566585297, 3.469446951953614e-18], 'true,true': [7.01649158013351e-05, 0.060284476612275026]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;sametitle(A, B) :- haswordtitle(A, C), haswordauthor(D, C).;true;true
0;true;haswordtitle(B, C).;true;true
0;true,true;author(E, D), title(E, A).;true;true
0;false;haswordtitle(B, F), haswordauthor(G, F).;true;true
1;;sametitle(A, B) :- haswordtitle(A, C), haswordauthor(D, C).;true;true
1;true;haswordtitle(B, C).;true;true
1;true,true;author(E, D), title(E, B).;true;true
1;false;haswordtitle(B, F), haswordauthor(G, F).;true;true
2;;sametitle(A, B) :- haswordtitle(A, C), haswordauthor(D, C).;true;true
2;true;haswordtitle(B, C).;true;true
2;false;haswordtitle(B, E), haswordauthor(F, E).;true;true
3;;sametitle(A, B) :- haswordtitle(A, C), haswordauthor(D, C).;true;true
3;true;haswordtitle(B, C).;true;true
3;true,true;author(E, D), title(E, B).;true;true
3;false;haswordtitle(B, F), haswordauthor(G, F).;true;true
4;;sametitle(A, B) :- haswordtitle(A, C), haswordauthor(D, C).;true;true
4;true;haswordtitle(B, C).;true;true
4;false;haswordtitle(B, E), haswordauthor(F, E).;true;true
5;;sametitle(A, B) :- haswordtitle(A, C), haswordauthor(D, C).;true;true
5;true;haswordtitle(B, C).;true;true
5;false;haswordtitle(B, E), haswordauthor(F, E).;true;true
6;;sametitle(A, B) :- haswordtitle(A, C), haswordauthor(D, C).;true;true
6;true;haswordtitle(B, C).;true;true
6;true,true;author(E, D), title(E, A).;true;true
6;false;haswordtitle(B, F), haswordauthor(G, F).;true;true
7;;sametitle(A, B) :- haswordtitle(B, C), haswordauthor(D, C).;true;true
7;true;haswordtitle(A, C).;true;true
7;true,true;author(E, D), title(E, B).;true;true
7;false;haswordtitle(A, F), haswordauthor(G, F).;true;true
8;;sametitle(A, B) :- haswordtitle(A, C), haswordauthor(D, C).;true;true
8;true;haswordtitle(B, C).;true;true
8;true,true;author(E, D), title(E, A).;true;true
9;;sametitle(A, B) :- haswordtitle(A, C), haswordauthor(D, C).;true;true
9;true;haswordtitle(B, C).;true;true
9;true,true;author(E, D), title(E, B).;true;true
9;false;haswordtitle(B, F), haswordauthor(G, F).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordauthor(D, C) )
%   then if ( haswordtitle(B, C) )
%   | then if ( author(E, D), title(E, A) )
%   | | then return 0.8581489350995123;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return 0.7936328060672545;  // std dev = 0.246, 62.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=58 */
%   | else return -0.1418510649004878;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   else if ( haswordtitle(B, F), haswordauthor(G, F) )
%   | then return -0.1418510649004878;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | else return 0.6842358916212514;  // std dev = 0.379, 92.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=76 */
WILL Produced-Tree #2
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordauthor(D, C) )
%   then if ( haswordtitle(B, C) )
%   | then if ( author(E, D), title(E, B) )
%   | | then return 0.7237518087032814;  // std dev = 0.015, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return 0.6673784342854517;  // std dev = 0.246, 62.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=58 */
%   | else return -0.12544463852839138;  // std dev = 7.45e-09, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   else return 0.4748841132087285;  // std dev = 0.430, 108.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=76 */
WILL Produced-Tree #3
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordauthor(D, C) )
%   then if ( haswordtitle(B, C) )
%   | then if ( author(E, D), title(E, B) )
%   | | then return 0.5596022372298854;  // std dev = 0.018, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return 0.5189205286489138;  // std dev = 0.246, 62.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=58 */
%   | else return -0.11231637819360635;  // std dev = 1.39e-08, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   else if ( haswordtitle(B, F), haswordauthor(G, F) )
%   | then return -0.1874040601650234;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | else return 0.48103931413960527;  // std dev = 0.379, 92.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=76 */
WILL Produced-Tree #4
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordauthor(D, C) )
%   then if ( haswordtitle(B, C) )
%   | then if ( author(E, D), title(E, A) )
%   | | then return 0.4233597971885226;  // std dev = 0.027, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return 0.3898494672190816;  // std dev = 0.246, 62.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=58 */
%   | else return -0.10159632948783631;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   else if ( haswordtitle(B, F), haswordauthor(G, F) )
%   | then return -0.16051906956732503;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | else return 0.3659622649099855;  // std dev = 0.379, 92.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=76 */
WILL Produced-Tree #5
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordauthor(D, C) )
%   then if ( haswordtitle(B, C) )
%   | then if ( author(E, D), title(E, A) )
%   | | then return 0.32472359389050515;  // std dev = 0.025, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return 0.29605886299710554;  // std dev = 0.246, 62.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=58 */
%   | else return -0.09269127618926094;  // std dev = 9.13e-09, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   else if ( haswordtitle(B, F), haswordauthor(G, F) )
%   | then return -0.14004815311119917;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | else return 0.2747382325650775;  // std dev = 0.379, 92.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=76 */
WILL Produced-Tree #6
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordauthor(D, C) )
%   then if ( haswordtitle(B, C) )
%   | then if ( author(E, D), title(E, B) )
%   | | then return 0.2598970854069878;  // std dev = 0.028, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return 0.2307752004519315;  // std dev = 0.245, 62.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=58 */
%   | else return -0.08518475138839685;  // std dev = 1.05e-08, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   else if ( haswordtitle(B, F), haswordauthor(G, F) )
%   | then return -0.12401589156552249;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | else return 0.20813606918556066;  // std dev = 0.379, 92.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=76 */
WILL Produced-Tree #7
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordauthor(D, C) )
%   then if ( haswordtitle(B, C) )
%   | then if ( author(E, D), title(E, B) )
%   | | then return 0.21311836755939018;  // std dev = 0.025, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return 0.18511592785767614;  // std dev = 0.246, 62.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=58 */
%   | else return -0.07877675473109173;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   else return 0.12012081540539737;  // std dev = 0.363, 108.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=76 */
WILL Produced-Tree #8
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordauthor(D, C) )
%   then if ( haswordtitle(B, C) )
%   | then if ( author(E, D), title(E, B) )
%   | | then return 0.17957554902215353;  // std dev = 0.022, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return 0.15206945920707987;  // std dev = 0.246, 62.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=58 */
%   | else return -0.07324622576333704;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   else return 0.09597918012054805;  // std dev = 0.362, 108.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=76 */
WILL Produced-Tree #9
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordauthor(D, C) )
%   then if ( haswordtitle(B, C) )
%   | then if ( author(E, D), title(E, A) )
%   | | then return 0.15721641154366947;  // std dev = 0.028, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return 0.1271304463871339;  // std dev = 0.245, 62.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=58 */
%   | else return -0.06842697784420272;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   else if ( haswordtitle(B, F), haswordauthor(G, F) )
%   | then return -0.13437072651144885;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | else return 0.11409137552330931;  // std dev = 0.379, 92.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=76 */
WILL Produced-Tree #10
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordauthor(D, C) )
%   then if ( haswordtitle(B, C) )
%   | then if ( author(E, D), title(E, A) )
%   | | then return 0.13750692955497446;  // std dev = 0.025, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return 0.1082055858400725;  // std dev = 0.246, 62.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=58 */
%   | else return -0.06419184008202619;  // std dev = 7.45e-09, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   else return 0.06004791433429614;  // std dev = 0.358, 108.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=76 */


Results
   AUC ROC   = 0.709594
   AUC PR    = 0.662568
   CLL	      = -0.712356
   Precision = 0.548596 at threshold = 0.5
   Recall    = 0.910394
   F1        = 0.684636


Total learning time: 29.547909259796143 seconds
Total inference time: 3.391 seconds
AUC ROC: 0.709594


Results scoring model
   AUC ROC   = 0.859341
   AUC PR    = 0.926052
   CLL	      = -0.340841
   Precision = 0.875 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.933333


Total scoring time: 1.819 seconds
Refined model CLL: -0.340841


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.709594
   AUC PR    = 0.662568
   CLL	      = -0.730124
   Precision = 0.548596 at threshold = 0.5
   Recall    = 0.910394
   F1        = 0.684636


Total learning time: 58.954572332382206 seconds
Total inference time: 3.184 seconds
AUC ROC: 0.709594
Total revision time: 58.954572332382206
Best scored revision CLL: -0.33311


Dataset: 6_imdb_cora, Fold: 2, Type: Transfer (trRDN-B), Time: 03:03:48
{'AUC ROC': 0.709594, 'AUC PR': 0.662568, 'CLL': -0.730124, 'Precision': [0.548596, 0.5], 'Recall': 0.910394, 'F1': 0.684636, 'Learning time': 58.954572332382206, 'Inference time': 3.184, 'parameter': {'AUC ROC': 0.709594, 'AUC PR': 0.662568, 'CLL': -0.730124, 'Precision': [0.548596, 0.5], 'Recall': 0.910394, 'F1': 0.684636, 'Learning time': 25.99366307258606, 'Inference time': 3.184}}


WILL Produced-Tree #1
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordauthor(D, C) )
%   then if ( haswordtitle(B, C) )
%   | then if ( author(E, D), title(E, B) )
%   | | then return 0.8581489350995123;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return 0.7936328060672545;  // std dev = 0.246, 62.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=58 */
%   | else return -0.1418510649004878;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   else if ( haswordtitle(B, F), haswordauthor(G, F) )
%   | then return -0.1418510649004878;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | else return 0.6842358916212514;  // std dev = 0.379, 92.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=76 */
WILL Produced-Tree #2
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordauthor(D, C) )
%   then if ( haswordtitle(B, C) )
%   | then if ( author(E, D), title(E, A) )
%   | | then return 0.7237518087032814;  // std dev = 0.015, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return 0.6673784342854517;  // std dev = 0.246, 62.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=58 */
%   | else return -0.12544463852839138;  // std dev = 7.45e-09, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   else return 0.4748841132087285;  // std dev = 0.430, 108.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=76 */
WILL Produced-Tree #3
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordauthor(D, C) )
%   then if ( haswordtitle(B, C) )
%   | then return 0.5225100911707643;  // std dev = 0.235, 68.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=64 */
%   | else return -0.11231637819360635;  // std dev = 1.39e-08, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   else return 0.38201066609447526;  // std dev = 0.423, 108.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=76 */
WILL Produced-Tree #4
% FOR sametitle(A, B):
%   if ( haswordtitle(B, C), haswordauthor(D, C) )
%   then if ( haswordtitle(A, C) )
%   | then if ( author(E, D), title(E, B) )
%   | | then return 0.4290885843190168;  // std dev = 0.016, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return 0.389282338024807;  // std dev = 0.246, 62.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=58 */
%   | else return -0.25256923200871423;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   else if ( haswordtitle(A, F), haswordauthor(G, F) )
%   | then return -0.10159632948783631;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | else return 0.39044528408274887;  // std dev = 0.379, 92.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=76 */
WILL Produced-Tree #5
% FOR sametitle(A, B):
%   if ( haswordtitle(B, C), haswordauthor(D, C) )
%   then if ( haswordtitle(A, C) )
%   | then return 0.2985635028212672;  // std dev = 0.235, 68.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=64 */
%   | else return -0.20791728080793528;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   else if ( haswordtitle(A, E), haswordauthor(F, E) )
%   | then return -0.09269127618926094;  // std dev = 9.13e-09, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | else return 0.2932403414540885;  // std dev = 0.379, 92.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=76 */
WILL Produced-Tree #6
% FOR sametitle(A, B):
%   if ( haswordtitle(B, C), haswordauthor(D, C) )
%   then if ( haswordtitle(A, C) )
%   | then if ( author(E, D), title(E, A) )
%   | | then return 0.2695840172404042;  // std dev = 0.024, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return 0.22976919206839616;  // std dev = 0.246, 62.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=58 */
%   | else return -0.17574544455095786;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   else if ( haswordtitle(A, F), haswordauthor(G, F) )
%   | then return -0.08518475138839685;  // std dev = 1.05e-08, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | else return 0.22145178556649467;  // std dev = 0.379, 92.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=76 */
WILL Produced-Tree #7
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordauthor(D, C) )
%   then if ( haswordtitle(B, C) )
%   | then return 0.18753070704938352;  // std dev = 0.235, 68.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=64 */
%   | else return -0.07877675473109173;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   else return 0.12226816676496186;  // std dev = 0.368, 108.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=76 */
WILL Produced-Tree #8
% FOR sametitle(A, B):
%   if ( haswordtitle(B, C), haswordauthor(D, C) )
%   then if ( haswordtitle(A, C) )
%   | then if ( author(E, D), title(E, A) )
%   | | then return 0.18944024479030744;  // std dev = 0.019, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return 0.15100923177612474;  // std dev = 0.246, 62.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=58 */
%   | else return -0.16813260323426546;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   else if ( haswordtitle(A, F), haswordauthor(G, F) )
%   | then return -0.07324622576333704;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | else return 0.14288278659058992;  // std dev = 0.379, 92.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=76 */
WILL Produced-Tree #9
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordauthor(D, C) )
%   then if ( haswordtitle(B, C) )
%   | then return 0.1297053283885041;  // std dev = 0.235, 68.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=64 */
%   | else return -0.06842697784420272;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   else if ( haswordtitle(B, E), haswordauthor(F, E) )
%   | then return -0.14590924006006306;  // std dev = 1.29e-08, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | else return 0.11279650302878692;  // std dev = 0.379, 92.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=76 */
WILL Produced-Tree #10
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordauthor(D, C) )
%   then if ( haswordtitle(B, C) )
%   | then if ( author(E, D), title(E, B) )
%   | | then return 0.14653758901542435;  // std dev = 0.020, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return 0.10719614002837999;  // std dev = 0.246, 62.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=58 */
%   | else return -0.06419184008202619;  // std dev = 7.45e-09, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   else if ( haswordtitle(B, F), haswordauthor(G, F) )
%   | then return -0.12864846143369887;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | else return 0.09029403504870928;  // std dev = 0.379, 92.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=76 */


Results
   AUC ROC   = 0.710066
   AUC PR    = 0.662695
   CLL	      = -0.718469
   Precision = 0.548596 at threshold = 0.5
   Recall    = 0.910394
   F1        = 0.684636


Total learning time: 24.778105974197388 seconds
Total inference time: 3.008 seconds
AUC ROC: 0.710066


Dataset: 6_imdb_cora, Fold: 2, Type: Scratch (RDN-B), Time: 03:04:17
{'AUC ROC': 0.710066, 'AUC PR': 0.662695, 'CLL': -0.718469, 'Precision': [0.548596, 0.5], 'Recall': 0.910394, 'F1': 0.684636, 'Learning time': 24.778105974197388, 'Inference time': 3.008}


Starting fold 3

Target train facts examples: 9306
Target train pos examples: 113
Target train neg examples: 210

Target test facts examples: 33252
Target test pos  examples: 585
Target test neg examples: 506

******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


WILL Produced-Tree #1
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordvenue(D, C) )
%   then if ( title(E, B), venue(E, D) )
%   | then if ( samebib(E, F), title(F, A) )
%   | | then return 0.8581489350995115;  // std dev = 3.37e-07, 96.000 (wgt'ed) examples reached here.  /* #pos=96 */
%   | | else return -0.14185106490048843;  // std dev = 0.000, 206.000 (wgt'ed) examples reached here.  /* #neg=206 */
%   | else return 0.7812258581764353;  // std dev = 0.266, 13.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   else if ( haswordtitle(A, G), haswordtitle(B, G) )
%   | then return 0.8581489350995122;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return -0.14185106490048777;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #2
% FOR sametitle(A, B):
%   if ( haswordtitle(B, C), haswordvenue(D, C) )
%   then if ( title(E, A), venue(E, D) )
%   | then if ( samebib(E, F), title(F, B) )
%   | | then return 0.7194734122109541;  // std dev = 1.88e-07, 96.000 (wgt'ed) examples reached here.  /* #pos=96 */
%   | | else return -0.12612338422298822;  // std dev = 0.139, 206.000 (wgt'ed) examples reached here.  /* #neg=206 */
%   | else return 0.6673923081472714;  // std dev = 0.229, 13.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   else if ( haswordtitle(A, G), haswordtitle(B, G) )
%   | then return 0.7225254794457083;  // std dev = 0.014, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return -0.12544463852839136;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #3
% FOR sametitle(A, B):
%   if ( haswordtitle(B, C), haswordvenue(D, C) )
%   then if ( title(E, A), venue(E, D) )
%   | then if ( samebib(E, F), title(F, B) )
%   | | then return 0.5553664367462835;  // std dev = 4.09e-07, 96.000 (wgt'ed) examples reached here.  /* #pos=96 */
%   | | else return -0.11287578031157806;  // std dev = 0.129, 206.000 (wgt'ed) examples reached here.  /* #neg=206 */
%   | else return 0.5235516292488022;  // std dev = 0.214, 13.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   else if ( haswordtitle(A, G), haswordtitle(B, G) )
%   | then return 0.5583951624779799;  // std dev = 0.017, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return -0.11231637819360636;  // std dev = 2.63e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #4
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordvenue(D, C) )
%   then if ( title(E, B), venue(E, D) )
%   | then if ( samebib(E, F), title(F, A) )
%   | | then return 0.41749818750685663;  // std dev = 0.001, 96.000 (wgt'ed) examples reached here.  /* #pos=96 */
%   | | else return -0.1025477100747007;  // std dev = 0.219, 206.000 (wgt'ed) examples reached here.  /* #neg=206 */
%   | else return 0.40316752663743777;  // std dev = 0.180, 13.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   else if ( haswordtitle(A, G), haswordtitle(B, G) )
%   | then return 0.42073337754073636;  // std dev = 0.019, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return -0.10155867761849639;  // std dev = 9.22e-05, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #5
% FOR sametitle(A, B):
%   if ( haswordtitle(B, C), haswordvenue(D, C) )
%   then if ( title(E, A), venue(E, D) )
%   | then if ( samebib(E, F), title(F, B) )
%   | | then return 0.32070786392391376;  // std dev = 0.000701, 96.000 (wgt'ed) examples reached here.  /* #pos=96 */
%   | | else return -0.09350751227163409;  // std dev = 0.205, 206.000 (wgt'ed) examples reached here.  /* #neg=206 */
%   | else return 0.30768423831114233;  // std dev = 0.175, 13.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   else if ( haswordtitle(A, G), haswordtitle(B, G) )
%   | then return 0.32300119034950237;  // std dev = 0.019, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return -0.0926667273159864;  // std dev = 6.79e-05, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #6
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordvenue(D, C) )
%   then if ( title(E, B), venue(E, D) )
%   | then if ( samebib(E, F), title(F, A) )
%   | | then return 0.2551593808193205;  // std dev = 0.002, 96.000 (wgt'ed) examples reached here.  /* #pos=96 */
%   | | else return -0.08632001858481984;  // std dev = 0.281, 206.000 (wgt'ed) examples reached here.  /* #neg=206 */
%   | else return 0.24692714516757797;  // std dev = 0.152, 13.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   else if ( haswordtitle(A, G), haswordtitle(B, G) )
%   | then return 0.25737494818509205;  // std dev = 0.018, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return -0.08513563990483575;  // std dev = 0.000132, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #7
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordvenue(D, C) )
%   then if ( title(E, B), venue(E, D) )
%   | then if ( samebib(E, F), title(F, A) )
%   | | then return 0.20974863564756707;  // std dev = 0.001, 96.000 (wgt'ed) examples reached here.  /* #pos=96 */
%   | | else return -0.07978117896841946;  // std dev = 0.268, 206.000 (wgt'ed) examples reached here.  /* #neg=206 */
%   | else return 0.1984301653893709;  // std dev = 0.153, 13.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   else if ( haswordtitle(A, G), haswordtitle(B, G) )
%   | then return 0.21132605742777538;  // std dev = 0.016, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return -0.078734582391261;  // std dev = 0.000123, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #8
% FOR sametitle(A, B):
%   if ( haswordtitle(B, C), haswordvenue(D, C) )
%   then if ( title(E, A), venue(E, D) )
%   | then if ( samebib(E, F), title(F, B) )
%   | | then return 0.17709187451440622;  // std dev = 0.001, 96.000 (wgt'ed) examples reached here.  /* #pos=96 */
%   | | else return -0.07437447622766132;  // std dev = 0.303, 206.000 (wgt'ed) examples reached here.  /* #neg=206 */
%   | else return 0.16654646394404693;  // std dev = 0.143, 13.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   else if ( haswordtitle(A, G), haswordtitle(B, G) )
%   | then return 0.17860389115331468;  // std dev = 0.016, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return -0.07318387632889668;  // std dev = 0.000178, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #9
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordvenue(D, C) )
%   then if ( title(E, B), venue(E, D) )
%   | then if ( samebib(E, F), title(F, A) )
%   | | then return 0.1527365222925299;  // std dev = 0.001, 96.000 (wgt'ed) examples reached here.  /* #pos=96 */
%   | | else return -0.06948022626133438;  // std dev = 0.298, 206.000 (wgt'ed) examples reached here.  /* #neg=206 */
%   | else return 0.140130722639821;  // std dev = 0.144, 13.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   else if ( haswordtitle(A, G), haswordtitle(B, G) )
%   | then return 0.15395388231852367;  // std dev = 0.014, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return -0.06837135060627689;  // std dev = 0.000170, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #10
% FOR sametitle(A, B):
%   if ( haswordtitle(B, C), haswordvenue(D, C) )
%   then if ( title(E, A), venue(E, D) )
%   | then if ( samebib(E, F), title(F, B) )
%   | | then return 0.13400327537981715;  // std dev = 0.000949, 96.000 (wgt'ed) examples reached here.  /* #pos=96 */
%   | | else return -0.06535000597888804;  // std dev = 0.328, 206.000 (wgt'ed) examples reached here.  /* #neg=206 */
%   | else return 0.12227045775978468;  // std dev = 0.137, 13.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   else if ( haswordtitle(A, G), haswordtitle(B, G) )
%   | then return 0.13527651275535196;  // std dev = 0.014, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return -0.06412161142768061;  // std dev = 0.000212, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */


Results
   AUC ROC   = 0.986433
   AUC PR    = 0.987219
   CLL	      = -0.161061
   Precision = 0.986038 at threshold = 0.5
   Recall    = 0.965812
   F1        = 0.97582


Total learning time: 406.56392788887024 seconds
Total inference time: 57.801 seconds
AUC ROC: 0.986433


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.088329
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 5.723 seconds
Parameter learned model CLL: -0.088329


Structure after Parameter Learning
[['sametitle(A, B)', {'': 'haswordtitle(A, C), haswordvenue(D, C)', 'true': 'title(E, B), venue(E, D)', 'true,true': 'samebib(E, F), title(F, A)', 'false': 'haswordtitle(A, G), haswordtitle(B, G)'}, {'true,true,true': [3.37e-07, 0, 96], 'true,true,false': [0.0, 206, 0], 'true,false': [0.266, 1, 12], 'false,true': [0.0, 0, 5], 'false,false': [0.0, 3, 0]}], ['sametitle(A, B)', {'': 'haswordtitle(B, C), haswordvenue(D, C)', 'true': 'title(E, A), venue(E, D)', 'true,true': 'samebib(E, F), title(F, B)', 'false': 'haswordtitle(A, G), haswordtitle(B, G)'}, {'true,true,true': [1.88e-07, 0, 96], 'true,true,false': [0.139, 206, 0], 'true,false': [0.229, 1, 12], 'false,true': [0.014, 0, 5], 'false,false': [0.0, 3, 0]}], ['sametitle(A, B)', {'': 'haswordtitle(B, C), haswordvenue(D, C)', 'true': 'title(E, A), venue(E, D)', 'true,true': 'samebib(E, F), title(F, B)', 'false': 'haswordtitle(A, G), haswordtitle(B, G)'}, {'true,true,true': [4.09e-07, 0, 96], 'true,true,false': [0.129, 206, 0], 'true,false': [0.214, 1, 12], 'false,true': [0.017, 0, 5], 'false,false': [2.63e-09, 3, 0]}], ['sametitle(A, B)', {'': 'haswordtitle(A, C), haswordvenue(D, C)', 'true': 'title(E, B), venue(E, D)', 'true,true': 'samebib(E, F), title(F, A)', 'false': 'haswordtitle(A, G), haswordtitle(B, G)'}, {'true,true,true': [0.001, 0, 96], 'true,true,false': [0.219, 206, 0], 'true,false': [0.18, 1, 12], 'false,true': [0.019, 0, 5], 'false,false': [9.22e-05, 3, 0]}], ['sametitle(A, B)', {'': 'haswordtitle(B, C), haswordvenue(D, C)', 'true': 'title(E, A), venue(E, D)', 'true,true': 'samebib(E, F), title(F, B)', 'false': 'haswordtitle(A, G), haswordtitle(B, G)'}, {'true,true,true': [0.000701, 0, 96], 'true,true,false': [0.205, 206, 0], 'true,false': [0.175, 1, 12], 'false,true': [0.019, 0, 5], 'false,false': [6.79e-05, 3, 0]}], ['sametitle(A, B)', {'': 'haswordtitle(A, C), haswordvenue(D, C)', 'true': 'title(E, B), venue(E, D)', 'true,true': 'samebib(E, F), title(F, A)', 'false': 'haswordtitle(A, G), haswordtitle(B, G)'}, {'true,true,true': [0.002, 0, 96], 'true,true,false': [0.281, 206, 0], 'true,false': [0.152, 1, 12], 'false,true': [0.018, 0, 5], 'false,false': [0.000132, 3, 0]}], ['sametitle(A, B)', {'': 'haswordtitle(A, C), haswordvenue(D, C)', 'true': 'title(E, B), venue(E, D)', 'true,true': 'samebib(E, F), title(F, A)', 'false': 'haswordtitle(A, G), haswordtitle(B, G)'}, {'true,true,true': [0.001, 0, 96], 'true,true,false': [0.268, 206, 0], 'true,false': [0.153, 1, 12], 'false,true': [0.016, 0, 5], 'false,false': [0.000123, 3, 0]}], ['sametitle(A, B)', {'': 'haswordtitle(B, C), haswordvenue(D, C)', 'true': 'title(E, A), venue(E, D)', 'true,true': 'samebib(E, F), title(F, B)', 'false': 'haswordtitle(A, G), haswordtitle(B, G)'}, {'true,true,true': [0.001, 0, 96], 'true,true,false': [0.303, 206, 0], 'true,false': [0.143, 1, 12], 'false,true': [0.016, 0, 5], 'false,false': [0.000178, 3, 0]}], ['sametitle(A, B)', {'': 'haswordtitle(A, C), haswordvenue(D, C)', 'true': 'title(E, B), venue(E, D)', 'true,true': 'samebib(E, F), title(F, A)', 'false': 'haswordtitle(A, G), haswordtitle(B, G)'}, {'true,true,true': [0.001, 0, 96], 'true,true,false': [0.298, 206, 0], 'true,false': [0.144, 1, 12], 'false,true': [0.014, 0, 5], 'false,false': [0.00017, 3, 0]}], ['sametitle(A, B)', {'': 'haswordtitle(B, C), haswordvenue(D, C)', 'true': 'title(E, A), venue(E, D)', 'true,true': 'samebib(E, F), title(F, B)', 'false': 'haswordtitle(A, G), haswordtitle(B, G)'}, {'true,true,true': [0.000949, 0, 96], 'true,true,false': [0.328, 206, 0], 'true,false': [0.137, 1, 12], 'false,true': [0.014, 0, 5], 'false,false': [0.000212, 3, 0]}]]
[{'': [0.225306122448982, 0.23437499999999983], 'false': [0.0, 0.0], 'true': [0.21683259506162156, 0.07100591715976314], 'true,true': [1.1842378929335002e-15, -2.3713501496848003e-16]}, {'': [0.16176212761460199, 0.16855140989000014], 'false': [3.7260457621890454e-05, 0.0], 'true': [0.15510708635760087, 0.05239895620925205], 'true,true': [3.7007434154171886e-16, 9.444262217627639e-05]}, {'': [0.10189087629019086, 0.10547029292289227], 'false': [5.722963035768025e-05, 2.3129646346357427e-18], 'true': [0.09688107090960915, 0.04591092331542294], 'true,true': [1.7393494052460785e-15, 8.060589692388903e-05]}, {'': [0.06230102029880341, 0.06398196220226596], 'false': [7.526624150901994e-05, 2.835326529115889e-09], 'true': [0.05880013363106616, 0.032537457324748435], 'true,true': [2.2520403727040634e-08, 0.0002319860432165658]}, {'': [0.03994170768432087, 0.04053809176706849], 'false': [6.851423939924217e-05, 1.5362900245933602e-09], 'true': [0.03734269921975646, 0.03067519742922414], 'true,true': [5.114688524561946e-09, 0.00020492018359273003]}, {'': [0.02744324376802971, 0.027535645658674522], 'false': [6.446595237522557e-05, 5.823105779974765e-09], 'true': [0.02554631309280236, 0.023105141740417737], 'true,true': [2.600532208093161e-08, 0.0003838779237143085]}, {'': [0.019992707745681085, 0.019749993438571797], 'true': [0.018414205588012485, 0.02343172132428856], 'false': [4.929593196296156e-05, 5.050276891127581e-09], 'true,true': [1.9765987587424167e-08, 0.00034841711241824676]}, {'': [0.015309178090203863, 0.014889081404400331], 'true': [0.01401599993671357, 0.02050420565492502], 'false': [4.86189475478016e-05, 1.0590606955065049e-08], 'true,true': [1.0765525628360825e-08, 0.0004464275047850946]}, {'': [0.01217149420054837, 0.011608416982923371], 'true': [0.011001696558603717, 0.02083049336655289], 'false': [3.77704470939072e-05, 9.629055721174784e-09], 'true,true': [1.675850241911192e-08, 0.00043164926025584865]}, {'': [0.009984896754920137, 0.009343035381287595], 'true': [0.008973333447680878, 0.018683381977210745], 'false': [3.89931506608765e-05, 1.497751207490498e-08], 'true,true': [9.38242025276074e-09, 0.0005219437355191843]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;sametitle(A, B) :- haswordtitle(A, C), haswordvenue(D, C).;true;true
0;true;title(E, B), venue(E, D).;true;true
0;true,true;samebib(E, F), title(F, A).;true;true
0;false;haswordtitle(A, G), haswordtitle(B, G).;true;true
1;;sametitle(A, B) :- haswordtitle(B, C), haswordvenue(D, C).;true;true
1;true;title(E, A), venue(E, D).;true;true
1;true,true;samebib(E, F), title(F, B).;true;true
1;false;haswordtitle(A, G), haswordtitle(B, G).;true;true
2;;sametitle(A, B) :- haswordtitle(B, C), haswordvenue(D, C).;true;true
2;true;title(E, A), venue(E, D).;true;true
2;true,true;samebib(E, F), title(F, B).;true;true
2;false;haswordtitle(A, G), haswordtitle(B, G).;true;true
3;;sametitle(A, B) :- haswordtitle(A, C), haswordvenue(D, C).;true;true
3;true;title(E, B), venue(E, D).;true;true
3;true,true;samebib(E, F), title(F, A).;true;true
3;false;haswordtitle(A, G), haswordtitle(B, G).;true;true
4;;sametitle(A, B) :- haswordtitle(B, C), haswordvenue(D, C).;true;true
4;true;title(E, A), venue(E, D).;true;true
4;true,true;samebib(E, F), title(F, B).;true;true
4;false;haswordtitle(A, G), haswordtitle(B, G).;true;true
5;;sametitle(A, B) :- haswordtitle(A, C), haswordvenue(D, C).;true;true
5;true;title(E, B), venue(E, D).;true;true
5;true,true;samebib(E, F), title(F, A).;true;true
5;false;haswordtitle(A, G), haswordtitle(B, G).;true;true
6;;sametitle(A, B) :- haswordtitle(A, C), haswordvenue(D, C).;true;true
6;true;title(E, B), venue(E, D).;true;true
6;true,true;samebib(E, F), title(F, A).;true;true
6;false;haswordtitle(A, G), haswordtitle(B, G).;true;true
7;;sametitle(A, B) :- haswordtitle(B, C), haswordvenue(D, C).;true;true
7;true;title(E, A), venue(E, D).;true;true
7;true,true;samebib(E, F), title(F, B).;true;true
7;false;haswordtitle(A, G), haswordtitle(B, G).;true;true
8;;sametitle(A, B) :- haswordtitle(A, C), haswordvenue(D, C).;true;true
8;true;title(E, B), venue(E, D).;true;true
8;true,true;samebib(E, F), title(F, A).;true;true
8;false;haswordtitle(A, G), haswordtitle(B, G).;true;true
9;;sametitle(A, B) :- haswordtitle(B, C), haswordvenue(D, C).;true;true
9;true;title(E, A), venue(E, D).;true;true
9;true,true;samebib(E, F), title(F, B).;true;true
9;false;haswordtitle(A, G), haswordtitle(B, G).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordvenue(D, C) )
%   then if ( title(E, B), venue(E, D) )
%   | then if ( samebib(E, F), title(F, A) )
%   | | then return 0.8581489350995115;  // std dev = 3.37e-07, 96.000 (wgt'ed) examples reached here.  /* #pos=96 */
%   | | else return -0.14185106490048843;  // std dev = 0.000, 206.000 (wgt'ed) examples reached here.  /* #neg=206 */
%   | else return 0.7812258581764353;  // std dev = 0.266, 13.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   else if ( haswordtitle(A, G), haswordtitle(B, G) )
%   | then return 0.8581489350995122;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return -0.14185106490048777;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #2
% FOR sametitle(A, B):
%   if ( haswordtitle(B, C), haswordvenue(D, C) )
%   then if ( title(E, A), venue(E, D) )
%   | then if ( samebib(E, F), title(F, B) )
%   | | then return 0.7194734122109541;  // std dev = 1.88e-07, 96.000 (wgt'ed) examples reached here.  /* #pos=96 */
%   | | else return -0.12612338422298822;  // std dev = 0.139, 206.000 (wgt'ed) examples reached here.  /* #neg=206 */
%   | else return 0.6673923081472714;  // std dev = 0.229, 13.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   else if ( haswordtitle(A, G), haswordtitle(B, G) )
%   | then return 0.7225254794457083;  // std dev = 0.014, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return -0.12544463852839136;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #3
% FOR sametitle(A, B):
%   if ( haswordtitle(B, C), haswordvenue(D, C) )
%   then if ( title(E, A), venue(E, D) )
%   | then if ( samebib(E, F), title(F, B) )
%   | | then return 0.5553664367462835;  // std dev = 4.09e-07, 96.000 (wgt'ed) examples reached here.  /* #pos=96 */
%   | | else return -0.11287578031157806;  // std dev = 0.129, 206.000 (wgt'ed) examples reached here.  /* #neg=206 */
%   | else return 0.5235516292488022;  // std dev = 0.214, 13.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   else if ( haswordtitle(A, G), haswordtitle(B, G) )
%   | then return 0.5583951624779799;  // std dev = 0.017, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return -0.11231637819360636;  // std dev = 2.63e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #4
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordvenue(D, C) )
%   then if ( title(E, B), venue(E, D) )
%   | then if ( samebib(E, F), title(F, A) )
%   | | then return 0.41749818750685663;  // std dev = 0.001, 96.000 (wgt'ed) examples reached here.  /* #pos=96 */
%   | | else return -0.1025477100747007;  // std dev = 0.219, 206.000 (wgt'ed) examples reached here.  /* #neg=206 */
%   | else return 0.40316752663743777;  // std dev = 0.180, 13.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   else if ( haswordtitle(A, G), haswordtitle(B, G) )
%   | then return 0.42073337754073636;  // std dev = 0.019, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return -0.10155867761849639;  // std dev = 9.22e-05, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #5
% FOR sametitle(A, B):
%   if ( haswordtitle(B, C), haswordvenue(D, C) )
%   then if ( title(E, A), venue(E, D) )
%   | then if ( samebib(E, F), title(F, B) )
%   | | then return 0.32070786392391376;  // std dev = 0.000701, 96.000 (wgt'ed) examples reached here.  /* #pos=96 */
%   | | else return -0.09350751227163409;  // std dev = 0.205, 206.000 (wgt'ed) examples reached here.  /* #neg=206 */
%   | else return 0.30768423831114233;  // std dev = 0.175, 13.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   else if ( haswordtitle(A, G), haswordtitle(B, G) )
%   | then return 0.32300119034950237;  // std dev = 0.019, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return -0.0926667273159864;  // std dev = 6.79e-05, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #6
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordvenue(D, C) )
%   then if ( title(E, B), venue(E, D) )
%   | then if ( samebib(E, F), title(F, A) )
%   | | then return 0.2551593808193205;  // std dev = 0.002, 96.000 (wgt'ed) examples reached here.  /* #pos=96 */
%   | | else return -0.08632001858481984;  // std dev = 0.281, 206.000 (wgt'ed) examples reached here.  /* #neg=206 */
%   | else return 0.24692714516757797;  // std dev = 0.152, 13.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   else if ( haswordtitle(A, G), haswordtitle(B, G) )
%   | then return 0.25737494818509205;  // std dev = 0.018, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return -0.08513563990483575;  // std dev = 0.000132, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #7
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordvenue(D, C) )
%   then if ( title(E, B), venue(E, D) )
%   | then if ( samebib(E, F), title(F, A) )
%   | | then return 0.20974863564756707;  // std dev = 0.001, 96.000 (wgt'ed) examples reached here.  /* #pos=96 */
%   | | else return -0.07978117896841946;  // std dev = 0.268, 206.000 (wgt'ed) examples reached here.  /* #neg=206 */
%   | else return 0.1984301653893709;  // std dev = 0.153, 13.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   else if ( haswordtitle(A, G), haswordtitle(B, G) )
%   | then return 0.21132605742777538;  // std dev = 0.016, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return -0.078734582391261;  // std dev = 0.000123, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #8
% FOR sametitle(A, B):
%   if ( haswordtitle(B, C), haswordvenue(D, C) )
%   then if ( title(E, A), venue(E, D) )
%   | then if ( samebib(E, F), title(F, B) )
%   | | then return 0.17709187451440622;  // std dev = 0.001, 96.000 (wgt'ed) examples reached here.  /* #pos=96 */
%   | | else return -0.07437447622766132;  // std dev = 0.303, 206.000 (wgt'ed) examples reached here.  /* #neg=206 */
%   | else return 0.16654646394404693;  // std dev = 0.143, 13.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   else if ( haswordtitle(A, G), haswordtitle(B, G) )
%   | then return 0.17860389115331468;  // std dev = 0.016, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return -0.07318387632889668;  // std dev = 0.000178, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #9
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordvenue(D, C) )
%   then if ( title(E, B), venue(E, D) )
%   | then if ( samebib(E, F), title(F, A) )
%   | | then return 0.1527365222925299;  // std dev = 0.001, 96.000 (wgt'ed) examples reached here.  /* #pos=96 */
%   | | else return -0.06948022626133438;  // std dev = 0.298, 206.000 (wgt'ed) examples reached here.  /* #neg=206 */
%   | else return 0.140130722639821;  // std dev = 0.144, 13.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   else if ( haswordtitle(A, G), haswordtitle(B, G) )
%   | then return 0.15395388231852367;  // std dev = 0.014, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return -0.06837135060627689;  // std dev = 0.000170, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #10
% FOR sametitle(A, B):
%   if ( haswordtitle(B, C), haswordvenue(D, C) )
%   then if ( title(E, A), venue(E, D) )
%   | then if ( samebib(E, F), title(F, B) )
%   | | then return 0.13400327537981715;  // std dev = 0.000949, 96.000 (wgt'ed) examples reached here.  /* #pos=96 */
%   | | else return -0.06535000597888804;  // std dev = 0.328, 206.000 (wgt'ed) examples reached here.  /* #neg=206 */
%   | else return 0.12227045775978468;  // std dev = 0.137, 13.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   else if ( haswordtitle(A, G), haswordtitle(B, G) )
%   | then return 0.13527651275535196;  // std dev = 0.014, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return -0.06412161142768061;  // std dev = 0.000212, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */


Results
   AUC ROC   = 0.986433
   AUC PR    = 0.987219
   CLL	      = -0.161061
   Precision = 0.986038 at threshold = 0.5
   Recall    = 0.965812
   F1        = 0.97582


Total learning time: 401.22124791145325 seconds
Total inference time: 59.929 seconds
AUC ROC: 0.986433


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.088329
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 5.843 seconds
Refined model CLL: -0.088329


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.986433
   AUC PR    = 0.987219
   CLL	      = -0.161061
   Precision = 0.986038 at threshold = 0.5
   Recall    = 0.965812
   F1        = 0.97582


Total learning time: 819.3511758003234 seconds
Total inference time: 57.801 seconds
AUC ROC: 0.986433
Total revision time: 819.3511758003234
Best scored revision CLL: -0.088329


Dataset: 6_imdb_cora, Fold: 3, Type: Transfer (trRDN-B), Time: 03:19:58
{'AUC ROC': 0.986433, 'AUC PR': 0.987219, 'CLL': -0.161061, 'Precision': [0.986038, 0.5], 'Recall': 0.965812, 'F1': 0.97582, 'Learning time': 819.3511758003234, 'Inference time': 57.801, 'parameter': {'AUC ROC': 0.986433, 'AUC PR': 0.987219, 'CLL': -0.161061, 'Precision': [0.986038, 0.5], 'Recall': 0.965812, 'F1': 0.97582, 'Learning time': 406.56392788887024, 'Inference time': 57.801}}


WILL Produced-Tree #1
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordvenue(D, C) )
%   then if ( title(E, B), venue(E, D) )
%   | then if ( samebib(E, F), title(F, A) )
%   | | then return 0.8581489350995115;  // std dev = 3.37e-07, 96.000 (wgt'ed) examples reached here.  /* #pos=96 */
%   | | else return -0.14185106490048843;  // std dev = 0.000, 206.000 (wgt'ed) examples reached here.  /* #neg=206 */
%   | else return 0.7812258581764353;  // std dev = 0.266, 13.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   else if ( haswordtitle(A, G), haswordtitle(B, G) )
%   | then return 0.8581489350995122;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return -0.14185106490048777;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #2
% FOR sametitle(A, B):
%   if ( haswordtitle(B, C), haswordvenue(D, C) )
%   then if ( title(E, A), venue(E, D) )
%   | then if ( samebib(E, F), title(F, B) )
%   | | then return 0.7194734122109541;  // std dev = 1.88e-07, 96.000 (wgt'ed) examples reached here.  /* #pos=96 */
%   | | else return -0.12612338422298822;  // std dev = 0.139, 206.000 (wgt'ed) examples reached here.  /* #neg=206 */
%   | else return 0.6673923081472714;  // std dev = 0.229, 13.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   else if ( haswordtitle(A, G), haswordtitle(B, G) )
%   | then return 0.7225254794457083;  // std dev = 0.014, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return -0.12544463852839136;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #3
% FOR sametitle(A, B):
%   if ( haswordtitle(B, C), haswordvenue(D, C) )
%   then if ( title(E, A), venue(E, D) )
%   | then if ( samebib(E, F), title(F, B) )
%   | | then return 0.5553664367462835;  // std dev = 4.09e-07, 96.000 (wgt'ed) examples reached here.  /* #pos=96 */
%   | | else return -0.11287578031157806;  // std dev = 0.129, 206.000 (wgt'ed) examples reached here.  /* #neg=206 */
%   | else return 0.5235516292488022;  // std dev = 0.214, 13.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   else if ( haswordtitle(A, G), haswordtitle(B, G) )
%   | then return 0.5583951624779799;  // std dev = 0.017, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return -0.11231637819360636;  // std dev = 2.63e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #4
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordvenue(D, C) )
%   then if ( title(E, B), venue(E, D) )
%   | then if ( samebib(E, F), title(F, A) )
%   | | then return 0.41749818750685663;  // std dev = 0.001, 96.000 (wgt'ed) examples reached here.  /* #pos=96 */
%   | | else return -0.1025477100747007;  // std dev = 0.219, 206.000 (wgt'ed) examples reached here.  /* #neg=206 */
%   | else return 0.40316752663743777;  // std dev = 0.180, 13.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   else if ( haswordtitle(A, G), haswordtitle(B, G) )
%   | then return 0.42073337754073636;  // std dev = 0.019, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return -0.10155867761849639;  // std dev = 9.22e-05, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #5
% FOR sametitle(A, B):
%   if ( haswordtitle(B, C), haswordvenue(D, C) )
%   then if ( title(E, A), venue(E, D) )
%   | then if ( samebib(E, F), title(F, B) )
%   | | then return 0.32070786392391376;  // std dev = 0.000701, 96.000 (wgt'ed) examples reached here.  /* #pos=96 */
%   | | else return -0.09350751227163409;  // std dev = 0.205, 206.000 (wgt'ed) examples reached here.  /* #neg=206 */
%   | else return 0.30768423831114233;  // std dev = 0.175, 13.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   else if ( haswordtitle(A, G), haswordtitle(B, G) )
%   | then return 0.32300119034950237;  // std dev = 0.019, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return -0.0926667273159864;  // std dev = 6.79e-05, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #6
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordvenue(D, C) )
%   then if ( title(E, B), venue(E, D) )
%   | then if ( samebib(E, F), title(F, A) )
%   | | then return 0.2551593808193205;  // std dev = 0.002, 96.000 (wgt'ed) examples reached here.  /* #pos=96 */
%   | | else return -0.08632001858481984;  // std dev = 0.281, 206.000 (wgt'ed) examples reached here.  /* #neg=206 */
%   | else return 0.24692714516757797;  // std dev = 0.152, 13.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   else if ( haswordtitle(A, G), haswordtitle(B, G) )
%   | then return 0.25737494818509205;  // std dev = 0.018, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return -0.08513563990483575;  // std dev = 0.000132, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #7
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordvenue(D, C) )
%   then if ( title(E, B), venue(E, D) )
%   | then if ( samebib(E, F), title(F, A) )
%   | | then return 0.20974863564756707;  // std dev = 0.001, 96.000 (wgt'ed) examples reached here.  /* #pos=96 */
%   | | else return -0.07978117896841946;  // std dev = 0.268, 206.000 (wgt'ed) examples reached here.  /* #neg=206 */
%   | else return 0.1984301653893709;  // std dev = 0.153, 13.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   else if ( haswordtitle(A, G), haswordtitle(B, G) )
%   | then return 0.21132605742777538;  // std dev = 0.016, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return -0.078734582391261;  // std dev = 0.000123, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #8
% FOR sametitle(A, B):
%   if ( haswordtitle(B, C), haswordvenue(D, C) )
%   then if ( title(E, A), venue(E, D) )
%   | then if ( samebib(E, F), title(F, B) )
%   | | then return 0.17709187451440622;  // std dev = 0.001, 96.000 (wgt'ed) examples reached here.  /* #pos=96 */
%   | | else return -0.07437447622766132;  // std dev = 0.303, 206.000 (wgt'ed) examples reached here.  /* #neg=206 */
%   | else return 0.16654646394404693;  // std dev = 0.143, 13.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   else if ( haswordtitle(A, G), haswordtitle(B, G) )
%   | then return 0.17860389115331468;  // std dev = 0.016, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return -0.07318387632889668;  // std dev = 0.000178, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #9
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordvenue(D, C) )
%   then if ( title(E, B), venue(E, D) )
%   | then if ( samebib(E, F), title(F, A) )
%   | | then return 0.1527365222925299;  // std dev = 0.001, 96.000 (wgt'ed) examples reached here.  /* #pos=96 */
%   | | else return -0.06948022626133438;  // std dev = 0.298, 206.000 (wgt'ed) examples reached here.  /* #neg=206 */
%   | else return 0.140130722639821;  // std dev = 0.144, 13.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   else if ( haswordtitle(A, G), haswordtitle(B, G) )
%   | then return 0.15395388231852367;  // std dev = 0.014, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return -0.06837135060627689;  // std dev = 0.000170, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #10
% FOR sametitle(A, B):
%   if ( haswordtitle(B, C), haswordvenue(D, C) )
%   then if ( title(E, A), venue(E, D) )
%   | then if ( samebib(E, F), title(F, B) )
%   | | then return 0.13400327537981715;  // std dev = 0.000949, 96.000 (wgt'ed) examples reached here.  /* #pos=96 */
%   | | else return -0.06535000597888804;  // std dev = 0.328, 206.000 (wgt'ed) examples reached here.  /* #neg=206 */
%   | else return 0.12227045775978468;  // std dev = 0.137, 13.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   else if ( haswordtitle(A, G), haswordtitle(B, G) )
%   | then return 0.13527651275535196;  // std dev = 0.014, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return -0.06412161142768061;  // std dev = 0.000212, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */


Results
   AUC ROC   = 0.986433
   AUC PR    = 0.987219
   CLL	      = -0.161061
   Precision = 0.986038 at threshold = 0.5
   Recall    = 0.965812
   F1        = 0.97582


Total learning time: 401.303120136261 seconds
Total inference time: 61.583 seconds
AUC ROC: 0.986433


Dataset: 6_imdb_cora, Fold: 3, Type: Scratch (RDN-B), Time: 03:27:41
{'AUC ROC': 0.986433, 'AUC PR': 0.987219, 'CLL': -0.161061, 'Precision': [0.986038, 0.5], 'Recall': 0.965812, 'F1': 0.97582, 'Learning time': 401.303120136261, 'Inference time': 61.583}


Starting fold 4

Target train facts examples: 8129
Target train pos examples: 129
Target train neg examples: 70

Target test facts examples: 34429
Target test pos  examples: 569
Target test neg examples: 646

******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


WILL Produced-Tree #1
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordauthor(D, C) )
%   then if ( haswordtitle(B, C) )
%   | then return 0.8581489350995118;  // std dev = 1.46e-07, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | else return 0.088918165868743;  // std dev = 0.421, 13.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=3 */
%   else return 0.48314893509950974;  // std dev = 0.484, 160.000 (wgt'ed) examples reached here.  /* #neg=60 #pos=100 */
WILL Produced-Tree #2
% FOR sametitle(A, B):
%   return 0;  // std dev = 0.468, 199.000 (wgt'ed) examples reached here.  /* #neg=70 #pos=129 */
WILL Produced-Tree #3
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordauthor(D, C) )
%   then if ( haswordtitle(B, C) )
%   | then return 0.7194734122109545;  // std dev = 0.000, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | else return 0.07774578121441031;  // std dev = 0.421, 13.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=3 */
%   else return 0.4136573287083117;  // std dev = 0.484, 160.000 (wgt'ed) examples reached here.  /* #neg=60 #pos=100 */
WILL Produced-Tree #4
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordauthor(D, C) )
%   then if ( haswordtitle(B, C) )
%   | then return 0.5553664367462846;  // std dev = 0.000, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | else return 0.06739536297660921;  // std dev = 0.421, 13.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=3 */
%   else return 0.3366053739648672;  // std dev = 0.484, 160.000 (wgt'ed) examples reached here.  /* #neg=60 #pos=100 */
WILL Produced-Tree #5
% FOR sametitle(A, B):
%   if ( haswordtitle(B, C), haswordauthor(D, C) )
%   then if ( haswordtitle(A, C) )
%   | then return 0.41751358415831;  // std dev = 0.000, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | else return -0.13125518378207865;  // std dev = 0.421, 13.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=3 */
%   else if ( haswordtitle(A, E), haswordauthor(F, E) )
%   | then return 0.0579733820773872;  // std dev = 0.421, 13.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=3 */
%   | else return 0.29783953102692334;  // std dev = 0.474, 147.000 (wgt'ed) examples reached here.  /* #neg=50 #pos=97 */
WILL Produced-Tree #6
% FOR sametitle(A, B):
%   if ( haswordtitle(B, C), haswordauthor(D, C) )
%   then if ( haswordtitle(A, C) )
%   | then return 0.3207118471601494;  // std dev = 0.000, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | else return -0.1015212839571254;  // std dev = 0.421, 13.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=3 */
%   else if ( haswordtitle(A, E), haswordauthor(F, E) )
%   | then return 0.049528997355293175;  // std dev = 0.421, 13.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=3 */
%   | else return 0.22664966468094952;  // std dev = 0.474, 147.000 (wgt'ed) examples reached here.  /* #neg=50 #pos=97 */
WILL Produced-Tree #7
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordauthor(D, C) )
%   then if ( haswordtitle(B, C) )
%   | then return 0.25517224256948956;  // std dev = 0.000, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | else return 0.04206293300387109;  // std dev = 0.421, 13.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=3 */
%   else if ( haswordtitle(B, E), haswordauthor(F, E) )
%   | then return -0.07939217352445335;  // std dev = 0.421, 13.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=3 */
%   | else return 0.170387183024602;  // std dev = 0.474, 147.000 (wgt'ed) examples reached here.  /* #neg=50 #pos=97 */
WILL Produced-Tree #8
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordauthor(D, C) )
%   then if ( haswordtitle(B, C) )
%   | then return 0.2097577156325355;  // std dev = 2.11e-08, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | else return 0.03553879177151896;  // std dev = 0.421, 13.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=3 */
%   else return 0.11235756394310177;  // std dev = 0.473, 160.000 (wgt'ed) examples reached here.  /* #neg=60 #pos=100 */
WILL Produced-Tree #9
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordauthor(D, C) )
%   then if ( haswordtitle(B, C) )
%   | then return 0.17709649774527747;  // std dev = 0.000, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | else return 0.029894556746069525;  // std dev = 0.421, 13.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=3 */
%   else if ( haswordtitle(B, E), haswordauthor(F, E) )
%   | then return -0.086489263185424;  // std dev = 0.421, 13.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=3 */
%   | else return 0.0999912092963539;  // std dev = 0.474, 147.000 (wgt'ed) examples reached here.  /* #neg=50 #pos=97 */
WILL Produced-Tree #10
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordauthor(D, C) )
%   then if ( haswordtitle(B, C) )
%   | then return 0.15274385809367083;  // std dev = 0.000, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | else return 0.025052826506284376;  // std dev = 0.421, 13.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=3 */
%   else if ( haswordtitle(B, E), haswordauthor(F, E) )
%   | then return -0.06805800673893331;  // std dev = 0.421, 13.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=3 */
%   | else return 0.075518747098135;  // std dev = 0.474, 147.000 (wgt'ed) examples reached here.  /* #neg=50 #pos=97 */


Results
   AUC ROC   = 0.746454
   AUC PR    = 0.6958
   CLL	      = -0.600876
   Precision = 0.580541 at threshold = 0.5
   Recall    = 0.943761
   F1        = 0.718876


Total learning time: 9.110258102416992 seconds
Total inference time: 2.3 seconds
AUC ROC: 0.746454


Results scoring model
   AUC ROC   = 0.691584
   AUC PR    = 0.815016
   CLL	      = -0.568706
   Precision = 0.710983 at threshold = 0.5
   Recall    = 0.953488
   F1        = 0.81457


Total scoring time: 1.242 seconds
Parameter learned model CLL: -0.568706


Structure after Parameter Learning
[['sametitle(A, B)', {'': 'haswordtitle(A, C), haswordauthor(D, C)', 'true': 'haswordtitle(B, C)'}, {'true,true': [1.46e-07, 0, 26], 'true,false': [0.421, 10, 3], 'false': [0.484, 60, 100]}], ['sametitle(A, B)', {}, {}], ['sametitle(A, B)', {'': 'haswordtitle(A, C), haswordauthor(D, C)', 'true': 'haswordtitle(B, C)'}, {'true,true': [0.0, 0, 26], 'true,false': [0.421, 10, 3], 'false': [0.484, 60, 100]}], ['sametitle(A, B)', {'': 'haswordtitle(A, C), haswordauthor(D, C)', 'true': 'haswordtitle(B, C)'}, {'true,true': [0.0, 0, 26], 'true,false': [0.421, 10, 3], 'false': [0.484, 60, 100]}], ['sametitle(A, B)', {'': 'haswordtitle(B, C), haswordauthor(D, C)', 'true': 'haswordtitle(A, C)', 'false': 'haswordtitle(A, E), haswordauthor(F, E)'}, {'true,true': [0.0, 0, 26], 'true,false': [0.421, 10, 3], 'false,true': [0.421, 10, 3], 'false,false': [0.474, 50, 97]}], ['sametitle(A, B)', {'': 'haswordtitle(B, C), haswordauthor(D, C)', 'true': 'haswordtitle(A, C)', 'false': 'haswordtitle(A, E), haswordauthor(F, E)'}, {'true,true': [0.0, 0, 26], 'true,false': [0.421, 10, 3], 'false,true': [0.421, 10, 3], 'false,false': [0.474, 50, 97]}], ['sametitle(A, B)', {'': 'haswordtitle(A, C), haswordauthor(D, C)', 'true': 'haswordtitle(B, C)', 'false': 'haswordtitle(B, E), haswordauthor(F, E)'}, {'true,true': [0.0, 0, 26], 'true,false': [0.421, 10, 3], 'false,true': [0.421, 10, 3], 'false,false': [0.474, 50, 97]}], ['sametitle(A, B)', {'': 'haswordtitle(A, C), haswordauthor(D, C)', 'true': 'haswordtitle(B, C)'}, {'true,true': [2.11e-08, 0, 26], 'true,false': [0.421, 10, 3], 'false': [0.473, 60, 100]}], ['sametitle(A, B)', {'': 'haswordtitle(A, C), haswordauthor(D, C)', 'true': 'haswordtitle(B, C)', 'false': 'haswordtitle(B, E), haswordauthor(F, E)'}, {'true,true': [0.0, 0, 26], 'true,false': [0.421, 10, 3], 'false,true': [0.421, 10, 3], 'false,false': [0.474, 50, 97]}], ['sametitle(A, B)', {'': 'haswordtitle(A, C), haswordauthor(D, C)', 'true': 'haswordtitle(B, C)', 'false': 'haswordtitle(B, E), haswordauthor(F, E)'}, {'true,true': [0.0, 0, 26], 'true,false': [0.421, 10, 3], 'false,true': [0.421, 10, 3], 'false,false': [0.474, 50, 97]}]]
[{'': [0.19066403681788444, 0.2343750000000029], 'true': [8.198570028001156e-16, 0.17751479289940816]}, {}, {'': [0.15068589816301023, 0.23437500000000097], 'true': [-1.3664283380001927e-16, 0.17751479289940827]}, {'': [0.11208621293000956, 0.234375], 'true': [-3.416070845000482e-16, 0.17751479289940833]}, {'': [0.1260931888924275, 0.2249255152032318], 'false': [0.1775147928994081, 0.2244435189041607], 'true': [-6.832141690000964e-17, 0.1775147928994083]}, {'': [0.0987895569693801, 0.2229724106017089], 'false': [0.1775147928994083, 0.22444351890416095], 'true': [-1.708035422500241e-17, 0.1775147928994082]}, {'': [0.06926394826058822, 0.22528785554974476], 'false': [0.1775147928994083, 0.22444351890415987], 'true': [-8.540177112501205e-18, 0.17751479289940833]}, {'': [0.06591653839564515, 0.22333962865684787], 'true': [1.708035422500241e-17, 0.1775147928994083]}, {'': [0.06398680017401034, 0.2232264568383499], 'false': [0.17751479289940827, 0.22444351890416026], 'true': [-3.416070845000482e-17, 0.1775147928994083]}, {'': [0.06279493086599187, 0.22216938402514913], 'false': [0.17751479289940833, 0.22444351890415984], 'true': [-3.843079700625542e-17, 0.17751479289940836]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;sametitle(A, B) :- haswordtitle(A, C), haswordauthor(D, C).;true;true
0;true;haswordtitle(B, C).;true;true
2;;sametitle(A, B) :- haswordtitle(A, C), haswordauthor(D, C).;true;true
2;true;haswordtitle(B, C).;true;true
3;;sametitle(A, B) :- haswordtitle(A, C), haswordauthor(D, C).;true;true
3;true;haswordtitle(B, C).;true;true
4;;sametitle(A, B) :- haswordtitle(B, C), haswordauthor(D, C).;true;true
4;true;haswordtitle(A, C).;true;true
5;;sametitle(A, B) :- haswordtitle(B, C), haswordauthor(D, C).;true;true
5;true;haswordtitle(A, C).;true;true
6;;sametitle(A, B) :- haswordtitle(A, C), haswordauthor(D, C).;true;true
6;true;haswordtitle(B, C).;true;true
7;;sametitle(A, B) :- haswordtitle(A, C), haswordauthor(D, C).;true;true
7;true;haswordtitle(B, C).;true;true
8;;sametitle(A, B) :- haswordtitle(A, C), haswordauthor(D, C).;true;true
8;true;haswordtitle(B, C).;true;true
9;;sametitle(A, B) :- haswordtitle(A, C), haswordauthor(D, C).;true;true
9;true;haswordtitle(B, C).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordauthor(D, C) )
%   then if ( haswordtitle(B, C) )
%   | then return 0.8581489350995118;  // std dev = 1.46e-07, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | else return 0.088918165868743;  // std dev = 0.421, 13.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=3 */
%   else if ( haswordtitle(B, E), haswordauthor(F, E) )
%   | then return 0.088918165868743;  // std dev = 0.421, 13.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=3 */
%   | else return 0.5180128806777413;  // std dev = 0.474, 147.000 (wgt'ed) examples reached here.  /* #neg=50 #pos=97 */
WILL Produced-Tree #2
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordauthor(D, C) )
%   then if ( haswordtitle(B, C) )
%   | then return 0.7194734122109545;  // std dev = 0.000, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | else return 0.07774578121441031;  // std dev = 0.421, 13.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=3 */
%   else return 0.41300317110859763;  // std dev = 0.480, 160.000 (wgt'ed) examples reached here.  /* #neg=60 #pos=100 */
WILL Produced-Tree #3
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordauthor(D, C) )
%   then if ( haswordtitle(B, C) )
%   | then return 0.5553664367462846;  // std dev = 0.000, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | else return 0.06739536297660921;  // std dev = 0.421, 13.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=3 */
%   else if ( haswordtitle(B, E), haswordauthor(F, E) )
%   | then return 0.016280678363360668;  // std dev = 0.421, 13.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=3 */
%   | else return 0.36439818036135135;  // std dev = 0.474, 147.000 (wgt'ed) examples reached here.  /* #neg=50 #pos=97 */
WILL Produced-Tree #4
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordauthor(D, C) )
%   then if ( haswordtitle(B, C) )
%   | then return 0.41751358415831;  // std dev = 0.000, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | else return 0.0579733820773872;  // std dev = 0.421, 13.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=3 */
%   else if ( haswordtitle(B, E), haswordauthor(F, E) )
%   | then return 0.013524908528151632;  // std dev = 0.421, 13.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=3 */
%   | else return 0.2834003425133103;  // std dev = 0.474, 147.000 (wgt'ed) examples reached here.  /* #neg=50 #pos=97 */
WILL Produced-Tree #5
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordauthor(D, C) )
%   then if ( haswordtitle(B, C) )
%   | then return 0.3207118471601494;  // std dev = 0.000, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | else return 0.049528997355293175;  // std dev = 0.421, 13.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=3 */
%   else return 0.1983837314030257;  // std dev = 0.473, 160.000 (wgt'ed) examples reached here.  /* #neg=60 #pos=100 */
WILL Produced-Tree #6
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordauthor(D, C) )
%   then if ( haswordtitle(B, C) )
%   | then return 0.25517224256948956;  // std dev = 0.000, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | else return 0.04206293300387109;  // std dev = 0.421, 13.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=3 */
%   else if ( haswordtitle(B, E), haswordauthor(F, E) )
%   | then return -0.02465489754580792;  // std dev = 0.421, 13.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=3 */
%   | else return 0.16556412209602436;  // std dev = 0.474, 147.000 (wgt'ed) examples reached here.  /* #neg=50 #pos=97 */
WILL Produced-Tree #7
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordauthor(D, C) )
%   then if ( haswordtitle(B, C) )
%   | then return 0.2097577156325355;  // std dev = 2.11e-08, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | else return 0.03553879177151896;  // std dev = 0.421, 13.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=3 */
%   else return 0.11251529700777244;  // std dev = 0.471, 160.000 (wgt'ed) examples reached here.  /* #neg=60 #pos=100 */
WILL Produced-Tree #8
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordauthor(D, C) )
%   then if ( haswordtitle(B, C) )
%   | then return 0.17709649774527747;  // std dev = 0.000, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | else return 0.029894556746069525;  // std dev = 0.421, 13.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=3 */
%   else if ( haswordtitle(B, E), haswordauthor(F, E) )
%   | then return -0.04172015136070733;  // std dev = 0.421, 13.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=3 */
%   | else return 0.09638884579946835;  // std dev = 0.474, 147.000 (wgt'ed) examples reached here.  /* #neg=50 #pos=97 */
WILL Produced-Tree #9
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordauthor(D, C) )
%   then if ( haswordtitle(B, C) )
%   | then return 0.15274385809367083;  // std dev = 0.000, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | else return 0.025052826506284376;  // std dev = 0.421, 13.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=3 */
%   else if ( haswordtitle(B, E), haswordauthor(F, E) )
%   | then return -0.03352853480534809;  // std dev = 0.421, 13.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=3 */
%   | else return 0.07284228596704245;  // std dev = 0.474, 147.000 (wgt'ed) examples reached here.  /* #neg=50 #pos=97 */
WILL Produced-Tree #10
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordauthor(D, C) )
%   then if ( haswordtitle(B, C) )
%   | then return 0.13400703000801117;  // std dev = 0.000, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | else return 0.020929078465113212;  // std dev = 0.421, 13.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=3 */
%   else return 0.04861027007557388;  // std dev = 0.470, 160.000 (wgt'ed) examples reached here.  /* #neg=60 #pos=100 */


Results
   AUC ROC   = 0.746149
   AUC PR    = 0.695718
   CLL	      = -0.606425
   Precision = 0.580541 at threshold = 0.5
   Recall    = 0.943761
   F1        = 0.718876


Total learning time: 9.547485828399658 seconds
Total inference time: 2.375 seconds
AUC ROC: 0.746149


Results scoring model
   AUC ROC   = 0.691584
   AUC PR    = 0.815016
   CLL	      = -0.564081
   Precision = 0.710983 at threshold = 0.5
   Recall    = 0.953488
   F1        = 0.81457


Total scoring time: 1.266 seconds
Refined model CLL: -0.564081


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.746149
   AUC PR    = 0.695718
   CLL	      = -0.606425
   Precision = 0.580541 at threshold = 0.5
   Recall    = 0.943761
   F1        = 0.718876


Total learning time: 21.165743930816653 seconds
Total inference time: 2.375 seconds
AUC ROC: 0.746149
Total revision time: 21.165743930816653
Best scored revision CLL: -0.564081


Dataset: 6_imdb_cora, Fold: 4, Type: Transfer (trRDN-B), Time: 03:28:10
{'AUC ROC': 0.746149, 'AUC PR': 0.695718, 'CLL': -0.606425, 'Precision': [0.580541, 0.5], 'Recall': 0.943761, 'F1': 0.718876, 'Learning time': 21.165743930816653, 'Inference time': 2.375, 'parameter': {'AUC ROC': 0.746454, 'AUC PR': 0.6958, 'CLL': -0.600876, 'Precision': [0.580541, 0.5], 'Recall': 0.943761, 'F1': 0.718876, 'Learning time': 9.110258102416992, 'Inference time': 2.3}}


WILL Produced-Tree #1
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordauthor(D, C) )
%   then if ( haswordtitle(B, C) )
%   | then return 0.8581489350995118;  // std dev = 1.46e-07, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | else return 0.088918165868743;  // std dev = 0.421, 13.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=3 */
%   else return 0.48314893509950974;  // std dev = 0.484, 160.000 (wgt'ed) examples reached here.  /* #neg=60 #pos=100 */
WILL Produced-Tree #2
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordauthor(D, C) )
%   then if ( haswordtitle(B, C) )
%   | then return 0.7194734122109545;  // std dev = 0.000, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | else return 0.07774578121441031;  // std dev = 0.421, 13.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=3 */
%   else if ( haswordtitle(B, E), haswordauthor(F, E) )
%   | then return 0.019426559477543768;  // std dev = 0.421, 13.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=3 */
%   | else return 0.44852127428654304;  // std dev = 0.474, 147.000 (wgt'ed) examples reached here.  /* #neg=50 #pos=97 */
WILL Produced-Tree #3
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordauthor(D, C) )
%   then if ( haswordtitle(B, C) )
%   | then return 0.5553664367462846;  // std dev = 0.000, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | else return 0.06739536297660921;  // std dev = 0.421, 13.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=3 */
%   else return 0.33597955084791964;  // std dev = 0.479, 160.000 (wgt'ed) examples reached here.  /* #neg=60 #pos=100 */
WILL Produced-Tree #4
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordauthor(D, C) )
%   then if ( haswordtitle(B, C) )
%   | then return 0.41751358415831;  // std dev = 0.000, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | else return 0.0579733820773872;  // std dev = 0.421, 13.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=3 */
%   else if ( haswordtitle(B, E), haswordauthor(F, E) )
%   | then return -0.04581975341950115;  // std dev = 0.421, 13.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=3 */
%   | else return 0.28989504664368754;  // std dev = 0.474, 147.000 (wgt'ed) examples reached here.  /* #neg=50 #pos=97 */
WILL Produced-Tree #5
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordauthor(D, C) )
%   then if ( haswordtitle(B, C) )
%   | then return 0.3207118471601494;  // std dev = 0.000, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | else return 0.049528997355293175;  // std dev = 0.421, 13.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=3 */
%   else return 0.1993070836478668;  // std dev = 0.475, 160.000 (wgt'ed) examples reached here.  /* #neg=60 #pos=100 */
WILL Produced-Tree #6
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordauthor(D, C) )
%   then if ( haswordtitle(B, C) )
%   | then return 0.25517224256948956;  // std dev = 0.000, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | else return 0.04206293300387109;  // std dev = 0.421, 13.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=3 */
%   else if ( haswordtitle(B, E), haswordauthor(F, E) )
%   | then return -0.07755665347816361;  // std dev = 0.421, 13.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=3 */
%   | else return 0.170649299687612;  // std dev = 0.474, 147.000 (wgt'ed) examples reached here.  /* #neg=50 #pos=97 */
WILL Produced-Tree #7
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordauthor(D, C) )
%   then if ( haswordtitle(B, C) )
%   | then return 0.2097577156325355;  // std dev = 2.11e-08, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | else return 0.03553879177151896;  // std dev = 0.421, 13.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=3 */
%   else return 0.11265122266830044;  // std dev = 0.473, 160.000 (wgt'ed) examples reached here.  /* #neg=60 #pos=100 */
WILL Produced-Tree #8
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordauthor(D, C) )
%   then if ( haswordtitle(B, C) )
%   | then return 0.17709649774527747;  // std dev = 0.000, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | else return 0.029894556746069525;  // std dev = 0.421, 13.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=3 */
%   else if ( haswordtitle(B, E), haswordauthor(F, E) )
%   | then return -0.08509086483935888;  // std dev = 0.421, 13.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=3 */
%   | else return 0.10011273689423049;  // std dev = 0.474, 147.000 (wgt'ed) examples reached here.  /* #neg=50 #pos=97 */
WILL Produced-Tree #9
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordauthor(D, C) )
%   then if ( haswordtitle(B, C) )
%   | then return 0.15274385809367083;  // std dev = 0.000, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | else return 0.025052826506284376;  // std dev = 0.421, 13.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=3 */
%   else if ( haswordtitle(B, E), haswordauthor(F, E) )
%   | then return -0.06699777682293671;  // std dev = 0.421, 13.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=3 */
%   | else return 0.07560901603035647;  // std dev = 0.474, 147.000 (wgt'ed) examples reached here.  /* #neg=50 #pos=97 */
WILL Produced-Tree #10
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordauthor(D, C) )
%   then if ( haswordtitle(B, C) )
%   | then return 0.13400703000801117;  // std dev = 0.000, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | else return 0.020929078465113212;  // std dev = 0.421, 13.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=3 */
%   else return 0.04838627034747822;  // std dev = 0.471, 160.000 (wgt'ed) examples reached here.  /* #neg=60 #pos=100 */


Results
   AUC ROC   = 0.746149
   AUC PR    = 0.695718
   CLL	      = -0.6083
   Precision = 0.580541 at threshold = 0.5
   Recall    = 0.943761
   F1        = 0.718876


Total learning time: 9.697019815444946 seconds
Total inference time: 2.378 seconds
AUC ROC: 0.746149


Dataset: 6_imdb_cora, Fold: 4, Type: Scratch (RDN-B), Time: 03:28:23
{'AUC ROC': 0.746149, 'AUC PR': 0.695718, 'CLL': -0.6083, 'Precision': [0.580541, 0.5], 'Recall': 0.943761, 'F1': 0.718876, 'Learning time': 9.697019815444946, 'Inference time': 2.378}


Starting fold 5

Target train facts examples: 8644
Target train pos examples: 154
Target train neg examples: 148

Target test facts examples: 33914
Target test pos  examples: 544
Target test neg examples: 568

******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


WILL Produced-Tree #1
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordauthor(D, C) )
%   then if ( haswordtitle(B, C) )
%   | then return 0.8248156017661792;  // std dev = 0.180, 60.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=58 */
%   | else if ( author(E, D), title(E, B) )
%   | | then return 0.5248156017661788;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return -0.04185106490048778;  // std dev = 0.300, 10.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=1 */
%   else return 0.2642624722174136;  // std dev = 0.491, 229.000 (wgt'ed) examples reached here.  /* #neg=136 #pos=93 */
WILL Produced-Tree #2
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordauthor(D, C) )
%   then if ( haswordtitle(B, C) )
%   | then return 0.6928183180467428;  // std dev = 0.180, 60.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=58 */
%   | else if ( author(E, D), title(E, B) )
%   | | then return 0.448295606241962;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return -0.03683251744007497;  // std dev = 0.300, 10.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=1 */
%   else return 0.22895776974583762;  // std dev = 0.491, 229.000 (wgt'ed) examples reached here.  /* #neg=136 #pos=93 */
WILL Produced-Tree #3
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordauthor(D, C) )
%   then if ( haswordtitle(B, C) )
%   | then return 0.5367928709789446;  // std dev = 0.180, 60.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=58 */
%   | else return 0.058591423633889125;  // std dev = 0.385, 13.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=3 */
%   else if ( haswordtitle(B, E), haswordauthor(F, E) )
%   | then if ( author(G, F), title(G, A) )
%   | | then return 0.4536404606300186;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return -0.08802620603664803;  // std dev = 0.331, 8.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */
%   | else return 0.19981783066060227;  // std dev = 0.492, 218.000 (wgt'ed) examples reached here.  /* #neg=128 #pos=90 */
WILL Produced-Tree #4
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordauthor(D, C) )
%   then if ( haswordtitle(B, C) )
%   | then return 0.4034008832853693;  // std dev = 0.180, 60.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=58 */
%   | else if ( author(E, D), title(E, B) )
%   | | then return 0.3498191319540351;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return -0.039422815015304834;  // std dev = 0.300, 10.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=1 */
%   else if ( haswordtitle(B, F), haswordauthor(G, F) )
%   | then if ( author(H, G), title(H, A) )
%   | | then return 0.367891933492884;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return -0.07364162032488675;  // std dev = 0.331, 8.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */
%   | else return 0.16440632374548453;  // std dev = 0.492, 218.000 (wgt'ed) examples reached here.  /* #neg=128 #pos=90 */
WILL Produced-Tree #5
% FOR sametitle(A, B):
%   if ( haswordtitle(B, C), haswordauthor(D, C) )
%   then if ( haswordtitle(A, C) )
%   | then return 0.30789442979240567;  // std dev = 0.180, 60.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=58 */
%   | else if ( author(E, D), title(E, A) )
%   | | then return 0.2856528620544357;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return -0.07669486968547023;  // std dev = 0.297, 10.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=1 */
%   else return 0.12929029965788905;  // std dev = 0.488, 229.000 (wgt'ed) examples reached here.  /* #neg=136 #pos=93 */
WILL Produced-Tree #6
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordauthor(D, C) )
%   then if ( haswordtitle(B, C) )
%   | then return 0.24240066496454685;  // std dev = 0.180, 60.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=58 */
%   | else if ( author(E, D), title(E, B) )
%   | | then return 0.23846398145535433;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return -0.045660042189936724;  // std dev = 0.299, 10.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=1 */
%   else if ( haswordtitle(B, F), haswordauthor(G, F) )
%   | then if ( author(H, G), title(H, A) )
%   | | then return 0.2164002944422934;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return -0.050788956362460724;  // std dev = 0.331, 8.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */
%   | else return 0.10564892065584194;  // std dev = 0.492, 218.000 (wgt'ed) examples reached here.  /* #neg=128 #pos=90 */
WILL Produced-Tree #7
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordauthor(D, C) )
%   then if ( haswordtitle(B, C) )
%   | then return 0.19670004057326665;  // std dev = 0.180, 60.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=58 */
%   | else if ( author(E, D), title(E, B) )
%   | | then return 0.17934493725828296;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return -0.040073555589706975;  // std dev = 0.299, 10.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=1 */
%   else if ( haswordtitle(B, F), haswordauthor(G, F) )
%   | then if ( author(H, G), title(H, A) )
%   | | then return 0.16246531740436945;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return -0.04355102476985316;  // std dev = 0.331, 8.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */
%   | else return 0.08271829058844192;  // std dev = 0.492, 218.000 (wgt'ed) examples reached here.  /* #neg=128 #pos=90 */
WILL Produced-Tree #8
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordauthor(D, C) )
%   then if ( haswordtitle(B, C) )
%   | then return 0.16371858628713193;  // std dev = 0.180, 60.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=58 */
%   | else if ( author(E, D), title(E, B) )
%   | | then return 0.13455567760335976;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return -0.03531928120764944;  // std dev = 0.299, 10.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=1 */
%   else if ( haswordtitle(B, F), haswordauthor(G, F) )
%   | then if ( author(H, G), title(H, A) )
%   | | then return 0.12196853463296846;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return -0.037535500010351254;  // std dev = 0.331, 8.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */
%   | else return 0.06417575871033211;  // std dev = 0.492, 218.000 (wgt'ed) examples reached here.  /* #neg=128 #pos=90 */
WILL Produced-Tree #9
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordauthor(D, C) )
%   then if ( haswordtitle(B, C) )
%   | then return 0.13909109340224876;  // std dev = 0.180, 60.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=58 */
%   | else if ( author(E, D), title(E, B) )
%   | | then return 0.10124964254113449;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return -0.031242489548048414;  // std dev = 0.299, 10.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=1 */
%   else return 0.047156868407007585;  // std dev = 0.488, 229.000 (wgt'ed) examples reached here.  /* #neg=136 #pos=93 */
WILL Produced-Tree #10
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordauthor(D, C) )
%   then if ( haswordtitle(B, C) )
%   | then return 0.12013771168374343;  // std dev = 0.180, 60.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=58 */
%   | else if ( author(E, D), title(E, B) )
%   | | then return 0.07655517355784418;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return -0.027723564270123513;  // std dev = 0.299, 10.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=1 */
%   else if ( haswordtitle(B, F), haswordauthor(G, F) )
%   | then if ( author(H, G), title(H, A) )
%   | | then return 0.08043798309359622;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return -0.03884939456507443;  // std dev = 0.331, 8.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */
%   | else return 0.03848596687974389;  // std dev = 0.492, 218.000 (wgt'ed) examples reached here.  /* #neg=128 #pos=90 */


Results
   AUC ROC   = 0.739676
   AUC PR    = 0.695258
   CLL	      = -0.609529
   Precision = 0.759542 at threshold = 0.5
   Recall    = 0.365809
   F1        = 0.493797


Total learning time: 17.4598491191864 seconds
Total inference time: 3.773 seconds
AUC ROC: 0.739676


Results scoring model
   AUC ROC   = 0.716216
   AUC PR    = 0.772858
   CLL	      = -0.565996
   Precision = 0.939394 at threshold = 0.5
   Recall    = 0.402597
   F1        = 0.563636


Total scoring time: 1.423 seconds
Parameter learned model CLL: -0.565996


Structure after Parameter Learning
[['sametitle(A, B)', {'': 'haswordtitle(A, C), haswordauthor(D, C)', 'true': 'haswordtitle(B, C)', 'true,false': 'author(E, D), title(E, B)'}, {'true,true': [0.18, 2, 58], 'true,false,true': [0.816, 1, 2], 'true,false,false': [0.3, 9, 1], 'false': [0.491, 136, 93]}], ['sametitle(A, B)', {'': 'haswordtitle(A, C), haswordauthor(D, C)', 'true': 'haswordtitle(B, C)', 'true,false': 'author(E, D), title(E, B)'}, {'true,true': [0.18, 2, 58], 'true,false,true': [0.816, 1, 2], 'true,false,false': [0.3, 9, 1], 'false': [0.491, 136, 93]}], ['sametitle(A, B)', {'': 'haswordtitle(A, C), haswordauthor(D, C)', 'true': 'haswordtitle(B, C)', 'false': 'haswordtitle(B, E), haswordauthor(F, E)', 'false,true': 'author(G, F), title(G, A)'}, {'true,true': [0.18, 2, 58], 'true,false': [0.385, 10, 3], 'false,true,true': [0.816, 1, 2], 'false,true,false': [0.331, 7, 1], 'false,false': [0.492, 128, 90]}], ['sametitle(A, B)', {'': 'haswordtitle(A, C), haswordauthor(D, C)', 'true': 'haswordtitle(B, C)', 'true,false': 'author(E, D), title(E, B)', 'false': 'haswordtitle(B, F), haswordauthor(G, F)', 'false,true': 'author(H, G), title(H, A)'}, {'true,true': [0.18, 2, 58], 'true,false,true': [0.816, 1, 2], 'true,false,false': [0.3, 9, 1], 'false,true,true': [0.816, 1, 2], 'false,true,false': [0.331, 7, 1], 'false,false': [0.492, 128, 90]}], ['sametitle(A, B)', {'': 'haswordtitle(B, C), haswordauthor(D, C)', 'true': 'haswordtitle(A, C)', 'true,false': 'author(E, D), title(E, A)'}, {'true,true': [0.18, 2, 58], 'true,false,true': [0.816, 1, 2], 'true,false,false': [0.297, 9, 1], 'false': [0.488, 136, 93]}], ['sametitle(A, B)', {'': 'haswordtitle(A, C), haswordauthor(D, C)', 'true': 'haswordtitle(B, C)', 'true,false': 'author(E, D), title(E, B)', 'false': 'haswordtitle(B, F), haswordauthor(G, F)', 'false,true': 'author(H, G), title(H, A)'}, {'true,true': [0.18, 2, 58], 'true,false,true': [0.816, 1, 2], 'true,false,false': [0.299, 9, 1], 'false,true,true': [0.816, 1, 2], 'false,true,false': [0.331, 7, 1], 'false,false': [0.492, 128, 90]}], ['sametitle(A, B)', {'': 'haswordtitle(A, C), haswordauthor(D, C)', 'true': 'haswordtitle(B, C)', 'true,false': 'author(E, D), title(E, B)', 'false': 'haswordtitle(B, F), haswordauthor(G, F)', 'false,true': 'author(H, G), title(H, A)'}, {'true,true': [0.18, 2, 58], 'true,false,true': [0.816, 1, 2], 'true,false,false': [0.299, 9, 1], 'false,true,true': [0.816, 1, 2], 'false,true,false': [0.331, 7, 1], 'false,false': [0.492, 128, 90]}], ['sametitle(A, B)', {'': 'haswordtitle(A, C), haswordauthor(D, C)', 'true': 'haswordtitle(B, C)', 'true,false': 'author(E, D), title(E, B)', 'false': 'haswordtitle(B, F), haswordauthor(G, F)', 'false,true': 'author(H, G), title(H, A)'}, {'true,true': [0.18, 2, 58], 'true,false,true': [0.816, 1, 2], 'true,false,false': [0.299, 9, 1], 'false,true,true': [0.816, 1, 2], 'false,true,false': [0.331, 7, 1], 'false,false': [0.492, 128, 90]}], ['sametitle(A, B)', {'': 'haswordtitle(A, C), haswordauthor(D, C)', 'true': 'haswordtitle(B, C)', 'true,false': 'author(E, D), title(E, B)'}, {'true,true': [0.18, 2, 58], 'true,false,true': [0.816, 1, 2], 'true,false,false': [0.299, 9, 1], 'false': [0.488, 136, 93]}], ['sametitle(A, B)', {'': 'haswordtitle(A, C), haswordauthor(D, C)', 'true': 'haswordtitle(B, C)', 'true,false': 'author(E, D), title(E, B)', 'false': 'haswordtitle(B, F), haswordauthor(G, F)', 'false,true': 'author(H, G), title(H, A)'}, {'true,true': [0.18, 2, 58], 'true,false,true': [0.816, 1, 2], 'true,false,false': [0.299, 9, 1], 'false,true,true': [0.816, 1, 2], 'false,true,false': [0.331, 7, 1], 'false,false': [0.492, 128, 90]}]]
[{'': [0.13736160630512223, 0.2411853320874907], 'true': [0.03222222222222181, 0.17751479289940816], 'true,false': [0.22222222222222224, 0.09000000000000005]}, {'': [0.11123233779573748, 0.2411853320874881], 'true': [0.03222222222222181, 0.16229080212002525], 'true,false': [0.2222222222222222, 0.08999999999999996]}, {'': [0.08634624456448779, 0.24118533208748613], 'false': [0.19834710743801656, 0.24240383806076662], 'false,true': [0.2222222222222223, 0.10937500000000004], 'true': [0.032222222222222464, 0.14819603481702354]}, {'': [0.07097349525202752, 0.23998229700413376], 'false': [0.17881965646991846, 0.24240383806076748], 'false,true': [0.22222222222222224, 0.10937500000000004], 'true': [0.032222222222221604, 0.14740796133184106], 'true,false': [0.22222222222222218, 0.09]}, {'': [0.0651273369600226, 0.23843575966734218], 'true': [0.03222222222222227, 0.14254507207647055], 'true,false': [0.2222222222222222, 0.08834287810265548]}, {'': [0.05762184572315069, 0.23849167424444417], 'false': [0.1543115341423791, 0.2424038380607694], 'false,true': [0.22222222222222224, 0.109375], 'true': [0.03222222222222208, 0.13416314049979228], 'true,false': [0.22222222222222218, 0.0891162327186657]}, {'': [0.054420967779536394, 0.23812112846885247], 'false': [0.14856990852199703, 0.2424038380607693], 'false,true': [0.22222222222222224, 0.10937500000000001], 'true': [0.03222222222222211, 0.12839926723634176], 'true,false': [0.2222222222222222, 0.08914211727818916]}, {'': [0.052482381074042954, 0.23788949533085166], 'false': [0.14519777043763038, 0.24240383806077087], 'false,true': [0.2222222222222222, 0.10937500000000001], 'true': [0.03222222222222229, 0.12499283490030368], 'true,false': [0.2222222222222222, 0.08916459525041061]}, {'': [0.05124731966888994, 0.23774508689970314], 'true': [0.03222222222222225, 0.12300140845370107], 'true,false': [0.22222222222222224, 0.0891842031541746]}, {'': [0.05042276230126662, 0.23771951414859432], 'false': [0.14297389104612984, 0.2424038380607673], 'false,true': [0.22222222222222224, 0.10937500000000003], 'true': [0.03222222222222225, 0.12182880131503443], 'true,false': [0.2222222222222222, 0.08920137769757183]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Pruning resulted in null theory

Candidate for revision
0;;sametitle(A, B) :- haswordtitle(A, C), haswordauthor(D, C).;true;true
0;true;haswordtitle(B, C).;true;true
0;true,false;author(E, D), title(E, B).;true;true
1;;sametitle(A, B) :- haswordtitle(A, C), haswordauthor(D, C).;true;true
1;true;haswordtitle(B, C).;true;true
1;true,false;author(E, D), title(E, B).;true;true
2;;sametitle(A, B) :- haswordtitle(A, C), haswordauthor(D, C).;true;true
2;true;haswordtitle(B, C).;true;true
2;false;haswordtitle(B, E), haswordauthor(F, E).;true;true
2;false,true;author(G, F), title(G, A).;true;true
3;;sametitle(A, B) :- haswordtitle(A, C), haswordauthor(D, C).;true;true
3;true;haswordtitle(B, C).;true;true
3;true,false;author(E, D), title(E, B).;true;true
3;false;haswordtitle(B, F), haswordauthor(G, F).;true;true
3;false,true;author(H, G), title(H, A).;true;true
4;;sametitle(A, B) :- haswordtitle(B, C), haswordauthor(D, C).;true;true
4;true;haswordtitle(A, C).;true;true
4;true,false;author(E, D), title(E, A).;true;true
5;;sametitle(A, B) :- haswordtitle(A, C), haswordauthor(D, C).;true;true
5;true;haswordtitle(B, C).;true;true
5;true,false;author(E, D), title(E, B).;true;true
5;false;haswordtitle(B, F), haswordauthor(G, F).;true;true
5;false,true;author(H, G), title(H, A).;true;true
6;;sametitle(A, B) :- haswordtitle(A, C), haswordauthor(D, C).;true;true
6;true;haswordtitle(B, C).;true;true
6;true,false;author(E, D), title(E, B).;true;true
6;false;haswordtitle(B, F), haswordauthor(G, F).;true;true
6;false,true;author(H, G), title(H, A).;true;true
7;;sametitle(A, B) :- haswordtitle(A, C), haswordauthor(D, C).;true;true
7;true;haswordtitle(B, C).;true;true
7;true,false;author(E, D), title(E, B).;true;true
7;false;haswordtitle(B, F), haswordauthor(G, F).;true;true
7;false,true;author(H, G), title(H, A).;true;true
8;;sametitle(A, B) :- haswordtitle(A, C), haswordauthor(D, C).;true;true
8;true;haswordtitle(B, C).;true;true
8;true,false;author(E, D), title(E, B).;true;true
9;;sametitle(A, B) :- haswordtitle(A, C), haswordauthor(D, C).;true;true
9;true;haswordtitle(B, C).;true;true
9;true,false;author(E, D), title(E, B).;true;true
9;false;haswordtitle(B, F), haswordauthor(G, F).;true;true
9;false,true;author(H, G), title(H, A).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordauthor(D, C) )
%   then if ( haswordtitle(B, C) )
%   | then return 0.8248156017661792;  // std dev = 0.180, 60.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=58 */
%   | else if ( author(E, D), title(E, B) )
%   | | then return 0.5248156017661788;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return -0.04185106490048778;  // std dev = 0.300, 10.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=1 */
%   else return 0.2642624722174136;  // std dev = 0.491, 229.000 (wgt'ed) examples reached here.  /* #neg=136 #pos=93 */
WILL Produced-Tree #2
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordauthor(D, C) )
%   then if ( haswordtitle(B, C) )
%   | then return 0.6928183180467428;  // std dev = 0.180, 60.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=58 */
%   | else if ( author(E, D), title(E, B) )
%   | | then return 0.448295606241962;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return -0.03683251744007497;  // std dev = 0.300, 10.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=1 */
%   else if ( haswordtitle(B, F), haswordauthor(G, F) )
%   | then if ( author(H, G), title(H, A) )
%   | | then return 0.48951089929460284;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return -0.052155767372063885;  // std dev = 0.331, 8.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */
%   | else return 0.2356882693251818;  // std dev = 0.492, 218.000 (wgt'ed) examples reached here.  /* #neg=128 #pos=90 */
WILL Produced-Tree #3
% FOR sametitle(A, B):
%   return 0;  // std dev = 0.464, 302.000 (wgt'ed) examples reached here.  /* #neg=148 #pos=154 */
WILL Produced-Tree #4
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordauthor(D, C) )
%   then if ( haswordtitle(B, C) )
%   | then return 0.5367928709789446;  // std dev = 0.180, 60.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=58 */
%   | else return 0.058591423633889125;  // std dev = 0.385, 13.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=3 */
%   else return 0.19291064828823887;  // std dev = 0.490, 229.000 (wgt'ed) examples reached here.  /* #neg=136 #pos=93 */
WILL Produced-Tree #5
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordauthor(D, C) )
%   then if ( haswordtitle(B, C) )
%   | then return 0.4034008832853693;  // std dev = 0.180, 60.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=58 */
%   | else if ( author(E, D), title(E, B) )
%   | | then return 0.3498191319540351;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return -0.039422815015304834;  // std dev = 0.300, 10.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=1 */
%   else return 0.1587888596319695;  // std dev = 0.490, 229.000 (wgt'ed) examples reached here.  /* #neg=136 #pos=93 */
WILL Produced-Tree #6
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordauthor(D, C) )
%   then if ( haswordtitle(B, C) )
%   | then return 0.30789442979240567;  // std dev = 0.180, 60.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=58 */
%   | else if ( author(E, D), title(E, B) )
%   | | then return 0.26978571458534667;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return -0.03475959572996258;  // std dev = 0.300, 10.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=1 */
%   else if ( haswordtitle(B, F), haswordauthor(G, F) )
%   | then if ( author(H, G), title(H, A) )
%   | | then return 0.33363991610878324;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return -0.10009920697645736;  // std dev = 0.331, 8.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */
%   | else return 0.13362721515264034;  // std dev = 0.492, 218.000 (wgt'ed) examples reached here.  /* #neg=128 #pos=90 */
WILL Produced-Tree #7
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordauthor(D, C) )
%   then if ( haswordtitle(B, C) )
%   | then return 0.24240066496454685;  // std dev = 0.180, 60.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=58 */
%   | else if ( author(E, D), title(E, B) )
%   | | then return 0.20377145837186686;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return -0.030757853550503624;  // std dev = 0.300, 10.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=1 */
%   else return 0.10131815924235252;  // std dev = 0.489, 229.000 (wgt'ed) examples reached here.  /* #neg=136 #pos=93 */
WILL Produced-Tree #8
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordauthor(D, C) )
%   then if ( haswordtitle(B, C) )
%   | then return 0.19670004057326665;  // std dev = 0.180, 60.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=58 */
%   | else if ( author(E, D), title(E, B) )
%   | | then return 0.15290041256382095;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return -0.02730143597308556;  // std dev = 0.300, 10.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=1 */
%   else return 0.0794866478759071;  // std dev = 0.489, 229.000 (wgt'ed) examples reached here.  /* #neg=136 #pos=93 */
WILL Produced-Tree #9
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordauthor(D, C) )
%   then if ( haswordtitle(B, C) )
%   | then return 0.16371858628713193;  // std dev = 0.180, 60.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=58 */
%   | else return 0.007814181215789286;  // std dev = 0.352, 13.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=3 */
%   else if ( haswordtitle(B, E), haswordauthor(F, E) )
%   | then if ( author(G, F), title(G, A) )
%   | | then return 0.2115659923421396;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return -0.11448807146251697;  // std dev = 0.331, 8.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */
%   | else return 0.06622130036079836;  // std dev = 0.492, 218.000 (wgt'ed) examples reached here.  /* #neg=128 #pos=90 */
WILL Produced-Tree #10
% FOR sametitle(A, B):
%   return 0;  // std dev = 0.440, 302.000 (wgt'ed) examples reached here.  /* #neg=148 #pos=154 */


Results
   AUC ROC   = 0.73954
   AUC PR    = 0.695161
   CLL	      = -0.616507
   Precision = 0.759542 at threshold = 0.5
   Recall    = 0.365809
   F1        = 0.493797


Total learning time: 14.245703935623169 seconds
Total inference time: 3.094 seconds
AUC ROC: 0.73954


Results scoring model
   AUC ROC   = 0.716172
   AUC PR    = 0.772847
   CLL	      = -0.57637
   Precision = 0.939394 at threshold = 0.5
   Recall    = 0.402597
   F1        = 0.563636


Total scoring time: 1.327 seconds
Refined model CLL: -0.57637


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.739676
   AUC PR    = 0.695258
   CLL	      = -0.609529
   Precision = 0.759542 at threshold = 0.5
   Recall    = 0.365809
   F1        = 0.493797


Total learning time: 34.45555305480957 seconds
Total inference time: 3.773 seconds
AUC ROC: 0.739676
Total revision time: 34.45555305480957
Best scored revision CLL: -0.565996


Dataset: 6_imdb_cora, Fold: 5, Type: Transfer (trRDN-B), Time: 03:29:08
{'AUC ROC': 0.739676, 'AUC PR': 0.695258, 'CLL': -0.609529, 'Precision': [0.759542, 0.5], 'Recall': 0.365809, 'F1': 0.493797, 'Learning time': 34.45555305480957, 'Inference time': 3.773, 'parameter': {'AUC ROC': 0.739676, 'AUC PR': 0.695258, 'CLL': -0.609529, 'Precision': [0.759542, 0.5], 'Recall': 0.365809, 'F1': 0.493797, 'Learning time': 17.4598491191864, 'Inference time': 3.773}}


WILL Produced-Tree #1
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordauthor(D, C) )
%   then if ( haswordtitle(B, C) )
%   | then return 0.8248156017661792;  // std dev = 0.180, 60.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=58 */
%   | else if ( author(E, D), title(E, B) )
%   | | then return 0.5248156017661788;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return -0.04185106490048778;  // std dev = 0.300, 10.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=1 */
%   else if ( haswordtitle(B, F), haswordauthor(G, F) )
%   | then if ( author(H, G), title(H, A) )
%   | | then return 0.5248156017661788;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return -0.016851064900487787;  // std dev = 0.331, 8.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */
%   | else return 0.27099297179675785;  // std dev = 0.492, 218.000 (wgt'ed) examples reached here.  /* #neg=128 #pos=90 */
WILL Produced-Tree #2
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordauthor(D, C) )
%   then if ( haswordtitle(B, C) )
%   | then return 0.6928183180467428;  // std dev = 0.180, 60.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=58 */
%   | else if ( author(E, D), title(E, B) )
%   | | then return 0.448295606241962;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return -0.03683251744007497;  // std dev = 0.300, 10.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=1 */
%   else if ( haswordtitle(B, F), haswordauthor(G, F) )
%   | then if ( author(H, G), title(H, A) )
%   | | then return 0.448295606241962;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return -0.014812149378556561;  // std dev = 0.331, 8.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */
%   | else return 0.23470502083103983;  // std dev = 0.492, 218.000 (wgt'ed) examples reached here.  /* #neg=128 #pos=90 */
WILL Produced-Tree #3
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordauthor(D, C) )
%   then if ( haswordtitle(B, C) )
%   | then return 0.5367928709789446;  // std dev = 0.180, 60.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=58 */
%   | else if ( author(E, D), title(E, B) )
%   | | then return 0.36236334632262296;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return -0.03254015317273094;  // std dev = 0.300, 10.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=1 */
%   else return 0.1925126634270699;  // std dev = 0.489, 229.000 (wgt'ed) examples reached here.  /* #neg=136 #pos=93 */
WILL Produced-Tree #4
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordauthor(D, C) )
%   then if ( haswordtitle(B, C) )
%   | then return 0.4034008832853693;  // std dev = 0.180, 60.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=58 */
%   | else if ( author(E, D), title(E, B) )
%   | | then return 0.2807538536965855;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return -0.028843434243526523;  // std dev = 0.300, 10.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=1 */
%   else return 0.1584696800762259;  // std dev = 0.489, 229.000 (wgt'ed) examples reached here.  /* #neg=136 #pos=93 */
WILL Produced-Tree #5
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordauthor(D, C) )
%   then if ( haswordtitle(B, C) )
%   | then return 0.30789442979240567;  // std dev = 0.180, 60.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=58 */
%   | else if ( author(E, D), title(E, B) )
%   | | then return 0.21248070121827137;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return -0.025640477399664095;  // std dev = 0.300, 10.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=1 */
%   else return 0.12784954504974078;  // std dev = 0.489, 229.000 (wgt'ed) examples reached here.  /* #neg=136 #pos=93 */
WILL Produced-Tree #6
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordauthor(D, C) )
%   then if ( haswordtitle(B, C) )
%   | then return 0.24240066496454685;  // std dev = 0.180, 60.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=58 */
%   | else if ( author(E, D), title(E, B) )
%   | | then return 0.1594898822817116;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return -0.022850675562834787;  // std dev = 0.300, 10.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=1 */
%   else return 0.10152354592794469;  // std dev = 0.489, 229.000 (wgt'ed) examples reached here.  /* #neg=136 #pos=93 */
WILL Produced-Tree #7
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordauthor(D, C) )
%   then if ( haswordtitle(B, C) )
%   | then return 0.19670004057326665;  // std dev = 0.180, 60.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=58 */
%   | else if ( author(E, D), title(E, B) )
%   | | then return 0.11975529938157474;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return -0.02040946845150366;  // std dev = 0.300, 10.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=1 */
%   else return 0.07965768490087152;  // std dev = 0.489, 229.000 (wgt'ed) examples reached here.  /* #neg=136 #pos=93 */
WILL Produced-Tree #8
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordauthor(D, C) )
%   then if ( haswordtitle(B, C) )
%   | then return 0.16371858628713193;  // std dev = 0.180, 60.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=58 */
%   | else if ( author(E, D), title(E, B) )
%   | | then return 0.09028081829440963;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return -0.018264572141688296;  // std dev = 0.300, 10.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=1 */
%   else if ( haswordtitle(B, F), haswordauthor(G, F) )
%   | then return -0.0243261538071343;  // std dev = 0.401, 11.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=3 */
%   | else return 0.06630535412739894;  // std dev = 0.492, 218.000 (wgt'ed) examples reached here.  /* #neg=128 #pos=90 */
WILL Produced-Tree #9
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordauthor(D, C) )
%   then if ( haswordtitle(B, C) )
%   | then return 0.13909109340224876;  // std dev = 0.180, 60.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=58 */
%   | else if ( author(E, D), title(E, B) )
%   | | then return 0.06840311429118533;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return -0.01637321748135532;  // std dev = 0.300, 10.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=1 */
%   else return 0.047748220793038594;  // std dev = 0.489, 229.000 (wgt'ed) examples reached here.  /* #neg=136 #pos=93 */
WILL Produced-Tree #10
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordauthor(D, C) )
%   then if ( haswordtitle(B, C) )
%   | then return 0.12013771168374343;  // std dev = 0.180, 60.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=58 */
%   | else if ( author(E, D), title(E, B) )
%   | | then return 0.052078905701252655;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return -0.014700098059752786;  // std dev = 0.300, 10.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=1 */
%   else if ( haswordtitle(B, F), haswordauthor(G, F) )
%   | then if ( author(H, G), title(H, A) )
%   | | then return 0.20246869181899244;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return -0.11581288980614611;  // std dev = 0.331, 8.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */
%   | else return 0.04004682542985811;  // std dev = 0.492, 218.000 (wgt'ed) examples reached here.  /* #neg=128 #pos=90 */


Results
   AUC ROC   = 0.73954
   AUC PR    = 0.695161
   CLL	      = -0.613409
   Precision = 0.759542 at threshold = 0.5
   Recall    = 0.365809
   F1        = 0.493797


Total learning time: 17.253697872161865 seconds
Total inference time: 3.572 seconds
AUC ROC: 0.73954


Dataset: 6_imdb_cora, Fold: 5, Type: Scratch (RDN-B), Time: 03:29:29
{'AUC ROC': 0.73954, 'AUC PR': 0.695161, 'CLL': -0.613409, 'Precision': [0.759542, 0.5], 'Recall': 0.365809, 'F1': 0.493797, 'Learning time': 17.253697872161865, 'Inference time': 3.572}


Starting fold 1

Target train facts examples: 7463
Target train pos examples: 162
Target train neg examples: 236

Target test facts examples: 35095
Target test pos  examples: 536
Target test neg examples: 480

******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


WILL Produced-Tree #1
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordauthor(D, C) )
%   then if ( haswordtitle(B, C) )
%   | then return 0.7369368138873914;  // std dev = 0.326, 66.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=58 */
%   | else return 0.003310225422092987;  // std dev = 0.352, 62.000 (wgt'ed) examples reached here.  /* #neg=53 #pos=9 */
%   else if ( haswordtitle(B, E), haswordauthor(F, E) )
%   | then if ( author(G, F), title(G, A) )
%   | | then return 0.4581489350995122;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | else return -0.024204006076958298;  // std dev = 0.322, 51.000 (wgt'ed) examples reached here.  /* #neg=45 #pos=6 */
%   | else return 0.2600180939780157;  // std dev = 0.490, 214.000 (wgt'ed) examples reached here.  /* #neg=128 #pos=86 */
WILL Produced-Tree #2
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordauthor(D, C) )
%   then if ( haswordtitle(B, C) )
%   | then return 0.6220633676283396;  // std dev = 0.326, 66.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=58 */
%   | else if ( author(E, D), title(E, B) )
%   | | then return 0.23274550562375218;  // std dev = 0.484, 8.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=3 */
%   | | else return -0.031143383265136704;  // std dev = 0.314, 54.000 (wgt'ed) examples reached here.  /* #neg=48 #pos=6 */
%   else if ( haswordtitle(B, F), haswordauthor(G, F) )
%   | then if ( author(H, G), title(H, A) )
%   | | then return 0.3927941835770488;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | else return -0.021283130990843033;  // std dev = 0.322, 51.000 (wgt'ed) examples reached here.  /* #neg=45 #pos=6 */
%   | else return 0.22533125375206722;  // std dev = 0.490, 214.000 (wgt'ed) examples reached here.  /* #neg=128 #pos=86 */
WILL Produced-Tree #3
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordauthor(D, C) )
%   then if ( haswordtitle(B, C) )
%   | then return 0.48728512046144257;  // std dev = 0.326, 66.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=58 */
%   | else if ( author(E, D), title(E, B) )
%   | | then return 0.201918601559637;  // std dev = 0.484, 8.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=3 */
%   | | else return -0.027385497018114976;  // std dev = 0.314, 54.000 (wgt'ed) examples reached here.  /* #neg=48 #pos=6 */
%   else if ( haswordtitle(B, F), haswordauthor(G, F) )
%   | then if ( author(H, G), title(H, A) )
%   | | then return 0.32092546969114216;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | else return -0.01875657120835472;  // std dev = 0.322, 51.000 (wgt'ed) examples reached here.  /* #neg=45 #pos=6 */
%   | else return 0.19015949657647718;  // std dev = 0.490, 214.000 (wgt'ed) examples reached here.  /* #neg=128 #pos=86 */
WILL Produced-Tree #4
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordauthor(D, C) )
%   then if ( haswordtitle(B, C) )
%   | then return 0.3672186186501392;  // std dev = 0.326, 66.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=58 */
%   | else if ( author(E, D), title(E, B) )
%   | | then return 0.1710887245064434;  // std dev = 0.484, 8.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=3 */
%   | | else return -0.024150219567855256;  // std dev = 0.314, 54.000 (wgt'ed) examples reached here.  /* #neg=48 #pos=6 */
%   else return 0.12573080555111812;  // std dev = 0.468, 270.000 (wgt'ed) examples reached here.  /* #neg=175 #pos=95 */
WILL Produced-Tree #5
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordvenue(D, C) )
%   then if ( title(E, A), venue(E, D) )
%   | then return 0.10010534021924769;  // std dev = 0.441, 369.000 (wgt'ed) examples reached here.  /* #neg=227 #pos=142 */
%   | else if ( haswordtitle(A, F), haswordauthor(G, F) )
%   | | then if ( haswordtitle(B, F) )
%   | | | then return 0.39807224506280847;  // std dev = 2.11e-08, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.03420528392122061;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | | else return 0.7308147788741787;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( haswordtitle(B, H), haswordauthor(I, H) )
%   | then return 0.21554752269473107;  // std dev = 0.632, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | else return 0.2991766980643663;  // std dev = 0.863, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
WILL Produced-Tree #6
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordvenue(D, C) )
%   then if ( title(E, A), venue(E, D) )
%   | then if ( samebib(E, F), title(F, B) )
%   | | then if ( venue(F, D) )
%   | | | then return 0.6177041222137378;  // std dev = 1.675, 107.000 (wgt'ed) examples reached here.  /* #pos=107 */
%   | | | else return 0.598459091423868;  // std dev = 0.997, 27.000 (wgt'ed) examples reached here.  /* #pos=27 */
%   | | else return -0.22221851494971268;  // std dev = 0.183, 235.000 (wgt'ed) examples reached here.  /* #neg=227 #pos=8 */
%   | else if ( haswordtitle(A, G), haswordauthor(H, G) )
%   | | then if ( haswordtitle(B, G) )
%   | | | then return 0.30755472608314727;  // std dev = 1.05e-08, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.030224919116897907;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | | else return 0.5665884763551228;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( haswordtitle(B, I), haswordauthor(J, I) )
%   | then return 0.1721420117980276;  // std dev = 0.608, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | else return 0.24866359456314835;  // std dev = 0.839, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
WILL Produced-Tree #7
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordvenue(D, C) )
%   then if ( title(E, A), venue(E, D) )
%   | then if ( samebib(E, F), title(F, B) )
%   | | then if ( venue(F, D) )
%   | | | then return 0.4823397400190267;  // std dev = 1.665, 107.000 (wgt'ed) examples reached here.  /* #pos=107 */
%   | | | else return 0.4736459208138845;  // std dev = 1.027, 27.000 (wgt'ed) examples reached here.  /* #pos=27 */
%   | | else return -0.18426257629057088;  // std dev = 0.181, 235.000 (wgt'ed) examples reached here.  /* #neg=227 #pos=8 */
%   | else if ( haswordtitle(A, G), haswordauthor(H, G) )
%   | | then if ( haswordtitle(B, G) )
%   | | | then return 0.24617252978697307;  // std dev = 1.83e-08, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.02662436536963224;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | | else return 0.42588926978758823;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( haswordtitle(A, I), haswordauthor(J, I) )
%   | then return 0.1368779793428869;  // std dev = 0.599, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | else return 0.20256108490764937;  // std dev = 0.817, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
WILL Produced-Tree #8
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordvenue(D, C) )
%   then if ( title(E, A), venue(E, D) )
%   | then if ( samebib(E, F), title(F, B) )
%   | | then if ( venue(F, D) )
%   | | | then return 0.37605000101831493;  // std dev = 1.493, 107.000 (wgt'ed) examples reached here.  /* #pos=107 */
%   | | | else return 0.37582757061257965;  // std dev = 0.958, 27.000 (wgt'ed) examples reached here.  /* #pos=27 */
%   | | else return -0.15592611388235222;  // std dev = 0.179, 235.000 (wgt'ed) examples reached here.  /* #neg=227 #pos=8 */
%   | else if ( haswordtitle(A, G), haswordauthor(H, G) )
%   | | then if ( haswordtitle(B, G) )
%   | | | then return 0.20337970921485166;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.023387147810147755;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | | else return 0.32639574895438694;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( haswordtitle(B, I), haswordauthor(J, I) )
%   | then return 0.10725783652248821;  // std dev = 0.603, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | else return 0.16467216787523592;  // std dev = 0.794, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
WILL Produced-Tree #9
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordvenue(D, C) )
%   then if ( title(E, A), venue(E, D) )
%   | then if ( samebib(E, F), title(F, B) )
%   | | then if ( venue(F, D) )
%   | | | then return 0.2990969321566538;  // std dev = 1.296, 107.000 (wgt'ed) examples reached here.  /* #pos=107 */
%   | | | else return 0.3033054711040855;  // std dev = 0.857, 27.000 (wgt'ed) examples reached here.  /* #pos=27 */
%   | | else return -0.13416672686229109;  // std dev = 0.178, 235.000 (wgt'ed) examples reached here.  /* #neg=227 #pos=8 */
%   | else if ( haswordtitle(A, G), haswordauthor(H, G) )
%   | | then if ( haswordtitle(B, G) )
%   | | | then return 0.1724042028944549;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.020492345310102165;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | | else return 0.25904695378763276;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( haswordtitle(A, I), haswordauthor(J, I) )
%   | then return 0.08571924973518323;  // std dev = 0.604, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | else return 0.12997663380167657;  // std dev = 0.782, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
WILL Produced-Tree #10
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordvenue(D, C) )
%   then if ( title(E, A), venue(E, D) )
%   | then if ( samebib(E, F), title(F, B) )
%   | | then if ( venue(F, D) )
%   | | | then return 0.24416089172696134;  // std dev = 1.121, 107.000 (wgt'ed) examples reached here.  /* #pos=107 */
%   | | | else return 0.250078650998314;  // std dev = 0.757, 27.000 (wgt'ed) examples reached here.  /* #pos=27 */
%   | | else return -0.11703707358630787;  // std dev = 0.177, 235.000 (wgt'ed) examples reached here.  /* #neg=227 #pos=8 */
%   | else if ( haswordtitle(A, G), haswordauthor(H, G) )
%   | | then if ( haswordtitle(B, G) )
%   | | | then return 0.14917487560723686;  // std dev = 5.27e-09, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.017916160154861447;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | | else return 0.21249104803670715;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( haswordtitle(B, I), haswordauthor(J, I) )
%   | then return 0.06704858103081797;  // std dev = 0.613, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | else return 0.1041943991004553;  // std dev = 0.768, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */


Results
   AUC ROC   = 0.955605
   AUC PR    = 0.953536
   CLL	      = -0.258887
   Precision = 0.949275 at threshold = 0.5
   Recall    = 0.977612
   F1        = 0.963235


Total learning time: 450.42557287216187 seconds
Total inference time: 131.063 seconds
AUC ROC: 0.955605


Results scoring model
   AUC ROC   = 0.98326
   AUC PR    = 0.986398
   CLL	      = -0.216439
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.944444
   F1        = 0.971429


Total scoring time: 4.348 seconds
Parameter learned model CLL: -0.216439


Structure after Parameter Learning
[['sametitle(A, B)', {'': 'haswordtitle(A, C), haswordauthor(D, C)', 'true': 'haswordtitle(B, C)', 'false': 'haswordtitle(B, E), haswordauthor(F, E)', 'false,true': 'author(G, F), title(G, A)'}, {'true,true': [0.326, 8, 58], 'true,false': [0.352, 53, 9], 'false,true,true': [1.095, 2, 3], 'false,true,false': [0.322, 45, 6], 'false,false': [0.49, 128, 86]}], ['sametitle(A, B)', {'': 'haswordtitle(A, C), haswordauthor(D, C)', 'true': 'haswordtitle(B, C)', 'true,false': 'author(E, D), title(E, B)', 'false': 'haswordtitle(B, F), haswordauthor(G, F)', 'false,true': 'author(H, G), title(H, A)'}, {'true,true': [0.326, 8, 58], 'true,false,true': [0.484, 5, 3], 'true,false,false': [0.314, 48, 6], 'false,true,true': [1.095, 2, 3], 'false,true,false': [0.322, 45, 6], 'false,false': [0.49, 128, 86]}], ['sametitle(A, B)', {'': 'haswordtitle(A, C), haswordauthor(D, C)', 'true': 'haswordtitle(B, C)', 'true,false': 'author(E, D), title(E, B)', 'false': 'haswordtitle(B, F), haswordauthor(G, F)', 'false,true': 'author(H, G), title(H, A)'}, {'true,true': [0.326, 8, 58], 'true,false,true': [0.484, 5, 3], 'true,false,false': [0.314, 48, 6], 'false,true,true': [1.095, 2, 3], 'false,true,false': [0.322, 45, 6], 'false,false': [0.49, 128, 86]}], ['sametitle(A, B)', {'': 'haswordtitle(A, C), haswordauthor(D, C)', 'true': 'haswordtitle(B, C)', 'true,false': 'author(E, D), title(E, B)'}, {'true,true': [0.326, 8, 58], 'true,false,true': [0.484, 5, 3], 'true,false,false': [0.314, 48, 6], 'false': [0.468, 175, 95]}], ['sametitle(A, B)', {'': 'haswordtitle(A, C), haswordvenue(D, C)', 'true': 'title(E, A), venue(E, D)', 'true,false': 'haswordtitle(A, F), haswordauthor(G, F)', 'true,false,true': 'haswordtitle(B, F)', 'false': 'haswordtitle(B, H), haswordauthor(I, H)'}, {'true,true': [0.441, 227, 142], 'true,false,true,true': [2.11e-08, 0, 9], 'true,false,true,false': [0.913, 5, 1], 'true,false,false': [0.0, 0, 4], 'false,true': [0.632, 2, 4], 'false,false': [0.863, 2, 2]}], ['sametitle(A, B)', {'': 'haswordtitle(A, C), haswordvenue(D, C)', 'true': 'title(E, A), venue(E, D)', 'true,true': 'samebib(E, F), title(F, B)', 'true,true,true': 'venue(F, D)', 'true,false': 'haswordtitle(A, G), haswordauthor(H, G)', 'true,false,true': 'haswordtitle(B, G)', 'false': 'haswordtitle(B, I), haswordauthor(J, I)'}, {'true,true,true,true': [1.675, 0, 107], 'true,true,true,false': [0.997, 0, 27], 'true,true,false': [0.183, 227, 8], 'true,false,true,true': [1.05e-08, 0, 9], 'true,false,true,false': [0.913, 5, 1], 'true,false,false': [0.0, 0, 4], 'false,true': [0.608, 2, 4], 'false,false': [0.839, 2, 2]}], ['sametitle(A, B)', {'': 'haswordtitle(A, C), haswordvenue(D, C)', 'true': 'title(E, A), venue(E, D)', 'true,true': 'samebib(E, F), title(F, B)', 'true,true,true': 'venue(F, D)', 'true,false': 'haswordtitle(A, G), haswordauthor(H, G)', 'true,false,true': 'haswordtitle(B, G)', 'false': 'haswordtitle(A, I), haswordauthor(J, I)'}, {'true,true,true,true': [1.665, 0, 107], 'true,true,true,false': [1.027, 0, 27], 'true,true,false': [0.181, 227, 8], 'true,false,true,true': [1.83e-08, 0, 9], 'true,false,true,false': [0.913, 5, 1], 'true,false,false': [0.0, 0, 4], 'false,true': [0.599, 2, 4], 'false,false': [0.817, 2, 2]}], ['sametitle(A, B)', {'': 'haswordtitle(A, C), haswordvenue(D, C)', 'true': 'title(E, A), venue(E, D)', 'true,true': 'samebib(E, F), title(F, B)', 'true,true,true': 'venue(F, D)', 'true,false': 'haswordtitle(A, G), haswordauthor(H, G)', 'true,false,true': 'haswordtitle(B, G)', 'false': 'haswordtitle(B, I), haswordauthor(J, I)'}, {'true,true,true,true': [1.493, 0, 107], 'true,true,true,false': [0.958, 0, 27], 'true,true,false': [0.179, 227, 8], 'true,false,true,true': [0.0, 0, 9], 'true,false,true,false': [0.913, 5, 1], 'true,false,false': [0.0, 0, 4], 'false,true': [0.603, 2, 4], 'false,false': [0.794, 2, 2]}], ['sametitle(A, B)', {'': 'haswordtitle(A, C), haswordvenue(D, C)', 'true': 'title(E, A), venue(E, D)', 'true,true': 'samebib(E, F), title(F, B)', 'true,true,true': 'venue(F, D)', 'true,false': 'haswordtitle(A, G), haswordauthor(H, G)', 'true,false,true': 'haswordtitle(B, G)', 'false': 'haswordtitle(A, I), haswordauthor(J, I)'}, {'true,true,true,true': [1.296, 0, 107], 'true,true,true,false': [0.857, 0, 27], 'true,true,false': [0.178, 227, 8], 'true,false,true,true': [0.0, 0, 9], 'true,false,true,false': [0.913, 5, 1], 'true,false,false': [0.0, 0, 4], 'false,true': [0.604, 2, 4], 'false,false': [0.782, 2, 2]}], ['sametitle(A, B)', {'': 'haswordtitle(A, C), haswordvenue(D, C)', 'true': 'title(E, A), venue(E, D)', 'true,true': 'samebib(E, F), title(F, B)', 'true,true,true': 'venue(F, D)', 'true,false': 'haswordtitle(A, G), haswordauthor(H, G)', 'true,false,true': 'haswordtitle(B, G)', 'false': 'haswordtitle(B, I), haswordauthor(J, I)'}, {'true,true,true,true': [1.121, 0, 107], 'true,true,true,false': [0.757, 0, 27], 'true,true,false': [0.177, 227, 8], 'true,false,true,true': [5.27e-09, 0, 9], 'true,false,true,false': [0.913, 5, 1], 'true,false,false': [0.0, 0, 4], 'false,true': [0.613, 2, 4], 'false,false': [0.768, 2, 2]}]]
[{'': [0.24945068359374953, 0.22805212620027596], 'true': [0.10651974288337872, 0.12408949011446431], 'false': [0.13488520408163285, 0.24037033802078886], 'false,true': [0.23999999999999994, 0.10380622837370264]}, {'': [0.21077521176750943, 0.22468468999326865], 'false': [0.12990844832826262, 0.24037033802078653], 'true': [0.10651974288338104, 0.12408949011446414], 'false,true': [0.24, 0.10380622837370222], 'true,false': [0.234375, 0.09876543209876548]}, {'': [0.17287051406664794, 0.22175694261288317], 'false': [0.12534868619491504, 0.24037033802078797], 'true': [0.10651974288337995, 0.12217257709273506], 'false,true': [0.24000000000000005, 0.10380622837370218], 'true,false': [0.23437499999999994, 0.09876543209876511]}, {'': [0.14680294293560336, 0.21944776426398832], 'true': [0.10651974288337966, 0.1205472811209754], 'true,false': [0.234375, 0.09876543209876548]}, {'': [0.1927634098406744, 0.11618142360624502], 'true': [0.19404386043603292, 0.10696697109573974], 'false': [0.06663054855108749, 0.1863114328051781], 'true,false': [0.08733135525405492, 0.0], 'true,false,true': [4.9343245538895844e-17, 0.13888888888888892]}, {'': [0.1896511482209856, 0.10877010452309141], 'true': [0.19340989622475271, 0.08118165623582954], 'true,true': [0.02842066622777708, 0.03366196273850198], 'false': [0.06165922888852247, 0.17592308639761722], 'true,false': [0.07401439279522044, 0.0], 'true,false,true': [1.2335811384723961e-17, 0.13888888888888884], 'true,true,true': [0.026224094585944758, 0.03682985411462531]}, {'': [0.13128879541094268, 0.10358806062905948], 'true': [0.13349298313874444, 0.06488875267808827], 'true,true': [0.028576388199921494, 0.03279873307211774], 'false': [0.05978349881339945, 0.1667063411385705], 'true,false': [0.06712389071532125, 0.0], 'true,false,true': [3.700743415417188e-17, 0.13888888888888892], 'true,true,true': [0.025908793221802052, 0.03908761511418651]}, {'': [0.09343064816739968, 0.1002112830187031], 'false': [0.060574435459176006, 0.15768871109118388], 'true': [0.09444648802277247, 0.056318880565211164], 'true,true': [0.023484405268576, 0.03215815451118266], 'true,false': [0.06333091287420181, 0.0], 'true,false,true': [-3.0839528461809905e-17, 0.13888888888888892], 'true,true,true': [0.020840602892101382, 0.03396165666155361]}, {'': [0.0700625641785607, 0.09810150289777726], 'false': [0.06083334817672614, 0.15282850535270848], 'true': [0.07030494686082056, 0.051843636627572465], 'true,true': [0.018007213610772285, 0.031690303137147414], 'true,false': [0.06109408654949044, 0.0], 'true,false,true': [0.0, 0.13888888888888887], 'true,true,true': [0.015687781680067184, 0.027184893442734198]}, {'': [0.05553573603170816, 0.09694626256929073], 'false': [0.06260071536729088, 0.147636696292253], 'true': [0.05529872506313955, 0.04935356869449973], 'true,true': [0.013661311074452051, 0.031350431526988395], 'true,false': [0.05969047964728539, 0.0], 'true,false,true': [3.0839528461809902e-18, 0.13888888888888887], 'true,true,true': [0.011742184474023133, 0.021238775081824122]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
4;;sametitle(A, B) :- haswordtitle(A, C), haswordvenue(D, C).;true;true
4;true;title(E, A), venue(E, D).;true;true
4;true,false;haswordtitle(A, F), haswordauthor(G, F).;true;true
4;true,false,true;haswordtitle(B, F).;true;true
5;;sametitle(A, B) :- haswordtitle(A, C), haswordvenue(D, C).;true;true
5;true;title(E, A), venue(E, D).;true;true
5;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
5;true,false,true;haswordtitle(B, G).;true;true
6;;sametitle(A, B) :- haswordtitle(A, C), haswordvenue(D, C).;true;true
6;true;title(E, A), venue(E, D).;true;true
6;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
6;true,false,true;haswordtitle(B, G).;true;true
7;;sametitle(A, B) :- haswordtitle(A, C), haswordvenue(D, C).;true;true
7;true;title(E, A), venue(E, D).;true;true
7;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
7;true,false,true;haswordtitle(B, G).;true;true
8;;sametitle(A, B) :- haswordtitle(A, C), haswordvenue(D, C).;true;true
8;true;title(E, A), venue(E, D).;true;true
8;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
8;true,false,true;haswordtitle(B, G).;true;true
9;;sametitle(A, B) :- haswordtitle(A, C), haswordvenue(D, C).;true;true
9;true;title(E, A), venue(E, D).;true;true
9;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
9;true,false,true;haswordtitle(B, G).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordauthor(D, C) )
%   then if ( haswordtitle(B, C) )
%   | then return 0.7369368138873914;  // std dev = 0.326, 66.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=58 */
%   | else if ( author(E, D), title(E, B) )
%   | | then return 0.23314893509951226;  // std dev = 0.484, 8.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=3 */
%   | | else return -0.030739953789376603;  // std dev = 0.314, 54.000 (wgt'ed) examples reached here.  /* #neg=48 #pos=6 */
%   else if ( haswordtitle(B, F), haswordauthor(G, F) )
%   | then if ( author(H, G), title(H, A) )
%   | | then return 0.4581489350995122;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | else return -0.024204006076958298;  // std dev = 0.322, 51.000 (wgt'ed) examples reached here.  /* #neg=45 #pos=6 */
%   | else return 0.2600180939780157;  // std dev = 0.490, 214.000 (wgt'ed) examples reached here.  /* #neg=128 #pos=86 */
WILL Produced-Tree #2
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordauthor(D, C) )
%   then if ( haswordtitle(B, C) )
%   | then return 0.6220633676283396;  // std dev = 0.326, 66.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=58 */
%   | else if ( author(E, D), title(E, B) )
%   | | then return 0.202334239218108;  // std dev = 0.484, 8.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=3 */
%   | | else return -0.027039036105351338;  // std dev = 0.314, 54.000 (wgt'ed) examples reached here.  /* #neg=48 #pos=6 */
%   else if ( haswordtitle(B, F), haswordauthor(G, F) )
%   | then if ( author(H, G), title(H, A) )
%   | | then return 0.3927941835770488;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | else return -0.021283130990843033;  // std dev = 0.322, 51.000 (wgt'ed) examples reached here.  /* #neg=45 #pos=6 */
%   | else return 0.22533125375206722;  // std dev = 0.490, 214.000 (wgt'ed) examples reached here.  /* #neg=128 #pos=86 */
WILL Produced-Tree #3
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordauthor(D, C) )
%   then if ( haswordtitle(B, C) )
%   | then return 0.48728512046144257;  // std dev = 0.326, 66.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=58 */
%   | else if ( author(E, D), title(E, B) )
%   | | then return 0.17149281961528945;  // std dev = 0.484, 8.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=3 */
%   | | else return -0.023851027745157644;  // std dev = 0.314, 54.000 (wgt'ed) examples reached here.  /* #neg=48 #pos=6 */
%   else if ( haswordtitle(B, F), haswordauthor(G, F) )
%   | then return 0.011572182443386106;  // std dev = 0.354, 56.000 (wgt'ed) examples reached here.  /* #neg=47 #pos=9 */
%   | else return 0.19015949657647718;  // std dev = 0.490, 214.000 (wgt'ed) examples reached here.  /* #neg=128 #pos=86 */
WILL Produced-Tree #4
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordauthor(D, C) )
%   then if ( haswordtitle(B, C) )
%   | then return 0.3672186186501392;  // std dev = 0.326, 66.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=58 */
%   | else if ( author(E, D), title(E, B) )
%   | | then return 0.14228146899184052;  // std dev = 0.484, 8.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=3 */
%   | | else return -0.02109064741059412;  // std dev = 0.314, 54.000 (wgt'ed) examples reached here.  /* #neg=48 #pos=6 */
%   else return 0.1262896808511608;  // std dev = 0.469, 270.000 (wgt'ed) examples reached here.  /* #neg=175 #pos=95 */
WILL Produced-Tree #5
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordvenue(D, C) )
%   then if ( title(E, A), venue(E, D) )
%   | then if ( samebib(E, F), title(F, B) )
%   | | then if ( venue(F, D) )
%   | | | then return 0.6383843543312495;  // std dev = 1.651, 107.000 (wgt'ed) examples reached here.  /* #pos=107 */
%   | | | else return 0.6183900019862668;  // std dev = 0.978, 27.000 (wgt'ed) examples reached here.  /* #pos=27 */
%   | | else return -0.20434481205552205;  // std dev = 0.184, 235.000 (wgt'ed) examples reached here.  /* #neg=227 #pos=8 */
%   | else if ( haswordtitle(A, G), haswordauthor(H, G) )
%   | | then if ( haswordtitle(B, G) )
%   | | | then return 0.39807224506280847;  // std dev = 2.11e-08, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.036865808120230804;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | | else return 0.7307048202076194;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( haswordtitle(B, I), haswordauthor(J, I) )
%   | then return 0.21422416923602405;  // std dev = 0.637, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | else return 0.30045198083059177;  // std dev = 0.861, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
WILL Produced-Tree #6
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordvenue(D, C) )
%   then if ( title(E, A), venue(E, D) )
%   | then if ( samebib(E, F), title(F, B) )
%   | | then if ( venue(F, D) )
%   | | | then return 0.4999720858201985;  // std dev = 1.680, 107.000 (wgt'ed) examples reached here.  /* #pos=107 */
%   | | | else return 0.490113968074025;  // std dev = 1.029, 27.000 (wgt'ed) examples reached here.  /* #pos=27 */
%   | | else return -0.17096806942257037;  // std dev = 0.182, 235.000 (wgt'ed) examples reached here.  /* #neg=227 #pos=8 */
%   | else if ( haswordtitle(A, G), haswordauthor(H, G) )
%   | | then if ( haswordtitle(B, G) )
%   | | | then return 0.30755472608314727;  // std dev = 1.05e-08, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.032644587563216684;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | | else return 0.5664782344108348;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( haswordtitle(B, I), haswordauthor(J, I) )
%   | then return 0.17087998025143966;  // std dev = 0.614, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | else return 0.2500119217721283;  // std dev = 0.835, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
WILL Produced-Tree #7
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordvenue(D, C) )
%   then if ( title(E, A), venue(E, D) )
%   | then if ( samebib(E, F), title(F, B) )
%   | | then if ( venue(F, D) )
%   | | | then return 0.389188122633893;  // std dev = 1.520, 107.000 (wgt'ed) examples reached here.  /* #pos=107 */
%   | | | else return 0.38820887057648784;  // std dev = 0.968, 27.000 (wgt'ed) examples reached here.  /* #pos=27 */
%   | | else return -0.1457514416574626;  // std dev = 0.181, 235.000 (wgt'ed) examples reached here.  /* #neg=227 #pos=8 */
%   | else if ( haswordtitle(A, G), haswordauthor(H, G) )
%   | | then if ( haswordtitle(B, G) )
%   | | | then return 0.24617252978697307;  // std dev = 1.83e-08, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.02881038396390746;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | | else return 0.4258064633314512;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( haswordtitle(B, I), haswordauthor(J, I) )
%   | then return 0.13674917995218924;  // std dev = 0.601, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | else return 0.20229976168499653;  // std dev = 0.816, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
WILL Produced-Tree #8
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordvenue(D, C) )
%   then if ( title(E, A), venue(E, D) )
%   | then if ( samebib(E, F), title(F, B) )
%   | | then if ( venue(F, D) )
%   | | | then return 0.30846830743446946;  // std dev = 1.322, 107.000 (wgt'ed) examples reached here.  /* #pos=107 */
%   | | | else return 0.3123399549042498;  // std dev = 0.869, 27.000 (wgt'ed) examples reached here.  /* #pos=27 */
%   | | else return -0.126179066254697;  // std dev = 0.180, 235.000 (wgt'ed) examples reached here.  /* #neg=227 #pos=8 */
%   | else if ( haswordtitle(A, G), haswordauthor(H, G) )
%   | | then if ( haswordtitle(B, G) )
%   | | | then return 0.20337970921485166;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.0253503533817251;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | | else return 0.3263394958635427;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( haswordtitle(A, I), haswordauthor(J, I) )
%   | then return 0.10772709408269547;  // std dev = 0.603, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | else return 0.16351865054181625;  // std dev = 0.795, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
WILL Produced-Tree #9
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordvenue(D, C) )
%   then if ( title(E, A), venue(E, D) )
%   | then if ( samebib(E, F), title(F, B) )
%   | | then if ( venue(F, D) )
%   | | | then return 0.250879343077651;  // std dev = 1.143, 107.000 (wgt'ed) examples reached here.  /* #pos=107 */
%   | | | else return 0.2566951315573659;  // std dev = 0.769, 27.000 (wgt'ed) examples reached here.  /* #pos=27 */
%   | | else return -0.11062694436011453;  // std dev = 0.179, 235.000 (wgt'ed) examples reached here.  /* #neg=227 #pos=8 */
%   | else if ( haswordtitle(A, G), haswordauthor(H, G) )
%   | | then if ( haswordtitle(B, G) )
%   | | | then return 0.1724042028944549;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.022246129355004873;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | | else return 0.2590086411748418;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( haswordtitle(B, I), haswordauthor(J, I) )
%   | then return 0.08550729791460998;  // std dev = 0.606, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | else return 0.12987419182651;  // std dev = 0.781, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
WILL Produced-Tree #10
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordvenue(D, C) )
%   then if ( title(E, A), venue(E, D) )
%   | then if ( samebib(E, F), title(F, B) )
%   | | then if ( venue(F, D) )
%   | | | then return 0.2092189067647395;  // std dev = 0.996, 107.000 (wgt'ed) examples reached here.  /* #pos=107 */
%   | | | else return 0.21548368439963075;  // std dev = 0.680, 27.000 (wgt'ed) examples reached here.  /* #pos=27 */
%   | | else return -0.09801816175432287;  // std dev = 0.178, 235.000 (wgt'ed) examples reached here.  /* #neg=227 #pos=8 */
%   | else if ( haswordtitle(A, G), haswordauthor(H, G) )
%   | | then if ( haswordtitle(B, G) )
%   | | | then return 0.14917487560723686;  // std dev = 5.27e-09, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.019475523436740427;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | | else return 0.21246405714863315;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( haswordtitle(A, I), haswordauthor(J, I) )
%   | then return 0.06744139230664341;  // std dev = 0.613, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | else return 0.10322771721198791;  // std dev = 0.770, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */


Results
   AUC ROC   = 0.96065
   AUC PR    = 0.955785
   CLL	      = -0.236146
   Precision = 0.949275 at threshold = 0.5
   Recall    = 0.977612
   F1        = 0.963235


Total learning time: 472.54636907577515 seconds
Total inference time: 153.43 seconds
AUC ROC: 0.96065


Results scoring model
   AUC ROC   = 0.986608
   AUC PR    = 0.988761
   CLL	      = -0.197893
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.944444
   F1        = 0.971429


Total scoring time: 4.555 seconds
Refined model CLL: -0.197893


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.96065
   AUC PR    = 0.955785
   CLL	      = -0.236146
   Precision = 0.949275 at threshold = 0.5
   Recall    = 0.977612
   F1        = 0.963235


Total learning time: 931.8749419479369 seconds
Total inference time: 153.43 seconds
AUC ROC: 0.96065
Total revision time: 931.8749419479369
Best scored revision CLL: -0.197893


Dataset: 6_imdb_cora, Fold: 1, Type: Transfer (trRDN-B), Time: 03:49:49
{'AUC ROC': 0.96065, 'AUC PR': 0.955785, 'CLL': -0.236146, 'Precision': [0.949275, 0.5], 'Recall': 0.977612, 'F1': 0.963235, 'Learning time': 931.8749419479369, 'Inference time': 153.43, 'parameter': {'AUC ROC': 0.955605, 'AUC PR': 0.953536, 'CLL': -0.258887, 'Precision': [0.949275, 0.5], 'Recall': 0.977612, 'F1': 0.963235, 'Learning time': 450.42557287216187, 'Inference time': 131.063}}


WILL Produced-Tree #1
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordvenue(D, C) )
%   then if ( haswordtitle(A, E), haswordauthor(F, E) )
%   | then if ( haswordtitle(B, E) )
%   | | then return 0.7291166770349965;  // std dev = 0.335, 62.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=54 */
%   | | else if ( author(G, F), title(G, B) )
%   | | | then return 0.23314893509951226;  // std dev = 1.369, 8.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=3 */
%   | | | else return -0.026466449515872327;  // std dev = 2.304, 52.000 (wgt'ed) examples reached here.  /* #neg=46 #pos=6 */
%   | else if ( title(H, B), venue(H, D) )
%   | | then if ( samebib(H, I), title(I, A) )
%   | | | then return 0.8581489350995121;  // std dev = 0.000, 85.000 (wgt'ed) examples reached here.  /* #pos=85 */
%   | | | else return -0.12430720525136522;  // std dev = 1.717, 171.000 (wgt'ed) examples reached here.  /* #neg=168 #pos=3 */
%   | | else if ( title(J, A), venue(J, D) )
%   | | | then return 0.1438632208137979;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=2 */
%   | | | else return 0.8581489350995121;  // std dev = 2.11e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( haswordtitle(A, K), haswordauthor(L, K) )
%   | then return 0.5248156017661789;  // std dev = 1.155, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | else return 0.3581489350995122;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
WILL Produced-Tree #2
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordauthor(D, C) )
%   then if ( haswordtitle(B, C) )
%   | then return 0.6257869283720766;  // std dev = 0.327, 66.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=58 */
%   | else if ( author(E, D), title(E, B) )
%   | | then return 0.202334239218108;  // std dev = 0.484, 8.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=3 */
%   | | else return -0.030500917274027314;  // std dev = 0.316, 54.000 (wgt'ed) examples reached here.  /* #neg=48 #pos=6 */
%   else return 0.17275677560801053;  // std dev = 0.410, 270.000 (wgt'ed) examples reached here.  /* #neg=175 #pos=95 */
WILL Produced-Tree #3
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordauthor(D, C) )
%   then if ( haswordtitle(B, C) )
%   | then return 0.49113345116223694;  // std dev = 0.328, 66.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=58 */
%   | else return -0.0012489816333269557;  // std dev = 0.348, 62.000 (wgt'ed) examples reached here.  /* #neg=53 #pos=9 */
%   else return 0.14695508840473617;  // std dev = 0.403, 270.000 (wgt'ed) examples reached here.  /* #neg=175 #pos=95 */
WILL Produced-Tree #4
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordauthor(D, C) )
%   then if ( haswordtitle(B, C) )
%   | then return 0.3703710019257535;  // std dev = 0.328, 66.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=58 */
%   | else if ( author(E, D), title(E, B) )
%   | | then return 0.1716951945874754;  // std dev = 0.484, 8.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=3 */
%   | | else return -0.026692168508321203;  // std dev = 0.316, 54.000 (wgt'ed) examples reached here.  /* #neg=48 #pos=6 */
%   else if ( haswordtitle(B, F), haswordauthor(G, F) )
%   | then return -0.030034475859584693;  // std dev = 0.334, 56.000 (wgt'ed) examples reached here.  /* #neg=47 #pos=9 */
%   | else return 0.1630355974375531;  // std dev = 0.403, 214.000 (wgt'ed) examples reached here.  /* #neg=128 #pos=86 */
WILL Produced-Tree #5
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordauthor(D, C) )
%   then if ( haswordtitle(B, C) )
%   | then return 0.2791823208904323;  // std dev = 0.328, 66.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=58 */
%   | else return -0.002134362041833685;  // std dev = 0.347, 62.000 (wgt'ed) examples reached here.  /* #neg=53 #pos=9 */
%   else if ( haswordtitle(B, E), haswordauthor(F, E) )
%   | then return -0.025523473924812665;  // std dev = 0.334, 56.000 (wgt'ed) examples reached here.  /* #neg=47 #pos=9 */
%   | else return 0.1335759980738954;  // std dev = 0.397, 214.000 (wgt'ed) examples reached here.  /* #neg=128 #pos=86 */
WILL Produced-Tree #6
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordvenue(D, C) )
%   then if ( title(E, A), venue(E, D) )
%   | then if ( samebib(E, F), title(F, B) )
%   | | then if ( venue(F, D) )
%   | | | then return 0.5169206649831001;  // std dev = 1.342, 107.000 (wgt'ed) examples reached here.  /* #pos=107 */
%   | | | else return 0.5211263800122514;  // std dev = 0.913, 27.000 (wgt'ed) examples reached here.  /* #pos=27 */
%   | | else return -0.1745958703431229;  // std dev = 0.190, 235.000 (wgt'ed) examples reached here.  /* #neg=227 #pos=8 */
%   | else if ( haswordtitle(A, G), haswordauthor(H, G) )
%   | | then if ( haswordtitle(B, G) )
%   | | | then return 0.3327906215230954;  // std dev = 2.11e-08, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.0350846603624431;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | | else return 0.580670778093094;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( haswordtitle(B, I), haswordauthor(J, I) )
%   | then return 0.1745710893234247;  // std dev = 0.710, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | else return 0.24360019129166519;  // std dev = 0.904, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
WILL Produced-Tree #7
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordvenue(D, C) )
%   then if ( title(E, A), venue(E, D) )
%   | then if ( samebib(E, F), title(F, B) )
%   | | then if ( venue(F, D) )
%   | | | then return 0.3977314006835686;  // std dev = 1.286, 107.000 (wgt'ed) examples reached here.  /* #pos=107 */
%   | | | else return 0.4085017811356439;  // std dev = 0.920, 27.000 (wgt'ed) examples reached here.  /* #pos=27 */
%   | | else return -0.14889460944730867;  // std dev = 0.189, 235.000 (wgt'ed) examples reached here.  /* #neg=227 #pos=8 */
%   | else if ( haswordtitle(A, G), haswordauthor(H, G) )
%   | | then if ( haswordtitle(B, G) )
%   | | | then return 0.2633981012802456;  // std dev = 1.49e-08, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.03102352305282778;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | | else return 0.4365579964929047;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( haswordtitle(B, I), haswordauthor(J, I) )
%   | then return 0.1368405096608781;  // std dev = 0.702, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | else return 0.19514957437081573;  // std dev = 0.893, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
WILL Produced-Tree #8
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordvenue(D, C) )
%   then if ( title(E, A), venue(E, D) )
%   | then if ( samebib(E, F), title(F, B) )
%   | | then if ( venue(F, D) )
%   | | | then return 0.3126292027479325;  // std dev = 1.174, 107.000 (wgt'ed) examples reached here.  /* #pos=107 */
%   | | | else return 0.3260891562051108;  // std dev = 0.870, 27.000 (wgt'ed) examples reached here.  /* #pos=27 */
%   | | else return -0.1289941298938067;  // std dev = 0.187, 235.000 (wgt'ed) examples reached here.  /* #neg=227 #pos=8 */
%   | else if ( haswordtitle(A, G), haswordauthor(H, G) )
%   | | then if ( haswordtitle(B, G) )
%   | | | then return 0.21555183155157986;  // std dev = 7.45e-09, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.027344911963806437;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | | else return 0.3336547465941412;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( haswordtitle(B, I), haswordauthor(J, I) )
%   | then return 0.10762278117127362;  // std dev = 0.699, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | else return 0.15292083882337915;  // std dev = 0.885, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
WILL Produced-Tree #9
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordvenue(D, C) )
%   then if ( title(E, A), venue(E, D) )
%   | then if ( samebib(E, F), title(F, B) )
%   | | then if ( venue(F, D) )
%   | | | then return 0.25305106978792674;  // std dev = 1.061, 107.000 (wgt'ed) examples reached here.  /* #pos=107 */
%   | | | else return 0.26674016498886777;  // std dev = 0.803, 27.000 (wgt'ed) examples reached here.  /* #pos=27 */
%   | | else return -0.11319971001939001;  // std dev = 0.186, 235.000 (wgt'ed) examples reached here.  /* #neg=227 #pos=8 */
%   | else if ( haswordtitle(A, G), haswordauthor(H, G) )
%   | | then if ( haswordtitle(B, G) )
%   | | | then return 0.18133468553358878;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.024033497465547737;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | | else return 0.2639854468446581;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( haswordtitle(A, I), haswordauthor(J, I) )
%   | then return 0.08391894638152779;  // std dev = 0.703, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | else return 0.11963129468385376;  // std dev = 0.877, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
WILL Produced-Tree #10
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordauthor(D, C) )
%   then if ( author(E, D), title(E, B) )
%   | then if ( author(F, D), title(F, A) )
%   | | then return 0.03711036587281441;  // std dev = 0.228, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return 0.2820175516907139;  // std dev = 0.495, 7.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=3 */
%   | else if ( haswordtitle(B, C) )
%   | | then return 0.05067341006100699;  // std dev = 0.232, 64.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=56 */
%   | | else return -0.015233405507676557;  // std dev = 0.239, 54.000 (wgt'ed) examples reached here.  /* #neg=48 #pos=6 */
%   else if ( haswordtitle(B, G), haswordauthor(H, G) )
%   | then if ( author(I, H), title(I, A) )
%   | | then return 0.5025458613881474;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | else return -0.05913542707481812;  // std dev = 0.152, 51.000 (wgt'ed) examples reached here.  /* #neg=45 #pos=6 */
%   | else return 0.019238013405990014;  // std dev = 0.188, 214.000 (wgt'ed) examples reached here.  /* #neg=128 #pos=86 */


Results
   AUC ROC   = 0.984488
   AUC PR    = 0.988683
   CLL	      = -0.252841
   Precision = 0.871795 at threshold = 0.5
   Recall    = 0.951493
   F1        = 0.909902


Total learning time: 402.56089305877686 seconds
Total inference time: 168.153 seconds
AUC ROC: 0.984488


Dataset: 6_imdb_cora, Fold: 1, Type: Scratch (RDN-B), Time: 03:59:21
{'AUC ROC': 0.984488, 'AUC PR': 0.988683, 'CLL': -0.252841, 'Precision': [0.871795, 0.5], 'Recall': 0.951493, 'F1': 0.909902, 'Learning time': 402.56089305877686, 'Inference time': 168.153}


Starting fold 2

Target train facts examples: 9016
Target train pos examples: 140
Target train neg examples: 52

Target test facts examples: 33542
Target test pos  examples: 558
Target test neg examples: 664

******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


WILL Produced-Tree #1
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordauthor(D, C) )
%   then if ( haswordtitle(B, C) )
%   | then if ( author(E, D), title(E, A) )
%   | | then return 0.8581489350995123;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return 0.7936328060672545;  // std dev = 0.246, 62.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=58 */
%   | else return -0.1418510649004878;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   else return 0.5618526388032163;  // std dev = 0.457, 108.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=76 */
WILL Produced-Tree #2
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordauthor(D, C) )
%   then if ( haswordtitle(B, C) )
%   | then if ( author(E, D), title(E, B) )
%   | | then return 0.7237518087032814;  // std dev = 0.015, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return 0.6673784342854517;  // std dev = 0.246, 62.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=58 */
%   | else return -0.12544463852839138;  // std dev = 7.45e-09, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   else return 0.478945074750187;  // std dev = 0.457, 108.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=76 */
WILL Produced-Tree #3
% FOR sametitle(A, B):
%   if ( haswordtitle(B, C), haswordauthor(D, C) )
%   then if ( haswordtitle(A, C) )
%   | then return 0.5225100911707643;  // std dev = 0.235, 68.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=64 */
%   | else return -0.31881948350713596;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   else if ( haswordtitle(A, E), haswordauthor(F, E) )
%   | then return -0.11231637819360635;  // std dev = 1.39e-08, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | else return 0.5072674730146044;  // std dev = 0.379, 92.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=76 */
WILL Produced-Tree #4
% FOR sametitle(A, B):
%   if ( haswordtitle(B, C), haswordauthor(D, C) )
%   then if ( haswordtitle(A, C) )
%   | then if ( author(E, D), title(E, B) )
%   | | then return 0.42975714872097215;  // std dev = 0.018, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return 0.38921763824397254;  // std dev = 0.246, 62.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=58 */
%   | else return -0.25388056084682503;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   else if ( haswordtitle(A, F), haswordauthor(G, F) )
%   | then return -0.10159632948783631;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | else return 0.3887396235055974;  // std dev = 0.379, 92.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=76 */
WILL Produced-Tree #5
% FOR sametitle(A, B):
%   if ( haswordtitle(B, C), haswordauthor(D, C) )
%   then if ( haswordtitle(A, C) )
%   | then if ( author(E, D), title(E, A) )
%   | | then return 0.3314762699936476;  // std dev = 0.025, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return 0.2953782797457817;  // std dev = 0.246, 62.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=58 */
%   | else return -0.20884487148991215;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   else return 0.23495673308821527;  // std dev = 0.376, 108.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=76 */
WILL Produced-Tree #6
% FOR sametitle(A, B):
%   if ( haswordtitle(B, C), haswordauthor(D, C) )
%   then if ( author(E, D), title(E, B) )
%   | then return 0.26277894232937943;  // std dev = 0.023, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else if ( haswordtitle(A, C) )
%   | | then return 0.2304683827354977;  // std dev = 0.246, 62.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=58 */
%   | | else return -0.17642667980685725;  // std dev = 7.45e-09, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   else if ( haswordtitle(A, F), haswordauthor(G, F) )
%   | then return -0.11443167662428472;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | else return 0.23420239583254845;  // std dev = 0.379, 92.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=76 */
WILL Produced-Tree #7
% FOR sametitle(A, B):
%   if ( haswordtitle(B, C), haswordauthor(D, C) )
%   then if ( haswordtitle(A, C) )
%   | then if ( author(E, D), title(E, A) )
%   | | then return 0.21681940674402514;  // std dev = 0.026, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return 0.18473274393328143;  // std dev = 0.246, 62.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=58 */
%   | else return -0.15223554373863446;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   else if ( haswordtitle(A, F), haswordauthor(G, F) )
%   | then return -0.10333711563793015;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | else return 0.17906738333377686;  // std dev = 0.379, 92.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=76 */
WILL Produced-Tree #8
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordauthor(D, C) )
%   then if ( haswordtitle(B, C) )
%   | then return 0.154477809395529;  // std dev = 0.235, 68.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=64 */
%   | else return -0.09414693010094698;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   else if ( haswordtitle(B, E), haswordauthor(F, E) )
%   | then return -0.13361007167418043;  // std dev = 1.83e-08, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | else return 0.13932349179772588;  // std dev = 0.379, 92.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=76 */
WILL Produced-Tree #9
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordauthor(D, C) )
%   then if ( haswordtitle(B, C) )
%   | then if ( author(E, D), title(E, B) )
%   | | then return 0.16054841699013164;  // std dev = 0.021, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return 0.12673390878471957;  // std dev = 0.246, 62.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=58 */
%   | else return -0.08641876965443963;  // std dev = 9.13e-09, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   else return 0.07622582307305155;  // std dev = 0.359, 108.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=76 */
WILL Produced-Tree #10
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordauthor(D, C) )
%   then if ( haswordtitle(B, C) )
%   | then if ( author(E, D), title(E, A) )
%   | | then return 0.14139023876331558;  // std dev = 0.023, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return 0.10776857994325144;  // std dev = 0.246, 62.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=58 */
%   | else return -0.07983535459559944;  // std dev = 3.73e-09, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   else if ( haswordtitle(B, F), haswordauthor(G, F) )
%   | then return -0.12710589677610298;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | else return 0.09491423300656451;  // std dev = 0.379, 92.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=76 */


Results
   AUC ROC   = 0.710468
   AUC PR    = 0.662841
   CLL	      = -0.7118
   Precision = 0.548596 at threshold = 0.5
   Recall    = 0.910394
   F1        = 0.684636


Total learning time: 26.908011198043823 seconds
Total inference time: 3.289 seconds
AUC ROC: 0.710468


Results scoring model
   AUC ROC   = 0.859341
   AUC PR    = 0.926052
   CLL	      = -0.340334
   Precision = 0.875 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.933333


Total scoring time: 1.651 seconds
Parameter learned model CLL: -0.340334


Structure after Parameter Learning
[['sametitle(A, B)', {'': 'haswordtitle(A, C), haswordauthor(D, C)', 'true': 'haswordtitle(B, C)', 'true,true': 'author(E, D), title(E, A)'}, {'true,true,true': [0.0, 0, 6], 'true,true,false': [0.246, 4, 58], 'true,false': [0.0, 16, 0], 'false': [0.457, 32, 76]}], ['sametitle(A, B)', {'': 'haswordtitle(A, C), haswordauthor(D, C)', 'true': 'haswordtitle(B, C)', 'true,true': 'author(E, D), title(E, B)'}, {'true,true,true': [0.015, 0, 6], 'true,true,false': [0.246, 4, 58], 'true,false': [7.45e-09, 16, 0], 'false': [0.457, 32, 76]}], ['sametitle(A, B)', {'': 'haswordtitle(B, C), haswordauthor(D, C)', 'true': 'haswordtitle(A, C)', 'false': 'haswordtitle(A, E), haswordauthor(F, E)'}, {'true,true': [0.235, 4, 64], 'true,false': [0.0, 16, 0], 'false,true': [1.39e-08, 16, 0], 'false,false': [0.379, 16, 76]}], ['sametitle(A, B)', {'': 'haswordtitle(B, C), haswordauthor(D, C)', 'true': 'haswordtitle(A, C)', 'true,true': 'author(E, D), title(E, B)', 'false': 'haswordtitle(A, F), haswordauthor(G, F)'}, {'true,true,true': [0.018, 0, 6], 'true,true,false': [0.246, 4, 58], 'true,false': [0.0, 16, 0], 'false,true': [0.0, 16, 0], 'false,false': [0.379, 16, 76]}], ['sametitle(A, B)', {'': 'haswordtitle(B, C), haswordauthor(D, C)', 'true': 'haswordtitle(A, C)', 'true,true': 'author(E, D), title(E, A)'}, {'true,true,true': [0.025, 0, 6], 'true,true,false': [0.246, 4, 58], 'true,false': [0.0, 16, 0], 'false': [0.376, 32, 76]}], ['sametitle(A, B)', {'': 'haswordtitle(B, C), haswordauthor(D, C)', 'true': 'author(E, D), title(E, B)', 'true,false': 'haswordtitle(A, C)', 'false': 'haswordtitle(A, F), haswordauthor(G, F)'}, {'true,true': [0.023, 0, 6], 'true,false,true': [0.246, 4, 58], 'true,false,false': [7.45e-09, 16, 0], 'false,true': [0.0, 16, 0], 'false,false': [0.379, 16, 76]}], ['sametitle(A, B)', {'': 'haswordtitle(B, C), haswordauthor(D, C)', 'true': 'haswordtitle(A, C)', 'true,true': 'author(E, D), title(E, A)', 'false': 'haswordtitle(A, F), haswordauthor(G, F)'}, {'true,true,true': [0.026, 0, 6], 'true,true,false': [0.246, 4, 58], 'true,false': [0.0, 16, 0], 'false,true': [0.0, 16, 0], 'false,false': [0.379, 16, 76]}], ['sametitle(A, B)', {'': 'haswordtitle(A, C), haswordauthor(D, C)', 'true': 'haswordtitle(B, C)', 'false': 'haswordtitle(B, E), haswordauthor(F, E)'}, {'true,true': [0.235, 4, 64], 'true,false': [0.0, 16, 0], 'false,true': [1.83e-08, 16, 0], 'false,false': [0.379, 16, 76]}], ['sametitle(A, B)', {'': 'haswordtitle(A, C), haswordauthor(D, C)', 'true': 'haswordtitle(B, C)', 'true,true': 'author(E, D), title(E, B)'}, {'true,true,true': [0.021, 0, 6], 'true,true,false': [0.246, 4, 58], 'true,false': [9.13e-09, 16, 0], 'false': [0.359, 32, 76]}], ['sametitle(A, B)', {'': 'haswordtitle(A, C), haswordauthor(D, C)', 'true': 'haswordtitle(B, C)', 'true,true': 'author(E, D), title(E, A)', 'false': 'haswordtitle(B, F), haswordauthor(G, F)'}, {'true,true,true': [0.023, 0, 6], 'true,true,false': [0.246, 4, 58], 'true,false': [3.73e-09, 16, 0], 'false,true': [0.0, 16, 0], 'false,false': [0.379, 16, 76]}]]
[{'': [0.18140589569160917, 0.2085048010973933], 'true': [0.05536332179930703, -6.938893903907228e-18], 'true,true': [-1.4802973661668753e-16, 0.06035379812695064]}, {'': [0.14286289420974324, 0.20850480109739167], 'true': [0.05524333801085281, 3.469446951953614e-18], 'true,true': [3.660935309116967e-05, 0.06030551665427711]}, {'': [0.15376065062785682, 0.170829537699209], 'false': [1.214306433183765e-17, 0.1436672967863888], 'true': [0.05511382663137746, -5.551115123125783e-17]}, {'': [0.10909737377260437, 0.1527255023453518], 'false': [-6.938893903907228e-18, 0.14366729678638904], 'true': [0.055112328198782125, 0.0], 'true,true': [5.570559829996361e-05, 0.060295377987819844]}, {'': [0.08428214583417666, 0.14105337768473003], 'true': [0.05507263888451393, -6.938893903907228e-18], 'true,true': [0.00010355074792332368, 0.06027725174432253]}, {'': [0.07045571428644054, 0.13772235558341414], 'false': [-1.214306433183765e-17, 0.14366729678638954], 'true': [8.571682045679004e-05, 0.07491135304312703], 'true,false': [0.06028155267336815, 3.469446951953614e-18]}, {'': [0.06236629321399502, 0.13244801508913331], 'false': [-3.469446951953614e-18, 0.14366729678638923], 'true': [0.05504763407997332, 0.0], 'true,true': [0.00010949336311880109, 0.060273385349042044]}, {'': [0.05409021750541206, 0.13178425578976605], 'false': [2.0816681711721685e-17, 0.1436672967863895], 'true': [0.05504318253722055, 0.0]}, {'': [0.05177807647897903, 0.1290039005354071], 'true': [0.05506307612503131, 5.204170427930421e-18], 'true,true': [7.312353159247276e-05, 0.06028379435536296]}, {'': [0.05017020084854377, 0.12860403512069873], 'false': [0.0, 0.14366729678638943], 'true': [0.0550574044471756, 8.673617379884035e-19], 'true,true': [9.027696714734394e-05, 0.06027706129762559]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;sametitle(A, B) :- haswordtitle(A, C), haswordauthor(D, C).;true;true
0;true;haswordtitle(B, C).;true;true
0;true,true;author(E, D), title(E, A).;true;true
1;;sametitle(A, B) :- haswordtitle(A, C), haswordauthor(D, C).;true;true
1;true;haswordtitle(B, C).;true;true
1;true,true;author(E, D), title(E, B).;true;true
2;;sametitle(A, B) :- haswordtitle(B, C), haswordauthor(D, C).;true;true
2;true;haswordtitle(A, C).;true;true
2;false;haswordtitle(A, E), haswordauthor(F, E).;true;true
3;;sametitle(A, B) :- haswordtitle(B, C), haswordauthor(D, C).;true;true
3;true;haswordtitle(A, C).;true;true
3;true,true;author(E, D), title(E, B).;true;true
3;false;haswordtitle(A, F), haswordauthor(G, F).;true;true
4;;sametitle(A, B) :- haswordtitle(B, C), haswordauthor(D, C).;true;true
4;true;haswordtitle(A, C).;true;true
4;true,true;author(E, D), title(E, A).;true;true
5;;sametitle(A, B) :- haswordtitle(B, C), haswordauthor(D, C).;true;true
5;true;author(E, D), title(E, B).;true;true
5;true,false;haswordtitle(A, C).;true;true
5;false;haswordtitle(A, F), haswordauthor(G, F).;true;true
6;;sametitle(A, B) :- haswordtitle(B, C), haswordauthor(D, C).;true;true
6;true;haswordtitle(A, C).;true;true
6;true,true;author(E, D), title(E, A).;true;true
6;false;haswordtitle(A, F), haswordauthor(G, F).;true;true
7;;sametitle(A, B) :- haswordtitle(A, C), haswordauthor(D, C).;true;true
7;true;haswordtitle(B, C).;true;true
7;false;haswordtitle(B, E), haswordauthor(F, E).;true;true
8;;sametitle(A, B) :- haswordtitle(A, C), haswordauthor(D, C).;true;true
8;true;haswordtitle(B, C).;true;true
8;true,true;author(E, D), title(E, B).;true;true
9;;sametitle(A, B) :- haswordtitle(A, C), haswordauthor(D, C).;true;true
9;true;haswordtitle(B, C).;true;true
9;true,true;author(E, D), title(E, A).;true;true
9;false;haswordtitle(B, F), haswordauthor(G, F).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordauthor(D, C) )
%   then if ( haswordtitle(B, C) )
%   | then return 0.799325405687748;  // std dev = 0.235, 68.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=64 */
%   | else return -0.1418510649004878;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   else return 0.5618526388032163;  // std dev = 0.457, 108.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=76 */
WILL Produced-Tree #2
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordauthor(D, C) )
%   then if ( haswordtitle(B, C) )
%   | then return 0.6723676618346611;  // std dev = 0.235, 68.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=64 */
%   | else return -0.12544463852839138;  // std dev = 7.45e-09, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   else if ( haswordtitle(B, E), haswordauthor(F, E) )
%   | then return -0.22475862895351809;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | else return 0.6013283275682223;  // std dev = 0.379, 92.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=76 */
WILL Produced-Tree #3
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordauthor(D, C) )
%   then if ( haswordtitle(B, C) )
%   | then if ( author(E, D), title(E, B) )
%   | | then return 0.5813473704999081;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return 0.5168312414676504;  // std dev = 0.246, 62.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=58 */
%   | else return -0.11231637819360635;  // std dev = 1.39e-08, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   else return 0.3811366661342276;  // std dev = 0.423, 108.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=76 */
WILL Produced-Tree #4
% FOR sametitle(A, B):
%   if ( haswordtitle(B, C), haswordauthor(D, C) )
%   then if ( haswordtitle(A, C) )
%   | then if ( author(E, D), title(E, A) )
%   | | then return 0.4423861973075087;  // std dev = 0.018, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return 0.38797793227969807;  // std dev = 0.246, 62.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=58 */
%   | else return -0.2531713345698342;  // std dev = 2.11e-08, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   else if ( haswordtitle(A, F), haswordauthor(G, F) )
%   | then return -0.10159632948783631;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | else return 0.38966158398477213;  // std dev = 0.379, 92.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=76 */
WILL Produced-Tree #5
% FOR sametitle(A, B):
%   if ( haswordtitle(B, C), haswordauthor(D, C) )
%   then if ( haswordtitle(A, C) )
%   | then return 0.2985326228362182;  // std dev = 0.235, 68.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=64 */
%   | else return -0.20834329665802553;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   else return 0.23555573052016307;  // std dev = 0.376, 108.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=76 */
WILL Produced-Tree #6
% FOR sametitle(A, B):
%   if ( haswordtitle(B, C), haswordauthor(D, C) )
%   then if ( haswordtitle(A, C) )
%   | then return 0.23325065444973342;  // std dev = 0.235, 68.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=64 */
%   | else return -0.1760583913234123;  // std dev = 1.29e-08, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   else return 0.18300217127153015;  // std dev = 0.371, 108.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=76 */
WILL Produced-Tree #7
% FOR sametitle(A, B):
%   if ( haswordtitle(B, C), haswordauthor(D, C) )
%   then if ( haswordtitle(A, C) )
%   | then if ( author(E, D), title(E, B) )
%   | | then return 0.2298964017813264;  // std dev = 0.011, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return 0.18335154602226475;  // std dev = 0.246, 62.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=58 */
%   | else return -0.15195589296631523;  // std dev = 1.67e-08, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   else return 0.14310258742808063;  // std dev = 0.368, 108.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=76 */
WILL Produced-Tree #8
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordauthor(D, C) )
%   then if ( haswordtitle(B, C) )
%   | then if ( author(E, D), title(E, B) )
%   | | then return 0.19173631087114465;  // std dev = 0.010, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return 0.15076752099017854;  // std dev = 0.246, 62.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=58 */
%   | else return -0.1519294033361161;  // std dev = 1.97e-08, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   else if ( haswordtitle(B, F), haswordauthor(G, F) )
%   | then return -0.13339157685668265;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | else return 0.1588666256675325;  // std dev = 0.379, 92.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=76 */
WILL Produced-Tree #9
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordauthor(D, C) )
%   then if ( haswordtitle(B, C) )
%   | then return 0.129687969939032;  // std dev = 0.235, 68.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=64 */
%   | else return -0.13337087622059146;  // std dev = 1.05e-08, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   else if ( haswordtitle(B, E), haswordauthor(F, E) )
%   | then return -0.11871140007879967;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | else return 0.12457536341418961;  // std dev = 0.379, 92.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=76 */
WILL Produced-Tree #10
% FOR sametitle(A, B):
%   if ( haswordtitle(B, C), haswordauthor(D, C) )
%   then if ( haswordtitle(A, C) )
%   | then if ( author(E, D), title(E, B) )
%   | | then return 0.1467700948327114;  // std dev = 0.008, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return 0.1071567373314046;  // std dev = 0.246, 62.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=58 */
%   | else return -0.10684306618913603;  // std dev = 1.05e-08, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   else if ( haswordtitle(A, F), haswordauthor(G, F) )
%   | then return -0.11869483099261385;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | else return 0.09916099000251155;  // std dev = 0.379, 92.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=76 */


Results
   AUC ROC   = 0.710066
   AUC PR    = 0.662695
   CLL	      = -0.707445
   Precision = 0.548596 at threshold = 0.5
   Recall    = 0.910394
   F1        = 0.684636


Total learning time: 22.15628695487976 seconds
Total inference time: 2.943 seconds
AUC ROC: 0.710066


Results scoring model
   AUC ROC   = 0.859341
   AUC PR    = 0.926052
   CLL	      = -0.342534
   Precision = 0.875 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.933333


Total scoring time: 1.674 seconds
Refined model CLL: -0.342534


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.710468
   AUC PR    = 0.662841
   CLL	      = -0.7118
   Precision = 0.548596 at threshold = 0.5
   Recall    = 0.910394
   F1        = 0.684636


Total learning time: 52.38929815292358 seconds
Total inference time: 3.289 seconds
AUC ROC: 0.710468
Total revision time: 52.38929815292358
Best scored revision CLL: -0.340334


Dataset: 6_imdb_cora, Fold: 2, Type: Transfer (trRDN-B), Time: 04:00:24
{'AUC ROC': 0.710468, 'AUC PR': 0.662841, 'CLL': -0.7118, 'Precision': [0.548596, 0.5], 'Recall': 0.910394, 'F1': 0.684636, 'Learning time': 52.38929815292358, 'Inference time': 3.289, 'parameter': {'AUC ROC': 0.710468, 'AUC PR': 0.662841, 'CLL': -0.7118, 'Precision': [0.548596, 0.5], 'Recall': 0.910394, 'F1': 0.684636, 'Learning time': 26.908011198043823, 'Inference time': 3.289}}


WILL Produced-Tree #1
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordauthor(D, C) )
%   then if ( haswordtitle(B, C) )
%   | then if ( author(E, D), title(E, A) )
%   | | then return 0.8581489350995123;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return 0.7936328060672545;  // std dev = 0.246, 62.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=58 */
%   | else return -0.1418510649004878;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   else return 0.5618526388032163;  // std dev = 0.457, 108.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=76 */
WILL Produced-Tree #2
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordauthor(D, C) )
%   then if ( haswordtitle(B, C) )
%   | then if ( author(E, D), title(E, B) )
%   | | then return 0.7237518087032814;  // std dev = 0.015, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return 0.6673784342854517;  // std dev = 0.246, 62.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=58 */
%   | else return -0.12544463852839138;  // std dev = 7.45e-09, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   else return 0.478945074750187;  // std dev = 0.457, 108.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=76 */
WILL Produced-Tree #3
% FOR sametitle(A, B):
%   if ( haswordtitle(B, C), haswordauthor(D, C) )
%   then if ( haswordtitle(A, C) )
%   | then if ( author(E, D), title(E, B) )
%   | | then return 0.5596022372298854;  // std dev = 0.018, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return 0.5189205286489138;  // std dev = 0.246, 62.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=58 */
%   | else return -0.31881948350713596;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   else if ( haswordtitle(A, F), haswordauthor(G, F) )
%   | then return -0.11231637819360635;  // std dev = 1.39e-08, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | else return 0.5072674730146044;  // std dev = 0.379, 92.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=76 */
WILL Produced-Tree #4
% FOR sametitle(A, B):
%   if ( haswordtitle(B, C), haswordauthor(D, C) )
%   then if ( haswordtitle(A, C) )
%   | then if ( author(E, D), title(E, B) )
%   | | then return 0.42069383541158384;  // std dev = 0.018, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return 0.3901074635200756;  // std dev = 0.246, 62.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=58 */
%   | else return -0.25388056084682503;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   else if ( haswordtitle(A, F), haswordauthor(G, F) )
%   | then return -0.10159632948783631;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | else return 0.3887396235055974;  // std dev = 0.379, 92.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=76 */
WILL Produced-Tree #5
% FOR sametitle(A, B):
%   if ( haswordtitle(B, C), haswordauthor(D, C) )
%   then if ( haswordtitle(A, C) )
%   | then return 0.2985875636878135;  // std dev = 0.235, 68.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=64 */
%   | else return -0.20884487148991215;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   else return 0.23495673308821527;  // std dev = 0.376, 108.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=76 */
WILL Produced-Tree #6
% FOR sametitle(A, B):
%   if ( haswordtitle(B, C), haswordauthor(D, C) )
%   then if ( haswordtitle(A, C) )
%   | then if ( author(E, D), title(E, A) )
%   | | then return 0.2655355642362091;  // std dev = 0.029, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return 0.2301896543194856;  // std dev = 0.245, 62.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=58 */
%   | else return -0.17642667980685725;  // std dev = 7.45e-09, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   else if ( haswordtitle(A, F), haswordauthor(G, F) )
%   | then return -0.11443167662428472;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | else return 0.23420239583254845;  // std dev = 0.379, 92.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=76 */
WILL Produced-Tree #7
% FOR sametitle(A, B):
%   if ( haswordtitle(B, C), haswordauthor(D, C) )
%   then if ( haswordtitle(A, C) )
%   | then return 0.18755592635240234;  // std dev = 0.235, 68.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=64 */
%   | else return -0.15223554373863446;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   else return 0.13722967978241266;  // std dev = 0.364, 108.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=76 */
WILL Produced-Tree #8
% FOR sametitle(A, B):
%   if ( haswordtitle(B, C), haswordauthor(D, C) )
%   then if ( haswordtitle(A, C) )
%   | then return 0.1544225067286438;  // std dev = 0.235, 68.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=64 */
%   | else return -0.13361007167418043;  // std dev = 1.83e-08, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   else if ( haswordtitle(A, E), haswordauthor(F, E) )
%   | then return -0.11676234549195043;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | else return 0.14839313890801697;  // std dev = 0.379, 92.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=76 */
WILL Produced-Tree #9
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordauthor(D, C) )
%   then if ( haswordtitle(B, C) )
%   | then if ( author(E, D), title(E, A) )
%   | | then return 0.16458072008014632;  // std dev = 0.021, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return 0.12629380684306005;  // std dev = 0.246, 62.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=58 */
%   | else return -0.10524904478714946;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   else return 0.08194267107913751;  // std dev = 0.360, 108.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=76 */
WILL Produced-Tree #10
% FOR sametitle(A, B):
%   if ( haswordtitle(B, C), haswordauthor(D, C) )
%   then if ( haswordtitle(A, C) )
%   | then if ( author(E, D), title(E, B) )
%   | | then return 0.14364869601132835;  // std dev = 0.020, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return 0.107507644457574;  // std dev = 0.246, 62.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=58 */
%   | else return -0.12774153430001495;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   else return 0.0712266189915704;  // std dev = 0.357, 108.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=76 */


Results
   AUC ROC   = 0.710066
   AUC PR    = 0.662695
   CLL	      = -0.701073
   Precision = 0.548596 at threshold = 0.5
   Recall    = 0.910394
   F1        = 0.684636


Total learning time: 27.105580806732178 seconds
Total inference time: 3.186 seconds
AUC ROC: 0.710066


Dataset: 6_imdb_cora, Fold: 2, Type: Scratch (RDN-B), Time: 04:00:54
{'AUC ROC': 0.710066, 'AUC PR': 0.662695, 'CLL': -0.701073, 'Precision': [0.548596, 0.5], 'Recall': 0.910394, 'F1': 0.684636, 'Learning time': 27.105580806732178, 'Inference time': 3.186}


Starting fold 3

Target train facts examples: 9306
Target train pos examples: 113
Target train neg examples: 210

Target test facts examples: 33252
Target test pos  examples: 585
Target test neg examples: 506

******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


WILL Produced-Tree #1
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordvenue(D, C) )
%   then if ( title(E, B), venue(E, D) )
%   | then if ( samebib(E, F), title(F, A) )
%   | | then return 0.8581489350995115;  // std dev = 3.37e-07, 96.000 (wgt'ed) examples reached here.  /* #pos=96 */
%   | | else return -0.14185106490048843;  // std dev = 0.000, 206.000 (wgt'ed) examples reached here.  /* #neg=206 */
%   | else return 0.7812258581764353;  // std dev = 0.266, 13.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   else if ( haswordtitle(A, G), haswordtitle(B, G) )
%   | then return 0.8581489350995122;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return -0.14185106490048777;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #2
% FOR sametitle(A, B):
%   if ( haswordtitle(B, C), haswordvenue(D, C) )
%   then if ( title(E, A), venue(E, D) )
%   | then if ( samebib(E, F), title(F, B) )
%   | | then return 0.7194734122109541;  // std dev = 1.88e-07, 96.000 (wgt'ed) examples reached here.  /* #pos=96 */
%   | | else return -0.12612338422298822;  // std dev = 0.139, 206.000 (wgt'ed) examples reached here.  /* #neg=206 */
%   | else return 0.6673923081472714;  // std dev = 0.229, 13.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   else if ( haswordtitle(A, G), haswordtitle(B, G) )
%   | then return 0.7225254794457083;  // std dev = 0.014, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return -0.12544463852839136;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #3
% FOR sametitle(A, B):
%   if ( haswordtitle(B, C), haswordvenue(D, C) )
%   then if ( title(E, A), venue(E, D) )
%   | then if ( samebib(E, F), title(F, B) )
%   | | then return 0.5553664367462835;  // std dev = 4.09e-07, 96.000 (wgt'ed) examples reached here.  /* #pos=96 */
%   | | else return -0.11287578031157806;  // std dev = 0.129, 206.000 (wgt'ed) examples reached here.  /* #neg=206 */
%   | else return 0.5235516292488023;  // std dev = 0.214, 13.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   else if ( haswordtitle(A, G), haswordtitle(B, G) )
%   | then return 0.5583951624779798;  // std dev = 0.017, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return -0.11231637819360636;  // std dev = 2.63e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #4
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordvenue(D, C) )
%   then if ( title(E, B), venue(E, D) )
%   | then if ( samebib(E, F), title(F, A) )
%   | | then return 0.41749818750685663;  // std dev = 0.001, 96.000 (wgt'ed) examples reached here.  /* #pos=96 */
%   | | else return -0.1025477100747007;  // std dev = 0.219, 206.000 (wgt'ed) examples reached here.  /* #neg=206 */
%   | else return 0.40316752663743777;  // std dev = 0.180, 13.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   else if ( haswordtitle(A, G), haswordtitle(B, G) )
%   | then return 0.42073337754073636;  // std dev = 0.019, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return -0.10155867761849639;  // std dev = 9.22e-05, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #5
% FOR sametitle(A, B):
%   if ( haswordtitle(B, C), haswordvenue(D, C) )
%   then if ( title(E, A), venue(E, D) )
%   | then if ( samebib(E, F), title(F, B) )
%   | | then return 0.32070786392391376;  // std dev = 0.000701, 96.000 (wgt'ed) examples reached here.  /* #pos=96 */
%   | | else return -0.09350751227163409;  // std dev = 0.205, 206.000 (wgt'ed) examples reached here.  /* #neg=206 */
%   | else return 0.30768423831114233;  // std dev = 0.175, 13.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   else if ( haswordtitle(A, G), haswordtitle(B, G) )
%   | then return 0.32300119034950237;  // std dev = 0.019, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return -0.0926667273159864;  // std dev = 6.79e-05, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #6
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordvenue(D, C) )
%   then if ( title(E, B), venue(E, D) )
%   | then if ( samebib(E, F), title(F, A) )
%   | | then return 0.2551593808193205;  // std dev = 0.002, 96.000 (wgt'ed) examples reached here.  /* #pos=96 */
%   | | else return -0.0863200185848198;  // std dev = 0.281, 206.000 (wgt'ed) examples reached here.  /* #neg=206 */
%   | else return 0.24692714516757797;  // std dev = 0.152, 13.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   else if ( haswordtitle(A, G), haswordtitle(B, G) )
%   | then return 0.25737494818509205;  // std dev = 0.018, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return -0.08513563990483575;  // std dev = 0.000132, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #7
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordvenue(D, C) )
%   then if ( title(E, B), venue(E, D) )
%   | then if ( samebib(E, F), title(F, A) )
%   | | then return 0.2097486356475671;  // std dev = 0.001, 96.000 (wgt'ed) examples reached here.  /* #pos=96 */
%   | | else return -0.07978117896841949;  // std dev = 0.268, 206.000 (wgt'ed) examples reached here.  /* #neg=206 */
%   | else return 0.1984301653893709;  // std dev = 0.153, 13.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   else if ( haswordtitle(A, G), haswordtitle(B, G) )
%   | then return 0.21132605742777538;  // std dev = 0.016, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return -0.078734582391261;  // std dev = 0.000123, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #8
% FOR sametitle(A, B):
%   if ( haswordtitle(B, C), haswordvenue(D, C) )
%   then if ( title(E, A), venue(E, D) )
%   | then if ( samebib(E, F), title(F, B) )
%   | | then return 0.17709187451440622;  // std dev = 0.001, 96.000 (wgt'ed) examples reached here.  /* #pos=96 */
%   | | else return -0.0743744762276613;  // std dev = 0.303, 206.000 (wgt'ed) examples reached here.  /* #neg=206 */
%   | else return 0.16654646394404693;  // std dev = 0.143, 13.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   else if ( haswordtitle(A, G), haswordtitle(B, G) )
%   | then return 0.17860389115331468;  // std dev = 0.016, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return -0.07318387632889668;  // std dev = 0.000178, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #9
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordvenue(D, C) )
%   then if ( title(E, B), venue(E, D) )
%   | then if ( samebib(E, F), title(F, A) )
%   | | then return 0.1527365222925299;  // std dev = 0.001, 96.000 (wgt'ed) examples reached here.  /* #pos=96 */
%   | | else return -0.06948022626133439;  // std dev = 0.298, 206.000 (wgt'ed) examples reached here.  /* #neg=206 */
%   | else return 0.140130722639821;  // std dev = 0.144, 13.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   else if ( haswordtitle(A, G), haswordtitle(B, G) )
%   | then return 0.15395388231852367;  // std dev = 0.014, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return -0.0683713506062769;  // std dev = 0.000170, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #10
% FOR sametitle(A, B):
%   if ( haswordtitle(B, C), haswordvenue(D, C) )
%   then if ( title(E, A), venue(E, D) )
%   | then if ( samebib(E, F), title(F, B) )
%   | | then return 0.13400327537981713;  // std dev = 0.000949, 96.000 (wgt'ed) examples reached here.  /* #pos=96 */
%   | | else return -0.06535000597888806;  // std dev = 0.328, 206.000 (wgt'ed) examples reached here.  /* #neg=206 */
%   | else return 0.12227045775978468;  // std dev = 0.137, 13.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   else if ( haswordtitle(A, G), haswordtitle(B, G) )
%   | then return 0.1352765127553519;  // std dev = 0.014, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return -0.06412161142768061;  // std dev = 0.000212, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */


Results
   AUC ROC   = 0.986433
   AUC PR    = 0.987219
   CLL	      = -0.161061
   Precision = 0.986038 at threshold = 0.5
   Recall    = 0.965812
   F1        = 0.97582


Total learning time: 403.08764910697937 seconds
Total inference time: 61.784 seconds
AUC ROC: 0.986433


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.088329
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 5.733 seconds
Parameter learned model CLL: -0.088329


Structure after Parameter Learning
[['sametitle(A, B)', {'': 'haswordtitle(A, C), haswordvenue(D, C)', 'true': 'title(E, B), venue(E, D)', 'true,true': 'samebib(E, F), title(F, A)', 'false': 'haswordtitle(A, G), haswordtitle(B, G)'}, {'true,true,true': [3.37e-07, 0, 96], 'true,true,false': [0.0, 206, 0], 'true,false': [0.266, 1, 12], 'false,true': [0.0, 0, 5], 'false,false': [0.0, 3, 0]}], ['sametitle(A, B)', {'': 'haswordtitle(B, C), haswordvenue(D, C)', 'true': 'title(E, A), venue(E, D)', 'true,true': 'samebib(E, F), title(F, B)', 'false': 'haswordtitle(A, G), haswordtitle(B, G)'}, {'true,true,true': [1.88e-07, 0, 96], 'true,true,false': [0.139, 206, 0], 'true,false': [0.229, 1, 12], 'false,true': [0.014, 0, 5], 'false,false': [0.0, 3, 0]}], ['sametitle(A, B)', {'': 'haswordtitle(B, C), haswordvenue(D, C)', 'true': 'title(E, A), venue(E, D)', 'true,true': 'samebib(E, F), title(F, B)', 'false': 'haswordtitle(A, G), haswordtitle(B, G)'}, {'true,true,true': [4.09e-07, 0, 96], 'true,true,false': [0.129, 206, 0], 'true,false': [0.214, 1, 12], 'false,true': [0.017, 0, 5], 'false,false': [2.63e-09, 3, 0]}], ['sametitle(A, B)', {'': 'haswordtitle(A, C), haswordvenue(D, C)', 'true': 'title(E, B), venue(E, D)', 'true,true': 'samebib(E, F), title(F, A)', 'false': 'haswordtitle(A, G), haswordtitle(B, G)'}, {'true,true,true': [0.001, 0, 96], 'true,true,false': [0.219, 206, 0], 'true,false': [0.18, 1, 12], 'false,true': [0.019, 0, 5], 'false,false': [9.22e-05, 3, 0]}], ['sametitle(A, B)', {'': 'haswordtitle(B, C), haswordvenue(D, C)', 'true': 'title(E, A), venue(E, D)', 'true,true': 'samebib(E, F), title(F, B)', 'false': 'haswordtitle(A, G), haswordtitle(B, G)'}, {'true,true,true': [0.000701, 0, 96], 'true,true,false': [0.205, 206, 0], 'true,false': [0.175, 1, 12], 'false,true': [0.019, 0, 5], 'false,false': [6.79e-05, 3, 0]}], ['sametitle(A, B)', {'': 'haswordtitle(A, C), haswordvenue(D, C)', 'true': 'title(E, B), venue(E, D)', 'true,true': 'samebib(E, F), title(F, A)', 'false': 'haswordtitle(A, G), haswordtitle(B, G)'}, {'true,true,true': [0.002, 0, 96], 'true,true,false': [0.281, 206, 0], 'true,false': [0.152, 1, 12], 'false,true': [0.018, 0, 5], 'false,false': [0.000132, 3, 0]}], ['sametitle(A, B)', {'': 'haswordtitle(A, C), haswordvenue(D, C)', 'true': 'title(E, B), venue(E, D)', 'true,true': 'samebib(E, F), title(F, A)', 'false': 'haswordtitle(A, G), haswordtitle(B, G)'}, {'true,true,true': [0.001, 0, 96], 'true,true,false': [0.268, 206, 0], 'true,false': [0.153, 1, 12], 'false,true': [0.016, 0, 5], 'false,false': [0.000123, 3, 0]}], ['sametitle(A, B)', {'': 'haswordtitle(B, C), haswordvenue(D, C)', 'true': 'title(E, A), venue(E, D)', 'true,true': 'samebib(E, F), title(F, B)', 'false': 'haswordtitle(A, G), haswordtitle(B, G)'}, {'true,true,true': [0.001, 0, 96], 'true,true,false': [0.303, 206, 0], 'true,false': [0.143, 1, 12], 'false,true': [0.016, 0, 5], 'false,false': [0.000178, 3, 0]}], ['sametitle(A, B)', {'': 'haswordtitle(A, C), haswordvenue(D, C)', 'true': 'title(E, B), venue(E, D)', 'true,true': 'samebib(E, F), title(F, A)', 'false': 'haswordtitle(A, G), haswordtitle(B, G)'}, {'true,true,true': [0.001, 0, 96], 'true,true,false': [0.298, 206, 0], 'true,false': [0.144, 1, 12], 'false,true': [0.014, 0, 5], 'false,false': [0.00017, 3, 0]}], ['sametitle(A, B)', {'': 'haswordtitle(B, C), haswordvenue(D, C)', 'true': 'title(E, A), venue(E, D)', 'true,true': 'samebib(E, F), title(F, B)', 'false': 'haswordtitle(A, G), haswordtitle(B, G)'}, {'true,true,true': [0.000949, 0, 96], 'true,true,false': [0.328, 206, 0], 'true,false': [0.137, 1, 12], 'false,true': [0.014, 0, 5], 'false,false': [0.000212, 3, 0]}]]
[{'': [0.225306122448982, 0.23437499999999983], 'false': [0.0, 0.0], 'true': [0.21683259506162156, 0.07100591715976314], 'true,true': [1.1842378929335002e-15, -2.3713501496848003e-16]}, {'': [0.16176212761460199, 0.16855140989000014], 'false': [3.7260457621890454e-05, 0.0], 'true': [0.15510708635760087, 0.05239895620925212], 'true,true': [3.7007434154171886e-16, 9.444262217627639e-05]}, {'': [0.10189087629019088, 0.1054702929228923], 'false': [5.722963035781348e-05, 2.3129646346357427e-18], 'true': [0.09688107090960915, 0.04591092331542283], 'true,true': [1.7393494052460785e-15, 8.060589692389119e-05]}, {'': [0.0623010202988034, 0.06398196220226596], 'false': [7.526624150901994e-05, 2.835326529115889e-09], 'true': [0.05880013363106616, 0.032537457324748435], 'true,true': [2.2520403727040634e-08, 0.00023198604321655934]}, {'': [0.03994170768432088, 0.04053809176706849], 'false': [6.851423939924217e-05, 1.5362900245933602e-09], 'true': [0.03734269921975646, 0.030675197429224123], 'true,true': [5.114688524561946e-09, 0.00020492018359272358]}, {'': [0.027443243768029715, 0.027535645658674522], 'false': [6.446595237522557e-05, 5.823105779974765e-09], 'true': [0.02554631309280236, 0.023105141740417737], 'true,true': [2.600532208093161e-08, 0.00038387792371431497]}, {'': [0.01999270774568108, 0.019749993438571804], 'true': [0.018414205588012485, 0.02343172132428856], 'false': [4.929593196296156e-05, 5.050276891127581e-09], 'true,true': [1.976598757817231e-08, 0.00034841711241824356]}, {'': [0.015309178090203818, 0.014889081404400331], 'true': [0.014015999936713545, 0.02050420565492502], 'false': [4.86189475478016e-05, 1.0590606955065049e-08], 'true,true': [1.0765525549720026e-08, 0.00044642750478510537]}, {'': [0.012171494200548368, 0.011608416982923371], 'true': [0.011001696558603717, 0.02083049336655289], 'false': [3.7770447093909976e-05, 9.629055720596543e-09], 'true,true': [1.675850241911192e-08, 0.0004316492602558465]}, {'': [0.00998489675492013, 0.009343035381287591], 'true': [0.008973333447680873, 0.018683381977210745], 'false': [3.89931506608765e-05, 1.497751207490498e-08], 'true,true': [9.382420243508882e-09, 0.0005219437355191735]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;sametitle(A, B) :- haswordtitle(A, C), haswordvenue(D, C).;true;true
0;true;title(E, B), venue(E, D).;true;true
0;true,true;samebib(E, F), title(F, A).;true;true
0;false;haswordtitle(A, G), haswordtitle(B, G).;true;true
1;;sametitle(A, B) :- haswordtitle(B, C), haswordvenue(D, C).;true;true
1;true;title(E, A), venue(E, D).;true;true
1;true,true;samebib(E, F), title(F, B).;true;true
1;false;haswordtitle(A, G), haswordtitle(B, G).;true;true
2;;sametitle(A, B) :- haswordtitle(B, C), haswordvenue(D, C).;true;true
2;true;title(E, A), venue(E, D).;true;true
2;true,true;samebib(E, F), title(F, B).;true;true
2;false;haswordtitle(A, G), haswordtitle(B, G).;true;true
3;;sametitle(A, B) :- haswordtitle(A, C), haswordvenue(D, C).;true;true
3;true;title(E, B), venue(E, D).;true;true
3;true,true;samebib(E, F), title(F, A).;true;true
3;false;haswordtitle(A, G), haswordtitle(B, G).;true;true
4;;sametitle(A, B) :- haswordtitle(B, C), haswordvenue(D, C).;true;true
4;true;title(E, A), venue(E, D).;true;true
4;true,true;samebib(E, F), title(F, B).;true;true
4;false;haswordtitle(A, G), haswordtitle(B, G).;true;true
5;;sametitle(A, B) :- haswordtitle(A, C), haswordvenue(D, C).;true;true
5;true;title(E, B), venue(E, D).;true;true
5;true,true;samebib(E, F), title(F, A).;true;true
5;false;haswordtitle(A, G), haswordtitle(B, G).;true;true
6;;sametitle(A, B) :- haswordtitle(A, C), haswordvenue(D, C).;true;true
6;true;title(E, B), venue(E, D).;true;true
6;true,true;samebib(E, F), title(F, A).;true;true
6;false;haswordtitle(A, G), haswordtitle(B, G).;true;true
7;;sametitle(A, B) :- haswordtitle(B, C), haswordvenue(D, C).;true;true
7;true;title(E, A), venue(E, D).;true;true
7;true,true;samebib(E, F), title(F, B).;true;true
7;false;haswordtitle(A, G), haswordtitle(B, G).;true;true
8;;sametitle(A, B) :- haswordtitle(A, C), haswordvenue(D, C).;true;true
8;true;title(E, B), venue(E, D).;true;true
8;true,true;samebib(E, F), title(F, A).;true;true
8;false;haswordtitle(A, G), haswordtitle(B, G).;true;true
9;;sametitle(A, B) :- haswordtitle(B, C), haswordvenue(D, C).;true;true
9;true;title(E, A), venue(E, D).;true;true
9;true,true;samebib(E, F), title(F, B).;true;true
9;false;haswordtitle(A, G), haswordtitle(B, G).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordvenue(D, C) )
%   then if ( title(E, B), venue(E, D) )
%   | then if ( samebib(E, F), title(F, A) )
%   | | then return 0.8581489350995115;  // std dev = 3.37e-07, 96.000 (wgt'ed) examples reached here.  /* #pos=96 */
%   | | else return -0.14185106490048843;  // std dev = 0.000, 206.000 (wgt'ed) examples reached here.  /* #neg=206 */
%   | else return 0.7812258581764353;  // std dev = 0.266, 13.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   else if ( haswordtitle(A, G), haswordtitle(B, G) )
%   | then return 0.8581489350995122;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return -0.14185106490048777;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #2
% FOR sametitle(A, B):
%   if ( haswordtitle(B, C), haswordvenue(D, C) )
%   then if ( title(E, A), venue(E, D) )
%   | then if ( samebib(E, F), title(F, B) )
%   | | then return 0.7194734122109541;  // std dev = 1.88e-07, 96.000 (wgt'ed) examples reached here.  /* #pos=96 */
%   | | else return -0.12612338422298822;  // std dev = 0.139, 206.000 (wgt'ed) examples reached here.  /* #neg=206 */
%   | else return 0.6673923081472714;  // std dev = 0.229, 13.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   else if ( haswordtitle(A, G), haswordtitle(B, G) )
%   | then return 0.7225254794457083;  // std dev = 0.014, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return -0.12544463852839136;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #3
% FOR sametitle(A, B):
%   if ( haswordtitle(B, C), haswordvenue(D, C) )
%   then if ( title(E, A), venue(E, D) )
%   | then if ( samebib(E, F), title(F, B) )
%   | | then return 0.5553664367462835;  // std dev = 4.09e-07, 96.000 (wgt'ed) examples reached here.  /* #pos=96 */
%   | | else return -0.11287578031157806;  // std dev = 0.129, 206.000 (wgt'ed) examples reached here.  /* #neg=206 */
%   | else return 0.5235516292488023;  // std dev = 0.214, 13.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   else if ( haswordtitle(A, G), haswordtitle(B, G) )
%   | then return 0.5583951624779798;  // std dev = 0.017, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return -0.11231637819360636;  // std dev = 2.63e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #4
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordvenue(D, C) )
%   then if ( title(E, B), venue(E, D) )
%   | then if ( samebib(E, F), title(F, A) )
%   | | then return 0.41749818750685663;  // std dev = 0.001, 96.000 (wgt'ed) examples reached here.  /* #pos=96 */
%   | | else return -0.1025477100747007;  // std dev = 0.219, 206.000 (wgt'ed) examples reached here.  /* #neg=206 */
%   | else return 0.40316752663743777;  // std dev = 0.180, 13.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   else if ( haswordtitle(A, G), haswordtitle(B, G) )
%   | then return 0.42073337754073636;  // std dev = 0.019, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return -0.10155867761849639;  // std dev = 9.22e-05, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #5
% FOR sametitle(A, B):
%   if ( haswordtitle(B, C), haswordvenue(D, C) )
%   then if ( title(E, A), venue(E, D) )
%   | then if ( samebib(E, F), title(F, B) )
%   | | then return 0.32070786392391376;  // std dev = 0.000701, 96.000 (wgt'ed) examples reached here.  /* #pos=96 */
%   | | else return -0.09350751227163409;  // std dev = 0.205, 206.000 (wgt'ed) examples reached here.  /* #neg=206 */
%   | else return 0.30768423831114233;  // std dev = 0.175, 13.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   else if ( haswordtitle(A, G), haswordtitle(B, G) )
%   | then return 0.32300119034950237;  // std dev = 0.019, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return -0.0926667273159864;  // std dev = 6.79e-05, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #6
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordvenue(D, C) )
%   then if ( title(E, B), venue(E, D) )
%   | then if ( samebib(E, F), title(F, A) )
%   | | then return 0.2551593808193205;  // std dev = 0.002, 96.000 (wgt'ed) examples reached here.  /* #pos=96 */
%   | | else return -0.0863200185848198;  // std dev = 0.281, 206.000 (wgt'ed) examples reached here.  /* #neg=206 */
%   | else return 0.24692714516757797;  // std dev = 0.152, 13.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   else if ( haswordtitle(A, G), haswordtitle(B, G) )
%   | then return 0.25737494818509205;  // std dev = 0.018, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return -0.08513563990483575;  // std dev = 0.000132, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #7
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordvenue(D, C) )
%   then if ( title(E, B), venue(E, D) )
%   | then if ( samebib(E, F), title(F, A) )
%   | | then return 0.2097486356475671;  // std dev = 0.001, 96.000 (wgt'ed) examples reached here.  /* #pos=96 */
%   | | else return -0.07978117896841949;  // std dev = 0.268, 206.000 (wgt'ed) examples reached here.  /* #neg=206 */
%   | else return 0.1984301653893709;  // std dev = 0.153, 13.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   else if ( haswordtitle(A, G), haswordtitle(B, G) )
%   | then return 0.21132605742777538;  // std dev = 0.016, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return -0.078734582391261;  // std dev = 0.000123, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #8
% FOR sametitle(A, B):
%   if ( haswordtitle(B, C), haswordvenue(D, C) )
%   then if ( title(E, A), venue(E, D) )
%   | then if ( samebib(E, F), title(F, B) )
%   | | then return 0.17709187451440622;  // std dev = 0.001, 96.000 (wgt'ed) examples reached here.  /* #pos=96 */
%   | | else return -0.0743744762276613;  // std dev = 0.303, 206.000 (wgt'ed) examples reached here.  /* #neg=206 */
%   | else return 0.16654646394404693;  // std dev = 0.143, 13.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   else if ( haswordtitle(A, G), haswordtitle(B, G) )
%   | then return 0.17860389115331468;  // std dev = 0.016, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return -0.07318387632889668;  // std dev = 0.000178, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #9
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordvenue(D, C) )
%   then if ( title(E, B), venue(E, D) )
%   | then if ( samebib(E, F), title(F, A) )
%   | | then return 0.1527365222925299;  // std dev = 0.001, 96.000 (wgt'ed) examples reached here.  /* #pos=96 */
%   | | else return -0.06948022626133439;  // std dev = 0.298, 206.000 (wgt'ed) examples reached here.  /* #neg=206 */
%   | else return 0.140130722639821;  // std dev = 0.144, 13.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   else if ( haswordtitle(A, G), haswordtitle(B, G) )
%   | then return 0.15395388231852367;  // std dev = 0.014, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return -0.0683713506062769;  // std dev = 0.000170, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #10
% FOR sametitle(A, B):
%   if ( haswordtitle(B, C), haswordvenue(D, C) )
%   then if ( title(E, A), venue(E, D) )
%   | then return -0.001979426474134058;  // std dev = 0.095, 302.000 (wgt'ed) examples reached here.  /* #neg=206 #pos=96 */
%   | else return 0.12227045775978468;  // std dev = 0.137, 13.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   else if ( haswordtitle(A, F), haswordtitle(B, F) )
%   | then return 0.1352765127553519;  // std dev = 0.014, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return -0.06412161142768061;  // std dev = 0.000212, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */


Results
   AUC ROC   = 0.979474
   AUC PR    = 0.959962
   CLL	      = -0.170544
   Precision = 0.986038 at threshold = 0.5
   Recall    = 0.965812
   F1        = 0.97582


Total learning time: 394.4471640586853 seconds
Total inference time: 55.255 seconds
AUC ROC: 0.979474


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.096005
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 5.468 seconds
Refined model CLL: -0.096005


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.986433
   AUC PR    = 0.987219
   CLL	      = -0.161061
   Precision = 0.986038 at threshold = 0.5
   Recall    = 0.965812
   F1        = 0.97582


Total learning time: 808.7358131656646 seconds
Total inference time: 61.784 seconds
AUC ROC: 0.986433
Total revision time: 808.7358131656646
Best scored revision CLL: -0.088329


Dataset: 6_imdb_cora, Fold: 3, Type: Transfer (trRDN-B), Time: 04:16:24
{'AUC ROC': 0.986433, 'AUC PR': 0.987219, 'CLL': -0.161061, 'Precision': [0.986038, 0.5], 'Recall': 0.965812, 'F1': 0.97582, 'Learning time': 808.7358131656646, 'Inference time': 61.784, 'parameter': {'AUC ROC': 0.986433, 'AUC PR': 0.987219, 'CLL': -0.161061, 'Precision': [0.986038, 0.5], 'Recall': 0.965812, 'F1': 0.97582, 'Learning time': 403.08764910697937, 'Inference time': 61.784}}


WILL Produced-Tree #1
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordvenue(D, C) )
%   then if ( title(E, B), venue(E, D) )
%   | then if ( samebib(E, F), title(F, A) )
%   | | then return 0.8581489350995115;  // std dev = 3.37e-07, 96.000 (wgt'ed) examples reached here.  /* #pos=96 */
%   | | else return -0.14185106490048843;  // std dev = 0.000, 206.000 (wgt'ed) examples reached here.  /* #neg=206 */
%   | else return 0.7812258581764353;  // std dev = 0.266, 13.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   else if ( haswordtitle(A, G), haswordtitle(B, G) )
%   | then return 0.8581489350995122;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return -0.14185106490048777;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #2
% FOR sametitle(A, B):
%   if ( haswordtitle(B, C), haswordvenue(D, C) )
%   then if ( title(E, A), venue(E, D) )
%   | then if ( samebib(E, F), title(F, B) )
%   | | then return 0.7194734122109541;  // std dev = 1.88e-07, 96.000 (wgt'ed) examples reached here.  /* #pos=96 */
%   | | else return -0.12612338422298822;  // std dev = 0.139, 206.000 (wgt'ed) examples reached here.  /* #neg=206 */
%   | else return 0.6673923081472714;  // std dev = 0.229, 13.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   else if ( haswordtitle(A, G), haswordtitle(B, G) )
%   | then return 0.7225254794457083;  // std dev = 0.014, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return -0.12544463852839136;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #3
% FOR sametitle(A, B):
%   if ( haswordtitle(B, C), haswordvenue(D, C) )
%   then if ( title(E, A), venue(E, D) )
%   | then if ( samebib(E, F), title(F, B) )
%   | | then return 0.5553664367462835;  // std dev = 4.09e-07, 96.000 (wgt'ed) examples reached here.  /* #pos=96 */
%   | | else return -0.11287578031157806;  // std dev = 0.129, 206.000 (wgt'ed) examples reached here.  /* #neg=206 */
%   | else return 0.5235516292488023;  // std dev = 0.214, 13.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   else if ( haswordtitle(A, G), haswordtitle(B, G) )
%   | then return 0.5583951624779798;  // std dev = 0.017, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return -0.11231637819360636;  // std dev = 2.63e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #4
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordvenue(D, C) )
%   then if ( title(E, B), venue(E, D) )
%   | then if ( samebib(E, F), title(F, A) )
%   | | then return 0.41749818750685663;  // std dev = 0.001, 96.000 (wgt'ed) examples reached here.  /* #pos=96 */
%   | | else return -0.1025477100747007;  // std dev = 0.219, 206.000 (wgt'ed) examples reached here.  /* #neg=206 */
%   | else return 0.40316752663743777;  // std dev = 0.180, 13.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   else if ( haswordtitle(A, G), haswordtitle(B, G) )
%   | then return 0.42073337754073636;  // std dev = 0.019, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return -0.10155867761849639;  // std dev = 9.22e-05, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #5
% FOR sametitle(A, B):
%   if ( haswordtitle(B, C), haswordvenue(D, C) )
%   then if ( title(E, A), venue(E, D) )
%   | then if ( samebib(E, F), title(F, B) )
%   | | then return 0.32070786392391376;  // std dev = 0.000701, 96.000 (wgt'ed) examples reached here.  /* #pos=96 */
%   | | else return -0.09350751227163409;  // std dev = 0.205, 206.000 (wgt'ed) examples reached here.  /* #neg=206 */
%   | else return 0.30768423831114233;  // std dev = 0.175, 13.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   else if ( haswordtitle(A, G), haswordtitle(B, G) )
%   | then return 0.32300119034950237;  // std dev = 0.019, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return -0.0926667273159864;  // std dev = 6.79e-05, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #6
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordvenue(D, C) )
%   then if ( title(E, B), venue(E, D) )
%   | then if ( samebib(E, F), title(F, A) )
%   | | then return 0.2551593808193205;  // std dev = 0.002, 96.000 (wgt'ed) examples reached here.  /* #pos=96 */
%   | | else return -0.0863200185848198;  // std dev = 0.281, 206.000 (wgt'ed) examples reached here.  /* #neg=206 */
%   | else return 0.24692714516757797;  // std dev = 0.152, 13.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   else if ( haswordtitle(A, G), haswordtitle(B, G) )
%   | then return 0.25737494818509205;  // std dev = 0.018, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return -0.08513563990483575;  // std dev = 0.000132, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #7
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordvenue(D, C) )
%   then if ( title(E, B), venue(E, D) )
%   | then if ( samebib(E, F), title(F, A) )
%   | | then return 0.2097486356475671;  // std dev = 0.001, 96.000 (wgt'ed) examples reached here.  /* #pos=96 */
%   | | else return -0.07978117896841949;  // std dev = 0.268, 206.000 (wgt'ed) examples reached here.  /* #neg=206 */
%   | else return 0.1984301653893709;  // std dev = 0.153, 13.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   else if ( haswordtitle(A, G), haswordtitle(B, G) )
%   | then return 0.21132605742777538;  // std dev = 0.016, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return -0.078734582391261;  // std dev = 0.000123, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #8
% FOR sametitle(A, B):
%   if ( haswordtitle(B, C), haswordvenue(D, C) )
%   then if ( title(E, A), venue(E, D) )
%   | then if ( samebib(E, F), title(F, B) )
%   | | then return 0.17709187451440622;  // std dev = 0.001, 96.000 (wgt'ed) examples reached here.  /* #pos=96 */
%   | | else return -0.0743744762276613;  // std dev = 0.303, 206.000 (wgt'ed) examples reached here.  /* #neg=206 */
%   | else return 0.16654646394404693;  // std dev = 0.143, 13.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   else if ( haswordtitle(A, G), haswordtitle(B, G) )
%   | then return 0.17860389115331468;  // std dev = 0.016, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return -0.07318387632889668;  // std dev = 0.000178, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #9
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordvenue(D, C) )
%   then if ( title(E, B), venue(E, D) )
%   | then return 0.0011582103650595705;  // std dev = 0.105, 302.000 (wgt'ed) examples reached here.  /* #neg=206 #pos=96 */
%   | else return 0.140130722639821;  // std dev = 0.144, 13.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   else if ( haswordtitle(A, F), haswordtitle(B, F) )
%   | then return 0.15395388231852367;  // std dev = 0.014, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return -0.0683713506062769;  // std dev = 0.000170, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #10
% FOR sametitle(A, B):
%   if ( haswordtitle(B, C), haswordvenue(D, C) )
%   then if ( title(E, A), venue(E, D) )
%   | then if ( samebib(E, F), title(F, B) )
%   | | then return 0.1523964218837177;  // std dev = 0.019, 96.000 (wgt'ed) examples reached here.  /* #pos=96 */
%   | | else return -0.06965629475862906;  // std dev = 0.324, 206.000 (wgt'ed) examples reached here.  /* #neg=206 */
%   | else return 0.12102007536561965;  // std dev = 0.141, 13.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   else if ( haswordtitle(A, G), haswordtitle(B, G) )
%   | then return 0.1389676954070842;  // std dev = 0.019, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return -0.06557523305723328;  // std dev = 0.003, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */


Results
   AUC ROC   = 0.979568
   AUC PR    = 0.963901
   CLL	      = -0.170452
   Precision = 0.986038 at threshold = 0.5
   Recall    = 0.965812
   F1        = 0.97582


Total learning time: 397.28329515457153 seconds
Total inference time: 55.956 seconds
AUC ROC: 0.979568


Dataset: 6_imdb_cora, Fold: 3, Type: Scratch (RDN-B), Time: 04:23:58
{'AUC ROC': 0.979568, 'AUC PR': 0.963901, 'CLL': -0.170452, 'Precision': [0.986038, 0.5], 'Recall': 0.965812, 'F1': 0.97582, 'Learning time': 397.28329515457153, 'Inference time': 55.956}


Starting fold 4

Target train facts examples: 8129
Target train pos examples: 129
Target train neg examples: 70

Target test facts examples: 34429
Target test pos  examples: 569
Target test neg examples: 646

******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


WILL Produced-Tree #1
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordauthor(D, C) )
%   then if ( haswordtitle(B, C) )
%   | then return 0.8581489350995118;  // std dev = 1.46e-07, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | else return 0.088918165868743;  // std dev = 0.421, 13.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=3 */
%   else if ( haswordtitle(B, E), haswordauthor(F, E) )
%   | then return 0.088918165868743;  // std dev = 0.421, 13.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=3 */
%   | else return 0.5180128806777413;  // std dev = 0.474, 147.000 (wgt'ed) examples reached here.  /* #neg=50 #pos=97 */
WILL Produced-Tree #2
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordauthor(D, C) )
%   then if ( haswordtitle(B, C) )
%   | then return 0.7194734122109545;  // std dev = 0.000, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | else return 0.07774578121441031;  // std dev = 0.421, 13.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=3 */
%   else if ( haswordtitle(B, E), haswordauthor(F, E) )
%   | then return 0.07774578121441031;  // std dev = 0.421, 13.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=3 */
%   | else return 0.4426517838203286;  // std dev = 0.474, 147.000 (wgt'ed) examples reached here.  /* #neg=50 #pos=97 */
WILL Produced-Tree #3
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordauthor(D, C) )
%   then if ( haswordtitle(B, C) )
%   | then return 0.5553664367462846;  // std dev = 0.000, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | else return 0.06739536297660921;  // std dev = 0.421, 13.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=3 */
%   else if ( haswordtitle(B, E), haswordauthor(F, E) )
%   | then return 0.06739536297660921;  // std dev = 0.421, 13.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=3 */
%   | else return 0.35818915709203447;  // std dev = 0.474, 147.000 (wgt'ed) examples reached here.  /* #neg=50 #pos=97 */
WILL Produced-Tree #4
% FOR sametitle(A, B):
%   if ( haswordtitle(B, C), haswordauthor(D, C) )
%   then if ( haswordtitle(A, C) )
%   | then return 0.41751358415831;  // std dev = 0.000, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | else return 0.0579733820773872;  // std dev = 0.421, 13.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=3 */
%   else if ( haswordtitle(A, E), haswordauthor(F, E) )
%   | then return 0.0579733820773872;  // std dev = 0.421, 13.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=3 */
%   | else return 0.27788243713622723;  // std dev = 0.474, 147.000 (wgt'ed) examples reached here.  /* #neg=50 #pos=97 */
WILL Produced-Tree #5
% FOR sametitle(A, B):
%   if ( haswordtitle(B, C), haswordauthor(D, C) )
%   then if ( haswordtitle(A, C) )
%   | then return 0.3207118471601494;  // std dev = 0.000, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | else return 0.049528997355293175;  // std dev = 0.421, 13.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=3 */
%   else if ( haswordtitle(A, E), haswordauthor(F, E) )
%   | then return 0.049528997355293175;  // std dev = 0.421, 13.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=3 */
%   | else return 0.21050564085975995;  // std dev = 0.474, 147.000 (wgt'ed) examples reached here.  /* #neg=50 #pos=97 */
WILL Produced-Tree #6
% FOR sametitle(A, B):
%   return 0;  // std dev = 0.438, 199.000 (wgt'ed) examples reached here.  /* #neg=70 #pos=129 */
WILL Produced-Tree #7
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordauthor(D, C) )
%   then if ( haswordtitle(B, C) )
%   | then return 0.25517224256948956;  // std dev = 0.000, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | else return 0.04206293300387109;  // std dev = 0.421, 13.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=3 */
%   else if ( haswordtitle(B, E), haswordauthor(F, E) )
%   | then return 0.04206293300387109;  // std dev = 0.421, 13.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=3 */
%   | else return 0.1580534785942129;  // std dev = 0.474, 147.000 (wgt'ed) examples reached here.  /* #neg=50 #pos=97 */
WILL Produced-Tree #8
% FOR sametitle(A, B):
%   if ( haswordtitle(B, C), haswordauthor(D, C) )
%   then if ( haswordtitle(A, C) )
%   | then return 0.2097577156325355;  // std dev = 2.11e-08, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | else return 0.03553879177151896;  // std dev = 0.421, 13.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=3 */
%   else return 0.11188245379289621;  // std dev = 0.470, 160.000 (wgt'ed) examples reached here.  /* #neg=60 #pos=100 */
WILL Produced-Tree #9
% FOR sametitle(A, B):
%   if ( haswordtitle(B, C), haswordauthor(D, C) )
%   then if ( haswordtitle(A, C) )
%   | then return 0.17709649774527747;  // std dev = 0.000, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | else return 0.029894556746069525;  // std dev = 0.421, 13.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=3 */
%   else if ( haswordtitle(A, E), haswordauthor(F, E) )
%   | then return 0.017359394415460756;  // std dev = 0.421, 13.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=3 */
%   | else return 0.09100974909547045;  // std dev = 0.474, 147.000 (wgt'ed) examples reached here.  /* #neg=50 #pos=97 */
WILL Produced-Tree #10
% FOR sametitle(A, B):
%   if ( haswordtitle(B, C), haswordauthor(D, C) )
%   then if ( haswordtitle(A, C) )
%   | then return 0.15274385809367083;  // std dev = 0.000, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | else return 0.025052826506284376;  // std dev = 0.421, 13.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=3 */
%   else return 0.06442199764370024;  // std dev = 0.470, 160.000 (wgt'ed) examples reached here.  /* #neg=60 #pos=100 */


Results
   AUC ROC   = 0.746149
   AUC PR    = 0.695718
   CLL	      = -0.597825
   Precision = 0.580541 at threshold = 0.5
   Recall    = 0.943761
   F1        = 0.718876


Total learning time: 9.838719844818115 seconds
Total inference time: 2.3 seconds
AUC ROC: 0.746149


Results scoring model
   AUC ROC   = 0.691584
   AUC PR    = 0.815016
   CLL	      = -0.567548
   Precision = 0.710983 at threshold = 0.5
   Recall    = 0.953488
   F1        = 0.81457


Total scoring time: 1.259 seconds
Parameter learned model CLL: -0.567548


Structure after Parameter Learning
[['sametitle(A, B)', {'': 'haswordtitle(A, C), haswordauthor(D, C)', 'true': 'haswordtitle(B, C)', 'false': 'haswordtitle(B, E), haswordauthor(F, E)'}, {'true,true': [1.46e-07, 0, 26], 'true,false': [0.421, 10, 3], 'false,true': [0.421, 10, 3], 'false,false': [0.474, 50, 97]}], ['sametitle(A, B)', {'': 'haswordtitle(A, C), haswordauthor(D, C)', 'true': 'haswordtitle(B, C)', 'false': 'haswordtitle(B, E), haswordauthor(F, E)'}, {'true,true': [0.0, 0, 26], 'true,false': [0.421, 10, 3], 'false,true': [0.421, 10, 3], 'false,false': [0.474, 50, 97]}], ['sametitle(A, B)', {'': 'haswordtitle(A, C), haswordauthor(D, C)', 'true': 'haswordtitle(B, C)', 'false': 'haswordtitle(B, E), haswordauthor(F, E)'}, {'true,true': [0.0, 0, 26], 'true,false': [0.421, 10, 3], 'false,true': [0.421, 10, 3], 'false,false': [0.474, 50, 97]}], ['sametitle(A, B)', {'': 'haswordtitle(B, C), haswordauthor(D, C)', 'true': 'haswordtitle(A, C)', 'false': 'haswordtitle(A, E), haswordauthor(F, E)'}, {'true,true': [0.0, 0, 26], 'true,false': [0.421, 10, 3], 'false,true': [0.421, 10, 3], 'false,false': [0.474, 50, 97]}], ['sametitle(A, B)', {'': 'haswordtitle(B, C), haswordauthor(D, C)', 'true': 'haswordtitle(A, C)', 'false': 'haswordtitle(A, E), haswordauthor(F, E)'}, {'true,true': [0.0, 0, 26], 'true,false': [0.421, 10, 3], 'false,true': [0.421, 10, 3], 'false,false': [0.474, 50, 97]}], ['sametitle(A, B)', {}, {}], ['sametitle(A, B)', {'': 'haswordtitle(A, C), haswordauthor(D, C)', 'true': 'haswordtitle(B, C)', 'false': 'haswordtitle(B, E), haswordauthor(F, E)'}, {'true,true': [0.0, 0, 26], 'true,false': [0.421, 10, 3], 'false,true': [0.421, 10, 3], 'false,false': [0.474, 50, 97]}], ['sametitle(A, B)', {'': 'haswordtitle(B, C), haswordauthor(D, C)', 'true': 'haswordtitle(A, C)'}, {'true,true': [2.11e-08, 0, 26], 'true,false': [0.421, 10, 3], 'false': [0.47, 60, 100]}], ['sametitle(A, B)', {'': 'haswordtitle(B, C), haswordauthor(D, C)', 'true': 'haswordtitle(A, C)', 'false': 'haswordtitle(A, E), haswordauthor(F, E)'}, {'true,true': [0.0, 0, 26], 'true,false': [0.421, 10, 3], 'false,true': [0.421, 10, 3], 'false,false': [0.474, 50, 97]}], ['sametitle(A, B)', {'': 'haswordtitle(B, C), haswordauthor(D, C)', 'true': 'haswordtitle(A, C)'}, {'true,true': [0.0, 0, 26], 'true,false': [0.421, 10, 3], 'false': [0.47, 60, 100]}]]
[{'': [0.19066403681788444, 0.2343750000000029], 'false': [0.17751479289940816, 0.22444351890416298], 'true': [8.198570028001156e-16, 0.17751479289940816]}, {'': [0.15068589816301023, 0.23057047642799117], 'false': [0.17751479289940827, 0.22444351890415876], 'true': [-1.3664283380001927e-16, 0.17751479289940827]}, {'': [0.1120862129300096, 0.22694290873112336], 'false': [0.17751479289940833, 0.22444351890416056], 'true': [-3.416070845000482e-16, 0.17751479289940833]}, {'': [0.08789807694700034, 0.22424055779367552], 'false': [0.1775147928994081, 0.22444351890415815], 'true': [-6.832141690000964e-17, 0.1775147928994081]}, {'': [0.07551385052831006, 0.22256496069009718], 'false': [0.1775147928994083, 0.22444351890416195], 'true': [-1.708035422500241e-17, 0.1775147928994083]}, {}, {'': [0.06926394826058825, 0.2216348655623433], 'false': [0.17751479289940833, 0.22444351890415984], 'true': [-8.540177112501205e-18, 0.17751479289940833]}, {'': [0.06591653839564514, 0.22114599264757223], 'true': [1.708035422500241e-17, 0.1775147928994083]}, {'': [0.06398680017401034, 0.2210354810153646], 'false': [0.17751479289940827, 0.22444351890416026], 'true': [-3.416070845000482e-17, 0.1775147928994083]}, {'': [0.06279493086599186, 0.22085157011777268], 'true': [-3.843079700625542e-17, 0.17751479289940836]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;sametitle(A, B) :- haswordtitle(A, C), haswordauthor(D, C).;true;true
0;true;haswordtitle(B, C).;true;true
1;;sametitle(A, B) :- haswordtitle(A, C), haswordauthor(D, C).;true;true
1;true;haswordtitle(B, C).;true;true
2;;sametitle(A, B) :- haswordtitle(A, C), haswordauthor(D, C).;true;true
2;true;haswordtitle(B, C).;true;true
3;;sametitle(A, B) :- haswordtitle(B, C), haswordauthor(D, C).;true;true
3;true;haswordtitle(A, C).;true;true
4;;sametitle(A, B) :- haswordtitle(B, C), haswordauthor(D, C).;true;true
4;true;haswordtitle(A, C).;true;true
6;;sametitle(A, B) :- haswordtitle(A, C), haswordauthor(D, C).;true;true
6;true;haswordtitle(B, C).;true;true
7;;sametitle(A, B) :- haswordtitle(B, C), haswordauthor(D, C).;true;true
7;true;haswordtitle(A, C).;true;true
8;;sametitle(A, B) :- haswordtitle(B, C), haswordauthor(D, C).;true;true
8;true;haswordtitle(A, C).;true;true
9;;sametitle(A, B) :- haswordtitle(B, C), haswordauthor(D, C).;true;true
9;true;haswordtitle(A, C).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordauthor(D, C) )
%   then if ( haswordtitle(B, C) )
%   | then return 0.8581489350995118;  // std dev = 1.46e-07, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | else return 0.088918165868743;  // std dev = 0.421, 13.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=3 */
%   else return 0.48314893509950974;  // std dev = 0.484, 160.000 (wgt'ed) examples reached here.  /* #neg=60 #pos=100 */
WILL Produced-Tree #2
% FOR sametitle(A, B):
%   if ( haswordtitle(B, C), haswordauthor(D, C) )
%   then if ( haswordtitle(A, C) )
%   | then return 0.7194734122109545;  // std dev = 0.000, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | else return 0.019426559477543768;  // std dev = 0.421, 13.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=3 */
%   else if ( haswordtitle(A, E), haswordauthor(F, E) )
%   | then return 0.07774578121441031;  // std dev = 0.421, 13.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=3 */
%   | else return 0.44852127428654304;  // std dev = 0.474, 147.000 (wgt'ed) examples reached here.  /* #neg=50 #pos=97 */
WILL Produced-Tree #3
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordauthor(D, C) )
%   then if ( haswordtitle(B, C) )
%   | then return 0.5553664367462846;  // std dev = 0.000, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | else return 0.06739536297660921;  // std dev = 0.421, 13.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=3 */
%   else if ( haswordtitle(B, E), haswordauthor(F, E) )
%   | then return 0.01617044320432853;  // std dev = 0.421, 13.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=3 */
%   | else return 0.3642619889388496;  // std dev = 0.474, 147.000 (wgt'ed) examples reached here.  /* #neg=50 #pos=97 */
WILL Produced-Tree #4
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordauthor(D, C) )
%   then if ( haswordtitle(B, C) )
%   | then return 0.41751358415831;  // std dev = 0.000, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | else return 0.0579733820773872;  // std dev = 0.421, 13.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=3 */
%   else if ( haswordtitle(B, E), haswordauthor(F, E) )
%   | then return 0.013432400712573424;  // std dev = 0.421, 13.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=3 */
%   | else return 0.283278747998026;  // std dev = 0.474, 147.000 (wgt'ed) examples reached here.  /* #neg=50 #pos=97 */
WILL Produced-Tree #5
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordauthor(D, C) )
%   then if ( haswordtitle(B, C) )
%   | then return 0.3207118471601494;  // std dev = 0.000, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | else return 0.049528997355293175;  // std dev = 0.421, 13.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=3 */
%   else return 0.19828750685913873;  // std dev = 0.473, 160.000 (wgt'ed) examples reached here.  /* #neg=60 #pos=100 */
WILL Produced-Tree #6
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordauthor(D, C) )
%   then if ( haswordtitle(B, C) )
%   | then return 0.25517224256948956;  // std dev = 0.000, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | else return 0.04206293300387109;  // std dev = 0.421, 13.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=3 */
%   else if ( haswordtitle(B, E), haswordauthor(F, E) )
%   | then return -0.024722454402233394;  // std dev = 0.421, 13.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=3 */
%   | else return 0.16548909494109845;  // std dev = 0.474, 147.000 (wgt'ed) examples reached here.  /* #neg=50 #pos=97 */
WILL Produced-Tree #7
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordauthor(D, C) )
%   then if ( haswordtitle(B, C) )
%   | then return 0.2097577156325355;  // std dev = 2.11e-08, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | else return 0.03553879177151896;  // std dev = 0.421, 13.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=3 */
%   else return 0.11245946161396563;  // std dev = 0.471, 160.000 (wgt'ed) examples reached here.  /* #neg=60 #pos=100 */
WILL Produced-Tree #8
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordauthor(D, C) )
%   then if ( haswordtitle(B, C) )
%   | then return 0.17709649774527747;  // std dev = 0.000, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | else return 0.029894556746069525;  // std dev = 0.421, 13.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=3 */
%   else if ( haswordtitle(B, E), haswordauthor(F, E) )
%   | then return -0.04176610513532546;  // std dev = 0.421, 13.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=3 */
%   | else return 0.09634720716714021;  // std dev = 0.474, 147.000 (wgt'ed) examples reached here.  /* #neg=50 #pos=97 */
WILL Produced-Tree #9
% FOR sametitle(A, B):
%   return 0;  // std dev = 0.437, 199.000 (wgt'ed) examples reached here.  /* #neg=70 #pos=129 */
WILL Produced-Tree #10
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordauthor(D, C) )
%   then if ( haswordtitle(B, C) )
%   | then return 0.15274385809367083;  // std dev = 0.000, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | else return 0.025052826506284376;  // std dev = 0.421, 13.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=3 */
%   else return 0.06416829030648503;  // std dev = 0.471, 160.000 (wgt'ed) examples reached here.  /* #neg=60 #pos=100 */


Results
   AUC ROC   = 0.746454
   AUC PR    = 0.6958
   CLL	      = -0.600726
   Precision = 0.580541 at threshold = 0.5
   Recall    = 0.943761
   F1        = 0.718876


Total learning time: 9.072378873825073 seconds
Total inference time: 2.287 seconds
AUC ROC: 0.746454


Results scoring model
   AUC ROC   = 0.691584
   AUC PR    = 0.815016
   CLL	      = -0.568589
   Precision = 0.710983 at threshold = 0.5
   Recall    = 0.953488
   F1        = 0.81457


Total scoring time: 1.217 seconds
Refined model CLL: -0.568589


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.746149
   AUC PR    = 0.695718
   CLL	      = -0.597825
   Precision = 0.580541 at threshold = 0.5
   Recall    = 0.943761
   F1        = 0.718876


Total learning time: 21.387098718643188 seconds
Total inference time: 2.3 seconds
AUC ROC: 0.746149
Total revision time: 21.387098718643188
Best scored revision CLL: -0.567548


Dataset: 6_imdb_cora, Fold: 4, Type: Transfer (trRDN-B), Time: 04:24:27
{'AUC ROC': 0.746149, 'AUC PR': 0.695718, 'CLL': -0.597825, 'Precision': [0.580541, 0.5], 'Recall': 0.943761, 'F1': 0.718876, 'Learning time': 21.387098718643188, 'Inference time': 2.3, 'parameter': {'AUC ROC': 0.746149, 'AUC PR': 0.695718, 'CLL': -0.597825, 'Precision': [0.580541, 0.5], 'Recall': 0.943761, 'F1': 0.718876, 'Learning time': 9.838719844818115, 'Inference time': 2.3}}


WILL Produced-Tree #1
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordauthor(D, C) )
%   then if ( haswordtitle(B, C) )
%   | then return 0.8581489350995118;  // std dev = 1.46e-07, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | else return 0.088918165868743;  // std dev = 0.421, 13.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=3 */
%   else return 0.48314893509950974;  // std dev = 0.484, 160.000 (wgt'ed) examples reached here.  /* #neg=60 #pos=100 */
WILL Produced-Tree #2
% FOR sametitle(A, B):
%   return 0;  // std dev = 0.468, 199.000 (wgt'ed) examples reached here.  /* #neg=70 #pos=129 */
WILL Produced-Tree #3
% FOR sametitle(A, B):
%   return 0;  // std dev = 0.468, 199.000 (wgt'ed) examples reached here.  /* #neg=70 #pos=129 */
WILL Produced-Tree #4
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordauthor(D, C) )
%   then if ( haswordtitle(B, C) )
%   | then return 0.7194734122109545;  // std dev = 0.000, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | else return 0.07774578121441031;  // std dev = 0.421, 13.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=3 */
%   else if ( haswordtitle(B, E), haswordauthor(F, E) )
%   | then return 0.019426559477543768;  // std dev = 0.421, 13.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=3 */
%   | else return 0.44852127428654304;  // std dev = 0.474, 147.000 (wgt'ed) examples reached here.  /* #neg=50 #pos=97 */
WILL Produced-Tree #5
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordauthor(D, C) )
%   then if ( haswordtitle(B, C) )
%   | then return 0.5553664367462846;  // std dev = 0.000, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | else return 0.06739536297660921;  // std dev = 0.421, 13.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=3 */
%   else return 0.33597955084791964;  // std dev = 0.479, 160.000 (wgt'ed) examples reached here.  /* #neg=60 #pos=100 */
WILL Produced-Tree #6
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordauthor(D, C) )
%   then if ( haswordtitle(B, C) )
%   | then return 0.41751358415831;  // std dev = 0.000, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | else return 0.0579733820773872;  // std dev = 0.421, 13.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=3 */
%   else return 0.26261821913855327;  // std dev = 0.479, 160.000 (wgt'ed) examples reached here.  /* #neg=60 #pos=100 */
WILL Produced-Tree #7
% FOR sametitle(A, B):
%   if ( haswordtitle(B, C), haswordauthor(D, C) )
%   then if ( haswordtitle(A, C) )
%   | then return 0.3207118471601494;  // std dev = 0.000, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | else return -0.1013031762311006;  // std dev = 0.421, 13.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=3 */
%   else return 0.21248039315976638;  // std dev = 0.472, 160.000 (wgt'ed) examples reached here.  /* #neg=60 #pos=100 */
WILL Produced-Tree #8
% FOR sametitle(A, B):
%   return 0;  // std dev = 0.442, 199.000 (wgt'ed) examples reached here.  /* #neg=70 #pos=129 */
WILL Produced-Tree #9
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordauthor(D, C) )
%   then if ( haswordtitle(B, C) )
%   | then return 0.25517224256948956;  // std dev = 0.000, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | else return 0.015843689162477248;  // std dev = 0.421, 13.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=3 */
%   else if ( haswordtitle(B, E), haswordauthor(F, E) )
%   | then return -0.07922849942363247;  // std dev = 0.421, 13.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=3 */
%   | else return 0.17417294421667243;  // std dev = 0.474, 147.000 (wgt'ed) examples reached here.  /* #neg=50 #pos=97 */
WILL Produced-Tree #10
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordauthor(D, C) )
%   then if ( haswordtitle(B, C) )
%   | then return 0.2097577156325355;  // std dev = 2.11e-08, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | else return 0.013158270166269777;  // std dev = 0.421, 13.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=3 */
%   else return 0.1149686889602615;  // std dev = 0.473, 160.000 (wgt'ed) examples reached here.  /* #neg=60 #pos=100 */


Results
   AUC ROC   = 0.746454
   AUC PR    = 0.6958
   CLL	      = -0.592049
   Precision = 0.580541 at threshold = 0.5
   Recall    = 0.943761
   F1        = 0.718876


Total learning time: 7.4756553173065186 seconds
Total inference time: 2.218 seconds
AUC ROC: 0.746454


Dataset: 6_imdb_cora, Fold: 4, Type: Scratch (RDN-B), Time: 04:24:37
{'AUC ROC': 0.746454, 'AUC PR': 0.6958, 'CLL': -0.592049, 'Precision': [0.580541, 0.5], 'Recall': 0.943761, 'F1': 0.718876, 'Learning time': 7.4756553173065186, 'Inference time': 2.218}


Starting fold 5

Target train facts examples: 8644
Target train pos examples: 154
Target train neg examples: 148

Target test facts examples: 33914
Target test pos  examples: 544
Target test neg examples: 568

******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


WILL Produced-Tree #1
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordauthor(D, C) )
%   then if ( haswordtitle(B, C) )
%   | then return 0.8248156017661792;  // std dev = 0.180, 60.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=58 */
%   | else if ( author(E, D), title(E, B) )
%   | | then return 0.5248156017661788;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return -0.04185106490048778;  // std dev = 0.300, 10.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=1 */
%   else if ( haswordtitle(B, F), haswordauthor(G, F) )
%   | then if ( author(H, G), title(H, A) )
%   | | then return 0.5248156017661788;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return -0.016851064900487787;  // std dev = 0.331, 8.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */
%   | else return 0.27099297179675785;  // std dev = 0.492, 218.000 (wgt'ed) examples reached here.  /* #neg=128 #pos=90 */
WILL Produced-Tree #2
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordauthor(D, C) )
%   then if ( haswordtitle(B, C) )
%   | then return 0.6928183180467428;  // std dev = 0.180, 60.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=58 */
%   | else return 0.07512012648654891;  // std dev = 0.403, 13.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=3 */
%   else if ( haswordtitle(B, E), haswordauthor(F, E) )
%   | then if ( author(G, F), title(G, A) )
%   | | then return 0.448295606241962;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return -0.014812149378556561;  // std dev = 0.331, 8.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */
%   | else return 0.23470502083103983;  // std dev = 0.492, 218.000 (wgt'ed) examples reached here.  /* #neg=128 #pos=90 */
WILL Produced-Tree #3
% FOR sametitle(A, B):
%   if ( haswordtitle(B, C), haswordauthor(D, C) )
%   then if ( haswordtitle(A, C) )
%   | then return 0.5367928709789446;  // std dev = 0.180, 60.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=58 */
%   | else if ( author(E, D), title(E, A) )
%   | | then return 0.36236334632262296;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return -0.03962207295635513;  // std dev = 0.301, 10.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=1 */
%   else return 0.19319059330556987;  // std dev = 0.490, 229.000 (wgt'ed) examples reached here.  /* #neg=136 #pos=93 */
WILL Produced-Tree #4
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordauthor(D, C) )
%   then if ( haswordtitle(B, C) )
%   | then return 0.4034008832853693;  // std dev = 0.180, 60.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=58 */
%   | else if ( author(E, D), title(E, B) )
%   | | then return 0.39907454420429106;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return -0.0655857135161417;  // std dev = 0.298, 10.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=1 */
%   else return 0.15885242306978178;  // std dev = 0.489, 229.000 (wgt'ed) examples reached here.  /* #neg=136 #pos=93 */
WILL Produced-Tree #5
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordauthor(D, C) )
%   then if ( haswordtitle(B, C) )
%   | then return 0.30789442979240567;  // std dev = 0.180, 60.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=58 */
%   | else return 0.028846811078302073;  // std dev = 0.380, 13.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=3 */
%   else if ( haswordtitle(B, E), haswordauthor(F, E) )
%   | then if ( author(G, F), title(G, A) )
%   | | then return 0.2424954118636378;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return -0.027848428308066407;  // std dev = 0.331, 8.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */
%   | else return 0.13239977384042328;  // std dev = 0.492, 218.000 (wgt'ed) examples reached here.  /* #neg=128 #pos=90 */
WILL Produced-Tree #6
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordauthor(D, C) )
%   then if ( haswordtitle(B, C) )
%   | then return 0.24240066496454685;  // std dev = 0.180, 60.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=58 */
%   | else if ( author(E, D), title(E, B) )
%   | | then return 0.30749296696240663;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return -0.060577083384404;  // std dev = 0.298, 10.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=1 */
%   else if ( haswordtitle(B, F), haswordauthor(G, F) )
%   | then if ( author(H, G), title(H, A) )
%   | | then return 0.18245581795126933;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return -0.02427720868411175;  // std dev = 0.331, 8.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */
%   | else return 0.1049235402171041;  // std dev = 0.492, 218.000 (wgt'ed) examples reached here.  /* #neg=128 #pos=90 */
WILL Produced-Tree #7
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordauthor(D, C) )
%   then if ( haswordtitle(B, C) )
%   | then return 0.19670004057326665;  // std dev = 0.180, 60.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=58 */
%   | else if ( author(E, D), title(E, B) )
%   | | then return 0.23411780631160864;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return -0.05258678879030119;  // std dev = 0.298, 10.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=1 */
%   else return 0.07923222100276829;  // std dev = 0.488, 229.000 (wgt'ed) examples reached here.  /* #neg=136 #pos=93 */
WILL Produced-Tree #8
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordauthor(D, C) )
%   then if ( haswordtitle(B, C) )
%   | then return 0.16371858628713193;  // std dev = 0.180, 60.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=58 */
%   | else if ( author(E, D), title(E, B) )
%   | | then return 0.17600096952388436;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return -0.045917125396907676;  // std dev = 0.298, 10.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=1 */
%   else return 0.06170591480624216;  // std dev = 0.488, 229.000 (wgt'ed) examples reached here.  /* #neg=136 #pos=93 */
WILL Produced-Tree #9
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordauthor(D, C) )
%   then if ( haswordtitle(B, C) )
%   | then return 0.13909109340224876;  // std dev = 0.180, 60.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=58 */
%   | else if ( author(E, D), title(E, B) )
%   | | then return 0.13205724531109167;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return -0.0402925191888998;  // std dev = 0.298, 10.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=1 */
%   else return 0.04775749192377971;  // std dev = 0.488, 229.000 (wgt'ed) examples reached here.  /* #neg=136 #pos=93 */
WILL Produced-Tree #10
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordauthor(D, C) )
%   then if ( haswordtitle(B, C) )
%   | then return 0.12013771168374343;  // std dev = 0.180, 60.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=58 */
%   | else if ( author(E, D), title(E, B) )
%   | | then return 0.09939782996771877;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return -0.03550726290136584;  // std dev = 0.298, 10.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=1 */
%   else if ( haswordtitle(B, F), haswordauthor(G, F) )
%   | then return -0.009111767931354183;  // std dev = 0.379, 11.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=3 */
%   | else return 0.039112181277513355;  // std dev = 0.492, 218.000 (wgt'ed) examples reached here.  /* #neg=128 #pos=90 */


Results
   AUC ROC   = 0.739676
   AUC PR    = 0.695258
   CLL	      = -0.609913
   Precision = 0.759542 at threshold = 0.5
   Recall    = 0.365809
   F1        = 0.493797


Total learning time: 17.225977897644043 seconds
Total inference time: 3.435 seconds
AUC ROC: 0.739676


Results scoring model
   AUC ROC   = 0.716216
   AUC PR    = 0.772858
   CLL	      = -0.566314
   Precision = 0.939394 at threshold = 0.5
   Recall    = 0.402597
   F1        = 0.563636


Total scoring time: 1.388 seconds
Parameter learned model CLL: -0.566314


Structure after Parameter Learning
[['sametitle(A, B)', {'': 'haswordtitle(A, C), haswordauthor(D, C)', 'true': 'haswordtitle(B, C)', 'true,false': 'author(E, D), title(E, B)', 'false': 'haswordtitle(B, F), haswordauthor(G, F)', 'false,true': 'author(H, G), title(H, A)'}, {'true,true': [0.18, 2, 58], 'true,false,true': [0.816, 1, 2], 'true,false,false': [0.3, 9, 1], 'false,true,true': [0.816, 1, 2], 'false,true,false': [0.331, 7, 1], 'false,false': [0.492, 128, 90]}], ['sametitle(A, B)', {'': 'haswordtitle(A, C), haswordauthor(D, C)', 'true': 'haswordtitle(B, C)', 'false': 'haswordtitle(B, E), haswordauthor(F, E)', 'false,true': 'author(G, F), title(G, A)'}, {'true,true': [0.18, 2, 58], 'true,false': [0.403, 10, 3], 'false,true,true': [0.816, 1, 2], 'false,true,false': [0.331, 7, 1], 'false,false': [0.492, 128, 90]}], ['sametitle(A, B)', {'': 'haswordtitle(B, C), haswordauthor(D, C)', 'true': 'haswordtitle(A, C)', 'true,false': 'author(E, D), title(E, A)'}, {'true,true': [0.18, 2, 58], 'true,false,true': [0.816, 1, 2], 'true,false,false': [0.301, 9, 1], 'false': [0.49, 136, 93]}], ['sametitle(A, B)', {'': 'haswordtitle(A, C), haswordauthor(D, C)', 'true': 'haswordtitle(B, C)', 'true,false': 'author(E, D), title(E, B)'}, {'true,true': [0.18, 2, 58], 'true,false,true': [0.816, 1, 2], 'true,false,false': [0.298, 9, 1], 'false': [0.489, 136, 93]}], ['sametitle(A, B)', {'': 'haswordtitle(A, C), haswordauthor(D, C)', 'true': 'haswordtitle(B, C)', 'false': 'haswordtitle(B, E), haswordauthor(F, E)', 'false,true': 'author(G, F), title(G, A)'}, {'true,true': [0.18, 2, 58], 'true,false': [0.38, 10, 3], 'false,true,true': [0.816, 1, 2], 'false,true,false': [0.331, 7, 1], 'false,false': [0.492, 128, 90]}], ['sametitle(A, B)', {'': 'haswordtitle(A, C), haswordauthor(D, C)', 'true': 'haswordtitle(B, C)', 'true,false': 'author(E, D), title(E, B)', 'false': 'haswordtitle(B, F), haswordauthor(G, F)', 'false,true': 'author(H, G), title(H, A)'}, {'true,true': [0.18, 2, 58], 'true,false,true': [0.816, 1, 2], 'true,false,false': [0.298, 9, 1], 'false,true,true': [0.816, 1, 2], 'false,true,false': [0.331, 7, 1], 'false,false': [0.492, 128, 90]}], ['sametitle(A, B)', {'': 'haswordtitle(A, C), haswordauthor(D, C)', 'true': 'haswordtitle(B, C)', 'true,false': 'author(E, D), title(E, B)'}, {'true,true': [0.18, 2, 58], 'true,false,true': [0.816, 1, 2], 'true,false,false': [0.298, 9, 1], 'false': [0.488, 136, 93]}], ['sametitle(A, B)', {'': 'haswordtitle(A, C), haswordauthor(D, C)', 'true': 'haswordtitle(B, C)', 'true,false': 'author(E, D), title(E, B)'}, {'true,true': [0.18, 2, 58], 'true,false,true': [0.816, 1, 2], 'true,false,false': [0.298, 9, 1], 'false': [0.488, 136, 93]}], ['sametitle(A, B)', {'': 'haswordtitle(A, C), haswordauthor(D, C)', 'true': 'haswordtitle(B, C)', 'true,false': 'author(E, D), title(E, B)'}, {'true,true': [0.18, 2, 58], 'true,false,true': [0.816, 1, 2], 'true,false,false': [0.298, 9, 1], 'false': [0.488, 136, 93]}], ['sametitle(A, B)', {'': 'haswordtitle(A, C), haswordauthor(D, C)', 'true': 'haswordtitle(B, C)', 'true,false': 'author(E, D), title(E, B)', 'false': 'haswordtitle(B, F), haswordauthor(G, F)'}, {'true,true': [0.18, 2, 58], 'true,false,true': [0.816, 1, 2], 'true,false,false': [0.298, 9, 1], 'false,true': [0.379, 8, 3], 'false,false': [0.492, 128, 90]}]]
[{'': [0.13736160630512223, 0.2411853320874907], 'false': [0.1983471074380164, 0.2424038380607709], 'false,true': [0.22222222222222224, 0.10937500000000004], 'true': [0.03222222222222181, 0.17751479289940816], 'true,false': [0.22222222222222224, 0.09000000000000005]}, {'': [0.11123233779573748, 0.24022975904226385], 'false': [0.18269077994144062, 0.24240383806076876], 'false,true': [0.2222222222222222, 0.10937499999999994], 'true': [0.03222222222222181, 0.16229080212002522]}, {'': [0.08733630155981735, 0.2398809166412876], 'true': [0.032222222222222464, 0.14944889548060306], 'true,false': [0.22222222222222224, 0.09032637192437212]}, {'': [0.07377834945751677, 0.238682916500173], 'true': [0.032222222222221604, 0.15801283332357302], 'true,false': [0.22222222222222224, 0.08892482701440457]}, {'': [0.06354829911186236, 0.23853077400919234], 'false': [0.15464787057342266, 0.24240383806076923], 'false,true': [0.2222222222222222, 0.10937500000000004], 'true': [0.03222222222222227, 0.144129447097968]}, {'': [0.05904229351358671, 0.23814182523651295], 'false': [0.14862858178989372, 0.24240383806077018], 'false,true': [0.2222222222222222, 0.10937500000000003], 'true': [0.03222222222222208, 0.14375261595022704], 'true,false': [0.22222222222222224, 0.0889481428465583]}, {'': [0.055313268407152325, 0.23789617576239547], 'true': [0.03222222222222211, 0.13432473830250447], 'true,false': [0.2222222222222222, 0.08898637200676993]}, {'': [0.05304127072286651, 0.23784198095203396], 'true': [0.03222222222222229, 0.12850059984211643], 'true,false': [0.2222222222222222, 0.08901927293117537]}, {'': [0.05160667505448082, 0.23780368946846892], 'true': [0.03222222222222225, 0.12505328439787225], 'true,false': [0.2222222222222222, 0.08904773197598206]}, {'': [0.05066269885809944, 0.23777642844969746], 'false': [0.14385574176017638, 0.24240383806076957], 'true': [0.03222222222222225, 0.12302999267388871], 'true,false': [0.2222222222222222, 0.08907246594430804]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Pruning resulted in null theory

Candidate for revision
0;;sametitle(A, B) :- haswordtitle(A, C), haswordauthor(D, C).;true;true
0;true;haswordtitle(B, C).;true;true
0;true,false;author(E, D), title(E, B).;true;true
0;false;haswordtitle(B, F), haswordauthor(G, F).;true;true
0;false,true;author(H, G), title(H, A).;true;true
1;;sametitle(A, B) :- haswordtitle(A, C), haswordauthor(D, C).;true;true
1;true;haswordtitle(B, C).;true;true
1;false;haswordtitle(B, E), haswordauthor(F, E).;true;true
1;false,true;author(G, F), title(G, A).;true;true
2;;sametitle(A, B) :- haswordtitle(B, C), haswordauthor(D, C).;true;true
2;true;haswordtitle(A, C).;true;true
2;true,false;author(E, D), title(E, A).;true;true
3;;sametitle(A, B) :- haswordtitle(A, C), haswordauthor(D, C).;true;true
3;true;haswordtitle(B, C).;true;true
3;true,false;author(E, D), title(E, B).;true;true
4;;sametitle(A, B) :- haswordtitle(A, C), haswordauthor(D, C).;true;true
4;true;haswordtitle(B, C).;true;true
4;false;haswordtitle(B, E), haswordauthor(F, E).;true;true
4;false,true;author(G, F), title(G, A).;true;true
5;;sametitle(A, B) :- haswordtitle(A, C), haswordauthor(D, C).;true;true
5;true;haswordtitle(B, C).;true;true
5;true,false;author(E, D), title(E, B).;true;true
5;false;haswordtitle(B, F), haswordauthor(G, F).;true;true
5;false,true;author(H, G), title(H, A).;true;true
6;;sametitle(A, B) :- haswordtitle(A, C), haswordauthor(D, C).;true;true
6;true;haswordtitle(B, C).;true;true
6;true,false;author(E, D), title(E, B).;true;true
7;;sametitle(A, B) :- haswordtitle(A, C), haswordauthor(D, C).;true;true
7;true;haswordtitle(B, C).;true;true
7;true,false;author(E, D), title(E, B).;true;true
8;;sametitle(A, B) :- haswordtitle(A, C), haswordauthor(D, C).;true;true
8;true;haswordtitle(B, C).;true;true
8;true,false;author(E, D), title(E, B).;true;true
9;;sametitle(A, B) :- haswordtitle(A, C), haswordauthor(D, C).;true;true
9;true;haswordtitle(B, C).;true;true
9;true,false;author(E, D), title(E, B).;true;true
9;false;haswordtitle(B, F), haswordauthor(G, F).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordauthor(D, C) )
%   then if ( haswordtitle(B, C) )
%   | then return 0.8248156017661792;  // std dev = 0.180, 60.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=58 */
%   | else if ( author(E, D), title(E, B) )
%   | | then return 0.5248156017661788;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return -0.04185106490048778;  // std dev = 0.300, 10.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=1 */
%   else if ( haswordtitle(B, F), haswordauthor(G, F) )
%   | then if ( author(H, G), title(H, A) )
%   | | then return 0.5248156017661788;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return -0.016851064900487787;  // std dev = 0.331, 8.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */
%   | else return 0.27099297179675785;  // std dev = 0.492, 218.000 (wgt'ed) examples reached here.  /* #neg=128 #pos=90 */
WILL Produced-Tree #2
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordauthor(D, C) )
%   then if ( haswordtitle(B, C) )
%   | then return 0.6928183180467428;  // std dev = 0.180, 60.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=58 */
%   | else if ( author(E, D), title(E, B) )
%   | | then return 0.448295606241962;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return -0.03683251744007497;  // std dev = 0.300, 10.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=1 */
%   else return 0.22878639373303108;  // std dev = 0.490, 229.000 (wgt'ed) examples reached here.  /* #neg=136 #pos=93 */
WILL Produced-Tree #3
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordauthor(D, C) )
%   then if ( haswordtitle(B, C) )
%   | then return 0.5367928709789446;  // std dev = 0.180, 60.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=58 */
%   | else if ( author(E, D), title(E, B) )
%   | | then return 0.36236334632262296;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return -0.03254015317273094;  // std dev = 0.300, 10.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=1 */
%   else return 0.19293937836608271;  // std dev = 0.490, 229.000 (wgt'ed) examples reached here.  /* #neg=136 #pos=93 */
WILL Produced-Tree #4
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordauthor(D, C) )
%   then if ( haswordtitle(B, C) )
%   | then return 0.4034008832853693;  // std dev = 0.180, 60.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=58 */
%   | else if ( author(E, D), title(E, B) )
%   | | then return 0.2807538536965855;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return -0.028843434243526523;  // std dev = 0.300, 10.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=1 */
%   else return 0.1588153960344467;  // std dev = 0.490, 229.000 (wgt'ed) examples reached here.  /* #neg=136 #pos=93 */
WILL Produced-Tree #5
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordauthor(D, C) )
%   then if ( haswordtitle(B, C) )
%   | then return 0.30789442979240567;  // std dev = 0.180, 60.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=58 */
%   | else if ( author(E, D), title(E, B) )
%   | | then return 0.21248070121827137;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return -0.025640477399664095;  // std dev = 0.300, 10.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=1 */
%   else if ( haswordtitle(B, F), haswordauthor(G, F) )
%   | then if ( author(H, G), title(H, A) )
%   | | then return 0.3336657058504528;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return -0.10007895468893889;  // std dev = 0.331, 8.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */
%   | else return 0.13365058215296258;  // std dev = 0.492, 218.000 (wgt'ed) examples reached here.  /* #neg=128 #pos=90 */
WILL Produced-Tree #6
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordauthor(D, C) )
%   then if ( haswordtitle(B, C) )
%   | then return 0.24240066496454685;  // std dev = 0.180, 60.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=58 */
%   | else if ( author(E, D), title(E, B) )
%   | | then return 0.1594898822817116;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return -0.022850675562834787;  // std dev = 0.300, 10.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=1 */
%   else if ( haswordtitle(B, F), haswordauthor(G, F) )
%   | then if ( author(H, G), title(H, A) )
%   | | then return 0.25594371116788345;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return -0.08310453787427381;  // std dev = 0.331, 8.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */
%   | else return 0.10597869722205897;  // std dev = 0.492, 218.000 (wgt'ed) examples reached here.  /* #neg=128 #pos=90 */
WILL Produced-Tree #7
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordauthor(D, C) )
%   then if ( haswordtitle(B, C) )
%   | then return 0.19670004057326665;  // std dev = 0.180, 60.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=58 */
%   | else return 0.011936247202283663;  // std dev = 0.352, 13.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=3 */
%   else return 0.07909246582907505;  // std dev = 0.488, 229.000 (wgt'ed) examples reached here.  /* #neg=136 #pos=93 */
WILL Produced-Tree #8
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordauthor(D, C) )
%   then if ( haswordtitle(B, C) )
%   | then return 0.16371858628713193;  // std dev = 0.180, 60.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=58 */
%   | else if ( author(E, D), title(E, B) )
%   | | then return 0.1167991957529823;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return -0.021679387448680115;  // std dev = 0.300, 10.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=1 */
%   else return 0.06152818991592574;  // std dev = 0.488, 229.000 (wgt'ed) examples reached here.  /* #neg=136 #pos=93 */
WILL Produced-Tree #9
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordauthor(D, C) )
%   then if ( haswordtitle(B, C) )
%   | then return 0.13909109340224876;  // std dev = 0.180, 60.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=58 */
%   | else if ( author(E, D), title(E, B) )
%   | | then return 0.08808969746032551;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return -0.019381372894041023;  // std dev = 0.300, 10.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=1 */
%   else return 0.04756324067938277;  // std dev = 0.488, 229.000 (wgt'ed) examples reached here.  /* #neg=136 #pos=93 */
WILL Produced-Tree #10
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordauthor(D, C) )
%   then if ( haswordtitle(B, C) )
%   | then return 0.12013771168374343;  // std dev = 0.180, 60.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=58 */
%   | else if ( author(E, D), title(E, B) )
%   | | then return 0.06677250561185459;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return -0.017358803243836818;  // std dev = 0.300, 10.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=1 */
%   else return 0.036600594503731924;  // std dev = 0.488, 229.000 (wgt'ed) examples reached here.  /* #neg=136 #pos=93 */


Results
   AUC ROC   = 0.73954
   AUC PR    = 0.695161
   CLL	      = -0.614396
   Precision = 0.759542 at threshold = 0.5
   Recall    = 0.365809
   F1        = 0.493797


Total learning time: 16.487783908843994 seconds
Total inference time: 3.417 seconds
AUC ROC: 0.73954


Results scoring model
   AUC ROC   = 0.716172
   AUC PR    = 0.772847
   CLL	      = -0.567412
   Precision = 0.939394 at threshold = 0.5
   Recall    = 0.402597
   F1        = 0.563636


Total scoring time: 1.349 seconds
Refined model CLL: -0.567412


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.739676
   AUC PR    = 0.695258
   CLL	      = -0.609913
   Precision = 0.759542 at threshold = 0.5
   Recall    = 0.365809
   F1        = 0.493797


Total learning time: 36.45076180648803 seconds
Total inference time: 3.435 seconds
AUC ROC: 0.739676
Total revision time: 36.45076180648803
Best scored revision CLL: -0.566314


Dataset: 6_imdb_cora, Fold: 5, Type: Transfer (trRDN-B), Time: 04:25:24
{'AUC ROC': 0.739676, 'AUC PR': 0.695258, 'CLL': -0.609913, 'Precision': [0.759542, 0.5], 'Recall': 0.365809, 'F1': 0.493797, 'Learning time': 36.45076180648803, 'Inference time': 3.435, 'parameter': {'AUC ROC': 0.739676, 'AUC PR': 0.695258, 'CLL': -0.609913, 'Precision': [0.759542, 0.5], 'Recall': 0.365809, 'F1': 0.493797, 'Learning time': 17.225977897644043, 'Inference time': 3.435}}


WILL Produced-Tree #1
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordauthor(D, C) )
%   then if ( haswordtitle(B, C) )
%   | then return 0.8248156017661792;  // std dev = 0.180, 60.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=58 */
%   | else if ( author(E, D), title(E, B) )
%   | | then return 0.5248156017661788;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return -0.04185106490048778;  // std dev = 0.300, 10.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=1 */
%   else return 0.2642624722174136;  // std dev = 0.491, 229.000 (wgt'ed) examples reached here.  /* #neg=136 #pos=93 */
WILL Produced-Tree #2
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordauthor(D, C) )
%   then if ( haswordtitle(B, C) )
%   | then return 0.6928183180467428;  // std dev = 0.180, 60.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=58 */
%   | else if ( author(E, D), title(E, B) )
%   | | then return 0.448295606241962;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return -0.03683251744007497;  // std dev = 0.300, 10.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=1 */
%   else return 0.22895776974583762;  // std dev = 0.491, 229.000 (wgt'ed) examples reached here.  /* #neg=136 #pos=93 */
WILL Produced-Tree #3
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordauthor(D, C) )
%   then if ( haswordtitle(B, C) )
%   | then return 0.5367928709789446;  // std dev = 0.180, 60.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=58 */
%   | else if ( author(E, D), title(E, B) )
%   | | then return 0.36236334632262296;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return -0.03254015317273094;  // std dev = 0.300, 10.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=1 */
%   else return 0.19308733108125853;  // std dev = 0.491, 229.000 (wgt'ed) examples reached here.  /* #neg=136 #pos=93 */
WILL Produced-Tree #4
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordauthor(D, C) )
%   then if ( haswordtitle(B, C) )
%   | then return 0.4034008832853693;  // std dev = 0.180, 60.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=58 */
%   | else if ( author(E, D), title(E, B) )
%   | | then return 0.2807538536965855;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return -0.028843434243526523;  // std dev = 0.300, 10.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=1 */
%   else return 0.1589303900322742;  // std dev = 0.491, 229.000 (wgt'ed) examples reached here.  /* #neg=136 #pos=93 */
WILL Produced-Tree #5
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordauthor(D, C) )
%   then if ( haswordtitle(B, C) )
%   | then return 0.30789442979240567;  // std dev = 0.180, 60.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=58 */
%   | else if ( author(E, D), title(E, B) )
%   | | then return 0.21248070121827137;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return -0.025640477399664095;  // std dev = 0.300, 10.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=1 */
%   else if ( haswordtitle(B, F), haswordauthor(G, F) )
%   | then if ( author(H, G), title(H, A) )
%   | | then return 0.3887385196357233;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return -0.15292814703094335;  // std dev = 0.331, 8.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */
%   | else return 0.1349158896663055;  // std dev = 0.492, 218.000 (wgt'ed) examples reached here.  /* #neg=128 #pos=90 */
WILL Produced-Tree #6
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordauthor(D, C) )
%   then if ( haswordtitle(B, C) )
%   | then return 0.24240066496454685;  // std dev = 0.180, 60.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=58 */
%   | else if ( author(E, D), title(E, B) )
%   | | then return 0.1594898822817116;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return -0.022850675562834787;  // std dev = 0.300, 10.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=1 */
%   else return 0.10158743934314383;  // std dev = 0.490, 229.000 (wgt'ed) examples reached here.  /* #neg=136 #pos=93 */
WILL Produced-Tree #7
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordauthor(D, C) )
%   then if ( haswordtitle(B, C) )
%   | then return 0.19670004057326665;  // std dev = 0.180, 60.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=58 */
%   | else if ( author(E, D), title(E, B) )
%   | | then return 0.11975529938157474;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return -0.02040946845150366;  // std dev = 0.300, 10.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=1 */
%   else return 0.07967233982570626;  // std dev = 0.490, 229.000 (wgt'ed) examples reached here.  /* #neg=136 #pos=93 */
WILL Produced-Tree #8
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordauthor(D, C) )
%   then if ( haswordtitle(B, C) )
%   | then return 0.16371858628713193;  // std dev = 0.180, 60.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=58 */
%   | else if ( author(E, D), title(E, B) )
%   | | then return 0.09028081829440963;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return -0.018264572141688296;  // std dev = 0.300, 10.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=1 */
%   else if ( haswordtitle(B, F), haswordauthor(G, F) )
%   | then if ( author(H, G), title(H, A) )
%   | | then return 0.26168820957146915;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return -0.158649468810243;  // std dev = 0.331, 8.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */
%   | else return 0.06727787400926175;  // std dev = 0.492, 218.000 (wgt'ed) examples reached here.  /* #neg=128 #pos=90 */
WILL Produced-Tree #9
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordauthor(D, C) )
%   then if ( haswordtitle(B, C) )
%   | then return 0.13909109340224876;  // std dev = 0.180, 60.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=58 */
%   | else if ( author(E, D), title(E, B) )
%   | | then return 0.06840311429118533;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return -0.01637321748135532;  // std dev = 0.300, 10.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=1 */
%   else if ( haswordtitle(B, F), haswordauthor(G, F) )
%   | then if ( author(H, G), title(H, A) )
%   | | then return 0.19739676802259645;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return -0.12754590202516522;  // std dev = 0.331, 8.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */
%   | else return 0.05190908517158363;  // std dev = 0.492, 218.000 (wgt'ed) examples reached here.  /* #neg=128 #pos=90 */
WILL Produced-Tree #10
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordauthor(D, C) )
%   then if ( haswordtitle(B, C) )
%   | then return 0.12013771168374343;  // std dev = 0.180, 60.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=58 */
%   | else if ( author(E, D), title(E, B) )
%   | | then return 0.052078905701252655;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return -0.014700098059752786;  // std dev = 0.300, 10.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=1 */
%   else return 0.03623574518394829;  // std dev = 0.488, 229.000 (wgt'ed) examples reached here.  /* #neg=136 #pos=93 */


Results
   AUC ROC   = 0.73954
   AUC PR    = 0.695161
   CLL	      = -0.614676
   Precision = 0.759542 at threshold = 0.5
   Recall    = 0.365809
   F1        = 0.493797


Total learning time: 17.396878957748413 seconds
Total inference time: 3.563 seconds
AUC ROC: 0.73954


Dataset: 6_imdb_cora, Fold: 5, Type: Scratch (RDN-B), Time: 04:25:46
{'AUC ROC': 0.73954, 'AUC PR': 0.695161, 'CLL': -0.614676, 'Precision': [0.759542, 0.5], 'Recall': 0.365809, 'F1': 0.493797, 'Learning time': 17.396878957748413, 'Inference time': 3.563}


