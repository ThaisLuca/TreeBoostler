Starting experiment #1 for 7_yeast_twitter

Loading pre-trained trees.
Starting fold 1

Target train facts examples: 1580
Target train pos examples: 126
Target train neg examples: 16128

Target test facts examples: 1562
Target test pos  examples: 156
Target test neg examples: 24648

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(C, D) )
%   | then if ( follows(A, C), tweets(A, D) )
%   | | then return 0.834339411289988;  // std dev = 0.152, 42.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=41 */
%   | | else return 0.8581489350995123;  // std dev = 0.000, 36.000 (wgt'ed) examples reached here.  /* #pos=36 */
%   | else return 0.6914822684328455;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   else if ( follows(A, E), recursion_accounttype(E, B) )
%   | then if ( tweets(A, F) )
%   | | then return 0.8581489350995123;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else return 0.6081489350995122;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | else if ( follows(G, A) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.8581489350995123;  // std dev = 0.000, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | | else return -0.14185106490048838;  // std dev = 0.000, 198.000 (wgt'ed) examples reached here.  /* #neg=198 */
%   | | else if ( follows(A, I), follows(I, J) )
%   | | | then return 0.11621345122854462;  // std dev = 2.436, 31.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=8 */
%   | | | else return 0.24945328292559932;  // std dev = 2.341, 23.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=9 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(C, D) )
%   | then return 0.6967588943807415;  // std dev = 0.157, 79.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=77 */
%   | else return 0.5851860008555361;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   else if ( follows(E, A) )
%   | then if ( follows(F, E), recursion_accounttype(F, B) )
%   | | then if ( tweets(A, G) )
%   | | | then return 0.7194734122109542;  // std dev = 7.30e-08, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | | else return 0.5766060205571715;  // std dev = 0.888, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | else return -0.12159080555923678;  // std dev = 0.064, 179.000 (wgt'ed) examples reached here.  /* #neg=178 #pos=1 */
%   | else if ( follows(A, H), follows(H, I) )
%   | | then if ( recursion_accounttype(I, B) )
%   | | | then return 0.8096056810018605;  // std dev = 0.183, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | | else return -0.1565947182015498;  // std dev = 0.000, 24.000 (wgt'ed) examples reached here.  /* #neg=24 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.2694371251846083;  // std dev = 1.491, 9.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=4 */
%   | | | else return 0.22113129950660096;  // std dev = 1.880, 15.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=6 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(C, D) )
%   | then if ( tweets(A, D), follows(A, C) )
%   | | then return 0.5203116247743584;  // std dev = 0.211, 43.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=41 */
%   | | else return 0.5609681504737437;  // std dev = 0.000, 36.000 (wgt'ed) examples reached here.  /* #pos=36 */
%   | else return 0.627926505773422;  // std dev = 1.49e-08, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( follows(E, A) )
%   | then if ( follows(E, F), follows(F, A) )
%   | | then return -0.09925015927802953;  // std dev = 0.094, 149.000 (wgt'ed) examples reached here.  /* #neg=146 #pos=3 */
%   | | else if ( follows(E, G), recursion_accounttype(G, B) )
%   | | | then return 0.5306212149780881;  // std dev = 1.022, 21.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=20 */
%   | | | else return -0.1127011852237347;  // std dev = 0.000, 62.000 (wgt'ed) examples reached here.  /* #neg=62 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0.37146318490909075;  // std dev = 0.952, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else if ( tweets(A, I) )
%   | | | then return 0.07048067719312064;  // std dev = 2.366, 33.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=9 */
%   | | | else return 0.17329689459652298;  // std dev = 2.112, 21.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=8 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(D, C) )
%   | then return 0.4322753554916719;  // std dev = 0.087, 68.000 (wgt'ed) examples reached here.  /* #pos=68 */
%   | else if ( follows(E, C), follows(A, E) )
%   | | then return 0.0936129196246505;  // std dev = 0.804, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return 0.4373621889368468;  // std dev = 0.076, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   else if ( follows(F, A) )
%   | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | then return 0.4659760551398667;  // std dev = 0.065, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | | else return -0.10280005269406159;  // std dev = 0.008, 208.000 (wgt'ed) examples reached here.  /* #neg=208 */
%   | else if ( tweets(A, H) )
%   | | then if ( tweets(I, H), recursion_accounttype(I, B) )
%   | | | then return 0.6547421127377966;  // std dev = 0.445, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return -0.17453231223047383;  // std dev = 0.215, 29.000 (wgt'ed) examples reached here.  /* #neg=29 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.06678589402163984;  // std dev = 1.222, 11.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=3 */
%   | | | else return 0.15295068099705814;  // std dev = 1.864, 15.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=6 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(A, D), tweets(C, D) )
%   | then if ( follows(E, C), follows(A, E) )
%   | | then if ( tweets(E, D), follows(E, A) )
%   | | | then return 0.28168546352197926;  // std dev = 1.375, 38.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=36 */
%   | | | else return -0.08182491763969245;  // std dev = 1.276, 7.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=4 */
%   | | else return 0.3246422332529851;  // std dev = 0.024, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else return 0.33552411782065933;  // std dev = 0.133, 27.000 (wgt'ed) examples reached here.  /* #pos=27 */
%   else if ( follows(F, A) )
%   | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | then return 0.24705004716469167;  // std dev = 0.307, 26.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=23 */
%   | | else return -0.09363239057929747;  // std dev = 0.008, 205.000 (wgt'ed) examples reached here.  /* #neg=205 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0.3701601301229388;  // std dev = 0.277, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( follows(A, I), follows(I, J) )
%   | | | then return 0.07291070800654939;  // std dev = 1.722, 27.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=8 */
%   | | | else return 0.04384068490774083;  // std dev = 2.323, 30.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=9 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.27245500023430497;  // std dev = 0.214, 82.000 (wgt'ed) examples reached here.  /* #pos=82 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), follows(E, A) )
%   | | then if ( tweets(A, F), follows(A, E) )
%   | | | then return -0.07248312565286816;  // std dev = 0.836, 106.000 (wgt'ed) examples reached here.  /* #neg=103 #pos=3 */
%   | | | else return -0.08634323813221823;  // std dev = 7.45e-09, 27.000 (wgt'ed) examples reached here.  /* #neg=27 */
%   | | else if ( follows(G, D), recursion_accounttype(G, B) )
%   | | | then return 0.2315533936930886;  // std dev = 0.914, 20.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=19 */
%   | | | else return -0.0841822968315291;  // std dev = 0.709, 73.000 (wgt'ed) examples reached here.  /* #neg=72 #pos=1 */
%   | else if ( tweets(A, H) )
%   | | then if ( tweets(I, H), recursion_accounttype(I, B) )
%   | | | then return 0.40584281113048964;  // std dev = 1.071, 13.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   | | | else return -0.15800812008441234;  // std dev = 0.181, 27.000 (wgt'ed) examples reached here.  /* #neg=27 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.12728758163084183;  // std dev = 1.116, 8.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=3 */
%   | | | else return 0.044989302708343594;  // std dev = 1.941, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then if ( follows(A, D), follows(D, E) )
%   | | then if ( follows(A, E), follows(E, A) )
%   | | | then return 0.22058967923484588;  // std dev = 0.094, 41.000 (wgt'ed) examples reached here.  /* #pos=41 */
%   | | | else return -0.0853378326490462;  // std dev = 0.846, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return 0.23641414476953806;  // std dev = 0.056, 29.000 (wgt'ed) examples reached here.  /* #pos=29 */
%   | else return 0.10273471298701735;  // std dev = 1.000, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   else if ( follows(F, A), follows(A, G) )
%   | then return -0.04451019271168855;  // std dev = 0.104, 221.000 (wgt'ed) examples reached here.  /* #neg=197 #pos=24 */
%   | else if ( follows(A, H), follows(H, I) )
%   | | then if ( recursion_accounttype(I, B) )
%   | | | then return 0.48898319141301605;  // std dev = 0.258, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return -0.1333293551848708;  // std dev = 0.145, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.012454044732626566;  // std dev = 1.376, 40.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=12 */
%   | | | else return -0.022955104133560278;  // std dev = 1.919, 19.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=5 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( tweets(D, E), follows(C, D) )
%   | | then return 0.18438166394709912;  // std dev = 0.103, 78.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=77 */
%   | | else return -0.20224515205273502;  // std dev = 1.019, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | else return -0.1330375825243947;  // std dev = 0.817, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   else if ( follows(F, A) )
%   | then if ( follows(F, G), follows(G, A) )
%   | | then return -0.07082194527678434;  // std dev = 0.082, 150.000 (wgt'ed) examples reached here.  /* #neg=147 #pos=3 */
%   | | else return -0.011468089263618989;  // std dev = 0.154, 87.000 (wgt'ed) examples reached here.  /* #neg=67 #pos=20 */
%   | else if ( follows(A, H), follows(H, I) )
%   | | then if ( recursion_accounttype(I, B) )
%   | | | then return 0.3084360763842931;  // std dev = 0.431, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | | else return -0.12438044151273879;  // std dev = 0.126, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | | else if ( follows(A, J), recursion_accounttype(J, B) )
%   | | | then return -0.2700115848975632;  // std dev = 0.939, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | else return 0.03290279709352057;  // std dev = 2.209, 28.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=9 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.1702320386186695;  // std dev = 0.040, 72.000 (wgt'ed) examples reached here.  /* #pos=72 */
%   | else if ( tweets(A, E), tweets(C, E) )
%   | | then return -0.11323966550589744;  // std dev = 0.789, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return 0.1221188901625841;  // std dev = 0.732, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   else if ( follows(F, A), follows(A, G) )
%   | then if ( follows(H, F), recursion_accounttype(H, B) )
%   | | then if ( follows(H, A), tweets(A, I) )
%   | | | then return -0.04315180968242319;  // std dev = 0.812, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | else return 0.25690012261342565;  // std dev = 0.375, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | else return -0.07328083465130526;  // std dev = 0.016, 174.000 (wgt'ed) examples reached here.  /* #neg=174 */
%   | else if ( follows(J, A), recursion_accounttype(J, B) )
%   | | then return 0.17623248639791722;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( follows(A, K) )
%   | | | then return 0.042880412043015126;  // std dev = 2.348, 51.000 (wgt'ed) examples reached here.  /* #neg=34 #pos=17 */
%   | | | else return -0.07558972644775208;  // std dev = 5.27e-09, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(A, C), follows(D, A) )
%   then if ( recursion_accounttype(C, B) )
%   | then if ( follows(A, D), follows(C, E) )
%   | | then if ( tweets(C, F), recursion_accounttype(E, B) )
%   | | | then return 0.14602500459343806;  // std dev = 0.182, 65.000 (wgt'ed) examples reached here.  /* #pos=65 */
%   | | | else return 0.01468807112133963;  // std dev = 0.825, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | else return 0.2882159458525464;  // std dev = 0.113, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( recursion_accounttype(D, B) )
%   | | then return 0.17249859749445381;  // std dev = 0.069, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else return -0.04794051348117603;  // std dev = 0.093, 193.000 (wgt'ed) examples reached here.  /* #neg=178 #pos=15 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.0409769910388123;  // std dev = 0.314, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | else if ( follows(A, H) )
%   | | then if ( follows(I, H), recursion_accounttype(I, B) )
%   | | | then return 0.3637779292173969;  // std dev = 1.457, 22.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=21 */
%   | | | else return -0.18728833447493531;  // std dev = 0.589, 49.000 (wgt'ed) examples reached here.  /* #neg=49 */
%   | | else return -0.07047436639645707;  // std dev = 0.000, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */


Results
   AUC ROC   = 0.994216
   AUC PR    = 0.439383
   CLL	      = -0.113156
   Precision = 0.340528 at threshold = 0.5
   Recall    = 0.910256
   F1        = 0.495637


Total learning time: 35.87333416938782 seconds
Total inference time: 55.74 seconds
AUC ROC: 0.994216


Results scoring model
   AUC ROC   = 0.994256
   AUC PR    = 0.400678
   CLL	      = -0.109664
   Precision = 0.338936 at threshold = 0.5
   Recall    = 0.960317
   F1        = 0.501035


Total scoring time: 46.877 seconds
Parameter learned model CLL: -0.109664


Structure after Parameter Learning
[['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'tweets(C, D)', 'true,true': 'follows(A, C), tweets(A, D)', 'false': 'follows(A, E), recursion_accounttype(E, B)', 'false,true': 'tweets(A, F)', 'false,false': 'follows(G, A)', 'false,false,true': 'follows(G, H), recursion_accounttype(H, B)', 'false,false,false': 'follows(A, I), follows(I, J)'}, {'true,true,true': [0.152, 1, 41], 'true,true,false': [0.0, 0, 36], 'true,false': [0.913, 1, 5], 'false,true,true': [0.0, 0, 9], 'false,true,false': [0.866, 1, 3], 'false,false,true,true': [0.0, 0, 15], 'false,false,true,false': [0.0, 198, 0], 'false,false,false,true': [2.436, 23, 8], 'false,false,false,false': [2.341, 14, 9]}], ['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'tweets(C, D)', 'false': 'follows(E, A)', 'false,true': 'follows(F, E), recursion_accounttype(F, B)', 'false,true,true': 'tweets(A, G)', 'false,false': 'follows(A, H), follows(H, I)', 'false,false,true': 'recursion_accounttype(I, B)', 'false,false,false': 'tweets(A, J)'}, {'true,true': [0.157, 2, 77], 'true,false': [0.913, 1, 5], 'false,true,true,true': [7.3e-08, 0, 17], 'false,true,true,false': [0.888, 1, 5], 'false,true,false': [0.064, 178, 1], 'false,false,true,true': [0.183, 0, 11], 'false,false,true,false': [0.0, 24, 0], 'false,false,false,true': [1.491, 5, 4], 'false,false,false,false': [1.88, 9, 6]}], ['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'tweets(C, D)', 'true,true': 'tweets(A, D), follows(A, C)', 'false': 'follows(E, A)', 'false,true': 'follows(E, F), follows(F, A)', 'false,true,false': 'follows(E, G), recursion_accounttype(G, B)', 'false,false': 'follows(A, H), recursion_accounttype(H, B)', 'false,false,false': 'tweets(A, I)'}, {'true,true,true': [0.211, 2, 41], 'true,true,false': [0.0, 0, 36], 'true,false': [1.49e-08, 0, 5], 'false,true,true': [0.094, 146, 3], 'false,true,false,true': [1.022, 1, 20], 'false,true,false,false': [0.0, 62, 0], 'false,false,true': [0.952, 1, 4], 'false,false,false,true': [2.366, 24, 9], 'false,false,false,false': [2.112, 13, 8]}], ['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(D, C)', 'true,false': 'follows(E, C), follows(A, E)', 'false': 'follows(F, A)', 'false,true': 'follows(F, G), recursion_accounttype(G, B)', 'false,false': 'tweets(A, H)', 'false,false,true': 'tweets(I, H), recursion_accounttype(I, B)', 'false,false,false': 'follows(A, J), follows(J, K)'}, {'true,true': [0.087, 0, 68], 'true,false,true': [0.804, 1, 2], 'true,false,false': [0.076, 0, 12], 'false,true,true': [0.065, 0, 23], 'false,true,false': [0.008, 208, 0], 'false,false,true,true': [0.445, 0, 12], 'false,false,true,false': [0.215, 29, 0], 'false,false,false,true': [1.222, 8, 3], 'false,false,false,false': [1.864, 9, 6]}], ['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'tweets(A, D), tweets(C, D)', 'true,true': 'follows(E, C), follows(A, E)', 'true,true,true': 'tweets(E, D), follows(E, A)', 'false': 'follows(F, A)', 'false,true': 'follows(F, G), recursion_accounttype(G, B)', 'false,false': 'follows(A, H), recursion_accounttype(H, B)', 'false,false,false': 'follows(A, I), follows(I, J)'}, {'true,true,true,true': [1.375, 2, 36], 'true,true,true,false': [1.276, 3, 4], 'true,true,false': [0.024, 0, 15], 'true,false': [0.133, 0, 27], 'false,true,true': [0.307, 3, 23], 'false,true,false': [0.008, 205, 0], 'false,false,true': [0.277, 0, 4], 'false,false,false,true': [1.722, 19, 8], 'false,false,false,false': [2.323, 21, 9]}], ['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), follows(E, A)', 'false,true,true': 'tweets(A, F), follows(A, E)', 'false,true,false': 'follows(G, D), recursion_accounttype(G, B)', 'false,false': 'tweets(A, H)', 'false,false,true': 'tweets(I, H), recursion_accounttype(I, B)', 'false,false,false': 'follows(A, J), follows(J, K)'}, {'true': [0.214, 0, 82], 'false,true,true,true': [0.836, 103, 3], 'false,true,true,false': [7.45e-09, 27, 0], 'false,true,false,true': [0.914, 1, 19], 'false,true,false,false': [0.709, 72, 1], 'false,false,true,true': [1.071, 1, 12], 'false,false,true,false': [0.181, 27, 0], 'false,false,false,true': [1.116, 5, 3], 'false,false,false,false': [1.941, 12, 6]}], ['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'true,true': 'follows(A, D), follows(D, E)', 'true,true,true': 'follows(A, E), follows(E, A)', 'false': 'follows(F, A), follows(A, G)', 'false,false': 'follows(A, H), follows(H, I)', 'false,false,true': 'recursion_accounttype(I, B)', 'false,false,false': 'tweets(A, J)'}, {'true,true,true,true': [0.094, 0, 41], 'true,true,true,false': [0.846, 1, 2], 'true,true,false': [0.056, 0, 29], 'true,false': [1.0, 1, 5], 'false,true': [0.104, 197, 24], 'false,false,true,true': [0.258, 0, 8], 'false,false,true,false': [0.145, 19, 0], 'false,false,false,true': [1.376, 28, 12], 'false,false,false,false': [1.919, 14, 5]}], ['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'tweets(D, E), follows(C, D)', 'false': 'follows(F, A)', 'false,true': 'follows(F, G), follows(G, A)', 'false,false': 'follows(A, H), follows(H, I)', 'false,false,true': 'recursion_accounttype(I, B)', 'false,false,false': 'follows(A, J), recursion_accounttype(J, B)'}, {'true,true,true': [0.103, 1, 77], 'true,true,false': [1.019, 2, 3], 'true,false': [0.817, 1, 2], 'false,true,true': [0.082, 147, 3], 'false,true,false': [0.154, 67, 20], 'false,false,true,true': [0.431, 0, 11], 'false,false,true,false': [0.126, 14, 0], 'false,false,false,true': [0.939, 2, 1], 'false,false,false,false': [2.209, 19, 9]}], ['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'true,false': 'tweets(A, E), tweets(C, E)', 'false': 'follows(F, A), follows(A, G)', 'false,true': 'follows(H, F), recursion_accounttype(H, B)', 'false,true,true': 'follows(H, A), tweets(A, I)', 'false,false': 'follows(J, A), recursion_accounttype(J, B)', 'false,false,false': 'follows(A, K)'}, {'true,true': [0.04, 0, 72], 'true,false,true': [0.789, 1, 2], 'true,false,false': [0.732, 1, 3], 'false,true,true,true': [0.812, 1, 3], 'false,true,true,false': [0.375, 0, 21], 'false,true,false': [0.016, 174, 0], 'false,false,true': [0.0, 0, 8], 'false,false,false,true': [2.348, 34, 17], 'false,false,false,false': [5.27e-09, 17, 0]}], ['accounttype(A, B)', {'': 'follows(A, C), follows(D, A)', 'true': 'recursion_accounttype(C, B)', 'true,true': 'follows(A, D), follows(C, E)', 'true,true,true': 'tweets(C, F), recursion_accounttype(E, B)', 'true,false': 'recursion_accounttype(D, B)', 'false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false': 'follows(A, H)', 'false,false,true': 'follows(I, H), recursion_accounttype(I, B)'}, {'true,true,true,true': [0.182, 0, 65], 'true,true,true,false': [0.825, 1, 5], 'true,true,false': [0.113, 0, 3], 'true,false,true': [0.069, 0, 9], 'true,false,false': [0.093, 178, 15], 'false,true': [0.314, 1, 8], 'false,false,true,true': [1.457, 1, 21], 'false,false,true,false': [0.589, 49, 0], 'false,false,false': [0.0, 17, 0]}]]
[{'': [0.023242630385487066, 0.13244897959183755], 'false': [0.07100591715976314, 0.10548611987824309], 'false,false': [0.06546320174568482, 0.21570644718792817], 'false,false,false': [0.19146722164412083, 0.23818525519848777], 'false,true': [-2.9605947323337506e-16, 0.18750000000000006], 'false,false,true': [-2.3684757858670006e-16, -2.377447285055891e-16], 'true': [0.012656147271530908, 0.1388888888888887], 'true,true': [0.023242630385488926, -2.9605947323337506e-16]}, {'': [0.033457099748746506, 0.11437372739869751], 'false': [0.07318277871625349, 0.21974641477497703], 'false,false': [0.20214553891930448, 0.24037392448513648], 'false,false,false': [0.24691358024691354, 0.2355750862301574], 'false,false,true': [0.003046434704023569, -9.25185853854297e-18], 'false,true': [0.03824573783902213, 0.0041077006164272276], 'false,true,true': [3.134747363647501e-16, 0.13152220270906645], 'true': [0.024570903699385676, 0.13888888888888884]}, {'': [0.023531992727628587, 0.07883985502970049], 'false': [0.043260256166044335, 0.19336837269957954], 'false,false': [0.18129356650786752, 0.18871351396269173], 'false,false,false': [0.16958490142652746, 0.21231260000199756], 'false,true': [0.0088052648176123, 0.09079400102944682], 'false,true,false': [0.04970127474973681, -8.953411488912552e-18], 'true': [0.024548939939359762, 4.4408920985006264e-17], 'true,true': [0.04434829637642026, -9.868649107779169e-17]}, {'': [0.011957110307653323, 0.06325357451969951], 'false': [0.029424588377294093, 0.16615535031473438], 'false,false': [0.14831776588505474, 0.1928554202305755], 'false,false,false': [0.13571998416081577, 0.23161366018200016], 'false,false,true': [0.016477560102223565, 0.0015954347006193834], 'false,true': [0.004226717756298942, 3.1129474790200146e-07], 'true': [0.0001109782238221962, 0.06233906188124534], 'true,false': [0.21525750211784053, 0.00047673979156270807]}, {'': [0.05249238284565915, 0.050703536818788746], 'true': [0.07355093302152085, 0.000652990770620063], 'true,true': [0.0955799328322219, 3.832385175885911e-05], 'true,true,true': [0.04975805862625262, 0.23274253230439498], 'false': [0.022217581946598335, 0.1445000785606245], 'false,false': [0.01913612364947037, 0.14689183440104756], 'false,false,false': [0.10983366085573272, 0.17984389605568943], 'false,true': [0.09439138411170411, 2.919992359874093e-07]}, {'': [0.0005600349973324002, 0.045548231674075165], 'false': [0.01680076176159661, 0.13714630628186386], 'false,false': [0.09922644662213412, 0.19425354448389168], 'false,false,false': [0.15571725351358362, 0.2092967828494149], 'false,false,true': [0.08818840905373063, 0.0012144986978458738], 'false,true': [0.005287666497841303, 0.031216153012999962], 'false,true,false': [0.04174616981855654, 0.006892716628542945], 'false,true,true': [0.006595526649281461, 2.05596856412066e-18]}, {'': [0.027463533115610686, 0.03428537956005962], 'false': [0.010799319348292697, 0.09193743159418813], 'false,false': [0.08399613082103749, 0.09478643718191779], 'false,false,false': [0.04730096306432999, 0.19390581717451533], 'false,false,true': [0.008329118807701597, 0.0011083977520358788], 'true': [0.015067349749138162, 0.16678150576285156], 'true,true': [0.02242731532009614, 0.003089426195045015], 'true,true,true': [0.00021751861188832648, 0.23875080949227975]}, {'': [0.04057743808058665, 0.03746264116928387], 'true': [0.030983902615260215, 0.2225048715857055], 'false': [0.013766273265125696, 0.13250593695153257], 'false,false': [0.05421497471802608, 0.1939016037302546], 'false,false,false': [0.2938003545763536, 0.17431844457666185], 'false,false,true': [0.01687488676677988, 0.0011283544587628591], 'true,true': [0.010664076080116294, 0.20749773875250238], 'false,true': [0.006749866494112481, 0.023633855290981845]}, {'': [0.019093211599395494, 0.032656196230447354], 'false': [0.014285511791650036, 0.07738768093474038], 'false,false': [-3.469446951953614e-18, 0.08369641993848527], 'false,false,false': [0.10808643315614165, 1.6326809185664067e-18], 'true': [0.0015868354351373237, 0.17893010479667987], 'true,false': [0.20745470156668655, 0.13379652162216613], 'false,true': [0.04408366751678977, 1.4787171753566172e-06], 'false,true,true': [0.16477718523540333, 0.006689440114662056]}, {'': [0.017118933254207602, 0.08295061074111706], 'false': [0.09876543209876544, 0.08090500717890182], 'false,false': [0.09971458325798054, -3.2653618371328133e-18], 'false,false,true': [0.09643706359507281, 0.007089945324438783], 'true': [0.01201576990797327, 0.010372776802082113], 'true,true': [0.011390167626849865, 0.004276528884990166], 'true,true,true': [0.0005092310535184723, 0.11347528534826107], 'true,false': [0.000526648969073741, 0.00866687011091885]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
0;true;tweets(C, D).;true;true
0;true,true;follows(A, C), tweets(A, D).;true;true
0;false;follows(A, E), recursion_accounttype(E, B).;true;true
0;false,true;tweets(A, F).;true;true
0;false,false;follows(G, A).;true;true
0;false,false,true;follows(G, H), recursion_accounttype(H, B).;true;true
1;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
1;false;follows(E, A).;true;true
1;false,true;follows(F, E), recursion_accounttype(F, B).;true;true
1;false,true,true;tweets(A, G).;true;true
1;false,false;follows(A, H), follows(H, I).;true;true
1;false,false,true;recursion_accounttype(I, B).;true;true
2;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
2;true;tweets(C, D).;true;true
2;true,true;tweets(A, D), follows(A, C).;true;true
2;false;follows(E, A).;true;true
2;false,true;follows(E, F), follows(F, A).;true;true
2;false,true,false;follows(E, G), recursion_accounttype(G, B).;true;true
3;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
3;true;follows(D, A), follows(D, C).;true;true
3;true,false;follows(E, C), follows(A, E).;true;true
3;false;follows(F, A).;true;true
3;false,true;follows(F, G), recursion_accounttype(G, B).;true;true
3;false,false;tweets(A, H).;true;true
3;false,false,true;tweets(I, H), recursion_accounttype(I, B).;true;true
4;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
4;true;tweets(A, D), tweets(C, D).;true;true
4;true,true;follows(E, C), follows(A, E).;true;true
4;false;follows(F, A).;true;true
4;false,true;follows(F, G), recursion_accounttype(G, B).;true;true
5;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
5;false;follows(D, A).;true;true
5;false,true;follows(D, E), follows(E, A).;true;true
5;false,true,true;tweets(A, F), follows(A, E).;true;true
5;false,false;tweets(A, H).;true;true
5;false,false,true;tweets(I, H), recursion_accounttype(I, B).;true;true
6;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
6;true;follows(C, D), recursion_accounttype(D, B).;true;true
6;true,true;follows(A, D), follows(D, E).;true;true
6;true,true,true;follows(A, E), follows(E, A).;true;true
6;false;follows(F, A), follows(A, G).;true;true
6;false,false;follows(A, H), follows(H, I).;true;true
6;false,false,true;recursion_accounttype(I, B).;true;true
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
7;false;follows(F, A).;true;true
7;false,false;follows(A, H), follows(H, I).;true;true
7;false,false,true;recursion_accounttype(I, B).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;true;follows(C, D), recursion_accounttype(D, B).;true;true
8;false;follows(F, A), follows(A, G).;true;true
8;false,true;follows(H, F), recursion_accounttype(H, B).;true;true
8;false,false;follows(J, A), recursion_accounttype(J, B).;true;true
8;false,false,false;follows(A, K).;true;true
9;;accounttype(A, B) :- follows(A, C), follows(D, A).;true;true
9;true;recursion_accounttype(C, B).;true;true
9;true,true;follows(A, D), follows(C, E).;true;true
9;true,true,true;tweets(C, F), recursion_accounttype(E, B).;true;true
9;true,false;recursion_accounttype(D, B).;true;true
9;false;follows(G, A), recursion_accounttype(G, B).;true;true
9;false,false;follows(A, H).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.8581489350995123;  // std dev = 0.000, 82.000 (wgt'ed) examples reached here.  /* #pos=82 */
%   else if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(E, A) )
%   | | then return 0.8581489350995123;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else return 0.6914822684328455;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | else if ( follows(F, A) )
%   | | then if ( follows(F, G), follows(G, A) )
%   | | | then return -0.12185106490048783;  // std dev = 1.715, 150.000 (wgt'ed) examples reached here.  /* #neg=147 #pos=3 */
%   | | | else return 0.054870246574922205;  // std dev = 3.105, 61.000 (wgt'ed) examples reached here.  /* #neg=49 #pos=12 */
%   | | else if ( tweets(A, H) )
%   | | | then return 0.08314893509951238;  // std dev = 2.641, 40.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=9 */
%   | | | else return 0.14386322081379807;  // std dev = 2.390, 28.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=8 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, C) )
%   | then return 0.7194734122109542;  // std dev = 1.19e-07, 64.000 (wgt'ed) examples reached here.  /* #pos=64 */
%   | else if ( follows(A, D), follows(D, C) )
%   | | then return 0.3861400788776211;  // std dev = 1.155, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | | else return 0.7194734122109543;  // std dev = 2.98e-08, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   else if ( follows(E, A) )
%   | then if ( follows(F, E), follows(F, A) )
%   | | then return -0.10907420513942655;  // std dev = 0.144, 145.000 (wgt'ed) examples reached here.  /* #neg=142 #pos=3 */
%   | | else if ( follows(E, G), recursion_accounttype(G, B) )
%   | | | then return 0.8002108084592938;  // std dev = 0.282, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | | else return -0.1486625319844167;  // std dev = 1.49e-08, 65.000 (wgt'ed) examples reached here.  /* #neg=65 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0.7518526675222027;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( follows(A, I), follows(I, J) )
%   | | | then return 0.08066277145213618;  // std dev = 2.471, 34.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=8 */
%   | | | else return 0.10724957412292876;  // std dev = 2.575, 34.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=9 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, C), tweets(A, D) )
%   | then if ( tweets(C, D) )
%   | | then return 0.5088548088393073;  // std dev = 0.211, 43.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=41 */
%   | | else return 0.5553664367462846;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else return 0.5660455205926314;  // std dev = 0.149, 30.000 (wgt'ed) examples reached here.  /* #pos=30 */
%   else if ( follows(E, A) )
%   | then if ( follows(E, F), follows(F, A) )
%   | | then return -0.09291708864069642;  // std dev = 0.150, 130.000 (wgt'ed) examples reached here.  /* #neg=127 #pos=3 */
%   | | else if ( follows(G, E), recursion_accounttype(G, B) )
%   | | | then return 0.6520296398620358;  // std dev = 0.388, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | | else return -0.12610166559531452;  // std dev = 0.764, 88.000 (wgt'ed) examples reached here.  /* #neg=87 #pos=1 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0.588232901061704;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( tweets(A, I) )
%   | | | then return 0.16899355144388803;  // std dev = 2.449, 27.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=9 */
%   | | | else return 0.20697520589790916;  // std dev = 2.226, 21.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=8 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(D, C) )
%   | then return 0.41363260551044617;  // std dev = 0.121, 69.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=68 */
%   | else if ( follows(A, E), follows(E, C) )
%   | | then return 0.08158545080940809;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return 0.4176758760344763;  // std dev = 0.018, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   else if ( follows(F, A) )
%   | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | then if ( follows(A, G), follows(A, F) )
%   | | | then return 0.28699969978009415;  // std dev = 0.571, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | | else return 0.6196508968781193;  // std dev = 0.558, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else return -0.11042144378997522;  // std dev = 0.069, 194.000 (wgt'ed) examples reached here.  /* #neg=194 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0.4423653592412794;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( follows(A, I), follows(I, J) )
%   | | | then return 0.07464935620322904;  // std dev = 2.419, 30.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=8 */
%   | | | else return 0.15910202656863137;  // std dev = 2.403, 25.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=9 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D) )
%   | then return 0.332572653818407;  // std dev = 0.168, 74.000 (wgt'ed) examples reached here.  /* #pos=74 */
%   | else return 0.20812153825845542;  // std dev = 0.314, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   else if ( follows(E, A) )
%   | then if ( follows(E, F), recursion_accounttype(F, B) )
%   | | then if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.25149793506997664;  // std dev = 0.603, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | | else return 0.49886278578984483;  // std dev = 0.618, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else return -0.09976098959536586;  // std dev = 0.062, 199.000 (wgt'ed) examples reached here.  /* #neg=199 */
%   | else if ( tweets(A, H) )
%   | | then if ( tweets(I, H), recursion_accounttype(I, B) )
%   | | | then return 0.679055462414233;  // std dev = 0.683, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return -0.20540400993968672;  // std dev = 0.039, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.11813136841682799;  // std dev = 1.414, 9.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=3 */
%   | | | else return 0.09322702249345827;  // std dev = 1.871, 17.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=6 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(A, C) )
%   | then if ( follows(A, E), follows(E, C) )
%   | | then return 0.23856100518506956;  // std dev = 0.147, 45.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=44 */
%   | | else return 0.2599512320335441;  // std dev = 0.012, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else return 0.2714123258786504;  // std dev = 0.143, 30.000 (wgt'ed) examples reached here.  /* #pos=30 */
%   else if ( follows(F, A) )
%   | then if ( follows(G, F), recursion_accounttype(G, B) )
%   | | then if ( follows(F, H), follows(H, A) )
%   | | | then return 0.7321049690925397;  // std dev = 1.49e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.23584096111983505;  // std dev = 0.964, 20.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=19 */
%   | | else return -0.09116097573802952;  // std dev = 0.644, 234.000 (wgt'ed) examples reached here.  /* #neg=233 #pos=1 */
%   | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | then return 0.233310076106622;  // std dev = 0.097, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.02418259768983808;  // std dev = 2.240, 32.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=8 */
%   | | | else return 0.11081638222848707;  // std dev = 2.230, 25.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=9 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.21843758340611397;  // std dev = 0.129, 82.000 (wgt'ed) examples reached here.  /* #pos=82 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), follows(E, A) )
%   | | then if ( follows(A, E), tweets(A, F) )
%   | | | then return -0.06939051271819699;  // std dev = 1.204, 126.000 (wgt'ed) examples reached here.  /* #neg=123 #pos=3 */
%   | | | else return -0.08127220780326297;  // std dev = 5.27e-09, 34.000 (wgt'ed) examples reached here.  /* #neg=34 */
%   | | else if ( follows(D, G), recursion_accounttype(G, B) )
%   | | | then return 0.199123868239188;  // std dev = 1.027, 21.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=20 */
%   | | | else return -0.08937929861909584;  // std dev = 3.16e-08, 68.000 (wgt'ed) examples reached here.  /* #neg=68 */
%   | else if ( tweets(A, H) )
%   | | then if ( tweets(I, H), recursion_accounttype(I, B) )
%   | | | then return 0.5267287613259178;  // std dev = 0.717, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return -0.18625377229311874;  // std dev = 0.091, 37.000 (wgt'ed) examples reached here.  /* #neg=37 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.13479126678833753;  // std dev = 1.369, 8.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=3 */
%   | | | else return 0.05286255836850192;  // std dev = 1.867, 17.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=6 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(D, C) )
%   | then return 0.1842555085678153;  // std dev = 0.091, 68.000 (wgt'ed) examples reached here.  /* #pos=68 */
%   | else return 0.11238407293028044;  // std dev = 0.252, 15.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=14 */
%   else if ( follows(E, A) )
%   | then if ( follows(E, F), recursion_accounttype(F, B) )
%   | | then if ( follows(A, F), follows(A, E) )
%   | | | then return 0.0849627787225696;  // std dev = 0.647, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | | else return 0.2889349522725715;  // std dev = 0.589, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else return -0.07821323737516249;  // std dev = 0.044, 210.000 (wgt'ed) examples reached here.  /* #neg=210 */
%   | else if ( tweets(A, G) )
%   | | then if ( tweets(H, G), recursion_accounttype(H, B) )
%   | | | then return 0.3153102974901643;  // std dev = 1.402, 13.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   | | | else return -0.1556285359872372;  // std dev = 0.061, 24.000 (wgt'ed) examples reached here.  /* #neg=24 */
%   | | else if ( follows(A, I), follows(I, J) )
%   | | | then return 0.3343379265988406;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.007945772928277887;  // std dev = 1.918, 19.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=6 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, C), tweets(A, D) )
%   | then if ( tweets(C, D) )
%   | | then if ( follows(A, E), follows(E, C) )
%   | | | then return 0.10384599090717676;  // std dev = 1.375, 37.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=35 */
%   | | | else return 0.15810884377577064;  // std dev = 0.011, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return 0.15291832161057053;  // std dev = 0.008, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else return 0.16302601950580928;  // std dev = 0.099, 30.000 (wgt'ed) examples reached here.  /* #pos=30 */
%   else if ( follows(F, A) )
%   | then return -0.0511684422443878;  // std dev = 0.126, 214.000 (wgt'ed) examples reached here.  /* #neg=191 #pos=23 */
%   | else if ( tweets(A, G) )
%   | | then if ( tweets(H, G), recursion_accounttype(H, B) )
%   | | | then return 0.350475329215469;  // std dev = 0.544, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return -0.13375311021138248;  // std dev = 0.047, 22.000 (wgt'ed) examples reached here.  /* #neg=22 */
%   | | else if ( follows(A, I), follows(I, J) )
%   | | | then return 0.26427554376133766;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.053617804223774566;  // std dev = 1.944, 15.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=6 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(A, C), follows(C, D) )
%   then if ( recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then return 0.14189902786261233;  // std dev = 0.094, 73.000 (wgt'ed) examples reached here.  /* #pos=73 */
%   | | else if ( follows(C, A) )
%   | | | then return 0.22559484296404964;  // std dev = 0.564, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | | | else return 0.3485226288085284;  // std dev = 0.672, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | else return -0.07594773250408274;  // std dev = 0.491, 210.000 (wgt'ed) examples reached here.  /* #neg=210 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then return 0.04086637527982488;  // std dev = 0.300, 10.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | else if ( follows(A, G), tweets(A, H) )
%   | | then if ( tweets(I, H), recursion_accounttype(I, B) )
%   | | | then return 0.33161707848157007;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return -0.13567002519539828;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | else if ( tweets(A, J) )
%   | | | then return -0.09063089705824853;  // std dev = 0.392, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | | | else return -0.05420544875173696;  // std dev = 2.067, 21.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=6 */


Results
   AUC ROC   = 0.987222
   AUC PR    = 0.307124
   CLL	      = -0.14744
   Precision = 0.335821 at threshold = 0.5
   Recall    = 0.865385
   F1        = 0.483871


Total learning time: 27.4097900390625 seconds
Total inference time: 32.096 seconds
AUC ROC: 0.987222


Results scoring model
   AUC ROC   = 0.991854
   AUC PR    = 0.367622
   CLL	      = -0.119963
   Precision = 0.335227 at threshold = 0.5
   Recall    = 0.936508
   F1        = 0.493724


Total scoring time: 25.542 seconds
Refined model CLL: -0.119963


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.994216
   AUC PR    = 0.439383
   CLL	      = -0.113156
   Precision = 0.340528 at threshold = 0.5
   Recall    = 0.910256
   F1        = 0.495637


Total learning time: 135.70212420845033 seconds
Total inference time: 55.74 seconds
AUC ROC: 0.994216
Total revision time: 135.70212420845033
Best scored revision CLL: -0.109664


Dataset: 7_yeast_twitter, Fold: 1, Type: Transfer (trRDN-B), Time: 00:03:48
{'AUC ROC': 0.994216, 'AUC PR': 0.439383, 'CLL': -0.113156, 'Precision': [0.340528, 0.5], 'Recall': 0.910256, 'F1': 0.495637, 'Learning time': 135.70212420845033, 'Inference time': 55.74, 'parameter': {'AUC ROC': 0.994216, 'AUC PR': 0.439383, 'CLL': -0.113156, 'Precision': [0.340528, 0.5], 'Recall': 0.910256, 'F1': 0.495637, 'Learning time': 35.87333416938782, 'Inference time': 55.74}}


WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(C, D) )
%   | then return 0.8581489350995126;  // std dev = 0.000, 77.000 (wgt'ed) examples reached here.  /* #pos=77 */
%   | else return 0.6914822684328455;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   else if ( follows(A, E), recursion_accounttype(E, B) )
%   | then return 0.8581489350995123;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | else if ( follows(F, A) )
%   | | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | | then return 0.7956489350995123;  // std dev = 0.968, 16.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   | | | else return -0.14185106490048832;  // std dev = 0.000, 186.000 (wgt'ed) examples reached here.  /* #neg=186 */
%   | | else if ( tweets(A, H) )
%   | | | then return 0.13939893509951237;  // std dev = 2.543, 32.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=9 */
%   | | | else return 0.221785298735876;  // std dev = 2.256, 22.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=8 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, C), tweets(C, D) )
%   | then return 0.6718543645919066;  // std dev = 0.213, 63.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=60 */
%   | else return 0.7268323338726016;  // std dev = 0.064, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   else if ( follows(A, E), recursion_accounttype(E, B) )
%   | then if ( tweets(E, F), tweets(A, F) )
%   | | then if ( tweets(G, F), follows(G, A) )
%   | | | then return 0.4694734122109544;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | else return 0.7194734122109544;  // std dev = 2.11e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.7194734122109544;  // std dev = 2.11e-08, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), follows(I, A) )
%   | | | then return -0.10926807573767036;  // std dev = 1.471, 159.000 (wgt'ed) examples reached here.  /* #neg=156 #pos=3 */
%   | | | else return 0.0015713359765280027;  // std dev = 2.741, 81.000 (wgt'ed) examples reached here.  /* #neg=69 #pos=12 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.06466801856669893;  // std dev = 2.484, 35.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=8 */
%   | | | else return 0.1677579305942622;  // std dev = 2.448, 27.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=9 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(D, C) )
%   | then return 0.5369756967503978;  // std dev = 0.166, 70.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=68 */
%   | else if ( tweets(A, E), follows(A, C) )
%   | | then return 0.2428212419189438;  // std dev = 1.171, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | | else return 0.563039057656119;  // std dev = 0.039, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else if ( follows(F, A) )
%   | then if ( follows(F, G), follows(G, A) )
%   | | then return -0.09818039149918244;  // std dev = 0.116, 165.000 (wgt'ed) examples reached here.  /* #neg=162 #pos=3 */
%   | | else if ( follows(F, H), recursion_accounttype(H, B) )
%   | | | then return 0.617109274553331;  // std dev = 1.142, 21.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=20 */
%   | | | else return -0.12561712858148152;  // std dev = 0.000, 67.000 (wgt'ed) examples reached here.  /* #neg=67 */
%   | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | then return 0.5553664367462845;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.14647295743876637;  // std dev = 2.471, 28.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=9 */
%   | | | else return 0.10538369199252516;  // std dev = 2.375, 27.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=8 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(D, C) )
%   then if ( recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(C, E) )
%   | | then return 0.4511282042661867;  // std dev = 0.104, 89.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=88 */
%   | | else if ( follows(D, F), follows(F, C) )
%   | | | then return 0.4237879466929565;  // std dev = 0.913, 14.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=13 */
%   | | | else return 0.18571986246574992;  // std dev = 0.727, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else return -0.10402988301916857;  // std dev = 0.572, 209.000 (wgt'ed) examples reached here.  /* #neg=208 #pos=1 */
%   else if ( follows(A, G), recursion_accounttype(G, B) )
%   | then return 0.41678338110557184;  // std dev = 0.003, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else if ( follows(A, H), follows(H, I) )
%   | | then if ( recursion_accounttype(I, B) )
%   | | | then return 0.807500593528052;  // std dev = 0.009, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return -0.1908895840014987;  // std dev = 0.009, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.10122787063694562;  // std dev = 1.664, 13.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=4 */
%   | | | else return 0.024782773887916013;  // std dev = 1.952, 21.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=5 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(D, C) )
%   then if ( recursion_accounttype(D, B) )
%   | then if ( recursion_accounttype(C, B), tweets(C, E) )
%   | | then return 0.30311042548967526;  // std dev = 0.154, 77.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=75 */
%   | | else if ( tweets(D, F), follows(A, C) )
%   | | | then return 0.42231293260806574;  // std dev = 0.946, 27.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=26 */
%   | | | else return 0.11155142995906825;  // std dev = 0.521, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else return -0.09447957942614062;  // std dev = 0.588, 214.000 (wgt'ed) examples reached here.  /* #neg=213 #pos=1 */
%   else if ( tweets(A, G) )
%   | then if ( tweets(H, G), recursion_accounttype(H, B) )
%   | | then if ( follows(A, I), recursion_accounttype(I, B) )
%   | | | then return 0.3200542699555291;  // std dev = 0.003, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.7090903020173323;  // std dev = 0.181, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else return -0.18633583857043234;  // std dev = 0.143, 23.000 (wgt'ed) examples reached here.  /* #neg=23 */
%   | else if ( follows(A, J), follows(J, K) )
%   | | then return 0.23884688268060716;  // std dev = 0.997, 6.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | else return 0.14512372556218;  // std dev = 0.511, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then if ( follows(A, C), follows(D, C) )
%   | | then return 0.29185642407423806;  // std dev = 0.070, 91.000 (wgt'ed) examples reached here.  /* #pos=91 */
%   | | else if ( follows(A, E), follows(D, C) )
%   | | | then return -0.18809758340292254;  // std dev = 1.336, 8.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=4 */
%   | | | else return 0.2841588755186836;  // std dev = 0.242, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | else return -0.08959030927955519;  // std dev = 0.050, 219.000 (wgt'ed) examples reached here.  /* #neg=219 */
%   else if ( follows(A, F), recursion_accounttype(F, B) )
%   | then return 0.2641022000341008;  // std dev = 0.030, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( follows(A, G), follows(G, H) )
%   | | then if ( recursion_accounttype(H, B) )
%   | | | then return 0.5230696917666925;  // std dev = 0.145, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return -0.14519092444248177;  // std dev = 0.088, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
%   | | else if ( tweets(A, I) )
%   | | | then return 0.21901252984028668;  // std dev = 1.165, 8.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=4 */
%   | | | else return 0.03456889000259306;  // std dev = 1.900, 18.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=5 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then return 0.21944073536777461;  // std dev = 0.225, 67.000 (wgt'ed) examples reached here.  /* #pos=67 */
%   | else return 0.15316355924312675;  // std dev = 0.245, 16.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   else if ( follows(E, A) )
%   | then if ( follows(E, F), follows(F, A) )
%   | | then return -0.06984219339902771;  // std dev = 0.096, 130.000 (wgt'ed) examples reached here.  /* #neg=127 #pos=3 */
%   | | else if ( follows(G, E), recursion_accounttype(G, B) )
%   | | | then return 0.2707778191655579;  // std dev = 0.269, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | | else return -0.083945636961999;  // std dev = 0.628, 68.000 (wgt'ed) examples reached here.  /* #neg=67 #pos=1 */
%   | else if ( tweets(A, H) )
%   | | then if ( tweets(I, H), recursion_accounttype(I, B) )
%   | | | then return 0.3138057099796579;  // std dev = 1.113, 13.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   | | | else return -0.1611247901410088;  // std dev = 0.296, 33.000 (wgt'ed) examples reached here.  /* #neg=33 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.032176517218691095;  // std dev = 0.907, 9.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=3 */
%   | | | else return 0.09340190949822019;  // std dev = 1.832, 16.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=6 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(A, D), tweets(C, D) )
%   | then return 0.18073673126724174;  // std dev = 0.114, 55.000 (wgt'ed) examples reached here.  /* #pos=55 */
%   | else if ( follows(C, E), follows(E, A) )
%   | | then if ( recursion_accounttype(E, B) )
%   | | | then return 0.1835595076986543;  // std dev = 0.015, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | | else return -0.11847164437193598;  // std dev = 1.444, 10.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=7 */
%   | | else return 0.21814193892365777;  // std dev = 0.151, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else if ( follows(F, A) )
%   | then return -0.044765372624724305;  // std dev = 0.117, 233.000 (wgt'ed) examples reached here.  /* #neg=210 #pos=23 */
%   | else if ( tweets(A, G) )
%   | | then if ( tweets(H, G), recursion_accounttype(H, B) )
%   | | | then return 0.32738496065857287;  // std dev = 0.459, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return -0.1368229021030438;  // std dev = 0.238, 28.000 (wgt'ed) examples reached here.  /* #neg=28 */
%   | | else if ( follows(A, I), follows(I, J) )
%   | | | then return 0.08708042166781649;  // std dev = 0.836, 7.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=3 */
%   | | | else return -0.006109287113892166;  // std dev = 1.951, 21.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=6 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D) )
%   | then if ( follows(D, C), recursion_accounttype(D, B) )
%   | | then if ( follows(D, A), tweets(A, E) )
%   | | | then return 0.1526968365713886;  // std dev = 0.000683, 32.000 (wgt'ed) examples reached here.  /* #pos=32 */
%   | | | else return 0.006283998424124722;  // std dev = 1.274, 13.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=11 */
%   | | else return 0.1788225730888115;  // std dev = 0.178, 31.000 (wgt'ed) examples reached here.  /* #pos=31 */
%   | else return 0.03906867289771181;  // std dev = 0.314, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   else if ( follows(F, A) )
%   | then return -0.043854105455369566;  // std dev = 0.137, 223.000 (wgt'ed) examples reached here.  /* #neg=200 #pos=23 */
%   | else if ( follows(A, G), follows(G, H) )
%   | | then if ( recursion_accounttype(H, B) )
%   | | | then return 0.2532905302498693;  // std dev = 0.387, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | | else return -0.1113817413901575;  // std dev = 0.194, 24.000 (wgt'ed) examples reached here.  /* #neg=24 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.0395735601560458;  // std dev = 1.050, 17.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=4 */
%   | | | else return -0.03759702400318616;  // std dev = 1.996, 24.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=6 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.14568475283932142;  // std dev = 0.182, 82.000 (wgt'ed) examples reached here.  /* #pos=82 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(D, F), follows(F, A) )
%   | | | then return 0.5510622747875384;  // std dev = 1.05e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.19862444993984174;  // std dev = 1.096, 21.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=20 */
%   | | else return -0.0706867748225371;  // std dev = 0.036, 222.000 (wgt'ed) examples reached here.  /* #neg=222 */
%   | else if ( tweets(A, G) )
%   | | then if ( follows(A, H), follows(H, I) )
%   | | | then return -0.002346337657309825;  // std dev = 0.553, 23.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=8 */
%   | | | else return 0.026385178947543813;  // std dev = 0.987, 12.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=4 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.09341758264347017;  // std dev = 0.677, 6.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | | else return 0.06382951019511152;  // std dev = 1.862, 17.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=6 */


Results
   AUC ROC   = 0.992907
   AUC PR    = 0.35783
   CLL	      = -0.123313
   Precision = 0.338747 at threshold = 0.5
   Recall    = 0.935897
   F1        = 0.497445


Total learning time: 32.56895613670349 seconds
Total inference time: 33.513 seconds
AUC ROC: 0.992907


Dataset: 7_yeast_twitter, Fold: 1, Type: Scratch (RDN-B), Time: 00:04:54
{'AUC ROC': 0.992907, 'AUC PR': 0.35783, 'CLL': -0.123313, 'Precision': [0.338747, 0.5], 'Recall': 0.935897, 'F1': 0.497445, 'Learning time': 32.56895613670349, 'Inference time': 33.513}


Starting fold 2

Target train facts examples: 1562
Target train pos examples: 156
Target train neg examples: 24648

Target test facts examples: 1580
Target test pos  examples: 126
Target test neg examples: 16128

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(A, C) )
%   | then if ( follows(A, E), follows(E, C) )
%   | | then return 0.8581489350995115;  // std dev = 2.60e-07, 38.000 (wgt'ed) examples reached here.  /* #pos=38 */
%   | | else return 0.7470378239884012;  // std dev = 0.314, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | else return 0.8581489350995122;  // std dev = 5.96e-08, 39.000 (wgt'ed) examples reached here.  /* #pos=39 */
%   else if ( follows(F, A) )
%   | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H), recursion_accounttype(H, B) )
%   | | | then return 0.6081489350995123;  // std dev = 1.225, 8.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=6 */
%   | | | else return 0.8581489350995123;  // std dev = 0.000, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else return -0.14185106490048835;  // std dev = 0.000, 192.000 (wgt'ed) examples reached here.  /* #neg=192 */
%   | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | then return 0.8581489350995123;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.10567368757475913;  // std dev = 4.337, 101.000 (wgt'ed) examples reached here.  /* #neg=76 #pos=25 */
%   | | | else return 0.22400259363609773;  // std dev = 3.084, 41.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=15 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7215317557641779;  // std dev = 0.059, 85.000 (wgt'ed) examples reached here.  /* #pos=85 */
%   else if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), follows(D, E) )
%   | | then return 0.7670719622367217;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else if ( follows(D, F), follows(F, D) )
%   | | | then return 0.5834160622146355;  // std dev = 0.882, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | | else return 0.7353395955528769;  // std dev = 0.039, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( follows(G, A) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.6639178566553986;  // std dev = 0.972, 18.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=17 */
%   | | | else return -0.12544463852839172;  // std dev = 0.000, 215.000 (wgt'ed) examples reached here.  /* #neg=215 */
%   | | else if ( tweets(A, I), follows(A, J) )
%   | | | then return 0.054922169408110254;  // std dev = 3.435, 71.000 (wgt'ed) examples reached here.  /* #neg=56 #pos=15 */
%   | | | else return 0.1743341077084892;  // std dev = 4.069, 74.000 (wgt'ed) examples reached here.  /* #neg=49 #pos=25 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D) )
%   | then if ( follows(D, C), recursion_accounttype(D, B) )
%   | | then return 0.5191438171252688;  // std dev = 0.186, 28.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=27 */
%   | | else return 0.5599277356813727;  // std dev = 0.070, 43.000 (wgt'ed) examples reached here.  /* #pos=43 */
%   | else return 0.4923581028395541;  // std dev = 0.242, 16.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   else if ( follows(A, E), recursion_accounttype(E, B) )
%   | then if ( follows(E, F), recursion_accounttype(F, B) )
%   | | then return 0.5922121501283968;  // std dev = 0.050, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else return 0.2586059045532312;  // std dev = 0.793, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else if ( follows(G, A) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.46377629184836355;  // std dev = 1.338, 19.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=17 */
%   | | | else return -0.1123163781936067;  // std dev = 0.000, 217.000 (wgt'ed) examples reached here.  /* #neg=217 */
%   | | else if ( follows(A, I), follows(I, J) )
%   | | | then return 0.07558626018007537;  // std dev = 4.338, 102.000 (wgt'ed) examples reached here.  /* #neg=77 #pos=25 */
%   | | | else return 0.15340688975014574;  // std dev = 3.127, 43.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=15 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D) )
%   | then return 0.39487867957017764;  // std dev = 0.166, 72.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=70 */
%   | else if ( tweets(A, E) )
%   | | then return 0.36097807135368914;  // std dev = 0.258, 14.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=13 */
%   | | else return 0.09907330944892727;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   else if ( follows(F, A) )
%   | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | then return 0.4588236571880958;  // std dev = 0.093, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | | else return -0.10159632948783655;  // std dev = 0.000, 213.000 (wgt'ed) examples reached here.  /* #neg=213 */
%   | else if ( follows(A, H) )
%   | | then if ( follows(I, H), recursion_accounttype(I, B) )
%   | | | then return 0.7009730244413387;  // std dev = 1.545, 38.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=37 */
%   | | | else return -0.18419527582660314;  // std dev = 0.122, 77.000 (wgt'ed) examples reached here.  /* #neg=77 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.27699789128442953;  // std dev = 1.414, 8.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=4 */
%   | | | else return 0.12699789128442968;  // std dev = 2.133, 20.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=7 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(C, D), follows(D, C) )
%   | then return 0.3230623545881748;  // std dev = 0.111, 84.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=83 */
%   | else return -0.0015838465364981606;  // std dev = 0.798, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   else if ( follows(E, A) )
%   | then if ( follows(F, E), follows(F, A) )
%   | | then return -0.09026959626637855;  // std dev = 0.073, 130.000 (wgt'ed) examples reached here.  /* #neg=128 #pos=2 */
%   | | else if ( tweets(A, G), follows(H, E) )
%   | | | then return -0.003808322053640619;  // std dev = 1.900, 83.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=19 */
%   | | | else return -0.09767927743414934;  // std dev = 0.939, 24.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=2 */
%   | else if ( follows(A, I) )
%   | | then if ( follows(J, I), recursion_accounttype(J, B) )
%   | | | then return 0.5653171617235051;  // std dev = 1.592, 38.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=37 */
%   | | | else return -0.15932693561898933;  // std dev = 0.111, 68.000 (wgt'ed) examples reached here.  /* #neg=68 */
%   | | else if ( tweets(A, K) )
%   | | | then return 0.12537027596418954;  // std dev = 1.549, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | | else return 0.2926836223800438;  // std dev = 1.797, 13.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=7 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.26737461171827687;  // std dev = 0.120, 83.000 (wgt'ed) examples reached here.  /* #pos=83 */
%   | else return -0.023760812057251928;  // std dev = 0.853, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   else if ( follows(E, A) )
%   | then if ( follows(E, F), recursion_accounttype(F, B) )
%   | | then return 0.3535131514436903;  // std dev = 0.093, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | | else return -0.08723021876653446;  // std dev = 0.045, 203.000 (wgt'ed) examples reached here.  /* #neg=203 */
%   | else if ( follows(A, G) )
%   | | then if ( follows(H, G), recursion_accounttype(H, B) )
%   | | | then return 0.4404836289165204;  // std dev = 1.536, 38.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=37 */
%   | | | else return -0.13881650458730954;  // std dev = 0.104, 74.000 (wgt'ed) examples reached here.  /* #neg=74 */
%   | | else if ( tweets(A, I) )
%   | | | then return 0.03303722997037784;  // std dev = 1.633, 12.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=4 */
%   | | | else return -0.023946485376536125;  // std dev = 2.245, 25.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=7 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D) )
%   | then return 0.21823787010461745;  // std dev = 0.168, 70.000 (wgt'ed) examples reached here.  /* #pos=70 */
%   | else return 0.17098407923245817;  // std dev = 0.244, 16.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   else if ( follows(E, A) )
%   | then if ( follows(E, F), recursion_accounttype(F, B) )
%   | | then if ( follows(E, G), follows(G, A) )
%   | | | then return -0.41530725259544476;  // std dev = 1.181, 7.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=2 */
%   | | | else return 0.23069681223037106;  // std dev = 0.987, 22.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=21 */
%   | | else return -0.08084390739021245;  // std dev = 0.043, 195.000 (wgt'ed) examples reached here.  /* #neg=195 */
%   | else if ( follows(A, H) )
%   | | then if ( follows(I, H), recursion_accounttype(I, B) )
%   | | | then return 0.37488051013089513;  // std dev = 0.804, 37.000 (wgt'ed) examples reached here.  /* #pos=37 */
%   | | | else return -0.12261710751840754;  // std dev = 0.071, 77.000 (wgt'ed) examples reached here.  /* #neg=77 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.137161149075939;  // std dev = 1.491, 9.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=4 */
%   | | | else return 0.13859579197844235;  // std dev = 1.984, 16.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=7 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, C) )
%   | then if ( recursion_accounttype(D, B) )
%   | | then return 0.18207111778260462;  // std dev = 0.000, 27.000 (wgt'ed) examples reached here.  /* #pos=27 */
%   | | else if ( follows(D, A), tweets(A, E) )
%   | | | then return 0.10464751998302524;  // std dev = 0.964, 14.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=13 */
%   | | | else return 0.17607609141159666;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | else return 0.2011643517317526;  // std dev = 0.147, 31.000 (wgt'ed) examples reached here.  /* #pos=31 */
%   else if ( follows(F, A) )
%   | then return -0.044084198780905894;  // std dev = 0.095, 240.000 (wgt'ed) examples reached here.  /* #neg=217 #pos=23 */
%   | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.0881852096059663;  // std dev = 0.011, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return -0.560807032444017;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | else if ( follows(A, I), follows(I, J) )
%   | | | then return 0.0012202436872049526;  // std dev = 2.049, 108.000 (wgt'ed) examples reached here.  /* #neg=83 #pos=25 */
%   | | | else return 0.06269280597676571;  // std dev = 2.684, 36.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=15 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(E, C) )
%   | then return 0.1422122843948217;  // std dev = 0.119, 69.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=68 */
%   | else return 0.18221878957684717;  // std dev = 0.107, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   else if ( follows(F, A) )
%   | then if ( follows(F, G), follows(G, A) )
%   | | then return -0.07114048602022881;  // std dev = 0.079, 161.000 (wgt'ed) examples reached here.  /* #neg=159 #pos=2 */
%   | | else if ( follows(A, H), follows(F, H) )
%   | | | then return -0.03508127325571419;  // std dev = 1.270, 75.000 (wgt'ed) examples reached here.  /* #neg=63 #pos=12 */
%   | | | else return 0.018855889140335116;  // std dev = 0.782, 30.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=9 */
%   | else if ( follows(A, I) )
%   | | then if ( follows(J, I), recursion_accounttype(J, B) )
%   | | | then return 0.29589400556425915;  // std dev = 0.668, 37.000 (wgt'ed) examples reached here.  /* #pos=37 */
%   | | | else return -0.11113684127210995;  // std dev = 0.092, 73.000 (wgt'ed) examples reached here.  /* #neg=73 */
%   | | else if ( tweets(A, K) )
%   | | | then return -0.08470916562404833;  // std dev = 1.713, 15.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=4 */
%   | | | else return -0.009378453034236265;  // std dev = 2.160, 21.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=7 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, C), tweets(A, D) )
%   | then if ( follows(E, A), follows(E, C) )
%   | | then if ( tweets(E, D) )
%   | | | then return 0.1095526385145672;  // std dev = 0.982, 33.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=32 */
%   | | | else return -0.19321899899515152;  // std dev = 0.818, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return 0.14142381038037974;  // std dev = 0.017, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | else return 0.1448381410109695;  // std dev = 0.117, 39.000 (wgt'ed) examples reached here.  /* #pos=39 */
%   else if ( follows(F, A) )
%   | then if ( follows(G, F), follows(G, A) )
%   | | then return -0.05905632776287873;  // std dev = 0.056, 143.000 (wgt'ed) examples reached here.  /* #neg=141 #pos=2 */
%   | | else return -0.02481055972338705;  // std dev = 0.136, 123.000 (wgt'ed) examples reached here.  /* #neg=102 #pos=21 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0.07078714196595079;  // std dev = 0.068, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( follows(A, I) )
%   | | | then return 0.023442932374847607;  // std dev = 1.731, 91.000 (wgt'ed) examples reached here.  /* #neg=62 #pos=29 */
%   | | | else return 0.006253181464256895;  // std dev = 2.686, 32.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=11 */


Results
   AUC ROC   = 0.993578
   AUC PR    = 0.369127
   CLL	      = -0.100655
   Precision = 0.35 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.518519


Total learning time: 25.491529941558838 seconds
Total inference time: 20.78 seconds
AUC ROC: 0.993578


Results scoring model
   AUC ROC   = 0.992525
   AUC PR    = 0.372765
   CLL	      = -0.120985
   Precision = 0.344418 at threshold = 0.5
   Recall    = 0.929487
   F1        = 0.5026


Total scoring time: 27.499 seconds
Parameter learned model CLL: -0.120985


Structure after Parameter Learning
[['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'tweets(A, D), follows(A, C)', 'true,true': 'follows(A, E), follows(E, C)', 'false': 'follows(F, A)', 'false,true': 'follows(F, G), recursion_accounttype(G, B)', 'false,true,true': 'follows(A, H), recursion_accounttype(H, B)', 'false,false': 'follows(A, I), recursion_accounttype(I, B)', 'false,false,false': 'follows(A, J), follows(J, K)'}, {'true,true,true': [2.6e-07, 0, 38], 'true,true,false': [0.314, 1, 8], 'true,false': [5.96e-08, 0, 39], 'false,true,true,true': [1.225, 2, 6], 'false,true,true,false': [0.0, 0, 17], 'false,true,false': [0.0, 192, 0], 'false,false,true': [0.0, 0, 8], 'false,false,false,true': [4.337, 76, 25], 'false,false,false,false': [3.084, 26, 15]}], ['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), recursion_accounttype(D, B)', 'false,true': 'follows(E, A), follows(D, E)', 'false,true,false': 'follows(D, F), follows(F, D)', 'false,false': 'follows(G, A)', 'false,false,true': 'follows(G, H), recursion_accounttype(H, B)', 'false,false,false': 'tweets(A, I), follows(A, J)'}, {'true': [0.059, 0, 85], 'false,true,true': [0.0, 0, 5], 'false,true,false,true': [0.882, 1, 6], 'false,true,false,false': [0.039, 0, 3], 'false,false,true,true': [0.972, 1, 17], 'false,false,true,false': [0.0, 215, 0], 'false,false,false,true': [3.435, 56, 15], 'false,false,false,false': [4.069, 49, 25]}], ['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(A, D)', 'true,true': 'follows(D, C), recursion_accounttype(D, B)', 'false': 'follows(A, E), recursion_accounttype(E, B)', 'false,true': 'follows(E, F), recursion_accounttype(F, B)', 'false,false': 'follows(G, A)', 'false,false,true': 'follows(G, H), recursion_accounttype(H, B)', 'false,false,false': 'follows(A, I), follows(I, J)'}, {'true,true,true': [0.186, 1, 27], 'true,true,false': [0.07, 0, 43], 'true,false': [0.242, 1, 15], 'false,true,true': [0.05, 0, 12], 'false,true,false': [0.793, 1, 2], 'false,false,true,true': [1.338, 2, 17], 'false,false,true,false': [0.0, 217, 0], 'false,false,false,true': [4.338, 77, 25], 'false,false,false,false': [3.127, 28, 15]}], ['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(A, D)', 'true,false': 'tweets(A, E)', 'false': 'follows(F, A)', 'false,true': 'follows(F, G), recursion_accounttype(G, B)', 'false,false': 'follows(A, H)', 'false,false,true': 'follows(I, H), recursion_accounttype(I, B)', 'false,false,false': 'tweets(A, J)'}, {'true,true': [0.166, 2, 70], 'true,false,true': [0.258, 1, 13], 'true,false,false': [0.816, 1, 2], 'false,true,true': [0.093, 0, 23], 'false,true,false': [0.0, 213, 0], 'false,false,true,true': [1.545, 1, 37], 'false,false,true,false': [0.122, 77, 0], 'false,false,false,true': [1.414, 4, 4], 'false,false,false,false': [2.133, 13, 7]}], ['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(C, D), follows(D, C)', 'false': 'follows(E, A)', 'false,true': 'follows(F, E), follows(F, A)', 'false,true,false': 'tweets(A, G), follows(H, E)', 'false,false': 'follows(A, I)', 'false,false,true': 'follows(J, I), recursion_accounttype(J, B)', 'false,false,false': 'tweets(A, K)'}, {'true,true': [0.111, 1, 83], 'true,false': [0.798, 1, 2], 'false,true,true': [0.073, 128, 2], 'false,true,false,true': [1.9, 64, 19], 'false,true,false,false': [0.939, 22, 2], 'false,false,true,true': [1.592, 1, 37], 'false,false,true,false': [0.111, 68, 0], 'false,false,false,true': [1.549, 6, 4], 'false,false,false,false': [1.797, 6, 7]}], ['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'false': 'follows(E, A)', 'false,true': 'follows(E, F), recursion_accounttype(F, B)', 'false,false': 'follows(A, G)', 'false,false,true': 'follows(H, G), recursion_accounttype(H, B)', 'false,false,false': 'tweets(A, I)'}, {'true,true': [0.12, 0, 83], 'true,false': [0.853, 1, 2], 'false,true,true': [0.093, 0, 23], 'false,true,false': [0.045, 203, 0], 'false,false,true,true': [1.536, 1, 37], 'false,false,true,false': [0.104, 74, 0], 'false,false,false,true': [1.633, 8, 4], 'false,false,false,false': [2.245, 18, 7]}], ['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(A, D)', 'false': 'follows(E, A)', 'false,true': 'follows(E, F), recursion_accounttype(F, B)', 'false,true,true': 'follows(E, G), follows(G, A)', 'false,false': 'follows(A, H)', 'false,false,true': 'follows(I, H), recursion_accounttype(I, B)', 'false,false,false': 'tweets(A, J)'}, {'true,true': [0.168, 0, 70], 'true,false': [0.244, 1, 15], 'false,true,true,true': [1.181, 5, 2], 'false,true,true,false': [0.987, 1, 21], 'false,true,false': [0.043, 195, 0], 'false,false,true,true': [0.804, 0, 37], 'false,false,true,false': [0.071, 77, 0], 'false,false,false,true': [1.491, 5, 4], 'false,false,false,false': [1.984, 9, 7]}], ['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(A, D), follows(D, C)', 'true,true': 'recursion_accounttype(D, B)', 'true,true,false': 'follows(D, A), tweets(A, E)', 'false': 'follows(F, A)', 'false,false': 'follows(A, G), recursion_accounttype(G, B)', 'false,false,true': 'follows(G, H), recursion_accounttype(H, B)', 'false,false,false': 'follows(A, I), follows(I, J)'}, {'true,true,true': [0.0, 0, 27], 'true,true,false,true': [0.964, 1, 13], 'true,true,false,false': [0.0, 0, 14], 'true,false': [0.147, 0, 31], 'false,true': [0.095, 217, 23], 'false,false,true,true': [0.011, 0, 7], 'false,false,true,false': [0.816, 2, 1], 'false,false,false,true': [2.049, 83, 25], 'false,false,false,false': [2.684, 21, 15]}], ['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(A, D), follows(E, C)', 'false': 'follows(F, A)', 'false,true': 'follows(F, G), follows(G, A)', 'false,true,false': 'follows(A, H), follows(F, H)', 'false,false': 'follows(A, I)', 'false,false,true': 'follows(J, I), recursion_accounttype(J, B)', 'false,false,false': 'tweets(A, K)'}, {'true,true': [0.119, 1, 68], 'true,false': [0.107, 0, 17], 'false,true,true': [0.079, 159, 2], 'false,true,false,true': [1.27, 63, 12], 'false,true,false,false': [0.782, 21, 9], 'false,false,true,true': [0.668, 0, 37], 'false,false,true,false': [0.092, 73, 0], 'false,false,false,true': [1.713, 11, 4], 'false,false,false,false': [2.16, 14, 7]}], ['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(A, C), tweets(A, D)', 'true,true': 'follows(E, A), follows(E, C)', 'true,true,true': 'tweets(E, D)', 'false': 'follows(F, A)', 'false,true': 'follows(G, F), follows(G, A)', 'false,false': 'follows(A, H), recursion_accounttype(H, B)', 'false,false,false': 'follows(A, I)'}, {'true,true,true,true': [0.982, 1, 32], 'true,true,true,false': [0.818, 1, 2], 'true,true,false': [0.017, 0, 12], 'true,false': [0.117, 0, 39], 'false,true,true': [0.056, 141, 2], 'false,true,false': [0.136, 102, 21], 'false,false,true': [0.068, 0, 8], 'false,false,false,true': [1.731, 62, 29], 'false,false,false,false': [2.686, 21, 11]}]]
[{'': [0.011492698756084153, 0.15603352909294843], 'false': [0.09475673724224444, 0.21760000000000082], 'false,false': [-2.220446049250313e-16, 0.20234080539575564], 'false,false,false': [0.18625624938731603, 0.2320047590719805], 'false,true': [0.07360000000000064, -2.266705341943028e-16], 'false,true,true': [0.1874999999999999, -2.0898315757650005e-16], 'true': [0.020823902218199193, 9.109522253334617e-17], 'true,true': [1.7763568394002505e-15, 0.09876543209876527]}, {'': [4.0778990013065784e-05, 0.1283603223087333], 'false': [0.059401324576012667, 0.1139473397377247], 'false,false': [0.048470703852019306, 0.1991174007125235], 'false,false,false': [0.16622124785318904, 0.22369782932831117], 'false,true': [0.0, 0.08274673151020609], 'false,true,false': [0.11106961492812495, 0.0005034715476790463], 'false,false,true': [0.0524691358024694, -4.337615538070379e-17]}, {'': [0.0226372376046699, 0.11044920809727636], 'false': [0.0598829263435204, 0.101848629721607], 'false,false': [0.03215075458576161, 0.198505786912975], 'false,false,false': [0.18452846968928502, 0.22740116538007807], 'false,true': [0.00020901175989333312, 0.20954408300862237], 'false,false,true': [0.09418282548476464, -6.139482163825751e-17], 'true': [0.014046859760413595, 0.05859374999999997], 'true,true': [0.03443877551020364, 0.0001124426500347851]}, {'': [0.04303090148826787, 0.10058703046010102], 'false': [0.027662149746292164, 0.20350407362654732], 'false,false': [0.19423633327886924, 0.23852040816326545], 'false,false,false': [0.2499999999999999, 0.22750000000000012], 'false,false,true': [0.0628111911488682, 0.00019226865724754404], 'true': [0.027455057133845908, 0.10380622837370246], 'true,false': [0.0663265306122449, 0.22222222222222224], 'false,true': [0.0003757206426443167, -8.548196058146745e-17]}, {'': [0.0226426985697261, 0.08140758613421042], 'false': [0.023661361457129448, 0.16593341824317892], 'false,false': [0.14477911994133194, 0.251695426414453], 'false,false,false': [0.23999999999999994, 0.24852071005917148], 'false,false,true': [0.06667107360128739, 0.00018108712058929806], 'false,true': [0.005397930849462914, 0.04350401654179798], 'false,true,false': [0.043475960872299206, 0.036765754829505094], 'true': [0.012235466702550147, 0.21228435066682208]}, {'': [0.011484849204502906, 0.062141670685598956], 'false': [0.017804517368158895, 0.12509684243327898], 'false,false': [0.09638711571346578, 0.20899986107457147], 'false,false,false': [0.22222222222222213, 0.20160000000000008], 'false,false,true': [0.06207481211985145, 0.00014651427296606865], 'false,true': [0.00037411819840593236, 1.0104681211679125e-05], 'true': [0.00017267444583448163, 0.24265192098013436]}, {'': [0.01175863217366737, 0.05393290600634036], 'false': [0.023203752450557977, 0.094948740586211], 'false,false': [0.05996718265771757, 0.24638936309822823], 'false,false,false': [0.24691358024691365, 0.24609374999999992], 'false,false,true': [0.01745527975094781, 6.477363232894094e-05], 'false,true': [0.15808546866948958, 9.563179688440662e-06], 'false,true,true': [0.19927986163541944, 0.044245445871854486], 'true': [0.0004015700748522644, 0.059628285220806]}, {'': [0.01211650541103113, 0.03969614779178422], 'false': [0.00910039131800557, 0.08568744255228883], 'false,false': [0.15512844402116552, 0.0798811365889251], 'false,false,true': [1.6688576964826928e-05, 0.2222222222222222], 'false,false,false': [0.03887482789565084, 0.20006590573291513], 'true': [0.017967240437016002, 0.0006961112618086206], 'true,true': [-3.700743415417188e-17, 0.03443877551020409], 'true,true,false': [0.0663265306122449, 0.0]}, {'': [0.011753912518842089, 0.03906288799778785], 'false': [0.013009552980527176, 0.08419091433013956], 'false,false': [0.0411102745896183, 0.21249038242413268], 'false,false,false': [0.19555555555555562, 0.22222222222222218], 'false,false,true': [0.012042977603098606, 0.0001162679742711145], 'false,true': [0.0062460898235218365, 0.021776767550914688], 'false,true,false': [0.021508186187593405, 0.02037020846826227], 'true': [0.014166189487681408, 0.0006787674921578554]}, {'': [0.022696166495201158, 0.0337584937104086], 'false': [0.01046414532429706, 0.07819651492185524], 'false,false': [0.0005725611261720477, 0.08308126198482246], 'false,false,false': [0.03290995161256561, 0.22553731312576927], 'true': [0.03989152204564095, 0.0003529420444030339], 'true,true': [0.05236562105256107, 2.3734088408074634e-05], 'true,true,true': [0.029194925349362265, 0.22321183134745767], 'false,true': [0.0031073326574204384, 0.01838671218223303]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
0;true;tweets(A, D), follows(A, C).;true;true
0;true,true;follows(A, E), follows(E, C).;true;true
0;false;follows(F, A).;true;true
0;false,true;follows(F, G), recursion_accounttype(G, B).;true;true
0;false,true,true;follows(A, H), recursion_accounttype(H, B).;true;true
0;false,false;follows(A, I), recursion_accounttype(I, B).;true;true
1;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
1;false;follows(A, D), recursion_accounttype(D, B).;true;true
1;false,true;follows(E, A), follows(D, E).;true;true
1;false,true,false;follows(D, F), follows(F, D).;true;true
1;false,false;follows(G, A).;true;true
1;false,false,true;follows(G, H), recursion_accounttype(H, B).;true;true
2;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
2;true;follows(A, D).;true;true
2;true,true;follows(D, C), recursion_accounttype(D, B).;true;true
2;false;follows(A, E), recursion_accounttype(E, B).;true;true
2;false,true;follows(E, F), recursion_accounttype(F, B).;true;true
2;false,false;follows(G, A).;true;true
2;false,false,true;follows(G, H), recursion_accounttype(H, B).;true;true
3;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
3;false;follows(F, A).;true;true
3;false,true;follows(F, G), recursion_accounttype(G, B).;true;true
3;false,false;follows(A, H).;true;true
3;false,false,true;follows(I, H), recursion_accounttype(I, B).;true;true
4;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
4;false;follows(E, A).;true;true
4;false,false;follows(A, I).;true;true
4;false,false,true;follows(J, I), recursion_accounttype(J, B).;true;true
5;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
5;true;follows(D, C), recursion_accounttype(D, B).;true;true
5;false;follows(E, A).;true;true
5;false,true;follows(E, F), recursion_accounttype(F, B).;true;true
5;false,false;follows(A, G).;true;true
5;false,false,true;follows(H, G), recursion_accounttype(H, B).;true;true
6;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
6;true;follows(A, D).;true;true
6;false;follows(E, A).;true;true
6;false,true;follows(E, F), recursion_accounttype(F, B).;true;true
6;false,false;follows(A, H).;true;true
6;false,false,true;follows(I, H), recursion_accounttype(I, B).;true;true
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
7;true;follows(A, D), follows(D, C).;true;true
7;true,true;recursion_accounttype(D, B).;true;true
7;true,true,false;follows(D, A), tweets(A, E).;true;true
7;false;follows(F, A).;true;true
7;false,false;follows(A, G), recursion_accounttype(G, B).;true;true
7;false,false,true;follows(G, H), recursion_accounttype(H, B).;true;true
8;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
8;true;follows(A, D), follows(E, C).;true;true
8;false;follows(F, A).;true;true
8;false,false;follows(A, I).;true;true
8;false,false,true;follows(J, I), recursion_accounttype(J, B).;true;true
9;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
9;true;follows(A, C), tweets(A, D).;true;true
9;true,true;follows(E, A), follows(E, C).;true;true
9;false;follows(F, A).;true;true
9;false,false;follows(A, H), recursion_accounttype(H, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(A, C) )
%   | then return 0.8164822684328454;  // std dev = 0.200, 48.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=46 */
%   | else return 0.8581489350995122;  // std dev = 5.96e-08, 39.000 (wgt'ed) examples reached here.  /* #pos=39 */
%   else if ( follows(E, A) )
%   | then if ( follows(F, E), follows(F, A) )
%   | | then return -0.1269256917661594;  // std dev = 0.121, 134.000 (wgt'ed) examples reached here.  /* #neg=132 #pos=2 */
%   | | else if ( follows(E, G), recursion_accounttype(G, B) )
%   | | | then return 0.8126943896449667;  // std dev = 0.977, 22.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=21 */
%   | | | else return -0.14185106490048766;  // std dev = 7.88e-08, 84.000 (wgt'ed) examples reached here.  /* #neg=84 */
%   | else if ( follows(A, H) )
%   | | then if ( follows(I, H), recursion_accounttype(I, B) )
%   | | | then return 0.8068668838174602;  // std dev = 1.377, 39.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=37 */
%   | | | else return -0.14185106490048766;  // std dev = 6.32e-08, 62.000 (wgt'ed) examples reached here.  /* #neg=62 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.3581489350995123;  // std dev = 1.414, 8.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=4 */
%   | | | else return 0.29564893509951234;  // std dev = 1.984, 16.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=7 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(D, C) )
%   | then if ( recursion_accounttype(D, B) )
%   | | then return 0.7244727568459688;  // std dev = 0.026, 40.000 (wgt'ed) examples reached here.  /* #pos=40 */
%   | | else return 0.5933858858066192;  // std dev = 0.336, 23.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=20 */
%   | else return 0.723472887918966;  // std dev = 0.021, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   else if ( follows(E, A) )
%   | then if ( follows(E, F), follows(F, A) )
%   | | then return -0.11216587704177895;  // std dev = 0.121, 134.000 (wgt'ed) examples reached here.  /* #neg=132 #pos=2 */
%   | | else if ( follows(E, G), recursion_accounttype(G, B) )
%   | | | then return 0.683100856113155;  // std dev = 0.977, 22.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=21 */
%   | | | else return -0.12544463852839136;  // std dev = 0.000, 105.000 (wgt'ed) examples reached here.  /* #neg=105 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0.6185952159767028;  // std dev = 0.314, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | else if ( tweets(A, I), follows(A, J) )
%   | | | then return 0.0848383858034623;  // std dev = 2.876, 61.000 (wgt'ed) examples reached here.  /* #neg=46 #pos=15 */
%   | | | else return 0.15317094780632318;  // std dev = 3.772, 75.000 (wgt'ed) examples reached here.  /* #neg=50 #pos=25 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), follows(C, D) )
%   then if ( recursion_accounttype(D, B) )
%   | then if ( follows(A, D) )
%   | | then if ( follows(D, E), follows(F, A) )
%   | | | then return 0.5717297653239319;  // std dev = 0.106, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | | | else return 0.3995420460587493;  // std dev = 1.295, 11.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=8 */
%   | | else return 0.6358406102688906;  // std dev = 0.077, 55.000 (wgt'ed) examples reached here.  /* #pos=55 */
%   | else return -0.1186445194270371;  // std dev = 0.718, 235.000 (wgt'ed) examples reached here.  /* #neg=234 #pos=1 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.5621754637783337;  // std dev = 0.056, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | else if ( follows(H, A), tweets(A, I) )
%   | | then if ( follows(H, J), follows(J, A) )
%   | | | then return -0.11515926665624722;  // std dev = 1.05e-08, 25.000 (wgt'ed) examples reached here.  /* #neg=25 */
%   | | | else return 0.08419403865611204;  // std dev = 0.822, 7.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=2 */
%   | | else if ( follows(A, K), tweets(A, L) )
%   | | | then return 0.2887997282433901;  // std dev = 0.848, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return 0.14935424881911855;  // std dev = 2.877, 39.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=14 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.42315878270277874;  // std dev = 0.157, 85.000 (wgt'ed) examples reached here.  /* #pos=85 */
%   else if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E) )
%   | | then if ( follows(F, A) )
%   | | | then return 0.5292829489016436;  // std dev = 0.371, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.48396499103539514;  // std dev = 0.054, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return -0.03636795449655522;  // std dev = 1.060, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | else if ( follows(G, A) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.4636972291770085;  // std dev = 0.406, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | | else return -0.10506096395920984;  // std dev = 0.106, 218.000 (wgt'ed) examples reached here.  /* #neg=218 */
%   | | else if ( tweets(A, I), follows(A, J) )
%   | | | then return 0.04630828337082694;  // std dev = 2.379, 61.000 (wgt'ed) examples reached here.  /* #neg=46 #pos=15 */
%   | | | else return 0.07569380709208091;  // std dev = 3.564, 79.000 (wgt'ed) examples reached here.  /* #neg=54 #pos=25 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.313287063380302;  // std dev = 0.110, 84.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=83 */
%   | else return -0.18898035551563808;  // std dev = 0.981, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   else if ( follows(E, A) )
%   | then if ( follows(E, F), recursion_accounttype(F, B) )
%   | | then if ( follows(F, E), follows(A, F) )
%   | | | then return 0.19230927907095915;  // std dev = 0.529, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return 0.3836883420877056;  // std dev = 0.577, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | else return -0.09420600385694353;  // std dev = 0.062, 250.000 (wgt'ed) examples reached here.  /* #neg=250 */
%   | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | then if ( tweets(A, H) )
%   | | | then return 0.3665048988550749;  // std dev = 0.049, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.21168669364841608;  // std dev = 0.713, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( follows(A, I) )
%   | | | then return 0.05725742365544019;  // std dev = 3.193, 103.000 (wgt'ed) examples reached here.  /* #neg=74 #pos=29 */
%   | | | else return 0.1061758773369303;  // std dev = 2.662, 31.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=11 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(D, C) )
%   | | then return 0.2642161705791165;  // std dev = 0.098, 38.000 (wgt'ed) examples reached here.  /* #pos=38 */
%   | | else if ( follows(C, E), follows(E, A) )
%   | | | then return 0.2724080339927783;  // std dev = 0.058, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | | else return 0.17409014432012462;  // std dev = 0.952, 13.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   | else if ( follows(C, F), follows(F, C) )
%   | | then return 0.3486398360616784;  // std dev = 0.122, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | else return 0.3071739799381005;  // std dev = 0.095, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.25982831529083966;  // std dev = 0.102, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | else if ( follows(H, A) )
%   | | then return -0.06223281388578495;  // std dev = 0.110, 227.000 (wgt'ed) examples reached here.  /* #neg=210 #pos=17 */
%   | | else if ( follows(A, I), tweets(A, J) )
%   | | | then return 0.0033128317236524856;  // std dev = 2.396, 73.000 (wgt'ed) examples reached here.  /* #neg=58 #pos=15 */
%   | | | else return 0.05247251970788375;  // std dev = 3.504, 79.000 (wgt'ed) examples reached here.  /* #neg=54 #pos=25 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( tweets(C, D), follows(C, E) )
%   | then if ( follows(E, A), tweets(A, D) )
%   | | then if ( follows(C, A) )
%   | | | then return 0.21546874663384932;  // std dev = 0.057, 33.000 (wgt'ed) examples reached here.  /* #pos=33 */
%   | | | else return 0.02186467570445844;  // std dev = 1.302, 13.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=10 */
%   | | else return 0.23211589428088597;  // std dev = 0.222, 30.000 (wgt'ed) examples reached here.  /* #pos=30 */
%   | else return 0.30675494039930185;  // std dev = 0.326, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( follows(F, A), follows(A, F) )
%   | then return -0.046876674311153145;  // std dev = 0.109, 155.000 (wgt'ed) examples reached here.  /* #neg=140 #pos=15 */
%   | else if ( tweets(A, G) )
%   | | then if ( tweets(H, G), recursion_accounttype(H, B) )
%   | | | then return 0.3778928138725732;  // std dev = 1.655, 39.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=38 */
%   | | | else return -0.14154164336655456;  // std dev = 0.623, 82.000 (wgt'ed) examples reached here.  /* #neg=82 */
%   | | else if ( follows(I, A), tweets(I, J) )
%   | | | then return 0.005099078088678486;  // std dev = 0.528, 10.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=3 */
%   | | | else return 0.06713152308016382;  // std dev = 2.994, 65.000 (wgt'ed) examples reached here.  /* #neg=43 #pos=22 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(C, D) )
%   | then if ( recursion_accounttype(D, B) )
%   | | then return 0.18489866294170887;  // std dev = 0.105, 38.000 (wgt'ed) examples reached here.  /* #pos=38 */
%   | | else return 0.1509761051966541;  // std dev = 0.178, 30.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=29 */
%   | else if ( follows(E, A), follows(E, C) )
%   | | then return 0.16035163986329384;  // std dev = 0.056, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else return -0.06659705870925178;  // std dev = 0.878, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   else if ( follows(F, A) )
%   | then return -0.04496249119310757;  // std dev = 0.120, 237.000 (wgt'ed) examples reached here.  /* #neg=214 #pos=23 */
%   | else if ( follows(A, G) )
%   | | then if ( follows(H, G), recursion_accounttype(H, B) )
%   | | | then return 0.39069402695699995;  // std dev = 1.443, 38.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=37 */
%   | | | else return -0.13600317465776451;  // std dev = 0.164, 60.000 (wgt'ed) examples reached here.  /* #neg=60 */
%   | | else if ( tweets(A, I) )
%   | | | then return 0.01355240912247301;  // std dev = 1.479, 13.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=4 */
%   | | | else return 0.0026885290113989554;  // std dev = 2.227, 24.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=7 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), follows(C, D) )
%   then if ( recursion_accounttype(D, B) )
%   | then return 0.21586008724684122;  // std dev = 0.138, 122.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=121 */
%   | else return -0.08862556096091186;  // std dev = 0.054, 271.000 (wgt'ed) examples reached here.  /* #neg=270 #pos=1 */
%   else if ( tweets(A, E) )
%   | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | then if ( follows(G, A) )
%   | | | then return 0.13145654256452083;  // std dev = 0.454, 17.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=16 */
%   | | | else return 0.5625419122351047;  // std dev = 0.219, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return -0.12660209868525346;  // std dev = 0.082, 40.000 (wgt'ed) examples reached here.  /* #neg=40 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | | then return 0.25192737296182804;  // std dev = 0.131, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return -0.09947155431295909;  // std dev = 0.003, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else if ( follows(A, J) )
%   | | | then return 0.0973029184415595;  // std dev = 0.757, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | | else return 0.09935802653728715;  // std dev = 2.068, 18.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=7 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.14270036817507956;  // std dev = 0.405, 78.000 (wgt'ed) examples reached here.  /* #pos=78 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E), follows(F, D) )
%   | | then if ( follows(A, G) )
%   | | | then return 0.1187875019037972;  // std dev = 0.038, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.05074752359043089;  // std dev = 0.968, 14.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=13 */
%   | | else return 0.1553301835885101;  // std dev = 0.031, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | | then return 0.20362928134139296;  // std dev = 1.006, 18.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=17 */
%   | | | else return -0.06794463376758929;  // std dev = 0.075, 228.000 (wgt'ed) examples reached here.  /* #neg=228 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return -0.0014762615281303168;  // std dev = 1.886, 99.000 (wgt'ed) examples reached here.  /* #neg=74 #pos=25 */
%   | | | else return 0.025920382739123195;  // std dev = 2.628, 43.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=15 */


Results
   AUC ROC   = 0.994076
   AUC PR    = 0.406967
   CLL	      = -0.10491
   Precision = 0.37963 at threshold = 0.5
   Recall    = 0.97619
   F1        = 0.546667


Total learning time: 35.27725124359131 seconds
Total inference time: 22.357 seconds
AUC ROC: 0.994076


Results scoring model
   AUC ROC   = 0.994027
   AUC PR    = 0.383848
   CLL	      = -0.118493
   Precision = 0.377551 at threshold = 0.5
   Recall    = 0.948718
   F1        = 0.540146


Total scoring time: 28.005 seconds
Refined model CLL: -0.118493


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.994076
   AUC PR    = 0.406967
   CLL	      = -0.10491
   Precision = 0.37963 at threshold = 0.5
   Recall    = 0.97619
   F1        = 0.546667


Total learning time: 116.27278118515014 seconds
Total inference time: 22.357 seconds
AUC ROC: 0.994076
Total revision time: 116.27278118515014
Best scored revision CLL: -0.118493


Dataset: 7_yeast_twitter, Fold: 2, Type: Transfer (trRDN-B), Time: 00:07:38
{'AUC ROC': 0.994076, 'AUC PR': 0.406967, 'CLL': -0.10491, 'Precision': [0.37963, 0.5], 'Recall': 0.97619, 'F1': 0.546667, 'Learning time': 116.27278118515014, 'Inference time': 22.357, 'parameter': {'AUC ROC': 0.993578, 'AUC PR': 0.369127, 'CLL': -0.100655, 'Precision': [0.35, 0.5], 'Recall': 1.0, 'F1': 0.518519, 'Learning time': 25.491529941558838, 'Inference time': 20.78}}


WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.8581489350995121;  // std dev = 0.000, 85.000 (wgt'ed) examples reached here.  /* #pos=85 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), follows(E, A) )
%   | | then if ( follows(D, F), follows(F, A) )
%   | | | then return -0.13267675297388215;  // std dev = 0.995, 109.000 (wgt'ed) examples reached here.  /* #neg=108 #pos=1 */
%   | | | else return -0.06492798797741087;  // std dev = 0.961, 13.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=1 */
%   | | else if ( follows(D, G), recursion_accounttype(G, B) )
%   | | | then return 0.8126943896449667;  // std dev = 0.977, 22.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=21 */
%   | | | else return -0.14185106490048766;  // std dev = 7.30e-08, 75.000 (wgt'ed) examples reached here.  /* #neg=75 */
%   | else if ( follows(A, H), follows(H, I) )
%   | | then if ( recursion_accounttype(I, B) )
%   | | | then return 0.8581489350995116;  // std dev = 2.23e-07, 33.000 (wgt'ed) examples reached here.  /* #pos=33 */
%   | | | else return -0.14185106490048766;  // std dev = 5.77e-08, 55.000 (wgt'ed) examples reached here.  /* #neg=55 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.09814893509951236;  // std dev = 2.135, 25.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=6 */
%   | | | else return 0.26723984419042146;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=9 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7194734122109537;  // std dev = 2.80e-07, 85.000 (wgt'ed) examples reached here.  /* #pos=85 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, D), follows(A, E) )
%   | | | then return 0.41938706798055475;  // std dev = 1.076, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | | | else return 0.6999201469291042;  // std dev = 0.869, 20.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=19 */
%   | | else return -0.12633927930644412;  // std dev = 0.026, 219.000 (wgt'ed) examples reached here.  /* #neg=219 */
%   | else if ( follows(A, F), recursion_accounttype(F, B) )
%   | | then return 0.7194734122109545;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( tweets(A, G), follows(A, H) )
%   | | | then return 0.06490912995028836;  // std dev = 2.957, 67.000 (wgt'ed) examples reached here.  /* #neg=52 #pos=15 */
%   | | | else return 0.17211670506426097;  // std dev = 3.742, 73.000 (wgt'ed) examples reached here.  /* #neg=48 #pos=25 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.5553664367462835;  // std dev = 3.72e-07, 85.000 (wgt'ed) examples reached here.  /* #pos=85 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(A, E), follows(A, D) )
%   | | | then return 0.3866109480113053;  // std dev = 1.175, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   | | | else return 0.5826306392589496;  // std dev = 0.197, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | else return -0.11311927138203182;  // std dev = 0.022, 201.000 (wgt'ed) examples reached here.  /* #neg=201 */
%   | else if ( follows(A, F) )
%   | | then if ( follows(G, F), recursion_accounttype(G, B) )
%   | | | then return 0.6781325247377122;  // std dev = 0.458, 37.000 (wgt'ed) examples reached here.  /* #pos=37 */
%   | | | else return -0.14347237542148564;  // std dev = 0.155, 68.000 (wgt'ed) examples reached here.  /* #neg=68 */
%   | | else if ( tweets(A, H) )
%   | | | then return 0.26641188900759644;  // std dev = 1.491, 9.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=4 */
%   | | | else return 0.18475314430844808;  // std dev = 2.068, 18.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=7 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.41751358415831025;  // std dev = 1.33e-07, 85.000 (wgt'ed) examples reached here.  /* #pos=85 */
%   else if ( follows(D, A) )
%   | then if ( follows(A, E), tweets(A, F) )
%   | | then if ( follows(E, G), recursion_accounttype(G, B) )
%   | | | then return 0.442055491773661;  // std dev = 0.789, 19.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=18 */
%   | | | else return -0.09555874932033455;  // std dev = 0.744, 150.000 (wgt'ed) examples reached here.  /* #neg=148 #pos=2 */
%   | | else if ( follows(D, H), follows(H, A) )
%   | | | then return -0.1025364204363432;  // std dev = 0.009, 50.000 (wgt'ed) examples reached here.  /* #neg=50 */
%   | | | else return 0.004190855650563308;  // std dev = 0.818, 15.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=3 */
%   | else if ( tweets(A, I) )
%   | | then if ( tweets(J, I), recursion_accounttype(J, B) )
%   | | | then return 0.5614451115515673;  // std dev = 0.652, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | | | else return -0.13750418550554278;  // std dev = 0.229, 37.000 (wgt'ed) examples reached here.  /* #neg=37 */
%   | | else if ( follows(A, K), follows(K, L) )
%   | | | then return 0.09266134281358465;  // std dev = 1.915, 40.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=14 */
%   | | | else return 0.12053368816627812;  // std dev = 2.335, 25.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=9 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D) )
%   | then return 0.3207118471601501;  // std dev = 0.000, 70.000 (wgt'ed) examples reached here.  /* #pos=70 */
%   | else return 0.2582118471601499;  // std dev = 0.242, 16.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   else if ( follows(E, A) )
%   | then if ( follows(F, E), follows(F, A) )
%   | | then return -0.08772531644548856;  // std dev = 0.085, 136.000 (wgt'ed) examples reached here.  /* #neg=134 #pos=2 */
%   | | else if ( follows(E, G), recursion_accounttype(G, B) )
%   | | | then return 0.3714966245918531;  // std dev = 0.255, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | | else return -0.09478871354612978;  // std dev = 0.031, 81.000 (wgt'ed) examples reached here.  /* #neg=81 */
%   | else if ( tweets(A, H) )
%   | | then if ( tweets(I, H), recursion_accounttype(I, B) )
%   | | | then return 0.4025672615290305;  // std dev = 1.006, 26.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=25 */
%   | | | else return -0.11932560619216627;  // std dev = 0.211, 39.000 (wgt'ed) examples reached here.  /* #neg=39 */
%   | | else if ( follows(A, J) )
%   | | | then return 0.03891408790484243;  // std dev = 2.213, 55.000 (wgt'ed) examples reached here.  /* #neg=39 #pos=16 */
%   | | | else return 0.07513552285847484;  // std dev = 2.160, 21.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=7 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D) )
%   | then return 0.2551722425694897;  // std dev = 0.000, 70.000 (wgt'ed) examples reached here.  /* #pos=70 */
%   | else return 0.2047315562621352;  // std dev = 0.242, 16.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   else if ( follows(A, E), recursion_accounttype(E, B) )
%   | then if ( follows(E, F), recursion_accounttype(F, B) )
%   | | then if ( follows(G, A) )
%   | | | then return 0.39849261268272507;  // std dev = 0.230, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.24114080800203946;  // std dev = 0.194, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else return -0.08321332118921354;  // std dev = 0.892, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | | then return 0.23191554191753955;  // std dev = 1.067, 18.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=17 */
%   | | | else return -0.08723357204966964;  // std dev = 0.038, 206.000 (wgt'ed) examples reached here.  /* #neg=206 */
%   | | else if ( tweets(A, J), follows(A, K) )
%   | | | then return 0.01635681636832783;  // std dev = 1.479, 59.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=15 */
%   | | | else return 0.06257086706490651;  // std dev = 3.236, 75.000 (wgt'ed) examples reached here.  /* #neg=50 #pos=25 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, C), tweets(A, D) )
%   | then if ( tweets(C, D) )
%   | | then if ( follows(A, E), follows(E, C) )
%   | | | then return 0.12867663455145478;  // std dev = 1.660, 37.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=34 */
%   | | | else return 0.0986466045214246;  // std dev = 0.943, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | else return 0.20975771563253576;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else return 0.2171939516567236;  // std dev = 0.059, 39.000 (wgt'ed) examples reached here.  /* #pos=39 */
%   else if ( follows(F, A) )
%   | then if ( follows(G, F), recursion_accounttype(G, B) )
%   | | then return 0.12682153378918223;  // std dev = 0.358, 24.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=21 */
%   | | else return -0.07984863046921059;  // std dev = 0.065, 204.000 (wgt'ed) examples reached here.  /* #neg=202 #pos=2 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0.20177686470616918;  // std dev = 0.061, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( tweets(A, I), follows(A, J) )
%   | | | then return 0.0043615759837275486;  // std dev = 1.624, 59.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=15 */
%   | | | else return 0.06442400932211884;  // std dev = 3.196, 70.000 (wgt'ed) examples reached here.  /* #neg=45 #pos=25 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), follows(A, D) )
%   | then if ( recursion_accounttype(D, B), follows(D, A) )
%   | | then return 0.18702050793622033;  // std dev = 0.023, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | | else if ( recursion_accounttype(D, B), follows(A, C) )
%   | | | then return -0.0640784717466833;  // std dev = 0.862, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | else return 0.14798355574328867;  // std dev = 0.976, 29.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=28 */
%   | else return 0.18884189376942837;  // std dev = 0.042, 31.000 (wgt'ed) examples reached here.  /* #pos=31 */
%   else if ( follows(E, A) )
%   | then return -0.043987944144767296;  // std dev = 0.113, 217.000 (wgt'ed) examples reached here.  /* #neg=194 #pos=23 */
%   | else if ( follows(A, F) )
%   | | then if ( follows(G, F), recursion_accounttype(G, B) )
%   | | | then return 0.3288353921975421;  // std dev = 1.244, 38.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=37 */
%   | | | else return -0.1298576871547948;  // std dev = 0.410, 93.000 (wgt'ed) examples reached here.  /* #neg=93 */
%   | | else if ( tweets(A, H) )
%   | | | then return 0.13081880312284408;  // std dev = 1.106, 9.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=4 */
%   | | | else return 0.03457681064951482;  // std dev = 2.160, 21.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=7 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then return 0.1492573399103766;  // std dev = 0.118, 70.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=69 */
%   | else if ( follows(C, E), follows(E, A) )
%   | | then if ( recursion_accounttype(E, B) )
%   | | | then return 0.15543261260977292;  // std dev = 0.012, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return -0.0061076614490292265;  // std dev = 0.919, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | else return 0.15479893486835106;  // std dev = 0.013, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   else if ( follows(F, A) )
%   | then return -0.03816245203930093;  // std dev = 0.108, 215.000 (wgt'ed) examples reached here.  /* #neg=192 #pos=23 */
%   | else if ( tweets(A, G), follows(A, H) )
%   | | then if ( tweets(I, G), recursion_accounttype(I, B) )
%   | | | then return 0.08221883888635749;  // std dev = 1.862, 24.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=21 */
%   | | | else return -0.0861464435423979;  // std dev = 0.044, 53.000 (wgt'ed) examples reached here.  /* #neg=53 */
%   | | else if ( follows(A, J) )
%   | | | then return 0.07847172149011108;  // std dev = 1.602, 37.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=16 */
%   | | | else return 0.03888784322775741;  // std dev = 2.452, 31.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=11 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(D, C) )
%   | | then return 0.14434132860578083;  // std dev = 0.070, 38.000 (wgt'ed) examples reached here.  /* #pos=38 */
%   | | else if ( follows(E, A), follows(E, C) )
%   | | | then return 0.06556899647334323;  // std dev = 0.959, 12.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=11 */
%   | | | else return 0.1424892337846891;  // std dev = 0.025, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else if ( follows(F, A) )
%   | | then return 0.32199183135960013;  // std dev = 0.240, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return 0.12188445959509275;  // std dev = 0.118, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.14219481677224696;  // std dev = 0.025, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | else if ( follows(H, A) )
%   | | then return -0.05055043542115881;  // std dev = 0.089, 241.000 (wgt'ed) examples reached here.  /* #neg=224 #pos=17 */
%   | | else if ( follows(A, I) )
%   | | | then return 0.015537927979665776;  // std dev = 2.008, 97.000 (wgt'ed) examples reached here.  /* #neg=68 #pos=29 */
%   | | | else return -0.0013305378086090082;  // std dev = 2.508, 35.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=11 */


Results
   AUC ROC   = 0.994541
   AUC PR    = 0.436468
   CLL	      = -0.105233
   Precision = 0.384375 at threshold = 0.5
   Recall    = 0.97619
   F1        = 0.55157


Total learning time: 43.70164394378662 seconds
Total inference time: 107.602 seconds
AUC ROC: 0.994541


Dataset: 7_yeast_twitter, Fold: 2, Type: Scratch (RDN-B), Time: 00:10:10
{'AUC ROC': 0.994541, 'AUC PR': 0.436468, 'CLL': -0.105233, 'Precision': [0.384375, 0.5], 'Recall': 0.97619, 'F1': 0.55157, 'Learning time': 43.70164394378662, 'Inference time': 107.602}


Starting fold 1

Target train facts examples: 1580
Target train pos examples: 126
Target train neg examples: 16128

Target test facts examples: 1562
Target test pos  examples: 156
Target test neg examples: 24648

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then return 0.8581489350995127;  // std dev = 0.000, 67.000 (wgt'ed) examples reached here.  /* #pos=67 */
%   | else if ( follows(A, E), follows(E, C) )
%   | | then return 0.7043027812533584;  // std dev = 0.361, 13.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=11 */
%   | | else return 0.8581489350995122;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(F, A) )
%   | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | then return 0.8581489350995121;  // std dev = 8.43e-08, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | | else return -0.14185106490048832;  // std dev = 0.000, 186.000 (wgt'ed) examples reached here.  /* #neg=186 */
%   | else if ( tweets(A, H) )
%   | | then if ( tweets(I, H), recursion_accounttype(I, B) )
%   | | | then return 0.7812258581764353;  // std dev = 0.961, 13.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   | | | else return -0.1418510649004877;  // std dev = 2.36e-08, 27.000 (wgt'ed) examples reached here.  /* #neg=27 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.19148226843284558;  // std dev = 1.414, 9.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=3 */
%   | | | else return 0.15814893509951236;  // std dev = 2.049, 20.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=6 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(A, C) )
%   | then if ( follows(C, E), follows(E, A) )
%   | | then return 0.6786570856803426;  // std dev = 0.198, 49.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=47 */
%   | | else return 0.5528067455442877;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | else return 0.730465937325718;  // std dev = 0.079, 30.000 (wgt'ed) examples reached here.  /* #pos=30 */
%   else if ( follows(F, A) )
%   | then if ( follows(F, G), follows(G, A) )
%   | | then return -0.10449625710510158;  // std dev = 0.131, 121.000 (wgt'ed) examples reached here.  /* #neg=118 #pos=3 */
%   | | else if ( follows(F, H), recursion_accounttype(H, B) )
%   | | | then return 0.7194734122109543;  // std dev = 7.30e-08, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | | else return -0.12544463852839116;  // std dev = 6.66e-08, 63.000 (wgt'ed) examples reached here.  /* #neg=63 */
%   | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | then return 0.7604969749842877;  // std dev = 0.089, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.10085274444888036;  // std dev = 2.225, 30.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=8 */
%   | | | else return 0.14152460700845362;  // std dev = 2.356, 29.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=9 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.5676681519714318;  // std dev = 0.119, 82.000 (wgt'ed) examples reached here.  /* #pos=82 */
%   else if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(E, D) )
%   | | then return 0.5563493586844944;  // std dev = 0.008, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else return 0.19102147650094606;  // std dev = 1.158, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | else if ( follows(F, A) )
%   | | then if ( follows(G, F), recursion_accounttype(G, B) )
%   | | | then return 0.5923077230193976;  // std dev = 0.286, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | | else return -0.11378331732424177;  // std dev = 0.014, 211.000 (wgt'ed) examples reached here.  /* #neg=211 */
%   | | else if ( tweets(A, H) )
%   | | | then return 0.0864888697850672;  // std dev = 2.185, 34.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=9 */
%   | | | else return 0.18155727182855672;  // std dev = 2.257, 22.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=8 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.4304577342667185;  // std dev = 0.133, 72.000 (wgt'ed) examples reached here.  /* #pos=72 */
%   | else return 0.3141199433324726;  // std dev = 0.966, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(A, F) )
%   | | then return 0.41604889028449576;  // std dev = 0.036, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else return 0.3007485266616851;  // std dev = 0.314, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | else if ( follows(G, A) )
%   | | then if ( follows(H, G), recursion_accounttype(H, B) )
%   | | | then return 0.4491661862046581;  // std dev = 0.315, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | | else return -0.10279503029814334;  // std dev = 0.013, 198.000 (wgt'ed) examples reached here.  /* #neg=198 */
%   | | else if ( follows(A, I), follows(I, J) )
%   | | | then return 0.07137271134479257;  // std dev = 2.175, 31.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=8 */
%   | | | else return 0.10431604327479269;  // std dev = 2.337, 28.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=9 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(C, D), tweets(A, D) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( follows(C, E), follows(A, C) )
%   | | | then return 0.29381035850657167;  // std dev = 0.985, 33.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=32 */
%   | | | else return 0.10215134846168256;  // std dev = 1.509, 13.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=10 */
%   | | else return 0.3316252607811678;  // std dev = 0.045, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else return 0.3348906135859294;  // std dev = 0.074, 27.000 (wgt'ed) examples reached here.  /* #pos=27 */
%   else if ( follows(F, A) )
%   | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | then return 0.20898045969730367;  // std dev = 0.316, 27.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=23 */
%   | | else return -0.09362401136172503;  // std dev = 0.012, 210.000 (wgt'ed) examples reached here.  /* #neg=210 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0.44181421382599206;  // std dev = 0.193, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( tweets(A, I) )
%   | | | then return 0.15281062275155044;  // std dev = 1.979, 24.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=9 */
%   | | | else return 0.04033118421286567;  // std dev = 2.422, 30.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=8 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, C) )
%   | then if ( recursion_accounttype(D, B) )
%   | | then return 0.2661924188185862;  // std dev = 0.073, 43.000 (wgt'ed) examples reached here.  /* #pos=43 */
%   | | else if ( follows(A, C), follows(D, A) )
%   | | | then return 0.0875863958940907;  // std dev = 1.509, 15.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=12 */
%   | | | else return 0.2626413639498235;  // std dev = 0.033, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else return 0.27023480675190564;  // std dev = 0.102, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   else if ( follows(E, A) )
%   | then return -0.05180580945404265;  // std dev = 0.128, 225.000 (wgt'ed) examples reached here.  /* #neg=202 #pos=23 */
%   | else if ( follows(A, F), follows(F, G) )
%   | | then if ( recursion_accounttype(G, B) )
%   | | | then return 0.48238873112552055;  // std dev = 1.327, 12.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=11 */
%   | | | else return -0.1962976231219544;  // std dev = 0.122, 25.000 (wgt'ed) examples reached here.  /* #neg=25 */
%   | | else if ( tweets(A, H) )
%   | | | then return 0.04511515525193889;  // std dev = 1.385, 14.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=4 */
%   | | | else return 0.10034316622492151;  // std dev = 1.896, 17.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=6 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( tweets(C, D), tweets(A, D) )
%   | then if ( follows(A, E), follows(E, A) )
%   | | then if ( follows(C, E), recursion_accounttype(E, B) )
%   | | | then return 0.21554206382801716;  // std dev = 0.014, 28.000 (wgt'ed) examples reached here.  /* #pos=28 */
%   | | | else return 0.11271473292688487;  // std dev = 1.593, 20.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=17 */
%   | | else return 0.04138136360454754;  // std dev = 0.851, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else return 0.24374776199768847;  // std dev = 0.261, 28.000 (wgt'ed) examples reached here.  /* #pos=28 */
%   else if ( follows(F, A), follows(A, G) )
%   | then if ( follows(G, A), follows(G, F) )
%   | | then return -0.05752074045268673;  // std dev = 0.102, 112.000 (wgt'ed) examples reached here.  /* #neg=105 #pos=7 */
%   | | else return -0.015056678423429976;  // std dev = 0.134, 86.000 (wgt'ed) examples reached here.  /* #neg=69 #pos=17 */
%   | else if ( follows(H, A), recursion_accounttype(H, B) )
%   | | then return 0.22116475291473692;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( follows(A, I), tweets(A, J) )
%   | | | then return 0.09795234037461455;  // std dev = 1.779, 25.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=9 */
%   | | | else return -0.02988872766655022;  // std dev = 2.371, 50.000 (wgt'ed) examples reached here.  /* #neg=42 #pos=8 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, C), tweets(A, D) )
%   | then if ( follows(A, E), follows(E, C) )
%   | | then if ( tweets(C, F), tweets(E, F) )
%   | | | then return 0.17273104686783408;  // std dev = 0.942, 42.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=41 */
%   | | | else return -0.04055289996167838;  // std dev = 0.806, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else return 0.2052631792219408;  // std dev = 0.059, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else return 0.19584144231750295;  // std dev = 0.104, 30.000 (wgt'ed) examples reached here.  /* #pos=30 */
%   else if ( follows(G, A) )
%   | then return -0.041122880390183865;  // std dev = 0.115, 228.000 (wgt'ed) examples reached here.  /* #neg=205 #pos=23 */
%   | else if ( tweets(A, H) )
%   | | then if ( tweets(I, H), recursion_accounttype(I, B) )
%   | | | then return 0.3606723867707735;  // std dev = 1.322, 13.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   | | | else return -0.18705873107563067;  // std dev = 0.124, 27.000 (wgt'ed) examples reached here.  /* #neg=27 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.13600386509998574;  // std dev = 1.196, 8.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=3 */
%   | | | else return 0.033348617740270106;  // std dev = 1.956, 20.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=6 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(C, D), follows(D, A) )
%   | then return 0.15449902257470896;  // std dev = 0.122, 68.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=67 */
%   | else if ( follows(E, C), follows(E, A) )
%   | | then return -0.1360013873033279;  // std dev = 0.810, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return 0.17029815629151807;  // std dev = 0.083, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   else if ( follows(F, A) )
%   | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | then return 0.261186532566204;  // std dev = 0.219, 24.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=23 */
%   | | else return -0.07598785077672224;  // std dev = 0.011, 203.000 (wgt'ed) examples reached here.  /* #neg=203 */
%   | else if ( tweets(A, H) )
%   | | then if ( tweets(I, H), recursion_accounttype(I, B) )
%   | | | then return 0.37756623333113587;  // std dev = 0.498, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return -0.15689653674996393;  // std dev = 0.104, 25.000 (wgt'ed) examples reached here.  /* #neg=25 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.15730014002654993;  // std dev = 1.132, 7.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=3 */
%   | | | else return 0.17899286672313688;  // std dev = 1.722, 13.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=6 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.15012722411374824;  // std dev = 0.212, 82.000 (wgt'ed) examples reached here.  /* #pos=82 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(A, F), recursion_accounttype(F, B) )
%   | | | then return 0.2176132430046423;  // std dev = 0.043, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.27224456207577774;  // std dev = 0.290, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else return -0.07084383374191987;  // std dev = 0.011, 217.000 (wgt'ed) examples reached here.  /* #neg=217 */
%   | else if ( follows(A, G), follows(G, H) )
%   | | then if ( recursion_accounttype(H, B) )
%   | | | then return 0.25118060881497933;  // std dev = 1.245, 12.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=11 */
%   | | | else return -0.16173306610539612;  // std dev = 0.194, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else if ( tweets(A, I) )
%   | | | then return 0.1269312166092979;  // std dev = 0.812, 8.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=4 */
%   | | | else return 0.06167344751872147;  // std dev = 1.850, 16.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=6 */


Results
   AUC ROC   = 0.993258
   AUC PR    = 0.385944
   CLL	      = -0.129249
   Precision = 0.324519 at threshold = 0.5
   Recall    = 0.865385
   F1        = 0.472028


Total learning time: 24.52310609817505 seconds
Total inference time: 25.087 seconds
AUC ROC: 0.993258


Results scoring model
   AUC ROC   = 0.993339
   AUC PR    = 0.41478
   CLL	      = -0.117943
   Precision = 0.329609 at threshold = 0.5
   Recall    = 0.936508
   F1        = 0.487603


Total scoring time: 19.802 seconds
Parameter learned model CLL: -0.117943


Structure after Parameter Learning
[['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'tweets(A, D)', 'true,false': 'follows(A, E), follows(E, C)', 'false': 'follows(F, A)', 'false,true': 'follows(F, G), recursion_accounttype(G, B)', 'false,false': 'tweets(A, H)', 'false,false,true': 'tweets(I, H), recursion_accounttype(I, B)', 'false,false,false': 'follows(A, J), follows(J, K)'}, {'true,true': [0.0, 0, 67], 'true,false,true': [0.361, 2, 11], 'true,false,false': [0.0, 0, 4], 'false,true,true': [8.43e-08, 0, 23], 'false,true,false': [0.0, 186, 0], 'false,false,true,true': [0.961, 1, 12], 'false,false,true,false': [2.36e-08, 27, 0], 'false,false,false,true': [1.414, 6, 3], 'false,false,false,false': [2.049, 14, 6]}], ['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'tweets(A, D), follows(A, C)', 'true,true': 'follows(C, E), follows(E, A)', 'false': 'follows(F, A)', 'false,true': 'follows(F, G), follows(G, A)', 'false,true,false': 'follows(F, H), recursion_accounttype(H, B)', 'false,false': 'follows(A, I), recursion_accounttype(I, B)', 'false,false,false': 'follows(A, J), follows(J, K)'}, {'true,true,true': [0.198, 2, 47], 'true,true,false': [0.913, 1, 5], 'true,false': [0.079, 0, 30], 'false,true,true': [0.131, 118, 3], 'false,true,false,true': [7.3e-08, 0, 20], 'false,true,false,false': [6.66e-08, 63, 0], 'false,false,true': [0.089, 0, 4], 'false,false,false,true': [2.225, 22, 8], 'false,false,false,false': [2.356, 20, 9]}], ['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), recursion_accounttype(D, B)', 'false,true': 'follows(A, E), follows(E, D)', 'false,false': 'follows(F, A)', 'false,false,true': 'follows(G, F), recursion_accounttype(G, B)', 'false,false,false': 'tweets(A, H)'}, {'true': [0.119, 0, 82], 'false,true,true': [0.008, 0, 9], 'false,true,false': [1.158, 2, 3], 'false,false,true,true': [0.286, 0, 15], 'false,false,true,false': [0.014, 211, 0], 'false,false,false,true': [2.185, 25, 9], 'false,false,false,false': [2.257, 14, 8]}], ['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), recursion_accounttype(E, B)', 'false,true': 'follows(A, F)', 'false,false': 'follows(G, A)', 'false,false,true': 'follows(H, G), recursion_accounttype(H, B)', 'false,false,false': 'follows(A, I), follows(I, J)'}, {'true,true': [0.133, 0, 72], 'true,false': [0.966, 1, 5], 'false,true,true': [0.036, 0, 9], 'false,true,false': [0.314, 1, 8], 'false,false,true,true': [0.315, 0, 15], 'false,false,true,false': [0.013, 198, 0], 'false,false,false,true': [2.175, 23, 8], 'false,false,false,false': [2.337, 19, 9]}], ['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'tweets(C, D), tweets(A, D)', 'true,true': 'follows(A, E), recursion_accounttype(E, B)', 'true,true,true': 'follows(C, E), follows(A, C)', 'false': 'follows(F, A)', 'false,true': 'follows(F, G), recursion_accounttype(G, B)', 'false,false': 'follows(A, H), recursion_accounttype(H, B)', 'false,false,false': 'tweets(A, I)'}, {'true,true,true,true': [0.985, 1, 32], 'true,true,true,false': [1.509, 3, 10], 'true,true,false': [0.045, 0, 13], 'true,false': [0.074, 0, 27], 'false,true,true': [0.316, 4, 23], 'false,true,false': [0.012, 210, 0], 'false,false,true': [0.193, 0, 4], 'false,false,false,true': [1.979, 15, 9], 'false,false,false,false': [2.422, 22, 8]}], ['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(A, D), follows(D, C)', 'true,true': 'recursion_accounttype(D, B)', 'true,true,false': 'follows(A, C), follows(D, A)', 'false': 'follows(E, A)', 'false,false': 'follows(A, F), follows(F, G)', 'false,false,true': 'recursion_accounttype(G, B)', 'false,false,false': 'tweets(A, H)'}, {'true,true,true': [0.073, 0, 43], 'true,true,false,true': [1.509, 3, 12], 'true,true,false,false': [0.033, 0, 6], 'true,false': [0.102, 0, 21], 'false,true': [0.128, 202, 23], 'false,false,true,true': [1.327, 1, 11], 'false,false,true,false': [0.122, 25, 0], 'false,false,false,true': [1.385, 10, 4], 'false,false,false,false': [1.896, 11, 6]}], ['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'tweets(C, D), tweets(A, D)', 'true,true': 'follows(A, E), follows(E, A)', 'true,true,true': 'follows(C, E), recursion_accounttype(E, B)', 'false': 'follows(F, A), follows(A, G)', 'false,true': 'follows(G, A), follows(G, F)', 'false,false': 'follows(H, A), recursion_accounttype(H, B)', 'false,false,false': 'follows(A, I), tweets(A, J)'}, {'true,true,true,true': [0.014, 0, 28], 'true,true,true,false': [1.593, 3, 17], 'true,true,false': [0.851, 1, 4], 'true,false': [0.261, 0, 28], 'false,true,true': [0.102, 105, 7], 'false,true,false': [0.134, 69, 17], 'false,false,true': [0.0, 0, 8], 'false,false,false,true': [1.779, 16, 9], 'false,false,false,false': [2.371, 42, 8]}], ['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(A, C), tweets(A, D)', 'true,true': 'follows(A, E), follows(E, C)', 'true,true,true': 'tweets(C, F), tweets(E, F)', 'false': 'follows(G, A)', 'false,false': 'tweets(A, H)', 'false,false,true': 'tweets(I, H), recursion_accounttype(I, B)', 'false,false,false': 'follows(A, J), follows(J, K)'}, {'true,true,true,true': [0.942, 1, 41], 'true,true,true,false': [0.806, 1, 3], 'true,true,false': [0.059, 0, 8], 'true,false': [0.104, 0, 30], 'false,true': [0.115, 205, 23], 'false,false,true,true': [1.322, 1, 12], 'false,false,true,false': [0.124, 27, 0], 'false,false,false,true': [1.196, 5, 3], 'false,false,false,false': [1.956, 14, 6]}], ['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(C, D), follows(D, A)', 'true,false': 'follows(E, C), follows(E, A)', 'false': 'follows(F, A)', 'false,true': 'follows(F, G), recursion_accounttype(G, B)', 'false,false': 'tweets(A, H)', 'false,false,true': 'tweets(I, H), recursion_accounttype(I, B)', 'false,false,false': 'follows(A, J), follows(J, K)'}, {'true,true': [0.122, 1, 67], 'true,false,true': [0.81, 1, 2], 'true,false,false': [0.083, 0, 13], 'false,true,true': [0.219, 1, 23], 'false,true,false': [0.011, 203, 0], 'false,false,true,true': [0.498, 0, 12], 'false,false,true,false': [0.104, 25, 0], 'false,false,false,true': [1.132, 4, 3], 'false,false,false,false': [1.722, 7, 6]}], ['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'follows(A, F), recursion_accounttype(F, B)', 'false,false': 'follows(A, G), follows(G, H)', 'false,false,true': 'recursion_accounttype(H, B)', 'false,false,false': 'tweets(A, I)'}, {'true': [0.212, 0, 82], 'false,true,true,true': [0.043, 0, 8], 'false,true,true,false': [0.29, 0, 15], 'false,true,false': [0.011, 217, 0], 'false,false,true,true': [1.245, 1, 11], 'false,false,true,false': [0.194, 12, 0], 'false,false,false,true': [0.812, 4, 4], 'false,false,false,false': [1.85, 10, 6]}]]
[{'': [0.023242630385487066, 0.1332229180684238], 'false': [0.09793731828483881, 0.21172022684310035], 'false,false': [0.20999999999999946, 0.2140309155766945], 'false,false,false': [0.2222222222222221, 0.2100000000000001], 'false,false,true': [0.07100591715976314, 2.05596856412066e-17], 'false,true': [3.089316242435218e-16, -2.1488187573390127e-16], 'true': [-9.544603913195376e-16, 0.10380622837370206], 'true,false': [0.13017751479289916, 0.0]}, {'': [0.03442356528778393, 0.10637396664833015], 'false': [0.07141266703653641, 0.19152141554998156], 'false,false': [0.0019912315344613463, 0.1783927652793803], 'false,false,false': [0.16500194294190243, 0.19140422126173065], 'false,true': [0.017260830914054667, 0.1305700400212102], 'false,true,false': [2.6645352591003756e-16, 7.04903507698512e-17], 'true': [0.05157024793388403, 0.00020871605087044998], 'true,true': [0.03915035401915805, 0.13888888888888887]}, {'': [0.0001730254973786316, 0.0784266976766361], 'false': [0.1264923075846078, 0.066252467812633], 'false,true': [7.729084292782159e-06, 0.2683659664918572], 'false,false': [0.0312574647800246, 0.1783203945573649], 'false,false,false': [0.14036821911336128, 0.23148639881644753], 'false,false,true': [0.005458634526048082, 9.368861662397425e-07]}, {'': [0.01314991738402172, 0.06593653531408561], 'false': [0.05277645885869796, 0.057386841016586414], 'false,false': [0.02040934738091159, 0.1730428954195281], 'false,false,false': [0.1526224914297229, 0.19508097684226702], 'false,true': [0.00014039869285434016, 0.09876543209876548], 'false,false,true': [0.006596125413061611, 7.905960019152808e-07], 'true': [0.0002454878101942892, 0.15550970463967845]}, {'': [0.044027807992677914, 0.056732003556513276], 'false': [0.020593422832323523, 0.18015847260883172], 'false,false': [0.009345144851626297, 0.1842908465851494], 'false,false,false': [0.16312785484365513, 0.1955982959365773], 'true': [0.062317237633195105, 0.00020525804234675197], 'true,true': [0.07802125373681801, 0.00015308396656187585], 'true,true,true': [0.029384756657483944, 0.17513106980047033], 'false,true': [0.09962144317646349, 7.12889325589428e-07]}, {'': [0.031664355390342194, 0.05220562522172745], 'false': [0.016412358627494864, 0.16309168361593063], 'false,false': [0.14893223149556004, 0.17854379283106303], 'false,false,false': [0.13699069922422655, 0.21138650805821987], 'false,false,true': [0.14673390503022896, 0.0005987252448444381], 'true': [0.04136381259870361, 0.000494485542155196], 'true,true': [0.0001254996797451134, 0.11469439883585071], 'true,true,false': [0.1517418472564772, 0.00018703361214616096]}, {'': [0.04518762645044225, 0.044340461094352954], 'true': [0.06536904657869155, 0.002431685486346432], 'true,true': [0.05545271106494376, 0.14494876289671116], 'true,true,true': [7.394558150035964e-06, 0.12690830251930862], 'false': [0.014058022310942102, 0.1129386328145668], 'false,false': [-6.938893903907228e-18, 0.12079774353697807], 'false,false,false': [0.126631524759763, 0.11243307336628378], 'false,true': [0.010367675832456841, 0.01784406495847606]}, {'': [0.02092452768541805, 0.04397473857708484], 'false': [0.013259644598298634, 0.14403680805267463], 'false,false': [0.10987251332608794, 0.18981679759813705], 'false,false,false': [0.17871439388446664, 0.1912468734234665], 'false,false,true': [0.13437496809170435, 0.0005719874319928429], 'true': [0.031934822548524935, 0.0003589307478920241], 'true,true': [0.037027292934047294, 0.0004306196979367294], 'true,true,true': [0.021136003192506397, 0.16235144906898072]}, {'': [0.022995069997656176, 0.039751630931044106], 'false': [0.015812881371590853, 0.1252113050217491], 'false,false': [0.06960189351077178, 0.21250205722755505], 'false,false,false': [0.18321901990156947, 0.22810514551989516], 'false,false,true': [0.020701005861189854, 0.0004309295492426246], 'true': [0.014963154660786349, 0.05572762248060402], 'true,false': [0.21870647709767288, 0.0005259781177706988], 'false,true': [0.04789148717520159, 6.119321406343627e-07]}, {'': [0.0005484112664191137, 0.03280998790693408], 'false': [0.009524215646177678, 0.1402496835731145], 'false,false': [0.10877850247255462, 0.1709719319822951], 'false,false,false': [0.08237808305183729, 0.21384933097196435], 'false,false,true': [0.1291677090520902, 0.003140444424894274], 'false,true': [0.004411590067585798, 5.532361439665552e-07], 'false,true,true': [0.00023377941416622555, 0.0056016406108175005]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
0;true;tweets(A, D).;true;true
0;true,false;follows(A, E), follows(E, C).;true;true
0;false;follows(F, A).;true;true
0;false,true;follows(F, G), recursion_accounttype(G, B).;true;true
0;false,false;tweets(A, H).;true;true
0;false,false,true;tweets(I, H), recursion_accounttype(I, B).;true;true
1;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
1;true;tweets(A, D), follows(A, C).;true;true
1;false;follows(F, A).;true;true
1;false,true;follows(F, G), follows(G, A).;true;true
1;false,true,false;follows(F, H), recursion_accounttype(H, B).;true;true
1;false,false;follows(A, I), recursion_accounttype(I, B).;true;true
2;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
2;false;follows(A, D), recursion_accounttype(D, B).;true;true
2;false,true;follows(A, E), follows(E, D).;true;true
2;false,false;follows(F, A).;true;true
2;false,false,true;follows(G, F), recursion_accounttype(G, B).;true;true
3;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
3;true;follows(C, D), recursion_accounttype(D, B).;true;true
3;false;follows(E, A), recursion_accounttype(E, B).;true;true
3;false,true;follows(A, F).;true;true
3;false,false;follows(G, A).;true;true
3;false,false,true;follows(H, G), recursion_accounttype(H, B).;true;true
4;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
4;true;tweets(C, D), tweets(A, D).;true;true
4;true,true;follows(A, E), recursion_accounttype(E, B).;true;true
4;false;follows(F, A).;true;true
4;false,true;follows(F, G), recursion_accounttype(G, B).;true;true
5;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
5;true;follows(A, D), follows(D, C).;true;true
5;true,true;recursion_accounttype(D, B).;true;true
5;true,true,false;follows(A, C), follows(D, A).;true;true
5;false;follows(E, A).;true;true
5;false,false;follows(A, F), follows(F, G).;true;true
5;false,false,true;recursion_accounttype(G, B).;true;true
6;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
6;true;tweets(C, D), tweets(A, D).;true;true
6;true,true;follows(A, E), follows(E, A).;true;true
6;true,true,true;follows(C, E), recursion_accounttype(E, B).;true;true
6;false;follows(F, A), follows(A, G).;true;true
6;false,false;follows(H, A), recursion_accounttype(H, B).;true;true
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
7;true;follows(A, C), tweets(A, D).;true;true
7;true,true;follows(A, E), follows(E, C).;true;true
7;false;follows(G, A).;true;true
7;false,false;tweets(A, H).;true;true
7;false,false,true;tweets(I, H), recursion_accounttype(I, B).;true;true
8;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
8;true;follows(C, D), follows(D, A).;true;true
8;true,false;follows(E, C), follows(E, A).;true;true
8;false;follows(F, A).;true;true
8;false,true;follows(F, G), recursion_accounttype(G, B).;true;true
8;false,false;tweets(A, H).;true;true
8;false,false,true;tweets(I, H), recursion_accounttype(I, B).;true;true
9;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
9;false;follows(D, A).;true;true
9;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
9;false,true,true;follows(A, F), recursion_accounttype(F, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D), tweets(A, E) )
%   | then return 0.8581489350995125;  // std dev = 0.000, 59.000 (wgt'ed) examples reached here.  /* #pos=59 */
%   | else if ( follows(C, F), follows(F, A) )
%   | | then return 0.8025933795439567;  // std dev = 0.229, 18.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=17 */
%   | | else if ( follows(A, G), follows(G, C) )
%   | | | then return 0.5248156017661788;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.8581489350995122;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(A, H), recursion_accounttype(H, B) )
%   | then return 0.8581489350995123;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | else if ( follows(I, A) )
%   | | then if ( follows(I, J), recursion_accounttype(J, B) )
%   | | | then return 0.8581489350995123;  // std dev = 0.000, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | | else return -0.14185106490048846;  // std dev = 0.000, 215.000 (wgt'ed) examples reached here.  /* #neg=215 */
%   | | else if ( follows(A, K), follows(K, L) )
%   | | | then return 0.06327714022771751;  // std dev = 2.522, 39.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=8 */
%   | | | else return 0.20430278125335852;  // std dev = 2.426, 26.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=9 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(D, C) )
%   | then return 0.7222421551156994;  // std dev = 0.040, 68.000 (wgt'ed) examples reached here.  /* #pos=68 */
%   | else return 0.5503152389597002;  // std dev = 0.385, 17.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=14 */
%   else if ( follows(E, A) )
%   | then if ( follows(E, F), follows(F, A) )
%   | | then return -0.10940189072954286;  // std dev = 0.115, 158.000 (wgt'ed) examples reached here.  /* #neg=155 #pos=3 */
%   | | else if ( follows(E, G), recursion_accounttype(G, B) )
%   | | | then return 0.7194734122109542;  // std dev = 7.30e-08, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | | else return -0.12544463852839116;  // std dev = 2.58e-08, 61.000 (wgt'ed) examples reached here.  /* #neg=61 */
%   | else if ( follows(A, H), follows(H, I) )
%   | | then if ( recursion_accounttype(I, B) )
%   | | | then return 0.8145984427503129;  // std dev = 0.193, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | | else return -0.1497296707974277;  // std dev = 2.11e-08, 24.000 (wgt'ed) examples reached here.  /* #neg=24 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.22022187864071827;  // std dev = 1.581, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | | else return 0.22395330332330207;  // std dev = 1.865, 15.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=6 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(D, C) )
%   | then if ( tweets(A, E), tweets(D, E) )
%   | | then return 0.5566721173483526;  // std dev = 0.036, 55.000 (wgt'ed) examples reached here.  /* #pos=55 */
%   | | else if ( tweets(A, F), follows(C, D) )
%   | | | then return 0.2213493007214379;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.5658734775811675;  // std dev = 0.017, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else return 0.6076560738518987;  // std dev = 0.101, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   else if ( follows(G, A) )
%   | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | then return 0.5795815226219536;  // std dev = 0.063, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | | else return -0.11344044556595702;  // std dev = 0.010, 189.000 (wgt'ed) examples reached here.  /* #neg=189 */
%   | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | then return 0.3598450204967403;  // std dev = 0.934, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.11140695377380075;  // std dev = 2.290, 31.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=9 */
%   | | | else return 0.0897178908808123;  // std dev = 2.274, 28.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=8 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(D, C) )
%   | then if ( recursion_accounttype(D, B) )
%   | | then return 0.400809114768981;  // std dev = 0.143, 49.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=48 */
%   | | else if ( tweets(A, E) )
%   | | | then return 0.3669635736448461;  // std dev = 0.981, 18.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=17 */
%   | | | else return 0.1778302980002254;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | else return 0.45804933528632075;  // std dev = 0.109, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   else if ( follows(F, A) )
%   | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | then return 0.3724651358004663;  // std dev = 0.233, 25.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=23 */
%   | | else return -0.10249894855465266;  // std dev = 0.010, 208.000 (wgt'ed) examples reached here.  /* #neg=208 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0.4787267218920422;  // std dev = 0.127, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( tweets(A, I) )
%   | | | then return 0.06312948849097241;  // std dev = 2.336, 35.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=9 */
%   | | | else return 0.2021142864076787;  // std dev = 2.045, 19.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=8 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, C), tweets(A, D) )
%   | then if ( tweets(C, D) )
%   | | then if ( follows(A, E), follows(E, C) )
%   | | | then return 0.2732791567953304;  // std dev = 1.315, 37.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=35 */
%   | | | else return 0.34206338668051584;  // std dev = 0.075, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return 0.33643968914068234;  // std dev = 0.069, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else return 0.34584088501139193;  // std dev = 0.132, 30.000 (wgt'ed) examples reached here.  /* #pos=30 */
%   else if ( follows(F, A) )
%   | then if ( follows(F, G), follows(G, A) )
%   | | then return -0.09135305865881738;  // std dev = 0.115, 131.000 (wgt'ed) examples reached here.  /* #neg=128 #pos=3 */
%   | | else return -0.007258046908934212;  // std dev = 0.168, 98.000 (wgt'ed) examples reached here.  /* #neg=78 #pos=20 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0.36444758667848065;  // std dev = 0.122, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( tweets(A, I) )
%   | | | then return 0.05704740564629701;  // std dev = 2.326, 34.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=9 */
%   | | | else return 0.014598264142594642;  // std dev = 2.299, 31.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=8 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(A, D), tweets(C, D) )
%   | then return 0.24931498653334774;  // std dev = 0.132, 56.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=55 */
%   | else if ( follows(A, C) )
%   | | then if ( follows(C, E), follows(E, A) )
%   | | | then return 0.21306176613001535;  // std dev = 0.938, 17.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=16 */
%   | | | else return 0.28491104599867784;  // std dev = 0.084, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else return 0.08612586934069281;  // std dev = 0.848, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   else if ( follows(F, A) )
%   | then return -0.05201024059900855;  // std dev = 0.133, 265.000 (wgt'ed) examples reached here.  /* #neg=242 #pos=23 */
%   | else if ( tweets(A, G) )
%   | | then if ( tweets(H, G), recursion_accounttype(H, B) )
%   | | | then return 0.5939111127019084;  // std dev = 0.693, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return -0.19088498462645373;  // std dev = 0.157, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | | else if ( follows(A, I), follows(I, J) )
%   | | | then return 0.13671924576269126;  // std dev = 1.123, 8.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=3 */
%   | | | else return -5.267909681042323E-5;  // std dev = 1.990, 22.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=6 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(D, C) )
%   then if ( recursion_accounttype(D, B) )
%   | then if ( recursion_accounttype(C, B) )
%   | | then return 0.1898711022804949;  // std dev = 0.184, 83.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=80 */
%   | | else if ( tweets(C, E), tweets(A, E) )
%   | | | then return 0.38002080709063196;  // std dev = 0.347, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | | else return 0.20218021622135873;  // std dev = 0.927, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | else return -0.08167280360408172;  // std dev = 0.422, 216.000 (wgt'ed) examples reached here.  /* #neg=215 #pos=1 */
%   else if ( follows(A, F), recursion_accounttype(F, B) )
%   | then return 0.21516601166020433;  // std dev = 0.193, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else if ( follows(A, G), follows(G, H) )
%   | | then if ( recursion_accounttype(H, B) )
%   | | | then return 0.5591512690315824;  // std dev = 0.128, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return -0.1505439098555433;  // std dev = 0.124, 27.000 (wgt'ed) examples reached here.  /* #neg=27 */
%   | | else if ( tweets(A, I) )
%   | | | then return 0.0979937739158996;  // std dev = 1.344, 11.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=4 */
%   | | | else return 0.05621468791635932;  // std dev = 1.854, 16.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=5 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( tweets(A, C) )
%   then if ( follows(D, A), follows(A, E) )
%   | then if ( follows(E, F), recursion_accounttype(F, B) )
%   | | then return 0.17395695885646587;  // std dev = 0.200, 80.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=76 */
%   | | else return -0.07562998347803329;  // std dev = 0.293, 140.000 (wgt'ed) examples reached here.  /* #neg=139 #pos=1 */
%   | else if ( follows(A, G), follows(G, H) )
%   | | then if ( recursion_accounttype(H, B) )
%   | | | then return 0.290929903285304;  // std dev = 0.349, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return -0.1195922010616604;  // std dev = 7.45e-09, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
%   | | else if ( tweets(I, C), recursion_accounttype(I, B) )
%   | | | then return 0.3294695333574726;  // std dev = 0.690, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return -0.12884892489297786;  // std dev = 0.414, 34.000 (wgt'ed) examples reached here.  /* #neg=34 */
%   else if ( follows(A, J), follows(J, K) )
%   | then if ( recursion_accounttype(K, B) )
%   | | then return 0.26268142619703966;  // std dev = 0.093, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | | else return -0.09413732525157972;  // std dev = 0.246, 55.000 (wgt'ed) examples reached here.  /* #neg=55 */
%   | else return 0.10611446295935988;  // std dev = 0.467, 15.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=6 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(D, C) )
%   | then if ( tweets(D, E) )
%   | | then return 0.13303635880585543;  // std dev = 0.170, 68.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=66 */
%   | | else return -0.13332901128037875;  // std dev = 0.790, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else if ( follows(A, F), follows(F, C) )
%   | | then return -0.30598672840286656;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else if ( follows(A, G), follows(C, G) )
%   | | | then return 0.1735473511882189;  // std dev = 0.059, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return -0.037008836898508646;  // std dev = 0.852, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   else if ( follows(H, A) )
%   | then return -0.04483044211522025;  // std dev = 0.111, 241.000 (wgt'ed) examples reached here.  /* #neg=218 #pos=23 */
%   | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | then return 0.15362764902181786;  // std dev = 0.179, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return -0.015385396829266061;  // std dev = 1.203, 36.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=8 */
%   | | | else return 0.02336539696385902;  // std dev = 2.220, 29.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=9 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(C, D), follows(A, D) )
%   | | then if ( follows(D, E), follows(E, A) )
%   | | | then return 0.11987202855521444;  // std dev = 0.987, 37.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=36 */
%   | | | else return -0.1423262218469069;  // std dev = 0.749, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return 0.15948620275017222;  // std dev = 0.158, 27.000 (wgt'ed) examples reached here.  /* #pos=27 */
%   | else return 0.21247006833999174;  // std dev = 0.076, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   else if ( follows(F, A), follows(A, F) )
%   | then return -0.04667954232593468;  // std dev = 0.122, 212.000 (wgt'ed) examples reached here.  /* #neg=192 #pos=20 */
%   | else if ( tweets(A, G) )
%   | | then if ( tweets(H, G), recursion_accounttype(H, B) )
%   | | | then return 0.22588364479774142;  // std dev = 0.994, 21.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=20 */
%   | | | else return -0.10458285231928725;  // std dev = 0.340, 47.000 (wgt'ed) examples reached here.  /* #neg=47 */
%   | | else if ( follows(A, I), follows(I, J) )
%   | | | then return -0.0036364889056712973;  // std dev = 0.876, 14.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=4 */
%   | | | else return 0.06389702215412098;  // std dev = 1.793, 14.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=5 */


Results
   AUC ROC   = 0.992816
   AUC PR    = 0.349468
   CLL	      = -0.123077
   Precision = 0.334852 at threshold = 0.5
   Recall    = 0.942308
   F1        = 0.494118


Total learning time: 35.65411710739136 seconds
Total inference time: 136.072 seconds
AUC ROC: 0.992816


Results scoring model
   AUC ROC   = 0.992543
   AUC PR    = 0.367415
   CLL	      = -0.115727
   Precision = 0.334254 at threshold = 0.5
   Recall    = 0.960317
   F1        = 0.495902


Total scoring time: 102.148 seconds
Refined model CLL: -0.115727


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.992816
   AUC PR    = 0.349468
   CLL	      = -0.123077
   Precision = 0.334852 at threshold = 0.5
   Recall    = 0.942308
   F1        = 0.494118


Total learning time: 182.1272232055664 seconds
Total inference time: 136.072 seconds
AUC ROC: 0.992816
Total revision time: 182.1272232055664
Best scored revision CLL: -0.115727


Dataset: 7_yeast_twitter, Fold: 1, Type: Transfer (trRDN-B), Time: 00:15:58
{'AUC ROC': 0.992816, 'AUC PR': 0.349468, 'CLL': -0.123077, 'Precision': [0.334852, 0.5], 'Recall': 0.942308, 'F1': 0.494118, 'Learning time': 182.1272232055664, 'Inference time': 136.072, 'parameter': {'AUC ROC': 0.993258, 'AUC PR': 0.385944, 'CLL': -0.129249, 'Precision': [0.324519, 0.5], 'Recall': 0.865385, 'F1': 0.472028, 'Learning time': 24.52310609817505, 'Inference time': 25.087}}


WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.8581489350995123;  // std dev = 0.000, 82.000 (wgt'ed) examples reached here.  /* #pos=82 */
%   else if ( follows(A, D), recursion_accounttype(D, B) )
%   | then return 0.8581489350995123;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | else if ( follows(E, A) )
%   | | then if ( follows(E, F), recursion_accounttype(F, B) )
%   | | | then return 0.8581489350995123;  // std dev = 0.000, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | | else return -0.14185106490048846;  // std dev = 0.000, 211.000 (wgt'ed) examples reached here.  /* #neg=211 */
%   | | else if ( tweets(A, G) )
%   | | | then return 0.24945328292559932;  // std dev = 2.341, 23.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=9 */
%   | | | else return 0.1340110040650296;  // std dev = 2.407, 29.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=8 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.7194734122109538;  // std dev = 2.53e-07, 80.000 (wgt'ed) examples reached here.  /* #pos=80 */
%   | else return 0.38614007887762103;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   else if ( follows(E, A) )
%   | then if ( follows(E, F), recursion_accounttype(F, B) )
%   | | then if ( follows(E, G), follows(G, A) )
%   | | | then return 0.31947341221095443;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.7194734122109542;  // std dev = 7.30e-08, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return -0.1254446385283917;  // std dev = 0.000, 208.000 (wgt'ed) examples reached here.  /* #neg=208 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0.7194734122109544;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( tweets(A, I) )
%   | | | then return 0.08213553788302091;  // std dev = 2.586, 35.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=9 */
%   | | | else return 0.2854847616827312;  // std dev = 2.108, 18.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=8 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(C, D) )
%   | then return 0.5320776551981216;  // std dev = 0.158, 79.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=77 */
%   | else return 0.3886997700796179;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   else if ( follows(E, A) )
%   | then if ( follows(E, F), recursion_accounttype(F, B) )
%   | | then if ( follows(F, E), follows(A, F) )
%   | | | then return 0.4045985498268749;  // std dev = 0.826, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | | else return 0.5712652164935416;  // std dev = 0.151, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | else return -0.11231637819360651;  // std dev = 0.000, 187.000 (wgt'ed) examples reached here.  /* #neg=187 */
%   | else if ( follows(A, G), follows(G, H) )
%   | | then if ( recursion_accounttype(H, B) )
%   | | | then return 0.738854007809918;  // std dev = 0.373, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | | else return -0.18883348335258104;  // std dev = 0.022, 25.000 (wgt'ed) examples reached here.  /* #neg=25 */
%   | | else if ( tweets(A, I) )
%   | | | then return 0.07948243963815085;  // std dev = 1.713, 15.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=4 */
%   | | | else return 0.028763175810552922;  // std dev = 2.089, 24.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=6 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(C, D) )
%   | then return 0.42533654033797713;  // std dev = 0.115, 77.000 (wgt'ed) examples reached here.  /* #pos=77 */
%   | else return 0.29184839324272044;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   else if ( follows(E, A) )
%   | then if ( follows(E, F), recursion_accounttype(F, B) )
%   | | then if ( follows(E, G), follows(G, A) )
%   | | | then return -0.046808877591541745;  // std dev = 1.283, 7.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=3 */
%   | | | else return 0.423881760347636;  // std dev = 0.079, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return -0.10159632948783655;  // std dev = 0.000, 211.000 (wgt'ed) examples reached here.  /* #neg=211 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0.4173206553220435;  // std dev = 0.151, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( follows(A, I), follows(I, J) )
%   | | | then return 0.03899696458328247;  // std dev = 2.042, 33.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=8 */
%   | | | else return 0.18833022995329549;  // std dev = 2.341, 23.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=9 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(C, D), follows(A, C) )
%   | then if ( follows(C, E), follows(E, A) )
%   | | then if ( recursion_accounttype(E, B), follows(A, E) )
%   | | | then return 0.324090467298787;  // std dev = 6.32e-08, 32.000 (wgt'ed) examples reached here.  /* #pos=32 */
%   | | | else return 0.27647141967973954;  // std dev = 0.976, 21.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=20 */
%   | | else if ( tweets(A, F) )
%   | | | then return 0.3240904672987871;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.1240904672987871;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else return 0.34546649974254184;  // std dev = 0.148, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   else if ( follows(G, A) )
%   | then return -0.054295171650203713;  // std dev = 0.136, 247.000 (wgt'ed) examples reached here.  /* #neg=224 #pos=23 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0.322692646184662;  // std dev = 0.140, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( follows(A, I), follows(I, J) )
%   | | | then return 0.20082112271334995;  // std dev = 1.738, 18.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=8 */
%   | | | else return 0.12462365173574565;  // std dev = 2.401, 25.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=9 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then return 0.2493135453425385;  // std dev = 0.121, 68.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=67 */
%   | else if ( follows(C, E), follows(E, A) )
%   | | then if ( recursion_accounttype(E, B) )
%   | | | then return 0.11461917667805334;  // std dev = 0.926, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | | else return 0.01336634091975103;  // std dev = 0.862, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else return 0.2941560389840165;  // std dev = 0.049, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( follows(F, A) )
%   | then return -0.04231829943861885;  // std dev = 0.143, 219.000 (wgt'ed) examples reached here.  /* #neg=196 #pos=23 */
%   | else if ( tweets(A, G) )
%   | | then if ( follows(A, H), follows(H, I) )
%   | | | then return 0.0712088573823531;  // std dev = 1.557, 20.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=8 */
%   | | | else return 0.023367799314017813;  // std dev = 1.775, 13.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=4 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.06021670044762359;  // std dev = 1.143, 9.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=3 */
%   | | | else return 0.09037119754172174;  // std dev = 1.848, 16.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=6 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A) )
%   | then return 0.2391014559461421;  // std dev = 0.390, 73.000 (wgt'ed) examples reached here.  /* #pos=73 */
%   | else return 0.07571029885570398;  // std dev = 0.760, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(A, F) )
%   | | then return 0.22425113407786926;  // std dev = 0.070, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else return 0.0980785942269624;  // std dev = 0.314, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | else if ( follows(G, A) )
%   | | then if ( follows(G, H), follows(H, A) )
%   | | | then return -0.07120994718205763;  // std dev = 1.085, 139.000 (wgt'ed) examples reached here.  /* #neg=136 #pos=3 */
%   | | | else return -0.018248111832127985;  // std dev = 1.341, 76.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=12 */
%   | | else if ( follows(A, I), follows(I, J) )
%   | | | then return -0.009447642823443108;  // std dev = 1.978, 32.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=8 */
%   | | | else return 0.15911969973976267;  // std dev = 2.266, 21.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=9 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.1820423786194774;  // std dev = 0.124, 73.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=72 */
%   | else if ( follows(E, A), follows(F, E) )
%   | | then return -0.16334102972674466;  // std dev = 0.910, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else return 0.25051073964904375;  // std dev = 0.098, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( follows(G, A) )
%   | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | then return 0.2224858109324241;  // std dev = 0.265, 34.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=32 */
%   | | else return -0.08075677187546813;  // std dev = 0.026, 197.000 (wgt'ed) examples reached here.  /* #neg=197 */
%   | else if ( follows(A, I), follows(I, J) )
%   | | then if ( recursion_accounttype(J, B) )
%   | | | then return 0.598447443066121;  // std dev = 0.025, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return -0.2094038826045586;  // std dev = 0.029, 23.000 (wgt'ed) examples reached here.  /* #neg=23 */
%   | | else if ( tweets(A, K) )
%   | | | then return 0.07324568003290631;  // std dev = 1.595, 11.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=4 */
%   | | | else return 0.14222566271549208;  // std dev = 1.651, 11.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=5 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(C, D) )
%   | then return 0.1292604905817527;  // std dev = 0.167, 70.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=68 */
%   | else if ( tweets(A, E) )
%   | | then if ( follows(A, C) )
%   | | | then return 0.17002957943419406;  // std dev = 0.033, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.049946352809327736;  // std dev = 0.943, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | else return -0.16174711342358225;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   else if ( follows(F, A) )
%   | then return -0.0440375783544837;  // std dev = 0.146, 227.000 (wgt'ed) examples reached here.  /* #neg=204 #pos=23 */
%   | else if ( follows(A, G), follows(G, H) )
%   | | then if ( recursion_accounttype(H, B) )
%   | | | then return 0.3730417608867795;  // std dev = 0.420, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | | else return -0.17684338521576332;  // std dev = 0.026, 23.000 (wgt'ed) examples reached here.  /* #neg=23 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.039045693937213626;  // std dev = 1.713, 15.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=4 */
%   | | | else return -0.031431653492667355;  // std dev = 1.905, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then if ( tweets(C, E), tweets(A, E) )
%   | | then if ( tweets(D, E), follows(F, A) )
%   | | | then return 0.14381161547836477;  // std dev = 0.215, 44.000 (wgt'ed) examples reached here.  /* #pos=44 */
%   | | | else return -0.08557188094630881;  // std dev = 0.512, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return 0.17552889187785856;  // std dev = 0.250, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | else return 0.24499827226683307;  // std dev = 0.197, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.14677129590907542;  // std dev = 0.057, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), follows(I, A) )
%   | | | then return -0.06222185385159428;  // std dev = 1.099, 159.000 (wgt'ed) examples reached here.  /* #neg=156 #pos=3 */
%   | | | else return -0.014927677442743183;  // std dev = 1.198, 76.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=12 */
%   | | else if ( tweets(A, J) )
%   | | | then return -0.0036710580641590353;  // std dev = 1.938, 32.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=9 */
%   | | | else return 0.016534079425246182;  // std dev = 1.948, 22.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=8 */


Results
   AUC ROC   = 0.99043
   AUC PR    = 0.377305
   CLL	      = -0.139963
   Precision = 0.361757 at threshold = 0.5
   Recall    = 0.897436
   F1        = 0.515654


Total learning time: 27.744778394699097 seconds
Total inference time: 26.827 seconds
AUC ROC: 0.99043


Dataset: 7_yeast_twitter, Fold: 1, Type: Scratch (RDN-B), Time: 00:16:54
{'AUC ROC': 0.99043, 'AUC PR': 0.377305, 'CLL': -0.139963, 'Precision': [0.361757, 0.5], 'Recall': 0.897436, 'F1': 0.515654, 'Learning time': 27.744778394699097, 'Inference time': 26.827}


Starting fold 2

Target train facts examples: 1562
Target train pos examples: 156
Target train neg examples: 24648

Target test facts examples: 1580
Target test pos  examples: 126
Target test neg examples: 16128

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(A, C) )
%   | then return 0.8164822684328454;  // std dev = 0.200, 48.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=46 */
%   | else return 0.8581489350995122;  // std dev = 5.96e-08, 39.000 (wgt'ed) examples reached here.  /* #pos=39 */
%   else if ( follows(A, E), recursion_accounttype(E, B) )
%   | then if ( tweets(A, F) )
%   | | then if ( follows(G, A) )
%   | | | then return 0.7152917922423694;  // std dev = 0.926, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | | else return 0.8581489350995123;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return 0.5248156017661788;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), follows(I, A) )
%   | | | then return -0.13433226790800662;  // std dev = 0.996, 133.000 (wgt'ed) examples reached here.  /* #neg=132 #pos=1 */
%   | | | else return 0.030191945852200554;  // std dev = 3.640, 93.000 (wgt'ed) examples reached here.  /* #neg=77 #pos=16 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.14884660951811612;  // std dev = 4.211, 86.000 (wgt'ed) examples reached here.  /* #neg=61 #pos=25 */
%   | | | else return 0.1914822684328457;  // std dev = 3.162, 45.000 (wgt'ed) examples reached here.  /* #neg=30 #pos=15 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, C), tweets(A, D) )
%   | then return 0.6665811634733932;  // std dev = 0.240, 49.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=46 */
%   | else return 0.7194734122109545;  // std dev = 0.000, 39.000 (wgt'ed) examples reached here.  /* #pos=39 */
%   else if ( follows(E, A) )
%   | then if ( follows(E, F), follows(F, A) )
%   | | then return -0.11078708004538995;  // std dev = 0.120, 121.000 (wgt'ed) examples reached here.  /* #neg=119 #pos=2 */
%   | | else if ( follows(E, G), recursion_accounttype(G, B) )
%   | | | then return 0.8289457358550416;  // std dev = 0.209, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | | else return -0.1455662009010634;  // std dev = 3.33e-08, 79.000 (wgt'ed) examples reached here.  /* #neg=79 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then if ( tweets(A, I) )
%   | | | then return 0.7194734122109544;  // std dev = 2.11e-08, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.28162893957529533;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else if ( follows(A, J) )
%   | | | then return 0.10936521024835182;  // std dev = 4.597, 107.000 (wgt'ed) examples reached here.  /* #neg=78 #pos=29 */
%   | | | else return 0.29153882456488195;  // std dev = 2.441, 24.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=11 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(D, C) )
%   | then return 0.552290811240041;  // std dev = 0.126, 61.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=60 */
%   | else return 0.5665077420370618;  // std dev = 0.058, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   else if ( follows(E, A) )
%   | then if ( follows(E, F), recursion_accounttype(F, B) )
%   | | then if ( follows(F, E) )
%   | | | then return 0.6998409727544244;  // std dev = 0.345, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | | else return 0.2975375698171439;  // std dev = 0.850, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return -0.12054895809765195;  // std dev = 0.100, 212.000 (wgt'ed) examples reached here.  /* #neg=212 */
%   | else if ( tweets(A, G) )
%   | | then if ( tweets(H, G), recursion_accounttype(H, B) )
%   | | | then return 0.7532091224233587;  // std dev = 0.559, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | | | else return -0.18227890023792573;  // std dev = 0.084, 44.000 (wgt'ed) examples reached here.  /* #neg=44 */
%   | | else if ( follows(A, I), follows(I, J) )
%   | | | then return 0.10177065395415691;  // std dev = 3.142, 49.000 (wgt'ed) examples reached here.  /* #neg=35 #pos=14 */
%   | | | else return 0.12627410402823613;  // std dev = 2.458, 27.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=9 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then if ( recursion_accounttype(C, B) )
%   | | then return 0.4179757983916758;  // std dev = 0.109, 86.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=85 */
%   | | else return 0.5444528161279277;  // std dev = 0.089, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | else return -0.1073866688771022;  // std dev = 0.089, 218.000 (wgt'ed) examples reached here.  /* #neg=218 */
%   else if ( tweets(A, E) )
%   | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | then if ( follows(A, F) )
%   | | | then return 0.37032298180520623;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.6759855559459796;  // std dev = 0.088, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | else return -0.15586710436112033;  // std dev = 0.076, 52.000 (wgt'ed) examples reached here.  /* #neg=52 */
%   | else if ( follows(A, G) )
%   | | then if ( follows(H, G), recursion_accounttype(H, B) )
%   | | | then return 0.7308795922699503;  // std dev = 1.061, 17.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=16 */
%   | | | else return -0.19313451828234204;  // std dev = 0.017, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
%   | | else return 0.13528814661266872;  // std dev = 0.482, 19.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=7 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(C, D), follows(D, A) )
%   | then return 0.3336693983768015;  // std dev = 0.080, 63.000 (wgt'ed) examples reached here.  /* #pos=63 */
%   | else if ( follows(A, C), tweets(A, E) )
%   | | then return 0.22829001889939804;  // std dev = 0.314, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | else return 0.31841010351465265;  // std dev = 0.003, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   else if ( follows(F, A) )
%   | then if ( follows(G, F), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H), recursion_accounttype(H, B) )
%   | | | then return 0.17673577677447153;  // std dev = 0.779, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | | else return 0.4413083593432423;  // std dev = 0.257, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | else return -0.09550838665068505;  // std dev = 0.066, 212.000 (wgt'ed) examples reached here.  /* #neg=210 #pos=2 */
%   | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | then return 0.3516449205978582;  // std dev = 0.109, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( follows(A, J), tweets(A, K) )
%   | | | then return 0.01269996759456928;  // std dev = 2.255, 68.000 (wgt'ed) examples reached here.  /* #neg=53 #pos=15 */
%   | | | else return 0.087545547568482;  // std dev = 3.531, 75.000 (wgt'ed) examples reached here.  /* #neg=50 #pos=25 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( recursion_accounttype(C, B), tweets(D, E) )
%   | | then if ( follows(C, D) )
%   | | | then return 0.2589779509107388;  // std dev = 0.826, 73.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=72 */
%   | | | else return -0.024725988093937574;  // std dev = 1.224, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   | | else if ( follows(F, A) )
%   | | | then return 0.32585777427726415;  // std dev = 0.388, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | | else return 0.5794256120945571;  // std dev = 0.361, 30.000 (wgt'ed) examples reached here.  /* #pos=30 */
%   | else return -0.11033563818215222;  // std dev = 0.507, 265.000 (wgt'ed) examples reached here.  /* #neg=265 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.25341745692176265;  // std dev = 0.003, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else if ( tweets(A, H), follows(I, A) )
%   | | then return -0.07386966181196367;  // std dev = 0.071, 32.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=1 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.05390619081591592;  // std dev = 0.994, 11.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=4 */
%   | | | else return -0.0010171727188561304;  // std dev = 2.278, 31.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=8 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(C, D) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then return 0.22175341273105303;  // std dev = 0.082, 61.000 (wgt'ed) examples reached here.  /* #pos=61 */
%   | | else if ( recursion_accounttype(D, B), tweets(A, F) )
%   | | | then return -0.004405374376496213;  // std dev = 0.710, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | else return 0.17238057955131839;  // std dev = 0.791, 11.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=10 */
%   | else return -0.026929799281822858;  // std dev = 1.053, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   else if ( follows(A, G), follows(G, A) )
%   | then return -0.05074533154998977;  // std dev = 0.109, 162.000 (wgt'ed) examples reached here.  /* #neg=147 #pos=15 */
%   | else if ( tweets(A, H) )
%   | | then if ( tweets(I, H), recursion_accounttype(I, B) )
%   | | | then return 0.30964595578960175;  // std dev = 0.592, 38.000 (wgt'ed) examples reached here.  /* #pos=38 */
%   | | | else return -0.11601522596399073;  // std dev = 0.285, 86.000 (wgt'ed) examples reached here.  /* #neg=86 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.06691645829471195;  // std dev = 1.902, 37.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=13 */
%   | | | else return 0.07815066824200949;  // std dev = 2.308, 30.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=12 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(D, C) )
%   | then if ( recursion_accounttype(D, B) )
%   | | then return 0.1810490034871821;  // std dev = 0.086, 40.000 (wgt'ed) examples reached here.  /* #pos=40 */
%   | | else if ( tweets(A, E), follows(A, D) )
%   | | | then return 0.025023661291069626;  // std dev = 1.259, 12.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=10 */
%   | | | else return 0.17033086195652067;  // std dev = 0.024, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | else return 0.1894101887341934;  // std dev = 0.125, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   else if ( follows(F, A) )
%   | then return -0.05102225469157559;  // std dev = 0.116, 264.000 (wgt'ed) examples reached here.  /* #neg=241 #pos=23 */
%   | else if ( tweets(A, G) )
%   | | then if ( tweets(H, G), recursion_accounttype(H, B) )
%   | | | then return 0.2502493044265026;  // std dev = 1.010, 26.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=25 */
%   | | | else return -0.12003140850692144;  // std dev = 0.129, 38.000 (wgt'ed) examples reached here.  /* #neg=38 */
%   | | else if ( follows(A, I) )
%   | | | then return 0.07291475583016893;  // std dev = 2.028, 42.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=16 */
%   | | | else return 0.09793125548358056;  // std dev = 2.068, 18.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=7 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then return 0.16554377894903405;  // std dev = 0.124, 64.000 (wgt'ed) examples reached here.  /* #pos=64 */
%   | else if ( follows(A, E), tweets(A, F) )
%   | | then return -0.0212430258984177;  // std dev = 0.879, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | else return 0.14417334671006587;  // std dev = 0.041, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   else if ( follows(A, G), recursion_accounttype(G, B) )
%   | then if ( tweets(A, H) )
%   | | then return 0.19670076924172042;  // std dev = 0.085, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else return -0.1552629579555502;  // std dev = 0.914, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | else if ( follows(I, A) )
%   | | then if ( follows(I, J), recursion_accounttype(J, B) )
%   | | | then return 0.2581724749804082;  // std dev = 0.793, 18.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=17 */
%   | | | else return -0.07364577892252396;  // std dev = 0.088, 225.000 (wgt'ed) examples reached here.  /* #neg=225 */
%   | | else if ( follows(A, K), follows(K, L) )
%   | | | then return 6.95116667191464E-4;  // std dev = 2.241, 87.000 (wgt'ed) examples reached here.  /* #neg=62 #pos=25 */
%   | | | else return 0.03812196815947904;  // std dev = 2.378, 42.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=15 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.14068634931572804;  // std dev = 0.139, 85.000 (wgt'ed) examples reached here.  /* #pos=85 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, D), follows(A, E) )
%   | | | then return -0.140488987244009;  // std dev = 1.030, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | | | else return 0.2591675296395466;  // std dev = 0.279, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | else return -0.06928884415822793;  // std dev = 0.085, 223.000 (wgt'ed) examples reached here.  /* #neg=223 */
%   | else if ( follows(A, F), recursion_accounttype(F, B) )
%   | | then return 0.17530949451505703;  // std dev = 0.094, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( follows(A, G) )
%   | | | then return -0.012757533068412142;  // std dev = 2.428, 116.000 (wgt'ed) examples reached here.  /* #neg=87 #pos=29 */
%   | | | else return 0.00738898358689288;  // std dev = 2.308, 31.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=11 */


Results
   AUC ROC   = 0.994016
   AUC PR    = 0.398453
   CLL	      = -0.104645
   Precision = 0.343324 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.511156


Total learning time: 34.91348886489868 seconds
Total inference time: 30.857 seconds
AUC ROC: 0.994016


Results scoring model
   AUC ROC   = 0.994465
   AUC PR    = 0.425849
   CLL	      = -0.120282
   Precision = 0.340961 at threshold = 0.5
   Recall    = 0.955128
   F1        = 0.50253


Total scoring time: 42.925 seconds
Parameter learned model CLL: -0.120282


Structure after Parameter Learning
[['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'tweets(A, D), follows(A, C)', 'false': 'follows(A, E), recursion_accounttype(E, B)', 'false,true': 'tweets(A, F)', 'false,true,true': 'follows(G, A)', 'false,false': 'follows(H, A)', 'false,false,true': 'follows(H, I), follows(I, A)', 'false,false,false': 'follows(A, J), follows(J, K)'}, {'true,true': [0.2, 2, 46], 'true,false': [5.96e-08, 0, 39], 'false,true,true,true': [0.926, 1, 6], 'false,true,true,false': [0.0, 0, 6], 'false,true,false': [0.816, 1, 2], 'false,false,true,true': [0.996, 132, 1], 'false,false,true,false': [3.64, 77, 16], 'false,false,false,true': [4.211, 61, 25], 'false,false,false,false': [3.162, 30, 15]}], ['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(A, C), tweets(A, D)', 'false': 'follows(E, A)', 'false,true': 'follows(E, F), follows(F, A)', 'false,true,false': 'follows(E, G), recursion_accounttype(G, B)', 'false,false': 'follows(A, H), recursion_accounttype(H, B)', 'false,false,true': 'tweets(A, I)', 'false,false,false': 'follows(A, J)'}, {'true,true': [0.24, 3, 46], 'true,false': [0.0, 0, 39], 'false,true,true': [0.12, 119, 2], 'false,true,false,true': [0.209, 0, 21], 'false,true,false,false': [3.33e-08, 79, 0], 'false,false,true,true': [2.11e-08, 0, 6], 'false,false,true,false': [1.0, 2, 2], 'false,false,false,true': [4.597, 78, 29], 'false,false,false,false': [2.441, 13, 11]}], ['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(D, C)', 'false': 'follows(E, A)', 'false,true': 'follows(E, F), recursion_accounttype(F, B)', 'false,true,true': 'follows(F, E)', 'false,false': 'tweets(A, G)', 'false,false,true': 'tweets(H, G), recursion_accounttype(H, B)', 'false,false,false': 'follows(A, I), follows(I, J)'}, {'true,true': [0.126, 1, 60], 'true,false': [0.058, 0, 25], 'false,true,true,true': [0.345, 0, 21], 'false,true,true,false': [0.85, 1, 2], 'false,true,false': [0.1, 212, 0], 'false,false,true,true': [0.559, 0, 25], 'false,false,true,false': [0.084, 44, 0], 'false,false,false,true': [3.142, 35, 14], 'false,false,false,false': [2.458, 18, 9]}], ['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'true,true': 'recursion_accounttype(C, B)', 'false': 'tweets(A, E)', 'false,true': 'tweets(F, E), recursion_accounttype(F, B)', 'false,true,true': 'follows(A, F)', 'false,false': 'follows(A, G)', 'false,false,true': 'follows(H, G), recursion_accounttype(H, B)'}, {'true,true,true': [0.109, 1, 85], 'true,true,false': [0.089, 0, 23], 'true,false': [0.089, 218, 0], 'false,true,true,true': [0.0, 0, 6], 'false,true,true,false': [0.088, 0, 19], 'false,true,false': [0.076, 52, 0], 'false,false,true,true': [1.061, 1, 16], 'false,false,true,false': [0.017, 20, 0], 'false,false,false': [0.482, 12, 7]}], ['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(C, D), follows(D, A)', 'true,false': 'follows(A, C), tweets(A, E)', 'false': 'follows(F, A)', 'false,true': 'follows(G, F), recursion_accounttype(G, B)', 'false,true,true': 'follows(A, H), recursion_accounttype(H, B)', 'false,false': 'follows(A, I), recursion_accounttype(I, B)', 'false,false,false': 'follows(A, J), tweets(A, K)'}, {'true,true': [0.08, 0, 63], 'true,false,true': [0.314, 1, 8], 'true,false,false': [0.003, 0, 14], 'false,true,true,true': [0.779, 1, 5], 'false,true,true,false': [0.257, 0, 16], 'false,true,false': [0.066, 210, 2], 'false,false,true': [0.109, 0, 8], 'false,false,false,true': [2.255, 53, 15], 'false,false,false,false': [3.531, 50, 25]}], ['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'recursion_accounttype(C, B), tweets(D, E)', 'true,true,true': 'follows(C, D)', 'true,true,false': 'follows(F, A)', 'false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false': 'tweets(A, H), follows(I, A)', 'false,false,false': 'tweets(A, J)'}, {'true,true,true,true': [0.826, 1, 72], 'true,true,true,false': [1.224, 2, 5], 'true,true,false,true': [0.388, 0, 21], 'true,true,false,false': [0.361, 0, 30], 'true,false': [0.507, 265, 0], 'false,true': [0.003, 0, 15], 'false,false,true': [0.071, 31, 1], 'false,false,false,true': [0.994, 7, 4], 'false,false,false,false': [2.278, 23, 8]}], ['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(A, D), follows(C, D)', 'true,true': 'follows(E, A), recursion_accounttype(E, B)', 'true,true,false': 'recursion_accounttype(D, B), tweets(A, F)', 'false': 'follows(A, G), follows(G, A)', 'false,false': 'tweets(A, H)', 'false,false,true': 'tweets(I, H), recursion_accounttype(I, B)', 'false,false,false': 'follows(A, J), follows(J, K)'}, {'true,true,true': [0.082, 0, 61], 'true,true,false,true': [0.71, 1, 3], 'true,true,false,false': [0.791, 1, 10], 'true,false': [1.053, 2, 4], 'false,true': [0.109, 147, 15], 'false,false,true,true': [0.592, 0, 38], 'false,false,true,false': [0.285, 86, 0], 'false,false,false,true': [1.902, 24, 13], 'false,false,false,false': [2.308, 18, 12]}], ['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(D, C)', 'true,true': 'recursion_accounttype(D, B)', 'true,true,false': 'tweets(A, E), follows(A, D)', 'false': 'follows(F, A)', 'false,false': 'tweets(A, G)', 'false,false,true': 'tweets(H, G), recursion_accounttype(H, B)', 'false,false,false': 'follows(A, I)'}, {'true,true,true': [0.086, 0, 40], 'true,true,false,true': [1.259, 2, 10], 'true,true,false,false': [0.024, 0, 10], 'true,false': [0.125, 0, 25], 'false,true': [0.116, 241, 23], 'false,false,true,true': [1.01, 1, 25], 'false,false,true,false': [0.129, 38, 0], 'false,false,false,true': [2.028, 26, 16], 'false,false,false,false': [2.068, 11, 7]}], ['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(A, D), recursion_accounttype(D, B)', 'true,false': 'follows(A, E), tweets(A, F)', 'false': 'follows(A, G), recursion_accounttype(G, B)', 'false,true': 'tweets(A, H)', 'false,false': 'follows(I, A)', 'false,false,true': 'follows(I, J), recursion_accounttype(J, B)', 'false,false,false': 'follows(A, K), follows(K, L)'}, {'true,true': [0.124, 0, 64], 'true,false,true': [0.879, 1, 5], 'true,false,false': [0.041, 0, 16], 'false,true,true': [0.085, 0, 12], 'false,true,false': [0.914, 2, 2], 'false,false,true,true': [0.793, 1, 17], 'false,false,true,false': [0.088, 225, 0], 'false,false,false,true': [2.241, 62, 25], 'false,false,false,false': [2.378, 27, 15]}], ['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'follows(E, D), follows(A, E)', 'false,false': 'follows(A, F), recursion_accounttype(F, B)', 'false,false,false': 'follows(A, G)'}, {'true': [0.139, 0, 85], 'false,true,true,true': [1.03, 2, 4], 'false,true,true,false': [0.279, 0, 19], 'false,true,false': [0.085, 223, 0], 'false,false,true': [0.094, 0, 8], 'false,false,false,true': [2.428, 87, 29], 'false,false,false,false': [2.308, 20, 11]}]]
[{'': [0.022460034350640704, 0.15411596432088304], 'false': [0.10937499999999967, 0.13417131558505832], 'false,false': [0.06956300415067715, 0.2121088514655336], 'false,false,false': [0.20619253650622066, 0.2222222222222218], 'false,true': [0.07100591715976314, 0.22222222222222224], 'false,true,true': [0.12244897959183662, -1.4802973661668753e-16], 'false,false,true': [0.007462264684266983, 0.14244421320383804], 'true': [0.03993055555555639, 9.109522253334617e-17]}, {'': [0.032694076593362424, 0.14761863607072306], 'false': [0.08648352672207503, 0.21774762661575764], 'false,false': [0.1460098677322236, 0.21178559143520373], 'false,false,false': [0.19752344098015137, 0.24826388888888853], 'false,false,true': [7.401486830834377e-17, 0.25], 'false,true': [0.014332738023550468, 0.15798739511786028], 'false,true,false': [0.002078852377359449, 1.4053456007913375e-17], 'true': [0.05747605164514805, -9.109522253334617e-17]}, {'': [0.011381432136107778, 0.12355336664410624], 'false': [0.05958223295366867, 0.20876934229428773], 'false,false': [0.206831596680607, 0.20951334278696754], 'false,false,false': [0.2014567871641952, 0.22374738699530367], 'false,false,true': [0.012511099075193996, 0.00016204258717641217], 'false,true': [0.052730623765333995, 4.6995415379109926e-05], 'false,true,true': [0.005665572991778352, 0.240568954667172], 'true': [0.01593208558454221, 0.00013447274054740889]}, {'': [0.07234060045181588, 0.1807711532393651], 'false': [0.1318528502567715, 0.24123063580628262], 'false,false': [0.24248295472246814, 0.23268698060941845], 'false,false,true': [0.06622548919685875, 1.435986530042288e-05], 'false,true': [0.017350393658072463, 0.0001123011807087199], 'true': [0.013775761601802924, 3.651660111404813e-05], 'false,true,true': [-3.700743415417188e-17, 0.0004063591242814705], 'true,true': [0.011976332663065086, 0.007883019851964504]}, {'': [0.011436310558756971, 0.0676334961623398], 'false': [0.026480626797362045, 0.12270491700092098], 'false,false': [0.011843431979791333, 0.12414858657964958], 'false,false,false': [0.07477683638665865, 0.16624848481595048], 'false,true': [0.04448120629464185, 0.004313462018334572], 'false,true,true': [0.10118116912283094, 0.00412817893031403], 'true': [0.00010166394825653466, 0.040613427517311194], 'true,false': [0.09884528312068724, 6.34206961946937e-07]}, {'': [0.05725264338828846, 0.08385387017839546], 'false': [5.193015141236046e-07, 0.0878469354443308], 'false,false': [0.00506417314977513, 0.147628564674966], 'false,false,false': [0.08975352151120253, 0.16737481473082313], 'true': [0.042574553844206504, 0.0009696947925247004], 'true,true': [0.03369395777694541, 0.021076352476154404], 'true,true,true': [0.009346123807305802, 0.21416185189165282], 'true,true,false': [0.007166427164606581, 0.004338209686745505]}, {'': [0.033438577325130954, 0.04775093156251797], 'false': [0.01183983280401672, 0.07486640382690549], 'false,false': [0.04199537627152166, 0.1335545722828134], 'false,false,false': [0.09777384172083879, 0.17761444331164383], 'false,false,true': [0.009234801468503622, 0.0009457953594367039], 'true': [0.01763881005811053, 0.18469558995522262], 'true,true': [0.00011120559755954685, 0.08144098828992744], 'true,true,false': [0.1261102245991549, 0.05686342336371526]}, {'': [0.021470969461174022, 0.04147880014634075], 'false': [0.013345992172101835, 0.09378365213700374], 'false,false': [0.04927473819095081, 0.13996823575379913], 'false,false,false': [0.0979150230771028, 0.23765432098765416], 'false,false,true': [0.03924769708657521, 0.00043529892435617557], 'true': [0.02940929380077274, 0.0006271954857907147], 'true,true': [0.00018484390678664143, 0.0773215661613909], 'true,true,false': [0.13210970567227973, 5.897189456264828e-05]}, {'': [0.011423004682115809, 0.03889739158989542], 'false': [0.0809316332459323, 0.036323435608695734], 'false,true': [0.007297104116698506, 0.20892637168668765], 'false,false': [0.010174566848391423, 0.08307387774842438], 'false,false,false': [0.05771228231824146, 0.1346639063216995], 'true': [0.00024191286801471257, 0.04066042507280465], 'true,false': [0.1289021992073971, 0.0001072389558919272], 'false,false,true': [0.0349769299666595, 3.457382684174269e-05]}, {'': [0.00022590678371435215, 0.036865846771033085], 'false': [0.012459432131144312, 0.07456677866574657], 'false,false': [0.008864339499133966, 0.0763984618829829], 'false,false,false': [0.05082674411112025, 0.17176589205509224], 'false,true': [0.0746824017300266, 3.2724784936462535e-05], 'false,true,true': [0.17680181139078896, 0.0041000875433131875]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
0;true;tweets(A, D), follows(A, C).;true;true
0;false;follows(A, E), recursion_accounttype(E, B).;true;true
0;false,true;tweets(A, F).;true;true
0;false,true,true;follows(G, A).;true;true
1;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
1;true;follows(A, C), tweets(A, D).;true;true
1;false;follows(E, A).;true;true
1;false,true;follows(E, F), follows(F, A).;true;true
1;false,true,false;follows(E, G), recursion_accounttype(G, B).;true;true
1;false,false;follows(A, H), recursion_accounttype(H, B).;true;true
1;false,false,true;tweets(A, I).;true;true
2;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
2;true;follows(D, A), follows(D, C).;true;true
2;false;follows(E, A).;true;true
2;false,true;follows(E, F), recursion_accounttype(F, B).;true;true
2;false,false;tweets(A, G).;true;true
2;false,false,true;tweets(H, G), recursion_accounttype(H, B).;true;true
3;;accounttype(A, B) :- follows(C, A).;true;true
3;true;follows(C, D), recursion_accounttype(D, B).;true;true
3;false;tweets(A, E).;true;true
3;false,true;tweets(F, E), recursion_accounttype(F, B).;true;true
3;false,true,true;follows(A, F).;true;true
3;false,false;follows(A, G).;true;true
3;false,false,true;follows(H, G), recursion_accounttype(H, B).;true;true
4;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
4;true;follows(C, D), follows(D, A).;true;true
4;true,false;follows(A, C), tweets(A, E).;true;true
5;;accounttype(A, B) :- follows(A, C).;true;true
5;true;follows(D, C), recursion_accounttype(D, B).;true;true
5;false;follows(G, A), recursion_accounttype(G, B).;true;true
6;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
6;true;follows(A, D), follows(C, D).;true;true
6;true,true;follows(E, A), recursion_accounttype(E, B).;true;true
6;false;follows(A, G), follows(G, A).;true;true
6;false,false;tweets(A, H).;true;true
6;false,false,true;tweets(I, H), recursion_accounttype(I, B).;true;true
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
7;true;follows(D, A), follows(D, C).;true;true
7;true,true;recursion_accounttype(D, B).;true;true
7;true,true,false;tweets(A, E), follows(A, D).;true;true
7;false;follows(F, A).;true;true
7;false,false;tweets(A, G).;true;true
7;false,false,true;tweets(H, G), recursion_accounttype(H, B).;true;true
8;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
8;true;follows(A, D), recursion_accounttype(D, B).;true;true
8;true,false;follows(A, E), tweets(A, F).;true;true
8;false;follows(A, G), recursion_accounttype(G, B).;true;true
8;false,false;follows(I, A).;true;true
8;false,false,true;follows(I, J), recursion_accounttype(J, B).;true;true
9;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
9;false;follows(D, A).;true;true
9;false,true;follows(D, E), recursion_accounttype(E, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(A, C) )
%   | then if ( tweets(C, D) )
%   | | then return 0.8348931211460235;  // std dev = 0.151, 43.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=42 */
%   | | else return 0.6581489350995122;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else return 0.8581489350995122;  // std dev = 5.96e-08, 39.000 (wgt'ed) examples reached here.  /* #pos=39 */
%   else if ( follows(A, E), recursion_accounttype(E, B) )
%   | then if ( tweets(A, F) )
%   | | then return 0.8581489350995123;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else return 0.3581489350995122;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | else if ( follows(G, A) )
%   | | then if ( follows(G, H), follows(H, A) )
%   | | | then return -0.13475886631892764;  // std dev = 0.996, 141.000 (wgt'ed) examples reached here.  /* #neg=140 #pos=1 */
%   | | | else return 0.03592671287729016;  // std dev = 3.627, 90.000 (wgt'ed) examples reached here.  /* #neg=74 #pos=16 */
%   | | else if ( follows(A, I), follows(I, J) )
%   | | | then return 0.13287420982478626;  // std dev = 4.258, 91.000 (wgt'ed) examples reached here.  /* #neg=66 #pos=25 */
%   | | | else return 0.19905802600860323;  // std dev = 3.144, 44.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=15 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, C), tweets(A, D) )
%   | then if ( follows(A, E), follows(E, C) )
%   | | then return 0.701976579154952;  // std dev = 0.159, 39.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=38 */
%   | | else if ( follows(C, F), follows(F, A) )
%   | | | then return 0.7241431213873057;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.5241431213873058;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else return 0.7194734122109545;  // std dev = 0.000, 39.000 (wgt'ed) examples reached here.  /* #pos=39 */
%   else if ( follows(G, A) )
%   | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | then return 0.8195704750025455;  // std dev = 0.060, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | | else return -0.13331439369396472;  // std dev = 0.141, 215.000 (wgt'ed) examples reached here.  /* #neg=215 */
%   | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | then return 0.6281995730053277;  // std dev = 0.323, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.13530988511162662;  // std dev = 4.201, 85.000 (wgt'ed) examples reached here.  /* #neg=60 #pos=25 */
%   | | | else return 0.2268868399241755;  // std dev = 3.013, 38.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=15 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.5521918253545327;  // std dev = 0.124, 65.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=64 */
%   | else if ( follows(E, A), follows(A, E) )
%   | | then return 0.36386544589247527;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | else if ( follows(C, F), follows(F, C) )
%   | | | then return 0.46780794660628455;  // std dev = 0.970, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | | else return 0.5620282360120282;  // std dev = 0.039, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.5553664367462846;  // std dev = 0.000, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), follows(I, A) )
%   | | | then return -0.1064699847377485;  // std dev = 0.862, 150.000 (wgt'ed) examples reached here.  /* #neg=149 #pos=1 */
%   | | | else return 0.014346679790924953;  // std dev = 3.099, 94.000 (wgt'ed) examples reached here.  /* #neg=78 #pos=16 */
%   | | else if ( follows(A, J) )
%   | | | then return 0.10076616679646867;  // std dev = 4.563, 103.000 (wgt'ed) examples reached here.  /* #neg=74 #pos=29 */
%   | | | else return 0.08750821567271087;  // std dev = 2.796, 38.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=11 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(D, C) )
%   | then return 0.4102642467890068;  // std dev = 0.127, 61.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=60 */
%   | else return 0.42907742711973973;  // std dev = 0.096, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   else if ( follows(E, A) )
%   | then if ( follows(E, F), recursion_accounttype(F, B) )
%   | | then if ( follows(A, F) )
%   | | | then return 0.2901680073338215;  // std dev = 0.919, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | | else return 0.7203568603335972;  // std dev = 0.054, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else return -0.11482654358499698;  // std dev = 0.214, 209.000 (wgt'ed) examples reached here.  /* #neg=209 */
%   | else if ( follows(A, G), follows(G, H) )
%   | | then if ( recursion_accounttype(H, B) )
%   | | | then return 0.6914310743096529;  // std dev = 1.506, 34.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=33 */
%   | | | else return -0.195703369751362;  // std dev = 0.220, 80.000 (wgt'ed) examples reached here.  /* #neg=80 */
%   | | else if ( tweets(A, I) )
%   | | | then return 0.15771580801608476;  // std dev = 1.937, 16.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=6 */
%   | | | else return 0.11647753456737903;  // std dev = 2.449, 27.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=9 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.33002259131923983;  // std dev = 0.128, 85.000 (wgt'ed) examples reached here.  /* #pos=85 */
%   else if ( follows(A, D), recursion_accounttype(D, B) )
%   | then return 0.3405696559812496;  // std dev = 0.171, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | else if ( follows(E, A) )
%   | | then if ( follows(F, E), recursion_accounttype(F, B) )
%   | | | then return 0.5566649554661339;  // std dev = 0.068, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | | else return -0.10016663888563097;  // std dev = 0.738, 245.000 (wgt'ed) examples reached here.  /* #neg=244 #pos=1 */
%   | | else if ( follows(A, G) )
%   | | | then return 0.05128290261833177;  // std dev = 3.999, 111.000 (wgt'ed) examples reached here.  /* #neg=82 #pos=29 */
%   | | | else return 0.11483666409972458;  // std dev = 2.666, 31.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=11 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(C, D) )
%   | then return 0.26288619080198355;  // std dev = 0.103, 67.000 (wgt'ed) examples reached here.  /* #pos=67 */
%   | else if ( follows(A, C) )
%   | | then return -0.05260170809275736;  // std dev = 0.799, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return 0.19574797400194313;  // std dev = 0.235, 17.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=16 */
%   else if ( follows(E, A) )
%   | then if ( follows(F, E), follows(F, A) )
%   | | then return -0.07729181581284522;  // std dev = 0.057, 142.000 (wgt'ed) examples reached here.  /* #neg=140 #pos=2 */
%   | | else if ( follows(G, E), recursion_accounttype(G, B) )
%   | | | then return 0.3890118638256883;  // std dev = 0.212, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | | else return -0.10406291018557418;  // std dev = 0.991, 83.000 (wgt'ed) examples reached here.  /* #neg=81 #pos=2 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0.25506707402575923;  // std dev = 0.132, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( follows(A, I) )
%   | | | then return 0.07483525339474735;  // std dev = 3.894, 96.000 (wgt'ed) examples reached here.  /* #neg=67 #pos=29 */
%   | | | else return 0.11806292409760392;  // std dev = 2.614, 29.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=11 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.21950885852023666;  // std dev = 0.196, 74.000 (wgt'ed) examples reached here.  /* #pos=74 */
%   | else return 0.02811446120816836;  // std dev = 0.847, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   else if ( follows(E, A), tweets(E, F) )
%   | then if ( follows(A, G), follows(E, G) )
%   | | then return -0.062123173086073354;  // std dev = 0.106, 175.000 (wgt'ed) examples reached here.  /* #neg=163 #pos=12 */
%   | | else if ( tweets(H, F), recursion_accounttype(H, B) )
%   | | | then return 0.20095539975869828;  // std dev = 1.317, 27.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=25 */
%   | | | else return -0.08736477415224168;  // std dev = 0.074, 49.000 (wgt'ed) examples reached here.  /* #neg=49 */
%   | else if ( follows(A, I) )
%   | | then if ( follows(I, J), follows(A, J) )
%   | | | then return -0.018704167665490948;  // std dev = 2.127, 43.000 (wgt'ed) examples reached here.  /* #neg=34 #pos=9 */
%   | | | else return 0.13784909834281459;  // std dev = 3.098, 54.000 (wgt'ed) examples reached here.  /* #neg=33 #pos=21 */
%   | | else if ( tweets(A, K) )
%   | | | then return 0.07374907580355178;  // std dev = 1.595, 11.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=4 */
%   | | | else return 0.010194281648836893;  // std dev = 2.227, 24.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=7 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.1862907999327868;  // std dev = 0.137, 85.000 (wgt'ed) examples reached here.  /* #pos=85 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(A, E), follows(E, D) )
%   | | | then return -0.014699913592808578;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return 0.2840730432287001;  // std dev = 0.914, 20.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=19 */
%   | | else return -0.08177429909676533;  // std dev = 0.144, 209.000 (wgt'ed) examples reached here.  /* #neg=209 */
%   | else if ( follows(A, F), recursion_accounttype(F, B) )
%   | | then return 0.17953533726045368;  // std dev = 0.098, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( tweets(A, G), follows(A, H) )
%   | | | then return -0.009306410849417914;  // std dev = 2.859, 65.000 (wgt'ed) examples reached here.  /* #neg=50 #pos=15 */
%   | | | else return 0.05204827978466059;  // std dev = 3.771, 79.000 (wgt'ed) examples reached here.  /* #neg=54 #pos=25 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.15971799202992157;  // std dev = 0.122, 85.000 (wgt'ed) examples reached here.  /* #pos=85 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(A, E) )
%   | | | then return 0.19705060255900977;  // std dev = 0.033, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.27622519995374195;  // std dev = 0.302, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else return -0.07594094032102519;  // std dev = 0.133, 202.000 (wgt'ed) examples reached here.  /* #neg=202 */
%   | else if ( tweets(A, F) )
%   | | then if ( tweets(G, F), recursion_accounttype(G, B) )
%   | | | then return 0.471332257805974;  // std dev = 1.748, 26.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=25 */
%   | | | else return -0.23681909452593383;  // std dev = 0.430, 59.000 (wgt'ed) examples reached here.  /* #neg=59 */
%   | | else if ( follows(A, H) )
%   | | | then return 0.03800711096337777;  // std dev = 2.693, 50.000 (wgt'ed) examples reached here.  /* #neg=34 #pos=16 */
%   | | | else return 0.20576991760808003;  // std dev = 1.871, 14.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=7 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then return 0.14055911941992574;  // std dev = 0.098, 69.000 (wgt'ed) examples reached here.  /* #pos=69 */
%   | else if ( follows(C, E), follows(E, A) )
%   | | then if ( recursion_accounttype(E, B) )
%   | | | then return 0.13349052727635535;  // std dev = 0.008, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return -0.03251202920209432;  // std dev = 0.892, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | else return 0.13787398242906532;  // std dev = 0.041, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   else if ( follows(F, A) )
%   | then if ( follows(F, G), follows(G, A) )
%   | | then return -0.06359215800724834;  // std dev = 0.074, 138.000 (wgt'ed) examples reached here.  /* #neg=136 #pos=2 */
%   | | else return -0.021228288830068012;  // std dev = 0.119, 100.000 (wgt'ed) examples reached here.  /* #neg=79 #pos=21 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0.11805393508196749;  // std dev = 0.048, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( tweets(A, I) )
%   | | | then return 0.03829460061862626;  // std dev = 2.619, 62.000 (wgt'ed) examples reached here.  /* #neg=43 #pos=19 */
%   | | | else return 0.010235777323408348;  // std dev = 3.431, 72.000 (wgt'ed) examples reached here.  /* #neg=51 #pos=21 */


Results
   AUC ROC   = 0.991929
   AUC PR    = 0.349154
   CLL	      = -0.127503
   Precision = 0.326648 at threshold = 0.5
   Recall    = 0.904762
   F1        = 0.48


Total learning time: 26.28223180770874 seconds
Total inference time: 24.757 seconds
AUC ROC: 0.991929


Results scoring model
   AUC ROC   = 0.992763
   AUC PR    = 0.366991
   CLL	      = -0.145688
   Precision = 0.316583 at threshold = 0.5
   Recall    = 0.807692
   F1        = 0.454874


Total scoring time: 30.899 seconds
Refined model CLL: -0.145688


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.994016
   AUC PR    = 0.398453
   CLL	      = -0.104645
   Precision = 0.343324 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.511156


Total learning time: 135.01972067260743 seconds
Total inference time: 30.857 seconds
AUC ROC: 0.994016
Total revision time: 135.01972067260743
Best scored revision CLL: -0.120282


Dataset: 7_yeast_twitter, Fold: 2, Type: Transfer (trRDN-B), Time: 00:20:09
{'AUC ROC': 0.994016, 'AUC PR': 0.398453, 'CLL': -0.104645, 'Precision': [0.343324, 0.5], 'Recall': 1.0, 'F1': 0.511156, 'Learning time': 135.01972067260743, 'Inference time': 30.857, 'parameter': {'AUC ROC': 0.994016, 'AUC PR': 0.398453, 'CLL': -0.104645, 'Precision': [0.343324, 0.5], 'Recall': 1.0, 'F1': 0.511156, 'Learning time': 34.91348886489868, 'Inference time': 30.857}}


WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8462441731947502;  // std dev = 0.108, 84.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=83 */
%   | else return 0.5248156017661788;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   else if ( follows(E, A) )
%   | then if ( follows(F, E), follows(F, A) )
%   | | then return -0.12669954974897257;  // std dev = 0.122, 132.000 (wgt'ed) examples reached here.  /* #neg=130 #pos=2 */
%   | | else if ( follows(E, G), recursion_accounttype(G, B) )
%   | | | then return 0.8126943896449667;  // std dev = 0.977, 22.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=21 */
%   | | | else return -0.14185106490048763;  // std dev = 8.69e-08, 95.000 (wgt'ed) examples reached here.  /* #neg=95 */
%   | else if ( follows(A, H), follows(H, I) )
%   | | then if ( recursion_accounttype(I, B) )
%   | | | then return 0.8010060779566543;  // std dev = 1.373, 35.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=33 */
%   | | | else return -0.14185106490048766;  // std dev = 7.60e-08, 78.000 (wgt'ed) examples reached here.  /* #neg=78 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.21109011157010057;  // std dev = 1.970, 17.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=6 */
%   | | | else return 0.24945328292559932;  // std dev = 2.341, 23.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=9 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, C), tweets(A, D) )
%   | then if ( follows(E, A), follows(E, C) )
%   | | then return 0.6932984489190519;  // std dev = 0.167, 35.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=34 */
%   | | else return 0.721869877490481;  // std dev = 5.16e-08, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | else return 0.7249344447768815;  // std dev = 0.082, 39.000 (wgt'ed) examples reached here.  /* #pos=39 */
%   else if ( follows(A, F), recursion_accounttype(F, B) )
%   | then if ( tweets(A, G) )
%   | | then return 0.7417354184908258;  // std dev = 0.137, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else return 0.0877589443206681;  // std dev = 1.121, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | | then return 0.7370452991063273;  // std dev = 0.140, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | | else return -0.12655382452182928;  // std dev = 0.011, 211.000 (wgt'ed) examples reached here.  /* #neg=211 */
%   | | else if ( tweets(A, J), follows(A, K) )
%   | | | then return 0.08138311860106685;  // std dev = 2.953, 62.000 (wgt'ed) examples reached here.  /* #neg=47 #pos=15 */
%   | | | else return 0.13566161306014554;  // std dev = 3.890, 81.000 (wgt'ed) examples reached here.  /* #neg=56 #pos=25 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(A, C) )
%   | then return 0.5629133452084959;  // std dev = 0.021, 46.000 (wgt'ed) examples reached here.  /* #pos=46 */
%   | else if ( follows(A, E), follows(E, A) )
%   | | then return 0.451693885327103;  // std dev = 0.307, 19.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=17 */
%   | | else return 0.5639785465815561;  // std dev = 0.104, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   else if ( follows(A, F), recursion_accounttype(F, B) )
%   | then if ( follows(A, G), follows(G, F) )
%   | | then return 0.6047082982166153;  // std dev = 0.074, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else return 0.22967012666200068;  // std dev = 0.815, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(I, H), follows(I, A) )
%   | | | then return -0.10710448492133554;  // std dev = 0.877, 133.000 (wgt'ed) examples reached here.  /* #neg=132 #pos=1 */
%   | | | else return -0.01670900156704399;  // std dev = 2.500, 113.000 (wgt'ed) examples reached here.  /* #neg=97 #pos=16 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.08288095676080612;  // std dev = 3.642, 96.000 (wgt'ed) examples reached here.  /* #neg=71 #pos=25 */
%   | | | else return 0.14053509103261863;  // std dev = 3.166, 45.000 (wgt'ed) examples reached here.  /* #neg=30 #pos=15 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.42769398836221945;  // std dev = 0.134, 85.000 (wgt'ed) examples reached here.  /* #pos=85 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), follows(E, A) )
%   | | then if ( follows(E, D) )
%   | | | then return -0.09528858621974033;  // std dev = 0.885, 110.000 (wgt'ed) examples reached here.  /* #neg=109 #pos=1 */
%   | | | else return -0.046098544789423684;  // std dev = 0.715, 13.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=1 */
%   | | else if ( follows(A, F), follows(D, F) )
%   | | | then return -0.008178075512575256;  // std dev = 2.047, 68.000 (wgt'ed) examples reached here.  /* #neg=56 #pos=12 */
%   | | | else return 0.09251813790339414;  // std dev = 1.699, 30.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=9 */
%   | else if ( follows(A, G), follows(G, H) )
%   | | then if ( recursion_accounttype(H, B), follows(H, G) )
%   | | | then return 0.6352048066887168;  // std dev = 0.588, 32.000 (wgt'ed) examples reached here.  /* #pos=32 */
%   | | | else return -0.13683713824159424;  // std dev = 0.862, 60.000 (wgt'ed) examples reached here.  /* #neg=59 #pos=1 */
%   | | else if ( follows(A, I) )
%   | | | then return 0.359518141903202;  // std dev = 1.313, 7.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=4 */
%   | | | else return 0.12766661145101382;  // std dev = 2.687, 32.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=11 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( tweets(C, E), follows(C, D) )
%   | | then return 0.3260717673474579;  // std dev = 0.080, 80.000 (wgt'ed) examples reached here.  /* #pos=80 */
%   | | else return 0.07780327613453467;  // std dev = 0.869, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | else return 0.058068715482079515;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   else if ( follows(A, F), recursion_accounttype(F, B) )
%   | then if ( follows(G, A) )
%   | | then return 0.46838002597464073;  // std dev = 0.217, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return 0.20265776847089226;  // std dev = 0.334, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | | then return 0.488040650380445;  // std dev = 1.056, 19.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=17 */
%   | | | else return -0.10146712531863136;  // std dev = 0.125, 207.000 (wgt'ed) examples reached here.  /* #neg=207 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.043245399822693965;  // std dev = 2.971, 96.000 (wgt'ed) examples reached here.  /* #neg=71 #pos=25 */
%   | | | else return 0.14902534437517492;  // std dev = 3.000, 38.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=15 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(C, D), follows(E, C) )
%   | then return 0.23526094294366104;  // std dev = 0.149, 82.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=80 */
%   | else return 0.33811936236430185;  // std dev = 0.074, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( follows(F, A) )
%   | then if ( follows(G, F), recursion_accounttype(G, B) )
%   | | then if ( follows(A, G), tweets(G, H) )
%   | | | then return 0.12286629134443247;  // std dev = 0.819, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return 0.4563489463410791;  // std dev = 0.286, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else return -0.09475001577508593;  // std dev = 0.076, 214.000 (wgt'ed) examples reached here.  /* #neg=212 #pos=2 */
%   | else if ( tweets(A, I) )
%   | | then if ( tweets(J, I), recursion_accounttype(J, B) )
%   | | | then return 0.48968628848121504;  // std dev = 1.176, 26.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=25 */
%   | | | else return -0.16423768460761248;  // std dev = 0.380, 44.000 (wgt'ed) examples reached here.  /* #neg=44 */
%   | | else if ( follows(A, K), follows(K, L) )
%   | | | then return 0.05818092753182602;  // std dev = 2.094, 43.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=14 */
%   | | | else return 0.019401419566890697;  // std dev = 2.514, 30.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=9 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(C, D) )
%   | then if ( recursion_accounttype(D, B) )
%   | | then return 0.2201596837447154;  // std dev = 0.090, 38.000 (wgt'ed) examples reached here.  /* #pos=38 */
%   | | else return 0.13351206167420962;  // std dev = 0.280, 32.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=29 */
%   | else if ( follows(A, E), tweets(A, F) )
%   | | then return -0.10800133210700658;  // std dev = 0.780, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( tweets(A, G) )
%   | | | then return 0.1386944784276551;  // std dev = 0.964, 14.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=13 */
%   | | | else return 0.21653709376101193;  // std dev = 0.016, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( follows(H, A) )
%   | then return -0.050717890263170744;  // std dev = 0.132, 261.000 (wgt'ed) examples reached here.  /* #neg=238 #pos=23 */
%   | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | then return 0.2145571804832944;  // std dev = 0.084, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.020285625376495534;  // std dev = 2.440, 75.000 (wgt'ed) examples reached here.  /* #neg=56 #pos=19 */
%   | | | else return 0.07636270167414085;  // std dev = 3.023, 61.000 (wgt'ed) examples reached here.  /* #neg=40 #pos=21 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(D, C) )
%   then if ( recursion_accounttype(D, B) )
%   | then if ( recursion_accounttype(C, B) )
%   | | then return 0.17803574743067607;  // std dev = 0.109, 84.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=83 */
%   | | else return 0.3473821964367315;  // std dev = 0.069, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | else return -0.07725463914277537;  // std dev = 0.051, 218.000 (wgt'ed) examples reached here.  /* #neg=216 #pos=2 */
%   else if ( follows(A, E), recursion_accounttype(E, B) )
%   | then if ( follows(A, F), follows(F, E) )
%   | | then return 0.18211215054875599;  // std dev = 0.080, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else return 0.01518198450265501;  // std dev = 0.502, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else if ( follows(A, G), follows(G, H) )
%   | | then if ( recursion_accounttype(H, B) )
%   | | | then return 0.41268376500898546;  // std dev = 1.063, 27.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=26 */
%   | | | else return -0.13548911117842827;  // std dev = 0.174, 69.000 (wgt'ed) examples reached here.  /* #neg=69 */
%   | | else if ( follows(A, I) )
%   | | | then return 0.3147607102951812;  // std dev = 1.075, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | | | else return 0.04600890806065445;  // std dev = 2.586, 33.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=11 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.1655666873830782;  // std dev = 0.136, 85.000 (wgt'ed) examples reached here.  /* #pos=85 */
%   else if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(E, A) )
%   | | then return 0.2831401233257606;  // std dev = 0.212, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return -0.02881881023613041;  // std dev = 0.385, 10.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   | else if ( follows(F, A) )
%   | | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | | then return 0.29372078785644967;  // std dev = 0.327, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | | else return -0.07552358461011863;  // std dev = 0.101, 230.000 (wgt'ed) examples reached here.  /* #neg=230 */
%   | | else if ( follows(A, H), follows(H, I) )
%   | | | then return 0.03151978783645048;  // std dev = 1.991, 81.000 (wgt'ed) examples reached here.  /* #neg=56 #pos=25 */
%   | | | else return -0.04521909223324965;  // std dev = 3.150, 53.000 (wgt'ed) examples reached here.  /* #neg=38 #pos=15 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, C), tweets(A, D) )
%   | then return 0.11859074539082289;  // std dev = 0.139, 47.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=46 */
%   | else return 0.14971753563088053;  // std dev = 0.100, 39.000 (wgt'ed) examples reached here.  /* #pos=39 */
%   else if ( follows(E, A) )
%   | then if ( follows(F, E), recursion_accounttype(F, B) )
%   | | then if ( follows(A, F), follows(E, F) )
%   | | | then return 0.019051946032442802;  // std dev = 0.716, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return 0.23168835863601672;  // std dev = 0.255, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else return -0.07085837224419418;  // std dev = 0.071, 195.000 (wgt'ed) examples reached here.  /* #neg=193 #pos=2 */
%   | else if ( tweets(A, G) )
%   | | then if ( tweets(H, G), recursion_accounttype(H, B) )
%   | | | then return 0.34113517375741503;  // std dev = 0.842, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | | | else return -0.14267767169593304;  // std dev = 0.457, 52.000 (wgt'ed) examples reached here.  /* #neg=52 */
%   | | else if ( follows(A, I) )
%   | | | then return 0.027607802795162693;  // std dev = 1.907, 46.000 (wgt'ed) examples reached here.  /* #neg=30 #pos=16 */
%   | | | else return 0.07959739941567552;  // std dev = 2.103, 19.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=7 */


Results
   AUC ROC   = 0.992818
   AUC PR    = 0.40054
   CLL	      = -0.126204
   Precision = 0.339943 at threshold = 0.5
   Recall    = 0.952381
   F1        = 0.501044


Total learning time: 29.773135900497437 seconds
Total inference time: 21.98 seconds
AUC ROC: 0.992818


Dataset: 7_yeast_twitter, Fold: 2, Type: Scratch (RDN-B), Time: 00:21:01
{'AUC ROC': 0.992818, 'AUC PR': 0.40054, 'CLL': -0.126204, 'Precision': [0.339943, 0.5], 'Recall': 0.952381, 'F1': 0.501044, 'Learning time': 29.773135900497437, 'Inference time': 21.98}


